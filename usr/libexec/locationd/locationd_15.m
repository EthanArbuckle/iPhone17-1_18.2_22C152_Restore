void sub_100A10AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100A13684((void ***)va);
  _Unwind_Resume(a1);
}

void sub_100A10AF0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  v20 = 0;
  v21 = 0;
  uint64_t v22 = 0;
  *(_OWORD *)v17 = 0u;
  long long v18 = 0u;
  int v19 = 0;
  if (*(unsigned char *)(a1 + 44))
  {
    v17[0] = (void *)0x4072C00000000000;
    sub_1000FB43C((char *)&v20, 0, 0, 0);
    *(void *)buf = 4;
    sub_1002DD194((char *)&v17[1], (char *)buf, (uint64_t)v25, 1uLL);
  }
  else
  {
    *(void *)buf = 0;
    v25[0] = 0;
    v25[1] = 0;
    sub_100A13B48((uint64_t)&__p, *(void **)a2, (void *)(a2 + 8), (uint64_t)buf);
    __p = 0;
    v15 = 0;
    uint64_t v16 = 0;
    sub_100A13BD8((uint64_t)v23, *(void **)a3, (void *)(a3 + 8), (uint64_t)&__p);
    v17[0] = (void *)0x4072C00000000000;
    int v19 = 1;
    sub_1000FB43C((char *)&v20, *(char **)buf, v25[0], (v25[0] - *(void *)buf) >> 2);
    sub_1002DD194((char *)&v17[1], (char *)__p, (uint64_t)v15, (v15 - (unsigned char *)__p) >> 3);
    if (__p)
    {
      v15 = __p;
      operator delete(__p);
    }
    if (*(void *)buf)
    {
      v25[0] = *(void *)buf;
      operator delete(*(void **)buf);
    }
  }
  __p = 0;
  v15 = 0;
  uint64_t v16 = 0;
  int v11 = (*(uint64_t (**)(void, void **, void **, double, double))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), v17, &__p, a5, a6);
  if (v11 != 100)
  {
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
    }
    v12 = qword_1024192F8;
    if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Failed to retrieve sessions when building history, %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192F0 != -1) {
        dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
      }
      v23[0] = 67109120;
      v23[1] = v11;
      v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "std::vector<CLCyclingFTPHistory::Session> CLCyclingFTPDataStore::getSessionsInTimeRange(CFAbsoluteTime, CFAbsoluteTime, const std::set<int> &, const std::set<CMWorkoutType> &) const", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    v15 = __p;
  }
  sub_100A10068(a1, (uint64_t *)&__p, a4);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v17[1])
  {
    *(void **)&long long v18 = v17[1];
    operator delete(v17[1]);
  }
}

void sub_100A10E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100A10EB4(&a15);
  _Unwind_Resume(a1);
}

void *sub_100A10EB4(void *a1)
{
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void *sub_100A10EF8(uint64_t a1, uint64_t a2)
{
  v18[0] = (uint64_t)v18;
  v18[1] = (uint64_t)v18;
  v18[2] = 0;
  v4 = *(void **)(a2 + 48);
  v5 = (void *)*v4;
  v6 = (void *)v4[1];
  while (v5 != v6)
  {
    v17[0] = v5[1];
    v17[1] = v5[5];
    v17[2] = 0;
    sub_10140F8E4(v18, (uint64_t)v17);
    v5[6] = v7;
    v5 += 8;
  }
  if (*(void *)(a2 + 32) == 4)
  {
    v8 = *(uint64_t **)(a2 + 48);
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    if (*v8 == v10)
    {
      BOOL v11 = 1;
    }
    else
    {
      do
      {
        *(double *)(v9 + 56) = sub_1013EF9CC(v9, *(float *)(a1 + 60));
        v9 += 64;
      }
      while (v9 != v10);
      BOOL v11 = *(void *)(a2 + 32) == 4;
    }
    if (*(unsigned char *)(a1 + 44)) {
      BOOL v12 = !v11;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12)
    {
      v14 = *(uint64_t **)(a2 + 48);
      uint64_t v15 = *v14;
      uint64_t v16 = v14[1];
      while (v15 != v16)
      {
        *(float *)(v15 + 32) = sub_1013EF9F8(v15, *(float *)(a1 + 60));
        v15 += 64;
      }
    }
  }
  return sub_1003B2350(v18);
}

void sub_100A1100C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1003B2350((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100A11028(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  BOOL v12 = operator new(0x30uLL);
  v12[1] = 0;
  v12[2] = 0;
  v12[3] = 0;
  void *v12 = off_1022D9E70;
  v12[4] = 0;
  v12[5] = 0;
  *a4 = v12 + 3;
  a4[1] = v12;
  sub_100A10AF0(a1, a2, a3, (uint64_t *)&v13, a5, a6);
  sub_100A13D0C(v12 + 3);
  *(_OWORD *)(v12 + 3) = v13;
  v12[5] = v14;
  uint64_t v14 = 0;
  long long v13 = 0uLL;
  uint64_t v15 = (void **)&v13;
  sub_100A13684(&v15);
}

void sub_100A11104(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

void *sub_100A11118(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void, void, double, double))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24), *(void *)(a2 + 48), *(double *)(a2 + 16), *(double *)(a2 + 24));

  return sub_100A10EF8(a1, a2);
}

void sub_100A11184(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = (const unsigned __int8 *)(a2 + 64);
  uint64_t v8 = sub_101014448(*(void *)(a2 + 112), *(void *)(a2 + 120));
  unint64_t v9 = *(void *)(a1 + 176) & 0xFFFFFFFFFFFFFFFELL;
  if (v9 == 4) {
    *(unsigned char *)(a1 + 113) = 1;
  }
  memset(out, 0, 37);
  uuid_unparse(v7, out);
  if (qword_1024192F0 != -1) {
    dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
  }
  uint64_t v10 = qword_1024192F8;
  if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
  {
    double v11 = *(double *)a2;
    uint64_t v12 = *(void *)(a2 + 8);
    *(_DWORD *)buf = 134219010;
    uint64_t v21 = v8;
    __int16 v22 = 2048;
    uint64_t v23 = v6;
    __int16 v24 = 2048;
    double v25 = v11;
    __int16 v26 = 2048;
    uint64_t v27 = v12;
    __int16 v28 = 2080;
    v29 = out;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "feed workout event, workout type: %ld, event type, %ld, start time, %f end time, %f, session Id, %s", buf, 0x34u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
    }
    long long v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLCyclingFTPDataStore::WorkoutEventInfo CLCyclingFTPDataStore::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  switch(v6)
  {
    case 13:
      goto LABEL_34;
    case 14:
    case 18:
      if (v8 == 33)
      {
        if (qword_1024192F0 != -1) {
          dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
        }
        long long v13 = qword_1024192F8;
        if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "ftp calculation in multi sport in transition.", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024192F0 != -1) {
            dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
          }
          int v19 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLCyclingFTPDataStore::WorkoutEventInfo CLCyclingFTPDataStore::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v19);
          if (v19 != (char *)buf) {
LABEL_43:
          }
            free(v19);
        }
      }
      else if (v8 == *(void *)(a1 + 176))
      {
        if (qword_1024192F0 != -1) {
          dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
        }
        v17 = qword_1024192F8;
        if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "ftp calculation in multi sport, go back to the same workout.", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024192F0 != -1) {
            dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
          }
          int v19 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLCyclingFTPDataStore::WorkoutEventInfo CLCyclingFTPDataStore::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v19);
          if (v19 != (char *)buf) {
            goto LABEL_43;
          }
        }
      }
      else
      {
        if (v9 == 4) {
          sub_100A1182C(a1, 1, *(double *)a2);
        }
LABEL_34:
        sub_100A12270(a1, v7, v8, *(double *)a2);
      }
LABEL_15:
      *(_WORD *)a3 = *(_WORD *)(a1 + 112);
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 8) = 0;
      sub_1008B7A58((void *)(a3 + 8), *(const void **)(a1 + 120), *(void *)(a1 + 128), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 3));
      return;
    case 15:
      *(unsigned char *)(a1 + 112) = 1;
      sub_100A1182C(a1, v9 == 4, *(double *)(a2 + 8));
      *(_WORD *)a3 = *(_WORD *)(a1 + 112);
      uint64_t v14 = *(const void **)(a1 + 120);
      uint64_t v15 = *(void *)(a1 + 128);
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 8) = 0;
      sub_1008B7A58((void *)(a3 + 8), v14, v15, 0xCCCCCCCCCCCCCCCDLL * ((v15 - (uint64_t)v14) >> 3));
      *(_WORD *)(a1 + 112) = 0;
      uint64_t v16 = *(void **)(a1 + 120);
      if (v16)
      {
        *(void *)(a1 + 128) = v16;
        operator delete(v16);
      }
      *(void *)(a1 + 120) = 0;
      *(void *)(a1 + 128) = 0;
      *(void *)(a1 + 136) = 0;
      *(_OWORD *)(a1 + 144) = 0u;
      *(_OWORD *)(a1 + 160) = 0u;
      *(void *)(a1 + 176) = 0;
      return;
    default:
      if (v9 == 4 && v6 == 2)
      {
        *(unsigned char *)(a1 + 184) = 1;
      }
      else if (v9 == 4 && v6 == 3)
      {
        *(unsigned char *)(a1 + 184) = 0;
      }
      goto LABEL_15;
  }
}

void sub_100A1182C(uint64_t a1, int a2, double a3)
{
  if (a2)
  {
    v5 = (_OWORD *)(a1 + 144);
    (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 8) + 40))(&v69);
    memset(out, 0, 37);
    uuid_unparse((const unsigned __int8 *)(a1 + 144), out);
    if (v76)
    {
      *(_OWORD *)v62 = v69;
      *(void *)&v62[16] = v70;
      double v6 = v71;
      long long v46 = v73;
      long long v47 = v74;
      uint64_t v48 = v75;
      if (v72 != 0.0)
      {
        if (qword_1024192F0 != -1) {
          dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
        }
        uint64_t v7 = qword_1024192F8;
        if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = out;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = a3;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Looks like there was a crash for sessionid, %s, around time, %f", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024192F0 != -1) {
            dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
          }
          int v58 = 136315394;
          v59 = out;
          __int16 v60 = 2048;
          double v61 = a3;
          v43 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLCyclingFTPDataStore::finishSession(const CFAbsoluteTime, BOOL)", "%s\n", v43);
          if (v43 != buf) {
            free(v43);
          }
        }
        *(void *)(a1 + 176) = v46;
      }
      if (*(double *)(a1 + 160) != v6)
      {
        if (qword_1024192F0 != -1) {
          dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
        }
        uint64_t v8 = qword_1024192F8;
        if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = out;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = a3;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Looks like there was a crash for sessionid, %s, before time, %f", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024192F0 != -1) {
            dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
          }
          int v58 = 136315394;
          v59 = out;
          __int16 v60 = 2048;
          double v61 = a3;
          v44 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLCyclingFTPDataStore::finishSession(const CFAbsoluteTime, BOOL)", "%s\n", v44);
          if (v44 != buf) {
            free(v44);
          }
        }
        *(double *)(a1 + 160) = v6;
        *(void *)(a1 + 176) = v46;
      }
      *(double *)(a1 + 168) = a3;
      double v9 = *(float *)(a1 + 72);
      double v10 = *(float *)(a1 + 76);
      double v11 = *(float *)(a1 + 68) * -0.699999988 + 208.0;
      double v12 = v11 + -44.0;
      if (!*(unsigned char *)(a1 + 96)) {
        double v12 = *(float *)(a1 + 68) * -0.699999988 + 208.0;
      }
      if (v12 > v10) {
        double v10 = v12;
      }
      if (v10 < v11) {
        double v11 = v10;
      }
      uint64_t v13 = *(void *)(a1 + 8);
      long long v49 = *(_OWORD *)v62;
      uint64_t v50 = *(void *)&v62[16];
      double v51 = v6;
      double v52 = a3;
      long long v53 = v46;
      double v54 = v11;
      double v55 = v9;
      long long v56 = v47;
      uint64_t v57 = v48;
      if (((*(uint64_t (**)(uint64_t, long long *))(*(void *)v13 + 48))(v13, &v49) & 1) == 0)
      {
        if (qword_1024192F0 != -1) {
          dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
        }
        uint64_t v14 = qword_1024192F8;
        if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = out;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = a3;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Could not update the end time for the session in the db. sessionid, %s, endTime, %f", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024192F0 != -1) {
            dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
          }
          int v58 = 136315394;
          v59 = out;
          __int16 v60 = 2048;
          double v61 = a3;
          v45 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLCyclingFTPDataStore::finishSession(const CFAbsoluteTime, BOOL)", "%s\n", v45);
          if (v45 != buf) {
            free(v45);
          }
        }
      }
      if (qword_1024192F0 != -1) {
        dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
      }
      uint64_t v15 = qword_1024192F8;
      if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = out;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = a3;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "The cycling session is added to the sessions. sessionid, %s, at time, %f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024192F0 != -1) {
          dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
        }
        int v58 = 136315394;
        v59 = out;
        __int16 v60 = 2048;
        double v61 = a3;
        v42 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCyclingFTPDataStore::finishSession(const CFAbsoluteTime, BOOL)", "%s\n", v42);
        if (v42 != buf) {
          free(v42);
        }
      }
      long long v16 = *(_OWORD *)(a1 + 160);
      *(_OWORD *)buf = *v5;
      *(_OWORD *)&buf[16] = v16;
      v67[0] = *(void *)(a1 + 176);
      unint64_t v17 = *(void *)(a1 + 136);
      unint64_t v18 = *(void *)(a1 + 128);
      if (v18 >= v17)
      {
        uint64_t v28 = *(void *)(a1 + 120);
        unint64_t v29 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v28) >> 3);
        unint64_t v30 = v29 + 1;
        if (v29 + 1 > 0x666666666666666) {
          sub_1001D7FD4();
        }
        unint64_t v31 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v28) >> 3);
        if (2 * v31 > v30) {
          unint64_t v30 = 2 * v31;
        }
        if (v31 >= 0x333333333333333) {
          unint64_t v32 = 0x666666666666666;
        }
        else {
          unint64_t v32 = v30;
        }
        if (v32) {
          v33 = (char *)sub_1002E5328(a1 + 136, v32);
        }
        else {
          v33 = 0;
        }
        v34 = &v33[40 * v29];
        v35 = &v33[40 * v32];
        *(_OWORD *)v34 = *(_OWORD *)buf;
        *((_OWORD *)v34 + 1) = *(_OWORD *)&buf[16];
        *((void *)v34 + 4) = v67[0];
        uint64_t v21 = v34 + 40;
        v37 = *(char **)(a1 + 120);
        v36 = *(char **)(a1 + 128);
        if (v36 != v37)
        {
          do
          {
            long long v38 = *(_OWORD *)(v36 - 40);
            long long v39 = *(_OWORD *)(v36 - 24);
            *((void *)v34 - 1) = *((void *)v36 - 1);
            *(_OWORD *)(v34 - 24) = v39;
            *(_OWORD *)(v34 - 40) = v38;
            v34 -= 40;
            v36 -= 40;
          }
          while (v36 != v37);
          v36 = *(char **)(a1 + 120);
        }
        *(void *)(a1 + 120) = v34;
        *(void *)(a1 + 128) = v21;
        *(void *)(a1 + 136) = v35;
        if (v36) {
          operator delete(v36);
        }
      }
      else
      {
        long long v19 = *v5;
        long long v20 = *(_OWORD *)(a1 + 160);
        *(void *)(v18 + 32) = *(void *)(a1 + 176);
        *(_OWORD *)unint64_t v18 = v19;
        *(_OWORD *)(v18 + 16) = v20;
        uint64_t v21 = (char *)(v18 + 40);
      }
      *(void *)(a1 + 128) = v21;
    }
    else
    {
      if (qword_1024192F0 != -1) {
        dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
      }
      __int16 v22 = qword_1024192F8;
      if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v23 = *(void *)(a1 + 160);
        uint64_t v24 = *(void *)(a1 + 176);
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = out;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v23;
        *(_WORD *)&buf[22] = 2048;
        *(double *)&buf[24] = a3;
        LOWORD(v67[0]) = 2048;
        *(void *)((char *)v67 + 2) = v24;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "The session was ended but there is no information about the start of the session in the db. sessionid, %s, startTime, %f, end time, %f, workout type: %ld", buf, 0x2Au);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024192F0 != -1) {
          dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
        }
        uint64_t v25 = *(void *)(a1 + 160);
        uint64_t v26 = *(void *)(a1 + 176);
        *(_DWORD *)v62 = 136315906;
        *(void *)&v62[4] = out;
        *(_WORD *)&v62[12] = 2048;
        *(void *)&v62[14] = v25;
        *(_WORD *)&v62[22] = 2048;
        double v63 = a3;
        __int16 v64 = 2048;
        uint64_t v65 = v26;
        uint64_t v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLCyclingFTPDataStore::finishSession(const CFAbsoluteTime, BOOL)", "%s\n", v27);
        if (v27 != buf) {
          free(v27);
        }
      }
    }
  }
  v41 = *(void **)(a1 + 200);
  v40 = (void *)(a1 + 200);
  *(v40 - 3) = 0;
  *(_OWORD *)(v40 - 5) = 0u;
  *(_OWORD *)(v40 - 7) = 0u;
  sub_1000F5BB0((uint64_t)(v40 - 1), v41);
  *(v40 - 1) = v40;
  void *v40 = 0;
  v40[1] = 0;
}

void sub_100A12270(uint64_t a1, const unsigned __int8 *a2, uint64_t a3, double a4)
{
  *(unsigned char *)(a1 + 184) = 0;
  uuid_copy((unsigned __int8 *)(a1 + 144), a2);
  *(void *)(a1 + 176) = a3;
  *(void *)a1 = 0;
  if ((a3 & 0xFFFFFFFFFFFFFFFELL) == 4)
  {
    (*(void (**)(void *__return_ptr))(**(void **)(a1 + 8) + 40))(v23);
    if (v24)
    {
      a4 = *(double *)&v23[3];
    }
    else
    {
      uuid_copy(v13, a2);
      double v14 = a4;
      uint64_t v15 = 0;
      uint64_t v16 = a3;
      int v20 = -1082130432;
      int v22 = -1082130432;
      uint64_t v17 = 0;
      double v8 = *(float *)(a1 + 68) * -0.699999988 + 208.0;
      double v9 = *(float *)(a1 + 76);
      double v10 = v8 + -44.0;
      if (!*(unsigned char *)(a1 + 96)) {
        double v10 = *(float *)(a1 + 68) * -0.699999988 + 208.0;
      }
      if (v10 > v9) {
        double v9 = v10;
      }
      if (v9 < v8) {
        double v8 = v9;
      }
      double v11 = *(float *)(a1 + 72);
      double v18 = v8;
      double v19 = v11;
      uint64_t v21 = 0;
      (*(void (**)(void, uint64_t *))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), &v12);
    }
  }
  *(double *)(a1 + 160) = a4;
}

uint64_t sub_100A123F0(uint64_t a1)
{
  __p = 0;
  double v9 = 0;
  double v10 = 0;
  int v2 = *(_DWORD *)(a1 + 40);
  v3 = sub_1000DA5D8((uint64_t)&v10, 1uLL);
  *(double *)v3 = (double)v2;
  v3[1] = 0x7FEFFFFFFFFFFFFFLL;
  *((unsigned char *)v3 + 16) = 0;
  __p = v3;
  double v10 = (char *)&v3[3 * v4];
  double v9 = v3 + 3;
  uint64_t v5 = (*(uint64_t (**)(void, void **))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), &__p);
  uint64_t v6 = (*(uint64_t (**)(void, void **))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), &__p);
  if (__p)
  {
    double v9 = __p;
    operator delete(__p);
  }
  return v6 + v5;
}

void sub_100A12514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100A12538(uint64_t a1, const unsigned __int8 *a2)
{
  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 8) + 40))(v9);
  if (v11) {
    return v10 != -1.0;
  }
  memset(out, 0, 37);
  uuid_unparse(a2, out);
  if (qword_1024192F0 != -1) {
    dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
  }
  uint64_t v4 = qword_1024192F8;
  if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v7 = out;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "There is no session to calculate the ftp! session id, %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCyclingFTPDataStore::doesSessionHaveFtp(const unsigned char *)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return 0;
}

double sub_100A12748(uint64_t a1, double a2, double a3)
{
  (*(void (**)(void, double))(**(void **)(a1 + 8) + 72))(*(void *)(a1 + 8), a3);
  if (v7 == 0.0) {
    double v6 = (*(double (**)(void, double))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8), a3);
  }
  double v8 = v6;
  double v9 = v7;
  double v10 = (a3 - v7) / 86400.0;
  if (v7 != 0.0 && ((double v11 = v6 + -2.0, v10 >= 0.0) ? (v12 = v11 > a2) : (v12 = 0), v12))
  {
    double v13 = v8 * (v10 * -0.00714285714 + 1.0);
    double v14 = a2 * 0.09 * v10 + v8 * (v10 * -0.09 + 1.0);
    if (v13 >= a2) {
      double v15 = v8 * (v10 * -0.00714285714 + 1.0);
    }
    else {
      double v15 = a2;
    }
    if (v14 <= v13) {
      double v16 = v8 * (v10 * -0.00714285714 + 1.0);
    }
    else {
      double v16 = a2 * 0.09 * v10 + v8 * (v10 * -0.09 + 1.0);
    }
    if (v14 >= a2) {
      double v17 = v16;
    }
    else {
      double v17 = v15;
    }
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
    }
    double v18 = qword_1024192F8;
    if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134220288;
      double v24 = a2;
      __int16 v25 = 2048;
      double v26 = v8;
      __int16 v27 = 2048;
      double v28 = v9;
      __int16 v29 = 2048;
      double v30 = v10;
      __int16 v31 = 2048;
      double v32 = a2 * 0.09 * v10 + v8 * (v10 * -0.09 + 1.0);
      __int16 v33 = 2048;
      double v34 = v8 * (v10 * -0.00714285714 + 1.0);
      __int16 v35 = 2048;
      uint64_t v36 = 0x4000000000000000;
      __int16 v37 = 2048;
      uint64_t v38 = 0x3F7D41D41D41D41ELL;
      __int16 v39 = 2048;
      uint64_t v40 = 0x3FB70A3D70A3D70ALL;
      __int16 v41 = 2048;
      double v42 = v17;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "EstimatedFTP, %f, lastFtp, %f, LastFtpTime, %f, daysDifference, %f, suggestedDecayedFtp, %f, maxAllowedDecayedFTP, %f, kMinimumWattDeltaToUseFTPDecay, %f, kMaxFTPDecayRatePerDay, %f, kBlendCoefficientForFTPDecay, %f, smoothedFtp, %f", buf, 0x66u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192F0 != -1) {
        dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
      }
      uint64_t v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "const double CLCyclingFTPDataStore::decayEstimatedFTP(const double, const CFAbsoluteTime)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
    return v17;
  }
  else
  {
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
    }
    double v19 = qword_1024192F8;
    if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218752;
      double v24 = a2;
      __int16 v25 = 2048;
      double v26 = v8;
      __int16 v27 = 2048;
      double v28 = v9;
      __int16 v29 = 2048;
      double v30 = v10;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "There is a no need to smooth the ftp. Current ftp %f last ftp, %f. Last ftp time, %f, days Difference, %f", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192F0 != -1) {
        dispatch_once(&qword_1024192F0, &stru_1022D9BF0);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "const double CLCyclingFTPDataStore::decayEstimatedFTP(const double, const CFAbsoluteTime)", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
  }
  return a2;
}

uint64_t sub_100A12C6C(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4 = *(long long **)(a2 + 8);
  uint64_t v5 = *(long long **)(a2 + 16);
  if (v4 == v5) {
    return 1;
  }
  LODWORD(v9) = 1;
  do
  {
    long long v10 = *v4;
    long long v11 = v4[1];
    uint64_t v14 = *((void *)v4 + 4);
    v13[0] = v10;
    v13[1] = v11;
    uint64_t v9 = v9 & (*(unsigned int (**)(void, _OWORD *, double, double, double))(**(void **)(a1 + 8) + 64))(*(void *)(a1 + 8), v13, a3, a4, *((double *)&v11 + 1));
    uint64_t v4 = (long long *)((char *)v4 + 40);
  }
  while (v4 != v5);
  return v9;
}

void sub_100A12D4C(id a1)
{
  qword_1024192F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CyclingPower");
}

void *sub_100A12D7C@<X0>(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x198uLL);
  result = sub_100A12DD8(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100A12DC4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100A12DD8(void *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022D9C20;
  sub_100EF5F60(a1 + 3, *a2);
  return a1;
}

void sub_100A12E24(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100A12E38(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022D9C20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100A12E58(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022D9C20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100A12EAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

uint64_t sub_100A12ED4@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x30uLL);
  uint64_t result = sub_100A12F30((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_100A12F1C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100A12F30(uint64_t a1, uint64_t *a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = off_1022D9C70;
  uint64_t v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  *(_OWORD *)a2 = 0u;
  *(void *)(a1 + 24) = off_1022D9CC0;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_1000DB0A0(v3);
  }
  return a1;
}

void sub_100A12FB8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022D9C70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100A12FD8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022D9C70;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100A1302C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_100A13054(void *a1)
{
  *a1 = off_1022D9CC0;
  int v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  return a1;
}

void sub_100A130A0(void *a1)
{
  *a1 = off_1022D9CC0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_1000DB0A0(v1);
  }

  operator delete();
}

uint64_t sub_100A1310C(uint64_t a1)
{
  return sub_100EF6338(*(void *)(a1 + 8));
}

uint64_t sub_100A13114(uint64_t a1, void *a2)
{
  return sub_100EF6C64(*(void *)(a1 + 8), a2);
}

uint64_t sub_100A1311C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

void *sub_100A13144@<X0>(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x1D0uLL);
  uint64_t result = sub_100A131A0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100A1318C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100A131A0(void *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022D9D08;
  sub_100D908F4(a1 + 3, *a2);
  return a1;
}

void sub_100A131EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100A13200(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022D9D08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100A13220(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022D9D08;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100A13274(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

uint64_t sub_100A1329C@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x30uLL);
  uint64_t result = sub_100A132F8((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_100A132E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100A132F8(uint64_t a1, uint64_t *a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = off_1022D9D58;
  uint64_t v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  *(_OWORD *)a2 = 0u;
  *(void *)(a1 + 24) = off_1022D9DA8;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_1000DB0A0(v3);
  }
  return a1;
}

void sub_100A13380(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022D9D58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100A133A0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022D9D58;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100A133F4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_100A1341C(void *a1)
{
  *a1 = off_1022D9DA8;
  int v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  return a1;
}

void sub_100A13468(void *a1)
{
  *a1 = off_1022D9DA8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_1000DB0A0(v1);
  }

  operator delete();
}

uint64_t sub_100A134D4(uint64_t a1)
{
  return sub_100D90D4C(*(void *)(a1 + 8));
}

uint64_t sub_100A134DC(uint64_t a1, uint64_t a2, void *a3, double a4, double a5)
{
  return sub_100D91CB4(*(void *)(a1 + 8), a2, a3, a4, a5);
}

uint64_t sub_100A134E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

uint64_t sub_100A1350C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_100D912C0(*(void *)(a1 + 8), a2);
}

uint64_t sub_100A13514(uint64_t a1, _OWORD *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  long long v3 = a2[3];
  v7[2] = a2[2];
  v7[3] = v3;
  long long v4 = a2[5];
  v7[4] = a2[4];
  v7[5] = v4;
  long long v5 = a2[1];
  v7[0] = *a2;
  v7[1] = v5;
  return sub_100D94260(v2, (uint64_t)v7);
}

uint64_t sub_100A13580(uint64_t a1, const unsigned __int8 *a2)
{
  return sub_100D9448C(*(void *)(a1 + 8), a2);
}

uint64_t sub_100A13588(uint64_t a1, const unsigned __int8 *a2)
{
  return sub_100D94694(*(void *)(a1 + 8), a2);
}

double sub_100A13590(uint64_t a1)
{
  return sub_100D948DC(*(void *)(a1 + 8));
}

double sub_100A13598(uint64_t a1)
{
  return sub_100D94BA0(*(void *)(a1 + 8));
}

uint64_t *sub_100A135A0(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100A135F8(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_100A135E0(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100A135F8(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    long long v4 = a2;
    long long v5 = (uint64_t **)result;
    double v6 = result + 1;
    do
    {
      uint64_t result = sub_1005D9D30(v5, v6, v4 + 4, v4 + 4);
      double v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          double v8 = v7;
          double v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          double v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          long long v4 = v8;
        }
        while (!v9);
      }
      long long v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

void sub_100A13684(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_100A136D8((uint64_t *)v2);
    long long v3 = **a1;
    operator delete(v3);
  }
}

void sub_100A136D8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 88)
  {
    long long v4 = *(std::__shared_weak_count **)(i - 32);
    if (v4) {
      sub_1000DB0A0(v4);
    }
  }
  a1[1] = v2;
}

void sub_100A13724(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022D9E20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100A13744(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022D9E20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100A13798(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

uint64_t sub_100A137B4(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL) {
    sub_1001D7FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1745D1745D1745DLL) {
    unint64_t v9 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v9 = v5;
  }
  v19[4] = a1 + 2;
  if (v9) {
    long long v10 = (char *)sub_1000DA8B4(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  long long v11 = &v10[88 * v4];
  v19[0] = v10;
  v19[1] = v11;
  v19[3] = &v10[88 * v9];
  long long v12 = *a2;
  long long v13 = a2[2];
  *((_OWORD *)v11 + 1) = a2[1];
  *((_OWORD *)v11 + 2) = v13;
  *(_OWORD *)long long v11 = v12;
  *((void *)v11 + 6) = *((void *)a2 + 6);
  uint64_t v14 = *((void *)a2 + 7);
  *((void *)v11 + 7) = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  double v15 = &v10[88 * v4];
  long long v16 = a2[4];
  *((void *)v15 + 10) = *((void *)a2 + 10);
  *((_OWORD *)v15 + 4) = v16;
  v19[2] = v11 + 88;
  sub_100A1390C(a1, v19);
  uint64_t v17 = a1[1];
  sub_100A13AC0(v19);
  return v17;
}

void sub_100A138F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100A13AC0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100A1390C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100A13984((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100A13984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    uint64_t v8 = a7 - 88;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 88);
      long long v10 = *(_OWORD *)(a3 - 56);
      *(_OWORD *)(v8 + 16) = *(_OWORD *)(a3 - 72);
      *(_OWORD *)(v8 + 32) = v10;
      *(_OWORD *)uint64_t v8 = v9;
      *(_OWORD *)(v8 + 48) = *(_OWORD *)(a3 - 40);
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      uint64_t v11 = *(void *)(a3 - 8);
      *(_OWORD *)(v8 + 64) = *(_OWORD *)(a3 - 24);
      *(void *)(v8 + 80) = v11;
      *((void *)&v17 + 1) = v8;
      v8 -= 88;
      v7 -= 88;
      a3 -= 88;
    }
    while (a3 != a5);
    uint64_t v12 = v17;
  }
  char v15 = 1;
  sub_100A13A44((uint64_t)v14);
  return v12;
}

uint64_t sub_100A13A44(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100A13A7C(a1);
  }
  return a1;
}

void sub_100A13A7C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 56);
    if (v3) {
      sub_1000DB0A0(v3);
    }
    v1 += 88;
  }
}

void **sub_100A13AC0(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100A13AF4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 88;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 32);
    if (v4)
    {
      sub_1000DB0A0(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 88;
    }
  }
}

void *sub_100A13B48(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v4 = a2;
  uint64_t v10 = a4;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v5 = a3;
  do
  {
    sub_10027DE2C(&v10, (_DWORD *)v4 + 7);
    uint64_t v6 = (void *)v4[1];
    if (v6)
    {
      do
      {
        uint64_t v7 = v6;
        uint64_t v6 = (void *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        uint64_t v7 = (void *)v4[2];
        BOOL v8 = *v7 == (void)v4;
        uint64_t v4 = v7;
      }
      while (!v8);
    }
    uint64_t v4 = v7;
  }
  while (v7 != v5);
  return v5;
}

void *sub_100A13BD8(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v4 = a2;
  uint64_t v10 = a4;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v5 = a3;
  do
  {
    sub_10029CE5C(&v10, v4 + 4);
    uint64_t v6 = (void *)v4[1];
    if (v6)
    {
      do
      {
        uint64_t v7 = v6;
        uint64_t v6 = (void *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        uint64_t v7 = (void *)v4[2];
        BOOL v8 = *v7 == (void)v4;
        uint64_t v4 = v7;
      }
      while (!v8);
    }
    uint64_t v4 = v7;
  }
  while (v7 != v5);
  return v5;
}

void sub_100A13C68(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022D9E70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100A13C88(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022D9E70;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100A13CDC(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  sub_100A13684(&v1);
}

void sub_100A13D0C(uint64_t *a1)
{
  if (*a1)
  {
    sub_100A136D8(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_100A13D48()
{
  if (qword_10248A7F0) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A7F0 + 8))(qword_10248A7F0);
  }
  if (qword_10248A7F8) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A7F8 + 8))(qword_10248A7F8);
  }
  uint64_t result = qword_10248A800;
  if (qword_10248A800)
  {
    uint64_t v1 = *(uint64_t (**)(void))(*(void *)qword_10248A800 + 8);
    return v1();
  }
  return result;
}

void sub_100A13E00(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((byte_10247F8F8 & 1) == 0)
  {
    byte_10247F8F8 = 1;
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPRavenLogEntry.pb.cc", a4);
    sub_1003C30B0(v4, v5, v6, v7);
    operator new();
  }
}

void *sub_100A13F98(void *result)
{
  void *result = off_1022D9EC0;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t sub_100A13FBC(uint64_t result)
{
  *(void *)uint64_t result = off_1022D9FB0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(unsigned char *)(result + 20) = 0;
  *(void *)(result + 24) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 32) = &wireless_diagnostics::google::protobuf::internal::kEmptyString;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  return result;
}

double sub_100A13FF4(uint64_t a1)
{
  *(void *)a1 = off_1022D9F38;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

void sub_100A14020(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 28);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 28))
    {
      *(_DWORD *)(a1 + 28) |= 1u;
      uint64_t v5 = *(void *)(a1 + 8);
      if (!v5) {
        operator new();
      }
      uint64_t v6 = *(void *)(a2 + 8);
      if (!v6) {
        uint64_t v6 = *(void *)(qword_10248A7F0 + 8);
      }
      sub_1003C3D0C(v5, v6);
      int v4 = *(_DWORD *)(a2 + 28);
    }
    if ((v4 & 2) != 0)
    {
      *(_DWORD *)(a1 + 28) |= 2u;
      uint64_t v7 = *(void *)(a1 + 16);
      if (!v7) {
        operator new();
      }
      uint64_t v8 = *(void *)(a2 + 16);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_10248A7F0 + 16);
      }
      sub_100A14988(v7, v8);
    }
  }
}

void sub_100A1417C()
{
}

void *sub_100A141B4(void *result)
{
  if ((void *)qword_10248A7F0 != result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    double result = (void *)v1[2];
    if (result)
    {
      uint64_t v3 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v3();
    }
  }
  return result;
}

void sub_100A14254(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022D9EC0;
  sub_100A141B4(a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100A142A8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022D9EC0;
  sub_100A141B4(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

uint64_t sub_100A14310(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_10248A7F0;
  if (!qword_10248A7F0)
  {
    sub_100A13E00(0, a2, a3, a4);
    return qword_10248A7F0;
  }
  return result;
}

void sub_100A14340()
{
}

uint64_t sub_100A1438C(uint64_t result)
{
  uint64_t v1 = result;
  LOBYTE(v2) = *(unsigned char *)(result + 28);
  if ((_BYTE)v2)
  {
    if (*(unsigned char *)(result + 28))
    {
      uint64_t result = *(void *)(result + 8);
      if (result)
      {
        uint64_t result = sub_1003C4400(result);
        int v2 = *(_DWORD *)(v1 + 28);
      }
    }
    if ((v2 & 2) != 0)
    {
      uint64_t result = *(void *)(v1 + 16);
      if (result) {
        uint64_t result = sub_100A143DC(result);
      }
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return result;
}

uint64_t sub_100A143DC(uint64_t result)
{
  LOBYTE(v1) = *(unsigned char *)(result + 52);
  if ((_BYTE)v1)
  {
    if (*(unsigned char *)(result + 52))
    {
      uint64_t v2 = *(void *)(result + 8);
      if (v2)
      {
        if (*(unsigned char *)(v2 + 36))
        {
          *(void *)(v2 + 8) = 0;
          *(void *)(v2 + 16) = 0;
          *(void *)(v2 + 24) = 0;
        }
        *(_DWORD *)(v2 + 36) = 0;
        int v1 = *(_DWORD *)(result + 52);
      }
    }
    *(_DWORD *)(result + 16) = 0;
    *(unsigned char *)(result + 20) = 0;
    if ((v1 & 8) != 0)
    {
      uint64_t v3 = *(void *)(result + 24);
      if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(unsigned char **)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v3 = 0;
          *(unsigned char *)(v3 + 23) = 0;
        }
      }
    }
    if ((*(unsigned char *)(result + 52) & 0x10) != 0)
    {
      uint64_t v4 = *(void *)(result + 32);
      if ((_UNKNOWN *)v4 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          **(unsigned char **)uint64_t v4 = 0;
          *(void *)(v4 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v4 = 0;
          *(unsigned char *)(v4 + 23) = 0;
        }
      }
    }
    *(void *)(result + 40) = 0;
  }
  *(_DWORD *)(result + 52) = 0;
  return result;
}

uint64_t sub_100A14488(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v5;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_17;
        }
        *(_DWORD *)(a1 + 28) |= 1u;
        uint64_t v8 = *(void *)(a1 + 8);
        if (!v8) {
          operator new();
        }
        unsigned int v27 = 0;
        long long v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v27))return 0; {
        }
          }
        else
        {
          unsigned int v27 = *v9;
          *((void *)this + 1) = v9 + 1;
        }
        int v10 = *((_DWORD *)this + 14);
        int v11 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v10 + 1;
        if (v10 >= v11) {
          return 0;
        }
        int v12 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v27);
        if (!sub_1003C4854(v8, this, v13) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v12);
        int v14 = *((_DWORD *)this + 14);
        BOOL v15 = __OFSUB__(v14, 1);
        int v16 = v14 - 1;
        if (v16 < 0 == v15) {
          *((_DWORD *)this + 14) = v16;
        }
        long long v17 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v17 < *((void *)this + 2) && *v17 == 18)
        {
          *((void *)this + 1) = v17 + 1;
          goto LABEL_29;
        }
      }
      if (TagFallback >> 3 != 2) {
        break;
      }
      int v7 = TagFallback & 7;
      if (v7 != 2) {
        goto LABEL_17;
      }
LABEL_29:
      *(_DWORD *)(a1 + 28) |= 2u;
      uint64_t v18 = *(void *)(a1 + 16);
      if (!v18) {
        operator new();
      }
      unsigned int v28 = 0;
      double v19 = (char *)*((void *)this + 1);
      if ((unint64_t)v19 >= *((void *)this + 2) || *v19 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v28))return 0; {
      }
        }
      else
      {
        unsigned int v28 = *v19;
        *((void *)this + 1) = v19 + 1;
      }
      int v20 = *((_DWORD *)this + 14);
      int v21 = *((_DWORD *)this + 15);
      *((_DWORD *)this + 14) = v20 + 1;
      if (v20 >= v21) {
        return 0;
      }
      int v22 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v28);
      if (!sub_100A15354(v18, this, v23) || !*((unsigned char *)this + 36)) {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v22);
      int v24 = *((_DWORD *)this + 14);
      BOOL v15 = __OFSUB__(v24, 1);
      int v25 = v24 - 1;
      if (v25 < 0 == v15) {
        *((_DWORD *)this + 14) = v25;
      }
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    int v7 = TagFallback & 7;
LABEL_17:
    if (v7 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

void sub_100A14778()
{
}

uint64_t sub_100A1479C(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 28);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(result + 8);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248A7F0 + 8);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
  if ((*(_DWORD *)(v5 + 28) & 2) != 0)
  {
LABEL_7:
    uint64_t v8 = *(void *)(v5 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248A7F0 + 16);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  }
  return result;
}

uint64_t sub_100A1482C(uint64_t a1, unint64_t a2)
{
  if (!*(unsigned char *)(a1 + 28))
  {
    uint64_t v3 = 0;
    goto LABEL_18;
  }
  if ((*(unsigned char *)(a1 + 28) & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((*(unsigned char *)(a1 + 28) & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    uint64_t v4 = *(void *)(qword_10248A7F0 + 8);
  }
  uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1003C5230(v4, a2);
  int v6 = (int)v5;
  if (v5 >= 0x80) {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
  }
  else {
    int v7 = 1;
  }
  uint64_t v3 = (v6 + v7 + 1);
  if ((*(_DWORD *)(a1 + 28) & 2) != 0)
  {
LABEL_12:
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248A7F0 + 16);
    }
    long long v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100A15988(v8, a2);
    int v11 = (int)v9;
    if (v9 >= 0x80) {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    }
    else {
      int v12 = 1;
    }
    uint64_t v3 = (v3 + v11 + v12 + 1);
  }
LABEL_18:
  *(_DWORD *)(a1 + 24) = v3;
  return v3;
}

void sub_100A14900(uint64_t a1, void *lpsrc)
{
  sub_100A14020(a1, (uint64_t)lpsrc);
}

void sub_100A14988(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v15);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 52);
  if (!(_BYTE)v4) {
    return;
  }
  if (*(unsigned char *)(a2 + 52))
  {
    *(_DWORD *)(a1 + 52) |= 1u;
    uint64_t v5 = *(void *)(a1 + 8);
    if (!v5) {
      operator new();
    }
    uint64_t v6 = *(void *)(a2 + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_10248A7F8 + 8);
    }
    sub_100A14C48(v5, v6);
    int v4 = *(_DWORD *)(a2 + 52);
  }
  if ((v4 & 2) != 0)
  {
    unsigned int v7 = *(_DWORD *)(a2 + 16);
    if ((sub_100A14C08(v7) & 1) == 0) {
      sub_101A78EE8();
    }
    *(_DWORD *)(a1 + 52) |= 2u;
    *(_DWORD *)(a1 + 16) = v7;
    int v4 = *(_DWORD *)(a2 + 52);
  }
  if ((v4 & 4) != 0)
  {
    char v8 = *(unsigned char *)(a2 + 20);
    *(_DWORD *)(a1 + 52) |= 4u;
    *(unsigned char *)(a1 + 20) = v8;
    int v4 = *(_DWORD *)(a2 + 52);
    if ((v4 & 8) == 0)
    {
LABEL_15:
      if ((v4 & 0x10) == 0) {
        goto LABEL_16;
      }
LABEL_23:
      int v11 = *(const std::string **)(a2 + 32);
      *(_DWORD *)(a1 + 52) |= 0x10u;
      int v12 = *(std::string **)(a1 + 32);
      if (v12 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v12, v11);
      int v4 = *(_DWORD *)(a2 + 52);
      if ((v4 & 0x20) == 0)
      {
LABEL_17:
        if ((v4 & 0x40) == 0) {
          return;
        }
        goto LABEL_28;
      }
      goto LABEL_26;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_15;
  }
  long long v9 = *(const std::string **)(a2 + 24);
  *(_DWORD *)(a1 + 52) |= 8u;
  unsigned int v10 = *(std::string **)(a1 + 24);
  if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v10, v9);
  int v4 = *(_DWORD *)(a2 + 52);
  if ((v4 & 0x10) != 0) {
    goto LABEL_23;
  }
LABEL_16:
  if ((v4 & 0x20) == 0) {
    goto LABEL_17;
  }
LABEL_26:
  unsigned int v13 = *(_DWORD *)(a2 + 40);
  if (v13 >= 4) {
    sub_101A78EBC();
  }
  *(_DWORD *)(a1 + 52) |= 0x20u;
  *(_DWORD *)(a1 + 40) = v13;
  if ((*(_DWORD *)(a2 + 52) & 0x40) != 0)
  {
LABEL_28:
    unsigned int v14 = *(_DWORD *)(a2 + 44);
    if (v14 >= 3) {
      sub_101A78E90();
    }
    *(_DWORD *)(a1 + 52) |= 0x40u;
    *(_DWORD *)(a1 + 44) = v14;
  }
}

void sub_100A14BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100A14BF0()
{
  return 1;
}

void *sub_100A14BF8@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.Raven.LogEntry");
}

uint64_t sub_100A14C08(unsigned int a1)
{
  uint64_t result = 1;
  if (a1 >= 0x30)
  {
    unsigned int v3 = a1 - 50;
    if (v3 > 0x32 || ((1 << v3) & 0x4001FFFFFFFFFLL) == 0) {
      return 0;
    }
  }
  return result;
}

double sub_100A14C48(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  LOBYTE(v5) = *(unsigned char *)(a2 + 36);
  if ((_BYTE)v5)
  {
    if (*(unsigned char *)(a2 + 36))
    {
      double result = *(double *)(a2 + 8);
      *(_DWORD *)(a1 + 36) |= 1u;
      *(double *)(a1 + 8) = result;
      int v5 = *(_DWORD *)(a2 + 36);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          return result;
        }
        goto LABEL_7;
      }
    }
    else if ((*(unsigned char *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    double result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 36) |= 2u;
    *(double *)(a1 + 16) = result;
    if ((*(_DWORD *)(a2 + 36) & 4) == 0) {
      return result;
    }
LABEL_7:
    double result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 36) |= 4u;
    *(double *)(a1 + 24) = result;
  }
  return result;
}

void sub_100A14D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100A14D34(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022D9F38;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100A14D54(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022D9F38;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_100A14DA8()
{
}

uint64_t sub_100A14DFC(uint64_t result)
{
  if (*(unsigned char *)(result + 36))
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_100A14E14(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  do
  {
    while (1)
    {
      while (1)
      {
        int v5 = (char *)*((void *)this + 1);
        if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v5;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v5 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        unsigned int v7 = TagFallback >> 3;
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v8 = TagFallback & 7;
        if (v8 != 1) {
          goto LABEL_27;
        }
        unint64_t v12 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0) {
          return 0;
        }
        *(void *)(a1 + 8) = v12;
        *(_DWORD *)(a1 + 36) |= 1u;
        long long v9 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v9 < *((void *)this + 2) && *v9 == 17)
        {
          *((void *)this + 1) = v9 + 1;
LABEL_17:
          unint64_t v12 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0) {
            return 0;
          }
          *(void *)(a1 + 16) = v12;
          *(_DWORD *)(a1 + 36) |= 2u;
          unsigned int v10 = (unsigned char *)*((void *)this + 1);
          if ((unint64_t)v10 < *((void *)this + 2) && *v10 == 25)
          {
            *((void *)this + 1) = v10 + 1;
            goto LABEL_21;
          }
        }
      }
      if (v7 == 2)
      {
        int v8 = TagFallback & 7;
        if (v8 != 1) {
          goto LABEL_27;
        }
        goto LABEL_17;
      }
      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_27;
      }
      int v8 = TagFallback & 7;
      if (v8 == 1) {
        break;
      }
LABEL_27:
      if (v8 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
    }
      }
LABEL_21:
    unint64_t v12 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v12) & 1) == 0) {
      return 0;
    }
    *(void *)(a1 + 24) = v12;
    *(_DWORD *)(a1 + 36) |= 4u;
  }
  while (*((void *)this + 1) != *((void *)this + 2)
       || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  uint64_t result = 1;
  *((unsigned char *)this + 36) = 1;
  return result;
}

uint64_t sub_100A14FDC(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 36);
  if ((v5 & 1) == 0)
  {
    if ((v5 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v4 + 16), a3);
    if ((*(_DWORD *)(v4 + 36) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
  int v5 = *(_DWORD *)(v4 + 36);
  if ((v5 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 4) == 0) {
    return result;
  }
LABEL_7:
  double v6 = *(double *)(v4 + 24);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, v6, a3);
}

uint64_t sub_100A15068(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 36);
  if (*(unsigned char *)(a1 + 36))
  {
    unsigned int v2 = ((int)(v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0) {
      v2 += 9;
    }
    if ((v1 & 4) != 0) {
      uint64_t v1 = v2 + 9;
    }
    else {
      uint64_t v1 = v2;
    }
  }
  *(_DWORD *)(a1 + 32) = v1;
  return v1;
}

double sub_100A150A0(uint64_t a1, void *lpsrc)
{
  return sub_100A14C48(a1, (uint64_t)lpsrc);
}

uint64_t sub_100A15128()
{
  return 1;
}

void *sub_100A15130@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.Raven.RavenPlatformInfo.TimeStamp");
}

void *sub_100A15140(void *result)
{
  uint64_t v1 = result[3];
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    operator delete();
  }
  uint64_t v3 = result[4];
  if ((_UNKNOWN *)v3 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v3 != 0)
  {
    if (*(char *)(v3 + 23) < 0) {
      operator delete(*(void **)v3);
    }
    operator delete();
  }
  if ((void *)qword_10248A7F8 != result)
  {
    uint64_t result = (void *)result[1];
    if (result)
    {
      int v5 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v5();
    }
  }
  return result;
}

void sub_100A15238(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022D9FB0;
  sub_100A15140(a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100A1528C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022D9FB0;
  sub_100A15140(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_100A152F4()
{
}

uint64_t sub_100A15354(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_25;
        }
        *(_DWORD *)(a1 + 52) |= 1u;
        uint64_t v8 = *(void *)(a1 + 8);
        if (!v8) {
          operator new();
        }
        unsigned int v37 = 0;
        long long v9 = (char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37))return 0; {
        }
          }
        else
        {
          unsigned int v37 = *v9;
          *((void *)this + 1) = v9 + 1;
        }
        int v19 = *((_DWORD *)this + 14);
        int v20 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v19 + 1;
        if (v19 >= v20) {
          return 0;
        }
        int v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v37);
        if (!sub_100A14E14(v8, this, v22) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
        int v23 = *((_DWORD *)this + 14);
        BOOL v24 = __OFSUB__(v23, 1);
        int v25 = v23 - 1;
        if (v25 < 0 == v24) {
          *((_DWORD *)this + 14) = v25;
        }
        double v26 = (unsigned char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        if ((unint64_t)v26 >= v10 || *v26 != 16) {
          continue;
        }
        int v11 = v26 + 1;
        *((void *)this + 1) = v11;
        goto LABEL_38;
      case 2u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_25;
        }
        int v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
LABEL_38:
        unsigned int v37 = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37);
          if (!result) {
            return result;
          }
          unsigned int v27 = v37;
        }
        else
        {
          unsigned int v27 = *v11;
          *((void *)this + 1) = v11 + 1;
        }
        if (sub_100A14C08(v27))
        {
          *(_DWORD *)(a1 + 52) |= 2u;
          *(_DWORD *)(a1 + 16) = v27;
        }
        __int16 v29 = (unsigned char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        if ((unint64_t)v29 >= v12 || *v29 != 24) {
          continue;
        }
        unsigned int v13 = v29 + 1;
        *((void *)this + 1) = v13;
LABEL_48:
        unsigned int v37 = 0;
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37);
          if (!result) {
            return result;
          }
          unsigned int v30 = v37;
          __int16 v31 = (unsigned char *)*((void *)this + 1);
          unint64_t v12 = *((void *)this + 2);
        }
        else
        {
          unsigned int v30 = *v13;
          __int16 v31 = v13 + 1;
          *((void *)this + 1) = v31;
        }
        *(unsigned char *)(a1 + 20) = v30 != 0;
        int v14 = *(_DWORD *)(a1 + 52) | 4;
        *(_DWORD *)(a1 + 52) = v14;
        if ((unint64_t)v31 >= v12 || *v31 != 34) {
          continue;
        }
        *((void *)this + 1) = v31 + 1;
LABEL_56:
        *(_DWORD *)(a1 + 52) = v14 | 8;
        if (*(_UNKNOWN **)(a1 + 24) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        double v32 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v32 >= *((void *)this + 2) || *v32 != 42) {
          continue;
        }
        *((void *)this + 1) = v32 + 1;
LABEL_62:
        *(_DWORD *)(a1 + 52) |= 0x10u;
        if (*(_UNKNOWN **)(a1 + 32) == &wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!result) {
          return result;
        }
        __int16 v33 = (unsigned char *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        if ((unint64_t)v33 >= v15 || *v33 != 48) {
          continue;
        }
        int v16 = v33 + 1;
        *((void *)this + 1) = v16;
LABEL_68:
        unsigned int v37 = 0;
        if ((unint64_t)v16 >= v15 || *v16 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37);
          if (!result) {
            return result;
          }
          unsigned int v34 = v37;
        }
        else
        {
          unsigned int v34 = *v16;
          *((void *)this + 1) = v16 + 1;
        }
        if (v34 <= 3)
        {
          *(_DWORD *)(a1 + 52) |= 0x20u;
          *(_DWORD *)(a1 + 40) = v34;
        }
        __int16 v35 = (unsigned char *)*((void *)this + 1);
        unint64_t v17 = *((void *)this + 2);
        if ((unint64_t)v35 >= v17 || *v35 != 56) {
          continue;
        }
        uint64_t v18 = v35 + 1;
        *((void *)this + 1) = v18;
LABEL_78:
        unsigned int v37 = 0;
        if ((unint64_t)v18 >= v17 || *v18 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v37);
          if (!result) {
            return result;
          }
          unsigned int v36 = v37;
        }
        else
        {
          unsigned int v36 = *v18;
          *((void *)this + 1) = v18 + 1;
        }
        if (v36 <= 2)
        {
          *(_DWORD *)(a1 + 52) |= 0x40u;
          *(_DWORD *)(a1 + 44) = v36;
        }
        if (*((void *)this + 1) != *((void *)this + 2)
          || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
        {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        break;
      case 3u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_25;
        }
        unsigned int v13 = (char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        goto LABEL_48;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_25;
        }
        int v14 = *(_DWORD *)(a1 + 52);
        goto LABEL_56;
      case 5u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_62;
        }
        goto LABEL_25;
      case 6u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_25;
        }
        int v16 = (char *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        goto LABEL_68;
      case 7u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_25;
        }
        uint64_t v18 = (char *)*((void *)this + 1);
        unint64_t v17 = *((void *)this + 2);
        goto LABEL_78;
      default:
        int v7 = TagFallback & 7;
LABEL_25:
        if (v7 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t sub_100A1587C(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 52);
  if (v6)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_10248A7F8 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 52);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(v5 + 16), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 20), (BOOL)a2, a4);
  int v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
LABEL_16:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(_DWORD *)(v5 + 40), (int)a2, a4);
    if ((*(_DWORD *)(v5 + 52) & 0x40) == 0) {
      return result;
    }
    goto LABEL_17;
  }
LABEL_15:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  int v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x20) != 0) {
    goto LABEL_16;
  }
LABEL_7:
  if ((v6 & 0x40) == 0) {
    return result;
  }
LABEL_17:
  int v8 = *(_DWORD *)(v5 + 44);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v8, (int)a2, a4);
}

uint64_t sub_100A15988(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 52);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_59;
  }
  if ((*(unsigned char *)(a1 + 52) & 1) == 0)
  {
    LODWORD(v4) = 0;
    if ((*(unsigned char *)(a1 + 52) & 2) == 0) {
      goto LABEL_21;
    }
    goto LABEL_15;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (!v5) {
    uint64_t v5 = *(void *)(qword_10248A7F8 + 8);
  }
  int v6 = *(unsigned __int8 *)(v5 + 36);
  if (*(unsigned char *)(v5 + 36))
  {
    int v7 = (v6 << 31 >> 31) & 9;
    if ((v6 & 2) != 0) {
      v7 += 9;
    }
    if ((v6 & 4) != 0) {
      int v6 = v7 + 9;
    }
    else {
      int v6 = v7;
    }
  }
  *(_DWORD *)(v5 + 32) = v6;
  LODWORD(v4) = v6 + 2;
  int v3 = *(_DWORD *)(a1 + 52);
  if ((v3 & 2) != 0)
  {
LABEL_15:
    int v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if ((v8 & 0x80000000) != 0)
    {
      int v9 = 11;
    }
    else if (v8 >= 0x80)
    {
      int v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 52);
    }
    else
    {
      int v9 = 2;
    }
    LODWORD(v4) = v9 + v4;
  }
LABEL_21:
  if ((v3 & 4) != 0) {
    uint64_t v4 = (v4 + 2);
  }
  else {
    uint64_t v4 = v4;
  }
  if ((v3 & 8) != 0)
  {
    uint64_t v10 = *(void *)(a1 + 24);
    int v11 = *(unsigned __int8 *)(v10 + 23);
    char v12 = v11;
    uint64_t v13 = *(void *)(v10 + 8);
    if ((v11 & 0x80u) == 0) {
      unint64_t v14 = *(unsigned __int8 *)(v10 + 23);
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14 >= 0x80)
    {
      int v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v14, a2);
      int v11 = *(unsigned __int8 *)(v10 + 23);
      uint64_t v13 = *(void *)(v10 + 8);
      int v3 = *(_DWORD *)(a1 + 52);
      char v12 = *(unsigned char *)(v10 + 23);
    }
    else
    {
      int v15 = 1;
    }
    if (v12 < 0) {
      int v11 = v13;
    }
    uint64_t v4 = (v4 + v15 + v11 + 1);
    if ((v3 & 0x10) == 0)
    {
LABEL_26:
      if ((v3 & 0x20) == 0) {
        goto LABEL_27;
      }
      goto LABEL_47;
    }
  }
  else if ((v3 & 0x10) == 0)
  {
    goto LABEL_26;
  }
  uint64_t v16 = *(void *)(a1 + 32);
  int v17 = *(unsigned __int8 *)(v16 + 23);
  char v18 = v17;
  uint64_t v19 = *(void *)(v16 + 8);
  if ((v17 & 0x80u) == 0) {
    unint64_t v20 = *(unsigned __int8 *)(v16 + 23);
  }
  else {
    unint64_t v20 = v19;
  }
  if (v20 >= 0x80)
  {
    int v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v20, a2);
    int v17 = *(unsigned __int8 *)(v16 + 23);
    uint64_t v19 = *(void *)(v16 + 8);
    int v3 = *(_DWORD *)(a1 + 52);
    char v18 = *(unsigned char *)(v16 + 23);
  }
  else
  {
    int v21 = 1;
  }
  if (v18 < 0) {
    int v17 = v19;
  }
  uint64_t v4 = (v4 + v21 + v17 + 1);
  if ((v3 & 0x20) == 0)
  {
LABEL_27:
    if ((v3 & 0x40) == 0) {
      goto LABEL_59;
    }
    goto LABEL_53;
  }
LABEL_47:
  unsigned int v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
  if ((v22 & 0x80000000) != 0)
  {
    int v23 = 11;
  }
  else if (v22 >= 0x80)
  {
    int v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 52);
  }
  else
  {
    int v23 = 2;
  }
  uint64_t v4 = (v23 + v4);
  if ((v3 & 0x40) != 0)
  {
LABEL_53:
    BOOL v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 44);
    if ((v24 & 0x80000000) != 0)
    {
      int v25 = 11;
    }
    else if (v24 >= 0x80)
    {
      int v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24, a2) + 1;
    }
    else
    {
      int v25 = 2;
    }
    uint64_t v4 = (v25 + v4);
  }
LABEL_59:
  *(_DWORD *)(a1 + 48) = v4;
  return v4;
}

void sub_100A15B88(uint64_t a1, void *lpsrc)
{
  sub_100A14988(a1, (uint64_t)lpsrc);
}

uint64_t sub_100A15C10()
{
  return 1;
}

void *sub_100A15C18@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.Raven.RavenPlatformInfo");
}

uint64_t sub_100A15C2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = a3;
  uint64_t v9 = a1 + 40;
  sub_100A17500(a1 + 8, a4);
  sub_100A17598(v9, a5);
  sub_100A17630(a1 + 72, a6);
  *(unsigned char *)(a1 + 104) = 0;
  dispatch_retain(*(dispatch_object_t *)a1);
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  return a1;
}

void sub_100A15CB8(_Unwind_Exception *a1)
{
  sub_100A1774C(v2);
  sub_100A176C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100A15CE0(uint64_t a1)
{
  *(void *)a1 = 0;
  sub_1008522FC((void *)(a1 + 72));
  sub_100A1774C((void *)(a1 + 40));
  sub_100A176C8((void *)(a1 + 8));
  return a1;
}

void sub_100A15D58(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 168);
  if (v1 && (uint64_t v3 = a1 + 112, (v1(a1 + 112) & 1) != 0))
  {
    sub_100A16FA0(a1);
    TelephonyUtilTransportFree();
    *(_OWORD *)uint64_t v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
    *(void *)(v3 + 80) = 0;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DA0C0);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 68289026;
      int v8 = 0;
      __int16 v9 = 2082;
      uint64_t v10 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssTTPCIe,stopPCIeTimeTransfer,Success\"}", (uint8_t *)&v7, 0x12u);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DA0C0);
    }
    uint64_t v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      int v7 = 68289026;
      int v8 = 0;
      __int16 v9 = 2082;
      uint64_t v10 = "";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#GnssTTPCIe,stopPCIeTimeTransfer,telephonyUtility invalid\"}", (uint8_t *)&v7, 0x12u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DA0C0);
      }
    }
    int v6 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      int v7 = 68289026;
      int v8 = 0;
      __int16 v9 = 2082;
      uint64_t v10 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#GnssTTPCIe,stopPCIeTimeTransfer,telephonyUtility invalid", "{\"msg%{public}.0s\":\"#GnssTTPCIe,stopPCIeTimeTransfer,telephonyUtility invalid\"}", (uint8_t *)&v7, 0x12u);
    }
  }
}

double sub_100A15F98(uint64_t a1)
{
  uint64_t v2 = a1 + 112;
  uint64_t v3 = *(unsigned int (**)(uint64_t))(a1 + 168);
  if (v3 && v3(a1 + 112))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DA0C0);
    }
    uint64_t v4 = qword_1024193D8;
    if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_17;
    }
    *(_DWORD *)buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    int v15 = "";
    uint64_t v5 = "{\"msg%{public}.0s\":\"#GnssTTPCIe,Register time event\"}";
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v5, buf, 0x12u);
LABEL_17:
    sub_100A16378(a1);
    return result;
  }
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  TelephonyBasebandPCITransportInitParameters();
  *(void *)(a1 + 208) = *(void *)a1;
  *(_DWORD *)(a1 + 200) = 17;
  *(void *)(a1 + 224) = 0x2000003E8;
  *(_DWORD *)(a1 + 280) = 25;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022DA0C0);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    label = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 208));
    *(_DWORD *)buf = 68289282;
    int v13 = 0;
    __int16 v14 = 2082;
    int v15 = "";
    __int16 v16 = 2082;
    int v17 = label;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssTTPCIe\", \"queue,label\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100A16574;
  v11[3] = &unk_1022DA060;
  v11[4] = a1;
  *(void *)(a1 + 216) = v11;
  if (TelephonyBasebandPCITransportCreate())
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DA0C0);
    }
    uint64_t v4 = qword_1024193D8;
    if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_17;
    }
    *(_DWORD *)buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    int v15 = "";
    uint64_t v5 = "{\"msg%{public}.0s\":\"#GnssTTPCIe,TelephonyBasebandPCITransportCreate,Success\"}";
    goto LABEL_16;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022DA0C0);
  }
  __int16 v9 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    int v15 = "";
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#GnssTTPCIe,TelephonyBasebandPCITransportCreate,failure\"}", buf, 0x12u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DA0C0);
    }
  }
  uint64_t v10 = qword_1024193D8;
  if (os_signpost_enabled((os_log_t)qword_1024193D8))
  {
    *(_DWORD *)buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    int v15 = "";
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#GnssTTPCIe,TelephonyBasebandPCITransportCreate,failure", "{\"msg%{public}.0s\":\"#GnssTTPCIe,TelephonyBasebandPCITransportCreate,failure\"}", buf, 0x12u);
  }
  *(void *)(v2 + 80) = 0;
  double result = 0.0;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)uint64_t v2 = 0u;
  return result;
}

uint64_t sub_100A16378(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 168);
  if (!v1) {
    return 0;
  }
  uint64_t result = v1(a1 + 112);
  if (result)
  {
    if (TelephonyBasebandPCITransportRegisterTimeEvent())
    {
      *(unsigned char *)(a1 + 104) = 1;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DA0C0);
      }
      uint64_t v4 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        int v7 = 0;
        __int16 v8 = 2082;
        __int16 v9 = "";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssTTPCIe,PCITransportRegisterTimeEvent,Success\"}", buf, 0x12u);
      }
      return 1;
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DA0C0);
      }
      uint64_t v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        int v7 = 0;
        __int16 v8 = 2082;
        __int16 v9 = "";
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssTTPCIe,PCITransportRegisterTimeEvent,failure\"}", buf, 0x12u);
      }
      return *(unsigned char *)(a1 + 104) != 0;
    }
  }
  return result;
}

void sub_100A16574(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a1 + 32);
  if (a2)
  {
    if (a2 == 1)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DA0C0);
      }
      __int16 v8 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        int v17 = 68289538;
        int v18 = 0;
        __int16 v19 = 2082;
        unint64_t v20 = "";
        __int16 v21 = 2050;
        *(void *)unsigned int v22 = a3;
        *(_WORD *)&v22[8] = 2050;
        *(void *)&v22[10] = a4;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#GnssTTPCIe,PCITransportStatusError\", \"arg1\":\"%{public}p\", \"arg2\":\"%{public}p\"}", (uint8_t *)&v17, 0x26u);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022DA0C0);
        }
      }
      uint64_t v9 = qword_1024193D8;
      if (os_signpost_enabled((os_log_t)qword_1024193D8))
      {
        int v17 = 68289538;
        int v18 = 0;
        __int16 v19 = 2082;
        unint64_t v20 = "";
        __int16 v21 = 2050;
        *(void *)unsigned int v22 = a3;
        *(_WORD *)&v22[8] = 2050;
        *(void *)&v22[10] = a4;
        uint64_t v10 = "#GnssTTPCIe,PCITransportStatusError";
        int v11 = "{\"msg%{public}.0s\":\"#GnssTTPCIe,PCITransportStatusError\", \"arg1\":\"%{public}p\", \"arg2\":\"%{public}p\"}";
LABEL_17:
        int v13 = v9;
        uint32_t v14 = 38;
LABEL_25:
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v10, v11, (uint8_t *)&v17, v14);
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DA0C0);
      }
      int v15 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        int v17 = 68289794;
        int v18 = 0;
        __int16 v19 = 2082;
        unint64_t v20 = "";
        __int16 v21 = 1026;
        *(_DWORD *)unsigned int v22 = a2;
        *(_WORD *)&v22[4] = 2050;
        *(void *)&v22[6] = a3;
        *(_WORD *)&v22[14] = 2050;
        *(void *)&v22[16] = a4;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#GnssTTPCIe,Unrecognized,PCITransportStatus\", \"status\":%{public}d, \"arg1\":\"%{public}p\", \"arg2\":\"%{public}p\"}", (uint8_t *)&v17, 0x2Cu);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022DA0C0);
        }
      }
      uint64_t v16 = qword_1024193D8;
      if (os_signpost_enabled((os_log_t)qword_1024193D8))
      {
        int v17 = 68289794;
        int v18 = 0;
        __int16 v19 = 2082;
        unint64_t v20 = "";
        __int16 v21 = 1026;
        *(_DWORD *)unsigned int v22 = a2;
        *(_WORD *)&v22[4] = 2050;
        *(void *)&v22[6] = a3;
        *(_WORD *)&v22[14] = 2050;
        *(void *)&v22[16] = a4;
        uint64_t v10 = "#GnssTTPCIe,Unrecognized,PCITransportStatus";
        int v11 = "{\"msg%{public}.0s\":\"#GnssTTPCIe,Unrecognized,PCITransportStatus\", \"status\":%{public}d, \"arg1\":\"%{"
              "public}p\", \"arg2\":\"%{public}p\"}";
        int v13 = v16;
        uint32_t v14 = 44;
        goto LABEL_25;
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DA0C0);
    }
    char v12 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      int v17 = 68289538;
      int v18 = 0;
      __int16 v19 = 2082;
      unint64_t v20 = "";
      __int16 v21 = 2050;
      *(void *)unsigned int v22 = a3;
      *(_WORD *)&v22[8] = 2050;
      *(void *)&v22[10] = a4;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#GnssTTPCIe,PCITransportStatusNotReady\", \"arg1\":\"%{public}p\", \"arg2\":\"%{public}p\"}", (uint8_t *)&v17, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DA0C0);
      }
    }
    uint64_t v9 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      int v17 = 68289538;
      int v18 = 0;
      __int16 v19 = 2082;
      unint64_t v20 = "";
      __int16 v21 = 2050;
      *(void *)unsigned int v22 = a3;
      *(_WORD *)&v22[8] = 2050;
      *(void *)&v22[10] = a4;
      uint64_t v10 = "#GnssTTPCIe,PCITransportStatusNotReady";
      int v11 = "{\"msg%{public}.0s\":\"#GnssTTPCIe,PCITransportStatusNotReady\", \"arg1\":\"%{public}p\", \"arg2\":\"%{public}p\"}";
      goto LABEL_17;
    }
  }
  sub_100A15D58(v7);
  if (*(void *)(v7 + 96)) {
    sub_100A169C8(v7 + 72, a2);
  }
}

uint64_t sub_100A169C8(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_100A16A1C(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022DA0C0);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    int v8 = 0;
    __int16 v9 = 2082;
    uint64_t v10 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssTTPCIe,CLTelephonyPCIeTimeTransfer::startPCIeTimeTransfer\"}", buf, 0x12u);
  }
  sub_100A15F98(a1);
  if (v3) {
    return TelephonyBasebandPCITransportTimesync();
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022DA0C0);
  }
  uint64_t v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68289026;
    int v8 = 0;
    __int16 v9 = 2082;
    uint64_t v10 = "";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#GnssTTPCIe,startPCIeTimeTransfer,init failed\"}", buf, 0x12u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DA0C0);
    }
  }
  int v6 = qword_1024193D8;
  uint64_t result = os_signpost_enabled((os_log_t)qword_1024193D8);
  if (result)
  {
    *(_DWORD *)buf = 68289026;
    int v8 = 0;
    __int16 v9 = 2082;
    uint64_t v10 = "";
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#GnssTTPCIe,startPCIeTimeTransfer,init failed", "{\"msg%{public}.0s\":\"#GnssTTPCIe,startPCIeTimeTransfer,init failed\"}", buf, 0x12u);
    return 0;
  }
  return result;
}

void sub_100A16C70(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (a2 || !a4)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DA0C0);
    }
    int v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      int v17 = 68289538;
      int v18 = 0;
      __int16 v19 = 2082;
      unint64_t v20 = "";
      __int16 v21 = 1026;
      int v22 = a2;
      __int16 v23 = 2050;
      *(void *)BOOL v24 = a4;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#GnssTTPCIe,PCITransportTimesyncMeasurement,error\", \"status\":%{public}u, \"timeSyncMeas\":\"%{public}p\"}", (uint8_t *)&v17, 0x22u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DA0C0);
      }
    }
    uint64_t v16 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      int v17 = 68289538;
      int v18 = 0;
      __int16 v19 = 2082;
      unint64_t v20 = "";
      __int16 v21 = 1026;
      int v22 = a2;
      __int16 v23 = 2050;
      *(void *)BOOL v24 = a4;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#GnssTTPCIe,PCITransportTimesyncMeasurement,error", "{\"msg%{public}.0s\":\"#GnssTTPCIe,PCITransportTimesyncMeasurement,error\", \"status\":%{public}u, \"timeSyncMeas\":\"%{public}p\"}", (uint8_t *)&v17, 0x22u);
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DA0C0);
    }
    uint64_t v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *(_DWORD *)a4;
      unsigned int v8 = *(_DWORD *)(a4 + 4);
      uint64_t v10 = *(void *)(a4 + 8);
      uint64_t v11 = *(void *)(a4 + 16);
      double v12 = sub_1000D3D90(v8);
      double v13 = sub_1000D3D90(*(void *)(a4 + 8));
      double v14 = sub_1000D3D90(*(void *)(a4 + 16));
      int v17 = 68290818;
      __int16 v19 = 2082;
      int v18 = 0;
      unint64_t v20 = "";
      __int16 v21 = 1026;
      int v22 = v9;
      __int16 v23 = 1026;
      *(_DWORD *)BOOL v24 = v8;
      *(_WORD *)&v24[4] = 2050;
      *(void *)&v24[6] = v10;
      __int16 v25 = 2050;
      uint64_t v26 = v11;
      __int16 v27 = 2050;
      double v28 = v12;
      __int16 v29 = 2050;
      double v30 = v13;
      __int16 v31 = 2050;
      double v32 = v14;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssTTPCIe,PCITransportTimesyncMeasurement\", \"sequence\":%{public}d, \"measDurationTick\":%{public}d, \"beginAbsTick\":%{public}llu, \"beginContTick\":%{public}llu, \"measDurationSec\":\"%{public}f\", \"beginAbsSec\":\"%{public}f\", \"beingContSec\":\"%{public}f\"}", (uint8_t *)&v17, 0x50u);
    }
    if (*(void *)(v6 + 64)) {
      sub_100A16F3C(v6 + 40, *(_DWORD *)a4, *(_DWORD *)(a4 + 4), *(void *)(a4 + 8), *(void *)(a4 + 16));
    }
  }
}

uint64_t sub_100A16F3C(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  int v9 = a3;
  int v10 = a2;
  uint64_t v7 = a5;
  uint64_t v8 = a4;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, int *, int *, uint64_t *, uint64_t *))(*(void *)v5 + 48))(v5, &v10, &v9, &v8, &v7);
}

uint64_t sub_100A16FA0(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 168);
  if (!v1) {
    return 0;
  }
  uint64_t result = v1(a1 + 112);
  if (!result) {
    return result;
  }
  if (TelephonyBasebandPCITransportDeregisterTimeEvent())
  {
    *(unsigned char *)(a1 + 104) = 0;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DA0C0);
    }
    int v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 68289026;
      int v8 = 0;
      __int16 v9 = 2082;
      int v10 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssTTPCIe,PCITransportDeregisterTimeEvent,Success\"}", (uint8_t *)&v7, 0x12u);
    }
    return 1;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022DA0C0);
  }
  uint64_t v5 = qword_1024193D8;
  BOOL v6 = os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v6)
  {
    int v7 = 68289026;
    int v8 = 0;
    __int16 v9 = 2082;
    int v10 = "";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssTTPCIe,PCITransportDeregisterTimeEvent,failure\"}", (uint8_t *)&v7, 0x12u);
    return 0;
  }
  return result;
}

void sub_100A17144(uint64_t a1, unsigned __int8 *a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DA0C0);
    }
    int v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      int v5 = *((_DWORD *)a2 + 1);
      int v6 = *a2;
      int v7 = a2[1];
      uint64_t v8 = *((void *)a2 + 1);
      int v16 = 68290050;
      int v17 = 0;
      __int16 v18 = 2082;
      __int16 v19 = "";
      __int16 v20 = 1026;
      int v21 = v5;
      __int16 v22 = 1026;
      int v23 = v6;
      __int16 v24 = 1026;
      int v25 = v7;
      __int16 v26 = 2050;
      uint64_t v27 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#GnssTTPCIe,registerTimeEvent\", \"sequence\":%{public}d, \"domain\":%{public}d, \"unit\":%{public}d, \"bbTick\":%{public}llu}", (uint8_t *)&v16, 0x2Eu);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DA0C0);
      }
    }
    __int16 v9 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      int v10 = *((_DWORD *)a2 + 1);
      int v11 = *a2;
      int v12 = a2[1];
      uint64_t v13 = *((void *)a2 + 1);
      int v16 = 68290050;
      int v17 = 0;
      __int16 v18 = 2082;
      __int16 v19 = "";
      __int16 v20 = 1026;
      int v21 = v10;
      __int16 v22 = 1026;
      int v23 = v11;
      __int16 v24 = 1026;
      int v25 = v12;
      __int16 v26 = 2050;
      uint64_t v27 = v13;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#GnssTTPCIe,registerTimeEvent", "{\"msg%{public}.0s\":\"#GnssTTPCIe,registerTimeEvent\", \"sequence\":%{public}d, \"domain\":%{public}d, \"unit\":%{public}d, \"bbTick\":%{public}llu}", (uint8_t *)&v16, 0x2Eu);
    }
    if (*(void *)(v3 + 32) && *a2 == 2 && a2[1] == 7) {
      sub_100A17474(v3 + 8, *((_DWORD *)a2 + 1), *((void *)a2 + 1));
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DA0C0);
    }
    double v14 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      int v16 = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      __int16 v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#GnssTTPCIe,registerTimeEvent,PCITransportTimeEvent,NULL\"}", (uint8_t *)&v16, 0x12u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DA0C0);
      }
    }
    int v15 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      int v16 = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      __int16 v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#GnssTTPCIe,registerTimeEvent,PCITransportTimeEvent,NULL", "{\"msg%{public}.0s\":\"#GnssTTPCIe,registerTimeEvent,PCITransportTimeEvent,NULL\"}", (uint8_t *)&v16, 0x12u);
    }
  }
}

uint64_t sub_100A17474(uint64_t a1, int a2, uint64_t a3)
{
  int v6 = a2;
  uint64_t v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, int *, uint64_t *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

void sub_100A174D0(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_100A17500(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_100A17598(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_100A17630(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100A176C8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_100A1774C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_100A177D0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_100A17858(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

long double sub_100A178E0(double a1)
{
  return (1.0 - pow(a1 * 1000.0 / 101325.0, 0.190263237)) * 44330.7692;
}

uint64_t sub_100A1792C(uint64_t a1, char a2, char a3, char a4, uint64_t a5, double a6, double a7, double a8)
{
  *(unsigned char *)a1 = a2;
  *(unsigned char *)(a1 + 1) = a4;
  *(unsigned char *)(a1 + 2) = a3;
  double v9 = a6;
  if (a6 < 0.0) {
    double v9 = 0.0;
  }
  *(double *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a5;
  *(void *)(a1 + 32) = *(void *)(a5 + 16);
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(double *)(a1 + 40) = a7;
  *(double *)(a1 + 48) = a8;
  if (*(double *)(a1 + 8) < 0.0)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022DA0E0);
    }
    int v10 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 8);
      *(_DWORD *)buf = 134218496;
      uint64_t v15 = a1;
      __int16 v16 = 2048;
      uint64_t v17 = v11;
      __int16 v18 = 2048;
      uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning %p Scan delay of %Lf secs is invalid. Setting to the minimum of %Lf secs", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022DA0E0);
      }
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLOldWifiScanner::WifiConfiguration::WifiConfiguration(CLWifiService_Type::ScanType, PassiveActiveType, PriorityType, cl::chrono::secondsf, std::vector<CLWifiService_Type::Notification>, cl::chrono::secondsf, cl::chrono::secondsf)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  return a1;
}

void sub_100A17B5C(_Unwind_Exception *exception_object)
{
  int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A17B80(uint64_t result, uint64_t a2, double a3)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(double *)(result + 24) = a3;
  return result;
}

uint64_t sub_100A17BA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  sub_10010F834((void *)(a1 + 16), *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_100A199A8((unsigned char *)(a1 + 56), a3);
  return a1;
}

void sub_100A17C1C(_Unwind_Exception *exception_object)
{
  int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A17C3C(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 40) = 0x10000000000000;
  long long v5 = *a3;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  sub_10010F834((void *)(a1 + 64), *((const void **)a3 + 2), *((void *)a3 + 3), (uint64_t)(*((void *)a3 + 3) - *((void *)a3 + 2)) >> 2);
  *(_OWORD *)(a1 + 88) = *(long long *)((char *)a3 + 40);
  sub_100A199A8((unsigned char *)(a1 + 104), (uint64_t)a3 + 56);
  id v6 = [[objc_msgSend(*(id *)a1, "silo") newTimer];
  *(void *)(a1 + 24) = v6;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100A1808C;
  v7[3] = &unk_1022A3020;
  v7[4] = a1;
  [v6 setHandler:v7];
  sub_1001AE6FC();
}

void sub_100A17FE8(_Unwind_Exception *a1)
{
  sub_100A18604(v2 - 16);
  uint64_t v5 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *v3;
  uint64_t *v3 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  _Unwind_Resume(a1);
}

void sub_100A1808C(uint64_t a1)
{
}

void sub_100A18094(uint64_t a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022DA0E0);
  }
  uint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    uint64_t v5 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%p TIMER TRIGGERED", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022DA0E0);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOldWifiScanner::onTimerTrigger()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  sub_100A18B90(a1, *(double *)(a1 + 56));
}

void sub_100A1824C(uint64_t a1, int *a2, unsigned __int8 *a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DA100);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLOldWifiScanner::onWifiNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DA100);
    }
    double v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLOldWifiScanner::onWifiNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100A191F4((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100A18408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A18428(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DA100);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLOldWifiScanner::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DA100);
    }
    double v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLOldWifiScanner::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100A18F9C((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100A185E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A18604(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    uint64_t v2 = *(void **)(a1 + 56);
    if (v2)
    {
      *(void *)(a1 + 64) = v2;
      operator delete(v2);
    }
  }
  uint64_t v3 = *(void **)(a1 + 16);
  if (v3)
  {
    *(void *)(a1 + 24) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_100A18654(uint64_t a1)
{
  sub_100A18718(a1);
  [*(id *)(a1 + 24) invalidate];

  if (*(unsigned char *)(a1 + 136))
  {
    uint64_t v2 = *(void **)(a1 + 104);
    if (v2)
    {
      *(void *)(a1 + 112) = v2;
      operator delete(v2);
    }
  }
  uint64_t v3 = *(void **)(a1 + 64);
  if (v3)
  {
    *(void *)(a1 + 72) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

void sub_100A18718(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 33))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022DA0E0);
    }
    uint64_t v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v8 = a1;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%p Stop monitor for active scanning", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022DA0E0);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLOldWifiScanner::stop()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    [*(id *)(*(void *)(a1 + 16) + 16) unregister:*(void *)(*(void *)(a1 + 16) + 8) forNotification:1];
    [*(id *)(*(void *)(a1 + 16) + 16) unregister:*(void *)(*(void *)(a1 + 16) + 8) forNotification:4];
    [*(id *)(*(void *)(a1 + 16) + 16) unregister:*(void *)(*(void *)(a1 + 16) + 8) forNotification:5];
    uint64_t v3 = *(unsigned int **)(a1 + 64);
    uint64_t v4 = *(unsigned int **)(a1 + 72);
    while (v3 != v4)
    {
      unsigned int v5 = *v3++;
      [*(id *)(*(void *)(a1 + 16) + 16) unregister:*(void *)(*(void *)(a1 + 16) + 8) forNotification:v5];
    }
    if (*(unsigned char *)(a1 + 136)) {
      [*(id *)(*(void *)(a1 + 8) + 16) unregister:*(void *)(*(void *)(a1 + 8) + 8) forNotification:4];
    }
    *(unsigned char *)(a1 + 33) = 0;
    sub_100A18B90(a1, 1.79769313e308);
  }
}

void sub_100A1894C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 33))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022DA0E0);
    }
    uint64_t v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v8 = a1;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%p Start monitor for active scanning", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022DA0E0);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLOldWifiScanner::start()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    [*(id *)(*(void *)(a1 + 16) + 16) register:*(void *)(*(void *)(a1 + 16) + 8) forNotification:1 registrationInfo:0];
    [*(id *)(*(void *)(a1 + 16) + 16) register:*(void *)(*(void *)(a1 + 16) + 8) forNotification:4 registrationInfo:0];
    [*(id *)(*(void *)(a1 + 16) + 16) register:*(void *)(*(void *)(a1 + 16) + 8) forNotification:5 registrationInfo:0];
    uint64_t v3 = *(unsigned int **)(a1 + 64);
    uint64_t v4 = *(unsigned int **)(a1 + 72);
    while (v3 != v4)
    {
      unsigned int v5 = *v3++;
      [*(id *)(*(void *)(a1 + 16) + 16) register:*(void *)(*(void *)(a1 + 16) + 8) forNotification:v5 registrationInfo:0];
    }
    if (*(unsigned char *)(a1 + 136)) {
      [*(id *)(*(void *)(a1 + 8) + 16) register:*(void *)(*(void *)(a1 + 8) + 8) forNotification:4 registrationInfo:0];
    }
    *(unsigned char *)(a1 + 33) = 1;
    sub_100A18B90(a1, *(double *)(a1 + 56));
  }
}

void sub_100A18B90(uint64_t a1, double a2)
{
  double Current_5 = j__CFAbsoluteTimeGetCurrent_5();
  if (*(unsigned char *)(a1 + 33))
  {
    double v5 = Current_5;
    double v6 = a2 + *(double *)(a1 + 40);
    if (Current_5 < v6)
    {
      [*(id *)(a1 + 24) setNextFireDelay:v6 - Current_5];
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022DA0E0);
      }
      double v9 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        [*(id *)(a1 + 24) nextFireTime];
        *(_DWORD *)buf = 134218240;
        uint64_t v14 = a1;
        __int16 v15 = 2048;
        double v16 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "%p WIFI SCAN SCHEDULED FOR %f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022DA0E0);
        }
        [*(id *)(a1 + 24) nextFireTime];
        int v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLOldWifiScanner::scheduleNextScan(cl::chrono::secondsf)", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
    }
    else
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022DA0E0);
      }
      uint64_t v7 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218496;
        uint64_t v14 = a1;
        __int16 v15 = 2048;
        double v16 = v5;
        __int16 v17 = 2048;
        double v18 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%p WIFI EXECUTING IMMEDIATELY, now=%f nextRequestTime=%f", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022DA0E0);
        }
        char v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLOldWifiScanner::scheduleNextScan(cl::chrono::secondsf)", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
      *(double *)(a1 + 40) = v5;
      sub_100A198E8(a1);
      [*(id *)(a1 + 24) setNextFireDelay:a2];
    }
  }
  else
  {
    uint64_t v8 = *(void **)(a1 + 24);
    [v8 setNextFireDelay:1.79769313e308];
  }
}

void sub_100A18F9C(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (!*(unsigned char *)(a1 + 136)) {
    sub_101A78F14();
  }
  if ((*a3 | 4) == 4)
  {
    uint64_t v5 = *(void *)(a1 + 104);
    uint64_t v6 = *(void *)(a1 + 112);
    if (v5 == v6)
    {
      BOOL v10 = 1;
    }
    else
    {
      int v7 = *(_DWORD *)(a4 + 96);
      uint64_t v8 = v5 + 4;
      do
      {
        int v9 = *(_DWORD *)(v8 - 4);
        BOOL v11 = v9 == v7;
        BOOL v10 = v9 != v7;
        BOOL v11 = v11 || v8 == v6;
        v8 += 4;
      }
      while (!v11);
    }
    double v12 = *(double *)(a4 + 20);
    if (v12 > 0.0)
    {
      if (v12 >= *(double *)(a1 + 128)) {
        BOOL v10 = 1;
      }
      if (!v10)
      {
        *(CFAbsoluteTime *)(a1 + 40) = j__CFAbsoluteTimeGetCurrent_5();
        sub_100A18B90(a1, *(double *)(a1 + 56));
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022DA0E0);
        }
        int v13 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          [*(id *)(a1 + 24) nextFireTime];
          *(_DWORD *)buf = 134218240;
          uint64_t v17 = a1;
          __int16 v18 = 2048;
          uint64_t v19 = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%p Good GPS location received, hold off wifi scan, nextFire=%f", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_1022DA0E0);
          }
          [*(id *)(a1 + 24) nextFireTime];
          __int16 v15 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLOldWifiScanner::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v15);
          if (v15 != (char *)buf) {
            free(v15);
          }
        }
      }
    }
  }
}

void sub_100A191F4(uint64_t a1, uint64_t a2, int *a3, unsigned __int8 *a4)
{
  int v5 = *a3;
  if (*a3 == 5)
  {
    double v14 = *(double *)(a1 + 88);
    *(CFAbsoluteTime *)(a1 + 40) = j__CFAbsoluteTimeGetCurrent_5();
    sub_100A18B90(a1, v14);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022DA0E0);
    }
    __int16 v15 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      [*(id *)(a1 + 24) nextFireTime];
      *(_DWORD *)buf = 134218240;
      uint64_t v27 = a1;
      __int16 v28 = 2048;
      v29[0] = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "%p WIFI NOTIFICATION SCAN BUSY, nextFire=%f", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 == -1)
    {
LABEL_31:
      [*(id *)(a1 + 24) nextFireTime];
      __int16 v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLOldWifiScanner::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v20);
      if (v20 == (char *)buf) {
        return;
      }
      goto LABEL_53;
    }
LABEL_55:
    dispatch_once(&qword_102419630, &stru_1022DA0E0);
    goto LABEL_31;
  }
  if (v5 == 4)
  {
    double v17 = *(double *)(a1 + 96);
    *(CFAbsoluteTime *)(a1 + 40) = j__CFAbsoluteTimeGetCurrent_5();
    sub_100A18B90(a1, v17);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022DA0E0);
    }
    __int16 v18 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      [*(id *)(a1 + 24) nextFireTime];
      *(_DWORD *)buf = 134218240;
      uint64_t v27 = a1;
      __int16 v28 = 2048;
      v29[0] = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "%p WIFI NOTIFICATION SCAN ERROR, nextFire=%f", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 == -1) {
      goto LABEL_31;
    }
    goto LABEL_55;
  }
  if (v5 == 1)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022DA0E0);
    }
    int v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v8 = *a4;
      [*(id *)(a1 + 24) nextFireTime];
      *(_DWORD *)buf = 134218496;
      uint64_t v27 = a1;
      __int16 v28 = 1024;
      LODWORD(v29[0]) = v8;
      WORD2(v29[0]) = 2048;
      *(void *)((char *)v29 + 6) = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%p WIFI POWER NOTIFICATION RECEIVED, power=%d nextFire=%f", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022DA0E0);
      }
      [*(id *)(a1 + 24) nextFireTime];
      int v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLOldWifiScanner::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v25);
      if (v25 != (char *)buf) {
        free(v25);
      }
    }
    int v10 = *(unsigned __int8 *)(a1 + 32);
    int v11 = *a4;
    if (v10 != v11)
    {
      BOOL v12 = v10 != 0;
      if (*a4) {
        BOOL v13 = v10 != 0;
      }
      else {
        BOOL v13 = 1;
      }
      if (*a4) {
        BOOL v12 = 0;
      }
      if (!v12 && v13) {
        sub_101A79098();
      }
    }
    *(unsigned char *)(a1 + 32) = v11;
    return;
  }
  for (uint64_t i = *(_DWORD **)(a1 + 64); i != *(_DWORD **)(a1 + 72); ++i)
  {
    if (v5 == *i)
    {
      double v24 = *(double *)(a1 + 56);
      *(CFAbsoluteTime *)(a1 + 40) = j__CFAbsoluteTimeGetCurrent_5();
      sub_100A18B90(a1, v24);
      return;
    }
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022DA0E0);
  }
  __int16 v22 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    int v23 = (char)a4[1];
    *(_DWORD *)buf = 134218240;
    uint64_t v27 = a1;
    __int16 v28 = 1024;
    LODWORD(v29[0]) = v23;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "%p UNHANDLED WIFI NOTIFICATION, type=%d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022DA0E0);
    }
    __int16 v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOldWifiScanner::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v20);
    if (v20 != (char *)buf) {
LABEL_53:
    }
      free(v20);
  }
}

id sub_100A198E8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 32)) {
    return 0;
  }
  uint64_t v2 = *(unsigned __int8 *)(a1 + 49);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 50);
  id v4 = [objc_msgSend(*(id *)a1, "vendor", *(double *)(a1 + 56)) proxyForService:@"CLWifiService"];
  uint64_t v5 = *(char *)(a1 + 48);

  return [v4 syncgetStartScanWithType:v5 lowPriority:v2 passive:v3 requester:"oldscanner"];
}

void sub_100A19978(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

unsigned char *sub_100A199A8(unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[32] = 0;
  sub_100A199F4((uint64_t)a1, a2);
  return a1;
}

void sub_100A199D8(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 32)) {
    sub_101A5DAEC(v1);
  }
  _Unwind_Resume(exception_object);
}

double sub_100A199F4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 32))
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    sub_10010F834((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    double result = *(double *)(a2 + 24);
    *(double *)(a1 + 24) = result;
    *(unsigned char *)(a1 + 32) = 1;
  }
  return result;
}

void sub_100A19A4C(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_100A19A7C(uint64_t a1, long long *a2)
{
  *(void *)a1 = off_1022DA130;
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 24), *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(a1 + 40) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 24) = v4;
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = sub_1001110E4(a1 + 48, v5 + 13);
  if (*(char *)(a1 + 71) >= 0) {
    int v7 = (void *)v6;
  }
  else {
    int v7 = *(void **)(a1 + 48);
  }
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = *(const void **)a2;
    }
    memmove(v7, v8, v5);
  }
  strcpy((char *)v7 + v5, "TimeRemaining");
  return a1;
}

void sub_100A19B7C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A19B98(uint64_t a1)
{
  *(void *)a1 = off_1022DA130;
  sub_100172E70(a1);
  uint64_t v2 = sub_1000A6958();
  (*(void (**)(uint64_t))(*(void *)v2 + 944))(v2);
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void sub_100A19C34(uint64_t a1)
{
  sub_100A19B98(a1);

  operator delete();
}

BOOL sub_100A19C6C(uint64_t a1, double a2)
{
  double v11 = a2;
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022DA160);
  }
  long long v4 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    size_t v5 = (void *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0) {
      size_t v5 = (void *)*v5;
    }
    *(_DWORD *)buf = 136315394;
    double v17 = v5;
    __int16 v18 = 2048;
    double v19 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "NonInterruptingTimer, %s, totalTime, %.2f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022DA160);
    }
    uint64_t v9 = (void *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0) {
      uint64_t v9 = (void *)*v9;
    }
    int v12 = 136315394;
    BOOL v13 = v9;
    __int16 v14 = 2048;
    double v15 = a2;
    int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNonInterruptingTimer::setTotalTime(CFTimeInterval)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  uint64_t v6 = sub_1000A6958();
  int v7 = (const char *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    int v7 = *(const char **)v7;
  }
  return sub_10016332C(v6, v7, &v11);
}

uint64_t sub_100A19E7C(uint64_t a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022DA160);
  }
  uint64_t v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = (void *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0) {
      uint64_t v3 = (void *)*v3;
    }
    *(_DWORD *)buf = 136315138;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "NonInterruptingTimer, %s, persist", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022DA160);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNonInterruptingTimer::persistTime()", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  if (!*(_DWORD *)(a1 + 8))
  {
    double v4 = sub_1000A68BC(a1);
    sub_100A19C6C(a1, v4);
  }
  uint64_t v5 = sub_1000A6958();
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 944))(v5);
}

void sub_100A1A090(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8))
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022DA160);
    }
    uint64_t v2 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = (void *)(a1 + 24);
      if (*(char *)(a1 + 47) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v6 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "NonInterruptingTimer, %s, startTimer", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022DA160);
      }
      double v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNonInterruptingTimer::startTimer()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    *(double *)(a1 + 16) = sub_10016C458();
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_100A1A270(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void *sub_100A1A2A0(void *result, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  void *result = off_1022DA190;
  result[1] = v3;
  result[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100A1A2D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t sub_100A1A300(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

uint64_t sub_100A1A328(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

uint64_t sub_100A1A350(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))();
}

void *sub_100A1A378(void *a1)
{
  *a1 = off_1022DA190;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  return a1;
}

void sub_100A1A3C4(void *a1)
{
  *a1 = off_1022DA190;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_1000DB0A0(v1);
  }

  operator delete();
}

uint64_t sub_100A1A430(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v6 = (void *)sub_100054C14(a1, a2, a3, a4, a5);
  void *v6 = off_1022DA200;
  v6[6] = off_1022B6DB8;
  int v7 = operator new(0x20uLL);
  _OWORD v7[6] = 31337;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = 0;
  *(void *)int v7 = off_1022B6DF0;
  *(void *)(a1 + 56) = v7 + 6;
  *(void *)(a1 + 64) = v7;
  *(unsigned char *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0xBFF0000000000000;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0xBFF0000000000000;
  *(void *)(a1 + 120) = 0xFFFFFFFFLL;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 128) = a1 + 136;
  return a1;
}

void sub_100A1A4F8(_Unwind_Exception *a1)
{
  sub_100029A7C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100A1A510(uint64_t a1)
{
  *(void *)a1 = off_1022DA200;
  uint64_t v2 = sub_100EFA9F0();
  sub_100EFB11C(v2, a1, 0, 0);
  double Current = CFAbsoluteTimeGetCurrent();
  if (*(unsigned char *)(a1 + 72))
  {
    if (*(int *)(a1 + 124) >= 1) {
      *(double *)(a1 + 112) = Current;
    }
    *(void *)&long long v10 = 0;
    *((void *)&v10 + 1) = 0xBFF0000000000000;
    *(void *)&long long v11 = 0xBFF0000000000000;
    *((void *)&v11 + 1) = 0xFFFFFFFFLL;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    int v12 = &v13;
    *(_OWORD *)(a1 + 72) = v10;
    double v4 = (void **)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      operator delete(*v4);
    }
    *(_OWORD *)double v4 = 0uLL;
    *(void *)(a1 + 104) = 0;
    uint64_t v6 = a1 + 136;
    uint64_t v5 = *(char **)(a1 + 136);
    *(_OWORD *)(a1 + 112) = v11;
    sub_1000DB264(a1 + 128, v5);
    uint64_t v7 = v13;
    *(void *)(a1 + 128) = v12;
    *(void *)(a1 + 136) = v7;
    uint64_t v8 = v14;
    *(void *)(a1 + 144) = v14;
    if (v8)
    {
      *(void *)(v7 + 16) = v6;
      uint64_t v7 = 0;
      int v12 = &v13;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
    }
    else
    {
      *(void *)(a1 + 128) = v6;
    }
    sub_1000DB264((uint64_t)&v12, (char *)v7);
  }
  sub_1000DB264(a1 + 128, *(char **)(a1 + 136));
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  sub_10012E38C((void *)(a1 + 48));
  return sub_100029A7C(a1);
}

void sub_100A1A694(uint64_t a1)
{
  sub_100A1A510(a1);

  operator delete();
}

void *sub_100A1A6CC@<X0>(uint64_t a1@<X8>)
{
  v3[0] = off_1022DA2E8;
  v3[1] = sub_100A1A7D0;
  v3[2] = 0;
  v3[3] = v3;
  sub_100134750(__p, "kCLConnectionMessageGesture");
  sub_100A1BF50((uint64_t)v6, (uint64_t)v3);
  sub_100A1C42C(a1, (unsigned __int8 *)__p, 1);
  sub_100A1C3A8(v6);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return sub_100A1C3A8(v3);
}

void sub_100A1A7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_100A1A7D0(uint64_t a1, int a2, uint64_t a3)
{
  id v6 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_102419050 != -1) {
    dispatch_once(&qword_102419050, &stru_1022DA2B8);
  }
  uint64_t v7 = qword_102419058;
  if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *(void *)(a1 + 24);
    *(_DWORD *)buf = 138543618;
    *(void *)&uint8_t buf[4] = v8;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Received Gesture request,client,%{public}@,subscribe,%{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419050 != -1) {
      dispatch_once(&qword_102419050, &stru_1022DA2B8);
    }
    uint64_t v28 = *(void *)(a1 + 24);
    int v40 = 138543618;
    *(void *)__int16 v41 = v28;
    *(_WORD *)&v41[8] = 1026;
    *(_DWORD *)&v41[10] = a2;
    __int16 v29 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGestureSubscription::handleRequestGesture(BOOL, const CLNameValuePair &)", "%s\n", v29);
    if (v29 != buf) {
      free(v29);
    }
  }
  sub_10009C834(a1);
  if (a2)
  {
    int v39 = 0;
    if ((sub_10006EF84(a3, "kCLConnectionMessagePriorityKey", &v39) & 1) == 0)
    {
      if (qword_102419050 != -1) {
        dispatch_once(&qword_102419050, &stru_1022DA2B8);
      }
      uint64_t v9 = qword_102419058;
      if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Priority not set", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419050 != -1) {
          dispatch_once(&qword_102419050, &stru_1022DA2B8);
        }
        LOWORD(v40) = 0;
        unsigned int v34 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLGestureSubscription::handleRequestGesture(BOOL, const CLNameValuePair &)", "%s\n", v34);
        if (v34 != buf) {
          free(v34);
        }
      }
      int v39 = 0;
    }
    if (qword_102419050 != -1) {
      dispatch_once(&qword_102419050, &stru_1022DA2B8);
    }
    long long v10 = qword_102419058;
    if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = *(void *)(a1 + 24);
      *(_DWORD *)buf = 67240450;
      *(_DWORD *)&uint8_t buf[4] = v39;
      *(_WORD *)&uint8_t buf[8] = 2114;
      *(void *)&buf[10] = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Got gesture subscription request, priority = %{public}d, Client = %{public}@", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419050 != -1) {
        dispatch_once(&qword_102419050, &stru_1022DA2B8);
      }
      uint64_t v32 = *(void *)(a1 + 24);
      int v40 = 67240450;
      *(_DWORD *)__int16 v41 = v39;
      *(_WORD *)&v41[4] = 2114;
      *(void *)&v41[6] = v32;
      __int16 v33 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGestureSubscription::handleRequestGesture(BOOL, const CLNameValuePair &)", "%s\n", v33);
      if (v33 != buf) {
        free(v33);
      }
    }
    id v12 = [*(id *)(a1 + 8) silo];
    uint64_t v14 = *(void *)(a1 + 56);
    uint64_t v13 = *(std::__shared_weak_count **)(a1 + 64);
    if (v13)
    {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_1000DB0A0(v13);
    }
    uint64_t v15 = sub_100EFA9F0();
    int v16 = v39;
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3321888768;
    v37[2] = sub_100A1BBBC;
    v37[3] = &unk_1022DA258;
    v37[4] = v12;
    v37[5] = a1;
    v37[6] = v14;
    uint64_t v38 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    sub_100EFB11C(v15, a1, v16, (uint64_t)v37);
    if (!*(unsigned char *)(a1 + 72))
    {
      if (qword_102419050 != -1) {
        dispatch_once(&qword_102419050, &stru_1022DA2B8);
      }
      double v17 = qword_102419058;
      if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v18 = *(void *)(a1 + 24);
        *(_DWORD *)buf = 138543362;
        *(void *)&uint8_t buf[4] = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "starting metric session (MotionTrigger) for %{public}@", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419050 != -1) {
          dispatch_once(&qword_102419050, &stru_1022DA2B8);
        }
        uint64_t v35 = *(void *)(a1 + 24);
        int v40 = 138543362;
        *(void *)__int16 v41 = v35;
        unsigned int v36 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGestureSubscription::handleRequestGesture(BOOL, const CLNameValuePair &)", "%s\n", v36);
        if (v36 != buf) {
          free(v36);
        }
      }
      *(unsigned char *)(a1 + 72) = 1;
      *(CFAbsoluteTime *)(a1 + 80) = CFAbsoluteTimeGetCurrent();
      sub_100182A04(a1, buf);
      double v19 = (void **)(a1 + 88);
      if (*(char *)(a1 + 111) < 0) {
        operator delete(*v19);
      }
      *(_OWORD *)double v19 = *(_OWORD *)buf;
      *(void *)(a1 + 104) = *(void *)&buf[16];
      *(_DWORD *)(a1 + 120) = 0;
    }
    if (v38) {
      std::__shared_weak_count::__release_weak(v38);
    }
    if (v13) {
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  else
  {
    if (qword_102419050 != -1) {
      dispatch_once(&qword_102419050, &stru_1022DA2B8);
    }
    __int16 v20 = qword_102419058;
    if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v21 = *(void *)(a1 + 24);
      *(_DWORD *)buf = 138543362;
      *(void *)&uint8_t buf[4] = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Got gesture unsubscription request, Client = %{public}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419050 != -1) {
        dispatch_once(&qword_102419050, &stru_1022DA2B8);
      }
      uint64_t v30 = *(void *)(a1 + 24);
      int v40 = 138543362;
      *(void *)__int16 v41 = v30;
      __int16 v31 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGestureSubscription::handleRequestGesture(BOOL, const CLNameValuePair &)", "%s\n", v31);
      if (v31 != buf) {
        free(v31);
      }
    }
    uint64_t v22 = sub_100EFA9F0();
    sub_100EFB11C(v22, a1, 0, 0);
    if (*(unsigned char *)(a1 + 72))
    {
      if (*(int *)(a1 + 124) >= 1) {
        *(CFAbsoluteTime *)(a1 + 112) = CFAbsoluteTimeGetCurrent();
      }
      *(void *)buf = 0;
      *(void *)&uint8_t buf[8] = 0xBFF0000000000000;
      *(void *)&buf[16] = 0;
      *(void *)&buf[24] = 0;
      uint64_t v43 = 0;
      *(void *)&long long v44 = 0xBFF0000000000000;
      *((void *)&v44 + 1) = 0xFFFFFFFFLL;
      uint64_t v46 = 0;
      uint64_t v47 = 0;
      v45 = &v46;
      *(_OWORD *)(a1 + 72) = *(_OWORD *)buf;
      int v23 = (void **)(a1 + 88);
      if (*(char *)(a1 + 111) < 0) {
        operator delete(*v23);
      }
      *(_OWORD *)int v23 = *(_OWORD *)&buf[16];
      *(void *)(a1 + 104) = v43;
      HIBYTE(v43) = 0;
      buf[16] = 0;
      int v25 = *(char **)(a1 + 136);
      double v24 = (void *)(a1 + 136);
      *(_OWORD *)(v24 - 3) = v44;
      sub_1000DB264((uint64_t)(v24 - 1), v25);
      uint64_t v26 = v46;
      *(v24 - 1) = v45;
      *double v24 = v26;
      uint64_t v27 = v47;
      v24[1] = v47;
      if (v27)
      {
        *(void *)(v26 + 16) = v24;
        uint64_t v26 = 0;
        v45 = &v46;
        uint64_t v46 = 0;
        uint64_t v47 = 0;
      }
      else
      {
        *(v24 - 1) = v24;
      }
      sub_1000DB264((uint64_t)&v45, (char *)v26);
      if (SHIBYTE(v43) < 0) {
        operator delete(*(void **)&buf[16]);
      }
    }
  }
}

void sub_100A1B124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    std::__shared_weak_count::__release_weak(a19);
  }
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100A1B198(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100A1B1D4(uint64_t a1, uint64_t a2)
{
  sub_1000E9354(v26);
  int v4 = *(_DWORD *)(a2 + 16);
  if (v4 == 1)
  {
    sub_100134750(&buf, "GestureCanceled");
    sub_1004D37A8((uint64_t)v26, "kCLConnectionMessageNameKey", (char *)&buf);
  }
  else
  {
    if (v4) {
      goto LABEL_7;
    }
    sub_100134750(&buf, "GestureDetected");
    sub_1004D37A8((uint64_t)v26, "kCLConnectionMessageNameKey", (char *)&buf);
  }
  if (SHIBYTE(v38) < 0) {
    operator delete((void *)buf);
  }
LABEL_7:
  *(void *)&long long buf = sub_1000E9358((uint64_t)v26);
  sub_100A1BB38(a1);
  if (qword_102419050 != -1) {
    dispatch_once(&qword_102419050, &stru_1022DA2B8);
  }
  char v5 = qword_102419058;
  if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 136380675;
    *(void *)((char *)&buf + 4) = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Sent ear gesture message (prototype %{private}s)", (uint8_t *)&buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419050 != -1) {
      dispatch_once(&qword_102419050, &stru_1022DA2B8);
    }
    int v29 = 136380675;
    *(void *)uint64_t v30 = a2;
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGestureSubscription::onEarGestureNotification(const CLEarGestureNotifier::CMEarGestureData &)", "%s\n", v18);
    if (v18 != (char *)&buf) {
      free(v18);
    }
  }
  if (*(unsigned char *)(a1 + 72))
  {
    int v29 = -1;
    *(_OWORD *)&v30[4] = 0u;
    *(_OWORD *)__int16 v31 = 0u;
    long long v32 = 0u;
    *(_OWORD *)__int16 v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    __int16 v36 = 0;
    unsigned int v6 = [[[*(id *)(a1 + 8) vendor] proxyForService:@"CLAppMonitor"] syncgetForegroundApp:&v29];
    unsigned __int8 v25 = 1;
    unsigned int v7 = [objc_msgSend(*(id *)(a1 + 8), "vendor") proxyForService:@"CLTelephonyService"] syncgetActiveCall:&v25;
    if (v25) {
      unsigned int v8 = v7;
    }
    else {
      unsigned int v8 = 0;
    }
    unsigned __int8 v25 = v8;
    if (v6)
    {
      if (!std::string::compare((const std::string *)&v30[4], "com.apple.mobilephone")) {
        goto LABEL_30;
      }
      unsigned int v8 = v25;
    }
    if (!v8)
    {
      if (qword_102419050 != -1) {
        dispatch_once(&qword_102419050, &stru_1022DA2B8);
      }
      uint64_t v9 = qword_102419058;
      if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "counting metric for non-phone pick-up", (uint8_t *)&buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419050 != -1) {
          dispatch_once(&qword_102419050, &stru_1022DA2B8);
        }
        LOWORD(__p[0]) = 0;
        double v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGestureSubscription::onEarGestureNotification(const CLEarGestureNotifier::CMEarGestureData &)", "%s\n", v19);
        if (v19 != (char *)&buf) {
          free(v19);
        }
      }
      ++*(_DWORD *)(a1 + 124);
      sub_100134750(__p, (char *)a2);
      long long buf = *(_OWORD *)__p;
      uint64_t v38 = v28;
      __p[1] = 0;
      uint64_t v28 = 0;
      __p[0] = 0;
      int v39 = 0;
      long long v10 = sub_100A1C9DC((uint64_t **)(a1 + 128), (const void **)&buf, (uint64_t)&buf);
      if (SHIBYTE(v38) < 0) {
        operator delete((void *)buf);
      }
      if (SHIBYTE(v28) < 0) {
        operator delete(__p[0]);
      }
      ++*((_DWORD *)v10 + 14);
LABEL_35:
      double Current = CFAbsoluteTimeGetCurrent();
      if (Current - *(double *)(a1 + 80) > 21600.0)
      {
        if (qword_102419050 != -1) {
          dispatch_once(&qword_102419050, &stru_1022DA2B8);
        }
        uint64_t v13 = qword_102419058;
        if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v14 = *(void *)(a1 + 24);
          LODWORD(buf) = 138543362;
          *(void *)((char *)&buf + 4) = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "ending metric session (MotionTrigger) for %{public}@", (uint8_t *)&buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_102419050 != -1) {
            dispatch_once(&qword_102419050, &stru_1022DA2B8);
          }
          uint64_t v21 = *(void **)(a1 + 24);
          LODWORD(__p[0]) = 138543362;
          *(void **)((char *)__p + 4) = v21;
          uint64_t v22 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGestureSubscription::onEarGestureNotification(const CLEarGestureNotifier::CMEarGestureData &)", "%s\n", v22);
          if (v22 != (char *)&buf) {
            free(v22);
          }
        }
        *(double *)(a1 + 112) = Current;
        if (qword_102419050 != -1) {
          dispatch_once(&qword_102419050, &stru_1022DA2B8);
        }
        uint64_t v15 = qword_102419058;
        if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v16 = *(void *)(a1 + 24);
          LODWORD(buf) = 138543362;
          *(void *)((char *)&buf + 4) = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "starting metric session (MotionTrigger) for %{public}@", (uint8_t *)&buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_102419050 != -1) {
            dispatch_once(&qword_102419050, &stru_1022DA2B8);
          }
          int v23 = *(void **)(a1 + 24);
          LODWORD(__p[0]) = 138543362;
          *(void **)((char *)__p + 4) = v23;
          double v24 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGestureSubscription::onEarGestureNotification(const CLEarGestureNotifier::CMEarGestureData &)", "%s\n", v24);
          if (v24 != (char *)&buf) {
            free(v24);
          }
        }
        *(double *)(a1 + 80) = Current;
        *(_DWORD *)(a1 + 124) = 0;
      }
      if (SHIBYTE(v35) < 0) {
        operator delete(*((void **)&v34 + 1));
      }
      if (SBYTE7(v34) < 0) {
        operator delete(v33[0]);
      }
      if (SHIBYTE(v32) < 0) {
        operator delete(v31[1]);
      }
      if (SHIBYTE(v31[0]) < 0) {
        operator delete(*(void **)&v30[4]);
      }
      return sub_10013F3C4(v26);
    }
LABEL_30:
    if (qword_102419050 != -1) {
      dispatch_once(&qword_102419050, &stru_1022DA2B8);
    }
    uint64_t v11 = qword_102419058;
    if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "ignoring metric for phone pick-up", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419050 != -1) {
        dispatch_once(&qword_102419050, &stru_1022DA2B8);
      }
      LOWORD(__p[0]) = 0;
      __int16 v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGestureSubscription::onEarGestureNotification(const CLEarGestureNotifier::CMEarGestureData &)", "%s\n", v20);
      if (v20 != (char *)&buf) {
        free(v20);
      }
    }
    goto LABEL_35;
  }
  return sub_10013F3C4(v26);
}

void sub_100A1BA9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
}

void sub_100A1BB38(uint64_t a1)
{
  sub_10048C758(&off_1022DA388, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100A1BBA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A1BBBC(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768;
  v5[2] = sub_100A1BCB4;
  v5[3] = &unk_1022DA220;
  long long v6 = *(_OWORD *)(a1 + 40);
  int v4 = *(std::__shared_weak_count **)(a1 + 56);
  unsigned int v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  long long v8 = *a2;
  int v9 = *((_DWORD *)a2 + 4);
  [v3 async:v5];
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_100A1BC9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A1BCB4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v6 = 0;
  unsigned int v7 = &v6;
  uint64_t v8 = 0x2020000000;
  char v9 = 0;
  uint64_t v11 = _NSConcreteStackBlock;
  uint64_t v12 = 3221225472;
  uint64_t v13 = sub_100A1BF14;
  uint64_t v14 = &unk_1022D7EB0;
  long long v17 = *(_OWORD *)(a1 + 56);
  int v18 = *(_DWORD *)(a1 + 72);
  uint64_t v15 = &v6;
  uint64_t v16 = v2;
  uint64_t v3 = *(void *)(a1 + 48);
  if (!v3
    || *(void *)(v3 + 8) == -1
    || (sub_100A1B1D4(v2, (uint64_t)&v17), *(unsigned char *)(v15[1] + 24) = 1, !*((unsigned char *)v7 + 24)))
  {
    if (qword_102419050 != -1) {
      dispatch_once(&qword_102419050, &stru_1022DA2B8);
    }
    int v4 = qword_102419058;
    if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning CLDaemonClient got ear gesture callback after destruction... ignoring", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419050 != -1) {
        dispatch_once(&qword_102419050, &stru_1022DA2B8);
      }
      char v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGestureSubscription::handleRequestGesture(BOOL, const CLNameValuePair &)_block_invoke", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  _Block_object_dispose(&v6, 8);
}

void sub_100A1BEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100A1BF14(uint64_t a1)
{
  uint64_t result = sub_100A1B1D4(*(void *)(a1 + 40), a1 + 48);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  return result;
}

uint64_t sub_100A1BF50(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void sub_100A1BFD0(id a1)
{
  qword_102419058 = (uint64_t)os_log_create("com.apple.locationd.Motion", "EarGesture");
}

__n128 sub_100A1C000(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_1022DA2E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100A1C04C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022DA2E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100A1C07C(uint64_t a1, uint64_t a2, long long *a3)
{
}

uint64_t sub_100A1C084(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100A1C0C4()
{
}

void sub_100A1C0D0(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100A1C12C(a1, a2, (CLConnectionMessage **)&v3);
  if (*((void *)&v3 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v3 + 1));
  }
}

void sub_100A1C114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A1C12C(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  uint64_t v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  CFDictionaryRef DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_10013FA80((int)v15, DictionaryOfClasses);
  BOOL v14 = 0;
  if (sub_1000D2988((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14))
  {
    uint64_t v8 = *(void (**)(void *, BOOL, uint8_t *))a1;
    uint64_t v9 = *(void *)(a1 + 8);
    long long v10 = (void *)(a2 + (v9 >> 1));
    if (v9) {
      uint64_t v8 = *(void (**)(void *, BOOL, uint8_t *))(*v10 + v8);
    }
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022DA358);
    }
    uint64_t v11 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      double v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022DA358);
      }
    }
    uint64_t v12 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      *(_DWORD *)long long buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      double v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10013F3C4(v15);
}

void sub_100A1C35C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_100A1C378(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void *sub_100A1C3A8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100A1C42C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_100A1C4A8(a1, a2, (long long *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_100A1C494(_Unwind_Exception *a1)
{
  sub_100A1C95C(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100A1C4A8(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  unsigned int v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_100A1C72C(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_100A1C8B4((uint64_t)v25, 0);
  return i;
}

void sub_100A1C714(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100A1C8B4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_100A1C72C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  __n128 result = sub_100A1C7A4(v8 + 2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_100A1C78C(_Unwind_Exception *a1)
{
  sub_100A1C8B4(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_100A1C7A4(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100A1C81C((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100A1C800(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A1C81C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_100A1C8B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100A1C90C((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void sub_100A1C90C(uint64_t a1)
{
  sub_100A1C3A8((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_100A1C95C(uint64_t a1)
{
  sub_100A1C998(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100A1C998(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100A1C90C((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

_OWORD *sub_100A1C9DC(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v5 = (void **)sub_1001070AC((uint64_t)a1, &v9, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x40uLL);
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *((_DWORD *)v6 + 14) = *(_DWORD *)(a3 + 24);
    sub_1000EDF90(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

long double sub_100A1CA78(float64x2_t *a1)
{
  uint64_t v1 = 0;
  float64x2_t v2 = vmulq_f64(a1[1], (float64x2_t)xmmword_101D56C50);
  v5[0] = vmulq_f64(*a1, (float64x2_t)xmmword_101D56C40);
  v5[1] = v2;
  unint64_t v6 = 0xC000EF2C2B73F950;
  double v3 = 0.0;
  do
  {
    double v3 = v3 + *(double *)((char *)v5 + v1);
    v1 += 8;
  }
  while (v1 != 40);
  return 1.0 / (exp(-v3) + 1.0);
}

long double sub_100A1CAFC(float64x2_t *a1)
{
  uint64_t v1 = 0;
  float64x2_t v2 = vmulq_f64(a1[1], (float64x2_t)xmmword_101D56C70);
  v8[0] = vmulq_f64(*a1, (float64x2_t)xmmword_101D56C60);
  v8[1] = v2;
  float64x2_t v3 = vmulq_f64(a1[3], (float64x2_t)xmmword_101D56C90);
  v8[2] = vmulq_f64(a1[2], (float64x2_t)xmmword_101D56C80);
  v8[3] = v3;
  float64x2_t v4 = vmulq_f64(a1[5], (float64x2_t)xmmword_101D56CB0);
  v8[4] = vmulq_f64(a1[4], (float64x2_t)xmmword_101D56CA0);
  v8[5] = v4;
  float64x2_t v5 = vmulq_f64(a1[7], (float64x2_t)xmmword_101D56CD0);
  v8[6] = vmulq_f64(a1[6], (float64x2_t)xmmword_101D56CC0);
  v8[7] = v5;
  v8[8] = vmulq_f64(a1[8], (float64x2_t)xmmword_101D56CE0);
  v5.f64[0] = a1[9].f64[0] * -0.615337343;
  uint64_t v10 = 0x4013EBD26D9FF6D3;
  double v6 = 0.0;
  float64_t v9 = v5.f64[0];
  do
  {
    double v6 = v6 + *(double *)((char *)v8 + v1);
    v1 += 8;
  }
  while (v1 != 160);
  return 1.0 / (exp(-v6) + 1.0);
}

double sub_100A1CC08(double a1)
{
  uint64_t v1 = 0;
  float64x2_t v2 = (double *)qword_101D56ED0;
  do
  {
    if (*v2 > a1) {
      break;
    }
    ++v1;
    v2 += 3;
  }
  while (v1 != 2499);
  return *(double *)&qword_101D56ED0[3 * v1 + 1];
}

long double sub_100A1CC48(float64x2_t *a1)
{
  uint64_t v1 = 0;
  float64x2_t v2 = vmulq_f64(a1[1], (float64x2_t)xmmword_101D56D00);
  v6[0] = vmulq_f64(*a1, (float64x2_t)xmmword_101D56CF0);
  v6[1] = v2;
  float64x2_t v3 = vmulq_f64(a1[3], (float64x2_t)xmmword_101D56D20);
  v6[2] = vmulq_f64(a1[2], (float64x2_t)xmmword_101D56D10);
  v6[3] = v3;
  void v6[4] = vmulq_f64(a1[4], (float64x2_t)xmmword_101D56D30);
  uint64_t v7 = 0x40222EEE9DDA3655;
  double v4 = 0.0;
  do
  {
    double v4 = v4 + *(double *)((char *)v6 + v1);
    v1 += 8;
  }
  while (v1 != 88);
  return 1.0 / (exp(-v4) + 1.0);
}

double sub_100A1CD00(double a1)
{
  uint64_t v1 = 0;
  float64x2_t v2 = (double *)qword_101D65930;
  do
  {
    if (*v2 > a1) {
      break;
    }
    ++v1;
    v2 += 3;
  }
  while (v1 != 299);
  return *(double *)&qword_101D65930[3 * v1 + 1];
}

long double sub_100A1CD40(float64x2_t *a1)
{
  uint64_t v1 = 0;
  float64x2_t v2 = vmulq_f64(a1[1], (float64x2_t)xmmword_101D56D50);
  v5[0] = vmulq_f64(*a1, (float64x2_t)xmmword_101D56D40);
  v5[1] = v2;
  unint64_t v6 = 0xC015D1D42AF120ABLL;
  double v3 = 0.0;
  do
  {
    double v3 = v3 + *(double *)((char *)v5 + v1);
    v1 += 8;
  }
  while (v1 != 40);
  return 1.0 / (exp(-v3) + 1.0);
}

double sub_100A1CDC4(double a1)
{
  uint64_t v1 = 0;
  float64x2_t v2 = (double *)qword_101D67550;
  do
  {
    if (*v2 > a1) {
      break;
    }
    ++v1;
    v2 += 3;
  }
  while (v1 != 299);
  return *(double *)&qword_101D67550[3 * v1 + 1];
}

long double sub_100A1CE04(float64x2_t *a1)
{
  uint64_t v1 = 0;
  float64x2_t v2 = vmulq_f64(a1[1], (float64x2_t)xmmword_101D56D70);
  v12[0] = vmulq_f64(*a1, (float64x2_t)xmmword_101D56D60);
  v12[1] = v2;
  float64x2_t v3 = vmulq_f64(a1[3], (float64x2_t)xmmword_101D56D90);
  v12[2] = vmulq_f64(a1[2], (float64x2_t)xmmword_101D56D80);
  v12[3] = v3;
  float64x2_t v4 = vmulq_f64(a1[5], (float64x2_t)xmmword_101D56DB0);
  v12[4] = vmulq_f64(a1[4], (float64x2_t)xmmword_101D56DA0);
  v12[5] = v4;
  float64x2_t v5 = vmulq_f64(a1[7], (float64x2_t)xmmword_101D56DD0);
  v12[6] = vmulq_f64(a1[6], (float64x2_t)xmmword_101D56DC0);
  v12[7] = v5;
  float64x2_t v6 = vmulq_f64(a1[9], (float64x2_t)xmmword_101D56DF0);
  v12[8] = vmulq_f64(a1[8], (float64x2_t)xmmword_101D56DE0);
  v12[9] = v6;
  float64x2_t v7 = vmulq_f64(a1[11], (float64x2_t)xmmword_101D56E10);
  v12[10] = vmulq_f64(a1[10], (float64x2_t)xmmword_101D56E00);
  v12[11] = v7;
  float64x2_t v8 = vmulq_f64(a1[13], (float64x2_t)xmmword_101D56E30);
  v12[12] = vmulq_f64(a1[12], (float64x2_t)xmmword_101D56E20);
  v12[13] = v8;
  float64x2_t v9 = vmulq_f64(a1[14], (float64x2_t)xmmword_101D56E40);
  uint64_t v13 = 0x3FFB75EBE7714AE1;
  double v10 = 0.0;
  v12[14] = v9;
  do
  {
    double v10 = v10 + *(double *)((char *)v12 + v1);
    v1 += 8;
  }
  while (v1 != 248);
  return 1.0 / (exp(-v10) + 1.0);
}

double sub_100A1CF64(double a1)
{
  uint64_t v1 = 0;
  float64x2_t v2 = (double *)qword_101D69170;
  do
  {
    if (*v2 > a1) {
      break;
    }
    ++v1;
    v2 += 3;
  }
  while (v1 != 999);
  return *(double *)&qword_101D69170[3 * v1 + 1];
}

void sub_100A1CFA4(uint64_t a1, double a2)
{
  long long v8 = xmmword_101D6F070;
  long long v9 = unk_101D6F080;
  if (*(unsigned char *)(a1 + 56))
  {
    double v4 = sub_100A1D0CC(dbl_101D6EF30, dbl_101D6EF70, *(float *)(a1 + 20), 0.0, 0.0);
    double v5 = sub_100A1D0CC(dbl_101D6EF30, dbl_101D6EFB0, *(float *)(a1 + 20), 0.167, 0.239);
    double v6 = sub_100A1D0CC(dbl_101D6EF30, dbl_101D6EFF0, *(float *)(a1 + 20), 0.26, 0.368);
    double v7 = sub_100A1D0CC(dbl_101D6EF30, dbl_101D6F030, *(float *)(a1 + 20), 0.58, 0.61);
    *(double *)&long long v8 = v4;
    *((double *)&v8 + 1) = v5;
    *(double *)&long long v9 = v6;
    *((double *)&v9 + 1) = v7;
  }
  sub_100A1D174((double *)&v8, dbl_101D6F090, a2, 0.0, 100.0);
}

double sub_100A1D0CC(double *a1, double *a2, double a3, double a4, double a5)
{
  if (*a1 > a3) {
    return *a2;
  }
  if (a1[7] < a3) {
    return a2[7];
  }
  uint64_t v6 = 0;
  if (a1[1] >= a3)
  {
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 7;
    while (v6 != 5)
    {
      double v8 = a1[v6++ + 2];
      if (v8 >= a3)
      {
        uint64_t v7 = v6 + 1;
        goto LABEL_12;
      }
    }
    LODWORD(v6) = 6;
  }
LABEL_12:
  uint64_t v9 = v6;
  double v10 = a2[v9];
  double v11 = a1[v9];
  double v12 = (a2[v7] - v10) / (a1[v7] - v11);
  double result = v10 - v12 * v11 + a3 * v12;
  if (result <= a4) {
    double result = a4;
  }
  if (result >= a5) {
    return a5;
  }
  return result;
}

double sub_100A1D174(double *a1, double *a2, double a3, double a4, double a5)
{
  if (*a1 > a3) {
    return *a2;
  }
  if (a1[3] < a3) {
    return a2[3];
  }
  double v6 = a1[1];
  if (v6 >= a3)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 1;
  }
  else
  {
    double v6 = a1[2];
    uint64_t v7 = 1;
    uint64_t v8 = 2;
    if (v6 < a3)
    {
      double v6 = a1[3];
      uint64_t v8 = 3;
      uint64_t v7 = 2;
    }
  }
  double v9 = a2[v7];
  double v10 = a1[v7];
  double v11 = (a2[v8] - v9) / (v6 - v10);
  double result = v9 - v11 * v10 + a3 * v11;
  if (result <= a4) {
    double result = a4;
  }
  if (result >= a5) {
    return a5;
  }
  return result;
}

uint64_t sub_100A1D20C(uint64_t a1)
{
  float64x2_t v1 = *(float64x2_t *)(a1 + 8);
  double v2 = *(double *)(a1 + 16);
  if (v1.f64[0] != -INFINITY)
  {
    if (v2 == -INFINITY) {
      return 0;
    }
    v3.f64[0] = *(float64_t *)(a1 + 24);
    if (v3.f64[0] != -INFINITY && *(double *)(a1 + 32) != -INFINITY)
    {
      v3.f64[1] = *(float64_t *)(a1 + 32);
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_f64((float64x2_t)xmmword_101D56E50, v1), (int32x4_t)vcgtq_f64((float64x2_t)xmmword_101D56E60, v3))))) & 1) == 0&& *(double *)a1 != -INFINITY&& *(double *)a1 >= 50.0)
      {
        return 1;
      }
    }
  }
  if (v2 != -INFINITY)
  {
    double v5 = *(double *)(a1 + 24);
    if (v5 != -INFINITY)
    {
      double v6 = *(double *)(a1 + 32);
      if (v6 != -INFINITY)
      {
        double v7 = *(double *)(a1 + 40);
        if (v7 != -INFINITY && v6 < 2000.0)
        {
          double v8 = *(double *)a1;
          BOOL v9 = v5 < 5000.0 && v2 < 4.0;
          BOOL v10 = !v9 || v7 <= 31.0;
          BOOL v11 = v10 || v8 == -INFINITY;
          if (!v11 && v8 >= 50.0) {
            return 1;
          }
        }
      }
    }
  }
  return 0;
}

double sub_100A1D340(double *a1, double a2)
{
  double v3 = *a1;
  double v2 = a1[1];
  double v4 = a1[2];
  double v5 = 1.0;
  if (a2 >= 50.0)
  {
    double v5 = 0.0;
    if (a2 <= 75.0) {
      double v5 = fmin(fmax(a2 * -0.04 + 3.0, 0.0), 1.0);
    }
  }
  double v6 = fmax(v4 + -3165.0, 0.0);
  double v7 = fmax(v3 + -1.4, 0.0) * 6.0 + 0.0;
  if (v3 == -INFINITY) {
    double v8 = 0.0;
  }
  else {
    double v8 = v7;
  }
  double v9 = fmax(v2 + -2.0, 0.0);
  BOOL v10 = v2 == -INFINITY;
  double v11 = -0.0;
  if (!v10) {
    double v11 = v9;
  }
  double v12 = v8 + v11;
  if (v4 == -INFINITY) {
    double v13 = v12;
  }
  else {
    double v13 = v12 + v6 * 0.002;
  }
  return a2 + v5 * fmin(v13, 15.0);
}

float sub_100A1D410(double *a1)
{
  float v1 = a1[1] * (a1[3] + a1[3]) - *a1 * (a1[2] + a1[2]);
  return -v1;
}

double sub_100A1D45C(double *a1, double *a2, double *a3)
{
  double v4 = a2[2];
  double v3 = a2[3];
  double v5 = a3[2];
  double v6 = a3[3];
  double v7 = *a2;
  double v8 = *a3;
  a1[1] = v3 * v5 + *a2 * a3[1] - v4 * v6 + a2[1] * *a3;
  double v9 = a3[1];
  double v10 = a2[1];
  a1[2] = v7 * v5 - v3 * v9 + v10 * v6 + v4 * v8;
  double v11 = a2[2];
  double v12 = a3[2];
  a1[3] = v11 * v9 - v10 * v12 + v7 * v6 + v3 * v8;
  double result = -(v11 * v12) - v10 * v9 - a2[3] * a3[3] + v7 * v8;
  *a1 = result;
  return result;
}

double sub_100A1D4D8(uint64_t a1, uint64_t *a2)
{
  *(_OWORD *)a1 = *(_OWORD *)(a2 + 1);
  double result = *((double *)a2 + 3);
  double v3 = *(double *)a2;
  *(double *)(a1 + 16) = result;
  *(double *)(a1 + 24) = v3;
  return result;
}

double sub_100A1D4F0(double *a1, double *a2)
{
  double v2 = *a2;
  double v3 = a2[1];
  double v4 = v2 + v2;
  double v5 = v3 + v3;
  double v6 = a2[2];
  double v7 = v6 + v6;
  double v8 = v3 * (v3 + v3);
  double v9 = v6 * (v6 + v6);
  *a1 = 1.0 - v8 - v9;
  double v10 = 1.0 - v2 * (v2 + v2);
  a1[4] = v10 - v9;
  a1[8] = v10 - v8;
  double v11 = v7 * a2[1];
  double v12 = v4 * a2[3];
  a1[7] = v11 - v12;
  a1[5] = v11 + v12;
  double v13 = v5 * *a2;
  double v14 = v7 * a2[3];
  a1[3] = v13 - v14;
  a1[1] = v13 + v14;
  double v15 = v7 * *a2;
  double v16 = v5 * a2[3];
  a1[2] = v15 - v16;
  double result = v15 + v16;
  a1[6] = result;
  return result;
}

double sub_100A1D598(double *a1)
{
  return a1[3] * (a1[1] + a1[1]) - *a1 * (a1[2] + a1[2]);
}

double sub_100A1D5B4(double *a1)
{
  return -(a1[3] * (*a1 + *a1)) - a1[1] * (a1[2] + a1[2]);
}

double sub_100A1D5D0(double *a1)
{
  return *a1 * (*a1 + *a1) + -1.0 + a1[1] * (a1[1] + a1[1]);
}

uint64_t sub_100A1D5EC(uint64_t result, double *a2, double *a3, double *a4)
{
  double v4 = sqrt(*a3 * *a3 + *a2 * *a2 + *a4 * *a4);
  double v5 = -*a3 / v4;
  *(double *)double result = v5;
  double v6 = *a2 / v4;
  *(double *)(result + 8) = v6;
  *(void *)(result + 16) = 0;
  double v7 = sqrt((1.0 - *a4 / v4) * 0.5);
  *(double *)(result + 24) = v7;
  double v8 = v6 * v6 + v5 * v5;
  if (v8 <= 0.000001)
  {
    if (*a4 <= 0.0)
    {
      *(void *)double result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = 0x3FF0000000000000;
    }
    else
    {
      *(void *)double result = 0x3FF0000000000000;
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = 0;
      *(void *)(result + 8) = 0;
    }
  }
  else
  {
    double v9 = sqrt((1.0 - v7 * v7) / v8);
    *(double *)double result = v5 * v9;
    *(float64x2_t *)(result + 8) = vmulq_n_f64((float64x2_t)*(unint64_t *)&v6, v9);
  }
  return result;
}

double sub_100A1D6B8(uint64_t a1, uint64_t a2)
{
  *(float64x2_t *)a1 = vnegq_f64(*(float64x2_t *)a2);
  uint64_t v2 = *(void *)(a2 + 24);
  double result = -*(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(void *)(a1 + 24) = v2;
  return result;
}

double sub_100A1D6D4(double *a1, double *a2, double *a3)
{
  double v4 = a2[2];
  double v3 = a2[3];
  double v5 = a3[1];
  double v6 = a2[1];
  double v7 = a3[2];
  double v8 = a3[3];
  *a1 = v4 * v5 + v3 * *a3 - v6 * v7 + *a2 * v8;
  double v9 = *a3;
  double v10 = *a2;
  a1[1] = v3 * v5 - v4 * *a3 + *a2 * v7 + v6 * v8;
  double v11 = a2[1];
  double v12 = a3[1];
  a1[2] = v11 * v9 - v10 * v12 + v3 * v7 + v4 * v8;
  double result = -(v11 * v12) - v10 * v9 - a2[2] * a3[2] + v3 * v8;
  a1[3] = result;
  return result;
}

float sub_100A1D750(float *a1, float *a2, float *a3)
{
  float v3 = a2[2];
  float v4 = a3[2];
  *a1 = (float)(a2[1] * v4) - (float)(v3 * a3[1]);
  float v5 = *a3;
  float v6 = *a2;
  a1[1] = (float)(v3 * *a3) - (float)(*a2 * v4);
  float result = (float)(v6 * a3[1]) - (float)(a2[1] * v5);
  a1[2] = result;
  return result;
}

float sub_100A1D790(float *a1)
{
  float v1 = a1[1];
  float v2 = a1[2];
  float v3 = sqrtf((float)((float)(v1 * v1) + (float)(*a1 * *a1)) + (float)(v2 * v2));
  *a1 = *a1 / v3;
  a1[1] = v1 / v3;
  float result = v2 / v3;
  a1[2] = v2 / v3;
  return result;
}

void sub_100A1D7C0(uint64_t a1, float a2, double a3)
{
  if (a3 >= 0.0)
  {
    _DWORD v23[4] = v8;
    v23[5] = v7;
    v23[6] = v6;
    v23[7] = v5;
    v23[10] = v3;
    v23[11] = v4;
    double v11 = *(double *)(a1 + 16);
    double v12 = *(double *)(a1 + 24) + *(double *)(a1 + 24);
    double v13 = *(double *)(a1 + 8);
    float v14 = v13 * v12 - *(double *)a1 * (v11 + v11);
    float v15 = (v13 + v13) * *(double *)a1 + v11 * v12;
    float v16 = 1.0 - v13 * (v13 + v13) - v11 * (v11 + v11);
    __double2 v17 = __sincos_stret(a2 * -0.5 * 0.0174532924);
    v23[0] = v17.__cosval;
    v23[1] = v17.__sinval * v14;
    v23[2] = v17.__sinval * v15;
    v23[3] = v17.__sinval * v16;
    sub_100A1D45C((double *)v22, v23, (double *)a1);
    long long v18 = v22[1];
    *(_OWORD *)a1 = v22[0];
    *(_OWORD *)(a1 + 16) = v18;
    float v19 = *(float *)(a1 + 76);
    if (v19 >= 0.0)
    {
      float v20 = v19 + a2;
      *(float *)(a1 + 76) = v20;
      float v21 = 360.0;
      if (v20 >= 360.0)
      {
        float v21 = -360.0;
      }
      else if (v20 >= 0.0)
      {
        return;
      }
      *(float *)(a1 + 76) = v20 + v21;
    }
  }
}

double sub_100A1D8D8(double *a1, float *a2, float *a3, float *a4)
{
  *a1 = 1.0;
  a1[1] = 0.0;
  a1[2] = 0.0;
  double v4 = a1 + 2;
  a1[3] = 0.0;
  double v5 = a1 + 3;
  float v6 = *a2;
  float v7 = a3[1];
  if (*a2 <= v7 || (float v8 = a4[2], v6 <= v8))
  {
    float v11 = a4[2];
    if (v7 <= v6 || v7 <= v11)
    {
      double v13 = sqrt(v11 + 1.0 - v6 - v7);
      double result = v13 + v13;
      if (result <= 1.0e-10) {
        return result;
      }
      float v14 = a2[2];
      float v15 = *a3 - a2[1];
      float v16 = *a4;
      a1[3] = result * 0.25;
      *a1 = v15 / result;
      a1[1] = (float)(v16 + v14) / result;
      __double2 v17 = a3 + 2;
      a3 = a4 + 1;
      a4 = v17;
      double v5 = v4;
    }
    else
    {
      double v18 = sqrt(v7 + 1.0 - v11 - v6);
      double result = v18 + v18;
      if (result <= 1.0e-10) {
        return result;
      }
      float v19 = a4[1];
      *a1 = (float)(a2[2] - *a4) / result;
      double v20 = (float)(a3[2] + v19) / result;
      a1[2] = result * 0.25;
      a1[3] = v20;
      a4 = a2 + 1;
      double v5 = a1 + 1;
    }
  }
  else
  {
    double v9 = sqrt(v6 + 1.0 - v7 - v8);
    double result = v9 + v9;
    if (result <= 1.0e-10) {
      return result;
    }
    *a1 = (float)(a4[1] - a3[2]) / result;
    a1[1] = result * 0.25;
    a1[2] = (float)(a2[1] + *a3) / result;
    a3 = a2 + 2;
  }
  double result = (float)(*a4 + *a3) / result;
  double *v5 = result;
  return result;
}

void sub_100A1DB64(id a1)
{
  qword_10247F918 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLCatherineNotifierSilo"];
}

uint64_t sub_100A1DC24(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100A1DE88;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_10247F930 != -1) {
    dispatch_once(&qword_10247F930, block);
  }
  return qword_10248A808;
}

void sub_100A1DE88()
{
}

void sub_100A1DED4()
{
}

uint64_t sub_100A1DEF8(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_100A1E084(a1, "CLCatherineNotifier", a2);
  *(void *)uint64_t v3 = off_1022DA3E0;
  *(_OWORD *)(v3 + 112) = xmmword_101D6F0C0;
  *(_OWORD *)(v3 + 128) = unk_101D6F0D0;
  *(_OWORD *)(v3 + 144) = xmmword_101D6F0E0;
  *(_OWORD *)(v3 + 156) = *(long long *)((char *)&xmmword_101D6F0E0 + 12);
  *(void *)(a1 + 176) = [*(id *)(v3 + 40) newTimer];
  *(void *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  sub_100EBBEB0(a1 + 208, (uint64_t)"MotionStreamingHeartRate", a1, 0.0);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _OWORD v5[2] = nullsub_479;
  v5[3] = &unk_1022A3020;
  void v5[4] = a1;
  [*(id *)(a1 + 176) setHandler:v5];
  return a1;
}

void sub_100A1DFF4(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  sub_100EBBF9C(v3);
  uint64_t v5 = *(void *)(v1 + 200);
  *(void *)(v1 + 200) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(v1 + 184);
  *(void *)(v1 + 184) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  sub_100A1E134(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100A1E084(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_1022DA588;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_100A1E114(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A1E134(uint64_t a1)
{
  *(void *)a1 = off_1022DA588;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_100A1E1B8(void *a1)
{
  *a1 = off_1022DA3E0;
  sub_100A1E2B4((uint64_t)a1);
  sub_100EBBF9C(a1 + 26);
  uint64_t v2 = a1[25];
  a1[25] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[23];
  a1[23] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return sub_100A1E134((uint64_t)a1);
}

void sub_100A1E27C(void *a1)
{
  sub_100A1E1B8(a1);

  operator delete();
}

BOOL sub_100A1E2B4(uint64_t a1)
{
  if (qword_102419160 != -1) {
    dispatch_once(&qword_102419160, &stru_1022DA558);
  }
  uint64_t v2 = qword_102419168;
  if (os_log_type_enabled((os_log_t)qword_102419168, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLCatherineNotifier is shutting down.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419160 != -1) {
      dispatch_once(&qword_102419160, &stru_1022DA558);
    }
    double v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLCatherineNotifier::shutdown()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  [*(id *)(a1 + 176) invalidate];

  *(void *)(a1 + 176) = 0;
  sub_100A1E474(a1);
  BOOL result = sub_100EBC6AC(a1 + 208);
  *(unsigned char *)(a1 + 108) = 1;
  return result;
}

void sub_100A1E474(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 192))
  {
    *(unsigned char *)(a1 + 192) = 0;
    [*(id *)(a1 + 176) setNextFireDelay:3.0];
    if (qword_102419160 != -1) {
      dispatch_once(&qword_102419160, &stru_1022DA558);
    }
    uint64_t v1 = qword_102419168;
    if (os_log_type_enabled((os_log_t)qword_102419168, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "HR streaming turned off", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419160 != -1) {
        dispatch_once(&qword_102419160, &stru_1022DA558);
      }
      uint64_t v2 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCatherineNotifier::turnOffActiveCatherine()", "%s\n", v2);
      if (v2 != (char *)buf) {
        free(v2);
      }
    }
  }
}

uint64_t sub_100A1E614(uint64_t a1, uint64_t a2, int *a3)
{
  int v4 = a2;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, int *, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_10241FA00);
  sub_100A1E6B8(a1, v4, a3, 1);
  return v6;
}

uint64_t sub_100A1E68C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_10241FA00);
}

void sub_100A1E6B8(uint64_t a1, int a2, int *a3, int a4)
{
  int v12 = a2;
  if (qword_102419160 != -1) {
    dispatch_once(&qword_102419160, &stru_1022DA558);
  }
  float v7 = qword_102419168;
  if (os_log_type_enabled((os_log_t)qword_102419168, OS_LOG_TYPE_DEFAULT))
  {
    if (a4) {
      float v8 = "Registration";
    }
    else {
      float v8 = "Unregistration";
    }
    *(void *)long long buf = &v12;
    id v9 = [[objc_msgSend(sub_10008A098((uint64_t **)(a1 + 80), &v12, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[8], "description") UTF8String];
    int v10 = *a3;
    *(_DWORD *)long long buf = v10;
    int v11 = sub_1001072EC(a1, (int *)buf, 1);
    *(_DWORD *)long long buf = 68290050;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v14 = 2082;
    float v15 = "";
    __int16 v16 = 2082;
    __double2 v17 = v8;
    __int16 v18 = 2082;
    id v19 = v9;
    __int16 v20 = 1026;
    int v21 = v10;
    __int16 v22 = 1026;
    int v23 = v11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"HeartRate\", \"action\":%{public, location:escape_only}s, \"client\":%{public, location:escape_only}s, \"notification\":%{public}d, \"notificationClientCount\":%{public}d}", buf, 0x32u);
  }
}

BOOL sub_100A1E838(char *a1, int a2, int *a3)
{
  BOOL v6 = sub_100A1E888(a1, a2, a3);
  sub_100A1E6B8((uint64_t)a1, a2, a3, 0);
  return v6;
}

BOOL sub_100A1E888(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      float v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          float v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        __int16 v14 = (char *)*((void *)v8 + 6);
        int v12 = v8 + 48;
        double v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          __int16 v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              id v19 = (char **)v13;
            }
            else {
              id v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              __int16 v16 = v13;
            }
            double v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            __int16 v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                unsigned __int8 v25 = (uint64_t *)v20;
              }
              else {
                unsigned __int8 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                __int16 v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022DA538);
              }
              uint64_t v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                uint64_t v27 = a1 + 8;
                if (a1[31] < 0) {
                  uint64_t v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  uint64_t v28 = __p;
                }
                else {
                  uint64_t v28 = (void **)__p[0];
                }
                *(_DWORD *)long long buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                long long v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022DA538);
                }
                int v29 = a1 + 8;
                if (a1[31] < 0) {
                  int v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  uint64_t v30 = buf;
                }
                else {
                  uint64_t v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                uint64_t v38 = v29;
                __int16 v39 = 2082;
                int v40 = v30;
                __int16 v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLCatherineNotifier_Type::Notification, NotificationData_T = CLCatherineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

void *sub_100A1EC5C@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

uint64_t sub_100A1ECD8(uint64_t a1)
{
  uint64_t v3 = 0x100000004;
  int v4 = 9;
  if ((int)sub_1001072EC(a1, (int *)&v3, 3) >= 1 && !*(unsigned char *)(a1 + 192))
  {
    *(unsigned char *)(a1 + 192) = 1;
    [*(id *)(a1 + 176) setNextFireDelay:3.0];
  }
  return 1;
}

uint64_t sub_100A1ED74(uint64_t a1)
{
  int v7 = 9;
  int v2 = sub_1001072EC(a1, &v7, 1);
  int v6 = 1;
  int v3 = sub_1001072EC(a1, &v6, 1);
  int v5 = 4;
  if (!(sub_1001072EC(a1, &v5, 1) + v3 + v2)) {
    sub_100A1E474(a1);
  }
  return 1;
}

void sub_100A1EE08(uint64_t a1, void *a2)
{
  uint64_t v9 = 0;
  BOOL v10 = &v9;
  uint64_t v11 = 0x7012000000;
  int v12 = sub_100177CF4;
  double v13 = nullsub_55;
  __int16 v14 = "";
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v19 = 0;
  uint64_t v15 = 0x200000004;
  [a2 catherine];
  *(void *)&long long v16 = v4;
  [a2 confidence];
  *((void *)&v16 + 1) = v5;
  LOBYTE(v17) = 0;
  [a2 timestamp];
  *((void *)&v17 + 1) = v6;
  long long v18 = COERCE_UNSIGNED_INT64(CFAbsoluteTimeGetCurrent());
  LODWORD(v19) = 0;
  sub_100A1EF78(a1, (_OWORD *)v10 + 3);
  sub_100A1F030(a1, (_OWORD *)v10 + 3);
  int v7 = *(void **)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100A1F0EC;
  v8[3] = &unk_1022BF788;
  v8[4] = &v9;
  v8[5] = a1;
  [v7 async:v8];
  [*(id *)(a1 + 176) setNextFireDelay:3.0];
  _Block_object_dispose(&v9, 8);
}

void sub_100A1EF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100A1EF78(uint64_t a1, _OWORD *a2)
{
  long long v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  long long v4 = a2[3];
  v7[2] = a2[2];
  v7[3] = v4;
  int v6 = 0;
  (*(void (**)(uint64_t, int *, _OWORD *, void, uint64_t, void))(*(void *)a1 + 152))(a1, &v6, v7, 0, 0xFFFFFFFFLL, 0);
  int v6 = 1;
  return (*(uint64_t (**)(uint64_t, int *, _OWORD *, void, uint64_t, void))(*(void *)a1 + 152))(a1, &v6, v7, 0, 0xFFFFFFFFLL, 0);
}

uint64_t sub_100A1F030(uint64_t a1, _OWORD *a2)
{
  long long v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  long long v4 = a2[3];
  v7[2] = a2[2];
  v7[3] = v4;
  int v6 = 5;
  (*(void (**)(uint64_t, int *, _OWORD *, void, uint64_t, void))(*(void *)a1 + 152))(a1, &v6, v7, 0, 0xFFFFFFFFLL, 0);
  int v6 = 4;
  return (*(uint64_t (**)(uint64_t, int *, _OWORD *, void, uint64_t, void))(*(void *)a1 + 152))(a1, &v6, v7, 0, 0xFFFFFFFFLL, 0);
}

void sub_100A1F0EC(uint64_t a1)
{
}

void sub_100A1F0FC(uint64_t a1, uint64_t a2)
{
  long long v4 = objc_alloc_init(ALActivityLog);
  [(ALActivityLog *)v4 setAllDayHeartRate:objc_alloc_init(ALCLAllDayHeartRate)];
  [(ALCLAllDayHeartRate *)[(ALActivityLog *)v4 allDayHeartRate] setStartTime:*(double *)(a2 + 40)];
  [(ALCLAllDayHeartRate *)[(ALActivityLog *)v4 allDayHeartRate] setMode:*(_DWORD *)(a2 + 56) == 5];
  float v5 = *(double *)(a2 + 16);
  int v6 = [(ALActivityLog *)v4 allDayHeartRate];
  *(float *)&double v7 = v5;
  [(ALCLAllDayHeartRate *)v6 setConfidence:v7];
  float v8 = *(double *)(a2 + 8);
  uint64_t v9 = [(ALActivityLog *)v4 allDayHeartRate];
  *(float *)&double v10 = v8;
  [(ALCLAllDayHeartRate *)v9 setHeartRate:v10];
  [[+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance") proxyForService:@"CLActivityLogger"] logData:v4];
}

id sub_100A1F1F8(uint64_t a1)
{
  id v2 = [+[CLServiceVendor sharedInstance] proxyForService:@"CLCatherineNotifier"];

  return [v2 syncgetDoSync:a1];
}

void sub_100A1F244()
{
}

void sub_100A1F300(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_100A1F33C(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_1022DA6D8;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    int v12 = a3;
  }
  else {
    int v12 = (uint64_t *)*a3;
  }
  id v13 = [[[a4 vendor] proxyForService:[NSString stringWithUTF8String:v12]]
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:objc_msgSend(a4, "silo")];
  return a1;
}

void sub_100A1F420(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        uint64_t v9 = (uint64_t *)v4;
      }
      else {
        uint64_t v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)long long buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022DA538);
      }
      double v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        uint64_t v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          uint64_t v11 = (void *)*v11;
        }
        *(_DWORD *)long long buf = 136446466;
        uint64_t v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022DA538);
        }
        int v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          int v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        uint64_t v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData>::removeClient(int) [Notification_T = CLCatherineNotifier_Type::Notification, NotificationData_T = CLCatherineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_100A1F6B0(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_100A1F764(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_100A1F7AC(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_100A1F7F4(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_100A1F83C(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)char v42 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          BOOL v24 = (uint64_t *)v18;
        }
        else {
          BOOL v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          int v29 = (uint64_t *)v25;
        }
        else {
          int v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v40 = v26;
        uint64_t v35 = *(void *)(v26 + 56);
        char v36 = *a4;
        *(void *)long long buf = &v41;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v36;
        long long v46 = 0u;
        long long v47 = 0u;
        memset(buf, 0, sizeof(buf));
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, uint8_t *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_100A21D30();
        }
        if (v35) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v40 = a1 + 64;
        char v30 = byte_10241FA01;
        int v39 = v17;
        *(void *)long long buf = &v39;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v30;
        int v39 = *a3;
        *(void *)long long buf = &v39;
        __int16 v31 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        int v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        char v33 = *a4;
        int v39 = *a3;
        *(void *)long long buf = &v39;
        __int16 v34 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)long long buf = &v41;
        *((unsigned char *)sub_1000EB1B8(v34 + 5, &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v33;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        *(_DWORD *)long long buf = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DA538);
  }
  id v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v15 = (void *)*v15;
    }
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DA538);
    }
    int v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v37 = (void *)*v37;
    }
    *(_DWORD *)char v42 = 136446466;
    *(void *)&v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = a2;
    uint64_t v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLCatherineNotifier_Type::Notification, NotificationData_T = CLCatherineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v38);
    if (v38 != (char *)buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

BOOL sub_100A1FCE8(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DA538);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)long long buf = 136446466;
      BOOL v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022DA538);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLCatherineNotifier_Type::Notification, NotificationData_T = CLCatherineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_100A1FF6C(uint64_t a1, int *a2, _OWORD *a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      uint64_t v10 = (uint64_t *)v4;
    }
    else {
      uint64_t v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v7 == v3) {
    return 0;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0;
  }
  int v11 = *(long long **)(v7 + 64);
  if (!v11) {
    return 0;
  }
  long long v12 = *v11;
  long long v13 = v11[1];
  long long v14 = v11[3];
  a3[2] = v11[2];
  a3[3] = v14;
  *a3 = v12;
  a3[1] = v13;
  return 1;
}

uint64_t sub_100A1FFD4(uint64_t a1, int *a2, _OWORD *a3)
{
  int v6 = (char *)operator new(0x58uLL);
  long long v7 = a3[1];
  *(_OWORD *)(v6 + 24) = *a3;
  *(_OWORD *)(v6 + 40) = v7;
  long long v8 = a3[3];
  *(_OWORD *)(v6 + 56) = a3[2];
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = off_1022DA668;
  *(_OWORD *)(v6 + 72) = v8;
  int v12 = *a2;
  long long v13 = &v12;
  BOOL v9 = sub_10044715C((uint64_t **)(a1 + 56), &v12, (uint64_t)&unk_101D0B290, &v13);
  uint64_t v10 = (std::__shared_weak_count *)v9[9];
  v9[8] = (uint64_t *)(v6 + 24);
  void v9[9] = (uint64_t *)v6;
  if (v10) {
    sub_1000DB0A0(v10);
  }
  return 1;
}

void sub_100A20098(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100A200AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  memset(v5, 0, sizeof(v5));
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_100A20108(uint64_t a1, unsigned int *a2, _OWORD *a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  long long v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DA538);
  }
  BOOL v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)long long buf = 68289794;
    int v24 = 0;
    __int16 v25 = 2082;
    *(void *)int v26 = "";
    *(_WORD *)&v26[8] = 2082;
    *(void *)&v26[10] = "activity";
    __int16 v27 = 2082;
    BOOL v28 = v10;
    __int16 v29 = 2050;
    char v30 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  long long v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      long long v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    __int16 v31 = v32;
    memset(v32, 0, sizeof(v32));
    char v33 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v31);
    long long v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v30) {
      sub_1000DB0A0(v30);
    }
    sub_1000F5BB0((uint64_t)&v25, *(void **)&v26[6]);
    if (v33) {
      sub_1000DB0A0(v33);
    }
    sub_1000F5BB0((uint64_t)&v31, v32[0]);
  }
  if (a4)
  {
    uint64_t v18 = (char *)operator new(0x58uLL);
    long long v19 = a3[1];
    *(_OWORD *)(v18 + 24) = *a3;
    *(_OWORD *)(v18 + 40) = v19;
    long long v20 = a3[3];
    *(_OWORD *)(v18 + 56) = a3[2];
    *((void *)v18 + 1) = 0;
    *((void *)v18 + 2) = 0;
    *(void *)uint64_t v18 = off_1022DA668;
    *(_OWORD *)(v18 + 72) = v20;
    uint64_t v21 = (std::__shared_weak_count *)v14[9];
    v14[8] = (uint64_t *)(v18 + 24);
    v14[9] = (uint64_t *)v18;
    if (!v21) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t v21 = (std::__shared_weak_count *)v14[9];
  v14[8] = 0;
  v14[9] = 0;
  if (v21) {
LABEL_27:
  }
    sub_1000DB0A0(v21);
LABEL_28:
  if (v14[7]) {
    sub_100A20DE4();
  }
  os_activity_scope_leave(&state);
}

void sub_100A206FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_100A20748(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DA538);
    }
    id v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)long long buf = 136315138;
      int v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022DA538);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData>::listClients() [Notification_T = CLCatherineNotifier_Type::Notification, NotificationData_T = CLCatherineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DA538);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)long long buf = 136315394;
      int v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022DA538);
      }
      long long v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData>::listClients() [Notification_T = CLCatherineNotifier_Type::Notification, NotificationData_T = CLCatherineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    long long v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        BOOL v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_1022DA538);
            }
            uint64_t v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)long long buf = 136315650;
              int v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022DA538);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData>::listClients() [Notification_T = CLCatherineNotifier_Type::Notification, NotificationData_T = CLCatherineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            long long v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                long long v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                BOOL v9 = v15;
              }
              while (!v16);
            }
            BOOL v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        uint64_t v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            long long v19 = v18;
            uint64_t v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            long long v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            long long v8 = v19;
          }
          while (!v16);
        }
        long long v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_100A20CFC(uint64_t a1)
{
  sub_100A21CC0(a1);

  operator delete();
}

id sub_100A20D34(uint64_t a1, int a2, void *a3)
{
  id result = sub_100A21420(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_100A20D84(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100A20DB4(id a1)
{
  qword_102419168 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HeartRate");
}

void sub_100A20DE4()
{
}

void sub_100A20E98(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      BOOL v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          int v12 = (uint64_t *)v4;
        }
        else {
          int v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          BOOL v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        long long v49 = v9;
        id v13 = sub_100A21420(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        long long v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            long long v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                long long v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              uint64_t v48 = v19;
              sub_100A2128C(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              __int16 v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  __int16 v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              long long v49 = v29;
              uint64_t v34 = v29[6];
              long long v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                uint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    int v39 = (uint64_t *)v36;
                  }
                  else {
                    int v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    uint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      long long v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      long long v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      long long v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      uint64_t v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              uint64_t v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022DA538);
              }
              int v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)long long buf = 136446466;
                double v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022DA538);
                }
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                double v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                long long v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLCatherineNotifier_Type::Notification, NotificationData_T = CLCatherineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_100A2128C(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_100A21420(a4);
    uint64_t v10 = *(void *)a3 + 80;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40);
    long long v14 = (int *)(*(void *)a2 + 32);
    int v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    id result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4];
    }
  }
  return result;
}

void sub_100A21384(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022DA668;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100A213A4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022DA668;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100A21400(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

id sub_100A21420(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    return sub_100A214BC(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      return sub_100A21848(a1);
    }
    else
    {
      return 0;
    }
  }
}

id sub_100A214BC(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_100A21C08((uint64_t)&v7, a1);
  }
  if (!getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_1022DA6A8);
    }
    uint64_t v5 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 134218498;
      id v15 = v2;
      __int16 v16 = 2048;
      uint64_t v17 = 0;
      __int16 v18 = 2080;
      unint64_t v19 = 0x8000000101D6F242 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418F90 == -1) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  if (qword_102418F90 != -1) {
    dispatch_once(&qword_102418F90, &stru_1022DA6A8);
  }
  uint64_t v3 = qword_102418F98;
  if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134218498;
    id v15 = v2;
    __int16 v16 = 2048;
    uint64_t v17 = 0;
    __int16 v18 = 2080;
    unint64_t v19 = 0x8000000101D6F242 & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  }
  if (!sub_10013D1A0(115, 0)) {
    return 0;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102418F90 != -1) {
LABEL_20:
  }
    dispatch_once(&qword_102418F90, &stru_1022DA6A8);
LABEL_18:
  int v8 = 134218498;
  id v9 = v2;
  __int16 v10 = 2048;
  uint64_t v11 = 0;
  __int16 v12 = 2080;
  unint64_t v13 = 0x8000000101D6F242 & 0x7FFFFFFFFFFFFFFFLL;
  int v6 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLCatherineNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v6);
  if (v6 != (char *)buf) {
    free(v6);
  }
  return 0;
}

id sub_100A21848(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022DA6A8);
      }
      uint64_t v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D6F242 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLCatherineNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022DA6A8);
      }
      uint64_t v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D6F242 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1022DA6A8);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

id sub_100A21C08(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_102392E88))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)64) {
      sub_101A793B0();
    }
    [a2 setCppObjectPtr:[objc_msgSend(objc_msgSend(a2, "serialized"), "bytes") bytes]];
  }

  return [a2 cppObjectPtr];
}

void sub_100A21C90(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_100A21CC0(uint64_t a1)
{
  *(void *)a1 = off_1022DA6D8;
  id v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  id *v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_100A21D30()
{
}

uint64_t sub_100A21DE4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

uint64_t sub_100A21E04()
{
  sub_100134750(qword_10247F900, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247F900, (void *)&_mh_execute_header);
}

void *sub_100A21E64(void *a1, int a2)
{
  sub_100134750(__p, "");
  sub_100A21F8C((uint64_t)a1, "CLExerciseMinuteRecorderDb", a2, (uint64_t)__p, 1, 2.56);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_1022DA700;
  a1[9] = off_1022DA7B8;
  sub_100F03BA0(a1 + 41, 0, 0);
  sub_100F03BA0(a1 + 43, 0, 0);
  a1[45] = 0;
  a1[46] = 0;
  (*(void (**)(void *))(*a1 + 112))(a1);
  return a1;
}

void sub_100A21F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A21F8C(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  unint64_t v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022B2C20;
  sub_1003BDF2C((void *)(a1 + 8));
  void *v12 = &off_1022B2C68;
  *(void *)a1 = off_1022DA878;
  *(void *)(a1 + 72) = off_1022DA920;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_1022DA878;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 72) = off_1022DA920;
  *(_DWORD *)(a1 + 248) = 12000;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 256) = off_1022B2C20;
  sub_1003BDF2C((void *)(a1 + 264));
  *(void *)(a1 + 264) = &off_1022B2C68;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_100A2239C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  *a11 = v29;
  sub_1003BE1F8(v30);
  sub_1000D816C(v28);
  sub_1011F8AE0(v27);
  *__int16 v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_100A22434()
{
}

void *sub_100A2243C(void *a1)
{
  *a1 = off_1022DA878;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_1022DA920;
  a1[32] = off_1022B2C20;
  sub_1003BE1F8(a1 + 33);
  sub_1000D816C(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022B2C20;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void *sub_100A224FC(void *a1)
{
  *a1 = off_1022DA700;
  a1[9] = off_1022DA7B8;
  sub_100A2257C((uint64_t)a1, 0, 0);

  return sub_100A2243C(a1);
}

void sub_100A2257C(uint64_t a1, void *a2, const void *a3)
{
  if ((a2 != 0) == (a3 != 0))
  {

    *(void *)(a1 + 360) = a2;
    char v6 = *(const void **)(a1 + 368);
    if (v6) {
      _Block_release(v6);
    }
    if (a3) {
      *(void *)(a1 + 368) = _Block_copy(a3);
    }
  }
  else
  {
    uint64_t v7 = sub_101A79534();
    sub_100A225F4(v7);
  }
}

void *sub_100A225F8(uint64_t a1)
{
  return sub_100A224FC((void *)(a1 - 72));
}

void sub_100A22600(void *a1)
{
  sub_100A224FC(a1);

  operator delete();
}

void sub_100A22638(uint64_t a1)
{
  sub_100A224FC((void *)(a1 - 72));

  operator delete();
}

uint64_t sub_100A22674(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 112;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 16))(a1 + 112);
  if (*(double *)(*(void *)(a2 + 8) - 16) == 1.79769313e308)
  {
    if (sub_100082064(a1 + 72))
    {
      sub_10002B640(*(void *)(a1 + 80));
      CFAbsoluteTimeGetCurrent();
      sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM ExerciseMinuteHistory WHERE startTime < ?");
    }
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022DA848);
    }
    uint64_t v5 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "ExerciseMinute, Failed to expire records.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022DA848);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual long CLExerciseMinuteRecorderDb::aggregateRecords(const CLAggregationRules &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  return -1;
}

void sub_100A22988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100A229CC()
{
}

uint64_t sub_100A229D4(uint64_t a1, uint64_t a2)
{
  return sub_100A22674(a1 - 72, a2);
}

uint64_t sub_100A229DC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v6 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (sub_100082064(v4)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM ExerciseMinuteHistory ORDER BY startTime ASC");
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
}

void sub_100A22C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100A22C68(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1;
  }
  if (v5 != 100) {
    return 2;
  }
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)a2 = sqlite3_column_int(v6, 0);
  uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(*a1);
  double v8 = sqlite3_column_double(v7, 1);
  uint64_t result = 0;
  *(double *)(a2 + 8) = v8;
  return result;
}

uint64_t sub_100A22CE4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (sub_100082064(v4))
  {
    if (sub_1005F93E8(*(void *)(a1 + 80))) {
      sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM ExerciseMinuteHistory WHERE id >= ? ORDER BY id ASC LIMIT ?");
    }
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022DA848);
    }
    uint64_t v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "ExerciseMinute, DB UUID un-initialized", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022DA848);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CMError CLExerciseMinuteRecorderDb::queryExerciseMinuteDataSince(CLExerciseMinuteData &, std::vector<CLExerciseMinuteData> &) const", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    uint64_t v6 = 103;
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022DA848);
    }
    int v5 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "ExerciseMinute, DB not accessible.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022DA848);
      }
      __int16 v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLExerciseMinuteRecorderDb::queryExerciseMinuteDataSince(CLExerciseMinuteData &, std::vector<CLExerciseMinuteData> &) const", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    uint64_t v6 = 109;
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return v6;
}

void sub_100A23548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100A235BC(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT COUNT(*) FROM ExerciseMinuteHistory");
  }
  return 0xFFFFFFFFLL;
}

void sub_100A23678(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A236B4(uint64_t a1)
{
  return sub_100A235BC(a1 - 72);
}

void sub_100A236BC(uint64_t a1)
{
  if (sub_10014C3C0(*(void *)(a1 + 80)))
  {
    sub_1005F7B0C(*(void *)(a1 + 80), "ExerciseMinuteHistory", (const char **)&qword_10247F938, (const std::string::value_type **)&qword_10247F9C8, 0);
    *(void *)(a1 + 328) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"INSERT INTO ExerciseMinuteHistory (startTime) VALUES (?)");
    *(void *)(a1 + 336) = v2;
    *(void *)(a1 + 344) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM ExerciseMinuteHistory ORDER BY startTime DESC LIMIT 1");
    *(void *)(a1 + 352) = v3;
    *(_DWORD *)(a1 + 132) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022DA848);
    }
    uint64_t v4 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "ExerciseMinute, Device is locked and we are unable to open the database", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022DA848);
      }
      int v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLExerciseMinuteRecorderDb::prepareSQLStatements()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
}

uint64_t sub_100A238D0(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM ExerciseMinuteHistory");
  }
  return result;
}

void sub_100A23984(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A2399C(uint64_t a1)
{
  return sub_100A238D0(a1 - 72);
}

uint64_t sub_100A239A4(uint64_t *a1, uint64_t a2)
{
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10014D518(a1[10], (uint64_t)"DELETE FROM ExerciseMinuteHistory WHERE startTime > ?");
  }
  return result;
}

void sub_100A23C34(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A23C78(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"UPDATE ExerciseMinuteHistory SET startTime = startTime + ?");
  }
  return result;
}

void sub_100A23E9C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A23EE0(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    sub_100082068((void *)(a1 + 328), &v16);
    int v5 = (sqlite3_stmt *)sub_10014D19C(v16);
    if (sub_100055D58(v5, 1, *(double *)(a2 + 8)))
    {
      uint64_t v6 = *(void *)(a1 + 80);
      uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(v16);
      sub_10001FEB0(v6, v7);
      ++*(_DWORD *)(a1 + 132);
      if (*(void *)(a1 + 360))
      {
        if (*(void *)(a1 + 368))
        {
          uint64_t v17 = *(void *)(a2 + 4);
          int v18 = *(_DWORD *)(a2 + 12);
          int v8 = sub_1006037D0(*(void *)(a1 + 80));
          uint64_t v9 = sub_1005F93E8(*(void *)(a1 + 80));
          uint64_t v10 = *(void **)(a1 + 360);
          v11[0] = _NSConcreteStackBlock;
          v11[1] = 3221225472;
          v11[2] = sub_100A240B0;
          v11[3] = &unk_1022BB368;
          v11[4] = a1;
          int v12 = v8;
          uint64_t v13 = v17;
          int v14 = v18;
          uint64_t v15 = v9;
          [v10 async:v11];
        }
      }
    }
    uint64_t result = v16;
    uint64_t v16 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_100A24068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A240B0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 368);
  uint64_t v4 = *(void *)(a1 + 56);
  long long v3 = *(_OWORD *)(a1 + 40);
  return (*(uint64_t (**)(uint64_t, long long *))(v1 + 16))(v1, &v3);
}

uint64_t sub_100A240F8(uint64_t a1, uint64_t a2)
{
  if (!sub_100082064(a1 + 72)) {
    return 2;
  }
  sub_100082068((void *)(a1 + 344), &v9);
  uint64_t v4 = sub_100A22C68(&v9, (uint64_t)&v7);
  if (!v4)
  {
    *(_DWORD *)a2 = v7;
    *(void *)(a2 + 8) = v8;
  }
  uint64_t v5 = v9;
  uint64_t v9 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return v4;
}

void sub_100A2419C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A241B8(void *a1)
{
  long long v3 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if (SHIBYTE(v16[0]) < 0)
  {
    uint64_t v10 = v15[1];
    operator delete(v15[0]);
    if (v10)
    {
LABEL_3:
      if (sub_100082064(a1 + 9))
      {
        sub_10010F274((uint64_t)v15);
        uint64_t v4 = sub_100132EFC(v16, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0) {
          uint64_t v5 = __p;
        }
        else {
          uint64_t v5 = (void **)__p[0];
        }
        if ((v14 & 0x80u) == 0) {
          uint64_t v6 = v14;
        }
        else {
          uint64_t v6 = (uint64_t)__p[1];
        }
        int v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
        sub_100132EFC(v7, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v8 = a1[10];
        std::stringbuf::str();
        if ((v14 & 0x80u) == 0) {
          uint64_t v9 = __p;
        }
        else {
          uint64_t v9 = (void **)__p[0];
        }
        sub_10014D518(v8, (uint64_t)v9);
      }
      return 2;
    }
  }
  else if (HIBYTE(v16[0]))
  {
    goto LABEL_3;
  }
  sub_101A79698(v3);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  *(void **)((char *)v15
  v16[0] = v11;
  if (v17 < 0) {
    operator delete((void *)v16[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return 2;
}

void sub_100A245F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_100A24674(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_100A2656C(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022DA848);
  }
  uint64_t v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)long long buf = 68289282;
    *(_DWORD *)uint64_t v13 = 0;
    *(_WORD *)&v13[4] = 2082;
    *(void *)&v13[6] = "";
    __int16 v14 = 2082;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022DA848);
    }
    int v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)long long buf = 134349056;
      *(void *)uint64_t v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022DA848);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLExerciseMinuteData>::setDatabaseAccessible() [T = CLExerciseMinuteData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_100A24DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_100A24E20(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

id *sub_100A24E34(uint64_t a1, long long *a2, char a3)
{
  v30[0] = (id)os_transaction_create();
  v30[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 72))(a1, a1 + 224, a2);
    return sub_1000E1098(v30);
  }
  if ((a3 & 1) == 0) {
    sub_10002B640(*(void *)(a1 + 80));
  }
  int v6 = (*(uint64_t (**)(uint64_t, char *))(*(void *)a1 + 104))(a1, v28);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022DA848);
      }
      __int16 v14 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022DA848);
        }
        LOWORD(v31) = 0;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLExerciseMinuteData>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLExerciseMinuteData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      goto LABEL_43;
    }
    double v7 = *((double *)a2 + 1);
    double v8 = v29;
    double v9 = v7 - v29;
    if (v7 - v29 < 0.0) {
      double v9 = -(v7 - v29);
    }
    if (v9 > 604800.0)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022DA848);
      }
      uint64_t v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *((void *)a2 + 1);
        *(_DWORD *)long long buf = 134349312;
        double v36 = v29;
        __int16 v37 = 2050;
        uint64_t v38 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022DA848);
        }
        uint64_t v22 = *((void *)a2 + 1);
        int v31 = 134349312;
        double v32 = v29;
        __int16 v33 = 2050;
        uint64_t v34 = v22;
        int v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLExerciseMinuteData>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLExerciseMinuteData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
      }
      CLWriteStackshot();
      double v7 = *((double *)a2 + 1);
      double v8 = v29;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022DA848);
        }
        int v12 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          double v13 = *((double *)a2 + 1);
          *(_DWORD *)long long buf = 134217984;
          double v36 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022DA848);
          }
          double v24 = *((double *)a2 + 1);
          int v31 = 134217984;
          double v32 = v24;
          __int16 v25 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLExerciseMinuteData>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLExerciseMinuteData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v25);
          if (v25 != (char *)buf) {
            free(v25);
          }
        }
        (*(void (**)(uint64_t, long long *))(*(void *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      double v16 = v7 - v8;
      double v17 = *(float *)(a1 + 136);
      if (qword_102418FD0 != -1)
      {
        double v27 = *(float *)(a1 + 136);
        dispatch_once(&qword_102418FD0, &stru_1022DA848);
        double v17 = v27;
      }
      double v18 = v16 - v17;
      unint64_t v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 134217984;
        double v36 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022DA848);
        }
        int v31 = 134217984;
        double v32 = v18;
        int v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLExerciseMinuteData>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLExerciseMinuteData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v26);
        if (v26 != (char *)buf) {
          free(v26);
        }
      }
      (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v18);
    }
    (*(void (**)(uint64_t, char *, uint64_t, long long *))(*(void *)a1 + 144))(a1, v28, a1 + 224, a2);
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  long long v20 = *a2;
  *(void *)(a1 + 240) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 224) = v20;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_100028FB4(*(void *)(a1 + 80));
  }
  return sub_1000E1098(v30);
}

void sub_100A2563C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100A25668(uint64_t a1)
{
  return sub_100A24674(a1 - 72);
}

void sub_100A25670(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100A256A0(void *a1, void *a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101A79804(v4);
    sub_1001D7FD4();
  }
  int v12 = v15[1];
  operator delete(v15[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    a2[1] = *a2;
    sub_10010F274((uint64_t)v15);
    int v6 = sub_100132EFC(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = v14;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_100A25A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  sub_101A129A8((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_100A25B18(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101A79970(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  int v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    int v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_100A25E8C(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A79ADC(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    uint64_t v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    double v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      double v9 = __p;
    }
    else {
      double v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_100A261B8(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A79C48(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    uint64_t v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

uint64_t sub_100A264DC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

void sub_100A2656C(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_100A265EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A26608(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_100A2664C()
{
  qword_10247F938 = (uint64_t)"id";
  dword_10247F940 = 1;
  word_10247F944 = 257;
  byte_10247F948 = 0;
  byte_10247F960 = 0;
  qword_10247F968 = (uint64_t)"startTime";
  dword_10247F970 = 2;
  word_10247F974 = 0;
  byte_10247F978 = 0;
  byte_10247F990 = 0;
  qword_10247F998 = 0;
  dword_10247F9A0 = 5;
  word_10247F9A4 = 0;
  byte_10247F9A8 = 0;
  byte_10247F9C0 = 0;
  qword_10247F9C8 = (uint64_t)"startTime";
  unk_10247F9D0 = 0;
}

uint64_t sub_100A26784()
{
  if (qword_10247F9D8 != -1) {
    dispatch_once(&qword_10247F9D8, &stru_1022DA980);
  }
  return qword_10248A810;
}

void sub_100A267C8(id a1)
{
}

void sub_100A26814()
{
}

CFRunLoopTimerRef *sub_100A26838(CFRunLoopTimerRef *a1, int a2, char a3)
{
  *a1 = (CFRunLoopTimerRef)off_1022DA9B0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  *((_DWORD *)a1 + 8) = a2;
  a1[5] = 0;
  *((unsigned char *)a1 + 48) = a3;
  *((_DWORD *)a1 + 13) = 0;
  a1[7] = 0;
  context.version = 0;
  context.info = a1;
  memset(&context.retain, 0, 24);
  CFRunLoopTimerRef v4 = CFRunLoopTimerCreate(kCFAllocatorDefault, 1.79769313e308, 1.79769313e308, 0, 0, (CFRunLoopTimerCallBack)sub_100A26920, &context);
  a1[7] = v4;
  if (v4)
  {
    sub_1000D3E78();
    uint64_t v5 = (__CFRunLoop *)sub_1001BEA14();
    CFRunLoopAddTimer(v5, a1[7], kCFRunLoopCommonModes);
  }
  return a1;
}

void sub_100A26908(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100A2A54C((void ***)va);
  _Unwind_Resume(a1);
}

void sub_100A26920(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100A26928(uint64_t a1)
{
  *(void *)a1 = off_1022DA9B0;
  uint64_t v2 = *(__CFRunLoopTimer **)(a1 + 56);
  if (v2)
  {
    CFRunLoopTimerInvalidate(v2);
    CFRelease(*(CFTypeRef *)(a1 + 56));
  }
  sub_100A269A0(a1);
  CFRunLoopTimerRef v4 = (void **)(a1 + 8);
  sub_100A2A54C(&v4);
  return a1;
}

void sub_100A269A0(uint64_t a1)
{
  double Current = CFRunLoopGetCurrent();
  sub_1000D3E78();
  if (Current != (void *)sub_1001BEA14())
  {
    sub_101A79DB4();
LABEL_10:
    dispatch_once(&qword_102418FD0, &stru_1022DAA18);
    goto LABEL_5;
  }
  if (*(void *)(a1 + 40))
  {
    sub_1000D3E78();
    sub_1001BEA14();
    IOHIDEventSystemClientUnscheduleWithRunLoop();
    IOHIDEventSystemClientUnregisterEventCallback();
    IOHIDEventSystemClientUnregisterResetCallback();
    IOHIDEventSystemClientUnregisterDeviceMatchingCallback();
    CFRelease(*(CFTypeRef *)(a1 + 40));
    *(void *)(a1 + 40) = 0;
  }
  double Current = CLAvengerScannerClientController.cache;
  if (qword_102418FD0 != -1) {
    goto LABEL_10;
  }
LABEL_5:
  uint64_t v3 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Hid interface closed", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (Current[506] != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022DAA18);
    }
    CFRunLoopTimerRef v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIoHidInterface::closeHid()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
}

void sub_100A26BE0(uint64_t a1)
{
  sub_100A26928(a1);

  operator delete();
}

void **sub_100A26C18(uint64_t *a1, void *a2)
{
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1000D3E78();
  if (Current != (CFRunLoopRef)sub_1001BEA14())
  {
    sub_101A79F18(qword_102418FD0 == -1);
    __break(1u);
LABEL_24:
    dispatch_once(&qword_102418FD0, &stru_1022DAA18);
LABEL_21:
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIoHidInterface::addDevice(std::shared_ptr<CLIoHidInterface::Device>)", "%s\n", v22);
    if (v22 != (char *)buf) {
      free(v22);
    }
    goto LABEL_7;
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022DAA18);
  }
  uint64_t v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(_DWORD *)(*a2 + 16);
    int v7 = *(_DWORD *)(*a2 + 20);
    *(_DWORD *)long long buf = 67240448;
    *(_DWORD *)&uint8_t buf[4] = v7;
    LOWORD(v25) = 1026;
    *(_DWORD *)((char *)&v25 + 2) = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Adding new Device with usage pair {%{public}d, %{public}d}", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 == -1) {
      goto LABEL_21;
    }
    goto LABEL_24;
  }
LABEL_7:
  long long v8 = *(_OWORD *)a2;
  uint64_t v9 = a2[1];
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t result = (void **)(a1 + 3);
  unint64_t v11 = a1[3];
  uint64_t v12 = (void *)a1[2];
  if ((unint64_t)v12 >= v11)
  {
    long long v23 = v8;
    uint64_t v14 = a1[1];
    uint64_t v15 = ((uint64_t)v12 - v14) >> 4;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v17 = v11 - v14;
    if (v17 >> 3 > v16) {
      unint64_t v16 = v17 >> 3;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    int v28 = a1 + 3;
    unint64_t v19 = (char *)sub_1000C571C((uint64_t)result, v18);
    long long v20 = &v19[16 * v15];
    *(void *)long long buf = v19;
    __int16 v25 = v20;
    double v27 = &v19[16 * v21];
    *(_OWORD *)long long v20 = v23;
    int v26 = v20 + 16;
    sub_100A2A5EC(a1 + 1, buf);
    unsigned __int8 v13 = (void *)a1[2];
    uint64_t result = sub_100A2A774((void **)buf);
  }
  else
  {
    void *v12 = v8;
    v12[1] = v9;
    unsigned __int8 v13 = v12 + 2;
    a1[2] = (uint64_t)(v12 + 2);
  }
  a1[2] = (uint64_t)v13;
  return result;
}

void sub_100A26EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_100A2A774((void **)va);
  _Unwind_Resume(a1);
}

void sub_100A26F14(uint64_t a1)
{
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1000D3E78();
  if (Current != (void *)sub_1001BEA14())
  {
    sub_101A7A08C();
LABEL_20:
    dispatch_once(&qword_102418FD0, &stru_1022DAA18);
LABEL_7:
    uint64_t v5 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Event system client initialized successfully", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (Current[506] != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022DAA18);
      }
      int v6 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIoHidInterface::initializeHidIfNecessary()", "%s\n");
LABEL_24:
      if (v6 != buf) {
        free(v6);
      }
      return;
    }
    return;
  }
  if (*(void *)(a1 + 40)) {
    return;
  }
  CFStringRef v9 = @"HighFrequency";
  uint64_t v3 = &__kCFBooleanTrue;
  if (!*(unsigned char *)(a1 + 48)) {
    uint64_t v3 = &__kCFBooleanFalse;
  }
  uint64_t v10 = v3;
  +[NSDictionary dictionaryWithObjects:&v10 forKeys:&v9 count:1];
  uint64_t v4 = IOHIDEventSystemClientCreateWithType();
  *(void *)(a1 + 40) = v4;
  if (v4)
  {
    sub_1000D3E78();
    sub_1001BEA14();
    IOHIDEventSystemClientScheduleWithRunLoop();
    IOHIDEventSystemClientRegisterEventCallback();
    IOHIDEventSystemClientRegisterResetCallback();
    IOHIDEventSystemClientRegisterDeviceMatchingCallback();
    sub_100A272F4(a1);
    IOHIDEventSystemClientSetProperty(*(IOHIDEventSystemClientRef *)(a1 + 40), @"PreserveTimestamp", kCFBooleanTrue);
    CFRunLoopRef Current = CLAvengerScannerClientController.cache;
    if (qword_102418FD0 == -1) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022DAA18);
  }
  int v7 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "[CLIoHidInterface] Could not create event system client. All bets are off", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022DAA18);
    }
    int v6 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLIoHidInterface::initializeHidIfNecessary()", "%s\n");
    goto LABEL_24;
  }
}

void sub_100A272F4(uint64_t a1)
{
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1000D3E78();
  if (Current != (CFRunLoopRef)sub_1001BEA14())
  {
    sub_101A7A1F0();
    __break(1u);
LABEL_39:
    dispatch_once(&qword_102418FD0, &stru_1022DAA18);
LABEL_28:
    unint64_t v19 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134349056;
      v30[0] = v1;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] Setting matching multiple for %{public}lu events", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022DAA18);
      }
      int v27 = 134349056;
      *(void *)int v28 = v1;
      uint64_t v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIoHidInterface::setMatchingForDevices()", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
    +[NSArray arrayWithArray:v24];
    IOHIDEventSystemClientSetMatchingMultiple();
    sub_100A27EC4(a1);
    sub_100A27948(a1, 0);
    return;
  }
  uint64_t v4 = sub_1000A16E8();
  double v24 = +[NSMutableArray arrayWithCapacity:(uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 4];
  int v6 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *(uint64_t **)(a1 + 16);
  if (v6 == v5)
  {
    uint64_t v1 = 0;
LABEL_27:
    if (qword_102418FD0 == -1) {
      goto LABEL_28;
    }
    goto LABEL_39;
  }
  uint64_t v1 = 0;
  while (1)
  {
    int v7 = (std::__shared_weak_count *)v6[1];
    if (v7) {
      break;
    }
LABEL_19:
    v6 += 2;
    if (v6 == v5) {
      goto LABEL_27;
    }
  }
  uint64_t v8 = *v6;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  CFStringRef v9 = std::__shared_weak_count::lock(v7);
  if (!v9)
  {
LABEL_18:
    std::__shared_weak_count::__release_weak(v7);
    goto LABEL_19;
  }
  uint64_t v10 = v9;
  if (!v8)
  {
LABEL_17:
    sub_1000DB0A0(v10);
    goto LABEL_18;
  }
  if ((v4 & 0x800000000000) != 0 || *(_DWORD *)(v8 + 20) != 65280 || *(_DWORD *)(v8 + 16) != 8)
  {
    if (*(void *)(v8 + 48))
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022DAA18);
      }
      unint64_t v11 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
      {
        int v13 = *(_DWORD *)(v8 + 16);
        int v12 = *(_DWORD *)(v8 + 20);
        *(_DWORD *)long long buf = 67240448;
        LODWORD(v30[0]) = v12;
        WORD2(v30[0]) = 1026;
        *(_DWORD *)((char *)v30 + 6) = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] Adding match entry for usage pair {%{public}d, %{public}d}", buf, 0xEu);
      }
      uint64_t v14 = CKSyncEngine_ptr;
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022DAA18);
        }
        int v17 = *(_DWORD *)(v8 + 16);
        int v16 = *(_DWORD *)(v8 + 20);
        int v27 = 67240448;
        *(_DWORD *)int v28 = v16;
        *(_WORD *)&v28[4] = 1026;
        *(_DWORD *)&v28[6] = v17;
        unint64_t v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLIoHidInterface::setMatchingForDevices()", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
        uint64_t v14 = CKSyncEngine_ptr;
      }
      v25[0] = @"PrimaryUsagePage";
      id v15 = [v14[341] numberWithInt:*(unsigned int *)(v8 + 20)];
      v25[1] = @"PrimaryUsage";
      v26[0] = v15;
      v26[1] = [v14[341] numberWithInt:*(unsigned int *)(v8 + 16)];
      [(NSMutableArray *)v24 setObject:+[NSDictionary dictionaryWithObjects:v26 forKeys:v25 count:2] atIndexedSubscript:v1++];
    }
    goto LABEL_17;
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022DAA18);
  }
  long long v20 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "[CLIoHidInterface] Prox: remove set matching multiple", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022DAA18);
    }
    LOWORD(v27) = 0;
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIoHidInterface::setMatchingForDevices()", "%s\n", v22);
    if (v22 != (char *)buf) {
      free(v22);
    }
  }
  IOHIDEventSystemClientSetMatchingMultiple();
  sub_100A27EC4(a1);
  sub_100A27948(a1, 0);
  sub_1000DB0A0(v10);
  std::__shared_weak_count::__release_weak(v7);
}

void sub_100A27918(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v2);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void sub_100A27948(uint64_t a1, __IOHIDServiceClient *a2)
{
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1000D3E78();
  if (Current == (CFRunLoopRef)sub_1001BEA14())
  {
    if (qword_102418FD0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_101A7A35C(qword_102418FD0 == -1);
    __break(1u);
  }
  dispatch_once(&qword_102418FD0, &stru_1022DAA18);
LABEL_3:
  uint64_t v4 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[CLIoHidInterface] Refreshing service refs", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022DAA18);
    }
    LOWORD(v29) = 0;
    long long v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIoHidInterface::refreshDeviceServiceRefs(const IOHIDServiceClientRef)", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
  CFArrayRef obj = IOHIDEventSystemClientCopyServices(*(IOHIDEventSystemClientRef *)(a1 + 40));
  if (obj)
  {
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    id v5 = [(__CFArray *)obj countByEnumeratingWithState:&v25 objects:v37 count:16];
    if (v5)
    {
      uint64_t v23 = *(void *)v26;
      do
      {
        int v6 = 0;
        do
        {
          if (*(void *)v26 != v23) {
            objc_enumerationMutation(obj);
          }
          int v7 = *(__IOHIDServiceClient **)(*((void *)&v25 + 1) + 8 * (void)v6);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022DAA18);
          }
          if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
          {
            unsigned int v8 = [[(id)(id)IOHIDServiceClientCopyProperty(v7, @"PrimaryUsagePage")] intValue];
            unsigned int v9 = [[(id)(id)IOHIDServiceClientCopyProperty(v7, @"PrimaryUsage")] intValue];
            unsigned int v10 = [[(id)(id)IOHIDServiceClientCopyProperty(v7, @"LocationID")] intValue];
            if (qword_102418FD0 != -1) {
              dispatch_once(&qword_102418FD0, &stru_1022DAA18);
            }
            unint64_t v11 = qword_102418FD8;
            if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)long long buf = 134284289;
              int v39 = v7;
              __int16 v40 = 1026;
              unsigned int v41 = v8;
              __int16 v42 = 1026;
              unsigned int v43 = v9;
              __int16 v44 = 1026;
              unsigned int v45 = v10;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] Check service ref %{private}p with usage pair {%{public}d, %{public}d} locationID %{public}d as a potential match", buf, 0x1Eu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102418FD0 != -1) {
                dispatch_once(&qword_102418FD0, &stru_1022DAA18);
              }
              int v29 = 134284289;
              int v30 = v7;
              __int16 v31 = 1026;
              unsigned int v32 = v8;
              __int16 v33 = 1026;
              unsigned int v34 = v9;
              __int16 v35 = 1026;
              unsigned int v36 = v10;
              unint64_t v18 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLIoHidInterface::refreshDeviceServiceRefs(const IOHIDServiceClientRef)", "%s\n", v18);
              if (v18 != (char *)buf) {
                free(v18);
              }
            }
          }
          if (v7 != a2)
          {
            int v13 = *(uint64_t **)(a1 + 8);
            int v12 = *(uint64_t **)(a1 + 16);
            while (v13 != v12)
            {
              uint64_t v14 = (std::__shared_weak_count *)v13[1];
              if (v14)
              {
                uint64_t v15 = *v13;
                atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                int v16 = std::__shared_weak_count::lock(v14);
                if (v16)
                {
                  int v17 = v16;
                  if (v15 && (sub_100098750(v15, v7) & 1) != 0)
                  {
                    sub_1000689E4(v15, v7, 0);
                    if (*(void *)(v15 + 80)) {
                      IOHIDServiceClientRegisterRemovalCallback();
                    }
                  }
                  sub_1000DB0A0(v17);
                }
                std::__shared_weak_count::__release_weak(v14);
              }
              v13 += 2;
            }
          }
          int v6 = (char *)v6 + 1;
        }
        while (v6 != v5);
        id v19 = [(__CFArray *)obj countByEnumeratingWithState:&v25 objects:v37 count:16];
        id v5 = v19;
      }
      while (v19);
    }
  }
}

void sub_100A27E9C(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v2);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void sub_100A27EC4(uint64_t a1)
{
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1000D3E78();
  if (Current == (CFRunLoopRef)sub_1001BEA14())
  {
    if (qword_102418FD0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_101A7A634(qword_102418FD0 == -1);
    __break(1u);
  }
  dispatch_once(&qword_102418FD0, &stru_1022DAA18);
LABEL_3:
  uint64_t v3 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[CLIoHidInterface] Invalidating hid service refs", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022DAA18);
    }
    unsigned int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIoHidInterface::invalidateDeviceServiceRefs()", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  for (uint64_t i = *(uint64_t **)(a1 + 16); v4 != i; v4 += 2)
  {
    int v6 = (std::__shared_weak_count *)v4[1];
    if (v6)
    {
      uint64_t v7 = *v4;
      atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      unsigned int v8 = std::__shared_weak_count::lock(v6);
      if (v8)
      {
        unsigned int v9 = v8;
        if (v7)
        {
          sub_1001B1938(v7);
          sub_100A28118(v7);
          sub_100A2832C(v7);
        }
        sub_1000DB0A0(v9);
      }
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_100A280F4(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v2);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void sub_100A28118(uint64_t a1)
{
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022DAA18);
  }
  uint64_t v2 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    int v4 = *(_DWORD *)(a1 + 16);
    int v3 = *(_DWORD *)(a1 + 20);
    BOOL v5 = *(void *)(a1 + 48) != 0;
    uint64_t v6 = *(void *)(a1 + 24);
    *(_DWORD *)long long buf = 67240961;
    int v9 = v3;
    __int16 v10 = 1026;
    int v11 = v4;
    __int16 v12 = 1026;
    BOOL v13 = v5;
    __int16 v14 = 2049;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] Device,hidUsagePage,%{public}d,hidUsage,%{public}d,hasCallback,%{public}d,serviceRef,%{private}p", buf, 0x1Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022DAA18);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIoHidInterface::Device::print() const", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
}

id sub_100A2832C(uint64_t a1)
{
  p_cache = CLAvengerScannerClientController.cache;
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022DAA18);
  }
  id result = (id)os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    int v4 = *(void **)(a1 + 160);
    id result = [v4 countByEnumeratingWithState:&v16 objects:v32 count:16];
    if (result)
    {
      id v5 = result;
      uint64_t v6 = *(void *)v17;
      do
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v17 != v6) {
            objc_enumerationMutation(v4);
          }
          uint64_t v8 = *(void *)(*((void *)&v16 + 1) + 8 * (void)v7);
          id v9 = [*(id *)(a1 + 160) objectForKeyedSubscript:v8];
          if (p_cache[506] != (void *)-1) {
            dispatch_once(&qword_102418FD0, &stru_1022DAA18);
          }
          __int16 v10 = qword_102418FD8;
          if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
          {
            id v11 = [v9 value];
            unsigned int v12 = [v9 dirty];
            *(_DWORD *)long long buf = 138543874;
            uint64_t v27 = v8;
            __int16 v28 = 2114;
            id v29 = v11;
            p_cache = CLAvengerScannerClientController.cache;
            __int16 v30 = 1026;
            unsigned int v31 = v12;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] \tProperty: %{public}@ = %{public}@,dirty,%{public}d", buf, 0x1Cu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (p_cache[506] != (void *)-1) {
              dispatch_once(&qword_102418FD0, &stru_1022DAA18);
            }
            id v13 = [v9 value];
            unsigned int v14 = [v9 dirty];
            int v20 = 138543874;
            uint64_t v21 = v8;
            __int16 v22 = 2114;
            id v23 = v13;
            __int16 v24 = 1026;
            unsigned int v25 = v14;
            uint64_t v15 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLIoHidInterface::Device::printProperties() const", "%s\n", v15);
            if (v15 != (char *)buf) {
              free(v15);
            }
            p_cache = (void **)(CLAvengerScannerClientController + 16);
          }
          uint64_t v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        id result = [v4 countByEnumeratingWithState:&v16 objects:v32 count:16];
        id v5 = result;
      }
      while (result);
    }
  }
  return result;
}

BOOL sub_100A28618(uint64_t a1, __IOHIDServiceClient *a2, const __CFString *p_cache, const void *a4)
{
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1000D3E78();
  if (Current != (CFRunLoopRef)sub_1001BEA14())
  {
    sub_101A7A7A8();
    goto LABEL_19;
  }
  if (!a2)
  {
    p_cache = (const __CFString *)CLAvengerScannerClientController.cache;
    if (qword_102418FD0 == -1)
    {
LABEL_6:
      id v9 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "[CLIoHidInterface] Property can not be set for null hidServiceRef", buf, 2u);
      }
      BOOL v10 = sub_10013D1A0(115, 0);
      BOOL result = 0;
      if (!v10) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (p_cache[126].data != (char *)-1) {
        dispatch_once(&qword_102418FD0, &stru_1022DAA18);
      }
      id v11 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLIoHidInterface::setPropertyIoHid(IOHIDServiceClientRef, CFStringRef, CFTypeRef)", "%s\n");
LABEL_23:
      if (v11 != buf) {
        free(v11);
      }
      return 0;
    }
LABEL_19:
    dispatch_once(&qword_102418FD0, &stru_1022DAA18);
    goto LABEL_6;
  }
  if (IOHIDServiceClientSetProperty(a2, p_cache, a4)) {
    return 1;
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022DAA18);
  }
  unsigned int v12 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] IOHIDServiceClientSetProperty() returned false", buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022DAA18);
    }
    id v11 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLIoHidInterface::setPropertyIoHid(IOHIDServiceClientRef, CFStringRef, CFTypeRef)", "%s\n");
    goto LABEL_23;
  }
  return result;
}

void sub_100A28918(uint64_t a1)
{
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022DAA18);
  }
  uint64_t v2 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] It looks like our HID event system just become available (again)", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022DAA18);
    }
    __int16 v6 = 0;
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIoHidInterface::onEventSystemReset(void *)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  uint64_t v3 = sub_1000D3E78();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _OWORD v5[2] = sub_100A28B00;
  v5[3] = &unk_1022A3020;
  _OWORD v5[4] = a1;
  sub_1009E8F7C(v3, (uint64_t)v5);
}

void sub_100A28B00(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_100A27948(v1, 0);
  uint64_t v2 = *(uint64_t **)(v1 + 8);
  for (uint64_t i = *(uint64_t **)(v1 + 16); v2 != i; v2 += 2)
  {
    int v4 = (std::__shared_weak_count *)v2[1];
    if (v4)
    {
      uint64_t v5 = *v2;
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      __int16 v6 = std::__shared_weak_count::lock(v4);
      if (v6)
      {
        uint64_t v7 = v6;
        if (v5)
        {
          uint64_t v8 = *(void (**)(void))(v5 + 96);
          if (v8) {
            v8(*(void *)(v5 + 104));
          }
        }
        sub_1000DB0A0(v7);
      }
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100A28BA0(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v2);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void sub_100A28BBC(uint64_t a1, char *a2, __IOHIDServiceClient *a3)
{
  if (a2 == "REMOVED")
  {
    __int16 v6 = *(uint64_t **)(a1 + 8);
    uint64_t v5 = *(uint64_t **)(a1 + 16);
    if (v6 != v5)
    {
      while (1)
      {
        uint64_t v7 = (std::__shared_weak_count *)v6[1];
        if (v7) {
          break;
        }
LABEL_29:
        v6 += 2;
        if (v6 == v5) {
          goto LABEL_40;
        }
      }
      uint64_t v8 = *v6;
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      id v9 = std::__shared_weak_count::lock(v7);
      if (!v9)
      {
LABEL_28:
        std::__shared_weak_count::__release_weak(v7);
        goto LABEL_29;
      }
      BOOL v10 = v9;
      if (v8 && *(void *)(v8 + 80) && (__IOHIDServiceClient *)sub_100A291D0(v8) == a3)
      {
        unsigned int v11 = [[(id)(id)IOHIDServiceClientCopyProperty(a3, @"PrimaryUsagePage")] intValue];
        unsigned int v12 = [[(id)(id)IOHIDServiceClientCopyProperty(a3, @"PrimaryUsage")] intValue];
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022DAA18);
        }
        id v13 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v14 = *(void *)(v8 + 152);
          *(_DWORD *)long long buf = 134284291;
          uint64_t v23 = (uint64_t)a3;
          __int16 v24 = 1026;
          unsigned int v25 = v11;
          __int16 v26 = 1026;
          unsigned int v27 = v12;
          __int16 v28 = 2113;
          uint64_t v29 = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] onServiceRemoval - IOHIDServiceClientRef for service %{private}p with usage pair {%{public}d, %{public}d} and property %{private}@ will be removed.", buf, 0x22u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022DAA18);
          }
          int v20 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLIoHidInterface::onServiceRemoval(void *, IOHIDServiceClientRef)", "%s\n", v20);
          if (v20 != (char *)buf) {
            free(v20);
          }
        }
        (*(void (**)(void))(v8 + 80))(*(void *)(v8 + 88));
        sub_1001B1938(v8);
        sub_100A27948(a1, a3);
        if (sub_100A291D0(v8))
        {
          sub_100106488(a1);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022DAA18);
          }
          uint64_t v15 = qword_102418FD8;
          if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v16 = sub_100A291D0(v8);
            uint64_t v17 = *(void *)(v8 + 152);
            *(_DWORD *)long long buf = 134284291;
            uint64_t v23 = v16;
            __int16 v24 = 1026;
            unsigned int v25 = v11;
            __int16 v26 = 1026;
            unsigned int v27 = v12;
            __int16 v28 = 2113;
            uint64_t v29 = v17;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] onServiceRemoval - successfully switch to service %{private}p with usage pair {%{public}d, %{public}d} and property %{private}@.", buf, 0x22u);
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_27;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022DAA18);
          }
          sub_100A291D0(v8);
          long long v18 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLIoHidInterface::onServiceRemoval(void *, IOHIDServiceClientRef)", "%s\n", v18);
        }
        else
        {
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022DAA18);
          }
          long long v19 = qword_102418FD8;
          if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] onServiceRemoval - no available alternatives", buf, 2u);
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_27;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022DAA18);
          }
          long long v18 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLIoHidInterface::onServiceRemoval(void *, IOHIDServiceClientRef)", "%s\n", v18);
        }
        if (v18 != (char *)buf) {
          free(v18);
        }
      }
LABEL_27:
      sub_1000DB0A0(v10);
      goto LABEL_28;
    }
LABEL_40:
  }
}

void sub_100A29190(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v2);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100A291D0(uint64_t a1)
{
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1000D3E78();
  if (Current == (CFRunLoopRef)sub_1001BEA14()) {
    return *(void *)(a1 + 24);
  }
  uint64_t v4 = sub_101A7AA80();
  return sub_100A29210(v4);
}

uint64_t sub_100A29210(uint64_t a1, int a2, int a3, char a4, uint64_t a5)
{
  *(void *)a1 = off_1022DA9D0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 20) = a2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a5;
  *(unsigned char *)(a1 + 40) = a4;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = -1;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = objc_opt_new();
  return a1;
}

uint64_t sub_100A29288(uint64_t a1)
{
  *(void *)a1 = off_1022DA9D0;

  *(void *)(a1 + 160) = 0;
  uint64_t v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }

  *(void *)(a1 + 152) = 0;
  return a1;
}

void sub_100A292F4(uint64_t a1)
{
  sub_100A29288(a1);

  operator delete();
}

void sub_100A2932C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1000D3E78();
  if (Current == (CFRunLoopRef)sub_1001BEA14())
  {
    sub_100A26F14(a1[4]);
    BOOL v7 = a1[6] != 0;
    a1[6] = a2;
    a1[7] = a3;
    if ((((a2 == 0) ^ v7) & 1) == 0)
    {
      uint64_t v8 = a1[4];
      sub_100A272F4(v8);
    }
  }
  else
  {
    uint64_t v9 = sub_101A7ABE4(a1);
    sub_100A293C8(v9);
  }
}

uint64_t sub_100A293C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1000D3E78();
  uint64_t result = sub_1001BEA14();
  if (Current == (CFRunLoopRef)result)
  {
    *(void *)(a1 + 64) = a2;
    *(void *)(a1 + 72) = a3;
  }
  else
  {
    uint64_t v8 = sub_101A7AD58(a1);
    return sub_100A2941C(v8);
  }
  return result;
}

uint64_t sub_100A2941C(void *a1, uint64_t a2, uint64_t a3)
{
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1000D3E78();
  if (Current == (CFRunLoopRef)sub_1001BEA14())
  {
    a1[10] = a2;
    a1[11] = a3;
    uint64_t result = a1[3];
    if (result)
    {
      return IOHIDServiceClientRegisterRemovalCallback();
    }
  }
  else
  {
    uint64_t v8 = sub_101A7AECC(a1);
    return sub_100A294B4(v8, v9, v10);
  }
  return result;
}

uint64_t sub_100A294B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1000D3E78();
  uint64_t result = sub_1001BEA14();
  if (Current == (CFRunLoopRef)result)
  {
    *(void *)(a1 + 96) = a2;
    *(void *)(a1 + 104) = a3;
  }
  else
  {
    uint64_t v8 = sub_101A7B040(a1);
    return sub_100A29508(v8);
  }
  return result;
}

void sub_100A29508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1000D3E78();
  if (Current != (void *)sub_1001BEA14())
  {
    sub_101A7B1B4(a1);
LABEL_10:
    dispatch_once(&qword_102418FD0, &stru_1022DAA18);
    goto LABEL_5;
  }
  sub_100A26F14(*(void *)(a1 + 32));
  if (a3)
  {
    [*(id *)(a1 + 160) setObject: -[CLPropertyValue initWithValue:dirty:]([CLPropertyValue alloc], "initWithValue:dirty:", a3, 1) forKeyedSubscript:a2];
    goto LABEL_8;
  }
  CFRunLoopRef Current = CLAvengerScannerClientController.cache;
  if (qword_102418FD0 != -1) {
    goto LABEL_10;
  }
LABEL_5:
  BOOL v7 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 138543362;
    uint64_t v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "[CLIoHidInterface] Could not set property value for %{public}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (Current[506] != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022DAA18);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLIoHidInterface::Device::setProperty(NSString *, id)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
LABEL_8:
  sub_100106488(*(void *)(a1 + 32));
}

CFTypeRef sub_100A29720(uint64_t a1, const __CFString *a2)
{
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1000D3E78();
  if (Current == (CFRunLoopRef)sub_1001BEA14())
  {
    if (sub_100A297A4(a1))
    {
      uint64_t v5 = *(__IOHIDServiceClient **)(a1 + 24);
      return IOHIDServiceClientCopyProperty(v5, a2);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v7 = sub_101A7B328(a1);
    return (CFTypeRef)sub_100A297A4(v7);
  }
}

BOOL sub_100A297A4(uint64_t a1)
{
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1000D3E78();
  if (Current != (CFRunLoopRef)sub_1001BEA14())
  {
    sub_101A7B49C();
LABEL_16:
    dispatch_once(&qword_102418FD0, &stru_1022DAA18);
    goto LABEL_7;
  }
  sub_100A26F14(*(void *)(a1 + 32));
  if (*(void *)(a1 + 24)) {
    return 1;
  }
  sub_100A27948(*(void *)(a1 + 32), 0);
  if (*(void *)(a1 + 24)) {
    return 1;
  }
  p_cache = CLAvengerScannerClientController.cache;
  if (qword_102418FD0 != -1) {
    goto LABEL_16;
  }
LABEL_7:
  uint64_t v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(_DWORD *)(a1 + 16);
    int v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)long long buf = 67240448;
    int v10 = v6;
    __int16 v11 = 1026;
    int v12 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Service for usage pair {%{public}d, %{public}d} is not ready", buf, 0xEu);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (p_cache[506] != (void *)-1) {
      dispatch_once(&qword_102418FD0, &stru_1022DAA18);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLIoHidInterface::Device::initializeServiceRef()", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
    return 0;
  }
  return result;
}

void sub_100A299B8(uint64_t a1)
{
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1000D3E78();
  if (Current != (CFRunLoopRef)sub_1001BEA14())
  {
    uint64_t v3 = sub_101A7B764();
    goto LABEL_7;
  }
  sub_100A26F14(*(void *)(a1 + 32));
  if (!*(_DWORD *)(a1 + 144))
  {
LABEL_7:
    uint64_t v5 = sub_101A7B600(v3);
    sub_100A29A24(v5, v6, v7);
    return;
  }
  uint64_t v4 = *(void *)(a1 + 24);

  _IOHIDServiceClientCopyEvent(v4);
}

void sub_100A29A24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1000D3E78();
  if (Current != (CFRunLoopRef)sub_1001BEA14())
  {
    sub_101A7B8C8(a1);
LABEL_13:
    dispatch_once(&qword_102418FD0, &stru_1022DAA18);
    goto LABEL_5;
  }
  if (*(void *)(a1 + 112) == a2 && *(void *)(a1 + 120) == a3) {
    return;
  }
  p_cache = CLAvengerScannerClientController.cache;
  if (qword_102418FD0 != -1) {
    goto LABEL_13;
  }
LABEL_5:
  uint64_t v8 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = "Opening";
    if (!*(void *)(a1 + 112)) {
      uint64_t v9 = "Closing";
    }
    int v11 = *(_DWORD *)(a1 + 16);
    int v10 = *(_DWORD *)(a1 + 20);
    uint64_t v12 = *(void *)(a1 + 24);
    *(_DWORD *)long long buf = 136446979;
    uint64_t v15 = v9;
    __int16 v16 = 1026;
    int v17 = v10;
    __int16 v18 = 1026;
    int v19 = v11;
    __int16 v20 = 2049;
    uint64_t v21 = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%{public}s hid driver interface for usage pair {%{public}d, %{public}d}, hidServiceRef %{private}p", buf, 0x22u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (p_cache[506] != (void *)-1) {
      dispatch_once(&qword_102418FD0, &stru_1022DAA18);
    }
    id v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIoHidInterface::Device::setRegistryIDChangedCallback(OnRegistryIDChanged, void *)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  *(void *)(a1 + 112) = a2;
  *(void *)(a1 + 120) = a3;
}

uint64_t sub_100A29CA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1000D3E78();
  uint64_t result = sub_1001BEA14();
  if (Current == (CFRunLoopRef)result)
  {
    BOOL v8 = a2 != 0;
    BOOL v9 = a3 != 0;
    BOOL v10 = !v8 || !v9;
    if (v8 && v9) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = 0;
    }
    if (v10) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = a3;
    }
    *(void *)(a1 + 128) = v11;
    *(void *)(a1 + 136) = v12;
  }
  else
  {
    uint64_t v13 = sub_101A7BA3C(a1);
    return sub_100A29D14(v13);
  }
  return result;
}

uint64_t sub_100A29D14(uint64_t a1, int a2)
{
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1000D3E78();
  uint64_t result = sub_1001BEA14();
  if (Current == (CFRunLoopRef)result)
  {
    *(_DWORD *)(a1 + 144) = a2;
  }
  else
  {
    uint64_t v6 = sub_101A7BBB0(a1);
    return sub_100A29D64(v6, v7);
  }
  return result;
}

uint64_t sub_100A29D64(uint64_t a1, double a2)
{
  double v2 = rint(a2 * 1000000.0);
  if (a2 < 0.0) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = (uint64_t)v2;
  }
  return sub_100A29D84(a1, v3);
}

uint64_t sub_100A29D84(uint64_t a1, uint64_t a2)
{
  id v4 = [objc_alloc((Class)NSNumber) initWithLong:a2];
  (*(void (**)(uint64_t, const __CFString *, id))(*(void *)a1 + 16))(a1, @"ReportInterval", v4);

  return a2;
}

uint64_t sub_100A29E04(uint64_t a1, double a2)
{
  uint64_t v3 = (uint64_t)rint(a2 * 1000000.0);
  if (v3 >= 1000000) {
    uint64_t v3 = 1000000;
  }
  if (v3 <= 10000) {
    uint64_t v4 = 10000;
  }
  else {
    uint64_t v4 = v3;
  }
  id v5 = [objc_alloc((Class)NSNumber) initWithLong:v4];
  (*(void (**)(uint64_t, const __CFString *, id))(*(void *)a1 + 16))(a1, @"BatchInterval", v5);

  return v4;
}

void sub_100A29EB0(uint64_t a1, void *a2)
{
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1000D3E78();
  if (Current != (void *)sub_1001BEA14())
  {
    sub_101A7BD24();
    goto LABEL_33;
  }
  if ([a2 isEqualToDictionary:*(void *)(a1 + 152)])
  {
    CFRunLoopRef Current = CLAvengerScannerClientController.cache;
    if (qword_102418FD0 == -1)
    {
LABEL_4:
      id v5 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(a1 + 152);
        *(_DWORD *)long long buf = 138477827;
        uint64_t v21 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] setMatchingProperties - Early return for identical properties %{private}@", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (Current[506] != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022DAA18);
        }
        double v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLIoHidInterface::Device::setMatchingProperties(NSDictionary<NSString *,id> *)", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
      return;
    }
LABEL_33:
    dispatch_once(&qword_102418FD0, &stru_1022DAA18);
    goto LABEL_4;
  }
  id v8 = a2;

  *(void *)(a1 + 152) = a2;
  BOOL v9 = *(__IOHIDServiceClient **)(a1 + 24);
  if (v9 && !sub_1001B13A0(v9, a2))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022DAA18);
    }
    BOOL v10 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 24);
      uint64_t v12 = *(void *)(a1 + 152);
      *(_DWORD *)long long buf = 134283779;
      uint64_t v21 = v11;
      __int16 v22 = 2114;
      uint64_t v23 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] setMatchingProperties - Previously matched service ref %{private}p does not match new properties %{public}@. Clearing and refreshing.", buf, 0x16u);
    }
    uint64_t v13 = sub_10013D1A0(115, 2);
    if (v13)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022DAA18);
      }
      int v17 = (char *)_os_log_send_and_compose_impl();
      uint64_t v13 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLIoHidInterface::Device::setMatchingProperties(NSDictionary<NSString *,id> *)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    if (!sub_100A28618(v13, *(__IOHIDServiceClient **)(a1 + 24), @"ReportInterval", &off_102392EA0))
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022DAA18);
      }
      uint64_t v14 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "[CLIoHidInterface] setMatchingProperties - Failed to stop streaming from the old service", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022DAA18);
        }
        int v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLIoHidInterface::Device::setMatchingProperties(NSDictionary<NSString *,id> *)", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
    }
    sub_1001B1938(a1);
    sub_100A27948(*(void *)(a1 + 32), 0);
    if (*(void *)(a1 + 24))
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022DAA18);
      }
      uint64_t v15 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = *(void *)(a1 + 24);
        *(_DWORD *)long long buf = 134283521;
        uint64_t v21 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] setMatchingProperties - successfully switch to new service %{private}p", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022DAA18);
        }
        __int16 v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLIoHidInterface::Device::setMatchingProperties(NSDictionary<NSString *,id> *)", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
      }
      sub_100106488(*(void *)(a1 + 32));
    }
  }
}

void sub_100A2A4D8(uint64_t a1)
{
  *(void *)(a1 + 152) = 0;
}

uint64_t sub_100A2A504(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  double v2 = *(uint64_t (**)(void))(v1 + 64);
  if (v2) {
    return v2(*(void *)(v1 + 72));
  }
  return result;
}

void sub_100A2A51C(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100A2A54C(void ***a1)
{
  double v2 = *a1;
  if (*v2)
  {
    sub_100A2A5A0((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_100A2A5A0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  a1[1] = v2;
}

uint64_t sub_100A2A5EC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100A2A664((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100A2A664(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_100A2A6F8((uint64_t)v12);
  return v10;
}

uint64_t sub_100A2A6F8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100A2A730(a1);
  }
  return a1;
}

void sub_100A2A730(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    v1 += 16;
  }
}

void **sub_100A2A774(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100A2A7A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_weak(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void sub_100A2A83C(void *a1, int a2, int a3, int a4, const char *a5, const char *a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  _os_signpost_emit_with_name_impl(a1, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, a5, a6, &buf, 0x32u);
}

void sub_100A2A868(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  _os_log_impl(a1, v13, OS_LOG_TYPE_FAULT, a4, &buf, 0x32u);
}

void sub_100A2A888(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  _os_log_impl(a1, v13, OS_LOG_TYPE_INFO, a4, &buf, 0x32u);
}

BOOL sub_100A2A8A8()
{
  uint64_t v2 = *(NSObject **)(v0 + 4056);
  return os_log_type_enabled(v2, OS_LOG_TYPE_INFO);
}

BOOL sub_100A2A8C4()
{
  uint64_t v2 = *(NSObject **)(v0 + 4056);
  return os_signpost_enabled(v2);
}

void sub_100A2A8DC(uint64_t a1@<X8>)
{
  *(void *)(v1 - 72) = a1;
}

BOOL sub_100A2A8F0()
{
  uint64_t v2 = *(NSObject **)(v0 + 4056);
  return os_signpost_enabled(v2);
}

void sub_100A2AF64(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100A2AF94(id a1)
{
  byte_10247F9E0 = 1;
}

void sub_100A2AFA4(void *a1@<X8>)
{
  v6[0] = 0;
  sub_1000C7F88(buf);
  int v2 = sub_10006EF84(*(uint64_t *)buf, "GpsMotionAiding", v6);
  if (v8) {
    sub_1000DB0A0(v8);
  }
  if (v6[0] == 1) {
    int v3 = 1;
  }
  else {
    int v3 = v2 ^ 1;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022DAA78);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "GpsMotionAiding,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DAA78);
    }
    v6[1] = 67109120;
    v6[2] = v3;
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static std::unique_ptr<CLGnssAssistanceMotion> CLGnssAssistanceMotion::create(id<CLIntersiloUniverse>, CLGnssAssistanceMotion::GnssAssistanceMotionCallback)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  if (v3) {
    operator new();
  }
  *a1 = 0;
}

void sub_100A2B1F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100854EAC((uint64_t *)va);
  operator delete();
}

void sub_100A2B244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  sub_100A3196C(a1 + 8, a3);
  *(void *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  sub_1004B5FCC();
}

void sub_100A2B9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  __int16 v40 = *(void **)(v33 + 1072);
  if (v40)
  {
    *(void *)(v33 + 1080) = v40;
    operator delete(v40);
  }
  *(void *)(v33 + 984) = v38;
  sub_1003A7340((void *)(v33 + 1008));
  *(void *)(v33 + 912) = v37;
  sub_1003A7340((void *)(v33 + 936));
  *(void *)(v33 + 840) = a14;
  sub_1003A7340((void *)(v33 + 864));
  *(void *)(v33 + 768) = a15;
  sub_1003A7340((void *)(v33 + 792));
  sub_100A31A04((void *)(v33 + 568));
  sub_1006AA34C((void *)(v33 + 512));
  uint64_t v41 = *(void *)(v33 + 488);
  *(void *)(v33 + 488) = 0;
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
  }
  uint64_t v42 = *(void *)(v33 + 472);
  *(void *)(v33 + 472) = 0;
  if (v42) {
    (*(void (**)(void))(v33 + 480))();
  }
  sub_1004B6020(a13);
  uint64_t v43 = *(void *)(v33 + 112);
  *(void *)(v33 + 112) = 0;
  if (v43) {
    (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
  }
  uint64_t v44 = *(void *)(v33 + 104);
  *(void *)(v33 + 104) = 0;
  if (v44) {
    (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
  }
  uint64_t v45 = *v35;
  uint64_t *v35 = 0;
  if (v45) {
    (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
  }
  uint64_t v46 = *(void *)(v33 + 80);
  *(void *)(v33 + 80) = 0;
  if (v46) {
    (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
  }
  if (*(unsigned char *)(v33 + 72)) {
    sub_100855010(v36);
  }
  sub_100854EAC(v34);
  _Unwind_Resume(a1);
}

void sub_100A2BBE8(void *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  JUMPOUT(0x100A2BBE0);
}

void sub_100A2BBF8(uint64_t a1, const char *a2, BOOL *a3)
{
  v13[0] = 0;
  sub_1000C7F88(buf);
  if (a2[23] >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *(const char **)a2;
  }
  int v6 = sub_10006EF84(*(uint64_t *)buf, v5, v13);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v6) {
    *a3 = v13[0] == 1;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022DAA78);
  }
  uint64_t v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    if (a2[23] >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *(const char **)a2;
    }
    BOOL v9 = *a3;
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v8;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s,%d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DAA78);
    }
    if (a2[23] >= 0) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = *(const char **)a2;
    }
    BOOL v11 = *a3;
    v13[1] = 136315394;
    uint64_t v14 = v10;
    __int16 v15 = 1024;
    BOOL v16 = v11;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::readDefault(const std::string &, BOOL &)", "%s\n", v12);
    if (v12 != buf) {
      free(v12);
    }
  }
}

void sub_100A2BE38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1000DB0A0(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A2BE58(uint64_t a1, int *a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DAA98);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAssistanceMotion::onMotionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DAA98);
    }
    BOOL v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      int v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAssistanceMotion::onMotionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100A2F1A8((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100A2C014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A2C034(uint64_t a1, int *a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DAA98);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAssistanceMotion::onMotionStateObserverNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DAA98);
    }
    BOOL v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      int v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAssistanceMotion::onMotionStateObserverNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100A2F870((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100A2C1F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A2C210(uint64_t a1, int *a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DAA98);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAssistanceMotion::onMotionStateMediatorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DAA98);
    }
    BOOL v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      int v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAssistanceMotion::onMotionStateMediatorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100A2FADC((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100A2C3CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A2C3EC(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DAA98);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAssistanceMotion::onStepCountNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DAA98);
    }
    BOOL v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      int v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAssistanceMotion::onStepCountNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100A2FEA8((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100A2C5A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A2C5C8(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DAA98);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAssistanceMotion::onNatalimetryNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DAA98);
    }
    BOOL v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      int v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAssistanceMotion::onNatalimetryNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100A2EFB4((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100A2C784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A2C7A4(uint64_t a1)
{
  int v2 = *(void **)(a1 + 1072);
  if (v2)
  {
    *(void *)(a1 + 1080) = v2;
    operator delete(v2);
  }
  *(void *)(a1 + 984) = off_1022AD0A0;
  sub_1003A7340((void *)(a1 + 1008));
  *(void *)(a1 + 912) = off_1022AD0A0;
  sub_1003A7340((void *)(a1 + 936));
  *(void *)(a1 + 840) = off_1022AD0A0;
  sub_1003A7340((void *)(a1 + 864));
  *(void *)(a1 + 768) = off_1022AD0A0;
  sub_1003A7340((void *)(a1 + 792));
  sub_100A31A04((void *)(a1 + 568));
  sub_1006AA34C((void *)(a1 + 512));
  uint64_t v3 = *(void *)(a1 + 488);
  *(void *)(a1 + 488) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 472);
  *(void *)(a1 + 472) = 0;
  if (v4) {
    (*(void (**)(void))(a1 + 480))();
  }
  sub_1004B6020((uint64_t *)(a1 + 120));
  uint64_t v5 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  if (*(unsigned char *)(a1 + 72)) {
    sub_100855010((void *)(a1 + 40));
  }
  sub_100854EAC((void *)(a1 + 8));
  return a1;
}

unsigned char *sub_100A2C9B4(unsigned char *result, uint64_t a2)
{
  if (!result[72])
  {
    uint64_t v3 = result;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DAA78);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "registering,motionWorkout", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DAA78);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::registerWorkoutCallback(GnssWorkoutCallback)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    sub_100A2CB80((uint64_t)(v3 + 40), a2);
    return [*(id *)(*((void *)v3 + 14) + 16) register:*(void *)(*((void *)v3 + 14) + 8) forNotification:2 registrationInfo:0];
  }
  return result;
}

uint64_t sub_100A2CB80(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    sub_100A31C24((void *)a1, a2);
  }
  else
  {
    sub_100A31C98(a1, a2);
    *(unsigned char *)(a1 + 32) = 1;
  }
  return a1;
}

BOOL sub_100A2CBC8(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022DAA78);
  }
  int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLGnssAssistanceMotion,start", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DAA78);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::start()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_100A2CDA0((unsigned char *)a1);
  sub_100A2CF80((unsigned char *)a1);
  return sub_100842618((void *)(a1 + 472), (uint64_t)sub_100A2D140, (uint64_t)[*(id *)a1 silo], a1, 10.0, 1.0);
}

unsigned char *sub_100A2CDA0(unsigned char *result)
{
  if (!result[464])
  {
    uint64_t v1 = result;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DAA78);
    }
    int v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "registering motion activity", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DAA78);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::registerMotionNotifications()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    [*(id *)(*((void *)v1 + 12) + 16) register:*(void *)(*((void *)v1 + 12) + 8) forNotification:1 registrationInfo:0];
    [*(id *)(*((void *)v1 + 13) + 16) register:*(void *)(*((void *)v1 + 13) + 8) forNotification:0 registrationInfo:0];
    uint64_t result = [*(id *)(*((void *)v1 + 10) + 16) register:*(void *)(*((void *)v1 + 10) + 8) forNotification:2 registrationInfo:0];
    v1[464] = 1;
  }
  return result;
}

unsigned char *sub_100A2CF80(unsigned char *result)
{
  if (result[497])
  {
    uint64_t v1 = result;
    uint64_t result = (unsigned char *)sub_101587E5C();
    if (result)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DAA78);
      }
      int v2 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "turning on", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022DAA78);
        }
        uint64_t v3 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::turnOnStepCountAiding()", "%s\n", v3);
        if (v3 != (char *)buf) {
          free(v3);
        }
      }
      uint64_t result = [*(id *)(*((void *)v1 + 61) + 16) register:*(void *)(*((void *)v1 + 61) + 8) forNotification:0 registrationInfo:0];
      v1[496] = 1;
    }
  }
  return result;
}

void sub_100A2D140(uint64_t a1, unsigned int a2, id *a3)
{
  CLProfilingIdentify();
  [objc_msgSend(*a3, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DAA98);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v9 = 1;
    uint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAssistanceMotion::onAccel", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DAA98);
    }
    uint64_t v7 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v11 = 0;
      __int16 v12 = 2082;
      int v13 = "";
      __int16 v14 = 2082;
      __int16 v15 = "activity";
      __int16 v16 = 2050;
      int v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAssistanceMotion::onAccel\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v9 = 0;
  }
  sub_100A2D9DC((uint64_t)a3, a1, a2);
  if (v9) {
    os_activity_scope_leave(&state);
  }
}

void sub_100A2D2FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A2D31C(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022DAA78);
  }
  int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLGnssAssistanceMotion,stop", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DAA78);
    }
    __int16 v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::stop()", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  sub_100A2D610((unsigned char *)a1);
  sub_100A2D7E8((unsigned char *)a1);
  uint64_t v3 = *(void ***)(a1 + 576);
  uint64_t v4 = *(void ***)(a1 + 584);
  if (v4 == v3)
  {
    uint64_t v8 = (void *)(a1 + 608);
    uint64_t v4 = *(void ***)(a1 + 576);
  }
  else
  {
    unint64_t v5 = *(void *)(a1 + 600);
    uint64_t v6 = &v3[v5 >> 4];
    uint64_t v7 = (uint64_t)*v6 + 304 * (v5 & 0xF);
    uint64_t v8 = (void *)(a1 + 608);
    uint64_t v9 = *(uint64_t *)((char *)v3 + (((*(void *)(a1 + 608) + v5) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 304 * ((*(_DWORD *)(a1 + 608) + (int)v5) & 0xF);
    if (v7 != v9)
    {
      do
      {
        sub_10071874C(v7 + 248);
        v7 += 304;
        if (v7 - (void)*v6 == 4864)
        {
          uint64_t v10 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v10;
        }
      }
      while (v7 != v9);
      uint64_t v4 = *(void ***)(a1 + 584);
      uint64_t v3 = *(void ***)(a1 + 576);
    }
  }
  void *v8 = 0;
  unint64_t v11 = (char *)v4 - (char *)v3;
  if (v11 >= 0x11)
  {
    do
    {
      operator delete(*v3);
      uint64_t v3 = (void **)(*(void *)(a1 + 576) + 8);
      *(void *)(a1 + 576) = v3;
      unint64_t v11 = *(void *)(a1 + 584) - (void)v3;
    }
    while (v11 > 0x10);
  }
  if (v11 >> 3 == 1)
  {
    uint64_t v12 = 8;
    goto LABEL_19;
  }
  if (v11 >> 3 == 2)
  {
    uint64_t v12 = 16;
LABEL_19:
    *(void *)(a1 + 600) = v12;
  }
  sub_100843578((uint64_t *)(a1 + 472));
  sub_1003A7544((void *)(a1 + 768));
  *(_DWORD *)(a1 + 760) = 0;
  *(unsigned char *)(a1 + 1056) = 0;
  *(unsigned char *)(a1 + 1059) = 0;
  sub_1003A7544((void *)(a1 + 840));
  sub_1003A7544((void *)(a1 + 912));
  sub_1003A7544((void *)(a1 + 984));
  *(unsigned char *)(a1 + 466) = 0;
  CLMotionActivity::init((CLMotionActivity *)(a1 + 320));
  *(unsigned char *)(a1 + 312) = 0;
  *(unsigned char *)(a1 + 1112) = 0;
  uint64_t result = CLMotionActivity::init((CLMotionActivity *)(a1 + 616));
  *(unsigned char *)(a1 + 756) = 0;
  *(_DWORD *)(a1 + 752) = 0;
  return result;
}

unsigned char *sub_100A2D610(unsigned char *result)
{
  if (result[464])
  {
    uint64_t v1 = (uint64_t)result;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DAA78);
    }
    int v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "unregistering motion activity", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DAA78);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::unregisterMotionNotifications()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    sub_100A2DF08(v1);
    *(unsigned char *)(v1 + 464) = 0;
    [*(id *)(*(void *)(v1 + 96) + 16) unregister:*(void *)(*(void *)(v1 + 96) + 8) forNotification:1];
    [*(id *)(*(void *)(v1 + 104) + 16) unregister:*(void *)(*(void *)(v1 + 104) + 8) forNotification:0];
    return [*(id *)(*(void *)(v1 + 80) + 16) unregister:*(void *)(*(void *)(v1 + 80) + 8) forNotification:2];
  }
  return result;
}

unsigned char *sub_100A2D7E8(unsigned char *result)
{
  if (result[496])
  {
    uint64_t v1 = result;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DAA78);
    }
    int v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "turning off", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DAA78);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::turnOffStepCountAiding()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    uint64_t result = [*(id *)(*((void *)v1 + 61) + 16) unregister:*(void *)(*((void *)v1 + 61) + 8) forNotification:0];
    v1[496] = 0;
  }
  return result;
}

__n128 sub_100A2D998(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 616);
  long long v2 = *(_OWORD *)(a1 + 632);
  long long v3 = *(_OWORD *)(a1 + 648);
  long long v4 = *(_OWORD *)(a1 + 664);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 680);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(_OWORD *)(a2 + 24) = v2;
  __n128 result = *(__n128 *)(a1 + 696);
  long long v6 = *(_OWORD *)(a1 + 712);
  long long v7 = *(_OWORD *)(a1 + 728);
  *(_OWORD *)(a2 + 133) = *(_OWORD *)(a1 + 741);
  *(_OWORD *)(a2 + 120) = v7;
  *(_OWORD *)(a2 + 104) = v6;
  *(__n128 *)(a2 + 88) = result;
  return result;
}

void sub_100A2D9DC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a2)
  {
    if (a3 - 31 >= 0xFFFFFFE2)
    {
      uint64_t v5 = a1 + 840;
      uint64_t v6 = a1 + 912;
      uint64_t v7 = a1 + 984;
      uint64_t v8 = a3;
      uint64_t v9 = (float *)(a2 + 8);
      uint64_t v10 = a3;
      do
      {
        sub_1001A44F4(v5, v9);
        sub_1001A44F4(v6, v9 + 1);
        sub_1001A44F4(v7, v9 + 2);
        v9 += 6;
        --v10;
      }
      while (v10);
      if (*(void *)(a1 + 904) >= *(void *)(a1 + 848)
        && *(void *)(a1 + 976) >= *(void *)(a1 + 920)
        && *(void *)(a1 + 1048) >= *(void *)(a1 + 992))
      {
        float v11 = fabsf(sub_100A2DE90(v5));
        float v12 = fabsf(sub_100A2DE90(v6));
        float v13 = fabsf(sub_100A2DE90(v7));
        if (v11 < 1.0e-12 || v12 < 1.0e-12 || v13 < 1.0e-12)
        {
          *(unsigned char *)(a1 + 466) = 1;
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022DAA78);
          }
          __int16 v14 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 134218496;
            double v24 = v11;
            __int16 v25 = 2048;
            double v26 = v12;
            __int16 v27 = 2048;
            double v28 = v13;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning IsAccelStuck,1,vx,%e,vy,%e,vz,%e", buf, 0x20u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1022DAA78);
            }
            __int16 v22 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::onAccel(const CLAccelerometer::Sample *, unsigned int)", "%s\n", v22);
            if (v22 != (char *)buf) {
              free(v22);
            }
          }
          __int16 v15 = (float *)(a2 + 16);
          do
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1022DAA78);
            }
            __int16 v16 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
            {
              double v17 = *((double *)v15 - 2);
              double v18 = *(v15 - 2);
              double v19 = *(v15 - 1);
              double v20 = *v15;
              *(_DWORD *)long long buf = 134218752;
              double v24 = v17;
              __int16 v25 = 2048;
              double v26 = v18;
              __int16 v27 = 2048;
              double v28 = v19;
              __int16 v29 = 2048;
              double v30 = v20;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "IsAccelStuck,1,t,%.4lf,ax,%.9f,ay,%.9f,az,%.9f", buf, 0x2Au);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_1022DAA78);
              }
              uint64_t v21 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::onAccel(const CLAccelerometer::Sample *, unsigned int)", "%s\n", v21);
              if (v21 != (char *)buf) {
                free(v21);
              }
            }
            v15 += 6;
            --v8;
          }
          while (v8);
          sub_100A2DF08(a1);
        }
        else
        {
          *(unsigned char *)(a1 + 466) = 0;
        }
      }
    }
  }
}

float sub_100A2DE90(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  float result = 0.0;
  if (v1 >= 2)
  {
    unint64_t v3 = *(void *)(a1 + 56);
    float v4 = 0.0;
    uint64_t v5 = *(void *)(a1 + 64);
    float v6 = 0.0;
    do
    {
      float v7 = *(float *)(*(void *)(*(void *)(a1 + 32) + ((v3 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v3 & 0x3FF))
         - (float)(*(float *)(a1 + 16) / (float)v1);
      float v6 = v6 + (float)(v7 * v7);
      float v4 = v4 + v7;
      ++v3;
      --v5;
    }
    while (v5);
    return (float)(v6 - (float)((float)(v4 * v4) / (float)v1)) / (float)(v1 - 1);
  }
  return result;
}

uint64_t sub_100A2DF08(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022DAA78);
  }
  long long v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "feeding unknown", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DAA78);
    }
    float v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::forceSendUnknownActivity()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  CLMotionActivity::init((CLMotionActivity *)(a1 + 176));
  return sub_100A2EAE4(a1);
}

void sub_100A2E0AC(unint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 48))
  {
    sub_10083CCCC(a2, 0, 0, (uint64_t)v19);
    sub_1001801E0(a1 + 120, (uint64_t)v19);
    if (*(unsigned char *)(a2 + 144))
    {
      float v4 = *(double *)(a2 + 152);
      *(float *)long long buf = v4;
      sub_1001A44F4(a1 + 768, (float *)buf);
      if (*(unsigned char *)(a1 + 312))
      {
        if (CLMotionActivity::isTypeSwimming())
        {
          unint64_t v5 = *(void *)(a1 + 832);
          if (v5 >= *(void *)(a1 + 776))
          {
            float v6 = v5 ? *(float *)(a1 + 784) / (float)v5 : 0.0;
            if (v6 > 4.4704)
            {
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_1022DAA78);
              }
              float v7 = qword_1024193D8;
              if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
              {
                int v8 = *(_DWORD *)(a1 + 320);
                unint64_t v9 = *(void *)(a1 + 832);
                if (v9) {
                  float v10 = *(float *)(a1 + 784) / (float)v9;
                }
                else {
                  float v10 = 0.0;
                }
                uint64_t v11 = *(void *)(a2 + 160);
                *(_DWORD *)long long buf = 67109632;
                int v28 = v8;
                __int16 v29 = 2048;
                double v30 = v10;
                __int16 v31 = 2048;
                uint64_t v32 = v11;
                _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Overriding false fitness session sessionType,%d,averageSpeed,%.3lf,speedUnc,%.3lf", buf, 0x1Cu);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024193D0 != -1) {
                  dispatch_once(&qword_1024193D0, &stru_1022DAA78);
                }
                int v14 = *(_DWORD *)(a1 + 320);
                unint64_t v15 = *(void *)(a1 + 832);
                if (v15) {
                  double v16 = (float)(*(float *)(a1 + 784) / (float)v15);
                }
                else {
                  double v16 = 0.0;
                }
                uint64_t v17 = *(void *)(a2 + 160);
                int v21 = 67109632;
                int v22 = v14;
                __int16 v23 = 2048;
                double v24 = v16;
                __int16 v25 = 2048;
                uint64_t v26 = v17;
                double v18 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::feedPerEpoch(const GNSS::PerEpochData &)", "%s\n", v18);
                if (v18 != (char *)buf) {
                  free(v18);
                }
              }
              *(unsigned char *)(a1 + 312) = 0;
              CLMotionActivity::init((CLMotionActivity *)(a1 + 320));
              *(void *)(a1 + 176) = 0;
            }
          }
        }
      }
    }
    if (v20) {
      sub_1000DB0A0(v20);
    }
  }
  *(unsigned char *)(a1 + 1112) = sub_100A2E530(a1, a2);
  sub_100A2E990(a1, a2);
  if (sub_10016C458() - *(double *)(a1 + 560) > 6.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DAA78);
    }
    float v12 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "refresh,updateContext", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DAA78);
      }
      v19[0] = 0;
      float v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::feedPerEpoch(const GNSS::PerEpochData &)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    sub_100A2EAE4(a1);
  }
}

void sub_100A2E508(_Unwind_Exception *a1)
{
  if (STACK[0x2C0]) {
    sub_1000DB0A0((std::__shared_weak_count *)STACK[0x2C0]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100A2E530(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 1058)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 1113) || *(unsigned char *)(a2 + 48) == 0) {
    return 0;
  }
  uint64_t result = 0;
  if ((*(void *)(a2 + 96) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *(double *)(a2 + 96) <= 0.0) {
    return result;
  }
  uint64_t v6 = *(void *)(a1 + 608);
  if (!v6) {
    return 0;
  }
  unint64_t v7 = v6 + *(void *)(a1 + 600) - 1;
  uint64_t v8 = *(void *)(*(void *)(a1 + 576) + ((v7 >> 1) & 0x7FFFFFFFFFFFFFF8));
  unsigned int v9 = v7 & 0xF;
  if (!*(unsigned char *)(v8 + 304 * (v7 & 0xF) + 48)) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v10 = v8 + 304 * (v7 & 0xF);
  double v12 = *(double *)(v10 + 96);
  uint64_t v11 = (double *)(v10 + 96);
  double v13 = v12;
  if ((*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v13 <= 0.0) {
    return result;
  }
  if (vabdd_f64(*(double *)(a2 + 32), *(double *)(v8 + 304 * (v7 & 0xF) + 32)) > 4.5) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 756)) {
    double v14 = 2.07892474;
  }
  else {
    double v14 = 1.0;
  }
  if (CLMotionActivity::isTypeStatic())
  {
    double v15 = sub_1000F1648((double *)(a1 + 136), *(double *)(a2 + 56), *(double *)(a2 + 64), *(double *)(v8 + 304 * v9 + 56), *(double *)(v8 + 304 * v9 + 64), 0.0);
    uint64_t result = 0;
    BOOL v16 = (*(void *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
    BOOL v17 = v15 < 0.0 && ((*(void *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
    if (v15 >= 0.0) {
      BOOL v16 = 0;
    }
    int v18 = (*(void *)&v15 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000 || v16;
    if ((*(void *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000) {
      int v18 = 1;
    }
    if (((v18 | v17) & 1) != 0 || v15 > v14 * 8.86651914) {
      return result;
    }
    double v19 = v15 + -4.26495435;
    if (v19 < 0.0) {
      double v19 = 0.0;
    }
    if (v19 / *v11 <= v14 * 0.832554611) {
      goto LABEL_56;
    }
    return 0;
  }
  uint64_t v20 = *(void *)(a1 + 576);
  if (*(void *)(a1 + 584) != v20)
  {
    unint64_t v21 = *(void *)(a1 + 600);
    int v22 = (void *)(v20 + 8 * (v21 >> 4));
    __int16 v23 = (double *)(*v22 + 304 * (v21 & 0xF));
    uint64_t v24 = *(void *)(v20 + (((*(void *)(a1 + 608) + v21) >> 1) & 0x7FFFFFFFFFFFFFF8))
        + 304 * ((*(_DWORD *)(a1 + 608) + v21) & 0xF);
    while (v23 != (double *)v24)
    {
      double v25 = sub_1000F1648((double *)(a1 + 136), *(double *)(a2 + 56), *(double *)(a2 + 64), v23[7], v23[8], 0.0);
      uint64_t result = 0;
      BOOL v26 = (*(void *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
      BOOL v27 = v25 < 0.0 && ((*(void *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
      if (v25 >= 0.0) {
        BOOL v26 = 0;
      }
      int v28 = (*(void *)&v25 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000 || v26;
      if ((*(void *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000) {
        int v28 = 1;
      }
      if (((v28 | v27) & 1) != 0 || v25 > v14 * 8.86651914) {
        return result;
      }
      double v29 = v25 + -4.26495435;
      if (v29 < 0.0) {
        double v29 = 0.0;
      }
      if (v29 / v23[12] > v14 * 0.832554611) {
        return 0;
      }
      v23 += 38;
      if ((double *)((char *)v23 - *v22) == (double *)4864)
      {
        double v30 = (double *)v22[1];
        ++v22;
        __int16 v23 = v30;
      }
    }
  }
LABEL_56:
  if (*(unsigned char *)(a2 + 144))
  {
    double v31 = *(double *)(a2 + 152);
    if (v31 >= 0.0)
    {
      double v32 = *(double *)(a2 + 160);
      if (v32 > 0.0)
      {
        if (v31 > v14 * 2.01287076) {
          return 0;
        }
        double v33 = v31 + -0.968226852;
        if (v33 < 0.0) {
          double v33 = 0.0;
        }
        if (v33 / v32 > v14 * 0.832554611) {
          return 0;
        }
      }
    }
  }
  if (*(unsigned char *)(a1 + 88)
    && *(unsigned char *)(a1 + 312)
    && ((CLMotionActivity::isTypeWalking() & 1) != 0
     || (CLMotionActivity::isTypeRunning() & 1) != 0
     || (CLMotionActivity::isTypeCycling() & 1) != 0
     || CLMotionActivity::isTypeSwimming()))
  {
    return (!CLMotionActivity::isTypeWalking()
         || (CLMotionActivity::isTypePedestrian() & 1) == 0 && *(_DWORD *)(a1 + 176) != 62)
        && (!CLMotionActivity::isTypeRunning()
         || (CLMotionActivity::isTypePedestrian() & 1) == 0 && *(_DWORD *)(a1 + 176) != 62)
        && (!CLMotionActivity::isTypeCycling() || (CLMotionActivity::isTypeCycling() & 1) == 0)
        && (!CLMotionActivity::isTypeSwimming() || (CLMotionActivity::isTypeSwimming() & 1) == 0);
  }
  uint64_t result = CLMotionActivity::isTypeStatic();
  if (result) {
    return 1;
  }
  return result;
}

unint64_t sub_100A2E990(unint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 48))
  {
    if (*(double *)(a2 + 96) > 0.0 && (*(void *)(a2 + 96) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      float v4 = (void *)result;
      unint64_t v5 = (int64x2_t *)(result + 568);
      sub_100A30C60((void *)(result + 568), (long long *)a2);
      if (v4[76] >= 0x1FuLL) {
        sub_100A30D50(v5);
      }
      uint64_t v6 = v4[72];
      unint64_t v7 = v4[75];
      uint64_t v8 = (uint64_t *)(v6 + 8 * (v7 >> 4));
      if (v4[73] == v6)
      {
        uint64_t v11 = 0;
        uint64_t v14 = 0;
      }
      else
      {
        uint64_t v9 = *v8 + 304 * (v4[75] & 0xFLL);
        uint64_t v10 = *(void *)(v6 + (((v4[76] + v7) >> 1) & 0x7FFFFFFFFFFFFFF8))
            + 304 * ((*((_DWORD *)v4 + 152) + v7) & 0xF);
        if (v9 == v10)
        {
          uint64_t v11 = 0;
        }
        else
        {
          uint64_t v11 = 0;
          double v12 = v8;
          do
          {
            if (*(double *)(a2 + 32) - *(double *)(v9 + 32) <= 20.0) {
              break;
            }
            v9 += 304;
            if (v9 - *v12 == 4864)
            {
              uint64_t v13 = v12[1];
              ++v12;
              uint64_t v9 = v13;
            }
            ++v11;
          }
          while (v9 != v10);
        }
        uint64_t v14 = *v8 + 304 * (v4[75] & 0xFLL);
      }
      double v15 = (char *)v8;
      uint64_t v16 = v14;
      sub_100A32A64((uint64_t **)&v15, v11);
      return sub_100A30DC4(v5, (char *)v8, v14, v15, v16);
    }
  }
  return result;
}

uint64_t sub_100A2EAE4(uint64_t result)
{
  if (!*(unsigned char *)(result + 464)) {
    return result;
  }
  uint64_t v1 = result;
  int v2 = sub_1004B606C(result + 120);
  int v3 = v2;
  if (v2 != 2)
  {
    if (v2 != 1 || !*(unsigned char *)(v1 + 88) || (CLMotionActivity::isTypePedestrian() & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (CLMotionActivity::isTypeDriving()) {
LABEL_8:
  }
    *(_DWORD *)(v1 + 180) = 2;
LABEL_9:
  BOOL v4 = sub_100A30108((void *)v1, *(_DWORD *)(v1 + 500), *(double *)(v1 + 504));
  long long v5 = *(_OWORD *)(v1 + 288);
  v44[6] = *(_OWORD *)(v1 + 272);
  v44[7] = v5;
  uint64_t v45 = *(void *)(v1 + 304);
  long long v6 = *(_OWORD *)(v1 + 224);
  v44[2] = *(_OWORD *)(v1 + 208);
  v44[3] = v6;
  long long v7 = *(_OWORD *)(v1 + 256);
  v44[4] = *(_OWORD *)(v1 + 240);
  v44[5] = v7;
  long long v8 = *(_OWORD *)(v1 + 192);
  v44[0] = *(_OWORD *)(v1 + 176);
  v44[1] = v8;
  BOOL v9 = sub_100A30544(v1, (uint64_t)v44, v4);
  if (*(unsigned char *)(v1 + 465)) {
    *(void *)(v1 + 188) = 0x200000001;
  }
  if (*(unsigned char *)(v1 + 88))
  {
    int isTypePedestrian = CLMotionActivity::isTypePedestrian();
    if (v4)
    {
      if (isTypePedestrian)
      {
        *(_DWORD *)(v1 + 180) = 2;
        *(_DWORD *)(v1 + 188) = 0;
        *(_DWORD *)(v1 + 192) = 0;
      }
    }
  }
  if (*(unsigned char *)(v1 + 312) && (CLMotionActivity::isStatic((CLMotionActivity *)(v1 + 176)) & 1) == 0)
  {
    if (CLMotionActivity::isTypeCycling() & 1) != 0 || (CLMotionActivity::isTypeSwimming())
    {
      uint64_t v11 = *(void *)(v1 + 320);
      *(void *)(v1 + 176) = v11;
      int v12 = v11;
    }
    else
    {
      int v12 = *(_DWORD *)(v1 + 320);
    }
    if (v12 == 19150)
    {
      int v13 = *(_DWORD *)(v1 + 324);
      *(_DWORD *)(v1 + 176) = 3;
      *(_DWORD *)(v1 + 180) = v13;
    }
    if (CLMotionActivity::isTypeWheelchairPush())
    {
      int v14 = *(_DWORD *)(v1 + 324);
      *(_DWORD *)(v1 + 176) = 3;
      *(_DWORD *)(v1 + 180) = v14;
    }
  }
  int v15 = sub_100A30680(v1);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022DAA78);
  }
  uint64_t v16 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v17 = *(_DWORD *)(v1 + 176);
    int v18 = *(_DWORD *)(v1 + 180);
    int v19 = *(_DWORD *)(v1 + 188);
    int v20 = *(_DWORD *)(v1 + 192);
    int v21 = *(unsigned __int8 *)(v1 + 466);
    int v22 = *(unsigned __int8 *)(v1 + 312);
    int v23 = *(_DWORD *)(v1 + 320);
    int v24 = *(unsigned __int8 *)(v1 + 1112);
    *(_DWORD *)long long buf = 67111936;
    *(_DWORD *)&uint8_t buf[4] = v17;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v18;
    *(_WORD *)&buf[14] = 1024;
    LODWORD(v71) = v19;
    WORD2(v71) = 1024;
    *(_DWORD *)((char *)&v71 + 6) = v20;
    WORD5(v71) = 1024;
    HIDWORD(v71) = v4;
    *(_WORD *)double v72 = 1024;
    *(_DWORD *)&v72[2] = v9;
    *(_WORD *)&v72[6] = 1024;
    *(_DWORD *)&v72[8] = v15;
    *(_WORD *)&v72[12] = 1024;
    *(_DWORD *)&v72[14] = v3;
    *(_WORD *)&v72[18] = 1024;
    *(_DWORD *)&v72[20] = v21;
    *(_WORD *)&v72[24] = 1024;
    *(_DWORD *)&v72[26] = v22;
    *(_WORD *)&v72[30] = 1024;
    LODWORD(v73) = v23;
    WORD2(v73) = 1024;
    *(_DWORD *)((char *)&v73 + 6) = v24;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "feeding,motionState,%d,conf,%d,mountState,%d,mountStateConf,%d,isRecentlyStepping,%d,needFullDutyCycle,%d,shouldBeInertialAiding,%d,navMode,%d,isAccelStuck,%d,inFitnessSession,%d,lastWorkoutActivity,%d,shouldBeClamped,%d", buf, 0x4Au);
  }
  uint64_t v25 = sub_10013D1A0(115, 2);
  if (v25)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DAA78);
    }
    int v34 = *(_DWORD *)(v1 + 176);
    int v35 = *(_DWORD *)(v1 + 180);
    int v36 = *(_DWORD *)(v1 + 188);
    int v37 = *(_DWORD *)(v1 + 192);
    int v38 = *(unsigned __int8 *)(v1 + 466);
    int v39 = *(unsigned __int8 *)(v1 + 312);
    int v40 = *(_DWORD *)(v1 + 320);
    int v41 = *(unsigned __int8 *)(v1 + 1112);
    int v46 = 67111936;
    int v47 = v34;
    __int16 v48 = 1024;
    int v49 = v35;
    __int16 v50 = 1024;
    int v51 = v36;
    __int16 v52 = 1024;
    int v53 = v37;
    __int16 v54 = 1024;
    BOOL v55 = v4;
    __int16 v56 = 1024;
    BOOL v57 = v9;
    __int16 v58 = 1024;
    int v59 = v15;
    __int16 v60 = 1024;
    int v61 = v3;
    __int16 v62 = 1024;
    int v63 = v38;
    __int16 v64 = 1024;
    int v65 = v39;
    __int16 v66 = 1024;
    int v67 = v40;
    __int16 v68 = 1024;
    int v69 = v41;
    uint64_t v42 = (char *)_os_log_send_and_compose_impl();
    uint64_t v25 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::updateContext()", "%s\n", v42);
    if (v42 != (char *)buf) {
      free(v42);
    }
  }
  CLMotionActivity::getInit((uint64_t *)buf, (CLMotionActivity *)v25);
  long long v26 = *(_OWORD *)(v1 + 288);
  long long v75 = *(_OWORD *)(v1 + 272);
  *(_OWORD *)char v76 = v26;
  *(void *)&v76[16] = *(void *)(v1 + 304);
  long long v28 = *(_OWORD *)(v1 + 224);
  *(_OWORD *)double v72 = *(_OWORD *)(v1 + 208);
  long long v27 = *(_OWORD *)v72;
  *(_OWORD *)&v72[16] = v28;
  long long v29 = *(_OWORD *)(v1 + 256);
  long long v73 = *(_OWORD *)(v1 + 240);
  long long v30 = v73;
  long long v74 = v29;
  long long v31 = *(_OWORD *)(v1 + 192);
  *(_OWORD *)long long buf = *(_OWORD *)(v1 + 176);
  long long v32 = *(_OWORD *)buf;
  long long v71 = v31;
  v76[24] = *(unsigned char *)(v1 + 312);
  v76[25] = v4;
  v76[26] = v9;
  v76[27] = v15;
  v76[28] = *(unsigned char *)(v1 + 1112);
  *(_OWORD *)(v1 + 712) = v75;
  *(_OWORD *)(v1 + 728) = v26;
  *(_OWORD *)(v1 + 648) = v27;
  *(_OWORD *)(v1 + 664) = v28;
  *(_OWORD *)(v1 + 680) = v30;
  *(_OWORD *)(v1 + 696) = v29;
  *(_OWORD *)(v1 + 616) = v32;
  *(_OWORD *)(v1 + 632) = v31;
  *(_OWORD *)(v1 + 741) = *(_OWORD *)&v76[13];
  *(double *)(v1 + 560) = sub_10016C458();
  v43[6] = v75;
  v43[7] = *(_OWORD *)v76;
  v43[8] = *(_OWORD *)&v76[16];
  v43[2] = *(_OWORD *)v72;
  v43[3] = *(_OWORD *)&v72[16];
  v43[4] = v73;
  v43[5] = v74;
  v43[0] = *(_OWORD *)buf;
  v43[1] = v71;
  uint64_t v33 = *(void *)(v1 + 32);
  if (!v33) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)v33 + 48))(v33, v43);
}

uint64_t sub_100A2EFAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 760) = a2;
  return result;
}

void sub_100A2EFB4(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 2)
  {
    *(unsigned char *)(a1 + 88) = *(_DWORD *)(a4 + 40) == 0;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DAA78);
    }
    long long v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v7 = *(_DWORD *)(a4 + 40);
      int v8 = *(unsigned __int8 *)(a1 + 88);
      *(_DWORD *)long long buf = 67109376;
      int v11 = v7;
      __int16 v12 = 1024;
      int v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "bodyMetrics.condition,%d,fIsAbleBodied,%d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DAA78);
      }
      BOOL v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::onNatalimetryNotification(int, const CLNatalimetryNotifier_Type::Notification &, const CLNatalimetryNotifier_Type::NotificationData &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
}

void sub_100A2F1A8(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (!*(unsigned char *)(a1 + 464)) {
    return;
  }
  if (*(unsigned char *)(a1 + 466) || *(unsigned char *)(a1 + 1113)) {
    sub_100A2DF08(a1);
  }
  int v7 = *a3;
  if (*a3)
  {
    if (v7 != 1)
    {
      if (v7 == 2)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022DAA78);
        }
        int v8 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning unexpected kNotificationContextSpectator", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 == -1) {
            goto LABEL_36;
          }
          goto LABEL_75;
        }
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022DAA78);
        }
        int v17 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          int v18 = *a3;
          *(_DWORD *)long long buf = 67109120;
          int v33 = v18;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning Unhandled notification,%d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 == -1) {
            goto LABEL_36;
          }
          goto LABEL_75;
        }
      }
      return;
    }
    uint64_t v10 = (_OWORD *)(a1 + 176);
    if (*(_DWORD *)(a1 + 188) == 1 && *(_DWORD *)(a4 + 12) != 1) {
      *(double *)(a1 + 456) = sub_10016C458();
    }
    uint64_t v31 = *(void *)(a1 + 176);
    *uint64_t v10 = *(_OWORD *)a4;
    long long v11 = *(_OWORD *)(a4 + 16);
    long long v12 = *(_OWORD *)(a4 + 32);
    long long v13 = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(a1 + 240) = v13;
    *(_OWORD *)(a1 + 192) = v11;
    *(_OWORD *)(a1 + 208) = v12;
    long long v14 = *(_OWORD *)(a4 + 80);
    long long v15 = *(_OWORD *)(a4 + 96);
    long long v16 = *(_OWORD *)(a4 + 112);
    *(void *)(a1 + 304) = *(void *)(a4 + 128);
    *(_OWORD *)(a1 + 272) = v15;
    *(_OWORD *)(a1 + 288) = v16;
    *(_OWORD *)(a1 + 256) = v14;
    if (CLMotionActivity::isTypeStatic() && !*(_DWORD *)(a4 + 4))
    {
      if (CLMotionActivity::isTypeStatic())
      {
        if (CLMotionActivity::isTypeInVehicle()) {
          *(_DWORD *)uint64_t v10 = 5;
        }
        else {
          *(_DWORD *)uint64_t v10 = 0;
        }
      }
      else
      {
        *(void *)uint64_t v10 = v31;
      }
    }
    if (!*(unsigned char *)(a1 + 88) && CLMotionActivity::isTypePedestrian()) {
      *(_DWORD *)uint64_t v10 = 3;
    }
    double v20 = sub_10016C458();
    if (sub_100178D5C(a1 + 1064, v20, 6.0))
    {
LABEL_69:
      sub_1004B6360(a1 + 120, a1 + 176);
      sub_100A2EAE4(a1);
      return;
    }
    int v21 = *(_DWORD *)(a1 + 176);
    int v22 = *(_DWORD *)(a1 + 180);
    int isStatic = CLMotionActivity::isStatic((CLMotionActivity *)(a1 + 176));
    int v24 = *(_DWORD *)(a1 + 1064);
    if (isStatic)
    {
      if (v24 == 1)
      {
        if (*(_DWORD *)v10 == 1)
        {
          int v21 = 10;
        }
        else if (*(_DWORD *)v10 == 2)
        {
          int v21 = 11;
        }
      }
      goto LABEL_61;
    }
    if (v24)
    {
      if (v24 == 1)
      {
        int v22 = 2;
        int v21 = 5;
      }
      else if (v24 == 3 && *(_DWORD *)(a1 + 1068) == 3)
      {
        BOOL v25 = CLMotionActivity::isCycling((CLMotionActivity *)(a1 + 176)) == 0;
        int v26 = 6;
LABEL_55:
        if (v25) {
          int v21 = v26;
        }
        int v22 = 2;
      }
LABEL_61:
      if (v21 != *(_DWORD *)v10 || v22 != *(_DWORD *)(a1 + 180))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022DAA78);
        }
        long long v27 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v28 = *(_DWORD *)(a1 + 176);
          int v29 = *(_DWORD *)(a1 + 180);
          *(_DWORD *)long long buf = 67109888;
          int v33 = v28;
          __int16 v34 = 1024;
          int v35 = v29;
          __int16 v36 = 1024;
          int v37 = v21;
          __int16 v38 = 1024;
          int v39 = v22;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "overwritingDueToRouteHints.origType,%d,origConfidence,%d,newType,%d,newConfidence,%d", buf, 0x1Au);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022DAA78);
          }
          long long v30 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::onMotionNotification(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v30);
          if (v30 != (char *)buf) {
            free(v30);
          }
        }
        *(_DWORD *)(a1 + 176) = v21;
        *(_DWORD *)(a1 + 180) = v22;
      }
      goto LABEL_69;
    }
    BOOL v25 = CLMotionActivity::isTypePedestrian() == 0;
    int v26 = 4;
    goto LABEL_55;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022DAA78);
  }
  BOOL v9 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning unexpected kNotificationMovementCoarse", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1)
    {
LABEL_36:
      int v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::onMotionNotification(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
      return;
    }
LABEL_75:
    dispatch_once(&qword_1024193D0, &stru_1022DAA78);
    goto LABEL_36;
  }
}

void sub_100A2F870(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 464))
  {
    if (*a3)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DAA78);
      }
      long long v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = *a3;
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Unhandled notification,%d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022DAA78);
        }
        int v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::onMotionStateObserverNotification(int, const CLMotionStateObserver_Type::Notification &, const CLMotionStateObserver_Type::NotificationData &)", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
    }
    else
    {
      int v9 = *(_DWORD *)(a4 + 8);
      if (!v9 || v9 == 71 || (*(void *)a4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *(double *)a4 <= 0.0)
      {
        if (*(unsigned char *)(a1 + 312)) {
          *(void *)(a1 + 176) = 0;
        }
        *(unsigned char *)(a1 + 312) = 0;
        CLMotionActivity::getInit((uint64_t *)buf, (CLMotionActivity *)a1);
        long long v10 = v21;
        *(_OWORD *)(a1 + 416) = v20;
        *(_OWORD *)(a1 + 432) = v10;
        *(void *)(a1 + 448) = v22;
        long long v11 = v17;
        *(_OWORD *)(a1 + 352) = v16;
        *(_OWORD *)(a1 + 368) = v11;
        long long v12 = v19;
        *(_OWORD *)(a1 + 384) = v18;
        *(_OWORD *)(a1 + 400) = v12;
        long long v13 = v15;
        *(_OWORD *)(a1 + 320) = *(_OWORD *)buf;
        *(_OWORD *)(a1 + 336) = v13;
      }
      else
      {
        *(unsigned char *)(a1 + 312) = 1;
        *(_DWORD *)(a1 + 320) = *(_DWORD *)(a4 + 8);
        *(_DWORD *)(a1 + 324) = 2;
        *(void *)(a1 + 360) = *(void *)a4;
        *(void *)(a1 + 400) = *(void *)a4;
      }
      sub_100A2EAE4(a1);
    }
  }
}

void sub_100A2FADC(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (!*(unsigned char *)(a1 + 72))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DAA78);
    }
    long long v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning,fWorkoutCallback,null", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DAA78);
    }
    long long v12 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n");
LABEL_27:
    if (v12 != buf) {
      free(v12);
    }
    return;
  }
  if (*a3 == 2)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DAA78);
    }
    int v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = *(void *)(a4 + 112);
      uint64_t v9 = *(void *)(a4 + 16);
      *(_DWORD *)long long buf = 68289538;
      int v16 = 0;
      __int16 v17 = 2082;
      long long v18 = "";
      __int16 v19 = 2050;
      uint64_t v20 = v8;
      __int16 v21 = 2050;
      uint64_t v22 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onMotionStateMediatorNotification,notification,\", \"workoutType\":%{public}ld, \"eventType\":%{public}ld}", buf, 0x26u);
    }
    if (!*(unsigned char *)(a1 + 72)) {
      sub_10020D700();
    }
    uint64_t v10 = *(void *)(a1 + 64);
    if (!v10) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 48))(v10, a4);
    return;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022DAA78);
  }
  long long v13 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    int v14 = *a3;
    *(_DWORD *)long long buf = 67240192;
    int v16 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "onMotionStateMediatorNotification,unKnownNotification,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DAA78);
    }
    long long v12 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssAssistanceMotion::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n");
    goto LABEL_27;
  }
}

uint64_t sub_100A2FEA8(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*(unsigned char *)(result + 1113)) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = *a3 == 0;
  }
  if (v4)
  {
    int v6 = (void *)result;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DAA78);
    }
    int v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = *(void *)(a4 + 8);
      int v9 = *(_DWORD *)(a4 + 24);
      uint64_t v10 = *(void *)(a4 + 32);
      uint64_t v11 = *(void *)(a4 + 40);
      *(_DWORD *)long long buf = 134349825;
      uint64_t v16 = v8;
      __int16 v17 = 1025;
      int v18 = v9;
      __int16 v19 = 2049;
      uint64_t v20 = v10;
      __int16 v21 = 2049;
      uint64_t v22 = v11;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "STEPCT,startTime,%{public}.3lf,count,%{private}u,distance,%{private}.3lf,rawDistance,%{private}.3lf", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DAA78);
      }
      int v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::onStepCountNotification(int, const CLStepCountNotifier_Type::Notification &, const CLStepCountNotifier_Type::NotificationData &)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    sub_1006AA720(v6 + 64, (long long *)a4);
    unint64_t v12 = v6[69];
    if (v12 >= 0x33)
    {
      uint64_t v13 = v6[68];
      v6[69] = v12 - 1;
      v6[68] = v13 + 1;
      sub_100A31F9C((uint64_t)(v6 + 64), 1);
    }
    return sub_100A2EAE4((uint64_t)v6);
  }
  return result;
}

BOOL sub_100A30108(void *a1, unsigned int a2, double a3)
{
  if (!a1[69]) {
    return 0;
  }
  int v6 = a1 + 64;
  double Current = CFAbsoluteTimeGetCurrent();
  double v8 = fabs(a3);
  unint64_t v9 = a1[68];
  unint64_t v10 = v9 + a1[69];
  uint64_t v11 = (void **)a1[65];
  unint64_t v12 = &v11[v10 / 0x17];
  uint64_t v13 = (void **)a1[66];
  if (v13 == v11)
  {
    unint64_t v15 = 0;
    unint64_t v17 = 0;
    uint64_t v16 = &v11[v9 / 0x17];
    unint64_t v14 = v10 % 0x17;
  }
  else
  {
    unint64_t v14 = v10 % 0x17;
    unint64_t v15 = (unint64_t)v11[v10 / 0x17] + 176 * (v10 % 0x17);
    uint64_t v16 = &v11[v9 / 0x17];
    unint64_t v17 = (unint64_t)*v16 + 176 * (v9 % 0x17);
  }
  double v19 = Current - v8;
  uint64_t v20 = v16;
LABEL_7:
  unint64_t v21 = v17 - 4048;
  while (1)
  {
    if (v13 == v11) {
      uint64_t v22 = 0;
    }
    else {
      uint64_t v22 = (uint64_t)*v12 + 176 * v14;
    }
    if (v17 == v22)
    {
      uint64_t v20 = &v11[v10 / 0x17];
      goto LABEL_17;
    }
    if (*(double *)(v17 + 8) >= v19) {
      break;
    }
    v17 += 176;
    v21 += 176;
    if (*v20 == (void *)v21)
    {
      unint64_t v23 = (unint64_t)v20[1];
      ++v20;
      unint64_t v17 = v23;
      goto LABEL_7;
    }
  }
  unint64_t v15 = v17;
LABEL_17:
  unint64_t v24 = (char *)v13 - (char *)v11;
  if (v13 == v11) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = (uint64_t)*v12 + 176 * v14;
  }
  if (v15 != v25)
  {
    int v26 = *((_DWORD *)v11[(v10 - 1) / 0x17] + 44 * ((v10 - 1) % 0x17) + 6) - *(_DWORD *)(v15 + 24);
    if (v26 >= 0) {
      unsigned int v27 = *((_DWORD *)v11[(v10 - 1) / 0x17] + 44 * ((v10 - 1) % 0x17) + 6) - *(_DWORD *)(v15 + 24);
    }
    else {
      unsigned int v27 = *(_DWORD *)(v15 + 24) - *((_DWORD *)v11[(v10 - 1) / 0x17] + 44 * ((v10 - 1) % 0x17) + 6);
    }
    BOOL v18 = v27 > a2;
    if (v13 == v11) {
      int v28 = 0;
    }
    else {
      int v28 = (char *)*v16 + 176 * (v9 % 0x17);
    }
    sub_100173D90(v6, v16, v28, v20, (char *)v15);
    goto LABEL_36;
  }
  a1[69] = 0;
  if (v24 >= 0x11)
  {
    do
    {
      operator delete(*v11);
      uint64_t v11 = (void **)(a1[65] + 8);
      a1[65] = v11;
      unint64_t v24 = a1[66] - (void)v11;
    }
    while (v24 > 0x10);
  }
  if (v24 >> 3 == 1)
  {
    uint64_t v29 = 11;
  }
  else
  {
    if (v24 >> 3 != 2)
    {
      int v26 = 0;
      BOOL v18 = 0;
      goto LABEL_36;
    }
    uint64_t v29 = 23;
  }
  int v26 = 0;
  BOOL v18 = 0;
  a1[68] = v29;
LABEL_36:
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022DAA78);
  }
  long long v30 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v31 = a1[69];
    *(_DWORD *)long long buf = 67109632;
    BOOL v35 = v18;
    __int16 v36 = 2048;
    uint64_t v37 = v31;
    __int16 v38 = 1024;
    int v39 = v26;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "isStepping,%d,stepCountDequeSize,%zu,deltaCount,%d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DAA78);
    }
    int v33 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssAssistanceMotion::isStepping(uint32_t, CFTimeInterval)", "%s\n", v33);
    if (v33 != (char *)buf) {
      free(v33);
    }
  }
  return v18;
}

BOOL sub_100A30544(uint64_t a1, uint64_t a2, int a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247FA10, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10247FA10))
  {
    byte_10247FA0A = sub_10010145C();
    __cxa_guard_release(&qword_10247FA10);
  }
  if (!byte_10247FA0A) {
    return 0;
  }
  unint64_t v6 = *(void *)(a1 + 832);
  if (v6) {
    double v7 = (float)(*(float *)(a1 + 784) / (float)v6);
  }
  else {
    double v7 = 0.0;
  }
  if (*(unsigned char *)(a1 + 1056)
    && (!a3 || v7 > 6.67 || CLMotionActivity::isTypeDriving() && *(_DWORD *)(a2 + 4) == 2))
  {
    BOOL result = 0;
    *(unsigned char *)(a1 + 1056) = 0;
  }
  else if (*(unsigned char *)(a1 + 88) && CLMotionActivity::isTypePedestrian() && a3 && v7 < 6.67)
  {
    BOOL result = 1;
    *(unsigned char *)(a1 + 1056) = 1;
  }
  else
  {
    return *(unsigned char *)(a1 + 1056) != 0;
  }
  return result;
}

void sub_100A30668(_Unwind_Exception *a1)
{
}

uint64_t sub_100A30680(uint64_t a1)
{
  sub_1000C7F88(buf);
  LOBYTE(v29) = 0;
  char v2 = sub_1000D2988(*(uint64_t *)buf, "ForceEnableGnssInertialAiding", (BOOL *)&v29);
  if ((_BYTE)v29) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  if (v42) {
    sub_1000DB0A0(v42);
  }
  if (v3) {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 1057))
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 1059) = 0;
    return result;
  }
  if (*(unsigned char *)(a1 + 466) || (sub_10010145C() & 1) != 0) {
    return 0;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247FA20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10247FA20))
  {
    byte_10247FA18 = sub_100119964();
    __cxa_guard_release(&qword_10247FA20);
  }
  if (*(unsigned char *)(a1 + 1059))
  {
    BOOL v5 = *(_DWORD *)(a1 + 188) != 1 && vabdd_f64(sub_10016C458(), *(double *)(a1 + 456)) > 90.0;
    if (*(unsigned char *)(a1 + 88)) {
      int isTypePedestrian = CLMotionActivity::isTypePedestrian();
    }
    else {
      int isTypePedestrian = 0;
    }
    int v11 = *(_DWORD *)(a1 + 180);
    if (!*(unsigned char *)(a1 + 1056))
    {
      char v17 = v11 == 2 ? isTypePedestrian : 0;
      if (!*(unsigned char *)(a1 + 312) && (v17 & 1) == 0)
      {
        BOOL v18 = !byte_10247FA18 && v5;
        if (!v18 && !*(unsigned char *)(a1 + 1113)) {
          return *(unsigned char *)(a1 + 1059) != 0;
        }
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DAA78);
    }
    unint64_t v12 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = *(unsigned __int8 *)(a1 + 1056);
      int v14 = *(unsigned __int8 *)(a1 + 312);
      int v15 = *(unsigned __int8 *)(a1 + 1113);
      *(_DWORD *)long long buf = 67110400;
      *(_DWORD *)&uint8_t buf[4] = v13;
      LOWORD(v42) = 1024;
      *(_DWORD *)((char *)&v42 + 2) = v14;
      HIWORD(v42) = 1024;
      int v43 = isTypePedestrian;
      __int16 v44 = 1024;
      BOOL v45 = v11 == 2;
      __int16 v46 = 1024;
      BOOL v47 = v5;
      __int16 v48 = 1024;
      int v49 = v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "stopINS,insfullDutyCycleNeededForPed,%d,inFitnessSession,%d,isPedestrian,%d,isHighConf,%d,isDismounted,%d,fIsAirborne,%d", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DAA78);
      }
      int v22 = *(unsigned __int8 *)(a1 + 1056);
      int v23 = *(unsigned __int8 *)(a1 + 312);
      int v24 = *(unsigned __int8 *)(a1 + 1113);
      int v29 = 67110400;
      int v30 = v22;
      __int16 v31 = 1024;
      int v32 = v23;
      __int16 v33 = 1024;
      int v34 = isTypePedestrian;
      __int16 v35 = 1024;
      BOOL v36 = v11 == 2;
      __int16 v37 = 1024;
      BOOL v38 = v5;
      __int16 v39 = 1024;
      int v40 = v24;
      uint64_t v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssAssistanceMotion::shouldBeInertialAiding()", "%s\n", v25);
      if (v25 != (char *)buf) {
        free(v25);
      }
    }
    char v16 = 0;
  }
  else
  {
    int isTypeInVehicle = CLMotionActivity::isTypeInVehicle();
    int isTypeMoving = CLMotionActivity::isTypeMoving();
    int v8 = *(_DWORD *)(a1 + 188);
    if (*(unsigned char *)(a1 + 88)) {
      int v9 = CLMotionActivity::isTypePedestrian();
    }
    else {
      int v9 = 0;
    }
    if (*(unsigned char *)(a1 + 1056)
      || *(unsigned char *)(a1 + 312)
      || (isTypeInVehicle & 1) == 0 && (((isTypeMoving ^ 1 | v9) & 1) != 0 || *(unsigned char *)(a1 + 753))
      || v8 != 1
      || *(unsigned char *)(a1 + 1113))
    {
      return *(unsigned char *)(a1 + 1059) != 0;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DAA78);
    }
    double v19 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = *(_DWORD *)(a1 + 176);
      int v21 = *(unsigned __int8 *)(a1 + 753);
      *(_DWORD *)long long buf = 67110144;
      *(_DWORD *)&uint8_t buf[4] = v20;
      LOWORD(v42) = 1024;
      *(_DWORD *)((char *)&v42 + 2) = isTypeInVehicle;
      HIWORD(v42) = 1024;
      int v43 = isTypeMoving;
      __int16 v44 = 1024;
      BOOL v45 = v9;
      __int16 v46 = 1024;
      BOOL v47 = v21;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "startINS,activity,%d,isInVehicle,%d,isMoving,%d,isPedestrian,%d,isRecentlyStepping,%d", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DAA78);
      }
      int v26 = *(_DWORD *)(a1 + 176);
      int v27 = *(unsigned __int8 *)(a1 + 753);
      int v29 = 67110144;
      int v30 = v26;
      __int16 v31 = 1024;
      int v32 = isTypeInVehicle;
      __int16 v33 = 1024;
      int v34 = isTypeMoving;
      __int16 v35 = 1024;
      BOOL v36 = v9;
      __int16 v37 = 1024;
      BOOL v38 = v27;
      int v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssAssistanceMotion::shouldBeInertialAiding()", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
    char v16 = 1;
  }
  *(unsigned char *)(a1 + 1059) = v16;
  return *(unsigned char *)(a1 + 1059) != 0;
}

void sub_100A30C2C(_Unwind_Exception *a1)
{
}

__n128 sub_100A30C60(void *a1, long long *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 2 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100A323AC(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  uint64_t v8 = *(void *)(v5 + ((v7 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 304 * (v7 & 0xF);
  long long v9 = *a2;
  long long v10 = a2[1];
  long long v11 = a2[3];
  *(_OWORD *)(v8 + 32) = a2[2];
  *(_OWORD *)(v8 + 48) = v11;
  *(_OWORD *)uint64_t v8 = v9;
  *(_OWORD *)(v8 + 16) = v10;
  long long v12 = a2[4];
  long long v13 = a2[5];
  long long v14 = a2[7];
  *(_OWORD *)(v8 + 96) = a2[6];
  *(_OWORD *)(v8 + 112) = v14;
  *(_OWORD *)(v8 + 64) = v12;
  *(_OWORD *)(v8 + 80) = v13;
  long long v15 = a2[8];
  long long v16 = a2[9];
  long long v17 = a2[11];
  *(_OWORD *)(v8 + 160) = a2[10];
  *(_OWORD *)(v8 + 176) = v17;
  *(_OWORD *)(v8 + 128) = v15;
  *(_OWORD *)(v8 + 144) = v16;
  long long v18 = a2[12];
  long long v19 = a2[13];
  long long v20 = a2[14];
  *(void *)(v8 + 240) = *((void *)a2 + 30);
  *(_OWORD *)(v8 + 208) = v19;
  *(_OWORD *)(v8 + 224) = v20;
  *(_OWORD *)(v8 + 192) = v18;
  sub_100A326C4(v8 + 248, (uint64_t)a2 + 248);
  __n128 result = (__n128)a2[18];
  *(__n128 *)(v8 + 288) = result;
  ++a1[5];
  return result;
}

uint64_t sub_100A30D50(int64x2_t *a1)
{
  sub_10071874C(*(void *)(a1->i64[1] + (((unint64_t)a1[2].i64[0] >> 1) & 0x7FFFFFFFFFFFFFF8))+ 304 * (a1[2].i64[0] & 0xF)+ 248);
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_101D0A740);

  return sub_100A32A04((uint64_t)a1, 1);
}

unint64_t sub_100A30DC4(void *a1, char *a2, uint64_t a3, char *a4, uint64_t a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 0x86BCA1AF286BCA1BLL * ((a5 - *(void *)a4) >> 4)
  }
       + 2 * (a4 - a2)
       + 0x79435E50D79435E5 * ((a3 - *(void *)a2) >> 4);
  unint64_t v7 = a1[4];
  uint64_t v8 = a1[1];
  long long v9 = (uint64_t *)(v8 + 8 * (v7 >> 4));
  if (a1[2] == v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *v9 + 304 * (a1[4] & 0xFLL);
  }
  if (a3 == v10) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = 0x86BCA1AF286BCA1BLL * ((a3 - *(void *)a2) >> 4)
  }
        + 2 * (a2 - (char *)v9)
        + 0x79435E50D79435E5 * ((v10 - *v9) >> 4);
  v30.n128_u64[0] = v8 + 8 * (v7 >> 4);
  v30.n128_u64[1] = v10;
  sub_100A32A64((uint64_t **)&v30, v11);
  if (v6 >= 1)
  {
    __n128 v12 = v30;
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_100A32A64((uint64_t **)&v30, v6);
      sub_100A32AE0(v9, v10, (uint64_t *)v12.n128_u64[0], v12.n128_i64[1], v30.n128_u64[0], v30.n128_i64[1], &v30);
      uint64_t v18 = v31;
      while (v10 != v18)
      {
        sub_10071874C(v10 + 248);
        v10 += 304;
        if (v10 - *v9 == 4864)
        {
          uint64_t v19 = v9[1];
          ++v9;
          uint64_t v10 = v19;
        }
      }
      uint64_t v20 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v20;
      while ((sub_100A32A04((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      sub_100A32A64((uint64_t **)&v30, v6);
      __n128 v13 = v30;
      unint64_t v14 = a1[4] + a1[5];
      uint64_t v15 = a1[1];
      long long v16 = (long long **)(v15 + 8 * (v14 >> 4));
      if (a1[2] == v15) {
        long long v17 = 0;
      }
      else {
        long long v17 = &(*v16)[19 * (v14 & 0xF)];
      }
      __n128 v30 = v12;
      sub_100A32DA8((long long **)v13.n128_u64[0], (long long *)v13.n128_u64[1], v16, v17, (uint64_t)&v30);
      unint64_t v21 = v30.n128_u64[1];
      uint64_t v22 = a1[1];
      if (a1[2] == v22)
      {
        uint64_t v24 = 0;
      }
      else
      {
        unint64_t v23 = a1[5] + a1[4];
        uint64_t v24 = *(void *)(v22 + ((v23 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 304 * (v23 & 0xF);
      }
      if (v24 != v30.n128_u64[1])
      {
        uint64_t v25 = (void *)v30.n128_u64[0];
        do
        {
          sub_10071874C(v21 + 248);
          v21 += 304;
          if (v21 - *v25 == 4864)
          {
            unint64_t v26 = v25[1];
            ++v25;
            unint64_t v21 = v26;
          }
        }
        while (v21 != v24);
      }
      a1[5] -= v6;
      while ((sub_1000BBBDC(a1, 1) & 1) != 0)
        ;
    }
  }
  uint64_t v27 = a1[1];
  if (a1[2] == v27) {
    uint64_t v28 = 0;
  }
  else {
    uint64_t v28 = *(void *)(v27 + 8 * (a1[4] >> 4)) + 304 * (a1[4] & 0xFLL);
  }
  v30.n128_u64[0] = v27 + 8 * (a1[4] >> 4);
  v30.n128_u64[1] = v28;
  sub_100A32A64((uint64_t **)&v30, v11);
  return v30.n128_u64[0];
}

uint64_t sub_100A310C0(uint64_t a1, double a2, double a3)
{
  if (*(unsigned char *)(a1 + 1113)) {
    return 0;
  }
  uint64_t result = 0;
  if (a2 >= 0.0 && a3 > 0.0)
  {
    uint64_t result = CLMotionActivity::isTypeStatic();
    if (result) {
      return a2 + a3 * -3.0 < 0.0 || a2 < 5.0;
    }
  }
  return result;
}

__n128 sub_100A31134@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 432);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 416);
  *(_OWORD *)(a2 + 112) = v2;
  *(void *)(a2 + 128) = *(void *)(a1 + 448);
  long long v3 = *(_OWORD *)(a1 + 368);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 352);
  *(_OWORD *)(a2 + 48) = v3;
  long long v4 = *(_OWORD *)(a1 + 400);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 384);
  *(_OWORD *)(a2 + 80) = v4;
  __n128 result = *(__n128 *)(a1 + 336);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 320);
  *(__n128 *)(a2 + 16) = result;
  return result;
}

__n128 sub_100A31160(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 1064) = *(void *)a2;
  if (a1 + 1064 != a2) {
    sub_1008A9A00((char *)(a1 + 1072), *(char **)(a2 + 8), *(void *)(a2 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
  }
  __n128 result = *(__n128 *)(a2 + 32);
  *(__n128 *)(a1 + 1096) = result;
  return result;
}

void sub_100A311C4(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 1113) = a2;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022DAA78);
  }
  long long v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    int v4 = *(unsigned __int8 *)(a1 + 1113);
    *(_DWORD *)long long buf = 67240192;
    int v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "CLGAM,fIsAirborne,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DAA78);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::feedAirborneActivity(const BOOL)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

void sub_100A3137C(unsigned char *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2 > 12)
  {
    if (v2 != 13 && v2 != 18) {
      return;
    }
  }
  else if (v2)
  {
    if (v2 != 1) {
      return;
    }
LABEL_24:
    *a1 = 0;
    return;
  }
  uint64_t v4 = *(void *)(a2 + 112);
  if (v4 != 33 && v4 != 19) {
    goto LABEL_24;
  }
  *a1 = 1;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022DAA78);
  }
  uint64_t v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Detected swim-related workout for GNSS time decoded purposes", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DAA78);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssIndicatorDelayUntilTimeConvergenceWhenSwimming::feedHkWorkout(const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
}

void sub_100A31548(unsigned char *a1, uint64_t a2)
{
  if (*a1 && !a1[1])
  {
    if (*(float *)(a2 + 44) >= 0.005)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DAA78);
      }
      long long v3 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        double v4 = *(float *)(a2 + 44);
        uint64_t v5 = *(void *)(a2 + 96);
        *(_DWORD *)long long buf = 134349312;
        double v13 = v4;
        __int16 v14 = 2050;
        uint64_t v15 = v5;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Time not converged in swim-related workout,gpsTimeUncMs,%{public}.2f,hunc,%{public}.2f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022DAA78);
        }
        long long v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssIndicatorDelayUntilTimeConvergenceWhenSwimming::adjustPositionUncertainty(GNSS::PerEpochData &)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      double v6 = *(double *)(a2 + 96);
      if (v6 <= 51.0 && v6 >= 0.1)
      {
        *(void *)(a2 + 96) = 0x4049800000000000;
        double v11 = 51.0 / v6;
        *(float64x2_t *)(a2 + 112) = vmulq_n_f64(*(float64x2_t *)(a2 + 112), 51.0 / v6);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022DAA78);
        }
        int v7 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v8 = *(void *)(a2 + 96);
          *(_DWORD *)long long buf = 134349312;
          double v13 = v11;
          __int16 v14 = 2050;
          uint64_t v15 = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Adjusting hunc in in swim-related workout,scaling,%{public}.2f,adjHunc,%{public}.2f", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022DAA78);
          }
          uint64_t v10 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssIndicatorDelayUntilTimeConvergenceWhenSwimming::adjustPositionUncertainty(GNSS::PerEpochData &)", "%s\n", v10);
          if (v10 != (char *)buf) {
            free(v10);
          }
        }
      }
    }
    else
    {
      a1[1] = 1;
    }
  }
}

uint64_t sub_100A31904(uint64_t result)
{
  *(unsigned char *)(result + 1) = 0;
  return result;
}

void sub_100A3190C(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_100A3193C(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_100A3196C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_100A31A04(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    double v4 = a1 + 5;
    uint64_t v3 = (void **)a1[1];
  }
  else
  {
    double v4 = a1 + 5;
    unint64_t v5 = a1[4];
    double v6 = &v2[v5 >> 4];
    uint64_t v7 = (uint64_t)*v6 + 304 * (v5 & 0xF);
    uint64_t v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 304 * ((*((_DWORD *)a1 + 10) + (int)v5) & 0xF);
    if (v7 != v8)
    {
      do
      {
        sub_10071874C(v7 + 248);
        v7 += 304;
        if (v7 - (void)*v6 == 4864)
        {
          uint64_t v9 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != v8);
      uint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }
  void *v4 = 0;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 8;
  }
  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 16;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    double v13 = *v2++;
    operator delete(v13);
  }

  return sub_1000D7EB4((uint64_t)a1);
}

void sub_100A31B48()
{
}

void *sub_100A31B5C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022DAAC8;
  result[1] = v3;
  return result;
}

uint64_t sub_100A31BA4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DAAC8;
  a2[1] = v2;
  return result;
}

double sub_100A31BD0(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = sub_100A31160(*(void *)(a1 + 8), a2).n128_u64[0];
  return result;
}

uint64_t sub_100A31BD8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100A31C18()
{
}

void *sub_100A31C24(void *a1, uint64_t a2)
{
  sub_100A31C98((uint64_t)v4, a2);
  sub_100A31D30(v4, a1);
  sub_100855010(v4);
  return a1;
}

uint64_t sub_100A31C98(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100A31D30(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    double v4 = (void *)result[3];
    unint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100A31F90(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_100A31F9C(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x17) {
    a2 = 1;
  }
  if (v2 < 0x2E) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 23;
  }
  return v4 ^ 1u;
}

uint64_t sub_100A31FFC(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 23 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x17) {
    a2 = 1;
  }
  if (v5 < 0x2E) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

__n128 sub_100A32074@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v19 = a2;
    uint64_t v18 = a4;
    uint64_t v15 = a5;
    long long v16 = a6;
  }
  else
  {
    double v13 = a3 - 1;
    uint64_t v12 = *a3;
    __int16 v14 = a4;
    uint64_t v15 = a5;
    long long v16 = a6;
    while (1)
    {
      sub_100A32144(v12, v14, v15, v16, &v21);
      long long v16 = (char *)v22.n128_u64[1];
      uint64_t v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      long long v17 = *v13--;
      uint64_t v12 = v17;
      __int16 v14 = v17 + 4048;
    }
    uint64_t v18 = *a1 + 4048;
    uint64_t v19 = a2;
  }
  sub_100A32144(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_100A32144@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  double v6 = a3;
  if (a1 == a2)
  {
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = *a3;
    unint64_t v11 = a2;
    while (1)
    {
      uint64_t v12 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)&a4[-v10] >> 4);
      if (0x2E8BA2E8BA2E8BA3 * ((v11 - a1) >> 4) < v12) {
        uint64_t v12 = 0x2E8BA2E8BA2E8BA3 * ((v11 - a1) >> 4);
      }
      v11 -= 176 * v12;
      a4 -= 176 * v12;
      if (v12) {
        __n128 result = memmove(a4, v11, 176 * v12);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v10 = v14;
      a4 = (char *)(v14 + 4048);
    }
    if ((char *)(*v6 + 4048) == a4)
    {
      uint64_t v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_100A32228(void *a1, unsigned char *a2, unsigned char **a3, unsigned char *a4, uint64_t a5)
{
  int v7 = *(void ***)a5;
  uint64_t v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (uint64_t i = (unsigned char *)(*a1 + 4048); ; uint64_t i = v12 + 4048)
    {
      sub_100A322BC(a2, v8, i, v7, &v14);
      uint64_t v8 = (char *)*((void *)&v15 + 1);
      int v7 = (void **)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v8;
      if (v10 == a3) {
        break;
      }
      uint64_t v12 = (unsigned char *)*v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_100A322BC(a2, v8, a4, v7, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_100A322BC@<X0>(unsigned char *__src@<X1>, char *__dst@<X4>, unsigned char *a3@<X2>, void **a4@<X3>, void *a5@<X8>)
{
  double v6 = a4;
  int v7 = __src;
  if (__src == a3)
  {
    uint64_t v9 = __src;
  }
  else
  {
    uint64_t v9 = a3;
    double v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      uint64_t v11 = 0x2E8BA2E8BA2E8BA3 * ((v10 - __dst + 4048) >> 4);
      uint64_t v12 = 0x2E8BA2E8BA2E8BA3 * ((v9 - v7) >> 4) >= v11 ? v11 : 0x2E8BA2E8BA2E8BA3 * ((v9 - v7) >> 4);
      if (v12) {
        double result = memmove(__dst, v7, 176 * v12);
      }
      v7 += 176 * v12;
      if (v7 == v9) {
        break;
      }
      uint64_t v14 = (char *)*v6++;
      uint64_t v10 = v14;
      __dst = v14;
    }
    __dst += 176 * v12;
    if ((char *)*(v6 - 1) + 4048 == __dst) {
      __dst = (char *)*v6;
    }
    else {
      --v6;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

void sub_100A323AC(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x10;
  unint64_t v4 = v2 - 16;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    double v6 = (char *)a1[3];
    a1[4] = v4;
    int v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)sub_1000DA54C(v5, v33);
      __int16 v35 = &v34[8 * (v33 >> 2)];
      __int16 v37 = &v34[8 * v36];
      BOOL v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1300uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1300uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    __int16 v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      __int16 v37 = &v34[8 * v47];
      __int16 v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      int v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __int16 v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  int v53 = operator new(0x1300uLL);
  sub_1000DA434(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  int v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100A32678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100A326C4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100100330(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned int **)(a2 + 16); i; uint64_t i = *(unsigned int **)i)
    sub_100A3273C(a1, i + 4, i + 4);
  return a1;
}

void sub_100A32724(_Unwind_Exception *a1)
{
  sub_10071874C(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_100A3273C(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 <= v5) {
        unint64_t v3 = v5 % v6;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
    uint64_t v8 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      for (uint64_t i = *v8; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v10 = i[1];
        if (v10 == v5)
        {
          if (*((_DWORD *)i + 4) == v5) {
            return i;
          }
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v10 >= v6) {
              v10 %= v6;
            }
          }
          else
          {
            v10 &= v6 - 1;
          }
          if (v10 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_100A32988(a1, *a2, a3, (uint64_t)v20);
  float v11 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    BOOL v13 = 1;
    if (v6 >= 3) {
      BOOL v13 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v14 = v13 | (2 * v6);
    unint64_t v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15) {
      size_t v16 = v15;
    }
    else {
      size_t v16 = v14;
    }
    sub_100100330(a1, v16);
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5) {
        unint64_t v3 = v5 % v6;
      }
      else {
        unint64_t v3 = v5;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
  }
  uint64_t v17 = *(void **)(*(void *)a1 + 8 * v3);
  if (v17)
  {
    *(void *)v20[0] = *v17;
    void *v17 = v20[0];
  }
  else
  {
    *(void *)v20[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v20[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v20[0])
    {
      unint64_t v18 = *(void *)(*(void *)v20[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6) {
          v18 %= v6;
        }
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v18) = v20[0];
    }
  }
  uint64_t i = (uint64_t *)v20[0];
  v20[0] = 0;
  ++*(void *)(a1 + 24);
  sub_10084F514((uint64_t)v20, 0);
  return i;
}

void sub_100A32970(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10084F514((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_100A32988@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  *((_DWORD *)v8 + 4) = *a3;
  uint64_t result = sub_10084F280((uint64_t)(v8 + 3), (uint64_t)(a3 + 2));
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_100A329EC(_Unwind_Exception *a1)
{
  sub_10084F514(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_100A32A04(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x10) {
    a2 = 1;
  }
  if (v2 < 0x20) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 16;
  }
  return v4 ^ 1u;
}

uint64_t **sub_100A32A64(uint64_t **result, uint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = *result;
    uint64_t v3 = a2 - 0x79435E50D79435E5 * (((uint64_t)result[1] - **result) >> 4);
    if (v3 < 1)
    {
      unint64_t v7 = 15 - v3;
      uint64_t v8 = &v2[-(v7 >> 4)];
      void *result = v8;
      uint64_t v5 = *v8;
      unsigned int v6 = ~v7 & 0xF;
    }
    else
    {
      int v4 = (uint64_t *)((char *)v2 + (((unint64_t)v3 >> 1) & 0x7FFFFFFFFFFFFFF8));
      void *result = v4;
      uint64_t v5 = *v4;
      unsigned int v6 = v3 & 0xF;
    }
    result[1] = (uint64_t *)(v5 + 304 * v6);
  }
  return result;
}

__n128 sub_100A32AE0@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, void *a5@<X5>, uint64_t a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v17 = a2;
    uint64_t v16 = a4;
    uint64_t i = a5;
    uint64_t v14 = a6;
  }
  else
  {
    float v12 = a3 - 1;
    sub_100A32BCC(*a3, a4, a5, a6, &v19);
    uint64_t v14 = v20.n128_i64[1];
    for (uint64_t i = (void *)v20.n128_u64[0]; v12 != a1; uint64_t i = (void *)v20.n128_u64[0])
    {
      uint64_t v15 = *v12--;
      sub_100A32BCC(v15, v15 + 4864, i, v14, &v19);
      uint64_t v14 = v20.n128_i64[1];
    }
    uint64_t v16 = *a1 + 4864;
    uint64_t v17 = a2;
  }
  sub_100A32BCC(v17, v16, i, v14, &v19);
  __n128 result = v20;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = a4;
  a7[1] = result;
  return result;
}

uint64_t sub_100A32BCC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v5 = a3;
  if (a1 == a2)
  {
    uint64_t v8 = a1;
  }
  else
  {
    uint64_t v8 = a2;
    uint64_t v9 = *a3;
    for (uint64_t i = a2; ; uint64_t i = v12)
    {
      int64_t v11 = 0x86BCA1AF286BCA1BLL * ((a4 - v9) >> 4);
      if ((uint64_t)(0x86BCA1AF286BCA1BLL * ((i - a1) >> 4)) < v11) {
        int64_t v11 = 0x86BCA1AF286BCA1BLL * ((i - a1) >> 4);
      }
      uint64_t v12 = i - 304 * v11;
      uint64_t result = sub_100A32CB0(v12, i, a4);
      if (v12 == a1) {
        break;
      }
      uint64_t v15 = *--v5;
      uint64_t v9 = v15;
      a4 = v15 + 4864;
    }
    a4 = v14;
    if (*v5 + 4864 == v14)
    {
      uint64_t v16 = v5[1];
      ++v5;
      a4 = v16;
    }
  }
  *a5 = v8;
  a5[1] = (uint64_t)v5;
  a5[2] = a4;
  return result;
}

uint64_t sub_100A32CB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v5 = a2 - 56;
    uint64_t v6 = a3 - 56;
    do
    {
      uint64_t v7 = v5 - 248;
      long long v8 = *(_OWORD *)(v5 - 248);
      long long v9 = *(_OWORD *)(v5 - 232);
      long long v10 = *(_OWORD *)(v5 - 216);
      *(_OWORD *)(v6 - 200) = *(_OWORD *)(v5 - 200);
      *(_OWORD *)(v6 - 216) = v10;
      *(_OWORD *)(v6 - 232) = v9;
      *(_OWORD *)(v6 - 248) = v8;
      long long v11 = *(_OWORD *)(v5 - 184);
      long long v12 = *(_OWORD *)(v5 - 168);
      long long v13 = *(_OWORD *)(v5 - 152);
      *(_OWORD *)(v6 - 136) = *(_OWORD *)(v5 - 136);
      *(_OWORD *)(v6 - 152) = v13;
      *(_OWORD *)(v6 - 168) = v12;
      *(_OWORD *)(v6 - 184) = v11;
      long long v14 = *(_OWORD *)(v5 - 120);
      long long v15 = *(_OWORD *)(v5 - 104);
      long long v16 = *(_OWORD *)(v5 - 88);
      *(_OWORD *)(v6 - 72) = *(_OWORD *)(v5 - 72);
      *(_OWORD *)(v6 - 88) = v16;
      *(_OWORD *)(v6 - 104) = v15;
      *(_OWORD *)(v6 - 120) = v14;
      long long v17 = *(_OWORD *)(v5 - 56);
      long long v18 = *(_OWORD *)(v5 - 40);
      long long v19 = *(_OWORD *)(v5 - 24);
      *(void *)(v6 - 8) = *(void *)(v5 - 8);
      *(_OWORD *)(v6 - 24) = v19;
      *(_OWORD *)(v6 - 40) = v18;
      *(_OWORD *)(v6 - 56) = v17;
      sub_10084E2F4(v6, (uint64_t *)v5);
      *(_OWORD *)(v6 + 40) = *(_OWORD *)(v5 + 40);
      v5 -= 304;
      v6 -= 304;
    }
    while (v7 != a1);
  }
  return a2;
}

double sub_100A32DA8(long long **a1, long long *a2, long long **a3, long long *a4, uint64_t a5)
{
  uint64_t v7 = *(uint64_t **)a5;
  uint64_t v8 = *(void *)(a5 + 8);
  if (a1 != a3)
  {
    long long v10 = a1 + 1;
    sub_100A32E64(a2, *a1 + 304, v7, v8, &v13);
    uint64_t v8 = *((void *)&v14 + 1);
    uint64_t v7 = (uint64_t *)v14;
    *(void *)a5 = v14;
    for (*(void *)(a5 + 8) = v8; v10 != a3; *(void *)(a5 + 8) = v8)
    {
      long long v11 = *v10++;
      sub_100A32E64(v11, v11 + 304, v7, v8, &v13);
      uint64_t v8 = *((void *)&v14 + 1);
      uint64_t v7 = (uint64_t *)v14;
      *(void *)a5 = v14;
    }
    a2 = *a3;
  }
  sub_100A32E64(a2, a4, v7, v8, &v13);
  double result = *(double *)&v14;
  *(_OWORD *)a5 = v14;
  return result;
}

long long *sub_100A32E64@<X0>(long long *a1@<X1>, long long *a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, long long **a5@<X8>)
{
  uint64_t v5 = a3;
  double result = a1;
  if (a1 == a2)
  {
    uint64_t v8 = a1;
  }
  else
  {
    uint64_t v8 = a2;
    uint64_t v5 = a3 + 1;
    uint64_t v9 = *a3;
    while (1)
    {
      int64_t v10 = 0x86BCA1AF286BCA1BLL * ((v9 - a4 + 4864) >> 4);
      if ((uint64_t)(0x86BCA1AF286BCA1BLL * (v8 - result)) < v10) {
        int64_t v10 = 0x86BCA1AF286BCA1BLL * (v8 - result);
      }
      double result = sub_100A32F40(result, &result[19 * v10], a4);
      if (result == v8) {
        break;
      }
      uint64_t v12 = *v5++;
      uint64_t v9 = v12;
      a4 = v12;
    }
    a4 = v11;
    if (*(v5 - 1) + 4864 == v11) {
      a4 = *v5;
    }
    else {
      --v5;
    }
  }
  *a5 = v8;
  a5[1] = (long long *)v5;
  a5[2] = (long long *)a4;
  return result;
}

long long *sub_100A32F40(long long *a1, long long *a2, uint64_t a3)
{
  int v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    long long v6 = *v4;
    long long v7 = v4[1];
    long long v8 = v4[3];
    *(_OWORD *)(a3 + 32) = v4[2];
    *(_OWORD *)(a3 + 48) = v8;
    *(_OWORD *)a3 = v6;
    *(_OWORD *)(a3 + 16) = v7;
    long long v9 = v4[4];
    long long v10 = v4[5];
    long long v11 = v4[7];
    *(_OWORD *)(a3 + 96) = v4[6];
    *(_OWORD *)(a3 + 112) = v11;
    *(_OWORD *)(a3 + 64) = v9;
    *(_OWORD *)(a3 + 80) = v10;
    long long v12 = v4[8];
    long long v13 = v4[9];
    long long v14 = v4[11];
    *(_OWORD *)(a3 + 160) = v4[10];
    *(_OWORD *)(a3 + 176) = v14;
    *(_OWORD *)(a3 + 128) = v12;
    *(_OWORD *)(a3 + 144) = v13;
    long long v15 = v4[12];
    long long v16 = v4[13];
    long long v17 = v4[14];
    *(void *)(a3 + 240) = *((void *)v4 + 30);
    *(_OWORD *)(a3 + 208) = v16;
    *(_OWORD *)(a3 + 224) = v17;
    *(_OWORD *)(a3 + 192) = v15;
    sub_10084E2F4(a3 + 248, (uint64_t *)v4 + 31);
    *(_OWORD *)(a3 + 288) = v4[18];
    a3 += 304;
    v4 += 19;
  }
  while (v4 != v5);
  return v5;
}

void sub_100A32FF4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_100A33074()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_100A33104(_Unwind_Exception *a1)
{
}

uint64_t sub_100A3311C()
{
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247F9F0, (void *)&_mh_execute_header);
}

void sub_100A33170(uint64_t a1)
{
}

void sub_100A332D4(_Unwind_Exception *a1)
{
  uint64_t v4 = v1[36];
  v1[36] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)v1[22];
  if (v5) {
    sub_1000DB0A0(v5);
  }
  long long v6 = (std::__shared_weak_count *)v1[20];
  if (v6) {
    sub_1000DB0A0(v6);
  }
  uint64_t v7 = *v2;
  uint64_t *v2 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_100A69E8C((uint64_t)v1);
  _Unwind_Resume(a1);
}

void sub_100A33368(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_1009E8E44();

  sub_100A34FA0(a4, v7, a2, a3);
}

void *sub_100A333BC(void *a1)
{
  *a1 = off_1022DAB48;
  sub_100A3348C((uint64_t)a1);
  uint64_t v2 = a1[36];
  a1[36] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[22];
  if (v3) {
    sub_1000DB0A0(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[20];
  if (v4) {
    sub_1000DB0A0(v4);
  }
  uint64_t v5 = a1[18];
  a1[18] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  return sub_100A69E8C((uint64_t)a1);
}

void sub_100A3348C(uint64_t a1)
{
  uint64_t v2 = *(__CFRunLoopTimer **)(a1 + 192);
  if (v2)
  {
    CFRunLoopTimerInvalidate(v2);
    CFRelease(*(CFTypeRef *)(a1 + 192));
    *(void *)(a1 + 192) = 0;
  }
}

void sub_100A334C8(void *a1)
{
  sub_100A333BC(a1);

  operator delete();
}

unint64_t sub_100A33500()
{
  if ((sub_1000A16E8() & 0x20) != 0) {
    return 1;
  }
  else {
    return ((unint64_t)sub_1000A16E8() >> 4) & 1;
  }
}

uint64_t sub_100A3352C(uint64_t result, double *a2)
{
  double v2 = a2[7];
  if (v2 == -1.0)
  {
    uint64_t v6 = 0;
    long long v4 = 0u;
    long long v5 = 0u;
    long long v3 = 0u;
    double v2 = -1.0;
  }
  else
  {
    long long v3 = *(_OWORD *)a2;
    long long v4 = *((_OWORD *)a2 + 1);
    long long v5 = *((_OWORD *)a2 + 2);
    uint64_t v6 = *((void *)a2 + 6);
  }
  *(_OWORD *)(result + 200) = v3;
  *(_OWORD *)(result + 216) = v4;
  *(_OWORD *)(result + 232) = v5;
  *(void *)(result + 248) = v6;
  *(double *)(result + 256) = v2;
  return result;
}

id sub_100A33598(uint64_t a1, int a2)
{
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1022DABB0);
  }
  long long v4 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67240192;
    int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Compass for AOP started. CoverAttached %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DABB0);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLCompass7::start(BOOL)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  *(unsigned char *)(a1 + 272) = a2;
  return [*(id *)(*(void *)(a1 + 288) + 16) register:*(void *)(*(void *)(a1 + 288) + 8) forNotification:31 registrationInfo:0];
}

id sub_100A33760(uint64_t a1)
{
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1022DABB0);
  }
  double v2 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Compass for AOP stopped.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DABB0);
    }
    long long v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLCompass7::stop()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return [*(id *)(*(void *)(a1 + 288) + 16) unregister:*(void *)(*(void *)(a1 + 288) + 8) forNotification:31];
}

double sub_100A33904(uint64_t a1, int a2, double *a3)
{
  sub_100A6A068(a1, a2, a3);
  if (!a2)
  {
    if (*a3 <= 0.0)
    {
      if (*(unsigned char *)(a1 + 184)) {
        sub_100A3398C(a1);
      }
      if (*(void *)(a1 + 192)) {
        uint64_t v7 = (double *)&unk_101D6F4C0;
      }
      else {
        uint64_t v7 = a3;
      }
      uint64_t v6 = a1;
    }
    else
    {
      uint64_t v6 = a1;
      uint64_t v7 = a3;
    }
    sub_100A33CF8(v6, v7);
  }
  *(double *)(a1 + 264) = *a3;
  return *a3;
}

void sub_100A3398C(uint64_t a1)
{
  *(unsigned char *)(a1 + 184) = 0;
  sub_100A3348C(a1);
  context.version = 0;
  context.info = (void *)a1;
  memset(&context.retain, 0, 24);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFRunLoopTimerRef v3 = CFRunLoopTimerCreate(kCFAllocatorDefault, Current + 600.0, 0.0, 0, 0, (CFRunLoopTimerCallBack)sub_100A3428C, &context);
  *(void *)(a1 + 192) = v3;
  if (v3)
  {
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DABB0);
    }
    long long v4 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134349056;
      uint64_t v13 = 0x4082C00000000000;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Keeping compass on for %{public}.0f seconds", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DABB0);
      }
      int v10 = 134349056;
      uint64_t v11 = 0x4082C00000000000;
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCompass7::startTurnOffTimer()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    sub_1000D3E78();
    long long v5 = (__CFRunLoop *)sub_1001BEA14();
    CFRunLoopAddTimer(v5, *(CFRunLoopTimerRef *)(a1 + 192), kCFRunLoopCommonModes);
  }
  else
  {
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DABB0);
    }
    uint64_t v6 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Could not create turn-off timer", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DABB0);
      }
      LOWORD(v10) = 0;
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCompass7::startTurnOffTimer()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    sub_100A33CF8(a1, (double *)(a1 + 264));
  }
}

uint64_t sub_100A33CF8(uint64_t a1, double *a2)
{
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1022DABB0);
  }
  long long v4 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEFAULT))
  {
    double v5 = *a2;
    *(_DWORD *)long long buf = 134349056;
    *(double *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Setting compass update interval to %{public}f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DABB0);
    }
    uint64_t v15 = *(void *)a2;
    int v19 = 134349056;
    uint64_t v20 = v15;
    long long v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCompass7::setDeviceMotionServiceUpdateInterval(const CFTimeInterval &)", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  if (*(unsigned char *)(a1 + 136))
  {
    char v6 = sub_1000A16E8();
    uint64_t v7 = (uint64_t *)(a1 + 168);
    if ((v6 & 0x20) != 0) {
      uint64_t v8 = a1 + 168;
    }
    else {
      uint64_t v8 = a1 + 152;
    }
    if ((v6 & 0x20) != 0) {
      int v9 = 8;
    }
    else {
      int v9 = 4;
    }
    if ((v6 & 0x20) != 0) {
      uint64_t v7 = (uint64_t *)(a1 + 152);
    }
  }
  else
  {
    uint64_t v7 = (uint64_t *)(a1 + 168);
    uint64_t v8 = a1 + 152;
    int v9 = 4;
  }
  if (*v7) {
    sub_100A29D64(*v7, 0.0);
  }
  int v10 = *(uint64_t **)v8;
  if (!*(void *)v8)
  {
    uint64_t v11 = (uint64_t *)sub_100A26784();
    v17[0] = 65292;
    v17[1] = v9;
    char v18 = 0;
    sub_101A46D60(v11, (uint64_t)v17, (uint64_t *)buf);
    long long v12 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    uint64_t v13 = *(std::__shared_weak_count **)(v8 + 8);
    *(_OWORD *)uint64_t v8 = v12;
    if (v13)
    {
      sub_1000DB0A0(v13);
      if (*(void *)&buf[8]) {
        sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
      }
    }
    sub_100A2932C(*(uint64_t **)v8, (uint64_t)sub_100A340B8, a1);
    int v10 = *(uint64_t **)v8;
  }
  return sub_100A29D64((uint64_t)v10, *a2);
}

uint64_t sub_100A33F70(uint64_t result, int a2, unint64_t a3, unint64_t a4)
{
  if (!a2 && a3 < a4)
  {
    uint64_t v4 = result;
    if (!*(unsigned char *)(result + 184))
    {
      double result = sub_1009D3504(result, 0);
      double v5 = (void *)result;
      uint64_t v7 = v6;
      if ((void *)result != v6)
      {
        while (1)
        {
          uint64_t v8 = (void *)(*(uint64_t (**)(void))(*(void *)v5[4] + 32))(v5[4]);
          objc_opt_class();
          double result = objc_opt_isKindOfClass();
          if (result)
          {
            id v9 = [v8 objectForKeyedSubscript:@"ClientName"];
            objc_opt_class();
            double result = objc_opt_isKindOfClass();
            if (result)
            {
              double result = (uint64_t)[v9 isEqualToString:@"com.apple.NanoMaps"];
              if (result) {
                break;
              }
            }
          }
          int v10 = (void *)v5[1];
          if (v10)
          {
            do
            {
              uint64_t v11 = v10;
              int v10 = (void *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              uint64_t v11 = (void *)v5[2];
              BOOL v12 = *v11 == (void)v5;
              double v5 = v11;
            }
            while (!v12);
          }
          double v5 = v11;
          if (v11 == v7)
          {
            double v5 = v7;
            break;
          }
        }
      }
      *(unsigned char *)(v4 + 184) = v5 != v7;
    }
  }
  return result;
}

void sub_100A340B8()
{
  IOHIDEventGetVendorDefinedData();
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022DAC38);
  }
  uint64_t v0 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Empty payload, returning", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022DAC38);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLCompass7::onDeviceMotionServiceIohidEvent(void *, void *, void *, IOHIDEventRef)", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_100A3428C(uint64_t a1, uint64_t a2)
{
  if (*(double *)(a2 + 264) <= 0.0) {
    sub_100A33CF8(a2, (double *)(a2 + 264));
  }

  sub_100A3348C(a2);
}

void sub_100A342D8(uint64_t a1, unsigned char *a2, size_t a3, double *a4)
{
  sub_100545A3C(__dst, a2, a3);
  uint64_t v6 = *(void *)(a1 + 144);
  if (!v6) {
    operator new();
  }
  sub_100545AAC(__dst, v6);
  uint64_t v7 = *(void *)(a1 + 144);
  long long v8 = *(_OWORD *)(v7 + 8);
  long long v9 = *(_OWORD *)(v7 + 56);
  long long v10 = *(_OWORD *)(v7 + 88);
  long long v32 = *(_OWORD *)(v7 + 72);
  long long v33 = v10;
  int v34 = *(_DWORD *)(v7 + 104);
  long long v11 = *(_OWORD *)(v7 + 24);
  v29[0] = v8;
  v29[1] = v11;
  long long v30 = *(_OWORD *)(v7 + 40);
  long long v31 = v9;
  uint64_t v12 = *(unsigned int *)(a1 + 132);
  if (!v12 || *(void *)((char *)v29 + 4) == v12)
  {
    uint64_t v28 = 0;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v23 = 0u;
    sub_100A34478(a1, (uint64_t)v29, a4, (uint64_t)&v23);
    if ((WORD1(v29[0]) & 0x100) != 0)
    {
      double v13 = *a4;
      long long v16 = v25;
      long long v17 = v26;
      long long v18 = v27;
      long long v14 = v23;
      long long v15 = v24;
      uint64_t v22 = 0;
      uint64_t v19 = v28;
      int v20 = HIDWORD(v29[0]);
      float v21 = sqrtf((float)((float)(*(float *)&v31 * *(float *)&v31) + (float)(*((float *)&v30 + 3) * *((float *)&v30 + 3)))+ (float)(*((float *)&v31 + 1) * *((float *)&v31 + 1)));
      LOBYTE(v22) = *(unsigned char *)(a1 + 28);
      sub_1000E7BA0(a1, 0, (uint64_t)&v13, 112);
    }
  }
}

void sub_100A34478(uint64_t a1@<X0>, uint64_t a2@<X1>, double *a3@<X2>, uint64_t a4@<X8>)
{
  float32x4_t v85 = *(float32x4_t *)(a2 + 28);
  sub_100B9BEAC(&v85, v85);
  float v7 = sub_100B9BC00(v85.f32);
  float v9 = v8;
  float v11 = v10;
  float v72 = *(float *)(a2 + 92);
  float v73 = *(float *)(a2 + 88);
  float v71 = *(float *)(a2 + 96);
  float v12 = *(float *)(a2 + 16);
  float v13 = v12 - *(float *)(a2 + 76);
  float v80 = *(float *)(a2 + 20);
  float v81 = *(float *)(a2 + 24);
  float v14 = v80 - *(float *)(a2 + 80);
  float v15 = v81 - *(float *)(a2 + 84);
  *(float *)&uint64_t v83 = v13;
  *((float *)&v83 + 1) = v14;
  float v84 = v15;
  float v16 = sub_100B9BCB0(v85.f32);
  float v78 = v17;
  float v79 = v16;
  float v77 = v18;
  uint64_t v19 = 0;
  float v20 = 0.0;
  do
  {
    float v20 = v20 + (float)(*(float *)((char *)&v83 + v19) * *(float *)((char *)&v83 + v19));
    v19 += 4;
  }
  while (v19 != 12);
  float v76 = sqrtf(v20);
  float v74 = (float)((float)((float)(v11 * v15) + (float)(v9 * v14)) + (float)(v7 * v13)) / v76;
  float v75 = v76 * sqrtf(1.0 - (float)(v74 * v74));
  sub_100A34F24(a1, *(float *)(a2 + 72), fabsf(v75));
  float v22 = v21;
  char v23 = *(unsigned char *)(a2 + 1);
  float v24 = *(float *)(a2 + 68);
  float v25 = -1.0;
  if (*(double *)(a1 + 256) != -1.0) {
    float v25 = sub_1004BB1CC(v24, *(double *)(a1 + 240));
  }
  if (*(unsigned char *)(a1 + 129))
  {
    float v22 = -1.0;
    char v26 = 0;
  }
  else
  {
    char v26 = v23;
  }
  unsigned int v27 = *(unsigned __int16 *)(a2 + 2);
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1022DABB0);
  }
  uint64_t v28 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 136324098;
    double v29 = *(float *)(a2 + 32);
    double v89 = *(float *)(a2 + 28);
    double v91 = v29;
    LODWORD(v29) = *(_DWORD *)(a2 + 40);
    double v93 = *(float *)(a2 + 36);
    double v95 = *(float *)&v29;
    double v97 = v73;
    double v99 = v72;
    double v101 = v71;
    double v103 = v79;
    double v105 = v77;
    double v107 = v78;
    double v109 = v12;
    double v111 = v80;
    double v113 = v81;
    double v115 = v7;
    double v117 = v9;
    double v119 = v11;
    double v121 = v24;
    double v123 = v25;
    double v125 = v22;
    double v30 = *a3;
    v87 = "GyroCompass";
    __int16 v88 = 2048;
    __int16 v90 = 2048;
    __int16 v92 = 2048;
    __int16 v94 = 2048;
    __int16 v96 = 2048;
    __int16 v98 = 2048;
    __int16 v100 = 2048;
    __int16 v102 = 2048;
    __int16 v104 = 2048;
    __int16 v106 = 2048;
    __int16 v108 = 2048;
    __int16 v110 = 2048;
    __int16 v112 = 2048;
    __int16 v114 = 2048;
    __int16 v116 = 2048;
    __int16 v118 = 2048;
    __int16 v120 = 2048;
    __int16 v122 = 2048;
    __int16 v124 = 2048;
    __int16 v126 = 1024;
    int v127 = v26;
    __int16 v128 = 1024;
    int v129 = (v27 >> 4) & 1;
    __int16 v130 = 1024;
    int v131 = (v27 >> 3) & 1;
    __int16 v132 = 1024;
    int v133 = (v27 >> 2) & 1;
    __int16 v134 = 1024;
    int v135 = (v27 >> 5) & 1;
    __int16 v136 = 1024;
    int v137 = (v27 >> 6) & 1;
    __int16 v138 = 1024;
    int v139 = (v27 >> 8) & 1;
    __int16 v140 = 1024;
    int v141 = (v27 >> 1) & 1;
    __int16 v142 = 1024;
    int v143 = v27 & 1;
    __int16 v144 = 1024;
    int v145 = (v27 >> 10) & 1;
    __int16 v146 = 1024;
    int v147 = (v27 >> 9) & 1;
    __int16 v148 = 1024;
    int v149 = (v27 >> 11) & 1;
    __int16 v150 = 1024;
    int v151 = (v27 >> 12) & 1;
    __int16 v152 = 1024;
    int v153 = (v27 >> 13) & 1;
    __int16 v154 = 1024;
    int v155 = (v27 >> 14) & 1;
    __int16 v156 = 2048;
    double v157 = v30;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "Type,%s,attitude.x,%.8f,.y,%.8f,.z,%.8f,.w,%.8f,magBiasEstVar.x,%.8f,.y,%.8f,.z,%.8f,calibrated.x,%.8f,.y,%.8f,.z,%.8f,uncalibrated.x,%.8f,.y,%.8f,.z,%.8f,gravity.x,%.8f,.y,%.8f,.z,%.8f,heading,%.1f,trueheading,%.1f,accuracy,%.1f,level,%d,biasEstimation,%d,yawCorrection,%d,gravityCorrection,%d,courseCorrection,%d,visualLocalizationCorrection,%d,initalized,%d,accelSaturated,%d,gyroSaturated,%d,compassCalibration,%d,gyroCalibration,%d,course,%d,gmm,%d,north,%d,visualLocalization,%d,timestamp,%f", buf, 0x12Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DABB0);
    }
    double v65 = *(float *)(a2 + 28);
    double v66 = *(float *)(a2 + 32);
    double v67 = *(float *)(a2 + 36);
    double v68 = *(float *)(a2 + 40);
    uint64_t v69 = *(void *)a3;
    *(_DWORD *)v161 = 136324098;
    *(void *)&v161[4] = "GyroCompass";
    *(_WORD *)&v161[12] = 2048;
    *(double *)&v161[14] = v65;
    __int16 v162 = 2048;
    double v163 = v66;
    *(_WORD *)v164 = 2048;
    *(double *)&v164[2] = v67;
    *(_WORD *)&v164[10] = 2048;
    *(double *)&v164[12] = v68;
    *(_WORD *)&v164[20] = 2048;
    *(double *)&v164[22] = v73;
    *(_WORD *)&v164[30] = 2048;
    *(double *)&v164[32] = v72;
    *(_WORD *)v165 = 2048;
    *(double *)&v165[2] = v71;
    *(_WORD *)&v165[10] = 2048;
    double v166 = v79;
    *(_WORD *)v167 = 2048;
    *(double *)&v167[2] = v77;
    __int16 v168 = 2048;
    double v169 = v78;
    __int16 v170 = 2048;
    double v171 = v12;
    __int16 v172 = 2048;
    double v173 = v80;
    __int16 v174 = 2048;
    double v175 = v81;
    __int16 v176 = 2048;
    double v177 = v7;
    __int16 v178 = 2048;
    double v179 = v9;
    __int16 v180 = 2048;
    double v181 = v11;
    __int16 v182 = 2048;
    double v183 = v24;
    __int16 v184 = 2048;
    double v185 = v25;
    __int16 v186 = 2048;
    double v187 = v22;
    __int16 v188 = 1024;
    int v189 = v26;
    __int16 v190 = 1024;
    int v191 = (v27 >> 4) & 1;
    __int16 v192 = 1024;
    int v193 = (v27 >> 3) & 1;
    __int16 v194 = 1024;
    int v195 = (v27 >> 2) & 1;
    __int16 v196 = 1024;
    int v197 = (v27 >> 5) & 1;
    __int16 v198 = 1024;
    int v199 = (v27 >> 6) & 1;
    __int16 v200 = 1024;
    int v201 = (v27 >> 8) & 1;
    __int16 v202 = 1024;
    int v203 = (v27 >> 1) & 1;
    __int16 v204 = 1024;
    int v205 = v27 & 1;
    __int16 v206 = 1024;
    int v207 = (v27 >> 10) & 1;
    __int16 v208 = 1024;
    int v209 = (v27 >> 9) & 1;
    __int16 v210 = 1024;
    int v211 = (v27 >> 11) & 1;
    __int16 v212 = 1024;
    int v213 = (v27 >> 12) & 1;
    __int16 v214 = 1024;
    int v215 = (v27 >> 13) & 1;
    __int16 v216 = 1024;
    int v217 = (v27 >> 14) & 1;
    __int16 v218 = 2048;
    uint64_t v219 = v69;
    uint64_t v70 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLMotionTypeCompass CLCompass7::populateMotionType(const CMDeviceMotionReport::Compass &, const CFTimeInterval &)", "%s\n", v70);
    if (v70 != (char *)buf) {
      free(v70);
    }
  }
  if (*(unsigned char *)(a1 + 29))
  {
    *(void *)v161 = off_1022E6B38;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    double v32 = *a3;
    *(CFAbsoluteTime *)&v161[8] = Current;
    double v163 = v32;
    *(_OWORD *)v164 = *(_OWORD *)(a2 + 28);
    *(void *)&v164[16] = *(void *)(a2 + 56);
    LODWORD(Current) = *(_DWORD *)(a2 + 64);
    *(float32x2_t *)&v164[28] = vmul_f32(*(float32x2_t *)(a2 + 44), (float32x2_t)vdup_n_s32(0x42652EE1u));
    *(float *)&double v32 = *(float *)(a2 + 52) * 57.296;
    *(_DWORD *)&v164[24] = LODWORD(Current);
    *(_DWORD *)&v164[36] = LODWORD(v32);
    *(float *)v165 = v12;
    *(float *)&v165[4] = v80;
    *(float *)&v165[8] = v81;
    LOBYTE(v166) = v26;
    *((float *)&v166 + 1) = v24;
    *(float *)v167 = v25;
    *(float *)&v167[4] = v22;
    int v33 = *(_DWORD *)(a1 + 132);
    LODWORD(v169) = 2;
    HIDWORD(v169) = v33;
    __int16 v170 = *(_WORD *)(a2 + 2);
    uint64_t v34 = sub_101282D9C();
    sub_10128431C(v34, (uint64_t)v161);
    sub_10170140C(buf);
    sub_101727128((uint64_t)buf);
    v160 |= 1u;
    uint64_t v158 = *(void *)&v161[8];
    uint64_t v35 = v159;
    uint64_t v36 = *(void *)a3;
    *(_DWORD *)(v159 + 124) |= 0x10u;
    *(void *)(v35 + 40) = v36;
    uint64_t v37 = v159;
    double v38 = *(float *)(a2 + 28);
    *(_DWORD *)(v159 + 124) |= 2u;
    *(double *)(v37 + 16) = v38;
    uint64_t v39 = v159;
    double v40 = *(float *)(a2 + 32);
    *(_DWORD *)(v159 + 124) |= 4u;
    *(double *)(v39 + 24) = v40;
    uint64_t v41 = v159;
    double v42 = *(float *)(a2 + 36);
    *(_DWORD *)(v159 + 124) |= 8u;
    *(double *)(v41 + 32) = v42;
    uint64_t v43 = v159;
    double v44 = *(float *)(a2 + 40);
    *(_DWORD *)(v159 + 124) |= 1u;
    *(double *)(v43 + 8) = v44;
    uint64_t v45 = v159;
    LODWORD(v44) = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(v159 + 124) |= 0x40000u;
    *(_DWORD *)(v45 + 100) = LODWORD(v44);
    uint64_t v46 = v159;
    LODWORD(v44) = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(v159 + 124) |= 0x80000u;
    *(_DWORD *)(v46 + 104) = LODWORD(v44);
    uint64_t v47 = v159;
    LODWORD(v44) = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(v159 + 124) |= 0x100000u;
    *(_DWORD *)(v47 + 108) = LODWORD(v44);
    uint64_t v48 = v159;
    *(float *)&double v44 = *(float *)(a2 + 44) * 57.296;
    *(_DWORD *)(v159 + 124) |= 0x2000u;
    *(_DWORD *)(v48 + 80) = LODWORD(v44);
    uint64_t v49 = v159;
    *(float *)&double v44 = *(float *)(a2 + 48) * 57.296;
    *(_DWORD *)(v159 + 124) |= 0x4000u;
    *(_DWORD *)(v49 + 84) = LODWORD(v44);
    uint64_t v50 = v159;
    *(float *)&double v44 = *(float *)(a2 + 52) * 57.296;
    *(_DWORD *)(v159 + 124) |= 0x8000u;
    *(_DWORD *)(v50 + 88) = LODWORD(v44);
    uint64_t v51 = v159;
    *(_DWORD *)(v159 + 124) |= 0x100u;
    *(float *)(v51 + 60) = v12;
    uint64_t v52 = v159;
    *(_DWORD *)(v159 + 124) |= 0x200u;
    *(float *)(v52 + 64) = v80;
    uint64_t v53 = v159;
    *(_DWORD *)(v159 + 124) |= 0x400u;
    *(float *)(v53 + 68) = v81;
    uint64_t v54 = v159;
    *(_DWORD *)(v159 + 124) |= 0x80u;
    *(_DWORD *)(v54 + 56) = v26;
    uint64_t v55 = v159;
    *(_DWORD *)(v159 + 124) |= 0x800u;
    *(float *)(v55 + 72) = v24;
    uint64_t v56 = v159;
    *(_DWORD *)(v159 + 124) |= 0x20000u;
    *(float *)(v56 + 96) = v25;
    uint64_t v57 = v159;
    *(_DWORD *)(v159 + 124) |= 0x20u;
    *(float *)(v57 + 48) = v22;
    uint64_t v58 = v159;
    *(_DWORD *)(v159 + 124) |= 0x1000u;
    *(_DWORD *)(v58 + 76) = 2;
    uint64_t v59 = v159;
    int v60 = *(_DWORD *)(a1 + 132);
    *(_DWORD *)(v159 + 124) |= 0x40u;
    *(_DWORD *)(v59 + 52) = v60;
    uint64_t v61 = v159;
    int v62 = *(unsigned __int16 *)(a2 + 2);
    *(_DWORD *)(v159 + 124) |= 0x10000u;
    *(_DWORD *)(v61 + 92) = v62;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1022DAC58);
    }
    if (qword_10248AF90) {
      sub_1019E5150(qword_10248AF90, (uint64_t)buf);
    }
    sub_101706914((PB::Base *)buf);
  }
  float v63 = acosf(v74);
  *(void *)(a4 + 40) = 0;
  *(float *)a4 = v79;
  *(float *)(a4 + 4) = v77;
  *(float *)(a4 + 8) = v78;
  *(void *)(a4 + 12) = v83;
  *(float *)(a4 + 20) = v84;
  *(float *)(a4 + 24) = v24;
  *(float *)(a4 + 28) = v25;
  *(float *)(a4 + 32) = v22;
  *(_DWORD *)(a4 + 36) = v26;
  *(float *)(a4 + 44) = v76;
  *(float *)(a4 + 48) = (float)(v63 * -57.296) + 90.0;
  *(float *)(a4 + 52) = v75;
  float v64 = v85.f32[2];
  *(double *)(a4 + 56) = v85.f32[3];
  *(float64x2_t *)(a4 + 64) = vcvtq_f64_f32(*(float32x2_t *)v85.f32);
  *(double *)(a4 + 80) = v64;
}

void sub_100A34F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100A34F24(uint64_t a1, float a2, float a3)
{
  if (a2 != -1.0 && *(unsigned char *)(a1 + 272) && a3 > 0.0) {
    asinf(5.0 / a3);
  }
}

void sub_100A34FA0(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 31)
  {
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DABB0);
    }
    uint64_t v6 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(a4 + 984);
      *(_DWORD *)long long buf = 67109120;
      int v17 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "visionARSessionState.state,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DABB0);
      }
      int v10 = *(_DWORD *)(a4 + 984);
      int v14 = 67109120;
      int v15 = v10;
      float v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCompass7::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    BOOL v8 = *(_DWORD *)(a4 + 984) != 1;
    uint64_t v9 = sub_1000D3E78();
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100A351C8;
    void v12[3] = &unk_1022BBA18;
    v12[4] = a1;
    BOOL v13 = v8;
    sub_1009E8E94(v9, (uint64_t)v12);
  }
}

uint64_t sub_100A351C8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (*(unsigned __int8 *)(result + 136) != v3)
  {
    *(unsigned char *)(result + 136) = v3;
    return sub_100A33CF8(result, (double *)(result + 264));
  }
  return result;
}

void sub_100A351F0(id a1)
{
  qword_1024190A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void sub_100A35220()
{
}

__n128 sub_100A35234(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  *(_OWORD *)(a1 + 40) = a2[2];
  *(_OWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 8) = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(_DWORD *)(a1 + 104) = *((_DWORD *)a2 + 24);
  *(_OWORD *)(a1 + 88) = v6;
  *(_OWORD *)(a1 + 72) = v5;
  *(__n128 *)(a1 + 56) = result;
  return result;
}

void sub_100A35268(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100A3529C()
{
  sub_10051F6A8((uint64_t)v3, @"com.apple.SOS", 1, @"mobile");
  BOOL v4 = 0;
  unsigned int v0 = sub_1000D29FC((uint64_t)v3, @"SOSNewtonTriggersEmergencySOSKey", &v4);
  if (v4) {
    uint64_t v1 = v0;
  }
  else {
    uint64_t v1 = 0;
  }
  sub_10051F740(v3);
  return v1;
}

void sub_100A35314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100A35328()
{
  sub_10051F6A8((uint64_t)v3, @"com.apple.SOS", 1, @"mobile");
  BOOL v4 = 0;
  unsigned int v0 = sub_1000D29FC((uint64_t)v3, @"SOSNewtonWorkoutTriggersEmergencySOSKey", &v4);
  if (v4) {
    uint64_t v1 = v0;
  }
  else {
    uint64_t v1 = 0;
  }
  sub_10051F740(v3);
  return v1;
}

void sub_100A353A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100A35478(id a1)
{
  qword_10247FA40 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLFallNotifierSilo"];
}

uint64_t sub_100A35538(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100A47928;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_10247FA60 != -1) {
    dispatch_once(&qword_10247FA60, block);
  }
  return qword_10248A818;
}

void sub_100A3579C(id a1)
{
  if (sub_100A357C4()) {
    byte_10247FA50 = 1;
  }
}

unint64_t sub_100A357C4()
{
  if ((sub_1000A16E8() & 0x4000000000) != 0) {
    return 1;
  }
  sub_100103240();
  return ((unint64_t)sub_1000A16E8() >> 39) & 1;
}

uint64_t sub_100A35830(uint64_t a1, uint64_t a2)
{
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  BOOL v4 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134349056;
    uint64_t v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Simulating event: %{public}lu.", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    long long v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::simulateEvent(CMFallEventType)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return sub_100A4225C(a1, a2);
}

uint64_t sub_100A35A24(uint64_t a1, int a2)
{
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  BOOL v4 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67240192;
    int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Changing hgal capture mode: %{public}u.", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    long long v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::setHgalCaptureMode(uint8_t)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  *(unsigned char *)(a1 + 109) = a2;
  return sub_100A4225C(a1, 0);
}

void sub_100A35D00(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 19);
  if (v3)
  {
    long long v5 = (unsigned __int8 *)(a1 + 6725);
    if (*(void *)(a1 + 6731) != v3)
    {
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      double v29 = qword_1024190F8;
      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v30 = *(void *)(a2 + 19);
        int v31 = *(unsigned __int8 *)(a2 + 149);
        uint64_t v32 = *(void *)(a2 + 158);
        int v33 = *(unsigned __int8 *)(a2 + 13);
        int v34 = *(unsigned __int8 *)(a2 + 156);
        int v35 = *(unsigned __int8 *)(a2 + 157);
        int v36 = *(unsigned __int8 *)(a2 + 190);
        *(_DWORD *)long long buf = 68291587;
        int v166 = 0;
        __int16 v167 = 2082;
        __int16 v168 = "";
        __int16 v169 = 2082;
        __int16 v170 = "upstream";
        __int16 v171 = 2050;
        uint64_t v172 = v30;
        __int16 v173 = 1025;
        int v174 = v31;
        __int16 v175 = 2049;
        uint64_t v176 = v32;
        __int16 v177 = 1025;
        *(_DWORD *)__int16 v178 = v33;
        *(_WORD *)&v178[4] = 1025;
        *(_DWORD *)&v178[6] = v34;
        *(_WORD *)double v179 = 1025;
        *(_DWORD *)&v179[2] = v35;
        *(_WORD *)__int16 v180 = 1025;
        *(_DWORD *)&v180[2] = v36;
        *(_WORD *)double v181 = 1026;
        *(_DWORD *)&v181[2] = 0;
        *(_WORD *)__int16 v182 = 1026;
        *(_DWORD *)&v182[2] = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Notifier - Received anomaly detection subscription request with outdated event\", \"direction\":%{public, location:escape_only}s, \"aop timestamp\":%{public}llu, \"operatingMode\":%{private}u, \"absolute timestamp\":\"%{private}f\", \"state\":%{private}d, \"response\":%{private}d, \"resolution\":%{private}d, \"sosState\":%{private}d, \"current\":%{public}hhd, \"log to healthkit\":%{public}hhd}", buf, 0x5Au);
      }
      uint64_t v37 = *(void *)(a1 + 6731);
      BOOL v38 = v37 != 0;
      if (!v37)
      {
        BOOL v38 = 0;
        *(void *)(a1 + 6870) = *(void *)(a2 + 158);
        *(void *)(a1 + 6731) = *(void *)(a2 + 19);
        *(_WORD *)(a1 + 6868) = *(_WORD *)(a2 + 156);
        *(unsigned char *)(a1 + 6902) = *(unsigned char *)(a2 + 190);
      }
      uint64_t v39 = a2;
LABEL_321:
      sub_100A3A204(a1, v39);
      if (*(unsigned char *)(a2 + 157))
      {
        *(unsigned char *)(a1 + 447) = 1;
        sub_100A44C10(a1);
      }
      if (v38)
      {
        v164[0] = 0;
        sub_10006ACBC(buf, "AnomalyMotionInternalTest", v164, 0);
        if (!buf[1])
        {
          uint64_t v28 = a1;
          uint64_t v27 = a1 + 6712;
          goto LABEL_326;
        }
      }
      return;
    }
    int v6 = *(unsigned __int8 *)(a2 + 156);
    if (*(unsigned char *)(a1 + 6868)) {
      BOOL v7 = 1;
    }
    else {
      BOOL v7 = v6 == 0;
    }
    int v8 = !v7;
    int v9 = *(unsigned __int8 *)(a1 + 6902);
    int v10 = *(unsigned __int8 *)(a2 + 190);
    *(void *)(a1 + 6870) = *(void *)(a2 + 158);
    *(unsigned char *)(a1 + 6868) = v6;
    *(unsigned char *)(a1 + 6869) = *(unsigned char *)(a2 + 157);
    *(unsigned char *)(a1 + 6902) = v10;
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    float v11 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 6731);
      int v13 = *(unsigned __int8 *)(a1 + 6861);
      uint64_t v14 = *(void *)(a1 + 6878);
      uint64_t v15 = *(void *)(a1 + 6870);
      int v16 = *v5;
      int v17 = *(unsigned __int8 *)(a1 + 6868);
      int v18 = *(unsigned __int8 *)(a1 + 6869);
      int v19 = *(unsigned __int8 *)(a1 + 6902);
      *(_DWORD *)long long buf = 68291843;
      int v166 = 0;
      __int16 v167 = 2082;
      __int16 v168 = "";
      __int16 v169 = 2082;
      __int16 v170 = "upstream";
      __int16 v171 = 2050;
      uint64_t v172 = v12;
      __int16 v173 = 1025;
      int v174 = v13;
      __int16 v175 = 2049;
      uint64_t v176 = v14;
      __int16 v177 = 2049;
      *(void *)__int16 v178 = v15;
      *(_WORD *)&v178[8] = 1025;
      *(_DWORD *)double v179 = v16;
      *(_WORD *)&v179[4] = 1025;
      *(_DWORD *)__int16 v180 = v17;
      *(_WORD *)&v180[4] = 1025;
      *(_DWORD *)double v181 = v18;
      *(_WORD *)&v181[4] = 1025;
      *(_DWORD *)__int16 v182 = v19;
      *(_WORD *)&v182[4] = 1026;
      int v183 = 1;
      __int16 v184 = 1026;
      int v185 = v8;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Notifier - Received anomaly detection subscription request with event\", \"direction\":%{public, location:escape_only}s, \"aop timestamp\":%{public}llu, \"operatingMode\":%{private}u, \"anomaly timestamp\":\"%{private}f\", \"update timestamp\":\"%{private}f\", \"state\":%{private}d, \"response\":%{private}d, \"resolution\":%{private}d, \"sosState\":%{private}d, \"current\":%{public}hhd, \"log to healthkit\":%{public}hhd}", buf, 0x64u);
    }
    if (!v8)
    {
      if (v9 != v10)
      {
        switch(*(unsigned char *)(a2 + 190))
        {
          case 1:
            if (qword_1024190F0 != -1) {
              dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
            }
            double v40 = qword_1024190F8;
            if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Notifier - Received SOS Call initiated Callback", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024190F0 != -1) {
                dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
              }
              *(_WORD *)v164 = 0;
              int v127 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v127);
              if (v127 != (char *)buf) {
                free(v127);
              }
            }
            *(CFAbsoluteTime *)(a1 + 6894) = CFAbsoluteTimeGetCurrent();
            break;
          case 2:
            if (qword_1024190F0 != -1) {
              dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
            }
            uint64_t v41 = qword_1024190F8;
            if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Notifier - Received SOS Call canceled Callback", buf, 2u);
            }
            if (!sub_10013D1A0(115, 2)) {
              goto LABEL_81;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1024190F0 != -1) {
              dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
            }
            *(_WORD *)v164 = 0;
            goto LABEL_347;
          case 3:
            if (qword_1024190F0 != -1) {
              dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
            }
            double v42 = qword_1024190F8;
            if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "Notifier - Received SOS Call ended Callback", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024190F0 != -1) {
                dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
              }
              *(_WORD *)v164 = 0;
              __int16 v128 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v128);
              if (v128 != (char *)buf) {
                free(v128);
              }
            }
            if (*(double *)(a1 + 6894) == 0.0)
            {
              if (qword_1024190F0 != -1) {
                dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
              }
              uint64_t v43 = qword_1024190F8;
              if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_FAULT))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_FAULT, "Notifier - Received a SOS Call Ended Callback with no SOS Call timestamp!", buf, 2u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024190F0 != -1) {
                  dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                }
                *(_WORD *)v164 = 0;
                double v44 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v44);
                if (v44 != (char *)buf) {
                  free(v44);
                }
              }
            }
            else
            {
              if (qword_1024190F0 != -1) {
                dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
              }
              uint64_t v48 = qword_1024190F8;
              if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "Notifier - Logging SOS Call Placed", buf, 2u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024190F0 != -1) {
                  dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                }
                *(_WORD *)v164 = 0;
                int v139 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v139);
                if (v139 != (char *)buf) {
                  free(v139);
                }
              }
              sub_100A3A968(a1, *(void *)(a1 + 6731), *(unsigned __int8 *)(a1 + 6861), 0x8000000000000000);
            }
            break;
          case 4:
            if (qword_1024190F0 != -1) {
              dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
            }
            uint64_t v45 = qword_1024190F8;
            if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Notifier - Received SOS Call failed Callback", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024190F0 != -1) {
                dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
              }
              *(_WORD *)v164 = 0;
LABEL_347:
              int v129 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v129);
              if (v129 != (char *)buf) {
                free(v129);
              }
            }
LABEL_81:
            *(void *)(a1 + 6894) = 0;
            break;
          default:
            goto LABEL_320;
        }
      }
      goto LABEL_320;
    }
    +[CLFallHealthKitManager recordFallEventInHealthKit:a1 + 6712];
    if (!sub_100A3A90C(a1))
    {
LABEL_320:
      BOOL v38 = 1;
      uint64_t v39 = a1 + 6712;
      goto LABEL_321;
    }
    int v20 = *v5;
    if (v20 != 1 && v20 != 3)
    {
      if (v20 != 2)
      {
LABEL_142:
        switch(*(unsigned char *)(a1 + 6868))
        {
          case 1:
            if (qword_1024190F0 != -1) {
              dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
            }
            float v64 = qword_1024190F8;
            if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumUserResponseConfirmedActionRequested", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024190F0 != -1) {
                dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
              }
              *(_WORD *)v164 = 0;
              __int16 v130 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v130);
              if (v130 != (char *)buf) {
                free(v130);
              }
            }
            uint64_t v65 = sub_100C3AE20();
            sub_100A43C94(v65);
            sub_100A3A968(a1, *(void *)(a1 + 6731), *(unsigned __int8 *)(a1 + 6861), 0x4000000000000000uLL);
            sub_10120CC38(*(void *)(a1 + 128), *(void *)(a1 + 6731), *(unsigned char *)(a1 + 6868));
            uint64_t v66 = *(void *)(a1 + 10656);
            if (v66 > 16)
            {
              if (v66 == 17)
              {
                if (qword_1024190F0 != -1) {
                  dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                }
                double v109 = qword_1024190F8;
                if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)long long buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorRunningUserResponseConfirmedActionRequested", buf, 2u);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1024190F0 != -1) {
                    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                  }
                  *(_WORD *)v164 = 0;
                  uint64_t v159 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v159);
                  if (v159 != (char *)buf) {
                    free(v159);
                  }
                }
                uint64_t v110 = sub_100C3AE20();
                sub_100A43E44(v110);
              }
              else if (v66 == 24)
              {
                if (qword_1024190F0 != -1) {
                  dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                }
                double v89 = qword_1024190F8;
                if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)long long buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumHikingUserResponseConfirmedActionRequested", buf, 2u);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1024190F0 != -1) {
                    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                  }
                  *(_WORD *)v164 = 0;
                  int v149 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v149);
                  if (v149 != (char *)buf) {
                    free(v149);
                  }
                }
                uint64_t v90 = sub_100C3AE20();
                sub_100A43ED8(v90);
              }
            }
            else if (v66 == 4)
            {
              if (qword_1024190F0 != -1) {
                dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
              }
              double v99 = qword_1024190F8;
              if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorCyclingUserResponseConfirmedActionRequested", buf, 2u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024190F0 != -1) {
                  dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                }
                *(_WORD *)v164 = 0;
                __int16 v154 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v154);
                if (v154 != (char *)buf) {
                  free(v154);
                }
              }
              uint64_t v100 = sub_100C3AE20();
              sub_100A43D1C(v100);
            }
            else if (v66 == 15)
            {
              if (qword_1024190F0 != -1) {
                dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
              }
              double v67 = qword_1024190F8;
              if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorWalkingUserResponseConfirmedActionRequested", buf, 2u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024190F0 != -1) {
                  dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                }
                *(_WORD *)v164 = 0;
                __int16 v144 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v144);
                if (v144 != (char *)buf) {
                  free(v144);
                }
              }
              uint64_t v68 = sub_100C3AE20();
              sub_100A43DB0(v68);
            }
            break;
          case 2:
            if (qword_1024190F0 != -1) {
              dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
            }
            uint64_t v69 = qword_1024190F8;
            if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumUserResponseConfirmedNoActionRequested", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024190F0 != -1) {
                dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
              }
              *(_WORD *)v164 = 0;
              int v131 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v131);
              if (v131 != (char *)buf) {
                free(v131);
              }
            }
            uint64_t v70 = sub_100C3AE20();
            sub_100A43F6C(v70);
            sub_100A3A968(a1, *(void *)(a1 + 6731), *(unsigned __int8 *)(a1 + 6861), 0x4000000000000uLL);
            sub_10120CC38(*(void *)(a1 + 128), *(void *)(a1 + 6731), *(unsigned char *)(a1 + 6868));
            uint64_t v71 = *(void *)(a1 + 10656);
            if (v71 > 16)
            {
              if (v71 == 17)
              {
                if (qword_1024190F0 != -1) {
                  dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                }
                double v111 = qword_1024190F8;
                if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)long long buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorRunningUserResponseConfirmedNoActionRequested", buf, 2u);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1024190F0 != -1) {
                    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                  }
                  *(_WORD *)v164 = 0;
                  char v160 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v160);
                  if (v160 != (char *)buf) {
                    free(v160);
                  }
                }
                uint64_t v112 = sub_100C3AE20();
                sub_100A4411C(v112);
              }
              else if (v71 == 24)
              {
                if (qword_1024190F0 != -1) {
                  dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                }
                double v91 = qword_1024190F8;
                if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)long long buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumHikingUserResponseConfirmedNoActionRequested", buf, 2u);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1024190F0 != -1) {
                    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                  }
                  *(_WORD *)v164 = 0;
                  __int16 v150 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v150);
                  if (v150 != (char *)buf) {
                    free(v150);
                  }
                }
                uint64_t v92 = sub_100C3AE20();
                sub_100A441B0(v92);
              }
            }
            else if (v71 == 4)
            {
              if (qword_1024190F0 != -1) {
                dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
              }
              double v101 = qword_1024190F8;
              if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorCyclingUserResponseConfirmedNoActionRequested", buf, 2u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024190F0 != -1) {
                  dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                }
                *(_WORD *)v164 = 0;
                int v155 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v155);
                if (v155 != (char *)buf) {
                  free(v155);
                }
              }
              uint64_t v102 = sub_100C3AE20();
              sub_100A43FF4(v102);
            }
            else if (v71 == 15)
            {
              if (qword_1024190F0 != -1) {
                dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
              }
              float v72 = qword_1024190F8;
              if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorWalkingUserResponseConfirmedNoActionRequested", buf, 2u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024190F0 != -1) {
                  dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                }
                *(_WORD *)v164 = 0;
                int v145 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v145);
                if (v145 != (char *)buf) {
                  free(v145);
                }
              }
              uint64_t v73 = sub_100C3AE20();
              sub_100A44088(v73);
            }
            break;
          case 3:
            if (qword_1024190F0 != -1) {
              dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
            }
            float v74 = qword_1024190F8;
            if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumUserResponseDismissed", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024190F0 != -1) {
                dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
              }
              *(_WORD *)v164 = 0;
              __int16 v132 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v132);
              if (v132 != (char *)buf) {
                free(v132);
              }
            }
            uint64_t v75 = sub_100C3AE20();
            sub_100A44244(v75);
            sub_100A3A968(a1, *(void *)(a1 + 6731), *(unsigned __int8 *)(a1 + 6861), 0x4000000000000uLL);
            sub_10120CC38(*(void *)(a1 + 128), *(void *)(a1 + 6731), *(unsigned char *)(a1 + 6868));
            uint64_t v76 = *(void *)(a1 + 10656);
            if (v76 > 16)
            {
              if (v76 == 17)
              {
                if (qword_1024190F0 != -1) {
                  dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                }
                double v113 = qword_1024190F8;
                if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)long long buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorRunningUserResponseDismissed", buf, 2u);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1024190F0 != -1) {
                    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                  }
                  *(_WORD *)v164 = 0;
                  v161 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v161);
                  if (v161 != (char *)buf) {
                    free(v161);
                  }
                }
                uint64_t v114 = sub_100C3AE20();
                sub_100A443F4(v114);
              }
              else if (v76 == 24)
              {
                if (qword_1024190F0 != -1) {
                  dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                }
                double v93 = qword_1024190F8;
                if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)long long buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumHikingUserResponseDismissed", buf, 2u);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1024190F0 != -1) {
                    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                  }
                  *(_WORD *)v164 = 0;
                  int v151 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v151);
                  if (v151 != (char *)buf) {
                    free(v151);
                  }
                }
                uint64_t v94 = sub_100C3AE20();
                sub_100A44488(v94);
              }
            }
            else if (v76 == 4)
            {
              if (qword_1024190F0 != -1) {
                dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
              }
              double v103 = qword_1024190F8;
              if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorCyclingUserResponseDismissed", buf, 2u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024190F0 != -1) {
                  dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                }
                *(_WORD *)v164 = 0;
                __int16 v156 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v156);
                if (v156 != (char *)buf) {
                  free(v156);
                }
              }
              uint64_t v104 = sub_100C3AE20();
              sub_100A442CC(v104);
            }
            else if (v76 == 15)
            {
              if (qword_1024190F0 != -1) {
                dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
              }
              float v77 = qword_1024190F8;
              if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorWalkingUserResponseDismissed", buf, 2u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024190F0 != -1) {
                  dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                }
                *(_WORD *)v164 = 0;
                __int16 v146 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v146);
                if (v146 != (char *)buf) {
                  free(v146);
                }
              }
              uint64_t v78 = sub_100C3AE20();
              sub_100A44360(v78);
            }
            break;
          case 4:
            if (qword_1024190F0 != -1) {
              dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
            }
            float v79 = qword_1024190F8;
            if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumUserResponseRejected", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024190F0 != -1) {
                dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
              }
              *(_WORD *)v164 = 0;
              int v133 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v133);
              if (v133 != (char *)buf) {
                free(v133);
              }
            }
            uint64_t v80 = sub_100C3AE20();
            sub_100A4451C(v80);
            sub_100A3A968(a1, *(void *)(a1 + 6731), *(unsigned __int8 *)(a1 + 6861), 0x4000000000000uLL);
            sub_10120CC38(*(void *)(a1 + 128), *(void *)(a1 + 6731), *(unsigned char *)(a1 + 6868));
            uint64_t v81 = *(void *)(a1 + 10656);
            if (v81 > 16)
            {
              if (v81 == 17)
              {
                if (qword_1024190F0 != -1) {
                  dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                }
                double v115 = qword_1024190F8;
                if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)long long buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorRunningUserResponseRejected", buf, 2u);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1024190F0 != -1) {
                    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                  }
                  *(_WORD *)v164 = 0;
                  __int16 v162 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v162);
                  if (v162 != (char *)buf) {
                    free(v162);
                  }
                }
                uint64_t v116 = sub_100C3AE20();
                sub_100A446CC(v116);
              }
              else if (v81 == 24)
              {
                if (qword_1024190F0 != -1) {
                  dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                }
                double v95 = qword_1024190F8;
                if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)long long buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumHikingUserResponseRejected", buf, 2u);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1024190F0 != -1) {
                    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                  }
                  *(_WORD *)v164 = 0;
                  __int16 v152 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v152);
                  if (v152 != (char *)buf) {
                    free(v152);
                  }
                }
                uint64_t v96 = sub_100C3AE20();
                sub_100A44760(v96);
              }
            }
            else if (v81 == 4)
            {
              if (qword_1024190F0 != -1) {
                dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
              }
              double v105 = qword_1024190F8;
              if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorCyclingUserResponseRejected", buf, 2u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024190F0 != -1) {
                  dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                }
                *(_WORD *)v164 = 0;
                double v157 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v157);
                if (v157 != (char *)buf) {
                  free(v157);
                }
              }
              uint64_t v106 = sub_100C3AE20();
              sub_100A445A4(v106);
            }
            else if (v81 == 15)
            {
              if (qword_1024190F0 != -1) {
                dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
              }
              v82 = qword_1024190F8;
              if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorWalkingUserResponseRejected", buf, 2u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024190F0 != -1) {
                  dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                }
                *(_WORD *)v164 = 0;
                int v147 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v147);
                if (v147 != (char *)buf) {
                  free(v147);
                }
              }
              uint64_t v83 = sub_100C3AE20();
              sub_100A44638(v83);
            }
            break;
          case 5:
            if (qword_1024190F0 != -1) {
              dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
            }
            float v84 = qword_1024190F8;
            if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumUserResponseAutomaticActionRequested", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024190F0 != -1) {
                dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
              }
              *(_WORD *)v164 = 0;
              __int16 v134 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v134);
              if (v134 != (char *)buf) {
                free(v134);
              }
            }
            uint64_t v85 = sub_100C3AE20();
            sub_100A447F4(v85);
            sub_100A3A968(a1, *(void *)(a1 + 6731), *(unsigned __int8 *)(a1 + 6861), 0x4000000000000000uLL);
            sub_10120CC38(*(void *)(a1 + 128), *(void *)(a1 + 6731), *(unsigned char *)(a1 + 6868));
            uint64_t v86 = *(void *)(a1 + 10656);
            if (v86 > 16)
            {
              if (v86 == 17)
              {
                if (qword_1024190F0 != -1) {
                  dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                }
                double v117 = qword_1024190F8;
                if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)long long buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorRunningUserResponseAutomaticActionRequested", buf, 2u);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1024190F0 != -1) {
                    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                  }
                  *(_WORD *)v164 = 0;
                  double v163 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v163);
                  if (v163 != (char *)buf) {
                    free(v163);
                  }
                }
                uint64_t v118 = sub_100C3AE20();
                sub_100A449A4(v118);
              }
              else if (v86 == 24)
              {
                if (qword_1024190F0 != -1) {
                  dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                }
                double v97 = qword_1024190F8;
                if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)long long buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumHikingUserResponseAutomaticActionRequested", buf, 2u);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1024190F0 != -1) {
                    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                  }
                  *(_WORD *)v164 = 0;
                  int v153 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v153);
                  if (v153 != (char *)buf) {
                    free(v153);
                  }
                }
                uint64_t v98 = sub_100C3AE20();
                sub_100A44A38(v98);
              }
            }
            else if (v86 == 4)
            {
              if (qword_1024190F0 != -1) {
                dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
              }
              double v107 = qword_1024190F8;
              if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorCyclingUserResponseAutomaticActionRequested", buf, 2u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024190F0 != -1) {
                  dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                }
                *(_WORD *)v164 = 0;
                uint64_t v158 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v158);
                if (v158 != (char *)buf) {
                  free(v158);
                }
              }
              uint64_t v108 = sub_100C3AE20();
              sub_100A4487C(v108);
            }
            else if (v86 == 15)
            {
              if (qword_1024190F0 != -1) {
                dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
              }
              v87 = qword_1024190F8;
              if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorWalkingUserResponseAutomaticActionRequested", buf, 2u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024190F0 != -1) {
                  dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                }
                *(_WORD *)v164 = 0;
                __int16 v148 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v148);
                if (v148 != (char *)buf) {
                  free(v148);
                }
              }
              uint64_t v88 = sub_100C3AE20();
              sub_100A44910(v88);
            }
            break;
          default:
            break;
        }
        double Current = CFAbsoluteTimeGetCurrent();
        double v120 = *(double *)(a1 + 6704);
        double v121 = Current - v120;
        if (Current - v120 > 0.0)
        {
          if (qword_1024190F0 != -1) {
            dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
          }
          __int16 v122 = qword_1024190F8;
          if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = 68289283;
            int v166 = 0;
            __int16 v167 = 2082;
            __int16 v168 = "";
            __int16 v169 = 2049;
            __int16 v170 = *(const char **)&v121;
            _os_log_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFitnessTrackingAllDayAWD: Stacking new event duration\", \"duration\":\"%{private}f\"}", buf, 0x1Cu);
          }
          double v123 = (void *)sub_100C3AE20();
          float v124 = v121;
          sub_100C3B604(v123, v124);
          double v120 = *(double *)(a1 + 6704);
        }
        sub_100A44ACC(a1, v120);
        goto LABEL_320;
      }
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      float v21 = qword_1024190F8;
      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumRecoveryEvents", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        *(_WORD *)v164 = 0;
        __int16 v126 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v126);
        if (v126 != (char *)buf) {
          free(v126);
        }
      }
      uint64_t v22 = sub_100C3AE20();
      sub_100A436E4(v22);
      uint64_t v23 = *(void *)(a1 + 10656);
      if (v23 > 16)
      {
        if (v23 == 17)
        {
          if (qword_1024190F0 != -1) {
            dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
          }
          uint64_t v51 = qword_1024190F8;
          if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorRunningWorkoutRecoveryEvents", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024190F0 != -1) {
              dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
            }
            *(_WORD *)v164 = 0;
            int v143 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v143);
            if (v143 != (char *)buf) {
              free(v143);
            }
          }
          uint64_t v52 = sub_100C3AE20();
          sub_100A43894(v52);
        }
        else if (v23 == 24)
        {
          if (qword_1024190F0 != -1) {
            dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
          }
          uint64_t v46 = qword_1024190F8;
          if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumHikingWorkoutRecoveryEvents", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024190F0 != -1) {
              dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
            }
            *(_WORD *)v164 = 0;
            int v141 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v141);
            if (v141 != (char *)buf) {
              free(v141);
            }
          }
          uint64_t v47 = sub_100C3AE20();
          sub_100A43928(v47);
        }
      }
      else if (v23 == 4)
      {
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        uint64_t v49 = qword_1024190F8;
        if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorCyclingWorkoutRecoveryEvents", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190F0 != -1) {
            dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
          }
          *(_WORD *)v164 = 0;
          __int16 v142 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v142);
          if (v142 != (char *)buf) {
            free(v142);
          }
        }
        uint64_t v50 = sub_100C3AE20();
        sub_100A4376C(v50);
      }
      else if (v23 == 15)
      {
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        float v24 = qword_1024190F8;
        if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorWalkingtRecoveryEvents", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190F0 != -1) {
            dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
          }
          *(_WORD *)v164 = 0;
          __int16 v140 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v140);
          if (v140 != (char *)buf) {
            free(v140);
          }
        }
        uint64_t v25 = sub_100C3AE20();
        sub_100A43800(v25);
      }
    }
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v53 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumFallAlerts", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      *(_WORD *)v164 = 0;
      double v125 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v125);
      if (v125 != (char *)buf) {
        free(v125);
      }
    }
    uint64_t v54 = sub_100C3AE20();
    sub_100A439BC(v54);
    uint64_t v55 = *(void *)(a1 + 10656);
    if (v55 > 16)
    {
      if (v55 == 17)
      {
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        int v62 = qword_1024190F8;
        if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorRunningFallAlerts", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190F0 != -1) {
            dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
          }
          *(_WORD *)v164 = 0;
          __int16 v138 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v138);
          if (v138 != (char *)buf) {
            free(v138);
          }
        }
        uint64_t v63 = sub_100C3AE20();
        sub_100A43B6C(v63);
      }
      else if (v55 == 24)
      {
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        uint64_t v58 = qword_1024190F8;
        if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumHikingFallAlerts", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190F0 != -1) {
            dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
          }
          *(_WORD *)v164 = 0;
          __int16 v136 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v136);
          if (v136 != (char *)buf) {
            free(v136);
          }
        }
        uint64_t v59 = sub_100C3AE20();
        sub_100A43C00(v59);
      }
    }
    else if (v55 == 4)
    {
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      int v60 = qword_1024190F8;
      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorCyclingFallAlerts", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        *(_WORD *)v164 = 0;
        int v137 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v137);
        if (v137 != (char *)buf) {
          free(v137);
        }
      }
      uint64_t v61 = sub_100C3AE20();
      sub_100A43A44(v61);
    }
    else if (v55 == 15)
    {
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      uint64_t v56 = qword_1024190F8;
      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumOutdoorWalkingFallAlerts", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        *(_WORD *)v164 = 0;
        int v135 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onClientFallEventSubscriptionRequest(const CLFall_Types::ImpactEvent &)", "%s\n", v135);
        if (v135 != (char *)buf) {
          free(v135);
        }
      }
      uint64_t v57 = sub_100C3AE20();
      sub_100A43AD8(v57);
    }
    goto LABEL_142;
  }
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  char v26 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289026;
    int v166 = 0;
    __int16 v167 = 2082;
    __int16 v168 = "";
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Notifier - Received anomaly detection subscription request with no event\"}", buf, 0x12u);
  }
  v164[0] = 0;
  sub_10006ACBC(buf, "AnomalyMotionInternalTest", v164, 0);
  if (!buf[1])
  {
    uint64_t v27 = a1 + 6712;
    uint64_t v28 = a1;
LABEL_326:
    sub_100A42800(v28, v27, 1);
  }
}

void sub_100A395F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A39CF0()
{
  unsigned __int8 v1 = 0;
  sub_10006ACBC(v2, "FallStatsSensorRecordingEnabled", &v1, 0);
  return v2[1];
}

uint64_t sub_100A39D2C()
{
  BOOL v5 = 0;
  LOBYTE(v2) = 0;
  sub_10006ACBC(v4, "AnomalyDetectorEnabledKey", (unsigned __int8 *)&v2, 0);
  sub_1000C7F88(&v2);
  char v0 = sub_1000D2988(v2, "AnomalyDetectorEnabledKey", &v5);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  if (v0) {
    return v5;
  }
  sub_100103240();
  if ((sub_1000A16E8() & 0x8000000000) == 0) {
    return 0;
  }
  uint64_t result = sub_100A3529C();
  if (result) {
    return sub_100A35328() ^ 1;
  }
  return result;
}

void sub_100A39DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A39DF0()
{
  unsigned __int8 v1 = 0;
  sub_10006ACBC(v2, "AnomalyDetectorDuringWorkoutEnabledKey", &v1, 0);
  if (v2[0]) {
    return v2[1] != 0;
  }
  sub_100103240();
  if ((sub_1000A16E8() & 0x8000000000) == 0) {
    return 0;
  }
  uint64_t result = sub_100A3529C();
  if (result) {
    return sub_100A35328();
  }
  return result;
}

void sub_100A3A168(uint64_t a1, uint64_t a2, int a3)
{
  if (!*(unsigned char *)(a2 + 156))
  {
    *(unsigned char *)(a2 + 156) = a3;
    *(unsigned char *)(a2 + 157) = 2;
    sub_100A3A204(a1, a2);
    if (sub_100A3A90C(a1))
    {
      if ((a3 - 6) <= 6)
      {
        unint64_t v6 = qword_101D6FDB8[(char)(a3 - 6)];
        unint64_t v7 = *(void *)(a2 + 19);
        unsigned int v8 = *(unsigned __int8 *)(a2 + 149);
        sub_100A3A968(a1, v7, v8, v6);
      }
    }
  }
}

void sub_100A3A204(uint64_t a1, uint64_t a2)
{
  float v4 = sub_100A51C78((float *)(a2 + 27));
  if (*(unsigned char *)(a2 + 16))
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    BOOL v5 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 68289026;
      LODWORD(v21[0]) = 0;
      WORD2(v21[0]) = 2082;
      *(void *)((char *)v21 + 6) = "";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Received Near Fall event\"}", buf, 0x12u);
    }
  }
  if ((*(unsigned char *)(a2 + 16) | ((LODWORD(v4) & 0x7FFFFFFFu) > 0x7F7FFFFF)) | ((*(unsigned __int8 *)(a2 + 18) | (v4 >= *(float *)(a1 + 7480))) != 0))
  {
    sub_100A60788((uint64_t)v17, a2);
    memset(&__p, 0, sizeof(__p));
    sub_100B56270((uint64_t)v17, &__p);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    unint64_t v6 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 136315138;
      v21[0] = p_p;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      float v11 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        float v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      int v18 = 136315138;
      int v19 = v11;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::logFallState(const CLFall_Types::ImpactEvent &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    if ((sub_100A41728(a1) & 1) != 0 || (sub_100A41808() & 1) != 0 || sub_100A41874())
    {
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      unsigned int v8 = qword_1024190F8;
      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Logging impact update to logger.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        LOWORD(v18) = 0;
        int v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::logFallState(const CLFall_Types::ImpactEvent &)", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
      [*(id *)(a1 + 136) logImpactEventState:a2];
    }
    LOBYTE(v18) = 0;
    sub_10006ACBC(buf, "FallStatsEnabled", (unsigned __int8 *)&v18, 0);
    if (buf[1])
    {
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      int v9 = qword_1024190F8;
      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Logging impact update for user studies.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        LOWORD(v18) = 0;
        uint64_t v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::logFallState(const CLFall_Types::ImpactEvent &)", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
      [*(id *)(a1 + 176) logData:[+[CLFallLoggerManager encodeBinaryLog:](CLFallLoggerManager, "encodeBinaryLog:", v17)];
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    int v10 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Impact does not meet logging threshold requirement, will disregard state.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      v17[0] = 0;
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::logFallState(const CLFall_Types::ImpactEvent &)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
}

void sub_100A3A8DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A3A90C(uint64_t a1)
{
  if (sub_100A416B4()) {
    return 1;
  }
  if (sub_100A41940(a1)) {
    return 0;
  }

  return sub_100A418E0();
}

void sub_100A3A968(uint64_t a1, unint64_t a2, unsigned int a3, unint64_t a4)
{
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  unsigned int v8 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134349568;
    v225 = (const char *)a2;
    __int16 v226 = 1026;
    unsigned int v227 = a3;
    __int16 v228 = 2050;
    unint64_t v229 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received reason for canceling (impact:%{public}llu, operatingMode:%{public}u, reason:0x%{public}llx)", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    int v139 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v139);
    if (v139 != (char *)buf) {
      free(v139);
    }
  }
  if (a4)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    int v9 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "ImpactStart";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      __int16 v140 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v140);
      if (v140 != (char *)buf) {
        free(v140);
      }
    }
  }
  if ((a4 & 2) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    int v10 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "ImpactReplacedBecauseOfNewImpact";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      int v141 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v141);
      if (v141 != (char *)buf) {
        free(v141);
      }
    }
  }
  if ((a4 & 0x20) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    float v11 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "ImpactCanceledBecauseOfMaxAccelNorm";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      __int16 v142 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v142);
      if (v142 != (char *)buf) {
        free(v142);
      }
    }
  }
  if ((a4 & 0x40) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v12 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "ImpactCanceledBecauseOfOtherHardThresholds";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      int v143 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v143);
      if (v143 != (char *)buf) {
        free(v143);
      }
    }
  }
  if ((a4 & 0x80) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    int v13 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "ImpactCanceledBecauseOfMultiPeaks";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      __int16 v144 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v144);
      if (v144 != (char *)buf) {
        free(v144);
      }
    }
  }
  if ((a4 & 0x100) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v14 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "ImpactCanceledBecauseOfNaiveBayes";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      int v145 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v145);
      if (v145 != (char *)buf) {
        free(v145);
      }
    }
  }
  if ((a4 & 0x200) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v15 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "ImpactCanceledBecauseOfCyclingImpactThresholds";
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      __int16 v146 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v146);
      if (v146 != (char *)buf) {
        free(v146);
      }
    }
  }
  if ((a4 & 0x400) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    int v16 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "ImpactCanceledBecauseOfExistingAlert";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      int v147 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v147);
      if (v147 != (char *)buf) {
        free(v147);
      }
    }
  }
  if ((a4 & 0x800) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    int v17 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "ImpactCanceledBecauseOfDisabledStateMachine";
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      __int16 v148 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v148);
      if (v148 != (char *)buf) {
        free(v148);
      }
    }
  }
  if ((a4 & 0x100000) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    int v18 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "AlertCanceledBecauseOfHighFrequencyFFT";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      int v149 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v149);
      if (v149 != (char *)buf) {
        free(v149);
      }
    }
  }
  if ((a4 & 0x200000) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    int v19 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "AlertCanceledBecauseOfLowFrequencyFFT";
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      __int16 v150 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v150);
      if (v150 != (char *)buf) {
        free(v150);
      }
    }
  }
  if ((a4 & 0x400000) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    int v20 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "AlertCanceledBecauseOfDecimatedLowFrequencyFFT";
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      int v151 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v151);
      if (v151 != (char *)buf) {
        free(v151);
      }
    }
  }
  if ((a4 & 0x800000) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    float v21 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "AlertCanceledBecauseOfFFT";
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      __int16 v152 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v152);
      if (v152 != (char *)buf) {
        free(v152);
      }
    }
  }
  if ((a4 & 0x1000000) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v22 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "AlertCanceledBecauseOfPeaksIQR";
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      int v153 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v153);
      if (v153 != (char *)buf) {
        free(v153);
      }
    }
  }
  if ((a4 & 0x2000000) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v23 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "AlertCanceledBecauseOfOffBody";
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      __int16 v154 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v154);
      if (v154 != (char *)buf) {
        free(v154);
      }
    }
  }
  if ((a4 & 0x4000000) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    float v24 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "AlertCanceledBecauseOfRepetitiveMotion";
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      int v155 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v155);
      if (v155 != (char *)buf) {
        free(v155);
      }
    }
  }
  if ((a4 & 0x8000000) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v25 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "AlertCanceledBecauseOfAbsenceOfQuiessence";
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      __int16 v156 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v156);
      if (v156 != (char *)buf) {
        free(v156);
      }
    }
  }
  if ((a4 & 0x10000000) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    char v26 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "AlertCanceledBecauseOfOffWristPre";
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      double v157 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v157);
      if (v157 != (char *)buf) {
        free(v157);
      }
    }
  }
  if ((a4 & 0x20000000) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v27 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "AlertCanceledBecauseOfOffWristPost";
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      uint64_t v158 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v158);
      if (v158 != (char *)buf) {
        free(v158);
      }
    }
  }
  if ((a4 & 0x40000000) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v28 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "AlertCanceledBecauseOfFeatureDisabled";
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      uint64_t v159 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v159);
      if (v159 != (char *)buf) {
        free(v159);
      }
    }
  }
  if ((a4 & 0x80000000) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    double v29 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "AlertCanceledBecauseOfOnCharger";
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      char v160 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v160);
      if (v160 != (char *)buf) {
        free(v160);
      }
    }
  }
  if ((a4 & 0x100000000) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v30 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "AlertCanceledBecauseOfAlreadyGatedBefore";
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      v161 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v161);
      if (v161 != (char *)buf) {
        free(v161);
      }
    }
  }
  if ((a4 & 0x200000000) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    int v31 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "AlertCanceledBecauseOfSimilarPeaks";
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      __int16 v162 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v162);
      if (v162 != (char *)buf) {
        free(v162);
      }
    }
  }
  if ((a4 & 0x400000000) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v32 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "AlertCanceledBecauseOfLockedNoMotionBeforeImpact";
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      double v163 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v163);
      if (v163 != (char *)buf) {
        free(v163);
      }
    }
  }
  if ((a4 & 0x800000000) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    int v33 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "AlertCanceledBecauseOfReferee";
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      v164 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v164);
      if (v164 != (char *)buf) {
        free(v164);
      }
    }
  }
  if ((a4 & 0x1000000000) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    int v34 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "AlertCanceledBecauseStand";
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      v165 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v165);
      if (v165 != (char *)buf) {
        free(v165);
      }
    }
  }
  if ((a4 & 0x2000000000) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    int v35 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "AlertCanceledBecauseActive";
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      int v166 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v166);
      if (v166 != (char *)buf) {
        free(v166);
      }
    }
  }
  if ((a4 & 0x4000000000) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    int v36 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "AlertCanceledBecauseSteps";
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      __int16 v167 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v167);
      if (v167 != (char *)buf) {
        free(v167);
      }
    }
  }
  if ((a4 & 0x8000000000) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v37 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "AlertCanceledBecauseOfDistanceTraveledPostImpact";
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      __int16 v168 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v168);
      if (v168 != (char *)buf) {
        free(v168);
      }
    }
  }
  if ((a4 & 0x10000000000) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    BOOL v38 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "AlertCanceledBecauseOfDistanceCyclingPostImpact";
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      __int16 v169 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v169);
      if (v169 != (char *)buf) {
        free(v169);
      }
    }
  }
  if ((a4 & 0x800000000000) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v39 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "RecoveryCanceledBecauseOfReferee";
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      __int16 v170 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v170);
      if (v170 != (char *)buf) {
        free(v170);
      }
    }
  }
  if ((a4 & 0x4000000000000) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    double v40 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "SOSCanceledBecauseUserResponse";
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      __int16 v171 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v171);
      if (v171 != (char *)buf) {
        free(v171);
      }
    }
  }
  if ((a4 & 0x8000000000000) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v41 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "SOSCanceledBecauseOffWrist";
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      uint64_t v172 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v172);
      if (v172 != (char *)buf) {
        free(v172);
      }
    }
  }
  if ((a4 & 0x10000000000000) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    double v42 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "SOSCanceledBecauseStand";
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      __int16 v173 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v173);
      if (v173 != (char *)buf) {
        free(v173);
      }
    }
  }
  if ((a4 & 0x20000000000000) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v43 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "SOSCanceledBecauseActive";
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      int v174 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v174);
      if (v174 != (char *)buf) {
        free(v174);
      }
    }
  }
  if ((a4 & 0x40000000000000) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    double v44 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "SOSCanceledBecauseSteps";
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      __int16 v175 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v175);
      if (v175 != (char *)buf) {
        free(v175);
      }
    }
  }
  if ((a4 & 0x80000000000000) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v45 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "SOSCanceledBecauseAbsenceOfLongLie";
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      uint64_t v176 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v176);
      if (v176 != (char *)buf) {
        free(v176);
      }
    }
  }
  if ((a4 & 0x100000000000000) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v46 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "SOSCanceledBecauseOfReferee";
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      __int16 v177 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v177);
      if (v177 != (char *)buf) {
        free(v177);
      }
    }
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v47 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "SOSCallConsidered";
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      __int16 v178 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v178);
      if (v178 != (char *)buf) {
        free(v178);
      }
    }
  }
  if ((a4 & 0x4000000000000000) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v48 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "SOSCallScheduled";
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      double v179 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v179);
      if (v179 != (char *)buf) {
        free(v179);
      }
    }
  }
  if ((a4 & 0x8000000000000000) != 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v49 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136315138;
      v225 = "SOSCallPlaced";
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "         reason: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      double v181 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v181);
      if (v181 != (char *)buf) {
        free(v181);
      }
    }
  }
  if (a3 < 4 || a3 == 255)
  {
    sub_10120C534(*(void *)(a1 + 128), a2, a4);
    if (!sub_100A3A90C(a1)) {
      return;
    }
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v50 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "Logging reason for canceling in AWD", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      __int16 v180 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v180);
      if (v180 != (char *)buf) {
        free(v180);
      }
    }
    uint64_t v51 = (a4 >> 1) & 1;
    if ((a4 & 2) != 0)
    {
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      uint64_t v53 = qword_1024190F8;
      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumImpactReplacedBecauseOfNewImpact", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        __int16 v186 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v186);
        if (v186 != (char *)buf) {
          free(v186);
        }
      }
      uint64_t v54 = sub_100C3AE20();
      sub_100A54EC4(v54);
      if ((a4 & 0x20) == 0)
      {
LABEL_262:
        if ((a4 & 0x40) == 0) {
          goto LABEL_263;
        }
        goto LABEL_284;
      }
    }
    else if ((a4 & 0x20) == 0)
    {
      goto LABEL_262;
    }
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v55 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumImpactCanceledBecauseOfMaxAccelNorm", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      double v187 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v187);
      if (v187 != (char *)buf) {
        free(v187);
      }
    }
    uint64_t v56 = sub_100C3AE20();
    sub_100A54F4C(v56);
    LODWORD(v51) = 1;
    if ((a4 & 0x40) == 0)
    {
LABEL_263:
      if ((a4 & 0x80) == 0) {
        goto LABEL_264;
      }
      goto LABEL_290;
    }
LABEL_284:
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v57 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumImpactCanceledBecauseOfOtherHardThresholds", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      __int16 v188 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v188);
      if (v188 != (char *)buf) {
        free(v188);
      }
    }
    uint64_t v58 = sub_100C3AE20();
    sub_100A54FDC(v58);
    LODWORD(v51) = 1;
    if ((a4 & 0x80) == 0)
    {
LABEL_264:
      if ((a4 & 0x100) == 0) {
        goto LABEL_265;
      }
      goto LABEL_296;
    }
LABEL_290:
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v59 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumImpactCanceledBecauseOfMultiPeaks", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      int v189 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v189);
      if (v189 != (char *)buf) {
        free(v189);
      }
    }
    uint64_t v60 = sub_100C3AE20();
    sub_100A5506C(v60);
    LODWORD(v51) = 1;
    if ((a4 & 0x100) == 0)
    {
LABEL_265:
      if ((a4 & 0x400) == 0) {
        goto LABEL_266;
      }
      goto LABEL_302;
    }
LABEL_296:
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v61 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumImpactCanceledBecauseOfNaiveBayes", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      __int16 v190 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v190);
      if (v190 != (char *)buf) {
        free(v190);
      }
    }
    uint64_t v62 = sub_100C3AE20();
    sub_100A550FC(v62);
    LODWORD(v51) = 1;
    if ((a4 & 0x400) == 0)
    {
LABEL_266:
      if ((a4 & 0x200) == 0) {
        goto LABEL_267;
      }
      goto LABEL_308;
    }
LABEL_302:
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v63 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumImpactCanceledBecauseOfExistingAlert", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      int v191 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v191);
      if (v191 != (char *)buf) {
        free(v191);
      }
    }
    uint64_t v64 = sub_100C3AE20();
    sub_100A55184(v64);
    LODWORD(v51) = 1;
    if ((a4 & 0x200) == 0)
    {
LABEL_267:
      if ((a4 & 0x800) == 0)
      {
        if (!v51)
        {
          if ((a4 & 0x100000) == 0) {
            goto LABEL_270;
          }
          goto LABEL_326;
        }
LABEL_320:
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        uint64_t v69 = qword_1024190F8;
        if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumImpactCanceledAggregate", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190F0 != -1) {
            dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
          }
          __int16 v182 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v182);
          if (v182 != (char *)buf) {
            free(v182);
          }
        }
        uint64_t v70 = sub_100C3AE20();
        sub_100A5532C(v70);
        if ((a4 & 0x100000) == 0)
        {
LABEL_270:
          int v52 = 0;
          if ((a4 & 0x200000) == 0) {
            goto LABEL_338;
          }
          goto LABEL_332;
        }
LABEL_326:
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        uint64_t v71 = qword_1024190F8;
        if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfHighFrequencyFFT", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190F0 != -1) {
            dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
          }
          __int16 v194 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v194);
          if (v194 != (char *)buf) {
            free(v194);
          }
        }
        uint64_t v72 = sub_100C3AE20();
        sub_100A553BC(v72);
        int v52 = 1;
        if ((a4 & 0x200000) == 0)
        {
LABEL_338:
          if ((a4 & 0x400000) != 0)
          {
            if (qword_1024190F0 != -1) {
              dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
            }
            uint64_t v76 = qword_1024190F8;
            if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfDecimatedLowFrequencyFFT", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024190F0 != -1) {
                dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
              }
              __int16 v196 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v196);
              if (v196 != (char *)buf) {
                free(v196);
              }
            }
            uint64_t v77 = sub_100C3AE20();
            sub_100A554DC(v77);
            int v52 = 1;
            if ((a4 & 0x800000) == 0)
            {
LABEL_340:
              int v75 = 0;
              if ((a4 & 0x1000000) == 0) {
                goto LABEL_360;
              }
              goto LABEL_354;
            }
          }
          else if ((a4 & 0x800000) == 0)
          {
            goto LABEL_340;
          }
          if (qword_1024190F0 != -1) {
            dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
          }
          uint64_t v78 = qword_1024190F8;
          if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfFFT", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024190F0 != -1) {
              dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
            }
            int v197 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v197);
            if (v197 != (char *)buf) {
              free(v197);
            }
          }
          uint64_t v79 = sub_100C3AE20();
          sub_100A5556C(v79);
          int v75 = 1;
          if ((a4 & 0x1000000) == 0)
          {
LABEL_360:
            if ((a4 & 0x2000000) != 0)
            {
              if (qword_1024190F0 != -1) {
                dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
              }
              v82 = qword_1024190F8;
              if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfOffBody", buf, 2u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024190F0 != -1) {
                  dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                }
                int v199 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v199);
                if (v199 != (char *)buf) {
                  free(v199);
                }
              }
              uint64_t v83 = sub_100C3AE20();
              sub_100A55684(v83);
              int v75 = 1;
              if ((a4 & 0x4000000) == 0)
              {
LABEL_362:
                if ((a4 & 0x8000000) == 0) {
                  goto LABEL_363;
                }
                goto LABEL_378;
              }
            }
            else if ((a4 & 0x4000000) == 0)
            {
              goto LABEL_362;
            }
            if (qword_1024190F0 != -1) {
              dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
            }
            float v84 = qword_1024190F8;
            if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfRepetitiveMotion", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024190F0 != -1) {
                dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
              }
              __int16 v200 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v200);
              if (v200 != (char *)buf) {
                free(v200);
              }
            }
            uint64_t v85 = sub_100C3AE20();
            sub_100A55714(v85);
            int v75 = 1;
            if ((a4 & 0x8000000) == 0)
            {
LABEL_363:
              if ((a4 & 0x10000000) == 0) {
                goto LABEL_364;
              }
              goto LABEL_384;
            }
LABEL_378:
            if (qword_1024190F0 != -1) {
              dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
            }
            uint64_t v86 = qword_1024190F8;
            if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfAbsenceOfQuiessence", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024190F0 != -1) {
                dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
              }
              int v201 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v201);
              if (v201 != (char *)buf) {
                free(v201);
              }
            }
            uint64_t v87 = sub_100C3AE20();
            sub_100A557A4(v87);
            int v75 = 1;
            if ((a4 & 0x10000000) == 0)
            {
LABEL_364:
              if ((a4 & 0x20000000) == 0) {
                goto LABEL_396;
              }
              goto LABEL_390;
            }
LABEL_384:
            if (qword_1024190F0 != -1) {
              dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
            }
            uint64_t v88 = qword_1024190F8;
            if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfOffWristPre", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024190F0 != -1) {
                dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
              }
              __int16 v202 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v202);
              if (v202 != (char *)buf) {
                free(v202);
              }
            }
            uint64_t v89 = sub_100C3AE20();
            sub_100A5582C(v89);
            int v75 = 1;
            if ((a4 & 0x20000000) == 0)
            {
LABEL_396:
              if (v75 | v52)
              {
                if (qword_1024190F0 != -1) {
                  dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                }
                uint64_t v92 = qword_1024190F8;
                if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)long long buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledAggregate", buf, 2u);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1024190F0 != -1) {
                    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                  }
                  int v185 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v185);
                  if (v185 != (char *)buf) {
                    free(v185);
                  }
                }
                uint64_t v93 = sub_100C3AE20();
                sub_100A5594C(v93);
              }
              uint64_t v94 = (a4 >> 30) & 1;
              if ((a4 & 0x40000000) != 0)
              {
                if (qword_1024190F0 != -1) {
                  dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                }
                double v95 = qword_1024190F8;
                if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)long long buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfFeatureDisabled", buf, 2u);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1024190F0 != -1) {
                    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                  }
                  __int16 v204 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v204);
                  if (v204 != (char *)buf) {
                    free(v204);
                  }
                }
                uint64_t v96 = sub_100C3AE20();
                sub_100A559DC(v96);
                if ((a4 & 0x80000000) == 0)
                {
LABEL_405:
                  if ((a4 & 0x100000000) == 0) {
                    goto LABEL_406;
                  }
                  goto LABEL_429;
                }
              }
              else if ((a4 & 0x80000000) == 0)
              {
                goto LABEL_405;
              }
              if (qword_1024190F0 != -1) {
                dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
              }
              double v97 = qword_1024190F8;
              if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfOnCharger", buf, 2u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024190F0 != -1) {
                  dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                }
                int v205 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v205);
                if (v205 != (char *)buf) {
                  free(v205);
                }
              }
              uint64_t v98 = sub_100C3AE20();
              sub_100A55A64(v98);
              LODWORD(v94) = 1;
              if ((a4 & 0x100000000) == 0)
              {
LABEL_406:
                if ((a4 & 0x200000000) == 0) {
                  goto LABEL_407;
                }
                goto LABEL_435;
              }
LABEL_429:
              if (qword_1024190F0 != -1) {
                dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
              }
              double v99 = qword_1024190F8;
              if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfAlreadyGatedBefore", buf, 2u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024190F0 != -1) {
                  dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                }
                __int16 v206 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v206);
                if (v206 != (char *)buf) {
                  free(v206);
                }
              }
              uint64_t v100 = sub_100C3AE20();
              sub_100A55AF4(v100);
              LODWORD(v94) = 1;
              if ((a4 & 0x200000000) == 0)
              {
LABEL_407:
                if ((a4 & 0x400000000) == 0) {
                  goto LABEL_408;
                }
                goto LABEL_441;
              }
LABEL_435:
              if (qword_1024190F0 != -1) {
                dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
              }
              double v101 = qword_1024190F8;
              if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfSimilarPeaks", buf, 2u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024190F0 != -1) {
                  dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                }
                int v207 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v207);
                if (v207 != (char *)buf) {
                  free(v207);
                }
              }
              uint64_t v102 = sub_100C3AE20();
              sub_100A55B84(v102);
              LODWORD(v94) = 1;
              if ((a4 & 0x400000000) == 0)
              {
LABEL_408:
                if ((a4 & 0x800000000) == 0) {
                  goto LABEL_409;
                }
                goto LABEL_447;
              }
LABEL_441:
              if (qword_1024190F0 != -1) {
                dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
              }
              double v103 = qword_1024190F8;
              if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfLockedNoMotionBeforeImpact", buf, 2u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024190F0 != -1) {
                  dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                }
                __int16 v208 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v208);
                if (v208 != (char *)buf) {
                  free(v208);
                }
              }
              uint64_t v104 = sub_100C3AE20();
              sub_100A55C14(v104);
              LODWORD(v94) = 1;
              if ((a4 & 0x800000000) == 0)
              {
LABEL_409:
                if ((a4 & 0x1000000000) == 0) {
                  goto LABEL_410;
                }
                goto LABEL_453;
              }
LABEL_447:
              if (qword_1024190F0 != -1) {
                dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
              }
              double v105 = qword_1024190F8;
              if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfReferee", buf, 2u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024190F0 != -1) {
                  dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                }
                int v209 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v209);
                if (v209 != (char *)buf) {
                  free(v209);
                }
              }
              uint64_t v106 = sub_100C3AE20();
              sub_100A55C9C(v106);
              LODWORD(v94) = 1;
              if ((a4 & 0x1000000000) == 0)
              {
LABEL_410:
                if ((a4 & 0x2000000000) == 0) {
                  goto LABEL_411;
                }
                goto LABEL_459;
              }
LABEL_453:
              if (qword_1024190F0 != -1) {
                dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
              }
              double v107 = qword_1024190F8;
              if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseStand", buf, 2u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024190F0 != -1) {
                  dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                }
                __int16 v210 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v210);
                if (v210 != (char *)buf) {
                  free(v210);
                }
              }
              uint64_t v108 = sub_100C3AE20();
              sub_100A55D2C(v108);
              LODWORD(v94) = 1;
              if ((a4 & 0x2000000000) == 0)
              {
LABEL_411:
                if ((a4 & 0x4000000000) == 0) {
                  goto LABEL_412;
                }
                goto LABEL_465;
              }
LABEL_459:
              if (qword_1024190F0 != -1) {
                dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
              }
              double v109 = qword_1024190F8;
              if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseActive", buf, 2u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024190F0 != -1) {
                  dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                }
                int v211 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v211);
                if (v211 != (char *)buf) {
                  free(v211);
                }
              }
              uint64_t v110 = sub_100C3AE20();
              sub_100A55DBC(v110);
              LODWORD(v94) = 1;
              if ((a4 & 0x4000000000) == 0)
              {
LABEL_412:
                if ((a4 & 0x8000000000) == 0) {
                  goto LABEL_413;
                }
                goto LABEL_471;
              }
LABEL_465:
              if (qword_1024190F0 != -1) {
                dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
              }
              double v111 = qword_1024190F8;
              if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseSteps", buf, 2u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024190F0 != -1) {
                  dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                }
                __int16 v212 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v212);
                if (v212 != (char *)buf) {
                  free(v212);
                }
              }
              uint64_t v112 = sub_100C3AE20();
              sub_100A55E4C(v112);
              LODWORD(v94) = 1;
              if ((a4 & 0x8000000000) == 0)
              {
LABEL_413:
                if ((a4 & 0x10000000000) == 0)
                {
                  if (!v94)
                  {
                    if ((a4 & 0x800000000000) == 0) {
                      goto LABEL_500;
                    }
                    goto LABEL_489;
                  }
LABEL_483:
                  if (qword_1024190F0 != -1) {
                    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                  }
                  double v117 = qword_1024190F8;
                  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
                  {
                    *(_WORD *)long long buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledOtherAggregate", buf, 2u);
                  }
                  if (sub_10013D1A0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1024190F0 != -1) {
                      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                    }
                    int v183 = (char *)_os_log_send_and_compose_impl();
                    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v183);
                    if (v183 != (char *)buf) {
                      free(v183);
                    }
                  }
                  uint64_t v118 = sub_100C3AE20();
                  sub_100A55FF4(v118);
                  if ((a4 & 0x800000000000) == 0)
                  {
LABEL_500:
                    uint64_t v123 = (a4 >> 50) & 1;
                    if ((a4 & 0x4000000000000) != 0)
                    {
                      if (qword_1024190F0 != -1) {
                        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                      }
                      float v124 = qword_1024190F8;
                      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
                      {
                        *(_WORD *)long long buf = 0;
                        _os_log_impl((void *)&_mh_execute_header, v124, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumSOSCanceledBecauseUserResponse", buf, 2u);
                      }
                      if (sub_10013D1A0(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1024190F0 != -1) {
                          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                        }
                        int v217 = (char *)_os_log_send_and_compose_impl();
                        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v217);
                        if (v217 != (char *)buf) {
                          free(v217);
                        }
                      }
                      uint64_t v125 = sub_100C3AE20();
                      sub_100A5619C(v125);
                      if ((a4 & 0x8000000000000) == 0)
                      {
LABEL_502:
                        if ((a4 & 0x10000000000000) == 0) {
                          goto LABEL_503;
                        }
                        goto LABEL_520;
                      }
                    }
                    else if ((a4 & 0x8000000000000) == 0)
                    {
                      goto LABEL_502;
                    }
                    if (qword_1024190F0 != -1) {
                      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                    }
                    __int16 v126 = qword_1024190F8;
                    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
                    {
                      *(_WORD *)long long buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumSOSCanceledBecauseOffWrist", buf, 2u);
                    }
                    if (sub_10013D1A0(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1024190F0 != -1) {
                        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                      }
                      __int16 v218 = (char *)_os_log_send_and_compose_impl();
                      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v218);
                      if (v218 != (char *)buf) {
                        free(v218);
                      }
                    }
                    uint64_t v127 = sub_100C3AE20();
                    sub_100A5622C(v127);
                    LODWORD(v123) = 1;
                    if ((a4 & 0x10000000000000) == 0)
                    {
LABEL_503:
                      if ((a4 & 0x20000000000000) == 0) {
                        goto LABEL_504;
                      }
                      goto LABEL_526;
                    }
LABEL_520:
                    if (qword_1024190F0 != -1) {
                      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                    }
                    __int16 v128 = qword_1024190F8;
                    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
                    {
                      *(_WORD *)long long buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v128, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumSOSCanceledBecauseStand", buf, 2u);
                    }
                    if (sub_10013D1A0(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1024190F0 != -1) {
                        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                      }
                      uint64_t v219 = (char *)_os_log_send_and_compose_impl();
                      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v219);
                      if (v219 != (char *)buf) {
                        free(v219);
                      }
                    }
                    uint64_t v129 = sub_100C3AE20();
                    sub_100A562BC(v129);
                    LODWORD(v123) = 1;
                    if ((a4 & 0x20000000000000) == 0)
                    {
LABEL_504:
                      if ((a4 & 0x40000000000000) == 0) {
                        goto LABEL_505;
                      }
                      goto LABEL_532;
                    }
LABEL_526:
                    if (qword_1024190F0 != -1) {
                      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                    }
                    __int16 v130 = qword_1024190F8;
                    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
                    {
                      *(_WORD *)long long buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v130, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumSOSCanceledBecauseActive", buf, 2u);
                    }
                    if (sub_10013D1A0(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1024190F0 != -1) {
                        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                      }
                      v220 = (char *)_os_log_send_and_compose_impl();
                      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v220);
                      if (v220 != (char *)buf) {
                        free(v220);
                      }
                    }
                    uint64_t v131 = sub_100C3AE20();
                    sub_100A56344(v131);
                    LODWORD(v123) = 1;
                    if ((a4 & 0x40000000000000) == 0)
                    {
LABEL_505:
                      if ((a4 & 0x80000000000000) == 0)
                      {
                        if (!v123) {
                          return;
                        }
                        goto LABEL_544;
                      }
LABEL_538:
                      if (qword_1024190F0 != -1) {
                        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                      }
                      __int16 v134 = qword_1024190F8;
                      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
                      {
                        *(_WORD *)long long buf = 0;
                        _os_log_impl((void *)&_mh_execute_header, v134, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumSOSCanceledBecauseAbsenceOfLongLie", buf, 2u);
                      }
                      if (sub_10013D1A0(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1024190F0 != -1) {
                          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                        }
                        v222 = (char *)_os_log_send_and_compose_impl();
                        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v222);
                        if (v222 != (char *)buf) {
                          free(v222);
                        }
                      }
                      uint64_t v135 = sub_100C3AE20();
                      sub_100A56464(v135);
LABEL_544:
                      if (qword_1024190F0 != -1) {
                        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                      }
                      __int16 v136 = qword_1024190F8;
                      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
                      {
                        *(_WORD *)long long buf = 0;
                        _os_log_impl((void *)&_mh_execute_header, v136, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumSOSCanceledAggregate", buf, 2u);
                      }
                      if (sub_10013D1A0(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1024190F0 != -1) {
                          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                        }
                        __int16 v184 = (char *)_os_log_send_and_compose_impl();
                        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v184);
                        if (v184 != (char *)buf) {
                          free(v184);
                        }
                      }
                      uint64_t v137 = sub_100C3AE20();
                      sub_100A564F4(v137);
                      return;
                    }
LABEL_532:
                    if (qword_1024190F0 != -1) {
                      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                    }
                    __int16 v132 = qword_1024190F8;
                    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
                    {
                      *(_WORD *)long long buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v132, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumSOSCanceledBecauseSteps", buf, 2u);
                    }
                    if (sub_10013D1A0(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1024190F0 != -1) {
                        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                      }
                      v221 = (char *)_os_log_send_and_compose_impl();
                      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v221);
                      if (v221 != (char *)buf) {
                        free(v221);
                      }
                    }
                    uint64_t v133 = sub_100C3AE20();
                    sub_100A563D4(v133);
                    if ((a4 & 0x80000000000000) == 0) {
                      goto LABEL_544;
                    }
                    goto LABEL_538;
                  }
LABEL_489:
                  if (qword_1024190F0 != -1) {
                    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                  }
                  double v119 = qword_1024190F8;
                  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
                  {
                    *(_WORD *)long long buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumRecoveryCanceledBecauseOfReferee", buf, 2u);
                  }
                  if (sub_10013D1A0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1024190F0 != -1) {
                      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                    }
                    int v215 = (char *)_os_log_send_and_compose_impl();
                    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v215);
                    if (v215 != (char *)buf) {
                      free(v215);
                    }
                  }
                  uint64_t v120 = sub_100C3AE20();
                  sub_100A56084(v120);
                  if (qword_1024190F0 != -1) {
                    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                  }
                  double v121 = qword_1024190F8;
                  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
                  {
                    *(_WORD *)long long buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumRecoveryCanceledAggregate", buf, 2u);
                  }
                  if (sub_10013D1A0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1024190F0 != -1) {
                      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                    }
                    __int16 v216 = (char *)_os_log_send_and_compose_impl();
                    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v216);
                    if (v216 != (char *)buf) {
                      free(v216);
                    }
                  }
                  uint64_t v122 = sub_100C3AE20();
                  sub_100A5610C(v122);
                  goto LABEL_500;
                }
LABEL_477:
                if (qword_1024190F0 != -1) {
                  dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                }
                double v115 = qword_1024190F8;
                if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)long long buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfDistanceCyclingPostImpact", buf, 2u);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1024190F0 != -1) {
                    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                  }
                  __int16 v214 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v214);
                  if (v214 != (char *)buf) {
                    free(v214);
                  }
                }
                uint64_t v116 = sub_100C3AE20();
                sub_100A55F64(v116);
                goto LABEL_483;
              }
LABEL_471:
              if (qword_1024190F0 != -1) {
                dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
              }
              double v113 = qword_1024190F8;
              if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfDistanceTraveledPostImpact", buf, 2u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024190F0 != -1) {
                  dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
                }
                int v213 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v213);
                if (v213 != (char *)buf) {
                  free(v213);
                }
              }
              uint64_t v114 = sub_100C3AE20();
              sub_100A55ED4(v114);
              if ((a4 & 0x10000000000) == 0) {
                goto LABEL_483;
              }
              goto LABEL_477;
            }
LABEL_390:
            if (qword_1024190F0 != -1) {
              dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
            }
            uint64_t v90 = qword_1024190F8;
            if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfOffWristPost", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024190F0 != -1) {
                dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
              }
              int v203 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v203);
              if (v203 != (char *)buf) {
                free(v203);
              }
            }
            uint64_t v91 = sub_100C3AE20();
            sub_100A558BC(v91);
            int v75 = 1;
            goto LABEL_396;
          }
LABEL_354:
          if (qword_1024190F0 != -1) {
            dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
          }
          uint64_t v80 = qword_1024190F8;
          if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfPeaksIQR", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024190F0 != -1) {
              dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
            }
            __int16 v198 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v198);
            if (v198 != (char *)buf) {
              free(v198);
            }
          }
          uint64_t v81 = sub_100C3AE20();
          sub_100A555F4(v81);
          int v75 = 1;
          goto LABEL_360;
        }
LABEL_332:
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        uint64_t v73 = qword_1024190F8;
        if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumAlertCanceledBecauseOfLowFrequencyFFT", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190F0 != -1) {
            dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
          }
          int v195 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v195);
          if (v195 != (char *)buf) {
            free(v195);
          }
        }
        uint64_t v74 = sub_100C3AE20();
        sub_100A5544C(v74);
        int v52 = 1;
        goto LABEL_338;
      }
LABEL_314:
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      double v67 = qword_1024190F8;
      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumImpactCanceledBecauseOfDisabledStateMachine", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        int v193 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v193);
        if (v193 != (char *)buf) {
          free(v193);
        }
      }
      uint64_t v68 = sub_100C3AE20();
      sub_100A552A4(v68);
      goto LABEL_320;
    }
LABEL_308:
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v65 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Increasing NumImpactCanceledBecauseOfCyclingImpactThresholds", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      __int16 v192 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v192);
      if (v192 != (char *)buf) {
        free(v192);
      }
    }
    uint64_t v66 = sub_100C3AE20();
    sub_100A55214(v66);
    if ((a4 & 0x800) == 0) {
      goto LABEL_320;
    }
    goto LABEL_314;
  }
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  __int16 v138 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v138, OS_LOG_TYPE_DEFAULT, "Dropping reason for canceling because of untracked operating mode", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    v223 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::trackCancelationReason(const uint64_t, const uint32_t, const CMSPUFall_Types::FallCancelReason)", "%s\n", v223);
    if (v223 != (char *)buf) {
      free(v223);
    }
  }
}

uint64_t sub_100A416B4()
{
  uint64_t result = objc_opt_class();
  if (result)
  {
    if (objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isHealthDataSubmissionAllowed"))
    {
      return 1;
    }
    else
    {
      unsigned __int8 v1 = 0;
      sub_10006ACBC(v2, "FallForceIHAOptIn", &v1, 0);
      return v2[1] != 0;
    }
  }
  return result;
}

unint64_t sub_100A41728(uint64_t a1)
{
  unint64_t result = sub_100A357C4();
  if (result)
  {
    if (CFAbsoluteTimeGetCurrent() >= 654764400.0)
    {
      return 0;
    }
    else if ((sub_100A39D2C() & 1) != 0 {
           || sub_100A39DF0() && *(void *)(a1 + 10656)
    }
           || (unint64_t result = sub_100A417A8(), result))
    {
      unint64_t result = sub_100A416B4();
      if (result) {
        return *(double *)(a1 + 248) <= 240.0;
      }
    }
  }
  return result;
}

uint64_t sub_100A417A8()
{
  unsigned __int8 v1 = 0;
  sub_10006ACBC(v2, "FallStatsBackgroundSensorDataLoggingEnabled", &v1, 0);
  if (v2[1]) {
    return 1;
  }
  sub_100103240();
  if ((sub_1000A16E8() & 0x20000000000) != 0) {
    return sub_100A416B4();
  }
  else {
    return 0;
  }
}

uint64_t sub_100A41808()
{
  sub_100103240();
  uint64_t result = sub_10073E30C();
  if (result)
  {
    unsigned __int8 v1 = 1;
    sub_10006ACBC(v2, "FallStatsTapToRadarAllowedFall", &v1, 0);
    if (v2[1])
    {
      if (sub_100A3529C()) {
        return 1;
      }
      else {
        return sub_100A416B4();
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100A41874()
{
  sub_100103240();
  uint64_t result = sub_10073E30C();
  if (result)
  {
    unsigned __int8 v1 = 1;
    sub_10006ACBC(v2, "FallStatsTapToRadarAllowedNearFall", &v1, 0);
    if (v2[1])
    {
      if (sub_100A3529C()) {
        return 1;
      }
      else {
        return sub_100A416B4();
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100A418E0()
{
  unsigned __int8 v1 = 0;
  sub_10006ACBC(v2, "FallStatsBackgroundAWDLoggingEnabled", &v1, 0);
  if (v2[1]) {
    return 1;
  }
  sub_100103240();
  if ((sub_1000A16E8() & 0x10000000000) != 0) {
    return sub_100A416B4();
  }
  else {
    return 0;
  }
}

BOOL sub_100A41940(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 444) && ((sub_100A39D2C() & 1) != 0 || sub_100A39DF0() && *(void *)(a1 + 10656))) {
    return 1;
  }
  unsigned __int8 v3 = 0;
  sub_10006ACBC(v4, "FallStatsEnabled", &v3, 0);
  return v4[1] != 0;
}

unint64_t sub_100A419B8()
{
  unint64_t result = sub_100A357C4();
  if (result)
  {
    unint64_t result = sub_100A416B4();
    if (result)
    {
      if (sub_100A39D2C()) {
        return 0;
      }
      else {
        return sub_100A39DF0() ^ 1;
      }
    }
  }
  return result;
}

uint64_t sub_100A419F4(uint64_t a1)
{
  if (sub_100A3529C()) {
    uint64_t v2 = sub_100A35328();
  }
  else {
    uint64_t v2 = 1;
  }
  if (!sub_100A41940(a1) && (sub_100A41940(a1) || !sub_100A418E0())) {
    return 0;
  }
  return v2;
}

uint64_t sub_100A41A54(uint64_t a1)
{
  if (sub_100A41728(a1)) {
    return 1;
  }
  unsigned __int8 v2 = 0;
  sub_10006ACBC(v3, "FallStatsEnabled", &v2, 0);
  if (v3[1] || (sub_100A41808() & 1) != 0) {
    return 1;
  }
  else {
    return sub_100A41874();
  }
}

uint64_t sub_100A41AB0(uint64_t a1, uint64_t a2, char a3)
{
  unsigned __int8 v11 = a3 & 1;
  BOOL v10 = (a3 & 2) != 0;
  uint64_t v5 = sub_1000D3E78();
  sub_10006B564(v5, &v8);
  sub_1000EA238(v8, "FallStatsEnabled", &v11);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  uint64_t v6 = sub_1000D3E78();
  sub_10006B564(v6, &v8);
  sub_1000EA238(v8, "FallStatsPressureEnabled", &v10);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  return sub_100A41B70(a1, a2, v11);
}

void sub_100A41B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A41B70(uint64_t a1, uint64_t a2, int a3)
{
  float v4 = *(void **)(a1 + 256);
  if (a3 == 1)
  {
    [v4 addObject:a2];
  }
  else
  {
    [v4 removeObject:a2];
    if (a3)
    {
      if (![*(id *)(a1 + 256) count])
      {
        [*(id *)(a1 + 136) clearAllLogs];
        [*(id *)(a1 + 168) clearLogs];
        [*(id *)(a1 + 176) clearLogs];
        [*(id *)(a1 + 184) clearLogs];
        [*(id *)(a1 + 192) clearLogs];
        [*(id *)(a1 + 200) clearLogs];
        [*(id *)(a1 + 208) clearLogs];
        [*(id *)(a1 + 216) clearLogs];
        [*(id *)(a1 + 224) clearLogs];
        [*(id *)(a1 + 232) clearLogs];
      }
    }
    else
    {
      [*(id *)(a1 + 136) stopLogging];
    }
  }
  if ([*(id *)(a1 + 256) count])
  {
    +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", +[NSSet setWithSet:*(void *)(a1 + 256)], 1, 0);
    uint64_t v6 = sub_1000A6958();
    sub_1004D258C(v6);
  }
  else
  {
    uint64_t v7 = sub_1000A6958();
    sub_1004CF870(v7);
    uint64_t v8 = sub_1000D3E78();
    sub_10006B564(v8, &v13);
    sub_1004CF7DC(v13, "FallStatsEnabled", 0xFFFFFFFFLL);
    if (v14) {
      sub_1000DB0A0(v14);
    }
    uint64_t v9 = sub_1000D3E78();
    sub_10006B564(v9, &v13);
    sub_1004CF7DC(v13, "FallStatsPressureEnabled", 0xFFFFFFFFLL);
    if (v14) {
      sub_1000DB0A0(v14);
    }
    uint64_t v10 = sub_1000D3E78();
    sub_10006B564(v10, &v13);
    sub_1004CF7DC(v13, "AnomalyDetectorEnabledKey", 0xFFFFFFFFLL);
    if (v14) {
      sub_1000DB0A0(v14);
    }
  }
  uint64_t v11 = sub_1000A6958();
  (*(void (**)(uint64_t))(*(void *)v11 + 944))(v11);
  sub_100A4225C(a1, 0);
  return *(void *)(a1 + 7816);
}

void sub_100A41D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

NSDictionary *sub_100A41D78(void *a1, void *a2)
{
  id v4 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v22 = 0;
  id v5 = [(NSArray *)[+[NSFileManager defaultManager] contentsOfDirectoryAtPath:@"/var/root/Library/Caches/locationd/logs/newtonStats" error:&v22] mutableCopy];
  if (v22)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v6 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      uint64_t v28 = v22;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Unable to get contents of logging directory, error: %{public}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      int v25 = 138543362;
      uint64_t v26 = v22;
      int v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "NSDictionary *CLFallNotifier::moveFallStatsToFile(NSFileHandle *)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    v23[0] = CMErrorMessage;
    v23[1] = CMReturnCode;
    v24[0] = &off_102392EB8;
    v24[1] = &__kCFBooleanFalse;
    return +[NSDictionary dictionaryWithObjects:v24 forKeys:v23 count:2];
  }
  else
  {
    uint64_t v8 = v5;
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    int v19 = sub_100A42200;
    int v20 = &unk_1022DACC0;
    id v21 = v5;
    uint64_t v9 = (void *)a1[21];
    [v9 flushToFile];
    id v10 = [v9 currentFilename];
    if (v10) {
      [v21 removeObject:v10];
    }
    v19((uint64_t)v18, (void *)a1[22]);
    v19((uint64_t)v18, (void *)a1[23]);
    v19((uint64_t)v18, (void *)a1[24]);
    v19((uint64_t)v18, (void *)a1[25]);
    v19((uint64_t)v18, (void *)a1[26]);
    v19((uint64_t)v18, (void *)a1[27]);
    v19((uint64_t)v18, (void *)a1[28]);
    v19((uint64_t)v18, (void *)a1[29]);
    uint64_t v11 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v8 count]);
    [v4 setObject:v11 forKeyedSubscript:CMFallSetStatsNumberOfAvailableFiles];
    if ([v8 count])
    {
      id v12 = [[@"/var/root/Library/Caches/locationd/logs/newtonStats" stringByAppendingPathComponent:[v8 objectAtIndexedSubscript:0]];
      uint64_t v13 = +[NSFileHandle fileHandleForReadingAtPath:v12];
      id v14 = +[CMMotionUtils copyDataFrom:v13 to:a2];
      [(NSFileHandle *)v13 closeFile];
      [a2 closeFile];
      id v15 = [v8 objectAtIndexedSubscript:0];
      [v4 setObject:v15 forKeyedSubscript:CMFallSetStatsNameOfCurrentFile];
      int v16 = +[NSNumber numberWithUnsignedInteger:v14];
      [v4 setObject:v16 forKeyedSubscript:CMFallSetStatsSizeOfCurrentFile];
      [v4 setObject:&__kCFBooleanTrue forKeyedSubscript:CMReturnCode];
      [+[NSFileManager defaultManager] removeItemAtPath:v12 error:0];
    }
    else
    {
      [v4 setObject:&__kCFBooleanFalse forKeyedSubscript:CMReturnCode];
    }
    return (NSDictionary *)[v4 copy];
  }
}

id sub_100A42200(uint64_t a1, void *a2)
{
  [a2 flushToFile];
  id result = [a2 currentFilename];
  if (result)
  {
    id v5 = result;
    uint64_t v6 = *(void **)(a1 + 32);
    return [v6 removeObject:v5];
  }
  return result;
}

uint64_t sub_100A4225C(uint64_t a1, int a2)
{
  long long v21 = 0uLL;
  uint64_t v22 = 0;
  sub_100A455E4(a1, a2, (uint64_t)&v21);
  if (*(unsigned __int8 *)(a1 + 7832) != v22)
  {
    if ((_BYTE)v22)
    {
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      unsigned __int8 v3 = qword_1024190F8;
      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Enabling Sensor Recorder", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        LOWORD(v23) = 0;
        int v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CMMotionCoprocessorCommand::Configure::FallStatsConfig CLFallNotifier::updateConfig(CMSPUFall_Types::SimulatedType)", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
      sub_100A45C28(a1);
      [*(id *)(*(void *)(a1 + 10888) + 16) register:*(void *)(*(void *)(a1 + 10888) + 8) forNotification:4 registrationInfo:0];
    }
    else
    {
      [*(id *)(a1 + 160) cleanUp:0.0];
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      id v4 = qword_1024190F8;
      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Disabling Sensor Recorder", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        LOWORD(v23) = 0;
        int v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CMMotionCoprocessorCommand::Configure::FallStatsConfig CLFallNotifier::updateConfig(CMSPUFall_Types::SimulatedType)", "%s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
      }
      sub_100A462AC((id *)a1);
      [*(id *)(*(void *)(a1 + 10888) + 16) unregister:*(void *)(*(void *)(a1 + 10888) + 8) forNotification:4];
    }
  }
  if ((sub_100A39D2C() & 1) == 0 && (!sub_100A39DF0() || !*(void *)(a1 + 10656))
    || *(unsigned char *)(a1 + 445))
  {
    *(_OWORD *)(a1 + 7816) = v21;
    *(void *)(a1 + 7832) = v22;
    id v5 = (const void *)sub_1000D2E34(0);
    if (v5)
    {
      if (v6) {
        sub_100594FF8((uint64_t)v6, (long long *)(a1 + 7816));
      }
    }
    char v7 = sub_100A3A90C(a1);
    sub_10126E4F4(a1 + 10568, v7);
    int v8 = sub_100A357C4();
    sub_10126E4FC(a1 + 10568, v8);
    int v9 = sub_100A3529C();
    sub_10126E518(a1 + 10568, v9);
    int v10 = sub_100A35328();
    sub_10126E534(a1 + 10568, v10);
    int v11 = sub_100A419B8();
    sub_10126E550(a1 + 10568, v11);
    int v12 = sub_100A419F4(a1);
    sub_10126E56C(a1 + 10568, v12);
    int v13 = sub_100A416B4();
    sub_10126E588(a1 + 10568, v13);
    sub_10126ECBC(a1 + 10568);
    int v14 = sub_100A419F4(a1);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    id v15 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 67109120;
      int v26 = v14;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "CLFitnessTrackingAllDayAWD: Updating didEnableBackgroundAllDayAnomalyDetection %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      int v23 = 67109120;
      int v24 = v14;
      int v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CMMotionCoprocessorCommand::Configure::FallStatsConfig CLFallNotifier::updateConfig(CMSPUFall_Types::SimulatedType)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    uint64_t v16 = sub_100C3AE20();
    sub_100C3D31C(v16, v14);
  }
  return *(void *)(a1 + 7816);
}

void sub_100A42800(uint64_t a1, uint64_t a2, char a3)
{
  if (!*(void *)(a2 + 19)) {
    return;
  }
  if (*(id *)(a2 + 19) == sub_100A45238())
  {
    sub_100A3A168(a1, a2, 6);
    return;
  }
  uint64_t v6 = (unsigned __int8 *)(a1 + 7608);
  if (*(unsigned __int8 *)(a2 + 157) - 1 <= 1)
  {
    long long v7 = *(_OWORD *)a2;
    long long v8 = *(_OWORD *)(a2 + 16);
    long long v9 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 6935) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 6951) = v9;
    *(_OWORD *)(a1 + 6903) = v7;
    *(_OWORD *)(a1 + 6919) = v8;
    long long v10 = *(_OWORD *)(a2 + 64);
    long long v11 = *(_OWORD *)(a2 + 80);
    long long v12 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 6999) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 7015) = v12;
    *(_OWORD *)(a1 + 6967) = v10;
    *(_OWORD *)(a1 + 6983) = v11;
    long long v13 = *(_OWORD *)(a2 + 128);
    long long v14 = *(_OWORD *)(a2 + 144);
    long long v15 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 7078) = *(_OWORD *)(a2 + 175);
    *(_OWORD *)(a1 + 7047) = v14;
    *(_OWORD *)(a1 + 7063) = v15;
    *(_OWORD *)(a1 + 7031) = v13;
  }
  float v16 = sub_100A51C78((float *)(a2 + 27));
  if (*(unsigned char *)(a2 + 18) && *(unsigned char *)(a2 + 18) != 7)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v30 = qword_1024190F8;
    if (!os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_31;
    }
    int v31 = *v6;
    int v32 = *(unsigned __int8 *)(a1 + 7610);
    *(_DWORD *)long long buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v31;
    *(_WORD *)&buf[24] = 1026;
    *(_DWORD *)&buf[26] = v32;
    int v33 = "{\"msg%{public}.0s\":\"Skipping impact check against on/off wrist status and on/off charger for simulated even"
          "t\", \"Received state\":%{public}hhd, \"Gating enabled\":%{public}hhd}";
LABEL_30:
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, v33, buf, 0x1Eu);
    goto LABEL_31;
  }
  if (!*v6)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v30 = qword_1024190F8;
    if (!os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_31;
    }
    int v34 = *v6;
    int v35 = *(unsigned __int8 *)(a1 + 7610);
    *(_DWORD *)long long buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v34;
    *(_WORD *)&buf[24] = 1026;
    *(_DWORD *)&buf[26] = v35;
    int v33 = "{\"msg%{public}.0s\":\"Skipping impact check against on/off wrist status and on/off charger as we did not rece"
          "ive a state yet\", \"Received state\":%{public}hhd, \"Gating enabled\":%{public}hhd}";
    goto LABEL_30;
  }
  double v17 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 7624);
  if (v17 <= 0.0) {
    double v18 = 0.0;
  }
  else {
    double v18 = v17;
  }
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  int v19 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    int v20 = *v6;
    int v21 = *(unsigned __int8 *)(a1 + 7610);
    BOOL v22 = *(_DWORD *)(a1 + 7640) != 0;
    *(_DWORD *)long long buf = 68290051;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v20;
    *(_WORD *)&buf[24] = 1026;
    *(_DWORD *)&buf[26] = v21;
    *(_WORD *)&buf[30] = 1025;
    *(_DWORD *)&uint8_t buf[32] = v22;
    *(_WORD *)&buf[36] = 2049;
    *(double *)&buf[38] = v18;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Checking impact against on/off wrist status\", \"Received state\":%{public}hhd, \"Gating enabled\":%{public}hhd, \"status\":%{private}hhd, \"duration\":\"%{private}f\"}", buf, 0x2Eu);
  }
  double v23 = *(double *)(a2 + 166);
  sub_101A1F180(buf, "FallOffWristLookbackBeforeImpactStartOfIntervalKey", &qword_101D6FA58, 0);
  double v24 = *(double *)&buf[8];
  sub_101A1F180(buf, "FallOffWristLookbackBeforeImpactEndOfIntervalKey", &qword_101D6FA98, 0);
  double v25 = *(double *)&buf[8];
  sub_101A1F180(buf, "FallOnWristAfterImpactStartOfIntervalKey", &qword_101D6FAD0, 0);
  double v26 = *(double *)&buf[8];
  sub_101A1F180(buf, "FallOnWristAfterImpactEndOfIntervalKey", &qword_101D6FB00, 0);
  double v27 = *(double *)&buf[8];
  sub_101A1F180(buf, "FallLockedLookbackBeforeImpactStartOfIntervalKey", &qword_101D6FB40, 0);
  double v28 = *(double *)&buf[8];
  sub_101A1F180(buf, "FallLockedLookbackBeforeImpactEndOfIntervalKey", &qword_101D6FB78, 0);
  int v29 = sub_101448984(a1 + 7608, a2, v23, v24, v25, v26, v27, v28, *(double *)&buf[8]);
  switch(v29)
  {
    case 1:
      sub_100A45284(*(void *)(a2 + 19));
      sub_100A3A168(a1, a2, 9);
      return;
    case 3:
      sub_100A45284(*(void *)(a2 + 19));
      sub_100A3A168(a1, a2, 12);
      return;
    case 2:
      sub_100A45284(*(void *)(a2 + 19));
      sub_100A3A168(a1, a2, 10);
      return;
  }
  *(_DWORD *)uint64_t v73 = 25;
  sub_10044FD20(buf, "FallMinimumOffChargerDurationKey", v73, 0);
  if (sub_101448DD4(a1 + 7608, *(int *)&buf[4]))
  {
    sub_100A45284(*(void *)(a2 + 19));
    sub_100A3A168(a1, a2, 11);
    double Current = CFAbsoluteTimeGetCurrent();
    double v64 = *(double *)(a1 + 7616);
    *(_DWORD *)uint64_t v73 = 25;
    sub_10044FD20(buf, "FallMinimumOffChargerDurationKey", v73, 0);
    double v65 = fmax(Current - v64, 0.0);
    if (v65 >= (double)*(int *)&buf[4])
    {
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      uint64_t v70 = qword_1024190F8;
      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
      {
        int v71 = v6[3];
        *(_DWORD *)long long buf = 68289539;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 1025;
        *(_DWORD *)&buf[20] = v71;
        *(_WORD *)&buf[24] = 2049;
        *(double *)&buf[26] = v65;
        uint64_t v55 = "{\"msg%{public}.0s\":\"Avoided event dispatch with watch on charger\", \"status\":%{private}d, \"duration\""
              ":\"%{private}f\"}";
        uint64_t v56 = v70;
        uint32_t v57 = 34;
        goto LABEL_60;
      }
    }
    else
    {
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      uint64_t v66 = qword_1024190F8;
      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
      {
        int v67 = v6[3];
        *(_DWORD *)uint64_t v73 = 25;
        sub_10044FD20(buf, "FallMinimumOffChargerDurationKey", v73, 0);
        int v68 = *(_DWORD *)&buf[4];
        *(_DWORD *)long long buf = 68289795;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 1025;
        *(_DWORD *)&buf[20] = v67;
        *(_WORD *)&buf[24] = 2049;
        *(double *)&buf[26] = v65;
        *(_WORD *)&buf[34] = 1025;
        *(_DWORD *)&buf[36] = v68;
        uint64_t v55 = "{\"msg%{public}.0s\":\"Avoided event dispatch with watch off charger for too short\", \"status\":%{private"
              "}d, \"duration\":\"%{private}f\", \"threshold\":%{private}d}";
        uint64_t v56 = v66;
        uint32_t v57 = 40;
        goto LABEL_60;
      }
    }
    return;
  }
LABEL_31:
  int v36 = *(unsigned __int8 *)(a1 + 7814);
  v73[0] = 0;
  sub_10006ACBC(buf, "FallGateAlertsOnWaterLock", v73, 0);
  if (buf[1]) {
    int v37 = *(unsigned __int8 *)(a1 + 7809);
  }
  else {
    int v37 = 0;
  }
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  int v38 = v37 | v36;
  uint64_t v39 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 68289283;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1025;
    *(_DWORD *)&buf[20] = v38;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Checking impact against system state\", \"should cancel\":%{private}d}", buf, 0x18u);
  }
  if (v38)
  {
    sub_100A45284(*(void *)(a2 + 19));
    sub_100A3A168(a1, a2, 8);
    *(unsigned char *)(a1 + 447) = 1;
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    double v40 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v41 = *(void *)(a1 + 7792);
      int v42 = *(unsigned __int8 *)(a1 + 7808);
      int v43 = *(unsigned __int8 *)(a1 + 7809);
      int v44 = *(unsigned __int8 *)(a1 + 7810);
      int v45 = *(unsigned __int8 *)(a1 + 7811);
      int v46 = *(unsigned __int8 *)(a1 + 7812);
      int v47 = *(unsigned __int8 *)(a1 + 7813);
      int v48 = *(unsigned __int8 *)(a1 + 7814);
      *(_DWORD *)long long buf = 68291074;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(void *)&buf[20] = v41;
      *(_WORD *)&buf[28] = 1026;
      *(_DWORD *)&buf[30] = v42;
      *(_WORD *)&buf[34] = 1026;
      *(_DWORD *)&buf[36] = v43;
      *(_WORD *)&buf[40] = 1026;
      *(_DWORD *)&buf[42] = v44;
      *(_WORD *)&buf[46] = 1026;
      LODWORD(v75) = v45;
      WORD2(v75) = 1026;
      *(_DWORD *)((char *)&v75 + 6) = v46;
      WORD5(v75) = 1026;
      HIDWORD(v75) = v47;
      LOWORD(v76) = 1026;
      *(_DWORD *)((char *)&v76 + 2) = v48;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"current system state details\", \"absoluteTimestamp\":\"%{public}f\", \"isPasscodeLockEnabled\":%{public}hhd, \"isWaterLockEnabled\":%{public}hhd, \"isSchoolModeEnabled\":%{public}hhd, \"isSleepLockEnabled\":%{public}hhd, \"isTheaterModeEnabled\":%{public}hhd, \"isTourModeEnabled\":%{public}hhd, \"isDepthModeEnabled\":%{public}hhd}", buf, 0x46u);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
    }
    uint64_t v49 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "Fall detection feature is disabled during this system state configuration, avoided dispatching event", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 == -1)
    {
LABEL_48:
      *(_WORD *)uint64_t v73 = 0;
      uint64_t v50 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::checkAndNotifyClientsWithData(CLFall_Types::ImpactEvent &, BOOL)", "%s\n", v50);
      if (v50 != buf) {
        free(v50);
      }
      return;
    }
LABEL_99:
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    goto LABEL_48;
  }
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  uint64_t v51 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    int v52 = *(unsigned __int8 *)(a2 + 12);
    *(_DWORD *)long long buf = 68289539;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1025;
    *(_DWORD *)&buf[20] = v52;
    *(_WORD *)&buf[24] = 2049;
    *(double *)&buf[26] = v16;
    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Checking impact against threshold\", \"age\":%{private}d, \"feature\":\"%{private}f\"}", buf, 0x22u);
  }
  if (v16 >= *(float *)(a1 + 7476) || *(unsigned char *)(a2 + 18))
  {
    if ((a3 & 1) == 0 && *(unsigned char *)(a2 + 13) == 1)
    {
      *(_WORD *)(a1 + 446) = 1;
      *(unsigned char *)(a1 + 448) = 0;
    }
    if ((sub_100A39D2C() & 1) != 0 || sub_100A39DF0() && *(void *)(a1 + 10656))
    {
      *(_DWORD *)long long buf = 1;
      if (!sub_1001072EC(a1, (int *)buf, 1))
      {
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        uint64_t v58 = qword_1024190F8;
        if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_FAULT, "No client was connected when event needed to be dispatched", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190F0 != -1) {
            dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
          }
          *(_WORD *)uint64_t v73 = 0;
          uint64_t v72 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLFallNotifier::checkAndNotifyClientsWithData(CLFall_Types::ImpactEvent &, BOOL)", "%s\n", v72);
          if (v72 != buf) {
            free(v72);
          }
        }
      }
      memset(v84, 0, sizeof(v84));
      long long v59 = *(_OWORD *)(a2 + 112);
      long long v78 = *(_OWORD *)(a2 + 96);
      long long v79 = v59;
      *(_OWORD *)uint64_t v80 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)&v80[10] = *(_OWORD *)(a2 + 138);
      long long v60 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&uint8_t buf[32] = *(_OWORD *)(a2 + 32);
      long long v75 = v60;
      long long v61 = *(_OWORD *)(a2 + 80);
      long long v76 = *(_OWORD *)(a2 + 64);
      long long v77 = v61;
      long long v62 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)long long buf = *(_OWORD *)a2;
      *(_OWORD *)&uint8_t buf[16] = v62;
      __int16 v81 = *(_WORD *)(a2 + 156);
      long long v82 = *(_OWORD *)(a2 + 158);
      uint64_t v83 = *(void *)(a2 + 174);
      *(_DWORD *)uint64_t v73 = 1;
      (*(void (**)(uint64_t, unsigned __int8 *, unsigned char *, void, uint64_t, void))(*(void *)a1 + 152))(a1, v73, buf, 0, 0xFFFFFFFFLL, 0);
      if (*(void *)&v84[9])
      {
        *(void *)&v84[17] = *(void *)&v84[9];
        operator delete(*(void **)&v84[9]);
      }
      return;
    }
    sub_100A45284(*(void *)(a2 + 19));
    sub_100A3A168(a1, a2, 8);
    *(unsigned char *)(a1 + 447) = 1;
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v69 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "Fall detection feature is disabled, avoided dispatching event", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 == -1) {
        goto LABEL_48;
      }
      goto LABEL_99;
    }
  }
  else
  {
    sub_100A45284(*(void *)(a2 + 19));
    sub_100A3A168(a1, a2, 7);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v53 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v54 = *(void *)(a2 + 19);
      *(_DWORD *)long long buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(void *)&buf[20] = v54;
      *(_WORD *)&buf[28] = 2049;
      *(double *)&buf[30] = v16;
      uint64_t v55 = "{\"msg%{public}.0s\":\"Avoided event dispatch not meeting threshold requirement\", \"identifier\":%{public}l"
            "lu, \"feature\":\"%{private}f\"}";
      uint64_t v56 = v53;
      uint32_t v57 = 38;
LABEL_60:
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, v55, buf, v57);
    }
  }
}

void sub_100A436C0(_Unwind_Exception *exception_object)
{
  unsigned __int8 v3 = *(void **)(v1 + 191);
  if (v3)
  {
    *(void *)(v1 + 199) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A436E4(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 128);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A4376C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66580);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A43800(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66608);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A43894(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66636);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A43928(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66664);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A439BC(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 124);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A43A44(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66576);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A43AD8(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66604);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A43B6C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66632);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A43C00(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66660);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A43C94(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 140);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A43D1C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66584);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A43DB0(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66612);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A43E44(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66640);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A43ED8(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66668);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A43F6C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 144);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A43FF4(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66588);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A44088(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66616);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A4411C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66644);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A441B0(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66672);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A44244(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 148);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A442CC(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66592);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A44360(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66620);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A443F4(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66648);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A44488(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66676);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A4451C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 152);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A445A4(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66596);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A44638(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66624);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A446CC(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66652);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A44760(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66680);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A447F4(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 156);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A4487C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66600);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A44910(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66628);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A449A4(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66656);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A44A38(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66684);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A44ACC(uint64_t a1, double a2)
{
  id v3 = sub_100A45548(a1, @"LastFallAlertTime");
  if (v4 == 1.79769313e308)
  {
    sub_100A45548((uint64_t)v3, @"FallDetectionOptInTime");
    double v6 = -vabdd_f64(v5, a2);
  }
  else
  {
    double v6 = vabdd_f64(a2, v4);
  }
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  long long v7 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
  {
    v12[0] = 68289282;
    v12[1] = 0;
    __int16 v13 = 2082;
    long long v14 = "";
    __int16 v15 = 2050;
    double v16 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Logging to AWD - time since last alert\", \"timeSinceLastAlert\":\"%{public}f\"}", (uint8_t *)v12, 0x1Cu);
  }
  uint64_t v8 = sub_100C3AE20();
  float v9 = v6;
  uint64_t v10 = sub_100C3B778(v8, v9);
  return sub_100A45324(v10, @"LastFallAlertTime");
}

void sub_100A44C10(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 446))
  {
    if (!*(unsigned char *)(a1 + 449) || !*(unsigned char *)(a1 + 448))
    {
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      uint64_t v10 = qword_1024190F8;
      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 68289026;
        int v25 = 0;
        __int16 v26 = 2082;
        double v27 = "";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Flush handler being invoked - did not see an alert - cleared payloads\"}", buf, 0x12u);
      }
      goto LABEL_28;
    }
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    double v6 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 68289026;
      int v25 = 0;
      __int16 v26 = 2082;
      double v27 = "";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Flush handler being invoked - checking if near fall payloads should be sent to server or listeners\"}", buf, 0x12u);
    }
    id v3 = [sub_100A4DCF8(a1) mutableCopy];
    double v4 = *(void **)(a1 + 136);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    _OWORD v22[2] = sub_100A52254;
    v22[3] = &unk_1022DAE50;
    v22[4] = a1;
    double v5 = v22;
LABEL_16:
    [v4 flushData:v5 userProfile:v3];

LABEL_28:
    [*(id *)(a1 + 136) clearAllLogs];
    [*(id *)(a1 + 320) setNextFireDelay:1.79769313e308];
    long long v11 = *(void **)(a1 + 144);
    v21[0] = 0;
    sub_10006ACBC(buf, "FallFullMslLoggingInSensorKitEnabled", v21, 0);
    [v11 cleanUpIncludingDerivedFeatures:buf[1]];
    *(_DWORD *)(a1 + 446) = 0;
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    long long v12 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = *(void *)(a1 + 7568);
      uint64_t v14 = *(void *)(a1 + 7576);
      uint64_t v15 = *(void *)(a1 + 7584);
      uint64_t v16 = *(void *)(a1 + 7592);
      uint64_t v17 = *(void *)(a1 + 7600);
      *(_DWORD *)long long buf = 68290306;
      int v25 = 0;
      __int16 v26 = 2082;
      double v27 = "";
      __int16 v28 = 2050;
      *(void *)int v29 = v13;
      *(_WORD *)&v29[8] = 2050;
      uint64_t v30 = v14;
      __int16 v31 = 2050;
      uint64_t v32 = v15;
      __int16 v33 = 2050;
      uint64_t v34 = v16;
      __int16 v35 = 2050;
      uint64_t v36 = v17;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Logged item count\", \"Accel800Sample\":%{public}llu, \"Gyro200\":%{public}llu, \"Quaternion6\":%{public}llu, \"Pressure\":%{public}llu, \"HgalSample\":%{public}llu}", buf, 0x44u);
    }
    *(void *)(a1 + 7600) = 0;
    *(_OWORD *)(a1 + 7584) = 0u;
    *(_OWORD *)(a1 + 7568) = 0u;
    if (*(int *)(a1 + 280) >= 1)
    {
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      uint64_t v18 = a1 + 272;
      int v19 = qword_1024190F8;
      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Releasing power assertion", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        *(_WORD *)int v21 = 0;
        int v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::flushLoggerManager()", "%s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
      }
      sub_100EBC6AC(v18);
    }
    return;
  }
  if ((*(unsigned char *)(a1 + 447)
     || (sub_100A39D2C() & 1) == 0 && (!sub_100A39DF0() || !*(void *)(a1 + 10656)))
    && *(unsigned char *)(a1 + 448))
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v2 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 68289026;
      int v25 = 0;
      __int16 v26 = 2082;
      double v27 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Flush handler being invoked - checking if fall payloads should be sent to server or listeners\"}", buf, 0x12u);
    }
    id v3 = [sub_100A4DCF8(a1) mutableCopy];
    double v4 = *(void **)(a1 + 136);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    void v23[2] = sub_100A52120;
    v23[3] = &unk_1022DAE50;
    _DWORD v23[4] = a1;
    double v5 = v23;
    goto LABEL_16;
  }
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  long long v7 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(a1 + 447);
    int v9 = *(unsigned __int8 *)(a1 + 448);
    *(_DWORD *)long long buf = 68289539;
    int v25 = 0;
    __int16 v26 = 2082;
    double v27 = "";
    __int16 v28 = 1025;
    *(_DWORD *)int v29 = v8;
    *(_WORD *)&v29[4] = 1025;
    *(_DWORD *)&v29[6] = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Flush handler being invoked - did not meet all conditions for flushing yet\", \"fHasReceivedResolutionSinceLastFlush\":%{private}hhd, \"fHasReceivedFlushPacket\":%{private}hhd}", buf, 0x1Eu);
  }
}

id sub_100A45238()
{
  id v3 = 0;
  uint64_t v0 = sub_1000A6958();
  int v1 = sub_1004D01D8(v0, @"LastGatedAnomalyAOPTimestamp", (CFTypeRef *)&v3);
  id result = 0;
  if (v1) {
    return [v3 longLongValue];
  }
  return result;
}

uint64_t sub_100A45284(uint64_t a1)
{
  +[NSString stringWithFormat:@"%lld", a1];
  uint64_t v1 = sub_1000A6958();
  sub_1004D258C(v1);
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)sub_1000A6958() + 944);

  return v2();
}

uint64_t sub_100A45324(uint64_t a1, const __CFString *a2)
{
  +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:"), 1, 0);
  uint64_t v3 = sub_1000A6958();
  uint64_t v4 = sub_1004D258C(v3);
  if (v4)
  {
    uint64_t v5 = sub_1000A6958();
    (*(void (**)(uint64_t))(*(void *)v5 + 944))(v5);
  }
  else
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    double v6 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_ERROR))
    {
      int v10 = 68289282;
      int v11 = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2082;
      CStringPtr = CFStringGetCStringPtr(a2, 0x8000100u);
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed to persist timestamp \", \"for key\":%{public, location:escape_only}s}", (uint8_t *)&v10, 0x1Cu);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
    }
    long long v7 = qword_1024190F8;
    if (os_signpost_enabled((os_log_t)qword_1024190F8))
    {
      int v8 = CFStringGetCStringPtr(a2, 0x8000100u);
      int v10 = 68289282;
      int v11 = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2082;
      CStringPtr = v8;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to persist timestamp ", "{\"msg%{public}.0s\":\"Failed to persist timestamp \", \"for key\":%{public, location:escape_only}s}", (uint8_t *)&v10, 0x1Cu);
    }
  }
  return v4;
}

id sub_100A45548(uint64_t a1, uint64_t a2)
{
  CFTypeRef v5 = 0;
  uint64_t v3 = sub_1000A6958();
  id result = (id)sub_1004D01D8(v3, a2, &v5);
  if (result)
  {
    if (v5) {
      return [[+[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClass:fromData:error:", objc_opt_class(), v5, 0) timeIntervalSinceReferenceDate];
    }
  }
  return result;
}

void sub_100A455E4(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  sub_100103240();
  uint64_t v6 = sub_1000A16E8();
  uint64_t v7 = *(void *)(a1 + 10656);
  sub_100103240();
  uint64_t v8 = sub_1000A16E8();
  sub_100103240();
  uint64_t v9 = sub_1000A16E8();
  int v10 = sub_100A416B4();
  float v11 = *(float *)(a1 + 404);
  LOBYTE(v40[0]) = 0;
  sub_10006ACBC(buf, "FallStatsEnabled", (unsigned __int8 *)v40, 0);
  int v12 = buf[1];
  LOBYTE(v40[0]) = 0;
  sub_10006ACBC(buf, "FallStatsPressureEnabled", (unsigned __int8 *)v40, 0);
  int v39 = buf[1];
  if ((v6 & 0x4000000000) != 0)
  {
    if (v10)
    {
LABEL_10:
      int v13 = 1;
      goto LABEL_11;
    }
  }
  else if (((sub_100A39D2C() & 1) != 0 || sub_100A39DF0() && *(void *)(a1 + 10656)) {
         && ((v10 ^ 1) & 1) == 0)
  }
  {
    goto LABEL_10;
  }
  if (sub_100A417A8()) {
    goto LABEL_10;
  }
  LOBYTE(v40[0]) = 0;
  sub_10006ACBC(buf, "FallStatsSensorRecordingEnabled", (unsigned __int8 *)v40, 0);
  if (buf[1]) {
    goto LABEL_10;
  }
  LOBYTE(v40[0]) = 0;
  sub_10006ACBC(buf, "FallStatsEnabled", (unsigned __int8 *)v40, 0);
  if (v7) {
    int v28 = v10;
  }
  else {
    int v28 = 0;
  }
  if (buf[1]) {
    int v13 = 1;
  }
  else {
    int v13 = v28;
  }
LABEL_11:
  uint64_t v14 = v6 & 0x4000000000;
  double v15 = *(double *)(a1 + 248);
  if (v15 > 240.0)
  {
    LOBYTE(v40[0]) = 0;
    sub_10006ACBC(buf, "FallStatsEnabled", (unsigned __int8 *)v40, 0);
    BOOL v16 = buf[1] != 0;
  }
  else
  {
    BOOL v16 = 1;
  }
  unint64_t v37 = v8 & 0x40000000000;
  uint64_t v17 = v9 & 0x80000000000;
  if (v14) {
    int v18 = v10;
  }
  else {
    int v18 = 0;
  }
  int v19 = v13 | v18;
  if (v12) {
    int v20 = 1;
  }
  else {
    int v20 = v19;
  }
  unint64_t v36 = v14;
  if (sub_100A41940(a1))
  {
    int v21 = 1;
  }
  else if (sub_100A41940(a1))
  {
    int v21 = 0;
  }
  else
  {
    int v21 = sub_100A418E0();
  }
  if (v37) {
    char v22 = 2;
  }
  else {
    char v22 = 3;
  }
  if (v17) {
    char v22 = 1;
  }
  if (v20 | v21) {
    char v23 = v22;
  }
  else {
    char v23 = 3;
  }
  unsigned __int8 v38 = v23;
  int v35 = v20;
  unint64_t v34 = v17;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  int v24 = v13 & v16;
  int v25 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v33 = v16;
    uint64_t v26 = *(void *)(a1 + 6731);
    LOBYTE(v40[0]) = 0;
    sub_10006ACBC(buf, "FallStatsSensorRecordingEnabled", (unsigned __int8 *)v40, 0);
    int v27 = buf[1];
    *(_DWORD *)long long buf = 67244289;
    int v74 = v38;
    __int16 v75 = 1026;
    int v76 = v13;
    __int16 v77 = 1026;
    int v78 = v24;
    __int16 v79 = 1026;
    int v80 = a2;
    __int16 v81 = 1026;
    int v82 = v39;
    __int16 v83 = 1026;
    int v84 = v21;
    __int16 v85 = 2050;
    uint64_t v86 = v26;
    BOOL v16 = v33;
    __int16 v87 = 1026;
    int v88 = v35;
    __int16 v89 = 1026;
    int v90 = v36 >> 38;
    __int16 v91 = 1026;
    int v92 = v34 >> 43;
    __int16 v93 = 1026;
    int v94 = v37 >> 42;
    __int16 v95 = 1026;
    int v96 = v10;
    __int16 v97 = 1025;
    int v98 = (int)v11;
    __int16 v99 = 1026;
    BOOL v100 = v15 <= 240.0;
    __int16 v101 = 1026;
    BOOL v102 = v33;
    __int16 v103 = 1026;
    int v104 = v12;
    __int16 v105 = 1026;
    int v106 = v27;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "config{ mode=%{public}d, sensorRecordingEnabled=%{public}d, sensorRecordingActive=%{public}d, simulateEvent=%{public}d, userStudyPressureDataCollection=%{public}d, detectorEnabled=%{public}d, lastReplyAopTimestamp=%{public}llu -> variables{ enableFallStats=%{public}d, alwaysOn=%{public}d, supportsFallStatsModeBW190=%{public}d, supportsFallStatsModeBW400=%{public}d, optin=%{public}d, age=%{private}d, underRateLimit=%{public}d, shouldLogSensorData=%{public}d},keys{ FallStatsEnabled=%{public}d, FallStatsSensorRecordingEnabled=%{public}d}", buf, 0x6Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    int v32 = v13;
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v29 = *(void *)(a1 + 6731);
    int v30 = sub_100A39CF0();
    v40[0] = 67244289;
    v40[1] = v38;
    __int16 v41 = 1026;
    int v42 = v32;
    __int16 v43 = 1026;
    int v44 = v24;
    __int16 v45 = 1026;
    int v46 = a2;
    __int16 v47 = 1026;
    int v48 = v39;
    __int16 v49 = 1026;
    int v50 = v21;
    __int16 v51 = 2050;
    uint64_t v52 = v29;
    __int16 v53 = 1026;
    int v54 = v35;
    __int16 v55 = 1026;
    int v56 = v36 >> 38;
    __int16 v57 = 1026;
    int v58 = v34 >> 43;
    __int16 v59 = 1026;
    int v60 = v37 >> 42;
    __int16 v61 = 1026;
    int v62 = v10;
    __int16 v63 = 1025;
    int v64 = (int)v11;
    __int16 v65 = 1026;
    BOOL v66 = v15 <= 240.0;
    __int16 v67 = 1026;
    BOOL v68 = v16;
    __int16 v69 = 1026;
    int v70 = v12;
    __int16 v71 = 1026;
    int v72 = v30;
    __int16 v31 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLFallNotifier::Config CLFallNotifier::generateConfig(CMSPUFall_Types::SimulatedType) const", "%s\n", v31);
    if (v31 != (char *)buf) {
      free(v31);
    }
    LOBYTE(v13) = v32;
  }
  *(void *)a3 = *(void *)(a1 + 6731);
  *(unsigned char *)(a3 + 8) = v38;
  *(unsigned char *)(a3 + 9) = v24;
  *(unsigned char *)(a3 + 10) = a2;
  *(unsigned char *)(a3 + 11) = v39;
  *(unsigned char *)(a3 + 12) = v21;
  *(unsigned char *)(a3 + 13) = *(unsigned char *)(a1 + 109);
  *(unsigned char *)(a3 + 16) = v13;
}

id sub_100A45C28(uint64_t a1)
{
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  uint64_t v2 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Setting up sensor recording", (uint8_t *)buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    LOWORD(v21) = 0;
    int v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::enableSensorRecording()", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }

  *(void *)(a1 + 160) = [[CLFallServer alloc] initInUniverse:*(void *)(a1 + 32)];
  *(void *)(a1 + 144) = [[CLFallMslSink alloc] initInUniverse:*(void *)(a1 + 32)];

  *(void *)(a1 + 152) = [[CLFallMslSink alloc] initInUniverse:*(void *)(a1 + 32)];
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  void v25[2] = sub_100A4EE9C;
  void v25[3] = &unk_1022DAE50;
  v25[4] = a1;

  *(void *)(a1 + 240) = [v25 copy];
  *(_DWORD *)(a1 + 446) = 0;
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  void v24[2] = sub_100A4F3D8;
  v24[3] = &unk_1022A3020;
  v24[4] = a1;
  [*(id *)(a1 + 328) setHandler:v24];
  uint64_t v3 = sub_1000D3E78();
  sub_10006B564(v3, buf);
  int v21 = 0;
  int v4 = sub_10006EF84(*(uint64_t *)&buf[0], "ServerCleanUpTimerFireInterval", &v21);
  double v5 = (double)v21;
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v4) {
    double v6 = v5;
  }
  else {
    double v6 = 21600.0;
  }
  [*(id *)(a1 + 328) setNextFireDelay:1.0 interval:v6];
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  void v23[2] = sub_100A4F428;
  v23[3] = &unk_1022A3020;
  _DWORD v23[4] = a1;
  [*(id *)(a1 + 336) setHandler:v23];
  *(void *)&buf[0] = 0x40F5180000000000;
  sub_101A1F180((unsigned __int8 *)&v21, "StatsRateLimitInterval", buf, 0);
  double Current = CFAbsoluteTimeGetCurrent();
  uint64_t v8 = sub_1000A6958();
  double v9 = v22;
  *(void *)&buf[0] = 0;
  int v10 = sub_1000A699C(v8, "StatsRateLimitLastZeroed", buf);
  double v11 = Current - v9;
  if (v10) {
    double v11 = *(double *)buf;
  }
  double v12 = Current - v11;
  if (v12 >= 0.0)
  {
    double v16 = v22 - v12;
    if (v22 < v16) {
      double v16 = v22;
    }
    double v14 = fmax(v16, 2.0);
  }
  else
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    int v13 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Time moved backwards. Reset timer immediately.", (uint8_t *)buf, 2u);
    }
    double v14 = 2.0;
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      LOWORD(v26) = 0;
      double v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::enableSensorRecording()", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  uint64_t v17 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0]) = 134217984;
    *(double *)((char *)buf + 4) = v14;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Setting next fire time for stats rate limiter (%f)", (uint8_t *)buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    int v26 = 134217984;
    double v27 = v14;
    int v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::enableSensorRecording()", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
  return [*(id *)(a1 + 336) setNextFireDelay:v14 interval:v22];
}

void sub_100A4628C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  if (a32) {
    sub_1000DB0A0(a32);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A462AC(id *a1)
{
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  uint64_t v2 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Tearing down sensor recording to server.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::disableSensorRecording()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  [a1[41] invalidate];

  a1[41] = 0;
  [a1[42] invalidate];

  a1[42] = 0;
  a1[20] = 0;

  a1[18] = 0;
  a1[19] = 0;
}

uint64_t sub_100A4648C(uint64_t a1, double a2)
{
  if (a2 <= 0.0)
  {
    uint64_t v7 = sub_1000A6958();
    *(void *)long long buf = CFAbsoluteTimeGetCurrent();
    sub_10016332C(v7, "StatsRateLimitLastZeroed", buf);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v8 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = *(void *)(a1 + 248);
      *(_DWORD *)long long buf = 134218240;
      *(void *)&uint8_t buf[4] = v9;
      __int16 v15 = 1024;
      LODWORD(v16) = 240;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Clearing fall stats rate limit counter, was %f out of %d allowed", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::updateRateLimitCounter(NSTimeInterval)", "%s\n", v13);
      if (v13 != buf) {
        free(v13);
      }
    }
    *(void *)(a1 + 248) = 0;
  }
  else
  {
    *(double *)(a1 + 248) = *(double *)(a1 + 248) + a2;
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    int v4 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v5 = *(void *)(a1 + 248);
      *(_DWORD *)long long buf = 134218496;
      *(double *)&uint8_t buf[4] = a2;
      __int16 v15 = 2048;
      uint64_t v16 = v5;
      __int16 v17 = 1024;
      int v18 = 240;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fall stats rate limit counter incremented by %f for a total %f out of %d allowed", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      double v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::updateRateLimitCounter(NSTimeInterval)", "%s\n", v6);
      if (v6 != buf) {
        free(v6);
      }
    }
  }
  uint64_t v10 = sub_1000A6958();
  sub_10016332C(v10, "StatsRateLimitCounter", (const void *)(a1 + 248));
  uint64_t v11 = *(void *)sub_1000A6958();
  (*(void (**)(void))(v11 + 944))();
  return sub_100A4225C(a1, 0);
}

uint64_t sub_100A4688C(uint64_t a1, int *a2)
{
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  int v4 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *a2;
    v8[0] = 68289282;
    v8[1] = 0;
    __int16 v9 = 2082;
    uint64_t v10 = "";
    __int16 v11 = 1026;
    int v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Registration monitor - Added first client\", \"notification\":%{public}d}", (uint8_t *)v8, 0x18u);
  }
  if (*a2 == 2)
  {
    sub_100A4225C(a1, 0);
  }
  else if (*a2 == 1)
  {
    v8[0] = 1;
    BOOL v6 = sub_1001072EC(a1, v8, 1) != 0;
    sub_100A469D4(a1, v6);
  }
  return 1;
}

uint64_t sub_100A469D4(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 444) == a2)
  {
    if (a2)
    {
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      uint64_t v3 = qword_1024190F8;
      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
      {
        int v4 = *(unsigned __int8 *)(a1 + 444);
        *(_DWORD *)long long buf = 68289283;
        int v15 = 0;
        __int16 v16 = 2082;
        __int16 v17 = "";
        __int16 v18 = 1025;
        int v19 = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Registration monitor - Making sure the timer will not be trigger\", \"current status\":%{private}hhd}", buf, 0x18u);
      }
      sub_100A46E84(a1);
    }
    return 1;
  }
  if (a2)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    int v5 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      int v6 = *(unsigned __int8 *)(a1 + 444);
      *(_DWORD *)long long buf = 68289539;
      int v15 = 0;
      __int16 v16 = 2082;
      __int16 v17 = "";
      __int16 v18 = 1025;
      int v19 = 1;
      __int16 v20 = 1025;
      int v21 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Registration monitor - Client registered, now allowing algorithms to run\", \"current status\":%{private}hhd, \"previous status\":%{private}hhd}", buf, 0x1Eu);
    }
    sub_100A46E84(a1);
    *(unsigned char *)(a1 + 444) = 1;
LABEL_27:
    sub_100A46EBC(a1);
    return 1;
  }
  if ((sub_100A39D2C() & 1) == 0 && (!sub_100A39DF0() || !*(void *)(a1 + 10656)))
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v10 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      int v11 = *(unsigned __int8 *)(a1 + 444);
      *(_DWORD *)long long buf = 68289283;
      int v15 = 0;
      __int16 v16 = 2082;
      __int16 v17 = "";
      __int16 v18 = 1025;
      int v19 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Registration monitor - Last client unregistered, making sure detector is stopped\", \"current status\":%{private}hhd}", buf, 0x18u);
    }
    *(unsigned char *)(a1 + 444) = 0;
    goto LABEL_27;
  }
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  uint64_t v7 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    int v8 = *(unsigned __int8 *)(a1 + 444);
    int v13 = 300;
    sub_10044FD20(buf, "FallDelayBeforeShuttingDownAlgorithmsAfterLastClientDisconnect", &v13, 0);
    int v9 = v15;
    *(_DWORD *)long long buf = 68289795;
    int v15 = 0;
    __int16 v16 = 2082;
    __int16 v17 = "";
    __int16 v18 = 1025;
    int v19 = 0;
    __int16 v20 = 1025;
    int v21 = v8;
    __int16 v22 = 1026;
    int v23 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Registration monitor - Last client unregistered, setting timer for stopping detector\", \"current status\":%{private}hhd, \"previous status\":%{private}hhd, \"timer duration\":%{public}d}", buf, 0x24u);
  }
  sub_100A47000(a1);
  return 1;
}

uint64_t sub_100A46D3C(uint64_t a1, int *a2)
{
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  int v4 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *a2;
    v8[0] = 68289282;
    v8[1] = 0;
    __int16 v9 = 2082;
    uint64_t v10 = "";
    __int16 v11 = 1026;
    int v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Registration monitor - Removed last client\", \"notification\":%{public}d}", (uint8_t *)v8, 0x18u);
  }
  if (*a2 == 2)
  {
    sub_100A4225C(a1, 0);
  }
  else if (*a2 == 1)
  {
    v8[0] = 1;
    BOOL v6 = sub_1001072EC(a1, v8, 1) != 0;
    sub_100A469D4(a1, v6);
  }
  return 1;
}

void sub_100A46E84(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 352);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 352));
    *(void *)(a1 + 352) = 0;
  }
}

uint64_t sub_100A46EBC(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 360);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 360));
    *(void *)(a1 + 360) = 0;
  }
  if (!*(unsigned char *)(a1 + 445))
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v3 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *(unsigned __int8 *)(a1 + 444);
      v6[0] = 68289282;
      v6[1] = 0;
      __int16 v7 = 2082;
      int v8 = "";
      __int16 v9 = 1026;
      int v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Registration monitor - Finished clients discovery\", \"has client(s)\":%{public}hhd}", (uint8_t *)v6, 0x18u);
    }
  }
  *(unsigned char *)(a1 + 445) = 1;
  [*(id *)(*(void *)(a1 + 10904) + 16) unregister:*(void *)(*(void *)(a1 + 10904) + 8) forNotification:2];
  [*(id *)(*(void *)(a1 + 10904) + 16) register:*(void *)(*(void *)(a1 + 10904) + 8) forNotification:2 registrationInfo:0];
  return sub_100A4225C(a1, 0);
}

void sub_100A47000(uint64_t a1)
{
  sub_100A46E84(a1);
  uint64_t v2 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 2uLL, 0, (dispatch_queue_t)[(id)objc_msgSend(*(id *)(a1 + 32), "silo") queue]);
  *(void *)(a1 + 352) = v2;
  int v6 = 300;
  sub_10044FD20(v7, "FallDelayBeforeShuttingDownAlgorithmsAfterLastClientDisconnect", &v6, 0);
  dispatch_time_t v3 = dispatch_time(0x8000000000000000, 1000000000 * v8);
  dispatch_source_set_timer(v2, v3, 0xFFFFFFFFFFFFFFFFLL, 0);
  int v4 = *(NSObject **)(a1 + 352);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_100A47100;
  handler[3] = &unk_1022A3020;
  handler[4] = a1;
  dispatch_source_set_event_handler(v4, handler);
  dispatch_resume(*(dispatch_object_t *)(a1 + 352));
}

void sub_100A47100(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  uint64_t v2 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    __int16 v4 = 2082;
    int v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Registration monitor - Stopping algorithms after timer fire\"}", (uint8_t *)v3, 0x12u);
  }
  sub_100A46E84(v1);
  *(unsigned char *)(v1 + 444) = 0;
}

unsigned __int8 *sub_100A471E8(uint64_t a1)
{
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  uint64_t v2 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Checking debug profile presence", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    *(_WORD *)int v13 = 0;
    LODWORD(v12) = 2;
    __int16 v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::checkDebugProfilePresence()", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  unsigned int v3 = sub_100A474E4();
  v13[0] = 0;
  id result = sub_10006ACBC(buf, "FallAdditionalProfileLoggingEnabled", v13, 0);
  uint64_t v5 = buf[1];
  if (v3 != (buf[1] != 0))
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    int v6 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 68289538;
      int v15 = 0;
      __int16 v16 = 2082;
      __int16 v17 = "";
      __int16 v18 = 1026;
      unsigned int v19 = v3;
      __int16 v20 = 1026;
      int v21 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Debug profile presence has been changed, wiping subject UUID\", \"Presence before\":%{public}hhd, \"Presence now\":%{public}hhd}", buf, 0x1Eu);
    }
    __int16 v7 = *(void **)(a1 + 160);
    if (v7)
    {
      [v7 clearUUID];
    }
    else
    {
      id v8 = [[CLFallServer alloc] initInUniverse:*(void *)(a1 + 32)];
      [v8 clearUUID];
    }
    +[NSString stringWithFormat:@"%d", v5, v12];
    uint64_t v9 = sub_1000A6958();
    sub_1004D258C(v9);
    uint64_t v10 = *(void *)sub_1000A6958();
    return (unsigned __int8 *)(*(uint64_t (**)(void))(v10 + 944))();
  }
  return result;
}

id sub_100A474E4()
{
  uint64_t v2 = 0;
  uint64_t v0 = sub_1000A6958();
  id result = (id)sub_1004D01D8(v0, @"LastFallAdditionalProfileLoggingEnabled", (CFTypeRef *)&v2);
  if (result) {
    return [v2 BOOLValue];
  }
  return result;
}

id sub_100A47528(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 10632) && *(void *)(a1 + 10680))
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v2 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 10696);
      *(_DWORD *)long long buf = 134217984;
      uint64_t v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "MaxMETs, on charger, setting timer interval to %f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::scheduleMetMinuteStatsCompute()", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    __int16 v4 = *(void **)(a1 + 10672);
    double v5 = *(double *)(a1 + 10696);
  }
  else
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    int v6 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 10720);
      *(_DWORD *)long long buf = 134217984;
      uint64_t v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "MaxMETs, off charger, setting timer interval to %f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::scheduleMetMinuteStatsCompute()", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    __int16 v4 = *(void **)(a1 + 10672);
    double v5 = *(double *)(a1 + 10720);
  }
  return [v4 setNextFireDelay:v5 interval:v5];
}

uint64_t sub_100A4785C(uint64_t a1)
{
  sub_100A45548(a1, @"FallDetectionOptInTime");
  double v3 = v2;
  if ((sub_100A39D2C() & 1) == 0 && (!sub_100A39DF0() || !*(void *)(a1 + 10656)))
  {
    uint64_t v4 = sub_1000A6958();
    sub_1004CF870(v4);
    uint64_t v5 = sub_1000A6958();
    sub_1004CF870(v5);
  }
  uint64_t result = sub_100A39D2C();
  if ((result & 1) != 0 || (uint64_t result = sub_100A39DF0(), result) && *(void *)(a1 + 10656))
  {
    if (v3 == 1.79769313e308)
    {
      CFAbsoluteTimeGetCurrent();
      return sub_100A45324(v7, @"FallDetectionOptInTime");
    }
  }
  return result;
}

void sub_100A47928()
{
}

void sub_100A47994()
{
}

double sub_100A479B8(uint64_t a1)
{
  if (*(float *)(a1 + 404) == 30.0 && sub_1000D2E34(0))
  {
    uint64_t v2 = sub_1000D2E34(0);
    if ((*(unsigned int (**)(void))(*(void *)(v2 + 56) + 56))() && *(float *)&buf[20] != 30.0)
    {
      *(_OWORD *)(a1 + 416) = *(_OWORD *)&buf[32];
      *(_OWORD *)(a1 + 428) = *(_OWORD *)&buf[44];
      long long v4 = *(_OWORD *)&buf[16];
      *(_OWORD *)(a1 + 384) = *(_OWORD *)buf;
      *(_OWORD *)(a1 + 400) = v4;
      sub_100A51DC8(a1, *(float *)(a1 + 404));
    }
  }
  long long v51 = xmmword_101D21EA0;
  long long v52 = xmmword_101D21EC0;
  *(void *)&long long v53 = 0x4100000041A00000;
  *((void *)&v53 + 1) = 0xA00000018;
  long long v54 = xmmword_101D21ED0;
  *(_DWORD *)__int16 v55 = 1110704128;
  HIDWORD(v5) = 2;
  *(_OWORD *)&v55[4] = xmmword_101D21EE0;
  *(_DWORD *)&v55[20] = 0;
  *(_DWORD *)&v55[23] = 0;
  double v50 = NAN;
  uint64_t v6 = *(void *)(a1 + 10680);
  if (v6)
  {
    if (sub_1006D2A18(v6, &v50, 0.9))
    {
      uint64_t v7 = sub_1006D2C08(*(void *)(a1 + 10680));
      goto LABEL_17;
    }
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    id v8 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Failed to get user mets percentile.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      __src[0] = 0;
      int v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::selectFallModels()", "%s\n", v35);
      if (v35 != (char *)buf) {
        free(v35);
      }
    }
  }
  uint64_t v7 = 0;
LABEL_17:
  LODWORD(v5) = *(_DWORD *)(a1 + 404);
  [*(id *)(a1 + 8072) setSelectionFeatureValue:@"Age" value:[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v5)];
  [*(id *)(a1 + 8072) setSelectionFeatureValue:@"Gender" value:[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 384))];
  LODWORD(v9) = *(_DWORD *)(a1 + 392);
  [*(id *)(a1 + 8072) setSelectionFeatureValue:@"Height" value:[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v9)];
  LODWORD(v10) = *(_DWORD *)(a1 + 396);
  [*(id *)(a1 + 8072) setSelectionFeatureValue:@"Weight" value:[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v10)];
  LODWORD(v11) = *(_DWORD *)(a1 + 420);
  [*(id *)(a1 + 8072) setSelectionFeatureValue:@"Pal" value:[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v11)];
  LODWORD(v12) = *(_DWORD *)(a1 + 400);
  [*(id *)(a1 + 8072) setSelectionFeatureValue:@"Vo2max" value:[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v12)];
  [*(id *)(a1 + 8072) setSelectionFeatureValue:@"MetMinPercentile" value:[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v50)];
  [*(id *)(a1 + 8072) setSelectionFeatureValue:@"MetMinCount" value:[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v7)];
  int v13 = *(void **)(a1 + 8072);
  if (sub_100A41940(a1)) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = sub_100A418E0();
  }
  [v13 setSelectionFeatureValue:@"BackgroundAWDLoggingEnabled" value:[NSNumber numberWithBool:v14]];
  [*(id *)(a1 + 8072) setSelectionFeatureValue:@"Workout" value:[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(void *)(a1 + 10656))];
  [*(id *)(a1 + 8072) setSelectionFeatureValue:@"HKWorkout" value:[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 10664))];
  if (([*(id *)(a1 + 8072) selectModels] & 1) == 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    int v15 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Could not select model based in provided features - Falling back to defaults", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      __src[0] = 0;
      unint64_t v34 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLFallNotifier::selectFallModels()", "%s\n", v34);
      if (v34 != (char *)buf) {
        free(v34);
      }
    }
  }
  [*(id *)(a1 + 8072) fillTripFallModel:buf];
  [*(id *)(a1 + 8072) fillSlipFallModel:__src];
  [*(id *)(a1 + 8072) fillOtherFallModel:v56];
  [*(id *)(a1 + 8072) fillFallThresholds:&v51];
  sub_101A22680(v48, "FallCyclingImpactGravityVarianceThreshold", "\nף=FallCyclingImpactCrownVarianceThreshold", 0);
  if (v48[0]) {
    DWORD1(v54) = v49;
  }
  sub_101A22680(v46, "FallCyclingImpactCrownVarianceThreshold", "\nף=FallCyclingImpactMaxAbsYThreshold", 0);
  if (v46[0]) {
    DWORD2(v54) = v47;
  }
  sub_101A22680(v44, "FallCyclingImpactMaxAbsYThreshold", &dword_101D6F7D0, 0);
  if (v44[0]) {
    HIDWORD(v54) = v45;
  }
  sub_101A22680(v42, "FallCyclingDistanceTraveledPostImpactThreshold", &dword_101D6F804, 0);
  if (v42[0]) {
    *(_DWORD *)__int16 v55 = v43;
  }
  sub_10044FD20(v40, "FallCyclingEpochsDetectedPostImpactThreshold", "\b", 0);
  if (v40[0]) {
    *(_DWORD *)&v55[4] = v41;
  }
  LODWORD(v58) = 0;
  sub_10044FD20(v39, "FallRefereeOperatingModeOverride", &v58, 0);
  if (v39[0]) {
    v55[23] = v39[4];
  }
  LODWORD(v58) = 0;
  sub_10044FD20(v38, "FallAllDayStateMachineOperatingModeOverride", &v58, 0);
  if (v38[0]) {
    v55[24] = v38[4];
  }
  LOBYTE(v58) = 0;
  sub_10006ACBC(v37, "FallCyclingStateMachineEnabledOverride", (unsigned __int8 *)&v58, 0);
  if (v37[1]) {
    char v16 = 1;
  }
  else {
    char v16 = 2;
  }
  if (v37[0]) {
    char v17 = v16;
  }
  else {
    char v17 = 0;
  }
  v55[25] = v17;
  LOBYTE(v58) = 0;
  sub_10006ACBC(v36, "FallAllDayStateMachineEnabledOverride", (unsigned __int8 *)&v58, 0);
  if (v36[1]) {
    char v18 = 1;
  }
  else {
    char v18 = 2;
  }
  if (v36[0]) {
    char v19 = v18;
  }
  else {
    char v19 = 0;
  }
  v55[26] = v19;
  __int16 v20 = (const void *)sub_1000D2E34(0);
  if (v20)
  {
    if (v21)
    {
      uint64_t v22 = (uint64_t)v21;
      sub_100595208();
      sub_100595390(v22, &v51);
    }
  }
  int v23 = (float *)(a1 + 7476);
  sub_1004EEDE0(a1 + 7476, (uint64_t)&v51);
  if (sub_100A3A90C(a1))
  {
    sub_10126E5EC(a1 + 10568, *(float *)(a1 + 7476));
    float v24 = v50;
    sub_10126E5C0(a1 + 10568, v24);
    sub_10126ECBC(a1 + 10568);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    int v25 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v58 = 68289282;
      __int16 v59 = 2082;
      int v60 = "";
      __int16 v61 = 2050;
      double v62 = v50;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLFitnessTrackingAllDayAWD: Updating user max mets\", \"value\":\"%{public}f\"}", (uint8_t *)&v58, 0x1Cu);
    }
    uint64_t v26 = sub_100C3AE20();
    float v27 = v50;
    sub_100C3CCF4(v26, v27);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    int v28 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
    {
      double v29 = *v23;
      uint64_t v58 = 68289282;
      __int16 v59 = 2082;
      int v60 = "";
      __int16 v61 = 2050;
      double v62 = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLFitnessTrackingAllDayAWD: Updating user behavioral threshold\", \"value\":\"%{public}f\"}", (uint8_t *)&v58, 0x1Cu);
    }
    uint64_t v30 = sub_100C3AE20();
    sub_100C3CAAC(v30, *v23);
  }
  memcpy((void *)(a1 + 8080), buf, 0x31CuLL);
  memcpy((void *)(a1 + 8876), __src, 0x31CuLL);
  memcpy((void *)(a1 + 9672), v56, 0x31CuLL);
  long long v31 = v54;
  *(_OWORD *)(a1 + 10500) = v53;
  *(_OWORD *)(a1 + 10516) = v31;
  *(_OWORD *)(a1 + 10532) = *(_OWORD *)v55;
  *(_OWORD *)(a1 + 10543) = *(_OWORD *)&v55[11];
  long long v32 = v52;
  *(_OWORD *)(a1 + 10468) = v51;
  *(_OWORD *)(a1 + 10484) = v32;
  double result = v50;
  *(double *)(a1 + 10560) = v50;
  return result;
}

void sub_100A4839C(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_100A4A0A0(a1, "CLFallNotifier", a2);
  *(void *)uint64_t v4 = off_1022DACF0;
  *(unsigned char *)(v4 + 109) = 0;
  *(_DWORD *)(v4 + 112) = -1;
  *(void *)(v4 + 120) = 0;
  *(void *)(a1 + 136) = [[CLFallLoggerManager alloc] initInUniverse:a2];
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = [[CLFallLogger alloc] initToDirectory:@"/var/root/Library/Caches/locationd/logs/newtonStats" prefix:@"newtonStats" rotation:0];
  *(void *)(a1 + 176) = [[CLFallLogger alloc] initToDirectory:@"/var/root/Library/Caches/locationd/logs/newtonStats" prefix:@"newtonState" rotation:0];
  *(void *)(a1 + 184) = [[CLFallLogger alloc] initToDirectory:@"/var/root/Library/Caches/locationd/logs/newtonStats" prefix:@"newtonSensors" rotation:0];
  *(void *)(a1 + 192) = [[CLFallLogger alloc] initToDirectory:@"/var/root/Library/Caches/locationd/logs/newtonStats" prefix:@"pressure" rotation:0];
  *(void *)(a1 + 200) = [[CLFallLogger alloc] initToDirectory:@"/var/root/Library/Caches/locationd/logs/newtonStats" prefix:@"heartRate" rotation:0];
  *(void *)(a1 + 208) = [[CLFallLogger alloc] initToDirectory:@"/var/root/Library/Caches/locationd/logs/newtonStats" prefix:@"wristState" rotation:0];
  *(void *)(a1 + 216) = [[CLFallLogger alloc] initToDirectory:@"/var/root/Library/Caches/locationd/logs/newtonStats" prefix:@"odometer" rotation:0];
  *(void *)(a1 + 224) = [[CLFallLogger alloc] initToDirectory:@"/var/root/Library/Caches/locationd/logs/newtonStats" prefix:@"falsePositiveSuppressionFeatures" rotation:0];
  *(void *)(a1 + 232) = [[CLFallLogger alloc] initToDirectory:@"/var/root/Library/Caches/locationd/logs/newtonStats" prefix:@"hgal" rotation:0];
  *(void *)(a1 + 240) = 0;
  uint64_t v5 = sub_1000A6958();
  *(void *)long long buf = 0;
  int v6 = sub_1000A699C(v5, "StatsRateLimitCounter", buf);
  double v7 = *(double *)buf;
  if (!v6) {
    double v7 = 0.0;
  }
  *(double *)(a1 + 248) = v7;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = [[CLFallTap2Radar alloc] initInUniverse:a2];
  sub_100EBBEB0(a1 + 272, (uint64_t)"CLFallNotifier", a1, 0.0);
  *(void *)(a1 + 320) = [*(id *)(a1 + 40) newTimer];
  *(void *)(a1 + 328) = [*(id *)(a1 + 40) newTimer];
  *(void *)(a1 + 336) = [*(id *)(a1 + 40) newTimer];
  *(void *)(a1 + 344) = [*(id *)(a1 + 40) newTimer];
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = xmmword_101D6F6C4;
  *(_OWORD *)(a1 + 400) = unk_101D6F6D4;
  *(_OWORD *)(a1 + 416) = xmmword_101D6F6E4;
  *(_OWORD *)(a1 + 428) = *(long long *)((char *)&xmmword_101D6F6E4 + 12);
  *(_DWORD *)(a1 + 444) = 0;
  *(_DWORD *)(a1 + 447) = 0;
  *(void *)(a1 + 456) = 0x18600000000;
  *(_OWORD *)(a1 + 6704) = 0u;
  *(_OWORD *)(a1 + 6720) = 0u;
  *(_DWORD *)(a1 + 6735) = 0;
  *(_OWORD *)(a1 + 6739) = xmmword_101D6F590;
  *(void *)(a1 + 6755) = 0xFF7FFFFF7F7FFFFFLL;
  *(_DWORD *)(a1 + 6763) = -8388609;
  *(void *)(a1 + 6767) = 0;
  *(void *)(a1 + 6775) = 0x7F7FFFFF00000000;
  *(_DWORD *)(a1 + 6783) = 2139095039;
  *(_DWORD *)(a1 + 6835) = 0;
  *(_OWORD *)(a1 + 6819) = 0u;
  *(_OWORD *)(a1 + 6803) = 0u;
  *(_OWORD *)(a1 + 6787) = 0u;
  int32x4_t v8 = vdupq_n_s32(0x7F7FFFFFu);
  *(int32x4_t *)(a1 + 6839) = v8;
  *(_DWORD *)(a1 + 6855) = -8388609;
  *(_WORD *)(a1 + 6859) = 1;
  *(unsigned char *)(a1 + 6861) = 0;
  *(_OWORD *)(a1 + 6868) = 0u;
  *(_OWORD *)(a1 + 6884) = 0u;
  *(_OWORD *)(a1 + 6900) = 0u;
  *(_OWORD *)(a1 + 6914) = 0u;
  *(_OWORD *)(a1 + 6930) = xmmword_101D6F590;
  *(void *)(a1 + 6946) = 0xFF7FFFFF7F7FFFFFLL;
  *(_DWORD *)(a1 + 6954) = -8388609;
  *(void *)(a1 + 6958) = 0;
  *(void *)(a1 + 6966) = 0x7F7FFFFF00000000;
  *(_DWORD *)(a1 + 6974) = 2139095039;
  *(_DWORD *)(a1 + 7026) = 0;
  *(_OWORD *)(a1 + 7010) = 0u;
  *(_OWORD *)(a1 + 6994) = 0u;
  *(_OWORD *)(a1 + 6978) = 0u;
  *(int32x4_t *)(a1 + 7030) = v8;
  *(_DWORD *)(a1 + 7046) = -8388609;
  *(_WORD *)(a1 + 7050) = 1;
  *(unsigned char *)(a1 + 7052) = 0;
  *(_OWORD *)(a1 + 7105) = 0u;
  *(_OWORD *)(a1 + 7091) = 0u;
  *(_OWORD *)(a1 + 7075) = 0u;
  *(_OWORD *)(a1 + 7059) = 0u;
  *(_OWORD *)(a1 + 7121) = xmmword_101D6F590;
  *(void *)(a1 + 7137) = 0xFF7FFFFF7F7FFFFFLL;
  *(_DWORD *)(a1 + 7145) = -8388609;
  *(void *)(a1 + 7149) = 0;
  *(void *)(a1 + 7157) = 0x7F7FFFFF00000000;
  *(_DWORD *)(a1 + 7165) = 2139095039;
  *(_DWORD *)(a1 + 7217) = 0;
  *(_OWORD *)(a1 + 7201) = 0u;
  *(_OWORD *)(a1 + 7185) = 0u;
  *(_OWORD *)(a1 + 7169) = 0u;
  *(int32x4_t *)(a1 + 7221) = v8;
  *(_DWORD *)(a1 + 7237) = -8388609;
  *(_WORD *)(a1 + 7241) = 1;
  *(unsigned char *)(a1 + 7243) = 0;
  *(_OWORD *)(a1 + 7296) = 0u;
  *(_OWORD *)(a1 + 7282) = 0u;
  *(_OWORD *)(a1 + 7266) = 0u;
  *(_OWORD *)(a1 + 7250) = 0u;
  *(_OWORD *)(a1 + 7312) = xmmword_101D6F590;
  *(void *)(a1 + 7328) = 0xFF7FFFFF7F7FFFFFLL;
  *(_DWORD *)(a1 + 7336) = -8388609;
  *(void *)(a1 + 7340) = 0;
  *(_DWORD *)(a1 + 7348) = 0;
  *(void *)(a1 + 7352) = v8.i64[0];
  *(_DWORD *)(a1 + 7408) = 0;
  *(_OWORD *)(a1 + 7392) = 0u;
  *(_OWORD *)(a1 + 7376) = 0u;
  *(_OWORD *)(a1 + 7360) = 0u;
  *(int32x4_t *)(a1 + 7412) = v8;
  *(_DWORD *)(a1 + 7428) = -8388609;
  *(_WORD *)(a1 + 7432) = 1;
  *(unsigned char *)(a1 + 7434) = 0;
  *(_DWORD *)(a1 + 7472) = 0;
  *(_OWORD *)(a1 + 7457) = 0u;
  *(_OWORD *)(a1 + 7441) = 0u;
  sub_1004EEE88(a1 + 7476);
  *(void *)(a1 + 7600) = 0;
  *(_OWORD *)(a1 + 7584) = 0u;
  *(_OWORD *)(a1 + 7568) = 0u;
  sub_101448354(a1 + 7608);
  *(unsigned char *)(a1 + 7832) = 0;
  *(_OWORD *)(a1 + 7792) = 0u;
  *(void *)(a1 + 7807) = 0;
  *(void *)(a1 + 7816) = 0;
  *(void *)(a1 + 7822) = 0;
  *(_OWORD *)(a1 + 7840) = 0u;
  *(_OWORD *)(a1 + 7856) = 0u;
  *(_OWORD *)(a1 + 7872) = 0u;
  *(_OWORD *)(a1 + 7888) = 0u;
  *(_OWORD *)(a1 + 7904) = 0u;
  *(_OWORD *)(a1 + 7920) = 0u;
  *(_OWORD *)(a1 + 7936) = 0u;
  *(_OWORD *)(a1 + 7952) = 0u;
  *(_OWORD *)(a1 + 7968) = 0u;
  *(_OWORD *)(a1 + 7984) = 0u;
  *(_OWORD *)(a1 + 8000) = 0u;
  *(_OWORD *)(a1 + 8016) = 0u;
  *(_OWORD *)(a1 + 8032) = 0u;
  *(void *)(a1 + 8048) = a1 + 8048;
  *(void *)(a1 + 8056) = a1 + 8048;
  *(void *)(a1 + 8064) = 0;
  *(void *)(a1 + 8072) = objc_alloc_init(CLFallModelSelector);
  double v9 = sub_1004EEE88(a1 + 10468);
  *(void *)(a1 + 10560) = 0x7FF8000000000000;
  sub_10126E450(a1 + 10568, *(void *)(a1 + 40), v9);
  *(unsigned char *)(a1 + 10632) = 0;
  *(void *)(a1 + 10640) = 0;
  *(void *)(a1 + 10656) = 0;
  *(_DWORD *)(a1 + 10664) = 0;
  *(void *)(a1 + 10672) = [*(id *)(a1 + 40) newTimer];
  *(void *)(a1 + 10680) = 0;
  *(void *)long long buf = 0x4066800000000000;
  sub_101A1F180((unsigned __int8 *)(a1 + 10688), "FallMetMinuteStatsComputeInterval", buf, 0);
  *(void *)long long buf = 0x40AC200000000000;
  sub_101A1F180((unsigned __int8 *)(a1 + 10712), "FallMetMinuteStatsComputeIntervalOffCharger", buf, 0);
  *(_WORD *)(a1 + 10736) = 0;
  *(unsigned char *)(a1 + 10738) = 0;
  *(_OWORD *)(a1 + 10744) = 0u;
  *(_OWORD *)(a1 + 10760) = 0u;
  *(_OWORD *)(a1 + 10776) = 0u;
  *(_OWORD *)(a1 + 10792) = 0u;
  *(_OWORD *)(a1 + 10808) = 0u;
  *(_OWORD *)(a1 + 10824) = 0u;
  *(_OWORD *)(a1 + 10840) = 0u;
  *(_OWORD *)(a1 + 10856) = 0u;
  *(_OWORD *)(a1 + 10872) = 0u;
  *(_OWORD *)(a1 + 10888) = 0u;
  *(_OWORD *)(a1 + 10904) = 0u;
  *(_OWORD *)(a1 + 10920) = 0u;
  operator new();
}

void sub_100A49D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v18 = v12[1366];
  v12[1366] = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = v12[1365];
  v12[1365] = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = v12[1364];
  v12[1364] = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = v12[1363];
  v12[1363] = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  uint64_t v22 = v12[1362];
  v12[1362] = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  uint64_t v23 = v12[1361];
  v12[1361] = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = v12[1360];
  v12[1360] = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  uint64_t v25 = v12[1359];
  v12[1359] = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = v12[1358];
  v12[1358] = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  uint64_t v27 = *v16;
  *char v16 = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  uint64_t v28 = *v15;
  uint64_t *v15 = 0;
  if (v28) {
    sub_100A60654((uint64_t)v15, v28);
  }
  sub_10126E4B8(v14);
  sub_1003B2350(v13);
  sub_1000D816C(v12 + 962);
  sub_1000D816C(v12 + 956);
  sub_100EBBF9C(a12);
  sub_100A4E9E0((uint64_t)v12);
  _Unwind_Resume(a1);
}

uint64_t sub_100A4A0A0(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_1022DAFD8;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_100A4A130(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A4A14C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t result = sub_100A3A90C(v5);
  if (!result) {
    return result;
  }
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  double v7 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    uint64_t v30 = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLFallImpactMetrics: Logging impact at time %llu", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLFallNotifier::CLFallNotifier(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v22);
    if (v22 != (char *)buf) {
      free(v22);
    }
  }
  (*(void (**)(uint64_t))(*(void *)a3 + 16))(a3);
  uint64_t v8 = sub_1002D4CD0(a3);
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  double v9 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    uint64_t v30 = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "CLFitnessTrackingAllDayAWD: Logging impact cancelation reason 0x%llx", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLFallNotifier::CLFallNotifier(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v23);
    if (v23 != (char *)buf) {
      free(v23);
    }
  }
  uint64_t v10 = sub_100C3AE20();
  uint64_t result = sub_100C3B8E8(v10, v8);
  uint64_t v11 = *(void *)(v5 + 10656);
  if (v11 <= 14)
  {
    if (!v11) {
      return result;
    }
    if (v11 != 4)
    {
LABEL_42:
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      uint64_t v20 = qword_1024190F8;
      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134217984;
        uint64_t v30 = v8;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "CLFitnessTrackingAllDayAWD: Logging other workout impact cancelation reason 0x%llx", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        uint64_t v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLFallNotifier::CLFallNotifier(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v28);
        if (v28 != (char *)buf) {
          free(v28);
        }
      }
      uint64_t v21 = sub_100C3AE20();
      return sub_100C3C7B4(v21, v8);
    }
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v14 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v30 = v8;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "CLFitnessTrackingAllDayAWD: Logging outdoor cycling impact cancelation reason 0x%llx", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      uint64_t v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLFallNotifier::CLFallNotifier(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v25);
      if (v25 != (char *)buf) {
        free(v25);
      }
    }
    uint64_t v15 = sub_100C3AE20();
    return sub_100C3BBDC(v15, v8);
  }
  else
  {
    switch(v11)
    {
      case 15:
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        char v16 = qword_1024190F8;
        if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 134217984;
          uint64_t v30 = v8;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "CLFitnessTrackingAllDayAWD: Logging outdoor walking impact cancelation reason 0x%llx", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190F0 != -1) {
            dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
          }
          uint64_t v26 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLFallNotifier::CLFallNotifier(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v26);
          if (v26 != (char *)buf) {
            free(v26);
          }
        }
        uint64_t v17 = sub_100C3AE20();
        return sub_100C3BED4(v17, v8);
      case 17:
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        uint64_t v18 = qword_1024190F8;
        if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 134217984;
          uint64_t v30 = v8;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "CLFitnessTrackingAllDayAWD: Logging outdoor running impact cancelation reason 0x%llx", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190F0 != -1) {
            dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
          }
          uint64_t v27 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLFallNotifier::CLFallNotifier(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v27);
          if (v27 != (char *)buf) {
            free(v27);
          }
        }
        uint64_t v19 = sub_100C3AE20();
        return sub_100C3C1C8(v19, v8);
      case 24:
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        double v12 = qword_1024190F8;
        if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 134217984;
          uint64_t v30 = v8;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "CLFitnessTrackingAllDayAWD: Logging hiking impact cancelation reason 0x%llx", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190F0 != -1) {
            dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
          }
          uint64_t v24 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLFallNotifier::CLFallNotifier(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v24);
          if (v24 != (char *)buf) {
            free(v24);
          }
        }
        uint64_t v13 = sub_100C3AE20();
        return sub_100C3C4C0(v13, v8);
      default:
        goto LABEL_42;
    }
  }
}

uint64_t sub_100A4AB50(uint64_t a1)
{
  return sub_100A4AB58(*(void *)(a1 + 32));
}

uint64_t sub_100A4AB58(uint64_t a1)
{
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  uint64_t v2 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289539;
    v4[1] = 0;
    __int16 v5 = 2082;
    int v6 = "";
    __int16 v7 = 1025;
    int v8 = sub_100A3529C();
    __int16 v9 = 1025;
    int v10 = sub_100A35328();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Bridge settings were toggled\", \"enabled\":%{private}d, \"onlyDuringWorkouts\":%{private}d}", (uint8_t *)v4, 0x1Eu);
  }
  sub_100A479B8(a1);
  sub_100A4785C(a1);
  return sub_100A4225C(a1, 0);
}

void sub_100A4AC78(uint64_t *a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DAF18);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    uint64_t v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onFallStatsData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DAF18);
    }
    __int16 v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 2082;
      uint64_t v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onFallStatsData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  sub_100A507D0(a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_100A4AE2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A4AE4C(long long *a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DAF18);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    uint64_t v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onFallEventData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DAF18);
    }
    __int16 v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 2082;
      uint64_t v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onFallEventData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  sub_100A52388(a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_100A4B000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A4B020(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a3 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DAF18);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v9 = 1;
    int v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onImpactDataAccel800", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DAF18);
    }
    char v7 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v11 = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2082;
      uint64_t v15 = "activity";
      __int16 v16 = 2050;
      uint64_t v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onImpactDataAccel800\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v9 = 0;
  }
  sub_100A527CC((unsigned __int8 *)a3, a1, a2);
  if (v9) {
    os_activity_scope_leave(&state);
  }
}

void sub_100A4B1DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A4B1FC(uint64_t a1, int a2, uint64_t a3)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a3 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DAF18);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v9 = 1;
    int v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onImpactDataHgal", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DAF18);
    }
    char v7 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v11 = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2082;
      uint64_t v15 = "activity";
      __int16 v16 = 2050;
      uint64_t v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onImpactDataHgal\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v9 = 0;
  }
  sub_100A52AC4((unsigned __int8 *)a3, a1, a2);
  if (v9) {
    os_activity_scope_leave(&state);
  }
}

void sub_100A4B3B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A4B3D8(uint64_t *a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DAF18);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    uint64_t v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onImpactDataGyro200", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DAF18);
    }
    __int16 v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      int v11 = "";
      __int16 v12 = 2082;
      uint64_t v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onImpactDataGyro200\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  sub_100A52D68(a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_100A4B58C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A4B5AC(uint64_t *a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DAF18);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    uint64_t v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onImpactDataQuaternion6", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DAF18);
    }
    __int16 v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      int v11 = "";
      __int16 v12 = 2082;
      uint64_t v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onImpactDataQuaternion6\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  sub_100A530F8(a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_100A4B760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A4B780(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DAF18);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v6 = 1;
    double v3 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onImpactDataStart", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v3, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DAF18);
    }
    uint64_t v4 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v8 = 0;
      __int16 v9 = 2082;
      __int16 v10 = "";
      __int16 v11 = 2082;
      __int16 v12 = "activity";
      __int16 v13 = 2050;
      uint64_t v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onImpactDataStart\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v6 = 0;
  }
  sub_100A5A83C(a2);
  if (v6) {
    os_activity_scope_leave(&state);
  }
}

void sub_100A4B924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A4B944(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DAF18);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    uint64_t v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onFalsePositiveSuppressionFeatures", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DAF18);
    }
    __int16 v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2082;
      __int16 v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onFalsePositiveSuppressionFeatures\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  sub_100A53484(a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_100A4BAF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A4BB18(uint8_t *a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DAF18);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    uint64_t v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onFeatureDistributionMaxAccelNorm", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DAF18);
    }
    __int16 v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2082;
      __int16 v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onFeatureDistributionMaxAccelNorm\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  sub_100A53838(a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_100A4BCCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A4BCEC(unsigned __int8 *a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DAF18);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    uint64_t v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onFeatureDistributionJerkVectorMagnitude", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DAF18);
    }
    __int16 v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2082;
      __int16 v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onFeatureDistributionJerkVectorMagnitude\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  sub_100A53FC8(a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_100A4BEA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A4BEC0(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DAF18);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    uint64_t v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onFeatureDistributionMaxAbsXYZ", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DAF18);
    }
    __int16 v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2082;
      __int16 v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onFeatureDistributionMaxAbsXYZ\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  sub_100A54760(a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_100A4C074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A4C094(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DAF18);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    uint64_t v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onFallCancelReason", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DAF18);
    }
    __int16 v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2082;
      __int16 v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onFallCancelReason\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  sub_100A3A968(a2, *(void *)(a1 + 16), *(_DWORD *)(a1 + 32), *(void *)(a1 + 24));
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_100A4C24C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A4C26C(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DAF18);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    uint64_t v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onPressureData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DAF18);
    }
    __int16 v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2082;
      __int16 v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onPressureData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  sub_100A5AA4C(a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_100A4C420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A4C440(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DAF18);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    uint64_t v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onFallDistance", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DAF18);
    }
    __int16 v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2082;
      __int16 v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onFallDistance\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  sub_10120CE34(*(void *)(a2 + 128), a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_100A4C5F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A4C614(uint64_t a1, _DWORD *a2, unsigned __int8 *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DAF18);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onWatchOrientationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DAF18);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onWatchOrientationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100A5ACFC(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100A4C7D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A4C7F0(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DAF18);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onAppMonitorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DAF18);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onAppMonitorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100A5AFC4(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100A4C9AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A4C9CC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DAF18);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onHeartRateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DAF18);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onHeartRateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100A5B058((unsigned __int8 *)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100A4CB88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A4CBA8(uint64_t a1, _DWORD *a2, long long *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DAF18);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onUserInfoNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DAF18);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onUserInfoNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100A5B26C(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100A4CD64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A4CD84(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DAF18);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onDataProtectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DAF18);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onDataProtectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100A5B308((void *)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100A4CF40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A4CF60(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DAF18);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onWatchOrientationSettingsNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DAF18);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onWatchOrientationSettingsNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100A5B46C((void *)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100A4D11C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A4D13C(uint64_t a1, _DWORD *a2, long long *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DAF18);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onMotionStateMediatorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DAF18);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onMotionStateMediatorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100A4FB38(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100A4D2F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A4D318(uint64_t a1, _DWORD *a2, long long *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DAF18);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onOdometerUpdate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DAF18);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onOdometerUpdate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100A500F4(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100A4D4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A4D4F4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DAF18);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onBatteryNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DAF18);
    }
    int v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onBatteryNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  if (*a2 == 7)
  {
    int v9 = *(unsigned __int8 *)(a3 + 9);
    if (*(unsigned __int8 *)(a4 + 10632) != v9)
    {
      *(unsigned char *)(a4 + 10632) = v9;
      sub_100A47528(a4);
    }
  }
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100A4D6D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A4D6F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DAF18);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    __int16 v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onDataCollectionChangedNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DAF18);
    }
    char v11 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      __int16 v20 = 2082;
      uint64_t v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onDataCollectionChangedNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v15 = 0;
  }
  id v12 = [*(id *)(a2 + 32) silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  _DWORD v13[2] = sub_100A5F75C;
  v13[3] = &unk_1022ACFE0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  [v12 sync:v13];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_100A4D90C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A4D92C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  uint64_t v2 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Unregistering for HR Notifications", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    double v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLFallNotifier::CLFallNotifier(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  [*(id *)(*(void *)(v1 + 10896) + 16) unregister:*(void *)(*(void *)(v1 + 10896) + 8) forNotification:4];
  *(unsigned char *)(v1 + 448) = 1;
  sub_100A44C10(v1);
}

id sub_100A4DAE0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  double v3 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Fail safe sensor recording handler", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    __int16 v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLFallNotifier::CLFallNotifier(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  if (*(unsigned char *)(v2 + 446)) {
    *(_WORD *)(v2 + 447) = 257;
  }
  [*(id *)(v2 + 40) async:*(void *)(a1 + 32)];
  return [*(id *)(v2 + 320) setNextFireDelay:1.79769313e308];
}

void sub_100A4DCA8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = [sub_100A4DCF8(v1) mutableCopy];
  [v2 setObject:&off_102392ED0 forKey:@"isADLImpact"];

  *(unsigned char *)(v1 + 450) = 0;
}

id sub_100A4DCF8(uint64_t a1)
{
  id v2 = [[[objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLNatalimetryNotifier"), "syncgetUserProfile") mutableCopy];
  [v2 setObject:[+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", CFAbsoluteTimeGetCurrent())] forKey:@"CMTimestamp"];
  [v2 setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100A39D2C())] forKey:@"CMIsFallDetectionFeatureEnabled"];
  [v2 setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100A39DF0())] forKey:@"CMIsFallDetectionDuringWorkoutFeatureEnabled"];
  if (sub_100A39D2C())
  {
    BOOL v3 = 1;
  }
  else if (sub_100A39DF0())
  {
    BOOL v3 = *(void *)(a1 + 10656) != 0;
  }
  else
  {
    BOOL v3 = 0;
  }
  [v2 setObject:[NSNumber numberWithBool:v3] forKey:@"CMFallDetectionShouldEnableFallDetection"];
  LODWORD(v4) = *(_DWORD *)(a1 + 7476);
  [v2 setObject:[+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v4)] forKey:@"CMImpactMaxAccelNormAlertThreshold"];
  LODWORD(v5) = *(_DWORD *)(a1 + 7480);
  [v2 setObject:[NSNumber numberWithFloat:v5] forKey:@"CMImpactMaxAccelNormLoggingStatsThreshold"];
  LODWORD(v6) = *(_DWORD *)(a1 + 7484);
  [v2 setObject:[NSNumber numberWithFloat:v6] forKey:@"CMImpactMaxAccelNormLoggingHeartRateThreshold"];
  LODWORD(v7) = *(_DWORD *)(a1 + 7488);
  [v2 setObject:[+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v7)] forKey:@"CMImpactMaxAccelNormLoggingHighResolutionSensorDataThreshold"];
  LODWORD(v8) = *(_DWORD *)(a1 + 7492);
  [v2 setObject:[NSNumber numberWithFloat:v8] forKey:@"CMTripFallPosteriorRatioDetectionThreshold"];
  LODWORD(v9) = *(_DWORD *)(a1 + 7496);
  [v2 setObject:[+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v9)] forKey:@"CMSlipFallPosteriorRatioDetectionThreshold"];
  LODWORD(v10) = *(_DWORD *)(a1 + 7500);
  [v2 setObject:[NSNumber numberWithFloat:v10] forKey:@"CMOtherFallPosteriorRatioDetectionThreshold"];
  LODWORD(v11) = *(_DWORD *)(a1 + 7504);
  [v2 setObject:[NSNumber numberWithFloat:v11] forKey:@"CMTripNearFallPosteriorRatioDetectionThreshold"];
  LODWORD(v12) = *(_DWORD *)(a1 + 7508);
  [v2 setObject:[+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v12)] forKey:@"CMSlipNearFallPosteriorRatioDetectionThreshold"];
  LODWORD(v13) = *(_DWORD *)(a1 + 7512);
  [v2 setObject:[+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v13)] forKey:@"CMOtherNearFallPosteriorRatioDetectionThreshold"];
  double v23 = NAN;
  uint64_t v24 = 0x7FF8000000000000;
  double v21 = NAN;
  double v22 = NAN;
  uint64_t v14 = *(void *)(a1 + 10680);
  if (v14)
  {
    sub_1006D2A18(v14, (double *)&v24, 0.9);
    sub_1006D2A18(*(void *)(a1 + 10680), &v23, 0.9);
    sub_1006D2A18(*(void *)(a1 + 10680), &v22, 0.95);
    sub_1006D2A18(*(void *)(a1 + 10680), &v21, 0.98);
    double v15 = *(double *)&v24;
  }
  else
  {
    double v15 = NAN;
  }
  [v2 setObject:[+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v15)] forKey:@"CMMetMinutePercentileActual"];
  [v2 setObject:[+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v23)] forKey:@"CMMetMinutePercentile90"];
  [v2 setObject:[+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v22)] forKey:@"CMMetMinutePercentile95"];
  [v2 setObject:[NSNumber numberWithDouble:v21] forKey:@"CMMetMinutePercentile98"];
  [v2 setObject:[NSNumber numberWithInteger:*((int *)(a1 + 10656))] forKey:@"CMWorkoutType"];
  if (!*(unsigned char *)(a1 + 446) || !*(unsigned char *)(a1 + 447) || (double v16 = 0.0, !*(unsigned char *)(a1 + 448)))
  {
    if (!*(unsigned char *)(a1 + 449) || (double v16 = 1.0, !*(unsigned char *)(a1 + 448))) {
      double v16 = 0.0;
    }
  }
  [v2 setObject:[NSNumber numberWithDouble:v16] forKey:@"CMIsNearFall"];
  [v2 setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100A39D2C())] forKey:@"isFallDetectionFeatureEnabled"];
  int v17 = +[NSString stringWithFormat:@"%@", v2];
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  __int16 v18 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v19 = [(NSString *)v17 UTF8String];
    *(_DWORD *)long long buf = 68289283;
    int v26 = 0;
    __int16 v27 = 2082;
    uint64_t v28 = "";
    __int16 v29 = 2081;
    uint64_t v30 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"User Profile Dictionnary\", \"content\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
  return v2;
}

id sub_100A4E1BC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  BOOL v3 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Received fall buffer flush packet", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    double v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLFallNotifier::CLFallNotifier(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return [*(id *)(v2 + 40) async:*(void *)(a1 + 32)];
}

id sub_100A4E360(uint64_t a1, char a2, uint64_t a3, uint64_t a4, unsigned int a5, double a6)
{
  uint64_t v9 = *(void *)(a1 + 32);
  double v10 = +[NSData dataWithBytes:a4 length:a5];
  double v11 = *(void **)(v9 + 40);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  _DWORD v13[2] = sub_100A4E420;
  v13[3] = &unk_1022DAE10;
  char v14 = a2;
  v13[4] = v10;
  v13[5] = v9;
  *(double *)&v13[6] = a6;
  v13[7] = a3;
  return [v11 async:v13];
}

id sub_100A4E420(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 40) + 136) logSensorType:*(unsigned __int8 *)(a1 + 64) data:*(void *)(a1 + 32) startTime:*(void *)(a1 + 56) timestamp:*(double *)(a1 + 48)];
}

uint64_t sub_100A4E43C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  uint64_t v2 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    __int16 v5 = 2082;
    double v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Client discovery is now considered complete\"}", (uint8_t *)v4, 0x12u);
  }
  return sub_100A46EBC(v1);
}

void sub_100A4E520(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DAF18);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    double v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFallNotifier::onDarwinNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DAF18);
    }
    double v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      char v14 = "";
      __int16 v15 = 2082;
      double v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFallNotifier::onDarwinNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  sub_100A5CEB8((unsigned __int8 *)a4, v6, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_100A4E6D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

double sub_100A4E6F4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 10680);
  if (v2 && !sub_1006D2CA8(v2, 1800.0, 0.9))
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    __int16 v5 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 68289026;
      int v7 = 0;
      __int16 v8 = 2082;
      uint64_t v9 = "";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"MaxMETs, Done computing stats.\"}", (uint8_t *)&v6, 0x12u);
    }
    return sub_100A479B8(v1);
  }
  else
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    BOOL v3 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 68289026;
      int v7 = 0;
      __int16 v8 = 2082;
      uint64_t v9 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"MaxMETs, Queuing stats compute.\"}", (uint8_t *)&v6, 0x12u);
    }
  }
  return result;
}

uint64_t sub_100A4E884()
{
  int v1 = 25;
  sub_10044FD20(v2, "FallMinimumOffChargerDurationKey", &v1, 0);
  int v1 = v3;
  sub_10044FD20(v2, "FallDelayBeforeWristAndChargerGating", &v1, 0);
  return v3;
}

void sub_100A4E8E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  dispatch_source_cancel(*(dispatch_source_t *)(v1 + 368));
  dispatch_release(*(dispatch_object_t *)(v1 + 368));
  *(void *)(v1 + 368) = 0;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  uint64_t v2 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    __int16 v4 = 2082;
    __int16 v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Wrist/Charger gating is now enabled\"}", (uint8_t *)v3, 0x12u);
  }
  *(unsigned char *)(v1 + 7610) = 1;
}

uint64_t sub_100A4E9E0(uint64_t a1)
{
  *(void *)a1 = off_1022DAFD8;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_100A4EA64(void *a1)
{
  *a1 = off_1022DACF0;
  sub_100A4F434((uint64_t)a1);
  uint64_t v2 = a1[1366];
  a1[1366] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1365];
  a1[1365] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[1364];
  a1[1364] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = a1[1363];
  a1[1363] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = a1[1362];
  a1[1362] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = a1[1361];
  a1[1361] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = a1[1360];
  a1[1360] = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = a1[1359];
  a1[1359] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = a1[1358];
  a1[1358] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = a1[1343];
  a1[1343] = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = a1[1335];
  a1[1335] = 0;
  if (v12) {
    sub_100A60654((uint64_t)(a1 + 1335), v12);
  }
  sub_10126E4B8(a1 + 1321);
  sub_1003B2350(a1 + 1006);
  sub_1000D816C(a1 + 962);
  sub_1000D816C(a1 + 956);
  sub_100EBBF9C(a1 + 34);

  return sub_100A4E9E0((uint64_t)a1);
}

void sub_100A4ECF0(void *a1)
{
  sub_100A4EA64(a1);

  operator delete();
}

uint64_t sub_100A4ED28(uint64_t a1)
{
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  uint64_t v2 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned __int8 v7 = 0;
    sub_10006ACBC(buf, "FallStatsEnabled", &v7, 0);
    int v3 = buf[1];
    unsigned __int8 v7 = 0;
    sub_10006ACBC(buf, "FallStatsPressureEnabled", &v7, 0);
    int v4 = buf[1];
    unsigned __int8 v7 = 0;
    sub_10006ACBC(buf, "FallStatsSensorRecordingEnabled", &v7, 0);
    int v5 = buf[1];
    *(_DWORD *)long long buf = 68289795;
    int v9 = 0;
    __int16 v10 = 2082;
    uint64_t v11 = "";
    __int16 v12 = 1025;
    int v13 = v3;
    __int16 v14 = 1025;
    int v15 = v4;
    __int16 v16 = 1025;
    int v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Data collection setting was toggled\", \"stats\":%{private}d, \"presssure\":%{private}d, \"sensor\":%{private}d}", buf, 0x24u);
  }
  sub_100A479B8(a1);
  return sub_100A4225C(a1, 0);
}

void sub_100A4EE9C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (a2)
  {
    if (sub_100A41728(*(void *)(a1 + 32)))
    {
      [a3 timeIntervalSinceDate:a2];
      double v11 = v10;
      if (v10 < 30.0)
      {
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        uint64_t v12 = qword_1024190F8;
        if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 68289538;
          int v30 = 0;
          __int16 v31 = 2082;
          long long v32 = "";
          __int16 v33 = 2050;
          double v34 = v11;
          __int16 v35 = 1026;
          int v36 = 30;
          int v13 = "{\"msg%{public}.0s\":\"Flush handler being invoked - payload is too short to be sent\", \"actual duratio"
                "n\":\"%{public}f\", \"required duration\":%{public}d}";
          __int16 v14 = v12;
          uint32_t v15 = 34;
LABEL_17:
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v13, buf, v15);
          goto LABEL_24;
        }
        goto LABEL_24;
      }
      if ([*(id *)(v5 + 160) sendData:a4 metaData:a5 start:a2 end:a3])
      {
        sub_100A4648C(v5, v11);
        goto LABEL_24;
      }
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      uint64_t v18 = qword_1024190F8;
      if (!os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
      {
LABEL_24:
        if (*(unsigned char *)(v5 + 446) && *(unsigned char *)(v5 + 447) && *(unsigned char *)(v5 + 448)
          || !*(unsigned char *)(v5 + 449)
          || !*(unsigned char *)(v5 + 448))
        {
          char v19 = 0;
        }
        else
        {
          if (*(void *)(v5 + 10656))
          {
            if (qword_1024190F0 != -1) {
              dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
            }
            __int16 v16 = qword_1024190F8;
            if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 68289026;
              int v30 = 0;
              __int16 v31 = 2082;
              long long v32 = "";
              int v17 = "{\"msg%{public}.0s\":\"Avoiding tap to radar for near falls during workouts.\"}";
              goto LABEL_34;
            }
            goto LABEL_39;
          }
          char v19 = 1;
        }
        __int16 v20 = *(void **)(v5 + 264);
        uint64_t v21 = *(unsigned __int8 *)(v5 + 6868);
        uint64_t v22 = v5;
        uint64_t v23 = *(unsigned __int8 *)(v5 + 6869);
        char v24 = sub_100A41808();
        BYTE2(v28) = sub_100A41874();
        BYTE1(v28) = v24;
        LOBYTE(v28) = v19;
        uint64_t v25 = v23;
        uint64_t v5 = v22;
        [v20 trigger:a4 metaData:a5 start:a2 end:a3 response:v21 resolution:v25 isNearFall:v28];
LABEL_37:
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        goto LABEL_39;
      }
      *(_DWORD *)long long buf = 68289026;
      int v30 = 0;
      __int16 v31 = 2082;
      long long v32 = "";
      int v13 = "{\"msg%{public}.0s\":\"Flush handler being invoked - payload was not sent because watch has not been unlocke"
            "d since last boot\"}";
    }
    else
    {
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      uint64_t v18 = qword_1024190F8;
      if (!os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_24;
      }
      *(_DWORD *)long long buf = 68289026;
      int v30 = 0;
      __int16 v31 = 2082;
      long long v32 = "";
      int v13 = "{\"msg%{public}.0s\":\"Flush handler being invoked - no payload to be sent as opt-in data collection is not enabled\"}";
    }
    __int16 v14 = v18;
    uint32_t v15 = 18;
    goto LABEL_17;
  }
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  __int16 v16 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289026;
    int v30 = 0;
    __int16 v31 = 2082;
    long long v32 = "";
    int v17 = "{\"msg%{public}.0s\":\"Flush handler being invoked - no GM payload to be sent\"}";
LABEL_34:
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v17, buf, 0x12u);
    goto LABEL_37;
  }
LABEL_39:
  int v26 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Releasing sensor data collection OS transaction", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    __int16 v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::enableSensorRecording()_block_invoke", "%s\n", v27);
    if (v27 != (char *)buf) {
      free(v27);
    }
  }

  *(void *)(v5 + 120) = 0;
}

id sub_100A4F3D8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_101A1F180(v3, "ServerCleanUpFileStalenessThreshold", &qword_101D6F728, 0);
  return [*(id *)(v1 + 160) cleanUp:v4];
}

uint64_t sub_100A4F428(uint64_t a1)
{
  return sub_100A4648C(*(void *)(a1 + 32), 0.0);
}

uint64_t sub_100A4F434(uint64_t a1)
{
  sub_100A44C10(a1);

  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 168) = 0;

  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;

  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;

  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;

  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;

  *(void *)(a1 + 240) = 0;
  uint64_t v2 = *(void *)(a1 + 10872);
  *(void *)(a1 + 10872) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 10896);
  *(void *)(a1 + 10896) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 10904);
  *(void *)(a1 + 10904) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 10912);
  *(void *)(a1 + 10912) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  [*(id *)(*(void *)(a1 + 10880) + 16) unregister:*(void *)(*(void *)(a1 + 10880) + 8) forNotification:2];
  uint64_t v6 = *(void *)(a1 + 10880);
  *(void *)(a1 + 10880) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  [*(id *)(*(void *)(a1 + 10888) + 16) unregister:*(void *)(*(void *)(a1 + 10888) + 8) forNotification:4];
  uint64_t v7 = *(void *)(a1 + 10888);
  *(void *)(a1 + 10888) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  if (*(int *)(a1 + 280) >= 1)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v8 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Releasing power assertion due to Fall Notifier destruction.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      long long v32 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFallNotifier::shutdown()", "%s\n", v32);
      if (v32 != (char *)buf) {
        free(v32);
      }
    }
    sub_100EBC6AC(a1 + 272);
  }

  *(void *)(a1 + 264) = 0;
  [*(id *)(a1 + 320) invalidate];

  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 120) = 0;
  sub_100A46E84(a1);
  int v9 = (const void *)sub_1000D2E34(0);
  if (v9)
  {
    if (v10)
    {
      uint64_t v11 = (uint64_t)v10;
      sub_1005923CC((uint64_t)v10, 0);
      sub_1005922F8(v11, 0);
    }
  }
  *(unsigned char *)(a1 + 108) = 1;

  *(void *)(a1 + 256) = 0;
  if (sub_1000D2E34(0))
  {
    uint64_t v12 = sub_1000D2E34(0);
    sub_1009D26C4(v12, 10, *(void *)(a1 + 10752));
    uint64_t v13 = *(void *)(a1 + 10752);
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    *(void *)(a1 + 10752) = 0;
    uint64_t v14 = sub_1000D2E34(0);
    sub_1009D26C4(v14, 18, *(void *)(a1 + 10800));
    uint64_t v15 = *(void *)(a1 + 10800);
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    *(void *)(a1 + 10800) = 0;
    uint64_t v16 = sub_1000D2E34(0);
    sub_1009D26C4(v16, 23, *(void *)(a1 + 10808));
    uint64_t v17 = *(void *)(a1 + 10808);
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
    *(void *)(a1 + 10808) = 0;
    uint64_t v18 = sub_1000D2E34(0);
    sub_1009D26C4(v18, 24, *(void *)(a1 + 10816));
    uint64_t v19 = *(void *)(a1 + 10816);
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
    *(void *)(a1 + 10816) = 0;
    uint64_t v20 = sub_1000D2E34(0);
    sub_1009D26C4(v20, 25, *(void *)(a1 + 10824));
    uint64_t v21 = *(void *)(a1 + 10824);
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    }
    *(void *)(a1 + 10824) = 0;
    uint64_t v22 = sub_1000D2E34(0);
    sub_1009D26C4(v22, 22, *(void *)(a1 + 10832));
    uint64_t v23 = *(void *)(a1 + 10832);
    if (v23) {
      (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
    }
    *(void *)(a1 + 10832) = 0;
    uint64_t v24 = sub_1000D2E34(0);
    sub_1009D26C4(v24, 21, *(void *)(a1 + 10856));
    uint64_t v25 = *(void *)(a1 + 10856);
    if (v25) {
      (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
    }
    *(void *)(a1 + 10856) = 0;
    uint64_t v26 = sub_1000D2E34(0);
    sub_1009D26C4(v26, 26, *(void *)(a1 + 10840));
    uint64_t v27 = *(void *)(a1 + 10840);
    if (v27) {
      (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
    }
    *(void *)(a1 + 10840) = 0;
  }
  sub_100A462AC((id *)a1);
  notify_cancel(*(_DWORD *)(a1 + 112));

  *(void *)(a1 + 8072) = 0;
  *(void *)(a1 + 10640) = 0;

  *(void *)(a1 + 10648) = 0;
  [*(id *)(a1 + 10672) invalidate];

  uint64_t v28 = *(void *)(a1 + 10680);
  *(_OWORD *)(a1 + 10672) = 0u;
  if (v28) {
    sub_100A60654(a1 + 10680, v28);
  }
  __int16 v29 = *(NSObject **)(a1 + 360);
  if (v29)
  {
    dispatch_source_cancel(v29);
    dispatch_release(*(dispatch_object_t *)(a1 + 360));
    *(void *)(a1 + 360) = 0;
  }
  int v30 = *(NSObject **)(a1 + 368);
  if (v30)
  {
    dispatch_source_cancel(v30);
    dispatch_release(*(dispatch_object_t *)(a1 + 368));
    *(void *)(a1 + 368) = 0;
  }
  uint64_t result = *(void *)(a1 + 128);
  if (result)
  {
    sub_10120C4D4();
    operator delete();
  }
  *(void *)(a1 + 128) = 0;
  return result;
}

void sub_100A4FB38(uint64_t a1, uint64_t a2, _DWORD *a3, long long *a4)
{
  if (*a3 == 2)
  {
    long long v6 = a4[13];
    long long v42 = a4[12];
    long long v43 = v6;
    uint64_t v44 = *((void *)a4 + 28);
    long long v7 = a4[9];
    long long v38 = a4[8];
    long long v39 = v7;
    long long v8 = a4[10];
    long long v41 = a4[11];
    long long v40 = v8;
    long long v9 = a4[5];
    long long v34 = a4[4];
    long long v35 = v9;
    long long v10 = a4[6];
    long long v37 = a4[7];
    long long v36 = v10;
    long long v11 = a4[1];
    long long v30 = *a4;
    long long v31 = v11;
    long long v12 = a4[2];
    long long v33 = a4[3];
    long long v32 = v12;
    int v13 = sub_10101439C((uint64_t)&v30);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v14 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134218752;
      *(void *)uint64_t v25 = v31;
      *(_WORD *)&v25[8] = 2048;
      *(void *)&v25[10] = v37;
      __int16 v26 = 2048;
      uint64_t v27 = v13;
      __int16 v28 = 2048;
      uint64_t v29 = v38;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Received a workout event of type: %ld, with workout of type: %ld, workout state: %ld and healthkit workout of type: %ld", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      uint64_t v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
    if (v13 == 2)
    {
      if (!*(void *)(a1 + 10656))
      {
LABEL_30:
        sub_1002918E0(*(void **)(a1 + 128), *(void *)(a1 + 10656));
        return;
      }
      if (sub_100A3A90C(a1))
      {
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        uint64_t v19 = qword_1024190F8;
        if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v20 = *(void *)(a1 + 10656);
          *(_DWORD *)long long buf = 134218496;
          *(void *)uint64_t v25 = v20;
          *(_WORD *)&v25[8] = 2048;
          *(void *)&v25[10] = (uint64_t)*(double *)&v30;
          __int16 v26 = 2048;
          uint64_t v27 = (uint64_t)*((double *)&v30 + 1);
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Updating end stats with workout type: %ld, start time: %ld, end time: %ld", buf, 0x20u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190F0 != -1) {
            dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
          }
          uint64_t v23 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v23);
          if (v23 != (char *)buf) {
            free(v23);
          }
        }
        uint64_t v21 = sub_100C3AE20();
        sub_100C3D0D8(v21, *(void *)(a1 + 10656), *(double *)&v30, *((double *)&v30 + 1));
      }
      int v16 = 0;
      *(void *)(a1 + 10656) = 0;
    }
    else
    {
      if (v13 != 1) {
        goto LABEL_30;
      }
      uint64_t v15 = v37;
      if (*(void *)(a1 + 10656) == (void)v37) {
        goto LABEL_30;
      }
      *(void *)(a1 + 10656) = v37;
      if (v15 == 14) {
        int v16 = *((_DWORD *)a4 + 32);
      }
      else {
        int v16 = 0;
      }
    }
    *(_DWORD *)(a1 + 10664) = v16;
    sub_100A479B8(a1);
    sub_100A4225C(a1, 0);
    goto LABEL_30;
  }
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  uint64_t v17 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 68289026;
    *(_DWORD *)uint64_t v25 = 0;
    *(_WORD *)&v25[4] = 2082;
    *(void *)&v25[6] = "";
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Received a un-subscribed notification\"}", buf, 0x12u);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
  }
  uint64_t v18 = qword_1024190F8;
  if (os_signpost_enabled((os_log_t)qword_1024190F8))
  {
    *(_DWORD *)long long buf = 68289026;
    *(_DWORD *)uint64_t v25 = 0;
    *(_WORD *)&v25[4] = 2082;
    *(void *)&v25[6] = "";
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received a un-subscribed notification", "{\"msg%{public}.0s\":\"Received a un-subscribed notification\"}", buf, 0x12u);
  }
}

void sub_100A500F4(uint64_t a1, uint64_t a2, _DWORD *a3, long long *a4)
{
  if (*a3 == 4)
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    CFAbsoluteTime v7 = CFAbsoluteTimeGetCurrent();
    long long v8 = a4[9];
    long long v70 = a4[8];
    long long v71 = v8;
    long long v9 = a4[11];
    long long v72 = a4[10];
    long long v73 = v9;
    long long v10 = a4[5];
    long long v66 = a4[4];
    long long v67 = v10;
    long long v11 = a4[7];
    long long v68 = a4[6];
    long long v69 = v11;
    long long v12 = a4[1];
    long long v62 = *a4;
    long long v63 = v12;
    BOOL v13 = *(double *)(a1 + 7840) == 0.0;
    long long v14 = a4[3];
    long long v64 = a4[2];
    long long v65 = v14;
    if (!v13)
    {
      long long v15 = a4[9];
      long long v58 = a4[8];
      long long v59 = v15;
      long long v16 = a4[11];
      long long v60 = a4[10];
      long long v61 = v16;
      long long v17 = a4[5];
      long long v54 = a4[4];
      long long v55 = v17;
      long long v18 = a4[7];
      long long v56 = a4[6];
      long long v57 = v18;
      long long v19 = a4[1];
      long long v50 = *a4;
      long long v51 = v19;
      long long v20 = a4[3];
      long long v52 = a4[2];
      long long v53 = v20;
      *((double *)&v51 + 1) = *((double *)&v51 + 1) - *(double *)(a1 + 7880);
      double v21 = *(double *)&v56 - *(double *)(a1 + 7952);
      *(double *)&long long v20 = *(double *)&v57 - *(double *)(a1 + 7968);
      *(CFAbsoluteTime *)&long long v49 = Current;
      *((CFAbsoluteTime *)&v49 + 1) = v7;
      *(double *)&long long v56 = v21;
      *(void *)&long long v57 = v20;
      sub_100A606B0((uint64_t)v48, (uint64_t)&v50);
      memset(&__p, 0, sizeof(__p));
      sub_100B56E2C((uint64_t)v48, &__p);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      uint64_t v22 = qword_1024190F8;
      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
      {
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)long long buf = 136315138;
        __int16 v77 = p_p;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        long long v43 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v43 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        int v74 = 136315138;
        __int16 v75 = v43;
        uint64_t v44 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onOdometerUpdate(int, const CLOdometerNotifier_Type::Notification &, const CLOdometerNotifier_Type::NotificationData &)", "%s\n", v44);
        if (v44 != (char *)buf) {
          free(v44);
        }
      }
      if (((sub_100A41728(a1) & 1) != 0 || (sub_100A41808() & 1) != 0 || sub_100A41874())
        && *(void *)(a1 + 7576))
      {
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        uint64_t v24 = qword_1024190F8;
        if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Logging odometer to logger.", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190F0 != -1) {
            dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
          }
          LOWORD(v74) = 0;
          int v46 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onOdometerUpdate(int, const CLOdometerNotifier_Type::Notification &, const CLOdometerNotifier_Type::NotificationData &)", "%s\n", v46);
          if (v46 != (char *)buf) {
            free(v46);
          }
        }
        [*(id *)(a1 + 136) logOdometer:&v49];
      }
      LOBYTE(v74) = 0;
      sub_10006ACBC(buf, "FallStatsEnabled", (unsigned __int8 *)&v74, 0);
      if (buf[1])
      {
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        uint64_t v25 = qword_1024190F8;
        if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "Logging odometer for user studies.", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190F0 != -1) {
            dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
          }
          LOWORD(v74) = 0;
          int v45 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onOdometerUpdate(int, const CLOdometerNotifier_Type::Notification &, const CLOdometerNotifier_Type::NotificationData &)", "%s\n", v45);
          if (v45 != (char *)buf) {
            free(v45);
          }
        }
        [*(id *)(a1 + 216) logData:[+[CLFallLoggerManager encodeBinaryLog:](CLFallLoggerManager, "encodeBinaryLog:", v48)];
      }
      __int16 v26 = operator new(0xE0uLL);
      long long v27 = v60;
      v26[11] = v59;
      v26[12] = v27;
      v26[13] = v61;
      long long v28 = v56;
      v26[7] = v55;
      v26[8] = v28;
      long long v29 = v58;
      v26[9] = v57;
      v26[10] = v29;
      long long v30 = v52;
      v26[3] = v51;
      v26[4] = v30;
      long long v31 = v54;
      v26[5] = v53;
      v26[6] = v31;
      long long v32 = v50;
      v26[1] = v49;
      void v26[2] = v32;
      uint64_t v33 = *(void *)(a1 + 8048);
      *(void *)__int16 v26 = v33;
      *((void *)v26 + 1) = a1 + 8048;
      *(void *)(v33 + 8) = v26;
      unint64_t v34 = *(void *)(a1 + 8064) + 1;
      *(void *)(a1 + 8048) = v26;
      for (*(void *)(a1 + 8064) = v34; ; unint64_t v34 = *(void *)(a1 + 8064))
      {
        int v74 = 10;
        sub_10044FD20(buf, "FallOdometerHistorySize", &v74, 0);
        if (v34 <= (int)v77) {
          break;
        }
        long long v35 = *(uint64_t **)(a1 + 8056);
        uint64_t v36 = *v35;
        *(void *)(v36 + 8) = v35[1];
        *(void *)v35[1] = v36;
        --*(void *)(a1 + 8064);
        operator delete(v35);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    *(CFAbsoluteTime *)(a1 + 7840) = Current;
    *(CFAbsoluteTime *)(a1 + 7848) = v7;
    long long v37 = v71;
    *(_OWORD *)(a1 + 7984) = v70;
    *(_OWORD *)(a1 + 8000) = v37;
    long long v38 = v73;
    *(_OWORD *)(a1 + 8016) = v72;
    *(_OWORD *)(a1 + 8032) = v38;
    long long v39 = v67;
    *(_OWORD *)(a1 + 7920) = v66;
    *(_OWORD *)(a1 + 7936) = v39;
    long long v40 = v69;
    *(_OWORD *)(a1 + 7952) = v68;
    *(_OWORD *)(a1 + 7968) = v40;
    long long v41 = v63;
    *(_OWORD *)(a1 + 7856) = v62;
    *(_OWORD *)(a1 + 7872) = v41;
    long long v42 = v65;
    *(_OWORD *)(a1 + 7888) = v64;
    *(_OWORD *)(a1 + 7904) = v42;
  }
}

void sub_100A5079C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A507D0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a1 + 7107;
  if ((!sub_100A357C4() || CFAbsoluteTimeGetCurrent() >= 654764400.0)
    && [*(id *)(a1 + 136) isLoggingEnabled])
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v5 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Logger manager was enabled whereas data collection date is passed - Disabling logger manager\"}", buf, 0x12u);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
    }
    long long v6 = qword_1024190F8;
    if (os_signpost_enabled((os_log_t)qword_1024190F8))
    {
      *(_DWORD *)long long buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Logger manager was enabled whereas data collection date is passed - Disabling logger manager", "{\"msg%{public}.0s\":\"Logger manager was enabled whereas data collection date is passed - Disabling logger manager\"}", buf, 0x12u);
    }
    [*(id *)(a1 + 136) setLoggingEnabled:0];
    [*(id *)(a1 + 136) clearAllLogs];
    [*(id *)(a1 + 160) cleanUp:0.0];
    sub_100A462AC((id *)a1);
  }
  *(void *)unint64_t v34 = *a2;
  *(void *)&v34[5] = *(uint64_t *)((char *)a2 + 5);
  int v7 = *((unsigned __int8 *)a2 + 13);
  char v8 = *((unsigned char *)a2 + 14);
  char v9 = *((unsigned char *)a2 + 15);
  __int16 v32 = *((_WORD *)a2 + 8);
  char v33 = *((unsigned char *)a2 + 18);
  uint64_t v10 = *(uint64_t *)((char *)a2 + 19);
  long long v11 = *(_OWORD *)((char *)a2 + 27);
  long long v12 = *(_OWORD *)((char *)a2 + 43);
  long long v13 = *(_OWORD *)((char *)a2 + 75);
  long long v38 = *(_OWORD *)((char *)a2 + 59);
  long long v39 = v13;
  *(_OWORD *)long long buf = v11;
  *(_OWORD *)&uint8_t buf[16] = v12;
  long long v14 = *(_OWORD *)((char *)a2 + 91);
  long long v15 = *(_OWORD *)((char *)a2 + 107);
  long long v16 = *(_OWORD *)((char *)a2 + 123);
  *(_OWORD *)((char *)v42 + 10) = *(_OWORD *)((char *)a2 + 133);
  long long v41 = v15;
  v42[0] = v16;
  long long v40 = v14;
  int v17 = *((unsigned __int8 *)a2 + 149);
  *(_OWORD *)&v36[9] = *(_OWORD *)((char *)a2 + 175);
  long long v35 = *(_OWORD *)((char *)a2 + 150);
  *(_OWORD *)uint64_t v36 = *(_OWORD *)((char *)a2 + 166);
  uint64_t v18 = *(void *)(a1 + 7304);
  if (v18 == v10 && *(unsigned __int8 *)(v4 + 327) == v17)
  {
    if (*(unsigned __int8 *)(v4 + 191) == v7) {
      return;
    }
    goto LABEL_28;
  }
  BOOL v19 = *(void *)(v4 + 6) != v10 || *(unsigned __int8 *)(v4 + 136) != v17;
  if (v18 != v10 || *(unsigned __int8 *)(v4 + 327) != v17)
  {
    if (!v19) {
      return;
    }
    LOBYTE(v21) = v9 & 1;
    goto LABEL_27;
  }
  int v20 = *(unsigned __int8 *)(v4 + 191);
  int v21 = v20 != v7;
  if (v20 != v7 || !v19)
  {
    if (!v19) {
      goto LABEL_31;
    }
LABEL_27:
    uint64_t v22 = *a2;
    int v23 = *((_DWORD *)a2 + 2);
    char v24 = *((unsigned char *)a2 + 12);
    long long v25 = v41;
    *(_OWORD *)(a1 + 7185) = v40;
    *(_OWORD *)(a1 + 7201) = v25;
    *(_OWORD *)(a1 + 7217) = v42[0];
    *(_OWORD *)(a1 + 7227) = *(_OWORD *)((char *)v42 + 10);
    long long v26 = *(_OWORD *)&buf[16];
    *(_OWORD *)(a1 + 7121) = *(_OWORD *)buf;
    *(_OWORD *)(a1 + 7137) = v26;
    long long v27 = v39;
    *(_OWORD *)(a1 + 7153) = v38;
    *(_OWORD *)(a1 + 7169) = v27;
    *(_OWORD *)(a1 + 7269) = *(_OWORD *)&v36[9];
    *(_OWORD *)(a1 + 7260) = *(_OWORD *)v36;
    *(unsigned char *)(a1 + 7106) = v24;
    *(_DWORD *)(a1 + 7102) = v23;
    *(void *)(a1 + 7094) = v22;
    *(unsigned char *)uint64_t v4 = v7;
    *(unsigned char *)(v4 + 1) = v8;
    *(unsigned char *)(v4 + 2) = v9;
    *(_WORD *)(a1 + 7110) = v32;
    *(unsigned char *)(a1 + 7112) = v33;
    *(void *)(v4 + 6) = v10;
    *(unsigned char *)(v4 + 136) = v17;
    *(_OWORD *)(a1 + 7244) = v35;
    char v28 = v8;
    sub_100A50C04(a1, a1 + 7094);
    sub_100A3A204(a1, a1 + 7094);
    char v8 = v28;
    if ((v21 & 1) == 0) {
      return;
    }
    goto LABEL_28;
  }
  int v21 = v9 & 1;
  if (v19) {
    goto LABEL_27;
  }
LABEL_31:
  if (!v21) {
    return;
  }
LABEL_28:
  *(void *)(a1 + 7285) = *(void *)v34;
  *(void *)(a1 + 7290) = *(void *)&v34[5];
  *(unsigned char *)(v4 + 191) = v7;
  *(unsigned char *)(v4 + 192) = v8;
  *(unsigned char *)(v4 + 193) = v9;
  *(_WORD *)(a1 + 7301) = v32;
  *(unsigned char *)(a1 + 7303) = v33;
  *(void *)(a1 + 7304) = v10;
  *(_OWORD *)(a1 + 7408) = v42[0];
  long long v29 = v40;
  *(_OWORD *)(a1 + 7392) = v41;
  *(_OWORD *)(a1 + 7376) = v29;
  long long v30 = v38;
  *(_OWORD *)(a1 + 7360) = v39;
  *(_OWORD *)(a1 + 7344) = v30;
  long long v31 = *(_OWORD *)buf;
  *(_OWORD *)(a1 + 7328) = *(_OWORD *)&buf[16];
  *(_OWORD *)(a1 + 7312) = v31;
  *(_OWORD *)(a1 + 7418) = *(_OWORD *)((char *)v42 + 10);
  *(unsigned char *)(v4 + 327) = v17;
  *(_OWORD *)(a1 + 7460) = *(_OWORD *)&v36[9];
  *(_OWORD *)(a1 + 7451) = *(_OWORD *)v36;
  *(_OWORD *)(a1 + 7435) = v35;
  sub_100A3A204(a1, a1 + 7285);
}

void sub_100A50C04(uint64_t a1, uint64_t a2)
{
  float v4 = sub_100A51C78((float *)(a2 + 27));
  if ((*(unsigned char *)(a2 + 16) | ((LODWORD(v4) & 0x7FFFFFFFu) > 0x7F7FFFFF)) | ((*(unsigned __int8 *)(a2 + 18) | (v4 >= *(float *)(a1 + 7480))) != 0))
  {
    if (*(unsigned __int8 *)(a2 + 13) | *(unsigned __int8 *)(a2 + 2))
    {
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      uint64_t v5 = qword_1024190F8;
      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Impact stats logged in previous state, will disregard duplicate logging.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190F0 == -1)
        {
LABEL_16:
          v36[0] = 0;
          int v7 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::logFallStats(const CLFall_Types::ImpactEvent &)", "%s\n", v7);
          if (v7 != (char *)buf) {
            free(v7);
          }
          return;
        }
LABEL_140:
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        goto LABEL_16;
      }
    }
    else
    {
      if (sub_100A41A54(a1))
      {
        if (*(int *)(a1 + 280) <= 0 && v4 >= *(float *)(a1 + 7488))
        {
          if (qword_1024190F0 != -1) {
            dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
          }
          char v8 = qword_1024190F8;
          if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Taking power assertion due to significant impact event subscription.", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024190F0 != -1) {
              dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
            }
            v36[0] = 0;
            unint64_t v34 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::logFallStats(const CLFall_Types::ImpactEvent &)", "%s\n", v34);
            if (v34 != (char *)buf) {
              free(v34);
            }
          }
          sub_100134750(__p, "Fall Stats triggered high resolution sensor read");
          sub_100EBBFD8(a1 + 272, (uint64_t *)__p);
          if (v38 < 0) {
            operator delete(__p[0]);
          }
        }
        [*(id *)(a1 + 320) nextFireDelay];
        if (v9 == 1.79769313e308)
        {
          if (qword_1024190F0 != -1) {
            dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
          }
          uint64_t v10 = qword_1024190F8;
          if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Setting fail safe timer for 180s.", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024190F0 != -1) {
              dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
            }
            v36[0] = 0;
            __int16 v32 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::logFallStats(const CLFall_Types::ImpactEvent &)", "%s\n", v32);
            if (v32 != (char *)buf) {
              free(v32);
            }
          }
          [*(id *)(a1 + 320) setNextFireDelay:180.0];
        }
        float v11 = *(float *)(a1 + 7476);
        if (v11 >= *(float *)(a1 + 7484)) {
          float v11 = *(float *)(a1 + 7484);
        }
        if (v4 >= v11)
        {
          if (*(unsigned char *)(a2 + 16)) {
            BOOL v12 = 1;
          }
          else {
            BOOL v12 = *(unsigned char *)(a2 + 15) != 0;
          }
        }
        else
        {
          BOOL v12 = 0;
        }
        if (*(_DWORD *)(a1 + 7640) != 1) {
          BOOL v12 = 0;
        }
        BOOL v13 = (*(unsigned __int8 *)(a2 + 18) | v12) != 0;
        if ((sub_100A51D30() & v13) == 1)
        {
          [*(id *)(*(void *)(a1 + 10896) + 16) register:*(void *)(*(void *)(a1 + 10896) + 8) forNotification:4 registrationInfo:0];
          if (qword_1024190F0 != -1) {
            dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
          }
          long long v14 = qword_1024190F8;
          if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "High impact event HR subscription.", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024190F0 != -1) {
              dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
            }
            v36[0] = 0;
            char v33 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::logFallStats(const CLFall_Types::ImpactEvent &)", "%s\n", v33);
            if (v33 != (char *)buf) {
              free(v33);
            }
          }
        }
      }
      sub_100A5F794((uint64_t)v36, a2);
      memset(&v35, 0, sizeof(v35));
      sub_100B54F60((uint64_t)v36, &v35);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      long long v15 = qword_1024190F8;
      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
      {
        long long v16 = &v35;
        if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v16 = (std::string *)v35.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)long long buf = 136315138;
        long long v42 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        char v24 = &v35;
        if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          char v24 = (std::string *)v35.__r_.__value_.__r.__words[0];
        }
        int v39 = 136315138;
        long long v40 = v24;
        long long v25 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::logFallStats(const CLFall_Types::ImpactEvent &)", "%s\n", v25);
        if (v25 != (char *)buf) {
          free(v25);
        }
      }
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      {
        *v35.__r_.__value_.__l.__data_ = 0;
        v35.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        v35.__r_.__value_.__s.__data_[0] = 0;
        *((unsigned char *)&v35.__r_.__value_.__s + 23) = 0;
      }
      sub_100B55024((uint64_t)v36, &v35);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      int v17 = qword_1024190F8;
      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v18 = &v35;
        if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v18 = (std::string *)v35.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)long long buf = 136315138;
        long long v42 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        long long v26 = &v35;
        if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v26 = (std::string *)v35.__r_.__value_.__r.__words[0];
        }
        int v39 = 136315138;
        long long v40 = v26;
        long long v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::logFallStats(const CLFall_Types::ImpactEvent &)", "%s\n", v27);
        if (v27 != (char *)buf) {
          free(v27);
        }
      }
      if (*(unsigned char *)(a2 + 16)) {
        *(unsigned char *)(a1 + 449) = 1;
      }
      if ((sub_100A41728(a1) & 1) != 0 || (sub_100A41808() & 1) != 0 || sub_100A41874())
      {
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        BOOL v19 = qword_1024190F8;
        if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Logging impact stats to logger.", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190F0 != -1) {
            dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
          }
          LOWORD(v39) = 0;
          char v28 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::logFallStats(const CLFall_Types::ImpactEvent &)", "%s\n", v28);
          if (v28 != (char *)buf) {
            free(v28);
          }
        }
        [*(id *)(a1 + 136) logImpactEvent:a2];
      }
      LOBYTE(v39) = 0;
      sub_10006ACBC(buf, "FallStatsEnabled", (unsigned __int8 *)&v39, 0);
      if (buf[1])
      {
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        int v20 = qword_1024190F8;
        if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Logging impact stats for user studies.", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190F0 != -1) {
            dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
          }
          LOWORD(v39) = 0;
          long long v29 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::logFallStats(const CLFall_Types::ImpactEvent &)", "%s\n", v29);
          if (v29 != (char *)buf) {
            free(v29);
          }
        }
        [*(id *)(a1 + 168) logData:[+[CLFallLoggerManager encodeBinaryLog:](CLFallLoggerManager, "encodeBinaryLog:", v36)];
      }
      if (sub_100A3A90C(a1))
      {
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        int v21 = qword_1024190F8;
        if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "Logging impact stats to AWD", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190F0 != -1) {
            dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
          }
          LOWORD(v39) = 0;
          long long v30 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::logFallStats(const CLFall_Types::ImpactEvent &)", "%s\n", v30);
          if (v30 != (char *)buf) {
            free(v30);
          }
        }
        uint64_t v22 = sub_100C3AE20();
        sub_100C3B2E8(v22, a2);
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        int v23 = qword_1024190F8;
        if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "Logging impact stats to CoreAnalytics", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190F0 != -1) {
            dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
          }
          LOWORD(v39) = 0;
          long long v31 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::logFallStats(const CLFall_Types::ImpactEvent &)", "%s\n", v31);
          if (v31 != (char *)buf) {
            free(v31);
          }
        }
        sub_10120C924(*(void *)(a1 + 128), a2);
      }
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v35.__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    long long v6 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Impact does not meet logging threshold requirement, will disregard stats.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 == -1) {
        goto LABEL_16;
      }
      goto LABEL_140;
    }
  }
}

void sub_100A51C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float sub_100A51C78(float *a1)
{
  float v2 = *a1;
  float v1 = a1[1];
  if (v1 >= 0.0) {
    float v3 = a1[1];
  }
  else {
    float v3 = -v1;
  }
  if (v2 >= 0.0) {
    float v4 = *a1;
  }
  else {
    float v4 = -v2;
  }
  if (v2 < 0.0) {
    float v2 = -v2;
  }
  if (v1 < 0.0) {
    float v1 = -v1;
  }
  if (v3 <= v4) {
    float v1 = v2;
  }
  float v6 = a1[2];
  float v5 = a1[3];
  if (v5 >= 0.0) {
    float v7 = a1[3];
  }
  else {
    float v7 = -v5;
  }
  if (v6 >= 0.0) {
    float v8 = a1[2];
  }
  else {
    float v8 = -v6;
  }
  if (v7 <= v8)
  {
    float v5 = a1[2];
    if (v6 < 0.0) {
      float v5 = -v6;
    }
  }
  else if (v5 < 0.0)
  {
    float v5 = -v5;
  }
  float v10 = a1[4];
  float v9 = a1[5];
  if (v9 >= 0.0) {
    float v11 = a1[5];
  }
  else {
    float v11 = -v9;
  }
  if (v10 >= 0.0) {
    float v12 = a1[4];
  }
  else {
    float v12 = -v10;
  }
  if (v10 < 0.0) {
    float v10 = -v10;
  }
  if (v9 < 0.0) {
    float v9 = -v9;
  }
  if (v11 <= v12) {
    float v9 = v10;
  }
  return sqrtf((float)((float)(v5 * v5) + (float)(v1 * v1)) + (float)(v9 * v9));
}

uint64_t sub_100A51D30()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247FA70, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10247FA70))
  {
    unsigned __int8 v1 = 0;
    sub_10006ACBC(v2, "FallStatsHeartRateEnabled", &v1, 0);
    byte_10247FA6C = v2[1];
    __cxa_guard_release(&qword_10247FA70);
  }
  return byte_10247FA6C;
}

void sub_100A51DB0(_Unwind_Exception *a1)
{
}

void sub_100A51DC8(uint64_t a1, float a2)
{
  if (sub_100A3A90C(a1))
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    float v4 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Logging age group to AWD and CoreAnalytics", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      long long v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::logUserAge(const float)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    if (a2 != 30.0)
    {
      int v5 = (int)a2;
      if ((int)a2 >= 88) {
        int v6 = 88;
      }
      else {
        int v6 = (int)a2;
      }
      if (v5 <= 64) {
        int v7 = 5 * (v5 / 5);
      }
      else {
        int v7 = v6;
      }
      float v8 = (float)v7;
      uint64_t v9 = a1 + 10568;
      sub_10126E5A4(v9, (int)(float)v7);
      sub_10126ECBC(v9);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      float v10 = qword_1024190F8;
      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 68289283;
        int v16 = 0;
        __int16 v17 = 2082;
        uint64_t v18 = "";
        __int16 v19 = 1025;
        LODWORD(v20) = a2 >= 65.0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFitnessTrackingAllDayAWD: Updating user age group\", \"belongsToOlderGroup\":%{private}hhd}", buf, 0x18u);
      }
      uint64_t v11 = sub_100C3AE20();
      sub_100C3B5F4(v11, a2 >= 65.0);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      float v12 = qword_1024190F8;
      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 68289283;
        int v16 = 0;
        __int16 v17 = 2082;
        uint64_t v18 = "";
        __int16 v19 = 2049;
        double v20 = v8;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFitnessTrackingAllDayAWD: Updating user age bin\", \"value\":\"%{private}f\"}", buf, 0x1Cu);
      }
      uint64_t v13 = sub_100C3AE20();
      sub_100C3CBC4(v13, v8);
    }
  }
}

uint64_t sub_100A52120(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(void *)(v1 + 240))
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    float v2 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = *(void *)(v1 + 10656);
      v4[0] = 68289282;
      v4[1] = 0;
      __int16 v5 = 2082;
      int v6 = "";
      __int16 v7 = 2050;
      uint64_t v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Impact during\", \"Workout type \":%{public}llu}", (uint8_t *)v4, 0x1Cu);
    }
    return (*(uint64_t (**)(void))(*(void *)(v1 + 240) + 16))();
  }
  return result;
}

uint64_t sub_100A52254(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(void *)(v1 + 240))
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    float v2 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = *(void *)(v1 + 10656);
      v4[0] = 68289282;
      v4[1] = 0;
      __int16 v5 = 2082;
      int v6 = "";
      __int16 v7 = 2050;
      uint64_t v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Impact during\", \"Workout type \":%{public}llu}", (uint8_t *)v4, 0x1Cu);
    }
    return (*(uint64_t (**)(void))(*(void *)(v1 + 240) + 16))();
  }
  return result;
}

void sub_100A52388(uint64_t a1, long long *a2)
{
  float v2 = (unsigned __int8 *)(a1 + 6725);
  if (*(unsigned char *)(a1 + 7828))
  {
    __int16 v5 = (_OWORD *)(a1 + 6712);
    if (*(void *)(a1 + 6731) == *(void *)((char *)a2 + 19))
    {
      if (*v2 == *((unsigned __int8 *)a2 + 13))
      {
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        int v6 = qword_1024190F8;
        if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v7 = *(void *)((char *)a2 + 19);
          int v8 = *((unsigned __int8 *)a2 + 149);
          uint64_t v9 = *(void *)((char *)a2 + 166);
          uint64_t v10 = *(void *)((char *)a2 + 158);
          int v11 = *((unsigned __int8 *)a2 + 13);
          int v12 = *((unsigned __int8 *)a2 + 156);
          int v13 = *((unsigned __int8 *)a2 + 157);
          int v14 = v2[177];
          int v53 = 68291331;
          int v54 = 0;
          __int16 v55 = 2082;
          long long v56 = "";
          __int16 v57 = 2082;
          long long v58 = "downstream";
          __int16 v59 = 2050;
          uint64_t v60 = v7;
          __int16 v61 = 1025;
          int v62 = v8;
          __int16 v63 = 2049;
          uint64_t v64 = v9;
          __int16 v65 = 2049;
          uint64_t v66 = v10;
          __int16 v67 = 1025;
          int v68 = v11;
          __int16 v69 = 1025;
          int v70 = v12;
          __int16 v71 = 1025;
          int v72 = v13;
          __int16 v73 = 1025;
          int v74 = v14;
          long long v15 = "{\"msg%{public}.0s\":\"Notifier - Received anomaly event notification (already seen it)\", \"direction\""
                ":%{public, location:escape_only}s, \"aop timestamp\":%{public}llu, \"operatingMode\":%{private}u, \"anom"
                "aly timestamp\":\"%{private}f\", \"update timestamp\":\"%{private}f\", \"state\":%{private}d, \"response"
                "\":%{private}d, \"resolution\":%{private}d, \"sos_state\":%{private}d}";
LABEL_12:
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v53, 0x58u);
          return;
        }
        return;
      }
      __int16 v33 = *(_WORD *)(a1 + 6868);
      double v34 = *(double *)(a1 + 6870);
      long long v35 = a2[8];
      long long v36 = a2[9];
      long long v37 = a2[10];
      *(_OWORD *)(a1 + 6887) = *(long long *)((char *)a2 + 175);
      *(_OWORD *)(a1 + 6856) = v36;
      *(_OWORD *)(a1 + 6872) = v37;
      long long v38 = *a2;
      long long v39 = a2[1];
      long long v40 = a2[3];
      *(_OWORD *)(a1 + 6744) = a2[2];
      *(_OWORD *)(a1 + 6760) = v40;
      _OWORD *v5 = v38;
      *(_OWORD *)(a1 + 6728) = v39;
      long long v41 = a2[4];
      long long v42 = a2[5];
      long long v43 = a2[7];
      *(_OWORD *)(a1 + 6808) = a2[6];
      *(_OWORD *)(a1 + 6824) = v43;
      *(_OWORD *)(a1 + 6776) = v41;
      *(_OWORD *)(a1 + 6792) = v42;
      *(_OWORD *)(a1 + 6840) = v35;
      *(_WORD *)(a1 + 6868) = v33;
      if (*(double *)(a1 + 6870) >= v34) {
        double v34 = *(double *)(a1 + 6870);
      }
      *(double *)(a1 + 6870) = v34;
    }
    else
    {
      long long v24 = *a2;
      long long v25 = a2[1];
      long long v26 = a2[3];
      *(_OWORD *)(a1 + 6744) = a2[2];
      *(_OWORD *)(a1 + 6760) = v26;
      _OWORD *v5 = v24;
      *(_OWORD *)(a1 + 6728) = v25;
      long long v27 = a2[4];
      long long v28 = a2[5];
      long long v29 = a2[7];
      *(_OWORD *)(a1 + 6808) = a2[6];
      *(_OWORD *)(a1 + 6824) = v29;
      *(_OWORD *)(a1 + 6776) = v27;
      *(_OWORD *)(a1 + 6792) = v28;
      long long v30 = a2[8];
      long long v31 = a2[9];
      long long v32 = a2[10];
      *(_OWORD *)(a1 + 6887) = *(long long *)((char *)a2 + 175);
      *(_OWORD *)(a1 + 6856) = v31;
      *(_OWORD *)(a1 + 6872) = v32;
      *(_OWORD *)(a1 + 6840) = v30;
    }
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v44 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v45 = *(void *)(v2 + 6);
      int v46 = v2[136];
      uint64_t v47 = *(void *)(v2 + 153);
      uint64_t v48 = *(void *)(v2 + 145);
      int v49 = *v2;
      int v50 = v2[143];
      int v51 = v2[144];
      int v52 = v2[177];
      int v53 = 68291331;
      int v54 = 0;
      __int16 v55 = 2082;
      long long v56 = "";
      __int16 v57 = 2082;
      long long v58 = "downstream";
      __int16 v59 = 2050;
      uint64_t v60 = v45;
      __int16 v61 = 1025;
      int v62 = v46;
      __int16 v63 = 2049;
      uint64_t v64 = v47;
      __int16 v65 = 2049;
      uint64_t v66 = v48;
      __int16 v67 = 1025;
      int v68 = v49;
      __int16 v69 = 1025;
      int v70 = v50;
      __int16 v71 = 1025;
      int v72 = v51;
      __int16 v73 = 1025;
      int v74 = v52;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Notifier - Received anomaly event notification\", \"direction\":%{public, location:escape_only}s, \"aop timestamp\":%{public}llu, \"operatingMode\":%{private}u, \"anomaly timestamp\":\"%{private}f\", \"update timestamp\":\"%{private}f\", \"state\":%{private}d, \"response\":%{private}d, \"resolution\":%{private}d, \"sos_state\":%{private}d}", (uint8_t *)&v53, 0x58u);
    }
    sub_100A4225C(a1, 0);
    sub_100A42800(a1, (uint64_t)v5, 0);
    return;
  }
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  int v6 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = *(void *)(v2 + 6);
    int v17 = v2[136];
    uint64_t v18 = *(void *)(v2 + 153);
    uint64_t v19 = *(void *)(v2 + 145);
    int v20 = *v2;
    int v21 = v2[143];
    int v22 = v2[144];
    int v23 = v2[177];
    int v53 = 68291331;
    int v54 = 0;
    __int16 v55 = 2082;
    long long v56 = "";
    __int16 v57 = 2082;
    long long v58 = "downstream";
    __int16 v59 = 2050;
    uint64_t v60 = v16;
    __int16 v61 = 1025;
    int v62 = v17;
    __int16 v63 = 2049;
    uint64_t v64 = v18;
    __int16 v65 = 2049;
    uint64_t v66 = v19;
    __int16 v67 = 1025;
    int v68 = v20;
    __int16 v69 = 1025;
    int v70 = v21;
    __int16 v71 = 1025;
    int v72 = v22;
    __int16 v73 = 1025;
    int v74 = v23;
    long long v15 = "{\"msg%{public}.0s\":\"Notifier - Received anomaly event notification while detector is disabled - ignoring\","
          " \"direction\":%{public, location:escape_only}s, \"aop timestamp\":%{public}llu, \"operatingMode\":%{private}u"
          ", \"anomaly timestamp\":\"%{private}f\", \"update timestamp\":\"%{private}f\", \"state\":%{private}d, \"respon"
          "se\":%{private}d, \"resolution\":%{private}d, \"sos_state\":%{private}d}";
    goto LABEL_12;
  }
}

unsigned __int8 *sub_100A527CC(unsigned __int8 *result, uint64_t *a2, unsigned int a3)
{
  uint64_t v5 = (uint64_t)result;
  int v6 = (char *)(result + 10736);
  uint64_t v7 = *((void *)result + 946);
  if (!v7)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    int v8 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Receiving Accel800", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      *(_WORD *)int v14 = 0;
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onImpactDataAccel800(const CLMotionCoprocessorInterface::NotificationData *, unsigned int)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    *(CFAbsoluteTime *)(v5 + 6704) = CFAbsoluteTimeGetCurrent();
    if (sub_100A41728(v5) & 1) != 0 || (sub_100A41808()) {
      char v9 = 1;
    }
    else {
      char v9 = sub_100A41874();
    }
    char *v6 = v9;
    v14[0] = 0;
    uint64_t result = sub_10006ACBC(buf, "FallStatsEnabled", v14, 0);
    v6[1] = buf[1];
    _DWORD v6[2] = 0;
    uint64_t v7 = *(void *)(v5 + 7568);
  }
  *(void *)(v5 + 7568) = v7 + a3;
  if (a3)
  {
    uint64_t v10 = a3;
    do
    {
      if (*v6) {
        uint64_t result = (unsigned __int8 *)[*(id *)(v5 + 136) logImpactSensorData:a2];
      }
      if (v6[1])
      {
        uint64_t v11 = a2[1];
        uint64_t v16 = *a2;
        uint64_t v17 = v11;
        uint64_t v19 = *(uint64_t *)((char *)a2 + 17);
        int v20 = *(_DWORD *)((char *)a2 + 25);
        uint64_t v12 = *(uint64_t *)((char *)a2 + 33);
        *(void *)long long buf = off_1022E71C0;
        uint64_t v18 = v12;
        uint64_t result = (unsigned __int8 *)[*(id *)(v5 + 184) logData:+[CLFallLoggerManager encodeBinaryLog:](CLFallLoggerManager, "encodeBinaryLog:", buf)];
      }
      if (v6[2])
      {
        [*(id *)(v5 + 144) logAccel800:a2];
        uint64_t result = (unsigned __int8 *)[*(id *)(v5 + 152) logAccel800:a2];
        if (!*(unsigned char *)(v5 + 450))
        {
          *(unsigned char *)(v5 + 450) = 1;
          uint64_t result = (unsigned __int8 *)[*(id *)(v5 + 344) setNextFireDelay:1.0];
        }
      }
      a2 += 28;
      --v10;
    }
    while (v10);
  }
  return result;
}

unsigned __int8 *sub_100A52AC4(unsigned __int8 *result, uint64_t a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = (uint64_t)result;
  int v6 = (char *)(result + 10736);
  uint64_t v7 = *((void *)result + 950);
  if (!v7)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    int v8 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Receiving Hgal", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      *(_WORD *)int v14 = 0;
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onImpactDataHgal(const CLMotionCoprocessorInterface::NotificationData *, unsigned int)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    if (sub_100A41728(v5) & 1) != 0 || (sub_100A41808()) {
      char v9 = 1;
    }
    else {
      char v9 = sub_100A41874();
    }
    char *v6 = v9;
    v14[0] = 0;
    uint64_t result = sub_10006ACBC(buf, "FallStatsEnabled", v14, 0);
    v6[1] = buf[1];
    _DWORD v6[2] = 0;
    uint64_t v7 = *(void *)(v5 + 7600);
  }
  *(void *)(v5 + 7600) = v7 + v3;
  if (v3)
  {
    uint64_t v3 = v3;
    uint64_t v10 = (uint64_t *)(a2 + 17);
    do
    {
      if (v6[1])
      {
        uint64_t v11 = *(uint64_t *)((char *)v10 - 9);
        uint64_t v16 = *(uint64_t *)((char *)v10 - 17);
        uint64_t v17 = v11;
        uint64_t v19 = *v10;
        int v20 = *((_DWORD *)v10 + 2);
        uint64_t v12 = v10[2];
        *(void *)long long buf = off_1022E7350;
        uint64_t v18 = v12;
        uint64_t result = (unsigned __int8 *)[*(id *)(v5 + 232) logData:+[CLFallLoggerManager encodeBinaryLog:](CLFallLoggerManager, "encodeBinaryLog:", buf)];
      }
      v10 += 28;
      --v3;
    }
    while (v3);
  }
  return result;
}

void sub_100A52D68(uint64_t a1, uint64_t *a2)
{
  if (!(_BYTE)dword_10247FA68++)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v5 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Receiving sensor data due to high impact", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onImpactDataGyro200(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  if (!*(void *)(a1 + 7576))
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    int v6 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Receiving Gyro200", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onImpactDataGyro200(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  ++*(void *)(a1 + 7576);
  if (*(unsigned char *)(a1 + 10736)) {
    [*(id *)(a1 + 136) logImpactSensorData:a2];
  }
  if (*(unsigned char *)(a1 + 10737))
  {
    uint64_t v7 = a2[1];
    uint64_t v13 = *a2;
    uint64_t v14 = v7;
    uint64_t v8 = *(uint64_t *)((char *)a2 + 17);
    int v17 = *(_DWORD *)((char *)a2 + 25);
    uint64_t v9 = *(uint64_t *)((char *)a2 + 33);
    *(void *)long long buf = off_1022E7230;
    uint64_t v15 = v9;
    uint64_t v16 = v8;
    [*(id *)(a1 + 184) logData:+[CLFallLoggerManager encodeBinaryLog:](CLFallLoggerManager, "encodeBinaryLog:", buf)];
  }
  if (*(unsigned char *)(a1 + 10738)) {
    [*(id *)(a1 + 144) logGyro200:a2];
  }
}

void sub_100A530F8(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 7584))
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    float v4 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Receiving DeviceMotion100", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onImpactDataQuaternion6(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    if (!*(void *)(a1 + 120))
    {
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      uint64_t v5 = qword_1024190F8;
      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Creating sensor data collection OS transaction", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        uint64_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onImpactDataQuaternion6(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      *(void *)(a1 + 120) = os_transaction_create();
    }
  }
  ++*(void *)(a1 + 7584);
  if (*(unsigned char *)(a1 + 10736)) {
    [*(id *)(a1 + 136) logImpactSensorData:a2];
  }
  if (*(unsigned char *)(a1 + 10737))
  {
    uint64_t v6 = a2[1];
    uint64_t v11 = *a2;
    uint64_t v12 = v6;
    long long v14 = *(_OWORD *)((char *)a2 + 17);
    uint64_t v7 = *(uint64_t *)((char *)a2 + 33);
    *(void *)long long buf = off_1022E7288;
    uint64_t v13 = v7;
    [*(id *)(a1 + 184) logData:+[CLFallLoggerManager encodeBinaryLog:](CLFallLoggerManager, "encodeBinaryLog:", buf)];
  }
  if (*(unsigned char *)(a1 + 10738)) {
    [*(id *)(a1 + 144) logDeviceMotion:a2];
  }
}

void sub_100A53484(uint64_t a1, uint64_t a2)
{
  sub_100A607FC((uint64_t)v11, a2);
  memset(&__p, 0, sizeof(__p));
  sub_100B567C8((uint64_t)v11, &__p);
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  float v4 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v15 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v7 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    int v12 = 136315138;
    uint64_t v13 = v7;
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onFalsePositiveSuppressionFeatures(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if (*(unsigned char *)(a1 + 10736)) {
    [*(id *)(a1 + 136) logFalsePositiveSuppressionFeatures:a2];
  }
  if (*(unsigned char *)(a1 + 10737))
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v6 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Logging false positive suppression features.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      LOWORD(v12) = 0;
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onFalsePositiveSuppressionFeatures(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    [*(id *)(a1 + 184) logData:+[CLFallLoggerManager encodeBinaryLog:](CLFallLoggerManager, "encodeBinaryLog:", v11)];
  }
  if (*(unsigned char *)(a1 + 10738)) {
    [*(id *)(a1 + 144) logSuppressionFeartures:a2];
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_100A53814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A53838(uint64_t a1, uint8_t *a2)
{
  uint64_t result = sub_100A3A90C(a1);
  if (result)
  {
    sub_10010F274((uint64_t)v16);
    float v4 = sub_100132EFC(v17, (uint64_t)"type,", 5);
    buf[0] = *a2;
    uint64_t v5 = sub_100132EFC(v4, (uint64_t)buf, 1);
    sub_100132EFC(v5, (uint64_t)",bins,", 6);
    for (uint64_t i = 1; i != 25; ++i)
    {
      if (i == 1) {
        uint64_t v7 = "";
      }
      else {
        uint64_t v7 = " ";
      }
      sub_100132EFC(v17, (uint64_t)v7, i != 1);
      std::ostream::operator<<();
    }
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v8 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Logging Max Accel Norm feature distribution to awd.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      *(_WORD *)uint64_t v19 = 0;
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onFeatureDistributionMaxAccelNorm(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v9 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      std::stringbuf::str();
      uint64_t v10 = v24 >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)uint64_t v19 = 136315138;
      *(void *)&v19[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "%s", v19, 0xCu);
      if (v24 < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      std::stringbuf::str();
      if (v20 >= 0) {
        long long v14 = v19;
      }
      else {
        long long v14 = *(unsigned char **)v19;
      }
      int v21 = 136315138;
      int v22 = v14;
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      if (v20 < 0) {
        operator delete(*(void **)v19);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onFeatureDistributionMaxAccelNorm(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    uint64_t v11 = sub_100C3AE20();
    sub_100A53D58(v11, a2);
    *(void *)((char *)v16
    v17[0] = v12;
    if (v18 < 0) {
      operator delete((void *)v17[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return std::ios::~ios();
  }
  return result;
}

void sub_100A53D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100A53D58(uint64_t a1, unsigned char *a2)
{
  uint64_t v4 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  int v5 = *a2;
  if (v5 == 1)
  {
    uint64_t v7 = 0;
    *(unsigned char *)(a1 + 396) = 1;
    do
    {
      *(_WORD *)(a1 + 397 + 2 * v7) += (char)a2[v7 + 1];
      ++v7;
    }
    while (v7 != 24);
  }
  else if (*a2)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v8 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_FAULT))
    {
      int v11 = 68289282;
      int v12 = 0;
      __int16 v13 = 2082;
      long long v14 = "";
      __int16 v15 = 1026;
      int v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unsupported update for feature distribution type\", \"type\":%{public}d}", (uint8_t *)&v11, 0x18u);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
    }
    uint64_t v9 = qword_1024190F8;
    if (os_signpost_enabled((os_log_t)qword_1024190F8))
    {
      int v11 = 68289282;
      int v12 = 0;
      __int16 v13 = 2082;
      long long v14 = "";
      __int16 v15 = 1026;
      int v16 = v5;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unsupported update for feature distribution type", "{\"msg%{public}.0s\":\"Unsupported update for feature distribution type\", \"type\":%{public}d}", (uint8_t *)&v11, 0x18u);
    }
  }
  else
  {
    uint64_t v6 = 0;
    *(unsigned char *)(a1 + 344) = 0;
    do
    {
      *(_WORD *)(a1 + 345 + 2 * v6) += (char)a2[v6 + 1];
      ++v6;
    }
    while (v6 != 24);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
}

void sub_100A53FBC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_100A53FC8(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result = sub_100A3A90C(a1);
  if (result)
  {
    sub_10010F274((uint64_t)v16);
    uint64_t v4 = sub_100132EFC(v17, (uint64_t)"type,", 5);
    buf[0] = *a2;
    int v5 = sub_100132EFC(v4, (uint64_t)buf, 1);
    sub_100132EFC(v5, (uint64_t)",bins,", 6);
    for (uint64_t i = 1; i != 35; ++i)
    {
      if (i == 1) {
        uint64_t v7 = "";
      }
      else {
        uint64_t v7 = " ";
      }
      sub_100132EFC(v17, (uint64_t)v7, i != 1);
      std::ostream::operator<<();
    }
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v8 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Logging Jerk Vector Magnitude feature distribution to awd.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      *(_WORD *)uint64_t v19 = 0;
      __int16 v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onFeatureDistributionJerkVectorMagnitude(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v9 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      std::stringbuf::str();
      uint64_t v10 = v24 >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)uint64_t v19 = 136315138;
      *(void *)&v19[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "%s", v19, 0xCu);
      if (v24 < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      std::stringbuf::str();
      if (v20 >= 0) {
        long long v14 = v19;
      }
      else {
        long long v14 = *(unsigned char **)v19;
      }
      int v21 = 136315138;
      int v22 = v14;
      __int16 v15 = (char *)_os_log_send_and_compose_impl();
      if (v20 < 0) {
        operator delete(*(void **)v19);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onFeatureDistributionJerkVectorMagnitude(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    uint64_t v11 = sub_100C3AE20();
    sub_100A544E8(v11, a2);
    *(void *)((char *)v16
    v17[0] = v12;
    if (v18 < 0) {
      operator delete((void *)v17[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return std::ios::~ios();
  }
  return result;
}

void sub_100A544B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100A544E8(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  int v5 = *a2;
  if (v5 == 3)
  {
    uint64_t v7 = 0;
    *(unsigned char *)(a1 + 520) = 3;
    do
    {
      *(_WORD *)(a1 + 521 + 2 * v7) += (char)a2[v7 + 1];
      ++v7;
    }
    while (v7 != 34);
  }
  else if (v5 == 2)
  {
    uint64_t v6 = 0;
    *(unsigned char *)(a1 + 448) = 2;
    do
    {
      *(_WORD *)(a1 + 449 + 2 * v6) += (char)a2[v6 + 1];
      ++v6;
    }
    while (v6 != 34);
  }
  else
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v8 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_FAULT))
    {
      int v11 = 68289282;
      int v12 = 0;
      __int16 v13 = 2082;
      long long v14 = "";
      __int16 v15 = 1026;
      int v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unsupported update for feature distribution type\", \"type\":%{public}d}", (uint8_t *)&v11, 0x18u);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
    }
    uint64_t v9 = qword_1024190F8;
    if (os_signpost_enabled((os_log_t)qword_1024190F8))
    {
      int v11 = 68289282;
      int v12 = 0;
      __int16 v13 = 2082;
      long long v14 = "";
      __int16 v15 = 1026;
      int v16 = v5;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unsupported update for feature distribution type", "{\"msg%{public}.0s\":\"Unsupported update for feature distribution type\", \"type\":%{public}d}", (uint8_t *)&v11, 0x18u);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
}

void sub_100A54754(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_100A54760(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100A3A90C(a1);
  if (result)
  {
    uint64_t v4 = *(__int16 *)(a2 + 101);
    sub_10010F274((uint64_t)v17);
    int v5 = sub_100132EFC(v18, (uint64_t)"type,", 5);
    buf[0] = *(unsigned char *)a2;
    uint64_t v6 = sub_100132EFC(v5, (uint64_t)buf, 1);
    sub_100132EFC(v6, (uint64_t)",bins,", 6);
    if (v4)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (i) {
          uint64_t v8 = " ";
        }
        else {
          uint64_t v8 = "";
        }
        sub_100132EFC(v18, (uint64_t)v8, i != 0);
        std::ostream::operator<<();
      }
    }
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v9 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Logging Max Abs XYZ feature distribution to awd.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      *(_WORD *)char v20 = 0;
      long long v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onFeatureDistributionMaxAbsXYZ(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v10 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      std::stringbuf::str();
      int v11 = v25 >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)char v20 = 136315138;
      *(void *)&v20[4] = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s", v20, 0xCu);
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      std::stringbuf::str();
      if (v21 >= 0) {
        __int16 v15 = v20;
      }
      else {
        __int16 v15 = *(unsigned char **)v20;
      }
      int v22 = 136315138;
      int v23 = v15;
      int v16 = (char *)_os_log_send_and_compose_impl();
      if (v21 < 0) {
        operator delete(*(void **)v20);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onFeatureDistributionMaxAbsXYZ(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    uint64_t v12 = sub_100C3AE20();
    sub_100A54C8C(v12, (unsigned __int8 *)a2);
    *(void *)((char *)v17
    v18[0] = v13;
    if (v19 < 0) {
      operator delete((void *)v18[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return std::ios::~ios();
  }
  return result;
}

void sub_100A54C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100A54C8C(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  int v5 = *a2;
  if (v5 == 4)
  {
    uint64_t v6 = *(__int16 *)(a2 + 101);
    *(unsigned char *)(a1 + 592) = 4;
    if (v6)
    {
      uint64_t v7 = (__int16 *)(a2 + 1);
      do
      {
        uint64_t v8 = *v7++;
        ++*(_WORD *)(a1 + 593 + 2 * v8);
        --v6;
      }
      while (v6);
    }
  }
  else
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v9 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_FAULT))
    {
      int v12 = 68289282;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 1026;
      int v17 = v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unsupported update for feature distribution type\", \"type\":%{public}d}", (uint8_t *)&v12, 0x18u);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
    }
    uint64_t v10 = qword_1024190F8;
    if (os_signpost_enabled((os_log_t)qword_1024190F8))
    {
      int v12 = 68289282;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 1026;
      int v17 = v5;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unsupported update for feature distribution type", "{\"msg%{public}.0s\":\"Unsupported update for feature distribution type\", \"type\":%{public}d}", (uint8_t *)&v12, 0x18u);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
}

void sub_100A54EB8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_100A54EC4(uint64_t a1)
{
  uint64_t v1 = a1 + 66280;
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)v1;
  return (*(uint64_t (**)(uint64_t))(*(void *)(v1 + 544) + 24))(v2);
}

uint64_t sub_100A54F4C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66284);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A54FDC(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66288);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A5506C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66292);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A550FC(uint64_t a1)
{
  uint64_t v1 = a1 + 66296;
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)v1;
  return (*(uint64_t (**)(uint64_t))(*(void *)(v1 + 528) + 24))(v2);
}

uint64_t sub_100A55184(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66304);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A55214(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66300);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A552A4(uint64_t a1)
{
  uint64_t v1 = a1 + 66312;
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)v1;
  return (*(uint64_t (**)(uint64_t))(*(void *)(v1 + 512) + 24))(v2);
}

uint64_t sub_100A5532C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66308);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A553BC(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66316);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A5544C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66320);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A554DC(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66324);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A5556C(uint64_t a1)
{
  uint64_t v1 = a1 + 66328;
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)v1;
  return (*(uint64_t (**)(uint64_t))(*(void *)(v1 + 496) + 24))(v2);
}

uint64_t sub_100A555F4(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66332);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A55684(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66336);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A55714(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66340);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A557A4(uint64_t a1)
{
  uint64_t v1 = a1 + 66344;
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)v1;
  return (*(uint64_t (**)(uint64_t))(*(void *)(v1 + 480) + 24))(v2);
}

uint64_t sub_100A5582C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66348);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A558BC(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66352);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A5594C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66356);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A559DC(uint64_t a1)
{
  uint64_t v1 = a1 + 66360;
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)v1;
  return (*(uint64_t (**)(uint64_t))(*(void *)(v1 + 464) + 24))(v2);
}

uint64_t sub_100A55A64(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66364);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A55AF4(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66368);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A55B84(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66372);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A55C14(uint64_t a1)
{
  uint64_t v1 = a1 + 66376;
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)v1;
  return (*(uint64_t (**)(uint64_t))(*(void *)(v1 + 448) + 24))(v2);
}

uint64_t sub_100A55C9C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66380);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A55D2C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66384);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A55DBC(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66388);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A55E4C(uint64_t a1)
{
  uint64_t v1 = a1 + 66392;
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)v1;
  return (*(uint64_t (**)(uint64_t))(*(void *)(v1 + 432) + 24))(v2);
}

uint64_t sub_100A55ED4(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66396);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A55F64(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66400);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A55FF4(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66404);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A56084(uint64_t a1)
{
  uint64_t v1 = a1 + 66408;
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)v1;
  return (*(uint64_t (**)(uint64_t))(*(void *)(v1 + 416) + 24))(v2);
}

uint64_t sub_100A5610C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66412);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A5619C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66416);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A5622C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66420);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A562BC(uint64_t a1)
{
  uint64_t v1 = a1 + 66424;
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)v1;
  return (*(uint64_t (**)(uint64_t))(*(void *)(v1 + 400) + 24))(v2);
}

uint64_t sub_100A56344(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66428);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A563D4(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66432);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A56464(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66436);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

uint64_t sub_100A564F4(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 66444);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

NSDictionary *sub_100A56584(uint64_t a1)
{
  v23[0] = CMFallDefaults;
  v21[0] = CMFallDefaults_isHeartRateDataCollectionEnabled;
  v22[0] = +[NSNumber numberWithBool:sub_100A51D30()];
  v21[1] = CMFallDefaults_fallFullMslLoggingInSensorKitEnabled;
  LOBYTE(v10) = 0;
  sub_10006ACBC(&v6, "FallFullMslLoggingInSensorKitEnabled", (unsigned __int8 *)&v10, 0);
  v22[1] = +[NSNumber numberWithBool:v7];
  v21[2] = CMFallDefaults_fallOffWristLookbackBeforeImpactStartOfInterval;
  sub_101A1F180(&v6, "FallOffWristLookbackBeforeImpactStartOfIntervalKey", &qword_101D6FA58, 0);
  _OWORD v22[2] = +[NSNumber numberWithDouble:v9];
  v21[3] = CMFallDefaults_fallOffWristLookbackBeforeImpactEndOfInterval;
  sub_101A1F180(&v6, "FallOffWristLookbackBeforeImpactEndOfIntervalKey", &qword_101D6FA98, 0);
  v22[3] = +[NSNumber numberWithDouble:v9];
  v21[4] = CMFallDefaults_fallOnWristAfterImpactStartOfInterval;
  sub_101A1F180(&v6, "FallOnWristAfterImpactStartOfIntervalKey", &qword_101D6FAD0, 0);
  v22[4] = +[NSNumber numberWithDouble:v9];
  v21[5] = CMFallDefaults_fallOnWristAfterImpactEndOfInterval;
  sub_101A1F180(&v6, "FallOnWristAfterImpactEndOfIntervalKey", &qword_101D6FB00, 0);
  void v22[5] = +[NSNumber numberWithDouble:v9];
  v21[6] = CMFallDefaults_fallLockedLookbackBeforeImpactStartOfInterval;
  sub_101A1F180(&v6, "FallLockedLookbackBeforeImpactStartOfIntervalKey", &qword_101D6FB40, 0);
  v22[6] = +[NSNumber numberWithDouble:v9];
  v21[7] = CMFallDefaults_fallLockedLookbackBeforeImpactEndOfInterval;
  sub_101A1F180(&v6, "FallLockedLookbackBeforeImpactEndOfIntervalKey", &qword_101D6FB78, 0);
  v22[7] = +[NSNumber numberWithDouble:v9];
  v21[8] = CMFallDefaults_fallMinimumOffChargerDurationBeforeGatingAlert;
  int v10 = 25;
  sub_10044FD20(&v6, "FallMinimumOffChargerDurationKey", &v10, 0);
  v22[8] = +[NSNumber numberWithInt:v8];
  v21[9] = CMFallDefaults_fallDelayBeforeWristAndChargerGating;
  v22[9] = +[NSNumber numberWithInt:sub_100A4E884()];
  v21[10] = CMFallDefaults_fallDelayBeforeShuttingDownAlgorithmsAfterLastClientDisconnect;
  int v10 = 300;
  sub_10044FD20(&v6, "FallDelayBeforeShuttingDownAlgorithmsAfterLastClientDisconnect", &v10, 0);
  v22[10] = +[NSNumber numberWithInt:v8];
  v21[11] = CMFallDefaults_fallDelayBeforeSendingSPUConfiguration;
  int v10 = 30;
  sub_10044FD20(&v6, "FallDelayBeforeSendingSPUConfiguration", &v10, 0);
  v22[11] = +[NSNumber numberWithInt:v8];
  v24[0] = +[NSDictionary dictionaryWithObjects:v22 forKeys:v21 count:12];
  v23[1] = CMFallConfiguration;
  v19[0] = CMFallConfiguration_isFallDetectionFeatureEnabled;
  v20[0] = +[NSNumber numberWithBool:sub_100A39D2C()];
  v19[1] = CMFallConfiguration_isFallDetectionDuringWorkoutFeatureEnabled;
  v20[1] = +[NSNumber numberWithBool:sub_100A39DF0()];
  v19[2] = CMFallConfiguration_isBridgeToggleEnabled;
  v20[2] = +[NSNumber numberWithBool:sub_100A3529C()];
  v19[3] = CMFallConfiguration_isBridgeDuringWorkoutToggleEnabled;
  void v20[3] = +[NSNumber numberWithBool:sub_100A35328()];
  v19[4] = CMFallConfiguration_userStudyFallStatsEnabled;
  LOBYTE(v10) = 0;
  sub_10006ACBC(&v6, "FallStatsEnabled", (unsigned __int8 *)&v10, 0);
  v20[4] = +[NSNumber numberWithBool:v7];
  v19[5] = CMFallConfiguration_userStudyPressureDataCollection;
  LOBYTE(v10) = 0;
  sub_10006ACBC(&v6, "FallStatsPressureEnabled", (unsigned __int8 *)&v10, 0);
  v20[5] = +[NSNumber numberWithBool:v7];
  v19[6] = CMFallConfiguration_shouldDetectorBeRunning;
  v20[6] = +[NSNumber numberWithBool:sub_100A41940(a1)];
  v24[1] = +[NSDictionary dictionaryWithObjects:v20 forKeys:v19 count:7];
  void v23[2] = CMFallState;
  v17[0] = CMFallState_isSensorRecordingEnabled;
  LOBYTE(v10) = 0;
  sub_10006ACBC(&v6, "FallStatsSensorRecordingEnabled", (unsigned __int8 *)&v10, 0);
  v18[0] = +[NSNumber numberWithBool:v7];
  v17[1] = CMFallState_isSensorKitLoggingEnabled;
  v18[1] = +[NSNumber numberWithBool:0];
  void v17[2] = CMFallState_lastGatedAnomalyAOPTimestamp;
  void v18[2] = +[NSNumber numberWithUnsignedLongLong:sub_100A45238()];
  void v24[2] = +[NSDictionary dictionaryWithObjects:v18 forKeys:v17 count:3];
  v23[3] = CMFallOptInsAndProfiles;
  v15[0] = CMFallOptInsAndProfiles_isImproveHealthAndFitnessOptInEnabled;
  v16[0] = +[NSNumber numberWithBool:sub_100A416B4()];
  v15[1] = CMFallOptInsAndProfiles_lastFallAdditionalProfileLoggingEnabled;
  v16[1] = +[NSNumber numberWithBool:sub_100A474E4()];
  v15[2] = CMFallOptInsAndProfiles_fallAdditionalProfileLoggingEnabled;
  LOBYTE(v10) = 0;
  sub_10006ACBC(&v6, "FallAdditionalProfileLoggingEnabled", (unsigned __int8 *)&v10, 0);
  void v16[2] = +[NSNumber numberWithBool:v7];
  v15[3] = CMFallOptInsAndProfiles_isBackgroundSensorDataLoggingAllowed;
  v16[3] = +[NSNumber numberWithBool:sub_100A417A8()];
  v15[4] = CMFallOptInsAndProfiles_isTapToRadarFallSubmissionAllowed;
  v16[4] = +[NSNumber numberWithBool:sub_100A41808()];
  v15[5] = CMFallOptInsAndProfiles_isTapToRadarNearFallSubmissionAllowed;
  v16[5] = +[NSNumber numberWithBool:sub_100A41874()];
  v15[6] = CMFallOptInsAndProfiles_isTapToRadarSubmissionAllowed;
  if (sub_100A41808()) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = sub_100A41874();
  }
  v16[6] = +[NSNumber numberWithBool:v2];
  v15[7] = CMFallOptInsAndProfiles_isAnyFallDataCollectionEnabled;
  v16[7] = +[NSNumber numberWithBool:sub_100A41A54(a1)];
  v15[8] = CMFallOptInsAndProfiles_isBackgroundAllDayAnomalyDetectionEnabled;
  v16[8] = +[NSNumber numberWithBool:sub_100A419F4(a1)];
  v15[9] = CMFallOptInsAndProfiles_isBackgroundWorkoutAnomalyDetectionEnabled;
  v16[9] = +[NSNumber numberWithBool:sub_100A419B8()];
  v24[3] = +[NSDictionary dictionaryWithObjects:v16 forKeys:v15 count:10];
  _DWORD v23[4] = CMFallFieldMetrics;
  v13[0] = CMFallFieldMetrics_isBackgroundFieldMetricsLoggingAllowed;
  v14[0] = +[NSNumber numberWithBool:sub_100A418E0()];
  v13[1] = CMFallFieldMetrics_isBackgroundFieldMetricsLoggingEnabled;
  if (sub_100A41940(a1)) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = sub_100A418E0();
  }
  v14[1] = +[NSNumber numberWithBool:v3];
  _DWORD v13[2] = CMFallFieldMetrics_isFieldMetricsLoggingEnabled;
  int v14[2] = +[NSNumber numberWithBool:sub_100A3A90C(a1)];
  v24[4] = +[NSDictionary dictionaryWithObjects:v14 forKeys:v13 count:3];
  void v23[5] = CMFallHDSCollection;
  v11[0] = CMFallHDSCollection_isOptInDataLoggingAvailable;
  if (sub_100A357C4()) {
    BOOL v4 = CFAbsoluteTimeGetCurrent() < 654764400.0;
  }
  else {
    BOOL v4 = 0;
  }
  v12[0] = +[NSNumber numberWithBool:v4];
  v11[1] = CMFallHDSCollection_isOptInDataLoggingEnabled;
  v12[1] = +[NSNumber numberWithBool:sub_100A41728(a1)];
  v11[2] = CMFallHDSCollection_isUnderRateLimit;
  _DWORD v12[2] = +[NSNumber numberWithBool:*(double *)(a1 + 248) <= 240.0];
  void v24[5] = +[NSDictionary dictionaryWithObjects:v12 forKeys:v11 count:3];
  return +[NSDictionary dictionaryWithObjects:v24 forKeys:v23 count:6];
}

__n128 sub_100A56E94@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 7047);
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 7031);
  *(_OWORD *)(a2 + 144) = v2;
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a1 + 7063);
  *(_OWORD *)(a2 + 175) = *(_OWORD *)(a1 + 7078);
  long long v3 = *(_OWORD *)(a1 + 6983);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 6967);
  *(_OWORD *)(a2 + 80) = v3;
  long long v4 = *(_OWORD *)(a1 + 7015);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 6999);
  *(_OWORD *)(a2 + 112) = v4;
  long long v5 = *(_OWORD *)(a1 + 6919);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 6903);
  *(_OWORD *)(a2 + 16) = v5;
  __n128 result = *(__n128 *)(a1 + 6935);
  long long v7 = *(_OWORD *)(a1 + 6951);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v7;
  return result;
}

NSDictionary *sub_100A56ED8()
{
  v87[0] = @"MaxAccelNormThreshold";
  uint64_t v0 = sub_100C3AE20();
  *(float *)&double v1 = sub_100C3CB38(v0);
  v88[0] = +[NSNumber numberWithFloat:v1];
  v87[1] = @"UserAgeBin";
  uint64_t v2 = sub_100C3AE20();
  *(float *)&double v3 = sub_100C3CC58(v2);
  v88[1] = +[NSNumber numberWithFloat:v3];
  v87[2] = @"UserMaxMets";
  uint64_t v4 = sub_100C3AE20();
  *(float *)&double v5 = sub_100C3CD80(v4);
  v88[2] = +[NSNumber numberWithFloat:v5];
  v87[3] = @"numFallAlerts";
  uint64_t v6 = sub_100C3AE20();
  v88[3] = +[NSNumber numberWithInt:sub_100A57C38(v6)];
  v87[4] = @"numRecoveryEvents";
  uint64_t v7 = sub_100C3AE20();
  v88[4] = +[NSNumber numberWithInt:sub_100A57CBC(v7)];
  v87[5] = @"numUserResponseConfirmedActionRequested";
  uint64_t v8 = sub_100C3AE20();
  v88[5] = +[NSNumber numberWithInt:sub_100A57D40(v8)];
  v87[6] = @"numUserResponseConfirmedNoActionRequested";
  uint64_t v9 = sub_100C3AE20();
  v88[6] = +[NSNumber numberWithInt:sub_100A57DC4(v9)];
  v87[7] = @"numUserResponseDismissed";
  uint64_t v10 = sub_100C3AE20();
  v88[7] = +[NSNumber numberWithInt:sub_100A57E48(v10)];
  v87[8] = @"numUserResponseRejected";
  uint64_t v11 = sub_100C3AE20();
  v88[8] = +[NSNumber numberWithInt:sub_100A57ECC(v11)];
  v87[9] = @"numUserResponseAutomaticActionRequested";
  uint64_t v12 = sub_100C3AE20();
  v88[9] = +[NSNumber numberWithInt:sub_100A57F50(v12)];
  v87[10] = @"numImpactReplacedBecauseOfNewImpact";
  uint64_t v13 = sub_100C3AE20();
  v88[10] = +[NSNumber numberWithInt:sub_100A57FD4(v13)];
  v87[11] = @"numImpactCanceledBecauseOfMaxAccelNorm";
  uint64_t v14 = sub_100C3AE20();
  v88[11] = +[NSNumber numberWithInt:sub_100A58060(v14)];
  v87[12] = @"numImpactCanceledBecauseOfOtherHardThresholds";
  uint64_t v15 = sub_100C3AE20();
  v88[12] = +[NSNumber numberWithInt:sub_100A580EC(v15)];
  v87[13] = @"numImpactCanceledBecauseOfMultiPeaks";
  uint64_t v16 = sub_100C3AE20();
  v88[13] = +[NSNumber numberWithInt:sub_100A58178(v16)];
  v87[14] = @"numImpactCanceledBecauseOfNaiveBayes";
  uint64_t v17 = sub_100C3AE20();
  v88[14] = +[NSNumber numberWithInt:sub_100A58204(v17)];
  v87[15] = @"numImpactCanceledBecauseOfCyclingImpactThresholds";
  uint64_t v18 = sub_100C3AE20();
  v88[15] = +[NSNumber numberWithInt:sub_100A58290(v18)];
  v87[16] = @"numImpactCanceledBecauseOfExistingAlert";
  uint64_t v19 = sub_100C3AE20();
  v88[16] = +[NSNumber numberWithInt:sub_100A5831C(v19)];
  v87[17] = @"numImpactCanceledBecauseOfDisabledStateMachine";
  uint64_t v20 = sub_100C3AE20();
  v88[17] = +[NSNumber numberWithInt:sub_100A583A8(v20)];
  v87[18] = @"numImpactCanceledAggregate";
  uint64_t v21 = sub_100C3AE20();
  v88[18] = +[NSNumber numberWithInt:sub_100A58434(v21)];
  v87[19] = @"numAlertCanceledBecauseOfHighFrequencyFFT";
  uint64_t v22 = sub_100C3AE20();
  v88[19] = +[NSNumber numberWithInt:sub_100A584C0(v22)];
  v87[20] = @"numAlertCanceledBecauseOfLowFrequencyFFT";
  uint64_t v23 = sub_100C3AE20();
  v88[20] = +[NSNumber numberWithInt:sub_100A5854C(v23)];
  v87[21] = @"numAlertCanceledBecauseOfDecimatedLowFrequencyFFT";
  uint64_t v24 = sub_100C3AE20();
  v88[21] = +[NSNumber numberWithInt:sub_100A585D8(v24)];
  v87[22] = @"numAlertCanceledBecauseOfFFT";
  uint64_t v25 = sub_100C3AE20();
  v88[22] = +[NSNumber numberWithInt:sub_100A58664(v25)];
  v87[23] = @"numAlertCanceledBecauseOfPeaksIQR";
  uint64_t v26 = sub_100C3AE20();
  v88[23] = +[NSNumber numberWithInt:sub_100A586F0(v26)];
  v87[24] = @"numAlertCanceledBecauseOfOffBody";
  uint64_t v27 = sub_100C3AE20();
  v88[24] = +[NSNumber numberWithInt:sub_100A5877C(v27)];
  v87[25] = @"numAlertCanceledBecauseOfRepetitiveMotion";
  uint64_t v28 = sub_100C3AE20();
  v88[25] = +[NSNumber numberWithInt:sub_100A58808(v28)];
  v87[26] = @"numAlertCanceledBecauseOfAbsenceOfQuiessence";
  uint64_t v29 = sub_100C3AE20();
  v88[26] = +[NSNumber numberWithInt:sub_100A58894(v29)];
  v87[27] = @"numAlertCanceledBecauseOfOffWristPre";
  uint64_t v30 = sub_100C3AE20();
  v88[27] = +[NSNumber numberWithInt:sub_100A58920(v30)];
  v87[28] = @"numAlertCanceledBecauseOfOffWristPost";
  uint64_t v31 = sub_100C3AE20();
  v88[28] = +[NSNumber numberWithInt:sub_100A589AC(v31)];
  v87[29] = @"numAlertCanceledAggregate";
  uint64_t v32 = sub_100C3AE20();
  v88[29] = +[NSNumber numberWithInt:sub_100A58A38(v32)];
  v87[30] = @"numAlertCanceledBecauseOfFeatureDisabled";
  uint64_t v33 = sub_100C3AE20();
  v88[30] = +[NSNumber numberWithInt:sub_100A58AC4(v33)];
  v87[31] = @"numAlertCanceledBecauseOfAlreadyGatedBefore";
  uint64_t v34 = sub_100C3AE20();
  v88[31] = +[NSNumber numberWithInt:sub_100A58B50(v34)];
  v87[32] = @"numAlertCanceledBecauseOfOnCharger";
  uint64_t v35 = sub_100C3AE20();
  v88[32] = +[NSNumber numberWithInt:sub_100A58BDC(v35)];
  v87[33] = @"numAlertCanceledBecauseOfSimilarPeaks";
  uint64_t v36 = sub_100C3AE20();
  v88[33] = +[NSNumber numberWithInt:sub_100A58C68(v36)];
  v87[34] = @"numAlertCanceledBecauseOfLockedNoMotionBeforeImpact";
  uint64_t v37 = sub_100C3AE20();
  v88[34] = +[NSNumber numberWithInt:sub_100A58CF4(v37)];
  v87[35] = @"numAlertCanceledBecauseOfReferee";
  uint64_t v38 = sub_100C3AE20();
  v88[35] = +[NSNumber numberWithInt:sub_100A58D80(v38)];
  v87[36] = @"numAlertCanceledBecauseStand";
  uint64_t v39 = sub_100C3AE20();
  v88[36] = +[NSNumber numberWithInt:sub_100A58E0C(v39)];
  v87[37] = @"numAlertCanceledBecauseActive";
  uint64_t v40 = sub_100C3AE20();
  v88[37] = +[NSNumber numberWithInt:sub_100A58E98(v40)];
  v87[38] = @"numAlertCanceledBecauseSteps";
  uint64_t v41 = sub_100C3AE20();
  v88[38] = +[NSNumber numberWithInt:sub_100A58F24(v41)];
  v87[39] = @"numAlertCanceledBecauseOfDistanceTraveledPostImpact";
  uint64_t v42 = sub_100C3AE20();
  v88[39] = +[NSNumber numberWithInt:sub_100A58FB0(v42)];
  v87[40] = @"numAlertCanceledBecauseOfDistanceCyclingPostImpact";
  uint64_t v43 = sub_100C3AE20();
  v88[40] = +[NSNumber numberWithInt:sub_100A5903C(v43)];
  v87[41] = @"numAlertCanceledOtherAggregate";
  uint64_t v44 = sub_100C3AE20();
  v88[41] = +[NSNumber numberWithInt:sub_100A590C8(v44)];
  v87[42] = @"numRecoveryCanceledBecauseOfReferee";
  uint64_t v45 = sub_100C3AE20();
  v88[42] = +[NSNumber numberWithInt:sub_100A59154(v45)];
  v87[43] = @"numRecoveryCanceledAggregate";
  uint64_t v46 = sub_100C3AE20();
  v88[43] = +[NSNumber numberWithInt:sub_100A591E0(v46)];
  v87[44] = @"numSOSCanceledBecauseUserResponse";
  uint64_t v47 = sub_100C3AE20();
  v88[44] = +[NSNumber numberWithInt:sub_100A5926C(v47)];
  v87[45] = @"numSOSCanceledBecauseOffWrist";
  uint64_t v48 = sub_100C3AE20();
  v88[45] = +[NSNumber numberWithInt:sub_100A592F8(v48)];
  v87[46] = @"numSOSCanceledBecauseStand";
  uint64_t v49 = sub_100C3AE20();
  v88[46] = +[NSNumber numberWithInt:sub_100A59384(v49)];
  v87[47] = @"numSOSCanceledBecauseActive";
  uint64_t v50 = sub_100C3AE20();
  v88[47] = +[NSNumber numberWithInt:sub_100A59410(v50)];
  v87[48] = @"numSOSCanceledBecauseSteps";
  uint64_t v51 = sub_100C3AE20();
  v88[48] = +[NSNumber numberWithInt:sub_100A5949C(v51)];
  v87[49] = @"numSOSCanceledBecauseAbsenceOfLongLie";
  uint64_t v52 = sub_100C3AE20();
  v88[49] = +[NSNumber numberWithInt:sub_100A59528(v52)];
  v87[50] = @"numSOSCanceledBecauseOfReferee";
  uint64_t v53 = sub_100C3AE20();
  v88[50] = +[NSNumber numberWithInt:sub_100A595B4(v53)];
  v87[51] = @"numSOSCanceledAggregate";
  uint64_t v54 = sub_100C3AE20();
  v88[51] = +[NSNumber numberWithInt:sub_100A59640(v54)];
  v87[52] = @"numSOSCallConsidered";
  uint64_t v55 = sub_100C3AE20();
  v88[52] = +[NSNumber numberWithInt:sub_100A596CC(v55)];
  v87[53] = @"numSOSCallScheduled";
  uint64_t v56 = sub_100C3AE20();
  v88[53] = +[NSNumber numberWithInt:sub_100A5975C(v56)];
  v87[54] = @"numSOSCallPlaced";
  uint64_t v57 = sub_100C3AE20();
  v88[54] = +[NSNumber numberWithInt:sub_100A597EC(v57)];
  v87[55] = @"numOutdoorCyclingFallAlerts";
  uint64_t v58 = sub_100C3AE20();
  v88[55] = +[NSNumber numberWithInt:sub_100A5987C(v58)];
  v87[56] = @"numOutdoorCyclingRecoveryEvents";
  uint64_t v59 = sub_100C3AE20();
  v88[56] = +[NSNumber numberWithInt:sub_100A5990C(v59)];
  v87[57] = @"numOutdoorCyclingUserResponseConfirmedActionRequested";
  uint64_t v60 = sub_100C3AE20();
  v88[57] = +[NSNumber numberWithInt:sub_100A5999C(v60)];
  v87[58] = @"numOutdoorCyclingUserResponseConfirmedNoActionRequested";
  uint64_t v61 = sub_100C3AE20();
  v88[58] = +[NSNumber numberWithInt:sub_100A59A2C(v61)];
  v87[59] = @"numOutdoorCyclingUserResponseDismissed";
  uint64_t v62 = sub_100C3AE20();
  v88[59] = +[NSNumber numberWithInt:sub_100A59ABC(v62)];
  v87[60] = @"numOutdoorCyclingUserResponseRejected";
  uint64_t v63 = sub_100C3AE20();
  v88[60] = +[NSNumber numberWithInt:sub_100A59B4C(v63)];
  v87[61] = @"numOutdoorCyclingUserResponseAutomaticActionRequested";
  uint64_t v64 = sub_100C3AE20();
  v88[61] = +[NSNumber numberWithInt:sub_100A59BDC(v64)];
  v87[62] = @"numOutdoorWalkingFallAlerts";
  uint64_t v65 = sub_100C3AE20();
  v88[62] = +[NSNumber numberWithInt:sub_100A59C6C(v65)];
  v87[63] = @"numOutdoorWalkingRecoveryEvents";
  uint64_t v66 = sub_100C3AE20();
  v88[63] = +[NSNumber numberWithInt:sub_100A59CFC(v66)];
  v87[64] = @"numOutdoorWalkingUserResponseConfirmedActionRequested";
  uint64_t v67 = sub_100C3AE20();
  v88[64] = +[NSNumber numberWithInt:sub_100A59D8C(v67)];
  v87[65] = @"numOutdoorWalkingUserResponseConfirmedNoActionRequested";
  uint64_t v68 = sub_100C3AE20();
  v88[65] = +[NSNumber numberWithInt:sub_100A59E1C(v68)];
  v87[66] = @"numOutdoorWalkingUserResponseDismissed";
  uint64_t v69 = sub_100C3AE20();
  v88[66] = +[NSNumber numberWithInt:sub_100A59EAC(v69)];
  v87[67] = @"numOutdoorWalkingUserResponseRejected";
  uint64_t v70 = sub_100C3AE20();
  v88[67] = +[NSNumber numberWithInt:sub_100A59F3C(v70)];
  v87[68] = @"numOutdoorWalkingUserResponseAutomaticActionRequested";
  uint64_t v71 = sub_100C3AE20();
  v88[68] = +[NSNumber numberWithInt:sub_100A59FCC(v71)];
  v87[69] = @"numOutdoorRunningFallAlerts";
  uint64_t v72 = sub_100C3AE20();
  v88[69] = +[NSNumber numberWithInt:sub_100A5A05C(v72)];
  v87[70] = @"numOutdoorRunningRecoveryEvents";
  uint64_t v73 = sub_100C3AE20();
  v88[70] = +[NSNumber numberWithInt:sub_100A5A0EC(v73)];
  v87[71] = @"numOutdoorRunningUserResponseConfirmedActionRequested";
  uint64_t v74 = sub_100C3AE20();
  v88[71] = +[NSNumber numberWithInt:sub_100A5A17C(v74)];
  v87[72] = @"numOutdoorRunningUserResponseConfirmedNoActionRequested";
  uint64_t v75 = sub_100C3AE20();
  v88[72] = +[NSNumber numberWithInt:sub_100A5A20C(v75)];
  v87[73] = @"numOutdoorRunningUserResponseDismissed";
  uint64_t v76 = sub_100C3AE20();
  v88[73] = +[NSNumber numberWithInt:sub_100A5A29C(v76)];
  v87[74] = @"numOutdoorRunningUserResponseRejected";
  uint64_t v77 = sub_100C3AE20();
  v88[74] = +[NSNumber numberWithInt:sub_100A5A32C(v77)];
  v87[75] = @"numOutdoorRunningUserResponseAutomaticActionRequested";
  uint64_t v78 = sub_100C3AE20();
  v88[75] = +[NSNumber numberWithInt:sub_100A5A3BC(v78)];
  v87[76] = @"numHikingFallAlerts";
  uint64_t v79 = sub_100C3AE20();
  v88[76] = +[NSNumber numberWithInt:sub_100A5A44C(v79)];
  v87[77] = @"numHikingRecoveryEvents";
  uint64_t v80 = sub_100C3AE20();
  v88[77] = +[NSNumber numberWithInt:sub_100A5A4DC(v80)];
  v87[78] = @"numHikingUserResponseConfirmedActionRequested";
  uint64_t v81 = sub_100C3AE20();
  v88[78] = +[NSNumber numberWithInt:sub_100A5A56C(v81)];
  v87[79] = @"numHikingUserResponseConfirmedNoActionRequested";
  uint64_t v82 = sub_100C3AE20();
  v88[79] = +[NSNumber numberWithInt:sub_100A5A5FC(v82)];
  v87[80] = @"numHikingUserResponseDismissed";
  uint64_t v83 = sub_100C3AE20();
  v88[80] = +[NSNumber numberWithInt:sub_100A5A68C(v83)];
  v87[81] = @"numHikingUserResponseRejected";
  uint64_t v84 = sub_100C3AE20();
  v88[81] = +[NSNumber numberWithInt:sub_100A5A71C(v84)];
  v87[82] = @"numHikingUserResponseAutomaticActionRequested";
  uint64_t v85 = sub_100C3AE20();
  v88[82] = +[NSNumber numberWithInt:sub_100A5A7AC(v85)];
  return +[NSDictionary dictionaryWithObjects:v88 forKeys:v87 count:83];
}

uint64_t sub_100A57C38(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 124);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A57CBC(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 128);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A57D40(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 140);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A57DC4(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 144);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A57E48(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 148);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A57ECC(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 152);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A57F50(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 156);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A57FD4(uint64_t a1)
{
  double v1 = (unsigned int *)(a1 + 66280);
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *v1;
  (*(void (**)(uint64_t))(*((void *)v1 + 68) + 24))(v2);
  return v3;
}

uint64_t sub_100A58060(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66284);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A580EC(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66288);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A58178(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66292);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A58204(uint64_t a1)
{
  double v1 = (unsigned int *)(a1 + 66296);
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *v1;
  (*(void (**)(uint64_t))(*((void *)v1 + 66) + 24))(v2);
  return v3;
}

uint64_t sub_100A58290(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66300);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A5831C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66304);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A583A8(uint64_t a1)
{
  double v1 = (unsigned int *)(a1 + 66312);
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *v1;
  (*(void (**)(uint64_t))(*((void *)v1 + 64) + 24))(v2);
  return v3;
}

uint64_t sub_100A58434(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66308);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A584C0(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66316);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A5854C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66320);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A585D8(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66324);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A58664(uint64_t a1)
{
  double v1 = (unsigned int *)(a1 + 66328);
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *v1;
  (*(void (**)(uint64_t))(*((void *)v1 + 62) + 24))(v2);
  return v3;
}

uint64_t sub_100A586F0(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66332);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A5877C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66336);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A58808(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66340);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A58894(uint64_t a1)
{
  double v1 = (unsigned int *)(a1 + 66344);
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *v1;
  (*(void (**)(uint64_t))(*((void *)v1 + 60) + 24))(v2);
  return v3;
}

uint64_t sub_100A58920(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66348);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A589AC(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66352);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A58A38(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66356);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A58AC4(uint64_t a1)
{
  double v1 = (unsigned int *)(a1 + 66360);
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *v1;
  (*(void (**)(uint64_t))(*((void *)v1 + 58) + 24))(v2);
  return v3;
}

uint64_t sub_100A58B50(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66368);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A58BDC(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66364);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A58C68(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66372);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A58CF4(uint64_t a1)
{
  double v1 = (unsigned int *)(a1 + 66376);
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *v1;
  (*(void (**)(uint64_t))(*((void *)v1 + 56) + 24))(v2);
  return v3;
}

uint64_t sub_100A58D80(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66380);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A58E0C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66384);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A58E98(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66388);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A58F24(uint64_t a1)
{
  double v1 = (unsigned int *)(a1 + 66392);
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *v1;
  (*(void (**)(uint64_t))(*((void *)v1 + 54) + 24))(v2);
  return v3;
}

uint64_t sub_100A58FB0(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66396);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A5903C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66400);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A590C8(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66404);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A59154(uint64_t a1)
{
  double v1 = (unsigned int *)(a1 + 66408);
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *v1;
  (*(void (**)(uint64_t))(*((void *)v1 + 52) + 24))(v2);
  return v3;
}

uint64_t sub_100A591E0(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66412);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A5926C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66416);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A592F8(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66420);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A59384(uint64_t a1)
{
  double v1 = (unsigned int *)(a1 + 66424);
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *v1;
  (*(void (**)(uint64_t))(*((void *)v1 + 50) + 24))(v2);
  return v3;
}

uint64_t sub_100A59410(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66428);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A5949C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66432);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A59528(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66436);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A595B4(uint64_t a1)
{
  double v1 = (unsigned int *)(a1 + 66440);
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *v1;
  (*(void (**)(uint64_t))(*((void *)v1 + 48) + 24))(v2);
  return v3;
}

uint64_t sub_100A59640(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66444);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A596CC(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66712);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A5975C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66716);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A597EC(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66720);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A5987C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66576);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A5990C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66580);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A5999C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66584);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A59A2C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66588);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A59ABC(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66592);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A59B4C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66596);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A59BDC(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66600);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A59C6C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66604);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A59CFC(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66608);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A59D8C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66612);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A59E1C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66616);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A59EAC(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66620);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A59F3C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66624);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A59FCC(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66628);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A5A05C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66632);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A5A0EC(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66636);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A5A17C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66640);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A5A20C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66644);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A5A29C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66648);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A5A32C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66652);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A5A3BC(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66656);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A5A44C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66660);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A5A4DC(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66664);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A5A56C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66668);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A5A5FC(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66672);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A5A68C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66676);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A5A71C(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66680);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100A5A7AC(uint64_t a1)
{
  uint64_t v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 66824) + 16))(a1 + 66824);
  uint64_t v3 = *(unsigned int *)(a1 + 66684);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

id sub_100A5A83C(uint64_t a1)
{
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  uint64_t v2 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "An Impact sequence just started.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    *(_WORD *)uint64_t v7 = 0;
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onImpactDataStart(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  [*(id *)(a1 + 136) clearAllLogs];
  uint64_t v3 = *(void **)(a1 + 144);
  v7[0] = 0;
  sub_10006ACBC(buf, "FallFullMslLoggingInSensorKitEnabled", v7, 0);
  id result = [v3 cleanUpIncludingDerivedFeatures:buf[1]];
  for (uint64_t i = *(void *)(a1 + 8056); i != a1 + 8048; uint64_t i = *(void *)(i + 8))
  {
    if ((sub_100A41728(a1) & 1) == 0 && (sub_100A41808() & 1) == 0)
    {
      id result = (id)sub_100A41874();
      if (!result) {
        continue;
      }
    }
    id result = [*(id *)(a1 + 136) logOdometer:i + 16];
  }
  return result;
}

id sub_100A5AA4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (unsigned char *)(a1 + 10737);
  if (!*(void *)(a1 + 7592))
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    double v5 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Receiving Pressure", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onPressureData(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v17);
      if (v17 != buf) {
        free(v17);
      }
    }
  }
  ++*(void *)(a1 + 7592);
  *(void *)long long buf = *(void *)(a2 + 20);
  *(_DWORD *)&uint8_t buf[8] = *(_DWORD *)(a2 + 8);
  sub_1000C0748((unsigned __int16 *)(a1 + 456), buf);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)long long buf = *(_OWORD *)a2;
  *(_OWORD *)&uint8_t buf[16] = v6;
  uint64_t v19 = *(void *)(a2 + 32);
  *(_DWORD *)&uint8_t buf[8] = 2143289344;
  int v7 = *(unsigned __int16 *)(a1 + 458);
  if (*(_WORD *)(a1 + 458))
  {
    uint64_t v8 = a1 + 464;
    unint64_t v9 = *(void *)&buf[12];
    uint64_t v10 = *(unsigned __int16 *)(a1 + 456);
    while (1)
    {
      unint64_t v11 = *(void *)(v8 + 16 * v10);
      unint64_t v12 = v9 - v11;
      if (v11 > v9) {
        unint64_t v12 = v11 - v9;
      }
      if (v12 <= 0x8CA0) {
        break;
      }
      if (v11 <= v9)
      {
        unint64_t v13 = v10 + 1;
        unint64_t v14 = *(unsigned int *)(a1 + 460);
        if (v13 < v14) {
          LOWORD(v14) = 0;
        }
        unsigned __int16 v15 = v13 - v14;
        uint64_t v10 = v15;
        *(_WORD *)(a1 + 456) = v15;
        *(_WORD *)(a1 + 458) = --v7;
        if ((_WORD)v7) {
          continue;
        }
      }
      goto LABEL_18;
    }
    *(_DWORD *)&uint8_t buf[8] = *(_DWORD *)(v8 + 16 * v10 + 8);
  }
LABEL_18:
  id result = [*(id *)(a1 + 136) logPressure:buf];
  if (*v4) {
    id result = [*(id *)(a1 + 192) logData:+[CLFallLoggerManager encodePressure:](CLFallLoggerManager, "encodePressure:", buf)];
  }
  if (v4[1]) {
    return [*(id *)(a1 + 144) logPressure:buf];
  }
  return result;
}

void sub_100A5ACFC(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned __int8 *a4)
{
  if (*a3 == 2)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v21 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
    {
      int v22 = *a4;
      int v23 = a4[1];
      int v24 = a4[2];
      int v25 = a4[3];
      int v26 = a4[4];
      int v27 = a4[5];
      int v28 = a4[6];
      uint64_t buf = 68290818;
      __int16 v32 = 2082;
      uint64_t v33 = "";
      __int16 v34 = 1026;
      *(_DWORD *)uint64_t v35 = v22;
      *(_WORD *)&v35[4] = 1026;
      *(_DWORD *)&v35[6] = v23;
      *(_WORD *)uint64_t v36 = 1026;
      *(_DWORD *)&v36[2] = v24;
      *(_WORD *)uint64_t v37 = 1026;
      *(_DWORD *)&v37[2] = v25;
      *(_WORD *)uint64_t v38 = 1026;
      *(_DWORD *)&v38[2] = v26;
      *(_WORD *)uint64_t v39 = 1026;
      *(_DWORD *)&v39[2] = v27;
      *(_WORD *)uint64_t v40 = 1026;
      *(_DWORD *)&_DWORD v40[2] = v28;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Received onWatchSystemState update\", \"isPasscodeLockEnabled\":%{public}hhd, \"isWaterLockEnabled\":%{public}hhd, \"isSchoolModeEnabled\":%{public}hhd, \"isSleepLockEnabled\":%{public}hhd, \"isTheaterModeEnabled\":%{public}hhd, \"isTourModeEnabled\":%{public}hhd, \"isDepthModeEnabled\":%{public}hhd}", (uint8_t *)&buf, 0x3Cu);
    }
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    CFAbsoluteTime v30 = CFAbsoluteTimeGetCurrent();
    LODWORD(buf) = *(_DWORD *)a4;
    *(_DWORD *)((char *)&buf + 3) = *(_DWORD *)(a4 + 3);
    *(CFAbsoluteTime *)(a1 + 7792) = Current;
    *(CFAbsoluteTime *)(a1 + 7800) = v30;
    *(_DWORD *)(a1 + 7808) = buf;
    *(_DWORD *)(a1 + 7811) = *(_DWORD *)((char *)&buf + 3);
  }
  else if (*a3 == 1)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    long long v6 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *((void *)a4 + 2);
      int v8 = *(_DWORD *)a4;
      int v9 = *((_DWORD *)a4 + 1);
      int v10 = *((_DWORD *)a4 + 2);
      int v11 = a4[24];
      int v12 = a4[25];
      int v13 = a4[26];
      uint64_t buf = 68290818;
      __int16 v32 = 2082;
      uint64_t v33 = "";
      __int16 v34 = 2050;
      *(void *)uint64_t v35 = v7;
      *(_WORD *)&v35[8] = 1026;
      *(_DWORD *)uint64_t v36 = v8;
      *(_WORD *)&v36[4] = 1026;
      *(_DWORD *)uint64_t v37 = v9;
      *(_WORD *)&v37[4] = 1026;
      *(_DWORD *)uint64_t v38 = v10;
      *(_WORD *)&v38[4] = 1026;
      *(_DWORD *)uint64_t v39 = v11;
      *(_WORD *)&v39[4] = 1026;
      *(_DWORD *)uint64_t v40 = v12;
      *(_WORD *)&unsigned __int8 v40[4] = 1026;
      int v41 = v13;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Received onWristMonitor update\", \"timestamp\":%{public}llu, \"onWrist\":%{public}d, \"onWristSensor\":%{public}d, \"onWristConfidence\":%{public}d, \"isOnCharger\":%{public}hhd, \"isForcedOnWristEnabled\":%{public}hhd, \"isWristDetectionEnabled\":%{public}hhd}", (uint8_t *)&buf, 0x40u);
    }
    int v14 = *(_DWORD *)a4;
    int v15 = a4[24];
    double v16 = CFAbsoluteTimeGetCurrent();
    sub_101448358(a1 + 7608, v14, v15, v16);
    CFAbsoluteTime v17 = CFAbsoluteTimeGetCurrent();
    CFAbsoluteTime v18 = CFAbsoluteTimeGetCurrent();
    long long v20 = *(_OWORD *)a4;
    long long v19 = *((_OWORD *)a4 + 1);
    *(CFAbsoluteTime *)(a1 + 7744) = v17;
    *(CFAbsoluteTime *)(a1 + 7752) = v18;
    *(_OWORD *)(a1 + 7760) = v20;
    *(_OWORD *)(a1 + 7776) = v19;
  }
}

uint64_t sub_100A5AFC4(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 8)
  {
    uint64_t v4 = result;
    uint64_t v7 = *(void *)(a4 + 8);
    uint64_t v5 = a4 + 8;
    uint64_t v6 = v7;
    if (*(char *)(v5 + 23) >= 0) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = v6;
    }
    int v9 = +[NSString stringWithUTF8String:v8];
    if ([[(NSString *)v9 pathExtension] isEqualToString:@"watchkitapp"])
    {
      int v9 = [(NSString *)v9 stringByDeletingPathExtension];
    }
    return sub_100A41B70(v4, (uint64_t)v9, 2);
  }
  return result;
}

unsigned __int8 *sub_100A5B058(unsigned __int8 *result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 4)
  {
    uint64_t v5 = result;
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v6 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a4 + 8);
      *(_DWORD *)uint64_t buf = 134217984;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received post event HR : %f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      uint64_t v8 = *(void *)(a4 + 8);
      int v10 = 134217984;
      uint64_t v11 = v8;
      int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onHeartRateNotification(int, const CLCatherineNotifier_Type::Notification &, const CLCatherineNotifier_Type::NotificationData &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    [*((id *)v5 + 17) logHeartRate:a4];
    LOBYTE(v10) = 0;
    id result = sub_10006ACBC(buf, "FallStatsEnabled", (unsigned __int8 *)&v10, 0);
    if (buf[1]) {
      return (unsigned __int8 *)[*((id *)v5 + 25) logData:+[CLFallLoggerManager encodeHeartRate:](CLFallLoggerManager, "encodeHeartRate:", a4)];
    }
  }
  return result;
}

void sub_100A5B26C(uint64_t a1, uint64_t a2, _DWORD *a3, long long *a4)
{
  if (*a3 == 2 && (*((float *)a4 + 5) != 30.0 || *(float *)(a1 + 404) == 30.0))
  {
    long long v5 = *a4;
    long long v6 = a4[1];
    long long v7 = a4[2];
    *(_OWORD *)(a1 + 428) = *(long long *)((char *)a4 + 44);
    *(_OWORD *)(a1 + 400) = v6;
    *(_OWORD *)(a1 + 416) = v7;
    *(_OWORD *)(a1 + 384) = v5;
    sub_100A479B8(a1);
    sub_100A4225C(a1, 0);
    float v8 = *(float *)(a1 + 404);
    sub_100A51DC8(a1, v8);
  }
}

void *sub_100A5B308(void *result, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v4 = result;
  if (*a3 == 1)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    long long v7 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
    {
      v8[0] = 68289026;
      v8[1] = 0;
      __int16 v9 = 2082;
      int v10 = "";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Received CLDataProtectionManager notification, will no register to natalimetry\"}", (uint8_t *)v8, 0x12u);
    }
    [*(id *)(v4[1363] + 16) unregister:*(void *)(v4[1363] + 8) forNotification:2];
    return [*(id *)(v4[1363] + 16) register:*(void *)(v4[1363] + 8) forNotification:2 registrationInfo:0];
  }
  else if (!*a3)
  {
    BOOL v5 = *a4 == 1;
    double Current = CFAbsoluteTimeGetCurrent();
    return (void *)sub_1014487CC((uint64_t)(v4 + 951), v5, Current);
  }
  return result;
}

void *sub_100A5B46C(void *result, uint64_t a2, _DWORD *a3, uint64_t *a4)
{
  if (*a3)
  {
    if ((*a3 - 1) < 2) {
      sub_101A7C684();
    }
  }
  else
  {
    uint64_t v4 = (void *)result[17];
    uint64_t v5 = *a4;
    return _[v4 setOrientation:v5];
  }
  return result;
}

id sub_100A5B4BC(uint64_t a1)
{
  uint64_t v2 = &qword_102419000;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  uint64_t v3 = &qword_102419000;
  uint64_t v4 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLFallNotifier Logging Internal State:", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    int v88 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::logInternalState()", "%s\n", v88);
    if (v88 != (char *)buf) {
      free(v88);
    }
  }
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  uint64_t v5 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(unsigned __int8 *)(a1 + 7824);
    int v7 = *(unsigned __int8 *)(a1 + 7825);
    int v8 = *(unsigned __int8 *)(a1 + 7826);
    int v9 = *(unsigned __int8 *)(a1 + 7827);
    int v10 = *(unsigned __int8 *)(a1 + 7828);
    uint64_t v11 = *(void *)(a1 + 7816);
    *(_DWORD *)uint64_t buf = 68290563;
    *(_DWORD *)uint64_t v112 = 0;
    *(_WORD *)&v112[4] = 2082;
    *(void *)&v112[6] = "";
    *(_WORD *)&v112[14] = 1025;
    *(_DWORD *)&v112[16] = v6;
    *(_WORD *)&v112[20] = 1025;
    *(_DWORD *)&v112[22] = v7;
    *(_WORD *)&v112[26] = 1025;
    *(_DWORD *)&v112[28] = v8;
    *(_WORD *)&v112[32] = 1025;
    *(_DWORD *)&v112[34] = v9;
    *(_WORD *)&v112[38] = 1025;
    *(_DWORD *)&v112[40] = v10;
    *(_WORD *)&v112[44] = 2049;
    *(void *)&v112[46] = v11;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CMFallConfig\", \"CMFallStatsMode\":%{private}u, \"CMFallStatsSensorRecordingActive\":%{private}u, \"CMFallStatsSimulateFall\":%{private}u, \"CMFallStatsUserStudyPressureDataCollection\":%{private}u, \"CMAnomalyDetectorEnabled\":%{private}u, \"CMFallLastReplyAopTimestamp\":%{private}llu}", buf, 0x3Au);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
  }
  int v12 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
  {
    double v13 = *(float *)(a1 + 404);
    uint64_t v14 = *(void *)(a1 + 10560);
    double v15 = *(float *)(a1 + 10468);
    double v16 = *(float *)(a1 + 10472);
    double v17 = *(float *)(a1 + 10476);
    double v18 = *(float *)(a1 + 10480);
    *(_DWORD *)uint64_t buf = 68290563;
    *(_DWORD *)uint64_t v112 = 0;
    *(_WORD *)&v112[4] = 2082;
    *(void *)&v112[6] = "";
    *(_WORD *)&v112[14] = 2049;
    *(double *)&v112[16] = v13;
    *(_WORD *)&v112[24] = 2049;
    *(void *)&v112[26] = v14;
    *(_WORD *)&v112[34] = 2049;
    *(double *)&v112[36] = v15;
    *(_WORD *)&v112[44] = 2049;
    *(double *)&v112[46] = v16;
    *(_WORD *)&v112[54] = 2049;
    *(double *)&v112[56] = v17;
    *(_WORD *)&v112[64] = 2049;
    *(double *)&v112[66] = v18;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CMFallBehavioralConfig\", \"CMFallConfigUserAge\":\"%{private}f\", \"CMFallConfigUserMets\":\"%{private}f\", \"CMFallImpactAlertThreshold\":\"%{private}f\", \"CMFallImpactLoggingStatsThreshold\":\"%{private}f\", \"CMFallImpactLoggingHeartRateThreshold\":\"%{private}f\", \"CMFallImpactLoggingHighResolutionSensorDataThreshold\":\"%{private}f\"}", buf, 0x4Eu);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
  }
  long long v19 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
  {
    double v20 = *(float *)(a1 + 10520);
    double v21 = *(float *)(a1 + 10524);
    double v22 = *(float *)(a1 + 10528);
    double v23 = *(float *)(a1 + 10532);
    int v24 = *(_DWORD *)(a1 + 10536);
    *(_DWORD *)uint64_t buf = 68290307;
    *(_DWORD *)uint64_t v112 = 0;
    *(_WORD *)&v112[4] = 2082;
    *(void *)&v112[6] = "";
    *(_WORD *)&v112[14] = 2049;
    *(double *)&v112[16] = v20;
    *(_WORD *)&v112[24] = 2049;
    *(double *)&v112[26] = v21;
    *(_WORD *)&v112[34] = 2049;
    *(double *)&v112[36] = v22;
    *(_WORD *)&v112[44] = 2049;
    *(double *)&v112[46] = v23;
    *(_WORD *)&v112[54] = 1025;
    *(_DWORD *)&v112[56] = v24;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CMFallCyclingThresholds\", \"CMFallCyclingImpactGravityVarianceThreshold\":\"%{private}f\", \"CMFallCyclingImpactCrownVarianceThreshold\":\"%{private}f\", \"CMFallCyclingImpactMaxAbsYThreshold\":\"%{private}f\", \"CMFallCyclingDistanceTraveledPostImpactThreshold\":\"%{private}f\", \"CMFallCyclingEpochsDetectedPostImpactThreshold\":%{private}d}", buf, 0x40u);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
  }
  int v25 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
  {
    int v26 = *(_DWORD *)(a1 + 10540);
    int v27 = *(_DWORD *)(a1 + 10544);
    int v28 = *(_DWORD *)(a1 + 10548);
    int v29 = *(unsigned __int8 *)(a1 + 10552);
    int v30 = *(unsigned __int8 *)(a1 + 10553);
    int v31 = *(unsigned __int8 *)(a1 + 10554);
    *(_DWORD *)uint64_t buf = 68290563;
    *(_DWORD *)uint64_t v112 = 0;
    *(_WORD *)&v112[4] = 2082;
    *(void *)&v112[6] = "";
    *(_WORD *)&v112[14] = 1025;
    *(_DWORD *)&v112[16] = v26;
    *(_WORD *)&v112[20] = 1025;
    *(_DWORD *)&v112[22] = v27;
    *(_WORD *)&v112[26] = 1025;
    *(_DWORD *)&v112[28] = v28;
    *(_WORD *)&v112[32] = 1025;
    *(_DWORD *)&v112[34] = v29;
    *(_WORD *)&v112[38] = 1025;
    *(_DWORD *)&v112[40] = v30;
    *(_WORD *)&v112[44] = 1025;
    *(_DWORD *)&v112[46] = v31;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CMFallOtherWorkoutThresholds\", \"CMFallOtherWorkoutQuiescenceThresholdLow\":%{private}d, \"CMFallOtherWorkoutQuiescenceThresholdHigh\":%{private}d, \"CMFallOtherWorkoutConsecutiveLongLieThreshold\":%{private}d, \"CMFallOtherWorkoutShouldCancelAlertOnStepsThreshold\":%{private}d, \"CMFallOtherWorkoutShouldCancelAlertOnStandThreshold\":%{private}d, \"CMFallOtherWorkoutShouldCancelAlertOnActiveThreshold\":%{private}d}", buf, 0x36u);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
  }
  __int16 v32 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
  {
    int v33 = *(unsigned __int8 *)(a1 + 10558);
    int v34 = *(unsigned __int8 *)(a1 + 10557);
    int v35 = *(unsigned __int8 *)(a1 + 10555);
    int v36 = *(unsigned __int8 *)(a1 + 10556);
    *(_DWORD *)uint64_t buf = 68290051;
    *(_DWORD *)uint64_t v112 = 0;
    *(_WORD *)&v112[4] = 2082;
    *(void *)&v112[6] = "";
    *(_WORD *)&v112[14] = 1025;
    *(_DWORD *)&v112[16] = v33;
    *(_WORD *)&v112[20] = 1025;
    *(_DWORD *)&v112[22] = v34;
    *(_WORD *)&v112[26] = 1025;
    *(_DWORD *)&v112[28] = v35;
    *(_WORD *)&v112[32] = 1025;
    *(_DWORD *)&v112[34] = v36;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CMFallRefereeThresholds\", \"CMFallAllDayStateMachineEnabledOverride\":%{private}d, \"CMFallCyclingStateMachineEnabledOverride\":%{private}d, \"CMFallRefereeOperatingModeOverride\":%{private}d, \"CMFallAllDayStateMachineOperatingModeOverride\":%{private}d}", buf, 0x2Au);
  }
  uint64_t v37 = sub_100A56584(a1);
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  uint64_t v38 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
  {
    id v39 = [(NSDictionary *)v37 objectForKeyedSubscript:CMFallDefaults];
    *(_DWORD *)uint64_t buf = 138477827;
    *(void *)uint64_t v112 = v39;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "CMFallInternalNotifierState::CMFallDefaults: %{private}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    [(NSDictionary *)v37 objectForKeyedSubscript:CMFallDefaults];
    __int16 v89 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::logInternalState()", "%s\n", v89);
    if (v89 != (char *)buf) {
      free(v89);
    }
  }
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  uint64_t v40 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
  {
    id v41 = [(NSDictionary *)v37 objectForKeyedSubscript:CMFallConfiguration];
    *(_DWORD *)uint64_t buf = 138477827;
    *(void *)uint64_t v112 = v41;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "CMFallInternalNotifierState::CMFallConfiguration: %{private}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    [(NSDictionary *)v37 objectForKeyedSubscript:CMFallConfiguration];
    int v90 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::logInternalState()", "%s\n", v90);
    if (v90 != (char *)buf) {
      free(v90);
    }
  }
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  uint64_t v42 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
  {
    id v43 = [(NSDictionary *)v37 objectForKeyedSubscript:CMFallState];
    *(_DWORD *)uint64_t buf = 138477827;
    *(void *)uint64_t v112 = v43;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "CMFallInternalNotifierState::CMFallState: %{private}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    [(NSDictionary *)v37 objectForKeyedSubscript:CMFallState];
    __int16 v91 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::logInternalState()", "%s\n", v91);
    if (v91 != (char *)buf) {
      free(v91);
    }
  }
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  uint64_t v44 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
  {
    id v45 = [(NSDictionary *)v37 objectForKeyedSubscript:CMFallOptInsAndProfiles];
    *(_DWORD *)uint64_t buf = 138477827;
    *(void *)uint64_t v112 = v45;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "CMFallInternalNotifierState::CMFallOptInsAndProfiles: %{private}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    [(NSDictionary *)v37 objectForKeyedSubscript:CMFallOptInsAndProfiles];
    int v92 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::logInternalState()", "%s\n", v92);
    if (v92 != (char *)buf) {
      free(v92);
    }
  }
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  uint64_t v46 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
  {
    id v47 = [(NSDictionary *)v37 objectForKeyedSubscript:CMFallFieldMetrics];
    *(_DWORD *)uint64_t buf = 138477827;
    *(void *)uint64_t v112 = v47;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "CMFallInternalNotifierState::CMFallFieldMetrics: %{private}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    [(NSDictionary *)v37 objectForKeyedSubscript:CMFallFieldMetrics];
    __int16 v93 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::logInternalState()", "%s\n", v93);
    if (v93 != (char *)buf) {
      free(v93);
    }
  }
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  uint64_t v48 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
  {
    id v49 = [(NSDictionary *)v37 objectForKeyedSubscript:CMFallHDSCollection];
    *(_DWORD *)uint64_t buf = 138477827;
    *(void *)uint64_t v112 = v49;
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "CMFallInternalNotifierState::CMFallHDSCollection: %{private}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    [(NSDictionary *)v37 objectForKeyedSubscript:CMFallHDSCollection];
    int v94 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::logInternalState()", "%s\n", v94);
    if (v94 != (char *)buf) {
      free(v94);
    }
  }
  int v96 = sub_100A56ED8();
  uint64_t v50 = [(NSDictionary *)v96 allKeys];
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
  }
  uint64_t v51 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
  {
    NSUInteger v52 = [(NSArray *)v50 count];
    *(_DWORD *)uint64_t buf = 134283521;
    *(void *)uint64_t v112 = v52;
    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "CMFallInternalMetricState: (%{private}lu)", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    [(NSArray *)v50 count];
    __int16 v95 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::logInternalState()", "%s\n", v95);
    if (v95 != (char *)buf) {
      free(v95);
    }
  }
  id result = [(NSArray *)v50 count];
  if (result)
  {
    unint64_t v54 = 0;
    CFStringRef v55 = @"nil";
    do
    {
      if (v2[30] != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      uint64_t v56 = v3[31];
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
      {
        log = v56;
        id v109 = [(NSArray *)v50 objectAtIndexedSubscript:v54];
        id v108 = [(NSDictionary *)v96 objectForKeyedSubscript:[(NSArray *)v50 objectAtIndexedSubscript:v54]];
        NSUInteger v57 = [(NSArray *)v50 count];
        CFStringRef v58 = v55;
        if (v54 + 1 < v57) {
          CFStringRef v58 = [(NSArray *)v50 objectAtIndexedSubscript:v54 + 1];
        }
        CFStringRef v107 = v58;
        NSUInteger v59 = [(NSArray *)v50 count];
        CFStringRef v60 = v55;
        if (v54 + 1 < v59) {
          CFStringRef v60 = [(NSDictionary *)v96 objectForKeyedSubscript:[(NSArray *)v50 objectAtIndexedSubscript:v54 + 1]];
        }
        CFStringRef v106 = v60;
        NSUInteger v61 = [(NSArray *)v50 count];
        CFStringRef v62 = v55;
        if (v54 + 2 < v61) {
          CFStringRef v62 = [(NSArray *)v50 objectAtIndexedSubscript:v54 + 2];
        }
        CFStringRef v105 = v62;
        NSUInteger v63 = [(NSArray *)v50 count];
        CFStringRef v64 = v55;
        if (v54 + 2 < v63) {
          CFStringRef v64 = [(NSDictionary *)v96 objectForKeyedSubscript:[(NSArray *)v50 objectAtIndexedSubscript:v54 + 2]];
        }
        CFStringRef v104 = v64;
        NSUInteger v65 = [(NSArray *)v50 count];
        CFStringRef v66 = v55;
        if (v54 + 3 < v65) {
          CFStringRef v66 = [(NSArray *)v50 objectAtIndexedSubscript:v54 + 3];
        }
        CFStringRef v103 = v66;
        NSUInteger v67 = [(NSArray *)v50 count];
        CFStringRef v68 = v55;
        if (v54 + 3 < v67) {
          CFStringRef v68 = [(NSDictionary *)v96 objectForKeyedSubscript:[(NSArray *)v50 objectAtIndexedSubscript:v54 + 3]];
        }
        CFStringRef v102 = v68;
        NSUInteger v69 = [(NSArray *)v50 count];
        CFStringRef v70 = v55;
        if (v54 + 4 < v69) {
          CFStringRef v70 = [(NSArray *)v50 objectAtIndexedSubscript:v54 + 4];
        }
        CFStringRef v101 = v70;
        NSUInteger v71 = [(NSArray *)v50 count];
        CFStringRef v72 = v55;
        if (v54 + 4 < v71) {
          CFStringRef v72 = [(NSDictionary *)v96 objectForKeyedSubscript:[(NSArray *)v50 objectAtIndexedSubscript:v54 + 4]];
        }
        CFStringRef v100 = v72;
        NSUInteger v73 = [(NSArray *)v50 count];
        CFStringRef v74 = v55;
        if (v54 + 5 < v73) {
          CFStringRef v74 = [(NSArray *)v50 objectAtIndexedSubscript:v54 + 5];
        }
        CFStringRef v99 = v74;
        NSUInteger v75 = [(NSArray *)v50 count];
        CFStringRef v76 = v55;
        if (v54 + 5 < v75) {
          CFStringRef v76 = [(NSDictionary *)v96 objectForKeyedSubscript:[(NSArray *)v50 objectAtIndexedSubscript:v54 + 5]];
        }
        CFStringRef v98 = v76;
        NSUInteger v77 = [(NSArray *)v50 count];
        CFStringRef v78 = v55;
        if (v54 + 6 < v77) {
          CFStringRef v78 = [(NSArray *)v50 objectAtIndexedSubscript:v54 + 6];
        }
        CFStringRef v97 = v78;
        CFStringRef v79 = v55;
        if (v54 + 6 < [(NSArray *)v50 count]) {
          CFStringRef v79 = [(NSDictionary *)v96 objectForKeyedSubscript:[(NSArray *)v50 objectAtIndexedSubscript:v54 + 6]];
        }
        CFStringRef v80 = v55;
        if (v54 + 7 < [(NSArray *)v50 count]) {
          CFStringRef v80 = [(NSArray *)v50 objectAtIndexedSubscript:v54 + 7];
        }
        CFStringRef v81 = v55;
        if (v54 + 7 < [(NSArray *)v50 count]) {
          CFStringRef v81 = [(NSDictionary *)v96 objectForKeyedSubscript:[(NSArray *)v50 objectAtIndexedSubscript:v54 + 7]];
        }
        CFStringRef v82 = v55;
        if (v54 + 8 < [(NSArray *)v50 count]) {
          CFStringRef v55 = [(NSArray *)v50 objectAtIndexedSubscript:v54 + 8];
        }
        CFStringRef v83 = v82;
        if (v54 + 8 < [(NSArray *)v50 count]) {
          CFStringRef v83 = [(NSDictionary *)v96 objectForKeyedSubscript:[(NSArray *)v50 objectAtIndexedSubscript:v54 + 8]];
        }
        CFStringRef v84 = v82;
        if (v54 + 9 < [(NSArray *)v50 count]) {
          CFStringRef v84 = [(NSArray *)v50 objectAtIndexedSubscript:v54 + 9];
        }
        NSUInteger v85 = [(NSArray *)v50 count];
        CFStringRef v86 = v82;
        if (v54 + 9 < v85) {
          CFStringRef v86 = [(NSDictionary *)v96 objectForKeyedSubscript:[(NSArray *)v50 objectAtIndexedSubscript:v54 + 9]];
        }
        *(_DWORD *)uint64_t buf = 138482691;
        *(void *)uint64_t v112 = v109;
        *(_WORD *)&v112[8] = 2113;
        *(void *)&v112[10] = v108;
        *(_WORD *)&v112[18] = 2113;
        *(void *)&v112[20] = v107;
        *(_WORD *)&v112[28] = 2113;
        *(void *)&v112[30] = v106;
        *(_WORD *)&v112[38] = 2113;
        *(void *)&v112[40] = v105;
        *(_WORD *)&v112[48] = 2113;
        *(void *)&v112[50] = v104;
        *(_WORD *)&v112[58] = 2113;
        *(void *)&v112[60] = v103;
        *(_WORD *)&v112[68] = 2113;
        *(void *)&v112[70] = v102;
        __int16 v113 = 2113;
        CFStringRef v114 = v101;
        __int16 v115 = 2113;
        CFStringRef v116 = v100;
        __int16 v117 = 2113;
        CFStringRef v118 = v99;
        __int16 v119 = 2113;
        CFStringRef v120 = v98;
        __int16 v121 = 2113;
        CFStringRef v122 = v97;
        __int16 v123 = 2113;
        CFStringRef v124 = v79;
        __int16 v125 = 2113;
        CFStringRef v126 = v80;
        __int16 v127 = 2113;
        CFStringRef v128 = v81;
        __int16 v129 = 2113;
        CFStringRef v130 = v55;
        __int16 v131 = 2113;
        CFStringRef v132 = v83;
        __int16 v133 = 2113;
        CFStringRef v134 = v84;
        __int16 v135 = 2113;
        CFStringRef v136 = v86;
        _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEFAULT, "    %{private}@: %{private}@, %{private}@: %{private}@, %{private}@: %{private}@, %{private}@: %{private}@, %{private}@: %{private}@, %{private}@: %{private}@, %{private}@: %{private}@, %{private}@: %{private}@, %{private}@: %{private}@, %{private}@: %{private}@", buf, 0xCAu);
        uint64_t v2 = &qword_102419000;
        uint64_t v3 = &qword_102419000;
        CFStringRef v55 = v82;
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v2[30] != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        [(NSArray *)v50 objectAtIndexedSubscript:v54];
        [(NSDictionary *)v96 objectForKeyedSubscript:[(NSArray *)v50 objectAtIndexedSubscript:v54]];
        if (v54 + 1 < [(NSArray *)v50 count]) {
          [(NSArray *)v50 objectAtIndexedSubscript:v54 + 1];
        }
        if (v54 + 1 < [(NSArray *)v50 count]) {
          [(NSDictionary *)v96 objectForKeyedSubscript:[(NSArray *)v50 objectAtIndexedSubscript:v54 + 1]];
        }
        if (v54 + 2 < [(NSArray *)v50 count]) {
          [(NSArray *)v50 objectAtIndexedSubscript:v54 + 2];
        }
        if (v54 + 2 < [(NSArray *)v50 count]) {
          [(NSDictionary *)v96 objectForKeyedSubscript:[(NSArray *)v50 objectAtIndexedSubscript:v54 + 2]];
        }
        if (v54 + 3 < [(NSArray *)v50 count]) {
          [(NSArray *)v50 objectAtIndexedSubscript:v54 + 3];
        }
        if (v54 + 3 < [(NSArray *)v50 count]) {
          [(NSDictionary *)v96 objectForKeyedSubscript:[(NSArray *)v50 objectAtIndexedSubscript:v54 + 3]];
        }
        if (v54 + 4 < [(NSArray *)v50 count]) {
          [(NSArray *)v50 objectAtIndexedSubscript:v54 + 4];
        }
        if (v54 + 4 < [(NSArray *)v50 count]) {
          [(NSDictionary *)v96 objectForKeyedSubscript:[(NSArray *)v50 objectAtIndexedSubscript:v54 + 4]];
        }
        if (v54 + 5 < [(NSArray *)v50 count]) {
          [(NSArray *)v50 objectAtIndexedSubscript:v54 + 5];
        }
        if (v54 + 5 < [(NSArray *)v50 count]) {
          [(NSDictionary *)v96 objectForKeyedSubscript:[(NSArray *)v50 objectAtIndexedSubscript:v54 + 5]];
        }
        if (v54 + 6 < [(NSArray *)v50 count]) {
          [(NSArray *)v50 objectAtIndexedSubscript:v54 + 6];
        }
        if (v54 + 6 < [(NSArray *)v50 count]) {
          [(NSDictionary *)v96 objectForKeyedSubscript:[(NSArray *)v50 objectAtIndexedSubscript:v54 + 6]];
        }
        if (v54 + 7 < [(NSArray *)v50 count]) {
          [(NSArray *)v50 objectAtIndexedSubscript:v54 + 7];
        }
        if (v54 + 7 < [(NSArray *)v50 count]) {
          [(NSDictionary *)v96 objectForKeyedSubscript:[(NSArray *)v50 objectAtIndexedSubscript:v54 + 7]];
        }
        if (v54 + 8 < [(NSArray *)v50 count]) {
          [(NSArray *)v50 objectAtIndexedSubscript:v54 + 8];
        }
        if (v54 + 8 < [(NSArray *)v50 count]) {
          [(NSDictionary *)v96 objectForKeyedSubscript:[(NSArray *)v50 objectAtIndexedSubscript:v54 + 8]];
        }
        if (v54 + 9 < [(NSArray *)v50 count]) {
          [(NSArray *)v50 objectAtIndexedSubscript:v54 + 9];
        }
        if (v54 + 9 < [(NSArray *)v50 count]) {
          [(NSDictionary *)v96 objectForKeyedSubscript:[(NSArray *)v50 objectAtIndexedSubscript:v54 + 9]];
        }
        __int16 v87 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::logInternalState()", "%s\n", v87);
        if (v87 != (char *)buf) {
          free(v87);
        }
        uint64_t v2 = &qword_102419000;
        uint64_t v3 = &qword_102419000;
      }
      v54 += 10;
      id result = [(NSArray *)v50 count];
    }
    while (v54 < (unint64_t)result);
  }
  return result;
}

unsigned __int8 *sub_100A5CEB8(unsigned __int8 *result, uint64_t a2, int *a3)
{
  uint64_t v3 = result;
  int v4 = *a3;
  if (!*a3)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    int v8 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received daemon settings notification", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return sub_100A471E8((uint64_t)v3);
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    LOWORD(v17) = 0;
    goto LABEL_48;
  }
  if (v4 == 10)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    int v9 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Received managed configuration change notification", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return sub_100A471E8((uint64_t)v3);
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    LOWORD(v17) = 0;
LABEL_48:
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onDarwinNotification(int, const CLDarwinNotifier_Type::Notification &, const CLDarwinNotifier_Type::NotificationData &)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
    return sub_100A471E8((uint64_t)v3);
  }
  if (v4 == 9)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
    }
    uint64_t v5 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Received sysdiagnose event", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      LOWORD(v17) = 0;
      double v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onDarwinNotification(int, const CLDarwinNotifier_Type::Notification &, const CLDarwinNotifier_Type::NotificationData &)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    LOBYTE(v17) = 0;
    sub_10006ACBC(buf, "FallAdditionalProfileLoggingEnabled", (unsigned __int8 *)&v17, 0);
    if (buf[1])
    {
      int v6 = (void *)*((void *)v3 + 20);
      if (v6)
      {
        id v7 = [v6 getUUID];
      }
      else
      {
        id v10 = [[CLFallServer alloc] initInUniverse:*((void *)v3 + 4)];
        id v7 = [v10 getUUID];
      }
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      uint64_t v11 = qword_1024190F8;
      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 138543362;
        id v20 = v7;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Additional logging profile installed - Subject UUID: %{public}@", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        int v17 = 138543362;
        id v18 = v7;
        double v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onDarwinNotification(int, const CLDarwinNotifier_Type::Notification &, const CLDarwinNotifier_Type::NotificationData &)", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      sub_100A5B4BC((uint64_t)v3);
    }
    sub_100103240();
    id result = (unsigned __int8 *)sub_10073E30C();
    if (result)
    {
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
      }
      int v12 = qword_1024190F8;
      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Logging anomaly info...", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_1022DAEF8);
        }
        LOWORD(v17) = 0;
        double v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallNotifier::onDarwinNotification(int, const CLDarwinNotifier_Type::Notification &, const CLDarwinNotifier_Type::NotificationData &)", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      return (unsigned __int8 *)+[CLFallNotifierSysdiagnoseLogCollector writeAnomalyInfoToFileWithLastFallEvent:writeMask:fallNotifierConfig:stateLogger:statsLogger:sensorsLogger:pressureLogger:heartRateLogger:wristStateLogger:odometerLogger:falsePositiveSuppressionFeaturesLogger:hgalLogger:logDirectory:logFilePrefix:](CLFallNotifierSysdiagnoseLogCollector, "writeAnomalyInfoToFileWithLastFallEvent:writeMask:fallNotifierConfig:stateLogger:statsLogger:sensorsLogger:pressureLogger:heartRateLogger:wristStateLogger:odometerLogger:falsePositiveSuppressionFeaturesLogger:hgalLogger:logDirectory:logFilePrefix:", v3 + 6712, 4094, v3 + 7816, *((void *)v3 + 22), *((void *)v3 + 21), *((void *)v3 + 23), *((void *)v3 + 24), *((void *)v3 + 25), *((void *)v3 + 26), *((void *)v3 + 27), *((void *)v3 + 28), *((void *)v3 + 29), +[CLFallNotifierSysdiagnoseLogCollector getSysdiagnoseOutputPath],
                                  +[CLFallNotifierSysdiagnoseLogCollector getSysdiagnoseOutputFilename]);
    }
  }
  return result;
}

uint64_t sub_100A5D5DC(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = &off_1022DB0D0;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    int v12 = a3;
  }
  else {
    int v12 = (uint64_t *)*a3;
  }
  id v13 = [objc_msgSend(a4, "vendor") proxyForService:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12)];
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:[a4 silo]];
  return a1;
}

void sub_100A5D6C0()
{
}

void sub_100A5D77C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_100A5D7B8(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        int v9 = (uint64_t *)v4;
      }
      else {
        int v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)uint64_t buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022DAF18);
      }
      id v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        uint64_t v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          uint64_t v11 = (void *)*v11;
        }
        *(_DWORD *)uint64_t buf = 136446466;
        long long v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022DAF18);
        }
        int v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          int v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        double v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactStreamData>::removeClient(int) [Notification_T = CLFallNotifier_Type::Notification, NotificationData_T = CLFall_Types::ImpactStreamData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_100A5DA48(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_100A5DAFC(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_100A5DB44(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_100A5DB8C(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_100A5DBD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_10241FB28);
}

BOOL sub_100A5DC00(uint64_t a1, int a2, int *a3, char *a4)
{
  int v40 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      uint64_t v39 = v10;
      int v16 = *a3;
      uint64_t v19 = *(void *)(v10 + 48);
      uint64_t v18 = v10 + 48;
      uint64_t v17 = v19;
      if (!v19) {
        goto LABEL_31;
      }
      uint64_t v20 = v18;
      do
      {
        int v21 = *(_DWORD *)(v17 + 28);
        BOOL v22 = v21 < v16;
        if (v21 >= v16) {
          double v23 = (uint64_t *)v17;
        }
        else {
          double v23 = (uint64_t *)(v17 + 8);
        }
        if (!v22) {
          uint64_t v20 = v17;
        }
        uint64_t v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28)) {
LABEL_31:
      }
        uint64_t v20 = v18;
      uint64_t v24 = *(void *)(a1 + 64);
      if (!v24) {
        goto LABEL_42;
      }
      uint64_t v25 = a1 + 64;
      do
      {
        int v26 = *(_DWORD *)(v24 + 32);
        BOOL v27 = v26 < v16;
        if (v26 >= v16) {
          int v28 = (uint64_t *)v24;
        }
        else {
          int v28 = (uint64_t *)(v24 + 8);
        }
        if (!v27) {
          uint64_t v25 = v24;
        }
        uint64_t v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(void *)id v41 = v25;
        uint64_t v34 = *(void *)(v25 + 56);
        char v35 = *a4;
        *(void *)uint64_t buf = &v40;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v25 + 40), &v40, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v35;
        *(void *)uint64_t buf = 0;
        *(void *)&uint8_t buf[8] = 0;
        *(_DWORD *)&buf[23] = 0;
        *(void *)&uint8_t buf[16] = 0;
        long long v45 = xmmword_101D6F590;
        unint64_t v46 = 0xFF7FFFFF7F7FFFFFLL;
        int v47 = -8388609;
        uint64_t v48 = 0;
        uint64_t v49 = 0x7F7FFFFF00000000;
        int v50 = 2139095039;
        long long v51 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        int v54 = 0;
        int32x4_t v55 = vdupq_n_s32(0x7F7FFFFFu);
        int v56 = -8388609;
        __int16 v57 = 1;
        char v58 = 0;
        memset(v61, 0, sizeof(v61));
        long long v60 = 0u;
        long long v59 = 0u;
        if (v20 == v18)
        {
          if ((*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf)) {
            sub_100A608EC();
          }
          if (*(void *)&v61[3])
          {
            *(void *)&v61[11] = *(void *)&v61[3];
            operator delete(*(void **)&v61[3]);
          }
        }
        if (v34) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        *(void *)id v41 = a1 + 64;
        char v29 = byte_10241FB29;
        int v38 = v16;
        *(void *)uint64_t buf = &v38;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v29;
        int v38 = *a3;
        *(void *)uint64_t buf = &v38;
        int v30 = sub_10044715C((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        int v31 = (std::__shared_weak_count *)v30[9];
        v30[8] = 0;
        v30[9] = 0;
        if (v31) {
          sub_1000DB0A0(v31);
        }
        char v32 = *a4;
        int v38 = *a3;
        *(void *)uint64_t buf = &v38;
        int v33 = sub_10044715C((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)uint64_t buf = &v40;
        *((unsigned char *)sub_1000EB1B8(v33 + 5, &v40, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v20 == v18)
      {
        *(_DWORD *)uint64_t buf = *a3;
        sub_1000EDED4((uint64_t **)(v39 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DAF18);
  }
  id v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    double v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      double v15 = (void *)*v15;
    }
    *(_DWORD *)uint64_t buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DAF18);
    }
    int v36 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v36 = (void *)*v36;
    }
    *(_DWORD *)id v41 = 136446466;
    *(void *)&v41[4] = v36;
    __int16 v42 = 1026;
    int v43 = a2;
    uint64_t v37 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactStreamData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLFallNotifier_Type::Notification, NotificationData_T = CLFall_Types::ImpactStreamData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v37 != buf) {
      free(v37);
    }
    return 0;
  }
  return result;
}

void sub_100A5E134(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)(v1 + 191);
  if (v3)
  {
    *(void *)(v1 + 199) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100A5E15C(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        int v21 = (uint64_t *)v15;
      }
      else {
        int v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DAF18);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)uint64_t buf = 136446466;
      uint64_t v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022DAF18);
      }
      BOOL v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactStreamData>::clientRegistered(int, const Notification_T &) [Notification_T = CLFallNotifier_Type::Notification, NotificationData_T = CLFall_Types::ImpactStreamData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_100A5E3E0(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            BOOL v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                BOOL v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022DAF18);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                BOOL v27 = a1 + 8;
                if (a1[31] < 0) {
                  BOOL v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  int v28 = __p;
                }
                else {
                  int v28 = (void **)__p[0];
                }
                *(_DWORD *)uint64_t buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                char v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022DAF18);
                }
                char v29 = a1 + 8;
                if (a1[31] < 0) {
                  char v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  int v30 = buf;
                }
                else {
                  int v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                int v38 = v29;
                __int16 v39 = 2082;
                int v40 = v30;
                int v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactStreamData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLFallNotifier_Type::Notification, NotificationData_T = CLFall_Types::ImpactStreamData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_100A5E7B4(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      BOOL v10 = (uint64_t *)v4;
    }
    else {
      BOOL v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v7 == v3) {
    return 0;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0;
  }
  int v11 = *(long long **)(v7 + 64);
  if (!v11) {
    return 0;
  }
  long long v12 = *v11;
  long long v13 = v11[1];
  long long v14 = v11[3];
  *(_OWORD *)(a3 + 32) = v11[2];
  *(_OWORD *)(a3 + 48) = v14;
  *(_OWORD *)a3 = v12;
  *(_OWORD *)(a3 + 16) = v13;
  long long v15 = v11[4];
  long long v16 = v11[5];
  long long v17 = v11[7];
  *(_OWORD *)(a3 + 96) = v11[6];
  *(_OWORD *)(a3 + 112) = v17;
  *(_OWORD *)(a3 + 64) = v15;
  *(_OWORD *)(a3 + 80) = v16;
  long long v18 = v11[8];
  long long v19 = v11[9];
  long long v20 = v11[10];
  *(_OWORD *)(a3 + 175) = *(long long *)((char *)v11 + 175);
  *(_OWORD *)(a3 + 144) = v19;
  *(_OWORD *)(a3 + 160) = v20;
  *(_OWORD *)(a3 + 128) = v18;
  if (v11 != (long long *)a3) {
    sub_100A60544((void *)(a3 + 191), *(char **)((char *)v11 + 191), *(char **)((char *)v11 + 199), *(void *)((char *)v11 + 199) - *(void *)((char *)v11 + 191));
  }
  return 1;
}

uint64_t sub_100A5E870(uint64_t a1, int *a2, long long *a3)
{
  sub_100A5FEE0(a3, &v10);
  int v9 = *a2;
  int v11 = &v9;
  uint64_t v5 = sub_10044715C((uint64_t **)(a1 + 56), &v9, (uint64_t)&unk_101D0B290, &v11);
  long long v6 = v10;
  long long v10 = 0uLL;
  uint64_t v7 = (std::__shared_weak_count *)v5[9];
  *((_OWORD *)v5 + 4) = v6;
  if (v7)
  {
    sub_1000DB0A0(v7);
    if (*((void *)&v10 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  return 1;
}

void sub_100A5E904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A5E91C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  memset(v4, 0, sizeof(v4));
  long long v5 = xmmword_101D6F590;
  unint64_t v6 = 0xFF7FFFFF7F7FFFFFLL;
  int v7 = -8388609;
  uint64_t v8 = 0;
  uint64_t v9 = 0x7F7FFFFF00000000;
  int v10 = 2139095039;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  int v14 = 0;
  int32x4_t v15 = vdupq_n_s32(0x7F7FFFFFu);
  int v16 = -8388609;
  __int16 v17 = 1;
  char v18 = 0;
  memset(v21, 0, sizeof(v21));
  long long v20 = 0u;
  long long v19 = 0u;
  (*(void (**)(uint64_t, uint64_t, unsigned char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, v4, a3, a4, 0);
  if (*(void *)&v21[3])
  {
    *(void *)&v21[11] = *(void *)&v21[3];
    operator delete(*(void **)&v21[3]);
  }
}

void sub_100A5EA08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,long long a33)
{
  if (*(void *)((char *)&a33 + 7)) {
    operator delete(*(void **)((char *)&a33 + 7));
  }
  _Unwind_Resume(exception_object);
}

void sub_100A5EA2C(uint64_t a1, unsigned int *a2, long long *a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DAF18);
  }
  uint64_t v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    int v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v10 = (void *)*v10;
    }
    long long v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)uint64_t buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(void *)&buf[20] = "activity";
    __int16 v23 = 2082;
    BOOL v24 = v10;
    __int16 v25 = 2050;
    int v26 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  int v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      __int16 v17 = (uint64_t *)v12;
    }
    else {
      __int16 v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      int v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    BOOL v27 = v28;
    memset(v28, 0, sizeof(v28));
    char v29 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v27);
    int v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v26) {
      sub_1000DB0A0(v26);
    }
    sub_1000F5BB0((uint64_t)&buf[8], *(void **)&buf[16]);
    if (v29) {
      sub_1000DB0A0(v29);
    }
    sub_1000F5BB0((uint64_t)&v27, v28[0]);
  }
  if (!a4)
  {
    long long v20 = (std::__shared_weak_count *)v14[9];
    v14[8] = 0;
    v14[9] = 0;
    if (!v20) {
      goto LABEL_29;
    }
LABEL_28:
    sub_1000DB0A0(v20);
    goto LABEL_29;
  }
  sub_100A5FEE0(a3, buf);
  long long v18 = *(_OWORD *)buf;
  *(void *)uint64_t buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  long long v19 = (std::__shared_weak_count *)v14[9];
  *((_OWORD *)v14 + 4) = v18;
  if (v19)
  {
    sub_1000DB0A0(v19);
    long long v20 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]) {
      goto LABEL_28;
    }
  }
LABEL_29:
  if (v14[7]) {
    sub_100A5F8D8();
  }
  os_activity_scope_leave(&state);
}

void sub_100A5EFFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void *sub_100A5F048@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

void sub_100A5F0C4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DAF18);
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      BOOL v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022DAF18);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactStreamData>::listClients() [Notification_T = CLFallNotifier_Type::Notification, NotificationData_T = CLFall_Types::ImpactStreamData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DAF18);
    }
    long long v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        unint64_t v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)uint64_t buf = 136315394;
      BOOL v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022DAF18);
      }
      long long v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactStreamData>::listClients() [Notification_T = CLFallNotifier_Type::Notification, NotificationData_T = CLFall_Types::ImpactStreamData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    uint64_t v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        uint64_t v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_1022DAF18);
            }
            int v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              long long v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                long long v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)uint64_t buf = 136315650;
              BOOL v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022DAF18);
              }
              __int16 v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactStreamData>::listClients() [Notification_T = CLFallNotifier_Type::Notification, NotificationData_T = CLFall_Types::ImpactStreamData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            int v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                int v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                uint64_t v9 = v15;
              }
              while (!v16);
            }
            uint64_t v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        long long v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            long long v19 = v18;
            long long v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            long long v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            uint64_t v8 = v19;
          }
          while (!v16);
        }
        uint64_t v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_100A5F674(uint64_t a1)
{
  sub_100A6087C(a1);

  operator delete();
}

id sub_100A5F6AC(uint64_t a1, int a2, void *a3)
{
  id result = sub_100A600F4(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_100A5F6FC(id a1)
{
  qword_1024190F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

void sub_100A5F72C(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_100A5F75C(uint64_t a1)
{
  return sub_100A4ED28(*(void *)(a1 + 32));
}

void sub_100A5F764(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100A5F794(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1022E70B8;
  *(unsigned char *)(a1 + 32) = 11;
  *(void *)(a1 + 8) = *(void *)(a2 + 158);
  *(void *)(a1 + 24) = *(void *)(a2 + 174);
  *(_WORD *)(a1 + 34) = *(_WORD *)a2;
  uint64_t v4 = *(void *)(a2 + 19);
  *(void *)(a1 + 40) = *(void *)(a2 + 4);
  *(void *)(a1 + 48) = v4;
  *(_DWORD *)(a1 + 56) = -8388609;
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 27);
  *(void *)(a1 + 76) = *(void *)(a2 + 43);
  *(void *)(a1 + 84) = 0x80000000800000;
  *(_DWORD *)(a1 + 92) = -8388609;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 51);
  *(void *)(a1 + 100) = 0x80000000800000;
  *(_DWORD *)(a1 + 108) = -8388609;
  *(void *)(a1 + 112) = *(void *)(a2 + 55);
  long long v5 = *(_OWORD *)(a2 + 63);
  *((void *)&v5 + 1) = *(void *)(a2 + 75);
  *(_OWORD *)(a1 + 120) = v5;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 83);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 14);
  *(unsigned char *)(a1 + 153) = *(unsigned char *)(a2 + 15);
  *(unsigned char *)(a1 + 188) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 154) = *(unsigned char *)(a2 + 18);
  *(unsigned char *)(a1 + 155) = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 156) = *(unsigned char *)(a2 + 3);
  *(_DWORD *)(a1 + 160) = -8388609;
  *(float *)(a1 + 164) = sub_100A51C78((float *)(a2 + 27));
  *(void *)(a1 + 168) = 0x80000000800000;
  *(void *)(a1 + 176) = *(void *)(a2 + 99);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 107);
  *(int8x16_t *)(a1 + 192) = vextq_s8(*(int8x16_t *)(a2 + 111), *(int8x16_t *)(a2 + 111), 4uLL);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 71);
  *(unsigned char *)(a1 + 212) = *(unsigned char *)(a2 + 149);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 127);
  return a1;
}

void sub_100A5F8D8()
{
}

void sub_100A5F9D4()
{
}

void sub_100A5F9F8(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    long long v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      uint64_t v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          int v12 = (uint64_t *)v4;
        }
        else {
          int v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          uint64_t v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        uint64_t v49 = v9;
        id v13 = sub_100A600F4(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        int v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            long long v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                BOOL v22 = (uint64_t *)v17;
              }
              else {
                BOOL v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                long long v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              uint64_t v48 = v19;
              sub_100A5FDE8(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              char v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  char v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              uint64_t v49 = v29;
              uint64_t v34 = v29[6];
              int v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                char v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    char v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      int v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  int v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      int v14 = v43;
                      int v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      int v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      char v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              uint64_t v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022DAF18);
              }
              BOOL v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)uint64_t buf = 136446466;
                int32x4_t v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022DAF18);
                }
                long long v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  long long v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                long long v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                int v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLFallNotifier_Type::Notification, CLFall_Types::ImpactStreamData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLFallNotifier_Type::Notification, NotificationData_T = CLFall_Types::ImpactStreamData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_100A5FDE8(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_100A600F4(a4);
    uint64_t v10 = *(void *)a3 + 80;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40);
    int v14 = (int *)(*(void *)a2 + 32);
    int v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    id result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4];
    }
  }
  return result;
}

uint64_t sub_100A5FEE0@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0xF0uLL);
  uint64_t result = sub_100A5FF3C((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_100A5FF28(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100A5FF3C(uint64_t a1, long long *a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = off_1022DAF68;
  long long v3 = a2[8];
  long long v4 = a2[9];
  long long v5 = a2[10];
  long long v6 = *(long long *)((char *)a2 + 175);
  long long v7 = a2[4];
  long long v8 = a2[5];
  long long v9 = a2[6];
  long long v10 = a2[7];
  long long v11 = *a2;
  long long v12 = a2[1];
  long long v13 = a2[2];
  long long v14 = a2[3];
  *(_OWORD *)(a1 + 215) = 0u;
  int v15 = (void *)(a1 + 215);
  *(_OWORD *)((char *)v15 - 143) = v14;
  *(_OWORD *)((char *)v15 - 159) = v13;
  *(_OWORD *)((char *)v15 - 175) = v12;
  *(_OWORD *)((char *)v15 - 191) = v11;
  *(_OWORD *)((char *)v15 - 79) = v10;
  *(_OWORD *)((char *)v15 - 95) = v9;
  *(_OWORD *)((char *)v15 - 111) = v8;
  *(_OWORD *)((char *)v15 - 127) = v7;
  *((_OWORD *)v15 - 1) = v6;
  *(_OWORD *)((char *)v15 - 31) = v5;
  *(_OWORD *)((char *)v15 - 47) = v4;
  *(_OWORD *)((char *)v15 - 63) = v3;
  v15[2] = 0;
  sub_10016989C(v15, *(const void **)((char *)a2 + 191), *(void *)((char *)a2 + 199), *(void *)((char *)a2 + 199) - *(void *)((char *)a2 + 191));
  return a1;
}

void sub_100A5FFEC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100A60000(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022DAF68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100A60020(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022DAF68;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100A60074(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 215);
  if (v2)
  {
    *(void *)(a1 + 223) = v2;
    operator delete(v2);
  }
}

uint64_t sub_100A60090(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    uint64_t v2 = *(void **)(v1 + 191);
    if (v2)
    {
      *(void *)(v1 + 199) = v2;
      operator delete(v2);
    }
    operator delete();
  }
  return result;
}

id sub_100A600F4(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return sub_100A60154(a1);
}

id sub_100A60154(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022DAFA8);
      }
      long long v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D6FD2ELL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        long long v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLFall_Types::ImpactStreamData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022DAFA8);
      }
      long long v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D6FD2ELL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1022DAFA8);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

void sub_100A60514(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void *sub_100A60544(void *result, char *__src, char *a3, unint64_t a4)
{
  long long v7 = result;
  unint64_t v8 = result[2];
  __int16 v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *long long v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      sub_1001D7FD4();
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    uint64_t result = sub_100169918(v7, v11);
    __int16 v9 = (char *)v7[1];
    goto LABEL_17;
  }
  unint64_t v12 = (unsigned char *)result[1];
  size_t v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    size_t v16 = a3 - __src;
    if (v16) {
      uint64_t result = memmove(v9, __src, v16);
    }
    int v15 = &v9[v16];
    goto LABEL_20;
  }
  long long v14 = &__src[v13];
  if (v12 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v13);
    __int16 v9 = (char *)v7[1];
  }
  if (a3 != v14) {
    uint64_t result = memmove(v9, v14, a3 - v14);
  }
  int v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

void sub_100A60654(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v2 = *(void **)(a2 + 16);
    if (v2)
    {
      *(void *)(a2 + 24) = v2;
      operator delete(v2);
    }
    operator delete();
  }
}

__n128 sub_100A606B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100A60708(a1, a2);
  *(_OWORD *)(v3 + 104) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v3 + 120) = *(_OWORD *)(a2 + 112);
  *(void *)uint64_t v3 = off_1022E7610;
  __n128 result = *(__n128 *)(a2 + 128);
  *(__n128 *)(v3 + 136) = result;
  return result;
}

uint64_t sub_100A60708(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1022E7008;
  *(CFAbsoluteTime *)(a1 + 8) = CFAbsoluteTimeGetCurrent();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 88) = *(void *)(a2 + 64);
  *(int32x2_t *)(a1 + 96) = vrev64_s32(*(int32x2_t *)(a2 + 80));
  return a1;
}

double sub_100A60788(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1022E7168;
  *(unsigned char *)(a1 + 32) = 3;
  *(void *)(a1 + 8) = *(void *)(a2 + 158);
  *(void *)(a1 + 24) = *(void *)(a2 + 174);
  uint64_t v2 = *(void *)(a2 + 19);
  *(void *)(a1 + 40) = *(void *)(a2 + 4);
  *(void *)(a1 + 48) = v2;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 15);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 13);
  *(_WORD *)(a1 + 58) = *(_WORD *)(a2 + 156);
  double result = *(double *)(a2 + 182);
  *(double *)(a1 + 64) = result;
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 190);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 17);
  return result;
}

__n128 sub_100A607FC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1022E72F8;
  *(unsigned char *)(a1 + 80) = 3;
  *(void *)(a1 + 8) = *(void *)(a2 + 68);
  *(void *)(a1 + 24) = *(void *)(a2 + 76);
  *(void *)(a1 + 32) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)a2;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 24);
  *(void *)(a1 + 60) = *(void *)(a2 + 26);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 34);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 38);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 42);
  *(unsigned char *)(a1 + 81) = *(_DWORD *)(a2 + 46);
  __n128 result = *(__n128 *)(a2 + 50);
  *(__n128 *)(a1 + 88) = result;
  return result;
}

uint64_t sub_100A6087C(uint64_t a1)
{
  *(void *)a1 = &off_1022DB0D0;
  uint64_t v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  id *v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_100A608EC()
{
}

void sub_100A609E8()
{
}

uint64_t sub_100A60A0C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    uint64_t v2 = *(void **)(v1 + 191);
    if (v2)
    {
      *(void *)(v1 + 199) = v2;
      operator delete(v2);
    }
    operator delete();
  }
  return result;
}

void sub_100A60A70(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_signpost_emit_with_name_impl(a1, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, a5, a6, &a9, 0x12u);
}

BOOL sub_100A60A9C()
{
  uint64_t v1 = qword_1024190F8;
  return os_log_type_enabled(v1, OS_LOG_TYPE_ERROR);
}

void sub_100A60AC8(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

uint64_t sub_100A60AE8()
{
  sub_100134750(qword_10247FA28, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247FA28, (void *)&_mh_execute_header);
}

NSDictionary *sub_100A61054(uint64_t a1)
{
  v6[0] = @"fenceId";
  v7[0] = [*(id *)(a1 + 32) fenceID];
  v6[1] = @"fenceRadius";
  [*(id *)(a1 + 32) radius];
  v7[1] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  _DWORD v6[2] = @"totalDurationInFence";
  [*(id *)(a1 + 32) timeFenceExit];
  double v3 = v2;
  [*(id *)(a1 + 32) timeFenceStart];
  v7[2] = +[NSNumber numberWithDouble:v3 - v4];
  return +[NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:3];
}

int64_t sub_100A616A4(id a1, NSDictionary *a2, NSDictionary *a3)
{
  id v4 = [(NSDictionary *)a2 objectForKeyedSubscript:@"timestamp"];
  id v5 = [(NSDictionary *)a3 objectForKeyedSubscript:@"timestamp"];

  return (int64_t)[v4 compare:v5];
}

uint64_t **sub_100A61950(uint64_t **a1, unint64_t *a2)
{
  id v4 = a1 + 1;
  double v3 = a1[1];
  unint64_t v5 = *a2;
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        long long v6 = (uint64_t **)v3;
        unint64_t v7 = v3[4];
        if (v5 >= v7) {
          break;
        }
        double v3 = *v6;
        id v4 = v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      if (v7 >= v5) {
        break;
      }
      double v3 = v6[1];
      if (!v3)
      {
        id v4 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    long long v6 = a1 + 1;
LABEL_9:
    unint64_t v8 = (char *)operator new(0xB0uLL);
    *((void *)v8 + 4) = v5;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *(_OWORD *)(v8 + 88) = 0u;
    *(_OWORD *)(v8 + 104) = 0u;
    *(_OWORD *)(v8 + 120) = 0u;
    *(_OWORD *)(v8 + 136) = 0u;
    *(_OWORD *)(v8 + 152) = 0u;
    *((void *)v8 + 21) = 0;
    sub_1000EDF90(a1, (uint64_t)v6, v4, (uint64_t *)v8);
    long long v6 = (uint64_t **)v8;
  }
  return v6 + 5;
}

uint64_t sub_100A62714(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_100A63500(id a1)
{
  qword_1024192D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "PedestrianFence");
}

float *sub_100A63530@<X0>(float *result@<X0>, float *a2@<X1>, uint64_t a3@<X8>)
{
  float v4 = a2[3];
  float v3 = a2[4];
  float v6 = result[3];
  float v5 = result[4];
  float v7 = a2[2];
  float v8 = result[2];
  float v9 = (float)(v6 * v3) - (float)(v5 * v4);
  float v10 = (float)(v5 * v7) - (float)(v8 * v3);
  float v11 = (float)(v8 * v4) - (float)(v6 * v7);
  float v12 = sqrtf((float)((float)(v10 * v10) + (float)(v9 * v9)) + (float)(v11 * v11));
  if (v12 > 0.0)
  {
    float v9 = v9 / v12;
    float v10 = v10 / v12;
    float v11 = v11 / v12;
  }
  float v13 = (float)(v4 * v11) - (float)(v3 * v10);
  float v14 = (float)(v3 * v9) - (float)(v7 * v11);
  float v15 = (float)(v7 * v10) - (float)(v4 * v9);
  float v16 = sqrtf((float)((float)(v14 * v14) + (float)(v13 * v13)) + (float)(v15 * v15));
  if (v16 > 0.0)
  {
    float v13 = v13 / v16;
    float v14 = v14 / v16;
    float v15 = v15 / v16;
  }
  float v17 = -v3;
  float v18 = -v7;
  float v19 = -v4;
  float v20 = sqrtf((float)((float)(v4 * v4) + (float)(v7 * v7)) + (float)(v3 * v3));
  if (v20 > 0.0)
  {
    float v18 = v18 / v20;
    float v19 = v19 / v20;
    float v17 = v17 / v20;
  }
  *(void *)a3 = off_1022DB158;
  *(void *)(a3 + 8) = off_1022AD5D0;
  *(float *)(a3 + 16) = v13;
  *(float *)(a3 + 20) = v14;
  *(float *)(a3 + 24) = v15;
  *(void *)(a3 + 32) = off_1022AD5D0;
  *(float *)(a3 + 40) = v9;
  *(float *)(a3 + 44) = v10;
  *(float *)(a3 + 48) = v11;
  *(void *)(a3 + 56) = off_1022AD5D0;
  *(float *)(a3 + 64) = v18;
  *(float *)(a3 + 68) = v19;
  *(float *)(a3 + 72) = v17;
  return result;
}

uint64_t sub_100A63680(float *a1, float *a2, float *a3, float *a4)
{
  float v8 = a1[6];
  float v9 = a1[12];
  if (v8 != 0.0 || (float v10 = 0.0, v9 != 0.0)) {
    float v10 = atan2f(v9, v8);
  }
  *a4 = v10;
  __float2 v11 = __sincosf_stret(v10);
  float v12 = (float)(v11.__sinval * a1[12]) + (float)(v11.__cosval * a1[6]);
  float v13 = a1[18];
  if (v12 == 0.0 && v13 == 0.0) {
    return 0;
  }
  *a3 = atan2f(v12, v13);
  float v14 = (float)(v11.__cosval * a1[11]) - (float)(v11.__sinval * a1[5]);
  float v15 = (float)(v11.__cosval * a1[10]) - (float)(v11.__sinval * a1[4]);
  if (v14 == 0.0 && v15 == 0.0) {
    return 0;
  }
  *a2 = atan2f(v15, v14);
  return 1;
}

uint64_t sub_100A6375C(float *a1, float *a2)
{
  float v7 = 0.0;
  float v5 = 0.0;
  uint64_t result = sub_100A63680(a1, &v5, &v6, &v7);
  if (result)
  {
    float v4 = (float)((float)-v5 - v7) * 57.2957795;
    if (v4 >= 0.0)
    {
      for (; v4 >= 360.0; float v4 = v4 + -360.0)
        ;
    }
    else
    {
      for (; v4 < -360.0; float v4 = v4 + 360.0)
        ;
      float v4 = v4 + 360.0;
    }
    *a2 = v4;
  }
  return result;
}

float sub_100A63838(int a1, float result)
{
  if (result >= 0.0)
  {
    for (; result >= 360.0; uint64_t result = result + -360.0)
      ;
  }
  else
  {
    for (; result < -360.0; uint64_t result = result + 360.0)
      ;
    uint64_t result = result + 360.0;
  }
  if (result >= 180.0 && a1 == 1) {
    return result + -360.0;
  }
  return result;
}

BOOL sub_100A638CC(float *a1, float *a2, float *a3)
{
  float v3 = a2[2];
  float v4 = a2[3];
  float v5 = a2[4];
  float v6 = (float)((float)(a1[5] * v4) + (float)(a1[4] * v3)) + (float)(a1[6] * v5);
  float v7 = (float)((float)(v4 * a1[11]) + (float)(a1[10] * v3)) + (float)(a1[12] * v5);
  BOOL v8 = v7 != 0.0 || v6 != 0.0;
  if (v8)
  {
    float v10 = atan2f(-v7, v6) * 57.2957795;
    if (v10 >= 0.0)
    {
      for (; v10 >= 360.0; float v10 = v10 + -360.0)
        ;
    }
    else
    {
      for (; v10 < -360.0; float v10 = v10 + 360.0)
        ;
      float v10 = v10 + 360.0;
    }
    *a3 = v10;
  }
  return v8;
}

BOOL sub_100A639C8(float *a1, float *a2, float *a3)
{
  int v28 = off_1022AD5D0;
  uint64_t v29 = 0;
  int v30 = 0;
  float v4 = a2[4];
  float v5 = fabsf(v4);
  float v6 = a2[2];
  float v7 = 0.0;
  if (v5 > fabsf(v6) && v5 > fabsf(a2[3]) && v4 > 0.0)
  {
    uint64_t v29 = 1031798784;
    int v30 = 0;
    float v7 = 0.0625;
  }
  float v8 = a1[2];
  float v9 = a1[3];
  float v10 = a1[4];
  float v11 = sqrtf((float)((float)(v9 * v9) + (float)(v8 * v8)) + (float)(v10 * v10));
  if (v11 > 0.0)
  {
    float v8 = v8 / v11;
    float v9 = v9 / v11;
    float v10 = v10 / v11;
  }
  float v12 = (float)(v9 + (float)(v8 * 0.0)) + (float)(v10 * 0.0);
  float v13 = v9 * 0.0;
  int v23 = off_1022AD5D0;
  float v24 = v12;
  float v25 = (float)(v13 - v8) + (float)(v10 * 0.0);
  float v26 = v10 + (float)(v13 + (float)(v8 * 0.0));
  float v14 = a2[3];
  float v15 = sqrtf((float)((float)(v14 * v14) + (float)(v6 * v6)) + (float)(v4 * v4));
  if (v15 > 0.0)
  {
    float v6 = v6 / v15;
    float v14 = v14 / v15;
    float v4 = v4 / v15;
  }
  float v16 = (float)(v14 + (float)(v6 * 0.0)) + (float)(v4 * 0.0);
  float v17 = v14 * 0.0;
  float v19 = off_1022AD5D0;
  float v20 = v16;
  float v21 = (float)(v17 - v6) + (float)(v4 * 0.0);
  float v22 = v4 + (float)(v17 + (float)(v6 * 0.0));
  sub_100A63530((float *)&v23, (float *)&v19, (uint64_t)v27);
  if (v7 == 0.0)
  {
    if ((sub_100A6375C(v27, a3) & 1) == 0) {
      return 0;
    }
  }
  else
  {
    BOOL result = sub_100A638CC(v27, (float *)&v28, a3);
    if (!result) {
      return result;
    }
  }
  return 1;
}

void sub_100A63B8C()
{
}

void sub_100A63BA4(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 24584) = 0;
  double v2 = *(void ***)(a1 + 24600);
  uint64_t v3 = *(void *)(a1 + 24608);
  *(void *)(a1 + 24632) = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      double v2 = (void **)(*(void *)(a1 + 24600) + 8);
      *(void *)(a1 + 24600) = v2;
      unint64_t v4 = *(void *)(a1 + 24608) - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v5 = 85;
  }
  else
  {
    if (v4 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v5 = 170;
  }
  *(void *)(a1 + 24624) = v5;
LABEL_8:
  *(void *)(a1 + 24640) = 0;
  float v6 = *(void ***)(a1 + 24656);
  uint64_t v7 = *(void *)(a1 + 24664);
  *(void *)(a1 + 24688) = 0;
  unint64_t v8 = v7 - (void)v6;
  if (v8 >= 0x11)
  {
    do
    {
      operator delete(*v6);
      float v6 = (void **)(*(void *)(a1 + 24656) + 8);
      *(void *)(a1 + 24656) = v6;
      unint64_t v8 = *(void *)(a1 + 24664) - (void)v6;
    }
    while (v8 > 0x10);
  }
  if (v8 >> 3 == 1)
  {
    uint64_t v9 = 85;
    goto LABEL_14;
  }
  if (v8 >> 3 == 2)
  {
    uint64_t v9 = 170;
LABEL_14:
    *(void *)(a1 + 24680) = v9;
  }
  *(void *)(a1 + 24696) = 0;
}

void sub_100A63C94(unsigned __int16 *a1, uint64_t *a2, double a3)
{
  if (a3 > 0.0)
  {
    uint64_t v13 = v6;
    uint64_t v14 = v5;
    uint64_t v15 = v3;
    uint64_t v16 = v4;
    sub_100A63D04(a1, a3);
    uint64_t v10 = *a2;
    *(double *)&long long v11 = a3;
    *((void *)&v11 + 1) = v10;
    int v12 = *((_DWORD *)a2 + 2);
    sub_1001886E4(a1, &v11);
    sub_100A6414C((uint64_t)a1, a3);
  }
}

void sub_100A63D04(unsigned __int16 *a1, double a2)
{
  if (a1[1])
  {
    uint64_t v4 = a1 + 4;
    unint64_t v5 = a1[1] + (unint64_t)*a1 - 1;
    unint64_t v6 = *((unsigned int *)a1 + 1);
    if (v5 < v6) {
      unint64_t v6 = 0;
    }
    if (*(double *)&v4[12 * (v5 - v6)] + 1.0 < a2)
    {
      if (qword_102419350 != -1) {
        dispatch_once(&qword_102419350, &stru_1022DB198);
      }
      uint64_t v7 = off_102419358;
      if (os_log_type_enabled((os_log_t)off_102419358, OS_LOG_TYPE_INFO))
      {
        unint64_t v8 = *a1 + (unint64_t)a1[1] - 1;
        unint64_t v9 = *((unsigned int *)a1 + 1);
        if (v8 < v9) {
          unint64_t v9 = 0;
        }
        float v10 = a2 - *(double *)&v4[12 * (v8 - v9)];
        *(_DWORD *)uint64_t buf = 134217984;
        double v17 = v10;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Resetting detector, %.1f seconds without an accel sample", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_25;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419350 == -1)
      {
LABEL_28:
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CMChoreaDetection::checkForGap(CFAbsoluteTime)", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
LABEL_25:
        sub_100A63BA4((uint64_t)a1);
        return;
      }
LABEL_30:
      dispatch_once(&qword_102419350, &stru_1022DB198);
      goto LABEL_28;
    }
  }
  if (*((void *)a1 + 3079))
  {
    double v11 = *(double *)(*(void *)(*((void *)a1 + 3075) + 8 * (*((void *)a1 + 3078) / 0xAAuLL))
                    + 24 * (*((void *)a1 + 3078) % 0xAAuLL));
    if (v11 < *((double *)a1 + 3087)) {
      double v11 = *((double *)a1 + 3087);
    }
    if (v11 + 600.0 < a2)
    {
      if (qword_102419350 != -1) {
        dispatch_once(&qword_102419350, &stru_1022DB198);
      }
      int v12 = off_102419358;
      if (os_log_type_enabled((os_log_t)off_102419358, OS_LOG_TYPE_INFO))
      {
        double v13 = *(double *)(*(void *)(*((void *)a1 + 3075) + 8 * (*((void *)a1 + 3078) / 0xAAuLL))
                        + 24 * (*((void *)a1 + 3078) % 0xAAuLL));
        if (v13 < *((double *)a1 + 3087)) {
          double v13 = *((double *)a1 + 3087);
        }
        float v14 = a2 - v13;
        *(_DWORD *)uint64_t buf = 134217984;
        double v17 = v14;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Resetting detector, %.1f seconds without a tremor score", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_25;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419350 == -1) {
        goto LABEL_28;
      }
      goto LABEL_30;
    }
  }
}

void sub_100A6414C(uint64_t a1, double a2)
{
  if (!*(void *)(a1 + 24584)) {
    *(void *)(a1 + 24584) = 2560 * (1000 * (uint64_t)a2 / 2560) + 2560;
  }
  if (*(_DWORD *)(a1 + 4) == *(unsigned __int16 *)(a1 + 2))
  {
    uint64_t v3 = (double *)sub_100514198((unsigned __int16 *)a1, 0x200uLL);
    uint64_t v4 = *(void *)(a1 + 24584);
    if (v4 >= 1)
    {
      double v5 = (double)v4 / 1000.0;
      if (*v3 >= v5)
      {
        if (*v3 < (double)(v4 + 1280) / 1000.0)
        {
          sub_100A64698(a1, v5);
          uint64_t v4 = *(void *)(a1 + 24584);
        }
        *(void *)(a1 + 24584) = v4 + 2560;
      }
    }
  }
}

double sub_100A64210(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[3075];
  unint64_t v5 = a1[3078];
  unint64_t v6 = (void *)(v4 + 8 * (v5 / 0xAA));
  uint64_t v7 = a1[3076];
  if (v7 == v4) {
    unint64_t v8 = 0;
  }
  else {
    unint64_t v8 = (void *)(*v6 + 24 * (v5 % 0xAA));
  }
  while (1)
  {
    if (v7 == v4)
    {
      unint64_t v10 = 0;
    }
    else
    {
      unint64_t v9 = a1[3079] + a1[3078];
      unint64_t v10 = *(void *)(v4 + 8 * (v9 / 0xAA)) + 24 * (v9 % 0xAA);
    }
    if (v8 == (void *)v10) {
      break;
    }
    sub_100A64338((uint64_t)v8, (uint64_t)a2);
    if (*(double *)v8 < a2->n128_f64[0]) {
      a1[3087] = *v8;
    }
    v8 += 3;
    if ((void *)((char *)v8 - *v6) == (void *)4080)
    {
      double v11 = (void *)v6[1];
      ++v6;
      unint64_t v8 = v11;
    }
    uint64_t v4 = a1[3075];
    uint64_t v7 = a1[3076];
  }
  sub_100A643E0((uint64_t)a1);

  *(void *)&double result = sub_100A645E8(a1 + 3081, a2).n128_u64[0];
  return result;
}

uint64_t sub_100A64338(uint64_t result, uint64_t a2)
{
  if (*(double *)result + 1.5 > *(double *)a2 && *(double *)result < *(double *)a2 + 1.5)
  {
    int v3 = *(_DWORD *)(result + 20);
    int v4 = *(_DWORD *)(a2 + 8);
    if (v3 <= v4) {
      int v3 = *(_DWORD *)(a2 + 8);
    }
    *(_DWORD *)(result + 20) = v3;
    if (v4 >= 1)
    {
      float v5 = *(float *)(result + 12);
      if (v5 > -0.2) {
        float v5 = -0.2;
      }
      *(float *)(result + 12) = v5;
      double v6 = *(float *)(a2 + 12);
      if (v6 <= 2.2) {
        int v7 = 3;
      }
      else {
        int v7 = 4;
      }
      if (v6 <= 0.1) {
        int v8 = 1;
      }
      else {
        int v8 = 2;
      }
      if (v6 <= 0.6) {
        int v7 = v8;
      }
      if (v3 <= v7) {
        int v3 = v7;
      }
      *(_DWORD *)(result + 20) = v3;
    }
  }
  return result;
}

uint64_t sub_100A643E0(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24632);
  if (v1)
  {
    uint64_t v2 = result;
    double v3 = *(double *)(result + 24696);
    uint64_t v4 = *(void *)(result + 24600);
    unint64_t v5 = *(void *)(result + 24624);
    double v6 = (unint64_t *)(v4 + 8 * (v5 / 0xAA));
    unint64_t v7 = *v6;
    unint64_t v8 = *v6 + 24 * (v5 % 0xAA);
    double v9 = *(double *)v8;
    if (v3 > *(double *)v8 + 60.0)
    {
      if (*(void *)(result + 24704))
      {
        int v10 = 0;
        uint64_t v11 = *(void *)(result + 24608);
        if (v11 == v4) {
          int v12 = 0;
        }
        else {
          int v12 = (double *)(*v6 + 24 * (v5 % 0xAA));
        }
        float v13 = 0.0;
        float v14 = (double *)*v6;
        uint64_t v15 = v4 + 8 * (v5 / 0xAA);
        uint64_t v16 = v12;
LABEL_8:
        uint64_t v17 = (char *)v14 - (char *)v16 + 4080;
        while (1)
        {
          unint64_t v18 = v11 == v4 ? 0 : *(void *)(v4 + 8 * ((v5 + v1) / 0xAA)) + 24 * ((v5 + v1) % 0xAA);
          if (v16 == (double *)v18 || *v16 > v3) {
            break;
          }
          float v13 = v13 + *((float *)v16 + 3);
          ++v10;
          v16 += 3;
          v17 -= 24;
          if (!v17)
          {
            float v19 = *(double **)(v15 + 8);
            v15 += 8;
            float v14 = v19;
            uint64_t v16 = v19;
            goto LABEL_8;
          }
        }
        for (double i = *v12; i <= *(double *)(v2 + 24640); double i = *(double *)v8)
        {
          v8 += 24;
          if (v8 - v7 == 4080)
          {
            unint64_t v21 = v6[1];
            ++v6;
            unint64_t v7 = v21;
            unint64_t v8 = v21;
          }
        }
        double v22 = (v3 + v9) * 0.5;
        if (i <= v22)
        {
          BOOL v23 = (float)(v13 / (float)v10) > 0.16;
          do
          {
            uint64_t v24 = *(void *)(v8 + 16);
            long long v27 = *(_OWORD *)v8;
            uint64_t v28 = v24;
            DWORD2(v27) = v23;
            double v25 = *(double *)v8;
            v8 += 24;
            *(double *)(v2 + 24640) = v25;
            (*(void (**)(long long *, void, uint64_t))(v2 + 24704))(&v27, *(void *)(v2 + 24712), v17);
            if (v8 - *v6 == 4080)
            {
              unint64_t v26 = v6[1];
              ++v6;
              unint64_t v8 = v26;
            }
          }
          while (*(double *)v8 <= v22);
          unint64_t v5 = *(void *)(v2 + 24624);
          uint64_t v1 = *(void *)(v2 + 24632);
        }
      }
      *(void *)(v2 + 24632) = v1 - 1;
      *(void *)(v2 + 24624) = v5 + 1;
      return sub_10041FD7C(v2 + 24592, 1);
    }
  }
  return result;
}

__n128 sub_100A645E8(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100A658E0(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = (__n128 *)(*(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  __n128 result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  __n128 *v8 = result;
  ++a1[5];
  return result;
}

void sub_100A64698(uint64_t a1, double a2)
{
  if (*(_DWORD *)(a1 + 4) == *(unsigned __int16 *)(a1 + 2))
  {
    v46.n128_u64[1] = 0xFFFFFFFFLL;
    int v48 = -1;
    v46.n128_f64[0] = a2;
    sub_100A64A90(a1, v51, (unsigned __int16 *)a1, 1);
    sub_100A64A90(v3, v50, (unsigned __int16 *)a1, 16);
    sub_100A64A90(v4, v49, (unsigned __int16 *)a1, 256);
    float v5 = 0.0;
    if (dword_10247FA78 < dword_10247FA7C)
    {
      uint64_t v6 = (float *)&v51[dword_10247FA78];
      unint64_t v7 = (float *)&v50[dword_10247FA78];
      uint64_t v8 = dword_10247FA7C - (uint64_t)dword_10247FA78;
      float v9 = 0.0;
      float v10 = 0.0;
      float v11 = 0.0;
      int v12 = (float *)&v49[dword_10247FA78];
      do
      {
        float v13 = *v6++;
        float v14 = v13;
        float v15 = *v7++;
        float v9 = v9 + (float)(v14 * v14);
        float v10 = v10 + (float)(v15 * v15);
        float v16 = *v12++;
        float v11 = v11 + (float)(v16 * v16);
        --v8;
      }
      while (v8);
      float v5 = v11 + (float)(v10 + v9);
    }
    float v47 = v5;
    uint64_t v17 = operator new(0x14uLL);
    v45[0] = (uint64_t)v17;
    v45[2] = (uint64_t)(v17 + 5);
    v17[4] = 1069547520;
    *(_OWORD *)uint64_t v17 = xmmword_101D6FE24;
    v45[1] = (uint64_t)(v17 + 5);
    float v18 = sub_100A64CAC(a1, (uint64_t)v51);
    float v20 = v18 * sub_100D6AA2C(25, 0x80uLL);
    if (v20 > 0.0)
    {
      sub_100A64E8C(v20, v19, (uint64_t)v51, v45);
      sub_100A64E8C(v20, v21, (uint64_t)v50, v45);
      sub_100A64E8C(v20, v22, (uint64_t)v49, v45);
    }
    float v23 = sub_100A651B0(v19, (uint64_t)v51);
    float v25 = sub_100A651B0(v24, (uint64_t)v50);
    float v27 = sub_100A651B0(v26, (uint64_t)v49);
    unint64_t v28 = (qword_10248B2C8 - qword_10248B2C0) >> 2;
    if (qword_10248B2C8 != qword_10248B2C0)
    {
      uint64_t v29 = 0;
      float v30 = (float)((float)(v23 + v25) + v27) / 3.0;
      if (v28 <= 1) {
        uint64_t v31 = 1;
      }
      else {
        uint64_t v31 = (qword_10248B2C8 - qword_10248B2C0) >> 2;
      }
      while (v30 >= *(float *)(qword_10248B2C0 + 4 * v29))
      {
        if (v31 == ++v29) {
          goto LABEL_16;
        }
      }
      LODWORD(v28) = v29;
    }
LABEL_16:
    unint64_t v32 = (qword_10248B2E0 - qword_10248B2D8) >> 2;
    if (qword_10248B2E0 != qword_10248B2D8)
    {
      uint64_t v33 = 0;
      if (v32 <= 1) {
        uint64_t v34 = 1;
      }
      else {
        uint64_t v34 = (qword_10248B2E0 - qword_10248B2D8) >> 2;
      }
      while (v5 >= *(float *)(qword_10248B2D8 + 4 * v33))
      {
        if (v34 == ++v33) {
          goto LABEL_24;
        }
      }
      LODWORD(v32) = v33;
    }
LABEL_24:
    v46.n128_u32[3] = *(_DWORD *)(*(void *)(qword_10248B2F0 + 24 * (int)v28) + 4 * (int)v32);
    sub_100A652BC((void *)(a1 + 24592), &v46);
    uint64_t v35 = *(void *)(a1 + 24656);
    unint64_t v36 = *(void *)(a1 + 24680);
    int v37 = (void *)(v35 + 8 * (v36 / 0xAA));
    uint64_t v38 = *(void *)(a1 + 24664);
    if (v38 == v35) {
      __int16 v39 = 0;
    }
    else {
      __int16 v39 = (char *)(*v37 + 24 * (v36 % 0xAA));
    }
    while (1)
    {
      if (v38 == v35)
      {
        unint64_t v41 = 0;
      }
      else
      {
        unint64_t v40 = *(void *)(a1 + 24688) + *(void *)(a1 + 24680);
        unint64_t v41 = *(void *)(v35 + 8 * (v40 / 0xAA)) + 24 * (v40 % 0xAA);
      }
      if (v39 == (char *)v41) {
        break;
      }
      unint64_t v42 = *(void *)(a1 + 24632) + *(void *)(a1 + 24624) - 1;
      sub_100A64338(*(void *)(*(void *)(a1 + 24600) + 8 * (v42 / 0xAA)) + 24 * (v42 % 0xAA), (uint64_t)v39);
      if (*(double *)v39 >= v46.n128_f64[0])
      {
        v39 += 24;
        if (&v39[-*v37] == (char *)4080)
        {
          BOOL v44 = (char *)v37[1];
          ++v37;
          __int16 v39 = v44;
        }
      }
      else
      {
        int v37 = (void *)sub_100A6536C((int64x2_t *)(a1 + 24648), v37, v39);
        __int16 v39 = v43;
      }
      uint64_t v35 = *(void *)(a1 + 24656);
      uint64_t v38 = *(void *)(a1 + 24664);
    }
    operator delete(v17);
  }
}

void sub_100A64A6C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100A64A90(uint64_t a1, _DWORD *a2, unsigned __int16 *a3, int a4)
{
  *(void *)uint64_t v31 = 0x10000000000;
  sub_1014F0838(v30);
  int v7 = 0;
  unint64_t v8 = 0;
  unint64_t v9 = -4;
  do
  {
    unint64_t v10 = v9 + 4;
    if (a4 == 256)
    {
      float v18 = *(float *)(sub_100514198(a3, v10) + 16);
      float v19 = *(float *)(sub_100514198(a3, v9 + 5) + 16);
      float v20 = *(float *)(sub_100514198(a3, v9 + 6) + 16);
      uint64_t v21 = sub_100514198(a3, v9 + 7);
      float v16 = (float)(v18 + v19) + v20;
      float v17 = *(float *)(v21 + 16);
    }
    else if (a4 == 16)
    {
      float v22 = *(float *)(sub_100514198(a3, v10) + 12);
      float v23 = *(float *)(sub_100514198(a3, v9 + 5) + 12);
      float v24 = *(float *)(sub_100514198(a3, v9 + 6) + 12);
      uint64_t v25 = sub_100514198(a3, v9 + 7);
      float v16 = (float)(v22 + v23) + v24;
      float v17 = *(float *)(v25 + 12);
    }
    else
    {
      float v11 = 0.0;
      if (a4 != 1) {
        goto LABEL_9;
      }
      float v12 = *(float *)(sub_100514198(a3, v10) + 8);
      float v13 = *(float *)(sub_100514198(a3, v9 + 5) + 8);
      float v14 = *(float *)(sub_100514198(a3, v9 + 6) + 8);
      uint64_t v15 = sub_100514198(a3, v9 + 7);
      float v16 = (float)(v12 + v13) + v14;
      float v17 = *(float *)(v15 + 8);
    }
    float v11 = (float)(v16 + v17) * 0.25;
LABEL_9:
    unint64_t v26 = v8 + (unsigned __int16)v7;
    if (v26 >= 0x100) {
      uint64_t v27 = -256;
    }
    else {
      uint64_t v27 = 0;
    }
    *(float *)&v31[2 * v27 + 4 + 2 * v26] = v11;
    if (v8 > 0xFF)
    {
      if ((unsigned __int16)v7 >= 0xFFu) {
        int v28 = -256;
      }
      else {
        int v28 = 0;
      }
      int v29 = v7 + v28;
      int v7 = v29 + 1;
      v31[0] = v29 + 1;
    }
    else
    {
      v31[1] = ++v8;
    }
    v9 += 4;
  }
  while (v9 < 0x3FC);
  sub_1014F083C((uint64_t)v30, a2, v31);
}

float sub_100A64CAC(uint64_t a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247FA90, memory_order_acquire) & 1) == 0)
  {
    a1 = __cxa_guard_acquire(&qword_10247FA90);
    if (a1)
    {
      float v25 = sub_100D6A9FC(25, 0x80uLL, 1.0);
      dword_10247FA88 = sub_100D6A824(v25) - 1;
      __cxa_guard_release(&qword_10247FA90);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247FAA0, memory_order_acquire) & 1) == 0)
  {
    a1 = __cxa_guard_acquire(&qword_10247FAA0);
    if (a1)
    {
      float v26 = sub_100D6A9FC(25, 0x80uLL, 2.6667);
      dword_10247FA98 = sub_100D6A824(v26);
      __cxa_guard_release(&qword_10247FAA0);
    }
  }
  int v3 = dword_10247FA88;
  int v4 = dword_10247FA98;
  if (dword_10247FA88 >= dword_10247FA98)
  {
    int v11 = dword_10247FA88;
  }
  else
  {
    float v5 = (float *)(a2 + 4 * dword_10247FA88);
    float v7 = *v5;
    uint64_t v6 = v5 + 1;
    double v8 = v7;
    int v9 = dword_10247FA88 + 1;
    uint64_t v10 = dword_10247FA98 - (uint64_t)dword_10247FA88;
    int v11 = dword_10247FA88;
    do
    {
      float v12 = *v6++;
      double v13 = v12;
      if (v8 < v12)
      {
        int v11 = v9;
        double v8 = v13;
      }
      ++v9;
      --v10;
    }
    while (v10);
  }
  float v14 = (float)v11 + -0.5;
  float v15 = (float)v11 + 0.5;
  float v17 = sub_100A6563C(v14, v15, a1, a2);
  float v19 = v18;
  if (v11 >= 0) {
    int v20 = v11;
  }
  else {
    int v20 = v11 + 1;
  }
  if (v3 < v20 >> 1)
  {
    float v21 = sub_100A6563C(v14 * 0.5, v15 * 0.5, v16, a2);
    if (v21 > v17)
    {
      float v17 = v21;
      float v19 = v22;
    }
  }
  if (v4 > 2 * v11 && sub_100A6563C(v14 + v14, v15 + v15, v16, a2) > v17) {
    return v23;
  }
  return v19;
}

void sub_100A64E64(_Unwind_Exception *a1)
{
}

void sub_100A64E8C(float a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247FAB0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10247FAB0))
  {
    dword_10247FAA8 = sub_100D6AA2C(25, 0x80uLL);
    __cxa_guard_release(&qword_10247FAB0);
  }
  float v7 = 0;
  double v8 = 0;
  float v9 = *(float *)&dword_10247FAA8;
  float v10 = a1 / *(float *)&dword_10247FAA8;
  signed int v11 = llroundf(v10);
  float v12 = *(float *)(a3 + 4 * v11);
  std::string __p = 0;
  long long v45 = 0;
  __n128 v46 = 0;
  if (dword_10247FA84 >= 2)
  {
    float v7 = 0;
    uint64_t v13 = 1;
    do
    {
      if (v7 >= (float *)v46)
      {
        float v14 = __p;
        uint64_t v15 = v7 - __p;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62) {
          sub_1001D7FD4();
        }
        uint64_t v17 = v46 - (char *)__p;
        if ((v46 - (char *)__p) >> 1 > v16) {
          unint64_t v16 = v17 >> 1;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          float v19 = (char *)sub_10017EA34((uint64_t)&v46, v18);
          float v14 = __p;
          float v7 = v45;
        }
        else
        {
          float v19 = 0;
        }
        int v20 = (float *)&v19[4 * v15];
        float v9 = *(float *)(a3 + 4 * v13);
        float *v20 = v9;
        float v21 = v20 + 1;
        while (v7 != v14)
        {
          float v22 = *--v7;
          float v9 = v22;
          *--int v20 = v22;
        }
        std::string __p = v20;
        __n128 v46 = &v19[4 * v18];
        if (v14) {
          operator delete(v14);
        }
        float v7 = v21;
      }
      else
      {
        float v9 = *(float *)(a3 + 4 * v13);
        *v7++ = v9;
      }
      long long v45 = v7;
      ++v13;
    }
    while (v13 < dword_10247FA84);
    double v8 = __p;
  }
  unint64_t v23 = (unint64_t)(v7 - v8) >> 1;
  float v24 = &v8[v23];
  if (v24 != v7)
  {
    sub_1004EF34C(v8, v24, v7, v9);
    double v8 = __p;
    unint64_t v23 = (unint64_t)(v45 - __p) >> 1;
  }
  uint64_t v25 = *a4;
  uint64_t v26 = a4[1];
  uint64_t v27 = v26 - *a4;
  if (v26 == *a4) {
    goto LABEL_48;
  }
  uint64_t v28 = 0;
  float v29 = v8[v23];
  unint64_t v30 = v27 >> 2;
  uint64_t v31 = dword_10247FA84;
  if (v30 <= 1) {
    unint64_t v30 = 1;
  }
  float v32 = 0.12 / *(float *)&dword_10247FAA8;
  do
  {
    float v33 = v10 * *(float *)(v25 + 4 * v28);
    float v34 = floorf(v33 + -0.001);
    float v35 = ceilf(v33 - v32);
    if (v35 < v34) {
      float v34 = v35;
    }
    float v36 = ceilf(v33 + 0.001);
    int v37 = (int)v34;
    float v38 = floorf(v33 + v32);
    if (v36 >= v38) {
      float v38 = v36;
    }
    if (v37 <= (int)v38)
    {
      uint64_t v39 = v37;
      int v40 = (int)v38 - v37 + 1;
      do
      {
        if (v11 != v39 && v39 <= v31)
        {
          float v41 = *(float *)(a3 + 4 * v39) - v29;
          if (v41 >= v12) {
            float v42 = v12;
          }
          else {
            float v42 = *(float *)(a3 + 4 * v39) - v29;
          }
          if (*(float *)(v25 + 4 * v28) > 1.0) {
            float v41 = v42;
          }
          float v43 = *(float *)(a3 + 4 * v11);
          if ((float)(v29 - v43) >= v41) {
            float v41 = v29 - v43;
          }
          *(float *)(a3 + 4 * v11) = v43 + v41;
          *(float *)(a3 + 4 * v39) = *(float *)(a3 + 4 * v39) - v41;
        }
        ++v39;
        --v40;
      }
      while (v40);
    }
    ++v28;
  }
  while (v28 != v30);
  if (v8) {
LABEL_48:
  }
    operator delete(v8);
}

void sub_100A65178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
}

float sub_100A651B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = dword_10247FA80;
  int v3 = dword_10247FA84;
  double v4 = 0.0;
  if (dword_10247FA84 > dword_10247FA80)
  {
    float v5 = (float *)(a2 + 4 * dword_10247FA80);
    uint64_t v6 = (float *)&v15[dword_10247FA80];
    uint64_t v7 = dword_10247FA84 - (uint64_t)dword_10247FA80;
    double v8 = 0.0;
    uint64_t v9 = v7;
    do
    {
      float v10 = *v5++;
      *v6++ = v10 * v10;
      double v8 = v8 + (float)(v10 * v10);
      --v9;
    }
    while (v9);
    signed int v11 = (float *)&v15[v2];
    double v4 = 0.0;
    do
    {
      float v12 = *v11++;
      float v13 = v12 / v8;
      double v4 = v4 - (float)(log2f(v13) * v13);
      --v7;
    }
    while (v7);
  }
  return v4 / log2((double)(v3 - (int)v2));
}

__n128 sub_100A652BC(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100A65BF8(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  double v8 = (__n128 *)(*(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  __n128 result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  __n128 *v8 = result;
  ++a1[5];
  return result;
}

unint64_t sub_100A6536C(int64x2_t *a1, void *a2, char *a3)
{
  unint64_t v4 = a1[2].u64[0];
  uint64_t v5 = a1->i64[1];
  uint64_t v6 = (char **)(v5 + 8 * (v4 / 0xAA));
  if (a1[1].i64[0] == v5) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = &(*v6)[24 * (v4 % 0xAA)];
  }
  if (a3 == v7) {
    unint64_t v8 = 0;
  }
  else {
    unint64_t v8 = 170 * ((char **)a2 - v6)
  }
       - 0x5555555555555555 * ((uint64_t)&a3[-*a2] >> 3)
       + 0x5555555555555555 * ((v7 - *v6) >> 3);
  v27[0].n128_u64[0] = v5 + 8 * (v4 / 0xAA);
  v27[0].n128_u64[1] = (unint64_t)v7;
  sub_1000D9CF8(v27, v8);
  uint64_t v9 = a1[2].i64[1];
  int64_t v10 = v27[0].n128_u64[1] - *(void *)v27[0].n128_u64[0];
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 3);
  if (v8 <= (unint64_t)(v9 - 1) >> 1)
  {
    if (v10 < -23)
    {
      uint64_t v15 = (void *)(v27[0].n128_u64[0] - 8 * ((168 - v11) / 0xAA));
      unint64_t v16 = (char *)(*v15 + 24 * (170 * ((168 - v11) / 0xAA) - (168 - v11)) + 4056);
    }
    else
    {
      uint64_t v15 = (void *)(v27[0].n128_u64[0] + 8 * ((v11 + 1) / 0xAA));
      unint64_t v16 = (char *)(*v15 + 24 * ((v11 + 1) % 0xAA));
    }
    sub_100A65F10(v6, v7, (char **)v27[0].n128_u64[0], (char *)v27[0].n128_u64[1], v15, v16, v27);
    a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_101D0A740);
    sub_10041FD7C((uint64_t)a1, 1);
  }
  else
  {
    if (v10 < -23)
    {
      unint64_t v17 = 168 - v11;
      float v13 = (void *)(v27[0].n128_u64[0] - 8 * (v17 / 0xAA));
      float v14 = (unsigned char *)(*v13 + 24 * (170 * (v17 / 0xAA) - v17) + 4056);
    }
    else
    {
      unint64_t v12 = v11 + 1;
      float v13 = (void *)(v27[0].n128_u64[0] + 8 * (v12 / 0xAA));
      float v14 = (unsigned char *)(*v13 + 24 * (v12 % 0xAA));
    }
    unint64_t v18 = a1[2].i64[0] + v9;
    uint64_t v19 = a1->i64[1];
    int v20 = (unsigned char **)(v19 + 8 * (v18 / 0xAA));
    if (a1[1].i64[0] == v19) {
      float v21 = 0;
    }
    else {
      float v21 = &(*v20)[24 * (v18 % 0xAA)];
    }
    sub_100A660D0(v13, v14, v20, v21, (uint64_t)v27);
    --a1[2].i64[1];
    sub_10047399C(a1, 1);
  }
  unint64_t v22 = a1[2].u64[0];
  uint64_t v23 = a1->i64[1];
  float v24 = (void *)(v23 + 8 * (v22 / 0xAA));
  if (a1[1].i64[0] == v23) {
    unint64_t v25 = 0;
  }
  else {
    unint64_t v25 = *v24 + 24 * (v22 % 0xAA);
  }
  v27[0].n128_u64[0] = (unint64_t)v24;
  v27[0].n128_u64[1] = v25;
  sub_1000D9CF8(v27, v8);
  return v27[0].n128_u64[0];
}

float sub_100A6563C(float a1, float a2, uint64_t a3, uint64_t a4)
{
  int v4 = vcvtms_s32_f32(a1);
  signed int v5 = vcvtps_s32_f32(a2);
  double v6 = *(float *)(a4 + 4 * v4);
  if (v4 < v5)
  {
    uint64_t v7 = v5;
    int v8 = v4 + 1;
    uint64_t v9 = v7 - v4;
    int64_t v10 = (float *)(a4 + 4 * v4 + 4);
    double v11 = *(float *)(a4 + 4 * v4);
    do
    {
      float v12 = *v10++;
      double v13 = v12;
      if (v11 < v12)
      {
        int v4 = v8;
        double v6 = v13;
        double v11 = v13;
      }
      ++v8;
      --v9;
    }
    while (v9);
  }
  float v14 = (float)v4;
  float v15 = (float)v4 + -0.5;
  if (v15 <= a1) {
    float v15 = a1;
  }
  if ((float)(v14 + 0.5) >= a2) {
    float v16 = a2;
  }
  else {
    float v16 = v14 + 0.5;
  }
  signed int v17 = vcvtmd_s64_f64(v15 * 0.5);
  signed int v18 = vcvtpd_s64_f64(v16 * 0.5);
  double v19 = *(float *)(a4 + 4 * v17);
  if (v17 < v18)
  {
    uint64_t v20 = v17;
    uint64_t v21 = v18 - (uint64_t)v17;
    unint64_t v22 = (float *)(a4 + 4 * v20 + 4);
    double v23 = v19;
    do
    {
      float v24 = *v22++;
      double v25 = v24;
      if (v23 < v24)
      {
        double v19 = v25;
        double v23 = v25;
      }
      --v21;
    }
    while (v21);
  }
  int v26 = vcvtms_s32_f32(v15 + v15);
  signed int v27 = vcvtps_s32_f32(v16 + v16);
  double v28 = *(float *)(a4 + 4 * v26);
  if (v26 < v27)
  {
    uint64_t v29 = v27;
    int v30 = v26 + 1;
    uint64_t v31 = v29 - v26;
    float v32 = (float *)(a4 + 4 * v26 + 4);
    double v33 = *(float *)(a4 + 4 * v26);
    do
    {
      float v34 = *v32++;
      double v35 = v34;
      if (v33 < v34)
      {
        int v26 = v30;
        double v28 = v35;
        double v33 = v35;
      }
      ++v30;
      --v31;
    }
    while (v31);
  }
  float v36 = (float)((float)v26 + -0.5) * 0.5;
  if (v15 >= v36) {
    float v36 = v15;
  }
  if ((float)((float)((float)v26 + 0.5) * 0.5) < v16) {
    float v16 = (float)((float)v26 + 0.5) * 0.5;
  }
  int v37 = vcvtms_s32_f32(v36 * 3.0);
  signed int v38 = vcvtps_s32_f32(v16 * 3.0);
  double v39 = *(float *)(a4 + 4 * v37);
  if (v37 < v38)
  {
    uint64_t v40 = v38;
    int v41 = v37 + 1;
    uint64_t v42 = v40 - v37;
    float v43 = (float *)(a4 + 4 * v37 + 4);
    double v44 = *(float *)(a4 + 4 * v37);
    do
    {
      float v45 = *v43++;
      double v46 = v45;
      if (v44 < v45)
      {
        int v37 = v41;
        double v39 = v46;
        double v44 = v46;
      }
      ++v41;
      --v42;
    }
    while (v42);
  }
  float v47 = (float)((float)v37 + -0.5) / 3.0;
  if (v36 >= v47) {
    float v47 = v36;
  }
  if ((float)((float)((float)v37 + 0.5) / 3.0) < v16) {
    float v16 = (float)((float)v37 + 0.5) / 3.0;
  }
  signed int v48 = vcvtmd_s64_f64(v47 * 1.5);
  signed int v49 = vcvtpd_s64_f64(v16 * 1.5);
  double v50 = *(float *)(a4 + 4 * v48);
  if (v48 < v49)
  {
    uint64_t v51 = v48;
    uint64_t v52 = v49 - (uint64_t)v48;
    int v53 = (float *)(a4 + 4 * v51 + 4);
    double v54 = v50;
    do
    {
      float v55 = *v53++;
      double v56 = v55;
      if (v54 < v55)
      {
        double v50 = v56;
        double v54 = v56;
      }
      --v52;
    }
    while (v52);
  }
  return v6 + v19 + v28 + v39 + v50;
}

void sub_100A658B0(id a1)
{
  off_102419358 = os_log_create("com.apple.locationd.Motion", "MovementDisorder");
}

void sub_100A658E0(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    double v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    int v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)int v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      float v34 = (char *)sub_1000DA54C(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      signed int v38 = (uint64_t *)a1[1];
      int v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        int v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    int v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    double v44 = (void *)a1[1];
    int v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      float v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      double v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      signed int v48 = (uint64_t *)a1[1];
      int v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        int v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      float v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        int v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  double v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  int v53 = operator new(0xFF0uLL);
  sub_1000DA434(&v54, &v53);
  signed int v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100A65BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100A65BF8(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    double v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    int v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)int v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      float v34 = (char *)sub_1000DA54C(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      signed int v38 = (uint64_t *)a1[1];
      int v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        int v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    int v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    double v44 = (void *)a1[1];
    int v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      float v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      double v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      signed int v48 = (uint64_t *)a1[1];
      int v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        int v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      float v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        int v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  double v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  int v53 = operator new(0xFF0uLL);
  sub_1000DA434(&v54, &v53);
  signed int v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100A65EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 sub_100A65F10@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    double v19 = a2;
    uint64_t v18 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
  }
  else
  {
    uint64_t v13 = a3 - 1;
    uint64_t v12 = *a3;
    BOOL v14 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_100A65FE0(v12, v14, v15, v16, &v21);
      uint64_t v16 = (char *)v22.n128_u64[1];
      uint64_t v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      uint64_t v17 = *v13--;
      uint64_t v12 = v17;
      BOOL v14 = v17 + 4080;
    }
    uint64_t v18 = *a1 + 4080;
    double v19 = a2;
  }
  sub_100A65FE0(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_100A65FE0@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  double v6 = a3;
  if (a1 == a2)
  {
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = *a3;
    uint64_t v11 = a2;
    while (1)
    {
      int64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&a4[-v10] >> 3);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - a1) >> 3)) < v12) {
        int64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v11 - a1) >> 3);
      }
      v11 -= 24 * v12;
      a4 -= 24 * v12;
      if (v12) {
        __n128 result = memmove(a4, v11, 24 * v12 - 4);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v10 = v14;
      a4 = (char *)(v14 + 4080);
    }
    if ((char *)(*v6 + 4080) == a4)
    {
      uint64_t v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_100A660D0(void *a1, unsigned char *a2, unsigned char **a3, unsigned char *a4, uint64_t a5)
{
  uint64_t v7 = *(void ***)a5;
  int v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (double i = (unsigned char *)(*a1 + 4080); ; double i = v12 + 4080)
    {
      sub_100A66164(a2, v8, i, v7, &v14);
      int v8 = (char *)*((void *)&v15 + 1);
      uint64_t v7 = (void **)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v8;
      if (v10 == a3) {
        break;
      }
      int64_t v12 = (unsigned char *)*v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_100A66164(a2, v8, a4, v7, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_100A66164@<X0>(unsigned char *__src@<X1>, char *__dst@<X4>, unsigned char *a3@<X2>, void **a4@<X3>, void *a5@<X8>)
{
  double v6 = a4;
  uint64_t v7 = __src;
  if (__src == a3)
  {
    uint64_t v9 = __src;
  }
  else
  {
    uint64_t v9 = a3;
    double v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      int64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - __dst + 4080) >> 3);
      unint64_t v12 = (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v9 - v7) >> 3)) >= v11 ? v11 : 0xAAAAAAAAAAAAAAABLL * ((v9 - v7) >> 3);
      if (v12) {
        double result = memmove(__dst, v7, 24 * v12 - 4);
      }
      v7 += 24 * v12;
      if (v7 == v9) {
        break;
      }
      uint64_t v14 = (char *)*v6++;
      uint64_t v10 = v14;
      __dst = v14;
    }
    __dst += 24 * v12;
    if ((char *)*(v6 - 1) + 4080 == __dst) {
      __dst = (char *)*v6;
    }
    else {
      --v6;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

uint64_t sub_100A66258()
{
  float v0 = sub_100D6A9FC(25, 0x80uLL, 1.0);
  dword_10247FA78 = sub_100D6A824(v0);
  float v1 = sub_100D6A9FC(25, 0x80uLL, 3.0);
  dword_10247FA7C = sub_100D6A824(v1);
  float v2 = sub_100D6A9FC(25, 0x80uLL, 0.25);
  dword_10247FA80 = sub_100D6A824(v2);
  float v3 = sub_100D6A9FC(25, 0x80uLL, 7.25);
  uint64_t result = sub_100D6A824(v3);
  dword_10247FA84 = result;
  return result;
}

void *sub_100A662DC(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t result = (void *)sub_100054C14(a1, a2, a3, a4, a5);
  void *result = off_1022DB1C8;
  result[6] = 0;
  result[7] = 0;
  return result;
}

uint64_t sub_100A66314(void *a1)
{
  *a1 = off_1022DB1C8;
  uint64_t v2 = a1[6];
  a1[6] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[7];
  a1[7] = 0;
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    uint64_t v4 = a1[7];
    a1[7] = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  uint64_t v5 = a1[6];
  a1[6] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  return sub_100029A7C((uint64_t)a1);
}

void sub_100A66428(void *a1)
{
  sub_100A66314(a1);

  operator delete();
}

void *sub_100A66460@<X0>(uint64_t a1@<X8>)
{
  v5[0] = off_1022DB290;
  v5[1] = sub_100A66618;
  _OWORD v5[2] = 0;
  v5[3] = v5;
  sub_100134750(v6, "kCLConnectionMessageSidebandOverride");
  sub_100A672B0((uint64_t)&v7, (uint64_t)v5);
  v4[0] = off_1022DB290;
  v4[1] = sub_100A669C4;
  _DWORD v4[2] = 0;
  unsigned __int8 v4[3] = v4;
  sub_100134750(v8, "kCLConnectionMessageSidebandSensorFusionEnable");
  sub_100A672B0((uint64_t)v9, (uint64_t)v4);
  sub_100A675A8(a1, (unsigned __int8 *)v6, 2);
  for (uint64_t i = 0; i != -14; i -= 7)
  {
    sub_100A67524(&v9[i * 8]);
    if (SHIBYTE(v8[i + 2]) < 0) {
      operator delete((void *)v8[i]);
    }
  }
  sub_100A67524(v4);
  return sub_100A67524(v5);
}

void sub_100A665B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  for (uint64_t i = 56; i != -56; i -= 56)
    sub_100A66FF0(v2 + i);
  sub_100A67524((uint64_t *)va);
  sub_100A67524(va1);
  _Unwind_Resume(a1);
}

void sub_100A66618(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_10009C834(a1);
  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  id v6 = [Dictionary objectForKeyedSubscript:CMOverrideSidebandOverride];
  id v7 = [Dictionary objectForKeyedSubscript:CMStateSidebandState];
  uint64_t v8 = v7;
  if (v6) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022DB240);
    }
    uint64_t v10 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Invalid message recieved from framework.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022DB240);
      }
      __int16 v17 = 0;
      long long v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLSidebandSubscription::handleMessageSidebandOverride(std::shared_ptr<CLConnectionMessage>)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  uint64_t v11 = sub_1000D2E34(0);
  if ([v8 unsignedIntValue] > 8)
  {
    uint64_t v12 = 4;
LABEL_19:
    sub_100A6702C(a1, v12);
    goto LABEL_20;
  }
  if (!v11 || ((*(uint64_t (**)(uint64_t))(*(void *)v11 + 80))(v11) & 1) == 0)
  {
    uint64_t v12 = 2;
    goto LABEL_19;
  }
  unsigned __int8 v13 = [v6 BOOLValue];
  uint64_t v14 = *(void *)(a1 + 48);
  if (v13)
  {
    if (!v14)
    {
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      void v16[2] = sub_100A671F0;
      v16[3] = &unk_1022DB1F0;
      v16[4] = v8;
      v16[5] = a1;
      (*(void (**)(uint64_t, void *))(*(void *)v11 + 88))(v11, v16);
      goto LABEL_20;
    }
    (*(void (**)(uint64_t, id))(*(void *)v14 + 16))(v14, [v8 unsignedIntValue]);
  }
  else
  {
    *(void *)(a1 + 48) = 0;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
  }
  sub_100A6702C(a1, 0);
LABEL_20:
}

void sub_100A66988(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100A669C4(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  id v6 = [Dictionary objectForKeyedSubscript:CMSidebandSensorFusionEnable];
  id v7 = [Dictionary objectForKeyedSubscript:CMSidebandSensorFusionLatency];
  id v8 = [Dictionary objectForKeyedSubscript:CMSidebandSensorFusionSnoop];
  BOOL v9 = v8;
  if (v6) {
    BOOL v10 = v7 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10 && v8 != 0)
  {
    if (([v6 BOOLValue] & 1) != 0
      || ([v7 BOOLValue] & 1) != 0
      || [v9 BOOLValue])
    {
      uint64_t v14 = *(void *)(a1 + 56);
      if (!v14)
      {
        uint64_t v15 = sub_1000D2E34(0);
        if (v15)
        {
          (*(void (**)(uint8_t *__return_ptr))(*(void *)v15 + 136))(buf);
          uint64_t v16 = *(void *)buf;
          *(void *)uint64_t buf = 0;
          uint64_t v17 = *(void *)(a1 + 56);
          *(void *)(a1 + 56) = v16;
          if (v17)
          {
            (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
            uint64_t v18 = *(void *)buf;
            *(void *)uint64_t buf = 0;
            if (v18) {
              (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
            }
          }
        }
        uint64_t v14 = *(void *)(a1 + 56);
        if (!v14)
        {
          if (qword_102419080 != -1) {
            dispatch_once(&qword_102419080, &stru_1022DB260);
          }
          uint64_t v21 = qword_102419088;
          if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v22 = [v6 BOOLValue];
            unsigned int v23 = [v9 BOOLValue];
            unsigned int v24 = [v7 BOOLValue];
            *(_DWORD *)uint64_t buf = 67240960;
            *(_DWORD *)&uint8_t buf[4] = v22;
            __int16 v37 = 1026;
            unsigned int v38 = v23;
            __int16 v39 = 1026;
            unsigned int v40 = v24;
            __int16 v41 = 1026;
            int v42 = 0;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "[SidebandSensorFusion] Request failed,enabled,%{public}d,snoop,%{public}d,latency,%{public}d,success,%{public}d", buf, 0x1Au);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419080 != -1) {
              dispatch_once(&qword_102419080, &stru_1022DB260);
            }
            int v28 = 67240960;
            unsigned int v29 = [v6 BOOLValue];
            __int16 v30 = 1026;
            unsigned int v31 = [v9 BOOLValue];
            __int16 v32 = 1026;
            unsigned int v33 = [v7 BOOLValue];
            __int16 v34 = 1026;
            int v35 = 0;
            unint64_t v25 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLSidebandSubscription::handleMessageSidebandSensorFusionEnable(std::shared_ptr<CLConnectionMessage>)", "%s\n", v25);
            if (v25 != (char *)buf) {
              free(v25);
            }
          }
          uint64_t v19 = 0;
          goto LABEL_29;
        }
      }
      (*(void (**)(uint64_t, id))(*(void *)v14 + 16))(v14, [v6 BOOLValue]);
      (*(void (**)(void, id))(**(void **)(a1 + 56) + 32))(*(void *)(a1 + 56), [v9 BOOLValue]);
      (*(void (**)(void, id))(**(void **)(a1 + 56) + 24))(*(void *)(a1 + 56), [v7 BOOLValue]);
    }
    else
    {
      uint64_t v20 = *(void *)(a1 + 56);
      *(void *)(a1 + 56) = 0;
      if (v20) {
        (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
      }
    }
    uint64_t v19 = 1;
LABEL_29:
    uint64_t v26 = CMSidebandSensorFusionSuccess;
    signed int v27 = +[NSNumber numberWithBool:v19];
    +[NSDictionary dictionaryWithObjects:&v27 forKeys:&v26 count:1];
    CLConnectionMessage::sendReply();
    goto LABEL_30;
  }
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_1022DB260);
  }
  uint64_t v12 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "[SidebandSensorFusion] Wrong parameters were passed!", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022DB260);
    }
    LOWORD(v28) = 0;
    unsigned __int8 v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLSidebandSubscription::handleMessageSidebandSensorFusionEnable(std::shared_ptr<CLConnectionMessage>)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
LABEL_30:
}

void sub_100A66F9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100A66FF0(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100A6702C(uint64_t a1, uint64_t a2)
{
  id v4 = [objc_msgSend(*(id *)(a1 + 8), "silo") queue];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _OWORD v5[2] = sub_100A670B4;
  v5[3] = &unk_1022B8660;
  void v5[4] = a1;
  void v5[5] = a2;
  dispatch_async(v4, v5);
}

uint64_t sub_100A670B4(uint64_t a1)
{
  uint64_t v3 = CMOverrideResult;
  uint64_t v1 = *(void *)(a1 + 32);
  id v4 = +[NSNumber numberWithInteger:*(void *)(a1 + 40)];
  +[NSDictionary dictionaryWithObjects:&v4 forKeys:&v3 count:1];
  sub_100A6716C(v1);
  return sub_10009C834(v1);
}

void sub_100A6716C(uint64_t a1)
{
  sub_1000E9420(&off_1022DB310, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100A671D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A671F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(void *)(v3 + 48);
  *(void *)(v3 + 48) = v4;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    uint64_t v4 = *(void *)(v3 + 48);
  }
  if (v4)
  {
    (*(void (**)(uint64_t, id))(*(void *)v4 + 16))(v4, [*(id *)(a1 + 32) unsignedIntValue]);
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 1;
  }

  sub_100A6702C(v3, v6);
}

uint64_t sub_100A672B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void sub_100A67330(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_100A67360(id a1)
{
  qword_102419088 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

__n128 sub_100A67390(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_1022DB290;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100A673DC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022DB290;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100A6740C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_100A67414(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100A67454()
{
}

void sub_100A67460(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v5 = *(void (**)(void *, uint64_t *))a1;
  uint64_t v6 = *(void *)(a1 + 8);
  id v7 = (void *)(a2 + (v6 >> 1));
  if (v6) {
    uint64_t v5 = *(void (**)(void *, uint64_t *))(*v7 + v5);
  }
  uint64_t v8 = v3;
  BOOL v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v5(v7, &v8);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (v4) {
    sub_1000DB0A0(v4);
  }
}

void sub_100A67500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100A67524(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100A675A8(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_100A67624(a1, a2, (long long *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_100A67610(_Unwind_Exception *a1)
{
  sub_100A67AD8(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100A67624(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  id v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unsigned __int8 v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_100A678A8(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  unsigned int v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *unsigned int v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_100A67A30((uint64_t)v25, 0);
  return i;
}

void sub_100A67890(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100A67A30((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_100A678A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  __n128 result = sub_100A67920(v8 + 2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_100A67908(_Unwind_Exception *a1)
{
  sub_100A67A30(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_100A67920(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100A67998((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100A6797C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A67998(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_100A67A30(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100A67A88((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void sub_100A67A88(uint64_t a1)
{
  sub_100A67524((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_100A67AD8(uint64_t a1)
{
  sub_100A67B14(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100A67B14(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100A67A88((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_100A67B58(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  if (v7) {
    sub_1000DB0A0(v7);
  }
  long long v8 = *a3;
  long long v9 = a3[1];
  long long v10 = a3[2];
  *(_OWORD *)(a1 + 172) = *(long long *)((char *)a3 + 44);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  return 1;
}

uint64_t sub_100A67BBC(void *a1)
{
  a1[8] = a1[7];
  a1[11] = a1[10];
  a1[14] = a1[13];
  return 1;
}

uint64_t sub_100A67BDC(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v3 = v2;
  if (**(void **)(v2 + 48) != *(void *)(*(void *)(v2 + 48) + 8))
  {
    uint64_t v4 = v1;
    *(void *)&long long v106 = 0;
    uint64_t v107 = 26;
    *((void *)&v106 + 1) = *(void *)(v2 + 24);
    uuid_copy(dst, (const unsigned __int8 *)v2);
    uint64_t v5 = 0;
    *(void *)&long long v106 = *(void *)(v3 + 16);
    uint64_t v107 = *(void *)(v3 + 32);
    do
    {
      uint64_t v6 = &__src[v5];
      _DWORD *v6 = 0;
      *((void *)v6 + 7) = 0;
      v6[16] = 0;
      *((void *)v6 + 1) = 0;
      *((void *)v6 + 2) = 0;
      v6[6] = 0;
      *((void *)v6 + 4) = 0;
      *((void *)v6 + 5) = 0;
      v6[12] = 0;
      *((void *)v6 + 10) = 0;
      *((void *)v6 + 11) = 0;
      v5 += 24;
      *((void *)v6 + 9) = 0;
    }
    while (v5 != 336);
    for (uint64_t i = 0; i != 1344; i += 96)
    {
      long long v8 = &v82[i];
      *(_DWORD *)long long v8 = 0;
      *((void *)v8 + 7) = 0;
      *((_DWORD *)v8 + 16) = 0;
      *((void *)v8 + 1) = 0;
      *((void *)v8 + 2) = 0;
      *((_DWORD *)v8 + 6) = 0;
      *((void *)v8 + 4) = 0;
      *((void *)v8 + 5) = 0;
      *((_DWORD *)v8 + 12) = 0;
      *((void *)v8 + 10) = 0;
      *((void *)v8 + 11) = 0;
      *((void *)v8 + 9) = 0;
    }
    for (j = *(float **)(v4 + 32); j; j = *(float **)j)
    {
      uint64_t v10 = *((int *)j + 4);
      sub_100A68490(v4, v3, (uint64_t)buf, (float)(j[5] * 60.0));
      long long v11 = v94;
      unint64_t v12 = &__src[24 * v10];
      _DWORD v12[2] = *(_OWORD *)&buf[32];
      void v12[3] = v11;
      long long v13 = v96;
      v12[4] = v95;
      void v12[5] = v13;
      long long v14 = *(_OWORD *)&buf[16];
      _OWORD *v12 = *(_OWORD *)buf;
      v12[1] = v14;
      unint64_t v15 = &v82[96 * v10];
      long long v16 = v100;
      v15[2] = v99;
      v15[3] = v16;
      long long v17 = v102;
      v15[4] = v101;
      v15[5] = v17;
      long long v18 = v98;
      _OWORD *v15 = v97;
      v15[1] = v18;
    }
    unint64_t v19 = *(void *)(v4 + 120);
    unint64_t v20 = *(void *)(v4 + 112);
    if (v20 >= v19)
    {
      uint64_t v32 = *(void *)(v4 + 104);
      unint64_t v33 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v20 - v32) >> 3);
      unint64_t v34 = v33 + 1;
      if (v33 + 1 > 0x666666666666666) {
        sub_1001D7FD4();
      }
      unint64_t v35 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v32) >> 3);
      if (2 * v35 > v34) {
        unint64_t v34 = 2 * v35;
      }
      if (v35 >= 0x333333333333333) {
        unint64_t v36 = 0x666666666666666;
      }
      else {
        unint64_t v36 = v34;
      }
      if (v36) {
        __int16 v37 = (char *)sub_1002E5328(v4 + 120, v36);
      }
      else {
        __int16 v37 = 0;
      }
      unsigned int v38 = &v37[40 * v33];
      __int16 v39 = &v37[40 * v36];
      long long v40 = *(_OWORD *)dst;
      long long v41 = v106;
      *((void *)v38 + 4) = v107;
      *(_OWORD *)unsigned int v38 = v40;
      *((_OWORD *)v38 + 1) = v41;
      unint64_t v23 = v38 + 40;
      float v43 = *(char **)(v4 + 104);
      int v42 = *(char **)(v4 + 112);
      if (v42 != v43)
      {
        do
        {
          long long v44 = *(_OWORD *)(v42 - 40);
          long long v45 = *(_OWORD *)(v42 - 24);
          *((void *)v38 - 1) = *((void *)v42 - 1);
          *(_OWORD *)(v38 - 24) = v45;
          *(_OWORD *)(v38 - 40) = v44;
          v38 -= 40;
          v42 -= 40;
        }
        while (v42 != v43);
        int v42 = *(char **)(v4 + 104);
      }
      *(void *)(v4 + 104) = v38;
      *(void *)(v4 + 112) = v23;
      *(void *)(v4 + 120) = v39;
      if (v42) {
        operator delete(v42);
      }
    }
    else
    {
      long long v21 = *(_OWORD *)dst;
      long long v22 = v106;
      *(void *)(v20 + 32) = v107;
      *(_OWORD *)unint64_t v20 = v21;
      *(_OWORD *)(v20 + 16) = v22;
      unint64_t v23 = (char *)(v20 + 40);
    }
    unint64_t v46 = *(void *)(v4 + 72);
    *(void *)(v4 + 112) = v23;
    unint64_t v47 = *(void *)(v4 + 64);
    if (v47 >= v46)
    {
      uint64_t v49 = *(void *)(v4 + 56);
      unint64_t v50 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v47 - v49) >> 6);
      if (v50 + 1 > 0x30C30C30C30C30) {
        sub_1001D7FD4();
      }
      unint64_t v51 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v46 - v49) >> 6);
      uint64_t v52 = 2 * v51;
      if (2 * v51 <= v50 + 1) {
        uint64_t v52 = v50 + 1;
      }
      if (v51 >= 0x18618618618618) {
        unint64_t v53 = 0x30C30C30C30C30;
      }
      else {
        unint64_t v53 = v52;
      }
      if (v53) {
        long long v54 = (char *)sub_100A68A7C(v4 + 72, v53);
      }
      else {
        long long v54 = 0;
      }
      long long v55 = &v54[1344 * v50];
      double v56 = &v54[1344 * v53];
      memcpy(v55, __src, 0x540uLL);
      signed int v48 = v55 + 1344;
      char v58 = *(char **)(v4 + 56);
      int v57 = *(char **)(v4 + 64);
      if (v57 != v58)
      {
        do
        {
          v57 -= 1344;
          v55 -= 1344;
          memcpy(v55, v57, 0x540uLL);
        }
        while (v57 != v58);
        int v57 = *(char **)(v4 + 56);
      }
      *(void *)(v4 + 56) = v55;
      *(void *)(v4 + 64) = v48;
      *(void *)(v4 + 72) = v56;
      if (v57) {
        operator delete(v57);
      }
    }
    else
    {
      memcpy(*(void **)(v4 + 64), __src, 0x540uLL);
      signed int v48 = (char *)(v47 + 1344);
    }
    unint64_t v59 = *(void *)(v4 + 96);
    *(void *)(v4 + 64) = v48;
    unint64_t v60 = *(void *)(v4 + 88);
    if (v60 >= v59)
    {
      uint64_t v62 = *(void *)(v4 + 80);
      unint64_t v63 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v60 - v62) >> 6);
      if (v63 + 1 > 0x30C30C30C30C30) {
        sub_1001D7FD4();
      }
      unint64_t v64 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v59 - v62) >> 6);
      uint64_t v65 = 2 * v64;
      if (2 * v64 <= v63 + 1) {
        uint64_t v65 = v63 + 1;
      }
      if (v64 >= 0x18618618618618) {
        unint64_t v66 = 0x30C30C30C30C30;
      }
      else {
        unint64_t v66 = v65;
      }
      if (v66) {
        NSUInteger v67 = (char *)sub_100A68A7C(v4 + 96, v66);
      }
      else {
        NSUInteger v67 = 0;
      }
      CFStringRef v68 = &v67[1344 * v63];
      NSUInteger v69 = &v67[1344 * v66];
      memcpy(v68, v82, 0x540uLL);
      NSUInteger v61 = v68 + 1344;
      NSUInteger v71 = *(char **)(v4 + 80);
      CFStringRef v70 = *(char **)(v4 + 88);
      if (v70 != v71)
      {
        do
        {
          v70 -= 1344;
          v68 -= 1344;
          memcpy(v68, v70, 0x540uLL);
        }
        while (v70 != v71);
        CFStringRef v70 = *(char **)(v4 + 80);
      }
      *(void *)(v4 + 80) = v68;
      *(void *)(v4 + 88) = v61;
      *(void *)(v4 + 96) = v69;
      if (v70) {
        operator delete(v70);
      }
    }
    else
    {
      memcpy(*(void **)(v4 + 88), v82, 0x540uLL);
      NSUInteger v61 = (char *)(v60 + 1344);
    }
    *(void *)(v4 + 88) = v61;
    memset(out, 0, 37);
    uuid_unparse((const unsigned __int8 *)v3, out);
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_1022DB318);
    }
    CFStringRef v72 = qword_1024192F8;
    if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v73 = *(void *)(v3 + 16);
      uint64_t v74 = *(void *)(v3 + 24);
      uint64_t v75 = *(void *)(v3 + 32);
      uint64_t v76 = (uint64_t)(*(void *)(*(void *)(v3 + 48) + 8) - **(void **)(v3 + 48)) >> 6;
      *(_DWORD *)uint64_t buf = 134219010;
      *(void *)&uint8_t buf[4] = v73;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v74;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = v75;
      *(_WORD *)&unsigned char buf[28] = 2048;
      *(void *)&buf[30] = v76;
      *(_WORD *)&buf[38] = 2080;
      *(void *)&buf[40] = out;
      _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEBUG, "CLCyclingFTPBoutStatsGenerator using session from, %f, to %f, workout_type, %d, size, %lu, session_id, %s", buf, 0x30u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_1022DB318);
    }
    uint64_t v78 = *(void *)(v3 + 16);
    uint64_t v79 = *(void *)(v3 + 24);
    uint64_t v80 = *(void *)(v3 + 32);
    uint64_t v81 = (uint64_t)(*(void *)(*(void *)(v3 + 48) + 8) - **(void **)(v3 + 48)) >> 6;
    int v83 = 134219010;
    uint64_t v84 = v78;
    __int16 v85 = 2048;
    uint64_t v86 = v79;
    __int16 v87 = 1024;
    int v88 = v80;
    __int16 v89 = 2048;
    uint64_t v90 = v81;
    __int16 v91 = 2080;
    int v92 = out;
    unsigned int v31 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCyclingFTPBoutStatsGenerator::processSession(const CLCyclingFTPHistory::Session &)", "%s\n", v31);
LABEL_73:
    if (v31 != buf) {
      free(v31);
    }
    return 1;
  }
  if (qword_1024192F0 != -1) {
    dispatch_once(&qword_1024192F0, &stru_1022DB318);
  }
  unsigned int v24 = qword_1024192F8;
  if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v25 = *(void *)(v3 + 16);
    uint64_t v26 = *(void *)(v3 + 24);
    uint64_t v27 = *(void *)(v3 + 32);
    *(_DWORD *)uint64_t buf = 134218496;
    *(void *)&uint8_t buf[4] = v25;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v26;
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)&buf[24] = v27;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "CLCyclingFTPBoutStatsGenerator Ignoring empty session from, %f, to %f, workout_type, %d", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_1022DB318);
    }
    uint64_t v28 = *(void *)(v3 + 16);
    uint64_t v29 = *(void *)(v3 + 24);
    uint64_t v30 = *(void *)(v3 + 32);
    __src[0] = 134218496;
    *(void *)&__src[1] = v28;
    LOWORD(__src[3]) = 2048;
    *(void *)((char *)&__src[3] + 2) = v29;
    HIWORD(__src[5]) = 1024;
    __src[6] = v30;
    unsigned int v31 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCyclingFTPBoutStatsGenerator::processSession(const CLCyclingFTPHistory::Session &)", "%s\n", v31);
    goto LABEL_73;
  }
  return 1;
}

void sub_100A68490(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 56) = 0;
  *(_DWORD *)(a3 + 64) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(_DWORD *)(a3 + 48) = 0;
  *(void *)(a3 + 152) = 0;
  *(_DWORD *)(a3 + 160) = 0;
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 112) = 0;
  *(_DWORD *)(a3 + 120) = 0;
  *(void *)(a3 + 128) = 0;
  *(void *)(a3 + 136) = 0;
  *(_DWORD *)(a3 + 144) = 0;
  *(void *)(a3 + 168) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  double v5 = *(double *)(a2 + 16);
  double v6 = *(double *)(a2 + 24) - v5;
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 80) = 0;
  *(_DWORD *)(a3 + 96) = 0;
  *(void *)(a3 + 88) = 0;
  if (v6 >= a4)
  {
    int v39 = 0;
    double v46 = 0.0;
    int v47 = 0;
    double v41 = 0.0;
    int v42 = 0;
    double v43 = 0.0;
    double v44 = 0.0;
    int v45 = 0;
    double v49 = 0.0;
    uint64_t v50 = 0;
    double v48 = 0.0;
    double v40 = a4;
    long long v8 = *(uint64_t **)(a2 + 48);
    uint64_t v10 = *v8;
    uint64_t v9 = v8[1];
    uint64_t v11 = v9 - *v8;
    if (v9 != *v8)
    {
      int v12 = 0;
      int v13 = 0;
      uint64_t v14 = 0;
      int v15 = 0;
      int v16 = 0;
      int v17 = 0;
      int v18 = 0;
      double v19 = 0.0;
      double v20 = 0.0;
      unint64_t v21 = v11 >> 6;
      double v22 = 0.0;
      double v23 = 0.0;
      do
      {
        uint64_t v24 = v10 + (v14 << 6);
        uint64_t v25 = v10 + ((uint64_t)v16 << 6);
        double v26 = *(double *)(v25 + 8);
        if (*(double *)(v24 + 8) - v26 <= a4)
        {
          float v33 = *(float *)(v24 + 16);
          float v34 = *(float *)(v24 + 20);
          float v35 = *(float *)(v24 + 28);
          float v36 = *(float *)(v24 + 32);
          int v39 = ++v17;
          if (v36 >= 0.0 && v36 <= 1500.0)
          {
            double v20 = v20 + v36;
            double v41 = v20;
            int v42 = ++v13;
          }
          double v37 = v34;
          if (v37 > 0.39)
          {
            double v22 = v22 + v33;
            double v19 = v19 + v37;
            double v43 = v22;
            double v44 = v19;
            int v45 = ++v12;
          }
          if (v35 > 0.0)
          {
            double v23 = v23 + v35;
            double v46 = v23;
            int v47 = ++v18;
          }
        }
        else
        {
          uint64_t v27 = v15 - 1;
          double v48 = v26 - v5;
          double v49 = v26;
          uint64_t v50 = *(void *)(v10 + (v27 << 6) + 8);
          sub_100A6873C(a1, (uint64_t)&v39, a3);
          float v28 = *(float *)(v25 + 16);
          float v29 = *(float *)(v25 + 20);
          float v30 = *(float *)(v25 + 28);
          float v31 = *(float *)(v25 + 32);
          int v39 = --v17;
          if (v31 >= 0.0 && v31 <= 1500.0)
          {
            double v20 = v20 - v31;
            double v41 = v20;
            int v42 = --v13;
          }
          double v32 = v29;
          if (v32 > 0.39)
          {
            double v22 = v22 - v28;
            double v19 = v19 - v32;
            double v43 = v22;
            double v44 = v19;
            int v45 = --v12;
          }
          if (v30 > 0.0)
          {
            double v23 = v23 - v30;
            double v46 = v23;
            int v47 = --v18;
          }
          ++v16;
          int v15 = v27;
        }
        int v38 = v15 + 1;
        if (v21 <= v15 + 1) {
          break;
        }
        uint64_t v14 = v38;
        ++v15;
      }
      while (v38 >= v16);
    }
    sub_100A6873C(a1, (uint64_t)&v39, a3);
  }
}

void *sub_100A68730@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_100A68830(a2, a1 + 16);
}

__n128 sub_100A6873C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  result.n128_u64[0] = 0x40047AE147AE147BLL;
  int v4 = (int)(*(double *)(a2 + 8) / 2.56);
  if (*(_DWORD *)a2 > v4) {
    int v4 = *(_DWORD *)a2;
  }
  double v5 = (double)v4;
  if ((double)v4 * 0.75 <= (double)*(int *)(a2 + 24))
  {
    if (*(double *)(a2 + 16) > *(double *)(a3 + 16))
    {
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_OWORD *)(a3 + 16) = v6;
      long long v7 = *(_OWORD *)(a2 + 32);
      long long v8 = *(_OWORD *)(a2 + 48);
      long long v9 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a3 + 80) = v9;
      *(_OWORD *)(a3 + 32) = v7;
      *(_OWORD *)(a3 + 48) = v8;
      int v10 = *(_DWORD *)a2;
      if (*(_DWORD *)a2 <= (int)(*(double *)(a2 + 8) / 2.56)) {
        int v10 = (int)(*(double *)(a2 + 8) / 2.56);
      }
      double v5 = (double)v10;
    }
    result.n128_f64[0] = (double)*(int *)(a2 + 48);
    if (v5 * 0.5 <= result.n128_f64[0])
    {
      result.n128_u64[0] = *(void *)(a2 + 16);
      if (result.n128_f64[0] > *(double *)(a3 + 112))
      {
        long long v11 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a3 + 96) = *(_OWORD *)a2;
        *(_OWORD *)(a3 + 112) = v11;
        __n128 result = *(__n128 *)(a2 + 32);
        long long v12 = *(_OWORD *)(a2 + 48);
        long long v13 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a3 + 160) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a3 + 176) = v13;
        *(__n128 *)(a3 + 128) = result;
        *(_OWORD *)(a3 + 144) = v12;
      }
    }
  }
  return result;
}

void sub_100A68800(id a1)
{
  qword_1024192F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CyclingPower");
}

void *sub_100A68830(void *a1, uint64_t a2)
{
  int v4 = (void *)sub_100A68930((uint64_t)a1, a2);
  v4[5] = 0;
  v4[6] = 0;
  v4[7] = 0;
  sub_100A689A8(v4 + 5, *(const void **)(a2 + 40), *(void *)(a2 + 48), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 6));
  a1[8] = 0;
  a1[9] = 0;
  a1[10] = 0;
  sub_100A689A8(a1 + 8, *(const void **)(a2 + 64), *(void *)(a2 + 72), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 6));
  a1[11] = 0;
  a1[12] = 0;
  a1[13] = 0;
  sub_1008B7A58(a1 + 11, *(const void **)(a2 + 88), *(void *)(a2 + 96), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 3));
  return a1;
}

void sub_100A688EC(_Unwind_Exception *a1)
{
  double v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 72) = v5;
    operator delete(v5);
  }
  long long v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v6;
    operator delete(v6);
  }
  sub_1000D7D80(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100A68930(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100100330(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(int **)(a2 + 16); i; uint64_t i = *(int **)i)
    sub_10045B3D0(a1, i + 4, (void *)i + 2);
  return a1;
}

void sub_100A68990(_Unwind_Exception *a1)
{
  sub_1000D7D80(v1);
  _Unwind_Resume(a1);
}

void *sub_100A689A8(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    __n128 result = sub_100A68A24(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100A68A08(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100A68A24(void *a1, unint64_t a2)
{
  if (a2 >= 0x30C30C30C30C31) {
    sub_1001D7FD4();
  }
  __n128 result = (char *)sub_100A68A7C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[1344 * v4];
  return result;
}

void *sub_100A68A7C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x30C30C30C30C31) {
    sub_1001D7FA0();
  }
  return operator new(1344 * a2);
}

void sub_100A68AC8(char *a1, size_t a2, unint64_t a3, uint64_t (*a4)(char *, char *, __n128))
{
  if (a3)
  {
    uint64_t v7 = a1;
    uint64_t v8 = 0;
    long long v9 = &a1[a2];
    uint64_t v10 = 1;
    do
    {
      int v18 = &v16;
      v11.n128_f64[0] = __chkstk_darwin(a1);
      int v16 = (char *)&v16 - ((a2 + 15) & 0xFFFFFFFFFFFFFFF0);
      int v12 = v8;
      long long v13 = v9;
      uint64_t v14 = v10;
      uint64_t v17 = v8 + 1;
      if (v8 + 1 < a3)
      {
        do
        {
          a1 = (char *)a4(&v7[v12 * a2], v13, v11);
          if (a1) {
            int v12 = v14;
          }
          ++v14;
          v13 += a2;
        }
        while (a3 != v14);
      }
      if (v8 != v12)
      {
        int v15 = v16;
        memcpy(v16, &v7[v12 * a2], a2);
        memcpy(&v7[v12 * a2], &v7[v8 * a2], a2);
        a1 = (char *)memcpy(&v7[v8 * a2], v15, a2);
      }
      ++v10;
      v9 += a2;
      uint64_t v8 = v17;
    }
    while (v17 != a3);
  }
}

uint64_t sub_100A68C38()
{
  if (sub_100A33500()) {
    operator new();
  }
  uint64_t result = sub_10077429C();
  if (result) {
    operator new();
  }
  return result;
}

void sub_100A68CB0()
{
}

uint64_t sub_100A68CE8()
{
  if (qword_10247FAB8 != -1) {
    dispatch_once(&qword_10247FAB8, &stru_1022DB340);
  }
  return qword_10248A820;
}

void sub_100A68D30(uint64_t a1)
{
}

void sub_100A69810(_Unwind_Exception *a1)
{
  uint64_t v3 = v1[15];
  v1[15] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = v1[5];
  v1[5] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  sub_1009D1DE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100A698FC(unsigned __int8 *a1, uint64_t a2)
{
  return sub_100A6A944(a2, *a1);
}

uint64_t sub_100A6990C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_100A6AC58(a4, a2, a3);
}

uint64_t sub_100A69914()
{
  float v0 = *(uint64_t (**)(void))(*(void *)sub_1000D2E34(0) + 160);

  return v0();
}

void sub_100A69974(char *a1)
{
  if (*a1 - 2 <= 2)
  {
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DB458);
    }
    uint64_t v2 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_INFO))
    {
      char v3 = *a1;
      *(_DWORD *)uint64_t buf = 16777472;
      char v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Resetting compass on hall effect event %hhu", buf, 5u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DB458);
      }
      double v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLCompass::onKeyboardHallEffect(const CLKeyboardMotionNotifier::HallEffectData *, void *)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &stru_1022DB400);
  }
}

void sub_100A69B48(unsigned char *a1, uint64_t a2)
{
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1022DB458);
  }
  uint64_t v4 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
  {
    if (*a1) {
      double v5 = "open";
    }
    else {
      double v5 = "closed";
    }
    *(_DWORD *)uint64_t buf = 136315138;
    int v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Cover %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DB458);
    }
    if (*a1) {
      uint64_t v10 = "open";
    }
    else {
      uint64_t v10 = "closed";
    }
    int v13 = 136315138;
    uint64_t v14 = v10;
    __n128 v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLCompass::onCoverState(const BOOL *, void *)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  if (*a1)
  {
    if (*(unsigned char *)(a2 + 104))
    {
      uint64_t v6 = sub_1000D2E34(0);
      (*(void (**)(void))(*(void *)(v6 + 80) + 16))();
    }
    if (*(void *)(a2 + 56))
    {
      if (*(unsigned char *)(a2 + 48))
      {
        *(unsigned char *)(a2 + 28) = 0;
        (*(void (**)(uint64_t))(*(void *)a2 + 56))(a2);
        [*(id *)(*(void *)(a2 + 40) + 16) unregister:*(void *)(*(void *)(a2 + 40) + 8) forNotification:0];
        *(unsigned char *)(a2 + 64) = 1;
        char v7 = *(__CFRunLoopTimer **)(a2 + 56);
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        CFRunLoopTimerSetNextFireDate(v7, Current + 3.0);
      }
    }
    *(CFAbsoluteTime *)(a2 + 72) = CFAbsoluteTimeGetCurrent();
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100A6A8E8;
    block[3] = &unk_1022A3020;
    block[4] = a2;
    dispatch_async(global_queue, block);
  }
}

void sub_100A69E3C(uint64_t a1, _DWORD *a2, long long *a3, uint64_t a4)
{
  sub_1009E8E44();

  sub_100A6A7FC(a4, v7, a2, a3);
}

void *sub_100A69E8C(uint64_t a1)
{
  *(void *)a1 = off_1022DB370;
  if (*(void *)(a1 + 88))
  {
    CFRunLoopTimerInvalidate(*(CFRunLoopTimerRef *)(a1 + 56));
    CFRelease(*(CFTypeRef *)(a1 + 56));
    *(void *)(a1 + 56) = 0;
    uint64_t v2 = sub_100E66ACC();
    sub_1009D26C4(v2, 0, *(void *)(a1 + 88));
    uint64_t v3 = *(void *)(a1 + 88);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    *(void *)(a1 + 88) = 0;
  }
  if (*(void *)(a1 + 96))
  {
    uint64_t v4 = sub_100D559B0();
    sub_1009D26C4(v4, 0, *(void *)(a1 + 96));
    uint64_t v5 = *(void *)(a1 + 96);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    *(void *)(a1 + 96) = 0;
  }
  if (*(void *)(a1 + 112))
  {
    uint64_t v6 = sub_100964720();
    sub_1009D26C4(v6, 4, *(void *)(a1 + 112));
    uint64_t v7 = *(void *)(a1 + 112);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    *(void *)(a1 + 112) = 0;
  }
  uint64_t v8 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }

  return sub_1009D1DE4((void *)a1);
}

void sub_100A6A030(uint64_t a1)
{
  sub_100A69E8C(a1);

  operator delete();
}

double sub_100A6A068(uint64_t a1, int a2, double *a3)
{
  double result = 0.0;
  if (!a2)
  {
    double v5 = *a3;
    if (*a3 <= 0.0)
    {
      *(unsigned char *)(a1 + 28) = 0;
      (*(void (**)(uint64_t, double))(*(void *)a1 + 56))(a1, v5);
      [*(id *)(*(void *)(a1 + 40) + 16) unregister:*(void *)(*(void *)(a1 + 40) + 8) forNotification:0];
      *(unsigned char *)(a1 + 48) = 0;
    }
    else
    {
      sub_100E66ACC();
      if (sub_1000EB1B0() && !*(void *)(a1 + 88))
      {
        context.version = 0;
        context.info = (void *)a1;
        memset(&context.retain, 0, 24);
        CFRunLoopTimerRef v6 = CFRunLoopTimerCreate(kCFAllocatorDefault, 1.79769313e308, 1.79769313e308, 0, 0, (CFRunLoopTimerCallBack)sub_100A6A31C, &context);
        *(void *)(a1 + 56) = v6;
        if (v6)
        {
          sub_1000D3E78();
          uint64_t v7 = (__CFRunLoop *)sub_1001BEA14();
          CFRunLoopAddTimer(v7, *(CFRunLoopTimerRef *)(a1 + 56), kCFRunLoopCommonModes);
        }
        else
        {
          if (qword_1024190A0 != -1) {
            dispatch_once(&qword_1024190A0, &stru_1022DB458);
          }
          uint64_t v8 = qword_1024190A8;
          if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Could not create timer", buf, 2u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024190A0 != -1) {
              dispatch_once(&qword_1024190A0, &stru_1022DB458);
            }
            uint64_t v10 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "virtual CFTimeInterval CLCompass::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v10);
            if (v10 != (char *)buf) {
              free(v10);
            }
          }
        }
        uint64_t v9 = sub_100E66ACC();
        *(double *)(a1 + 72) = (*(double (**)(uint64_t))(*(void *)v9 + 56))(v9);
      }
      *(unsigned char *)(a1 + 48) = 1;
      if (!*(unsigned char *)(a1 + 64)) {
        sub_100A6A350(a1);
      }
    }
    return *(double *)(a1 + 32);
  }
  return result;
}

uint64_t sub_100A6A31C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 48)) {
    uint64_t result = sub_100A6A350(a2);
  }
  *(unsigned char *)(a2 + 64) = 0;
  return result;
}

uint64_t sub_100A6A350(uint64_t a1)
{
  BOOL v2 = sub_100A6A564(a1);
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1022DB458);
  }
  uint64_t v3 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
  {
    int v4 = *(unsigned __int8 *)(a1 + 83);
    *(_DWORD *)uint64_t buf = 67109376;
    BOOL v8 = v2;
    __int16 v9 = 1024;
    int v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Cover attached,%d,forced,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DB458);
    }
    CFRunLoopTimerRef v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCompass::startCompass()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  [*(id *)(*(void *)(a1 + 40) + 16) register:*(void *)(*(void *)(a1 + 40) + 8) forNotification:0 registrationInfo:0];
  return (*(uint64_t (**)(uint64_t, BOOL))(*(void *)a1 + 48))(a1, v2);
}

BOOL sub_100A6A564(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 83)) {
    return *(unsigned char *)(a1 + 84) != 0;
  }
  if (*(double *)(a1 + 72) <= 0.0) {
    return 0;
  }
  return CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 72) < 432000.0;
}

uint64_t sub_100A6A5CC(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 104);
  sub_100D559B0();
  int v3 = sub_100D569F8();
  if (*(unsigned char *)(a1 + 104))
  {
    if (v3 != 1104)
    {
      CFDictionaryRef v4 = IOServiceMatching("AppleOrionManager");
      io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v4);
      if (MatchingService)
      {
        io_object_t v6 = MatchingService;
        BOOL v7 = sub_1012D16D4(buf, MatchingService, @"IOAccessoryDigitalID", (void **)6);
        if (v13) {
          unsigned int v8 = 2;
        }
        else {
          unsigned int v8 = v2;
        }
        if (v7) {
          uint64_t v2 = v8;
        }
        else {
          uint64_t v2 = v2;
        }
        IOObjectRelease(v6);
      }
    }
  }
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1022DB458);
  }
  __int16 v9 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v13 = v2;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Keyboard coexSource,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DB458);
    }
    __n128 v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLCompass_Type::CompassCoexSource CLCompass::checkForCompassCoexSource()", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  return v2;
}

void sub_100A6A7FC(uint64_t a1, uint64_t a2, _DWORD *a3, long long *a4)
{
  long long v4 = a4[1];
  long long v13 = *a4;
  long long v14 = v4;
  long long v5 = a4[3];
  long long v15 = a4[2];
  long long v16 = v5;
  if (!*a3)
  {
    uint64_t v7 = sub_1000D3E78();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    long long v9 = v13;
    long long v10 = v14;
    long long v11 = v15;
    long long v12 = v16;
    _DWORD v8[2] = sub_100A6A8A4;
    void v8[3] = &unk_1022DB3E0;
    v8[4] = a1;
    sub_1009E8E94(v7, (uint64_t)v8);
  }
}

uint64_t sub_100A6A8A4(uint64_t a1)
{
  uint64_t v2 = *(unsigned char **)(a1 + 32);
  if (*(double *)(a1 + 96) > 0.0) {
    v2[28] = 1;
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)v2 + 72))(v2, a1 + 40);
}

uint64_t sub_100A6A8E8()
{
  float v0 = *(uint64_t (**)(void))(*(void *)sub_100E66ACC() + 48);

  return v0();
}

uint64_t sub_100A6A944(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 104) != a2)
  {
    uint64_t v3 = result;
    *(unsigned char *)(result + 104) = a2;
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DB458);
    }
    long long v4 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
    {
      long long v5 = "disconnected";
      if (a2) {
        long long v5 = "connected";
      }
      *(_DWORD *)uint64_t buf = 136315138;
      long long v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Keyboard %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DB458);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCompass::updateKeyboardState(BOOL)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &stru_1022DB420);
    uint64_t result = sub_100A6A5CC(v3);
    *(unsigned char *)(v3 + 129) = result == 2;
  }
  return result;
}

void sub_100A6AB60(id a1)
{
  uint64_t v1 = *(void (**)(void))(*(void *)(sub_1000D2E34(0) + 80) + 16);

  v1();
}

uint64_t sub_100A6ABAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 64))(a3, a1, a2);
}

void sub_100A6ABE0(id a1)
{
  uint64_t v1 = *(void (**)(void))(*(void *)(sub_1000D2E34(0) + 80) + 16);

  v1();
}

uint64_t sub_100A6AC2C()
{
  uint64_t v0 = sub_100D559B0();
  int v1 = sub_100D5699C(v0);
  if (v1 == 2) {
    return 2;
  }
  else {
    return v1 == 1;
  }
}

uint64_t sub_100A6AC58(uint64_t result, _DWORD *a2, uint64_t a3)
{
  if (*a2 == 7)
  {
    uint64_t v3 = result;
    int v4 = *(unsigned __int8 *)(a3 + 9);
    if (v4 != *(unsigned __int8 *)(result + 128))
    {
      if ((sub_1007414F8() & 1) == 0) {
        sub_101A7C864(qword_1024190A0 == -1);
      }
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DB458);
      }
      long long v5 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 67109120;
        int v9 = v4;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Resetting compass on charging event,charging,%d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1022DB458);
        }
        uint64_t v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCompass::onDaemonStatus(const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
      uint64_t v6 = sub_1000D2E34(0);
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(v6 + 80) + 16))();
      *(unsigned char *)(v3 + 128) = v4;
    }
  }
  return result;
}

void sub_100A6AE60(id a1)
{
  qword_1024190A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void sub_100A6AE90(uint64_t a1, void *a2, char a3)
{
  *(void *)a1 = *a2;
  float v4 = 1.0 / *(double *)a2;
  *(float *)(a1 + 8) = v4;
  uint64_t v5 = a1 + 8;
  *(unsigned char *)(a1 + 12) = 0;
  *(unsigned char *)(a1 + 13) = a3;
  *(void *)(a1 + 14) = 0;
  *(void *)(a1 + 30) = 0;
  *(void *)(a1 + 22) = 0;
  *(_WORD *)(a1 + 38) = 0;
  *(void *)(a1 + 40) = 0x3FF0000000000000;
  *(void *)(a1 + 48) = off_1022AD5D0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = off_1022AD5D0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  sub_100AC349C(61.056, 2.0);
  *(void *)(v5 + 368) = 0xF00000000;
  *(_DWORD *)(v5 + 376) = 15;
  float v6 = *(float *)v5;
  double v7 = *(float *)v5;
  unint64_t v8 = vcvtad_u64_f64(v7 * 0.125);
  *(void *)(v5 + 384) = off_1022AD070;
  *(void *)(v5 + 392) = v8;
  *(void *)(v5 + 400) = off_1022AD0A0;
  *(void *)(v5 + 408) = v8;
  *(_OWORD *)(v5 + 416) = 0u;
  *(_OWORD *)(v5 + 432) = 0u;
  *(_OWORD *)(v5 + 448) = 0u;
  *(void *)(v5 + 464) = 0;
  *(void *)(v5 + 472) = off_1022AD0A0;
  *(void *)(v5 + 480) = v8;
  *(_OWORD *)(v5 + 488) = 0u;
  *(_OWORD *)(v5 + 504) = 0u;
  *(_OWORD *)(v5 + 520) = 0u;
  *(void *)(v5 + 536) = 0;
  *(void *)(v5 + 544) = off_1022AD0A0;
  *(void *)(v5 + 620) = 0xBF8000003F000000;
  *(void *)(v5 + 552) = v8;
  *(_OWORD *)(v5 + 604) = 0u;
  *(_OWORD *)(v5 + 576) = 0u;
  *(_OWORD *)(v5 + 592) = 0u;
  *(_OWORD *)(v5 + 560) = 0u;
  *(_DWORD *)(v5 + 628) = -1082130432;
  *(void *)(v5 + 632) = off_1022C3DA0;
  *(_DWORD *)(v5 + 640) = 0;
  *(_OWORD *)(v5 + 648) = 0u;
  *(_OWORD *)(v5 + 664) = 0u;
  *(_OWORD *)(v5 + 680) = 0u;
  *(void *)(v5 + 704) = 0;
  *(void *)(v5 + 712) = 0;
  *(void *)(v5 + 696) = v5 + 704;
  *(void *)(v5 + 720) = off_1022C3DA0;
  *(_DWORD *)(v5 + 728) = 0;
  *(_OWORD *)(v5 + 752) = 0u;
  *(_OWORD *)(v5 + 768) = 0u;
  *(_OWORD *)(v5 + 736) = 0u;
  *(void *)(v5 + 800) = 0;
  *(void *)(v5 + 792) = 0;
  *(void *)(v5 + 784) = v5 + 792;
  unint64_t v9 = vcvtad_u64_f64(v7 * 0.05);
  *(void *)(v5 + 808) = off_1022AD070;
  *(void *)(v5 + 816) = v9;
  *(void *)(v5 + 824) = off_1022AD0A0;
  *(void *)(v5 + 832) = v9;
  *(_OWORD *)(v5 + 840) = 0u;
  *(_OWORD *)(v5 + 856) = 0u;
  *(_OWORD *)(v5 + 872) = 0u;
  *(void *)(v5 + 888) = 0;
  *(void *)(v5 + 896) = off_1022AD0A0;
  *(void *)(v5 + 904) = v9;
  *(_OWORD *)(v5 + 912) = 0u;
  *(_OWORD *)(v5 + 928) = 0u;
  *(_OWORD *)(v5 + 944) = 0u;
  *(void *)(v5 + 960) = 0;
  *(void *)(v5 + 968) = off_1022AD0A0;
  *(void *)(v5 + 976) = v9;
  *(void *)(v5 + 1032) = 0;
  *(_OWORD *)(v5 + 1016) = 0u;
  *(_OWORD *)(v5 + 1000) = 0u;
  *(_OWORD *)(v5 + 984) = 0u;
  *(void *)(v5 + 1040) = off_1022AD070;
  *(void *)(v5 + 1048) = v9;
  *(void *)(v5 + 1056) = off_1022AD0A0;
  *(void *)(v5 + 1064) = v9;
  *(void *)(v5 + 1120) = 0;
  *(_OWORD *)(v5 + 1088) = 0u;
  *(_OWORD *)(v5 + 1072) = 0u;
  *(_OWORD *)(v5 + 1104) = 0u;
  *(void *)(v5 + 1128) = off_1022AD0A0;
  *(void *)(v5 + 1136) = v9;
  *(void *)(v5 + 1192) = 0;
  *(_OWORD *)(v5 + 1176) = 0u;
  *(_OWORD *)(v5 + 1160) = 0u;
  *(_OWORD *)(v5 + 1144) = 0u;
  *(void *)(v5 + 1200) = off_1022AD0A0;
  *(void *)(v5 + 1208) = v9;
  *(void *)(v5 + 1264) = 0;
  *(_OWORD *)(v5 + 1248) = 0u;
  *(_OWORD *)(v5 + 1232) = 0u;
  *(_OWORD *)(v5 + 1216) = 0u;
  *(void *)(v5 + 1272) = off_1022AD5D0;
  *(void *)(v5 + 1280) = 0;
  *(_DWORD *)(v5 + 1288) = 0;
  *(void *)(v5 + 1296) = off_1022AD5D0;
  *(void *)(v5 + 1304) = 0;
  *(_DWORD *)(v5 + 1312) = 0;
  *(void *)(v5 + 1320) = off_1022AD5D0;
  *(void *)(v5 + 1328) = 0;
  *(_DWORD *)(v5 + 1336) = 0;
  *(void *)(v5 + 1408) = 0;
  *(_OWORD *)(v5 + 1392) = 0u;
  *(_OWORD *)(v5 + 1376) = 0u;
  *(_OWORD *)(v5 + 1344) = 0u;
  *(_OWORD *)(v5 + 1360) = 0u;
  *(void *)(v5 + 1416) = 0xBFF0000000000000;
  unint64_t v10 = vcvtad_u64_f64(v7 * 0.5);
  *(void *)(v5 + 1424) = off_1022AD0A0;
  *(void *)(v5 + 1432) = v10;
  *(void *)(v5 + 1488) = 0;
  *(_OWORD *)(v5 + 1472) = 0u;
  *(_OWORD *)(v5 + 1456) = 0u;
  *(_OWORD *)(v5 + 1440) = 0u;
  *(void *)(v5 + 1496) = off_1022AD0A0;
  *(void *)(v5 + 1504) = v10;
  *(void *)(v5 + 1560) = 0;
  *(_OWORD *)(v5 + 1544) = 0u;
  *(_OWORD *)(v5 + 1528) = 0u;
  *(_OWORD *)(v5 + 1512) = 0u;
  *(void *)(v5 + 1568) = off_1022AD0A0;
  *(void *)(v5 + 1576) = vcvtas_u32_f32(v6);
  *(void *)(v5 + 1632) = 0;
  *(_OWORD *)(v5 + 1616) = 0u;
  *(_OWORD *)(v5 + 1600) = 0u;
  *(_OWORD *)(v5 + 1584) = 0u;
  sub_100AC3D8C(v5 + 1640);
  sub_100AC3D8C(a1 + 1976);
  *(unsigned char *)(a1 + 2304) = 0;
  unint64_t v11 = vcvtad_u64_f64(*(float *)(a1 + 8) * 0.2);
  *(void *)(a1 + 2312) = off_1022AD0A0;
  *(void *)(a1 + 2320) = v11;
  *(void *)(a1 + 2376) = 0;
  *(_OWORD *)(a1 + 2328) = 0u;
  *(_OWORD *)(a1 + 2344) = 0u;
  *(_OWORD *)(a1 + 2360) = 0u;
  *(void *)(a1 + 2384) = 0x3F800000BF800000;
  if (*(unsigned char *)(a1 + 13)) {
    operator new();
  }
  operator new();
}

void sub_100A6C474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  v25[289] = a11;
  sub_1003A7340(v25 + 292);
  sub_100AC3F1C(a24);
  sub_100AC3F1C(a25);
  v25[197] = a12;
  sub_1003A7340(v25 + 200);
  v25[188] = a13;
  sub_1003A7340(v25 + 191);
  v25[179] = a14;
  sub_1003A7340(v25 + 182);
  sub_1003A73E8(a15);
  sub_1003A73E8(a16);
  sub_100A6E0A8(a22);
  sub_1003A73E8(a17);
  sub_100AC353C(a18);
  _Unwind_Resume(a1);
}

void *sub_100A6C5F0(void *a1)
{
  uint64_t v2 = a1[13];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    a1[13] = 0;
  }
  a1[289] = off_1022AD0A0;
  sub_1003A7340(a1 + 292);
  sub_100AC3F1C(a1 + 247);
  sub_100AC3F1C(a1 + 206);
  a1[197] = off_1022AD0A0;
  sub_1003A7340(a1 + 200);
  a1[188] = off_1022AD0A0;
  sub_1003A7340(a1 + 191);
  a1[179] = off_1022AD0A0;
  sub_1003A7340(a1 + 182);
  sub_1003A73E8(a1 + 131);
  sub_1003A73E8(a1 + 102);
  sub_100A6E0A8((uint64_t)(a1 + 78));
  sub_1003A73E8(a1 + 49);
  sub_100AC353C(a1 + 14);
  return a1;
}

BOOL sub_100A6C720(float32x2_t *a1, uint64_t *a2)
{
  long long v16 = off_1022AD5D0;
  uint64_t v17 = *a2;
  int v18 = *((_DWORD *)a2 + 2);
  __int32 v3 = a1[48].i32[0];
  if (v3)
  {
    a1[48].i32[0] = v3 - 1;
    if (v3 == 1) {
      a1[47].i32[0] = 0;
    }
  }
  else
  {
    sub_1001A44F4((uint64_t)&a1[51], (float *)&v17);
    sub_1001A44F4((uint64_t)&a1[60], (float *)&v17 + 1);
    sub_1001A44F4((uint64_t)&a1[69], (float *)&v18);
    unint64_t v4 = (unint64_t)a1[59];
    float v5 = 0.0;
    float v6 = 0.0;
    if (v4) {
      float v6 = a1[53].f32[0] / (float)v4;
    }
    unint64_t v7 = (unint64_t)a1[68];
    if (v7) {
      float v5 = a1[62].f32[0] / (float)v7;
    }
    unint64_t v8 = (unint64_t)a1[77];
    if (v8) {
      float v9 = a1[71].f32[0] / (float)v8;
    }
    else {
      float v9 = 0.0;
    }
    a1[161].f32[0] = v6;
    a1[161].f32[1] = v5;
    a1[162].f32[0] = v9;
    a1[164].f32[0] = v6;
    a1[164].f32[1] = v5;
    a1[165].f32[0] = v9;
    a1[167].f32[0] = v6;
    a1[167].f32[1] = v5;
    a1[168].f32[0] = v9;
    float v10 = sub_100A6C9CC((uint64_t)a1);
    if (a1[1].i8[6])
    {
      float32x2_t v11 = a1[169];
      a1[161] = vsub_f32(a1[161], v11);
      float v12 = a1[170].f32[0];
      a1[162].f32[0] = a1[162].f32[0] - v12;
      a1[164] = vsub_f32(a1[164], v11);
      a1[165].f32[0] = a1[165].f32[0] - v12;
    }
    else
    {
      float32x2_t v13 = a1[13];
      unint64_t v15 = 0xBFF0000000000000;
      (*(void (**)(float32x2_t, uint64_t (***)(), float32x2_t *, unint64_t *, float))(**(void **)&v13 + 32))(v13, &v16, a1 + 2, &v15, v10);
      ++a1[47].i32[0];
      (*(void (**)(void, float32x2_t *, uint64_t))(**(void **)&a1[13] + 48))(*(void *)&a1[13], a1 + 169, (uint64_t)&a1[170] + 4);
      (*(void (**)(void, float32x2_t *, float32x2_t *, float32x2_t *))(**(void **)&a1[13] + 56))(*(void *)&a1[13], a1 + 160, a1 + 163, a1 + 2);
      (*(void (**)(void, float32x2_t *, float32x2_t *))(**(void **)&a1[13] + 64))(*(void *)&a1[13], a1 + 166, a1 + 2);
      sub_100A6CA90((uint64_t)a1);
      if ((*(unsigned int (**)(void))(**(void **)&a1[13] + 88))(*(void *)&a1[13]))
      {
        sub_100AC4630((uint64_t)&a1[206], 0);
        sub_100AC4630((uint64_t)&a1[247], 0);
      }
    }
  }
  return v3 == 0;
}

float sub_100A6C9CC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 13))
  {
    float v9 = sqrtf((float)((float)(*(float *)(a1 + 60) * *(float *)(a1 + 60))+ (float)(*(float *)(a1 + 56) * *(float *)(a1 + 56)))+ (float)(*(float *)(a1 + 64) * *(float *)(a1 + 64)));
    sub_1001A44F4(a1 + 1576, &v9);
    uint64_t v2 = a1 + 2312;
    __int32 v3 = &v9;
  }
  else
  {
    float v8 = sqrtf((float)((float)(*(float *)(a1 + 84) * *(float *)(a1 + 84))+ (float)(*(float *)(a1 + 80) * *(float *)(a1 + 80)))+ (float)(*(float *)(a1 + 88) * *(float *)(a1 + 88)));
    sub_1001A44F4(a1 + 1432, &v8);
    unint64_t v4 = *(void *)(a1 + 1496);
    if (v4) {
      float v5 = *(float *)(a1 + 1448) / (float)v4;
    }
    else {
      float v5 = 0.0;
    }
    float v7 = (float)(v8 - v5) * (float)(v8 - v5);
    uint64_t v2 = a1 + 1504;
    __int32 v3 = &v7;
  }
  return sub_1001A44F4(v2, v3);
}

uint64_t sub_100A6CA90(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 104) + 72))(*(void *)(a1 + 104));
  if (!result) {
    return result;
  }
  if (*(unsigned char *)(a1 + 13) && *(int *)(a1 + 1364) < 4)
  {
    float v3 = sqrtf((float)((float)(*(float *)(a1 + 1292) * *(float *)(a1 + 1292))+ (float)(*(float *)(a1 + 1288) * *(float *)(a1 + 1288)))+ (float)(*(float *)(a1 + 1296) * *(float *)(a1 + 1296)));
    if (v3 > 500.0)
    {
LABEL_18:
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DB4C8);
      }
      float v12 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_INFO))
      {
        double v13 = sqrtf((float)((float)(*(float *)(a1 + 1292) * *(float *)(a1 + 1292))+ (float)(*(float *)(a1 + 1288) * *(float *)(a1 + 1288)))+ (float)(*(float *)(a1 + 1296) * *(float *)(a1 + 1296)));
        *(_DWORD *)uint64_t buf = 134217984;
        double v26 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "magnitude max threshold exceeded (%+.3f), resetting calibration", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1022DB4C8);
        }
        double v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCompassCalculator::updateInterferenceChecks()", "%s\n", v22);
        if (v22 != (char *)buf) {
          free(v22);
        }
      }
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 104) + 24))(*(void *)(a1 + 104));
      *(_DWORD *)(a1 + 384) = *(_DWORD *)(a1 + 380);
      float32x2_t v11 = &qword_101D71028;
LABEL_24:
      float v14 = *(double *)v11;
      *(float *)(a1 + 112) = v14;
      return result;
    }
    float v5 = (float *)(a1 + 1280);
    goto LABEL_27;
  }
  float v3 = sqrtf((float)((float)(*(float *)(a1 + 1292) * *(float *)(a1 + 1292))+ (float)(*(float *)(a1 + 1288) * *(float *)(a1 + 1288)))+ (float)(*(float *)(a1 + 1296) * *(float *)(a1 + 1296)));
  if (v3 >= 250.0 || v3 > 500.0) {
    goto LABEL_18;
  }
  float v5 = (float *)(a1 + 1280);
  if (*(unsigned char *)(a1 + 13))
  {
LABEL_27:
    *(float *)uint64_t buf = v3;
    sub_100AC4200(a1 + 1648, (float *)buf);
    uint64_t result = sub_100A6DF1C(a1);
    if (result)
    {
      float v15 = sub_100A6E208(v5, (float *)(a1 + 72)) * -57.2957795 + 90.0;
      *(float *)uint64_t buf = v15;
      return sub_100AC4200(a1 + 1976, (float *)buf);
    }
    return result;
  }
  *(float *)uint64_t buf = v3;
  if (sub_100AC4200(a1 + 1648, (float *)buf))
  {
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DB4C8);
    }
    float v6 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_INFO))
    {
      double v7 = sub_100AC4744(a1 + 1648);
      double v8 = sub_100AC474C(a1 + 1648);
      double v9 = *(float *)&v8;
      double v10 = sub_100AC476C(a1 + 1648);
      *(_DWORD *)uint64_t buf = 134218496;
      double v26 = v7;
      __int16 v27 = 2048;
      double v28 = v9;
      __int16 v29 = 2048;
      double v30 = *(float *)&v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "magnitude threshold exceeded (%f) with (%f) from base value (%f), resetting calibration", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DB4C8);
      }
      sub_100AC4744(a1 + 1648);
      sub_100AC474C(a1 + 1648);
      sub_100AC476C(a1 + 1648);
      double v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCompassCalculator::updateInterferenceChecks()", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 104) + 24))(*(void *)(a1 + 104));
    *(_DWORD *)(a1 + 384) = *(_DWORD *)(a1 + 380);
    float32x2_t v11 = &qword_101D71018;
    goto LABEL_24;
  }
  uint64_t result = sub_100A6DF1C(a1);
  if (result)
  {
    float v16 = sub_100A6E208((float *)(a1 + 1280), (float *)(a1 + 72)) * -57.2957795 + 90.0;
    *(float *)uint64_t buf = v16;
    uint64_t result = sub_100AC4200(a1 + 1976, (float *)buf);
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 104) + 80))(*(void *)(a1 + 104));
      if (result)
      {
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1022DB4C8);
        }
        uint64_t v17 = qword_1024190A8;
        if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_INFO))
        {
          double v18 = sub_100AC4744(a1 + 1976);
          double v19 = sub_100AC474C(a1 + 1976);
          double v20 = *(float *)&v19;
          double v21 = sub_100AC476C(a1 + 1976);
          *(_DWORD *)uint64_t buf = 134218496;
          double v26 = v18;
          __int16 v27 = 2048;
          double v28 = v20;
          __int16 v29 = 2048;
          double v30 = *(float *)&v21;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "inclination threshold exceeded (%f) with (%f) from base value (%f), resetting calibration", buf, 0x20u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190A0 != -1) {
            dispatch_once(&qword_1024190A0, &stru_1022DB4C8);
          }
          sub_100AC4744(a1 + 1976);
          sub_100AC474C(a1 + 1976);
          sub_100AC476C(a1 + 1976);
          uint64_t v24 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLCompassCalculator::updateInterferenceChecks()", "%s\n", v24);
          if (v24 != (char *)buf) {
            free(v24);
          }
        }
        uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 104) + 24))(*(void *)(a1 + 104));
        *(_DWORD *)(a1 + 384) = *(_DWORD *)(a1 + 380);
        float32x2_t v11 = &qword_101D71020;
        goto LABEL_24;
      }
    }
  }
  return result;
}

float sub_100A6D254(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 80) = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 4);
  float result = *(float *)(a2 + 8);
  *(float *)(a1 + 88) = result;
  return result;
}

float sub_100A6D270(uint64_t a1, uint64_t *a2)
{
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 1);
  uint64_t v2 = *a2;
  *(void *)(a1 + 32) = a2[3];
  *(void *)(a1 + 40) = v2;
  *(_DWORD *)(a1 + 56) = *((_DWORD *)a2 + 11);
  *(_DWORD *)(a1 + 60) = *((_DWORD *)a2 + 12);
  float result = *((float *)a2 + 13);
  *(float *)(a1 + 64) = result;
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 74);
  return result;
}

float sub_100A6D2A8(uint64_t a1, double *a2)
{
  uint64_t v2 = (_OWORD *)(a1 + 1368);
  if (a2[7] == -1.0)
  {
    *(void *)(a1 + 1416) = 0;
    *(_OWORD *)(a1 + 1384) = 0u;
    *(_OWORD *)(a1 + 1400) = 0u;
    _OWORD *v2 = 0u;
    *(void *)(a1 + 1424) = 0xBFF0000000000000;
    *(unsigned char *)(a1 + 116) = 0;
    return sub_100AC38B8(a1 + 112);
  }
  else
  {
    long long v3 = *(_OWORD *)a2;
    long long v4 = *((_OWORD *)a2 + 1);
    long long v5 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 1400) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 1416) = v5;
    _OWORD *v2 = v3;
    *(_OWORD *)(a1 + 1384) = v4;
    *(unsigned char *)(a1 + 116) = 1;
    *(float *)&long long v3 = a2[6];
    sub_100AC3540(a1 + 112, 10, 30, *(float *)&v3, 2.0);
  }
  return result;
}

uint64_t sub_100A6D31C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 104) + 128))();
}

BOOL sub_100A6D344(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, uint64_t a9, float *a10, float *a11, float *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  float v17 = a10[2];
  float v18 = a10[3];
  float v19 = a10[4];
  float v20 = a11[2];
  float v21 = a11[3];
  float v22 = a11[4];
  uint64_t v27 = 0x3F8000003F800000;
  v25.i64[0] = 0;
  v25.i64[1] = 0x3F80000000000000;
  BOOL v23 = sub_100B9BF10((float *)&v27, &v25, (uint64_t)v26, v17, v18, v19, v20, v21, v22, a7, a8, (uint64_t)a12, a13, a14, a15, a16, 0x3F800000uLL, 0.0);
  if (v23) {
    *a12 = sub_100B9D07C(v25.f32);
  }
  return v23;
}

BOOL sub_100A6D3EC(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  float v91 = 0.0;
  int v88 = off_1022AD5D0;
  double v18 = *(double *)(a1 + 1312);
  double v89 = v18;
  LODWORD(v18) = *(_DWORD *)(a1 + 1320);
  int v90 = LODWORD(v18);
  if (*(unsigned char *)(a1 + 13)) {
    BOOL v19 = a1 + 1328 == (void)&v88;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19)
  {
    double v18 = *(double *)(a1 + 1336);
    double v89 = v18;
    LODWORD(v18) = *(_DWORD *)(a1 + 1344);
    int v90 = LODWORD(v18);
  }
  BOOL v20 = sub_100A6D344(v18, a4, a5, a6, a7, a8, a9, a10, a1, (float *)&v88, (float *)(a1 + 72), &v91, a13, a14, a15, a16);
  float v21 = v91;
  BOOL v22 = v91 < 360.0 && v20;
  BOOL v23 = v91 >= 0.0 && v22;
  if (v23)
  {
    *(_DWORD *)a2 = *(_DWORD *)(a1 + 1288);
    *(void *)&long long v24 = *(void *)(a1 + 1292);
    *((void *)&v24 + 1) = *(void *)(a1 + 1312);
    *(_OWORD *)(a2 + 4) = v24;
    LODWORD(v24) = *(_DWORD *)(a1 + 1320);
    *(float *)(a2 + 44) = sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(*(float32x2_t *)(&v24 + 8), *(float32x2_t *)(&v24 + 8)).i32[1]), *((float *)&v24 + 2), *((float *)&v24 + 2))+ (float)(*(float *)&v24 * *(float *)&v24));
    *(_DWORD *)(a2 + 20) = v24;
    *(_DWORD *)(a2 + 36) = *(_DWORD *)(a1 + 1364);
    *(unsigned char *)(a2 + 40) = 0;
    float v25 = sub_100A6E208((float *)(a1 + 1304), (float *)(a1 + 72)) * -57.2957795 + 90.0;
    *(float *)(a2 + 48) = v25;
    float v26 = *(float *)(a2 + 44);
    float v27 = v25 * 0.0174532925;
    *(float *)(a2 + 52) = v26 * cosf(v27);
    *(void *)(a2 + 56) = *(void *)(a1 + 40);
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 16);
    double v40 = *(double *)(a1 + 32);
    *(double *)(a2 + 80) = v40;
    if (*(unsigned char *)(a1 + 13))
    {
      float v87 = v21;
      sub_100A6D344(v40, v33, v34, v35, v36, v37, v38, v39, v28, (float *)(a1 + 1280), (float *)(a1 + 72), &v87, v29, v30, v31, v32);
      float v41 = v87;
      if (*(unsigned char *)(a1 + 2304))
      {
        float v42 = *(float *)(a1 + 2384);
      }
      else
      {
        *(unsigned char *)(a1 + 2304) = 1;
        float v42 = v41;
      }
      float v44 = v21;
      if (vabds_f32(v42, v21) > 270.0) {
        float v44 = dbl_101D70140[(float)(v42 - v21) > 0.0] + v21;
      }
      float v45 = v41;
      if (vabds_f32(v42, v41) > 270.0) {
        float v45 = dbl_101D70140[(float)(v42 - v41) > 0.0] + v41;
      }
      float v86 = v45;
      unint64_t v46 = *(void *)(a1 + 2376);
      float v47 = 0.0;
      float v48 = 0.0;
      if (v46 >= 2)
      {
        float v49 = (float)((float)v46 * *(float *)(a1 + 2332)) - (float)(*(float *)(a1 + 2328) * *(float *)(a1 + 2328));
        float v48 = v49 / (float)((v46 - 1) * v46);
        if (v49 < 0.0) {
          float v48 = 0.0;
        }
      }
      unint64_t v50 = *(void *)(a1 + 1640);
      if (v50) {
        float v47 = *(float *)(a1 + 1592) / (float)v50;
      }
      float v84 = v42 - v41;
      float v85 = v42 - v21;
      float v51 = (float)(v47 + -0.06) * 0.55 / 2.94000006 + 0.1;
      float v52 = fmaxf(fminf(v51, 0.65), 0.1);
      float v83 = v48;
      double v82 = v47;
      if (v48 >= 0.0015 || v47 >= 6.28318531)
      {
        float v54 = *(float *)(a1 + 2388) * 0.15 + 0.734964973;
        *(float *)(a1 + 2388) = v54;
      }
      else
      {
        float v81 = v41;
        float v53 = v44;
        float v54 = 1.0 - expf(v47 * -0.2);
        *(float *)(a1 + 2388) = v54;
        if (v47 <= 1.0)
        {
          float v44 = v53;
          float v41 = v81;
          if (v47 < 0.06)
          {
            *(_DWORD *)(a1 + 2388) = 1011052224;
            float v54 = 0.011928;
          }
        }
        else
        {
          float v54 = 1.0 - expf(v47 * (float)(v47 * -0.2));
          *(float *)(a1 + 2388) = v54;
          float v44 = v53;
          float v41 = v81;
        }
      }
      float v55 = v86;
      double v56 = v44;
      float v57 = (float)(v86 * v52) + (1.0 - v52) * v44;
      float v58 = (float)(v54 * v57) + (float)((float)(1.0 - v54) * v42);
      *(float *)(a1 + 2384) = v58;
      float v59 = sub_100A63838(0, v58);
      *(float *)(a1 + 2384) = v59;
      if (*(unsigned char *)(a1 + 12))
      {
        if (qword_1024190A0 != -1)
        {
          float v75 = v59;
          dispatch_once(&qword_1024190A0, &stru_1022DB4C8);
          float v59 = v75;
          float v55 = v86;
        }
        float v60 = v59 - v42;
        NSUInteger v61 = qword_1024190A8;
        if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
        {
          float v62 = *(float *)(a1 + 2388);
          double v63 = *(float *)(a1 + 2384);
          *(_DWORD *)uint64_t buf = 134220800;
          double v117 = v21;
          __int16 v118 = 2048;
          double v119 = v41;
          __int16 v120 = 2048;
          double v121 = v85;
          __int16 v122 = 2048;
          double v123 = v84;
          __int16 v124 = 2048;
          double v125 = v56;
          __int16 v126 = 2048;
          double v127 = v55;
          __int16 v128 = 2048;
          double v129 = v63;
          __int16 v130 = 2048;
          double v131 = v62;
          __int16 v132 = 2048;
          double v133 = v52;
          __int16 v134 = 2048;
          double v135 = v83;
          __int16 v136 = 2048;
          double v137 = v82;
          __int16 v138 = 2048;
          double v139 = v60;
          _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEBUG, "rawHeading, %.3f, gyroHeading, %.3f, deltaRaw, %.3f, deltaGyro, %.3f, rawHeadingU, %.3f, gyroHeadingU, %.3f, filteredHeading, %.3f, alpha, %.3f, gamma, %.3f, rotVar, %.5f, rotMag, %.3f, deltaFiltered, %.3f", buf, 0x7Au);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190A0 != -1) {
            dispatch_once(&qword_1024190A0, &stru_1022DB4C8);
          }
          double v76 = *(float *)(a1 + 2384);
          double v77 = *(float *)(a1 + 2388);
          int v92 = 134220800;
          double v93 = v21;
          __int16 v94 = 2048;
          double v95 = v41;
          __int16 v96 = 2048;
          double v97 = v85;
          __int16 v98 = 2048;
          double v99 = v84;
          __int16 v100 = 2048;
          double v101 = v56;
          __int16 v102 = 2048;
          double v103 = v86;
          __int16 v104 = 2048;
          double v105 = v76;
          __int16 v106 = 2048;
          double v107 = v77;
          __int16 v108 = 2048;
          double v109 = v52;
          __int16 v110 = 2048;
          double v111 = v83;
          __int16 v112 = 2048;
          double v113 = v82;
          __int16 v114 = 2048;
          double v115 = v60;
          uint64_t v78 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCompassCalculator::getCompassData(CLMotionTypeCompass &)", "%s\n", v78);
          if (v78 != (char *)buf) {
            free(v78);
          }
        }
      }
      float v43 = *(float *)(a1 + 2384);
    }
    else
    {
      sub_100A6DDB4(a1 + 624, &v91);
      float v43 = *(float *)(a1 + 632);
      *(float *)(a1 + 2384) = v43;
    }
    if ((v43 >= 360.0 || v43 < 0.0) && *(unsigned char *)(a1 + 12))
    {
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DB4C8);
      }
      unint64_t v64 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_INFO))
      {
        double v65 = *(float *)(a1 + 2384);
        *(_DWORD *)uint64_t buf = 134217984;
        double v117 = v65;
        _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_INFO, "#Warning Heading  %.2f, is not in bound [0 360]", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1022DB4C8);
        }
        double v79 = *(float *)(a1 + 2384);
        int v92 = 134217984;
        double v93 = v79;
        uint64_t v80 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCompassCalculator::getCompassData(CLMotionTypeCompass &)", "%s\n", v80);
        if (v80 != (char *)buf) {
          free(v80);
        }
      }
    }
    if (sub_100A6DF1C(a1)
      && (((*(uint64_t (**)(void))(**(void **)(a1 + 104) + 72))(*(void *)(a1 + 104)) & 1) != 0
       || *(unsigned char *)(a1 + 15)))
    {
      float v66 = sub_100A6E208((float *)(a1 + 1280), (float *)(a1 + 72)) * -57.2957795 + 90.0;
      float v67 = sqrtf((float)((float)(*(float *)(a1 + 1292) * *(float *)(a1 + 1292))+ (float)(*(float *)(a1 + 1288) * *(float *)(a1 + 1288)))+ (float)(*(float *)(a1 + 1296) * *(float *)(a1 + 1296)));
      float v68 = v66 * 3.14159265 / 180.0;
      float v69 = cosf(v68);
      sub_100AC3774(a1 + 112, v66, v67 * v69);
    }
    float v70 = *(float *)(a1 + 2384);
    *(float *)(a2 + 24) = v70;
    if (*(double *)(a1 + 1424) == -1.0) {
      float v71 = -1.0;
    }
    else {
      float v71 = sub_1004BB1CC(v70, *(double *)(a1 + 1408));
    }
    *(float *)(a2 + 28) = v71;
    int v72 = *(_DWORD *)(a1 + 1364);
    if (v72 || !*(unsigned char *)(a1 + 15))
    {
      float v73 = 20.0;
      if (*(unsigned char *)(a1 + 14))
      {
LABEL_60:
        *(float *)(a2 + 32) = v73;
        if (*(unsigned char *)(a1 + 13) && *(unsigned char *)(*(void *)(a1 + 104) + 184)) {
          *(float *)(a2 + 32) = v73 + 1.0;
        }
        return v23;
      }
    }
    else
    {
      int v72 = 1;
    }
    float v73 = sub_100AC3978(a1 + 112, v72);
    goto LABEL_60;
  }
  return v23;
}

void sub_100A6DDB4(uint64_t a1, float *a2)
{
  float v3 = *a2 * 0.0174532925;
  __float2 v12 = __sincosf_stret(v3);
  sub_1006B4700(a1 + 16, &v12.__cosval);
  sub_1006B4700(a1 + 104, (float *)&v12);
  sub_100A6E134((void *)(a1 + 16), 2, &v12.__cosval);
  sub_100A6E134((void *)(a1 + 104), 2, &v12);
  float v4 = atan2f(v12.__sinval, v12.__cosval) * 57.2957795;
  *(float *)(a1 + 8) = v4;
  float v5 = sub_100A63838(0, v4);
  *(float *)(a1 + 8) = v5;
  float v6 = *(float *)(a1 + 12);
  if (v6 != -1.0)
  {
    float v7 = sub_1004BB18C(v5, v6);
    double v8 = v7;
    float v9 = (cos(v7 * 0.0174532925) + 1.0) * *(float *)(a1 + 4);
    float v10 = (1.2 - v9) * 0.75 * v8;
    if (sub_100A63838(1, *(float *)(a1 + 8) - *(float *)(a1 + 12)) >= 0.0) {
      float v11 = v10;
    }
    else {
      float v11 = -v10;
    }
    float v5 = sub_1004BB1CC(*(float *)(a1 + 12), (float)(v11 + 0.0));
    *(float *)(a1 + 8) = v5;
  }
  *(float *)(a1 + 12) = v5;
}

BOOL sub_100A6DF1C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 13)) {
    return sub_100A6DFD8(a1);
  }
  else {
    return sub_100A6DF68(a1);
  }
}

uint64_t sub_100A6DF2C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 1352);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 1360);
  *(void *)a2 = v2;
  return result;
}

uint64_t sub_100A6DF40(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 104) + 120))();
}

BOOL sub_100A6DF68(uint64_t a1)
{
  BOOL result = 0;
  float v3 = sqrtf((float)((float)(*(float *)(a1 + 84) * *(float *)(a1 + 84)) + (float)(*(float *)(a1 + 80) * *(float *)(a1 + 80)))+ (float)(*(float *)(a1 + 88) * *(float *)(a1 + 88)));
  if (v3 < 1.2 && v3 > 0.8)
  {
    unint64_t v4 = *(void *)(a1 + 1568);
    return !v4 || (float)(*(float *)(a1 + 1520) / (float)v4) < 0.09;
  }
  return result;
}

BOOL sub_100A6DFD8(uint64_t a1)
{
  if (sqrtf((float)((float)(*(float *)(a1 + 60) * *(float *)(a1 + 60)) + (float)(*(float *)(a1 + 56) * *(float *)(a1 + 56)))+ (float)(*(float *)(a1 + 64) * *(float *)(a1 + 64))) > 4.71238911)return 0; {
  unint64_t v1 = *(void *)(a1 + 1640);
  }
  if (!v1) {
    return 1;
  }
  float v2 = *(float *)(a1 + 1592);
  if ((float)(v2 / (float)v1) > 3.1416) {
    return 0;
  }
  if (v1 >= 2 && (float v4 = (float)((float)v1 * *(float *)(a1 + 1596)) - (float)(v2 * v2), v4 >= 0.0)) {
    return (float)(v4 / (float)((v1 - 1) * v1)) <= 0.64;
  }
  else {
    return 1;
  }
}

void sub_100A6E078(id a1)
{
  qword_1024190A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

uint64_t sub_100A6E0A8(uint64_t a1)
{
  *(void *)(a1 + 104) = off_1022C3DA0;
  sub_1000F5BB0(a1 + 168, *(void **)(a1 + 176));
  sub_10041F48C((void *)(a1 + 120));
  *(void *)(a1 + 16) = off_1022C3DA0;
  sub_1000F5BB0(a1 + 80, *(void **)(a1 + 88));
  sub_10041F48C((void *)(a1 + 32));
  return a1;
}

uint64_t sub_100A6E134(void *a1, int a2, _DWORD *a3)
{
  unint64_t v3 = a1[10];
  if (!v3) {
    return 0;
  }
  if (a2 == 2)
  {
    float v10 = (double)v3 * 0.5;
    int v11 = vcvtms_s32_f32(v10);
    __float2 v12 = (void *)a1[8];
    if (v11 < 1)
    {
      float v7 = (void *)a1[8];
    }
    else
    {
      for (int i = 0; i != v11; ++i)
      {
        float v14 = (void *)v12[1];
        if (v14)
        {
          do
          {
            float v7 = v14;
            float v14 = (void *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            float v7 = (void *)v12[2];
            BOOL v8 = *v7 == (void)v12;
            __float2 v12 = v7;
          }
          while (!v8);
        }
        __float2 v12 = v7;
      }
    }
    goto LABEL_22;
  }
  if (a2 != 1)
  {
    if (!a2)
    {
      float v6 = (void *)a1[9];
      float v4 = a1 + 9;
      float v5 = v6;
      if (v6)
      {
        do
        {
          float v7 = v5;
          float v5 = (void *)v5[1];
        }
        while (v5);
      }
      else
      {
        do
        {
          float v7 = (void *)v4[2];
          BOOL v8 = *v7 == (void)v4;
          float v4 = v7;
        }
        while (v8);
      }
      goto LABEL_22;
    }
    return 0;
  }
  float v7 = (void *)a1[8];
LABEL_22:
  *a3 = *((_DWORD *)v7 + 7);
  return 1;
}

float sub_100A6E208(float *a1, float *a2)
{
  float v2 = a1[2];
  float v3 = a1[3];
  float v4 = a1[4];
  float v5 = sqrtf((float)((float)(v3 * v3) + (float)(v2 * v2)) + (float)(v4 * v4));
  if (v5 > 0.0
    && (float v6 = a2[2],
        float v7 = a2[3],
        float v8 = a2[4],
        float v9 = sqrtf((float)((float)(v7 * v7) + (float)(v6 * v6)) + (float)(v8 * v8)),
        v9 > 0.0)
    && (float v10 = (float)((float)((float)((float)(v3 * v7) + (float)(v6 * v2)) + (float)(v8 * v4)) / v5) / v9, v10 <= 1.0))
  {
    return acosf(v10);
  }
  else
  {
    return 0.0;
  }
}

void sub_100A6E274(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  float v5 = (void *)sub_100054C14(a1, a2, a3, a4, a5);
  void *v5 = off_1022DB4F8;
  void v5[6] = 0;
  sub_1010F48EC();
}

void sub_100A6E350(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 48);
  *(void *)(v1 + 48) = 0;
  if (v3) {
    sub_101A6A9C8(v3);
  }
  sub_100029A7C(v1);
  _Unwind_Resume(a1);
}

void sub_100A6E374(uint64_t a1, _DWORD *a2, double *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DB548);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    float v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLProxPDPAndALSPhoneSubscription::onProxPDPData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DB548);
    }
    float v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      float v15 = "";
      __int16 v16 = 2082;
      float v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLProxPDPAndALSPhoneSubscription::onProxPDPData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100A6F2D4(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100A6E530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A6E554(void *a1)
{
  *a1 = off_1022DB4F8;
  uint64_t v2 = a1[6];
  a1[6] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  return sub_100029A7C((uint64_t)a1);
}

void sub_100A6E5D8(void *a1)
{
  sub_100A6E554(a1);

  operator delete();
}

void *sub_100A6E610@<X0>(uint64_t a1@<X8>)
{
  v5[0] = off_1022DB598;
  v5[1] = sub_100A6E7C8;
  _OWORD v5[2] = 0;
  v5[3] = v5;
  sub_100134750(v6, "kCLConnectionMessageProxPDPUpdate");
  sub_100A6F66C((uint64_t)&v7, (uint64_t)v5);
  v4[0] = off_1022DB598;
  v4[1] = sub_100A6ED30;
  _DWORD v4[2] = 0;
  unsigned __int8 v4[3] = v4;
  sub_100134750(v8, "kCLConnectionMessageALSPhoneUpdate");
  sub_100A6F66C((uint64_t)v9, (uint64_t)v4);
  sub_100A6FB48(a1, (unsigned __int8 *)v6, 2);
  for (uint64_t i = 0; i != -14; i -= 7)
  {
    sub_100A6FAC4(&v9[i * 8]);
    if (SHIBYTE(v8[i + 2]) < 0) {
      operator delete((void *)v8[i]);
    }
  }
  sub_100A6FAC4(v4);
  return sub_100A6FAC4(v5);
}

void sub_100A6E768(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  for (uint64_t i = 56; i != -56; i -= 56)
    sub_100A6F298(v2 + i);
  sub_100A6FAC4((uint64_t *)va);
  sub_100A6FAC4(va1);
  _Unwind_Resume(a1);
}

void sub_100A6E7C8(uint64_t a1, int a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (sub_1004C6238())
  {
    sub_100134750(buf, "com.apple.locationd.cmproxpdpandalsphonemanager");
    char v5 = sub_1010A4BAC(a1);
    char v6 = v5;
    if (v18 < 0)
    {
      operator delete(*(void **)buf);
      if (v6)
      {
LABEL_4:
        sub_10009C834(a1);
        if (a2)
        {
          if (qword_102418FC0 != -1) {
            dispatch_once(&qword_102418FC0, &stru_1022DB568);
          }
          uint64_t v7 = qword_102418FC8;
          if (os_log_type_enabled((os_log_t)qword_102418FC8, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Requesting Prox PDP subscription", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102418FC0 != -1) {
              dispatch_once(&qword_102418FC0, &stru_1022DB568);
            }
            char v11 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLProxPDPAndALSPhoneSubscription::handleRequestProxPDP(BOOL, const CLNameValuePair &)", "%s\n", v11);
            if (v11 != (char *)buf) {
              free(v11);
            }
          }
          [*(id *)(*(void *)(a1 + 48) + 16) register:*(void *)(*(void *)(a1 + 48) + 8) forNotification:0 registrationInfo:0];
        }
        else
        {
          if (qword_102418FC0 != -1) {
            dispatch_once(&qword_102418FC0, &stru_1022DB568);
          }
          uint64_t v9 = qword_102418FC8;
          if (os_log_type_enabled((os_log_t)qword_102418FC8, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Requesting Prox PDP unsubscription", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102418FC0 != -1) {
              dispatch_once(&qword_102418FC0, &stru_1022DB568);
            }
            __float2 v12 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLProxPDPAndALSPhoneSubscription::handleRequestProxPDP(BOOL, const CLNameValuePair &)", "%s\n", v12);
            if (v12 != (char *)buf) {
              free(v12);
            }
          }
          [*(id *)(*(void *)(a1 + 48) + 16) unregister:*(void *)(*(void *)(a1 + 48) + 8) forNotification:0];
        }
        goto LABEL_25;
      }
    }
    else if (v5)
    {
      goto LABEL_4;
    }
    uint64_t v13 = CMErrorMessage;
    __int16 v14 = &off_102392F60;
    *(void *)uint64_t buf = +[NSDictionary dictionaryWithObjects:&v14 forKeys:&v13 count:1];
    sub_100A6F514(a1);
    goto LABEL_25;
  }
  if (qword_102418FC0 != -1) {
    dispatch_once(&qword_102418FC0, &stru_1022DB568);
  }
  uint64_t v8 = qword_102418FC8;
  if (os_log_type_enabled((os_log_t)qword_102418FC8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Subscription to Prox PDP is not available", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FC0 != -1) {
      dispatch_once(&qword_102418FC0, &stru_1022DB568);
    }
    float v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLProxPDPAndALSPhoneSubscription::handleRequestProxPDP(BOOL, const CLNameValuePair &)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  uint64_t v15 = CMErrorMessage;
  __int16 v16 = &off_102392F48;
  *(void *)uint64_t buf = +[NSDictionary dictionaryWithObjects:&v16 forKeys:&v15 count:1];
  sub_100A6F514(a1);
LABEL_25:
}

void sub_100A6ECD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

void sub_100A6ED30(uint64_t a1, int a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (sub_1004C6238())
  {
    sub_100134750(buf, "com.apple.locationd.cmproxpdpandalsphonemanager");
    char v5 = sub_1010A4BAC(a1);
    char v6 = v5;
    if (v18 < 0)
    {
      operator delete(*(void **)buf);
      if (v6)
      {
LABEL_4:
        sub_10009C834(a1);
        if (a2)
        {
          if (qword_102418FC0 != -1) {
            dispatch_once(&qword_102418FC0, &stru_1022DB568);
          }
          uint64_t v7 = qword_102418FC8;
          if (os_log_type_enabled((os_log_t)qword_102418FC8, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Requesting ALS Phone subscription", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102418FC0 != -1) {
              dispatch_once(&qword_102418FC0, &stru_1022DB568);
            }
            char v11 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLProxPDPAndALSPhoneSubscription::handleRequestALSPhone(BOOL, const CLNameValuePair &)", "%s\n", v11);
            if (v11 != (char *)buf) {
              free(v11);
            }
          }
          [*(id *)(*(void *)(a1 + 48) + 16) register:*(void *)(*(void *)(a1 + 48) + 8) forNotification:1 registrationInfo:0];
        }
        else
        {
          if (qword_102418FC0 != -1) {
            dispatch_once(&qword_102418FC0, &stru_1022DB568);
          }
          uint64_t v9 = qword_102418FC8;
          if (os_log_type_enabled((os_log_t)qword_102418FC8, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Requesting ALS Phone unsubscription", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102418FC0 != -1) {
              dispatch_once(&qword_102418FC0, &stru_1022DB568);
            }
            __float2 v12 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLProxPDPAndALSPhoneSubscription::handleRequestALSPhone(BOOL, const CLNameValuePair &)", "%s\n", v12);
            if (v12 != (char *)buf) {
              free(v12);
            }
          }
          [*(id *)(*(void *)(a1 + 48) + 16) unregister:*(void *)(*(void *)(a1 + 48) + 8) forNotification:1];
        }
        goto LABEL_25;
      }
    }
    else if (v5)
    {
      goto LABEL_4;
    }
    uint64_t v13 = CMErrorMessage;
    __int16 v14 = &off_102392F60;
    *(void *)uint64_t buf = +[NSDictionary dictionaryWithObjects:&v14 forKeys:&v13 count:1];
    sub_100A6F5A8(a1);
    goto LABEL_25;
  }
  if (qword_102418FC0 != -1) {
    dispatch_once(&qword_102418FC0, &stru_1022DB568);
  }
  uint64_t v8 = qword_102418FC8;
  if (os_log_type_enabled((os_log_t)qword_102418FC8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Subscription to ALS is not available", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FC0 != -1) {
      dispatch_once(&qword_102418FC0, &stru_1022DB568);
    }
    float v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLProxPDPAndALSPhoneSubscription::handleRequestALSPhone(BOOL, const CLNameValuePair &)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  uint64_t v15 = CMErrorMessage;
  __int16 v16 = &off_102392F48;
  *(void *)uint64_t buf = +[NSDictionary dictionaryWithObjects:&v16 forKeys:&v15 count:1];
  sub_100A6F5A8(a1);
LABEL_25:
}

void sub_100A6F238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100A6F298(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100A6F2D4(uint64_t a1, uint64_t a2, _DWORD *a3, double *a4)
{
  if (*a3 == 1)
  {
    id v15 = objc_alloc((Class)CMALSPhone);
    LODWORD(v16) = *((_DWORD *)a4 + 2);
    id v17 = [v15 initWithTimestamp:*a4 illumination:v16];
    uint64_t v18 = CMALSPhoneObject;
    id v19 = v17;
    +[NSDictionary dictionaryWithObjects:&v19 forKeys:&v18 count:1];

    sub_100A6F490(a1);
  }
  else if (!*a3)
  {
    id v6 = objc_alloc((Class)CMProxPDP);
    LODWORD(v7) = *((_DWORD *)a4 + 2);
    LODWORD(v8) = *((_DWORD *)a4 + 3);
    LODWORD(v9) = *((_DWORD *)a4 + 4);
    LODWORD(v10) = *((_DWORD *)a4 + 5);
    LODWORD(v11) = *((_DWORD *)a4 + 6);
    LODWORD(v12) = *((_DWORD *)a4 + 7);
    LODWORD(v13) = *((_DWORD *)a4 + 8);
    id v14 = [v6 initWithTimestamp:*((unsigned __int8 *)a4 + 36) intensity:*((unsigned __int8 *)a4 + 37) intensityCalDelta:*a4 intensityBaselineDelta:v7 ambient:v8 pocketProbability:v9 baselineConfidence:v10 rxNtcC:v11 scanFlags:v12 pocketFlag:v13];
    uint64_t v20 = CMProxPDPObject;
    id v21 = v14;
    +[NSDictionary dictionaryWithObjects:&v21 forKeys:&v20 count:1];

    sub_100A6F40C(a1);
  }
}

void sub_100A6F40C(uint64_t a1)
{
  sub_1000E9420(&off_1022DB638, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100A6F478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A6F490(uint64_t a1)
{
  sub_1000E9420(&off_1022DB640, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100A6F4FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A6F514(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_10048C758(&off_1022DB638, &v2);
  (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v1 + 24))(v1, &v2, 0);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100A6F590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A6F5A8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_10048C758(&off_1022DB640, &v2);
  (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v1 + 24))(v1, &v2, 0);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100A6F624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A6F63C(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_100A6F66C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void sub_100A6F6EC(id a1)
{
  qword_102418FC8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Eclipse");
}

__n128 sub_100A6F71C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_1022DB598;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100A6F768(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022DB598;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100A6F798(uint64_t a1, uint64_t a2, long long *a3)
{
}

uint64_t sub_100A6F7A0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100A6F7E0()
{
}

void sub_100A6F7EC(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100A6F848(a1, a2, (CLConnectionMessage **)&v3);
  if (*((void *)&v3 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v3 + 1));
  }
}

void sub_100A6F830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A6F848(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  id v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  CFDictionaryRef DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_10013FA80((int)v15, DictionaryOfClasses);
  BOOL v14 = 0;
  if (sub_1000D2988((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14))
  {
    double v8 = *(void (**)(void *, BOOL, uint8_t *))a1;
    uint64_t v9 = *(void *)(a1 + 8);
    double v10 = (void *)(a2 + (v9 >> 1));
    if (v9) {
      double v8 = *(void (**)(void *, BOOL, uint8_t *))(*v10 + v8);
    }
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022DB608);
    }
    double v11 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      id v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022DB608);
      }
    }
    double v12 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      id v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10013F3C4(v15);
}

void sub_100A6FA78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_100A6FA94(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void *sub_100A6FAC4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100A6FB48(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_100A6FBC4(a1, a2, (long long *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_100A6FBB0(_Unwind_Exception *a1)
{
  sub_100A70078(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100A6FBC4(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  double v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    double v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_100A6FE48(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  BOOL v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *BOOL v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_100A6FFD0((uint64_t)v25, 0);
  return i;
}

void sub_100A6FE30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100A6FFD0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_100A6FE48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  __n128 result = sub_100A6FEC0(v8 + 2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_100A6FEA8(_Unwind_Exception *a1)
{
  sub_100A6FFD0(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_100A6FEC0(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__uuid_t dst = v4;
  }
  sub_100A6FF38((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100A6FF1C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A6FF38(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_100A6FFD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100A70028((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void sub_100A70028(uint64_t a1)
{
  sub_100A6FAC4((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_100A70078(uint64_t a1)
{
  sub_100A700B4(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100A700B4(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100A70028((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

_DWORD *sub_100A700F8(_DWORD *result, int a2)
{
  void *result = a2;
  return result;
}

void *sub_100A70100@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  return sub_100134750(a2, (&off_1022DB648)[*a1]);
}

uint64_t sub_100A70270(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 2)
    {
      String = (void *)PBReaderReadString();

      *(void *)(a1 + 16) = String;
    }
    else if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_30;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_32;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_30:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_32:
      *(_DWORD *)(a1 + 8) = v14;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100A706F8(uint64_t a1, void *a2)
{
  *(void *)a1 = -1;
  *(unsigned char *)(a1 + 8) = -1;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 48) = 0;
  sub_1005C3A50(a1 + 64, a2, (uint64_t)sub_100A70AB0, a1);
}

void sub_100A70998(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 560) && *(char *)(v1 + 559) < 0) {
    operator delete(*(void **)(v1 + 536));
  }
  if (*(char *)(v1 + 487) < 0) {
    operator delete(*(void **)(v1 + 464));
  }
  if (*(char *)(v1 + 447) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 423) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 399) < 0) {
    operator delete(*(void **)(v1 + 376));
  }
  std::mutex::~mutex((std::mutex *)(v1 + 312));
  sub_1005C3B7C(v2);
  uint64_t v7 = *(void *)(v1 + 48);
  *(void *)(v1 + 48) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(v1 + 40);
  *(void *)(v1 + 40) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  BOOL v9 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 24) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

void sub_100A70AB0(uint64_t a1, int a2, uint64_t a3)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a3 + 56), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DB668);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v9 = 1;
    unint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRayTracingTileAvailabilityManager::onRTAvlFileUpdated", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DB668);
    }
    uint64_t v7 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v11 = 0;
      __int16 v12 = 2082;
      unsigned int v13 = "";
      __int16 v14 = 2082;
      unint64_t v15 = "activity";
      __int16 v16 = 2050;
      uint64_t v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRayTracingTileAvailabilityManager::onRTAvlFileUpdated\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v9 = 0;
  }
  sub_100A76E10(a3, a1, a2);
  if (v9) {
    os_activity_scope_leave(&state);
  }
}

void sub_100A70C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A70C8C(uint64_t a1)
{
  std::string::size_type v28 = 0;
  sub_1000C7F88(buf);
  int v2 = sub_1000A699C(*(uint64_t *)&buf[0], "RayTracingAvlExpirationAgeDefaults", &v28);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v2)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    uint64_t v3 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0]) = 134349056;
      *(void *)((char *)buf + 4) = v28;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#RTTMA,defaults expirationAge,%{public}.3lf", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022DB688);
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 134349056;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v28;
      __int16 v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::readRayTracingDefaultsWriteConfig()", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    *(void *)(a1 + 520) = v28;
    *(unsigned char *)(a1 + 528) = 1;
  }
  sub_100134750(&__p, "");
  sub_1000C7F88(buf);
  BOOL v4 = sub_1004D1284(*(uint64_t *)&buf[0], "RayTracingServerURLDefaults", &__p);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v4)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    unsigned int v5 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = p_p;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "#RTTMA,RTAvailabilityFileURL,%{public}s", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022DB688);
      }
      uint64_t v17 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      int v29 = 136446210;
      uint64_t v30 = v17;
      BOOL v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::readRayTracingDefaultsWriteConfig()", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    sub_1002CD60C((std::string *)(a1 + 536), &__p);
  }
  BOOL v27 = 0;
  sub_1000C7F88(buf);
  int v7 = sub_1000D2988(*(uint64_t *)&buf[0], "RayTracingFlushRTDataDefaults", &v27);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v7)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    uint64_t v8 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      if (v27) {
        char v9 = "On";
      }
      else {
        char v9 = "Off";
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "#RTTMA,defaults FlushEnabled,%{public}s", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022DB688);
      }
      if (v27) {
        unint64_t v19 = "On";
      }
      else {
        unint64_t v19 = "Off";
      }
      int v29 = 136446210;
      uint64_t v30 = (std::string *)v19;
      unint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::readRayTracingDefaultsWriteConfig()", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    *(_WORD *)(a1 + 568) = v27 | 0x100;
  }
  float v26 = 0;
  sub_1000C7F88(buf);
  int v10 = sub_1000A699C(*(uint64_t *)&buf[0], "RayTracingFlushRTDataBeforeTimeDefaults", &v26);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v10)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    int v11 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0]) = 134349056;
      *(void *)((char *)buf + 4) = v26;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "#RTTMA,defaults flushTime,%{public}.3lf", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022DB688);
      }
      int v29 = 134349056;
      uint64_t v30 = v26;
      size_t v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::readRayTracingDefaultsWriteConfig()", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
    *(void *)(a1 + 576) = v26;
    *(unsigned char *)(a1 + 584) = 1;
  }
  float v25 = 0;
  sub_1000C7F88(buf);
  int v12 = sub_1000A699C(*(uint64_t *)&buf[0], "RayTracingAvlDownloadRateOnWifiDefaults", &v25);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v12)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    unsigned int v13 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0]) = 134349056;
      *(void *)((char *)buf + 4) = v25;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "#RTTMA,defaults wifiDownloadRateDefault,%{public}.3lf", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022DB688);
      }
      int v29 = 134349056;
      uint64_t v30 = v25;
      BOOL v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::readRayTracingDefaultsWriteConfig()", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
    *(void *)(a1 + 592) = v25;
    *(unsigned char *)(a1 + 600) = 1;
  }
  long long v24 = 0;
  sub_1000C7F88(buf);
  int v14 = sub_1000A699C(*(uint64_t *)&buf[0], "RayTracingAvlDownloadRateOnCellDefaults", &v24);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v14)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    unint64_t v15 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0]) = 134349056;
      *(void *)((char *)buf + 4) = v24;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "#RTTMA,defaults CellDownloadRateDefault,%{public}.3lf", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022DB688);
      }
      int v29 = 134349056;
      uint64_t v30 = v24;
      unint64_t v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::readRayTracingDefaultsWriteConfig()", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
    *(void *)(a1 + 608) = v24;
    *(unsigned char *)(a1 + 616) = 1;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_100A716E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_100A71778(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 616))
  {
    double result = *(double *)(a1 + 608);
    *(double *)(a1 + 512) = result;
  }
  if (*(unsigned char *)(a1 + 600))
  {
    double result = *(double *)(a1 + 592);
    *(double *)(a1 + 504) = result;
  }
  if (*(unsigned char *)(a1 + 584))
  {
    double result = *(double *)(a1 + 576);
    *(double *)(a1 + 496) = result;
  }
  if (*(unsigned char *)(a1 + 569)) {
    *(unsigned char *)(a1 + 488) = *(unsigned char *)(a1 + 568);
  }
  if (*(unsigned char *)(a1 + 560)) {
    std::string::operator=((std::string *)(a1 + 464), (const std::string *)(a1 + 536));
  }
  if (*(unsigned char *)(a1 + 528))
  {
    double result = *(double *)(a1 + 520);
    *(double *)(a1 + 456) = result;
  }
  return result;
}

void sub_100A717FC(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 56), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DB668);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRayTracingTileAvailabilityManager::onMobileAssetNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DB668);
    }
    char v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      unint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRayTracingTileAvailabilityManager::onMobileAssetNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100A78258(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100A719B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A719D8(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 56), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DB668);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRayTracingTileAvailabilityManager::onManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DB668);
    }
    char v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      unint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRayTracingTileAvailabilityManager::onManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100A79218(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100A71B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A71BB4(uint64_t a1)
{
  sub_100A76AE4(a1, (uint64_t)v33);
  if (*(char *)(a1 + 487) < 0) {
    sub_1000DC48C(&__dst, *(void **)(a1 + 464), *(void *)(a1 + 472));
  }
  else {
    __uuid_t dst = *(std::string *)(a1 + 464);
  }
  std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __dst.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    std::string::append(&__dst, "/");
    if ((v34 & 0x80u) == 0) {
      uint64_t v3 = v33;
    }
    else {
      uint64_t v3 = (void **)v33[0];
    }
    if ((v34 & 0x80u) == 0) {
      std::string::size_type v4 = v34;
    }
    else {
      std::string::size_type v4 = (std::string::size_type)v33[1];
    }
    std::string::append(&__dst, (const std::string::value_type *)v3, v4);
    unsigned int v5 = (char *)sub_1000A6958();
    sub_1000A5670(v5, (uint64_t)&v38);
    sub_100A76AE4(a1, (uint64_t)__p);
    if (v36 >= 0) {
      unint64_t v6 = __p;
    }
    else {
      unint64_t v6 = *(const std::string::value_type **)__p;
    }
    if (v36 >= 0) {
      std::string::size_type v7 = HIBYTE(v36);
    }
    else {
      std::string::size_type v7 = *(void *)&__p[8];
    }
    uint64_t v8 = std::string::append(&v38, v6, v7);
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    int64_t v31 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v30 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v36) < 0) {
      operator delete(*(void **)__p);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    int v10 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      p_uuid_t dst = &__dst;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_uuid_t dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      int v12 = v30;
      if (v31 < 0) {
        int v12 = (void **)v30[0];
      }
      LODWORD(v38.__r_.__value_.__l.__data_) = 136446722;
      *(std::string::size_type *)((char *)v38.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_dst;
      WORD2(v38.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&v38.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v12;
      HIWORD(v38.__r_.__value_.__r.__words[2]) = 2050;
      uint64_t v39 = 0x409C200000000000;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#RTTMA,Pressure,downloadAvailabilityFile,download request,url,%{public}s,storeTo,%{public}s,retryInterval,%{public}.1lf", (uint8_t *)&v38, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&v38, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022DB688);
      }
      unint64_t v23 = &__dst;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unint64_t v23 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      long long v24 = v30;
      if (v31 < 0) {
        long long v24 = (void **)v30[0];
      }
      *(_DWORD *)std::string __p = 136446722;
      *(void *)&__p[4] = v23;
      *(_WORD *)&__p[12] = 2082;
      *(void *)&__p[14] = v24;
      __int16 v36 = 2050;
      uint64_t v37 = 0x409C200000000000;
      float v25 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::registerRTAvailabilityFileToFileUpdater()", "%s\n", (const char *)v25);
      if (v25 != &v38) {
        free(v25);
      }
    }
    uint64_t v29 = 0x404E000000000000;
    uint64_t v13 = a1 + 64;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __int16 v14 = &__dst;
    }
    else {
      __int16 v14 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if (v31 >= 0) {
      unint64_t v15 = v30;
    }
    else {
      unint64_t v15 = (void **)v30[0];
    }
    if (sub_1005C653C(a1 + 64, (const std::string::value_type *)v14, (const std::string::value_type *)v15, (double *)&v29))
    {
      std::string::size_type v16 = *(void *)(a1 + 504);
      std::string::size_type v27 = *(void *)(a1 + 512);
      std::string::size_type v28 = v16;
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022DB688);
      }
      uint64_t v17 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(v38.__r_.__value_.__l.__data_) = 134349312;
        *(std::string::size_type *)((char *)v38.__r_.__value_.__r.__words + 4) = v27;
        WORD2(v38.__r_.__value_.__r.__words[1]) = 2050;
        *(std::string::size_type *)((char *)&v38.__r_.__value_.__r.__words[1] + 6) = v28;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#RTTMA,AVL file update rate over cellular,%{public}.1lf,wifi,%{public}.1lf", (uint8_t *)&v38, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&v38, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022DB688);
        }
        *(_DWORD *)std::string __p = 134349312;
        *(void *)&__p[4] = v27;
        *(_WORD *)&__p[12] = 2050;
        *(void *)&__p[14] = v28;
        float v26 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::registerRTAvailabilityFileToFileUpdater()", "%s\n", (const char *)v26);
        if (v26 != &v38) {
          free(v26);
        }
      }
      if (sub_1005C6BBC(v13, (double *)&v27, (double *)&v28)) {
        goto LABEL_67;
      }
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022DB688);
      }
      __int16 v18 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v38.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#RTTMA,#Warning,Pressure,downloadAvailabilityFile,could not setUpdateRate AVl file updater", (uint8_t *)&v38, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_67;
      }
      bzero(&v38, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022DB688);
      }
      *(_WORD *)std::string __p = 0;
      uint64_t v19 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::registerRTAvailabilityFileToFileUpdater()", "%s\n", (const char *)v19);
    }
    else
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022DB688);
      }
      BOOL v22 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v38.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "#RTTMA,#Warning,Pressure,downloadAvailabilityFile,could not setUpdateSource AVL file updater", (uint8_t *)&v38, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_67;
      }
      bzero(&v38, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022DB688);
      }
      *(_WORD *)std::string __p = 0;
      uint64_t v19 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::registerRTAvailabilityFileToFileUpdater()", "%s\n", (const char *)v19);
    }
    if (v19 != &v38) {
      free(v19);
    }
LABEL_67:
    if (SHIBYTE(v31) < 0) {
      operator delete(v30[0]);
    }
    goto LABEL_69;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022DB688);
  }
  unint64_t v20 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    LOWORD(v38.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "#RTTMA,invalid URL path", (uint8_t *)&v38, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v38, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    *(_WORD *)std::string __p = 0;
    size_t v21 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::registerRTAvailabilityFileToFileUpdater()", "%s\n", (const char *)v21);
    if (v21 != &v38) {
      free(v21);
    }
  }
LABEL_69:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if ((char)v34 < 0) {
    operator delete(v33[0]);
  }
}

void sub_100A72450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100A724F0(uint64_t a1)
{
  int v2 = (char *)sub_1000A6958();
  sub_1000A5670(v2, (uint64_t)&v18);
  if (*(char *)(a1 + 423) < 0)
  {
    sub_1000DC48C(__dst, *(void **)(a1 + 400), *(void *)(a1 + 408));
  }
  else
  {
    *(_OWORD *)__uuid_t dst = *(_OWORD *)(a1 + 400);
    *(void *)&__dst[16] = *(void *)(a1 + 416);
  }
  if (__dst[23] >= 0) {
    uint64_t v3 = __dst;
  }
  else {
    uint64_t v3 = *(const std::string::value_type **)__dst;
  }
  if (__dst[23] >= 0) {
    std::string::size_type v4 = __dst[23];
  }
  else {
    std::string::size_type v4 = *(void *)&__dst[8];
  }
  unsigned int v5 = std::string::append(&v18, v3, v4);
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  int64_t v17 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if ((__dst[23] & 0x80000000) != 0) {
    operator delete(*(void **)__dst);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022DB688);
  }
  std::string::size_type v7 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    if (v17 >= 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    BOOL v9 = sub_1000A569C((const char *)v8);
    LODWORD(v18.__r_.__value_.__l.__data_) = 136446466;
    *(std::string::size_type *)((char *)v18.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
    WORD2(v18.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&v18.__r_.__value_.__r.__words[1] + 6) = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#RTTMA,doesRTAvailabilityFileExist,availabilityFilePath,%{public}s,exist,%d", (uint8_t *)&v18, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v18, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    if (v17 >= 0) {
      uint64_t v13 = __p;
    }
    else {
      uint64_t v13 = (void **)__p[0];
    }
    BOOL v14 = sub_1000A569C((const char *)v13);
    *(_DWORD *)__uuid_t dst = 136446466;
    *(void *)&__dst[4] = v13;
    *(_WORD *)&__dst[12] = 1024;
    *(_DWORD *)&__dst[14] = v14;
    unint64_t v15 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::doesRTAvailabilityFileExist()", "%s\n", (const char *)v15);
    if (v15 != &v18) {
      free(v15);
    }
  }
  if (v17 >= 0) {
    int v10 = __p;
  }
  else {
    int v10 = (void **)__p[0];
  }
  BOOL v11 = sub_1000A569C((const char *)v10);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  return v11;
}

void sub_100A727BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A72818(uint64_t a1)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022DB688);
  }
  int v2 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#RTTMA,downloadRTAvlFile", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    unsigned int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::downloadRTAvlFile()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  *(CFAbsoluteTime *)(a1 + 448) = Current;
  *(double *)uint64_t buf = Current + 5.0;
  return sub_1005C6FFC((double *)(a1 + 64), (double *)buf);
}

BOOL sub_100A729D0(uint64_t a1)
{
  char v41 = 0;
  uint64_t v40 = 0;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  uint64_t v45 = 0;
  int v2 = (char *)sub_1000A6958();
  sub_1000A5670(v2, (uint64_t)v56);
  if (*(char *)(a1 + 423) < 0)
  {
    sub_1000DC48C(__p, *(void **)(a1 + 400), *(void *)(a1 + 408));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 400);
    uint64_t v53 = *(void *)(a1 + 416);
  }
  if (v53 >= 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if (v53 >= 0) {
    std::string::size_type v4 = HIBYTE(v53);
  }
  else {
    std::string::size_type v4 = (std::string::size_type)__p[1];
  }
  unsigned int v5 = std::string::append(v56, (const std::string::value_type *)v3, v4);
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  int64_t v39 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string v38 = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v53) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v56[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56[0].__r_.__value_.__l.__data_);
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022DB688);
  }
  std::string::size_type v7 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = v38;
    if (v39 < 0) {
      uint64_t v8 = (void **)v38[0];
    }
    LODWORD(v56[0].__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v56[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#RTTMA,isRTAvailabilityFileValid,availabilityFilePath,%{public}s", (uint8_t *)v56, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(v56, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    uint64_t v29 = v38;
    if (v39 < 0) {
      uint64_t v29 = (void **)v38[0];
    }
    LODWORD(__p[0]) = 136446210;
    *(void **)((char *)__p + 4) = v29;
    uint64_t v30 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::isRTAvailabilityFileValid()", "%s\n", (const char *)v30);
    if (v30 != v56) {
      free(v30);
    }
  }
  sub_100168850(__p);
  memset(&v37, 0, sizeof(v37));
  if (!sub_101878A14((uint64_t *)v38, &v37))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    BOOL v11 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      LOWORD(v56[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "#RTTMA,isRTAvailabilityFileValid,error,failed to create/open protobuf input stream", (uint8_t *)v56, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_50;
    }
    bzero(v56, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_101;
    }
    goto LABEL_111;
  }
  if ((wireless_diagnostics::google::protobuf::MessageLite::ParseFromString() & 1) == 0)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    int v12 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      LOWORD(v56[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "#RTTMA,isRTAvailabilityFileValid,error,cannot ParseFromString()", (uint8_t *)v56, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_50;
    }
    bzero(v56, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_101;
    }
    goto LABEL_111;
  }
  if ((v55 & 2) == 0) {
    goto LABEL_45;
  }
  uint64_t v9 = v54;
  if (v54)
  {
    uint64_t v10 = v54;
    if ((*(unsigned char *)(v54 + 493) & 2) == 0) {
      goto LABEL_45;
    }
  }
  else
  {
    uint64_t v10 = *(void *)(qword_10248D2B8 + 40);
    if ((*(unsigned char *)(v10 + 493) & 2) == 0) {
      goto LABEL_45;
    }
  }
  uint64_t v13 = *(void *)(v10 + 336);
  if (!v13) {
    uint64_t v13 = *(void *)(qword_10248A400 + 336);
  }
  if ((*(unsigned char *)(v13 + 20) & 1) == 0)
  {
LABEL_45:
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    BOOL v14 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      LOWORD(v56[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "#RTTMA,isRTAvailabilityFileValid,No AVL data", (uint8_t *)v56, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_50;
    }
    bzero(v56, 0x65CuLL);
    if (qword_102419380 == -1)
    {
LABEL_101:
      LOWORD(v34[0]) = 0;
      int64_t v31 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::isRTAvailabilityFileValid()", "%s\n", (const char *)v31);
      if (v31 != v56) {
        free(v31);
      }
LABEL_50:
      BOOL v15 = 0;
      goto LABEL_51;
    }
LABEL_111:
    dispatch_once(&qword_102419380, &stru_1022DB688);
    goto LABEL_101;
  }
  if (!v54) {
    uint64_t v9 = *(void *)(qword_10248D2B8 + 40);
  }
  uint64_t v17 = *(void *)(v9 + 336);
  if (!v17) {
    uint64_t v17 = *(void *)(qword_10248A400 + 336);
  }
  uint64_t v18 = *(void *)(v17 + 8);
  if (!v18) {
    uint64_t v18 = *(void *)(qword_10248A0F8 + 8);
  }
  sub_10062D48C((uint64_t)v34, v18);
  if ((v36 & 2) != 0)
  {
    uint64_t v20 = v35;
    if (v35)
    {
      int v21 = *(_DWORD *)(v35 + 48);
      uint64_t v22 = v35;
      if ((v21 & 1) == 0)
      {
LABEL_83:
        if ((v21 & 4) == 0)
        {
LABEL_85:
          double Current = CFAbsoluteTimeGetCurrent();
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022DB688);
          }
          std::string::size_type v27 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
          {
            LODWORD(v56[0].__r_.__value_.__l.__data_) = 134349568;
            *(std::string::size_type *)((char *)v56[0].__r_.__value_.__r.__words + 4) = v42;
            WORD2(v56[0].__r_.__value_.__r.__words[1]) = 1026;
            *(_DWORD *)((char *)&v56[0].__r_.__value_.__r.__words[1] + 6) = DWORD2(v42);
            WORD1(v56[0].__r_.__value_.__r.__words[2]) = 2050;
            *(double *)((char *)&v56[0].__r_.__value_.__r.__words[2] + 4) = Current;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "#RTTMA,isRTAvailabilityFileValid,timestamp_s,%{public}.3lf,expirationAge_s,%{public}d,curTime,%{public}.3lf", (uint8_t *)v56, 0x1Cu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(v56, 0x65CuLL);
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_1022DB688);
            }
            int v46 = 134349568;
            uint64_t v47 = v42;
            __int16 v48 = 1026;
            int v49 = DWORD2(v42);
            __int16 v50 = 2050;
            double v51 = Current;
            double v33 = (std::string *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::isRTAvailabilityFileValid()", "%s\n", (const char *)v33);
            if (v33 != v56) {
              free(v33);
            }
          }
          LODWORD(v28) = DWORD2(v42);
          BOOL v15 = *(double *)&v42 + (double)v28 > Current;
          goto LABEL_91;
        }
LABEL_84:
        DWORD2(v42) = *(_DWORD *)(v20 + 20);
        goto LABEL_85;
      }
    }
    else
    {
      uint64_t v22 = *(void *)(qword_10248A130 + 16);
      if ((*(unsigned char *)(v22 + 48) & 1) == 0) {
        goto LABEL_92;
      }
    }
    uint64_t v23 = *(void *)(v22 + 8);
    if (!v23) {
      uint64_t v23 = *(void *)(qword_10248A110 + 8);
    }
    if (*(unsigned char *)(v23 + 20))
    {
      uint64_t v24 = v35;
      if (!v35) {
        uint64_t v24 = *(void *)(qword_10248A130 + 16);
      }
      uint64_t v25 = *(void *)(v24 + 8);
      if (!v25) {
        uint64_t v25 = *(void *)(qword_10248A110 + 8);
      }
      *(void *)&long long v42 = *(void *)(v25 + 8);
    }
    if (v35)
    {
      int v21 = *(_DWORD *)(v35 + 48);
      goto LABEL_83;
    }
LABEL_92:
    uint64_t v20 = *(void *)(qword_10248A130 + 16);
    if ((*(unsigned char *)(v20 + 48) & 4) == 0) {
      goto LABEL_85;
    }
    goto LABEL_84;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022DB688);
  }
  uint64_t v19 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    LOWORD(v56[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "#RTTMA,isRTAvailabilityFileValid,No SepcificHeader", (uint8_t *)v56, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(v56, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    LOWORD(v46) = 0;
    uint64_t v32 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::isRTAvailabilityFileValid()", "%s\n", (const char *)v32);
    if (v32 != v56) {
      free(v32);
    }
  }
  BOOL v15 = 0;
LABEL_91:
  sub_10062D594(v34);
LABEL_51:
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  sub_1001687EC(__p);
  if (SHIBYTE(v39) < 0) {
    operator delete(v38[0]);
  }
  v56[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
  sub_100129808((void ***)v56);
  return v15;
}

void sub_100A73468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  sub_1001687EC(&a43);
  if (a29 < 0) {
    operator delete(a24);
  }
  a54 = &a36;
  sub_100129808((void ***)&a54);
  _Unwind_Resume(a1);
}

BOOL sub_100A73520(uint64_t a1, int *a2)
{
  std::string::size_type v4 = (char *)sub_1000A6958();
  sub_1000A5670(v4, (uint64_t)&v156);
  if (*(char *)(a1 + 423) < 0)
  {
    sub_1000DC48C(__p, *(void **)(a1 + 400), *(void *)(a1 + 408));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 400);
    uint64_t v153 = *(void *)(a1 + 416);
  }
  if (v153 >= 0) {
    unsigned int v5 = __p;
  }
  else {
    unsigned int v5 = (void **)__p[0];
  }
  if (v153 >= 0) {
    std::string::size_type v6 = HIBYTE(v153);
  }
  else {
    std::string::size_type v6 = (std::string::size_type)__p[1];
  }
  std::string::size_type v7 = std::string::append(&v156, (const std::string::value_type *)v5, v6);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  int64_t v135 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)__int16 v134 = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v153) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v156.__r_.__value_.__l.__data_);
  }
  uint64_t v9 = &qword_102419000;
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022DB688);
  }
  uint64_t v10 = &qword_102419000;
  BOOL v11 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    int v12 = v134;
    if (v135 < 0) {
      int v12 = (void **)v134[0];
    }
    LODWORD(v156.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v156.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "#RTTMA,readRTAvlFileContent,availabilityFilePath,%{public}s", (uint8_t *)&v156, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v156, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    double v103 = v134;
    if (v135 < 0) {
      double v103 = (void **)v134[0];
    }
    LODWORD(__p[0]) = 136446210;
    *(void **)((char *)__p + 4) = v103;
    __int16 v104 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::readRTAvlFileContent(CLRayTracingTileAvailabilityInfo &)", "%s\n", (const char *)v104);
    if (v104 != &v156) {
      free(v104);
    }
  }
  sub_100168850(__p);
  memset(&v133, 0, sizeof(v133));
  if (!sub_101878A14((uint64_t *)v134, &v133))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    BOOL v15 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      LOWORD(v156.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "#RTTMA,readRTAvlFileContent,error,failed to create/open protobuf input stream", (uint8_t *)&v156, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_50;
    }
    bzero(&v156, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_221;
    }
    goto LABEL_250;
  }
  if ((wireless_diagnostics::google::protobuf::MessageLite::ParseFromString() & 1) == 0)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    std::string::size_type v16 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      LOWORD(v156.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "#RTTMA,readRTAvlFileContent,error,cannot ParseFromString()", (uint8_t *)&v156, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_50;
    }
    bzero(&v156, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_221;
    }
    goto LABEL_250;
  }
  if ((v155 & 2) == 0) {
    goto LABEL_45;
  }
  uint64_t v13 = v154;
  if (v154)
  {
    uint64_t v14 = v154;
    if ((*(unsigned char *)(v154 + 493) & 2) == 0) {
      goto LABEL_45;
    }
  }
  else
  {
    uint64_t v14 = *(void *)(qword_10248D2B8 + 40);
    if ((*(unsigned char *)(v14 + 493) & 2) == 0) {
      goto LABEL_45;
    }
  }
  uint64_t v17 = *(void *)(v14 + 336);
  if (!v17) {
    uint64_t v17 = *(void *)(qword_10248A400 + 336);
  }
  if ((*(unsigned char *)(v17 + 20) & 1) == 0)
  {
LABEL_45:
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    uint64_t v18 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      LOWORD(v156.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "#RTTMA,#Warning,readRTAvlFileContent,AVL data not found", (uint8_t *)&v156, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_50;
    }
    bzero(&v156, 0x65CuLL);
    if (qword_102419380 == -1)
    {
LABEL_221:
      LOWORD(v127) = 0;
      double v105 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::readRTAvlFileContent(CLRayTracingTileAvailabilityInfo &)", "%s\n", (const char *)v105);
      if (v105 != &v156) {
        free(v105);
      }
LABEL_50:
      BOOL v19 = 0;
      goto LABEL_51;
    }
LABEL_250:
    dispatch_once(&qword_102419380, &stru_1022DB688);
    goto LABEL_221;
  }
  if (!v154) {
    uint64_t v13 = *(void *)(qword_10248D2B8 + 40);
  }
  uint64_t v21 = *(void *)(v13 + 336);
  if (!v21) {
    uint64_t v21 = *(void *)(qword_10248A400 + 336);
  }
  uint64_t v22 = *(void *)(v21 + 8);
  if (!v22) {
    uint64_t v22 = *(void *)(qword_10248A0F8 + 8);
  }
  sub_10062D48C((uint64_t)&v127, v22);
  __int16 v126 = a2;
  if (v132)
  {
    uint64_t v25 = v128;
    if (v128)
    {
      int v26 = *(_DWORD *)(v128 + 20);
      if (v26)
      {
        *a2 = *(_DWORD *)(v128 + 8);
        int v26 = *(_DWORD *)(v25 + 20);
      }
    }
    else
    {
      uint64_t v27 = *(void *)(qword_10248A130 + 8);
      if (*(unsigned char *)(v27 + 20)) {
        *a2 = *(_DWORD *)(v27 + 8);
      }
      uint64_t v25 = *(void *)(qword_10248A130 + 8);
      LOBYTE(v26) = *(unsigned char *)(v25 + 20);
    }
    if ((v26 & 2) != 0) {
      a2[1] = *(_DWORD *)(v25 + 12);
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    unint64_t v28 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      int v29 = *a2;
      int v30 = a2[1];
      LODWORD(v156.__r_.__value_.__l.__data_) = 67240448;
      HIDWORD(v156.__r_.__value_.__r.__words[0]) = v29;
      LOWORD(v156.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&v156.__r_.__value_.__r.__words[1] + 2) = v30;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "#RTTMA,readRTAvlFileContent,signature,%{public}u,sectionId,%{public}u", (uint8_t *)&v156, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&v156, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022DB688);
      }
      int v108 = *a2;
      int v109 = a2[1];
      int v144 = 67240448;
      *(_DWORD *)int v145 = v108;
      *(_WORD *)&v145[4] = 1026;
      *(_DWORD *)&v145[6] = v109;
      uint64_t v24 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::readRTAvlFileContent(CLRayTracingTileAvailabilityInfo &)", "%s\n", (const char *)v24);
      goto LABEL_236;
    }
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    uint64_t v23 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      LOWORD(v156.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "#RTTMA,#Warning,readRTAvlFileContent,No CommonHeader", (uint8_t *)&v156, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&v156, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022DB688);
      }
      LOWORD(v144) = 0;
      uint64_t v24 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::readRTAvlFileContent(CLRayTracingTileAvailabilityInfo &)", "%s\n", (const char *)v24);
LABEL_236:
      if (v24 != &v156) {
        free(v24);
      }
    }
  }
  if ((v132 & 2) == 0)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    int64_t v31 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      LOWORD(v156.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "#RTTMA,readRTAvlFileContent,No SepcificHeader", (uint8_t *)&v156, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&v156, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022DB688);
      }
      LOWORD(v144) = 0;
      uint64_t v32 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::readRTAvlFileContent(CLRayTracingTileAvailabilityInfo &)", "%s\n", (const char *)v32);
      if (v32 != &v156) {
        free(v32);
      }
    }
    goto LABEL_117;
  }
  uint64_t v33 = v129;
  if (!v129) {
    uint64_t v33 = *(void *)(qword_10248A130 + 16);
  }
  sub_10062B2F4((uint64_t)&v144, v33);
  char v34 = v151;
  if ((v151 & 2) != 0) {
    *((unsigned char *)a2 + 8) = v145[12];
  }
  if (v34)
  {
    uint64_t v35 = *(void *)&v145[4];
    if (!*(void *)&v145[4]) {
      uint64_t v35 = *(void *)(qword_10248A110 + 8);
    }
    if (*(unsigned char *)(v35 + 20)) {
      *((void *)a2 + 2) = *(void *)(v35 + 8);
    }
  }
  if ((v34 & 4) != 0)
  {
    a2[6] = *(_DWORD *)&v145[16];
    if ((v34 & 0x10) == 0)
    {
LABEL_106:
      if ((v34 & 0x20) == 0) {
        goto LABEL_107;
      }
      goto LABEL_210;
    }
  }
  else if ((v34 & 0x10) == 0)
  {
    goto LABEL_106;
  }
  a2[7] = v147;
  if ((v34 & 0x20) == 0)
  {
LABEL_107:
    if ((v34 & 0x40) == 0) {
      goto LABEL_108;
    }
    goto LABEL_211;
  }
LABEL_210:
  a2[8] = v148;
  if ((v34 & 0x40) == 0)
  {
LABEL_108:
    if ((v34 & 0x80) == 0) {
      goto LABEL_109;
    }
LABEL_212:
    a2[10] = v150;
    if ((v34 & 8) == 0) {
      goto LABEL_111;
    }
    goto LABEL_110;
  }
LABEL_211:
  a2[9] = v149;
  if (v34 < 0) {
    goto LABEL_212;
  }
LABEL_109:
  if ((v34 & 8) != 0) {
LABEL_110:
  }
    a2[11] = v146;
LABEL_111:
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022DB688);
  }
  char v36 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    int v37 = *((unsigned __int8 *)a2 + 8);
    std::string::size_type v38 = *((void *)a2 + 2);
    int v39 = a2[6];
    int v40 = a2[7];
    int v41 = a2[8];
    int v42 = a2[9];
    int v43 = a2[10];
    int v44 = a2[11];
    LODWORD(v156.__r_.__value_.__l.__data_) = 67241984;
    HIDWORD(v156.__r_.__value_.__r.__words[0]) = v37;
    LOWORD(v156.__r_.__value_.__r.__words[1]) = 2050;
    *(std::string::size_type *)((char *)&v156.__r_.__value_.__r.__words[1] + 2) = v38;
    WORD1(v156.__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(v156.__r_.__value_.__r.__words[2]) = v39;
    LOWORD(v157) = 1026;
    *(_DWORD *)((char *)&v157 + 2) = v40;
    HIWORD(v157) = 1026;
    *(_DWORD *)uint64_t v158 = v41;
    *(_WORD *)&v158[4] = 1026;
    *(_DWORD *)&v158[6] = v42;
    __int16 v159 = 1026;
    int v160 = v43;
    __int16 v161 = 1026;
    int v162 = v44;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "#RTTMA,readRTAvlFileContent,version,%{public}d,timestamp_s,%{public}.3lf,expirationAge_s,%{public}d,numberOfAvailableTiles,%{public}d,numberOfAvailableRegions,%{public}d,numberOfBitsForIndex,%{public}d,numberOfBitsForIODNum,%{public}d,zoomLevel,%{public}d", (uint8_t *)&v156, 0x36u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v156, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    int v110 = *((unsigned __int8 *)a2 + 8);
    uint64_t v111 = *((void *)a2 + 2);
    int v112 = a2[6];
    int v113 = a2[7];
    int v114 = a2[8];
    int v115 = a2[9];
    int v116 = a2[10];
    int v117 = a2[11];
    int v136 = 67241984;
    *(_DWORD *)double v137 = v110;
    *(_WORD *)&v137[4] = 2050;
    *(void *)&v137[6] = v111;
    *(_WORD *)&v137[14] = 1026;
    *(_DWORD *)&v137[16] = v112;
    LOWORD(v138) = 1026;
    *(_DWORD *)((char *)&v138 + 2) = v113;
    HIWORD(v138) = 1026;
    *(_DWORD *)double v139 = v114;
    *(_WORD *)&v139[4] = 1026;
    *(_DWORD *)&v139[6] = v115;
    __int16 v140 = 1026;
    int v141 = v116;
    __int16 v142 = 1026;
    int v143 = v117;
    __int16 v118 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::readRTAvlFileContent(CLRayTracingTileAvailabilityInfo &)", "%s\n", (const char *)v118);
    if (v118 != &v156) {
      free(v118);
    }
  }
  sub_10062B384((wireless_diagnostics::google::protobuf::MessageLite *)&v144);
LABEL_117:
  unsigned int v45 = a2[9];
  if (v45)
  {
    uint64_t v46 = 0;
    int v47 = a2[9];
    do
    {
      uint64_t v46 = (2 * v46) | 1;
      --v47;
    }
    while (v47);
  }
  else
  {
    uint64_t v46 = 0;
  }
  int v48 = a2[10];
  if (v45 >= v48 + v45)
  {
    uint64_t v49 = 0;
  }
  else
  {
    uint64_t v49 = 0;
    do
    {
      uint64_t v49 = (2 * v49) | 1;
      --v48;
    }
    while (v48);
  }
  std::string::size_type v125 = v49 << v45;
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022DB688);
  }
  __int16 v50 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    LODWORD(v156.__r_.__value_.__l.__data_) = 134349312;
    *(std::string::size_type *)((char *)v156.__r_.__value_.__r.__words + 4) = v46;
    WORD2(v156.__r_.__value_.__r.__words[1]) = 2050;
    *(std::string::size_type *)((char *)&v156.__r_.__value_.__r.__words[1] + 6) = v125;
    _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_INFO, "#RTTMA,readRTAvlFileContent,tileIDMask,%{public}llu,tileIDVersion,%{public}llu", (uint8_t *)&v156, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v156, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    int v144 = 134349312;
    *(void *)int v145 = v46;
    *(_WORD *)&v145[8] = 2050;
    *(void *)&v145[10] = v125;
    __int16 v106 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::readRTAvlFileContent(CLRayTracingTileAvailabilityInfo &)", "%s\n", (const char *)v106);
    if (v106 != &v156) {
      free(v106);
    }
    uint64_t v9 = &qword_102419000;
  }
  unint64_t v51 = v131;
  if (v9[112] != -1) {
    dispatch_once(&qword_102419380, &stru_1022DB688);
  }
  float v52 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    LODWORD(v156.__r_.__value_.__l.__data_) = 67240192;
    HIDWORD(v156.__r_.__value_.__r.__words[0]) = v51;
    _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_INFO, "#RTTMA,readRTAvlFileContent,lenOfRegions,%{public}d", (uint8_t *)&v156, 8u);
  }
  int v123 = v51;
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v156, 0x65CuLL);
    if (v9[112] != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    int v144 = 67240192;
    *(_DWORD *)int v145 = v51;
    double v107 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::readRTAvlFileContent(CLRayTracingTileAvailabilityInfo &)", "%s\n", (const char *)v107);
    if (v107 != &v156) {
      free(v107);
    }
    uint64_t v9 = &qword_102419000;
  }
  BOOL v120 = v51 != 0;
  if (v51)
  {
    __int16 v122 = (uint64_t *)(a2 + 12);
    sub_100A74EA4((uint64_t *)a2 + 6, v51);
    unsigned int v53 = 0;
    uint64_t v121 = (uint64_t)(a2 + 16);
    while (1)
    {
      if ((int)v131 <= (int)v53)
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
        wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&v156);
      }
      sub_10062CB70((uint64_t)&v144, *(void *)(v130 + 8 * (int)v53));
      std::string::size_type v54 = 0;
      std::string::size_type v55 = 0;
      double v56 = 0;
      std::string::size_type v57 = 0;
      if ((v150 & 1) == 0) {
        goto LABEL_157;
      }
      uint64_t v58 = *(void *)&v145[4];
      uint64_t v59 = *(void *)&v145[4];
      if (!*(void *)&v145[4]) {
        uint64_t v59 = *(void *)(qword_10248A128 + 8);
      }
      uint64_t v60 = *(void *)(v59 + 8);
      if (!v60) {
        uint64_t v60 = *(void *)(qword_10248A120 + 8);
      }
      uint64_t v61 = *(void *)&v145[4];
      if (!*(void *)&v145[4]) {
        uint64_t v61 = *(void *)(qword_10248A128 + 8);
      }
      uint64_t v62 = *(void *)(v61 + 8);
      if (!v62) {
        uint64_t v62 = *(void *)(qword_10248A120 + 8);
      }
      uint64_t v63 = *(void *)&v145[4];
      if (!*(void *)&v145[4]) {
        uint64_t v63 = *(void *)(qword_10248A128 + 8);
      }
      uint64_t v64 = *(void *)(v63 + 16);
      if (v64)
      {
        if (!*(void *)&v145[4]) {
          goto LABEL_197;
        }
      }
      else
      {
        uint64_t v64 = *(void *)(qword_10248A120 + 16);
        if (!*(void *)&v145[4]) {
LABEL_197:
        }
          uint64_t v58 = *(void *)(qword_10248A128 + 8);
      }
      uint64_t v65 = *(void *)(v58 + 16);
      if (!v65) {
        uint64_t v65 = *(void *)(qword_10248A120 + 16);
      }
      std::string::size_type v54 = *(void *)(v60 + 8);
      std::string::size_type v55 = *(void *)(v62 + 16);
      double v56 = *(char **)(v64 + 8);
      std::string::size_type v57 = *(void *)(v65 + 16);
LABEL_157:
      unint64_t v66 = v146;
      if (v9[112] != -1) {
        dispatch_once(&qword_102419380, &stru_1022DB688);
      }
      float v67 = v10[113];
      if (os_log_type_enabled(v67, OS_LOG_TYPE_INFO))
      {
        LODWORD(v156.__r_.__value_.__l.__data_) = 134284545;
        *(std::string::size_type *)((char *)v156.__r_.__value_.__r.__words + 4) = v54;
        WORD2(v156.__r_.__value_.__r.__words[1]) = 2049;
        *(std::string::size_type *)((char *)&v156.__r_.__value_.__r.__words[1] + 6) = v55;
        HIWORD(v156.__r_.__value_.__r.__words[2]) = 2049;
        double v157 = v56;
        *(_WORD *)uint64_t v158 = 2049;
        *(void *)&v158[2] = v57;
        __int16 v159 = 1026;
        int v160 = v66;
        _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_INFO, "#RTTMA,readRTAvlFileContent,minLat_deg,%{private}.3lf,minLon_deg,%{private}.3lf,maxLat_deg,%{private}.3lf,maxLon_deg,%{private}.3lf,numberOfTiles,%{public}d", (uint8_t *)&v156, 0x30u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&v156, 0x65CuLL);
        if (v9[112] != -1) {
          dispatch_once(&qword_102419380, &stru_1022DB688);
        }
        int v136 = 134284545;
        *(void *)double v137 = v54;
        *(_WORD *)&v137[8] = 2049;
        *(void *)&v137[10] = v55;
        *(_WORD *)&v137[18] = 2049;
        __int16 v138 = v56;
        *(_WORD *)double v139 = 2049;
        *(void *)&v139[2] = v57;
        __int16 v140 = 1026;
        int v141 = v66;
        double v101 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::readRTAvlFileContent(CLRayTracingTileAvailabilityInfo &)", "%s\n", (const char *)v101);
        if (v101 != &v156) {
          free(v101);
        }
      }
      float v68 = (std::string::size_type *)*((void *)a2 + 7);
      unint64_t v69 = *((void *)a2 + 8);
      if ((unint64_t)v68 >= v69)
      {
        uint64_t v71 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v68 - *v122) >> 3);
        unint64_t v72 = v71 + 1;
        if ((unint64_t)(v71 + 1) > 0x492492492492492) {
          sub_1001D7FD4();
        }
        unint64_t v73 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v69 - *v122) >> 3);
        if (2 * v73 > v72) {
          unint64_t v72 = 2 * v73;
        }
        if (v73 >= 0x249249249249249) {
          unint64_t v74 = 0x492492492492492;
        }
        else {
          unint64_t v74 = v72;
        }
        *(void *)uint64_t v158 = v121;
        float v75 = (char *)sub_10017EA6C(v121, v74);
        double v76 = (std::string::size_type *)&v75[56 * v71];
        v156.__r_.__value_.__r.__words[0] = (std::string::size_type)v75;
        v156.__r_.__value_.__l.__size_ = (std::string::size_type)v76;
        double v157 = &v75[56 * v77];
        *double v76 = v54;
        v76[1] = v55;
        v76[2] = (std::string::size_type)v56;
        v76[3] = v57;
        v76[5] = 0;
        v76[6] = 0;
        v76[4] = 0;
        v156.__r_.__value_.__r.__words[2] = (std::string::size_type)(v76 + 7);
        sub_100A794C0(v122, &v156);
        float v70 = (void *)*((void *)a2 + 7);
        sub_100737C7C((uint64_t)&v156);
      }
      else
      {
        *float v68 = v54;
        v68[1] = v55;
        v68[2] = (std::string::size_type)v56;
        v68[3] = v57;
        float v70 = v68 + 7;
        v68[5] = 0;
        v68[6] = 0;
        v68[4] = 0;
      }
      *((void *)a2 + 7) = v70;
      sub_100A74F64((char **)(*((void *)a2 + 6) + 56 * v53 + 32), v66);
      unsigned int v124 = v53;
      if (v66)
      {
        int v78 = 0;
        do
        {
          int v79 = v146;
          if ((int)v146 <= v78)
          {
            wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
            wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
            wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
            wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&v156);
            int v79 = v146;
          }
          uint64_t v80 = *(void *)(*(void *)&v145[12] + 8 * v78);
          if (v79 <= v78)
          {
            wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
            wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
            wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
            wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&v156);
          }
          uint64_t v81 = v80 & v46;
          std::string::size_type v82 = (*(void *)(*(void *)&v145[12] + 8 * v78) & v125) >> v126[9];
          uint64_t v83 = *((void *)v126 + 6) + 56 * v124;
          unint64_t v86 = *(void *)(v83 + 48);
          float v85 = (void *)(v83 + 48);
          unint64_t v84 = v86;
          int v88 = (char **)(v85 - 1);
          float v87 = (char *)*(v85 - 1);
          if ((unint64_t)v87 >= v86)
          {
            int v90 = (void **)(v85 - 2);
            float v91 = (char *)*(v85 - 2);
            uint64_t v92 = (v87 - v91) >> 4;
            unint64_t v93 = v92 + 1;
            if ((unint64_t)(v92 + 1) >> 60) {
              sub_1001D7FD4();
            }
            uint64_t v94 = v84 - (void)v91;
            if (v94 >> 3 > v93) {
              unint64_t v93 = v94 >> 3;
            }
            if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v95 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v95 = v93;
            }
            if (v95)
            {
              __int16 v96 = (char *)sub_1000C571C((uint64_t)v85, v95);
              float v87 = *v88;
              float v91 = (char *)*v90;
            }
            else
            {
              __int16 v96 = 0;
            }
            double v97 = &v96[16 * v92];
            *(void *)double v97 = v81;
            *((_DWORD *)v97 + 2) = v82;
            __int16 v98 = v97;
            if (v87 != v91)
            {
              do
              {
                uint64_t v99 = *((void *)v87 - 2);
                v87 -= 16;
                int v100 = *((_DWORD *)v87 + 2);
                *((void *)v98 - 2) = v99;
                v98 -= 16;
                *((_DWORD *)v98 + 2) = v100;
              }
              while (v87 != v91);
              float v91 = (char *)*v90;
            }
            *int v90 = v98;
            double v89 = v97 + 16;
            *int v88 = v97 + 16;
            *float v85 = &v96[16 * v95];
            if (v91) {
              operator delete(v91);
            }
          }
          else
          {
            *(void *)float v87 = v81;
            *((_DWORD *)v87 + 2) = v82;
            double v89 = v87 + 16;
          }
          *int v88 = v89;
          ++v78;
        }
        while (v78 != v66);
      }
      sub_10062CC1C((wireless_diagnostics::google::protobuf::MessageLite *)&v144);
      unsigned int v53 = v124 + 1;
      uint64_t v10 = &qword_102419000;
      uint64_t v9 = &qword_102419000;
      a2 = v126;
      if (v124 + 1 == v123) {
        goto LABEL_207;
      }
    }
  }
  if (v9[112] != -1) {
    dispatch_once(&qword_102419380, &stru_1022DB688);
  }
  __int16 v102 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    LOWORD(v156.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_INFO, "#RTTMA,readRTAvlFileContent,there is no valid region", (uint8_t *)&v156, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v156, 0x65CuLL);
    if (v9[112] != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    LOWORD(v144) = 0;
    double v119 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::readRTAvlFileContent(CLRayTracingTileAvailabilityInfo &)", "%s\n", (const char *)v119);
    if (v119 != &v156) {
      free(v119);
    }
  }
LABEL_207:
  sub_10062D594(&v127);
  BOOL v19 = v120;
LABEL_51:
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v133.__r_.__value_.__l.__data_);
  }
  sub_1001687EC(__p);
  if (SHIBYTE(v135) < 0) {
    operator delete(v134[0]);
  }
  return v19;
}

void sub_100A74D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  sub_1001687EC(&a57);
  if (a39 < 0) {
    operator delete(a34);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100A74EA4(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493) {
      sub_1001D7FD4();
    }
    uint64_t v5 = a1[1] - *a1;
    unsigned __int8 v7[4] = result;
    v7[0] = sub_10017EA6C(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 56 * v6;
    sub_100A794C0(a1, v7);
    return sub_100737C7C((uint64_t)v7);
  }
  return result;
}

void sub_100A74F50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100737C7C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100A74F64(char **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v6 = (char *)sub_1000C571C(v3, a2);
    std::string::size_type v7 = &v6[v5];
    uint64_t v9 = &v6[16 * v8];
    BOOL v11 = *a1;
    uint64_t v10 = a1[1];
    int v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 2);
        v10 -= 16;
        int v14 = *((_DWORD *)v10 + 2);
        *((void *)v12 - 2) = v13;
        v12 -= 16;
        *((_DWORD *)v12 + 2) = v14;
      }
      while (v10 != v11);
      uint64_t v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t sub_100A75010(uint64_t a1, double *a2, double *a3)
{
  if (!sub_1000EF668(*a2, *a3))
  {
    double v8 = *a2;
    if ((*(void *)a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (double v9 = *a3, (*(void *)a3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000))
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022DB688);
      }
      uint64_t v10 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
      {
        BOOL v11 = (*(void *)a2 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        BOOL v12 = (*(void *)a3 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        *(_DWORD *)uint64_t buf = 67240448;
        LODWORD(v22[0]) = v11;
        WORD2(v22[0]) = 1026;
        *(_DWORD *)((char *)v22 + 6) = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#RTTMA,#Error,is latitude finite,%{public}d,is longitude finite,%{public}d", buf, 0xEu);
      }
      BOOL v13 = sub_10013D1A0(115, 0);
      uint64_t result = 0;
      if (!v13) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1)
      {
LABEL_37:
        uint64_t v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLRayTracingTileAvailabilityManager::isLatLonValid(const double &, const double &)", "%s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
        return 0;
      }
    }
    else if (v8 < -90.0 || v8 > 90.0)
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022DB688);
      }
      int v14 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
      {
        double v15 = *a2;
        *(_DWORD *)uint64_t buf = 134283521;
        *(double *)uint64_t v22 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#RTTMA,#Error,invalid range,lat,%{private}.7lf", buf, 0xCu);
      }
      BOOL v16 = sub_10013D1A0(115, 0);
      uint64_t result = 0;
      if (!v16) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1) {
        goto LABEL_37;
      }
    }
    else
    {
      if (v9 >= -180.0 && v9 <= 180.0) {
        return 1;
      }
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022DB688);
      }
      uint64_t v17 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
      {
        double v18 = *a2;
        *(_DWORD *)uint64_t buf = 134283521;
        *(double *)uint64_t v22 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#RTTMA,#Error,invalid range,lat,%{private}.7lf", buf, 0xCu);
      }
      BOOL v19 = sub_10013D1A0(115, 0);
      uint64_t result = 0;
      if (!v19) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1) {
        goto LABEL_37;
      }
    }
LABEL_40:
    dispatch_once(&qword_102419380, &stru_1022DB688);
    goto LABEL_37;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022DB688);
  }
  uint64_t v5 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#RTTMA,#Error,null island", buf, 2u);
  }
  BOOL v6 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_37;
    }
    goto LABEL_40;
  }
  return result;
}

uint64_t sub_100A75588(uint64_t a1, double *a2, double *a3, uint64_t a4, uint64_t a5)
{
  if ((sub_100A75010(a1, a2, a3) & 1) == 0)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    BOOL v19 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#RTTMA,#Error,getRegionInfoFromLatLon,invalid location", buf, 2u);
    }
    BOOL v20 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (!v20) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLRayTracingTileAvailabilityManager::getRegionInfoFromLatLon(const double &, const double &, const CLRayTracingTileAvailabilityInfo &, CLRayTracingTileAvailabilityRegionInfo &)", "%s\n", v22);
    if (v22 != (char *)buf) {
      free(v22);
    }
    return 0;
  }
  uint64_t v10 = *(void *)(a4 + 48);
  uint64_t v9 = *(void *)(a4 + 56);
  if (v10 == v9) {
    return 0;
  }
  while (1)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    BOOL v11 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      double v12 = *(double *)v10;
      uint64_t v13 = *(void *)(v10 + 8);
      uint64_t v14 = *(void *)(v10 + 16);
      uint64_t v15 = *(void *)(v10 + 24);
      double v16 = *a2;
      double v17 = *a3;
      *(_DWORD *)uint64_t buf = 134284801;
      double v41 = v12;
      __int16 v42 = 2049;
      uint64_t v43 = v13;
      __int16 v44 = 2049;
      uint64_t v45 = v14;
      __int16 v46 = 2049;
      uint64_t v47 = v15;
      __int16 v48 = 2049;
      double v49 = v16;
      __int16 v50 = 2049;
      double v51 = v17;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "#RTTMA,getRegionInfoFromLatLon,swLat,%{private}.3lf,swLon,%{private}.3lf,neLat,%{private}.3lf,neLon,%{private}.3lf,lat,%{private}.3lf,lon,%{private}.3lf", buf, 0x3Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022DB688);
      }
      double v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::getRegionInfoFromLatLon(const double &, const double &, const CLRayTracingTileAvailabilityInfo &, CLRayTracingTileAvailabilityRegionInfo &)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    if (*a2 >= *(double *)v10
      && *a2 <= *(double *)(v10 + 16)
      && *a3 >= *(double *)(v10 + 8)
      && *a3 <= *(double *)(v10 + 24))
    {
      break;
    }
    v10 += 56;
    if (v10 == v9) {
      return 0;
    }
  }
  long long v23 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)a5 = *(_OWORD *)v10;
  *(_OWORD *)(a5 + 16) = v23;
  if (v10 != a5) {
    sub_100A7962C((char *)(a5 + 32), *(char **)(v10 + 32), *(void *)(v10 + 40), (uint64_t)(*(void *)(v10 + 40) - *(void *)(v10 + 32)) >> 4);
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022DB688);
  }
  uint64_t v24 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    double v25 = *(double *)v10;
    uint64_t v26 = *(void *)(v10 + 8);
    uint64_t v27 = *(void *)(v10 + 16);
    uint64_t v28 = *(void *)(v10 + 24);
    double v29 = *a2;
    double v30 = *a3;
    *(_DWORD *)uint64_t buf = 134284801;
    double v41 = v25;
    __int16 v42 = 2049;
    uint64_t v43 = v26;
    __int16 v44 = 2049;
    uint64_t v45 = v27;
    __int16 v46 = 2049;
    uint64_t v47 = v28;
    __int16 v48 = 2049;
    double v49 = v29;
    __int16 v50 = 2049;
    double v51 = v30;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "#RTTMA,getRegionInfoFromLatLon,swLat,%{private}.3lf,swLon,%{private}.3lf,neLat,%{private}.3lf,neLon,%{private}.3lf,lat,%{private}.3lf,lon,%{private}.3lf", buf, 0x3Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    std::string::size_type v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::getRegionInfoFromLatLon(const double &, const double &, const CLRayTracingTileAvailabilityInfo &, CLRayTracingTileAvailabilityRegionInfo &)", "%s\n", v38);
    if (v38 != (char *)buf) {
      free(v38);
    }
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022DB688);
  }
  int64_t v31 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    double v32 = *(double *)a5;
    uint64_t v33 = *(void *)(a5 + 8);
    uint64_t v34 = *(void *)(a5 + 16);
    uint64_t v35 = *(void *)(a5 + 24);
    double v36 = *a2;
    double v37 = *a3;
    *(_DWORD *)uint64_t buf = 134284801;
    double v41 = v32;
    __int16 v42 = 2049;
    uint64_t v43 = v33;
    __int16 v44 = 2049;
    uint64_t v45 = v34;
    __int16 v46 = 2049;
    uint64_t v47 = v35;
    __int16 v48 = 2049;
    double v49 = v36;
    __int16 v50 = 2049;
    double v51 = v37;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "#RTTMA,getRegionInfoFromLatLon,swLat,%{private}.3lf,swLon,%{private}.3lf,neLat,%{private}.3lf,neLon,%{private}.3lf,lat,%{private}.3lf,lon,%{private}.3lf", buf, 0x3Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    int v39 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::getRegionInfoFromLatLon(const double &, const double &, const CLRayTracingTileAvailabilityInfo &, CLRayTracingTileAvailabilityRegionInfo &)", "%s\n", v39);
    if (v39 != (char *)buf) {
      free(v39);
    }
  }
  return 1;
}

void sub_100A75CFC(uint64_t a1, uint64_t *a2)
{
  char v17 = 0;
  uint64_t v16 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v21 = 0;
  if (sub_100A73520(a1, (int *)&v16))
  {
    uint64_t v4 = *a2;
    uint64_t v3 = a2[1];
    if (*a2 != v3)
    {
      do
      {
        for (uint64_t i = v20; i != *((void *)&v20 + 1); i += 56)
        {
          uint64_t v6 = *(void *)(i + 32);
          uint64_t v7 = *(void *)(i + 40);
          if (v6 != v7)
          {
            while (*(void *)v6 != *(void *)(v4 + 24))
            {
              v6 += 16;
              if (v6 == v7) {
                goto LABEL_8;
              }
            }
            *(_DWORD *)(v4 + 40) = *(_DWORD *)(v6 + 8);
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_1022DB688);
            }
            double v8 = qword_102419388;
            if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
            {
              int v9 = *(_DWORD *)(v4 + 40);
              uint64_t v10 = *(void *)(v4 + 24);
              *(_DWORD *)uint64_t buf = 67240448;
              *(_DWORD *)&uint8_t buf[4] = v9;
              __int16 v27 = 2050;
              uint64_t v28 = v10;
              _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "#RTTMA,getRayTracingTileAvailabilityFromTileId,tileId,%{public}u,tile.tileIndex,%{public}llu,", buf, 0x12u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419380 != -1) {
                dispatch_once(&qword_102419380, &stru_1022DB688);
              }
              int v11 = *(_DWORD *)(v4 + 40);
              uint64_t v12 = *(void *)(v4 + 24);
              int v22 = 67240448;
              int v23 = v11;
              __int16 v24 = 2050;
              uint64_t v25 = v12;
              uint64_t v13 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::getRayTracingTileAvailabilityFromTileId(std::vector<CLRayTracingTileManager_Type::RayTracingTileOnDiskInfo> &)", "%s\n", v13);
              if (v13 != (char *)buf) {
                free(v13);
              }
            }
            break;
          }
LABEL_8:
          ;
        }
        v4 += 96;
      }
      while (v4 != v3);
    }
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    uint64_t v14 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#RTTMA,getRayTracingTileAvailabilityFromTileId,AVL file read error", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022DB688);
      }
      LOWORD(v22) = 0;
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLRayTracingTileAvailabilityManager::getRayTracingTileAvailabilityFromTileId(std::vector<CLRayTracingTileManager_Type::RayTracingTileOnDiskInfo> &)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  *(void *)uint64_t buf = &v20;
  sub_100129808((void ***)buf);
}

void sub_100A760B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27)
{
  a27 = (void **)&a20;
  sub_100129808(&a27);
  _Unwind_Resume(a1);
}

BOOL sub_100A760DC(uint64_t a1, double *a2, double *a3, unsigned int *a4, uint64_t *a5, char *a6)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022DB688);
  }
  int v11 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    double v12 = *a2;
    double v13 = *a3;
    *(_DWORD *)uint64_t buf = 134283777;
    *(double *)&uint8_t buf[4] = v12;
    __int16 v76 = 2049;
    double v77 = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#RTTMA,isRayTracingTileAvailable,lat,%{private}.3lf,lon,%{private}.3lf", buf, 0x16u);
  }
  uint64_t v14 = sub_10013D1A0(115, 2);
  if (v14)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    uint64_t v51 = *(void *)a2;
    uint64_t v52 = *(void *)a3;
    *(_DWORD *)unint64_t v69 = 134283777;
    *(void *)&v69[4] = v51;
    __int16 v70 = 2049;
    *(void *)uint64_t v71 = v52;
    unsigned int v53 = (char *)_os_log_send_and_compose_impl();
    uint64_t v14 = sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::isRayTracingTileAvailable(const double &, const double &, const uint32_t &, uint64_t &, std::vector<CLRayTracingTileAvailabilityTileInfo> &)", "%s\n", v53);
    if (v53 != buf) {
      free(v53);
    }
  }
  if (sub_100A75010(v14, a2, a3))
  {
    v69[8] = 0;
    *(void *)unint64_t v69 = 0;
    *(_OWORD *)&v71[2] = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    uint64_t v74 = 0;
    BOOL v15 = sub_100A73520(a1, (int *)v69);
    if (v15)
    {
      uint64_t v62 = 0;
      *(_OWORD *)std::string __p = 0u;
      memset(v60, 0, sizeof(v60));
      if (sub_100A75588(v15, a2, a3, (uint64_t)v69, (uint64_t)v60))
      {
        buf[0] = BYTE12(v72);
        sub_100C838D8(a2, a3, buf);
        *(void *)a1 = v16;
        *(unsigned char *)(a1 + 8) = v17;
        *a5 = sub_100C83908(a1);
        sub_100C83924(a1, *a4, (uint64_t)&v58);
        long long v19 = (void **)(a1 + 16);
        long long v18 = *(char **)(a1 + 16);
        *(void *)(a1 + 24) = v18;
        long long v20 = v58;
        if (v58 == v59)
        {
          uint64_t v49 = (uint64_t)v18;
        }
        else
        {
          do
          {
            uint64_t v21 = sub_100C83908((uint64_t)(v20 + 4));
            int v22 = __p[0];
            if (__p[0] != __p[1])
            {
              uint64_t v23 = v21;
              while (*(void *)v22 != v21)
              {
                v22 += 4;
                if (v22 == __p[1]) {
                  goto LABEL_37;
                }
              }
              int v24 = v22[2];
              if (qword_102419380 != -1) {
                dispatch_once(&qword_102419380, &stru_1022DB688);
              }
              uint64_t v25 = qword_102419388;
              if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
              {
                uint64_t v26 = *a5;
                *(_DWORD *)uint64_t buf = 134349568;
                *(void *)&uint8_t buf[4] = v26;
                __int16 v76 = 2050;
                double v77 = *(double *)&v23;
                __int16 v78 = 1026;
                int v79 = v24;
                _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "#RTTMA,isRayTracingTileAvailable,tileId,%{public}llu,tile.tileIndex,%{public}llu,version,%{public}d", buf, 0x1Cu);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419380 != -1) {
                  dispatch_once(&qword_102419380, &stru_1022DB688);
                }
                uint64_t v43 = *a5;
                int v63 = 134349568;
                uint64_t v64 = v43;
                __int16 v65 = 2050;
                uint64_t v66 = v23;
                __int16 v67 = 1026;
                int v68 = v24;
                __int16 v44 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::isRayTracingTileAvailable(const double &, const double &, const uint32_t &, uint64_t &, std::vector<CLRayTracingTileAvailabilityTileInfo> &)", "%s\n", v44);
                if (v44 != buf) {
                  free(v44);
                }
              }
              uint64_t v28 = *(char **)(a1 + 24);
              unint64_t v27 = *(void *)(a1 + 32);
              if ((unint64_t)v28 >= v27)
              {
                double v30 = (char *)*v19;
                uint64_t v31 = (v28 - (unsigned char *)*v19) >> 4;
                unint64_t v32 = v31 + 1;
                if ((unint64_t)(v31 + 1) >> 60) {
                  sub_1001D7FD4();
                }
                uint64_t v33 = v27 - (void)v30;
                if (v33 >> 3 > v32) {
                  unint64_t v32 = v33 >> 3;
                }
                if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v34 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v34 = v32;
                }
                if (v34)
                {
                  uint64_t v35 = (char *)sub_1000C571C(a1 + 32, v34);
                  double v30 = *(char **)(a1 + 16);
                  uint64_t v28 = *(char **)(a1 + 24);
                }
                else
                {
                  uint64_t v35 = 0;
                }
                double v36 = &v35[16 * v31];
                *(void *)double v36 = v23;
                *((_DWORD *)v36 + 2) = v24;
                double v37 = v36;
                if (v28 != v30)
                {
                  do
                  {
                    uint64_t v38 = *((void *)v28 - 2);
                    v28 -= 16;
                    int v39 = *((_DWORD *)v28 + 2);
                    *((void *)v37 - 2) = v38;
                    v37 -= 16;
                    *((_DWORD *)v37 + 2) = v39;
                  }
                  while (v28 != v30);
                  double v30 = (char *)*v19;
                }
                double v29 = v36 + 16;
                *(void *)(a1 + 16) = v37;
                *(void *)(a1 + 24) = v36 + 16;
                *(void *)(a1 + 32) = &v35[16 * v34];
                if (v30) {
                  operator delete(v30);
                }
              }
              else
              {
                *(void *)uint64_t v28 = v23;
                *((_DWORD *)v28 + 2) = v24;
                double v29 = v28 + 16;
              }
              *(void *)(a1 + 24) = v29;
            }
LABEL_37:
            int v40 = v20[1];
            if (v40)
            {
              do
              {
                double v41 = (void **)v40;
                int v40 = (void *)*v40;
              }
              while (v40);
            }
            else
            {
              do
              {
                double v41 = (void **)v20[2];
                BOOL v42 = *v41 == v20;
                long long v20 = v41;
              }
              while (!v42);
            }
            long long v20 = v41;
          }
          while (v41 != v59);
          long long v18 = *(char **)(a1 + 16);
          uint64_t v49 = *(void *)(a1 + 24);
        }
        if (v19 != (void **)a6)
        {
          sub_100A7962C(a6, v18, v49, (v49 - (uint64_t)v18) >> 4);
          long long v18 = *(char **)(a1 + 16);
          uint64_t v49 = *(void *)(a1 + 24);
        }
        BOOL v46 = v49 != (void)v18;
        sub_1000F5BB0((uint64_t)&v58, v59[0]);
      }
      else
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022DB688);
        }
        __int16 v48 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "#RTTMA,isRayTracingTileAvailable,no valid region in AVL file", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022DB688);
          }
          LOWORD(v63) = 0;
          double v56 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::isRayTracingTileAvailable(const double &, const double &, const uint32_t &, uint64_t &, std::vector<CLRayTracingTileAvailabilityTileInfo> &)", "%s\n", v56);
          if (v56 != buf) {
            free(v56);
          }
        }
        BOOL v46 = 0;
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    else
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022DB688);
      }
      uint64_t v47 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "#RTTMA,isRayTracingTileAvailable,AVL file read error", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022DB688);
        }
        LOWORD(v60[0]) = 0;
        std::string::size_type v55 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRayTracingTileAvailabilityManager::isRayTracingTileAvailable(const double &, const double &, const uint32_t &, uint64_t &, std::vector<CLRayTracingTileAvailabilityTileInfo> &)", "%s\n", v55);
        if (v55 != buf) {
          free(v55);
        }
      }
      BOOL v46 = 0;
    }
    *(void *)uint64_t buf = &v73;
    sub_100129808((void ***)buf);
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    uint64_t v45 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "#RTTMA,#Error,isRayTracingTileAvailable,invalid location", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022DB688);
      }
      *(_WORD *)unint64_t v69 = 0;
      std::string::size_type v54 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLRayTracingTileAvailabilityManager::isRayTracingTileAvailable(const double &, const double &, const uint32_t &, uint64_t &, std::vector<CLRayTracingTileAvailabilityTileInfo> &)", "%s\n", v54);
      if (v54 != buf) {
        free(v54);
      }
    }
    return 0;
  }
  return v46;
}

void sub_100A76A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t *a41)
{
  if (__p) {
    operator delete(__p);
  }
  a41 = &a37;
  sub_100129808((void ***)&a41);
  _Unwind_Resume(a1);
}

void sub_100A76AE4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000C7F88(buf);
  uint64_t v4 = *(void *)&buf[0];
  uint64_t v5 = (_OWORD *)(a1 + 424);
  if (*(char *)(a1 + 447) < 0)
  {
    sub_1000DC48C(&__p, *(void **)(a1 + 424), *(void *)(a1 + 432));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v5;
    __p.__r_.__value_.__r.__words[2] = *(void *)(a1 + 440);
  }
  sub_1005B66DC(v4, "CLRayTracingAVLFileNameCompressed", &__p, (uint64_t)v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  uint64_t v6 = (void *)HIBYTE(v14);
  char v7 = HIBYTE(v14);
  if (v14 < 0) {
    uint64_t v6 = v13[1];
  }
  if (!v6)
  {
    if (*(char *)(a1 + 447) < 0)
    {
      sub_1000DC48C((unsigned char *)a2, *(void **)(a1 + 424), *(void *)(a1 + 432));
      if ((v14 & 0x8000000000000000) == 0) {
        return;
      }
    }
    else
    {
      *(_OWORD *)a2 = *v5;
      *(void *)(a2 + 16) = *(void *)(a1 + 440);
      if ((v7 & 0x80) == 0) {
        return;
      }
    }
    operator delete(v13[0]);
    return;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022DB688);
  }
  double v8 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v9 = v13;
    if (v14 < 0) {
      int v9 = (void **)v13[0];
    }
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#RTTMA,getRTCompressedAvailabilityFileName defaults,fileName,%{public}s", (uint8_t *)buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    uint64_t v10 = v13;
    if (v14 < 0) {
      uint64_t v10 = (void **)v13[0];
    }
    int v15 = 136446210;
    uint64_t v16 = v10;
    int v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "std::string CLRayTracingTileAvailabilityManager::getRTCompressedAvailabilityFileName() const", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  *(_OWORD *)a2 = *(_OWORD *)v13;
  *(void *)(a2 + 16) = v14;
}

void sub_100A76D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100A76DE4@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[487] < 0) {
    return (char *)sub_1000DC48C((unsigned char *)a2, *((void **)result + 58), *((void *)result + 59));
  }
  *(_OWORD *)a2 = *((_OWORD *)result + 29);
  *(void *)(a2 + 16) = *((void *)result + 60);
  return result;
}

void sub_100A76E10(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = (std::mutex *)(a1 + 312);
  std::mutex::lock((std::mutex *)(a1 + 312));
  if (a2)
  {
    switch(a3)
    {
      case 0:
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022DB688);
        }
        char v7 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#RTTMA,onRTAvlFileUpdated,avl download status,NONE", (uint8_t *)buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            goto LABEL_153;
          }
          goto LABEL_9;
        }
        break;
      case 1:
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022DB688);
        }
        long long v18 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#RTTMA,onRTAvlFileUpdated,avl download status,STARTED", (uint8_t *)buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022DB688);
          }
          LOWORD(v49[0]) = 0;
          uint64_t v35 = (std::string *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onRTAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", (const char *)v35);
          if (v35 != buf) {
            free(v35);
          }
        }
        *(CFAbsoluteTime *)(a1 + 448) = CFAbsoluteTimeGetCurrent();
        break;
      case 2:
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022DB688);
        }
        uint64_t v10 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#RTTMA,onRTAvlFileUpdated,avl download status,COMPLETED", (uint8_t *)buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022DB688);
          }
          LOWORD(v49[0]) = 0;
          unint64_t v34 = (std::string *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onRTAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", (const char *)v34);
          if (v34 != buf) {
            free(v34);
          }
        }
        sub_1005C768C(a2, (uint64_t)v49);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022DB688);
        }
        int v11 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          double v12 = v49;
          if (v50 < 0) {
            double v12 = (void **)v49[0];
          }
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136380675;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#RTTMA,onRTAvlFileUpdated,avl downloaded,%{private}s", (uint8_t *)buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022DB688);
          }
          double v36 = v49;
          if (v50 < 0) {
            double v36 = (void **)v49[0];
          }
          LODWORD(v47[0]) = 136380675;
          *(void **)((char *)v47 + 4) = v36;
          double v37 = (std::string *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onRTAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", (const char *)v37);
          if (v37 != buf) {
            free(v37);
          }
        }
        if (v50 >= 0) {
          double v13 = v49;
        }
        else {
          double v13 = (void **)v49[0];
        }
        if (!sub_1004BF004((const char *)v13, 4))
        {
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022DB688);
          }
          uint64_t v14 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
          {
            int v15 = v49;
            if (v50 < 0) {
              int v15 = (void **)v49[0];
            }
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136380675;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v15;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "#RTTMA,#Warning,onRTAvlFileUpdated,Cannot set protection class for Pressure avl file,%{private}s", (uint8_t *)buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_1022DB688);
            }
            BOOL v42 = v49;
            if (v50 < 0) {
              BOOL v42 = (void **)v49[0];
            }
            LODWORD(v47[0]) = 136380675;
            *(void **)((char *)v47 + 4) = v42;
            uint64_t v43 = (std::string *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onRTAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", (const char *)v43);
            if (v43 != buf) {
              free(v43);
            }
          }
        }
        uint64_t v16 = (char *)sub_1000A6958();
        sub_1000A5670(v16, (uint64_t)buf);
        if (*(char *)(a1 + 423) < 0)
        {
          sub_1000DC48C(__p, *(void **)(a1 + 400), *(void *)(a1 + 408));
        }
        else
        {
          *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 400);
          *(void *)&__p[16] = *(void *)(a1 + 416);
        }
        if (__p[23] >= 0) {
          long long v20 = __p;
        }
        else {
          long long v20 = *(const std::string::value_type **)__p;
        }
        if (__p[23] >= 0) {
          std::string::size_type v21 = __p[23];
        }
        else {
          std::string::size_type v21 = *(void *)&__p[8];
        }
        int v22 = std::string::append(buf, v20, v21);
        long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        int64_t v48 = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v47 = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf[0].__r_.__value_.__l.__data_);
        }
        *(CFAbsoluteTime *)(a1 + 448) = CFAbsoluteTimeGetCurrent();
        if (v50 >= 0) {
          int v24 = v49;
        }
        else {
          int v24 = (void **)v49[0];
        }
        if (v48 >= 0) {
          uint64_t v25 = v47;
        }
        else {
          uint64_t v25 = (void **)v47[0];
        }
        sub_1004BC3D8((const char *)v24, (const char *)v25);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022DB688);
        }
        uint64_t v26 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          unint64_t v27 = v49;
          if (v50 < 0) {
            unint64_t v27 = (void **)v49[0];
          }
          uint64_t v28 = v47;
          if (v48 < 0) {
            uint64_t v28 = (void **)v47[0];
          }
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 136380931;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v28;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "#RTTMA,onRTAvlFileUpdated,avl file decompressed,%{private}s,to,%{private}s", (uint8_t *)buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022DB688);
          }
          uint64_t v38 = v49;
          if (v50 < 0) {
            uint64_t v38 = (void **)v49[0];
          }
          int v39 = v47;
          if (v48 < 0) {
            int v39 = (void **)v47[0];
          }
          *(_DWORD *)std::string __p = 136380931;
          *(void *)&__p[4] = v38;
          *(_WORD *)&__p[12] = 2081;
          *(void *)&__p[14] = v39;
          int v40 = (std::string *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onRTAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", (const char *)v40);
          if (v40 != buf) {
            free(v40);
          }
        }
        if (v48 >= 0) {
          double v29 = v47;
        }
        else {
          double v29 = (void **)v47[0];
        }
        if (!sub_1004BF004((const char *)v29, 4))
        {
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022DB688);
          }
          double v30 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
          {
            uint64_t v31 = v47;
            if (v48 < 0) {
              uint64_t v31 = (void **)v47[0];
            }
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 136380675;
            *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v31;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "#RTTMA,#Warning,onRTAvlFileUpdated,Cannot set protection class for Pressure decompressed avl file,%{private}s", (uint8_t *)buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_1022DB688);
            }
            __int16 v44 = v47;
            if (v48 < 0) {
              __int16 v44 = (void **)v47[0];
            }
            *(_DWORD *)std::string __p = 136380675;
            *(void *)&__p[4] = v44;
            uint64_t v45 = (std::string *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onRTAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", (const char *)v45);
            if (v45 != buf) {
              free(v45);
            }
          }
        }
        BOOL v32 = sub_100A729D0(a1);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022DB688);
        }
        uint64_t v33 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 67240192;
          HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v32;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "#RTTMA,onRTAvlFileUpdated,is availability file valid,%{public}d", (uint8_t *)buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022DB688);
          }
          *(_DWORD *)std::string __p = 67240192;
          *(_DWORD *)&__p[4] = v32;
          double v41 = (std::string *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onRTAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", (const char *)v41);
          if (v41 != buf) {
            free(v41);
          }
        }
        if (!v32) {
          sub_100A77F00(a1);
        }
        if (SHIBYTE(v48) < 0) {
          operator delete(v47[0]);
        }
        if (v50 < 0) {
          operator delete(v49[0]);
        }
        break;
      case 3:
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022DB688);
        }
        char v17 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#RTTMA,#Warning,onRTAvlFileUpdated,avl download status,FAILED", (uint8_t *)buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
LABEL_153:
          }
            dispatch_once(&qword_102419380, &stru_1022DB688);
LABEL_9:
          LOWORD(v49[0]) = 0;
          double v8 = (std::string *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onRTAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", (const char *)v8);
          goto LABEL_64;
        }
        break;
      default:
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022DB688);
        }
        long long v19 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 67240192;
          HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = a3;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#RTTMA,#Warning,onRTAvlFileUpdated,avl download status,%{public}d", (uint8_t *)buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022DB688);
          }
          LODWORD(v49[0]) = 67240192;
          HIDWORD(v49[0]) = a3;
          double v8 = (std::string *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onRTAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", (const char *)v8);
          goto LABEL_64;
        }
        break;
    }
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    int v9 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#RTTMA,#Error,onRTAvlFileUpdated,null pointer", (uint8_t *)buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022DB688);
      }
      LOWORD(v49[0]) = 0;
      double v8 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLRayTracingTileAvailabilityManager::onRTAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", (const char *)v8);
LABEL_64:
      if (v8 != buf) {
        free(v8);
      }
    }
  }
  std::mutex::unlock(v6);
}

void sub_100A77E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  std::mutex::unlock(v37);
  _Unwind_Resume(a1);
}

void sub_100A77F00(uint64_t a1)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022DB688);
  }
  int v2 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#RTTMA,#Warning,deleteRTAvailabilityFile", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    LOWORD(__p[0]) = 0;
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::deleteRTAvailabilityFile()", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  uint64_t v3 = (char *)sub_1000A6958();
  sub_1000A5670(v3, (uint64_t)buf);
  if (*(char *)(a1 + 423) < 0) {
    sub_1000DC48C(&__dst, *(void **)(a1 + 400), *(void *)(a1 + 408));
  }
  else {
    __uuid_t dst = *(std::string *)(a1 + 400);
  }
  if ((v21 & 0x80u) == 0) {
    uint64_t v4 = buf;
  }
  else {
    uint64_t v4 = *(uint8_t **)buf;
  }
  if ((v21 & 0x80u) == 0) {
    std::string::size_type v5 = v21;
  }
  else {
    std::string::size_type v5 = v20;
  }
  uint64_t v6 = std::string::insert(&__dst, 0, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t v18 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (v18 >= 0) {
    double v8 = __p;
  }
  else {
    double v8 = (void **)__p[0];
  }
  sub_1004BEB14((const char *)v8);
  sub_100A76AE4(a1, (uint64_t)&v15);
  if ((v21 & 0x80u) == 0) {
    int v9 = buf;
  }
  else {
    int v9 = *(uint8_t **)buf;
  }
  if ((v21 & 0x80u) == 0) {
    std::string::size_type v10 = v21;
  }
  else {
    std::string::size_type v10 = v20;
  }
  int v11 = std::string::insert(&v15, 0, (const std::string::value_type *)v9, v10);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_uuid_t dst = &__dst;
  }
  else {
    p_uuid_t dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  sub_1004BEB14((const char *)p_dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  if ((char)v21 < 0) {
    operator delete(*(void **)buf);
  }
}

void sub_100A781D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A78258(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (*a3 == 2)
  {
    sub_1000E9354(v52);
    if (sub_100012960(a4, "RayTracingConfigurations_v1", v52))
    {
      uint64_t v6 = (const char **)(a1 + 464);
      if (!sub_1004D1284((uint64_t)v52, "RayTracingServerURL", (std::string *)(a1 + 464)))
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022DB688);
        }
        long long v7 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#RTTMA,#Warning,MA-OTA,RayTracing URL config read error", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022DB688);
          }
          LOWORD(v53) = 0;
          int v39 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v39);
          if (v39 != (char *)buf) {
            free(v39);
          }
        }
      }
      if ((sub_1000A699C((uint64_t)v52, "RayTracingAvlExpirationAge", (void *)(a1 + 456)) & 1) == 0)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022DB688);
        }
        double v8 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "#RTTMA,#Warning,MA-OTA,AVL file exp age config read error", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022DB688);
          }
          LOWORD(v53) = 0;
          int v40 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v40);
          if (v40 != (char *)buf) {
            free(v40);
          }
        }
        *(void *)(a1 + 456) = 0x415BAF8000000000;
      }
      int v9 = (unsigned __int8 *)(a1 + 488);
      if ((sub_1000D2988((uint64_t)v52, "RayTracingFlushRTData", (BOOL *)(a1 + 488)) & 1) == 0)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022DB688);
        }
        std::string::size_type v10 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "#RTTMA,#Warning,MA-OTA,RayTracing flush config read error", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022DB688);
          }
          LOWORD(v53) = 0;
          double v41 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v41);
          if (v41 != (char *)buf) {
            free(v41);
          }
        }
      }
      int v11 = (uint64_t *)(a1 + 496);
      if ((sub_1000A699C((uint64_t)v52, "RayTracingFlushRTDataBeforeTime", (void *)(a1 + 496)) & 1) == 0)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022DB688);
        }
        long long v12 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "#RTTMA,#Warning,MA-OTA,flush time read error", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022DB688);
          }
          LOWORD(v53) = 0;
          BOOL v42 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v42);
          if (v42 != (char *)buf) {
            free(v42);
          }
        }
      }
      if ((sub_1000A699C((uint64_t)v52, "RayTracingAvlDownloadRateOnWifi", (void *)(a1 + 504)) & 1) == 0)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022DB688);
        }
        double v13 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "#RTTMA,#Warning,MA-OTA,wifi download rate read error", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022DB688);
          }
          LOWORD(v53) = 0;
          uint64_t v43 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v43);
          if (v43 != (char *)buf) {
            free(v43);
          }
        }
      }
      uint64_t v14 = (uint64_t *)(a1 + 512);
      if ((sub_1000A699C((uint64_t)v52, "RayTracingAvlDownloadRateOnCell", (void *)(a1 + 512)) & 1) == 0)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022DB688);
        }
        std::string v15 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "#RTTMA,#Warning,MA-OTA,cell download rate read error", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022DB688);
          }
          LOWORD(v53) = 0;
          __int16 v44 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v44);
          if (v44 != (char *)buf) {
            free(v44);
          }
        }
      }
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022DB688);
      }
      uint64_t v16 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
      {
        uint64_t v17 = *(void *)(a1 + 456);
        if (*(char *)(a1 + 487) < 0)
        {
          if (*(void *)(a1 + 472)) {
            int64_t v18 = *v6;
          }
          else {
            int64_t v18 = "default";
          }
        }
        else if (*(unsigned char *)(a1 + 487))
        {
          int64_t v18 = (const char *)(a1 + 464);
        }
        else
        {
          int64_t v18 = "default";
        }
        int v26 = *v9;
        uint64_t v27 = *v11;
        uint64_t v28 = *v14;
        *(_DWORD *)uint64_t buf = 134350338;
        uint64_t v66 = v17;
        __int16 v67 = 2082;
        int v68 = v18;
        __int16 v69 = 1026;
        int v70 = v26;
        __int16 v71 = 2050;
        uint64_t v72 = v27;
        __int16 v73 = 2050;
        uint64_t v74 = v28;
        __int16 v75 = 2050;
        uint64_t v76 = v28;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "#RTTMA,MA-OTA,AvlFileExpAge,%{public}.3lff,Url,%{public}s,flush,%{public}d,flushTime,%{public}.3lf,WifiDownloadrate,%{public}.3lf,CellDownloadrate,%{public}.3lf", buf, 0x3Au);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022DB688);
        }
        uint64_t v35 = *(void *)(a1 + 456);
        if (*(char *)(a1 + 487) < 0)
        {
          if (*(void *)(a1 + 472)) {
            double v36 = *v6;
          }
          else {
            double v36 = "default";
          }
        }
        else if (*(unsigned char *)(a1 + 487))
        {
          double v36 = (const char *)(a1 + 464);
        }
        else
        {
          double v36 = "default";
        }
        int v45 = *v9;
        uint64_t v46 = *v11;
        uint64_t v47 = *v14;
        int v53 = 134350338;
        uint64_t v54 = v35;
        __int16 v55 = 2082;
        double v56 = v36;
        __int16 v57 = 1026;
        int v58 = v45;
        __int16 v59 = 2050;
        uint64_t v60 = v46;
        __int16 v61 = 2050;
        uint64_t v62 = v47;
        __int16 v63 = 2050;
        uint64_t v64 = v47;
        int64_t v48 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v48);
        if (v48 != (char *)buf) {
          free(v48);
        }
      }
      sub_100A71778(a1);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022DB688);
      }
      double v29 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v30 = *(void *)(a1 + 456);
        if (*(char *)(a1 + 487) < 0)
        {
          if (*(void *)(a1 + 472)) {
            uint64_t v31 = *v6;
          }
          else {
            uint64_t v31 = "default";
          }
        }
        else if (*(unsigned char *)(a1 + 487))
        {
          uint64_t v31 = (const char *)(a1 + 464);
        }
        else
        {
          uint64_t v31 = "default";
        }
        int v32 = *v9;
        uint64_t v33 = *v11;
        uint64_t v34 = *v14;
        *(_DWORD *)uint64_t buf = 134350338;
        uint64_t v66 = v30;
        __int16 v67 = 2082;
        int v68 = v31;
        __int16 v69 = 1026;
        int v70 = v32;
        __int16 v71 = 2050;
        uint64_t v72 = v33;
        __int16 v73 = 2050;
        uint64_t v74 = v34;
        __int16 v75 = 2050;
        uint64_t v76 = v34;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "#RTTMA,final,AvlFileExpAge,%{public}.3lff,Url,%{public}s,flush,%{public}d,flushTime,%{public}.3lf,WifiDownloadrate,%{public}.3lf,CellDownloadrate,%{public}.3lf", buf, 0x3Au);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_81;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022DB688);
      }
      uint64_t v37 = *(void *)(a1 + 456);
      if (*(char *)(a1 + 487) < 0)
      {
        if (*(void *)(a1 + 472)) {
          uint64_t v38 = *v6;
        }
        else {
          uint64_t v38 = "default";
        }
      }
      else if (*(unsigned char *)(a1 + 487))
      {
        uint64_t v38 = (const char *)(a1 + 464);
      }
      else
      {
        uint64_t v38 = "default";
      }
      int v49 = *v9;
      uint64_t v50 = *v11;
      uint64_t v51 = *v14;
      int v53 = 134350338;
      uint64_t v54 = v37;
      __int16 v55 = 2082;
      double v56 = v38;
      __int16 v57 = 1026;
      int v58 = v49;
      __int16 v59 = 2050;
      uint64_t v60 = v50;
      __int16 v61 = 2050;
      uint64_t v62 = v51;
      __int16 v63 = 2050;
      uint64_t v64 = v51;
      uint64_t v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v25);
    }
    else
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022DB688);
      }
      int v24 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "#RTTMA,#Warning,MA-OTA,RayTracing Config not available", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_81;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022DB688);
      }
      LOWORD(v53) = 0;
      uint64_t v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v25);
    }
    if (v25 != (char *)buf) {
      free(v25);
    }
LABEL_81:
    sub_10013F3C4(v52);
    return;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022DB688);
  }
  std::string::size_type v20 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    int v21 = *a3;
    *(_DWORD *)uint64_t buf = 67240192;
    LODWORD(v66) = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "#RTTMA,#Warning,Invalid notification,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    int v22 = *a3;
    int v53 = 67240192;
    LODWORD(v54) = v22;
    long long v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v23);
    if (v23 != (char *)buf) {
      free(v23);
    }
  }
}

void sub_100A791D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_100A79218(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  long long v7 = (std::mutex *)(a1 + 312);
  std::mutex::lock((std::mutex *)(a1 + 312));
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022DB688);
  }
  double v8 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v9 = *a3;
    *(_DWORD *)uint64_t buf = 67240192;
    int v13 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#RTTMA,Notification,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022DB688);
    }
    int v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileAvailabilityManager::onManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  if (*a3 == 4)
  {
    int v10 = *(_DWORD *)(a4 + 188);
    if (v10 == 1)
    {
      if (!*(unsigned char *)(a1 + 624))
      {
        if (!sub_100A724F0(a1)) {
          sub_100A72818(a1);
        }
        *(unsigned char *)(a1 + 624) = 1;
      }
    }
    else if (!v10)
    {
      sub_100A77F00(a1);
      *(unsigned char *)(a1 + 624) = 0;
      sub_1005C70E0(a1 + 64);
    }
  }
  std::mutex::unlock(v7);
}

void sub_100A79448(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100A79460(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100A79490(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_100A794C0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100A79538((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100A79538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 56);
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v8;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 56;
      *((void *)&v14 + 1) -= 56;
      a3 -= 56;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_100A795F4((uint64_t)v11);
  return v9;
}

uint64_t sub_100A795F4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100737C34(a1);
  }
  return a1;
}

char *sub_100A7962C(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_10022F168(v7, v11);
    long long v13 = (char *)v7[1];
    char v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    uint64_t v17 = a3 - (void)__src;
    if (v17)
    {
      size_t v18 = v17 - 4;
      long long v19 = v9;
      std::string::size_type v20 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  char v12 = (void **)(result + 8);
  long long v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 4;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9 - 4);
    uint64_t v9 = (char *)*v12;
  }
  uint64_t v17 = a3 - (void)v16;
  if (v17)
  {
    size_t v18 = v17 - 4;
    long long v19 = v9;
    std::string::size_type v20 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v19, v20, v18);
  }
LABEL_19:
  NSObject *v12 = &v9[v17];
  return result;
}

uint64_t sub_100A79740()
{
  qword_10247FAC0 = 0;
  *(void *)algn_10247FAC8 = 0;
  qword_10247FAD0 = 0;
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FAC0, (void *)&_mh_execute_header);
}

uint64_t sub_100A7976C(uint64_t a1, int a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)a1 = a2;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(unsigned char *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 57) = 65793;
  if (byte_10248A83F < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 64), (void *)xmmword_10248A828, *((unint64_t *)&xmmword_10248A828 + 1));
  }
  else
  {
    *(_OWORD *)(a1 + 64) = xmmword_10248A828;
    *(void *)(a1 + 80) = unk_10248A838;
  }
  if (byte_10248A857 < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 88), (void *)xmmword_10248A840, *((unint64_t *)&xmmword_10248A840 + 1));
  }
  else
  {
    *(_OWORD *)(a1 + 88) = xmmword_10248A840;
    *(void *)(a1 + 104) = unk_10248A850;
  }
  if (byte_10248A86F < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 112), (void *)xmmword_10248A858, *((unint64_t *)&xmmword_10248A858 + 1));
  }
  else
  {
    *(_OWORD *)(a1 + 112) = xmmword_10248A858;
    *(void *)(a1 + 128) = unk_10248A868;
  }
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 136) = xmmword_101D47C80;
  *(void *)(a1 + 152) = 0x4024000000000000;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(_WORD *)(a1 + 224) = 257;
  *(void *)(a1 + 228) = 0x32000000018;
  *(_WORD *)(a1 + 236) = 0;
  *(unsigned char *)(a1 + 240) = 1;
  *(_DWORD *)(a1 + 244) = -115;
  *(void *)(a1 + 248) = 0x4000000000000000;
  *(void *)(a1 + 256) = 0x3E800000005;
  *(_WORD *)(a1 + 264) = 0;
  *(void *)(a1 + 268) = -1;
  *(_WORD *)(a1 + 276) = 257;
  *(unsigned char *)(a1 + 280) = 1;
  *(_WORD *)(a1 + 284) = 257;
  *(void *)(a1 + 288) = 0x32000000018;
  *(_WORD *)(a1 + 296) = 0;
  *(_WORD *)(a1 + 300) = 0;
  *(void *)(a1 + 304) = 0x6400000005;
  *(_WORD *)(a1 + 312) = 256;
  *(_WORD *)(a1 + 316) = 0;
  *(void *)(a1 + 320) = -1;
  *(_WORD *)(a1 + 328) = 257;
  *(unsigned char *)(a1 + 332) = 1;
  *(_WORD *)(a1 + 336) = 0;
  *(void *)(a1 + 340) = -1;
  *(_WORD *)(a1 + 348) = 257;
  *(_WORD *)(a1 + 352) = 0;
  *(void *)(a1 + 356) = -1;
  *(_WORD *)(a1 + 364) = 257;
  *(_WORD *)(a1 + 368) = 0;
  *(void *)(a1 + 372) = -1;
  *(_WORD *)(a1 + 380) = 257;
  *(void *)(a1 + 384) = 0x6400000002;
  *(_DWORD *)(a1 + 392) = 100;
  *(_WORD *)(a1 + 396) = 256;
  *(_OWORD *)(a1 + 400) = xmmword_101D47C90;
  *(void *)(a1 + 416) = 0x93A80018B8200;
  *(unsigned char *)(a1 + 424) = 0;
  if (byte_10248A870[23] < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 432), *(void **)byte_10248A870, *(unint64_t *)&byte_10248A870[8]);
  }
  else
  {
    *(_OWORD *)(a1 + 432) = *(_OWORD *)byte_10248A870;
    *(void *)(a1 + 448) = *(void *)&byte_10248A870[16];
  }
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_DWORD *)(a1 + 488) = 1065353216;
  *(_OWORD *)(a1 + 496) = xmmword_101D47CA0;
  *(void *)(a1 + 512) = 0xE1000015180;
  *(_DWORD *)(a1 + 520) = 5184000;
  sub_100A79B44(a1);
  *(_OWORD *)std::string __p = 0u;
  long long v5 = 0u;
  long long v6 = xmmword_101D47CA0;
  uint64_t v7 = 0xE1000015180;
  uint64_t v8 = 5184000;
  memset(v9, 0, sizeof(v9));
  sub_100A7A6E8(a1, (unsigned __int8 *)__p);
  uint64_t v10 = (void **)v9;
  sub_100340F40(&v10);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[1]);
  }
  return a1;
}

void sub_100A79A88(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 223) < 0) {
    operator delete(*v7);
  }
  sub_100ABB7BC(v5);
  if (*(char *)(v1 + 135) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 111) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*(void **)(v1 + 32));
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v6);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100A79B44(uint64_t a1)
{
  sub_1000E9354(v41);
  sub_1000C7F88(buf);
  if (byte_10247FE7F >= 0) {
    int v2 = (const char *)&qword_10247FE68;
  }
  else {
    int v2 = (const char *)qword_10247FE68;
  }
  BOOL v3 = sub_100012960(*(uint64_t *)buf, v2, v41);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v3) {
    sub_100A7DBAC(a1, (uint64_t)v41);
  }
  memset(buf, 0, sizeof(buf));
  int v50 = 1065353216;
  sub_100A7BF14(a1, (uint64_t)buf);
  uint64_t v4 = *(uint64_t **)&buf[16];
  if (*(void *)&buf[16])
  {
    do
    {
      sub_100134750(&__p, "");
      sub_100A7B214((int *)a1, (std::string *)(v4 + 2), (std::string *)(v4 + 5), 0, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  sub_100ABB83C((uint64_t)buf);
  memset(&__p, 0, sizeof(__p));
  sub_1000C7F88(buf);
  BOOL v5 = sub_1004D1284(*(uint64_t *)buf, "EEDIntermediateCert", &__p);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v5)
  {
    long long v6 = (void *)(a1 + 200);
    std::string::operator=((std::string *)(a1 + 200), &__p);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v7 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *(_DWORD *)a1;
      uint64_t v9 = (void *)(a1 + 200);
      if (*(char *)(a1 + 223) < 0) {
        uint64_t v9 = (void *)*v6;
      }
      *(_DWORD *)uint64_t buf = 67240451;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)&uint8_t buf[8] = 2081;
      *(void *)&buf[10] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning #EED2Cfg,inst,%{public}d,overriding intermediate cert to %{private}s", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v30 = *(_DWORD *)a1;
      if (*(char *)(a1 + 223) < 0) {
        long long v6 = (void *)*v6;
      }
      LODWORD(__str.__r_.__value_.__l.__data_) = 67240451;
      HIDWORD(__str.__r_.__value_.__r.__words[0]) = v30;
      LOWORD(__str.__r_.__value_.__r.__words[1]) = 2081;
      *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v6;
      uint64_t v31 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::SimConfig::loadSettingsFromDefaults()", "%s\n", v31);
      if (v31 != (char *)buf) {
        free(v31);
      }
    }
  }
  memset(&__str, 0, sizeof(__str));
  sub_1000C7F88(buf);
  BOOL v10 = sub_1004D1284(*(uint64_t *)buf, "EEDLISURL", &__str);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v10)
  {
    unint64_t v11 = (void *)(a1 + 64);
    std::string::operator=((std::string *)(a1 + 64), &__str);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    char v12 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = *(_DWORD *)a1;
      long long v14 = (void *)(a1 + 64);
      if (*(char *)(a1 + 87) < 0) {
        long long v14 = (void *)*v11;
      }
      *(_DWORD *)uint64_t buf = 67240451;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)&uint8_t buf[8] = 2081;
      *(void *)&buf[10] = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning #EED2Cfg,inst,%{public}d,overriding LIS URL to %{private}s", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v32 = *(_DWORD *)a1;
      if (*(char *)(a1 + 87) < 0) {
        unint64_t v11 = (void *)*v11;
      }
      LODWORD(v47.__r_.__value_.__l.__data_) = 67240451;
      HIDWORD(v47.__r_.__value_.__r.__words[0]) = v32;
      LOWORD(v47.__r_.__value_.__r.__words[1]) = 2081;
      *(std::string::size_type *)((char *)&v47.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v11;
      uint64_t v33 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::SimConfig::loadSettingsFromDefaults()", "%s\n", v33);
      if (v33 != (char *)buf) {
        free(v33);
      }
    }
  }
  memset(&v47, 0, sizeof(v47));
  sub_1000C7F88(buf);
  BOOL v15 = sub_1004D1284(*(uint64_t *)buf, "EEDADRURL", &v47);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v15)
  {
    uint64_t v16 = (void *)(a1 + 88);
    std::string::operator=((std::string *)(a1 + 88), &v47);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v17 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = *(_DWORD *)a1;
      long long v19 = (void *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0) {
        long long v19 = (void *)*v16;
      }
      *(_DWORD *)uint64_t buf = 67240451;
      *(_DWORD *)&uint8_t buf[4] = v18;
      *(_WORD *)&uint8_t buf[8] = 2081;
      *(void *)&buf[10] = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning #EED2Cfg,inst,%{public}d,overriding ADR URL to %{private}s", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v34 = *(_DWORD *)a1;
      if (*(char *)(a1 + 111) < 0) {
        uint64_t v16 = (void *)*v16;
      }
      LODWORD(v46.__r_.__value_.__l.__data_) = 67240451;
      HIDWORD(v46.__r_.__value_.__r.__words[0]) = v34;
      LOWORD(v46.__r_.__value_.__r.__words[1]) = 2081;
      *(std::string::size_type *)((char *)&v46.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v16;
      uint64_t v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::SimConfig::loadSettingsFromDefaults()", "%s\n", v35);
      if (v35 != (char *)buf) {
        free(v35);
      }
    }
  }
  memset(&v46, 0, sizeof(v46));
  sub_1000C7F88(buf);
  BOOL v20 = sub_1004D1284(*(uint64_t *)buf, "EEDControlURL", &v46);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v20)
  {
    int v21 = (void *)(a1 + 112);
    std::string::operator=((std::string *)(a1 + 112), &v46);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v22 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = *(_DWORD *)a1;
      int v24 = (void *)(a1 + 112);
      if (*(char *)(a1 + 135) < 0) {
        int v24 = (void *)*v21;
      }
      *(_DWORD *)uint64_t buf = 67240451;
      *(_DWORD *)&uint8_t buf[4] = v23;
      *(_WORD *)&uint8_t buf[8] = 2081;
      *(void *)&buf[10] = v24;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#Warning #EED2Cfg,inst,%{public}d,overriding Control URL to %{private}s", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v36 = *(_DWORD *)a1;
      if (*(char *)(a1 + 135) < 0) {
        int v21 = (void *)*v21;
      }
      int v42 = 67240451;
      int v43 = v36;
      __int16 v44 = 2081;
      int v45 = v21;
      uint64_t v37 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::SimConfig::loadSettingsFromDefaults()", "%s\n", v37);
      if (v37 != (char *)buf) {
        free(v37);
      }
    }
  }
  sub_1000C7F88(buf);
  LOBYTE(v42) = 0;
  int v25 = sub_1000D2988(*(uint64_t *)buf, "EEDForceEnable", (BOOL *)&v42);
  if ((_BYTE)v42) {
    int v26 = v25;
  }
  else {
    int v26 = 0;
  }
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v26)
  {
    *(_WORD *)(a1 + 56) = 257;
    *(unsigned char *)(a1 + 59) = 1;
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v27 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      int v28 = *(_DWORD *)a1;
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v28;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#Warning #EED2Cfg,inst,%{public}d,force enabling EED", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v38 = *(_DWORD *)a1;
      int v42 = 67240192;
      int v43 = v38;
      int v39 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::SimConfig::loadSettingsFromDefaults()", "%s\n", v39);
      if (v39 != (char *)buf) {
        free(v39);
      }
    }
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return sub_10013F3C4(v41);
}

void sub_100A7A5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,char a45,uint64_t a46)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  sub_10013F3C4(&a18);
  _Unwind_Resume(a1);
}

BOOL sub_100A7A6E8(uint64_t a1, unsigned __int8 *a2)
{
  int v44 = *a2;
  if (byte_10248A870[23] < 0) {
    sub_1000DC48C(&__str, *(void **)byte_10248A870, *(unint64_t *)&byte_10248A870[8]);
  }
  else {
    std::string __str = *(std::string *)byte_10248A870;
  }
  uint64_t v4 = a2[31];
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 2);
  }
  if (v4) {
    std::string::operator=(&__str, (const std::string *)(a2 + 8));
  }
  sub_1000C7F88(buf);
  int v5 = *((_DWORD *)a2 + 8);
  LODWORD(v45) = 0;
  if (sub_10006EF84(*(uint64_t *)buf, "EEDPreCachedADRDebounceDelay", &v45)) {
    int v6 = v45;
  }
  else {
    int v6 = v5;
  }
  if (*(void *)v50) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v50);
  }
  sub_1000C7F88(buf);
  int v7 = *((_DWORD *)a2 + 9);
  LODWORD(v45) = 0;
  if (sub_10006EF84(*(uint64_t *)buf, "EEDPreCachedADRDebounceGracePeriod", &v45)) {
    int v8 = v45;
  }
  else {
    int v8 = v7;
  }
  if (*(void *)v50) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v50);
  }
  sub_1000C7F88(buf);
  int v9 = *((_DWORD *)a2 + 10);
  LODWORD(v45) = 0;
  if (sub_10006EF84(*(uint64_t *)buf, "EEDPreCachedADRPeriodicDelay", &v45)) {
    int v10 = v45;
  }
  else {
    int v10 = v9;
  }
  if (*(void *)v50) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v50);
  }
  sub_1000C7F88(buf);
  int v11 = *((_DWORD *)a2 + 11);
  LODWORD(v45) = 0;
  if (sub_10006EF84(*(uint64_t *)buf, "EEDPreCachedADRPeriodicGracePeriod", &v45)) {
    int v12 = v45;
  }
  else {
    int v12 = v11;
  }
  if (*(void *)v50) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v50);
  }
  sub_1000C7F88(buf);
  int v13 = *((_DWORD *)a2 + 12);
  LODWORD(v45) = 0;
  if (sub_10006EF84(*(uint64_t *)buf, "EEDPreCachedADRBackoffDelay", &v45)) {
    int v14 = v45;
  }
  else {
    int v14 = v13;
  }
  if (*(void *)v50) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v50);
  }
  sub_1000C7F88(buf);
  int v15 = *((_DWORD *)a2 + 13);
  LODWORD(v45) = 0;
  if (sub_10006EF84(*(uint64_t *)buf, "EEDPreCachedADRBackoffGracePeriod", &v45)) {
    int v16 = v45;
  }
  else {
    int v16 = v15;
  }
  if (*(void *)v50) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v50);
  }
  sub_1000C7F88(buf);
  int v17 = *((_DWORD *)a2 + 14);
  LODWORD(v45) = 0;
  if (sub_10006EF84(*(uint64_t *)buf, "EEDPreCachedAdrValidityInterval", &v45)) {
    int v18 = v45;
  }
  else {
    int v18 = v17;
  }
  if (*(void *)v50) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v50);
  }
  long long v45 = 0u;
  long long v46 = 0u;
  int v47 = 1065353216;
  long long v19 = (std::string *)*((void *)a2 + 8);
  BOOL v20 = (std::string *)*((void *)a2 + 9);
  while (v19 != v20)
  {
    int v21 = v19 + 1;
    sub_100A7BA60((int *)a1, (unsigned __int8 *)v19, v19 + 1, &v45);
    long long v19 = v21 + 1;
  }
  sub_100A7BF14(a1, (uint64_t)&v45);
  int v22 = v10;
  if (*(unsigned __int8 *)(a1 + 424) != v44)
  {
    char v29 = v44;
    BOOL v30 = 1;
    int v26 = v12;
    goto LABEL_73;
  }
  uint64_t v23 = *(unsigned __int8 *)(a1 + 455);
  if ((v23 & 0x80u) == 0) {
    uint64_t v24 = *(unsigned __int8 *)(a1 + 455);
  }
  else {
    uint64_t v24 = *(void *)(a1 + 440);
  }
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  int v26 = v12;
  if (v24 != size) {
    goto LABEL_71;
  }
  uint64_t v27 = (const void **)(a1 + 432);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_str = &__str;
  }
  else {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if ((v23 & 0x80) != 0)
  {
    if (memcmp(*v27, p_str, *(void *)(a1 + 440)))
    {
LABEL_71:
      BOOL v30 = 1;
      goto LABEL_72;
    }
  }
  else if (*(unsigned char *)(a1 + 455))
  {
    while (*(unsigned __int8 *)v27 == p_str->__r_.__value_.__s.__data_[0])
    {
      uint64_t v27 = (const void **)((char *)v27 + 1);
      p_str = (std::string *)((char *)p_str + 1);
      if (!--v23) {
        goto LABEL_63;
      }
    }
    goto LABEL_71;
  }
LABEL_63:
  if (!sub_100ABB914(a1 + 456, &v45)
    || *(_DWORD *)(a1 + 496) != v6
    || *(_DWORD *)(a1 + 500) != v8
    || *(_DWORD *)(a1 + 504) != v22
    || *(_DWORD *)(a1 + 508) != v12
    || *(_DWORD *)(a1 + 512) != v14
    || *(_DWORD *)(a1 + 516) != v16)
  {
    goto LABEL_71;
  }
  BOOL v30 = *(_DWORD *)(a1 + 520) != v18;
LABEL_72:
  char v29 = v44;
LABEL_73:
  *(unsigned char *)(a1 + 424) = v29;
  uint64_t v31 = (void *)(a1 + 432);
  std::string::operator=((std::string *)(a1 + 432), &__str);
  if ((long long *)(a1 + 456) != &v45)
  {
    *(_DWORD *)(a1 + 488) = v47;
    sub_100ABBA78((void *)(a1 + 456), (uint64_t *)v46, 0);
  }
  *(_DWORD *)(a1 + 496) = v6;
  *(_DWORD *)(a1 + 500) = v8;
  *(_DWORD *)(a1 + 504) = v22;
  *(_DWORD *)(a1 + 508) = v26;
  *(_DWORD *)(a1 + 512) = v14;
  *(_DWORD *)(a1 + 516) = v16;
  *(_DWORD *)(a1 + 520) = v18;
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  int v32 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    int v33 = *(_DWORD *)a1;
    int v34 = *(unsigned __int8 *)(a1 + 424);
    if (*(char *)(a1 + 455) < 0) {
      uint64_t v31 = (void *)*v31;
    }
    int v35 = *(_DWORD *)(a1 + 496);
    int v36 = *(_DWORD *)(a1 + 500);
    int v37 = *(_DWORD *)(a1 + 504);
    int v38 = *(_DWORD *)(a1 + 508);
    int v39 = *(_DWORD *)(a1 + 512);
    int v40 = *(_DWORD *)(a1 + 516);
    int v41 = *(_DWORD *)(a1 + 520);
    uint64_t v42 = *(void *)(a1 + 480);
    *(_DWORD *)uint64_t buf = 68292099;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)int v50 = 2082;
    *(void *)&v50[2] = "";
    __int16 v51 = 1026;
    BOOL v52 = v30;
    __int16 v53 = 1026;
    int v54 = v33;
    __int16 v55 = 1026;
    int v56 = v34;
    __int16 v57 = 2081;
    int v58 = v31;
    __int16 v59 = 1025;
    int v60 = v35;
    __int16 v61 = 1025;
    int v62 = v36;
    __int16 v63 = 1025;
    int v64 = v37;
    __int16 v65 = 1025;
    int v66 = v38;
    __int16 v67 = 1025;
    int v68 = v39;
    __int16 v69 = 1025;
    int v70 = v40;
    __int16 v71 = 1025;
    int v72 = v41;
    __int16 v73 = 1026;
    int v74 = v42;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#EED2Cfg,#ADR,updatePreCachedAdrSettings\", \"changed\":%{public}d, \"sim\":%{public}d, \"enabled\":%{public}hhd, \"url\":%{private, location:escape_only}s, \"debounceDelay\":%{private}d, \"debounceGracePeriod\":%{private}d, \"periodicDelay\":%{private}d, \"periodicGracePeriod\":%{private}d, \"backoffDelay\":%{private}d, \"backoffGracePeriod\":%{private}d, \"validityInterval\":%{private}d, \"num partner certs\":%{public}d}", buf, 0x5Eu);
  }
  sub_100ABB83C((uint64_t)&v45);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v30;
}

void sub_100A7AC7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
}

uint64_t sub_100A7AD00(uint64_t a1)
{
  BOOL v3 = (void **)(a1 + 64);
  sub_100340F40(&v3);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

BOOL sub_100A7AD4C(uint64_t a1, unsigned __int8 *a2, std::string *__str, const std::string *a4)
{
  if (__PAIR64__(*(unsigned __int8 *)(a1 + 57), *(unsigned __int8 *)(a1 + 56)) != __PAIR64__(a2[1], *a2)
    || *(unsigned __int8 *)(a1 + 58) != a2[128])
  {
    goto LABEL_19;
  }
  signed __int8 v8 = a2[31];
  int v9 = *(char *)(a1 + 87);
  if (v9 < 0)
  {
    int v10 = *(const void **)(a1 + 64);
    unint64_t v11 = *(void *)(a1 + 72);
  }
  else
  {
    int v10 = (const void *)(a1 + 64);
    unint64_t v11 = v9;
  }
  unint64_t v12 = v8 >= 0 ? a2[31] : *((void *)a2 + 2);
  int v13 = v8 >= 0 ? a2 + 8 : (unsigned __int8 *)*((void *)a2 + 1);
  size_t v14 = v12 >= v11 ? v11 : v12;
  if (!memcmp(v10, v13, v14) && v12 == v11)
  {
    signed __int8 v47 = a2[55];
    if (*(char *)(a1 + 111) < 0)
    {
      int64_t v48 = *(const void **)(a1 + 88);
      size_t v49 = *(void *)(a1 + 96);
    }
    else
    {
      int64_t v48 = (const void *)(a1 + 88);
      size_t v49 = *(unsigned __int8 *)(a1 + 111);
    }
    if (v47 >= 0) {
      size_t v50 = a2[55];
    }
    else {
      size_t v50 = *((void *)a2 + 5);
    }
    if (v47 >= 0) {
      __int16 v51 = a2 + 32;
    }
    else {
      __int16 v51 = (const void *)*((void *)a2 + 4);
    }
    if (v50 >= v49) {
      size_t v52 = v49;
    }
    else {
      size_t v52 = v50;
    }
    BOOL v16 = 1;
    if (!memcmp(v48, v51, v52)
      && v50 == v49
      && *(double *)(a1 + 136) == *((double *)a2 + 10)
      && *(double *)(a1 + 144) == *((double *)a2 + 11)
      && *(double *)(a1 + 152) == *((double *)a2 + 12)
      && *(unsigned __int8 *)(a1 + 60) == a2[129]
      && !sub_100A7B1A4((const void **)(a1 + 112), a2 + 56))
    {
      BOOL v16 = *(unsigned __int8 *)(a1 + 59) != a2[2];
    }
  }
  else
  {
LABEL_19:
    BOOL v16 = 1;
  }
  std::string::operator=((std::string *)(a1 + 8), __str);
  std::string::operator=((std::string *)(a1 + 32), a4);
  *(_WORD *)(a1 + 56) = *(_WORD *)a2;
  *(unsigned char *)(a1 + 58) = a2[128];
  *(unsigned char *)(a1 + 59) = a2[2];
  int v17 = (void *)(a1 + 64);
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 8));
  int v18 = (void *)(a1 + 88);
  std::string::operator=((std::string *)(a1 + 88), (const std::string *)(a2 + 32));
  long long v19 = (void *)(a1 + 112);
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(a2 + 56));
  *(_OWORD *)(a1 + 136) = *((_OWORD *)a2 + 5);
  *(void *)(a1 + 152) = *((void *)a2 + 12);
  BOOL v20 = (void *)(a1 + 200);
  std::string::operator=((std::string *)(a1 + 200), (const std::string *)(a2 + 104));
  *(unsigned char *)(a1 + 60) = a2[129];
  long long v21 = *((_OWORD *)a2 + 16);
  long long v22 = *((_OWORD *)a2 + 17);
  long long v23 = *((_OWORD *)a2 + 19);
  *(_OWORD *)(a1 + 352) = *((_OWORD *)a2 + 18);
  *(_OWORD *)(a1 + 368) = v23;
  *(_OWORD *)(a1 + 320) = v21;
  *(_OWORD *)(a1 + 336) = v22;
  long long v24 = *((_OWORD *)a2 + 12);
  long long v25 = *((_OWORD *)a2 + 13);
  long long v26 = *((_OWORD *)a2 + 15);
  *(_OWORD *)(a1 + 288) = *((_OWORD *)a2 + 14);
  *(_OWORD *)(a1 + 304) = v26;
  *(_OWORD *)(a1 + 256) = v24;
  *(_OWORD *)(a1 + 272) = v25;
  long long v27 = *((_OWORD *)a2 + 11);
  *(_OWORD *)(a1 + 224) = *((_OWORD *)a2 + 10);
  *(_OWORD *)(a1 + 240) = v27;
  int v28 = *((_DWORD *)a2 + 82);
  *(void *)(a1 + 384) = *((void *)a2 + 40);
  *(_DWORD *)(a1 + 392) = v28;
  sub_100ABB8BC(a1 + 160);
  uint64_t v29 = *((void *)a2 + 17);
  BOOL v30 = (const std::string *)*((void *)a2 + 18);
  if ((const std::string *)v29 != v30)
  {
    uint64_t v31 = (const std::string *)(v29 + 56);
    do
    {
      sub_100A7B214((int *)a1, (std::string *)&v31[-3].__r_.__value_.__r.__words[2], (std::string *)&v31[-2].__r_.__value_.__r.__words[2], v31[-1].__r_.__value_.__s.__data_[16], v31);
      int v32 = v31 + 1;
      uint64_t v31 = (const std::string *)((char *)v31 + 80);
    }
    while (v32 != v30);
  }
  sub_100A79B44(a1);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  int v33 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v34 = __str;
    }
    else {
      int v34 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v35 = a4;
    }
    else {
      int v35 = (const std::string *)a4->__r_.__value_.__r.__words[0];
    }
    if (*(char *)(a1 + 87) < 0) {
      int v17 = (void *)*v17;
    }
    if (*(char *)(a1 + 111) < 0) {
      int v18 = (void *)*v18;
    }
    if (*(char *)(a1 + 223) < 0) {
      BOOL v20 = (void *)*v20;
    }
    int v36 = *(_DWORD *)a1;
    int v37 = *(unsigned __int8 *)(a1 + 56);
    int v38 = *(unsigned __int8 *)(a1 + 57);
    int v39 = *(unsigned __int8 *)(a1 + 58);
    uint64_t v41 = *(void *)(a1 + 136);
    uint64_t v40 = *(void *)(a1 + 144);
    uint64_t v42 = *(void *)(a1 + 152);
    int v43 = *(_DWORD *)(a1 + 184);
    int v44 = *(unsigned __int8 *)(a1 + 60);
    if (*(char *)(a1 + 135) < 0) {
      long long v19 = (void *)*v19;
    }
    int v45 = *(unsigned __int8 *)(a1 + 59);
    v53[0] = 68293379;
    v53[1] = 0;
    __int16 v54 = 2082;
    __int16 v55 = "";
    __int16 v56 = 1026;
    BOOL v57 = v16;
    __int16 v58 = 1026;
    int v59 = v36;
    __int16 v60 = 2082;
    __int16 v61 = v34;
    __int16 v62 = 2082;
    __int16 v63 = v35;
    __int16 v64 = 1026;
    int v65 = v37;
    __int16 v66 = 1026;
    int v67 = v38;
    __int16 v68 = 1026;
    int v69 = v39;
    __int16 v70 = 2081;
    __int16 v71 = v17;
    __int16 v72 = 2081;
    __int16 v73 = v18;
    __int16 v74 = 2049;
    uint64_t v75 = v41;
    __int16 v76 = 2049;
    uint64_t v77 = v40;
    __int16 v78 = 2049;
    uint64_t v79 = v42;
    __int16 v80 = 1026;
    int v81 = v43;
    __int16 v82 = 2082;
    uint64_t v83 = v20;
    __int16 v84 = 1026;
    int v85 = v44;
    __int16 v86 = 2081;
    float v87 = v19;
    __int16 v88 = 1026;
    int v89 = v45;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#EED2Cfg updated CB info\", \"changed\":%{public}d, \"sim\":%{public}d, \"version\":%{public, location:escape_only}s, \"id\":%{public, location:escape_only}s, \"enabled\":%{public}hhd, \"adrEnabled\":%{public}hhd, \"dsaEnabled\":%{public}hhd, \"lisUrl\":%{private, location:escape_only}s, \"adrUrl\":%{private, location:escape_only}s, \"firstLisTimeout\":\"%{private}f\", \"periodicLisTimeout\":\"%{private}f\", \"initialAdrTimeout\":\"%{private}f\", \"partnerInfoMapSize\":%{public}d, \"intermediateCert\":%{public, location:escape_only}s, \"unmaskCrashDetection\":%{public}hhd, \"controlUrl\":%{private, location:escape_only}s, \"requestsEnabled\":%{public}hhd}", (uint8_t *)v53, 0x9Cu);
  }
  return v16;
}

uint64_t sub_100A7B1A4(const void **a1, unsigned char *a2)
{
  char v2 = a2[23];
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v4 = a1;
    a1 = (const void **)*a1;
    size_t v3 = (size_t)v4[1];
  }
  else
  {
    size_t v3 = *((unsigned __int8 *)a1 + 23);
  }
  if (v2 >= 0) {
    size_t v5 = a2[23];
  }
  else {
    size_t v5 = *((void *)a2 + 1);
  }
  if (v2 < 0) {
    a2 = *(unsigned char **)a2;
  }
  if (v5 >= v3) {
    size_t v6 = v3;
  }
  else {
    size_t v6 = v5;
  }
  LODWORD(result) = memcmp(a1, a2, v6);
  if (v3 < v5) {
    unsigned int v8 = -1;
  }
  else {
    unsigned int v8 = v5 < v3;
  }
  if (result) {
    return result;
  }
  else {
    return v8;
  }
}

void sub_100A7B214(int *a1, std::string *a2, std::string *a3, unsigned __int8 a4, const std::string *a5)
{
  SecCertificateRef v10 = sub_100A7D8F0((uint64_t *)a3);
  if (v10)
  {
    CFRelease(v10);
    uint64_t v11 = (uint64_t)(a1 + 40);
    if (sub_100122860((void *)a1 + 20, (unsigned __int8 *)a2))
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      unint64_t v12 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        int v13 = *a1;
        if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v14 = a2;
        }
        else {
          size_t v14 = (std::string *)a2->__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)uint64_t buf = 67240450;
        *(_DWORD *)&uint8_t buf[4] = v13;
        __int16 v42 = 2080;
        int v43 = v14;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#Warning #EED2Cfg,inst,%{public}d,found duplicate certifacte for partner %{partner}s", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        int v15 = *a1;
        if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          BOOL v16 = (uint8_t *)a2;
        }
        else {
          BOOL v16 = (uint8_t *)a2->__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)int v33 = 67240450;
        *(_DWORD *)&v33[4] = v15;
        __int16 v34 = 2080;
        int v35 = v16;
        int v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::SimConfig::addPartnerInfo(const std::string &, const std::string &, BOOL, const std::string &)", "%s\n", v17);
        goto LABEL_31;
      }
    }
    else
    {
      *(void *)uint64_t buf = a2;
      long long v23 = sub_100ABC548((uint64_t)(a1 + 40), (unsigned __int8 *)a2, (uint64_t)&unk_101D0B290, (long long **)buf);
      std::string::operator=((std::string *)(v23 + 40), a2);
      *(void *)uint64_t buf = a2;
      long long v24 = sub_100ABC548((uint64_t)(a1 + 40), (unsigned __int8 *)a2, (uint64_t)&unk_101D0B290, (long long **)buf);
      std::string::operator=((std::string *)(v24 + 64), a3);
      *(void *)uint64_t buf = a2;
      sub_100ABC548((uint64_t)(a1 + 40), (unsigned __int8 *)a2, (uint64_t)&unk_101D0B290, (long long **)buf)[88] = a4;
      *(void *)uint64_t buf = a2;
      long long v25 = (std::string *)sub_100ABC548((uint64_t)(a1 + 40), (unsigned __int8 *)a2, (uint64_t)&unk_101D0B290, (long long **)buf);
      std::string::operator=(v25 + 4, a5);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      long long v26 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        int v27 = *a1;
        *(void *)uint64_t buf = a2;
        int v28 = sub_100ABC548((uint64_t)(a1 + 40), (unsigned __int8 *)a2, (uint64_t)&unk_101D0B290, (long long **)buf);
        sub_100A7D984((uint64_t)(v28 + 40));
        uint64_t v29 = v44 >= 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)int v33 = 67240450;
        *(_DWORD *)&v33[4] = v27;
        __int16 v34 = 2080;
        int v35 = v29;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#EED2Cfg,inst,%{public}d,fPartnerInfoMap:%s", v33, 0x12u);
        if (v44 < 0) {
          operator delete(*(void **)buf);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        int v30 = *a1;
        *(void *)int v33 = a2;
        uint64_t v31 = sub_100ABC548(v11, (unsigned __int8 *)a2, (uint64_t)&unk_101D0B290, (long long **)v33);
        sub_100A7D984((uint64_t)(v31 + 40));
        if (v36 >= 0) {
          int v32 = v33;
        }
        else {
          int v32 = *(uint8_t **)v33;
        }
        int v37 = 67240450;
        int v38 = v30;
        __int16 v39 = 2080;
        uint64_t v40 = v32;
        int v17 = (char *)_os_log_send_and_compose_impl();
        if (v36 < 0) {
          operator delete(*(void **)v33);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::SimConfig::addPartnerInfo(const std::string &, const std::string &, BOOL, const std::string &)", "%s\n", v17);
        if (v17 != (char *)buf) {
          goto LABEL_51;
        }
      }
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v18 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      int v19 = *a1;
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        BOOL v20 = a2;
      }
      else {
        BOOL v20 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)uint64_t buf = 67240451;
      *(_DWORD *)&uint8_t buf[4] = v19;
      __int16 v42 = 2081;
      int v43 = v20;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#Warning #EED2Cfg,inst,%{public}d,unable to convert base64 string to SecCertificateRef for partner %{private}s", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v21 = *a1;
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v22 = (uint8_t *)a2;
      }
      else {
        long long v22 = (uint8_t *)a2->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)int v33 = 67240451;
      *(_DWORD *)&v33[4] = v21;
      __int16 v34 = 2081;
      int v35 = v22;
      int v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::SimConfig::addPartnerInfo(const std::string &, const std::string &, BOOL, const std::string &)", "%s\n", v17);
LABEL_31:
      if (v17 == (char *)buf) {
        return;
      }
LABEL_51:
      free(v17);
    }
  }
}

BOOL sub_100A7B86C(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  if (*(unsigned __int8 *)(a1 + 396) != v3)
  {
    LOBYTE(v4) = a2[1];
LABEL_9:
    BOOL v5 = 1;
    goto LABEL_11;
  }
  int v4 = *(unsigned __int8 *)(a1 + 397);
  if (v4 == a2[1])
  {
    if (*(_DWORD *)(a1 + 404) == *((_DWORD *)a2 + 2)
      && *(_DWORD *)(a1 + 408) == *((_DWORD *)a2 + 3)
      && *(_DWORD *)(a1 + 412) == *((_DWORD *)a2 + 4)
      && *(_DWORD *)(a1 + 416) == *((_DWORD *)a2 + 5))
    {
      BOOL v5 = *(_DWORD *)(a1 + 420) != *((_DWORD *)a2 + 6);
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  BOOL v5 = 1;
  LOBYTE(v4) = a2[1];
LABEL_11:
  *(unsigned char *)(a1 + 396) = v3;
  *(unsigned char *)(a1 + 397) = v4;
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 4);
  *(void *)(a1 + 416) = *(void *)(a2 + 20);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  size_t v6 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *(unsigned __int8 *)(a1 + 396);
    int v8 = *(unsigned __int8 *)(a1 + 397);
    int v9 = *(_DWORD *)(a1 + 400);
    int v10 = *(_DWORD *)(a1 + 404);
    int v11 = *(_DWORD *)(a1 + 408);
    int v12 = *(_DWORD *)(a1 + 412);
    int v13 = *(_DWORD *)(a1 + 416);
    int v14 = *(_DWORD *)(a1 + 420);
    v16[0] = 68291330;
    v16[1] = 0;
    __int16 v17 = 2082;
    int v18 = "";
    __int16 v19 = 1026;
    BOOL v20 = v5;
    __int16 v21 = 1026;
    int v22 = v7;
    __int16 v23 = 1026;
    int v24 = v8;
    __int16 v25 = 1026;
    int v26 = v9;
    __int16 v27 = 1026;
    int v28 = v10;
    __int16 v29 = 1026;
    int v30 = v11;
    __int16 v31 = 1026;
    int v32 = v12;
    __int16 v33 = 1026;
    int v34 = v13;
    __int16 v35 = 1026;
    int v36 = v14;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#EED2Cfg updated BAA settings\", \"changed\":%{public}hhd, \"disabled\":%{public}hhd, \"EED enabled only\":%{public}hhd, \"cert validty period\":%{public}d, \"no cert request window\":%{public}d, \"no cert retry window\":%{public}d, \"cert available request window min\":%{public}d, \"cert available request window max\":%{public}d, \"cert available retry window\":%{public}d}", (uint8_t *)v16, 0x48u);
  }
  return v5;
}

void sub_100A7BA60(int *a1, unsigned __int8 *a2, std::string *a3, void *a4)
{
  SecCertificateRef v8 = sub_100A7D8F0((uint64_t *)a3);
  if (v8)
  {
    CFRelease(v8);
    if (sub_100122860(a4, a2))
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v9 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        int v10 = *a1;
        if ((a2[23] & 0x80u) == 0) {
          int v11 = (uint64_t *)a2;
        }
        else {
          int v11 = *(uint64_t **)a2;
        }
        *(_DWORD *)uint64_t buf = 67240450;
        *(_DWORD *)&uint8_t buf[4] = v10;
        __int16 v21 = 2080;
        int v22 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#Warning #EED2Cfg,inst,%{public}d,found duplicate certifacte for partner %{partner}s", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 == -1) {
          goto LABEL_33;
        }
        goto LABEL_35;
      }
    }
    else
    {
      *(void *)uint64_t buf = a2;
      int v15 = sub_100ABC208((uint64_t)a4, a2, (uint64_t)&unk_101D0B290, (long long **)buf);
      std::string::operator=((std::string *)(v15 + 40), a3);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      BOOL v16 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        int v17 = *a1;
        if ((a2[23] & 0x80u) == 0) {
          int v18 = (uint64_t *)a2;
        }
        else {
          int v18 = *(uint64_t **)a2;
        }
        *(_DWORD *)uint64_t buf = 67240451;
        *(_DWORD *)&uint8_t buf[4] = v17;
        __int16 v21 = 2081;
        int v22 = v18;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#EED2Cfg,inst,%{public}d,added cert for partner %{private}s", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 == -1) {
          goto LABEL_33;
        }
        goto LABEL_35;
      }
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v12 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      int v13 = *a1;
      if ((a2[23] & 0x80u) == 0) {
        int v14 = (uint64_t *)a2;
      }
      else {
        int v14 = *(uint64_t **)a2;
      }
      *(_DWORD *)uint64_t buf = 67240451;
      *(_DWORD *)&uint8_t buf[4] = v13;
      __int16 v21 = 2081;
      int v22 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#Warning #EED2Cfg,inst,%{public}d,unable to convert base64 string to SecCertificateRef for partner %{private}s", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1)
      {
LABEL_33:
        __int16 v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::SimConfig::addPartnerCert(const std::string &, const std::string &, PartnerCertMap &)", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
        return;
      }
LABEL_35:
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      goto LABEL_33;
    }
  }
}

uint64_t sub_100A7BF14(uint64_t a1, uint64_t a2)
{
  sub_1000E9354(v7);
  sub_1000C7F88(buf);
  BOOL v3 = sub_100012960(*(uint64_t *)buf, "EEDPartnerCerts", v7);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (v3)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v4 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning #EED2Cfg,partner certificate default overriding certs from other sources", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      size_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::SimConfig::readPartnerCertDefault(PartnerCertMap &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    sub_100ABC898(a2);
    sub_1004CFF34((uint64_t)v7);
  }
  return sub_10013F3C4(v7);
}

void sub_100A7C5F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char *a30,uint64_t a31)
{
  a30 = &a13;
  sub_1000A7B4C((void ***)&a30);
  sub_10013F3C4(&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_100A7C668@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100A7C6C8(a1, (uint64_t)v5);
  sub_100A7CA60((uint64_t *)a1, (uint64_t)v5, a2);
  return sub_100ABB83C((uint64_t)v5);
}

void sub_100A7C6B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100ABB83C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100A7C6C8(int *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  if (*((void *)a1 + 23))
  {
    for (uint64_t i = (uint64_t *)*((void *)a1 + 22); i; uint64_t i = (uint64_t *)*i)
    {
      if (*((char *)i + 39) < 0)
      {
        sub_1000DC48C(__dst, (void *)i[2], i[3]);
      }
      else
      {
        *(_OWORD *)__uuid_t dst = *((_OWORD *)i + 1);
        uint64_t v12 = i[4];
      }
      if (*((char *)i + 63) < 0)
      {
        sub_1000DC48C(buf, (void *)i[5], i[6]);
      }
      else
      {
        *(_OWORD *)uint64_t buf = *(_OWORD *)(i + 5);
        uint64_t v14 = i[7];
      }
      if (*((char *)i + 87) < 0) {
        sub_1000DC48C(&v15, (void *)i[8], i[9]);
      }
      else {
        std::string v15 = *(std::string *)(i + 8);
      }
      char v16 = *((unsigned char *)i + 88);
      if (*((char *)i + 119) < 0)
      {
        sub_1000DC48C(&__p, (void *)i[12], i[13]);
      }
      else
      {
        long long __p = *((_OWORD *)i + 6);
        uint64_t v18 = i[14];
      }
      int v10 = __dst;
      BOOL v5 = sub_100ABC208(a2, (unsigned __int8 *)__dst, (uint64_t)&unk_101D0B290, (long long **)&v10);
      std::string::operator=((std::string *)(v5 + 40), &v15);
      if (SHIBYTE(v18) < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v14) < 0) {
        operator delete(*(void **)buf);
      }
      if (SHIBYTE(v12) < 0) {
        operator delete(__dst[0]);
      }
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    size_t v6 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      int v7 = *a1;
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#Warning #EED2Cfg,inst,%{public}d, empty fPartnerInfoMap early return", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v8 = *a1;
      LODWORD(__dst[0]) = 67240192;
      HIDWORD(__dst[0]) = v8;
      int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::PartnerCertMap CLEmergencyEED2::SimConfig::getPartnerCertMap() const", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
}

void sub_100A7C9EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  sub_100ABB83C(v31);
  _Unwind_Resume(a1);
}

void sub_100A7CA60(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  SecCertificateRef v6 = sub_100A7D8F0(a1 + 25);
  if (v6)
  {
    sub_1000C7F88(buf);
    __p[0] = 0;
    int v7 = sub_1000D2988(*(uint64_t *)buf, "EEDUseTestCertPolicy", __p);
    if (__p[0]) {
      int v8 = v7;
    }
    else {
      int v8 = 0;
    }
    if (*(void *)&buf[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v9 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      int v10 = "Prod";
      int v11 = *(_DWORD *)a1;
      if (v8) {
        int v10 = "Test";
      }
      *(_DWORD *)uint64_t buf = 67240450;
      *(_DWORD *)&uint8_t buf[4] = v11;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#EED2Cfg,inst,%{public}d,configured to use %{public}s ADR cert policy", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v31 = "Prod";
      int v32 = *(_DWORD *)a1;
      if (v8) {
        uint64_t v31 = "Test";
      }
      *(_DWORD *)long long __p = 67240450;
      *(_DWORD *)&__p[4] = v32;
      *(_WORD *)&__p[8] = 2082;
      *(void *)&__p[10] = v31;
      __int16 v33 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::PartnerCertMap CLEmergencyEED2::SimConfig::getValidatedPartnerCerts(const PartnerCertMap &) const", "%s\n", v33);
      if (v33 != buf) {
        free(v33);
      }
    }
    uint64_t ApplePinned = SecPolicyCreateApplePinned();
    int v13 = (const void *)ApplePinned;
    if (ApplePinned)
    {
      for (uint64_t i = *(uint64_t **)(a2 + 16); i; uint64_t i = (uint64_t *)*i)
      {
        if (*((char *)i + 39) < 0)
        {
          uint64_t ApplePinned = (uint64_t)sub_1000DC48C(__p, (void *)i[2], i[3]);
        }
        else
        {
          *(_OWORD *)long long __p = *((_OWORD *)i + 1);
          *(void *)&__p[16] = i[4];
        }
        if (*((char *)i + 63) < 0) {
          uint64_t ApplePinned = (uint64_t)sub_1000DC48C(&__str, (void *)i[5], i[6]);
        }
        else {
          std::string __str = *(std::string *)(i + 5);
        }
        if (sub_100A7E4F8(ApplePinned, v13, (uint64_t)v6, (uint64_t *)__p, (uint64_t *)&__str))
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          std::string v15 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
          {
            if (__p[23] >= 0) {
              char v16 = __p;
            }
            else {
              char v16 = *(unsigned char **)__p;
            }
            p_str = &__str;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)uint64_t buf = 136446466;
            *(void *)&uint8_t buf[4] = v16;
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = p_str;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#EED2Cfg,partner certificate is valid,partner ID,%{public}s,partner cert,%{public}s", buf, 0x16u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_1022DBA80);
            }
            if (__p[23] >= 0) {
              int v22 = __p;
            }
            else {
              int v22 = *(unsigned char **)__p;
            }
            __int16 v23 = &__str;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              __int16 v23 = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            int v36 = 136446466;
            int v37 = v22;
            __int16 v38 = 2082;
            __int16 v39 = v23;
            int v24 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::PartnerCertMap CLEmergencyEED2::SimConfig::getValidatedPartnerCerts(const PartnerCertMap &) const", "%s\n", v24);
            if (v24 != buf) {
              free(v24);
            }
          }
          *(void *)uint64_t buf = __p;
          uint64_t v18 = sub_100ABC208(a3, __p, (uint64_t)&unk_101D0B290, (long long **)buf);
          uint64_t ApplePinned = (uint64_t)std::string::operator=((std::string *)(v18 + 40), &__str);
        }
        else
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          __int16 v19 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
          {
            if (__p[23] >= 0) {
              BOOL v20 = __p;
            }
            else {
              BOOL v20 = *(unsigned char **)__p;
            }
            __int16 v21 = &__str;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              __int16 v21 = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)uint64_t buf = 136446466;
            *(void *)&uint8_t buf[4] = v20;
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v21;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#EED2Cfg,invalid partner certificate found,partner ID,%{public}s,partner cert,%{public}s", buf, 0x16u);
          }
          uint64_t ApplePinned = sub_10013D1A0(115, 0);
          if (ApplePinned)
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_1022DBA80);
            }
            if (__p[23] >= 0) {
              __int16 v25 = __p;
            }
            else {
              __int16 v25 = *(unsigned char **)__p;
            }
            int v26 = &__str;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              int v26 = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            int v36 = 136446466;
            int v37 = v25;
            __int16 v38 = 2082;
            __int16 v39 = v26;
            __int16 v27 = (char *)_os_log_send_and_compose_impl();
            uint64_t ApplePinned = sub_1004BA5E4("Generic", 1, 0, 0, "CLEmergencyEED2::PartnerCertMap CLEmergencyEED2::SimConfig::getValidatedPartnerCerts(const PartnerCertMap &) const", "%s\n", v27);
            if (v27 != buf) {
              free(v27);
            }
          }
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      CFRelease(v6);
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v30 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "#EED2Cfg,failed to create ADR cert validation policy", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        *(_WORD *)long long __p = 0;
        int v34 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLEmergencyEED2::PartnerCertMap CLEmergencyEED2::SimConfig::getValidatedPartnerCerts(const PartnerCertMap &) const", "%s\n", v34);
        if (v34 != buf) {
          free(v34);
        }
      }
      int v13 = v6;
    }
    CFRelease(v13);
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v28 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "#EED2Cfg,unable to convert intermediate cert data to SecCertificateRef", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      *(_WORD *)long long __p = 0;
      __int16 v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLEmergencyEED2::PartnerCertMap CLEmergencyEED2::SimConfig::getValidatedPartnerCerts(const PartnerCertMap &) const", "%s\n", v29);
      if (v29 != buf) {
        free(v29);
      }
    }
  }
}

void sub_100A7D37C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  sub_100ABB83C(v32);
  _Unwind_Resume(a1);
}

uint64_t sub_100A7D3F8@<X0>(int *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  sub_100A7C6C8(a1, (uint64_t)v23);
  memset(v21, 0, sizeof(v21));
  int v22 = 1065353216;
  SecCertificateRef v6 = sub_100103284(v23, a2);
  int v7 = v6;
  if (v6)
  {
    *(void *)uint64_t buf = v6 + 16;
    int v8 = sub_100ABC208((uint64_t)v21, v6 + 16, (uint64_t)&unk_101D0B290, (long long **)buf);
    std::string::operator=((std::string *)(v8 + 40), (const std::string *)(v7 + 40));
    sub_100A7CA60((uint64_t *)a1, (uint64_t)v21, (uint64_t)v28);
    if (v31)
    {
      *(void *)uint64_t buf = a2;
      int v9 = sub_100ABC208((uint64_t)v28, a2, (uint64_t)&unk_101D0B290, (long long **)buf);
      if ((char)v9[63] < 0)
      {
        sub_1000DC48C((unsigned char *)a3, *((void **)v9 + 5), *((void *)v9 + 6));
      }
      else
      {
        long long v10 = *(_OWORD *)(v9 + 40);
        *(void *)(a3 + 16) = *((void *)v9 + 7);
        *(_OWORD *)a3 = v10;
      }
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v14 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        int v15 = *a1;
        *(_DWORD *)uint64_t buf = 67240448;
        *(_DWORD *)&uint8_t buf[4] = v15;
        __int16 v33 = 2048;
        int v34 = (unsigned __int8 *)v31;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#Warning #EED2Cfg,inst,%{public}d,getValidatedCertForPartner,validatedCertMap size:%lu,early return", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        int v19 = *a1;
        int v24 = 67240448;
        int v25 = v19;
        __int16 v26 = 2048;
        __int16 v27 = v31;
        BOOL v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "std::string CLEmergencyEED2::SimConfig::getValidatedCertForPartner(std::string) const", "%s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
      }
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
    }
    sub_100ABB83C((uint64_t)v28);
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v11 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      int v12 = *a1;
      int v13 = a2;
      if ((char)a2[23] < 0) {
        int v13 = *(unsigned __int8 **)a2;
      }
      *(_DWORD *)uint64_t buf = 67240450;
      *(_DWORD *)&uint8_t buf[4] = v12;
      __int16 v33 = 2080;
      int v34 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#Warning #EED2Cfg,inst,%{public}d,getValidatedCertForPartner,cert not found for partner: %s,early return", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v17 = *a1;
      if ((char)a2[23] < 0) {
        a2 = *(unsigned __int8 **)a2;
      }
      v28[0] = 67240450;
      v28[1] = v17;
      __int16 v29 = 2080;
      int v30 = a2;
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "std::string CLEmergencyEED2::SimConfig::getValidatedCertForPartner(std::string) const", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  sub_100ABB83C((uint64_t)v21);
  return sub_100ABB83C((uint64_t)v23);
}

void sub_100A7D850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  sub_100ABB83C((uint64_t)va2);
  sub_100ABB83C((uint64_t)va);
  sub_100ABB83C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100A7D894(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_100A7D89C(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

SecCertificateRef sub_100A7D8F0(uint64_t *a1)
{
  id v2 = objc_alloc((Class)NSData);
  if (*((char *)a1 + 23) >= 0) {
    BOOL v3 = a1;
  }
  else {
    BOOL v3 = (uint64_t *)*a1;
  }
  CFDataRef v4 = (const __CFData *)[v2 initWithBase64EncodedString:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3) options:0];
  CFDataRef v5 = v4;
  if (v4 && [(__CFData *)v4 length])
  {
    SecCertificateRef v6 = SecCertificateCreateWithData(0, v5);

    return v6;
  }
  else
  {

    return 0;
  }
}

uint64_t sub_100A7D984(uint64_t a1)
{
  sub_10010F274((uint64_t)v22);
  id v2 = sub_100132EFC(v23, (uint64_t)"partnerID,", 10);
  int v3 = *(char *)(a1 + 23);
  if (v3 >= 0) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)a1;
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v5 = *(void *)(a1 + 8);
  }
  SecCertificateRef v6 = sub_100132EFC(v2, v4, v5);
  sub_100132EFC(v6, (uint64_t)",requestsSupported,", 19);
  uint64_t v7 = (void *)std::ostream::operator<<();
  uint64_t v8 = sub_100132EFC(v7, (uint64_t)",baseURL,", 9);
  int v9 = *(char *)(a1 + 79);
  if (v9 >= 0) {
    uint64_t v10 = a1 + 56;
  }
  else {
    uint64_t v10 = *(void *)(a1 + 56);
  }
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a1 + 79);
  }
  else {
    uint64_t v11 = *(void *)(a1 + 64);
  }
  uint64_t v12 = sub_100132EFC(v8, v10, v11);
  uint64_t v13 = sub_100132EFC(v12, (uint64_t)",adrCert,", 9);
  uint64_t v16 = *(void *)(a1 + 24);
  uint64_t v15 = a1 + 24;
  uint64_t v14 = v16;
  int v17 = *(char *)(v15 + 23);
  if (v17 >= 0) {
    uint64_t v18 = v15;
  }
  else {
    uint64_t v18 = v14;
  }
  if (v17 >= 0) {
    uint64_t v19 = *(unsigned __int8 *)(v15 + 23);
  }
  else {
    uint64_t v19 = *(void *)(v15 + 8);
  }
  sub_100132EFC(v13, v18, v19);
  std::stringbuf::str();
  *(void *)((char *)v22
  v23[0] = v20;
  if (v24 < 0) {
    operator delete((void *)v23[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100A7DB98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100A7DBAC(uint64_t a1, uint64_t a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  uint64_t v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning #EED2Cfg,readPartnerInfoDefault,partner info default overriding certs and other partner info from other sources", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::SimConfig::readPartnerInfoDefault(CLNameValuePair &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_100ABB8BC(a1 + 160);
  sub_1004CFF34(a2);
}

void sub_100A7E478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  a30 = &a15;
  sub_1000A7B4C((void ***)&a30);
  _Unwind_Resume(a1);
}

BOOL sub_100A7E4F8(uint64_t a1, const void *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  SecCertificateRef v8 = sub_100A7D8F0(a5);
  if (v8)
  {
    int v9 = v8;
    id v10 = [(id)SecCertificateCopyCommonNames() objectAtIndexedSubscript:0];
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v11 = a4;
    }
    else {
      uint64_t v11 = (uint64_t *)*a4;
    }
    if ((objc_msgSend(v10, "isEqualToString:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11)) & 1) == 0)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      __int16 v23 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        if (*((char *)a4 + 23) >= 0) {
          char v24 = a4;
        }
        else {
          char v24 = (uint64_t *)*a4;
        }
        *(_DWORD *)uint64_t buf = 136446466;
        size_t v52 = v24;
        __int16 v53 = 2082;
        *(void *)__int16 v54 = [v10 UTF8String];
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "#EED2Cfg,partner ID does not match common name in cert,partner ID,%{public}s,common name,%{public}s", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        if (*((char *)a4 + 23) < 0) {
          a4 = (uint64_t *)*a4;
        }
        int v44 = 136446466;
        int v45 = a4;
        __int16 v46 = 2082;
        *(void *)signed __int8 v47 = [v10 UTF8String];
        __int16 v35 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::SimConfig::validatePartnerCertificate(SecPolicyRef, SecCertificateRef, const std::string &, const std::string &) const", "%s\n", v35);
        if (v35 != (char *)buf) {
          free(v35);
        }
      }
      SecTrustRef v25 = v9;
      goto LABEL_54;
    }
    v50[0] = v9;
    v50[1] = a3;
    uint64_t v12 = +[NSArray arrayWithObjects:v50 count:2];
    CFRelease(v9);
    SecTrustRef trust = 0;
    OSStatus v13 = SecTrustCreateWithCertificates(v12, a2, &trust);
    if (v13)
    {
      OSStatus v14 = v13;
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v15 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        if (*((char *)a4 + 23) >= 0) {
          uint64_t v16 = a4;
        }
        else {
          uint64_t v16 = (uint64_t *)*a4;
        }
        *(_DWORD *)uint64_t buf = 136446466;
        size_t v52 = v16;
        __int16 v53 = 1026;
        *(_DWORD *)__int16 v54 = v14;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#EED2Cfg,failed to create trust object when validating ADR cert,partner ID,%{public}s,err,%{public}d", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        if (*((char *)a4 + 23) >= 0) {
          int v17 = a4;
        }
        else {
          int v17 = (uint64_t *)*a4;
        }
LABEL_78:
        int v44 = 136446466;
        int v45 = v17;
        __int16 v46 = 1026;
        *(_DWORD *)signed __int8 v47 = v14;
        int v36 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::SimConfig::validatePartnerCertificate(SecPolicyRef, SecCertificateRef, const std::string &, const std::string &) const", "%s\n", v36);
        if (v36 != (char *)buf) {
          free(v36);
        }
      }
    }
    else
    {
      OSStatus Allowed = SecTrustSetNetworkFetchAllowed(trust, 0);
      if (!Allowed)
      {
        CFErrorRef error = 0;
        BOOL v20 = SecTrustEvaluateWithError(trust, &error);
        CFRelease(trust);
        if (!error) {
          return v20;
        }
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        int v30 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
        {
          if (*((char *)a4 + 23) >= 0) {
            uint64_t v31 = a4;
          }
          else {
            uint64_t v31 = (uint64_t *)*a4;
          }
          unsigned int v32 = [(__CFError *)error code];
          id v33 = [[-[__CFError domain](error, "domain") UTF8String];
          id v34 = [[-[__CFError localizedDescription](error, "localizedDescription") UTF8String];
          *(_DWORD *)uint64_t buf = 136446978;
          size_t v52 = v31;
          __int16 v53 = 1026;
          *(_DWORD *)__int16 v54 = v32;
          *(_WORD *)&v54[4] = 2082;
          *(void *)&v54[6] = v33;
          __int16 v55 = 2082;
          id v56 = v34;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "#EED2Cfg,ADR certificate validation failed,partner ID,%{public}s,error code,%{public}d,domain,%{public}s,reason,%{public}s", buf, 0x26u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          if (*((char *)a4 + 23) >= 0) {
            int v37 = a4;
          }
          else {
            int v37 = (uint64_t *)*a4;
          }
          unsigned int v38 = [(__CFError *)error code];
          id v39 = [[-[__CFError domain](error, "domain") UTF8String];
          id v40 = [[-[__CFError localizedDescription](error, "localizedDescription") UTF8String];
          int v44 = 136446978;
          int v45 = v37;
          __int16 v46 = 1026;
          *(_DWORD *)signed __int8 v47 = v38;
          *(_WORD *)&v47[4] = 2082;
          *(void *)&v47[6] = v39;
          __int16 v48 = 2082;
          id v49 = v40;
          uint64_t v41 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::SimConfig::validatePartnerCertificate(SecPolicyRef, SecCertificateRef, const std::string &, const std::string &) const", "%s\n", v41);
          if (v41 != (char *)buf) {
            free(v41);
          }
        }

        return 0;
      }
      OSStatus v14 = Allowed;
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      __int16 v27 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        if (*((char *)a4 + 23) >= 0) {
          int v28 = a4;
        }
        else {
          int v28 = (uint64_t *)*a4;
        }
        *(_DWORD *)uint64_t buf = 136446466;
        size_t v52 = v28;
        __int16 v53 = 1026;
        *(_DWORD *)__int16 v54 = v14;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "#EED2Cfg,failed to disable network use for trust eval,partner ID,%{public}s,err,%{public}d", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        if (*((char *)a4 + 23) >= 0) {
          int v17 = a4;
        }
        else {
          int v17 = (uint64_t *)*a4;
        }
        goto LABEL_78;
      }
    }
    SecTrustRef v25 = trust;
    if (!trust) {
      return 0;
    }
LABEL_54:
    CFRelease(v25);
    return 0;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  uint64_t v18 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v19 = a4;
    }
    else {
      uint64_t v19 = (uint64_t *)*a4;
    }
    *(_DWORD *)uint64_t buf = 136446210;
    size_t v52 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#EED2Cfg,unable to convert partner cert data to SecCertificateRef,partner ID,%{public}s", buf, 0xCu);
  }
  BOOL v20 = 0;
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    if (*((char *)a4 + 23) >= 0) {
      __int16 v21 = a4;
    }
    else {
      __int16 v21 = (uint64_t *)*a4;
    }
    int v44 = 136446210;
    int v45 = v21;
    int v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::SimConfig::validatePartnerCertificate(SecPolicyRef, SecCertificateRef, const std::string &, const std::string &) const", "%s\n", v22);
    if (v22 != (char *)buf) {
      free(v22);
    }
    return 0;
  }
  return v20;
}

uint64_t sub_100A7EDFC(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 5) = 0u;
  id v2 = (BOOL *)(a1 + 5);
  *(unsigned char *)(a1 + 4) = 1;
  uint64_t v3 = a1 + 8;
  *(_OWORD *)(a1 + 21) = 0u;
  *(void *)(a1 + 36) = 0x3F80000000000000;
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v4 = a1 + 48;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  int v15 = 0;
  sub_100A7976C((uint64_t)v14, 0);
  sub_100ABAFE4((uint64_t)buf, &v15, (uint64_t)v14);
  sub_100ABC970(v3, (int *)buf, (uint64_t)buf);
  sub_100ABB16C((uint64_t)v17);
  sub_100ABB16C((uint64_t)v14);
  int v15 = 0;
  sub_100A7976C((uint64_t)v14, 0);
  sub_100ABAFE4((uint64_t)buf, &v15, (uint64_t)v14);
  sub_100ABC970(v4, (int *)buf, (uint64_t)buf);
  sub_100ABB16C((uint64_t)v17);
  sub_100ABB16C((uint64_t)v14);
  if (sub_1000FFBA8())
  {
    int v15 = 1;
    sub_100A7976C((uint64_t)v14, 1);
    sub_100ABAFE4((uint64_t)buf, &v15, (uint64_t)v14);
    sub_100ABC970(v3, (int *)buf, (uint64_t)buf);
    sub_100ABB16C((uint64_t)v17);
    sub_100ABB16C((uint64_t)v14);
    int v15 = 1;
    sub_100A7976C((uint64_t)v14, 1);
    sub_100ABAFE4((uint64_t)buf, &v15, (uint64_t)v14);
    sub_100ABC970(v4, (int *)buf, (uint64_t)buf);
    sub_100ABB16C((uint64_t)v17);
    sub_100ABB16C((uint64_t)v14);
  }
  LOBYTE(v15) = 0;
  sub_1000C7F88(buf);
  int v5 = sub_1000D2988(*(uint64_t *)buf, "GpsSimulatorTestMode", (BOOL *)&v15);
  if ((_BYTE)v15) {
    int v6 = v5;
  }
  else {
    int v6 = 0;
  }
  if (v17[0]) {
    sub_1000DB0A0(v17[0]);
  }
  if (v6)
  {
    *(unsigned char *)(a1 + 6) = 1;
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v7 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning #EED2Cfg EED2 is disabled due to simulator mode", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      v14[0] = 0;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::Config::Config()", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  sub_1000C7F88(buf);
  int v8 = sub_1000D2988(*(uint64_t *)buf, "GpsConformanceTestMode", (BOOL *)&v15);
  if ((_BYTE)v15) {
    int v9 = v8;
  }
  else {
    int v9 = 0;
  }
  if (v17[0]) {
    sub_1000DB0A0(v17[0]);
  }
  if (v9)
  {
    *(unsigned char *)(a1 + 7) = 1;
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v10 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning #EED2Cfg EED2 is disabled due to conformance mode", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      v14[0] = 0;
      OSStatus v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::Config::Config()", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  sub_1000C7F88(buf);
  sub_1000D2988(*(uint64_t *)buf, "EEDSendFullADR", v2);
  if (v17[0]) {
    sub_1000DB0A0(v17[0]);
  }
  return a1;
}

void sub_100A7F2E0(_Unwind_Exception *a1)
{
  sub_100ABC8F0(v2);
  sub_100ABC8F0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100A7F364(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)a2;
  v14[0] = v4;
  *(_DWORD *)uint64_t buf = v4;
  int v5 = (void *)(a1 + 8);
  if (sub_10011853C((void *)(a1 + 8), (int *)buf)
    && (*(_DWORD *)buf = v4, int v6 = (void *)(a1 + 48), sub_10011853C(v6, (int *)buf)))
  {
    uint64_t v7 = sub_10011853C(v6, v14);
    if (!v7
      || (v8 = sub_100A7AD4C((uint64_t)(v7 + 3), (unsigned __int8 *)(a2 + 608), (std::string *)(a2 + 1240), (const std::string *)(a2 + 1264)), (int v9 = sub_10011853C(v5, v14)) == 0))
    {
      sub_10000EDDC("unordered_map::at: key not found");
    }
    return v8 | sub_100A7AD4C((uint64_t)(v9 + 3), (unsigned __int8 *)(a2 + 272), (std::string *)(a2 + 1288), (const std::string *)(a2 + 1312));
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v11 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      int v16 = v4;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#EED2Cfg ignoring emergency settings for unexpected inst %{public}d", buf, 8u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      v14[1] = 67240192;
      int v14[2] = v4;
      OSStatus v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::Config::updateEmergencySettings(const CLEmergencyController::LocationSettings &)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_100A7F5B8(uint64_t a1, int a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  int v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = "disabled";
    if (a2) {
      int v5 = "allowed";
    }
    *(_DWORD *)uint64_t buf = 136446210;
    id v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#EED2Cfg EED2 %{public}s via user toggle", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::Config::updateUserSwitchState(const BOOL)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  int v6 = *(unsigned __int8 *)(a1 + 4);
  if (v6 != a2) {
    *(unsigned char *)(a1 + 4) = a2;
  }
  return v6 != a2;
}

BOOL sub_100A7F7B0(int *a1, int a2)
{
  if (a2 == 255 || *a1 == a2)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v4 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      int v5 = *a1;
      *(_DWORD *)uint64_t buf = 67240192;
      int v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#EED2Cfg keeping previous active inst %{public}d", buf, 8u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v10 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::Config::updateEmergencySim(const SimInstance)", "%s\n");
LABEL_27:
    if (v10 != buf) {
      free(v10);
    }
    return 0;
  }
  *(_DWORD *)uint64_t buf = a2;
  if (sub_10011853C((void *)a1 + 1, (int *)buf))
  {
    *a1 = a2;
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v7 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      int v13 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#EED2Cfg active inst changed to %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::Config::updateEmergencySim(const SimInstance)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    return 1;
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    BOOL v8 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      int v13 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#EED2Cfg ignoring unexpected inst %{public}d", buf, 8u);
    }
    BOOL v9 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v9)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v10 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::Config::updateEmergencySim(const SimInstance)", "%s\n");
      goto LABEL_27;
    }
  }
  return result;
}

uint64_t sub_100A7FC24(uint64_t a1, int a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  v17[0] = a2;
  *(_DWORD *)uint64_t buf = a2;
  BOOL v8 = (void *)(a1 + 8);
  if (sub_10011853C((void *)(a1 + 8), (int *)buf)
    && (*(_DWORD *)buf = a2, BOOL v9 = (void *)(a1 + 48), sub_10011853C(v9, (int *)buf)))
  {
    id v10 = sub_10011853C(v9, v17);
    if (!v10 || (BOOL v11 = sub_100A7B86C((uint64_t)(v10 + 3), a4), (v12 = sub_10011853C(v8, v17)) == 0)) {
      sub_10000EDDC("unordered_map::at: key not found");
    }
    return v11 | sub_100A7B86C((uint64_t)(v12 + 3), a3);
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    OSStatus v14 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      int v19 = a2;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#EED2Cfg ignoring BAA settings for unexpected inst %{public}d", buf, 8u);
    }
    BOOL v15 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v15)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      v17[1] = 67240192;
      void v17[2] = a2;
      int v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::Config::updateBaaSettings(const SimInstance, const BAASettings &, const BAASettings &)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_100A7FE6C(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)a2;
  v14[0] = v4;
  *(_DWORD *)uint64_t buf = v4;
  int v5 = (void *)(a1 + 8);
  if (sub_10011853C((void *)(a1 + 8), (int *)buf)
    && (*(_DWORD *)buf = v4, int v6 = (void *)(a1 + 48), sub_10011853C(v6, (int *)buf)))
  {
    uint64_t v7 = sub_10011853C(v6, v14);
    if (!v7
      || (v8 = sub_100A7A6E8((uint64_t)(v7 + 3), (unsigned __int8 *)(a2 + 1152)), (BOOL v9 = sub_10011853C(v5, v14)) == 0))
    {
      sub_10000EDDC("unordered_map::at: key not found");
    }
    return v8 | sub_100A7A6E8((uint64_t)(v9 + 3), (unsigned __int8 *)(a2 + 1064));
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    BOOL v11 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      int v16 = v4;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#EED2Cfg ignoring PreCachedADR settings for unexpected inst %{public}d", buf, 8u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      v14[1] = 67240192;
      int v14[2] = v4;
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::Config::updatePreCachedAdrSettings(const CLEmergencyController::LocationSettings &)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_100A800B0(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 8);
  *(_DWORD *)uint64_t buf = *(_DWORD *)a1;
  if (sub_10011853C((void *)(a1 + 8), (int *)buf))
  {
    uint64_t v3 = sub_10011853C(v2, (int *)a1);
    if (!v3) {
      sub_10000EDDC("unordered_map::at: key not found");
    }
    if (!*((unsigned char *)v3 + 80) || !*(unsigned char *)(a1 + 4) || *(unsigned char *)(a1 + 6)) {
      return 0;
    }
    return *(unsigned char *)(a1 + 7) == 0;
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      int v6 = *(_DWORD *)a1;
      *(_DWORD *)uint64_t buf = 67240192;
      int v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#EED2Cfg unexpected inst %{public}d is active", buf, 8u);
    }
    BOOL v7 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v7)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      BOOL v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::Config::isEnabled() const", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_100A802D4(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 24);
  char v3 = 0;
  while (v2)
  {
    if (*((unsigned char *)v2 + 80)
      && *(unsigned char *)(a1 + 4)
      && !*(unsigned char *)(a1 + 6)
      && !*(unsigned char *)(a1 + 7)
      && *((unsigned char *)v2 + 81)
      && v2[26])
    {
      if (*((char *)v2 + 247) < 0)
      {
        if (v2[29])
        {
LABEL_7:
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          int v4 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
          {
            int v5 = *((_DWORD *)v2 + 4);
            *(_DWORD *)uint64_t buf = 67240192;
            LODWORD(v16) = v5;
            _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2Cfg EED enabled for sim %{public}d operator", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_1022DBA80);
            }
            int v6 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::Config::shouldDisplayEEDUI() const", "%s\n", v6);
            if (v6 != (char *)buf) {
              free(v6);
            }
          }
          char v3 = 1;
          goto LABEL_13;
        }
      }
      else if (*((unsigned char *)v2 + 247))
      {
        goto LABEL_7;
      }
    }
    if (*((unsigned char *)v2 + 448)) {
      goto LABEL_7;
    }
LABEL_13:
    uint64_t v2 = (uint64_t *)*v2;
  }
  for (uint64_t i = *(uint64_t **)(a1 + 64); i; uint64_t i = (uint64_t *)*i)
  {
    if (*((unsigned char *)i + 80)
      && *(unsigned char *)(a1 + 4)
      && !*(unsigned char *)(a1 + 6)
      && !*(unsigned char *)(a1 + 7)
      && *((unsigned char *)i + 81)
      && i[26])
    {
      if (*((char *)i + 247) < 0)
      {
        if (i[29])
        {
LABEL_32:
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          BOOL v8 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
          {
            int v9 = *((_DWORD *)i + 4);
            *(_DWORD *)uint64_t buf = 67240192;
            LODWORD(v16) = v9;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#EED2Cfg EED enabled for sim %{public}d carrier", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_1022DBA80);
            }
            int v10 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::Config::shouldDisplayEEDUI() const", "%s\n", v10);
            if (v10 != (char *)buf) {
              free(v10);
            }
          }
          char v3 = 1;
          continue;
        }
      }
      else if (*((unsigned char *)i + 247))
      {
        goto LABEL_32;
      }
    }
    if (*((unsigned char *)i + 448)) {
      goto LABEL_32;
    }
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  BOOL v11 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v12 = "not be displayed";
    if (v3) {
      BOOL v12 = "be displayed";
    }
    *(_DWORD *)uint64_t buf = 136446210;
    int v16 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#EED2Cfg EED UI should %{public}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    OSStatus v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::Config::shouldDisplayEEDUI() const", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  return v3 & 1;
}

uint64_t sub_100A80850(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 24);
  for (i = 0; v2; uint64_t v2 = (uint64_t *)*v2)
  {
    if (!*((unsigned char *)v2 + 420) && (!*((unsigned char *)v2 + 421) || *((unsigned char *)v2 + 80)))
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v4 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        int v5 = *((_DWORD *)v2 + 4);
        *(_DWORD *)uint64_t buf = 67240192;
        LODWORD(v16) = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#EED2Cfg BAA enabled for sim %{public}d operator", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::Config::shouldRequestBaaCerts() const", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
      char i = 1;
    }
  }
  for (j = *(uint64_t **)(a1 + 64); j; j = (uint64_t *)*j)
  {
    if (!*((unsigned char *)j + 420) && (!*((unsigned char *)j + 421) || *((unsigned char *)j + 80)))
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      BOOL v8 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        int v9 = *((_DWORD *)j + 4);
        *(_DWORD *)uint64_t buf = 67240192;
        LODWORD(v16) = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#EED2Cfg BAA enabled for sim %{public}d carrier", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        int v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::Config::shouldRequestBaaCerts() const", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
      char i = 1;
    }
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  BOOL v11 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    BOOL v12 = "disabled";
    if (i) {
      BOOL v12 = "enabled";
    }
    *(_DWORD *)uint64_t buf = 136446210;
    int v16 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#EED2Cfg BAA cert requests %{public}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    OSStatus v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::Config::shouldRequestBaaCerts() const", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  return i & 1;
}

uint64_t *sub_100A80D4C(int *a1)
{
  uint64_t v2 = a1 + 2;
  *(_DWORD *)uint64_t buf = *a1;
  if (!sub_10011853C((void *)a1 + 1, (int *)buf))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    char v3 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      int v4 = *a1;
      *(_DWORD *)uint64_t buf = 67240192;
      int v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#EED2Cfg EED2 config for inst %{public}d wasn't created on construction", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      BOOL v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "const CLEmergencyEED2::SimConfig &CLEmergencyEED2::Config::getOperatorSimConfig() const", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  int v5 = sub_10011853C(v2, a1);
  if (!v5) {
    sub_10000EDDC("unordered_map::at: key not found");
  }
  return v5 + 3;
}

uint64_t *sub_100A80F3C(uint64_t a1, int a2, uint64_t *a3)
{
  int v13 = a2;
  int v3 = *((char *)a3 + 23);
  if (v3 < 0)
  {
    if (a3[1] != 7)
    {
LABEL_10:
      *(_DWORD *)uint64_t buf = a2;
      int v5 = (void *)(a1 + 8);
      if (!sub_10011853C((void *)(a1 + 8), (int *)buf))
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        int v6 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t buf = 67240192;
          int v17 = v13;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#EED2Cfg EED2 operator config for inst %{public}d wasn't created on construction", buf, 8u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          int v14 = 67240192;
          int v15 = v13;
          BOOL v11 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "const CLEmergencyEED2::SimConfig &CLEmergencyEED2::Config::getSimConfig(SimInstance, std::string) const", "%s\n", v11);
          if (v11 != (char *)buf) {
            free(v11);
          }
        }
      }
      BOOL v7 = sub_10011853C(v5, &v13);
      if (!v7) {
        sub_10000EDDC("unordered_map::at: key not found");
      }
      return v7 + 3;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v3 != 7)
  {
    goto LABEL_10;
  }
  if (*(_DWORD *)a3 != 1920098659 || *(_DWORD *)((char *)a3 + 3) != 1919248754) {
    goto LABEL_10;
  }
  *(_DWORD *)uint64_t buf = a2;
  int v9 = (void *)(a1 + 48);
  if (!sub_10011853C((void *)(a1 + 48), (int *)buf))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v10 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      int v17 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#EED2Cfg EED2 carrier config for inst %{public}d wasn't created on construction", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v14 = 67240192;
      int v15 = v13;
      BOOL v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "const CLEmergencyEED2::SimConfig &CLEmergencyEED2::Config::getSimConfig(SimInstance, std::string) const", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  BOOL v7 = sub_10011853C(v9, &v13);
  if (!v7) {
    sub_10000EDDC("unordered_map::at: key not found");
  }
  return v7 + 3;
}

uint64_t *sub_100A81300(int *a1)
{
  int v2 = *a1;
  sub_100134750(__p, "operator");
  int v3 = sub_100A80F3C((uint64_t)a1, v2, (uint64_t *)__p);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (!*((unsigned char *)v3 + 396) && (!*((unsigned char *)v3 + 397) || *((unsigned char *)v3 + 56) != 0)) {
    return v3;
  }
  if (!sub_1000FFBA8()) {
    goto LABEL_54;
  }
  if (*a1 == 1) {
    int v5 = 0;
  }
  else {
    int v5 = 255;
  }
  if (*a1) {
    int v6 = v5;
  }
  else {
    int v6 = 1;
  }
  sub_100134750(v19, "operator");
  BOOL v7 = sub_100A80F3C((uint64_t)a1, v6, (uint64_t *)v19);
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  if (*((unsigned char *)v7 + 396) || (*((unsigned char *)v7 + 397) ? (BOOL v8 = *((unsigned char *)v7 + 56) == 0) : (BOOL v8 = 0), v8))
  {
LABEL_54:
    int v9 = *a1;
    sub_100134750(v17, "carrier");
    BOOL v7 = sub_100A80F3C((uint64_t)a1, v9, (uint64_t *)v17);
    if (v18 < 0) {
      operator delete(v17[0]);
    }
    if (*((unsigned char *)v7 + 396) || *((unsigned char *)v7 + 397) && !*((unsigned char *)v7 + 56))
    {
      if (!sub_1000FFBA8()) {
        goto LABEL_41;
      }
      if (*a1 == 1) {
        int v10 = 0;
      }
      else {
        int v10 = 255;
      }
      if (*a1) {
        int v11 = v10;
      }
      else {
        int v11 = 1;
      }
      sub_100134750(v15, "carrier");
      BOOL v7 = sub_100A80F3C((uint64_t)a1, v11, (uint64_t *)v15);
      if (v16 < 0) {
        operator delete(v15[0]);
      }
      if (*((unsigned char *)v7 + 396) || *((unsigned char *)v7 + 397) && !*((unsigned char *)v7 + 56))
      {
LABEL_41:
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        BOOL v12 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#EED2Cfg requested sim config for BAA when not enabled", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          int v14 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "const CLEmergencyEED2::SimConfig &CLEmergencyEED2::Config::getSimConfigForBaa() const", "%s\n", v14);
          if (v14 != (char *)buf) {
            free(v14);
          }
        }
        return v3;
      }
    }
  }
  return v7;
}

void sub_100A8161C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a18 < 0) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100A81680(int *a1)
{
  int v2 = *a1;
  sub_100134750(v17, "operator");
  int v3 = sub_100A80F3C((uint64_t)a1, v2, (uint64_t *)v17);
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  if (*((unsigned char *)v3 + 424)) {
    return v3;
  }
  if (!sub_1000FFBA8()) {
    goto LABEL_32;
  }
  if (*a1 == 1) {
    int v6 = 0;
  }
  else {
    int v6 = 255;
  }
  if (*a1) {
    int v7 = v6;
  }
  else {
    int v7 = 1;
  }
  sub_100134750(__p, "operator");
  int v4 = sub_100A80F3C((uint64_t)a1, v7, (uint64_t *)__p);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (!*((unsigned char *)v4 + 424))
  {
LABEL_32:
    int v8 = *a1;
    sub_100134750(v13, "carrier");
    int v4 = sub_100A80F3C((uint64_t)a1, v8, (uint64_t *)v13);
    if (v14 < 0) {
      operator delete(v13[0]);
    }
    if (!*((unsigned char *)v4 + 424))
    {
      if (!sub_1000FFBA8()) {
        return v3;
      }
      int v9 = *a1 == 1 ? 0 : 255;
      int v10 = *a1 ? v9 : 1;
      sub_100134750(v11, "carrier");
      int v4 = sub_100A80F3C((uint64_t)a1, v10, (uint64_t *)v11);
      if (v12 < 0) {
        operator delete(v11[0]);
      }
      if (!*((unsigned char *)v4 + 424)) {
        return v3;
      }
    }
  }
  return v4;
}

void sub_100A817F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A81850(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  sub_100ABCDB0((uint64_t)v17, a4);
  int v11 = (std::__shared_weak_count *)a5[1];
  uint64_t v13 = *a5;
  char v14 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100ABCECC((uint64_t)v16, a6);
  sub_1014824D0((uint64_t)a1, a2, 1, a3, (uint64_t)v17, &v13, (uint64_t)v16);
  sub_100ABCF64(v16);
  if (v14) {
    sub_1000DB0A0(v14);
  }
  sub_100ABCE48(v17);
  *a1 = off_1022DB6B8;
  sub_100A7EDFC((uint64_t)(a1 + 181));
  sub_100134750(&__p, "#EED2 state machine");
  *(void *)uint64_t buf = a1;
  operator new();
}

void sub_100A82318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25)
{
  uint64_t v30 = *v28;
  *int v28 = 0;
  if (v30) {
    operator delete();
  }
  sub_1006FE1A8(v25 + 2040, *(void **)(v25 + 2048));
  sub_100ABD394((uint64_t *)(v25 + 1904), 0);
  sub_1000D7D80(v25 + 1792);
  sub_100ABD344(v27, 0);
  uint64_t v31 = *(void *)(v25 + 1720);
  *(void *)(v25 + 1720) = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  uint64_t v32 = *(void *)(v25 + 1712);
  *(void *)(v25 + 1712) = 0;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
  sub_100ABD254(v26);
  sub_100ABC8F0(v25 + 1496);
  sub_100ABC8F0(v25 + 1456);
  sub_10148289C(v25);
  _Unwind_Resume(a1);
}

uint64_t **sub_100A82530(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  int v18 = a2;
  if (a4 & 1 | (unint64_t)a3)
  {
    int v4 = a4;
    int v5 = a3;
    unsigned int v7 = a2;
    uint64_t v6 = a1;
    if (qword_1024193D0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_101A7CA2C(qword_1024193D0 == -1);
    __break(1u);
  }
  dispatch_once(&qword_1024193D0, &stru_1022DBB20);
LABEL_3:
  int v8 = qword_1024193D8;
  os_log_type_t v9 = *(unsigned char *)(v6 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v9))
  {
    int v10 = (void *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0) {
      int v10 = (void *)*v10;
    }
    sub_100A956A8(v7, __p);
    if (SBYTE3(v23) >= 0) {
      int v11 = __p;
    }
    else {
      int v11 = *(unsigned char **)__p;
    }
    *(_DWORD *)uint64_t buf = 136315650;
    *(void *)&uint8_t buf[4] = v10;
    __int16 v25 = 1024;
    unsigned int v26 = v7;
    __int16 v27 = 2080;
    int v28 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%sstate,%d,%s", buf, 0x1Cu);
    if (SBYTE3(v23) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DBB20);
    }
    uint64_t v13 = (void *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0) {
      uint64_t v13 = (void *)*v13;
    }
    sub_100A956A8(v7, v16);
    if (v17 >= 0) {
      char v14 = v16;
    }
    else {
      char v14 = (void **)v16[0];
    }
    *(_DWORD *)long long __p = 136315650;
    *(void *)&__p[4] = v13;
    __int16 v20 = 1024;
    unsigned int v21 = v7;
    __int16 v22 = 2080;
    __int16 v23 = v14;
    int v15 = (char *)_os_log_send_and_compose_impl();
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLEmergencyEED2>::setStateHandler(State, StateHandler) [T = CLEmergencyEED2]", "%s\n", v15);
    if (v15 != buf) {
      free(v15);
    }
  }
  *(void *)uint64_t buf = &v18;
  BOOL result = sub_1000C5658((uint64_t **)(v6 + 8), &v18, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  result[5] = v5;
  result[6] = v4;
  return result;
}

uint64_t sub_100A82800(uint64_t a1, int a2)
{
  uint64_t result = 0;
  switch(a2)
  {
    case 0:
      v43[0] = 0;
      *(void *)uint64_t buf = v43;
      *((unsigned char *)sub_10097F690(a1 + 1792, v43, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 20) = 0;
      if (sub_1000FFBA8())
      {
        v43[0] = 1;
        *(void *)uint64_t buf = v43;
        *((unsigned char *)sub_10097F690(a1 + 1792, v43, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 20) = 0;
      }
      *(void *)(a1 + 168) = 0;
      *(void *)(a1 + 1896) = 0;
      *(_DWORD *)(a1 + 1832) = 0;
      int v4 = *(void **)(a1 + 1944);
      if (v4)
      {

        *(void *)(a1 + 1944) = 0;
      }
      int v5 = *(const void **)(a1 + 1952);
      if (v5)
      {
        CFRelease(v5);
        *(void *)(a1 + 1952) = 0;
      }
      sub_100A97754(a1 + 1536, 17, 30.0);
      return 0;
    case 1:
      sub_100A98240(a1 + 1536, 17);
      sub_100A98240(a1 + 1536, 18);
      sub_100A986D4(a1);
      return 0;
    case 2:
      *(unsigned char *)(a1 + 1832) = 1;
      uint64_t result = sub_100A97510((unsigned char *)a1);
      if (!result) {
        return result;
      }
      uint64_t result = sub_100A988EC(a1);
      if (result != 4) {
        return result;
      }
      sub_100A98E2C(a1);
      sub_100A9A888(a1);
      return 4;
    case 3:
      *(unsigned char *)(a1 + 1833) = 1;
      *(unsigned char *)(a1 + 1835) = 0;
      goto LABEL_80;
    case 4:
      *(_WORD *)(a1 + 1834) = 1;
LABEL_80:
      sub_100A97754(a1 + 1536, 18, 1.0);
      return 0;
    case 7:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      unsigned int v7 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 SendFixTimeout fired while Initializing", buf, 2u);
      }
      uint64_t result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_121;
      }
      goto LABEL_173;
    case 8:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v8 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 SendAdrTimeout fired while Initializing", buf, 2u);
      }
      uint64_t result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_121;
      }
      goto LABEL_173;
    case 11:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      os_log_type_t v9 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 SessionAssertReleased fired in Initializing state", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        LOWORD(v43[0]) = 0;
        id v34 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Initializing(CLEmergencyEED2::Event)", "%s\n", v34);
        if (v34 != (char *)buf) {
          free(v34);
        }
      }
      sub_101482C04(a1, 0);
      return 0;
    case 12:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      __int16 v23 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 CanSendADRTimeout fired while Initializing", buf, 2u);
      }
      uint64_t result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_121;
      }
      goto LABEL_173;
    case 13:
      v43[0] = 0;
      *(void *)uint64_t buf = v43;
      char v24 = sub_1000EAEE4((uint64_t **)(a1 + 2040), v43, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      if (v24[6] == v24[5])
      {
        int v42 = 1;
        *(void *)uint64_t buf = &v42;
        __int16 v25 = sub_1000EAEE4((uint64_t **)(a1 + 2040), &v42, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        if (v25[6] == v25[5])
        {
          sub_101483350(a1);
          sub_100A9AB94(a1);
          sub_100A98240(a1 + 1536, 14);
        }
      }
      return 0;
    case 14:
      int v10 = (uint64_t **)(a1 + 2040);
      v43[0] = 0;
      *(void *)uint64_t buf = v43;
      int v11 = sub_1000EAEE4((uint64_t **)(a1 + 2040), v43, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      if (v11[6] == v11[5]
        && (int v42 = 1,
            *(void *)uint64_t buf = &v42,
            char v12 = sub_1000EAEE4((uint64_t **)(a1 + 2040), &v42, (uint64_t)&unk_101D0B290, (_DWORD **)buf),
            v12[6] == v12[5]))
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        id v33 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "#EED2 LIS Response timer timedout when no notifications were expected", buf, 2u);
        }
        uint64_t result = sub_10013D1A0(115, 0);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          LOWORD(v43[0]) = 0;
          uint64_t v30 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "CLEmergencyEED2::State CLEmergencyEED2::handler_Initializing(CLEmergencyEED2::Event)", "%s\n", v30);
LABEL_122:
          if (v30 != (char *)buf) {
            free(v30);
          }
          return 0;
        }
      }
      else
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        uint64_t v13 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#EED2 LIS Response timer timedout. Submit AWD report with failure", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          LOWORD(v43[0]) = 0;
          uint64_t v41 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Initializing(CLEmergencyEED2::Event)", "%s\n", v41);
          if (v41 != (char *)buf) {
            free(v41);
          }
        }
        sub_1014832B8(a1, (unsigned int *)(a1 + 340), 10);
        uint64_t v14 = *(void *)(a1 + 2088);
        if (v14) {
          sub_100A9B3C4(a1, (unsigned int *)(v14 + 24), 3u);
        }
        *(void *)(a1 + 352) = -1;
        sub_101483350(a1);
        sub_100A9AB94(a1);
        v43[0] = 0;
        *(void *)uint64_t buf = v43;
        int v15 = sub_1000EAEE4(v10, v43, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        v15[6] = v15[5];
        v43[0] = 1;
        *(void *)uint64_t buf = v43;
        char v16 = sub_1000EAEE4(v10, v43, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        uint64_t result = 0;
        void v16[6] = v16[5];
      }
      return result;
    case 15:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      char v17 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 APNSTokenReceived in Initializing state", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        LOWORD(v43[0]) = 0;
        __int16 v35 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Initializing(CLEmergencyEED2::Event)", "%s\n", v35);
        if (v35 != (char *)buf) {
          free(v35);
        }
      }
      int v18 = *(void **)(a1 + 1840);
      if (!v18) {
        return 0;
      }

      uint64_t result = 0;
      *(void *)(a1 + 1840) = 0;
      return result;
    case 16:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v19 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 APNSMessageReceived in Initializing state", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        LOWORD(v43[0]) = 0;
        int v36 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Initializing(CLEmergencyEED2::Event)", "%s\n", v36);
        if (v36 != (char *)buf) {
          free(v36);
        }
      }
      __int16 v20 = *(void **)(a1 + 1848);
      if (!v20) {
        return 0;
      }

      uint64_t result = 0;
      *(void *)(a1 + 1848) = 0;
      return result;
    case 17:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      unsigned int v21 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "#EED2 InitializationTimeout reached", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        LOWORD(v43[0]) = 0;
        int v37 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLEmergencyEED2::State CLEmergencyEED2::handler_Initializing(CLEmergencyEED2::Event)", "%s\n", v37);
        if (v37 != (char *)buf) {
          free(v37);
        }
      }
      uint64_t result = sub_100A988EC(a1);
      if (result == 4) {
        goto LABEL_106;
      }
      return result;
    case 18:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      unsigned int v26 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#EED2 DebounceTimeout reached", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        LOWORD(v43[0]) = 0;
        unsigned int v38 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Initializing(CLEmergencyEED2::Event)", "%s\n", v38);
        if (v38 != (char *)buf) {
          free(v38);
        }
      }
      *(unsigned char *)(a1 + 1835) = 1;
      uint64_t result = sub_100A97510((unsigned char *)a1);
      if (result)
      {
        uint64_t result = sub_100A988EC(a1);
        if (result == 4) {
          goto LABEL_106;
        }
      }
      return result;
    case 19:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      __int16 v27 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#EED2 PhoneNumberChanged in Initializing State", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        LOWORD(v43[0]) = 0;
        id v39 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Initializing(CLEmergencyEED2::Event)", "%s\n", v39);
        if (v39 != (char *)buf) {
          free(v39);
        }
      }
      uint64_t result = sub_100A97510((unsigned char *)a1);
      if (result)
      {
        uint64_t result = sub_100A988EC(a1);
        if (result == 4)
        {
LABEL_106:
          sub_100A98E2C(a1);
          sub_100A9A888(a1);
          return 4;
        }
      }
      return result;
    case 20:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v28 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 CallEndpointChanged in Initializing State", buf, 2u);
      }
      uint64_t result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_121;
      }
      goto LABEL_173;
    case 21:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      __int16 v29 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#EED2 BAACertDownload in Initializing State, no-op", buf, 2u);
      }
      uint64_t result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_121;
      }
      goto LABEL_173;
    case 22:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v6 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 APNSReconnected in Initializing state", buf, 2u);
      }
      uint64_t result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_121;
      }
      goto LABEL_173;
    case 23:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      __int16 v22 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#EED2 ControlDataResponseReceived in Initializing State, no-op", buf, 2u);
      }
      uint64_t result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_121;
      }
LABEL_173:
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
LABEL_121:
      LOWORD(v43[0]) = 0;
      uint64_t v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Initializing(CLEmergencyEED2::Event)", "%s\n", v30);
      goto LABEL_122;
    case 24:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v31 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 CoexMetricUpdated in Initializing state, no-op", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        LOWORD(v43[0]) = 0;
        id v40 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Initializing(CLEmergencyEED2::Event)", "%s\n", v40);
        if (v40 != (char *)buf) {
          free(v40);
        }
      }
      uint64_t v32 = *(void **)(a1 + 2016);
      if (!v32) {
        return 0;
      }

      uint64_t result = 0;
      *(void *)(a1 + 2016) = 0;
      return result;
    default:
      return result;
  }
}

uint64_t sub_100A83F58(uint64_t a1, int a2)
{
  uint64_t v2 = 1;
  switch(a2)
  {
    case 0:
      sub_100A9B414();
      sub_100A9B600();
      sub_100A9B91C();
      sub_100A9A888(a1);
      return v2;
    case 3:
      uint64_t v2 = sub_100A988EC(a1);
      if ((v2 - 3) <= 1)
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        int v8 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
        {
          sub_100A956A8(v2, buf);
          os_log_type_t v9 = v52 >= 0 ? buf : *(uint8_t **)buf;
          *(_DWORD *)signed __int8 v47 = 136315138;
          *(void *)&v47[4] = v9;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#EED2, unexpected transition from Disabled state to %s state.", v47, 0xCu);
          if (v52 < 0) {
            operator delete(*(void **)buf);
          }
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          sub_100A956A8(v2, v47);
          if (v48 >= 0) {
            int v10 = v47;
          }
          else {
            int v10 = *(unsigned char **)v47;
          }
          int v49 = 136315138;
          size_t v50 = v10;
          int v11 = (char *)_os_log_send_and_compose_impl();
          if (v48 < 0) {
            operator delete(*(void **)v47);
          }
          sub_1004BA5E4("Generic", 1, 0, 0, "CLEmergencyEED2::State CLEmergencyEED2::handler_Disabled(CLEmergencyEED2::Event)", "%s\n", v11);
          if (v11 != (char *)buf) {
            free(v11);
          }
        }
      }
      return v2;
    case 7:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      char v12 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 SendFixTimeout fired while Disabled", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        goto LABEL_167;
      }
      goto LABEL_126;
    case 8:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v13 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 SendAdrTimeout fired while Disabled", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_126;
      }
      goto LABEL_167;
    case 11:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v4 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 SessionAssertReleased fired in Disabled state", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        *(_WORD *)signed __int8 v47 = 0;
        int v42 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Disabled(CLEmergencyEED2::Event)", "%s\n", v42);
        if (v42 != (char *)buf) {
          free(v42);
        }
      }
      sub_101482C04(a1, 0);
      return 1;
    case 12:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v14 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 CanSendADRTimeout fired while Disabled", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_126;
      }
      goto LABEL_167;
    case 13:
      *(_DWORD *)signed __int8 v47 = 0;
      *(void *)uint64_t buf = v47;
      int v15 = sub_1000EAEE4((uint64_t **)(a1 + 2040), (int *)v47, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      if (v15[6] == v15[5])
      {
        int v49 = 1;
        *(void *)uint64_t buf = &v49;
        char v16 = sub_1000EAEE4((uint64_t **)(a1 + 2040), &v49, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        if (v16[6] == v16[5])
        {
          sub_101483350(a1);
          sub_100A9AB94(a1);
          sub_100A98240(a1 + 1536, 14);
        }
      }
      return 1;
    case 14:
      char v17 = (uint64_t **)(a1 + 2040);
      *(_DWORD *)signed __int8 v47 = 0;
      *(void *)uint64_t buf = v47;
      int v18 = sub_1000EAEE4((uint64_t **)(a1 + 2040), (int *)v47, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      if (v18[6] == v18[5]
        && (int v49 = 1,
            *(void *)uint64_t buf = &v49,
            int v19 = sub_1000EAEE4((uint64_t **)(a1 + 2040), &v49, (uint64_t)&unk_101D0B290, (_DWORD **)buf),
            v19[6] == v19[5]))
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        uint64_t v41 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "#EED2 LIS Response timer timedout when no notifications were expected", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
LABEL_145:
          *(_WORD *)signed __int8 v47 = 0;
          int v37 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "CLEmergencyEED2::State CLEmergencyEED2::handler_Disabled(CLEmergencyEED2::Event)", "%s\n", v37);
LABEL_127:
          if (v37 != (char *)buf) {
            free(v37);
          }
        }
      }
      else
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        __int16 v20 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#EED2 LIS Response timer timedout. Submit AWD report with failure", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          *(_WORD *)signed __int8 v47 = 0;
          __int16 v46 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Disabled(CLEmergencyEED2::Event)", "%s\n", v46);
          if (v46 != (char *)buf) {
            free(v46);
          }
        }
        uint64_t v21 = sub_1014832B8(a1, (unsigned int *)(a1 + 340), 10);
        uint64_t v22 = *(void *)(a1 + 2088);
        if (v22)
        {
          unsigned int v24 = *(_DWORD *)(v22 + 24);
          __int16 v23 = (int *)(v22 + 24);
          unsigned int v25 = sub_100AAFCC0(v21, v24);
          int v26 = *v23;
          if (v25 >= 0xFFFFFFFD) {
            int v26 = 3;
          }
          *__int16 v23 = v26;
        }
        *(void *)(a1 + 352) = -1;
        sub_101483350(a1);
        sub_100A9AB94(a1);
        *(_DWORD *)signed __int8 v47 = 0;
        *(void *)uint64_t buf = v47;
        __int16 v27 = sub_1000EAEE4(v17, (int *)v47, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        v27[6] = v27[5];
        *(_DWORD *)signed __int8 v47 = 1;
        *(void *)uint64_t buf = v47;
        int v28 = sub_1000EAEE4(v17, (int *)v47, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        v28[6] = v28[5];
      }
      return 1;
    case 15:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      __int16 v29 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 APNSTokenReceived in Disabled state", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        *(_WORD *)signed __int8 v47 = 0;
        int v43 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Disabled(CLEmergencyEED2::Event)", "%s\n", v43);
        if (v43 != (char *)buf) {
          free(v43);
        }
      }
      uint64_t v30 = *(void **)(a1 + 1840);
      if (v30)
      {

        *(void *)(a1 + 1840) = 0;
      }
      return 1;
    case 16:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v31 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 APNSMessageReceived in Disabled state", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        *(_WORD *)signed __int8 v47 = 0;
        int v44 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Disabled(CLEmergencyEED2::Event)", "%s\n", v44);
        if (v44 != (char *)buf) {
          free(v44);
        }
      }
      uint64_t v32 = *(void **)(a1 + 1848);
      if (v32)
      {

        *(void *)(a1 + 1848) = 0;
      }
      return 1;
    case 17:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v5 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#Warning #EED2 unexpected InitializationTimeout in Disabled state", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_145;
      }
      goto LABEL_166;
    case 18:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v33 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "#Warning #EED2 unexpected DebounceTimeout in Disabled state", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_145;
      }
LABEL_166:
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      goto LABEL_145;
    case 19:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v6 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#EED2 PhoneNumberChanged in Disabled State, no-op", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_126;
      }
      goto LABEL_167;
    case 20:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      unsigned int v7 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 CallEndpointChanged in Disabled State", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_126;
      }
      goto LABEL_167;
    case 21:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v34 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#EED2 BAACertDownload in Disabled State, no-op", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_126;
      }
      goto LABEL_167;
    case 22:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      __int16 v35 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 APNSReconnected in Disabled state", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_126;
      }
      goto LABEL_167;
    case 23:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v36 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#EED2 ControlDataResponseReceived in Disabled State, no-op", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_126;
      }
LABEL_167:
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
LABEL_126:
      *(_WORD *)signed __int8 v47 = 0;
      int v37 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Disabled(CLEmergencyEED2::Event)", "%s\n", v37);
      goto LABEL_127;
    case 24:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      unsigned int v38 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 CoexMetricUpdated in Disabled state, no-op", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        *(_WORD *)signed __int8 v47 = 0;
        int v45 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Disabled(CLEmergencyEED2::Event)", "%s\n", v45);
        if (v45 != (char *)buf) {
          free(v45);
        }
      }
      id v39 = *(void **)(a1 + 2016);
      if (v39)
      {

        *(void *)(a1 + 2016) = 0;
      }
      return 1;
    default:
      return v2;
  }
}

uint64_t sub_100A85690(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      sub_100A9B414();
      sub_100A9B600();
      sub_100A9B91C();
      sub_100A9A888(a1);
      return 2;
    case 3:
    case 4:
      return sub_100A988EC(a1);
    case 7:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v4 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 SendFixTimeout fired while Idle", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 2;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_142;
      }
      goto LABEL_153;
    case 8:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v5 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 SendAdrTimeout fired while Idle", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 2;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_142;
      }
      goto LABEL_153;
    case 11:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v6 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 SessionAssertReleased fired in Idle state", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        LOWORD(v43[0]) = 0;
        int v37 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Idle(CLEmergencyEED2::Event)", "%s\n", v37);
        if (v37 != (char *)buf) {
          free(v37);
        }
      }
      sub_101482C04(a1, 0);
      return 2;
    case 12:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v15 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 CanSendADRTimeout fired while Idle", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 2;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_142;
      }
      goto LABEL_153;
    case 13:
      v43[0] = 0;
      *(void *)uint64_t buf = v43;
      char v16 = sub_1000EAEE4((uint64_t **)(a1 + 2040), v43, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      if (v16[6] == v16[5])
      {
        int v42 = 1;
        *(void *)uint64_t buf = &v42;
        char v17 = sub_1000EAEE4((uint64_t **)(a1 + 2040), &v42, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        if (v17[6] == v17[5])
        {
          sub_101483350(a1);
          sub_100A9AB94(a1);
          sub_100A98240(a1 + 1536, 14);
        }
      }
      return 2;
    case 14:
      int v18 = (uint64_t **)(a1 + 2040);
      v43[0] = 0;
      *(void *)uint64_t buf = v43;
      int v19 = sub_1000EAEE4((uint64_t **)(a1 + 2040), v43, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      if (v19[6] == v19[5]
        && (int v42 = 1,
            *(void *)uint64_t buf = &v42,
            __int16 v20 = sub_1000EAEE4((uint64_t **)(a1 + 2040), &v42, (uint64_t)&unk_101D0B290, (_DWORD **)buf),
            v20[6] == v20[5]))
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        int v36 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "#EED2 LIS response timer timedout when no notifications were expected", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          LOWORD(v43[0]) = 0;
          int v10 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "CLEmergencyEED2::State CLEmergencyEED2::handler_Idle(CLEmergencyEED2::Event)", "%s\n", v10);
LABEL_143:
          if (v10 != (char *)buf) {
            free(v10);
          }
        }
      }
      else
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        uint64_t v21 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#EED2 LIS response timer timedout. Submit AWD report with failure", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          LOWORD(v43[0]) = 0;
          uint64_t v41 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Idle(CLEmergencyEED2::Event)", "%s\n", v41);
          if (v41 != (char *)buf) {
            free(v41);
          }
        }
        uint64_t v22 = sub_1014832B8(a1, (unsigned int *)(a1 + 340), 10);
        uint64_t v23 = *(void *)(a1 + 2088);
        if (v23)
        {
          unsigned int v25 = *(_DWORD *)(v23 + 24);
          unsigned int v24 = (int *)(v23 + 24);
          unsigned int v26 = sub_100AAFCC0(v22, v25);
          int v27 = *v24;
          if (v26 >= 0xFFFFFFFD) {
            int v27 = 3;
          }
          *unsigned int v24 = v27;
        }
        *(void *)(a1 + 352) = -1;
        sub_101483350(a1);
        sub_100A9AB94(a1);
        v43[0] = 0;
        *(void *)uint64_t buf = v43;
        int v28 = sub_1000EAEE4(v18, v43, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        v28[6] = v28[5];
        v43[0] = 1;
        *(void *)uint64_t buf = v43;
        __int16 v29 = sub_1000EAEE4(v18, v43, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        v29[6] = v29[5];
      }
      return 2;
    case 15:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v30 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 APNSTokenReceived in Idle state", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        LOWORD(v43[0]) = 0;
        id v40 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Idle(CLEmergencyEED2::Event)", "%s\n", v40);
        if (v40 != (char *)buf) {
          free(v40);
        }
      }
      uint64_t v31 = *(void **)(a1 + 1840);
      if (v31)
      {

        *(void *)(a1 + 1840) = 0;
      }
      return 2;
    case 16:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      unsigned int v7 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 APNSMessageReceived in Idle state", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        LOWORD(v43[0]) = 0;
        unsigned int v38 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Idle(CLEmergencyEED2::Event)", "%s\n", v38);
        if (v38 != (char *)buf) {
          free(v38);
        }
      }
      int v8 = *(void **)(a1 + 1848);
      if (v8)
      {

        *(void *)(a1 + 1848) = 0;
      }
      return 2;
    case 17:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      os_log_type_t v9 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#Warning #EED2 unexpected InitializationTimeout in Idle state", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 2;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_39;
      }
      goto LABEL_151;
    case 18:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v11 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#Warning #EED2 unexpected DebounceTimeout in Idle state", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 2;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_39;
      }
LABEL_151:
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
LABEL_39:
      LOWORD(v43[0]) = 0;
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLEmergencyEED2::State CLEmergencyEED2::handler_Idle(CLEmergencyEED2::Event)", "%s\n", v10);
      goto LABEL_143;
    case 19:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      char v12 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#EED2 PhoneNumberChanged in Idle State, no-op", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 2;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_142;
      }
      goto LABEL_153;
    case 20:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v32 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 CallEndpointChanged in Idle State", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 2;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_142;
      }
      goto LABEL_153;
    case 21:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v33 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#EED2 BAACertDownload in Idle State, no-op", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 2;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_142;
      }
      goto LABEL_153;
    case 22:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v34 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 APNSReconnected in Idle state", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 2;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_142;
      }
      goto LABEL_153;
    case 23:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      __int16 v35 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#EED2 ControlDataResponseReceived in Idle State, no-op", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 2;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_142;
      }
LABEL_153:
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
LABEL_142:
      LOWORD(v43[0]) = 0;
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Idle(CLEmergencyEED2::Event)", "%s\n", v10);
      goto LABEL_143;
    case 24:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v13 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 CoexMetricUpdated in Idle state, no-op", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        LOWORD(v43[0]) = 0;
        id v39 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_Idle(CLEmergencyEED2::Event)", "%s\n", v39);
        if (v39 != (char *)buf) {
          free(v39);
        }
      }
      uint64_t v14 = *(void **)(a1 + 2016);
      if (v14)
      {

        *(void *)(a1 + 2016) = 0;
      }
      return 2;
    default:
      return 2;
  }
}

uint64_t sub_100A86C44(uint64_t a1, int a2)
{
  uint64_t v2 = 3;
  switch(a2)
  {
    case 0:
      LODWORD(v88) = 0;
      *(void *)uint64_t buf = &v88;
      int v4 = sub_1000EAEE4((uint64_t **)(a1 + 2040), (int *)&v88, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      if (v4[6] != v4[5]
        || (LODWORD(v85) = 1,
            *(void *)uint64_t buf = &v85,
            int v5 = sub_1000EAEE4((uint64_t **)(a1 + 2040), (int *)&v85, (uint64_t)&unk_101D0B290, (_DWORD **)buf),
            v5[6] != v5[5]))
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        uint64_t v6 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#EED2 Submitting previous session AWD report before starting new session", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          LOWORD(v88) = 0;
          __int16 v61 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ActiveSession(CLEmergencyEED2::Event)", "%s\n", v61);
          if (v61 != (char *)buf) {
            free(v61);
          }
        }
        sub_1014832B8(a1, (unsigned int *)(a1 + 340), 10);
        uint64_t v7 = *(void *)(a1 + 2088);
        if (v7) {
          sub_100A9B3C4(a1, (unsigned int *)(v7 + 24), 3u);
        }
        *(void *)(a1 + 352) = -1;
        sub_101483350(a1);
        sub_100A9AB94(a1);
        LODWORD(v88) = 0;
        *(void *)uint64_t buf = &v88;
        int v8 = sub_1000EAEE4((uint64_t **)(a1 + 2040), (int *)&v88, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        void v8[6] = v8[5];
        LODWORD(v88) = 1;
        *(void *)uint64_t buf = &v88;
        os_log_type_t v9 = sub_1000EAEE4((uint64_t **)(a1 + 2040), (int *)&v88, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        v9[6] = v9[5];
        sub_100A98240(a1 + 1536, 14);
      }
      if (!*(void *)(a1 + 2088)) {
        operator new();
      }
      if (!sub_100A98E2C(a1))
      {
        sub_100A9BC38(a1);
        sub_100A9BD18(*(void *)(a1 + 2088));
      }
      sub_100A9BE48(a1);
      sub_100A9A888(a1);
      *(_WORD *)(a1 + 1960) = 0;
      *(unsigned char *)(a1 + 1962) = 0;
      *(_DWORD *)(a1 + 1964) = 0;
      *(double *)(a1 + 176) = sub_10016C458();
      int v10 = *(_DWORD *)(a1 + 1780);
      *(_DWORD *)(a1 + 1784) = v10;
      uint64_t v11 = *(void *)(a1 + 1768);
      if (v11)
      {
        sub_10139CF68(v11, v10);
        sub_10139EA20(*(void *)(a1 + 1768));
      }
      sub_100A9C3BC(a1);
      if (!*(void *)(a1 + 1904)) {
        operator new();
      }
      sub_100A9C648(a1);
      uint64_t v12 = *(void *)(a1 + 1904);
      if (v12)
      {
        sub_101108FA0(v12, *(_DWORD *)(a1 + 132));
        sub_1011091C4(*(std::string **)(a1 + 1904), (const std::string *)(a1 + 136));
      }
      *(_DWORD *)(a1 + 1672) = 0;
      *(_WORD *)(a1 + 1777) = 0;
      *(_WORD *)(a1 + 2064) = 0;
      *(unsigned char *)(a1 + 1779) = 0;
      sub_1014830F4(a1);
      IOPSGetPercentRemaining();
      *(_DWORD *)(a1 + 2080) = 2;
      int v13 = sub_1006D40B0((unsigned int *)(a1 + 112));
      *(_DWORD *)uint64_t buf = 141;
      LODWORD(v80) = v13;
      int v14 = *(_DWORD *)(a1 + 2080);
      int v82 = 0;
      v83[0] = 138;
      v83[2] = v14;
      v83[8] = 0;
      int v89 = 0;
      int v90 = 0;
      __int16 v88 = 0;
      int v85 = (void **)&v88;
      LOBYTE(v86) = 0;
      __int16 v88 = (char *)operator new(0x50uLL);
      int v89 = v88;
      int v90 = v88 + 80;
      int v89 = (unsigned char *)sub_100682A48((uint64_t)&v90, (uint64_t)buf, (uint64_t)&v84, (uint64_t)v88);
      for (uint64_t i = 48; i != -32; i -= 40)
        sub_100118010((uint64_t)&buf[i]);
      char v16 = *(void **)(a1 + 2096);
      memset(v77, 0, 24);
      sub_100682C20(v77, (uint64_t)v88, (uint64_t)v89, 0xCCCCCCCCCCCCCCCDLL * ((v89 - v88) >> 3));
      [v16 setMeasurements:sub_10067C03C(v77)];
      *(void *)uint64_t buf = v77;
      sub_100682B1C((void ***)buf);
      uint64_t v17 = sub_1001BA55C();
      int v18 = (void *)sub_100802EC0(v17);
      int v19 = v18;
      if (v18)
      {
        __int16 v20 = (char *)[v18 UTF8String];
        *(_DWORD *)uint64_t buf = 127;
        sub_100134750(&v80, v20);
        int v82 = 6;
        uint64_t v86 = 0;
        float v87 = 0;
        int v85 = 0;
        v77[3] = (uint64_t)&v85;
        char v78 = 0;
        int v85 = (void **)operator new(0x28uLL);
        uint64_t v86 = (uint64_t)v85;
        float v87 = v85 + 5;
        uint64_t v86 = sub_100682A48((uint64_t)&v87, (uint64_t)buf, (uint64_t)v83, (uint64_t)v85);
        sub_100118010((uint64_t)&v80);
        uint64_t v21 = *(void **)(a1 + 2096);
        memset(v76, 0, sizeof(v76));
        sub_100682C20(v76, (uint64_t)v85, v86, 0xCCCCCCCCCCCCCCCDLL * ((v86 - (uint64_t)v85) >> 3));
        [v21 setMeasurements:sub_10067C03C(v76)];
        *(void *)uint64_t buf = v76;
        sub_100682B1C((void ***)buf);

        *(void *)uint64_t buf = &v85;
        sub_100682B1C((void ***)buf);
      }
      sub_100A8B154(a1, 2u);
      if (sub_100D33CC4(a1 + 112)
        || (*(_DWORD *)(a1 + 1440) - 2) <= 3 && (*(_DWORD *)(a1 + 1784) - 3) > 3)
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        uint64_t v22 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#EED2 allowed to send ADR data immediately", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          LOWORD(v85) = 0;
          __int16 v70 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ActiveSession(CLEmergencyEED2::Event)", "%s\n", v70);
          if (v70 != (char *)buf) {
            free(v70);
          }
        }
        *(unsigned char *)(a1 + 1777) = 1;
      }
      else
      {
        sub_100A9C9E4(a1);
      }
      int v49 = (int *)(a1 + 1448);
      if (*((unsigned char *)sub_100A80D4C((int *)(a1 + 1448)) + 58))
      {
        uint64_t v50 = *(void *)(a1 + 1744);
        if (v50) {
          *(void *)(a1 + 1752) = +[CLEmergencyEnablementAssertion newAssertionForBundle:v50 withReason:@"fetching DSA for EED2"];
        }
      }
      sub_100A8C4E0(a1);
      sub_100A9CCC0(a1);
      sub_101482C04(a1, 1);
      uint64_t v51 = a1 + 1536;
      sub_100A97754(v51, 11, 60.0);
      char v52 = sub_100A80D4C(v49);
      sub_100A97754(v51, 7, *((double *)v52 + 17));
      __int16 v53 = sub_100A80D4C(v49);
      sub_100A97754(v51, 8, *((double *)v53 + 19));
      *(void *)uint64_t buf = &v88;
      sub_100682B1C((void ***)buf);
      return 3;
    case 1:
      sub_100A9D1E8(a1);
      if (*(void *)(a1 + 2088))
      {
        IOPSGetPercentRemaining();
        *(unsigned char *)(*(void *)(a1 + 2088) + 112) = IOPSDrawingUnlimitedPower();
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        id v39 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v40 = *(void *)(a1 + 2088);
          int v41 = *(_DWORD *)(v40 + 104);
          int v42 = *(_DWORD *)(v40 + 108);
          LODWORD(v40) = *(unsigned __int8 *)(v40 + 112);
          *(_DWORD *)uint64_t buf = 67109632;
          *(_DWORD *)&uint8_t buf[4] = v41;
          LOWORD(v80) = 1024;
          *(_DWORD *)((char *)&v80 + 2) = v42;
          HIWORD(v80) = 1024;
          int v81 = v40;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#EED2 fBatteryLevelAtSessionStart:%d, fBatteryLevelAtCallEnd:%d, fPowerSourcePlugged:%d", buf, 0x14u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          uint64_t v65 = *(void *)(a1 + 2088);
          int v66 = *(_DWORD *)(v65 + 104);
          int v67 = *(_DWORD *)(v65 + 108);
          LODWORD(v65) = *(unsigned __int8 *)(v65 + 112);
          LODWORD(v88) = 67109632;
          HIDWORD(v88) = v66;
          LOWORD(v89) = 1024;
          *(_DWORD *)((char *)&v89 + 2) = v67;
          HIWORD(v89) = 1024;
          LODWORD(v90) = v65;
          __int16 v68 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ActiveSession(CLEmergencyEED2::Event)", "%s\n", v68);
          if (v68 != (char *)buf) {
            free(v68);
          }
        }
      }
      if (sub_100A988EC(a1) != 4)
      {
        sub_100A9D848(a1);
        sub_100A9E068(a1);
        return 3;
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v43 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "#EED2 Moving from ActiveSession state to ExtendedSession state. No cleanup needed at this point", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 3;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
LABEL_269:
      }
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
LABEL_196:
      LOWORD(v88) = 0;
      BOOL v57 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ActiveSession(CLEmergencyEED2::Event)", "%s\n", v57);
      goto LABEL_204;
    case 3:
      if (sub_100A988EC(a1) == 1)
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        uint64_t v23 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 unexpectedly disabled during active emergency call", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          LOWORD(v88) = 0;
          __int16 v71 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ActiveSession(CLEmergencyEED2::Event)", "%s\n", v71);
          if (v71 != (char *)buf) {
            free(v71);
          }
        }
        sub_101482C04(a1, 0);
        sub_1014832B8(a1, (unsigned int *)(a1 + 340), 14);
        uint64_t v24 = *(void *)(a1 + 2088);
        if (v24) {
          sub_100A9B3C4(a1, (unsigned int *)(v24 + 24), 5u);
        }
        return sub_100A988EC(a1);
      }
      return v2;
    case 4:
      uint64_t v2 = sub_100A988EC(a1);
      if (v2 <= 2)
      {
        sub_1014832B8(a1, (unsigned int *)(a1 + 340), 10);
        uint64_t v34 = *(void *)(a1 + 2088);
        if (v34) {
          sub_100A9B3C4(a1, (unsigned int *)(v34 + 24), 3u);
        }
      }
      __int16 v35 = *(void **)(a1 + 1984);
      if (v35)
      {
        uint64_t v36 = *(unsigned int *)(a1 + 1448);
        uint64_t v37 = *(unsigned int *)sub_100A96A4C(a1 + 32, *(_DWORD *)(a1 + 1448));
        BOOL v38 = sub_100D33C94(a1 + 112);
        [v35 handleUpdatesToSim:v36 Rat:v37 WifiEmergency:v38 bandInfo:*(unsigned int *)(sub_100A96A4C(a1 + 32, *(_DWORD *)(a1 + 1448)) + 160)];
      }
      return v2;
    case 5:
      uint64_t v25 = *(unsigned int *)(a1 + 1780);
      if (v25)
      {
        *(_DWORD *)(a1 + 1784) = v25;
        *(_DWORD *)(a1 + 1292) = sub_10101AC10(v25);
        uint64_t v26 = *(void *)(a1 + 1768);
        if (v26) {
          sub_10139CF68(v26, *(_DWORD *)(a1 + 1784));
        }
      }
      if (*(unsigned char *)(a1 + 1777) || !*(unsigned char *)(a1 + 1776)) {
        return v2;
      }
      if ((*(_DWORD *)(a1 + 1440) - 2) >= 4)
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        int v59 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "#EED2 EmergencyCallStatusChange,no ongoing call,cancel CanSendADRTimeout", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          LOWORD(v88) = 0;
          __int16 v74 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ActiveSession(CLEmergencyEED2::Event)", "%s\n", v74);
          if (v74 != (char *)buf) {
            free(v74);
          }
        }
        sub_100A9EE38(a1);
      }
      else
      {
        if (!sub_100D33CC4(a1 + 112)
          && ((*(_DWORD *)(a1 + 1440) - 2) > 3 || (*(_DWORD *)(a1 + 1784) - 3) < 4))
        {
          return v2;
        }
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        int v27 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#EED2 EmergencyCallStatusChange,ADR allowed immediately", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          LOWORD(v88) = 0;
          uint64_t v75 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ActiveSession(CLEmergencyEED2::Event)", "%s\n", v75);
          if (v75 != (char *)buf) {
            free(v75);
          }
        }
        sub_100A9EE38(a1);
        *(unsigned char *)(a1 + 1777) = 1;
        sub_100A9EFDC(a1);
      }
      return 3;
    case 6:
      if (*(unsigned char *)(a1 + 1779))
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        uint64_t v31 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#EED2 CachedLocationUpdate,triggering ADR send", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          LOWORD(v88) = 0;
          __int16 v64 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ActiveSession(CLEmergencyEED2::Event)", "%s\n", v64);
          if (v64 != (char *)buf) {
            free(v64);
          }
        }
        sub_100A9EFDC(a1);
      }
      if (*(unsigned char *)(a1 + 1856))
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        uint64_t v32 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#EED2 CachedLocationUpdate,triggering Control Data send for APNS token", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          LOWORD(v88) = 0;
          int v69 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ActiveSession(CLEmergencyEED2::Event)", "%s\n", v69);
          if (v69 != (char *)buf) {
            free(v69);
          }
        }
        sub_100A9FA38(a1);
        sub_100AA0A2C(a1);
      }
      return 3;
    case 7:
      sub_100A9D848(a1);
      int v44 = sub_100A80D4C((int *)(a1 + 1448));
      sub_100A97754(a1 + 1536, 7, *((double *)v44 + 18));
      return 3;
    case 8:
      *(unsigned char *)(a1 + 1778) = 1;
      goto LABEL_167;
    case 9:
      if (*(unsigned char *)(a1 + 2064) && *(unsigned char *)(a1 + 2065)) {
        goto LABEL_144;
      }
      if (*(unsigned char *)(a1 + 1778)) {
        goto LABEL_167;
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v56 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "#EED2 delaying sending updated ADR data until timer fires or we fetch all ADR data", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 3;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_196;
      }
      goto LABEL_269;
    case 10:
      if (*(unsigned char *)(a1 + 1778) || !*(unsigned char *)(a1 + 2064) || !*(unsigned char *)(a1 + 2065)) {
        return v2;
      }
LABEL_144:
      *(unsigned char *)(a1 + 1778) = 1;
      sub_100A98240(a1 + 1536, 8);
LABEL_167:
      sub_100A9EFDC(a1);
      return v2;
    case 11:
      sub_101482C04(a1, 0);
      return v2;
    case 12:
      *(unsigned char *)(a1 + 1776) = 0;
      if (*(unsigned char *)(a1 + 1777))
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        id v33 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "#EED2 CanSendADRTimeout,ADR sending already allowed", buf, 2u);
        }
        if (!sub_10013D1A0(115, 0)) {
          return 3;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          goto LABEL_270;
        }
        goto LABEL_203;
      }
      if ((*(_DWORD *)(a1 + 1440) - 2) < 4)
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        __int16 v55 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "#EED2 CanSendADRTimeout,ongoing emergency call,allow ADR", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          LOWORD(v88) = 0;
          __int16 v73 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ActiveSession(CLEmergencyEED2::Event)", "%s\n", v73);
          if (v73 != (char *)buf) {
            free(v73);
          }
        }
        *(unsigned char *)(a1 + 1777) = 1;
        sub_100A9EFDC(a1);
        return 3;
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      __int16 v58 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_ERROR, "#EED2 CanSendADRTimeout,no ongoing emergency call", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          goto LABEL_270;
        }
        goto LABEL_203;
      }
      break;
    case 14:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      __int16 v29 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 LIS Timeout while in ActiveSession. Ignoring it", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 3;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_196;
      }
      goto LABEL_269;
    case 15:
      sub_100A9FA38(a1);
      sub_100AA0A2C(a1);
      return v2;
    case 16:
      sub_100AA1FA0(a1);
      return v2;
    case 17:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v45 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "#Warning #EED2 unexpected InitializationTimeout in ActiveSession state", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 3;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_203;
      }
      goto LABEL_270;
    case 18:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      signed __int8 v47 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "#Warning #EED2 unexpected DebounceTimeout in ActiveSession state", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 3;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_203;
      }
      goto LABEL_270;
    case 19:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      __int16 v46 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "#EED2 PhoneNumberChanged in ActiveSession State, no-op", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 3;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_196;
      }
      goto LABEL_269;
    case 20:
      sub_100A9D848(a1);
      if (*(void *)(a1 + 1840)) {
        sub_100A9FA38(a1);
      }
      return v2;
    case 21:
      if (*(void *)(a1 + 1840))
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        uint64_t v30 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#EED2 BAACertDownload in ActiveSession State, sendControlData", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          LOWORD(v88) = 0;
          __int16 v63 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ActiveSession(CLEmergencyEED2::Event)", "%s\n", v63);
          if (v63 != (char *)buf) {
            free(v63);
          }
        }
        sub_100A9FA38(a1);
      }
      if (*(unsigned char *)(a1 + 1778) && *(unsigned char *)(a1 + 2064) && *(unsigned char *)(a1 + 2065)) {
        sub_100A9EFDC(a1);
      }
      return 3;
    case 22:
      if (*(void *)(a1 + 1840)) {
        return v2;
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      char v48 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "#EED2 APNSReconnected and nil fAPNSToken. Request APNS token", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        LOWORD(v88) = 0;
        __int16 v72 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ActiveSession(CLEmergencyEED2::Event)", "%s\n", v72);
        if (v72 != (char *)buf) {
          free(v72);
        }
      }
      sub_100A9C648(a1);
      return 3;
    case 23:
      sub_100AA3598(a1);
      return v2;
    case 24:
      if (*(void *)(a1 + 2016))
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        int v28 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#EED2 CoexMetricUpdated in ActiveSession state, cache the metric data", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          LOWORD(v88) = 0;
          __int16 v62 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ActiveSession(CLEmergencyEED2::Event)", "%s\n", v62);
          if (v62 != (char *)buf) {
            free(v62);
          }
        }
        sub_100AA3A64(a1);
      }
      else
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        __int16 v54 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "#EED2 CoexMetricUpdated in ActiveSession state, but nil fCoexMetricDict", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
LABEL_270:
          }
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
LABEL_203:
          LOWORD(v88) = 0;
          BOOL v57 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "CLEmergencyEED2::State CLEmergencyEED2::handler_ActiveSession(CLEmergencyEED2::Event)", "%s\n", v57);
LABEL_204:
          if (v57 != (char *)buf) {
            free(v57);
          }
        }
      }
      break;
    default:
      return v2;
  }
  return 3;
}

void sub_100A88EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)(v19 - 112);
  sub_100682B1C(&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100A89060(uint64_t a1, int a2)
{
  uint64_t v2 = 4;
  switch(a2)
  {
    case 0:
      if (*(double *)(a1 + 1896) <= 0.0) {
        sub_100A9D1E8(a1);
      }
      sub_100A9EE38(a1);
      goto LABEL_5;
    case 1:
      sub_100A9E068(a1);
      return v2;
    case 3:
      if (sub_100A988EC(a1) == 1)
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        int v5 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 unexpectedly disabled during extended emergency state (i.e. EEM mode)", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          uint64_t v30 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ExtendedSession(CLEmergencyEED2::Event)", "%s\n", v30);
          if (v30 != (char *)buf) {
            free(v30);
          }
        }
        sub_101482C04(a1, 0);
        sub_1014832B8(a1, (unsigned int *)(a1 + 340), 14);
        uint64_t v6 = *(void *)(a1 + 2088);
        if (v6) {
          sub_100A9B3C4(a1, (unsigned int *)(v6 + 24), 5u);
        }
        return sub_100A988EC(a1);
      }
      return v2;
    case 4:
      uint64_t v2 = sub_100A988EC(a1);
      if ((v2 & 6) != 2) {
        return v2;
      }
      goto LABEL_54;
    case 5:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v7 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#EED2 EmergencyCallStatusChange in ExtendedSession state,no-op", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 4;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_146;
      }
      goto LABEL_161;
    case 6:
      if (!*(unsigned char *)(a1 + 1779)) {
        return v2;
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v8 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#EED2 CachedLocationUpdate,triggering ADR send", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        __int16 v29 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ExtendedSession(CLEmergencyEED2::Event)", "%s\n", v29);
        if (v29 != (char *)buf) {
          free(v29);
        }
      }
      sub_100A9EFDC(a1);
      return 4;
    case 7:
LABEL_5:
      sub_100A9D848(a1);
      int v4 = sub_100A80D4C((int *)(a1 + 1448));
      sub_100A97754(a1 + 1536, 7, *((double *)v4 + 18));
      return 4;
    case 8:
      *(unsigned char *)(a1 + 1778) = 1;
      goto LABEL_47;
    case 9:
      if (*(unsigned char *)(a1 + 2064) && *(unsigned char *)(a1 + 2065)) {
        goto LABEL_46;
      }
      if (*(unsigned char *)(a1 + 1778)) {
        goto LABEL_47;
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      os_log_type_t v9 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#EED2 delaying sending updated ADR data until timer fires or we fetch all ADR data", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 4;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_146;
      }
      goto LABEL_161;
    case 10:
      if (*(unsigned char *)(a1 + 1778) || !*(unsigned char *)(a1 + 2064) || !*(unsigned char *)(a1 + 2065)) {
        return v2;
      }
LABEL_46:
      *(unsigned char *)(a1 + 1778) = 1;
      sub_100A98240(a1 + 1536, 8);
LABEL_47:
      sub_100A9EFDC(a1);
      return v2;
    case 11:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v10 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 SessionAssertReleased fired in ExtendedSession state", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        uint64_t v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ExtendedSession(CLEmergencyEED2::Event)", "%s\n", v26);
        if (v26 != (char *)buf) {
          free(v26);
        }
      }
      sub_101482C04(a1, 0);
      uint64_t v2 = sub_100A988EC(a1);
      if (v2 != 4)
      {
LABEL_54:
        sub_1014832B8(a1, (unsigned int *)(a1 + 340), 10);
        uint64_t v11 = *(void *)(a1 + 2088);
        if (v11) {
          sub_100A9B3C4(a1, (unsigned int *)(v11 + 24), 3u);
        }
      }
      return v2;
    case 12:
      *(unsigned char *)(a1 + 1776) = 0;
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v12 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#EED2 CanSendADRTimeout,no ongoing emergency call in ExtendedSession state, ignore Event::CanSendADRTimeout", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 4;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_125;
      }
      goto LABEL_164;
    case 14:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v13 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 LISResponseTimeout while in ExtendedSession. Ignoring it", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 4;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_146;
      }
      goto LABEL_161;
    case 15:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v14 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 APNSTokenReceived in ExtendedSession state. Ignore it", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        int v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ExtendedSession(CLEmergencyEED2::Event)", "%s\n", v27);
        if (v27 != (char *)buf) {
          free(v27);
        }
      }
      int v15 = *(void **)(a1 + 1840);
      if (v15)
      {

        *(void *)(a1 + 1840) = 0;
      }
      return 4;
    case 16:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      char v16 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 APNSMessageReceived in ExtendedSession state. Add directly to RequestsHandled queue", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        int v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ExtendedSession(CLEmergencyEED2::Event)", "%s\n", v28);
        if (v28 != (char *)buf) {
          free(v28);
        }
      }
      sub_100AA3D44(a1);
      return 4;
    case 17:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v17 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#Warning #EED2 unexpected InitializationTimeout in ExtendedSession state", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 4;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_125;
      }
      goto LABEL_164;
    case 18:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v22 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#Warning #EED2 unexpected DebounceTimeout in ExtendedSession state", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 4;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_125;
      }
LABEL_164:
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
LABEL_125:
      uint64_t v23 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLEmergencyEED2::State CLEmergencyEED2::handler_ExtendedSession(CLEmergencyEED2::Event)", "%s\n");
      goto LABEL_147;
    case 19:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v18 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#EED2 PhoneNumberChanged in ExtendedSession State, no-op", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 4;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_146;
      }
      goto LABEL_161;
    case 20:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v19 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#EED2 CallEndpointChanged in ExtendedSession State, no-op", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 4;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_146;
      }
      goto LABEL_161;
    case 21:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      __int16 v20 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#EED2 BAACertDownload in ExtendedSession State, no-op", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 4;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_146;
      }
      goto LABEL_161;
    case 22:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v24 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 APNSReconnected in ExtendedSession state, Ignore it", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 4;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_146;
      }
      goto LABEL_161;
    case 23:
      sub_100AA3598(a1);
      return v2;
    case 24:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v21 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 CoexMetricUpdated in ExtendedSession state, no-op", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 4;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_146;
      }
LABEL_161:
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
LABEL_146:
      uint64_t v23 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::handler_ExtendedSession(CLEmergencyEED2::Event)", "%s\n");
LABEL_147:
      if (v23 != buf) {
        free(v23);
      }
      return 4;
    default:
      return v2;
  }
}

uint64_t sub_100A8A2BC()
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  uint64_t v0 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,deleting cached info", buf, 2u);
  }
  uint64_t v1 = sub_10013D1A0(115, 2);
  if (v1)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v10 = (char *)_os_log_send_and_compose_impl();
    uint64_t v1 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::deleteCachedBaaInfo()", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  uint64_t v2 = sub_100AA586C(v1, @"com.apple.locationd.BAA.key");
  if ((v2 & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v3 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,unable to delete existing BAA private key", buf, 2u);
    }
    uint64_t v2 = sub_10013D1A0(115, 2);
    if (v2)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      uint64_t v2 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::deleteCachedBaaInfo()", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  uint64_t v4 = sub_100AA5F10(v2, @"com.apple.locationd.BAA.leafCert");
  if ((v4 & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,unable to delete existing BAA leaf cert", buf, 2u);
    }
    uint64_t v4 = sub_10013D1A0(115, 2);
    if (v4)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      uint64_t v4 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::deleteCachedBaaInfo()", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  if (!sub_100AA5F10(v4, @"com.apple.locationd.BAA.intCert"))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v6 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,unable to delete existing BAA intermediate cert", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::deleteCachedBaaInfo()", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  uint64_t v7 = sub_1000A6958();
  *(_DWORD *)uint64_t buf = 0;
  sub_1000EA2A4(v7, @"BaaNextCertRequestTime", buf);
  uint64_t v8 = *(void *)sub_1000A6958();
  return (*(uint64_t (**)(void))(v8 + 944))();
}

void sub_100A8A848(void *a1)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  uint64_t v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,loading cached info", buf, 2u);
  }
  uint64_t v3 = sub_10013D1A0(115, 2);
  if (v3)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    LOWORD(v33) = 0;
    uint64_t v21 = (char *)_os_log_send_and_compose_impl();
    uint64_t v3 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::loadCachedBaaInfo()", "%s\n", v21);
    if (v21 != (char *)buf) {
      free(v21);
    }
  }
  CFTypeRef v32 = 0;
  BOOL v4 = sub_100AA5628(v3, @"com.apple.locationd.BAA.key", &v32);
  if (v4)
  {
    uint64_t v5 = a1[210];
    if (v5) {
      CFRelease((CFTypeRef)v5);
    }
    a1[210] = v32;
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v6 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,unable to retrieve BAA private key from keychain", buf, 2u);
    }
    uint64_t v5 = sub_10013D1A0(115, 2);
    if (v5)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      LOWORD(v33) = 0;
      uint64_t v26 = (char *)_os_log_send_and_compose_impl();
      uint64_t v5 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::loadCachedBaaInfo()", "%s\n", v26);
      if (v26 != (char *)buf) {
        free(v26);
      }
    }
  }
  CFTypeRef v31 = 0;
  if (sub_100AA5CE0(v5, @"com.apple.locationd.BAA.leafCert", &v31))
  {
    uint64_t v7 = a1[211];
    if (v7) {
      CFRelease((CFTypeRef)v7);
    }
    a1[211] = v31;
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v8 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,unable to retrieve BAA leaf cert from keychain", buf, 2u);
    }
    uint64_t v7 = sub_10013D1A0(115, 2);
    if (v7)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      LOWORD(v33) = 0;
      int v27 = (char *)_os_log_send_and_compose_impl();
      uint64_t v7 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::loadCachedBaaInfo()", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
    BOOL v4 = 0;
  }
  CFTypeRef v30 = 0;
  if (!sub_100AA5CE0(v7, @"com.apple.locationd.BAA.intCert", &v30))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v10 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,unable to retrieve BAA intermediate cert from keychain", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      LOWORD(v33) = 0;
      int v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::loadCachedBaaInfo()", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
    goto LABEL_35;
  }
  os_log_type_t v9 = (const void *)a1[212];
  if (v9) {
    CFRelease(v9);
  }
  a1[212] = v30;
  if (!v4)
  {
LABEL_35:
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v11 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v12 = a1[210] == 0;
      BOOL v13 = a1[211] == 0;
      BOOL v14 = a1[212] == 0;
      *(_DWORD *)uint64_t buf = 67240704;
      BOOL v40 = v12;
      __int16 v41 = 1026;
      BOOL v42 = v13;
      __int16 v43 = 1026;
      BOOL v44 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,following info missing in keychain,private key,%{public}d,leaf cert,%{public}d,intermediate cert,%{public}d", buf, 0x14u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      BOOL v22 = a1[210] == 0;
      BOOL v23 = a1[211] == 0;
      BOOL v24 = a1[212] == 0;
      int v33 = 67240704;
      BOOL v34 = v22;
      __int16 v35 = 1026;
      BOOL v36 = v23;
      __int16 v37 = 1026;
      BOOL v38 = v24;
      uint64_t v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::loadCachedBaaInfo()", "%s\n", v25);
      if (v25 != (char *)buf) {
        free(v25);
      }
    }
    int v15 = (const void *)a1[210];
    if (v15)
    {
      CFRelease(v15);
      a1[210] = 0;
    }
    char v16 = (const void *)a1[211];
    if (v16)
    {
      CFRelease(v16);
      a1[211] = 0;
    }
    uint64_t v17 = (const void *)a1[212];
    if (v17)
    {
      CFRelease(v17);
      a1[212] = 0;
    }
  }
  uint64_t v18 = sub_1000A6958();
  (*(void (**)(uint64_t))(*(void *)v18 + 936))(v18);
  uint64_t v19 = sub_1000A6958();
  if ((sub_1000A6A10(v19, @"BaaNextCertRequestTime", a1 + 213) & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    __int16 v20 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,cache did not contain next BAA cert request time", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      LOWORD(v33) = 0;
      __int16 v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::loadCachedBaaInfo()", "%s\n", v29);
      if (v29 != (char *)buf) {
        free(v29);
      }
    }
  }
  sub_100AA636C(a1);
}

void sub_100A8B154(uint64_t a1, unsigned int a2)
{
  int v4 = sub_100AA6E30((void *)a1);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  uint64_t v5 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_100AA6EB0(a2, __p);
    uint64_t v6 = v24 >= 0 ? __p : (void **)__p[0];
    uint64_t v7 = *(void *)(a1 + 1704);
    *(_DWORD *)uint64_t buf = 68289794;
    int v26 = 0;
    __int16 v27 = 2082;
    int v28 = "";
    __int16 v29 = 2082;
    CFTypeRef v30 = v6;
    __int16 v31 = 1026;
    int v32 = v4;
    __int16 v33 = 2050;
    uint64_t v34 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EED2,#BAA,checking cert request status\", \"reason\":%{public, location:escape_only}s, \"valid cart available\":%{public}hhd, \"next scheduled request\":\"%{public}.1f\"}", buf, 0x2Cu);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(unsigned char *)(a1 + 1677))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v8 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,there is a cert request outstanding already,no need to do anything until we get a response", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 == -1)
    {
LABEL_69:
      LOWORD(__p[0]) = 0;
      char v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::checkBaaCertRequestStatus(CertRequestStatusCheckReason)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
      return;
    }
LABEL_95:
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    goto LABEL_69;
  }
  if (!*(unsigned char *)(a1 + 1676))
  {
    if ((sub_100A80850(a1 + 1448) & 1) == 0)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v11 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,no need to start XPC activity", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 == -1) {
          goto LABEL_69;
        }
        goto LABEL_95;
      }
      return;
    }
    if (!*(unsigned char *)(a1 + 1676))
    {
LABEL_18:
      switch(a2)
      {
        case 0u:
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          BOOL v12 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,need to start XPC activity", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_1022DBA80);
            }
            LOWORD(__p[0]) = 0;
            uint64_t v19 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::checkBaaCertRequestStatus(CertRequestStatusCheckReason)", "%s\n", v19);
            if (v19 != (char *)buf) {
              free(v19);
            }
          }
          sub_100AA708C(a1, 0);
          sub_100AA7688(a1);
          break;
        case 1u:
          if (sub_100AA708C(a1, 1))
          {
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_1022DBA80);
            }
            BOOL v13 = qword_1024193E8;
            if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)uint64_t buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,next cert request time changed so (re)starting XPC activity", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193E0 != -1) {
                dispatch_once(&qword_1024193E0, &stru_1022DBA80);
              }
              LOWORD(__p[0]) = 0;
              __int16 v20 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::checkBaaCertRequestStatus(CertRequestStatusCheckReason)", "%s\n", v20);
              if (v20 != (char *)buf) {
                free(v20);
              }
            }
            sub_100AA6EDC(a1);
            sub_100AA7688(a1);
          }
          else if (!*(unsigned char *)(a1 + 1676))
          {
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_1022DBA80);
            }
            int v15 = qword_1024193E8;
            if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)uint64_t buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,need to start XPC activity", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193E0 != -1) {
                dispatch_once(&qword_1024193E0, &stru_1022DBA80);
              }
              LOWORD(__p[0]) = 0;
              BOOL v22 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::checkBaaCertRequestStatus(CertRequestStatusCheckReason)", "%s\n", v22);
              if (v22 != (char *)buf) {
                free(v22);
              }
            }
            sub_100AA7688(a1);
          }
          break;
        case 2u:
          if ((v4 & 1) == 0)
          {
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_1022DBA80);
            }
            BOOL v14 = qword_1024193E8;
            if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)uint64_t buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,need to request cert immediately for ongoing session", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193E0 != -1) {
                dispatch_once(&qword_1024193E0, &stru_1022DBA80);
              }
              LOWORD(__p[0]) = 0;
              uint64_t v21 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::checkBaaCertRequestStatus(CertRequestStatusCheckReason)", "%s\n", v21);
              if (v21 != (char *)buf) {
                free(v21);
              }
            }
            sub_100AA6EDC(a1);
            sub_100AA7B64(a1);
          }
          break;
        case 3u:
        case 4u:
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          os_log_type_t v9 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,scheduling next cert request", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_1022DBA80);
            }
            LOWORD(__p[0]) = 0;
            uint64_t v18 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::checkBaaCertRequestStatus(CertRequestStatusCheckReason)", "%s\n", v18);
            if (v18 != (char *)buf) {
              free(v18);
            }
          }
          sub_100AA708C(a1, a2);
          sub_100AA7688(a1);
          break;
        default:
          return;
      }
      return;
    }
  }
  if (sub_100A80850(a1 + 1448)) {
    goto LABEL_18;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  int v10 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,need to stop XPC activity due to device settings", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    LOWORD(__p[0]) = 0;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::checkBaaCertRequestStatus(CertRequestStatusCheckReason)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  sub_100AA6EDC(a1);
}

void sub_100A8BCDC(uint64_t a1)
{
  double v14 = 0.0;
  double Current = CFAbsoluteTimeGetCurrent();
  int v13 = 86400;
  sub_1000C7F88(buf);
  sub_10006EF84(*(uint64_t *)buf, "ConfiguredBAAReportingInterval", &v13);
  if (v18) {
    sub_1000DB0A0(v18);
  }
  uint64_t v3 = sub_1000A6958();
  (*(void (**)(uint64_t))(*(void *)v3 + 936))(v3);
  uint64_t v4 = sub_1000A6958();
  if (sub_1000A6A10(v4, @"LastBAADailyReportSent", &v14))
  {
    int v5 = (int)(Current - v14);
    int v6 = 300;
    BOOL v7 = __OFSUB__(v13, v5);
    int v8 = v13 - v5;
    if (!((v8 < 0) ^ v7 | (v8 == 0)))
    {
      if (v8 <= 300) {
        int v6 = 300;
      }
      else {
        int v6 = v8;
      }
    }
  }
  else
  {
    int v6 = 300;
  }
  id v9 = [[objc_msgSend(*(id *)(a1 + 8), "silo") newTimer];
  *(void *)(a1 + 2072) = v9;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  _DWORD v12[2] = sub_100AAF1D4;
  void v12[3] = &unk_1022A3020;
  v12[4] = a1;
  [v9 setHandler:v12];
  [*(id *)(a1 + 2072) setNextFireDelay:(double)v6];
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  int v10 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#EED2,initializeBAADailyReporting,send daily BAA report after %{public}d seconds", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v15 = 67240192;
    int v16 = v6;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::initializeBAADailyReporting()", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
}

void sub_100A8BFBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    sub_1000DB0A0(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A8BFDC(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022DBAA0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    BOOL v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLEmergencyEED2::onSosProviderNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022DBAA0);
    }
    int v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      double v14 = "";
      __int16 v15 = 2082;
      int v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLEmergencyEED2::onSosProviderNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  sub_100A96AB0(a4, v6, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_100A8C190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A8C1B0(uint64_t a1)
{
  if (objc_opt_class())
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v2 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2 fetching SOS/EED2 UI toggle", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      __int16 v20 = 0;
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::fetchSosToggleState()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    sub_1000B6F5C((std::string *)&qword_10247FAF0, (uint64_t)buf);
    uint64_t v3 = *(void **)(a1 + 24);
    sub_100089AE0((char *)__dst, (long long *)buf);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    _OWORD v5[2] = sub_100A96CB0;
    v5[3] = &unk_1022BA9F0;
    void v5[4] = a1;
    [v3 fetchClientStaticRegistrationResult:sub_1000376D4((long long *)__dst) withReply:v5];
    if (v19 < 0) {
      operator delete(__p);
    }
    if (v17 < 0) {
      operator delete(v16);
    }
    if (v15 < 0) {
      operator delete(v14);
    }
    if (v13 < 0) {
      operator delete(v12);
    }
    if (v11 < 0) {
      operator delete(v10);
    }
    if (v9 < 0) {
      operator delete(v8);
    }
    if (v7 < 0) {
      operator delete(__dst[0]);
    }
    if (v33 < 0) {
      operator delete(v32);
    }
    if (v31 < 0) {
      operator delete(v30);
    }
    if (v29 < 0) {
      operator delete(v28);
    }
    if (v27 < 0) {
      operator delete(v26);
    }
    if (v25 < 0) {
      operator delete(v24);
    }
    if (v23 < 0) {
      operator delete(v22);
    }
    if ((char)buf[23] < 0) {
      operator delete(*(void **)buf);
    }
  }
}

void sub_100A8C4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void sub_100A8C4E0(uint64_t a1)
{
  if (*(void *)(a1 + 2024))
  {
    if (*(unsigned char *)(a1 + 2032))
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v2 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2 medical ID data fetch already pending", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        __int16 v9 = 0;
LABEL_19:
        uint64_t v4 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::fetchMedicalIdData()", "%s\n", v4);
        if (v4 != (char *)buf) {
          free(v4);
        }
      }
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v5 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#EED2 fetching medical ID data", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        __int16 v9 = 0;
        char v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::fetchMedicalIdData()", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
      *(unsigned char *)(a1 + 2032) = 1;
      uint64_t v6 = *(void **)(a1 + 2024);
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      _DWORD v8[2] = sub_100AAE4FC;
      void v8[3] = &unk_1022DB800;
      v8[4] = a1;
      [v6 fetchMedicalIDDataWithCompletion:v8];
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v3 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#EED2 cannot fetch medical ID data", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      __int16 v9 = 0;
      goto LABEL_19;
    }
  }
}

void sub_100A8C8D8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  uint64_t v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2,medical ID changed", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::CLEmergencyEED2(id<CLIntersiloUniverse>, id<CLClientManagerPublicProtocol>, NetworkAndSimInfoCallback, std::shared_ptr<CLEmergencyAWD>, LocationCallback)_block_invoke", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  sub_100A8C4E0(v1);
}

uint64_t sub_100A8CA74(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a1 + 88);
  unsigned int v85 = *(_DWORD *)(a1 + 4);
  if (!*(void *)(a1 + 32))
  {
    sub_101A7CBA8();
    goto LABEL_157;
  }
  uint64_t v3 = &qword_102419000;
  if (!*(unsigned char *)(a1 + 48))
  {
    sub_101A7CD18(qword_1024193D0 == -1);
    goto LABEL_157;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022DBB20);
  }
  int v5 = qword_1024193D8;
  os_log_type_t v6 = *(unsigned char *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v6))
  {
    char v7 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      char v7 = (void *)*v7;
    }
    sub_100A956A8(*(_DWORD *)(a1 + 4), __p);
    int v8 = SHIBYTE(v89);
    __int16 v9 = *(unsigned char **)__p;
    sub_100A9567C(a2, v96);
    char v10 = __p;
    if (v8 < 0) {
      char v10 = v9;
    }
    if (v99 >= 0) {
      char v11 = v96;
    }
    else {
      char v11 = *(unsigned char **)v96;
    }
    *(_DWORD *)uint64_t buf = 136315650;
    *(void *)&uint8_t buf[4] = v7;
    __int16 v92 = 2080;
    unint64_t v93 = v10;
    __int16 v94 = 2080;
    unint64_t v95 = v11;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%scurrent_state,%s,event,%s", buf, 0x20u);
    if (v99 < 0) {
      operator delete(*(void **)v96);
    }
    uint64_t v3 = &qword_102419000;
    if (SHIBYTE(v89) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DBB20);
    }
    __int16 v58 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      __int16 v58 = (void *)*v58;
    }
    sub_100A956A8(*(_DWORD *)(a1 + 4), v96);
    int v59 = v99;
    __int16 v60 = *(unsigned char **)v96;
    sub_100A9567C(a2, v83);
    __int16 v61 = v96;
    if (v59 < 0) {
      __int16 v61 = v60;
    }
    if (v84 >= 0) {
      __int16 v62 = v83;
    }
    else {
      __int16 v62 = (void **)v83[0];
    }
    *(_DWORD *)long long __p = 136315650;
    *(void *)&__p[4] = v58;
    __int16 v87 = 2080;
    __int16 v88 = v61;
    __int16 v89 = 2080;
    int v90 = v62;
    __int16 v63 = (char *)_os_log_send_and_compose_impl();
    if (v84 < 0) {
      operator delete(v83[0]);
    }
    uint64_t v3 = &qword_102419000;
    if (v99 < 0) {
      operator delete(*(void **)v96);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLEmergencyEED2>::handleEvent(Event) [T = CLEmergencyEED2]", "%s\n", v63);
    if (v63 != buf) {
      free(v63);
    }
  }
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12) {
    goto LABEL_28;
  }
  char v13 = (uint64_t **)(a1 + 8);
  int v14 = *(_DWORD *)(a1 + 4);
  uint64_t v15 = a1 + 16;
  do
  {
    int v16 = *(_DWORD *)(v12 + 32);
    BOOL v17 = v16 < v14;
    if (v16 >= v14) {
      uint64_t v18 = (uint64_t *)v12;
    }
    else {
      uint64_t v18 = (uint64_t *)(v12 + 8);
    }
    if (!v17) {
      uint64_t v15 = v12;
    }
    uint64_t v12 = *v18;
  }
  while (*v18);
  if (v15 == a1 + 16 || v14 < *(_DWORD *)(v15 + 32))
  {
LABEL_28:
    sub_101A7CE94();
    goto LABEL_157;
  }
  char v19 = *(uint64_t (**)(void *, uint64_t))(v15 + 40);
  uint64_t v20 = *(void *)(v15 + 48);
  uint64_t v21 = (void *)(*(void *)(a1 + 32) + (v20 >> 1));
  if (v20) {
    char v19 = *(uint64_t (**)(void *, uint64_t))(*v21 + v19);
  }
  uint64_t v22 = v19(v21, a2);
  uint64_t v23 = v22;
  int v82 = v22;
  if (a2 <= 1 && v22 != v85)
  {
    sub_101A7D2E4();
    goto LABEL_157;
  }
  if (*(_DWORD *)(a1 + 88) >= 2u)
  {
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DBB20);
    }
    char v24 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      char v25 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        char v25 = (void *)*v25;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      *(void *)&uint8_t buf[4] = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%sNested invocation of state machine", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DBB20);
      }
      int v67 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v67 = (void *)*v67;
      }
      *(_DWORD *)long long __p = 136315138;
      *(void *)&__p[4] = v67;
      __int16 v68 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "State CLStateMachine<CLEmergencyEED2>::handleEvent(Event) [T = CLEmergencyEED2]", "%s\n", v68);
      if (v68 != buf) {
        free(v68);
      }
    }
  }
  if (v3[122] != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022DBB20);
  }
  int v26 = qword_1024193D8;
  os_log_type_t v27 = *(unsigned char *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v27))
  {
    int v28 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      int v28 = (void *)*v28;
    }
    sub_100A956A8(v23, buf);
    if (v94 >= 0) {
      char v29 = buf;
    }
    else {
      char v29 = *(unsigned char **)buf;
    }
    *(_DWORD *)long long __p = 136315394;
    *(void *)&__p[4] = v28;
    __int16 v87 = 2080;
    __int16 v88 = v29;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "%snewState,%s", __p, 0x16u);
    if (SHIBYTE(v94) < 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DBB20);
    }
    __int16 v64 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      __int16 v64 = (void *)*v64;
    }
    sub_100A956A8(v23, __p);
    if (v89 >= 0) {
      uint64_t v65 = __p;
    }
    else {
      uint64_t v65 = *(unsigned char **)__p;
    }
    *(_DWORD *)__int16 v96 = 136315394;
    *(void *)&v96[4] = v64;
    __int16 v97 = 2080;
    __int16 v98 = v65;
    int v66 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v89) < 0) {
      operator delete(*(void **)__p);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLEmergencyEED2>::handleEvent(Event) [T = CLEmergencyEED2]", "%s\n", v66);
    if (v66 != buf) {
      free(v66);
    }
  }
  if (v23 != v85)
  {
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DBB20);
    }
    CFTypeRef v30 = qword_1024193D8;
    os_log_type_t v31 = *(unsigned char *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1024193D8, v31))
    {
      int v32 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v32 = (void *)*v32;
      }
      sub_100A956A8(v85, __p);
      char v33 = v3;
      int v34 = SHIBYTE(v89);
      __int16 v35 = *(unsigned char **)__p;
      sub_100134750(v96, "Exit");
      BOOL v36 = __p;
      if (v34 < 0) {
        BOOL v36 = v35;
      }
      if (v99 >= 0) {
        __int16 v37 = v96;
      }
      else {
        __int16 v37 = *(unsigned char **)v96;
      }
      *(_DWORD *)uint64_t buf = 136315650;
      *(void *)&uint8_t buf[4] = v32;
      __int16 v92 = 2080;
      unint64_t v93 = v36;
      __int16 v94 = 2080;
      unint64_t v95 = v37;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "%soldState,%s,event,%s", buf, 0x20u);
      if (v99 < 0) {
        operator delete(*(void **)v96);
      }
      uint64_t v3 = v33;
      if (SHIBYTE(v89) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DBB20);
      }
      int v69 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v69 = (void *)*v69;
      }
      sub_100A956A8(v85, v96);
      __int16 v70 = v3;
      int v71 = v99;
      __int16 v72 = *(unsigned char **)v96;
      sub_100134750(v83, "Exit");
      __int16 v73 = v96;
      if (v71 < 0) {
        __int16 v73 = v72;
      }
      if (v84 >= 0) {
        __int16 v74 = v83;
      }
      else {
        __int16 v74 = (void **)v83[0];
      }
      *(_DWORD *)long long __p = 136315650;
      *(void *)&__p[4] = v69;
      __int16 v87 = 2080;
      __int16 v88 = v73;
      __int16 v89 = 2080;
      int v90 = v74;
      uint64_t v75 = (char *)_os_log_send_and_compose_impl();
      if (v84 < 0) {
        operator delete(v83[0]);
      }
      uint64_t v3 = v70;
      char v13 = (uint64_t **)(a1 + 8);
      if (v99 < 0) {
        operator delete(*(void **)v96);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLEmergencyEED2>::handleEvent(Event) [T = CLEmergencyEED2]", "%s\n", v75);
      if (v75 != buf) {
        free(v75);
      }
    }
    uint64_t v38 = *(void *)(a1 + 32);
    *(void *)uint64_t buf = &v85;
    id v39 = sub_1000C5658(v13, (int *)&v85, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    BOOL v40 = v39[5];
    uint64_t v41 = (uint64_t)v39[6];
    BOOL v42 = (void *)(v38 + (v41 >> 1));
    if (v41) {
      BOOL v40 = *(uint64_t **)(*v42 + v40);
    }
    int v43 = ((uint64_t (*)(void *, uint64_t))v40)(v42, 1);
    if (v43 == v85)
    {
      *(_DWORD *)(a1 + 4) = v23;
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DBB20);
      }
      BOOL v44 = qword_1024193D8;
      os_log_type_t v45 = *(unsigned char *)(a1 + 120);
      if (os_log_type_enabled((os_log_t)qword_1024193D8, v45))
      {
        __int16 v46 = (void *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0) {
          __int16 v46 = (void *)*v46;
        }
        sub_100A956A8(v23, __p);
        signed __int8 v47 = v3;
        int v48 = SHIBYTE(v89);
        int v49 = *(unsigned char **)__p;
        sub_100134750(v96, "Enter");
        uint64_t v50 = __p;
        if (v48 < 0) {
          uint64_t v50 = v49;
        }
        if (v99 >= 0) {
          uint64_t v51 = v96;
        }
        else {
          uint64_t v51 = *(unsigned char **)v96;
        }
        *(_DWORD *)uint64_t buf = 136315650;
        *(void *)&uint8_t buf[4] = v46;
        __int16 v92 = 2080;
        unint64_t v93 = v50;
        __int16 v94 = 2080;
        unint64_t v95 = v51;
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "%snewState,%s,event,%s", buf, 0x20u);
        if (v99 < 0) {
          operator delete(*(void **)v96);
        }
        uint64_t v3 = v47;
        if (SHIBYTE(v89) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v3[122] != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022DBB20);
        }
        __int16 v76 = (void *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0) {
          __int16 v76 = (void *)*v76;
        }
        sub_100A956A8(v23, v96);
        int v77 = v99;
        char v78 = *(unsigned char **)v96;
        sub_100134750(v83, "Enter");
        uint64_t v79 = v96;
        if (v77 < 0) {
          uint64_t v79 = v78;
        }
        if (v84 >= 0) {
          uint64_t v80 = v83;
        }
        else {
          uint64_t v80 = (void **)v83[0];
        }
        *(_DWORD *)long long __p = 136315650;
        *(void *)&__p[4] = v76;
        __int16 v87 = 2080;
        __int16 v88 = v79;
        __int16 v89 = 2080;
        int v90 = v80;
        int v81 = (char *)_os_log_send_and_compose_impl();
        if (v84 < 0) {
          operator delete(v83[0]);
        }
        if (v99 < 0) {
          operator delete(*(void **)v96);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLEmergencyEED2>::handleEvent(Event) [T = CLEmergencyEED2]", "%s\n", v81);
        if (v81 != buf) {
          free(v81);
        }
      }
      uint64_t v52 = *(void *)(a1 + 32);
      *(void *)uint64_t buf = &v82;
      __int16 v53 = sub_1000C5658(v13, &v82, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      __int16 v54 = v53[5];
      uint64_t v55 = (uint64_t)v53[6];
      id v56 = (void *)(v52 + (v55 >> 1));
      if (v55) {
        __int16 v54 = *(uint64_t **)(*v56 + v54);
      }
      uint64_t v23 = ((uint64_t (*)(void *, void))v54)(v56, 0);
      if (v23 == v82) {
        goto LABEL_89;
      }
      sub_101A7D004();
    }
    else
    {
      sub_101A7D174();
    }
LABEL_157:
    __break(1u);
  }
LABEL_89:
  --*(_DWORD *)(a1 + 88);
  return v23;
}

void sub_100A8D7E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v22 - 105) < 0) {
    operator delete(*(void **)(v22 - 128));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A8D848(uint64_t a1)
{
  *(void *)a1 = off_1022DB6B8;

  *(void *)(a1 + 1664) = 0;
  uint64_t v2 = *(const void **)(a1 + 1680);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 1680) = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 1688);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 1688) = 0;
  }
  uint64_t v4 = *(const void **)(a1 + 1696);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 1696) = 0;
  }

  *(void *)(a1 + 1728) = 0;
  *(void *)(a1 + 1736) = 0;

  *(void *)(a1 + 1744) = 0;
  [*(id *)(a1 + 1752) invalidate];

  *(void *)(a1 + 1752) = 0;
  *(void *)(a1 + 2024) = 0;
  int v5 = *(_DWORD *)(a1 + 2036);
  if (v5 != -1) {
    notify_cancel(v5);
  }
  [*(id *)(a1 + 2072) invalidate];

  *(void *)(a1 + 2072) = 0;
  *(void *)(a1 + 2096) = 0;

  *(void *)(a1 + 1840) = 0;
  *(void *)(a1 + 1848) = 0;

  *(void *)(a1 + 1864) = 0;
  *(void *)(a1 + 1872) = 0;

  *(void *)(a1 + 1968) = 0;
  *(void *)(a1 + 1888) = 0;

  *(void *)(a1 + 1912) = 0;
  *(void *)(a1 + 1920) = 0;

  *(void *)(a1 + 1928) = 0;
  *(void *)(a1 + 1936) = 0;

  *(void *)(a1 + 2016) = 0;
  uint64_t v6 = *(void *)(a1 + 2088);
  *(void *)(a1 + 2088) = 0;
  if (v6) {
    operator delete();
  }
  sub_1006FE1A8(a1 + 2040, *(void **)(a1 + 2048));
  sub_100ABD394((uint64_t *)(a1 + 1904), 0);
  sub_1000D7D80(a1 + 1792);
  sub_100ABD344((uint64_t *)(a1 + 1768), 0);
  uint64_t v7 = *(void *)(a1 + 1720);
  *(void *)(a1 + 1720) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 1712);
  *(void *)(a1 + 1712) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  sub_100ABD254(a1 + 1536);
  sub_100ABC8F0(a1 + 1496);
  sub_100ABC8F0(a1 + 1456);

  return sub_10148289C(a1);
}

void sub_100A8DA98(uint64_t a1)
{
  sub_100A8D848(a1);

  operator delete();
}

uint64_t sub_100A8DAD0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if ((sub_1000D2988(a2, "Enabled", (BOOL *)a3) & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v6 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0) {
        uint64_t v7 = a1;
      }
      else {
        uint64_t v7 = (uint64_t *)*a1;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)uint64_t v172 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#EED2,no Enabled key in %{public}s EED2 dict, using default", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      if (*((char *)a1 + 23) >= 0) {
        uint64_t v111 = a1;
      }
      else {
        uint64_t v111 = (uint64_t *)*a1;
      }
      int v169 = 136446210;
      *(void *)__int16 v170 = v111;
      int v112 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v112);
      if (v112 != (char *)buf) {
        free(v112);
      }
    }
  }
  if ((sub_1000D2988(a2, "ADREnabled", (BOOL *)(a3 + 1)) & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v8 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0) {
        __int16 v9 = a1;
      }
      else {
        __int16 v9 = (uint64_t *)*a1;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)uint64_t v172 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#EED2,no ADREnabled key in %{public}s EED2 dict, using default", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      if (*((char *)a1 + 23) >= 0) {
        int v113 = a1;
      }
      else {
        int v113 = (uint64_t *)*a1;
      }
      int v169 = 136446210;
      *(void *)__int16 v170 = v113;
      int v114 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v114);
      if (v114 != (char *)buf) {
        free(v114);
      }
    }
  }
  if ((sub_1000D2988(a2, "DSAEnabled", (BOOL *)(a3 + 128)) & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    char v10 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0) {
        char v11 = a1;
      }
      else {
        char v11 = (uint64_t *)*a1;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)uint64_t v172 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#EED2,no DSAEnabled key in %{public}s EED2 dict, using default", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      if (*((char *)a1 + 23) >= 0) {
        int v115 = a1;
      }
      else {
        int v115 = (uint64_t *)*a1;
      }
      int v169 = 136446210;
      *(void *)__int16 v170 = v115;
      int v116 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v116);
      if (v116 != (char *)buf) {
        free(v116);
      }
    }
  }
  if (byte_10248BA6F >= 0) {
    uint64_t v12 = (const char *)&qword_10248BA58;
  }
  else {
    uint64_t v12 = (const char *)qword_10248BA58;
  }
  if ((sub_1000D2988(a2, v12, (BOOL *)(a3 + 2)) & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    char v13 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0) {
        int v14 = a1;
      }
      else {
        int v14 = (uint64_t *)*a1;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)uint64_t v172 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#EED2,no RequestsEnabled key in %{public}s EED2 dict, using default", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      if (*((char *)a1 + 23) >= 0) {
        int v117 = a1;
      }
      else {
        int v117 = (uint64_t *)*a1;
      }
      int v169 = 136446210;
      *(void *)__int16 v170 = v117;
      __int16 v118 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v118);
      if (v118 != (char *)buf) {
        free(v118);
      }
    }
  }
  if (byte_10248BB5F >= 0) {
    uint64_t v15 = (const char *)&qword_10248BB48;
  }
  else {
    uint64_t v15 = (const char *)qword_10248BB48;
  }
  if ((sub_1000D2988(a2, v15, (BOOL *)(a3 + 129)) & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v16 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (byte_10248BB5F >= 0) {
        BOOL v17 = &qword_10248BB48;
      }
      else {
        BOOL v17 = (uint64_t *)qword_10248BB48;
      }
      if (*((char *)a1 + 23) >= 0) {
        uint64_t v18 = a1;
      }
      else {
        uint64_t v18 = (uint64_t *)*a1;
      }
      *(_DWORD *)uint64_t buf = 136446466;
      *(void *)uint64_t v172 = v17;
      *(_WORD *)&v172[8] = 2082;
      *(void *)&v172[10] = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#EED2,no %{public}s key in %{public}s EED2 dict, using default", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      if (byte_10248BB5F >= 0) {
        double v119 = &qword_10248BB48;
      }
      else {
        double v119 = (uint64_t *)qword_10248BB48;
      }
      if (*((char *)a1 + 23) >= 0) {
        BOOL v120 = a1;
      }
      else {
        BOOL v120 = (uint64_t *)*a1;
      }
      int v169 = 136446466;
      *(void *)__int16 v170 = v119;
      *(_WORD *)&v170[8] = 2082;
      *(void *)&v170[10] = v120;
      uint64_t v121 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v121);
      if (v121 != (char *)buf) {
        free(v121);
      }
    }
  }
  if (sub_1004D1284(a2, "LISURL", (std::string *)(a3 + 8)))
  {
    std::string::insert((std::string *)(a3 + 8), 0, "https://");
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    char v19 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0) {
        uint64_t v20 = a1;
      }
      else {
        uint64_t v20 = (uint64_t *)*a1;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)uint64_t v172 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#EED2,no LISURL key in %{public}s EED2 dict, using default", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      if (*((char *)a1 + 23) >= 0) {
        __int16 v122 = a1;
      }
      else {
        __int16 v122 = (uint64_t *)*a1;
      }
      int v169 = 136446210;
      *(void *)__int16 v170 = v122;
      int v123 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v123);
      if (v123 != (char *)buf) {
        free(v123);
      }
    }
    std::string::operator=((std::string *)(a3 + 8), (const std::string *)&xmmword_10248A828);
  }
  if (sub_1004D1284(a2, "ADRURL", (std::string *)(a3 + 32)))
  {
    std::string::insert((std::string *)(a3 + 32), 0, "https://");
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v21 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0) {
        uint64_t v22 = a1;
      }
      else {
        uint64_t v22 = (uint64_t *)*a1;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)uint64_t v172 = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#EED2,no ADRURL key in %{public}s EED2 dict, using default", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      if (*((char *)a1 + 23) >= 0) {
        unsigned int v124 = a1;
      }
      else {
        unsigned int v124 = (uint64_t *)*a1;
      }
      int v169 = 136446210;
      *(void *)__int16 v170 = v124;
      std::string::size_type v125 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v125);
      if (v125 != (char *)buf) {
        free(v125);
      }
    }
    std::string::operator=((std::string *)(a3 + 32), (const std::string *)&xmmword_10248A840);
  }
  if (byte_10248BAB7 >= 0) {
    uint64_t v23 = (const char *)&qword_10248BAA0;
  }
  else {
    uint64_t v23 = (const char *)qword_10248BAA0;
  }
  if (sub_1004D1284(a2, v23, (std::string *)(a3 + 56)))
  {
    std::string::insert((std::string *)(a3 + 56), 0, "https://");
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    char v24 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0) {
        char v25 = a1;
      }
      else {
        char v25 = (uint64_t *)*a1;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)uint64_t v172 = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "#EED2,no ControlURL key in %{public}s EED2 dict, using default", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      if (*((char *)a1 + 23) >= 0) {
        __int16 v126 = a1;
      }
      else {
        __int16 v126 = (uint64_t *)*a1;
      }
      int v169 = 136446210;
      *(void *)__int16 v170 = v126;
      uint64_t v127 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v127);
      if (v127 != (char *)buf) {
        free(v127);
      }
    }
    std::string::operator=((std::string *)(a3 + 56), (const std::string *)&xmmword_10248A858);
  }
  if ((sub_1000A699C(a2, "FirstLISPOSTDelay", (void *)(a3 + 80)) & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v26 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0) {
        os_log_type_t v27 = a1;
      }
      else {
        os_log_type_t v27 = (uint64_t *)*a1;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)uint64_t v172 = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "#EED2,no FirstLISPOSTDelay key in %{public}s EED2 dict, using default", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      if (*((char *)a1 + 23) >= 0) {
        uint64_t v128 = a1;
      }
      else {
        uint64_t v128 = (uint64_t *)*a1;
      }
      int v169 = 136446210;
      *(void *)__int16 v170 = v128;
      uint64_t v129 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v129);
      if (v129 != (char *)buf) {
        free(v129);
      }
    }
  }
  if ((sub_1000A699C(a2, "PeriodicLISPOSTDelay", (void *)(a3 + 88)) & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v28 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0) {
        char v29 = a1;
      }
      else {
        char v29 = (uint64_t *)*a1;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)uint64_t v172 = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "#EED2,no PeriodicLISPOSTDelay key in %{public}s EED2 dict, using default", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      if (*((char *)a1 + 23) >= 0) {
        uint64_t v130 = a1;
      }
      else {
        uint64_t v130 = (uint64_t *)*a1;
      }
      int v169 = 136446210;
      *(void *)__int16 v170 = v130;
      unsigned int v131 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v131);
      if (v131 != (char *)buf) {
        free(v131);
      }
    }
  }
  if ((sub_1000A699C(a2, "InitialADRPOSTTimeout", (void *)(a3 + 96)) & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    CFTypeRef v30 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0) {
        os_log_type_t v31 = a1;
      }
      else {
        os_log_type_t v31 = (uint64_t *)*a1;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)uint64_t v172 = v31;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "#EED2,no InitialADRPOSTTimeout key in %{public}s EED2 dict, using default", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      if (*((char *)a1 + 23) >= 0) {
        char v132 = a1;
      }
      else {
        char v132 = (uint64_t *)*a1;
      }
      int v169 = 136446210;
      *(void *)__int16 v170 = v132;
      std::string v133 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v133);
      if (v133 != (char *)buf) {
        free(v133);
      }
    }
  }
  if (!sub_1004D1284(a2, "IntermediateCert", (std::string *)(a3 + 104)))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v32 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0) {
        char v33 = a1;
      }
      else {
        char v33 = (uint64_t *)*a1;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)uint64_t v172 = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "#EED2,no IntermediateCert key in %{public}s EED2 dict, using default", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      if (*((char *)a1 + 23) >= 0) {
        __int16 v134 = a1;
      }
      else {
        __int16 v134 = (uint64_t *)*a1;
      }
      int v169 = 136446210;
      *(void *)__int16 v170 = v134;
      int64_t v135 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v135);
      if (v135 != (char *)buf) {
        free(v135);
      }
    }
  }
  id v34 = [(id)sub_1000E9358(a2) valueForKey:@"PartnerInfo"];
  if (v34)
  {
    uint64_t v36 = *(void *)(a3 + 136);
    for (uint64_t i = *(void *)(a3 + 144); i != v36; sub_10084DFAC(a3 + 152, i))
      i -= 80;
    *(void *)(a3 + 144) = v36;
    v158[0] = _NSConcreteStackBlock;
    v158[1] = 3221225472;
    v158[2] = sub_100A912F0;
    v158[3] = &unk_1022DB758;
    v158[4] = a3;
    [v34 enumerateObjectsUsingBlock:v158];
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    __int16 v37 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      int v38 = -858993459 * ((*(void *)(a3 + 144) - *(void *)(a3 + 136)) >> 4);
      if (*((char *)a1 + 23) >= 0) {
        id v39 = a1;
      }
      else {
        id v39 = (uint64_t *)*a1;
      }
      *(_DWORD *)uint64_t buf = 67240450;
      *(_DWORD *)uint64_t v172 = v38;
      *(_WORD *)&v172[4] = 2082;
      *(void *)&v172[6] = v39;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "#EED2,found %{public}d partners in PartnerInfo array in EED2 %{public}s dict", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v40 = -858993459 * ((*(void *)(a3 + 144) - *(void *)(a3 + 136)) >> 4);
      if (*((char *)a1 + 23) >= 0) {
        uint64_t v41 = a1;
      }
      else {
        uint64_t v41 = (uint64_t *)*a1;
      }
      int v169 = 67240450;
      *(_DWORD *)__int16 v170 = v40;
      *(_WORD *)&v170[4] = 2082;
      *(void *)&v170[6] = v41;
      BOOL v42 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v42);
LABEL_536:
      if (v42 != (char *)buf) {
        free(v42);
      }
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v43 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0) {
        BOOL v44 = a1;
      }
      else {
        BOOL v44 = (uint64_t *)*a1;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)uint64_t v172 = v44;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "#EED2,no PartnerInfo key in %{public}s EED2 dict, using default", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      if (*((char *)a1 + 23) >= 0) {
        double v139 = a1;
      }
      else {
        double v139 = (uint64_t *)*a1;
      }
      int v169 = 136446210;
      *(void *)__int16 v170 = v139;
      BOOL v42 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v42);
      goto LABEL_536;
    }
  }
  sub_1000E9354(&v169);
  if (byte_10248BB77 >= 0) {
    os_log_type_t v45 = (const char *)&qword_10248BB60;
  }
  else {
    os_log_type_t v45 = (const char *)qword_10248BB60;
  }
  if (sub_100012960(a2, v45, &v169))
  {
    if (byte_10248BB77 >= 0) {
      __int16 v46 = &qword_10248BB60;
    }
    else {
      __int16 v46 = (uint64_t *)qword_10248BB60;
    }
    sub_100A91B3C((uint64_t)v46, (uint64_t)&v169, a3 + 160);
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    signed __int8 v47 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0) {
        int v48 = a1;
      }
      else {
        int v48 = (uint64_t *)*a1;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)uint64_t v172 = v48;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "#EED2MA,no nominalMitigations key in %{public}s EED2 dict, using default", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      if (*((char *)a1 + 23) >= 0) {
        int v136 = a1;
      }
      else {
        int v136 = (uint64_t *)*a1;
      }
      int v167 = 136446210;
      __int16 v168 = v136;
      double v137 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v137);
      if (v137 != (char *)buf) {
        free(v137);
      }
    }
  }
  sub_1000E9354(&v167);
  if (byte_10248BBBF >= 0) {
    int v49 = (const char *)&qword_10248BBA8;
  }
  else {
    int v49 = (const char *)qword_10248BBA8;
  }
  if (sub_100012960(a2, v49, &v167))
  {
    if (byte_10248B8D7 >= 0) {
      uint64_t v50 = (const char *)&qword_10248B8C0;
    }
    else {
      uint64_t v50 = (const char *)qword_10248B8C0;
    }
    if ((sub_1000D2988((uint64_t)&v167, v50, (BOOL *)(a3 + 176)) & 1) == 0)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v51 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "#EED2MA,no enableCellular field in cellularMitigations dictionary, using default", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        LOWORD(v165) = 0;
        __int16 v140 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v140);
        if (v140 != (char *)buf) {
          free(v140);
        }
      }
    }
    if (byte_10248BBD7 >= 0) {
      uint64_t v52 = (const char *)&qword_10248BBC0;
    }
    else {
      uint64_t v52 = (const char *)qword_10248BBC0;
    }
    if ((sub_10006EF84((uint64_t)&v167, v52, (_DWORD *)(a3 + 180)) & 1) == 0)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      __int16 v53 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "#EED2MA,no rsrpThreshold field in cellularMitigations dictionary, using default", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        LOWORD(v165) = 0;
        int v141 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v141);
        if (v141 != (char *)buf) {
          free(v141);
        }
      }
    }
    if (byte_10248BBEF >= 0) {
      __int16 v54 = (const char *)&qword_10248BBD8;
    }
    else {
      __int16 v54 = (const char *)qword_10248BBD8;
    }
    if ((sub_1000A699C((uint64_t)&v167, v54, (void *)(a3 + 184)) & 1) == 0)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v55 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "#EED2MA,no rsrpQueryRate field in cellularMitigations dictionary, using default", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        LOWORD(v165) = 0;
        __int16 v142 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v142);
        if (v142 != (char *)buf) {
          free(v142);
        }
      }
    }
    if (byte_10248BC07 >= 0) {
      id v56 = (const char *)&qword_10248BBF0;
    }
    else {
      id v56 = (const char *)qword_10248BBF0;
    }
    if ((sub_10006EF84((uint64_t)&v167, v56, (_DWORD *)(a3 + 192)) & 1) == 0)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      BOOL v57 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "#EED2MA,no rsrpSamplesToAvg field in cellularMitigations dictionary, using default", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        LOWORD(v165) = 0;
        int v143 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v143);
        if (v143 != (char *)buf) {
          free(v143);
        }
      }
    }
    if (byte_10248BC1F >= 0) {
      __int16 v58 = (const char *)&qword_10248BC08;
    }
    else {
      __int16 v58 = (const char *)qword_10248BC08;
    }
    if ((sub_10006EF84((uint64_t)&v167, v58, (_DWORD *)(a3 + 196)) & 1) == 0)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v59 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "#EED2MA,no ulFreqThreshold field in cellularMitigations dictionary, using default", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        LOWORD(v165) = 0;
        int v144 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v144);
        if (v144 != (char *)buf) {
          free(v144);
        }
      }
    }
    sub_1000E9354(&v165);
    if (byte_10248BC37 >= 0) {
      __int16 v60 = (const char *)&qword_10248BC20;
    }
    else {
      __int16 v60 = (const char *)qword_10248BC20;
    }
    if (sub_100012960((uint64_t)&v167, v60, &v165))
    {
      if (byte_10248BC37 >= 0) {
        __int16 v61 = &qword_10248BC20;
      }
      else {
        __int16 v61 = (uint64_t *)qword_10248BC20;
      }
      sub_100A91B3C((uint64_t)v61, (uint64_t)&v165, a3 + 200);
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v66 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        if (*((char *)a1 + 23) >= 0) {
          int v67 = a1;
        }
        else {
          int v67 = (uint64_t *)*a1;
        }
        *(_DWORD *)uint64_t buf = 136446210;
        *(void *)uint64_t v172 = v67;
        _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "#EED2MA,no belowThresholdMitigations key in %{public}s EED2 dict, using default", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        if (*((char *)a1 + 23) >= 0) {
          unsigned int v146 = a1;
        }
        else {
          unsigned int v146 = (uint64_t *)*a1;
        }
        int v163 = 136446210;
        v164 = v146;
        int v147 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v147);
        if (v147 != (char *)buf) {
          free(v147);
        }
      }
    }
    sub_10013F3C4(&v165);
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    __int16 v62 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0) {
        __int16 v63 = a1;
      }
      else {
        __int16 v63 = (uint64_t *)*a1;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)uint64_t v172 = v63;
      _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "#EED2MA,no cellularMitigations key in %{public}s EED2 dict, using default", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      if (*((char *)a1 + 23) >= 0) {
        __int16 v64 = a1;
      }
      else {
        __int16 v64 = (uint64_t *)*a1;
      }
      int v165 = 136446210;
      int v166 = v64;
      uint64_t v65 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v65);
      if (v65 != (char *)buf) {
        free(v65);
      }
    }
  }
  sub_1000E9354(&v165);
  if (byte_10248BBA7 >= 0) {
    __int16 v68 = (const char *)&qword_10248BB90;
  }
  else {
    __int16 v68 = (const char *)qword_10248BB90;
  }
  if (sub_100012960(a2, v68, &v165))
  {
    if (byte_10248B8D7 >= 0) {
      int v69 = (const char *)&qword_10248B8C0;
    }
    else {
      int v69 = (const char *)qword_10248B8C0;
    }
    if ((sub_1000D2988((uint64_t)&v165, v69, (BOOL *)(a3 + 216)) & 1) == 0)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      __int16 v70 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEBUG, "#EED2MA,no enableThermal field in thermalMitigations dictionary, using default", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        LOWORD(v163) = 0;
        int v145 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v145);
        if (v145 != (char *)buf) {
          free(v145);
        }
      }
    }
    sub_1000E9354(&v163);
    if (byte_10248BC4F >= 0) {
      int v71 = (const char *)&qword_10248BC38;
    }
    else {
      int v71 = (const char *)qword_10248BC38;
    }
    if (sub_100012960((uint64_t)&v165, v71, &v163))
    {
      if (byte_10248BC4F >= 0) {
        __int16 v72 = &qword_10248BC38;
      }
      else {
        __int16 v72 = (uint64_t *)qword_10248BC38;
      }
      sub_100A91B3C((uint64_t)v72, (uint64_t)&v163, a3 + 220);
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v77 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "#EED2MA,no thermalLight field in thermalMitigations dictionary, using default", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        LOWORD(v161) = 0;
        int v148 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v148);
        if (v148 != (char *)buf) {
          free(v148);
        }
      }
    }
    sub_1000E9354(&v161);
    if (byte_10248BC67 >= 0) {
      char v78 = (const char *)&qword_10248BC50;
    }
    else {
      char v78 = (const char *)qword_10248BC50;
    }
    if (sub_100012960((uint64_t)&v165, v78, &v161))
    {
      if (byte_10248BC67 >= 0) {
        uint64_t v79 = &qword_10248BC50;
      }
      else {
        uint64_t v79 = (uint64_t *)qword_10248BC50;
      }
      sub_100A91B3C((uint64_t)v79, (uint64_t)&v161, a3 + 236);
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v80 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEBUG, "#EED2MA,no thermalMod field in thermalMitigations dictionary, using default", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        LOWORD(v159) = 0;
        int v149 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v149);
        if (v149 != (char *)buf) {
          free(v149);
        }
      }
    }
    sub_1000E9354(&v159);
    if (byte_10248BC7F >= 0) {
      int v81 = (const char *)&qword_10248BC68;
    }
    else {
      int v81 = (const char *)qword_10248BC68;
    }
    if (sub_100012960((uint64_t)&v165, v81, &v159))
    {
      if (byte_10248BC7F >= 0) {
        int v82 = &qword_10248BC68;
      }
      else {
        int v82 = (uint64_t *)qword_10248BC68;
      }
      sub_100A91B3C((uint64_t)v82, (uint64_t)&v159, a3 + 252);
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v83 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEBUG, "#EED2MA,no thermalHeavy field in thermalMitigations dictionary, using default", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        LOWORD(v157[0]) = 0;
        int v151 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v151);
        if (v151 != (char *)buf) {
          free(v151);
        }
      }
    }
    sub_10013F3C4(&v159);
    sub_10013F3C4(&v161);
    sub_10013F3C4(&v163);
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    __int16 v73 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0) {
        __int16 v74 = a1;
      }
      else {
        __int16 v74 = (uint64_t *)*a1;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)uint64_t v172 = v74;
      _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEBUG, "#EED2MA,no thermalMitigations key in %{public}s EED2 dict, using default", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      if (*((char *)a1 + 23) >= 0) {
        uint64_t v75 = a1;
      }
      else {
        uint64_t v75 = (uint64_t *)*a1;
      }
      int v163 = 136446210;
      v164 = v75;
      __int16 v76 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v76);
      if (v76 != (char *)buf) {
        free(v76);
      }
    }
  }
  sub_1000E9354(&v163);
  if (byte_10248BB8F >= 0) {
    char v84 = (const char *)&qword_10248BB78;
  }
  else {
    char v84 = (const char *)qword_10248BB78;
  }
  if (sub_100012960(a2, v84, &v163))
  {
    if (byte_10248B8D7 >= 0) {
      unsigned int v85 = (const char *)&qword_10248B8C0;
    }
    else {
      unsigned int v85 = (const char *)qword_10248B8C0;
    }
    if ((sub_1000D2988((uint64_t)&v163, v85, (BOOL *)(a3 + 268)) & 1) == 0)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v86 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEBUG, "#EED2MA,no enablePower field in powerMitigations dictionary, using default", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        LOWORD(v161) = 0;
        int v150 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v150);
        if (v150 != (char *)buf) {
          free(v150);
        }
      }
    }
    sub_1000E9354(&v161);
    if (byte_10248BC4F >= 0) {
      __int16 v87 = (const char *)&qword_10248BC38;
    }
    else {
      __int16 v87 = (const char *)qword_10248BC38;
    }
    if (sub_100012960((uint64_t)&v163, v87, &v161))
    {
      if (byte_10248BC4F >= 0) {
        __int16 v88 = &qword_10248BC38;
      }
      else {
        __int16 v88 = (uint64_t *)qword_10248BC38;
      }
      sub_100A91B3C((uint64_t)v88, (uint64_t)&v161, a3 + 272);
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      unint64_t v93 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEBUG, "#EED2MA,no powerLight field in powerMitigations dictionary, using default", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        LOWORD(v159) = 0;
        __int16 v152 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v152);
        if (v152 != (char *)buf) {
          free(v152);
        }
      }
    }
    sub_1000E9354(&v159);
    if (byte_10248BC67 >= 0) {
      __int16 v94 = (const char *)&qword_10248BC50;
    }
    else {
      __int16 v94 = (const char *)qword_10248BC50;
    }
    if (sub_100012960((uint64_t)&v163, v94, &v159))
    {
      if (byte_10248BC67 >= 0) {
        unint64_t v95 = &qword_10248BC50;
      }
      else {
        unint64_t v95 = (uint64_t *)qword_10248BC50;
      }
      sub_100A91B3C((uint64_t)v95, (uint64_t)&v159, a3 + 288);
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      __int16 v96 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEBUG, "#EED2MA,no powerMod field in powerMitigations dictionary, using default", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        LOWORD(v157[0]) = 0;
        uint64_t v153 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v153);
        if (v153 != (char *)buf) {
          free(v153);
        }
      }
    }
    sub_1000E9354(v157);
    if (byte_10248BC7F >= 0) {
      __int16 v97 = (const char *)&qword_10248BC68;
    }
    else {
      __int16 v97 = (const char *)qword_10248BC68;
    }
    if (sub_100012960((uint64_t)&v163, v97, v157))
    {
      if (byte_10248BC7F >= 0) {
        __int16 v98 = &qword_10248BC68;
      }
      else {
        __int16 v98 = (uint64_t *)qword_10248BC68;
      }
      sub_100A91B3C((uint64_t)v98, (uint64_t)v157, a3 + 304);
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      char v99 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEBUG, "#EED2MA,no powerHeavy field in powerMitigations dictionary, using default", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        char v155 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v155);
        if (v155 != (char *)buf) {
          free(v155);
        }
      }
    }
    sub_10013F3C4(v157);
    sub_10013F3C4(&v159);
    sub_10013F3C4(&v161);
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    __int16 v89 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0) {
        int v90 = a1;
      }
      else {
        int v90 = (uint64_t *)*a1;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)uint64_t v172 = v90;
      _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEBUG, "#EED2MA,no powerMitigations key in %{public}s EED2 dict, using default", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      if (*((char *)a1 + 23) >= 0) {
        float v91 = a1;
      }
      else {
        float v91 = (uint64_t *)*a1;
      }
      int v161 = 136446210;
      int v162 = v91;
      __int16 v92 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v92);
      if (v92 != (char *)buf) {
        free(v92);
      }
    }
  }
  sub_1000E9354(&v161);
  if (byte_10248BD27 >= 0) {
    int v100 = (const char *)&qword_10248BD10;
  }
  else {
    int v100 = (const char *)qword_10248BD10;
  }
  if (sub_100012960(a2, v100, &v161))
  {
    if (byte_10248BD3F >= 0) {
      double v101 = (const char *)&qword_10248BD28;
    }
    else {
      double v101 = (const char *)qword_10248BD28;
    }
    if ((sub_10006EF84((uint64_t)&v161, v101, (_DWORD *)(a3 + 320)) & 1) == 0)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      __int16 v102 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_DEBUG, "#EED2MA,no numInFlight field in uploadConfig dictionary, using default", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        LOWORD(v159) = 0;
        uint64_t v154 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v154);
        if (v154 != (char *)buf) {
          free(v154);
        }
      }
    }
    if (byte_10248BD57 >= 0) {
      double v103 = (const char *)&qword_10248BD40;
    }
    else {
      double v103 = (const char *)qword_10248BD40;
    }
    if ((sub_10006EF84((uint64_t)&v161, v103, (_DWORD *)(a3 + 324)) & 1) == 0)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      __int16 v104 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEBUG, "#EED2MA,no maxFileSize field in uploadConfig dictionary, using default", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        LOWORD(v159) = 0;
        std::string v156 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v156);
        if (v156 != (char *)buf) {
          free(v156);
        }
      }
    }
    if (byte_10248BD6F >= 0) {
      double v105 = (const char *)&qword_10248BD58;
    }
    else {
      double v105 = (const char *)qword_10248BD58;
    }
    if ((sub_10006EF84((uint64_t)&v161, v105, (_DWORD *)(a3 + 328)) & 1) == 0)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      __int16 v106 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_DEBUG, "#EED2MA,no maxQuota field in uploadConfig dictionary, using default", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        LOWORD(v159) = 0;
        double v107 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v107);
LABEL_528:
        if (v107 != (char *)buf) {
          free(v107);
        }
      }
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v108 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0) {
        int v109 = a1;
      }
      else {
        int v109 = (uint64_t *)*a1;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)uint64_t v172 = v109;
      _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEBUG, "#EED2MA,no uploadConfig key in %{public}s EED2 dict, using default", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      if (*((char *)a1 + 23) >= 0) {
        __int16 v138 = a1;
      }
      else {
        __int16 v138 = (uint64_t *)*a1;
      }
      int v159 = 136446210;
      int v160 = v138;
      double v107 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)", "%s\n", v107);
      goto LABEL_528;
    }
  }
  sub_10013F3C4(&v161);
  sub_10013F3C4(&v163);
  sub_10013F3C4(&v165);
  sub_10013F3C4(&v167);
  return sub_10013F3C4(&v169);
}

void sub_100A911DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31)
{
}

void sub_100A912F0(uint64_t a1, void *a2, int a3)
{
  long long v32 = 0u;
  memset(v31, 0, sizeof(v31));
  unsigned __int8 v33 = 1;
  memset(&__p, 0, sizeof(__p));
  id v6 = [a2 valueForKey:@"PartnerID"];
  if (v6)
  {
    std::string::assign((std::string *)v31, (const std::string::value_type *)[v6 UTF8String]);
    id v7 = [a2 valueForKey:@"ADRCert"];
    if (v7)
    {
      std::string::assign((std::string *)&v31[24], (const std::string::value_type *)[v7 UTF8String]);
      if (byte_10248B94F >= 0) {
        uint64_t v8 = &qword_10248B938;
      }
      else {
        uint64_t v8 = (uint64_t *)qword_10248B938;
      }
      id v9 = [a2 valueForKey:[NSString stringWithUTF8String:v8]];
      if (v9) {
        unsigned __int8 v10 = [v9 BOOLValue];
      }
      else {
        unsigned __int8 v10 = 1;
      }
      unsigned __int8 v33 = v10;
      if (byte_10248B967 >= 0) {
        int v16 = &qword_10248B950;
      }
      else {
        int v16 = (uint64_t *)qword_10248B950;
      }
      id v17 = [a2 valueForKey:[NSString stringWithUTF8String:v16]];
      if (v17)
      {
        std::string::assign(&__p, (const std::string::value_type *)[v17 UTF8String]);
      }
      else
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        uint64_t v18 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          char v19 = v31;
          if (v31[23] < 0) {
            char v19 = *(unsigned char **)v31;
          }
          *(_DWORD *)uint64_t buf = 67240450;
          int v44 = a3;
          __int16 v45 = 2082;
          __int16 v46 = v19;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#EED2,no baseURL field in partner info dictionary,idx,%{public}d,partner,%{public}s", buf, 0x12u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          char v29 = v31;
          if (v31[23] < 0) {
            char v29 = *(unsigned char **)v31;
          }
          int v35 = 67240450;
          int v36 = a3;
          __int16 v37 = 2082;
          int v38 = v29;
          CFTypeRef v30 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)_block_invoke", "%s\n", v30);
          if (v30 != (char *)buf) {
            free(v30);
          }
        }
        std::string::assign(&__p, "");
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v20 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v21 = v31;
        if (v31[23] < 0) {
          uint64_t v21 = *(unsigned char **)v31;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)uint64_t buf = 67240962;
        int v44 = a3;
        __int16 v45 = 2082;
        __int16 v46 = v21;
        __int16 v47 = 2050;
        uint64_t v48 = v33;
        __int16 v49 = 2082;
        uint64_t v50 = p_p;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#EED2,adding partner info,idx,%{public}d,partner,%{public}s,requestsSupported,%{public}ld,baseURL,%{public}s", buf, 0x26u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        int v26 = v31;
        if (v31[23] < 0) {
          int v26 = *(unsigned char **)v31;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          os_log_type_t v27 = &__p;
        }
        else {
          os_log_type_t v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        int v35 = 67240962;
        int v36 = a3;
        __int16 v37 = 2082;
        int v38 = v26;
        __int16 v39 = 2050;
        uint64_t v40 = v33;
        __int16 v41 = 2082;
        BOOL v42 = v27;
        int v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)_block_invoke", "%s\n", v28);
        if (v28 != (char *)buf) {
          free(v28);
        }
      }
      uint64_t v23 = *(void **)(a1 + 32);
      unint64_t v24 = v23[18];
      if (v24 >= v23[19])
      {
        uint64_t v25 = sub_100ABD6B8(v23 + 17, (long long *)v31);
      }
      else
      {
        sub_10084E8F0(v23 + 152, (char *)v23[18], (long long *)v31);
        uint64_t v25 = v24 + 80;
        v23[18] = v24 + 80;
      }
      v23[18] = v25;
      goto LABEL_58;
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    char v13 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      int v14 = v31;
      if (v31[23] < 0) {
        int v14 = *(unsigned char **)v31;
      }
      *(_DWORD *)uint64_t buf = 67240450;
      int v44 = a3;
      __int16 v45 = 2082;
      __int16 v46 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#EED2,no ADRCert field in partner info dictionary so skipping,idx,%{public}d,partner,%{public}s", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v15 = v31;
      if (v31[23] < 0) {
        uint64_t v15 = *(unsigned char **)v31;
      }
      int v35 = 67240450;
      int v36 = a3;
      __int16 v37 = 2082;
      int v38 = v15;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)_block_invoke", "%s\n", v12);
LABEL_28:
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    char v11 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      int v44 = a3;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#EED2,no PartnerID field in partner info dictionary so skipping,idx,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v35 = 67240192;
      int v36 = a3;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static void CLEmergencyEED2::readEED2Keys(const std::string &, const CLNameValuePair &, AugmentedAction::EED2 &)_block_invoke", "%s\n", v12);
      goto LABEL_28;
    }
  }
LABEL_58:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete(*(void **)&v31[24]);
  }
  if ((v31[23] & 0x80000000) != 0) {
    operator delete(*(void **)v31);
  }
}

void sub_100A91B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100A7D89C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100A91B3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (byte_10248BC97 >= 0) {
    id v6 = (const char *)&qword_10248BC80;
  }
  else {
    id v6 = (const char *)qword_10248BC80;
  }
  if ((sub_1000D2988(a2, v6, (BOOL *)a3) & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v7 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 136446210;
      uint64_t v25 = a1;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#EED2MA,no allowNewStreamingRequests field in %{public}s dictionary, using default", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2MitigationParamsKeys(const char *const, const CLNameValuePair &, AugmentedAction::EED2::MitigationParams &)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
  }
  if (byte_10248BCAF >= 0) {
    uint64_t v8 = (const char *)&qword_10248BC98;
  }
  else {
    uint64_t v8 = (const char *)qword_10248BC98;
  }
  if ((sub_1000D2988(a2, v8, (BOOL *)(a3 + 1)) & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v9 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 136446210;
      uint64_t v25 = a1;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#EED2MA,no allowNewMediaRequests field in %{public}s dictionary, using default", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      char v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2MitigationParamsKeys(const char *const, const CLNameValuePair &, AugmentedAction::EED2::MitigationParams &)", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
  }
  if (byte_10248BCC7 >= 0) {
    unsigned __int8 v10 = (const char *)&qword_10248BCB0;
  }
  else {
    unsigned __int8 v10 = (const char *)qword_10248BCB0;
  }
  if ((sub_10006EF84(a2, v10, (_DWORD *)(a3 + 4)) & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    char v11 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 136446210;
      uint64_t v25 = a1;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#EED2MA,no maxFramerateFps field in %{public}s dictionary, using default", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2MitigationParamsKeys(const char *const, const CLNameValuePair &, AugmentedAction::EED2::MitigationParams &)", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
  }
  if (byte_10248BCDF >= 0) {
    uint64_t v12 = (const char *)&qword_10248BCC8;
  }
  else {
    uint64_t v12 = (const char *)qword_10248BCC8;
  }
  if ((sub_10006EF84(a2, v12, (_DWORD *)(a3 + 8)) & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    char v13 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 136446210;
      uint64_t v25 = a1;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#EED2MA,no maxStreamingBitrateKbps field in %{public}s dictionary, using default", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2MitigationParamsKeys(const char *const, const CLNameValuePair &, AugmentedAction::EED2::MitigationParams &)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
  }
  if (byte_10248BCF7 >= 0) {
    int v14 = (const char *)&qword_10248BCE0;
  }
  else {
    int v14 = (const char *)qword_10248BCE0;
  }
  if ((sub_1000D2988(a2, v14, (BOOL *)(a3 + 12)) & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v15 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 136446210;
      uint64_t v25 = a1;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#EED2MA,no dropStreaming field in %{public}s dictionary, using default", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2MitigationParamsKeys(const char *const, const CLNameValuePair &, AugmentedAction::EED2::MitigationParams &)", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
  }
  if (byte_10248BD0F >= 0) {
    int v16 = (const char *)&qword_10248BCF8;
  }
  else {
    int v16 = (const char *)qword_10248BCF8;
  }
  if ((sub_1000D2988(a2, v16, (BOOL *)(a3 + 13)) & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v17 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 136446210;
      uint64_t v25 = a1;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#EED2MA,no delayMedia field in %{public}s dictionary, using default", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readEED2MitigationParamsKeys(const char *const, const CLNameValuePair &, AugmentedAction::EED2::MitigationParams &)", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
  }
}

void sub_100A9243C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if ((sub_1000D2988(a2, "Disabled", (BOOL *)a3) & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v6 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0) {
        id v7 = a1;
      }
      else {
        id v7 = (uint64_t *)*a1;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      os_log_type_t v31 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#EED2,#BAA No Disabled key in %{public}s BAA dict, using default", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readBaaKeys(const std::string &, const CLNameValuePair &, BAASettings &)", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
  }
  if ((sub_1000D2988(a2, "EEDEnabledOnly", (BOOL *)(a3 + 1)) & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v8 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0) {
        id v9 = a1;
      }
      else {
        id v9 = (uint64_t *)*a1;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      os_log_type_t v31 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#EED2,#BAA No EEDEnabledOnly key in %{public}s BAA dict, using default", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readBaaKeys(const std::string &, const CLNameValuePair &, BAASettings &)", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
  }
  if ((sub_10006EF84(a2, "CertValidityPeriod", (_DWORD *)(a3 + 4)) & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    unsigned __int8 v10 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0) {
        char v11 = a1;
      }
      else {
        char v11 = (uint64_t *)*a1;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      os_log_type_t v31 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#EED2,#BAA No CertValidityPeriod key in %{public}s BAA dict, using default", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      unint64_t v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readBaaKeys(const std::string &, const CLNameValuePair &, BAASettings &)", "%s\n", v24);
      if (v24 != (char *)buf) {
        free(v24);
      }
    }
  }
  if ((sub_10006EF84(a2, "NoCertRequestWindow", (_DWORD *)(a3 + 8)) & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v12 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0) {
        char v13 = a1;
      }
      else {
        char v13 = (uint64_t *)*a1;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      os_log_type_t v31 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#EED2,#BAA No NoCertRequestWindow key in %{public}s BAA dict, using default", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readBaaKeys(const std::string &, const CLNameValuePair &, BAASettings &)", "%s\n", v25);
      if (v25 != (char *)buf) {
        free(v25);
      }
    }
  }
  if ((sub_10006EF84(a2, "NoCertRetryWindow", (_DWORD *)(a3 + 12)) & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v14 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0) {
        uint64_t v15 = a1;
      }
      else {
        uint64_t v15 = (uint64_t *)*a1;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      os_log_type_t v31 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#EED2,#BAA No NoCertRetryWindow key in %{public}s BAA dict, using default", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readBaaKeys(const std::string &, const CLNameValuePair &, BAASettings &)", "%s\n", v26);
      if (v26 != (char *)buf) {
        free(v26);
      }
    }
  }
  if ((sub_10006EF84(a2, "CertAvailableRequestWindowMin", (_DWORD *)(a3 + 16)) & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v16 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0) {
        id v17 = a1;
      }
      else {
        id v17 = (uint64_t *)*a1;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      os_log_type_t v31 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#EED2,#BAA No CertAvailableRequestWindowMin key in %{public}s BAA dict, using default", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      os_log_type_t v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readBaaKeys(const std::string &, const CLNameValuePair &, BAASettings &)", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
  }
  if ((sub_10006EF84(a2, "CertAvailableRequestWindowMax", (_DWORD *)(a3 + 20)) & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v18 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0) {
        char v19 = a1;
      }
      else {
        char v19 = (uint64_t *)*a1;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      os_log_type_t v31 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#EED2,#BAA No CertAvailableRequestWindowMax key in %{public}s BAA dict, using default", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readBaaKeys(const std::string &, const CLNameValuePair &, BAASettings &)", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
  }
  if ((sub_10006EF84(a2, "CertAvailableRetryWindow", (_DWORD *)(a3 + 24)) & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v20 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a1 + 23) >= 0) {
        uint64_t v21 = a1;
      }
      else {
        uint64_t v21 = (uint64_t *)*a1;
      }
      *(_DWORD *)uint64_t buf = 136446210;
      os_log_type_t v31 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#EED2,#BAA No CertAvailableRetryWindow key in %{public}s BAA dict, using default", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      char v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readBaaKeys(const std::string &, const CLNameValuePair &, BAASettings &)", "%s\n", v29);
      if (v29 != (char *)buf) {
        free(v29);
      }
    }
  }
}

void sub_100A93094(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (byte_10248B8D7 >= 0) {
    id v6 = (const char *)&qword_10248B8C0;
  }
  else {
    id v6 = (const char *)qword_10248B8C0;
  }
  if ((sub_1000D2988(a2, v6, (BOOL *)a3) & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v7 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (byte_10248B8D7 >= 0) {
        uint64_t v8 = &qword_10248B8C0;
      }
      else {
        uint64_t v8 = (uint64_t *)qword_10248B8C0;
      }
      if (*((char *)a1 + 23) >= 0) {
        id v9 = a1;
      }
      else {
        id v9 = (uint64_t *)*a1;
      }
      unsigned __int8 v10 = &qword_10248BD70;
      if (byte_10248BD87 < 0) {
        unsigned __int8 v10 = (uint64_t *)qword_10248BD70;
      }
      *(_DWORD *)uint64_t buf = 136446722;
      *(void *)int v113 = v8;
      *(_WORD *)&v113[8] = 2082;
      *(void *)&v113[10] = v9;
      *(_WORD *)&v113[18] = 2082;
      *(void *)&v113[20] = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#EED2,#ADR,no %{public}s key in %{public}s %{public}s dict, using default", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      if (byte_10248B8D7 >= 0) {
        __int16 v70 = &qword_10248B8C0;
      }
      else {
        __int16 v70 = (uint64_t *)qword_10248B8C0;
      }
      if (*((char *)a1 + 23) >= 0) {
        int v71 = a1;
      }
      else {
        int v71 = (uint64_t *)*a1;
      }
      __int16 v72 = &qword_10248BD70;
      if (byte_10248BD87 < 0) {
        __int16 v72 = (uint64_t *)qword_10248BD70;
      }
      int v110 = 136446722;
      *(void *)uint64_t v111 = v70;
      *(_WORD *)&v111[8] = 2082;
      *(void *)&v111[10] = v71;
      *(_WORD *)&v111[18] = 2082;
      *(void *)&v111[20] = v72;
      __int16 v73 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readPreCachedAdrKeys(const std::string &, const CLNameValuePair &, PreCachedADRSettings &)", "%s\n", v73);
      if (v73 != (char *)buf) {
        free(v73);
      }
    }
  }
  if (byte_10248B817 >= 0) {
    char v11 = (const char *)&qword_10248B800;
  }
  else {
    char v11 = (const char *)qword_10248B800;
  }
  if (sub_1004D1284(a2, v11, (std::string *)(a3 + 8)))
  {
    std::string::insert((std::string *)(a3 + 8), 0, "https://");
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v12 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (byte_10248B817 >= 0) {
        char v13 = &qword_10248B800;
      }
      else {
        char v13 = (uint64_t *)qword_10248B800;
      }
      if (*((char *)a1 + 23) >= 0) {
        int v14 = a1;
      }
      else {
        int v14 = (uint64_t *)*a1;
      }
      uint64_t v15 = &qword_10248BD70;
      if (byte_10248BD87 < 0) {
        uint64_t v15 = (uint64_t *)qword_10248BD70;
      }
      *(_DWORD *)uint64_t buf = 136446722;
      *(void *)int v113 = v13;
      *(_WORD *)&v113[8] = 2082;
      *(void *)&v113[10] = v14;
      *(_WORD *)&v113[18] = 2082;
      *(void *)&v113[20] = v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#EED2,#ADR,no %{public}s key in %{public}s %{public}s dict, using default", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      if (byte_10248B817 >= 0) {
        __int16 v74 = &qword_10248B800;
      }
      else {
        __int16 v74 = (uint64_t *)qword_10248B800;
      }
      if (*((char *)a1 + 23) >= 0) {
        uint64_t v75 = a1;
      }
      else {
        uint64_t v75 = (uint64_t *)*a1;
      }
      __int16 v76 = &qword_10248BD70;
      if (byte_10248BD87 < 0) {
        __int16 v76 = (uint64_t *)qword_10248BD70;
      }
      int v110 = 136446722;
      *(void *)uint64_t v111 = v74;
      *(_WORD *)&v111[8] = 2082;
      *(void *)&v111[10] = v75;
      *(_WORD *)&v111[18] = 2082;
      *(void *)&v111[20] = v76;
      int v77 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readPreCachedAdrKeys(const std::string &, const CLNameValuePair &, PreCachedADRSettings &)", "%s\n", v77);
      if (v77 != (char *)buf) {
        free(v77);
      }
    }
    std::string::operator=((std::string *)(a3 + 8), (const std::string *)byte_10248A870);
  }
  if (byte_10248BD9F >= 0) {
    int v16 = (const char *)&qword_10248BD88;
  }
  else {
    int v16 = (const char *)qword_10248BD88;
  }
  if ((sub_10006EF84(a2, v16, (_DWORD *)(a3 + 32)) & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v17 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (byte_10248BD9F >= 0) {
        uint64_t v18 = &qword_10248BD88;
      }
      else {
        uint64_t v18 = (uint64_t *)qword_10248BD88;
      }
      if (*((char *)a1 + 23) >= 0) {
        char v19 = a1;
      }
      else {
        char v19 = (uint64_t *)*a1;
      }
      uint64_t v20 = &qword_10248BD70;
      if (byte_10248BD87 < 0) {
        uint64_t v20 = (uint64_t *)qword_10248BD70;
      }
      *(_DWORD *)uint64_t buf = 136446722;
      *(void *)int v113 = v18;
      *(_WORD *)&v113[8] = 2082;
      *(void *)&v113[10] = v19;
      *(_WORD *)&v113[18] = 2082;
      *(void *)&v113[20] = v20;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#EED2,#ADR,no %{public}s key in %{public}s %{public}s dict, using default", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      if (byte_10248BD9F >= 0) {
        char v78 = &qword_10248BD88;
      }
      else {
        char v78 = (uint64_t *)qword_10248BD88;
      }
      if (*((char *)a1 + 23) >= 0) {
        uint64_t v79 = a1;
      }
      else {
        uint64_t v79 = (uint64_t *)*a1;
      }
      uint64_t v80 = &qword_10248BD70;
      if (byte_10248BD87 < 0) {
        uint64_t v80 = (uint64_t *)qword_10248BD70;
      }
      int v110 = 136446722;
      *(void *)uint64_t v111 = v78;
      *(_WORD *)&v111[8] = 2082;
      *(void *)&v111[10] = v79;
      *(_WORD *)&v111[18] = 2082;
      *(void *)&v111[20] = v80;
      int v81 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readPreCachedAdrKeys(const std::string &, const CLNameValuePair &, PreCachedADRSettings &)", "%s\n", v81);
      if (v81 != (char *)buf) {
        free(v81);
      }
    }
  }
  if (byte_10248BDB7 >= 0) {
    uint64_t v21 = (const char *)&qword_10248BDA0;
  }
  else {
    uint64_t v21 = (const char *)qword_10248BDA0;
  }
  if ((sub_10006EF84(a2, v21, (_DWORD *)(a3 + 36)) & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v22 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (byte_10248BDB7 >= 0) {
        uint64_t v23 = &qword_10248BDA0;
      }
      else {
        uint64_t v23 = (uint64_t *)qword_10248BDA0;
      }
      if (*((char *)a1 + 23) >= 0) {
        unint64_t v24 = a1;
      }
      else {
        unint64_t v24 = (uint64_t *)*a1;
      }
      uint64_t v25 = &qword_10248BD70;
      if (byte_10248BD87 < 0) {
        uint64_t v25 = (uint64_t *)qword_10248BD70;
      }
      *(_DWORD *)uint64_t buf = 136446722;
      *(void *)int v113 = v23;
      *(_WORD *)&v113[8] = 2082;
      *(void *)&v113[10] = v24;
      *(_WORD *)&v113[18] = 2082;
      *(void *)&v113[20] = v25;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "#EED2,#ADR,no %{public}s key in %{public}s %{public}s dict, using default", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      if (byte_10248BDB7 >= 0) {
        int v82 = &qword_10248BDA0;
      }
      else {
        int v82 = (uint64_t *)qword_10248BDA0;
      }
      if (*((char *)a1 + 23) >= 0) {
        uint64_t v83 = a1;
      }
      else {
        uint64_t v83 = (uint64_t *)*a1;
      }
      char v84 = &qword_10248BD70;
      if (byte_10248BD87 < 0) {
        char v84 = (uint64_t *)qword_10248BD70;
      }
      int v110 = 136446722;
      *(void *)uint64_t v111 = v82;
      *(_WORD *)&v111[8] = 2082;
      *(void *)&v111[10] = v83;
      *(_WORD *)&v111[18] = 2082;
      *(void *)&v111[20] = v84;
      unsigned int v85 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readPreCachedAdrKeys(const std::string &, const CLNameValuePair &, PreCachedADRSettings &)", "%s\n", v85);
      if (v85 != (char *)buf) {
        free(v85);
      }
    }
  }
  if (byte_10248BDCF >= 0) {
    int v26 = (const char *)&qword_10248BDB8;
  }
  else {
    int v26 = (const char *)qword_10248BDB8;
  }
  if ((sub_10006EF84(a2, v26, (_DWORD *)(a3 + 40)) & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    os_log_type_t v27 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (byte_10248BDCF >= 0) {
        int v28 = &qword_10248BDB8;
      }
      else {
        int v28 = (uint64_t *)qword_10248BDB8;
      }
      if (*((char *)a1 + 23) >= 0) {
        char v29 = a1;
      }
      else {
        char v29 = (uint64_t *)*a1;
      }
      CFTypeRef v30 = &qword_10248BD70;
      if (byte_10248BD87 < 0) {
        CFTypeRef v30 = (uint64_t *)qword_10248BD70;
      }
      *(_DWORD *)uint64_t buf = 136446722;
      *(void *)int v113 = v28;
      *(_WORD *)&v113[8] = 2082;
      *(void *)&v113[10] = v29;
      *(_WORD *)&v113[18] = 2082;
      *(void *)&v113[20] = v30;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "#EED2,#ADR,no %{public}s key in %{public}s %{public}s dict, using default", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      if (byte_10248BDCF >= 0) {
        uint64_t v86 = &qword_10248BDB8;
      }
      else {
        uint64_t v86 = (uint64_t *)qword_10248BDB8;
      }
      if (*((char *)a1 + 23) >= 0) {
        __int16 v87 = a1;
      }
      else {
        __int16 v87 = (uint64_t *)*a1;
      }
      __int16 v88 = &qword_10248BD70;
      if (byte_10248BD87 < 0) {
        __int16 v88 = (uint64_t *)qword_10248BD70;
      }
      int v110 = 136446722;
      *(void *)uint64_t v111 = v86;
      *(_WORD *)&v111[8] = 2082;
      *(void *)&v111[10] = v87;
      *(_WORD *)&v111[18] = 2082;
      *(void *)&v111[20] = v88;
      __int16 v89 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readPreCachedAdrKeys(const std::string &, const CLNameValuePair &, PreCachedADRSettings &)", "%s\n", v89);
      if (v89 != (char *)buf) {
        free(v89);
      }
    }
  }
  if (byte_10248BDE7 >= 0) {
    os_log_type_t v31 = (const char *)&qword_10248BDD0;
  }
  else {
    os_log_type_t v31 = (const char *)qword_10248BDD0;
  }
  if ((sub_10006EF84(a2, v31, (_DWORD *)(a3 + 44)) & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    long long v32 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (byte_10248BDE7 >= 0) {
        unsigned __int8 v33 = &qword_10248BDD0;
      }
      else {
        unsigned __int8 v33 = (uint64_t *)qword_10248BDD0;
      }
      if (*((char *)a1 + 23) >= 0) {
        id v34 = a1;
      }
      else {
        id v34 = (uint64_t *)*a1;
      }
      int v35 = &qword_10248BD70;
      if (byte_10248BD87 < 0) {
        int v35 = (uint64_t *)qword_10248BD70;
      }
      *(_DWORD *)uint64_t buf = 136446722;
      *(void *)int v113 = v33;
      *(_WORD *)&v113[8] = 2082;
      *(void *)&v113[10] = v34;
      *(_WORD *)&v113[18] = 2082;
      *(void *)&v113[20] = v35;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "#EED2,#ADR,no %{public}s key in %{public}s %{public}s dict, using default", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      if (byte_10248BDE7 >= 0) {
        int v90 = &qword_10248BDD0;
      }
      else {
        int v90 = (uint64_t *)qword_10248BDD0;
      }
      if (*((char *)a1 + 23) >= 0) {
        float v91 = a1;
      }
      else {
        float v91 = (uint64_t *)*a1;
      }
      __int16 v92 = &qword_10248BD70;
      if (byte_10248BD87 < 0) {
        __int16 v92 = (uint64_t *)qword_10248BD70;
      }
      int v110 = 136446722;
      *(void *)uint64_t v111 = v90;
      *(_WORD *)&v111[8] = 2082;
      *(void *)&v111[10] = v91;
      *(_WORD *)&v111[18] = 2082;
      *(void *)&v111[20] = v92;
      unint64_t v93 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readPreCachedAdrKeys(const std::string &, const CLNameValuePair &, PreCachedADRSettings &)", "%s\n", v93);
      if (v93 != (char *)buf) {
        free(v93);
      }
    }
  }
  if (byte_10248BDFF >= 0) {
    int v36 = (const char *)&qword_10248BDE8;
  }
  else {
    int v36 = (const char *)qword_10248BDE8;
  }
  if ((sub_10006EF84(a2, v36, (_DWORD *)(a3 + 48)) & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    __int16 v37 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (byte_10248BDFF >= 0) {
        int v38 = &qword_10248BDE8;
      }
      else {
        int v38 = (uint64_t *)qword_10248BDE8;
      }
      if (*((char *)a1 + 23) >= 0) {
        __int16 v39 = a1;
      }
      else {
        __int16 v39 = (uint64_t *)*a1;
      }
      uint64_t v40 = &qword_10248BD70;
      if (byte_10248BD87 < 0) {
        uint64_t v40 = (uint64_t *)qword_10248BD70;
      }
      *(_DWORD *)uint64_t buf = 136446722;
      *(void *)int v113 = v38;
      *(_WORD *)&v113[8] = 2082;
      *(void *)&v113[10] = v39;
      *(_WORD *)&v113[18] = 2082;
      *(void *)&v113[20] = v40;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "#EED2,#ADR,no %{public}s key in %{public}s %{public}s dict, using default", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      if (byte_10248BDFF >= 0) {
        __int16 v94 = &qword_10248BDE8;
      }
      else {
        __int16 v94 = (uint64_t *)qword_10248BDE8;
      }
      if (*((char *)a1 + 23) >= 0) {
        unint64_t v95 = a1;
      }
      else {
        unint64_t v95 = (uint64_t *)*a1;
      }
      __int16 v96 = &qword_10248BD70;
      if (byte_10248BD87 < 0) {
        __int16 v96 = (uint64_t *)qword_10248BD70;
      }
      int v110 = 136446722;
      *(void *)uint64_t v111 = v94;
      *(_WORD *)&v111[8] = 2082;
      *(void *)&v111[10] = v95;
      *(_WORD *)&v111[18] = 2082;
      *(void *)&v111[20] = v96;
      __int16 v97 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readPreCachedAdrKeys(const std::string &, const CLNameValuePair &, PreCachedADRSettings &)", "%s\n", v97);
      if (v97 != (char *)buf) {
        free(v97);
      }
    }
  }
  if (byte_10248BE17 >= 0) {
    __int16 v41 = (const char *)&qword_10248BE00;
  }
  else {
    __int16 v41 = (const char *)qword_10248BE00;
  }
  if ((sub_10006EF84(a2, v41, (_DWORD *)(a3 + 52)) & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    BOOL v42 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (byte_10248BE17 >= 0) {
        int v43 = &qword_10248BE00;
      }
      else {
        int v43 = (uint64_t *)qword_10248BE00;
      }
      if (*((char *)a1 + 23) >= 0) {
        int v44 = a1;
      }
      else {
        int v44 = (uint64_t *)*a1;
      }
      __int16 v45 = &qword_10248BD70;
      if (byte_10248BD87 < 0) {
        __int16 v45 = (uint64_t *)qword_10248BD70;
      }
      *(_DWORD *)uint64_t buf = 136446722;
      *(void *)int v113 = v43;
      *(_WORD *)&v113[8] = 2082;
      *(void *)&v113[10] = v44;
      *(_WORD *)&v113[18] = 2082;
      *(void *)&v113[20] = v45;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "#EED2,#ADR,no %{public}s key in %{public}s %{public}s dict, using default", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      if (byte_10248BE17 >= 0) {
        __int16 v98 = &qword_10248BE00;
      }
      else {
        __int16 v98 = (uint64_t *)qword_10248BE00;
      }
      if (*((char *)a1 + 23) >= 0) {
        char v99 = a1;
      }
      else {
        char v99 = (uint64_t *)*a1;
      }
      int v100 = &qword_10248BD70;
      if (byte_10248BD87 < 0) {
        int v100 = (uint64_t *)qword_10248BD70;
      }
      int v110 = 136446722;
      *(void *)uint64_t v111 = v98;
      *(_WORD *)&v111[8] = 2082;
      *(void *)&v111[10] = v99;
      *(_WORD *)&v111[18] = 2082;
      *(void *)&v111[20] = v100;
      double v101 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readPreCachedAdrKeys(const std::string &, const CLNameValuePair &, PreCachedADRSettings &)", "%s\n", v101);
      if (v101 != (char *)buf) {
        free(v101);
      }
    }
  }
  if (byte_10248BE2F >= 0) {
    __int16 v46 = (const char *)&qword_10248BE18;
  }
  else {
    __int16 v46 = (const char *)qword_10248BE18;
  }
  if ((sub_10006EF84(a2, v46, (_DWORD *)(a3 + 56)) & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    __int16 v47 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (byte_10248BE2F >= 0) {
        uint64_t v48 = &qword_10248BE18;
      }
      else {
        uint64_t v48 = (uint64_t *)qword_10248BE18;
      }
      if (*((char *)a1 + 23) >= 0) {
        __int16 v49 = a1;
      }
      else {
        __int16 v49 = (uint64_t *)*a1;
      }
      uint64_t v50 = &qword_10248BD70;
      if (byte_10248BD87 < 0) {
        uint64_t v50 = (uint64_t *)qword_10248BD70;
      }
      *(_DWORD *)uint64_t buf = 136446722;
      *(void *)int v113 = v48;
      *(_WORD *)&v113[8] = 2082;
      *(void *)&v113[10] = v49;
      *(_WORD *)&v113[18] = 2082;
      *(void *)&v113[20] = v50;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "#EED2,#ADR,no %{public}s key in %{public}s %{public}s dict, using default", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      if (byte_10248BE2F >= 0) {
        __int16 v102 = &qword_10248BE18;
      }
      else {
        __int16 v102 = (uint64_t *)qword_10248BE18;
      }
      if (*((char *)a1 + 23) >= 0) {
        double v103 = a1;
      }
      else {
        double v103 = (uint64_t *)*a1;
      }
      __int16 v104 = &qword_10248BD70;
      if (byte_10248BD87 < 0) {
        __int16 v104 = (uint64_t *)qword_10248BD70;
      }
      int v110 = 136446722;
      *(void *)uint64_t v111 = v102;
      *(_WORD *)&v111[8] = 2082;
      *(void *)&v111[10] = v103;
      *(_WORD *)&v111[18] = 2082;
      *(void *)&v111[20] = v104;
      double v105 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readPreCachedAdrKeys(const std::string &, const CLNameValuePair &, PreCachedADRSettings &)", "%s\n", v105);
      if (v105 != (char *)buf) {
        free(v105);
      }
    }
  }
  uint64_t v51 = (void *)sub_1000E9358(a2);
  if (byte_10248BB2F >= 0) {
    uint64_t v52 = &qword_10248BB18;
  }
  else {
    uint64_t v52 = (uint64_t *)qword_10248BB18;
  }
  id v53 = [v51 valueForKey:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v52)];
  if (v53)
  {
    uint64_t v55 = *(void *)(a3 + 64);
    for (uint64_t i = *(void *)(a3 + 72); i != v55; sub_10028B738(a3 + 80, i))
      i -= 48;
    *(void *)(a3 + 72) = v55;
    v109[0] = _NSConcreteStackBlock;
    v109[1] = 3221225472;
    v109[2] = sub_100A9480C;
    v109[3] = &unk_1022DB758;
    v109[4] = a3;
    [v53 enumerateObjectsUsingBlock:v109];
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v56 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      int v57 = -1431655765 * ((*(void *)(a3 + 72) - *(void *)(a3 + 64)) >> 4);
      if (byte_10248BB2F >= 0) {
        __int16 v58 = &qword_10248BB18;
      }
      else {
        __int16 v58 = (uint64_t *)qword_10248BB18;
      }
      int v59 = &qword_10248BD70;
      if (byte_10248BD87 < 0) {
        int v59 = (uint64_t *)qword_10248BD70;
      }
      if (*((char *)a1 + 23) >= 0) {
        __int16 v60 = a1;
      }
      else {
        __int16 v60 = (uint64_t *)*a1;
      }
      *(_DWORD *)uint64_t buf = 67240962;
      *(_DWORD *)int v113 = v57;
      *(_WORD *)&v113[4] = 2082;
      *(void *)&v113[6] = v58;
      *(_WORD *)&v113[14] = 2082;
      *(void *)&v113[16] = v59;
      *(_WORD *)&v113[24] = 2082;
      *(void *)&v113[26] = v60;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "#EED2,#ADR,found %{public}d partners in %{public}s array in %{public}s %{public}s dict", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v61 = -1431655765 * ((*(void *)(a3 + 72) - *(void *)(a3 + 64)) >> 4);
      if (byte_10248BB2F >= 0) {
        __int16 v62 = &qword_10248BB18;
      }
      else {
        __int16 v62 = (uint64_t *)qword_10248BB18;
      }
      __int16 v63 = &qword_10248BD70;
      if (byte_10248BD87 < 0) {
        __int16 v63 = (uint64_t *)qword_10248BD70;
      }
      if (*((char *)a1 + 23) >= 0) {
        __int16 v64 = a1;
      }
      else {
        __int16 v64 = (uint64_t *)*a1;
      }
      int v110 = 67240962;
      *(_DWORD *)uint64_t v111 = v61;
      *(_WORD *)&v111[4] = 2082;
      *(void *)&v111[6] = v62;
      *(_WORD *)&v111[14] = 2082;
      *(void *)&v111[16] = v63;
      *(_WORD *)&v111[24] = 2082;
      *(void *)&v111[26] = v64;
      uint64_t v65 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readPreCachedAdrKeys(const std::string &, const CLNameValuePair &, PreCachedADRSettings &)", "%s\n", v65);
LABEL_319:
      if (v65 != (char *)buf) {
        free(v65);
      }
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v66 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      if (byte_10248BB2F >= 0) {
        int v67 = &qword_10248BB18;
      }
      else {
        int v67 = (uint64_t *)qword_10248BB18;
      }
      if (*((char *)a1 + 23) >= 0) {
        __int16 v68 = a1;
      }
      else {
        __int16 v68 = (uint64_t *)*a1;
      }
      int v69 = &qword_10248BD70;
      if (byte_10248BD87 < 0) {
        int v69 = (uint64_t *)qword_10248BD70;
      }
      *(_DWORD *)uint64_t buf = 136446722;
      *(void *)int v113 = v67;
      *(_WORD *)&v113[8] = 2082;
      *(void *)&v113[10] = v68;
      *(_WORD *)&v113[18] = 2082;
      *(void *)&v113[20] = v69;
      _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "#EED2,#ADR,no %{public}s key in %{public}s %{public}s dict, using default", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      if (byte_10248BB2F >= 0) {
        __int16 v106 = &qword_10248BB18;
      }
      else {
        __int16 v106 = (uint64_t *)qword_10248BB18;
      }
      if (*((char *)a1 + 23) >= 0) {
        double v107 = a1;
      }
      else {
        double v107 = (uint64_t *)*a1;
      }
      int v108 = &qword_10248BD70;
      if (byte_10248BD87 < 0) {
        int v108 = (uint64_t *)qword_10248BD70;
      }
      int v110 = 136446722;
      *(void *)uint64_t v111 = v106;
      *(_WORD *)&v111[8] = 2082;
      *(void *)&v111[10] = v107;
      *(_WORD *)&v111[18] = 2082;
      *(void *)&v111[20] = v108;
      uint64_t v65 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readPreCachedAdrKeys(const std::string &, const CLNameValuePair &, PreCachedADRSettings &)", "%s\n", v65);
      goto LABEL_319;
    }
  }
}

void sub_100A9480C(uint64_t a1, void *a2, int a3)
{
  long long v27 = 0u;
  memset(v26, 0, sizeof(v26));
  if (byte_10248B91F >= 0) {
    id v6 = &qword_10248B908;
  }
  else {
    id v6 = (uint64_t *)qword_10248B908;
  }
  id v7 = [a2 valueForKey:[NSString stringWithUTF8String:v6]];
  if (v7)
  {
    std::string::assign((std::string *)v26, (const std::string::value_type *)[v7 UTF8String]);
    if (byte_10248B937 >= 0) {
      uint64_t v8 = &qword_10248B920;
    }
    else {
      uint64_t v8 = (uint64_t *)qword_10248B920;
    }
    id v9 = [a2 valueForKey:[NSString stringWithUTF8String:v8]];
    if (v9)
    {
      std::string::assign((std::string *)&v26[24], (const std::string::value_type *)[v9 UTF8String]);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      unsigned __int8 v10 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        char v11 = v26;
        if (v26[23] < 0) {
          char v11 = *(unsigned char **)v26;
        }
        *(_DWORD *)uint64_t buf = 67240450;
        *(_DWORD *)unsigned __int8 v33 = a3;
        *(_WORD *)&v33[4] = 2082;
        *(void *)&v33[6] = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#EED2,#ADR,adding partner info,idx,%{public}d,partner,%{public}s", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        unint64_t v24 = v26;
        if (v26[23] < 0) {
          unint64_t v24 = *(unsigned char **)v26;
        }
        int v28 = 67240450;
        *(_DWORD *)char v29 = a3;
        *(_WORD *)&v29[4] = 2082;
        *(void *)&v29[6] = v24;
        uint64_t v25 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEmergencyEED2::readPreCachedAdrKeys(const std::string &, const CLNameValuePair &, PreCachedADRSettings &)_block_invoke", "%s\n", v25);
        if (v25 != (char *)buf) {
          free(v25);
        }
      }
      uint64_t v12 = *(uint64_t **)(a1 + 32);
      unint64_t v13 = v12[9];
      if (v13 >= v12[10])
      {
        uint64_t v14 = sub_100ABDA28(v12 + 8, (long long *)v26);
      }
      else
      {
        sub_10084ED1C(v12 + 80, (void *)v12[9], (long long *)v26);
        uint64_t v14 = v13 + 48;
        v12[9] = v13 + 48;
      }
      v12[9] = v14;
      goto LABEL_54;
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    char v19 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      if (byte_10248B937 >= 0) {
        uint64_t v20 = &qword_10248B920;
      }
      else {
        uint64_t v20 = (uint64_t *)qword_10248B920;
      }
      uint64_t v21 = v26;
      if (v26[23] < 0) {
        uint64_t v21 = *(unsigned char **)v26;
      }
      *(_DWORD *)uint64_t buf = 136446722;
      *(void *)unsigned __int8 v33 = v20;
      *(_WORD *)&uint8_t v33[8] = 1026;
      *(_DWORD *)&v33[10] = a3;
      __int16 v34 = 2082;
      int v35 = v21;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#EED2,#ADR,no %{public}s field in partner info dictionary so skipping,idx,%{public}d,partner,%{public}s", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      if (byte_10248B937 >= 0) {
        uint64_t v22 = &qword_10248B920;
      }
      else {
        uint64_t v22 = (uint64_t *)qword_10248B920;
      }
      uint64_t v23 = v26;
      if (v26[23] < 0) {
        uint64_t v23 = *(unsigned char **)v26;
      }
      int v28 = 136446722;
      *(void *)char v29 = v22;
      *(_WORD *)&v29[8] = 1026;
      *(_DWORD *)&unsigned char v29[10] = a3;
      __int16 v30 = 2082;
      os_log_type_t v31 = v23;
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static void CLEmergencyEED2::readPreCachedAdrKeys(const std::string &, const CLNameValuePair &, PreCachedADRSettings &)_block_invoke", "%s\n", v18);
LABEL_50:
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v15 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      if (byte_10248B91F >= 0) {
        int v16 = &qword_10248B908;
      }
      else {
        int v16 = (uint64_t *)qword_10248B908;
      }
      *(_DWORD *)uint64_t buf = 136446466;
      *(void *)unsigned __int8 v33 = v16;
      *(_WORD *)&uint8_t v33[8] = 1026;
      *(_DWORD *)&v33[10] = a3;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#EED2,#ADR,no %{public}s field in partner info dictionary so skipping,idx,%{public}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      if (byte_10248B91F >= 0) {
        id v17 = &qword_10248B908;
      }
      else {
        id v17 = (uint64_t *)qword_10248B908;
      }
      int v28 = 136446466;
      *(void *)char v29 = v17;
      *(_WORD *)&v29[8] = 1026;
      *(_DWORD *)&unsigned char v29[10] = a3;
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static void CLEmergencyEED2::readPreCachedAdrKeys(const std::string &, const CLNameValuePair &, PreCachedADRSettings &)_block_invoke", "%s\n", v18);
      goto LABEL_50;
    }
  }
LABEL_54:
  if (SHIBYTE(v27) < 0) {
    operator delete(*(void **)&v26[24]);
  }
  if ((v26[23] & 0x80000000) != 0) {
    operator delete(*(void **)v26);
  }
}

void sub_100A94E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100286A7C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100A94E54(uint64_t a1)
{
  return sub_100A802D4(a1 + 1448);
}

uint64_t sub_100A94E5C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 1768);
  if (v3)
  {
    uint64_t v12 = 0;
    uint64_t v4 = sub_1013A401C(v3, &v12);
    if (v4)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v5 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#EED2,getEEDCloakingKey,releasing cloaking key", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 == -1)
        {
LABEL_27:
          char v11 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "NSData *CLEmergencyEED2::getEEDCloakingKey(NSError **)", "%s\n", v11);
          if (v11 != (char *)buf) {
            free(v11);
          }
          return v4;
        }
LABEL_29:
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        goto LABEL_27;
      }
    }
    else
    {
      id v7 = objc_alloc((Class)NSError);
      *a2 = [v7 initWithDomain:@"com.apple.locationd.EED.errorDomain" code:v12 userInfo:0];
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v8 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#EED2,getEEDCloakingKey,no cloaking key available", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 == -1) {
          goto LABEL_27;
        }
        goto LABEL_29;
      }
    }
  }
  else
  {
    *a2 = [objc_alloc((Class)NSError) initWithDomain:@"com.apple.locationd.EED.errorDomain" code:1 userInfo:0];
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v6 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#EED2,getEEDCloakingKey,fAdr is empty", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      LOWORD(v12) = 0;
      unsigned __int8 v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "NSData *CLEmergencyEED2::getEEDCloakingKey(NSError **)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    return 0;
  }
  return v4;
}

uint64_t sub_100A9526C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 1768);
  if (v3)
  {
    uint64_t v12 = 0;
    uint64_t v4 = sub_1013A40C0(v3, &v12);
    if (v4)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v5 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#EED2,getEmergencyContactNames,releasing emergency contact name", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 == -1)
        {
LABEL_27:
          char v11 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "NSArray<NSString *> *CLEmergencyEED2::getEEDEmergencyContactNames(NSError **)", "%s\n", v11);
          if (v11 != (char *)buf) {
            free(v11);
          }
          return v4;
        }
LABEL_29:
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        goto LABEL_27;
      }
    }
    else
    {
      id v7 = objc_alloc((Class)NSError);
      *a2 = [v7 initWithDomain:@"com.apple.locationd.EED.errorDomain" code:v12 userInfo:0];
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v8 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#EED2,getEmergencyContactNames,no emergency contact available", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 == -1) {
          goto LABEL_27;
        }
        goto LABEL_29;
      }
    }
  }
  else
  {
    *a2 = [objc_alloc((Class)NSError) initWithDomain:@"com.apple.locationd.EED.errorDomain" code:1 userInfo:0];
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v6 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#EED2,getEmergencyContactNames,fAdr is empty", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      LOWORD(v12) = 0;
      unsigned __int8 v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "NSArray<NSString *> *CLEmergencyEED2::getEEDEmergencyContactNames(NSError **)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    return 0;
  }
  return v4;
}

void *sub_100A9567C@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 0x18) {
    uint64_t v2 = "EventUnknown";
  }
  else {
    uint64_t v2 = off_1022DBE70[a1];
  }
  return sub_100134750(a2, v2);
}

void *sub_100A956A8@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 4) {
    uint64_t v2 = "StateUnknown";
  }
  else {
    uint64_t v2 = off_1022DBF38[a1];
  }
  return sub_100134750(a2, v2);
}

void *sub_100A956D4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  if (a1) {
    uint64_t v2 = "Companion";
  }
  else {
    uint64_t v2 = "Native";
  }
  return sub_100134750(a2, v2);
}

void sub_100A956F4(uint64_t a1)
{
  uint64_t v2 = a1 + 1448;
  uint64_t v3 = sub_100A80D4C((int *)(a1 + 1448));
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  uint64_t v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v5 = sub_100A800B0(v2);
    int v6 = *(unsigned __int8 *)(a1 + 1452);
    int v7 = *(_DWORD *)v3;
    if (*((char *)v3 + 55) < 0)
    {
      sub_1000DC48C(__dst, (void *)v3[4], v3[5]);
    }
    else
    {
      *(_OWORD *)__uuid_t dst = *((_OWORD *)v3 + 2);
      uint64_t v22 = v3[6];
    }
    if (v22 >= 0) {
      uint64_t v8 = __dst;
    }
    else {
      uint64_t v8 = (void **)__dst[0];
    }
    if (*((char *)v3 + 31) < 0)
    {
      sub_1000DC48C(v19, (void *)v3[1], v3[2]);
    }
    else
    {
      *(_OWORD *)char v19 = *(_OWORD *)(v3 + 1);
      uint64_t v20 = v3[3];
    }
    if (v20 >= 0) {
      id v9 = v19;
    }
    else {
      id v9 = (void **)v19[0];
    }
    if (*((char *)v3 + 87) < 0)
    {
      sub_1000DC48C(v17, (void *)v3[8], v3[9]);
    }
    else
    {
      *(_OWORD *)id v17 = *((_OWORD *)v3 + 4);
      uint64_t v18 = v3[10];
    }
    if (v18 >= 0) {
      unsigned __int8 v10 = v17;
    }
    else {
      unsigned __int8 v10 = (void **)v17[0];
    }
    if (*((char *)v3 + 111) < 0)
    {
      sub_1000DC48C(v15, (void *)v3[11], v3[12]);
    }
    else
    {
      *(_OWORD *)uint64_t v15 = *(_OWORD *)(v3 + 11);
      uint64_t v16 = v3[13];
    }
    if (v16 >= 0) {
      char v11 = v15;
    }
    else {
      char v11 = (void **)v15[0];
    }
    if (*((char *)v3 + 135) < 0)
    {
      sub_1000DC48C(__p, (void *)v3[14], v3[15]);
    }
    else
    {
      *(_OWORD *)std::string __p = *((_OWORD *)v3 + 7);
      uint64_t v14 = v3[16];
    }
    uint64_t v12 = __p;
    if (v14 < 0) {
      uint64_t v12 = (void **)__p[0];
    }
    *(_DWORD *)uint64_t buf = 68291075;
    int v24 = 0;
    __int16 v25 = 2082;
    int v26 = "";
    __int16 v27 = 1026;
    BOOL v28 = v5;
    __int16 v29 = 1026;
    int v30 = v6;
    __int16 v31 = 1026;
    int v32 = v7;
    __int16 v33 = 2082;
    __int16 v34 = v8;
    __int16 v35 = 2082;
    int v36 = v9;
    __int16 v37 = 2081;
    int v38 = v10;
    __int16 v39 = 2081;
    uint64_t v40 = v11;
    __int16 v41 = 2081;
    BOOL v42 = v12;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EED2 logging current settings\", \"enabled\":%{public}d, \"switch state\":%{public}d, \"inst\":%{public}d, \"bundle ID\":%{public, location:escape_only}s, \"bundle version\":%{public, location:escape_only}s, \"LIS URL\":%{private, location:escape_only}s, \"ADR URL\":%{private, location:escape_only}s, \"Control URL\":%{private, location:escape_only}s}", buf, 0x56u);
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v16) < 0) {
      operator delete(v15[0]);
    }
    if (SHIBYTE(v18) < 0) {
      operator delete(v17[0]);
    }
    if (SHIBYTE(v20) < 0) {
      operator delete(v19[0]);
    }
    if (SHIBYTE(v22) < 0) {
      operator delete(__dst[0]);
    }
  }
}

void sub_100A959F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A95A5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (unsigned int *)(a1 + 112);
  if (!sub_100D33CD4(a1 + 112) && sub_100D33CD4(a2))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    BOOL v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = (void *)(a1 + 136);
      if (*(char *)(a1 + 159) < 0) {
        int v6 = (void *)*v6;
      }
      int v7 = *(unsigned __int8 *)(a1 + 1452);
      *(_DWORD *)uint64_t buf = 68289539;
      int v16 = 0;
      __int16 v17 = 2082;
      uint64_t v18 = "";
      __int16 v19 = 2081;
      uint64_t v20 = v6;
      __int16 v21 = 1026;
      int v22 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmgContext #EED2\", \"CompanionNum\":%{private, location:escape_only}s, \"UserToggle\":%{public}d}", buf, 0x22u);
    }
  }
  long long v8 = *(_OWORD *)a2;
  void v4[4] = *(_DWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v4 = v8;
  sub_101483184(a1);
  uint64_t v9 = *(void *)(a1 + 1768);
  if (v9) {
    sub_10139CD44(v9, *(_DWORD *)(a1 + 132));
  }
  uint64_t v10 = *(void *)(a1 + 1904);
  if (v10) {
    sub_101108FA0(v10, *(_DWORD *)(a1 + 132));
  }
  int v11 = sub_1006D40B0(v4);
  if (sub_100A7F7B0((int *)(a1 + 1448), v11))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v12 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      int v16 = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#EED2 active inst changed to %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLEmergencyEED2::handleEmergencyStateChange(CLEmergencyState)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
    sub_100A8CA74(a1 + 1536, 3);
    sub_100A8B154(a1, 1u);
  }
  return sub_100A8CA74(a1 + 1536, 4);
}

id sub_100A95D7C(uint64_t a1, void *a2, int a3, int a4, unsigned int a5)
{
  id result = a2;
  *(void *)(a1 + 1888) = result;
  int v11 = *(_DWORD *)(a1 + 1780);
  int v12 = *(_DWORD *)(a1 + 1440);
  if (v11 != a3 || v12 != a4)
  {
    sub_1014833C0(a1, v12, a4);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v14 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10101A768(*(_DWORD *)(a1 + 1780), v42);
      if (v45 >= 0) {
        uint64_t v15 = v42;
      }
      else {
        uint64_t v15 = *(unsigned char **)v42;
      }
      sub_10101A768(a3, v30);
      int v16 = a5;
      if (v31 >= 0) {
        __int16 v17 = v30;
      }
      else {
        __int16 v17 = (void **)v30[0];
      }
      sub_10101A58C(*(_DWORD *)(a1 + 1440), v28);
      int v18 = v29;
      __int16 v19 = (void **)v28[0];
      sub_10101A58C(a4, __p);
      uint64_t v20 = v28;
      if (v18 < 0) {
        uint64_t v20 = v19;
      }
      __int16 v21 = __p;
      if (v27 < 0) {
        __int16 v21 = (void **)__p[0];
      }
      *(_DWORD *)uint64_t buf = 68290306;
      *(_DWORD *)__int16 v33 = 0;
      *(_WORD *)&v33[4] = 2082;
      *(void *)&v33[6] = "";
      *(_WORD *)&unsigned char v33[14] = 2082;
      *(void *)&v33[16] = v15;
      __int16 v34 = 2082;
      __int16 v35 = v17;
      __int16 v36 = 2082;
      __int16 v37 = v20;
      __int16 v38 = 2082;
      __int16 v39 = v21;
      __int16 v40 = 1026;
      a5 = v16;
      int v41 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EED2 emergency call status change\", \"old trigger\":%{public, location:escape_only}s, \"new trigger\":%{public, location:escape_only}s, \"old call status\":%{public, location:escape_only}s, \"new call status\":%{public, location:escape_only}s, \"endpointOnCurrentDevice\":%{public}hhd}", buf, 0x40u);
      if (v27 < 0) {
        operator delete(__p[0]);
      }
      if (v29 < 0) {
        operator delete(v28[0]);
      }
      if (v31 < 0) {
        operator delete(v30[0]);
      }
      if (v45 < 0) {
        operator delete(*(void **)v42);
      }
    }
    *(_DWORD *)(a1 + 1780) = a3;
    *(_DWORD *)(a1 + 1440) = a4;
    id result = (id)sub_100A8CA74(a1 + 1536, 5);
    if (*(unsigned __int8 *)(a1 + 1880) != a5)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v22 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v23 = *(unsigned __int8 *)(a1 + 1880);
        *(_DWORD *)uint64_t buf = 134349312;
        *(void *)__int16 v33 = v23;
        *(_WORD *)&uint8_t v33[8] = 2050;
        *(void *)&v33[10] = a5;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#EED2 callEndpointOnCurrentDevice changed from %{public}ld to %{public}ld", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        uint64_t v24 = *(unsigned __int8 *)(a1 + 1880);
        *(_DWORD *)BOOL v42 = 134349312;
        *(void *)&unsigned __int8 v42[4] = v24;
        __int16 v43 = 2050;
        uint64_t v44 = a5;
        __int16 v25 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLEmergencyEED2::handleEmergencyCallStatusChange(NSString *, EmergencyTriggerType, CallStatus, BOOL)", "%s\n", v25);
        if (v25 != (char *)buf) {
          free(v25);
        }
      }
      *(unsigned char *)(a1 + 1880) = a5;
      id result = (id)sub_100A8CA74(a1 + 1536, 20);
    }
    if (v11 != a3 && (*(_DWORD *)(a1 + 1440) - 2) <= 3)
    {
      if (*(unsigned char *)(a1 + 1453)) {
        return (id)sub_100A8CA74(a1 + 1536, 9);
      }
    }
  }
  return result;
}

void sub_100A96180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (*(char *)(v26 - 105) < 0) {
    operator delete(*(void **)(v26 - 128));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100A961D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 1448;
  uint64_t v5 = sub_100A7F364(a1 + 1448, a2);
  int v6 = sub_100A7FC24(v4, *(_DWORD *)a2, (unsigned __int8 *)(a2 + 1008), (unsigned __int8 *)(a2 + 1036));
  if (sub_100A7FE6C(v4, a2))
  {
    uint64_t v7 = *(void *)(a1 + 1768);
    if (v7) {
      sub_10139B7CC(v7);
    }
  }
  if (v5)
  {
    sub_100A8CA74(a1 + 1536, 3);
LABEL_7:
    sub_100A8B154(a1, 1u);
    return v5;
  }
  if (v6) {
    goto LABEL_7;
  }
  return v5;
}

uint64_t sub_100A96274(uint64_t a1)
{
  return sub_100A8CA74(a1 + 1536, 6);
}

uint64_t sub_100A96280(uint64_t a1, int a2)
{
  int v5 = a2;
  int v6 = &v5;
  *((unsigned char *)sub_10097F690(a1 + 1792, &v5, (uint64_t)&unk_101D0B290, &v6) + 20) = 1;
  uint64_t v3 = *(void *)(a1 + 1768);
  if (v3) {
    sub_10139C548(v3, v5);
  }
  return sub_100A8CA74(a1 + 1536, 19);
}

std::string *sub_100A962F4(uint64_t a1, const std::string *a2)
{
  sub_101482960(a1, a2);
  uint64_t v4 = *(std::string **)(a1 + 1768);
  if (v4) {
    sub_10139C734(v4, a2);
  }
  id result = *(std::string **)(a1 + 1904);
  if (result)
  {
    return sub_1011091C4(result, a2);
  }
  return result;
}

uint64_t sub_100A96354(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 1768);
  if (result)
  {
    uint64_t result = sub_10139C910(result, a2);
    if (result)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v4 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2 handleBatteryStatusChange,change in battery bin", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        int v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLEmergencyEED2::handleBatteryStatusChange(const Battery &)", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
      }
      return sub_100A8CA74(a1 + 1536, 9);
    }
  }
  return result;
}

id sub_100A96504(uint64_t a1, uint64_t a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  uint64_t v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 134349056;
    uint64_t v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2 handleReachability,%{public}ld", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLEmergencyEED2::handleReachability(const CLDaemonStatus_Type::Reachability)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  *(_DWORD *)(a1 + 2008) = a2;
  if (!*(unsigned char *)(a1 + 2012)) {
    *(unsigned char *)(a1 + 2012) = 1;
  }
  id result = *(id *)(a1 + 1984);
  if (result) {
    return [result handleReachability:a2];
  }
  return result;
}

void sub_100A966E0(uint64_t a1, void *a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  uint64_t v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a2[3];
    *(_DWORD *)uint64_t buf = 134349056;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2 handleVlqmForActiveCall,%{public}ld", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v8 = a2[3];
    int v12 = 134349056;
    uint64_t v13 = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLEmergencyEED2::handleVlqmForActiveCall(std::unordered_map<SimInstance, int32_t> &)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  if (!*(unsigned char *)(a1 + 2004)) {
    *(unsigned char *)(a1 + 2004) = 1;
  }
  int v11 = *(_DWORD *)(a1 + 1448);
  if (sub_10011853C(a2, &v11))
  {
    *(void *)uint64_t buf = &v11;
    *(_DWORD *)(a1 + 2000) = *((_DWORD *)sub_1000F3C48((uint64_t)a2, &v11, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 5);
    int v6 = *(void **)(a1 + 1984);
    if (v6) {
      [v6 handleVlqmForActiveCall];
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v7 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)&uint8_t buf[4] = v11;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#EED2 handleVlqmForActiveCall, No vLqm data for simInstance:%{public}ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v12 = 134349056;
      uint64_t v13 = v11;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLEmergencyEED2::handleVlqmForActiveCall(std::unordered_map<SimInstance, int32_t> &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

uint64_t sub_100A96A4C(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_100A96AA0(uint64_t a1, int a2)
{
  uint64_t result = *(void *)(a1 + 1768);
  if (result) {
    return sub_10139CB58(result, a2);
  }
  return result;
}

void sub_100A96AB0(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 == 14)
  {
    sub_100A8C1B0(a1);
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v4 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      int v5 = *a3;
      *(_DWORD *)uint64_t buf = 67240192;
      int v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#EED2 received unexpected notification %{public}d from SOS provider", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::onSosProviderNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

uint64_t sub_100A96CB0(uint64_t a1, int a2)
{
  return sub_100A96CB8(*(unsigned char **)(a1 + 32), a2);
}

uint64_t sub_100A96CB8(unsigned char *a1, int a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  int v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2 checking SOS/EED2 UI toggle", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::processSosToggleState(CLClientRegistrationResult)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  BOOL v5 = a1[1452] != 0;
  switch(a2)
  {
    case 0:
    case 1:
    case 8:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v8 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#EED2 SOS/EED2 UI toggle enabled", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::processSosToggleState(CLClientRegistrationResult)", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      BOOL v5 = 1;
      break;
    case 2:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v9 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#EED2 SOS/EED2 UI toggle disabled", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        int v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::processSosToggleState(CLClientRegistrationResult)", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      BOOL v5 = 0;
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v6 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 67240192;
        int v18 = a2;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#EED2 SOS/EED2 UI toggle status unexpected value,%{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        uint64_t v7 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::processSosToggleState(CLClientRegistrationResult)", "%s\n");
        goto LABEL_59;
      }
      break;
    case 4:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v10 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 67240192;
        int v18 = 4;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 SOS/EED2 UI toggle status could not be determined,%{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        uint64_t v7 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::processSosToggleState(CLClientRegistrationResult)", "%s\n");
LABEL_59:
        if (v7 != buf) {
          free(v7);
        }
      }
      break;
    default:
      break;
  }
  if (sub_100A7F5B8((uint64_t)(a1 + 1448), v5))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v11 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#EED2 SOS/EED2 UI toggle state changed", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::processSosToggleState(CLClientRegistrationResult)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    (*(void (**)(unsigned char *))(*(void *)a1 + 24))(a1);
    sub_100A8CA74((uint64_t)(a1 + 1536), 3);
    sub_100A8B154((uint64_t)a1, 1u);
  }
  return sub_100A8CA74((uint64_t)(a1 + 1536), 2);
}

BOOL sub_100A97510(unsigned char *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 1792);
  int v13 = 0;
  *(void *)uint64_t buf = &v13;
  BOOL v3 = *((unsigned char *)sub_10097F690((uint64_t)(a1 + 1792), &v13, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 20)
    && a1[1832]
    && a1[1833]
    && a1[1834]
    && a1[1835] != 0;
  if (sub_1000FFBA8() && v3)
  {
    int v13 = 1;
    *(void *)uint64_t buf = &v13;
    BOOL v3 = *((unsigned char *)sub_10097F690(v2, &v13, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 20) != 0;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  int v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 0;
    *(void *)uint64_t buf = &v13;
    int v5 = *((unsigned __int8 *)sub_10097F690(v2, &v13, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 20);
    int v12 = 1;
    *(void *)uint64_t buf = &v12;
    int v6 = *((unsigned __int8 *)sub_10097F690(v2, &v12, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 20);
    int v7 = a1[1832];
    int v8 = a1[1833];
    int v9 = a1[1834];
    int v10 = a1[1835];
    *(_DWORD *)uint64_t buf = 68290818;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v15 = 2082;
    int v16 = "";
    __int16 v17 = 1026;
    BOOL v18 = v3;
    __int16 v19 = 1026;
    int v20 = v5;
    __int16 v21 = 1026;
    int v22 = v6;
    __int16 v23 = 1026;
    int v24 = v7;
    __int16 v25 = 1026;
    int v26 = v8;
    __int16 v27 = 1026;
    int v28 = v9;
    __int16 v29 = 1026;
    int v30 = v10;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EED2,requiredInitializationDataReceived\", \"initialized\":%{public}hhd, \"fPhoneNumbersReceived[SimInstance::kSim1]\":%{public}hhd, \"fPhoneNumbersReceived[SimInstance::kSim2]\":%{public}hhd, \"fSosToggleStateReceived\":%{public}hhd, \"fConfigChangeReceived\":%{public}hhd, \"fEmergencyStateChangeReceived\":%{public}hhd, \"fDebounceTimerTimedout\":%{public}hhd}", buf, 0x3Cu);
  }
  return v3;
}

void sub_100A97754(uint64_t a1, signed int a2, double a3)
{
  unsigned int v41 = a2;
  int v4 = *(NSObject **)(a1 + 80);
  if (!v4)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DBB20);
    }
    int v32 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      __int16 v33 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        __int16 v33 = (void *)*v33;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      *(void *)&uint8_t buf[4] = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%sInvoking timers without callback queue set", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DBB20);
      }
      __int16 v37 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        __int16 v37 = (void *)*v37;
      }
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v37;
      __int16 v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLStateMachine<CLEmergencyEED2>::setTimeoutEvent(Event, double) [T = CLEmergencyEED2]", "%s\n", v38);
      if (v38 != buf) {
        free(v38);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DBB20);
    }
    __int16 v34 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&unsigned char buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DBB20);
      }
    }
    __int16 v35 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&unsigned char buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v35, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DBB20);
      }
    }
    __int16 v36 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&unsigned char buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  if (a3 < 0.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DBB20);
    }
    int v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      int v8 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v8 = (void *)*v8;
      }
      sub_100A9567C(a2, __p);
      if (v49 >= 0) {
        int v9 = __p;
      }
      else {
        int v9 = *(unsigned char **)__p;
      }
      *(_DWORD *)uint64_t buf = 136315650;
      *(void *)&uint8_t buf[4] = v8;
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v9;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&uint8_t buf[24] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", buf, 0x20u);
      if (SHIBYTE(v49) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DBB20);
      }
      int v10 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v10 = (void *)*v10;
      }
      sub_100A9567C(a2, v42);
      if (v45 >= 0) {
        int v11 = v42;
      }
      else {
        int v11 = *(unsigned char **)v42;
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = v10;
      __int16 v47 = 2082;
      uint64_t v48 = v11;
      __int16 v49 = 2050;
      double v50 = a3;
      int v12 = (char *)_os_log_send_and_compose_impl();
      if (v45 < 0) {
        operator delete(*(void **)v42);
      }
LABEL_79:
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLStateMachine<CLEmergencyEED2>::setTimeoutEvent(Event, double) [T = CLEmergencyEED2]", "%s\n", v12);
LABEL_80:
      if (v12 != buf) {
        free(v12);
      }
      return;
    }
    return;
  }
  uint64_t v13 = *(void *)(a1 + 64);
  if (v13)
  {
    uint64_t v14 = a1 + 64;
    do
    {
      signed int v15 = *(_DWORD *)(v13 + 32);
      BOOL v16 = v15 < a2;
      if (v15 >= a2) {
        __int16 v17 = (uint64_t *)v13;
      }
      else {
        __int16 v17 = (uint64_t *)(v13 + 8);
      }
      if (!v16) {
        uint64_t v14 = v13;
      }
      uint64_t v13 = *v17;
    }
    while (*v17);
    if (v14 != a1 + 64 && *(_DWORD *)(v14 + 32) <= a2)
    {
      BOOL v18 = *(NSObject **)(v14 + 40);
      if (v18)
      {
LABEL_37:
        dispatch_time_t v20 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
        dispatch_source_set_timer(v18, v20, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022DBB20);
        }
        __int16 v21 = qword_1024193D8;
        os_log_type_t v22 = *(unsigned char *)(a1 + 120);
        if (os_log_type_enabled((os_log_t)qword_1024193D8, v22))
        {
          __int16 v23 = (void *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0) {
            __int16 v23 = (void *)*v23;
          }
          sub_100A9567C(v41, __p);
          if (v49 >= 0) {
            int v24 = __p;
          }
          else {
            int v24 = *(unsigned char **)__p;
          }
          *(_DWORD *)uint64_t buf = 136315650;
          *(void *)&uint8_t buf[4] = v23;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v24;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&uint8_t buf[24] = a3;
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "%sevent,%s,timeout,%.2f", buf, 0x20u);
          if (SHIBYTE(v49) < 0) {
            operator delete(*(void **)__p);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022DBB20);
          }
          __int16 v25 = (void *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0) {
            __int16 v25 = (void *)*v25;
          }
          sub_100A9567C(v41, v42);
          if (v45 >= 0) {
            int v26 = v42;
          }
          else {
            int v26 = *(unsigned char **)v42;
          }
          *(_DWORD *)std::string __p = 136315650;
          *(void *)&__p[4] = v25;
          __int16 v47 = 2080;
          uint64_t v48 = v26;
          __int16 v49 = 2048;
          double v50 = a3;
          int v12 = (char *)_os_log_send_and_compose_impl();
          if (v45 < 0) {
            operator delete(*(void **)v42);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLEmergencyEED2>::setTimeoutEvent(Event, double) [T = CLEmergencyEED2]", "%s\n", v12);
          goto LABEL_80;
        }
        return;
      }
    }
  }
  __int16 v19 = (uint64_t *)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v4);
  if (v19)
  {
    BOOL v18 = v19;
    *(void *)uint64_t buf = &v41;
    sub_1000FEE0C((uint64_t **)(a1 + 56), (int *)&v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[5] = v19;
    dispatch_source_set_timer(v18, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_100ABDCA0;
    handler[3] = &unk_1022B2410;
    handler[4] = a1;
    unsigned int v40 = v41;
    dispatch_source_set_event_handler(v18, handler);
    dispatch_resume(v18);
    goto LABEL_37;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022DBB20);
  }
  __int16 v27 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    int v28 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      int v28 = (void *)*v28;
    }
    sub_100A9567C(a2, buf);
    if (buf[23] >= 0) {
      __int16 v29 = buf;
    }
    else {
      __int16 v29 = *(unsigned char **)buf;
    }
    *(_DWORD *)std::string __p = 136315394;
    *(void *)&__p[4] = v28;
    __int16 v47 = 2082;
    uint64_t v48 = v29;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "%scannot create timer, event, %{public}s", __p, 0x16u);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DBB20);
    }
    int v30 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      int v30 = (void *)*v30;
    }
    sub_100A9567C(a2, __p);
    if (v49 >= 0) {
      char v31 = __p;
    }
    else {
      char v31 = *(unsigned char **)__p;
    }
    *(_DWORD *)BOOL v42 = 136315394;
    *(void *)&unsigned __int8 v42[4] = v30;
    __int16 v43 = 2082;
    uint64_t v44 = v31;
    int v12 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v49) < 0) {
      operator delete(*(void **)__p);
    }
    goto LABEL_79;
  }
}

void sub_100A98240(uint64_t a1, signed int a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (!v4) {
    goto LABEL_33;
  }
  uint64_t v5 = a1 + 64;
  do
  {
    signed int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 < a2;
    if (v6 >= a2) {
      int v8 = (uint64_t *)v4;
    }
    else {
      int v8 = (uint64_t *)(v4 + 8);
    }
    if (!v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 64 && *(_DWORD *)(v5 + 32) <= a2 && (int v9 = *(NSObject **)(v5 + 40)) != 0)
  {
    dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DBB20);
    }
    int v10 = qword_1024193D8;
    os_log_type_t v11 = *(unsigned char *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1024193D8, v11))
    {
      int v12 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v12 = (void *)*v12;
      }
      sub_100A9567C(a2, __p);
      if (v31 >= 0) {
        uint64_t v13 = __p;
      }
      else {
        uint64_t v13 = (void **)__p[0];
      }
      *(_DWORD *)uint64_t buf = 136315394;
      *(void *)&uint8_t buf[4] = v12;
      __int16 v23 = 2080;
      int v24 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%scancel timer,event,%s", buf, 0x16u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DBB20);
      }
      uint64_t v14 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v14 = (void *)*v14;
      }
      sub_100A9567C(a2, buf);
      if (v25 >= 0) {
        signed int v15 = buf;
      }
      else {
        signed int v15 = *(unsigned char **)buf;
      }
      int v26 = 136315394;
      __int16 v27 = v14;
      __int16 v28 = 2080;
      __int16 v29 = v15;
      BOOL v16 = (char *)_os_log_send_and_compose_impl();
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
LABEL_54:
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLEmergencyEED2>::cancelTimeoutEvent(Event) [T = CLEmergencyEED2]", "%s\n", v16);
      if (v16 != (char *)__p) {
        free(v16);
      }
    }
  }
  else
  {
LABEL_33:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022DBB20);
    }
    __int16 v17 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v18 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        BOOL v18 = (void *)*v18;
      }
      sub_100A9567C(a2, __p);
      if (v31 >= 0) {
        __int16 v19 = __p;
      }
      else {
        __int16 v19 = (void **)__p[0];
      }
      *(_DWORD *)uint64_t buf = 136315394;
      *(void *)&uint8_t buf[4] = v18;
      __int16 v23 = 2080;
      int v24 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning,%s,cancel timer,notFound, event,%s", buf, 0x16u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022DBB20);
      }
      dispatch_time_t v20 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        dispatch_time_t v20 = (void *)*v20;
      }
      sub_100A9567C(a2, buf);
      if (v25 >= 0) {
        __int16 v21 = buf;
      }
      else {
        __int16 v21 = *(unsigned char **)buf;
      }
      int v26 = 136315394;
      __int16 v27 = v20;
      __int16 v28 = 2080;
      __int16 v29 = v21;
      BOOL v16 = (char *)_os_log_send_and_compose_impl();
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_54;
    }
  }
}

CLEEDHelperService *sub_100A986D4(uint64_t a1)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100AB4CB4;
  void v9[3] = &unk_1022DB890;
  v9[4] = a1;
  unsigned __int8 v7[4] = a1;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_100AB4FD8;
  void v8[3] = &unk_1022DB8B0;
  v8[4] = a1;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100AB51A8;
  void v7[3] = &unk_1022DB8D0;
  void v5[4] = a1;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_100AB5378;
  void v6[3] = &unk_1022DB8F0;
  void v6[4] = a1;
  void v4[4] = a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _OWORD v5[2] = sub_100AB56F0;
  v5[3] = &unk_1022DB910;
  void v3[4] = a1;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_100AB67E8;
  unsigned __int8 v4[3] = &unk_1022DB930;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  _DWORD v3[2] = sub_100AB76C0;
  unsigned __int8 v3[3] = &unk_1022DB950;
  uint64_t result = [[CLEEDHelperService alloc] initWithUniverse:*(void *)(a1 + 8) pendingRequestsCB:v9 streamingRequestCB:v8 uploadRequestCB:v7 streamingEndCB:v6 uploadListCB:v5 handleResponseCB:v4 mitigationsCB:v3];
  *(void *)(a1 + 1872) = result;
  return result;
}

uint64_t sub_100A988EC(uint64_t a1)
{
  if (!sub_100A800B0(a1 + 1448)) {
    return 1;
  }
  if (!sub_100D33CA4(a1 + 112) && (sub_100D33CE4(a1 + 112) || *(unsigned char *)(a1 + 160) && sub_100D33CD4(a1 + 112)))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v4 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2,expectedState,State::ActiveSession", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::expectedState()", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    return 3;
  }
  if (!sub_100D33CA4(a1 + 112) && sub_100D33CF4(a1 + 112) && !sub_100D33CE4(a1 + 112))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    BOOL v7 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#EED2,expectedState,State::ExtendedSession due to fEmergencyState in EEM", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 4;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 == -1) {
      goto LABEL_37;
    }
    goto LABEL_48;
  }
  if (*(unsigned char *)(a1 + 184))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v2 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2,expectedState,State::ExtendedSession due to fAssertingSession", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 4;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 == -1)
    {
LABEL_37:
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::expectedState()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
      return 4;
    }
LABEL_48:
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    goto LABEL_37;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  uint64_t v5 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#EED2,expectedState, State::Idle", buf, 2u);
  }
  uint64_t v3 = 2;
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLEmergencyEED2::State CLEmergencyEED2::expectedState()", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
    return 2;
  }
  return v3;
}

BOOL sub_100A98E2C(uint64_t a1)
{
  if (!*(void *)(a1 + 2088)) {
    operator new();
  }
  int v108 = 0;
  uint64_t v2 = sub_1000A6958();
  if ((sub_1004D01D8(v2, @"EEDCacheData", (CFTypeRef *)&v108) & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    BOOL v7 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#EED2,readEEDDataFromCache,EED data not cached. Early Return", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 == -1) {
      goto LABEL_203;
    }
    goto LABEL_206;
  }
  double v3 = sub_100A9BD18(*(void *)(a1 + 2088));
  *(unsigned char *)(*(void *)(a1 + 2088) + 41) = 1;
  __int16 v98 = v108;
  if (byte_10247FB4F >= 0) {
    uint64_t v4 = &qword_10247FB38;
  }
  else {
    uint64_t v4 = (uint64_t *)qword_10247FB38;
  }
  if (objc_msgSend(objc_msgSend(v108, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4, v3)), "intValue") != 4|| sub_100A988EC(a1) != 3)
  {
    if (byte_10247FB1F >= 0) {
      int v8 = &qword_10247FB08;
    }
    else {
      int v8 = (uint64_t *)qword_10247FB08;
    }
    [objc_msgSend(v98, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8)) doubleValue];
    *(double *)(a1 + 168) = v9;
    if (v9 <= 0.0)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      __int16 v19 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#EED2,readEEDDataFromCache,fSessionStartTime unavailable, Early Return", buf, 2u);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_203;
      }
    }
    else
    {
      if (byte_10247FB37 >= 0) {
        int v10 = &qword_10247FB20;
      }
      else {
        int v10 = (uint64_t *)qword_10247FB20;
      }
      [objc_msgSend(v98, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v10)) doubleValue];
      *(void *)(a1 + 1896) = v11;
      int v12 = *(void **)(a1 + 1944);
      if (v12) {

      }
      if (byte_10247FB67 >= 0) {
        uint64_t v13 = &qword_10247FB50;
      }
      else {
        uint64_t v13 = (uint64_t *)qword_10247FB50;
      }
      id v14 = [v98 valueForKey:[+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13)]];
      *(void *)(a1 + 1944) = v14;
      if (v14)
      {
        signed int v15 = *(const void **)(a1 + 1952);
        if (v15)
        {
          CFRelease(v15);
          *(void *)(a1 + 1952) = 0;
        }
        if (byte_10247FB7F >= 0) {
          BOOL v16 = &qword_10247FB68;
        }
        else {
          BOOL v16 = (uint64_t *)qword_10247FB68;
        }
        id v17 = [v98 valueForKey:[NSString stringWithUTF8String:v16]];
        if (v17)
        {
          id v18 = +[CLEEDCryptoUtilities createKeyFromExternalRepresentationString:v17 keyClass:kSecAttrKeyClassPrivate];
          *(void *)(a1 + 1952) = v18;
        }
        else
        {
          id v18 = *(id *)(a1 + 1952);
        }
        if (v18)
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          __int16 v21 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
          {
            os_log_type_t v22 = *(void **)(a1 + 168);
            __int16 v23 = *(void **)(a1 + 1896);
            uint64_t v24 = *(void *)(a1 + 1944);
            uint64_t v25 = *(void *)(a1 + 1952);
            *(_DWORD *)uint64_t buf = 134349827;
            id v120 = v22;
            __int16 v121 = 2050;
            id v122 = v23;
            __int16 v123 = 2113;
            uint64_t v124 = v24;
            __int16 v125 = 2113;
            uint64_t v126 = v25;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#EED2,readEEDDataFromCache,fetched fSessionStartTime:%{public}f, fCallEndTime:%{public}f, fRootSecret:%{private}@, fDeviceSessionPrivateKey:%{private}@", buf, 0x2Au);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_1022DBA80);
            }
            uint64_t v80 = *(void **)(a1 + 168);
            int v81 = *(void **)(a1 + 1896);
            uint64_t v82 = *(void *)(a1 + 1944);
            uint64_t v83 = *(void *)(a1 + 1952);
            int v111 = 134349827;
            id v112 = v80;
            __int16 v113 = 2050;
            id v114 = v81;
            __int16 v115 = 2113;
            uint64_t v116 = v82;
            __int16 v117 = 2113;
            uint64_t v118 = v83;
            char v84 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::readEEDDataFromCache()", "%s\n", v84);
            if (v84 != (char *)buf) {
              free(v84);
            }
          }
          int v26 = *(void **)(a1 + 1928);
          if (v26)
          {

            *(void *)(a1 + 1928) = 0;
          }
          if (byte_10247FB97 >= 0) {
            __int16 v27 = &qword_10247FB80;
          }
          else {
            __int16 v27 = (uint64_t *)qword_10247FB80;
          }
          id v28 = [v98 valueForKey:[NSString stringWithUTF8String:v27]];
          if (v28)
          {
            uint64_t v107 = 0;
            *(void *)(a1 + 1928) = +[CLEEDRequest createRequestFromCachedDict:v28 error:&v107];
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_1022DBA80);
            }
            __int16 v29 = qword_1024193E8;
            if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
            {
              id v30 = [*(id *)(a1 + 1928) ID];
              char v31 = *(void **)(a1 + 1928);
              *(_DWORD *)uint64_t buf = 138543875;
              id v120 = v30;
              __int16 v121 = 2113;
              id v122 = v31;
              __int16 v123 = 2050;
              uint64_t v124 = v107;
              _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#EED2,readEEDDataFromCache,fetched requestID:%{public}@, fCurrentStreamingRequest from cache:%{private}@, error:%{public}ld", buf, 0x20u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193E0 != -1) {
                dispatch_once(&qword_1024193E0, &stru_1022DBA80);
              }
              id v89 = [*(id *)(a1 + 1928) ID];
              int v90 = *(void **)(a1 + 1928);
              int v111 = 138543875;
              id v112 = v89;
              __int16 v113 = 2113;
              id v114 = v90;
              __int16 v115 = 2050;
              uint64_t v116 = v107;
              float v91 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::readEEDDataFromCache()", "%s\n", v91);
              if (v91 != (char *)buf) {
                free(v91);
              }
            }
          }
          int v32 = *(void **)(a1 + 1936);
          if (v32)
          {

            *(void *)(a1 + 1936) = 0;
          }
          if (byte_10247FBAF >= 0) {
            __int16 v33 = &qword_10247FB98;
          }
          else {
            __int16 v33 = (uint64_t *)qword_10247FB98;
          }
          id v34 = [v98 valueForKey:[NSString stringWithUTF8String:v33]];
          if (v34)
          {
            uint64_t v107 = 0;
            *(void *)(a1 + 1936) = +[CLEEDRequest createRequestFromCachedDict:v34 error:&v107];
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_1022DBA80);
            }
            __int16 v35 = qword_1024193E8;
            if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
            {
              id v36 = [*(id *)(a1 + 1936) ID];
              __int16 v37 = *(void **)(a1 + 1936);
              *(_DWORD *)uint64_t buf = 138543875;
              id v120 = v36;
              __int16 v121 = 2113;
              id v122 = v37;
              __int16 v123 = 2050;
              uint64_t v124 = v107;
              _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#EED2,readEEDDataFromCache,fetched requestID:%{public}@, fCurrentUploadRequest from cache:%{private}@, error:%{public}ld", buf, 0x20u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193E0 != -1) {
                dispatch_once(&qword_1024193E0, &stru_1022DBA80);
              }
              id v92 = [*(id *)(a1 + 1936) ID];
              unint64_t v93 = *(void **)(a1 + 1936);
              int v111 = 138543875;
              id v112 = v92;
              __int16 v113 = 2113;
              id v114 = v93;
              __int16 v115 = 2050;
              uint64_t v116 = v107;
              __int16 v94 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::readEEDDataFromCache()", "%s\n", v94);
              if (v94 != (char *)buf) {
                free(v94);
              }
            }
          }
          __int16 v38 = *(void **)(a1 + 1912);
          if (v38) {

          }
          *(void *)(a1 + 1912) = objc_alloc_init((Class)NSMutableArray);
          if (byte_10247FBDF >= 0) {
            __int16 v39 = &qword_10247FBC8;
          }
          else {
            __int16 v39 = (uint64_t *)qword_10247FBC8;
          }
          id v40 = [v98 valueForKey:[NSString stringWithUTF8String:v39]];
          long long v105 = 0u;
          long long v106 = 0u;
          long long v103 = 0u;
          long long v104 = 0u;
          id v41 = [v40 countByEnumeratingWithState:&v103 objects:v110 count:16];
          if (v41)
          {
            uint64_t v42 = *(void *)v104;
            do
            {
              __int16 v43 = 0;
              do
              {
                if (*(void *)v104 != v42) {
                  objc_enumerationMutation(v40);
                }
                uint64_t v44 = *(void *)(*((void *)&v103 + 1) + 8 * (void)v43);
                uint64_t v107 = 0;
                id v45 = +[CLEEDRequest createRequestFromCachedDict:v44 error:&v107];
                if (v45)
                {
                  [*(id *)(a1 + 1912) addObject:v45];
                  if (qword_1024193E0 != -1) {
                    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
                  }
                  __int16 v46 = qword_1024193E8;
                  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
                  {
                    id v47 = [v45 ID];
                    id v48 = [v45 type];
                    *(_DWORD *)uint64_t buf = 138543618;
                    id v120 = v47;
                    __int16 v121 = 2050;
                    id v122 = v48;
                    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "#EED2,readEEDDataFromCache,fetched requestID:%{public}@, \"pending request\" with requestType:%{public}ld, from cache", buf, 0x16u);
                  }
                  if (sub_10013D1A0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1024193E0 != -1) {
                      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
                    }
                    id v49 = [v45 ID];
                    id v50 = [v45 type];
                    int v111 = 138543618;
                    id v112 = v49;
                    __int16 v113 = 2050;
                    id v114 = v50;
                    uint64_t v51 = (char *)_os_log_send_and_compose_impl();
                    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::readEEDDataFromCache()", "%s\n", v51);
LABEL_115:
                    if (v51 != (char *)buf) {
                      free(v51);
                    }
                  }
                }
                else
                {
                  if (qword_1024193E0 != -1) {
                    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
                  }
                  uint64_t v52 = qword_1024193E8;
                  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
                  {
                    *(_WORD *)uint64_t buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "#EED2,readEEDDataFromCache,requestsPendingArray, prendingRequest creation failed. This should not happen", buf, 2u);
                  }
                  if (sub_10013D1A0(115, 0))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1024193E0 != -1) {
                      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
                    }
                    LOWORD(v111) = 0;
                    uint64_t v51 = (char *)_os_log_send_and_compose_impl();
                    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::readEEDDataFromCache()", "%s\n", v51);
                    goto LABEL_115;
                  }
                }
                __int16 v43 = (char *)v43 + 1;
              }
              while (v41 != v43);
              id v53 = [v40 countByEnumeratingWithState:&v103 objects:v110 count:16];
              id v41 = v53;
            }
            while (v53);
          }
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          __int16 v54 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
          {
            id v55 = [*(id *)(a1 + 1912) count];
            *(_DWORD *)uint64_t buf = 134349056;
            id v120 = v55;
            _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "#EED2,readEEDDataFromCache,fetched %{public}lu \"pending requests\" from cache", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_1022DBA80);
            }
            id v85 = [*(id *)(a1 + 1912) count];
            int v111 = 134349056;
            id v112 = v85;
            uint64_t v86 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::readEEDDataFromCache()", "%s\n", v86);
            if (v86 != (char *)buf) {
              free(v86);
            }
          }
          id v56 = *(void **)(a1 + 1920);
          if (v56) {

          }
          *(void *)(a1 + 1920) = objc_alloc_init((Class)NSMutableArray);
          if (byte_10247FBF7 >= 0) {
            int v57 = &qword_10247FBE0;
          }
          else {
            int v57 = (uint64_t *)qword_10247FBE0;
          }
          id v58 = [v98 valueForKey:[NSString stringWithUTF8String:v57]];
          long long v101 = 0u;
          long long v102 = 0u;
          long long v99 = 0u;
          long long v100 = 0u;
          id v59 = [v58 countByEnumeratingWithState:&v99 objects:v109 count:16];
          if (!v59)
          {
LABEL_155:
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_1022DBA80);
            }
            __int16 v72 = qword_1024193E8;
            if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
            {
              id v73 = [*(id *)(a1 + 1920) count];
              *(_DWORD *)uint64_t buf = 134349056;
              id v120 = v73;
              _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "#EED2,readEEDDataFromCache,fetched %{public}lu \"handled requests\" from cache", buf, 0xCu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193E0 != -1) {
                dispatch_once(&qword_1024193E0, &stru_1022DBA80);
              }
              id v87 = [*(id *)(a1 + 1920) count];
              int v111 = 134349056;
              id v112 = v87;
              __int16 v88 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::readEEDDataFromCache()", "%s\n", v88);
              if (v88 != (char *)buf) {
                free(v88);
              }
            }
            __int16 v74 = *(void **)(a1 + 1992);
            if (v74)
            {

              *(void *)(a1 + 1992) = 0;
            }
            if (byte_10247FBC7 >= 0) {
              uint64_t v75 = &qword_10247FBB0;
            }
            else {
              uint64_t v75 = (uint64_t *)qword_10247FBB0;
            }
            id v76 = [v98 valueForKey:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v75)];
            if (v76)
            {
              *(void *)(a1 + 1992) = +[CLEEDMitigation newMitigationFromDict:v76];
              if (qword_1024193E0 != -1) {
                dispatch_once(&qword_1024193E0, &stru_1022DBA80);
              }
              int v77 = qword_1024193E8;
              if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
              {
                char v78 = *(void **)(a1 + 1992);
                *(_DWORD *)uint64_t buf = 138543362;
                id v120 = v78;
                _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "#EED2,readEEDDataFromCache,fetched Mitigation:%{public}@", buf, 0xCu);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024193E0 != -1) {
                  dispatch_once(&qword_1024193E0, &stru_1022DBA80);
                }
                unint64_t v95 = *(void **)(a1 + 1992);
                int v111 = 138543362;
                id v112 = v95;
                __int16 v96 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::readEEDDataFromCache()", "%s\n", v96);
                if (v96 != (char *)buf) {
                  free(v96);
                }
              }
            }
            sub_100ABA4B8(a1);
            return 1;
          }
          uint64_t v60 = *(void *)v100;
LABEL_130:
          uint64_t v61 = 0;
          while (1)
          {
            if (*(void *)v100 != v60) {
              objc_enumerationMutation(v58);
            }
            uint64_t v62 = *(void *)(*((void *)&v99 + 1) + 8 * v61);
            uint64_t v107 = 0;
            id v63 = +[CLEEDRequest createRequestFromCachedDict:v62 error:&v107];
            if (v63)
            {
              [*(id *)(a1 + 1920) addObject:v63];
              if (qword_1024193E0 != -1) {
                dispatch_once(&qword_1024193E0, &stru_1022DBA80);
              }
              __int16 v64 = qword_1024193E8;
              if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
              {
                id v65 = [v63 ID];
                id v66 = [v63 type];
                *(_DWORD *)uint64_t buf = 138543618;
                id v120 = v65;
                __int16 v121 = 2050;
                id v122 = v66;
                _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "#EED2,readDataFromCache,fetched requestID:%{public}@, \"handled request\" with requestType:%{public}ld, from cache", buf, 0x16u);
              }
              if (!sub_10013D1A0(115, 2)) {
                goto LABEL_147;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1024193E0 != -1) {
                dispatch_once(&qword_1024193E0, &stru_1022DBA80);
              }
              id v67 = [v63 ID];
              id v68 = [v63 type];
              int v111 = 138543618;
              id v112 = v67;
              __int16 v113 = 2050;
              id v114 = v68;
              int v69 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::readEEDDataFromCache()", "%s\n", v69);
            }
            else
            {
              if (qword_1024193E0 != -1) {
                dispatch_once(&qword_1024193E0, &stru_1022DBA80);
              }
              __int16 v70 = qword_1024193E8;
              if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)uint64_t buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_ERROR, "#EED2,readEEDDataFromCache,requestsHandledArray, handledRequest creation failed. This should not happen", buf, 2u);
              }
              if (!sub_10013D1A0(115, 0)) {
                goto LABEL_147;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1024193E0 != -1) {
                dispatch_once(&qword_1024193E0, &stru_1022DBA80);
              }
              LOWORD(v111) = 0;
              int v69 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::readEEDDataFromCache()", "%s\n", v69);
            }
            if (v69 != (char *)buf) {
              free(v69);
            }
LABEL_147:
            if (v59 == (id)++v61)
            {
              id v71 = [v58 countByEnumeratingWithState:&v99 objects:v109 count:16];
              id v59 = v71;
              if (!v71) {
                goto LABEL_155;
              }
              goto LABEL_130;
            }
          }
        }
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        uint64_t v79 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "#EED2,readEEDDataFromCache,fDeviceSessionPrivateKey unavailable, Early Return", buf, 2u);
        }
        BOOL result = sub_10013D1A0(115, 2);
        if (!result) {
          return result;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 == -1)
        {
LABEL_203:
          LOWORD(v111) = 0;
          __int16 v97 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::readEEDDataFromCache()", "%s\n", v97);
          if (v97 != (char *)buf) {
            free(v97);
          }
          return 0;
        }
      }
      else
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        dispatch_time_t v20 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#EED2,readEEDDataFromCache,fRootSecret unavailable, Early Return", buf, 2u);
        }
        BOOL result = sub_10013D1A0(115, 2);
        if (!result) {
          return result;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 == -1) {
          goto LABEL_203;
        }
      }
    }
LABEL_206:
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    goto LABEL_203;
  }
  sub_100A9B414();
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  uint64_t v5 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#EED2,readEEDDataFromCache,ignore cached data and clear it as new session has started in the interim. Early Return", buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 == -1) {
      goto LABEL_203;
    }
    goto LABEL_206;
  }
  return result;
}

void sub_100A9A888(uint64_t a1)
{
  if (*(int *)(a1 + 1976) < 5)
  {
    if ([+[NSFileManager defaultManager] fileExistsAtPath:@"/private/var/mobile/Library/CLEEDMediaService/CLEEDMSCache"])
    {
      ++*(_DWORD *)(a1 + 1976);
      sub_100AB91E4(a1);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v5 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#EED2,checkAndRestoreEEDMediaService, initialized media service", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        uint64_t v4 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::checkAndRestoreEEDMediaService()", "%s\n");
        goto LABEL_20;
      }
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v2 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      int v3 = *(_DWORD *)(a1 + 1976);
      *(_DWORD *)uint64_t buf = 67240192;
      int v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#EED2,checkAndRestoreEEDMediaService,LaunchCount exceeded limit:%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v4 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::checkAndRestoreEEDMediaService()", "%s\n");
LABEL_20:
      if (v4 != buf) {
        free(v4);
      }
    }
  }
}

void sub_100A9AB94(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 2016);
  if (v2)
  {
    unsigned int v3 = [[v2 valueForKey:@"thermalLevelAtStartOfCall"] intValue];
    unsigned int v4 = [[*(id *)(a1 + 2016) valueForKey:@"maxThermalLevelInCall"] intValue];
    unsigned int v5 = [[objc_msgSend(*(id *)(a1 + 2016), "valueForKey:", @"thermalLevelAtEndOfCall") intValue];
    unsigned int v6 = [[objc_msgSend(*(id *)(a1 + 2016), "valueForKey:", @"peakPowerAtStartOfCall") intValue];
    unsigned int v7 = [[*(id *)(a1 + 2016) valueForKey:@"maxPeakPowerInCall"] intValue];
    unsigned int v8 = [[objc_msgSend(*(id *)(a1 + 2016), "valueForKey:", @"peakPowerAtEndOfCall") intValue];
  }
  else
  {
    unsigned int v8 = -1;
    unsigned int v7 = -1;
    unsigned int v6 = -1;
    unsigned int v5 = -1;
    unsigned int v4 = -1;
    unsigned int v3 = -1;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  double v9 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67110400;
    *(_DWORD *)&uint8_t buf[4] = v3;
    *(_WORD *)id v49 = 1024;
    *(_DWORD *)&v49[2] = v4;
    __int16 v50 = 1024;
    unsigned int v51 = v5;
    __int16 v52 = 1024;
    unsigned int v53 = v6;
    __int16 v54 = 1024;
    unsigned int v55 = v7;
    LOWORD(v56[0]) = 1024;
    *(_DWORD *)((char *)v56 + 2) = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#EED2,submitEED2SessionDatatoCA,thermalLevelAtStartOfCall:%d, maxThermalLevelInCall:%d, thermalLevelAtEndOfCall:%d, peakPowerAtStartOfCall:%d, maxPeakPowerInCall:%d, peakPowerAtEndOfCall:%d", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    LODWORD(v41) = 67110400;
    HIDWORD(v41) = v3;
    LOWORD(v42) = 1024;
    *(_DWORD *)((char *)&v42 + 2) = v4;
    HIWORD(v42) = 1024;
    *(_DWORD *)__int16 v43 = v5;
    *(_WORD *)&v43[4] = 1024;
    *(_DWORD *)&v43[6] = v6;
    __int16 v44 = 1024;
    unsigned int v45 = v7;
    __int16 v46 = 1024;
    unsigned int v47 = v8;
    id v34 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::submitEED2SessionDatatoCA()", "%s\n", v34);
    if (v34 != (char *)buf) {
      free(v34);
    }
  }
  int v10 = *(int **)(a1 + 2088);
  if (v10)
  {
    int v11 = v10[2];
    *(_DWORD *)uint64_t buf = 108;
    *(_DWORD *)id v49 = v11;
    v56[0] = 0;
    int v12 = *v10;
    v56[2] = 110;
    v56[4] = v12;
    v56[10] = 0;
    int v13 = v10[1];
    v56[12] = 111;
    v56[14] = v13;
    v56[20] = 0;
    int v14 = v10[3];
    v56[22] = 109;
    v56[24] = v14;
    v56[30] = 0;
    int v15 = v10[4];
    v56[32] = 113;
    v56[34] = v15;
    v56[40] = 0;
    int v16 = v10[5];
    v56[42] = 114;
    v56[44] = v16;
    v56[50] = 0;
    int v17 = v10[6];
    v56[52] = 107;
    v56[54] = v17;
    v56[60] = 0;
    int v18 = v10[9];
    v56[62] = 112;
    v56[64] = v18;
    v56[70] = 0;
    LOBYTE(v18) = *((unsigned char *)v10 + 40);
    v56[72] = 190;
    char v57 = v18;
    int v58 = 7;
    int v19 = v10[11];
    int v59 = 191;
    int v60 = v19;
    int v61 = 0;
    int v20 = v10[12];
    int v62 = 192;
    int v63 = v20;
    int v64 = 0;
    int v21 = v10[13];
    int v65 = 193;
    int v66 = v21;
    int v67 = 0;
    int v22 = v10[14];
    int v68 = 194;
    int v69 = v22;
    int v70 = 0;
    int v23 = v10[15];
    int v71 = 195;
    int v72 = v23;
    int v73 = 0;
    int v24 = v10[16];
    int v74 = 196;
    int v75 = v24;
    int v76 = 0;
    LOBYTE(v24) = *((unsigned char *)v10 + 41);
    int v77 = 197;
    char v78 = v24;
    int v79 = 7;
    uint64_t v25 = *((void *)v10 + 9);
    int v80 = 198;
    int v81 = v25;
    int v82 = 0;
    LODWORD(v25) = v10[20];
    int v83 = 199;
    int v84 = v25;
    int v85 = 0;
    LODWORD(v25) = v10[21];
    int v86 = 200;
    int v87 = v25;
    int v88 = 0;
    LODWORD(v25) = v10[22];
    int v89 = 201;
    int v90 = v25;
    int v91 = 0;
    LODWORD(v25) = v10[23];
    int v92 = 202;
    int v93 = v25;
    int v94 = 0;
    LODWORD(v25) = v10[24];
    int v95 = 203;
    int v96 = v25;
    int v97 = 0;
    LODWORD(v25) = v10[25];
    int v98 = 204;
    int v99 = v25;
    int v100 = 0;
    int v26 = v10[27] - v10[26];
    if (v26 < 0) {
      int v26 = v10[26] - v10[27];
    }
    int v101 = 205;
    int v102 = v26;
    int v103 = 0;
    char v27 = *((unsigned char *)v10 + 112);
    int v104 = 206;
    char v105 = v27;
    int v106 = 7;
    int v28 = v10[26];
    int v107 = 207;
    int v108 = v28;
    int v109 = 0;
    int v29 = v10[27];
    int v110 = 208;
    int v111 = v29;
    int v112 = 0;
    int v113 = 220;
    unsigned int v114 = v3;
    int v115 = 0;
    int v116 = 221;
    unsigned int v117 = v4;
    int v118 = 0;
    int v119 = 222;
    unsigned int v120 = v5;
    int v121 = 0;
    int v122 = 223;
    unsigned int v123 = v6;
    int v124 = 0;
    int v125 = 224;
    unsigned int v126 = v7;
    int v127 = 0;
    int v128 = 225;
    unsigned int v129 = v8;
    int v130 = 0;
    id v41 = 0;
    uint64_t v42 = 0;
    *(void *)__int16 v43 = 0;
    __int16 v39 = (void **)&v41;
    char v40 = 0;
    id v41 = (char *)operator new(0x528uLL);
    uint64_t v42 = v41;
    *(void *)__int16 v43 = v41 + 1320;
    uint64_t v42 = (unsigned char *)sub_100682A48((uint64_t)v43, (uint64_t)buf, (uint64_t)&v131, (uint64_t)v41);
    for (uint64_t i = 1288; i != -32; i -= 40)
      sub_100118010((uint64_t)&buf[i]);
    char v31 = *(void **)(a1 + 2096);
    memset(v38, 0, sizeof(v38));
    sub_100682C20(v38, (uint64_t)v41, (uint64_t)v42, 0xCCCCCCCCCCCCCCCDLL * ((v42 - v41) >> 3));
    [v31 setMeasurements:sub_10067C03C(v38)];
    *(void *)uint64_t buf = v38;
    sub_100682B1C((void ***)buf);
    int v32 = *(void **)(a1 + 2096);
    if (byte_10248A92F < 0)
    {
      sub_1000DC48C(__p, (void *)xmmword_10248A918, *((unint64_t *)&xmmword_10248A918 + 1));
    }
    else
    {
      *(_OWORD *)std::string __p = xmmword_10248A918;
      uint64_t v37 = unk_10248A928;
    }
    [v32 submitEvent:sub_1007EB0E8((long long *)__p)];
    if (SHIBYTE(v37) < 0) {
      operator delete(__p[0]);
    }
    sub_100A9BD18(*(void *)(a1 + 2088));
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    __int16 v33 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#EED2,submitEED2SessionDatatoCA,metric submitted", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      LOWORD(v39) = 0;
      __int16 v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::submitEED2SessionDatatoCA()", "%s\n", v35);
      if (v35 != (char *)buf) {
        free(v35);
      }
    }
    *(void *)uint64_t buf = &v41;
    sub_100682B1C((void ***)buf);
  }
}

void sub_100A9B338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char *a28)
{
  a28 = &a22;
  sub_100682B1C((void ***)&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_100A9B3C4(uint64_t a1, unsigned int *a2, unsigned int a3)
{
  uint64_t v5 = sub_100AAFCC0(a1, *a2);
  unsigned int v6 = v5;
  uint64_t result = sub_100AAFCC0(v5, a3);
  unsigned int v8 = *a2;
  if (v6 >= result) {
    unsigned int v8 = a3;
  }
  *a2 = v8;
  return result;
}

void sub_100A9B414()
{
  uint64_t v0 = sub_1000A6958();
  if (sub_1004D0138(v0))
  {
    uint64_t v1 = sub_1000A6958();
    sub_1004CF870(v1);
    uint64_t v2 = *(void *)sub_1000A6958();
    (*(void (**)(void))(v2 + 944))();
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    unsigned int v3 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#EED2,clearEEDDataFromCache,complete", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      unsigned int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::clearEEDDataFromCache()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_100A9B600()
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  uint64_t v0 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#EED2,clearEEDMetricDataFromCache,entered", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::clearEEDMetricDataFromCache()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  uint64_t v1 = sub_1000A6958();
  if (sub_1004D0138(v1))
  {
    uint64_t v2 = sub_1000A6958();
    sub_1004CF870(v2);
    uint64_t v3 = *(void *)sub_1000A6958();
    (*(void (**)(void))(v3 + 944))();
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    unsigned int v4 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2,clearEEDMetricDataFromCache,complete", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      unsigned int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::clearEEDMetricDataFromCache()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_100A9B91C()
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  uint64_t v0 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#EED2,clearCoexMetricDataFromCache,entered", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::clearCoexMetricDataFromCache()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  uint64_t v1 = sub_1000A6958();
  if (sub_1004D0138(v1))
  {
    uint64_t v2 = sub_1000A6958();
    sub_1004CF870(v2);
    uint64_t v3 = *(void *)sub_1000A6958();
    (*(void (**)(void))(v3 + 944))();
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    unsigned int v4 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2,clearCoexMetricDataFromCache,complete", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      unsigned int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::clearCoexMetricDataFromCache()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_100A9BC38(uint64_t a1)
{
  *(CFAbsoluteTime *)(a1 + 168) = CFAbsoluteTimeGetCurrent();
  *(void *)(a1 + 1896) = 0;
  uint64_t v2 = *(void **)(a1 + 1944);
  if (v2) {

  }
  *(void *)(a1 + 1944) = +[CLEEDCryptoUtilities getRandomBytes:32];
  uint64_t v3 = *(const void **)(a1 + 1952);
  if (v3) {
    CFRelease(v3);
  }
  *(void *)(a1 + 1952) = +[CLEEDCryptoUtilities createRandomP256PrivateKey];
  unsigned int v4 = *(void **)(a1 + 1912);
  if (v4) {

  }
  *(void *)(a1 + 1912) = objc_alloc_init((Class)NSMutableArray);
  uint64_t v5 = *(void **)(a1 + 1920);
  if (v5) {

  }
  *(void *)(a1 + 1920) = objc_alloc_init((Class)NSMutableArray);
  unsigned int v6 = *(void **)(a1 + 1928);
  if (v6)
  {

    *(void *)(a1 + 1928) = 0;
  }
  unsigned int v7 = *(void **)(a1 + 1936);
  if (v7)
  {

    *(void *)(a1 + 1936) = 0;
  }
  unsigned int v8 = *(void **)(a1 + 1992);
  if (v8)
  {

    *(void *)(a1 + 1992) = 0;
  }

  sub_100AA0A2C(a1);
}

double sub_100A9BD18(uint64_t a1)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  uint64_t v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ca AnalyticsReport::reset\"}", buf, 0x12u);
  }
  memset(buf, 0, 32);
  __asm { FMOV            V0.2S, #-1.0 }
  *(void *)(a1 + 28) = _D0;
  *(_OWORD *)(a1 + 44) = 0uLL;
  long long v8 = *(_OWORD *)buf;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)&buf[16];
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 10;
  *(void *)(a1 + 36) = 0;
  *(void *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(_OWORD *)(a1 + 72) = v8;
  double result = NAN;
  *(void *)(a1 + 104) = -1;
  *(unsigned char *)(a1 + 112) = 0;
  return result;
}

void sub_100A9BE48(uint64_t a1)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  uint64_t v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 1992);
    uint64_t v4 = *(void *)(a1 + 1984);
    *(_DWORD *)uint64_t buf = 138543618;
    uint64_t v32 = v3;
    __int16 v33 = 2114;
    uint64_t v34 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2CX, initializeCoexMonitor:Mitigations:%{public}@, Monitor:%{public}@", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v21 = *(void *)(a1 + 1992);
    uint64_t v22 = *(void *)(a1 + 1984);
    int v27 = 138543618;
    uint64_t v28 = v21;
    __int16 v29 = 2114;
    uint64_t v30 = v22;
    int v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::initializeCoexMonitor()", "%s\n", v23);
    if (v23 != (char *)buf) {
      free(v23);
    }
  }

  uint64_t v5 = [CLEEDCoexMonitor alloc];
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 1992);
  long long v8 = sub_100A80D4C((int *)(a1 + 1448));
  long long v9 = *((_OWORD *)v8 + 21);
  v26[6] = *((_OWORD *)v8 + 20);
  v26[7] = v9;
  long long v10 = *((_OWORD *)v8 + 23);
  v26[8] = *((_OWORD *)v8 + 22);
  v26[9] = v10;
  long long v11 = *((_OWORD *)v8 + 17);
  void v26[2] = *((_OWORD *)v8 + 16);
  v26[3] = v11;
  long long v12 = *((_OWORD *)v8 + 19);
  v26[4] = *((_OWORD *)v8 + 18);
  v26[5] = v12;
  long long v13 = *((_OWORD *)v8 + 15);
  v26[0] = *((_OWORD *)v8 + 14);
  v26[1] = v13;
  uint64_t v14 = *(unsigned int *)(a1 + 1448);
  uint64_t v15 = *(unsigned int *)sub_100A96A4C(a1 + 32, *(_DWORD *)(a1 + 1448));
  BOOL v16 = sub_100D33C94(a1 + 112);
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  void v25[2] = sub_100AB7BF8;
  void v25[3] = &unk_1022DB970;
  v25[4] = a1;
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  void v24[2] = sub_100AB8BC0;
  v24[3] = &unk_1022DB990;
  v24[4] = a1;
  int v17 = [(CLEEDCoexMonitor *)v5 initWithUniverse:v6 initialMitigation:v7 mitigationConfig:v26 activeSim:v14 Rat:v15 wifiEmergency:v16 cachedCoexMetricData:sub_100AB78DC() mitigationCB:v25 coexMetricUpdateCB:v24];
  *(void *)(a1 + 1984) = v17;
  if (v17)
  {
    if (*(unsigned char *)(a1 + 2012)) {
      [(CLEEDCoexMonitor *)v17 handleReachability:*(unsigned int *)(a1 + 2008)];
    }
    if (*(unsigned char *)(a1 + 2004)) {
      [*(id *)(a1 + 1984) handleVlqmForActiveCall:*(unsigned int *)(a1 + 2000)];
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v18 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#EED2CX,fEEDCoexMonitor initialized", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      LOWORD(v27) = 0;
      int v19 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::initializeCoexMonitor()", "%s\n");
LABEL_32:
      if (v19 != buf) {
        free(v19);
      }
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v20 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "#EED2CX,fEEDCoexMonitor initialization failed", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      LOWORD(v27) = 0;
      int v19 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::initializeCoexMonitor()", "%s\n");
      goto LABEL_32;
    }
  }
}

void sub_100A9C3BC(uint64_t a1)
{
  if (*(void *)(a1 + 1864))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v2 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#EED2,initializeAPNSHelper,fAPNSHelper object already available. This should not happen!", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::initializeAPNSHelper()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
  else
  {
    uint64_t v4 = [CLEmergencyEED2APNSHelper alloc];
    uint64_t v5 = *(void *)(a1 + 8);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    _DWORD v8[2] = sub_100AB05F8;
    void v8[3] = &unk_1022C9188;
    v8[4] = a1;
    void v6[4] = a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100AB0920;
    void v7[3] = &unk_1022DB820;
    unsigned __int8 v7[4] = a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    _DWORD v6[2] = sub_100AB0C9C;
    void v6[3] = &unk_1022A3020;
    *(void *)(a1 + 1864) = [(CLEmergencyEED2APNSHelper *)v4 initWithUniverse:v5 apnsTokenCallback:v8 apnsMessageCallback:v7 apnsReconnectedCallback:v6];
  }
  sub_100AAAF10(a1);
}

void sub_100A9C648(uint64_t a1)
{
  if (!*((unsigned char *)sub_100A80D4C((int *)(a1 + 1448)) + 59))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v3 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#EED2,requestAPNSToken,feature not enabled or requests not supported,early return", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v4 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::requestAPNSToken()", "%s\n");
LABEL_23:
    if (v4 != buf) {
      free(v4);
    }
    return;
  }
  uint64_t v2 = *(void **)(a1 + 1864);
  if (v2)
  {
    _[v2 requestAPNSToken];
    return;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  uint64_t v5 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#EED2,requestAPNSToken,nil fAPNSHelper,early return", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v4 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::requestAPNSToken()", "%s\n");
    goto LABEL_23;
  }
}

void *sub_100A9C944(void *a1, uint64_t a2, unint64_t a3)
{
  a1[2] = 0;
  uint64_t v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    sub_10054E250(a1, a3);
    a1[1] = sub_100682A48(v4, a2, a2 + 40 * a3, a1[1]);
  }
  return a1;
}

void sub_100A9C9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_100682B1C(&a9);
  _Unwind_Resume(a1);
}

void sub_100A9C9E4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1776))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v1 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#EED2 startCanSendADRTimeout called when timeout is already running, ignoring", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v2 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::startCanSendADRTimeout()", "%s\n", v2);
      if (v2 != (char *)buf) {
        free(v2);
      }
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v4 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2 startCanSendADRTimeout", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::startCanSendADRTimeout()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    *(unsigned char *)(a1 + 1776) = 1;
    sub_100A97754(a1 + 1536, 12, 12.0);
  }
}

void sub_100A9CCC0(uint64_t a1)
{
  if (*((unsigned char *)sub_100A80D4C((int *)(a1 + 1448)) + 58))
  {
    if (*(void *)(a1 + 1728))
    {
      if (*(unsigned char *)(a1 + 1760))
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        uint64_t v2 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2,#DSA,already registered for DSA so ignoring", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          __int16 v10 = 0;
LABEL_20:
          uint64_t v4 = (uint8_t *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::registerForDispatchableSearchArea()", "%s\n");
LABEL_29:
          if (v4 != buf) {
            free(v4);
          }
        }
      }
      else
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        uint64_t v6 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#EED2,#DSA,fetching infered place", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          __int16 v10 = 0;
          long long v8 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::registerForDispatchableSearchArea()", "%s\n", v8);
          if (v8 != (char *)buf) {
            free(v8);
          }
        }
        *(unsigned char *)(a1 + 1760) = 1;
        uint64_t v7 = *(void **)(a1 + 1728);
        v9[0] = _NSConcreteStackBlock;
        v9[1] = 3221225472;
        v9[2] = sub_100AAE5F8;
        void v9[3] = &unk_1022C1658;
        v9[4] = a1;
        [v7 _fetchContinuousPlaceInferencesWithFidelityPolicy:4 handler:v9];
      }
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v5 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#EED2,#DSA,cannot register for infered place due to not having LM", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        __int16 v10 = 0;
        uint64_t v4 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::registerForDispatchableSearchArea()", "%s\n");
        goto LABEL_29;
      }
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v3 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#EED2,#DSA,is disabled", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      __int16 v10 = 0;
      goto LABEL_20;
    }
  }
}

void sub_100A9D1E8(uint64_t a1)
{
  *(CFAbsoluteTime *)(a1 + 1896) = CFAbsoluteTimeGetCurrent();
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  uint64_t v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void **)(a1 + 1896);
    *(_DWORD *)uint64_t buf = 134283521;
    id v29 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2 cleanupOnEmergencyCallEnd,set fCallEndTime to %{private}f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v15 = *(void **)(a1 + 1896);
    int v26 = 134283521;
    id v27 = v15;
    BOOL v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::cleanupOnEmergencyCallEnd()", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t v4 = *(void **)(a1 + 1912);
  id v5 = [v4 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v22;
    do
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v22 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void **)(*((void *)&v21 + 1) + 8 * i);
        [v9 setState:2];
        [*(id *)(a1 + 1920) addObject:v9];
      }
      id v6 = [v4 countByEnumeratingWithState:&v21 objects:v25 count:16];
    }
    while (v6);
  }
  if (*(void *)(a1 + 1912))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    __int16 v10 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = [*(id *)(a1 + 1912) count];
      *(_DWORD *)uint64_t buf = 134349056;
      id v29 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#EED2 cleanupOnEmergencyCallEnd,moved %{public}ld requests from fRequestsPending to fRequestsHandled queue", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v18 = [*(id *)(a1 + 1912) count];
      int v26 = 134349056;
      id v27 = v18;
      int v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::cleanupOnEmergencyCallEnd()", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }

    *(void *)(a1 + 1912) = 0;
  }
  sub_100AA4030(a1, (id *)(a1 + 1928));
  sub_100AA4030(a1, (id *)(a1 + 1936));
  sub_100AA0A2C(a1);
  long long v12 = *(void **)(a1 + 1840);
  if (v12)
  {

    *(void *)(a1 + 1840) = 0;
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    long long v13 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#EED2 cleanupOnEmergencyCallEnd,fAPNSToken cleared", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      LOWORD(v26) = 0;
      int v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::cleanupOnEmergencyCallEnd()", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
  }
  sub_100A9FA38(a1);
  sub_100AA4264(a1);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  uint64_t v14 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#EED2 cleanupOnEmergencyCallEnd,completed", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    LOWORD(v26) = 0;
    int v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::cleanupOnEmergencyCallEnd()", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
}

void sub_100A9D848(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1))
  {
    ++*(_DWORD *)(a1 + 1672);
    uint64_t v2 = sub_100A96A4C(a1 + 32, *(_DWORD *)(a1 + 1448));
    if (*(char *)(v2 + 159) < 0)
    {
      sub_1000DC48C(__p, *(void **)(v2 + 136), *(void *)(v2 + 144));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)(v2 + 136);
      uint64_t v30 = *(void *)(v2 + 152);
    }
    sub_101483278(a1, (uint64_t)__p, a1 + 136);
    sub_100AA9224(a1, (uint64_t)__p, a1 + 136);
    if (v30 >= 0) {
      __int16 v10 = (void *)HIBYTE(v30);
    }
    else {
      __int16 v10 = __p[1];
    }
    if (v10)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v11 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#EED2 sending message for native number", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        uint64_t v25 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::sendLocation()", "%s\n", v25);
        if (v25 != (char *)buf) {
          free(v25);
        }
      }
      sub_100AA93F0(a1, 0, (uint64_t *)__p);
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      long long v12 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#EED2 native number is empty, not sending message", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        uint64_t v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::sendLocation()", "%s\n", v28);
        if (v28 != (char *)buf) {
          free(v28);
        }
      }
      uint64_t v13 = sub_1014832B8(a1, (unsigned int *)(a1 + 340), 30);
      uint64_t v14 = *(void *)(a1 + 2088);
      if (v14)
      {
        unsigned int v15 = sub_100AAFCC0(v13, *(_DWORD *)(v14 + 24));
        int v16 = *(_DWORD *)(v14 + 24);
        if (v15 >= 6) {
          int v16 = 8;
        }
        *(_DWORD *)(v14 + 24) = v16;
      }
    }
    if (*(char *)(a1 + 159) < 0) {
      uint64_t v17 = *(void *)(a1 + 144);
    }
    else {
      uint64_t v17 = *(unsigned __int8 *)(a1 + 159);
    }
    if (!v17 || byte_10248D718)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v19 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#EED2 companion number is empty or device supports alternate account, not sending message", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        id v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::sendLocation()", "%s\n", v27);
        if (v27 != (char *)buf) {
          free(v27);
        }
      }
      if (!byte_10248D718)
      {
        uint64_t v20 = sub_1014832B8(a1, (unsigned int *)(a1 + 340), 30);
        uint64_t v21 = *(void *)(a1 + 2088);
        if (v21)
        {
          unsigned int v22 = sub_100AAFCC0(v20, *(_DWORD *)(v21 + 24));
          int v23 = *(_DWORD *)(v21 + 24);
          if (v22 >= 6) {
            int v23 = 8;
          }
          *(_DWORD *)(v21 + 24) = v23;
        }
      }
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v18 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#EED2 sending message for companion number", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        int v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::sendLocation()", "%s\n", v26);
        if (v26 != (char *)buf) {
          free(v26);
        }
      }
      sub_100AA93F0(a1, 1, (uint64_t *)(a1 + 136));
    }
    if (SHIBYTE(v30) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v3 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "#EED2 attempted to send location when not enabled", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      LOWORD(__p[0]) = 0;
      long long v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::sendLocation()", "%s\n", v24);
      if (v24 != (char *)buf) {
        free(v24);
      }
    }
    uint64_t v4 = sub_1014832B8(a1, (unsigned int *)(a1 + 340), 12);
    uint64_t v5 = *(void *)(a1 + 2088);
    if (v5)
    {
      unsigned int v7 = *(_DWORD *)(v5 + 24);
      id v6 = (int *)(v5 + 24);
      unsigned int v8 = sub_100AAFCC0(v4, v7);
      int v9 = *v6;
      if (v8 >= 2) {
        int v9 = 4;
      }
      int *v6 = v9;
    }
  }
}

void sub_100A9E034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100A9E068(uint64_t a1)
{
  uint64_t v2 = &qword_102419000;
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  uint64_t v3 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#EED2 cleanupSession entered", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    LOWORD(v73) = 0;
    unsigned int v55 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::cleanupSession()", "%s\n", v55);
    if (v55 != buf) {
      free(v55);
    }
  }
  sub_100AA4438(a1);
  sub_100AA485C(a1);
  uint64_t v4 = sub_100AA4FF0((void *)a1);
  id v5 = v4;
  id v6 = +[NSMutableSet set];
  if (*(void *)(a1 + 2088))
  {
    unsigned int v7 = v6;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v8 = [v4 countByEnumeratingWithState:&v69 objects:v77 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v67 = *(void *)v70;
      do
      {
        __int16 v10 = 0;
        do
        {
          if (*(void *)v70 != v67) {
            objc_enumerationMutation(v4);
          }
          id v11 = *(void **)(*((void *)&v69 + 1) + 8 * (void)v10);
          if ([v11 state] == (id)1) {
            ++*(_DWORD *)(*(void *)(a1 + 2088) + 48);
          }
          if ([v11 type] == (id)2)
          {
            if (v2[124] != -1) {
              dispatch_once(&qword_1024193E0, &stru_1022DBA80);
            }
            long long v12 = v4;
            uint64_t v13 = qword_1024193E8;
            if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
            {
              int v14 = *(_DWORD *)(*(void *)(a1 + 2088) + 88);
              id v15 = [v11 numDuplicateMediaSelections];
              id v16 = [objc_msgSend(v11, "mediaList") count];
              id v17 = [v7 count];
              *(_DWORD *)uint64_t buf = 67109888;
              *(_DWORD *)&uint8_t buf[4] = v14;
              *(_WORD *)&uint8_t buf[8] = 2048;
              *(void *)&buf[10] = v15;
              uint64_t v2 = &qword_102419000;
              *(_WORD *)&buf[18] = 2048;
              *(void *)&buf[20] = v16;
              *(_WORD *)&unsigned char buf[28] = 2048;
              *(void *)&buf[30] = v17;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#EED2 cleanupSession,looping,before update,fEED2Report->fNumDuplicateMediaSelections:%d, eedRequest.numDuplicateMediaSelections:%ld, eedRequest.mediaList.count:%ld, mediaItemsAcrossRequests.count:%ld", buf, 0x26u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (v2[124] != -1) {
                dispatch_once(&qword_1024193E0, &stru_1022DBA80);
              }
              int v25 = *(_DWORD *)(*(void *)(a1 + 2088) + 88);
              id v26 = [v11 numDuplicateMediaSelections];
              id v27 = [objc_msgSend(v11, "mediaList") count];
              id v28 = [v7 count];
              int v73 = 67109888;
              *(_DWORD *)int v74 = v25;
              *(_WORD *)&v74[4] = 2048;
              *(void *)&v74[6] = v26;
              *(_WORD *)&v74[14] = 2048;
              *(void *)&v74[16] = v27;
              *(_WORD *)&v74[24] = 2048;
              *(void *)&v74[26] = v28;
              id v29 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::cleanupSession()", "%s\n", v29);
              if (v29 != buf) {
                free(v29);
              }
              uint64_t v2 = &qword_102419000;
            }
            int v18 = *(_DWORD *)(*(void *)(a1 + 2088) + 88);
            *(_DWORD *)(*(void *)(a1 + 2088) + 88) = v18
                                                       + [v11 numDuplicateMediaSelections];
            id v19 = [v7 count];
            [v7 unionSet:[v11 mediaList]];
            int v20 = *(_DWORD *)(*(void *)(a1 + 2088) + 88);
            unsigned int v21 = [v11 mediaList].count + v19;
            *(_DWORD *)(*(void *)(a1 + 2088) + 88) = v20 + v21 - [v7 count];
            if (v2[124] != -1) {
              dispatch_once(&qword_1024193E0, &stru_1022DBA80);
            }
            uint64_t v4 = v12;
            unsigned int v22 = qword_1024193E8;
            if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
            {
              int v23 = *(_DWORD *)(*(void *)(a1 + 2088) + 88);
              id v24 = [v7 count];
              *(_DWORD *)uint64_t buf = 67109632;
              *(_DWORD *)&uint8_t buf[4] = v23;
              *(_WORD *)&uint8_t buf[8] = 2048;
              *(void *)&buf[10] = v19;
              *(_WORD *)&buf[18] = 2048;
              *(void *)&buf[20] = v24;
              _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#EED2 cleanupSession,looping,after update,fNumDuplicateMediaSelections:%d, itemListCountBeforeUpdate:%ld, mediaItemsAcrossRequests.count:%ld", buf, 0x1Cu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (v2[124] != -1) {
                dispatch_once(&qword_1024193E0, &stru_1022DBA80);
              }
              int v30 = *(_DWORD *)(*(void *)(a1 + 2088) + 88);
              id v31 = [v7 count];
              int v73 = 67109632;
              *(_DWORD *)int v74 = v30;
              *(_WORD *)&v74[4] = 2048;
              *(void *)&v74[6] = v19;
              *(_WORD *)&v74[14] = 2048;
              *(void *)&v74[16] = v31;
              uint64_t v32 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::cleanupSession()", "%s\n", v32);
              if (v32 != buf) {
                free(v32);
              }
              uint64_t v4 = v12;
            }
          }
          __int16 v10 = (char *)v10 + 1;
        }
        while (v9 != v10);
        id v33 = [v4 countByEnumeratingWithState:&v69 objects:v77 count:16];
        id v9 = v33;
      }
      while (v33);
    }
    *(_DWORD *)(*(void *)(a1 + 2088) + 92) = [v7 count];
    if (v2[124] != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v34 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v35 = *(void *)(a1 + 2088);
      int v36 = *(_DWORD *)(v35 + 88);
      LODWORD(v35) = *(_DWORD *)(v35 + 92);
      *(_DWORD *)uint64_t buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v36;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v35;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#EED2 cleanupSession,fNumDuplicateMediaSelections:%d, fTotalItems:%d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v2[124] != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v63 = *(void *)(a1 + 2088);
      int v64 = *(_DWORD *)(v63 + 88);
      LODWORD(v63) = *(_DWORD *)(v63 + 92);
      int v73 = 67109376;
      *(_DWORD *)int v74 = v64;
      *(_WORD *)&v74[4] = 1024;
      *(_DWORD *)&v74[6] = v63;
      int v65 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::cleanupSession()", "%s\n", v65);
      if (v65 != buf) {
        free(v65);
      }
    }
  }
  uint64_t v37 = *(void **)(a1 + 1912);
  if (v37)
  {

    *(void *)(a1 + 1912) = 0;
  }
  __int16 v38 = *(void **)(a1 + 1920);
  if (v38)
  {

    *(void *)(a1 + 1920) = 0;
  }
  __int16 v39 = *(void **)(a1 + 1928);
  if (v39)
  {

    *(void *)(a1 + 1928) = 0;
  }
  char v40 = *(void **)(a1 + 1936);
  if (v40)
  {

    *(void *)(a1 + 1936) = 0;
  }
  id v41 = *(void **)(a1 + 1944);
  if (v41)
  {

    *(void *)(a1 + 1944) = 0;
  }
  uint64_t v42 = *(const void **)(a1 + 1952);
  if (v42)
  {
    CFRelease(v42);
    *(void *)(a1 + 1952) = 0;
  }
  sub_100A9B414();
  sub_100A9B600();
  sub_100A9B91C();
  if (v2[124] != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  __int16 v43 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v44 = *(void *)(a1 + 1912);
    uint64_t v45 = *(void *)(a1 + 1920);
    uint64_t v46 = *(void *)(a1 + 1928);
    uint64_t v47 = *(void *)(a1 + 1936);
    uint64_t v48 = *(void *)(a1 + 1968);
    *(_DWORD *)uint64_t buf = 138544386;
    *(void *)&uint8_t buf[4] = v44;
    *(_WORD *)&unsigned char buf[12] = 2114;
    *(void *)&buf[14] = v45;
    *(_WORD *)&buf[22] = 2114;
    *(void *)&uint8_t buf[24] = v46;
    *(_WORD *)&uint8_t buf[32] = 2114;
    *(void *)&buf[34] = v47;
    __int16 v79 = 2114;
    uint64_t v80 = v48;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "#EED2,cleanupSession,all queues and requests are cleaned up. fRequestsPending:%{public}@, fRequestsHandled:%{public}@, fCurrentStreamingRequest:%{public}@, fCurrentUploadRequest:%{public}@, fMediaService:%{public}@", buf, 0x34u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v2[124] != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v56 = *(void *)(a1 + 1912);
    uint64_t v57 = *(void *)(a1 + 1920);
    uint64_t v58 = *(void *)(a1 + 1928);
    uint64_t v59 = *(void *)(a1 + 1936);
    uint64_t v60 = *(void *)(a1 + 1968);
    int v73 = 138544386;
    *(void *)int v74 = v56;
    *(_WORD *)&v74[8] = 2114;
    *(void *)&v74[10] = v57;
    *(_WORD *)&v74[18] = 2114;
    *(void *)&v74[20] = v58;
    *(_WORD *)&v74[28] = 2114;
    *(void *)&v74[30] = v59;
    __int16 v75 = 2114;
    uint64_t v76 = v60;
    int v61 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::cleanupSession()", "%s\n", v61);
    if (v61 != buf) {
      free(v61);
    }
  }
  sub_100A98240(a1 + 1536, 7);
  sub_100A98240(a1 + 1536, 8);
  sub_100A98240(a1 + 1536, 11);
  sub_100A9EE38(a1);
  *(_DWORD *)(a1 + 1784) = 0;
  uint64_t v49 = *(void *)(a1 + 1768);
  if (v49) {
    sub_10139CF68(v49, 0);
  }
  sub_100AA5354(a1);
  [*(id *)(a1 + 1752) invalidate];

  *(void *)(a1 + 1752) = 0;
  if (*(unsigned char *)(a1 + 184))
  {
    if (v2[124] != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    __int16 v50 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, "#EED2 session assertion active during Session Exit,clearing", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v2[124] != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      LOWORD(v73) = 0;
      int v66 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::cleanupSession()", "%s\n", v66);
      if (v66 != buf) {
        free(v66);
      }
    }
    sub_101482C04(a1, 0);
  }
  int v73 = 0;
  *(void *)uint64_t buf = &v73;
  unsigned int v51 = sub_1000EAEE4((uint64_t **)(a1 + 2040), &v73, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  if (v51[6] == v51[5]
    && (int v68 = 1,
        *(void *)uint64_t buf = &v68,
        __int16 v52 = sub_1000EAEE4((uint64_t **)(a1 + 2040), &v68, (uint64_t)&unk_101D0B290, (_DWORD **)buf),
        v52[6] == v52[5]))
  {
    sub_101483350(a1);
    sub_100A9AB94(a1);
  }
  else
  {
    sub_100A97754(a1 + 1536, 14, 60.0);
  }
  unsigned int v53 = *(void **)(a1 + 2016);
  if (v53)
  {

    *(void *)(a1 + 2016) = 0;
  }
  *(void *)(a1 + 168) = 0;
  *(_WORD *)(a1 + 1960) = 0;
  *(unsigned char *)(a1 + 1962) = 0;
  *(_DWORD *)(a1 + 1964) = 0;

  *(void *)(a1 + 1864) = 0;
  if (v2[124] != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  __int16 v54 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "#EED2 cleanupSession completed", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v2[124] != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    LOWORD(v73) = 0;
    int v62 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::cleanupSession()", "%s\n", v62);
    if (v62 != buf) {
      free(v62);
    }
  }
}

void sub_100A9EE38(uint64_t a1)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  uint64_t v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2 cancelCanSendADRTimeout", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::cancelCanSendADRTimeout()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  *(unsigned char *)(a1 + 1776) = 0;
  sub_100A98240(a1 + 1536, 12);
}

void sub_100A9EFDC(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1))
  {
    if (*(unsigned char *)(a1 + 1777))
    {
      if (*(unsigned char *)(a1 + 1778))
      {
        uint64_t v2 = sub_100A80D4C((int *)(a1 + 1448));
        if (*((unsigned char *)v2 + 57)) {
          BOOL v3 = v2[23] == 0;
        }
        else {
          BOOL v3 = 1;
        }
        if (v3) {
          goto LABEL_29;
        }
        uint64_t v4 = *((unsigned __int8 *)v2 + 223);
        if ((v4 & 0x80u) != 0) {
          uint64_t v4 = v2[26];
        }
        if (!v4)
        {
LABEL_29:
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          int v14 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t buf = 68289026;
            __int16 v36 = 2082;
            uint64_t v37 = "";
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EED2,sendAdr,not configured for ADR encryption\"}", (uint8_t *)&buf, 0x12u);
          }
        }
        else
        {
          uint64_t v5 = sub_100A96A4C(a1 + 32, *(_DWORD *)(a1 + 1448));
          if (*(char *)(v5 + 159) < 0)
          {
            sub_1000DC48C(__p, *(void **)(v5 + 136), *(void *)(v5 + 144));
          }
          else
          {
            *(_OWORD *)std::string __p = *(_OWORD *)(v5 + 136);
            uint64_t v33 = *(void *)(v5 + 152);
          }
          id v17 = (void *)HIBYTE(v33);
          if (v33 < 0) {
            id v17 = __p[1];
          }
          if (v17
            || (*(char *)(a1 + 159) < 0 ? (uint64_t v18 = *(void *)(a1 + 144)) : (uint64_t v18 = *(unsigned __int8 *)(a1 + 159)), v18))
          {
            uint64_t v19 = *(void *)(a1 + 104);
            if (!v19) {
              sub_10015E48C();
            }
            (*(void (**)(uint64_t *__return_ptr))(*(void *)v19 + 48))(&buf);
            id v20 = sub_100AA9C48((uint64_t)&buf);
            if (v38) {
              sub_1000DB0A0(v38);
            }
            id v21 = v20;
            if (v20)
            {
              *(unsigned char *)(a1 + 1779) = 0;
              uint64_t v22 = *(void *)(a1 + 1768);
              if (v22
                && (v34[0] = off_1022DBD70,
                    v34[1] = a1,
                    v34[3] = v34,
                    char v23 = sub_10139EA50(v22, v20, a1 + 192, (uint64_t)v34),
                    sub_100ABDF68(v34),
                    (v23 & 1) != 0))
              {
                uint64_t v24 = *(void *)(a1 + 2088);
                if (v24) {
                  ++*(_DWORD *)(v24 + 16);
                }
              }
              else
              {
                if (qword_1024193E0 != -1) {
                  dispatch_once(&qword_1024193E0, &stru_1022DBA80);
                }
                int v25 = qword_1024193E8;
                if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
                {
                  LOWORD(buf) = 0;
                  _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "#EED2,sendAdr,failed to send", (uint8_t *)&buf, 2u);
                }
                if (sub_10013D1A0(115, 0))
                {
                  bzero(&buf, 0x65CuLL);
                  if (qword_1024193E0 != -1) {
                    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
                  }
                  id v29 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::sendAdr()", "%s\n", v29);
                  if (v29 != (char *)&buf) {
                    free(v29);
                  }
                }
              }
              sub_100AAAF10(a1);
            }
            else
            {
              if (qword_1024193E0 != -1) {
                dispatch_once(&qword_1024193E0, &stru_1022DBA80);
              }
              id v26 = qword_1024193E8;
              if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
              {
                LOWORD(buf) = 0;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#EED2,sendAdr,no location available so not sending ADR", (uint8_t *)&buf, 2u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(&buf, 0x65CuLL);
                if (qword_1024193E0 != -1) {
                  dispatch_once(&qword_1024193E0, &stru_1022DBA80);
                }
                int v30 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::sendAdr()", "%s\n", v30);
                if (v30 != (char *)&buf) {
                  free(v30);
                }
              }
              *(unsigned char *)(a1 + 1779) = 1;
            }
          }
          else
          {
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_1022DBA80);
            }
            id v27 = qword_1024193E8;
            if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
            {
              LOWORD(buf) = 0;
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "#EED2,sendAdr,neither native nor companion number available so not sending ADR", (uint8_t *)&buf, 2u);
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(&buf, 0x65CuLL);
              if (qword_1024193E0 != -1) {
                dispatch_once(&qword_1024193E0, &stru_1022DBA80);
              }
              id v31 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::sendAdr()", "%s\n", v31);
              if (v31 != (char *)&buf) {
                free(v31);
              }
            }
          }
          if (SHIBYTE(v33) < 0) {
            operator delete(__p[0]);
          }
        }
        return;
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v15 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#EED2,sendAdr,ignoring ADR send request,not finished gathering ADR data", (uint8_t *)&buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193E0 == -1) {
          goto LABEL_39;
        }
        goto LABEL_94;
      }
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v13 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#EED2,sendAdr,ignoring ADR send request,not allowed to send ADR data at this time", (uint8_t *)&buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193E0 == -1)
        {
LABEL_39:
          LOWORD(__p[0]) = 0;
          id v16 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::sendAdr()", "%s\n", v16);
          if (v16 != (char *)&buf) {
            free(v16);
          }
          return;
        }
LABEL_94:
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        goto LABEL_39;
      }
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v6 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "#EED2,sendAdr,attempted to send ADR when not enabled", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      LOWORD(__p[0]) = 0;
      id v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::sendAdr()", "%s\n", v28);
      if (v28 != (char *)&buf) {
        free(v28);
      }
    }
    uint64_t v7 = sub_1014832B8(a1, (unsigned int *)(a1 + 340), 12);
    uint64_t v8 = *(void *)(a1 + 2088);
    if (v8)
    {
      unsigned int v10 = *(_DWORD *)(v8 + 24);
      id v9 = (int *)(v8 + 24);
      unsigned int v11 = sub_100AAFCC0(v7, v10);
      int v12 = *v9;
      if (v11 >= 2) {
        int v12 = 4;
      }
      *id v9 = v12;
    }
  }
}

void sub_100A9F9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100A9FA38(uint64_t a1)
{
  if (sub_10010145C())
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v2 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2,sendControlData,not enabled for watches", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1)
      {
LABEL_8:
        LOWORD(v55) = 0;
        BOOL v3 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::sendControlData()", "%s\n", v3);
LABEL_9:
        if (v3 != (char *)buf) {
          free(v3);
        }
        return;
      }
LABEL_129:
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      goto LABEL_8;
    }
    return;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v7 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "#EED2,sendControlData,attempted to send Control data when not enabled", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      LOWORD(v55) = 0;
      uint64_t v44 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::sendControlData()", "%s\n", v44);
      if (v44 != (char *)buf) {
        free(v44);
      }
    }
    uint64_t v8 = sub_1014832B8(a1, (unsigned int *)(a1 + 340), 12);
    uint64_t v9 = *(void *)(a1 + 2088);
    if (v9)
    {
      unsigned int v11 = *(_DWORD *)(v9 + 24);
      unsigned int v10 = (int *)(v9 + 24);
      unsigned int v12 = sub_100AAFCC0(v8, v11);
      int v13 = *v10;
      if (v12 >= 2) {
        int v13 = 4;
      }
      *unsigned int v10 = v13;
    }
    return;
  }
  if (*((unsigned char *)sub_100A80D4C((int *)(a1 + 1448)) + 59))
  {
    if (!*(void *)(a1 + 1904))
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v16 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#EED2,sendControlData,nil fControl,early return", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        LOWORD(v55) = 0;
        BOOL v3 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::sendControlData()", "%s\n", v3);
        goto LABEL_9;
      }
      return;
    }
    uint64_t v4 = sub_100A80D4C((int *)(a1 + 1448));
    if (!*((unsigned char *)v4 + 59) || !v4[23]) {
      goto LABEL_37;
    }
    uint64_t v5 = *((unsigned __int8 *)v4 + 223);
    if ((v5 & 0x80u) != 0) {
      uint64_t v5 = v4[26];
    }
    if (!v5)
    {
LABEL_37:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v15 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        *(_DWORD *)int v66 = 0;
        *(_WORD *)&v66[4] = 2082;
        *(void *)&v66[6] = "";
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EED2,sendControlData,not configured for Control Data encryption\"}", buf, 0x12u);
      }
      return;
    }
    uint64_t v6 = sub_100A96A4C(a1 + 32, *(_DWORD *)(a1 + 1448));
    if (*(char *)(v6 + 159) < 0)
    {
      sub_1000DC48C(__p, *(void **)(v6 + 136), *(void *)(v6 + 144));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)(v6 + 136);
      uint64_t v53 = *(void *)(v6 + 152);
    }
    id v17 = (void *)HIBYTE(v53);
    if (v53 < 0) {
      id v17 = __p[1];
    }
    if (!v17 && !(*(char *)(a1 + 159) < 0 ? *(void *)(a1 + 144) : *(unsigned __int8 *)(a1 + 159)))
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      char v40 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "#EED2,sendControlData,neither native nor companion number available so not sending Control Data", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        LOWORD(v55) = 0;
        id v41 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::sendControlData()", "%s\n", v41);
        if (v41 != (char *)buf) {
          free(v41);
        }
      }
      goto LABEL_105;
    }
    if (*(unsigned char *)(a1 + 1960))
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v19 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#EED2,sendControlData,waiting for response for previous sendControlData. set fControlDataSendPending", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        LOWORD(v55) = 0;
        uint64_t v45 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::sendControlData()", "%s\n", v45);
        if (v45 != (char *)buf) {
          free(v45);
        }
      }
      *(unsigned char *)(a1 + 1961) = 1;
      goto LABEL_105;
    }
    id v20 = sub_100AA4FF0((void *)a1);
    id v21 = v20;
    sub_100AA9BF8(a1 + 80);
    id v22 = sub_100AA9C48((uint64_t)buf);
    if (v73) {
      sub_1000DB0A0(v73);
    }
    id v23 = v22;
    if (!v22)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      __int16 v43 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "#EED2,sendControlData,no location available not sending Control data right now", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        LOWORD(v55) = 0;
        unsigned int v51 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::sendControlData()", "%s\n", v51);
        if (v51 != (char *)buf) {
          free(v51);
        }
      }
      *(unsigned char *)(a1 + 1856) = 1;
      goto LABEL_105;
    }
    *(unsigned char *)(a1 + 1856) = 0;
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v24 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      id v25 = [v20 count];
      uint64_t v26 = *(void *)(a1 + 1840);
      uint64_t v27 = *(void *)(a1 + 168);
      uint64_t v28 = *(void *)(a1 + 1896);
      *(_DWORD *)uint64_t buf = 134219010;
      *(void *)int v66 = v25;
      *(_WORD *)&v66[8] = 2112;
      *(void *)&v66[10] = v26;
      __int16 v67 = 2048;
      uint64_t v68 = v27;
      __int16 v69 = 2048;
      uint64_t v70 = v28;
      __int16 v71 = 2112;
      id v72 = v22;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#EED2,sendControlData,eedRequests Count:%ld,fAPNSToken:%@,fSessionStartTime:%f,fCallEndTime:%f, locationDict:%@", buf, 0x34u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v46 = [v20 count];
      uint64_t v47 = *(void *)(a1 + 1840);
      uint64_t v48 = *(void *)(a1 + 168);
      uint64_t v49 = *(void *)(a1 + 1896);
      int v55 = 134219010;
      id v56 = v46;
      __int16 v57 = 2112;
      uint64_t v58 = v47;
      __int16 v59 = 2048;
      uint64_t v60 = v48;
      __int16 v61 = 2048;
      uint64_t v62 = v49;
      __int16 v63 = 2112;
      id v64 = v22;
      __int16 v50 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::sendControlData()", "%s\n", v50);
      if (v50 != (char *)buf) {
        free(v50);
      }
    }
    uint64_t v29 = *(void *)(a1 + 1904);
    if (!v29) {
      goto LABEL_93;
    }
    int v30 = *(void **)(a1 + 1840);
    double v31 = *(double *)(a1 + 168);
    double v32 = *(double *)(a1 + 1896);
    uint64_t v33 = *(uint64_t **)(a1 + 1944);
    uint64_t v34 = *(void *)(a1 + 1952);
    uint64_t v35 = sub_100AABAD0(a1);
    v54[0] = off_1022DBE00;
    v54[1] = a1;
    v54[3] = v54;
    char v36 = sub_1011093A0(v29, v30, (uint64_t)v22, v20, v33, v34, (uint64_t)v35, (uint64_t)v54, v31, v32);
    sub_100ABDF68(v54);
    if (v36)
    {
      *(unsigned char *)(a1 + 1960) = 1;
      uint64_t v37 = *(void *)(a1 + 2088);
      if (v37) {
        ++*(_DWORD *)(v37 + 52);
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      __int16 v38 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#EED2,sendControlData,control send Successful", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_98;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      LOWORD(v55) = 0;
      __int16 v39 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::sendControlData()", "%s\n", v39);
    }
    else
    {
LABEL_93:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v42 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "#EED2,sendControlData,failed to send", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_98;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      LOWORD(v55) = 0;
      __int16 v39 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::sendControlData()", "%s\n", v39);
    }
    if (v39 != (char *)buf) {
      free(v39);
    }
LABEL_98:
    sub_100AAAF10(a1);
LABEL_105:
    if (SHIBYTE(v53) < 0) {
      operator delete(__p[0]);
    }
    return;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  int v14 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#EED2,sendControlData,feature not enabled or requests not supported,early return", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 == -1) {
      goto LABEL_8;
    }
    goto LABEL_129;
  }
}

void sub_100AA09B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100AA0A2C(uint64_t a1)
{
  if (*(void *)(a1 + 1944) && *(void *)(a1 + 1952))
  {
    id v2 = +[NSMutableDictionary dictionary];
    BOOL v3 = +[NSNumber numberWithDouble:*(double *)(a1 + 168)];
    if (byte_10247FB1F >= 0) {
      uint64_t v4 = &qword_10247FB08;
    }
    else {
      uint64_t v4 = (uint64_t *)qword_10247FB08;
    }
    [v2 setValue:v3 forKey:[NSString stringWithUTF8String:v4]];
    uint64_t v5 = +[NSNumber numberWithDouble:*(double *)(a1 + 1896)];
    if (byte_10247FB37 >= 0) {
      uint64_t v6 = &qword_10247FB20;
    }
    else {
      uint64_t v6 = (uint64_t *)qword_10247FB20;
    }
    [v2 setValue:v5 forKey:[NSString stringWithUTF8String:v6]];
    if (byte_10247FB67 >= 0) {
      uint64_t v7 = &qword_10247FB50;
    }
    else {
      uint64_t v7 = (uint64_t *)qword_10247FB50;
    }
    [v2 setValue:*(void *)(a1 + 1944) forKey:[NSString stringWithUTF8String:v7]];
    uint64_t v8 = +[NSNumber numberWithInt:sub_100A988EC(a1)];
    if (byte_10247FB4F >= 0) {
      uint64_t v9 = &qword_10247FB38;
    }
    else {
      uint64_t v9 = (uint64_t *)qword_10247FB38;
    }
    [v2 setValue:v8 forKey:[NSString stringWithUTF8String:v9]];
    id v10 = +[CLEEDCryptoUtilities getKeyExternalRepresentation:*(void *)(a1 + 1952)];
    if (v10)
    {
      if (byte_10247FB7F >= 0) {
        unsigned int v11 = &qword_10247FB68;
      }
      else {
        unsigned int v11 = (uint64_t *)qword_10247FB68;
      }
      [v2 setValue:v10 forKey:[NSString stringWithUTF8String:v11]];
      unsigned int v12 = *(void **)(a1 + 1928);
      if (v12)
      {
        id v13 = [v12 getRequestDict];
        if (v13)
        {
          if (byte_10247FB97 >= 0) {
            int v14 = &qword_10247FB80;
          }
          else {
            int v14 = (uint64_t *)qword_10247FB80;
          }
          [v2 setValue:v13 forKey:[NSString stringWithUTF8String:v14]];
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          id v15 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#EED2,storeEEDDataToCache,Added fCurrentStreamingRequest to cacheDataDict", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_1022DBA80);
            }
            LOWORD(v58) = 0;
LABEL_58:
            id v20 = (uint8_t *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::storeEEDDataToCache()", "%s\n");
LABEL_176:
            if (v20 != buf) {
              free(v20);
            }
          }
        }
        else
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          id v21 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "#EED2,storeEEDDataToCache,fCurrentStreamingRequest,nil dict", buf, 2u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_1022DBA80);
            }
            LOWORD(v58) = 0;
            id v20 = (uint8_t *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::storeEEDDataToCache()", "%s\n");
            goto LABEL_176;
          }
        }
      }
      else
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        uint64_t v19 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#EED2,storeEEDDataToCache,fCurrentStreamingRequest is empty", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          LOWORD(v58) = 0;
          goto LABEL_58;
        }
      }
      id v22 = *(void **)(a1 + 1936);
      if (v22)
      {
        id v23 = [v22 getRequestDict];
        if (v23)
        {
          if (byte_10247FBAF >= 0) {
            uint64_t v24 = &qword_10247FB98;
          }
          else {
            uint64_t v24 = (uint64_t *)qword_10247FB98;
          }
          [v2 setValue:v23 forKey:[NSString stringWithUTF8String:v24]];
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          id v25 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#EED2,storeEEDDataToCache,Added fCurrentUploadRequest to cacheDataDict", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_1022DBA80);
            }
            LOWORD(v58) = 0;
LABEL_85:
            uint64_t v27 = (uint8_t *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::storeEEDDataToCache()", "%s\n");
LABEL_181:
            if (v27 != buf) {
              free(v27);
            }
          }
        }
        else
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          uint64_t v28 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "#EED2,storeEEDDataToCache,fCurrentUploadRequest,nil dict", buf, 2u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_1022DBA80);
            }
            LOWORD(v58) = 0;
            uint64_t v27 = (uint8_t *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::storeEEDDataToCache()", "%s\n");
            goto LABEL_181;
          }
        }
      }
      else
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        uint64_t v26 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#EED2,storeEEDDataToCache,fCurrentUploadRequest is empty", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          LOWORD(v58) = 0;
          goto LABEL_85;
        }
      }
      id v29 = +[NSMutableArray array];
      int v30 = *(void **)(a1 + 1912);
      v57[0] = _NSConcreteStackBlock;
      v57[1] = 3221225472;
      v57[2] = sub_100AB9E70;
      v57[3] = &unk_1022DBA48;
      v57[4] = v29;
      [v30 enumerateObjectsUsingBlock:v57];
      if ([v29 count])
      {
        if (byte_10247FBDF >= 0) {
          double v31 = &qword_10247FBC8;
        }
        else {
          double v31 = (uint64_t *)qword_10247FBC8;
        }
        [v2 setValue:v29 forKey:[NSString stringWithUTF8String:v31]];
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        double v32 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          id v33 = [v29 count];
          *(_DWORD *)uint64_t buf = 134349056;
          id v61 = v33;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#EED2,storeEEDDataToCache,Added %{public}lu requests from fRequestsPending to cacheDataDict", buf, 0xCu);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_109;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        id v34 = [v29 count];
        int v58 = 134349056;
        id v59 = v34;
        uint64_t v35 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::storeEEDDataToCache()", "%s\n", v35);
        if (v35 == (char *)buf) {
          goto LABEL_109;
        }
      }
      else
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        char v36 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#EED2,storeEEDDataToCache,fRequestsPending is empty", buf, 2u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_109;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        LOWORD(v58) = 0;
        uint64_t v35 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::storeEEDDataToCache()", "%s\n", v35);
        if (v35 == (char *)buf)
        {
LABEL_109:
          id v37 = +[NSMutableArray array];
          __int16 v38 = *(void **)(a1 + 1920);
          v56[0] = _NSConcreteStackBlock;
          v56[1] = 3221225472;
          v56[2] = sub_100ABA194;
          v56[3] = &unk_1022DBA48;
          v56[4] = v37;
          [v38 enumerateObjectsUsingBlock:v56];
          if ([v37 count])
          {
            if (byte_10247FBF7 >= 0) {
              __int16 v39 = &qword_10247FBE0;
            }
            else {
              __int16 v39 = (uint64_t *)qword_10247FBE0;
            }
            [v2 setValue:v37 forKey:[NSString stringWithUTF8String:v39]];
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_1022DBA80);
            }
            char v40 = qword_1024193E8;
            if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
            {
              id v41 = [v37 count];
              *(_DWORD *)uint64_t buf = 134349056;
              id v61 = v41;
              _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "#EED2,storeEEDDataToCache,Added %{public}lu requests from fRequestsHandled to cacheDataDict", buf, 0xCu);
            }
            if (!sub_10013D1A0(115, 2)) {
              goto LABEL_127;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_1022DBA80);
            }
            id v42 = [v37 count];
            int v58 = 134349056;
            id v59 = v42;
            __int16 v43 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::storeEEDDataToCache()", "%s\n", v43);
            if (v43 == (char *)buf) {
              goto LABEL_127;
            }
          }
          else
          {
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_1022DBA80);
            }
            uint64_t v44 = qword_1024193E8;
            if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)uint64_t buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "#EED2,storeEEDDataToCache,fRequestsHandled is empty", buf, 2u);
            }
            if (!sub_10013D1A0(115, 2)) {
              goto LABEL_127;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_1022DBA80);
            }
            LOWORD(v58) = 0;
            __int16 v43 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::storeEEDDataToCache()", "%s\n", v43);
            if (v43 == (char *)buf)
            {
LABEL_127:
              uint64_t v45 = *(void **)(a1 + 1992);
              if (v45)
              {
                id v46 = [v45 newMitigationDict];
                if (!v46)
                {
                  if (qword_1024193E0 != -1) {
                    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
                  }
                  unsigned int v51 = qword_1024193E8;
                  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
                  {
                    *(_WORD *)uint64_t buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "#EED2,storeEEDDataToCache,fEEDCoexMitigation,nil dict", buf, 2u);
                  }
                  if (!sub_10013D1A0(115, 0)) {
                    goto LABEL_154;
                  }
                  bzero(buf, 0x65CuLL);
                  if (qword_1024193E0 != -1) {
                    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
                  }
                  LOWORD(v58) = 0;
                  __int16 v50 = (uint8_t *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::storeEEDDataToCache()", "%s\n");
                  goto LABEL_186;
                }
                if (byte_10247FBC7 >= 0) {
                  uint64_t v47 = &qword_10247FBB0;
                }
                else {
                  uint64_t v47 = (uint64_t *)qword_10247FBB0;
                }
                [v2 setValue:v46 forKey:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v47)];
                if (qword_1024193E0 != -1) {
                  dispatch_once(&qword_1024193E0, &stru_1022DBA80);
                }
                uint64_t v48 = qword_1024193E8;
                if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)uint64_t buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "#EED2,storeEEDDataToCache,Added fEEDCoexMitigation to cacheDataDict", buf, 2u);
                }
                if (!sub_10013D1A0(115, 2)) {
                  goto LABEL_154;
                }
                bzero(buf, 0x65CuLL);
                if (qword_1024193E0 != -1) {
                  dispatch_once(&qword_1024193E0, &stru_1022DBA80);
                }
                LOWORD(v58) = 0;
              }
              else
              {
                if (qword_1024193E0 != -1) {
                  dispatch_once(&qword_1024193E0, &stru_1022DBA80);
                }
                uint64_t v49 = qword_1024193E8;
                if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)uint64_t buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "#EED2,storeEEDDataToCache,fEEDCoexMitigation is empty", buf, 2u);
                }
                if (!sub_10013D1A0(115, 2)) {
                  goto LABEL_154;
                }
                bzero(buf, 0x65CuLL);
                if (qword_1024193E0 != -1) {
                  dispatch_once(&qword_1024193E0, &stru_1022DBA80);
                }
                LOWORD(v58) = 0;
              }
              __int16 v50 = (uint8_t *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::storeEEDDataToCache()", "%s\n");
LABEL_186:
              if (v50 != buf) {
                free(v50);
              }
LABEL_154:
              if (qword_1024193E0 != -1) {
                dispatch_once(&qword_1024193E0, &stru_1022DBA80);
              }
              __int16 v52 = qword_1024193E8;
              if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)uint64_t buf = 138412290;
                id v61 = v2;
                _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "#EED2,storeEEDDataToCache,storing the dictionary to cache:%@", buf, 0xCu);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024193E0 != -1) {
                  dispatch_once(&qword_1024193E0, &stru_1022DBA80);
                }
                int v58 = 138412290;
                id v59 = v2;
                int v55 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::storeEEDDataToCache()", "%s\n", v55);
                if (v55 != (char *)buf) {
                  free(v55);
                }
              }
              uint64_t v53 = sub_1000A6958();
              sub_1004D258C(v53);
              uint64_t v54 = *(void *)sub_1000A6958();
              (*(void (**)(void))(v54 + 944))();
              return;
            }
          }
          free(v43);
          goto LABEL_127;
        }
      }
      free(v35);
      goto LABEL_109;
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v18 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#EED2,storeEEDDataToCache,nil deviceSessionPrivateKeyRep,cannot store data,early return", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      LOWORD(v58) = 0;
LABEL_40:
      id v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::storeEEDDataToCache()", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v16 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#EED2,storeEEDDataToCache,nil fRootSecret or fDeviceSessionPrivateKey,cannot store data,early return", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      LOWORD(v58) = 0;
      goto LABEL_40;
    }
  }
}

void sub_100AA1FA0(uint64_t a1)
{
  if (sub_100AB182C(a1))
  {
    id v2 = +[CLEEDRequest getPartnerIDFromDict:*(void *)(a1 + 1848)];
    BOOL v3 = sub_100A80D4C((int *)(a1 + 1448));
    sub_100134750(__p, (char *)[v2 UTF8String]);
    sub_100A7D3F8((int *)v3, (unsigned __int8 *)__p, (uint64_t)&__str);
    if (v68 < 0) {
      operator delete(__p[0]);
    }
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    if (!size)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      unsigned int v11 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        id v12 = [v2 UTF8String];
        *(_DWORD *)uint64_t buf = 136315138;
        *(void *)&uint8_t buf[4] = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#EED2,handleAPNSMessage,valid cert not found for receviedPartnerID: %s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        id v49 = [v2 UTF8String];
        int v74 = 136315138;
        id v75 = v49;
        __int16 v50 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::handleAPNSMessage()", "%s\n", v50);
        if (v50 != buf) {
          free(v50);
        }
      }
      sub_100AB205C(a1, 8);

      *(void *)(a1 + 1848) = 0;
      goto LABEL_74;
    }
    memset(&v66, 0, sizeof(v66));
    memset(&v65, 0, sizeof(v65));
    uint64_t v5 = sub_100A80D4C((int *)(a1 + 1448));
    sub_100ABB240((uint64_t)&v74, (uint64_t)(v5 + 20));
    id v6 = +[CLEEDRequest getCallIDFromDict:*(void *)(a1 + 1848)];
    sub_100134750(buf, (char *)[v2 UTF8String]);
    uint64_t v7 = sub_100122860(&v74, buf);
    uint64_t v8 = (const std::string *)v7;
    if (SHIBYTE(v79) < 0)
    {
      operator delete(*(void **)buf);
      if (!v8) {
        goto LABEL_63;
      }
    }
    else if (!v7)
    {
LABEL_63:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v35 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "#EED2,handleAPNSMessage,nil deviceSessionSecretForPartner due to phone number mismatch,early return", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_68;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      *(_WORD *)id v72 = 0;
      uint64_t v48 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::handleAPNSMessage()", "%s\n", v48);
      if (v48 == buf) {
        goto LABEL_68;
      }
      goto LABEL_126;
    }
    std::string::operator=(&v66, v8 + 4);
    int v13 = v8[3].__r_.__value_.__s.__data_[16];
    std::string::operator=(&v65, &__str);
    uint64_t v14 = *(void *)(a1 + 1904);
    sub_100134750(buf, (char *)[v6 UTF8String]);
    id v15 = sub_10110C100(v14, (uint64_t *)&v8[1].__r_.__value_.__r.__words[2], (uint64_t *)buf, *(uint64_t **)(a1 + 1944));
    id v16 = v15;
    if (SHIBYTE(v79) < 0)
    {
      operator delete(*(void **)buf);
      if (!v16) {
        goto LABEL_63;
      }
    }
    else if (!v15)
    {
      goto LABEL_63;
    }
    if (!v13)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      char v36 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "#EED2,handleAPNSMessage,requestsSupportedByPartner is false,early return", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        *(_WORD *)id v72 = 0;
        uint64_t v53 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::handleAPNSMessage()", "%s\n", v53);
        if (v53 != buf) {
          free(v53);
        }
      }
      sub_100AB205C(a1, 12);

      goto LABEL_69;
    }
    if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      id v17 = &v65;
    }
    else {
      id v17 = (std::string *)v65.__r_.__value_.__r.__words[0];
    }
    id v18 = +[CLEEDCryptoUtilities copyAdrPublicKeyData:](CLEEDCryptoUtilities, "copyAdrPublicKeyData:", +[NSString stringWithUTF8String:v17]);
    id v19 = v18;
    if (!v18)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v37 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "#EED2,handleAPNSMessage,nil partnerAdrPublicKeyData,early return", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_68;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      *(_WORD *)id v72 = 0;
      uint64_t v48 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::handleAPNSMessage()", "%s\n", v48);
      if (v48 == buf) {
        goto LABEL_68;
      }
LABEL_126:
      free(v48);
LABEL_68:
      sub_100AB205C(a1, 7);

LABEL_69:
      *(void *)(a1 + 1848) = 0;
LABEL_70:
      sub_100ABB7BC((uint64_t)&v74);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v66.__r_.__value_.__l.__data_);
      }
LABEL_74:
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      return;
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v20 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      id v21 = &v66;
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        id v21 = (std::string *)v66.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)uint64_t buf = 138412802;
      *(void *)&uint8_t buf[4] = v2;
      __int16 v77 = 2080;
      char v78 = v21;
      __int16 v79 = 2048;
      uint64_t v80 = 1;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#EED2,handleAPNSMessage,receviedPartnerID:%@,baseURL:%s,requestsSupportedByPartner:%ld", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      unsigned int v51 = &v66;
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unsigned int v51 = (std::string *)v66.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)id v72 = 138412802;
      *(void *)&v72[4] = v2;
      *(_WORD *)&v72[12] = 2080;
      *(void *)&v72[14] = v51;
      *(_WORD *)&v72[22] = 2048;
      uint64_t v73 = 1;
      __int16 v52 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::handleAPNSMessage()", "%s\n", v52);
      if (v52 != buf) {
        free(v52);
      }
    }
    id v22 = +[CLEEDCryptoUtilities getSessionIDWithPhoneNumber:sessionStartTime:](CLEEDCryptoUtilities, "getSessionIDWithPhoneNumber:sessionStartTime:", v6, +[CLEEDRequest getSessionStartTimeFromDict:*(void *)(a1 + 1848)]);
    uint64_t v64 = 0;
    if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      id v23 = &v66;
    }
    else {
      id v23 = (std::string *)v66.__r_.__value_.__r.__words[0];
    }
    id v24 = +[CLEEDRequest createRequestFromDict:baseURL:sessionID:partnerAdrPublicKeyData:deviceSessionPrivateKey:deviceSessionSecret:error:](CLEEDRequest, "createRequestFromDict:baseURL:sessionID:partnerAdrPublicKeyData:deviceSessionPrivateKey:deviceSessionSecret:error:", *(void *)(a1 + 1848), +[NSString stringWithUTF8String:v23], v22, v18, *(void *)(a1 + 1952), v16, &v64);
    id v25 = v24;
    if (!v24 || v64)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      __int16 v38 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "#EED2,handleAPNSMessage,decryption failed", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        *(_WORD *)id v72 = 0;
        uint64_t v54 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::handleAPNSMessage()", "%s\n", v54);
        if (v54 != buf) {
          free(v54);
        }
      }
      sub_100AB205C(a1, 8);

      goto LABEL_69;
    }

    *(void *)(a1 + 1848) = 0;
    uint64_t v26 = *(void *)(a1 + 2088);
    if (v26)
    {
      if (!*(void *)(v26 + 72))
      {
        id v27 = [v24 type];
        uint64_t v26 = *(void *)(a1 + 2088);
        *(void *)(v26 + 72) = v27;
      }
      sub_100AAFE64(v26, v24);
    }
    [v24 setRequestReceivedTime:CFAbsoluteTimeGetCurrent()];
    [objc_msgSend(v24, "requestDate") timeIntervalSinceNow];
    [v24 setRequestTransmissionTime:(int)vcvtpd_s64_f64(fabs(v28) * 1000.0)];
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v29 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      id v30 = [v24 requestDate];
      double v31 = +[NSDate date];
      id v32 = [v24 requestTransmissionTime];
      *(_DWORD *)uint64_t buf = 138412802;
      *(void *)&uint8_t buf[4] = v30;
      __int16 v77 = 2112;
      char v78 = v31;
      __int16 v79 = 2048;
      uint64_t v80 = (uint64_t)v32;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#EED2,handleAPNSMessage,request sent date:%@, request received date: %@, requestTransmissionTime:%ld milliseconds", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v55 = [v24 requestDate];
      id v56 = +[NSDate date];
      id v57 = [v24 requestTransmissionTime];
      *(_DWORD *)id v72 = 138412802;
      *(void *)&v72[4] = v55;
      *(_WORD *)&v72[12] = 2112;
      *(void *)&v72[14] = v56;
      *(_WORD *)&v72[22] = 2048;
      uint64_t v73 = (uint64_t)v57;
      int v58 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::handleAPNSMessage()", "%s\n", v58);
      if (v58 != buf) {
        free(v58);
      }
    }
    if (sub_100AB24C0(a1, v24))
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v33 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#EED2,handleAPNSMessage,duplicate request, add to fRequestsHandled queue and early return", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        *(_WORD *)id v72 = 0;
        id v59 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::handleAPNSMessage()", "%s\n", v59);
        if (v59 != buf) {
          free(v59);
        }
      }
      if ([v24 type] == (id)1) {
        uint64_t v34 = 13;
      }
      else {
        uint64_t v34 = 9;
      }
      [v24 setState:v34];
      [*(id *)(a1 + 1920) addObject:v24];
      sub_100A9FA38(a1);
      sub_100AA0A2C(a1);
      sub_100AAAF10(a1);
      goto LABEL_70;
    }
    __int16 v39 = sub_100AABAD0(a1);
    *(void *)id v72 = 0;
    *(void *)&v72[8] = v72;
    *(void *)&v72[16] = 0x2020000000;
    LOBYTE(v73) = 0;
    v63[0] = _NSConcreteStackBlock;
    v63[1] = 3221225472;
    v63[2] = sub_100AB3678;
    v63[3] = &unk_1022DB848;
    v63[4] = v24;
    v63[5] = v72;
    [(NSArray *)v39 enumerateObjectsUsingBlock:v63];
    if (*(unsigned char *)(*(void *)&v72[8] + 24))
    {
      if (!v64)
      {
        [*(id *)(a1 + 1912) addObject:v24];
        [*(id *)(a1 + 1872) notifyNewRequestAvailable];
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        char v40 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          id v41 = [*(id *)(a1 + 1912) count];
          *(_DWORD *)uint64_t buf = 134217984;
          *(void *)&uint8_t buf[4] = v41;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "#EED2,handleAPNSMessage,CLEEDRequestTypeStreaming added to pending queue and client is notified. Queue size:%ld", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          id v42 = [*(id *)(a1 + 1912) count];
          int v70 = 134217984;
          uint64_t v71 = (uint64_t)v42;
          __int16 v43 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::handleAPNSMessage()", "%s\n", v43);
          if (v43 != buf) {
            free(v43);
          }
        }
LABEL_118:
        sub_100A9FA38(a1);
        sub_100AA0A2C(a1);
        sub_100AAAF10(a1);
        _Block_object_dispose(v72, 8);
        goto LABEL_70;
      }
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v44 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        id v45 = [v24 type];
        *(_DWORD *)uint64_t buf = 134349056;
        *(void *)&uint8_t buf[4] = v45;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "#EED2,handleAPNSMessage,device does not support request type: %{public}ld . Set error to CLEEDHelperErrorFeatureNotSupported", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        id v61 = [v24 type];
        int v70 = 134349056;
        uint64_t v71 = (uint64_t)v61;
        uint64_t v62 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::handleAPNSMessage()", "%s\n", v62);
        if (v62 != buf) {
          free(v62);
        }
      }
      [v24 setState:14];
      uint64_t v64 = 11;
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v46 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      *(void *)&uint8_t buf[4] = v64;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "#EED2,handleAPNSMessage,CLEEDRequest object created with an error: %ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v70 = 134217984;
      uint64_t v71 = v64;
      uint64_t v60 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::handleAPNSMessage()", "%s\n", v60);
      if (v60 != buf) {
        free(v60);
      }
    }
    [*(id *)(a1 + 1920) addObject:v24];
    goto LABEL_118;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  uint64_t v9 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#EED2,handleAPNSMessage,canHandleAPNSMessage retuns false, reject APNS message and early return", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    LOWORD(v74) = 0;
    uint64_t v47 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::handleAPNSMessage()", "%s\n", v47);
    if (v47 != buf) {
      free(v47);
    }
  }
  id v10 = *(void **)(a1 + 1848);
  if (v10)
  {

    *(void *)(a1 + 1848) = 0;
  }
}

void sub_100AA3484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  _Unwind_Resume(a1);
}

void sub_100AA3598(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1961))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v2 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2,processControlDataResponseEvent,fControlDataSendPending,sendControlData", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::handleControlDataResponseEvent()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    sub_100A9FA38(a1);
    *(_WORD *)(a1 + 1961) = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(a1 + 1962))
  {
LABEL_8:
    *(_DWORD *)(a1 + 1964) = 0;
    return;
  }
  if (*(int *)(a1 + 1964) > 2)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      int v6 = *(_DWORD *)(a1 + 1964) + 1;
      *(_DWORD *)uint64_t buf = 67109376;
      int v11 = v6;
      __int16 v12 = 1024;
      int v13 = 3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#EED2,processControlDataResponseEvent,fControlDataSendFailed,fControlDataSendRetryCount:%d,kEEDControlDataSendMaxRetry:%d. Not reattempting.", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::handleControlDataResponseEvent()", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    *(_DWORD *)(a1 + 1964) = 0;
    *(unsigned char *)(a1 + 1962) = 0;
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    BOOL v3 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      int v4 = *(_DWORD *)(a1 + 1964);
      *(_DWORD *)uint64_t buf = 67109376;
      int v11 = v4;
      __int16 v12 = 1024;
      int v13 = 3;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#EED2,processControlDataResponseEvent,fControlDataSendFailed,fControlDataSendRetryCount:%d,kEEDControlDataSendMaxRetry:%d,attempt sendControlData", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::handleControlDataResponseEvent()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    ++*(_DWORD *)(a1 + 1964);
    sub_100A9FA38(a1);
    *(unsigned char *)(a1 + 1961) = 0;
  }
}

void sub_100AA3A64(uint64_t a1)
{
  if (*(void *)(a1 + 2016))
  {
    uint64_t v2 = sub_1000A6958();
    sub_1004D258C(v2);
    uint64_t v3 = *(void *)sub_1000A6958();
    (*(void (**)(void))(v3 + 944))();
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v4 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 2016);
      *(_DWORD *)uint64_t buf = 138412290;
      uint64_t v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2,storeCoexMetricDataToCache,stored the Co-ex metric dictionary to cache:%@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1)
      {
LABEL_16:
        uint64_t v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::storeCoexMetricDataToCache()", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
        return;
      }
LABEL_18:
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      goto LABEL_16;
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v6 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#EED2,storeCoexMetricDataToCache, coexMetricDict nil", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_16;
      }
      goto LABEL_18;
    }
  }
}

void sub_100AA3D44(uint64_t a1)
{
  if (sub_100AB182C(a1))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v2 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2,handleAPNSMessageInExtendedSession,Received request when not in emergency call. reject the request and inform partner", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::handleAPNSMessageInExtendedSession()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    sub_100AB205C(a1, 14);
    uint64_t v3 = (void *)(a1 + 1848);
    int v4 = *(void **)(a1 + 1848);
    goto LABEL_15;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  uint64_t v5 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#EED2,handleAPNSMessageInExtendedSession,canHandleAPNSMessage retuns false, reject  APNS message and early return", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::handleAPNSMessageInExtendedSession()", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  int v4 = *(void **)(a1 + 1848);
  if (v4)
  {
    uint64_t v3 = (void *)(a1 + 1848);
LABEL_15:

    void *v3 = 0;
  }
}

void sub_100AA4030(uint64_t a1, id *a2)
{
  if (*a2)
  {
    if ([*a2 state] == (id)4) {
      [*a2 setState:2];
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v4 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = [*a2 type];
      id v6 = [*a2 state];
      *(_DWORD *)uint64_t buf = 134349312;
      id v9 = v5;
      __int16 v10 = 2050;
      id v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2,moveCurrentRequestToHandledQueueOnCallEnd,requestType:%{public}ld,requestState:%{public}ld", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      [*a2 type];
      [*a2 state];
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::moveCurrentRequestToHandledQueueOnCallEnd(CLEEDRequest **)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    [*(id *)(a1 + 1920) addObject:*a2];

    *a2 = 0;
  }
}

void sub_100AA4264(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 2088);
  if (v1 && (uint64_t v3 = *(void **)(a1 + 1984)) != 0)
  {
    uint64_t v4 = *(unsigned int *)(v1 + 108);
    *(_DWORD *)uint64_t buf = v4;
    if ((int)v4 <= 0)
    {
      IOPSGetPercentRemaining();
      uint64_t v3 = *(void **)(a1 + 1984);
      uint64_t v1 = *(void *)(a1 + 2088);
      uint64_t v4 = *(unsigned int *)buf;
    }
    [v3 submitCoexMetricToCAWithBatteryLevelAtCallStart:*(unsigned int *)(v1 + 104) batteryLevelAtCallEnd:v4];
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#EED2,submitCoexMetricToCAFromCoexMonitor,nil fEED2Report or fEEDCoexMonitor, early return", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::submitCoexMetricToCAFromCoexMonitor()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_100AA4438(uint64_t a1)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  uint64_t v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2CX, cleanupCoexMonitor", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::cleanupCoexMonitor()", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  if (*(void *)(a1 + 1968) && sub_100A988EC(a1) != 3) {
    [*(id *)(a1 + 1968) processMediaEndOfExtendedSessionNotification];
  }
  uint64_t v3 = *(void **)(a1 + 1984);
  if (v3)
  {

    *(void *)(a1 + 1984) = 0;
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v4 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2CX cleanupOnEmergencyCallEnd,fEEDCoexMonitor cleared", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::cleanupCoexMonitor()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  id v5 = *(void **)(a1 + 1992);
  if (v5)
  {

    *(void *)(a1 + 1992) = 0;
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v6 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#EED2CX cleanupOnEmergencyCallEnd,fEEDCoexMitigation cleared", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::cleanupCoexMonitor()", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
}

id sub_100AA485C(uint64_t a1)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  uint64_t v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2,submitEED2RequestDataToCA,entered", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    LOWORD(v33) = 0;
    id v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::submitEED2RequestDataToCA()", "%s\n", v27);
    if (v27 != buf) {
      free(v27);
    }
  }
  id obj = sub_100AA4FF0((void *)a1);
  id v3 = obj;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  id result = [obj countByEnumeratingWithState:&v36 objects:v40 count:16];
  id v5 = result;
  if (result)
  {
    uint64_t v29 = *(void *)v37;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v37 != v29) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void **)(*((void *)&v36 + 1) + 8 * (void)v6);
        uint64_t v8 = (char *)[v7 partnerID].UTF8String;
        *(_DWORD *)uint64_t buf = 209;
        sub_100134750(&buf[8], v8);
        int v42 = 6;
        id v9 = [(char *)[v7 psapID] UTF8String];
        int v43 = 210;
        sub_100134750(v44, v9);
        int v45 = 6;
        __int16 v10 = (char *)[v7 geofenceID];
        int v46 = 211;
        sub_100134750(v47, v10);
        int v48 = 6;
        unsigned int v11 = [v7 type];
        int v49 = 212;
        unsigned int v50 = v11;
        int v51 = 0;
        unsigned int v12 = [v7 requestStatusAtFirstUserResponse];
        int v52 = 213;
        unsigned int v53 = v12;
        int v54 = 0;
        unsigned int v13 = [v7 state];
        int v55 = 214;
        unsigned int v56 = v13;
        int v57 = 0;
        [v7 requestReceivedTime];
        unsigned int v15 = vcvtpd_s64_f64(v14 - *(double *)(a1 + 168));
        int v58 = 215;
        unsigned int v59 = v15;
        int v60 = 0;
        [v7 receivedTimeToFirstUserResponse];
        int v61 = 216;
        unsigned int v62 = vcvtpd_s64_f64(v16);
        int v63 = 0;
        [v7 receivedTimeToAcceptTime];
        int v64 = 217;
        unsigned int v65 = vcvtpd_s64_f64(v17);
        int v66 = 0;
        unsigned int v18 = [v7 numMediaSelectIterations];
        int v67 = 218;
        unsigned int v68 = v18;
        int v69 = 0;
        unsigned int v19 = [v7 requestTransmissionTime];
        int v70 = 219;
        unsigned int v71 = v19;
        int v72 = 0;
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        id v33 = 0;
        *(void *)int v74 = &v33;
        v74[8] = 0;
        id v33 = (char *)operator new(0x1B8uLL);
        uint64_t v34 = v33;
        uint64_t v35 = v33 + 440;
        uint64_t v34 = (unsigned char *)sub_100682A48((uint64_t)&v35, (uint64_t)buf, (uint64_t)&v73, (uint64_t)v33);
        for (uint64_t i = 408; i != -32; i -= 40)
          sub_100118010((uint64_t)&buf[i]);
        id v21 = *(void **)(a1 + 2096);
        memset(v32, 0, sizeof(v32));
        sub_100682C20(v32, (uint64_t)v33, (uint64_t)v34, 0xCCCCCCCCCCCCCCCDLL * ((v34 - v33) >> 3));
        [v21 setMeasurements:sub_10067C03C(v32)];
        *(void *)uint64_t buf = v32;
        sub_100682B1C((void ***)buf);
        id v22 = *(void **)(a1 + 2096);
        if (byte_10248A9BF < 0)
        {
          sub_1000DC48C(__p, (void *)xmmword_10248A9A8, *((unint64_t *)&xmmword_10248A9A8 + 1));
        }
        else
        {
          *(_OWORD *)std::string __p = xmmword_10248A9A8;
          uint64_t v31 = unk_10248A9B8;
        }
        [v22 submitEvent:sub_1007EB0E8((long long *)__p)];
        if (SHIBYTE(v31) < 0) {
          operator delete(__p[0]);
        }
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        id v23 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          id v24 = [v7 ID];
          *(_DWORD *)uint64_t buf = 138412290;
          *(void *)&uint8_t buf[4] = v24;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#EED2,submitEED2RequestDataToCA,metric submitted for request:%@", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          id v25 = [v7 ID];
          *(_DWORD *)int v74 = 138412290;
          *(void *)&v74[4] = v25;
          uint64_t v26 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::submitEED2RequestDataToCA()", "%s\n", v26);
          if (v26 != buf) {
            free(v26);
          }
        }
        *(void *)uint64_t buf = &v33;
        sub_100682B1C((void ***)buf);
        id v6 = (char *)v6 + 1;
      }
      while (v6 != v5);
      id result = [obj countByEnumeratingWithState:&v36 objects:v40 count:16];
      id v5 = result;
    }
    while (result);
  }
  return result;
}

void sub_100AA4EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a63 = (uint64_t)&a35;
  sub_100682B1C((void ***)&a63);
  _Unwind_Resume(a1);
}

void *sub_100AA4FF0(void *a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  id v3 = v2;
  if (a1[241]) {
    [v2 addObject:];
  }
  if (a1[242]) {
    [v3 addObject:];
  }
  uint64_t v4 = (void *)a1[239];
  if (v4 && [v4 count]) {
    [v3 addObjectsFromArray:a1[239]];
  }
  id v5 = (void *)a1[240];
  if (v5 && [v5 count]) {
    [v3 addObjectsFromArray:a1[240]];
  }
  if ([v3 count])
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v6 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 134349056;
      id v12 = [v3 count];
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#EED2,createEEDRequestsList,created list with %{public}ld requests", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      [v3 count];
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "NSArray<CLEEDRequest *> *CLEmergencyEED2::createEEDRequestsList()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v8 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#EED2,createEEDRequestsList,no eed Requests", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      __int16 v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "NSArray<CLEEDRequest *> *CLEmergencyEED2::createEEDRequestsList()", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }

    return 0;
  }
  return v3;
}

void sub_100AA5354(uint64_t a1)
{
  if (*(void *)(a1 + 1728))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v2 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2,#DSA,deregistering for DSA", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::deregisterForDispatchableSearchArea()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    *(unsigned char *)(a1 + 1760) = 0;
    [*(id *)(a1 + 1728) _stopFetchingContinuousPlaceInferences];
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v3 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#EED2,#DSA,not registered for DSA since we don't have an LM", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::deregisterForDispatchableSearchArea()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
}

BOOL sub_100AA5628(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  v9[0] = kSecAttrLabel;
  v9[1] = kSecClass;
  v10[0] = a2;
  v10[1] = kSecClassKey;
  v9[2] = kSecUseSystemKeychain;
  void v9[3] = kSecAttrIsPermanent;
  v10[2] = &__kCFBooleanTrue;
  v10[3] = &__kCFBooleanTrue;
  v9[4] = kSecReturnRef;
  v10[4] = &__kCFBooleanTrue;
  OSStatus v3 = SecItemCopyMatching((CFDictionaryRef)+[NSDictionary dictionaryWithObjects:v10 forKeys:v9 count:5], a3);
  if (v3)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v4 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      OSStatus v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#EED2,#Sec,failed to copy key from keychain,response,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::copyCachedKey(NSString *, SecKeyRef *)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return v3 == 0;
}

BOOL sub_100AA586C(uint64_t a1, uint64_t a2)
{
  v8[0] = kSecAttrLabel;
  v8[1] = kSecClass;
  v9[0] = a2;
  v9[1] = kSecClassKey;
  _DWORD v8[2] = kSecUseSystemKeychain;
  void v8[3] = kSecAttrIsPermanent;
  v9[2] = &__kCFBooleanTrue;
  void v9[3] = &__kCFBooleanTrue;
  OSStatus v2 = SecItemDelete((CFDictionaryRef)+[NSDictionary dictionaryWithObjects:v9 forKeys:v8 count:4]);
  if (v2)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    OSStatus v3 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      OSStatus v7 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#EED2,#Sec,failed to delete key from keychain,response,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::deleteCachedKey(NSString *)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  return v2 == 0;
}

BOOL sub_100AA5A94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v10[0] = kSecAttrLabel;
  v10[1] = kSecClass;
  v11[0] = a2;
  v11[1] = kSecClassKey;
  v10[2] = kSecUseSystemKeychain;
  v10[3] = kSecAttrIsPermanent;
  v11[2] = &__kCFBooleanTrue;
  void v11[3] = &__kCFBooleanTrue;
  v10[4] = kSecValueRef;
  void v10[5] = kSecAttrAccessible;
  v11[4] = a4;
  void v11[5] = a3;
  OSStatus v4 = SecItemAdd((CFDictionaryRef)+[NSDictionary dictionaryWithObjects:v11 forKeys:v10 count:6], 0);
  if (v4)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      OSStatus v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#EED2,#Sec,failed to add key to keychain,response,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      OSStatus v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::cacheKey(NSString *, NSString *, SecKeyRef)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  return v4 == 0;
}

BOOL sub_100AA5CE0(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  v9[0] = kSecAttrLabel;
  v9[1] = kSecClass;
  v10[0] = a2;
  v10[1] = kSecClassCertificate;
  v9[2] = kSecUseSystemKeychain;
  void v9[3] = kSecReturnRef;
  v10[2] = &__kCFBooleanTrue;
  v10[3] = &__kCFBooleanTrue;
  OSStatus v3 = SecItemCopyMatching((CFDictionaryRef)+[NSDictionary dictionaryWithObjects:v10 forKeys:v9 count:4], a3);
  if (v3)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    OSStatus v4 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      OSStatus v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#EED2,#Sec,failed to copy cert from keychain,response,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::copyCachedCert(NSString *, SecCertificateRef *)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return v3 == 0;
}

BOOL sub_100AA5F10(uint64_t a1, uint64_t a2)
{
  v8[0] = kSecAttrLabel;
  v8[1] = kSecClass;
  v9[0] = a2;
  v9[1] = kSecClassCertificate;
  _DWORD v8[2] = kSecUseSystemKeychain;
  v9[2] = &__kCFBooleanTrue;
  OSStatus v2 = SecItemDelete((CFDictionaryRef)+[NSDictionary dictionaryWithObjects:v9 forKeys:v8 count:3]);
  if (v2)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    OSStatus v3 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      OSStatus v7 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#EED2,#Sec,failed to delete cert,response,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::deleteCachedCert(NSString *)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  return v2 == 0;
}

BOOL sub_100AA612C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v10[0] = kSecAttrLabel;
  v10[1] = kSecClass;
  v11[0] = a2;
  v11[1] = kSecClassCertificate;
  v10[2] = kSecUseSystemKeychain;
  v10[3] = kSecValueRef;
  v11[2] = &__kCFBooleanTrue;
  void v11[3] = a4;
  void v10[4] = kSecAttrAccessible;
  v11[4] = a3;
  OSStatus v4 = SecItemAdd((CFDictionaryRef)+[NSDictionary dictionaryWithObjects:v11 forKeys:v10 count:5], 0);
  if (v4)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      OSStatus v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#EED2,#Sec,failed to add cert to keychain,response,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      OSStatus v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::cacheCert(NSString *, NSString *, SecCertificateRef)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  return v4 == 0;
}

void sub_100AA636C(void *a1)
{
  int v2 = sub_100AA6E30(a1);
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  if (v2)
  {
    SecCertificateNotValidBefore();
    uint64_t v3 = v5;
    SecCertificateNotValidAfter();
    uint64_t v4 = v6;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  OSStatus v7 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = a1[213];
    v9[0] = 68290050;
    __int16 v10 = 2082;
    v9[1] = 0;
    unsigned int v11 = "";
    __int16 v12 = 1026;
    int v13 = v2;
    __int16 v14 = 2050;
    uint64_t v15 = v3;
    __int16 v16 = 2050;
    uint64_t v17 = v4;
    __int16 v18 = 2050;
    uint64_t v19 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EED2,#BAA,current BAA info\", \"cert valid\":%{public}hhd, \"cert validity begins\":\"%{public}.1f\", \"cert validity ends\":\"%{public}.1f\", \"next cert request\":\"%{public}.1f\"}", (uint8_t *)v9, 0x36u);
  }
}

void sub_100AA64B0(void *a1)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  int v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,writing info to disk", buf, 2u);
  }
  uint64_t v3 = sub_10013D1A0(115, 2);
  if (v3)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    __int16 v18 = (char *)_os_log_send_and_compose_impl();
    uint64_t v3 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::writeCachedBaaInfo()", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  if (a1[210] && a1[211] && a1[212])
  {
    uint64_t v4 = sub_100AA586C(v3, @"com.apple.locationd.BAA.key");
    if ((v4 & 1) == 0)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v5 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,unable to delete existing BAA private key", buf, 2u);
      }
      uint64_t v4 = sub_10013D1A0(115, 2);
      if (v4)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        uint64_t v19 = (char *)_os_log_send_and_compose_impl();
        uint64_t v4 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::writeCachedBaaInfo()", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
    }
    uint64_t v6 = kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate;
    uint64_t v7 = sub_100AA5A94(v4, @"com.apple.locationd.BAA.key", kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate, a1[210]);
    if ((v7 & 1) == 0)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v8 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#EED2,#BAA,failed to add BAA private key to keychain", buf, 2u);
      }
      uint64_t v7 = sub_10013D1A0(115, 0);
      if (v7)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        id v20 = (char *)_os_log_send_and_compose_impl();
        uint64_t v7 = sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::writeCachedBaaInfo()", "%s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
      }
    }
    uint64_t v9 = sub_100AA5F10(v7, @"com.apple.locationd.BAA.leafCert");
    if ((v9 & 1) == 0)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      __int16 v10 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,unable to delete existing BAA leaf cert", buf, 2u);
      }
      uint64_t v9 = sub_10013D1A0(115, 2);
      if (v9)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        id v21 = (char *)_os_log_send_and_compose_impl();
        uint64_t v9 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::writeCachedBaaInfo()", "%s\n", v21);
        if (v21 != (char *)buf) {
          free(v21);
        }
      }
    }
    uint64_t v11 = sub_100AA612C(v9, @"com.apple.locationd.BAA.leafCert", v6, a1[211]);
    if ((v11 & 1) == 0)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      __int16 v12 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#EED2,#BAA,failed to add BAA leaf cert to keychain", buf, 2u);
      }
      uint64_t v11 = sub_10013D1A0(115, 0);
      if (v11)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        id v22 = (char *)_os_log_send_and_compose_impl();
        uint64_t v11 = sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::writeCachedBaaInfo()", "%s\n", v22);
        if (v22 != (char *)buf) {
          free(v22);
        }
      }
    }
    uint64_t v13 = sub_100AA5F10(v11, @"com.apple.locationd.BAA.intCert");
    if ((v13 & 1) == 0)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      __int16 v14 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,unable to delete existing BAA intermediate cert", buf, 2u);
      }
      uint64_t v13 = sub_10013D1A0(115, 2);
      if (v13)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        id v23 = (char *)_os_log_send_and_compose_impl();
        uint64_t v13 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::writeCachedBaaInfo()", "%s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
      }
    }
    if (!sub_100AA612C(v13, @"com.apple.locationd.BAA.intCert", v6, a1[212]))
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v15 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#EED2,#BAA,failed to add BAA intermediate cert to keychain", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        id v24 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::writeCachedBaaInfo()", "%s\n", v24);
        if (v24 != (char *)buf) {
          free(v24);
        }
      }
    }
  }
  uint64_t v16 = sub_1000A6958();
  sub_100163398(v16, @"BaaNextCertRequestTime", a1 + 213);
  uint64_t v17 = *(void *)sub_1000A6958();
  (*(void (**)(void))(v17 + 944))();
  sub_100AA636C(a1);
}

uint64_t sub_100AA6E30(void *a1)
{
  if (!a1[210]) {
    return 0;
  }
  if (!a1[211]) {
    return 0;
  }
  if (!a1[212]) {
    return 0;
  }
  CFAbsoluteTimeGetCurrent();
  if (!SecCertificateIsValid()) {
    return 0;
  }

  return SecCertificateIsValid();
}

void *sub_100AA6EB0@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 4) {
    int v2 = "ReasonUnknown";
  }
  else {
    int v2 = off_1022DBF60[a1];
  }
  return sub_100134750(a2, v2);
}

void sub_100AA6EDC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1676))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v2 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,unregistering BAA cert request activity", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::unregisterBaaCertRequestActivity()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    xpc_activity_unregister((const char *)[@"com.apple.locationd.BAA" UTF8String]);
    *(unsigned char *)(a1 + 1676) = 0;
  }
}

BOOL sub_100AA708C(uint64_t a1, int a2)
{
  double v4 = *(double *)(a1 + 1704);
  double Current = CFAbsoluteTimeGetCurrent();
  int v6 = sub_100AA6E30((void *)a1);
  char v7 = v6;
  double v8 = 0.0;
  double v9 = 0.0;
  if (v6)
  {
    SecCertificateNotValidBefore();
    double v9 = v10;
    SecCertificateNotValidAfter();
    double v8 = v11;
  }
  __int16 v12 = (int *)sub_100A81300((int *)(a1 + 1448));
  int v13 = v12[102];
  int v14 = v12[103];
  int v15 = v12[104];
  switch(a2)
  {
    case 0:
    case 1:
      double v16 = *(double *)(a1 + 1704);
      if (v7)
      {
        double v17 = v9 + (double)v14;
        if (v16 < v17 || v16 > v9 + (double)v15)
        {
          double v19 = v17 + (double)(v15 - v14) * ((double)arc4random() / 4294967300.0);
          goto LABEL_24;
        }
        double v19 = Current;
        if (Current > v16) {
          goto LABEL_24;
        }
        goto LABEL_25;
      }
      double v25 = (double)v12[101];
      if (v16 == 0.0 || v16 > Current + v25) {
        goto LABEL_37;
      }
      if (Current > v16) {
        goto LABEL_39;
      }
      goto LABEL_40;
    case 2:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v20 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "#EED2,#BAA,shouldn't be checking next cert request time during SessionStart", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        id v21 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::checkNextCertRequestTime(CertRequestStatusCheckReason)", "%s\n", v21);
        if (v21 != (char *)buf) {
          free(v21);
        }
      }
      goto LABEL_20;
    case 3:
      *(double *)(a1 + 1704) = v9 + (double)v14 + (double)(v15 - v14) * ((double)arc4random() / 4294967300.0);
      goto LABEL_20;
    case 4:
      int v22 = v12[105];
      double v23 = (double)arc4random() / 4294967300.0;
      if ((v7 & 1) == 0)
      {
        double Current = Current + (double)v13 * v23;
        goto LABEL_39;
      }
      double v19 = Current + (double)v22 * v23;
LABEL_24:
      *(double *)(a1 + 1704) = v19;
      double v16 = v19;
LABEL_25:
      if (v16 > v8)
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        id v24 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#Warning #EED2,#BAA,next cert request time places us beyond expiration of current cert so modifying", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          uint64_t v29 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::checkNextCertRequestTime(CertRequestStatusCheckReason)", "%s\n", v29);
          if (v29 != (char *)buf) {
            free(v29);
          }
        }
        double v16 = (Current + v8) * 0.5;
        *(double *)(a1 + 1704) = v16;
        double v25 = (double)v13;
        if (v16 - Current < (double)v13)
        {
LABEL_37:
          double Current = Current + v25 * ((double)arc4random() / 4294967300.0);
LABEL_39:
          *(double *)(a1 + 1704) = Current;
          double v16 = Current;
        }
      }
LABEL_40:
      if (v4 != v16)
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        uint64_t v26 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,updated next cert request time", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          double v28 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::checkNextCertRequestTime(CertRequestStatusCheckReason)", "%s\n", v28);
          if (v28 != (char *)buf) {
            free(v28);
          }
        }
        sub_100AA64B0((void *)a1);
      }
      return v4 != v16;
    default:
LABEL_20:
      double v16 = *(double *)(a1 + 1704);
      if ((v7 & 1) == 0) {
        goto LABEL_40;
      }
      goto LABEL_25;
  }
}

void sub_100AA7688(uint64_t a1)
{
  if (sub_100A80850(a1 + 1448))
  {
    double v2 = *(double *)(a1 + 1704);
    double Current = CFAbsoluteTimeGetCurrent();
    sub_1000C7F88(buf);
    *(void *)double v11 = 0;
    if (sub_1004D0B90(*(uint64_t *)buf, "BAAGracePeriod", v11)) {
      int64_t v4 = *(void *)v11;
    }
    else {
      int64_t v4 = 600;
    }
    if (*(void *)&buf[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
    }
    xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_BOOL(v5, XPC_ACTIVITY_REPEATING, 0);
    xpc_dictionary_set_BOOL(v5, XPC_ACTIVITY_ALLOW_BATTERY, 1);
    xpc_dictionary_set_BOOL(v5, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 1);
    xpc_dictionary_set_string(v5, XPC_ACTIVITY_NETWORK_TRANSFER_DIRECTION, XPC_ACTIVITY_NETWORK_TRANSFER_DIRECTION_DOWNLOAD);
    xpc_dictionary_set_BOOL(v5, XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY, 0);
    xpc_dictionary_set_string(v5, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
    xpc_dictionary_set_int64(v5, XPC_ACTIVITY_DELAY, (uint64_t)(v2 - Current) & ~((uint64_t)(v2 - Current) >> 63));
    xpc_dictionary_set_int64(v5, XPC_ACTIVITY_GRACE_PERIOD, v4);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v6 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 134349312;
      *(void *)&uint8_t buf[4] = (uint64_t)(v2 - Current) & ~((uint64_t)(v2 - Current) >> 63);
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&buf[14] = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,registering BAA cert request activity,delay,%{public}lld,gracePeriod,%{public}lld", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      *(_DWORD *)double v11 = 134349312;
      *(void *)&v11[4] = (uint64_t)(v2 - Current) & ~((uint64_t)(v2 - Current) >> 63);
      __int16 v12 = 2050;
      int64_t v13 = v4;
      double v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::registerBaaCertRequestActivity()", "%s\n", v8);
      if (v8 != buf) {
        free(v8);
      }
    }
    *(unsigned char *)(a1 + 1676) = 1;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_100AA7F50;
    handler[3] = &unk_1022C9C78;
    handler[4] = a1;
    xpc_activity_register((const char *)[@"com.apple.locationd.BAA" UTF8String], v5, handler);
    xpc_release(v5);
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    char v7 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#EED2,#BAA,requesting of BAA certs not allowed by config,not starting XPC activity", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      *(_WORD *)double v11 = 0;
      double v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::registerBaaCertRequestActivity()", "%s\n", v9);
      if (v9 != buf) {
        free(v9);
      }
    }
  }
}

void sub_100AA7B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    sub_1000DB0A0(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_100AA7B64(uint64_t a1)
{
  double v2 = (int *)(a1 + 1448);
  if (sub_100A80850(a1 + 1448))
  {
    uint64_t v3 = (*((_DWORD *)sub_100A81300(v2) + 100) / 60);
    v8[0] = kMAOptionsBAAValidity;
    v9[0] = +[NSNumber numberWithInt:v3];
    v9[1] = &__kCFBooleanTrue;
    v8[1] = kMAOptionsBAASCRTAttestation;
    _DWORD v8[2] = kMAOptionsBAAIgnoreExistingKeychainItems;
    _DWORD v9[2] = &__kCFBooleanTrue;
    +[NSDictionary dictionaryWithObjects:v9 forKeys:v8 count:3];
    *(CFAbsoluteTime *)(a1 + 1704) = CFAbsoluteTimeGetCurrent();
    sub_100AA64B0((void *)a1);
    *(unsigned char *)(a1 + 1677) = 1;
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int64_t v4 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,requesting cert", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::requestBaaCert()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    [objc_msgSend(*(id *)(a1 + 8), "silo") queue];
    DeviceIdentityIssueClientCertificateWithCompletion();
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    xpc_object_t v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#EED2,#BAA,attempted to request BAA cert when not configured to do so", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      char v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::requestBaaCert()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

void sub_100AA7F50(uint64_t a1, xpc_activity_t activity)
{
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_activity_state_t state = xpc_activity_get_state(activity);
  if (state == 2)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int64_t v4 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,cert request activity handler triggered", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      LOWORD(v11) = 0;
      double v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::registerBaaCertRequestActivity()_block_invoke", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    xpc_object_t v5 = [objc_msgSend(*(id *)(v2 + 8), "silo") queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100AA8298;
    block[3] = &unk_1022A3020;
    block[4] = v2;
    dispatch_async(v5, block);
  }
  else
  {
    int v6 = state;
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    char v7 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      int v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#EED2,#BAA,cert request activity handler triggered with unexpected state %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v11 = 67240192;
      int v12 = v6;
      double v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::registerBaaCertRequestActivity()_block_invoke", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
}

void sub_100AA8298(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(unsigned char *)(v1 + 1676) = 0;
  sub_100AA7B64(v1);
}

void sub_100AA82A4(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7 = *(void *)(a1 + 32);
  [*(id *)(v7 + 8) silo];
  *(unsigned char *)(v7 + 1677) = 0;

  sub_100AA8304((void *)v7, a2, a3, v8, a4);
}

void sub_100AA8304(void *a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v9 = sub_100AA6E30(a1);
  if (a5)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    double v10 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67240706;
      unsigned int v29 = [a5 code];
      __int16 v30 = 2082;
      uint64_t v31 = (const char *)[a5 domain];
      __int16 v32 = 2082;
      id v33 = [[objc_msgSend(a5, "localizedDescription") UTF8String];
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#EED2,#BAA,error in response to cert request,error code,%{public}d,domain,%{public}s,reason,%{public}s\n", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      [a5 code];
      [objc_msgSend(a5, "domain") UTF8String];
      [objc_msgSend(a5, "localizedDescription") UTF8String];
      double v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::handleBaaCertResponse(SecKeyRef, NSArray *, int32_t, NSError *)", "%s\n", v25);
      if (v25 != (char *)buf) {
        free(v25);
      }
    }
    CFStringRef v11 = +[NSString stringWithFormat:@"ErrorDomain:%s,ErrorCode:%d", objc_msgSend(objc_msgSend(a5, "domain"), "UTF8String"), objc_msgSend(a5, "code")];
    sub_100A8B154(a1, 4);
  }
  else if ((unint64_t)[a3 count] > 1)
  {
    int64_t v13 = (__SecCertificate *)[a3 objectAtIndexedSubscript:0];
    if (sub_100AA89AC((uint64_t)v13, (__SecKey *)a2, v13))
    {
      int v14 = (const void *)a1[210];
      if (v14) {
        CFRelease(v14);
      }
      int v15 = (const void *)a1[211];
      if (v15) {
        CFRelease(v15);
      }
      double v16 = (const void *)a1[212];
      if (v16) {
        CFRelease(v16);
      }
      a1[210] = a2;
      CFRetain(a2);
      id v17 = [a3 objectAtIndexedSubscript:0];
      a1[211] = v17;
      CFRetain(v17);
      id v18 = [a3 objectAtIndexedSubscript:1];
      a1[212] = v18;
      CFRetain(v18);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      double v19 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        SecCertificateNotValidBefore();
        id v21 = v20;
        SecCertificateNotValidAfter();
        *(_DWORD *)uint64_t buf = 68289538;
        unsigned int v29 = 0;
        __int16 v30 = 2082;
        uint64_t v31 = "";
        __int16 v32 = 2050;
        id v33 = v21;
        __int16 v34 = 2050;
        uint64_t v35 = v22;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EED2,#BAA,cert request successful\", \"validity starts\":\"%{public}.1f\", \"validity ends\":\"%{public}.1f\"}", buf, 0x26u);
      }
      sub_100AA64B0(a1);
      sub_100A8B154(a1, 3);
      uint64_t v23 = a1[221];
      if (v23) {
        sub_10139CD38(v23);
      }
      sub_100A8CA74((uint64_t)(a1 + 192), 21);
      CFStringRef v11 = @"Success";
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v24 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "#EED2,#BAA,could not ceate and verify signature using received leaf certificate and key", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        id v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::handleBaaCertResponse(SecKeyRef, NSArray *, int32_t, NSError *)", "%s\n", v27);
        if (v27 != (char *)buf) {
          free(v27);
        }
      }
      sub_100A8B154(a1, 4);
      CFStringRef v11 = @"CertificateVerifyError";
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v12 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#EED2,#BAA,returned certificate array does not include both leaf and intermediate certs", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::handleBaaCertResponse(SecKeyRef, NSArray *, int32_t, NSError *)", "%s\n", v26);
      if (v26 != (char *)buf) {
        free(v26);
      }
    }
    sub_100A8B154(a1, 4);
    CFStringRef v11 = @"CertificateCountError";
  }
  sub_100AA9174((uint64_t)a1, (uint64_t)v11, v9);
}

uint64_t sub_100AA89AC(uint64_t a1, __SecKey *a2, __SecCertificate *a3)
{
  xpc_object_t v5 = +[NSMutableData dataWithLength:256];
  if (SecRandomCopyBytes(kSecRandomDefault, 0x100uLL, [(NSMutableData *)v5 mutableBytes]))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v6 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning #EED2,verifyKeyAndBaaLeafCertPair,failed to sign dummy data", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      LOWORD(v34) = 0;
      uint64_t v31 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::verifyKeyAndBaaLeafCertPair(SecKeyRef, SecCertificateRef)", "%s\n", v31);
      if (v31 != (char *)buf) {
        free(v31);
      }
    }
    return 1;
  }
  CFErrorRef error = 0;
  CFDataRef v8 = SecKeyCreateSignature(a2, kSecKeyAlgorithmECDSASignatureMessageX962SHA256, (CFDataRef)v5, &error);
  if (error)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v9 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      unsigned int v10 = [(__CFError *)error code];
      id v11 = [[-[__CFError domain](error, "domain") UTF8String];
      id v12 = [[-[__CFError localizedDescription](error, "localizedDescription") UTF8String];
      *(_DWORD *)uint64_t buf = 67109634;
      unsigned int v41 = v10;
      __int16 v42 = 2080;
      id v43 = v11;
      __int16 v44 = 2080;
      id v45 = v12;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#EED2,verifyKeyAndBaaLeafCertPair,failed to produce signature for data,error code,%d,domain,%s,reason,%s", buf, 0x1Cu);
    }
    BOOL v7 = 0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      unsigned int v13 = [(__CFError *)error code];
      id v14 = [[-[__CFError domain](error, "domain") UTF8String];
      id v15 = [[-[__CFError localizedDescription](error, "localizedDescription") UTF8String];
      int v34 = 67109634;
      unsigned int v35 = v13;
      __int16 v36 = 2080;
      id v37 = v14;
      __int16 v38 = 2080;
      id v39 = v15;
LABEL_17:
      double v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::verifyKeyAndBaaLeafCertPair(SecKeyRef, SecCertificateRef)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
      return 0;
    }
    return v7;
  }
  CFDataRef v17 = v8;
  if (v8)
  {
    id v18 = SecCertificateCopyKey(a3);
    if (v18)
    {
      double v19 = v18;
      int v20 = SecKeyVerifySignature(v18, kSecKeyAlgorithmECDSASignatureMessageX962SHA256, (CFDataRef)v5, v17, &error);
      CFRelease(v19);
      if (!error)
      {
        BOOL v7 = v20 != 0;

        return v7;
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v21 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        unsigned int v22 = [(__CFError *)error code];
        id v23 = [[-[__CFError domain](error, "domain") UTF8String];
        id v24 = [[-[__CFError localizedDescription](error, "localizedDescription") UTF8String];
        *(_DWORD *)uint64_t buf = 67109634;
        unsigned int v41 = v22;
        __int16 v42 = 2080;
        id v43 = v23;
        __int16 v44 = 2080;
        id v45 = v24;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "#EED2,verifyKeyAndBaaLeafCertPair,unable to verify signature,error code,%d,domain,%s,reason,%s", buf, 0x1Cu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_43;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      unsigned int v25 = [(__CFError *)error code];
      id v26 = [[-[__CFError domain](error, "domain") UTF8String];
      id v27 = [[-[__CFError localizedDescription](error, "localizedDescription") UTF8String];
      int v34 = 67109634;
      unsigned int v35 = v25;
      __int16 v36 = 2080;
      id v37 = v26;
      __int16 v38 = 2080;
      id v39 = v27;
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      unsigned int v29 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "#EED2,verifyKeyAndBaaLeafCertPair,failed to extract public key from cert", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_43;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      LOWORD(v34) = 0;
    }
    __int16 v32 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::verifyKeyAndBaaLeafCertPair(SecKeyRef, SecCertificateRef)", "%s\n", v32);
    if (v32 != (char *)buf) {
      free(v32);
    }
LABEL_43:

    return 0;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  double v28 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "#EED2,verifyKeyAndBaaLeafCertPair,failed to sign dummy data", buf, 2u);
  }
  BOOL v7 = 0;
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    LOWORD(v34) = 0;
    goto LABEL_17;
  }
  return v7;
}

void sub_100AA9174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sub_100A80850(a1 + 1448))
  {
    id v6 = objc_alloc_init((Class)NSMutableDictionary);
    id v7 = v6;
    sub_100AAF564(a1, &v7);
    [v6 setValue:a2 forKey:@"result"];
    [v6 setValue:[NSNumber numberWithBool:a3] forKey:@"certAvailable"];
    AnalyticsSendEvent();
  }
}

void sub_100AA9224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  uint64_t v5 = *(unsigned __int8 *)(a3 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a3 + 8);
  }
  BOOL v6 = v5 == 0;
  if (v5) {
    int v7 = 3;
  }
  else {
    int v7 = 1;
  }
  if (v6 || v4 == 0) {
    int v9 = 2;
  }
  else {
    int v9 = 4;
  }
  if (v4) {
    int v10 = v9;
  }
  else {
    int v10 = v7;
  }
  LODWORD(v17) = 31;
  v18[0] = v10;
  v18[6] = 0;
  id v14 = 0;
  v15[0] = 0;
  unsigned int v13 = 0;
  v15[1] = &v13;
  char v16 = 0;
  unsigned int v13 = (char *)operator new(0x28uLL);
  id v14 = v13;
  v15[0] = v13 + 40;
  id v14 = (unsigned char *)sub_100682A48((uint64_t)v15, (uint64_t)&v17, (uint64_t)&v19, (uint64_t)v13);
  sub_100118010((uint64_t)v18);
  id v11 = *(void **)(a1 + 2096);
  memset(v12, 0, sizeof(v12));
  sub_100682C20(v12, (uint64_t)v13, (uint64_t)v14, 0xCCCCCCCCCCCCCCCDLL * ((v14 - v13) >> 3));
  [v11 setMeasurements:sub_10067C03C(v12)];
  CFDataRef v17 = (void **)v12;
  sub_100682B1C(&v17);
  CFDataRef v17 = (void **)&v13;
  sub_100682B1C(&v17);
}

void sub_100AA939C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  a17 = (void **)&a12;
  sub_100682B1C(&a17);
  _Unwind_Resume(a1);
}

void sub_100AA93F0(uint64_t a1, int a2, uint64_t *a3)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1))
  {
    uint64_t v6 = *(void *)(a1 + 104);
    if (!v6) {
      sub_10015E48C();
    }
    (*(void (**)(void *__return_ptr))(*(void *)v6 + 48))(v39);
    sub_1014831F0(a1, (uint64_t)v39);
    if (sub_1000E6DB4((uint64_t)v39))
    {
      ++*(_DWORD *)(a1 + 412);
      uint64_t v7 = *(void *)(a1 + 2088);
      if (v7) {
        ++*(_DWORD *)(v7 + 8);
      }
      id v8 = sub_100AA9C48((uint64_t)v39);
      id v9 = sub_100AAA07C(a1, a3);
      [v9 setValue:v8 forKey:@"location"];

      id v10 = sub_100AAA33C((_DWORD *)a1);
      [v9 setValue:v10 forKey:@"internal"];

      if (*(void *)(a1 + 1664))
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        id v11 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          id v12 = a2 ? "Companion" : "Native";
          sub_100134750(__p, v12);
          unsigned int v13 = v50 >= 0 ? __p : (void **)__p[0];
          int v14 = *(_DWORD *)(a1 + 1672);
          *(_DWORD *)uint64_t buf = 136446466;
          *(void *)&uint8_t buf[4] = v13;
          __int16 v42 = 1026;
          int v43 = v14;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#EED2 POSTing LIS data for %{public}s number message %{public}d", buf, 0x12u);
          if (v50 < 0) {
            operator delete(__p[0]);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          if (a2) {
            int v34 = "Companion";
          }
          else {
            int v34 = "Native";
          }
          sub_100134750(buf, v34);
          if (v44 >= 0) {
            unsigned int v35 = buf;
          }
          else {
            unsigned int v35 = *(unsigned char **)buf;
          }
          int v36 = *(_DWORD *)(a1 + 1672);
          int v45 = 136446466;
          int v46 = v35;
          __int16 v47 = 1026;
          int v48 = v36;
          id v37 = (char *)_os_log_send_and_compose_impl();
          if (v44 < 0) {
            operator delete(*(void **)buf);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::sendLocation(NumberType, const std::string &)", "%s\n", v37);
          if (v37 != (char *)__p) {
            free(v37);
          }
        }
        sub_100AAA8A4(a1, a2, (uint64_t)v9, (uint64_t)v39);
      }
      else
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        double v28 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "#EED2 can't POST message due to invalid URL session", (uint8_t *)__p, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          *(_WORD *)uint64_t buf = 0;
          __int16 v38 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::sendLocation(NumberType, const std::string &)", "%s\n", v38);
          if (v38 != (char *)__p) {
            free(v38);
          }
        }
        uint64_t v29 = sub_1014832B8(a1, (unsigned int *)(a1 + 340), 3);
        uint64_t v30 = *(void *)(a1 + 2088);
        if (v30)
        {
          unsigned int v31 = sub_100AAFCC0(v29, *(_DWORD *)(v30 + 24));
          int v32 = *(_DWORD *)(v30 + 24);
          if (v31 >= 2) {
            int v32 = 2;
          }
          *(_DWORD *)(v30 + 24) = v32;
        }
      }

      sub_100AAAF10(a1);
    }
    else
    {
      ++*(_DWORD *)(a1 + 416);
      uint64_t v22 = sub_1014832B8(a1, (unsigned int *)(a1 + 340), 2);
      uint64_t v23 = *(void *)(a1 + 2088);
      if (v23)
      {
        ++*(_DWORD *)(v23 + 12);
        unsigned int v24 = sub_100AAFCC0(v22, *(_DWORD *)(v23 + 24));
        int v25 = *(_DWORD *)(v23 + 24);
        if (v24 >= 5) {
          int v25 = 1;
        }
        *(_DWORD *)(v23 + 24) = v25;
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v26 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#EED2 no fix available to send in LIS payload, not sending", (uint8_t *)__p, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        *(_WORD *)uint64_t buf = 0;
        id v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::sendLocation(NumberType, const std::string &)", "%s\n", v27);
        if (v27 != (char *)__p) {
          free(v27);
        }
      }
    }
    if (v40) {
      sub_1000DB0A0(v40);
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v15 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "#EED2 attempted to send location when not enabled", (uint8_t *)__p, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      LOWORD(v39[0]) = 0;
      id v33 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::sendLocation(NumberType, const std::string &)", "%s\n", v33);
      if (v33 != (char *)__p) {
        free(v33);
      }
    }
    uint64_t v16 = sub_1014832B8(a1, (unsigned int *)(a1 + 340), 12);
    uint64_t v17 = *(void *)(a1 + 2088);
    if (v17)
    {
      unsigned int v19 = *(_DWORD *)(v17 + 24);
      id v18 = (int *)(v17 + 24);
      unsigned int v20 = sub_100AAFCC0(v16, v19);
      int v21 = *v18;
      if (v20 >= 2) {
        int v21 = 4;
      }
      *id v18 = v21;
    }
  }
}

void sub_100AA9BBC(_Unwind_Exception *a1)
{
  if (STACK[0x2C0]) {
    sub_1000DB0A0((std::__shared_weak_count *)STACK[0x2C0]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100AA9BF8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    sub_10015E48C();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

id sub_100AA9C48(uint64_t a1)
{
  if (sub_1000E6DB4(a1))
  {
    id v2 = objc_alloc_init((Class)NSMutableDictionary);
    double v3 = *(double *)(a1 + 184);
    uint64_t v4 = (double *)sub_100BCE65C();
    uint64_t v5 = (double *)(a1 + 76);
    if (v3 != v4[3]) {
      uint64_t v5 = (double *)(a1 + 184);
    }
    [+[NSDate dateWithTimeIntervalSinceReferenceDate:*v5] timeIntervalSince1970];
    unint64_t v7 = llround(v6);
    [v2 setValue:[+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v7) forKey:@"timestamp"];
    double v8 = round(*(double *)(a1 + 4) * 100000.0) / 100000.0;
    double v9 = round(*(double *)(a1 + 12) * 100000.0) / 100000.0;
    [v2 setValue:[NSNumber numberWithDouble:v8] forKey:@"latitude"];
    [v2 setValue:[NSNumber numberWithDouble:v9] forKey:@"longitude"];
    double v15 = 0.0;
    v16[0] = 0.0;
    sub_101479590(a1, v16, &v15);
    v16[0] = round(v16[0] * 10.0) / 10.0;
    [v2 setValue:[NSNumber numberWithDouble:hunc] forKey:@"hunc"];
    double v10 = 0.0;
    if (sub_10147944C(a1))
    {
      double v10 = round((*(double *)(a1 + 28) + *(float *)(a1 + 476)) * 10.0) / 10.0;
      double v15 = round(v15 * 10.0) / 10.0;
      [v2 setValue:[NSNumber numberWithDouble:v10] forKey:@"altitude"];
      [v2 setValue:[NSNumber numberWithDouble:v15] forKey:@"vunc"];
    }
    [v2 setValue:&off_102392F78 forKey:@"confidence"];
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v11 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68290563;
      int v18 = 0;
      __int16 v19 = 2082;
      unsigned int v20 = "";
      __int16 v21 = 2050;
      unint64_t v22 = v7;
      __int16 v23 = 2049;
      double v24 = v8;
      __int16 v25 = 2049;
      double v26 = v9;
      __int16 v27 = 2049;
      double v28 = v10;
      __int16 v29 = 2050;
      double v30 = v16[0];
      __int16 v31 = 2050;
      double v32 = v15;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EED2 created location dict\", \"timestamp\":%{public}lld, \"latitude\":\"%{private}f\", \"longitude\":\"%{private}f\", \"altitude (HAE)\":\"%{private}f\", \"hunc\":\"%{public}f\", \"vunc\":\"%{public}f\"}", buf, 0x4Eu);
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v12 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#EED2,location is not valid so not creating location dict", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      LOWORD(v16[0]) = 0;
      int v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static NSDictionary *CLEmergencyEED2::createLocationDict(const GNSS::DaemonLocation &)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    return 0;
  }
  return v2;
}

id sub_100AAA07C(uint64_t a1, uint64_t *a2)
{
  [+[NSDate dateWithTimeIntervalSinceReferenceDate:*(double *)(a1 + 168)] timeIntervalSince1970];
  double v5 = v4;
  sub_100134750(__p, off_1022DBF88[*(int *)(a1 + 132)]);
  id v6 = objc_alloc_init((Class)NSMutableDictionary);
  if (*((char *)a2 + 23) >= 0) {
    unint64_t v7 = a2;
  }
  else {
    unint64_t v7 = (uint64_t *)*a2;
  }
  [v6 setValue:[NSString stringWithUTF8String:v7] forKey:@"call_ID"];
  unint64_t v8 = llround(v5);
  [v6 setValue:[NSNumber numberWithLongLong:v8] forKey:@"session_start_time"];
  if (v18 >= 0) {
    double v9 = __p;
  }
  else {
    double v9 = (void **)__p[0];
  }
  [v6 setValue:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9) forKey:@"medium"];
  if (*(double *)(a1 + 1896) > 0.0)
  {
    [+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:") timeIntervalSince1970];
    [v6 setValue:[NSNumber numberWithLongLong:llround(v10)] forKey:@"session_end_time"];
  }
  id v11 = sub_100AABAD0(a1);
  if (v11) {
    [v6 setValue:v11 forKey:@"capabilities"];
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  id v12 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0) {
      unsigned int v13 = a2;
    }
    else {
      unsigned int v13 = (uint64_t *)*a2;
    }
    int v14 = __p;
    if (v18 < 0) {
      int v14 = (void **)__p[0];
    }
    uint64_t v15 = *(void *)(a1 + 1896);
    *(_DWORD *)uint64_t buf = 68290307;
    int v20 = 0;
    __int16 v21 = 2082;
    unint64_t v22 = "";
    __int16 v23 = 2081;
    double v24 = v13;
    __int16 v25 = 2050;
    unint64_t v26 = v8;
    __int16 v27 = 2082;
    double v28 = v14;
    __int16 v29 = 2050;
    uint64_t v30 = v15;
    __int16 v31 = 2114;
    double v32 = v11;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EED2 created LIS dict\", \"phone number\":%{private, location:escape_only}s, \"session start time\":%{public}lld, \"medium\":%{public, location:escape_only}s, \"Call End time Absolute\":\"%{public}.1f\", \"request capabilitites\":%{public, location:escape_only}@}", buf, 0x44u);
  }
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  return v6;
}

void sub_100AAA310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

id sub_100AAA33C(_DWORD *a1)
{
  int v2 = a1[362];
  double v3 = (unsigned int *)sub_100A96A4C((uint64_t)(a1 + 8), v2);
  id v4 = objc_alloc_init((Class)NSMutableDictionary);
  [v4 setValue:[NSNumber numberWithUnsignedInt:a1[418]] forKey:@"message_ID"];
  [v4 setValue:[NSNumber numberWithInt:a1[362]] forKey:@"sim"];
  [v4 setValue:[NSNumber numberWithInt:*v3] forKey:@"rat"];
  sub_100134750(__p, "carrier");
  double v5 = sub_100A80F3C((uint64_t)(a1 + 362), v2, (uint64_t *)__p);
  if (*((char *)v5 + 55) < 0) {
    sub_1000DC48C(&__dst, (void *)v5[4], v5[5]);
  }
  else {
    __uuid_t dst = *(std::string *)(v5 + 4);
  }
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  char v7 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __dst.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    std::string::assign(&__dst, "Unavailable");
    char v7 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  if (v7 >= 0) {
    p_uuid_t dst = &__dst;
  }
  else {
    p_uuid_t dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  [v4 setValue:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_dst) forKey:@"sim_bundle_id"];
  sub_100134750(v29, "operator");
  double v9 = sub_100A80F3C((uint64_t)(a1 + 362), v2, (uint64_t *)v29);
  if (*((char *)v9 + 55) < 0) {
    sub_1000DC48C(&v31, (void *)v9[4], v9[5]);
  }
  else {
    std::string v31 = *(std::string *)(v9 + 4);
  }
  if (v30 < 0) {
    operator delete(v29[0]);
  }
  std::string::size_type v10 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  char v11 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v10 = v31.__r_.__value_.__l.__size_;
  }
  if (!v10)
  {
    std::string::assign(&v31, "Unavailable");
    char v11 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  }
  if (v11 >= 0) {
    id v12 = &v31;
  }
  else {
    id v12 = (std::string *)v31.__r_.__value_.__r.__words[0];
  }
  [v4 setValue:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12) forKey:@"operator_bundle_id"];
  unsigned int v13 = sub_101021560(v3[8]);
  [v4 setValue:v13 forKey:@"sim_country"];
  int v14 = sub_101021560(v3[2]);
  [v4 setValue:v14 forKey:@"operator_country"];
  sub_100103240();
  sub_10073BD08((uint64_t)buf);
  if (v39 >= 0) {
    uint64_t v15 = buf;
  }
  else {
    uint64_t v15 = *(uint8_t **)buf;
  }
  uint64_t v16 = +[NSString stringWithUTF8String:v15];
  if (SHIBYTE(v39) < 0) {
    operator delete(*(void **)buf);
  }
  [v4 setValue:v16 forKey:@"product_type"];
  sub_100103240();
  uint64_t v17 = sub_10073B56C();
  [v4 setValue:[NSNumber numberWithInt:v17] forKey:@"release_type"];
  [v4 setValue:[NSNumber numberWithInt:sub_10101AE34(a1[446])] forKey:@"trigger_type"];
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  char v18 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v19 = a1[418];
    LODWORD(v27) = a1[362];
    HIDWORD(v27) = *v3;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v20 = &__dst;
    }
    else {
      int v20 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    __int16 v21 = [(NSString *)v13 UTF8String];
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v22 = &v31;
    }
    else {
      unint64_t v22 = (std::string *)v31.__r_.__value_.__r.__words[0];
    }
    __int16 v23 = [(NSString *)v14 UTF8String];
    double v24 = [(NSString *)v16 UTF8String];
    int v25 = a1[446];
    *(_DWORD *)uint64_t buf = 68291587;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v36 = 2082;
    id v37 = "";
    __int16 v38 = 1026;
    int v39 = v19;
    __int16 v40 = 1026;
    int v41 = v28;
    __int16 v42 = 1026;
    int v43 = HIDWORD(v28);
    __int16 v44 = 2082;
    int v45 = v20;
    __int16 v46 = 2082;
    __int16 v47 = v21;
    __int16 v48 = 2082;
    int v49 = v22;
    __int16 v50 = 2082;
    int v51 = v23;
    __int16 v52 = 2081;
    unsigned int v53 = v24;
    __int16 v54 = 1026;
    int v55 = v17;
    __int16 v56 = 1026;
    int v57 = v25;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EED2 created internal dict\", \"message_ID\":%{public}d, \"sim\":%{public}d, \"rat\":%{public}d, \"sim_bundle_id\":%{public, location:escape_only}s, \"sim_country\":%{public, location:escape_only}s, \"operator_bundle_id\":%{public, location:escape_only}s, \"operator_country\":%{public, location:escape_only}s, \"product_type\":%{private, location:escape_only}s, \"release_type\":%{public}d, \"trigger_type\":%{public}d}", buf, 0x62u);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  return v4;
}

void sub_100AAA804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

void sub_100AAA8A4(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v81 = a2;
  id v6 = sub_100AABDF0(a3);
  if (v6)
  {
    char v7 = v6;
    unint64_t v8 = sub_100A80D4C((int *)(a1 + 1448));
    if (*((char *)v8 + 87) < 0)
    {
      sub_1000DC48C(__p, (void *)v8[8], v8[9]);
    }
    else
    {
      *(_OWORD *)std::string __p = *((_OWORD *)v8 + 4);
      uint64_t v80 = v8[10];
    }
    if (v80 >= 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)__p[0];
    }
    char v78 = +[NSMutableURLRequest requestWithURL:](NSMutableURLRequest, "requestWithURL:", +[NSURL URLWithString:](NSURL, "URLWithString:", +[NSString stringWithUTF8String:v16]));
    [(NSMutableURLRequest *)v78 setHTTPMethod:@"POST"];
    sub_100AAC134((__SecKey **)a1, v7, (id *)&v78);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v17 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = SHIBYTE(v80);
      int v19 = (void **)__p[0];
      id v20 = [v7 length];
      __int16 v21 = __p;
      *(_DWORD *)uint64_t buf = 68289539;
      if (v18 < 0) {
        __int16 v21 = v19;
      }
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(void *)&buf[20] = v21;
      *(_WORD *)&unsigned char buf[28] = 2049;
      *(void *)&buf[30] = v20;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EED2,sending LIS POST\", \"URL\":%{private, location:escape_only}s, \"length\":%{private}lld}", buf, 0x26u);
    }
    *(void *)uint64_t buf = &v81;
    unint64_t v22 = sub_1000EAEE4((uint64_t **)(a1 + 2040), &v81, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    __int16 v23 = v22;
    double v24 = (char *)v22[6];
    uint64_t v25 = (uint64_t)(v22 + 7);
    unint64_t v26 = v22[7];
    __int16 v50 = v7;
    if (v24 >= (char *)v26)
    {
      uint64_t v28 = v22[5];
      uint64_t v29 = (v24 - (char *)v28) >> 2;
      if ((unint64_t)(v29 + 1) >> 62) {
        sub_1001D7FD4();
      }
      unint64_t v30 = (char *)v26 - (char *)v28;
      unint64_t v31 = ((char *)v26 - (char *)v28) >> 1;
      if (v31 <= v29 + 1) {
        unint64_t v31 = v29 + 1;
      }
      if (v30 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v32 = v31;
      }
      if (v32)
      {
        char v33 = (char *)sub_10017EA34(v25, v32);
        uint64_t v28 = v23[5];
        double v24 = (char *)v23[6];
      }
      else
      {
        char v33 = 0;
      }
      int v34 = &v33[4 * v29];
      unsigned int v35 = (uint64_t *)&v33[4 * v32];
      *(_DWORD *)int v34 = *(_DWORD *)(a1 + 1672);
      uint64_t v27 = (uint64_t *)(v34 + 4);
      while (v24 != (char *)v28)
      {
        int v36 = *((_DWORD *)v24 - 1);
        v24 -= 4;
        *((_DWORD *)v34 - 1) = v36;
        v34 -= 4;
      }
      void v23[5] = (uint64_t *)v34;
      void v23[6] = v27;
      v23[7] = v35;
      if (v28) {
        operator delete(v28);
      }
    }
    else
    {
      *(_DWORD *)double v24 = *(_DWORD *)(a1 + 1672);
      uint64_t v27 = (uint64_t *)(v24 + 4);
    }
    void v23[6] = v27;
    int v37 = *(_DWORD *)(a1 + 1672);
    long long v38 = *(_OWORD *)(a4 + 112);
    long long v86 = *(_OWORD *)(a4 + 96);
    long long v87 = v38;
    v88[0] = *(_OWORD *)(a4 + 128);
    *(_OWORD *)((char *)v88 + 12) = *(_OWORD *)(a4 + 140);
    long long v39 = *(_OWORD *)(a4 + 48);
    *(_OWORD *)&uint8_t buf[32] = *(_OWORD *)(a4 + 32);
    long long v83 = v39;
    long long v40 = *(_OWORD *)(a4 + 80);
    long long v84 = *(_OWORD *)(a4 + 64);
    long long v85 = v40;
    long long v41 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)uint64_t buf = *(_OWORD *)a4;
    *(_OWORD *)&uint8_t buf[16] = v41;
    memcpy(v89, (const void *)(a4 + 160), sizeof(v89));
    uint64_t v42 = *(void *)(a4 + 680);
    int v43 = *(std::__shared_weak_count **)(a4 + 688);
    if (v43) {
      atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v44 = *(_OWORD *)(a4 + 776);
    long long v76 = *(_OWORD *)(a4 + 760);
    *(_OWORD *)__int16 v77 = v44;
    *(void *)&v77[13] = *(void *)(a4 + 789);
    long long v45 = *(_OWORD *)(a4 + 712);
    long long v72 = *(_OWORD *)(a4 + 696);
    long long v73 = v45;
    long long v46 = *(_OWORD *)(a4 + 744);
    long long v74 = *(_OWORD *)(a4 + 728);
    long long v75 = v46;
    __int16 v47 = *(void **)(a1 + 1664);
    __int16 v48 = v78;
    v51[0] = _NSConcreteStackBlock;
    v51[1] = 3321888768;
    long long v53 = *(_OWORD *)&buf[16];
    long long v52 = *(_OWORD *)buf;
    long long v57 = v85;
    long long v56 = v84;
    long long v55 = v83;
    long long v54 = *(_OWORD *)&buf[32];
    *(_OWORD *)((char *)v60 + 12) = *(_OWORD *)((char *)v88 + 12);
    v60[0] = v88[0];
    long long v59 = v87;
    v51[2] = sub_100AAD0A4;
    v51[3] = &unk_1022DB7D0;
    v51[4] = a1;
    int v70 = v81;
    int v71 = v37;
    long long v58 = v86;
    memcpy(v61, v89, sizeof(v61));
    uint64_t v62 = v42;
    int v63 = v43;
    if (v43) {
      atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)&v69[13] = *(void *)&v77[13];
    long long v68 = v76;
    *(_OWORD *)int v69 = *(_OWORD *)v77;
    long long v64 = v72;
    long long v65 = v73;
    long long v66 = v74;
    long long v67 = v75;
    [objc_msgSend(v47, "uploadTaskWithRequest:fromData:completionHandler:", v48, v50, v51) resume];
    if (v63) {
      sub_1000DB0A0(v63);
    }
    if (v43) {
      sub_1000DB0A0(v43);
    }
    if (SHIBYTE(v80) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    double v9 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#EED2 failed to serialize LIS dict into JSON", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      LOWORD(v72) = 0;
      int v49 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::postMessage(NumberType, NSDictionary *, const GNSS::DaemonLocation &)", "%s\n", v49);
      if (v49 != buf) {
        free(v49);
      }
    }
    uint64_t v10 = sub_1014832B8(a1, (unsigned int *)(a1 + 340), 21);
    uint64_t v11 = *(void *)(a1 + 2088);
    if (v11)
    {
      unsigned int v13 = *(_DWORD *)(v11 + 24);
      id v12 = (int *)(v11 + 24);
      unsigned int v14 = sub_100AAFCC0(v10, v13);
      int v15 = *v12;
      if (v14 >= 2) {
        int v15 = 7;
      }
      int *v12 = v15;
    }
  }
}

void sub_100AAAEC0(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x3F7]) < 0) {
    operator delete((void *)STACK[0x3E0]);
  }
  _Unwind_Resume(a1);
}

void sub_100AAAF10(uint64_t a1)
{
  if (*(void *)(a1 + 2088))
  {
    unsigned int v2 = sub_100A988EC(a1);
    if (v2 > 2)
    {
      id v7 = +[NSMutableDictionary dictionary];
      unint64_t v8 = +[NSNumber numberWithInt:sub_100A988EC(a1)];
      if (byte_10247FB4F >= 0) {
        double v9 = &qword_10247FB38;
      }
      else {
        double v9 = (uint64_t *)qword_10247FB38;
      }
      [v7 setValue:v8 forKey:[NSString stringWithUTF8String:v9]];
      uint64_t v10 = +[NSNumber numberWithInt:**(unsigned int **)(a1 + 2088)];
      if (byte_10247FC0F >= 0) {
        uint64_t v11 = &qword_10247FBF8;
      }
      else {
        uint64_t v11 = (uint64_t *)qword_10247FBF8;
      }
      [v7 setValue:v10 forKey:[NSString stringWithUTF8String:v11]];
      id v12 = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 2088) + 4)];
      if (byte_10247FC27 >= 0) {
        unsigned int v13 = &qword_10247FC10;
      }
      else {
        unsigned int v13 = (uint64_t *)qword_10247FC10;
      }
      [v7 setValue:v12 forKey:[NSString stringWithUTF8String:v13]];
      unsigned int v14 = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 2088) + 8)];
      if (byte_10247FC3F >= 0) {
        int v15 = &qword_10247FC28;
      }
      else {
        int v15 = (uint64_t *)qword_10247FC28;
      }
      [v7 setValue:v14 forKey:[NSString stringWithUTF8String:v15]];
      uint64_t v16 = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 2088) + 12)];
      if (byte_10247FC57 >= 0) {
        uint64_t v17 = &qword_10247FC40;
      }
      else {
        uint64_t v17 = (uint64_t *)qword_10247FC40;
      }
      [v7 setValue:v16 forKey:[NSString stringWithUTF8String:v17]];
      int v18 = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 2088) + 16)];
      if (byte_10247FC6F >= 0) {
        int v19 = &qword_10247FC58;
      }
      else {
        int v19 = (uint64_t *)qword_10247FC58;
      }
      [v7 setValue:v18 forKey:[NSString stringWithUTF8String:v19]];
      id v20 = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 2088) + 20)];
      if (byte_10247FC87 >= 0) {
        __int16 v21 = &qword_10247FC70;
      }
      else {
        __int16 v21 = (uint64_t *)qword_10247FC70;
      }
      [v7 setValue:v20 forKey:[NSString stringWithUTF8String:v21]];
      unint64_t v22 = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 2088) + 24)];
      if (byte_10247FC9F >= 0) {
        __int16 v23 = &qword_10247FC88;
      }
      else {
        __int16 v23 = (uint64_t *)qword_10247FC88;
      }
      [v7 setValue:v22 forKey:[NSString stringWithUTF8String:v23]];
      LODWORD(v24) = *(_DWORD *)(*(void *)(a1 + 2088) + 28);
      uint64_t v25 = +[NSNumber numberWithFloat:v24];
      if (byte_10247FCB7 >= 0) {
        unint64_t v26 = &qword_10247FCA0;
      }
      else {
        unint64_t v26 = (uint64_t *)qword_10247FCA0;
      }
      [v7 setValue:v25 forKey:[NSString stringWithUTF8String:v26]];
      LODWORD(v27) = *(_DWORD *)(*(void *)(a1 + 2088) + 32);
      uint64_t v28 = +[NSNumber numberWithFloat:v27];
      if (byte_10247FCCF >= 0) {
        uint64_t v29 = &qword_10247FCB8;
      }
      else {
        uint64_t v29 = (uint64_t *)qword_10247FCB8;
      }
      [v7 setValue:v28 forKey:[NSString stringWithUTF8String:v29]];
      unint64_t v30 = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 2088) + 36)];
      if (byte_10247FCE7 >= 0) {
        unint64_t v31 = &qword_10247FCD0;
      }
      else {
        unint64_t v31 = (uint64_t *)qword_10247FCD0;
      }
      [v7 setValue:v30 forKey:[NSString stringWithUTF8String:v31]];
      unint64_t v32 = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 2088) + 40)];
      if (byte_10247FCFF >= 0) {
        char v33 = &qword_10247FCE8;
      }
      else {
        char v33 = (uint64_t *)qword_10247FCE8;
      }
      [v7 setValue:v32 forKey:[NSString stringWithUTF8String:v33]];
      int v34 = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 2088) + 44)];
      if (byte_10247FD17 >= 0) {
        unsigned int v35 = &qword_10247FD00;
      }
      else {
        unsigned int v35 = (uint64_t *)qword_10247FD00;
      }
      [v7 setValue:v34 forKey:[NSString stringWithUTF8String:v35]];
      int v36 = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 2088) + 52)];
      if (byte_10247FD2F >= 0) {
        int v37 = &qword_10247FD18;
      }
      else {
        int v37 = (uint64_t *)qword_10247FD18;
      }
      [v7 setValue:v36 forKey:[NSString stringWithUTF8String:v37]];
      long long v38 = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 2088) + 56)];
      if (byte_10247FD47 >= 0) {
        long long v39 = &qword_10247FD30;
      }
      else {
        long long v39 = (uint64_t *)qword_10247FD30;
      }
      [v7 setValue:v38 forKey:[NSString stringWithUTF8String:v39]];
      long long v40 = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 2088) + 60)];
      if (byte_10247FD5F >= 0) {
        long long v41 = &qword_10247FD48;
      }
      else {
        long long v41 = (uint64_t *)qword_10247FD48;
      }
      [v7 setValue:v40 forKey:[NSString stringWithUTF8String:v41]];
      uint64_t v42 = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 2088) + 64)];
      if (byte_10247FD77 >= 0) {
        int v43 = &qword_10247FD60;
      }
      else {
        int v43 = (uint64_t *)qword_10247FD60;
      }
      [v7 setValue:v42 forKey:[NSString stringWithUTF8String:v43]];
      long long v44 = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 2088) + 72)];
      if (byte_10247FD8F >= 0) {
        long long v45 = &qword_10247FD78;
      }
      else {
        long long v45 = (uint64_t *)qword_10247FD78;
      }
      [v7 setValue:v44 forKey:[NSString stringWithUTF8String:v45]];
      long long v46 = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 2088) + 80)];
      if (byte_10247FDA7 >= 0) {
        __int16 v47 = &qword_10247FD90;
      }
      else {
        __int16 v47 = (uint64_t *)qword_10247FD90;
      }
      [v7 setValue:v46 forKey:[NSString stringWithUTF8String:v47]];
      __int16 v48 = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 2088) + 84)];
      if (byte_10247FDBF >= 0) {
        int v49 = &qword_10247FDA8;
      }
      else {
        int v49 = (uint64_t *)qword_10247FDA8;
      }
      [v7 setValue:v48 forKey:[NSString stringWithUTF8String:v49]];
      __int16 v50 = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 2088) + 88)];
      if (byte_10247FDD7 >= 0) {
        int v51 = &qword_10247FDC0;
      }
      else {
        int v51 = (uint64_t *)qword_10247FDC0;
      }
      [v7 setValue:v50 forKey:[NSString stringWithUTF8String:v51]];
      long long v52 = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 2088) + 92)];
      if (byte_10247FDEF >= 0) {
        long long v53 = &qword_10247FDD8;
      }
      else {
        long long v53 = (uint64_t *)qword_10247FDD8;
      }
      [v7 setValue:v52 forKey:[NSString stringWithUTF8String:v53]];
      long long v54 = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 2088) + 96)];
      if (byte_10247FE07 >= 0) {
        long long v55 = &qword_10247FDF0;
      }
      else {
        long long v55 = (uint64_t *)qword_10247FDF0;
      }
      [v7 setValue:v54 forKey:[NSString stringWithUTF8String:v55]];
      long long v56 = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 2088) + 100)];
      if (byte_10247FE1F >= 0) {
        long long v57 = &qword_10247FE08;
      }
      else {
        long long v57 = (uint64_t *)qword_10247FE08;
      }
      [v7 setValue:v56 forKey:[NSString stringWithUTF8String:v57]];
      long long v58 = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 2088) + 104)];
      if (byte_10247FE37 >= 0) {
        long long v59 = &qword_10247FE20;
      }
      else {
        long long v59 = (uint64_t *)qword_10247FE20;
      }
      [v7 setValue:v58 forKey:[NSString stringWithUTF8String:v59]];
      int v60 = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 2088) + 108)];
      if (byte_10247FE4F >= 0) {
        int v61 = &qword_10247FE38;
      }
      else {
        int v61 = (uint64_t *)qword_10247FE38;
      }
      [v7 setValue:v60 forKey:[NSString stringWithUTF8String:v61]];
      uint64_t v62 = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 2088) + 112)];
      if (byte_10247FE67 >= 0) {
        int v63 = &qword_10247FE50;
      }
      else {
        int v63 = (uint64_t *)qword_10247FE50;
      }
      [v7 setValue:v62 forKey:[NSString stringWithUTF8String:v63]];
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      long long v64 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 138412290;
        unint64_t v69 = (unint64_t)v7;
        _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "#EED2,storeEEDMetricDataToCache,storing the dictionary to cache:%@", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        long long v67 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::storeEEDMetricDataToCache()", "%s\n", v67);
        if (v67 != (char *)buf) {
          free(v67);
        }
      }
      uint64_t v65 = sub_1000A6958();
      sub_1004D258C(v65);
      uint64_t v66 = *(void *)sub_1000A6958();
      (*(void (**)(void))(v66 + 944))();
    }
    else
    {
      unsigned int v3 = v2;
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v4 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134217984;
        unint64_t v69 = v3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#EED2,storeEEDMetricDataToCache,trying to cache metric data in state:%ld,early return", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 == -1)
        {
LABEL_16:
          id v6 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::storeEEDMetricDataToCache()", "%s\n", v6);
          if (v6 != (char *)buf) {
            free(v6);
          }
          return;
        }
LABEL_110:
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        goto LABEL_16;
      }
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    double v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#EED2,storeEEDMetricDataToCache,nil fEED2Report,early return", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_16;
      }
      goto LABEL_110;
    }
  }
}

unint64_t sub_100AABA94()
{
  [+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:") timeIntervalSince1970];
  return llround(v0);
}

void *sub_100AABABC@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100134750(a2, off_1022DBF88[a1]);
}

NSArray *sub_100AABAD0(uint64_t a1)
{
  if (sub_10073F740()
    && *(_DWORD *)(a1 + 132) == 1
    && *(unsigned char *)(a1 + 1880)
    && *((unsigned char *)sub_100A80D4C((int *)(a1 + 1448)) + 59)
    && (unsigned int v2 = *(void **)(a1 + 1992)) != 0)
  {
    v14[0] = @"capability";
    v14[1] = @"status";
    v15[0] = kRequestTypeVideoStreaming;
    if ([v2 newStreamingAllowed]) {
      CFStringRef v3 = @"supported";
    }
    else {
      CFStringRef v3 = @"not_supported";
    }
    v15[1] = v3;
    v16[0] = +[NSDictionary dictionaryWithObjects:v15 forKeys:v14 count:2];
    v12[1] = @"status";
    v13[0] = kRequestTypeMediaUpload;
    v12[0] = @"capability";
    if ([*(id *)(a1 + 1992) newUploadAllowed]) {
      CFStringRef v4 = @"supported";
    }
    else {
      CFStringRef v4 = @"not_supported";
    }
    v13[1] = v4;
    v16[1] = +[NSDictionary dictionaryWithObjects:v13 forKeys:v12 count:2];
    double v5 = v16;
  }
  else
  {
    v19[0] = @"capability";
    v19[1] = @"status";
    v20[0] = kRequestTypeVideoStreaming;
    v20[1] = @"not_supported";
    v21[0] = +[NSDictionary dictionaryWithObjects:v20 forKeys:v19 count:2];
    v17[0] = @"capability";
    v17[1] = @"status";
    v18[0] = kRequestTypeMediaUpload;
    v18[1] = @"not_supported";
    v21[1] = +[NSDictionary dictionaryWithObjects:v18 forKeys:v17 count:2];
    double v5 = v21;
  }
  id v6 = +[NSArray arrayWithObjects:v5 count:2];
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  id v7 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 138412290;
    uint64_t v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#EED2 getRequestCapabilities,%@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    double v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "NSArray *CLEmergencyEED2::getRequestCapabilities()", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  return v6;
}

id sub_100AABDF0(uint64_t a1)
{
  if (!a1)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    CFStringRef v3 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#EED2,getSerializedJsonData,dict is nil", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    LOWORD(v11) = 0;
    goto LABEL_21;
  }
  id v10 = 0;
  uint64_t v1 = +[NSJSONSerialization dataWithJSONObject:a1 options:0 error:&v10];
  if (v1) {
    return [[[objc_msgSend(objc_msgSend(objc_msgSend(objc_alloc((Class)NSString), "initWithData:encoding:", v1, 4), "stringByReplacingOccurrencesOfString:withString:", @"\\/", @"/"), "dataUsingEncoding:", 4);
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  CFStringRef v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
  {
    id v5 = [[objc_msgSend(v10, "domain") UTF8String];
    unsigned int v6 = [v10 code];
    *(_DWORD *)uint64_t buf = 136446466;
    id v16 = v5;
    __int16 v17 = 1026;
    unsigned int v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#EED2,getSerializedJsonData,failed to serialize dict into JSON,domain,%{public}s,code,%{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v7 = [[objc_msgSend(v10, "domain") UTF8String];
    unsigned int v8 = [v10 code];
    int v11 = 136446466;
    id v12 = v7;
    __int16 v13 = 1026;
    unsigned int v14 = v8;
LABEL_21:
    double v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static NSData *CLEmergencyEED2::getSerializedJsonData(NSDictionary *)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  return 0;
}

void sub_100AAC134(__SecKey **a1, void *a2, id *a3)
{
  [*a3 setValue:@"application/json" forHTTPHeaderField:@"content-type"];
  [*a3 setValue:+[NSString stringWithFormat:](NSString, @"%d", objc_msgSend(a2, "length")), @"content-length" forHTTPHeaderField];
  [*a3 setValue:@"1" forHTTPHeaderField:@"x-eed-payload-version"];
  if (objc_opt_class()) {
    CFStringRef v6 = (const __CFString *)+[AADeviceInfo clientInfoHeader];
  }
  else {
    CFStringRef v6 = &stru_10234F018;
  }
  [*a3 setValue:v6 forHTTPHeaderField:@"x-mme-client-info"];
  id v7 = a1[210];
  if (v7 && a1[211] && a1[212])
  {
    error.__r_.__value_.__r.__words[0] = 0;
    CFDataRef Signature = SecKeyCreateSignature(v7, kSecKeyAlgorithmECDSASignatureMessageX962SHA256, (CFDataRef)a2, (CFErrorRef *)&error);
    id v9 = [(__CFData *)Signature base64EncodedStringWithOptions:0];

    [*a3 setValue:v9 forHTTPHeaderField:@"x-eed-baa-signature"];
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v10 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      id v11 = [v9 UTF8String];
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#EED2,#BAA,added header x-eed-baa-signature : %{public}s", (uint8_t *)&buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v43 = [v9 UTF8String];
      LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v43;
      long long v44 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::addHeadersToUrlRequest(NSData *, NSMutableURLRequest **) const", "%s\n", v44);
      if (v44 != (char *)&buf) {
        free(v44);
      }
    }
    CFDataRef v12 = SecCertificateCopyData(a1[211]);
    id v13 = [(__CFData *)v12 base64EncodedStringWithOptions:0];

    [*a3 setValue:v13 forHTTPHeaderField:@"x-eed-baa-leaf-cert"];
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    unsigned int v14 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      id v15 = [v13 UTF8String];
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#EED2,#BAA,added header x-eed-baa-leaf-cert : %{public}s", (uint8_t *)&buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v45 = [v13 UTF8String];
      LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v45;
      long long v46 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::addHeadersToUrlRequest(NSData *, NSMutableURLRequest **) const", "%s\n", v46);
      if (v46 != (char *)&buf) {
        free(v46);
      }
    }
    CFDataRef v16 = SecCertificateCopyData(a1[212]);
    id v17 = [(__CFData *)v16 base64EncodedStringWithOptions:0];

    [*a3 setValue:v17 forHTTPHeaderField:@"x-eed-baa-int-cert-1"];
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    unsigned int v18 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      id v19 = [v17 UTF8String];
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#EED2,#BAA,added header x-eed-baa-int-cert-1 : %{public}s", (uint8_t *)&buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v47 = [v17 UTF8String];
      LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v47;
      __int16 v48 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::addHeadersToUrlRequest(NSData *, NSMutableURLRequest **) const", "%s\n", v48);
      if (v48 != (char *)&buf) {
        free(v48);
      }
    }
    id v20 = [objc_alloc((Class)NSString) initWithData:a2 encoding:4];
    sub_100134750(&buf, "#EED2,#BAA,POST body");
    sub_100134750(&__p, (char *)[v20 UTF8String]);
    sub_10147894C((std::string::size_type)&buf, (std::string::size_type)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v54 < 0) {
      operator delete((void *)buf);
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    __int16 v21 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#EED2,#BAA,addHeadersToUrlRequest,cert not available", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      int v36 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::addHeadersToUrlRequest(NSData *, NSMutableURLRequest **) const", "%s\n", v36);
      if (v36 != (char *)&buf) {
        free(v36);
      }
    }
  }
  memset(&__p, 0, sizeof(__p));
  sub_1000C7F88(&buf);
  if (sub_1004D1284(buf, "EED2EnvHeader", &__p))
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (*((void *)&buf + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&buf + 1));
    }
    if (size)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      __int16 v23 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        LODWORD(buf) = 136380675;
        *(void *)((char *)&buf + 4) = p_p;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#Warning #EED2,sending environment override header for %{private}s", (uint8_t *)&buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        long long v39 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        LODWORD(error.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)error.__r_.__value_.__r.__words + 4) = (std::string::size_type)v39;
        long long v40 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::addHeadersToUrlRequest(NSData *, NSMutableURLRequest **) const", "%s\n", v40);
        if (v40 != (char *)&buf) {
          free(v40);
        }
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v25 = &__p;
      }
      else {
        uint64_t v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      [*a3 setValue:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v25) forHTTPHeaderField:@"x-eed-environment"];
    }
  }
  else if (*((void *)&buf + 1))
  {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf + 1));
  }
  memset(&error, 0, sizeof(error));
  sub_1000C7F88(&buf);
  if (sub_1004D1284(buf, "EEDDemoHeader", &error))
  {
    if ((error.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v26 = HIBYTE(error.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v26 = error.__r_.__value_.__l.__size_;
    }
    if (*((void *)&buf + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&buf + 1));
    }
    if (v26)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      double v27 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        p_std::string error = &error;
        if ((error.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_std::string error = (std::string *)error.__r_.__value_.__r.__words[0];
        }
        LODWORD(buf) = 136380675;
        *(void *)((char *)&buf + 4) = p_error;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#Warning #EED2,sending demo header for %{private}s", (uint8_t *)&buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        long long v41 = &error;
        if ((error.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v41 = (std::string *)error.__r_.__value_.__r.__words[0];
        }
        int v49 = 136380675;
        __int16 v50 = v41;
        uint64_t v42 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::addHeadersToUrlRequest(NSData *, NSMutableURLRequest **) const", "%s\n", v42);
        if (v42 != (char *)&buf) {
          free(v42);
        }
      }
      if ((error.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v29 = &error;
      }
      else {
        uint64_t v29 = (std::string *)error.__r_.__value_.__r.__words[0];
      }
      [*a3 setValue:[NSString stringWithUTF8String:v29] forHTTPHeaderField:@"x-eed-demo"];
    }
  }
  else if (*((void *)&buf + 1))
  {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf + 1));
  }
  sub_1000C7F88(&buf);
  LOBYTE(v49) = 0;
  int v30 = sub_1000D2988(buf, "EEDControlEnable", (BOOL *)&v49);
  if ((_BYTE)v49) {
    int v31 = v30;
  }
  else {
    int v31 = 0;
  }
  if (*((void *)&buf + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf + 1));
  }
  if (v31)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    unint64_t v32 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#EED2,sending x-eed-control-enabled as true", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      LOWORD(v49) = 0;
      int v37 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::addHeadersToUrlRequest(NSData *, NSMutableURLRequest **) const", "%s\n", v37);
      if (v37 != (char *)&buf) {
        free(v37);
      }
    }
    [*a3 setValue:@"true" forHTTPHeaderField:@"x-eed-control-enabled"];
  }
  sub_1000C7F88(&buf);
  LOBYTE(v49) = 0;
  int v33 = sub_1000D2988(buf, "EEDTestApplicationEnable", (BOOL *)&v49);
  if ((_BYTE)v49) {
    int v34 = v33;
  }
  else {
    int v34 = 0;
  }
  if (*((void *)&buf + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf + 1));
  }
  if (v34)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    unsigned int v35 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#Warning #EED2,sending X-Apple-Test-Application as true", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      LOWORD(v49) = 0;
      long long v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::addHeadersToUrlRequest(NSData *, NSMutableURLRequest **) const", "%s\n", v38);
      if (v38 != (char *)&buf) {
        free(v38);
      }
    }
    [*a3 setValue:@"true" forHTTPHeaderField:@"X-Apple-Test-Application"];
  }
  if (SHIBYTE(error.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(error.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_100AACFEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_100AAD0A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a1 + 32);
  unsigned int v8 = [objc_msgSend(*(id *)(v7 + 8), "silo") queue];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3321888768;
  void v13[2] = sub_100AAD214;
  void v13[3] = &unk_1022DB7A0;
  v13[6] = v7;
  uint64_t v32 = *(void *)(a1 + 840);
  long long v20 = *(_OWORD *)(a1 + 136);
  long long v21 = *(_OWORD *)(a1 + 152);
  v22[0] = *(_OWORD *)(a1 + 168);
  *(_OWORD *)((char *)v22 + 12) = *(_OWORD *)(a1 + 180);
  long long v16 = *(_OWORD *)(a1 + 72);
  long long v17 = *(_OWORD *)(a1 + 88);
  long long v18 = *(_OWORD *)(a1 + 104);
  long long v19 = *(_OWORD *)(a1 + 120);
  long long v14 = *(_OWORD *)(a1 + 40);
  long long v15 = *(_OWORD *)(a1 + 56);
  memcpy(v23, (const void *)(a1 + 200), sizeof(v23));
  uint64_t v24 = *(void *)(a1 + 720);
  id v9 = *(std::__shared_weak_count **)(a1 + 728);
  uint64_t v25 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)&v31[13] = *(void *)(a1 + 829);
  long long v10 = *(_OWORD *)(a1 + 816);
  long long v30 = *(_OWORD *)(a1 + 800);
  *(_OWORD *)int v31 = v10;
  long long v11 = *(_OWORD *)(a1 + 752);
  long long v26 = *(_OWORD *)(a1 + 736);
  long long v27 = v11;
  long long v12 = *(_OWORD *)(a1 + 784);
  long long v28 = *(_OWORD *)(a1 + 768);
  long long v29 = v12;
  v13[4] = a3;
  v13[5] = a4;
  dispatch_async(v8, v13);
  if (v25) {
    sub_1000DB0A0(v25);
  }
}

void sub_100AAD214(uint64_t a1)
{
}

void sub_100AAD230(uint64_t a1, int a2, __int32 a3, uint64_t a4, void *a5, void *a6)
{
  int v107 = a2;
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  long long v11 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    if (a2) {
      long long v12 = "Companion";
    }
    else {
      long long v12 = "Native";
    }
    id v13 = __p;
    sub_100134750(__p, v12);
    if (SHIBYTE(__p[2]) < 0) {
      id v13 = (void **)__p[0];
    }
    id v14 = [[objc_msgSend(a5, "valueForHTTPHeaderField:", @"X-Responding-Instance") UTF8String];
    id v15 = [[objc_msgSend(a5, "valueForHTTPHeaderField:", @"X-Apple-Request-UUID") UTF8String];
    id v16 = [[objc_msgSend(a5, "valueForHTTPHeaderField:", @"X-Apple-Jingle-Correlation-Key") UTF8String];
    id v17 = [[objc_msgSend(a5, "valueForHTTPHeaderField:", @"Via") UTF8String];
    *(_DWORD *)long long buf = 68290563;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    __int16 v114 = 2082;
    *(void *)&long long v115 = v13;
    WORD4(v115) = 1026;
    *(_DWORD *)((char *)&v115 + 10) = a3;
    HIWORD(v115) = 2081;
    id v116 = v14;
    __int16 v117 = 2081;
    id v118 = v15;
    __int16 v119 = 2081;
    id v120 = v16;
    __int16 v121 = 2081;
    *(void *)int v122 = v17;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EED2,#LIS,handleHttpsResponse,response headers\", \"numberType\":%{public, location:escape_only}s, \"message\":%{public}d, \"responding instance\":%{private, location:escape_only}s, \"UUID\":%{private, location:escape_only}s, \"jingle corr key\":%{private, location:escape_only}s, \"via\":%{private, location:escape_only}s}", buf, 0x4Au);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }
  *(void *)long long buf = &v107;
  long long v18 = (__int32 *)sub_1000EAEE4((uint64_t **)(a1 + 2040), &v107, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[5];
  *(void *)long long buf = &v107;
  long long v19 = sub_1000EAEE4((uint64_t **)(a1 + 2040), &v107, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[6];
  long long v20 = wmemchr(v18, a3, ((char *)v19 - (char *)v18) >> 2);
  if (v20) {
    long long v19 = (uint64_t *)v20;
  }
  *(void *)long long buf = &v107;
  if (v19 != sub_1000EAEE4((uint64_t **)(a1 + 2040), &v107, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[6])
  {
    *(void *)long long buf = &v107;
    long long v21 = sub_1000EAEE4((uint64_t **)(a1 + 2040), &v107, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    unint64_t v22 = v21[6];
    int64_t v23 = (char *)v22 - ((char *)v19 + 4);
    if (v22 != (uint64_t *)((char *)v19 + 4)) {
      memmove(v19, (char *)v19 + 4, (char *)v22 - ((char *)v19 + 4));
    }
    v21[6] = (uint64_t *)((char *)v19 + v23);
    int v24 = sub_1000E6DB4(a4);
    if (!a5)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      __int16 v48 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        int v49 = v107 ? "Companion" : "Native";
        sub_100134750(__p, v49);
        __int16 v50 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
        unsigned int v51 = [a6 code];
        id v52 = [a6 domain];
        id v53 = [a6 localizedDescription];
        *(_DWORD *)long long buf = 136447234;
        *(void *)&uint8_t buf[4] = v50;
        *(_WORD *)&unsigned char buf[12] = 1026;
        *(_DWORD *)&buf[14] = a3;
        __int16 v114 = 1026;
        LODWORD(v115) = v51;
        WORD2(v115) = 2114;
        *(void *)((char *)&v115 + 6) = v52;
        HIWORD(v115) = 2114;
        id v116 = v53;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "#EED2 POST for %{public}s number message %{public}d failed with error code,%{public}d,domain,%{public}@,reason,%{public}@", buf, 0x2Cu);
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        if (v107) {
          uint64_t v80 = "Companion";
        }
        else {
          uint64_t v80 = "Native";
        }
        sub_100134750(&v104, v80);
        if (v106 >= 0) {
          int v81 = &v104;
        }
        else {
          int v81 = v104;
        }
        unsigned int v82 = [a6 code];
        id v83 = [a6 domain];
        id v84 = [a6 localizedDescription];
        LODWORD(__p[0]) = 136447234;
        *(void **)((char *)__p + 4) = v81;
        WORD2(__p[1]) = 1026;
        *(_DWORD *)((char *)&__p[1] + 6) = a3;
        WORD1(__p[2]) = 1026;
        HIDWORD(__p[2]) = v82;
        __int16 v109 = 2114;
        id v110 = v83;
        __int16 v111 = 2114;
        id v112 = v84;
        long long v85 = (char *)_os_log_send_and_compose_impl();
        if (v106 < 0) {
          operator delete(v104);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::handleHttpsResponse(NumberType, uint32_t, const GNSS::DaemonLocation &, NSURLResponse *, NSError *)", "%s\n", v85);
        if (v85 != buf) {
          free(v85);
        }
      }
      *(_DWORD *)(a1 + 428) = [a6 code];
      if (*(void *)(a1 + 2088)) {
        *(_DWORD *)(*(void *)(a1 + 2088) + 36) = [0 statusCode];
      }
      if (v24)
      {
        uint64_t v54 = sub_1014832B8(a1, (unsigned int *)(a1 + 340), 16);
        ++*(_DWORD *)(a1 + 424);
        uint64_t v55 = *(void *)(a1 + 2088);
        if (v55)
        {
          unsigned int v57 = *(_DWORD *)(v55 + 24);
          long long v56 = (int *)(v55 + 24);
          unsigned int v58 = sub_100AAFCC0(v54, v57);
          int v59 = *v56;
          if (v58 >= 4) {
            int v59 = 6;
          }
          *long long v56 = v59;
          ++*(_DWORD *)(*(void *)(a1 + 2088) + 4);
        }
      }
      goto LABEL_104;
    }
    if ([a5 statusCode] == (id)200)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v25 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        if (v107) {
          long long v26 = "Companion";
        }
        else {
          long long v26 = "Native";
        }
        sub_100134750(__p, v26);
        int v27 = SHIBYTE(__p[2]);
        long long v28 = (void **)__p[0];
        unsigned int v29 = [a5 statusCode];
        long long v30 = __p;
        *(_DWORD *)long long buf = 136446722;
        if (v27 < 0) {
          long long v30 = v28;
        }
        *(void *)&uint8_t buf[4] = v30;
        *(_WORD *)&unsigned char buf[12] = 1026;
        *(_DWORD *)&buf[14] = a3;
        __int16 v114 = 1026;
        LODWORD(v115) = v29;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#EED2 POST for %{public}s number message %{public}d succeeded with response code %{public}d", buf, 0x18u);
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        if (v107) {
          long long v86 = "Companion";
        }
        else {
          long long v86 = "Native";
        }
        sub_100134750(&v104, v86);
        int v87 = v106;
        int v88 = (void **)v104;
        unsigned int v89 = [a5 statusCode];
        int v90 = &v104;
        LODWORD(__p[0]) = 136446722;
        if (v87 < 0) {
          int v90 = v88;
        }
        *(void **)((char *)__p + 4) = v90;
        WORD2(__p[1]) = 1026;
        *(_DWORD *)((char *)&__p[1] + 6) = a3;
        WORD1(__p[2]) = 1026;
        HIDWORD(__p[2]) = v89;
        int v91 = (char *)_os_log_send_and_compose_impl();
        if (v106 < 0) {
          operator delete(v104);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::handleHttpsResponse(NumberType, uint32_t, const GNSS::DaemonLocation &, NSURLResponse *, NSError *)", "%s\n", v91);
        if (v91 != buf) {
          free(v91);
        }
      }
      if (!v24) {
        goto LABEL_104;
      }
      double v31 = sub_10016C458();
      uint64_t v32 = sub_1014832B8(a1, (unsigned int *)(a1 + 340), 0);
      ++*(_DWORD *)(a1 + 420);
      uint64_t v33 = *(void *)(a1 + 2088);
      if (v33)
      {
        unsigned int v35 = *(_DWORD *)(v33 + 24);
        int v34 = (int *)(v33 + 24);
        int v36 = sub_100AAFCC0(v32, v35);
        int v37 = *v34;
        if (v36) {
          int v37 = 0;
        }
        int *v34 = v37;
        ++**(_DWORD **)(a1 + 2088);
      }
      double v102 = 0.0;
      double v103 = 0.0;
      sub_101479590(a4, &v103, &v102);
      double v38 = *(double *)(a1 + 248);
      if (v38 < 0.0 || v38 >= v103)
      {
        *(double *)(a1 + 248) = v103;
        sub_10192C8D8(a1 + 192, a4);
        if (sub_10147944C(a4)) {
          *(double *)(a1 + 256) = v102;
        }
      }
      uint64_t v39 = *(void *)(a1 + 2088);
      if (!v39) {
        goto LABEL_104;
      }
      float v40 = *(float *)(v39 + 28);
      if (v40 < 0.0)
      {
        double v41 = v31 - *(double *)(a1 + 176);
        *(_DWORD *)long long buf = 101;
        *(_DWORD *)&uint8_t buf[8] = (int)v41;
        int v42 = *(_DWORD *)(a4 + 96);
        HIDWORD(v115) = 0;
        HIDWORD(v116) = 102;
        *(_DWORD *)((char *)&v118 + 2) = v42;
        *(_DWORD *)&v122[6] = 0;
        sub_100A9C944(__p, (uint64_t)buf, 2uLL);
        for (uint64_t i = 48; i != -32; i -= 40)
          sub_100118010((uint64_t)&buf[i]);
        long long v44 = *(void **)(a1 + 2096);
        memset(v101, 0, sizeof(v101));
        sub_100682C20(v101, (uint64_t)__p[0], (uint64_t)__p[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
        [v44 setMeasurements:sub_10067C03C(v101)];
        *(void *)long long buf = v101;
        sub_100682B1C((void ***)buf);
        *(void *)long long buf = __p;
        sub_100682B1C((void ***)buf);
        double v45 = v103;
        uint64_t v39 = *(void *)(a1 + 2088);
LABEL_98:
        float v72 = v45;
        *(float *)(v39 + 28) = v72;
        BOOL v73 = sub_10147944C(a4);
        uint64_t v74 = *(void *)(a1 + 2088);
        if (v73)
        {
          float v75 = v102;
          *(float *)(v74 + 32) = v75;
        }
        else
        {
          float v75 = *(float *)(v74 + 32);
        }
        double v76 = v31 - *(double *)(a1 + 176);
        *(_DWORD *)long long buf = 103;
        *(_DWORD *)&uint8_t buf[8] = (int)v76;
        int v77 = *(_DWORD *)(a4 + 96);
        HIDWORD(v115) = 0;
        HIDWORD(v116) = 104;
        *(_DWORD *)((char *)&v118 + 2) = v77;
        *(_DWORD *)&v122[6] = 0;
        LODWORD(v76) = *(_DWORD *)(v74 + 28);
        int v123 = 105;
        int v124 = LODWORD(v76);
        int v125 = 4;
        int v126 = 106;
        float v127 = v75;
        int v128 = 4;
        memset(__p, 0, sizeof(__p));
        int v104 = __p;
        char v105 = 0;
        __p[0] = operator new(0xA0uLL);
        __p[1] = __p[0];
        __p[2] = (char *)__p[0] + 160;
        __p[1] = (void *)sub_100682A48((uint64_t)&__p[2], (uint64_t)buf, (uint64_t)&v129, (uint64_t)__p[0]);
        for (uint64_t j = 128; j != -32; j -= 40)
          sub_100118010((uint64_t)&buf[j]);
        __int16 v79 = *(void **)(a1 + 2096);
        memset(v100, 0, sizeof(v100));
        sub_100682C20(v100, (uint64_t)__p[0], (uint64_t)__p[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
        [v79 setMeasurements:sub_10067C03C(v100)];
        *(void *)long long buf = v100;
        sub_100682B1C((void ***)buf);
        *(void *)long long buf = __p;
        sub_100682B1C((void ***)buf);
        goto LABEL_104;
      }
      double v71 = v40;
      double v45 = v103;
      if (v103 < v71) {
        goto LABEL_98;
      }
LABEL_104:
      sub_100AAAF10(a1);
      sub_100A8CA74(a1 + 1536, 13);
      return;
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v60 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      if (v107) {
        int v61 = "Companion";
      }
      else {
        int v61 = "Native";
      }
      sub_100134750(__p, v61);
      int v62 = SHIBYTE(__p[2]);
      int v63 = (void **)__p[0];
      unsigned int v64 = [a5 statusCode];
      uint64_t v65 = __p;
      *(_DWORD *)long long buf = 136446722;
      if (v62 < 0) {
        uint64_t v65 = v63;
      }
      *(void *)&uint8_t buf[4] = v65;
      *(_WORD *)&unsigned char buf[12] = 1026;
      *(_DWORD *)&buf[14] = a3;
      __int16 v114 = 1026;
      LODWORD(v115) = v64;
      _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "#EED2 POST for %{public}s number message %{public}d failed with response code %{public}d", buf, 0x18u);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      if (v107) {
        int v92 = "Companion";
      }
      else {
        int v92 = "Native";
      }
      sub_100134750(&v104, v92);
      int v93 = v106;
      int v94 = (void **)v104;
      unsigned int v95 = [a5 statusCode];
      int v96 = &v104;
      LODWORD(__p[0]) = 136446722;
      if (v93 < 0) {
        int v96 = v94;
      }
      *(void **)((char *)__p + 4) = v96;
      WORD2(__p[1]) = 1026;
      *(_DWORD *)((char *)&__p[1] + 6) = a3;
      WORD1(__p[2]) = 1026;
      HIDWORD(__p[2]) = v95;
      int v97 = (char *)_os_log_send_and_compose_impl();
      if (v106 < 0) {
        operator delete(v104);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::handleHttpsResponse(NumberType, uint32_t, const GNSS::DaemonLocation &, NSURLResponse *, NSError *)", "%s\n", v97);
      if (v97 != buf) {
        free(v97);
      }
    }
    *(_DWORD *)(a1 + 428) = [a5 statusCode];
    if (*(void *)(a1 + 2088))
    {
      unsigned int v66 = [a5 statusCode];
      uint64_t v67 = *(void *)(a1 + 2088);
      *(_DWORD *)(v67 + 36) = v66;
      if ((v24 & 1) == 0) {
        goto LABEL_104;
      }
      ++*(_DWORD *)(a1 + 424);
      ++*(_DWORD *)(v67 + 4);
    }
    else
    {
      if (!v24) {
        goto LABEL_104;
      }
      ++*(_DWORD *)(a1 + 424);
    }
    if ([a5 statusCode] == (id)416)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      long long v68 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEBUG, "#EED2 POST was determined to be outside coverage area", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        LOWORD(__p[0]) = 0;
        int v98 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::handleHttpsResponse(NumberType, uint32_t, const GNSS::DaemonLocation &, NSURLResponse *, NSError *)", "%s\n", v98);
        if (v98 != buf) {
          free(v98);
        }
      }
      sub_1014832B8(a1, (unsigned int *)(a1 + 340), 31);
      uint64_t v69 = *(void *)(a1 + 2088);
      if (v69) {
        sub_100A9B3C4(a1, (unsigned int *)(v69 + 24), 9u);
      }
    }
    else
    {
      sub_1014832B8(a1, (unsigned int *)(a1 + 340), 16);
      uint64_t v70 = *(void *)(a1 + 2088);
      if (v70) {
        sub_100A9B3C4(a1, (unsigned int *)(v70 + 24), 6u);
      }
    }
    goto LABEL_104;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  long long v46 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "#EED2, messageID is not part of pending messageID!", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    LOWORD(__p[0]) = 0;
    id v47 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::handleHttpsResponse(NumberType, uint32_t, const GNSS::DaemonLocation &, NSURLResponse *, NSError *)", "%s\n", v47);
    if (v47 != buf) {
      free(v47);
    }
  }
}

void sub_100AAE25C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_100AAE334(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v4;
  long long v5 = *(_OWORD *)(a2 + 88);
  long long v6 = *(_OWORD *)(a2 + 104);
  long long v7 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 104) = v6;
  *(_OWORD *)(a1 + 88) = v5;
  long long v8 = *(_OWORD *)(a2 + 152);
  long long v9 = *(_OWORD *)(a2 + 168);
  long long v10 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 196) = *(_OWORD *)(a2 + 196);
  *(_OWORD *)(a1 + 184) = v10;
  *(_OWORD *)(a1 + 168) = v9;
  *(_OWORD *)(a1 + 152) = v8;
  memcpy((void *)(a1 + 216), (const void *)(a2 + 216), 0x201uLL);
  *(void *)(a1 + 736) = *(void *)(a2 + 736);
  uint64_t v11 = *(void *)(a2 + 744);
  *(void *)(a1 + 744) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  long long v12 = *(_OWORD *)(a2 + 752);
  long long v13 = *(_OWORD *)(a2 + 784);
  *(_OWORD *)(a1 + 768) = *(_OWORD *)(a2 + 768);
  *(_OWORD *)(a1 + 784) = v13;
  *(_OWORD *)(a1 + 752) = v12;
  __n128 result = *(__n128 *)(a2 + 800);
  long long v15 = *(_OWORD *)(a2 + 816);
  long long v16 = *(_OWORD *)(a2 + 832);
  *(void *)(a1 + 845) = *(void *)(a2 + 845);
  *(_OWORD *)(a1 + 816) = v15;
  *(_OWORD *)(a1 + 832) = v16;
  *(__n128 *)(a1 + 800) = result;
  return result;
}

void sub_100AAE408(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 744);
  if (v1) {
    sub_1000DB0A0(v1);
  }
}

__n128 sub_100AAE418(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  long long v5 = *(_OWORD *)(a2 + 72);
  long long v6 = *(_OWORD *)(a2 + 88);
  long long v7 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v7;
  *(_OWORD *)(a1 + 88) = v6;
  *(_OWORD *)(a1 + 72) = v5;
  long long v8 = *(_OWORD *)(a2 + 136);
  long long v9 = *(_OWORD *)(a2 + 152);
  long long v10 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 180) = *(_OWORD *)(a2 + 180);
  *(_OWORD *)(a1 + 168) = v10;
  *(_OWORD *)(a1 + 152) = v9;
  *(_OWORD *)(a1 + 136) = v8;
  memcpy((void *)(a1 + 200), (const void *)(a2 + 200), 0x201uLL);
  *(void *)(a1 + 720) = *(void *)(a2 + 720);
  uint64_t v11 = *(void *)(a2 + 728);
  *(void *)(a1 + 728) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  long long v12 = *(_OWORD *)(a2 + 736);
  long long v13 = *(_OWORD *)(a2 + 768);
  *(_OWORD *)(a1 + 752) = *(_OWORD *)(a2 + 752);
  *(_OWORD *)(a1 + 768) = v13;
  *(_OWORD *)(a1 + 736) = v12;
  __n128 result = *(__n128 *)(a2 + 784);
  long long v15 = *(_OWORD *)(a2 + 800);
  long long v16 = *(_OWORD *)(a2 + 816);
  *(void *)(a1 + 829) = *(void *)(a2 + 829);
  *(_OWORD *)(a1 + 800) = v15;
  *(_OWORD *)(a1 + 816) = v16;
  *(__n128 *)(a1 + 784) = result;
  return result;
}

void sub_100AAE4EC(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 728);
  if (v1) {
    sub_1000DB0A0(v1);
  }
}

void sub_100AAE4FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  long long v6 = [[*(id *)(v5 + 8) silo] queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100AAE594;
  block[3] = &unk_1022D6400;
  void block[5] = a3;
  block[6] = v5;
  block[4] = a2;
  dispatch_async(v6, block);
}

uint64_t sub_100AAE594(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  *(unsigned char *)(v1 + 2032) = 0;
  *(unsigned char *)(v1 + 2064) = 1;
  if (*(void *)(v1 + 1768) && sub_10139D18C(*(void *)(v1 + 1768), *(void **)(a1 + 32), *(void **)(a1 + 40))) {
    uint64_t v2 = 9;
  }
  else {
    uint64_t v2 = 10;
  }

  return sub_100A8CA74(v1 + 1536, v2);
}

uint64_t sub_100AAE5F8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  *(unsigned char *)(v3 + 2065) = 1;
  uint64_t v4 = *(void *)(v3 + 1768);
  if (v4 && sub_10139D91C(v4, a2, a3)) {
    uint64_t v5 = 9;
  }
  else {
    uint64_t v5 = 10;
  }

  return sub_100A8CA74(v3 + 1536, v5);
}

void sub_100AAE650(uint64_t a1, int a2, void *a3, void *a4)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  long long v8 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    long long v9 = a2 ? "Companion" : "Native";
    sub_100134750(__p, v9);
    long long v10 = SBYTE3(v60) >= 0 ? __p : *(unsigned char **)__p;
    id v11 = [[objc_msgSend(a3, "valueForHTTPHeaderField:", @"X-Responding-Instance") UTF8String];
    id v12 = [[objc_msgSend(a3, "valueForHTTPHeaderField:", @"X-Apple-Request-UUID") UTF8String];
    id v13 = [[objc_msgSend(a3, "valueForHTTPHeaderField:", @"X-Apple-Jingle-Correlation-Key") UTF8String];
    id v14 = [[objc_msgSend(a3, "valueForHTTPHeaderField:", @"Via") UTF8String];
    *(_DWORD *)long long buf = 68290307;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    __int16 v64 = 2082;
    uint64_t v65 = v10;
    __int16 v66 = 2081;
    id v67 = v11;
    __int16 v68 = 2081;
    id v69 = v12;
    __int16 v70 = 2081;
    id v71 = v13;
    __int16 v72 = 2081;
    id v73 = v14;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EED2,#ADR,handleAdrResponse,response headers\", \"numberType\":%{public, location:escape_only}s, \"responding instance\":%{private, location:escape_only}s, \"UUID\":%{private, location:escape_only}s, \"jingle corr key\":%{private, location:escape_only}s, \"via\":%{private, location:escape_only}s}", buf, 0x44u);
    if (SBYTE3(v60) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (a3)
  {
    if ([a3 statusCode] != (id)200)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v39 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        if (a2) {
          float v40 = "Companion";
        }
        else {
          float v40 = "Native";
        }
        sub_100134750(buf, v40);
        int v41 = SBYTE3(v65);
        int v42 = *(unsigned char **)buf;
        unsigned int v43 = [a3 statusCode];
        long long v44 = buf;
        if (v41 < 0) {
          long long v44 = v42;
        }
        *(_DWORD *)std::string __p = 136446466;
        *(void *)&__p[4] = v44;
        __int16 v57 = 1026;
        unsigned int v58 = v43;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#EED2,ADR POST for %{public}s number failed with response code %{public}d", __p, 0x12u);
        if (SBYTE3(v65) < 0) {
          operator delete(*(void **)buf);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        if (a2) {
          long long v46 = "Companion";
        }
        else {
          long long v46 = "Native";
        }
        sub_100134750(__p, v46);
        int v47 = SBYTE3(v60);
        __int16 v48 = *(unsigned char **)__p;
        unsigned int v49 = [a3 statusCode];
        __int16 v50 = __p;
        if (v47 < 0) {
          __int16 v50 = v48;
        }
        *(_DWORD *)id v52 = 136446466;
        *(void *)&v52[4] = v50;
        __int16 v53 = 1026;
        unsigned int v54 = v49;
        unsigned int v51 = (char *)_os_log_send_and_compose_impl();
        if (SBYTE3(v60) < 0) {
          operator delete(*(void **)__p);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::handleAdrResponse(NumberType, NSURLResponse *, NSError *)", "%s\n", v51);
        if (v51 != buf) {
          free(v51);
        }
      }
      if ([a3 statusCode] == (id)416)
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        double v45 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "#EED2,ADR POST was determined to be outside coverage area", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          *(_WORD *)std::string __p = 0;
          int v27 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::handleAdrResponse(NumberType, NSURLResponse *, NSError *)", "%s\n", v27);
          if (v27 != buf) {
            goto LABEL_60;
          }
        }
      }
      goto LABEL_78;
    }
    ++*(_DWORD *)(a1 + 1288);
    uint64_t v15 = *(void *)(a1 + 2088);
    if (v15) {
      ++*(_DWORD *)(v15 + 20);
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    long long v16 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      if (a2) {
        id v17 = "Companion";
      }
      else {
        id v17 = "Native";
      }
      sub_100134750(buf, v17);
      int v18 = SBYTE3(v65);
      long long v19 = *(unsigned char **)buf;
      unsigned int v20 = [a3 statusCode];
      long long v21 = buf;
      if (v18 < 0) {
        long long v21 = v19;
      }
      *(_DWORD *)std::string __p = 136446466;
      *(void *)&__p[4] = v21;
      __int16 v57 = 1026;
      unsigned int v58 = v20;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#EED2,ADR POST for %{public}s number succeeded with response code %{public}d", __p, 0x12u);
      if (SBYTE3(v65) < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_78;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    if (a2) {
      unint64_t v22 = "Companion";
    }
    else {
      unint64_t v22 = "Native";
    }
    sub_100134750(__p, v22);
    int v23 = SBYTE3(v60);
    int v24 = *(unsigned char **)__p;
    unsigned int v25 = [a3 statusCode];
    long long v26 = __p;
    if (v23 < 0) {
      long long v26 = v24;
    }
    *(_DWORD *)id v52 = 136446466;
    *(void *)&v52[4] = v26;
    __int16 v53 = 1026;
    unsigned int v54 = v25;
    int v27 = (char *)_os_log_send_and_compose_impl();
    if (SBYTE3(v60) < 0) {
      operator delete(*(void **)__p);
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    long long v28 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v29 = a2 ? "Companion" : "Native";
      sub_100134750(__p, v29);
      long long v30 = SBYTE3(v60) >= 0 ? __p : *(unsigned char **)__p;
      unsigned int v31 = [a4 code];
      uint64_t v32 = [a4 domain];
      id v33 = [a4 localizedDescription];
      *(_DWORD *)long long buf = 136446978;
      *(void *)&uint8_t buf[4] = v30;
      *(_WORD *)&unsigned char buf[12] = 1026;
      *(_DWORD *)&buf[14] = v31;
      __int16 v64 = 2114;
      uint64_t v65 = v32;
      __int16 v66 = 2114;
      id v67 = v33;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#EED2,ADR POST for %{public}s number failed with error code,%{public}d,domain,%{public}@,reason,%{public}@", buf, 0x26u);
      if (SBYTE3(v60) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_78;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    if (a2) {
      int v34 = "Companion";
    }
    else {
      int v34 = "Native";
    }
    sub_100134750(v52, v34);
    if (v55 >= 0) {
      unsigned int v35 = v52;
    }
    else {
      unsigned int v35 = *(unsigned char **)v52;
    }
    unsigned int v36 = [a4 code];
    id v37 = [a4 domain];
    id v38 = [a4 localizedDescription];
    *(_DWORD *)std::string __p = 136446978;
    *(void *)&__p[4] = v35;
    __int16 v57 = 1026;
    unsigned int v58 = v36;
    __int16 v59 = 2114;
    id v60 = v37;
    __int16 v61 = 2114;
    id v62 = v38;
    int v27 = (char *)_os_log_send_and_compose_impl();
    if (v55 < 0) {
      operator delete(*(void **)v52);
    }
  }
  sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::handleAdrResponse(NumberType, NSURLResponse *, NSError *)", "%s\n", v27);
  if (v27 != buf) {
LABEL_60:
  }
    free(v27);
LABEL_78:
  sub_100AAAF10(a1);
}

void sub_100AAEFB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100AAF014(uint64_t a1)
{
  uint64_t v2 = a1 + 1448;
  sub_100134750(__p, "carrier");
  uint64_t v3 = sub_100A80F3C(v2, 0, (uint64_t *)__p);
  if (*((char *)v3 + 31) < 0)
  {
    sub_1000DC48C(&__dst, (void *)v3[1], v3[2]);
  }
  else
  {
    __uuid_t dst = *(_OWORD *)(v3 + 1);
    uint64_t v15 = v3[3];
  }
  uint64_t v4 = (void **)(a1 + 1152);
  if (*(char *)(a1 + 1175) < 0) {
    operator delete(*v4);
  }
  *(_OWORD *)uint64_t v4 = __dst;
  *(void *)(a1 + 1168) = v15;
  HIBYTE(v15) = 0;
  LOBYTE(__dst) = 0;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  sub_100134750(v10, "carrier");
  uint64_t v5 = sub_100A80F3C(v2, 0, (uint64_t *)v10);
  if (*((char *)v5 + 55) < 0)
  {
    sub_1000DC48C(&__dst, (void *)v5[4], v5[5]);
  }
  else
  {
    __uuid_t dst = *((_OWORD *)v5 + 2);
    uint64_t v15 = v5[6];
  }
  long long v6 = (void **)(a1 + 1176);
  if (*(char *)(a1 + 1199) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)long long v6 = __dst;
  *(void *)(a1 + 1192) = v15;
  HIBYTE(v15) = 0;
  LOBYTE(__dst) = 0;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  *(_DWORD *)(a1 + 1292) = sub_10101AC10(*(unsigned int *)(a1 + 1784));
  *(void *)(a1 + 280) = 0x800000009;
  *(_DWORD *)(a1 + 276) = 3;
  *(_DWORD *)(a1 + 328) = 2;
  uint64_t v7 = sub_1001BA55C();
  long long v8 = (void *)sub_100802EC0(v7);
  if (v8)
  {
    long long v9 = v8;
    std::string::assign((std::string *)(a1 + 1368), (const std::string::value_type *)[v8 UTF8String]);
  }
}

void sub_100AAF1A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100AAF1D4(uint64_t a1)
{
}

void sub_100AAF1DC(uint64_t a1)
{
  uint64_t v2 = a1 + 1448;
  if (sub_100A80850(a1 + 1448))
  {
    id v3 = objc_alloc_init((Class)NSMutableDictionary);
    id v15 = v3;
    sub_100AAF564(a1, &v15);
    uint64_t v4 = sub_100A80850(v2);
    uint64_t v5 = v4;
    double v6 = *(double *)(a1 + 1704);
    if (v6 == 0.0 || v4 == 0)
    {
      uint64_t v8 = 0xFFFFFFFFLL;
    }
    else
    {
      int v9 = vcvtmd_s64_f64((v6 - CFAbsoluteTimeGetCurrent()) / 86400.0);
      if (v9 < 0) {
        int v9 = -2;
      }
      if (v9 <= 365) {
        uint64_t v8 = v9;
      }
      else {
        uint64_t v8 = 4294967293;
      }
    }
    [v3 setValue:[NSNumber numberWithBool:sub_100AA6E30((void *)a1)] forKey:@"certAvailable"];
    [v3 setValue:[NSNumber numberWithBool:v5] forKey:@"certRequestEnabled"];
    [v3 setValue:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v8)] forKey:@"nextCertRequestDay"];
    AnalyticsSendEvent();

    uint64_t v10 = sub_1000A6958();
    *(void *)long long buf = CFAbsoluteTimeGetCurrent();
    sub_100163398(v10, @"LastBAADailyReportSent", buf);
    uint64_t v11 = sub_1000A6958();
    (*(void (**)(uint64_t))(*(void *)v11 + 944))(v11);
    int v14 = 86400;
    sub_1000C7F88(buf);
    sub_10006EF84(*(uint64_t *)buf, "ConfiguredBAAReportingInterval", &v14);
    if (v19) {
      sub_1000DB0A0(v19);
    }
    [*(id *)(a1 + 2072) setNextFireDelay:(double)v14];
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v12 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#EED2,submitDailyBAAReport,com.apple.locationd.eed.baa.dailyreport event sent to CA. Next report after %{public}d seconds", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v16 = 67240192;
      int v17 = v14;
      char v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::submitDailyBAAReport()", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
}

void sub_100AAF544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1000DB0A0(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_100AAF564(uint64_t a1, id *a2)
{
  id v4 = *a2;
  uint64_t v5 = a1 + 32;
  uint64_t v6 = sub_100A96A4C(a1 + 32, 0);
  [v4 setValue:sub_101021560(*(unsigned int *)(v6 + 32)) forKey:@"simCountry1"];
  id v7 = *a2;
  uint64_t v8 = sub_100A96A4C(v5, 0);
  [v7 setValue:sub_101021560(*(unsigned int *)(v8 + 8)) forKey:@"operatorCountry1"];
  uint64_t v9 = a1 + 1448;
  sub_100134750(v40, "carrier");
  uint64_t v10 = sub_100A80F3C(v9, 0, (uint64_t *)v40);
  if (*((char *)v10 + 55) < 0) {
    sub_1000DC48C(&__dst, (void *)v10[4], v10[5]);
  }
  else {
    __uuid_t dst = *(std::string *)(v10 + 4);
  }
  if (v41 < 0) {
    operator delete(v40[0]);
  }
  std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  char v12 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __dst.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    std::string::assign(&__dst, "Unavailable");
    char v12 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  if (v12 >= 0) {
    p_uuid_t dst = &__dst;
  }
  else {
    p_uuid_t dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  [*a2 setValue:[+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_dst)] forKey:@"simBundleId1"];
  sub_100134750(__p, "operator");
  int v14 = sub_100A80F3C(v9, 0, (uint64_t *)__p);
  if (*((char *)v14 + 55) < 0) {
    sub_1000DC48C(&v39, (void *)v14[4], v14[5]);
  }
  else {
    std::string v39 = *(std::string *)(v14 + 4);
  }
  if (v38 < 0) {
    operator delete(__p[0]);
  }
  std::string::size_type v15 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  char v16 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v15 = v39.__r_.__value_.__l.__size_;
  }
  if (!v15)
  {
    std::string::assign(&v39, "Unavailable");
    char v16 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  }
  if (v16 >= 0) {
    int v17 = &v39;
  }
  else {
    int v17 = (std::string *)v39.__r_.__value_.__r.__words[0];
  }
  [*a2 setValue:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v17) forKey:@"operatorBundleId1"];
  if (sub_1000FFBA8())
  {
    id v18 = *a2;
    uint64_t v19 = sub_100A96A4C(v5, 1);
    [v18 setValue:sub_101021560(*(unsigned int *)(v19 + 32)) forKey:@"simCountry2"];
    id v20 = *a2;
    uint64_t v21 = sub_100A96A4C(v5, 1);
    [v20 setValue:sub_101021560(*(unsigned int *)(v21 + 8)) forKey:@"operatorCountry2"];
    sub_100134750(v34, "carrier");
    unint64_t v22 = sub_100A80F3C(v9, 1, (uint64_t *)v34);
    if (*((char *)v22 + 55) < 0) {
      sub_1000DC48C(&v36, (void *)v22[4], v22[5]);
    }
    else {
      std::string v36 = *(std::string *)(v22 + 4);
    }
    if (v35 < 0) {
      operator delete(v34[0]);
    }
    std::string::size_type v23 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    char v24 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v23 = v36.__r_.__value_.__l.__size_;
    }
    if (!v23)
    {
      std::string::assign(&v36, "Unavailable");
      char v24 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    }
    if (v24 >= 0) {
      unsigned int v25 = &v36;
    }
    else {
      unsigned int v25 = (std::string *)v36.__r_.__value_.__r.__words[0];
    }
    [*a2 setValue:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v25) forKey:@"simBundleId2"];
    sub_100134750(v31, "operator");
    long long v26 = sub_100A80F3C(v9, 1, (uint64_t *)v31);
    if (*((char *)v26 + 55) < 0) {
      sub_1000DC48C(&v33, (void *)v26[4], v26[5]);
    }
    else {
      std::string v33 = *(std::string *)(v26 + 4);
    }
    if (v32 < 0) {
      operator delete(v31[0]);
    }
    std::string::size_type v27 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    char v28 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v27 = v33.__r_.__value_.__l.__size_;
    }
    if (!v27)
    {
      std::string::assign(&v33, "Unavailable");
      char v28 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    }
    id v29 = *a2;
    if (v28 >= 0) {
      long long v30 = &v33;
    }
    else {
      long long v30 = (std::string *)v33.__r_.__value_.__r.__words[0];
    }
    [v29 setValue:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v30) forKey:@"operatorBundleId2"];
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_100AAF994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (*(char *)(v45 - 57) < 0) {
    operator delete(*(void **)(v45 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AAFA58(uint64_t a1, int a2)
{
  if (a2 > 20)
  {
    if (a2 > 29)
    {
      if (a2 == 30) {
        return 6;
      }
      if (a2 == 31) {
        return 3;
      }
    }
    else
    {
      if (a2 == 21) {
        return 2;
      }
      if (a2 == 26) {
        return 4294967294;
      }
    }
LABEL_15:
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v3 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 unexpected error code", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual uint32_t CLEmergencyEED2::getErrorCodePriority(Emergency::SessionErrorCode)", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    return 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t result = 1;
    switch(a2)
    {
      case 0:
        return result;
      case 2:
        uint64_t result = 5;
        break;
      case 3:
      case 12:
        return 2;
      case 10:
      case 14:
        uint64_t result = 4294967293;
        break;
      case 16:
        uint64_t result = 4;
        break;
      default:
        goto LABEL_15;
    }
  }
  return result;
}

uint64_t sub_100AAFCC0(uint64_t a1, unsigned int a2)
{
  if (a2 < 0xB) {
    return dword_101D70F9C[a2];
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  id v3 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning #EED2 unexpected error code", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "uint32_t CLEmergencyEED2::getEED2ErrorCodePriority(EED2SessionErrorCode)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return 0xFFFFFFFFLL;
}

void sub_100AAFE64(uint64_t a1, void *a2)
{
  if (a2)
  {
    if ([a2 type] == (id)1)
    {
      ++*(_DWORD *)(a1 + 80);
    }
    else if ([a2 type] == (id)2)
    {
      ++*(_DWORD *)(a1 + 84);
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v6 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = [a2 type];
      int v8 = *(_DWORD *)(a1 + 80);
      int v9 = *(_DWORD *)(a1 + 84);
      *(_DWORD *)long long buf = 134218496;
      id v11 = v7;
      __int16 v12 = 1024;
      int v13 = v8;
      __int16 v14 = 1024;
      int v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#EED2,updateRequestTypeCountForCA,eedRequest.type:%ld, fNumStreamingRequests:%d,fNumUploadRequests:%d", buf, 0x18u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    [a2 type];
    uint64_t v5 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::AnalyticsReport::updateRequestTypeCountForCA(CLEEDRequest *)", "%s\n");
LABEL_23:
    if (v5 != buf) {
      free(v5);
    }
    return;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  id v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#EED2,updateRequestTypeCountForCA,nil eedRequest,early return", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v5 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::AnalyticsReport::updateRequestTypeCountForCA(CLEEDRequest *)", "%s\n");
    goto LABEL_23;
  }
}

void sub_100AB01B4(uint64_t a1, void *a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  id v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [a2 count];
    int v6 = *(_DWORD *)(a1 + 96);
    int v7 = *(_DWORD *)(a1 + 100);
    *(_DWORD *)long long buf = 134218496;
    id v37 = v5;
    __int16 v38 = 1024;
    int v39 = v6;
    __int16 v40 = 1024;
    int v41 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2,updateMediaItemTypeCountForCA,before update, mediaItemList.count:%ld, fNumImages:%d, fNumVideos:%d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v17 = [a2 count];
    int v18 = *(_DWORD *)(a1 + 96);
    int v19 = *(_DWORD *)(a1 + 100);
    int v30 = 134218496;
    id v31 = v17;
    __int16 v32 = 1024;
    int v33 = v18;
    __int16 v34 = 1024;
    int v35 = v19;
    id v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::AnalyticsReport::updateMediaItemTypeCountForCA(NSSet<CLEEDMediaItem *> *)", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v8 = [a2 countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v26;
    do
    {
      for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v26 != v10) {
          objc_enumerationMutation(a2);
        }
        __int16 v12 = *(void **)(*((void *)&v25 + 1) + 8 * i);
        if ([v12 type] == (id)1)
        {
          ++*(_DWORD *)(a1 + 96);
        }
        else if ([v12 type] == (id)2)
        {
          ++*(_DWORD *)(a1 + 100);
        }
      }
      id v9 = [a2 countByEnumeratingWithState:&v25 objects:v29 count:16];
    }
    while (v9);
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  int v13 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    id v14 = [a2 count];
    int v15 = *(_DWORD *)(a1 + 96);
    int v16 = *(_DWORD *)(a1 + 100);
    *(_DWORD *)long long buf = 134218496;
    id v37 = v14;
    __int16 v38 = 1024;
    int v39 = v15;
    __int16 v40 = 1024;
    int v41 = v16;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#EED2,updateMediaItemTypeCountForCA,after update, mediaItemList.count:%ld, fNumImages:%d, fNumVideos:%d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v21 = [a2 count];
    int v22 = *(_DWORD *)(a1 + 96);
    int v23 = *(_DWORD *)(a1 + 100);
    int v30 = 134218496;
    id v31 = v21;
    __int16 v32 = 1024;
    int v33 = v22;
    __int16 v34 = 1024;
    int v35 = v23;
    char v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::AnalyticsReport::updateMediaItemTypeCountForCA(NSSet<CLEEDMediaItem *> *)", "%s\n", v24);
    if (v24 != (char *)buf) {
      free(v24);
    }
  }
}

void sub_100AB05F8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (sub_100D33CE4(v3 + 112))
  {
    id v4 = *(void **)(v3 + 1840);
    if (v4) {

    }
    *(void *)(v3 + 1840) = a2;
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(v3 + 1840);
      *(_DWORD *)long long buf = 138477827;
      uint64_t v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#EED2,initializeAPNSHelper,apnsTokenCallback,receveived token,%{private}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::initializeAPNSHelper()_block_invoke", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    uint64_t v7 = *(void *)(v3 + 2088);
    if (v7) {
      *(unsigned char *)(v7 + 40) = 1;
    }
    sub_100A8CA74(v3 + 1536, 15);
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v8 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#EED2,initializeAPNSHelper,not in emergency call,early return", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::initializeAPNSHelper()_block_invoke", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

uint64_t sub_100AB0920(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 1848);
  if (v4) {

  }
  *(void *)(v3 + 1848) = a2;
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  id v5 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(v3 + 1848);
    *(_DWORD *)long long buf = 138477827;
    v15[0] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#EED2,initializeAPNSHelper,apnsMessageCallback,receveived message,%{private}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::initializeAPNSHelper()_block_invoke", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  uint64_t v7 = *(void *)(v3 + 2088);
  if (v7)
  {
    ++*(_DWORD *)(v7 + 44);
    if (sub_100A988EC(v3) == 4) {
      ++*(_DWORD *)(*(void *)(v3 + 2088) + 60);
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v8 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(v3 + 2088);
      int v10 = *(_DWORD *)(v9 + 44);
      LODWORD(v9) = *(_DWORD *)(v9 + 60);
      *(_DWORD *)long long buf = 67109376;
      LODWORD(v15[0]) = v10;
      WORD2(v15[0]) = 1024;
      *(_DWORD *)((char *)v15 + 6) = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#EED2,initializeAPNSHelper,apnsMessageCallback,fNumRequestsReceived:%d,fNumRequestsDuringEEM:%d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::initializeAPNSHelper()_block_invoke", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  return sub_100A8CA74(v3 + 1536, 16);
}

uint64_t sub_100AB0C9C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  uint64_t v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2,initializeAPNSHelper,apnsReconnectedCallback", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::initializeAPNSHelper()_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return sub_100A8CA74(v1 + 1536, 22);
}

uint64_t sub_100AB0E3C(uint64_t a1, int a2, void *a3, void *a4)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  id v8 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = a2 ? "Companion" : "Native";
    sub_100134750(__p, v9);
    int v10 = SBYTE3(v62) >= 0 ? __p : *(unsigned char **)__p;
    id v11 = [[objc_msgSend(a3, "valueForHTTPHeaderField:", @"X-Responding-Instance") UTF8String];
    id v12 = [[objc_msgSend(a3, "valueForHTTPHeaderField:", @"X-Apple-Request-UUID") UTF8String];
    id v13 = [[objc_msgSend(a3, "valueForHTTPHeaderField:", @"X-Apple-Jingle-Correlation-Key") UTF8String];
    id v14 = [[objc_msgSend(a3, "valueForHTTPHeaderField:", @"Via") UTF8String];
    *(_DWORD *)long long buf = 68290307;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    __int16 v66 = 2082;
    id v67 = v10;
    __int16 v68 = 2081;
    id v69 = v11;
    __int16 v70 = 2081;
    id v71 = v12;
    __int16 v72 = 2081;
    id v73 = v13;
    __int16 v74 = 2081;
    id v75 = v14;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EED2,#ControlData,handleControlDataResponse,response headers\", \"numberType\":%{public, location:escape_only}s, \"responding instance\":%{private, location:escape_only}s, \"UUID\":%{private, location:escape_only}s, \"jingle corr key\":%{private, location:escape_only}s, \"via\":%{private, location:escape_only}s}", buf, 0x44u);
    if (SBYTE3(v62) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (a3)
  {
    if ([a3 statusCode] == (id)200)
    {
      uint64_t v15 = *(void *)(a1 + 2088);
      if (v15) {
        ++*(_DWORD *)(v15 + 56);
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v16 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        if (a2) {
          id v17 = "Companion";
        }
        else {
          id v17 = "Native";
        }
        sub_100134750(buf, v17);
        int v18 = SBYTE3(v67);
        int v19 = *(unsigned char **)buf;
        unsigned int v20 = [a3 statusCode];
        id v21 = buf;
        if (v18 < 0) {
          id v21 = v19;
        }
        *(_DWORD *)std::string __p = 136446466;
        *(void *)&__p[4] = v21;
        __int16 v59 = 1026;
        unsigned int v60 = v20;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#EED2,ControlData POST for %{public}s number succeeded with response code %{public}d", __p, 0x12u);
        if (SBYTE3(v67) < 0) {
          operator delete(*(void **)buf);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_68;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      if (a2) {
        int v22 = "Companion";
      }
      else {
        int v22 = "Native";
      }
      sub_100134750(__p, v22);
      int v23 = SBYTE3(v62);
      char v24 = *(unsigned char **)__p;
      unsigned int v25 = [a3 statusCode];
      long long v26 = __p;
      if (v23 < 0) {
        long long v26 = v24;
      }
      *(_DWORD *)unsigned int v54 = 136446466;
      *(void *)&void v54[4] = v26;
      __int16 v55 = 1026;
      unsigned int v56 = v25;
      long long v27 = (char *)_os_log_send_and_compose_impl();
      if (SBYTE3(v62) < 0) {
        operator delete(*(void **)__p);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::handleControlDataResponse(NumberType, NSURLResponse *, NSError *)", "%s\n", v27);
      if (v27 == buf) {
        goto LABEL_68;
      }
      goto LABEL_96;
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    __int16 v34 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      if (a2) {
        int v35 = "Companion";
      }
      else {
        int v35 = "Native";
      }
      sub_100134750(buf, v35);
      int v36 = SBYTE3(v67);
      id v37 = *(unsigned char **)buf;
      unsigned int v38 = [a3 statusCode];
      int v39 = buf;
      if (v36 < 0) {
        int v39 = v37;
      }
      *(_DWORD *)std::string __p = 136446466;
      *(void *)&__p[4] = v39;
      __int16 v59 = 1026;
      unsigned int v60 = v38;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#EED2,ControlData POST for %{public}s number failed with response code %{public}d", __p, 0x12u);
      if (SBYTE3(v67) < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      if (a2) {
        __int16 v48 = "Companion";
      }
      else {
        __int16 v48 = "Native";
      }
      sub_100134750(__p, v48);
      int v49 = SBYTE3(v62);
      __int16 v50 = *(unsigned char **)__p;
      unsigned int v51 = [a3 statusCode];
      id v52 = __p;
      if (v49 < 0) {
        id v52 = v50;
      }
      *(_DWORD *)unsigned int v54 = 136446466;
      *(void *)&void v54[4] = v52;
      __int16 v55 = 1026;
      unsigned int v56 = v51;
      __int16 v53 = (char *)_os_log_send_and_compose_impl();
      if (SBYTE3(v62) < 0) {
        operator delete(*(void **)__p);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::handleControlDataResponse(NumberType, NSURLResponse *, NSError *)", "%s\n", v53);
      if (v53 != buf) {
        free(v53);
      }
    }
    *(unsigned char *)(a1 + 1962) = 1;
    if ([a3 statusCode] == (id)416)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      __int16 v40 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "#EED2,ControlData POST was determined to be outside coverage area", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_68;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      *(_WORD *)std::string __p = 0;
      long long v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::handleControlDataResponse(NumberType, NSURLResponse *, NSError *)", "%s\n", v27);
      if (v27 == buf) {
        goto LABEL_68;
      }
LABEL_96:
      free(v27);
LABEL_68:
      *(unsigned char *)(a1 + 1962) = 0;
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    long long v28 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      id v29 = a2 ? "Companion" : "Native";
      sub_100134750(__p, v29);
      int v30 = SBYTE3(v62) >= 0 ? __p : *(unsigned char **)__p;
      unsigned int v31 = [a4 code];
      __int16 v32 = [a4 domain];
      id v33 = [a4 localizedDescription];
      *(_DWORD *)long long buf = 136446978;
      *(void *)&uint8_t buf[4] = v30;
      *(_WORD *)&unsigned char buf[12] = 1026;
      *(_DWORD *)&buf[14] = v31;
      __int16 v66 = 2114;
      id v67 = v32;
      __int16 v68 = 2114;
      id v69 = v33;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#EED2,ControlData POST for %{public}s number failed with error code,%{public}d,domain,%{public}@,reason,%{public}@", buf, 0x26u);
      if (SBYTE3(v62) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      if (a2) {
        int v42 = "Companion";
      }
      else {
        int v42 = "Native";
      }
      sub_100134750(v54, v42);
      if (v57 >= 0) {
        unsigned int v43 = v54;
      }
      else {
        unsigned int v43 = *(unsigned char **)v54;
      }
      unsigned int v44 = [a4 code];
      id v45 = [a4 domain];
      id v46 = [a4 localizedDescription];
      *(_DWORD *)std::string __p = 136446978;
      *(void *)&__p[4] = v43;
      __int16 v59 = 1026;
      unsigned int v60 = v44;
      __int16 v61 = 2114;
      id v62 = v45;
      __int16 v63 = 2114;
      id v64 = v46;
      int v47 = (char *)_os_log_send_and_compose_impl();
      if (v57 < 0) {
        operator delete(*(void **)v54);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::handleControlDataResponse(NumberType, NSURLResponse *, NSError *)", "%s\n", v47);
      if (v47 != buf) {
        free(v47);
      }
    }
    *(unsigned char *)(a1 + 1962) = 1;
  }
  sub_100AAAF10(a1);
  return sub_100A8CA74(a1 + 1536, 23);
}

void sub_100AB17D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100AB182C(uint64_t a1)
{
  if (*(void *)(a1 + 1848))
  {
    if (!*(void *)(a1 + 1912) || !*(void *)(a1 + 1920))
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v9 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#EED2,handleAPNSMessage,nil fRequestsPending or fRequestsHandled queue,early return", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        int v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::canHandleAPNSMessage()", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
      }
      if (*(void *)(a1 + 1920)) {
        sub_100AB205C(a1, 7);
      }

      goto LABEL_18;
    }
    if (!*(void *)(a1 + 1872))
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v12 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#EED2,canHandleAPNSMessage,nil fHelperService,early return", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        unsigned int v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::canHandleAPNSMessage()", "%s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
      }
      sub_100AB205C(a1, 7);

      goto LABEL_18;
    }
    id v2 = +[CLEEDRequest getSessionStartTimeFromDict:](CLEEDRequest, "getSessionStartTimeFromDict:");
    [+[NSDate dateWithTimeIntervalSinceReferenceDate:*(double *)(a1 + 168)] timeIntervalSince1970];
    if (v2 != (id)llround(v3))
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v13 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#EED2,canHandleAPNSMessage,receivedSessionStartTime and device session start time mismatch, early return", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        id v21 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::canHandleAPNSMessage()", "%s\n", v21);
        if (v21 != (char *)buf) {
          free(v21);
        }
      }
      sub_100AB205C(a1, 10);

      goto LABEL_18;
    }
    id v4 = +[CLEEDRequest getCallIDFromDict:*(void *)(a1 + 1848)];
    uint64_t v5 = sub_100A96A4C(a1 + 32, *(_DWORD *)(a1 + 1448));
    uint64_t v6 = (void *)(v5 + 136);
    uint64_t v7 = (const char *)[v4 UTF8String];
    size_t v8 = strlen(v7);
    if (*(char *)(v5 + 159) < 0)
    {
      if (v8 != *(void *)(v5 + 144)) {
        goto LABEL_41;
      }
      if (v8 == -1) {
        goto LABEL_77;
      }
      uint64_t v6 = (void *)*v6;
    }
    else
    {
      if (v8 != *(unsigned __int8 *)(v5 + 159)) {
        goto LABEL_41;
      }
      if (v8 == -1) {
LABEL_77:
      }
        sub_1002E93D4();
    }
    if (!memcmp(v6, v7, v8)) {
      return 1;
    }
LABEL_41:
    id v14 = (void *)(a1 + 136);
    uint64_t v15 = (const char *)[v4 UTF8String];
    size_t v16 = strlen(v15);
    if (*(char *)(a1 + 159) < 0)
    {
      if (v16 == *(void *)(a1 + 144))
      {
        if (v16 == -1) {
          goto LABEL_78;
        }
        id v14 = (void *)*v14;
        goto LABEL_48;
      }
    }
    else if (v16 == *(unsigned __int8 *)(a1 + 159))
    {
      if (v16 == -1) {
LABEL_78:
      }
        sub_1002E93D4();
LABEL_48:
      if (memcmp(v14, v15, v16)) {
        goto LABEL_49;
      }
      return 1;
    }
LABEL_49:
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v17 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#EED2,canHandleAPNSMessage,receivedCallID doesn't match native or companion number, early return", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::canHandleAPNSMessage()", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
    sub_100AB205C(a1, 11);

LABEL_18:
    BOOL result = 0;
    *(void *)(a1 + 1848) = 0;
    return result;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  id v11 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#EED2,canHandleAPNSMessage,nil fAPNSMessage early return", buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::canHandleAPNSMessage()", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
    return 0;
  }
  return result;
}

void sub_100AB2048(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100AB205C(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = 0;
  id v4 = [CLEEDRequest createRequestFromDict:*(void *)(a1 + 1848) baseURL:@"https://dummyURL" sessionID:[@"dummySessionID" dataUsingEncoding:4] partnerAdrPublicKeyData:[@"dummyPartnerAdrPublicKeyData" dataUsingEncoding:4] deviceSessionPrivateKey:*(void *)(a1 + 1952) deviceSessionSecret:[@"dummyDeviceSessionSecretForPartner" dataUsingEncoding:4] error:&v18];
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = v4;
    [v5 setState:a2];
    [v5 setRequestReceivedTime:CFAbsoluteTimeGetCurrent()];
    [objc_msgSend(v5, "requestDate") timeIntervalSinceDate:[NSDate date]];
    [v5 setRequestTransmissionTime:(int)vcvtpd_s64_f64(fabs(v7) * 1000.0)];
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    size_t v8 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = [v5 requestDate];
      int v10 = +[NSDate date];
      id v11 = [v5 requestTransmissionTime];
      *(_DWORD *)long long buf = 138412802;
      id v26 = v9;
      __int16 v27 = 2112;
      long long v28 = v10;
      __int16 v29 = 2048;
      id v30 = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#EED2,handleRequestRejection,request sent date:%@, request received date: %@, requestTransmissionTime:%ld milliseconds", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v13 = [v5 requestDate];
      id v14 = +[NSDate date];
      id v15 = [v5 requestTransmissionTime];
      int v19 = 138412802;
      id v20 = v13;
      __int16 v21 = 2112;
      int v22 = v14;
      __int16 v23 = 2048;
      id v24 = v15;
      size_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::handleRequestRejection(CLEEDRequestState)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    [*(id *)(a1 + 1920) addObject:v5];
    sub_100A9FA38(a1);
    sub_100AA0A2C(a1);
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v12 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#EED2,handleRequestRejection,CLEEDRequest could not be created. This should not happen", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      LOWORD(v19) = 0;
      id v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::handleRequestRejection(CLEEDRequestState)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
  }
}

uint64_t sub_100AB24C0(uint64_t a1, void *a2)
{
  uint64_t v67 = 0;
  __int16 v68 = &v67;
  uint64_t v69 = 0x2020000000;
  int v70 = -1;
  id v4 = *(void **)(a1 + 1912);
  v66[0] = _NSConcreteStackBlock;
  v66[1] = 3221225472;
  v66[2] = sub_100AB38CC;
  v66[3] = &unk_1022DB870;
  v66[4] = a2;
  v66[5] = &v67;
  [v4 enumerateObjectsUsingBlock:v66];
  if ((v68[3] & 0x80000000) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = [objc_msgSend(*(id *)(a1 + 1912), "objectAtIndexedSubscript:", *((int *)v68 + 6)) ID];
      *(_DWORD *)long long buf = 138543362;
      id v80 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#EED2,isDuplicateRequest,pending request:%{public}@ moved from fRequestsPending queue to fRequestsHandled queue", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v42 = [[objc_msgSend(*(id *)(a1 + 1912), "objectAtIndexedSubscript:", *((int *)v68 + 6)) ID];
      int v71 = 138543362;
      id v72 = v42;
      unsigned int v43 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::isDuplicateRequest(CLEEDRequest *)", "%s\n", v43);
      if (v43 != (char *)buf) {
        free(v43);
      }
    }
    [objc_msgSend(*(id *)(a1 + 1912), "objectAtIndexedSubscript:", *((int *)v68 + 6)) setState:15];
    [*(id *)(a1 + 1920) addObject:[*(id *)(a1 + 1912) objectAtIndex:*((int *)v68 + 6)]];
    [*(id *)(a1 + 1912) removeObjectAtIndex:*((int *)v68 + 6)];
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    double v7 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = [a2 ID];
      *(_DWORD *)long long buf = 138543362;
      id v80 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#EED2,isDuplicateRequest, Allow the new request:%{public}@ to be added to pending queue", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v44 = [a2 ID];
      int v71 = 138543362;
      id v72 = v44;
      id v45 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::isDuplicateRequest(CLEEDRequest *)", "%s\n", v45);
      if (v45 != (char *)buf) {
        free(v45);
      }
    }
    uint64_t v9 = *(void *)(a1 + 2088);
    if (v9)
    {
      uint64_t v10 = 0;
      ++*(_DWORD *)(v9 + 64);
      goto LABEL_71;
    }
LABEL_70:
    uint64_t v10 = 0;
    goto LABEL_71;
  }
  id v11 = *(void **)(a1 + 1928);
  if (!v11 || (id v12 = [v11 type], v12 != objc_msgSend(a2, "type")))
  {
    uint64_t v18 = *(void **)(a1 + 1936);
    if (v18 && (id v19 = [v18 type], v19 == objc_msgSend(a2, "type")))
    {
      uint64_t v20 = *(void *)(a1 + 2088);
      if (v20) {
        ++*(_DWORD *)(v20 + 64);
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      __int16 v21 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        id v22 = [a2 ID];
        id v23 = [a2 type];
        id v24 = [*(id *)(a1 + 1936) ID];
        id v25 = [*(id *)(a1 + 1936) state];
        *(_DWORD *)long long buf = 138544130;
        id v80 = v22;
        __int16 v81 = 2048;
        id v82 = v23;
        __int16 v83 = 2114;
        id v84 = v24;
        __int16 v85 = 2050;
        id v86 = v25;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#EED2,isDuplicateRequest,Received request:%{public}@ with type %ld matches current upload request with RequestID:%{public}@ which is in state:%{public}ld", buf, 0x2Au);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        id v46 = [a2 ID];
        id v47 = [a2 type];
        id v48 = [*(id *)(a1 + 1936) ID];
        id v49 = [*(id *)(a1 + 1936) state];
        int v71 = 138544130;
        id v72 = v46;
        __int16 v73 = 2048;
        id v74 = v47;
        __int16 v75 = 2114;
        id v76 = v48;
        __int16 v77 = 2050;
        id v78 = v49;
        __int16 v50 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::isDuplicateRequest(CLEEDRequest *)", "%s\n", v50);
        if (v50 != (char *)buf) {
          free(v50);
        }
      }
      if ([*(id *)(a1 + 1936) state] != (id)1) {
        [*(id *)(a1 + 1936) setState:16];
      }
      [*(id *)(a1 + 1920) addObject:*(void *)(a1 + 1936)];
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v26 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        id v27 = [*(id *)(a1 + 1936) ID];
        *(_DWORD *)long long buf = 138543362;
        id v80 = v27;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#EED2,isDuplicateRequest,fCurrentUploadRequest:%{public}@ moved to fRequestsHandled queue", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        id v51 = [*(id *)(a1 + 1936) ID];
        int v71 = 138543362;
        id v72 = v51;
        id v52 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::isDuplicateRequest(CLEEDRequest *)", "%s\n", v52);
        if (v52 != (char *)buf) {
          free(v52);
        }
      }

      *(void *)(a1 + 1936) = 0;
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      long long v28 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        id v29 = [a2 ID];
        *(_DWORD *)long long buf = 138543362;
        id v80 = v29;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#EED2,isDuplicateRequest, Allow the new upload request:%{public}@ to be added to pending queue", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_70;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_101;
      }
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v30 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        id v31 = [a2 ID];
        *(_DWORD *)long long buf = 138543362;
        id v80 = v31;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#EED2,isDuplicateRequest, duplicate request not found, allow the new request:%{public}@ to be added to pending queue", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_70;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_101;
      }
    }
LABEL_103:
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
LABEL_101:
    id v64 = [a2 ID];
    int v71 = 138543362;
    id v72 = v64;
    uint64_t v65 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::isDuplicateRequest(CLEEDRequest *)", "%s\n", v65);
    if (v65 != (char *)buf) {
      free(v65);
    }
    goto LABEL_70;
  }
  uint64_t v13 = *(void *)(a1 + 2088);
  if (v13) {
    ++*(_DWORD *)(v13 + 64);
  }
  if ([*(id *)(a1 + 1928) state] != (id)1)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    __int16 v32 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      id v33 = [a2 ID];
      id v34 = [a2 type];
      id v35 = [*(id *)(a1 + 1928) ID];
      id v36 = [*(id *)(a1 + 1928) state];
      *(_DWORD *)long long buf = 138544130;
      id v80 = v33;
      __int16 v81 = 2048;
      id v82 = v34;
      __int16 v83 = 2114;
      id v84 = v35;
      __int16 v85 = 2050;
      id v86 = v36;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#EED2,isDuplicateRequest,Received request:%{public}@ with type %ld matches current streaming request with RequestID:%{public}@ which is in state:%{public}ld", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v57 = [a2 ID];
      id v58 = [a2 type];
      id v59 = [*(id *)(a1 + 1928) ID];
      id v60 = [*(id *)(a1 + 1928) state];
      int v71 = 138544130;
      id v72 = v57;
      __int16 v73 = 2048;
      id v74 = v58;
      __int16 v75 = 2114;
      id v76 = v59;
      __int16 v77 = 2050;
      id v78 = v60;
      __int16 v61 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::isDuplicateRequest(CLEEDRequest *)", "%s\n", v61);
      if (v61 != (char *)buf) {
        free(v61);
      }
    }
    [*(id *)(a1 + 1928) setState:16];
    [*(id *)(a1 + 1920) addObject:*(void *)(a1 + 1928)];
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v37 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      id v38 = [*(id *)(a1 + 1928) ID];
      *(_DWORD *)long long buf = 138543362;
      id v80 = v38;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "#EED2,isDuplicateRequest,fCurrentStreamingRequest:%{public}@ moved to fRequestsHandled queue and marked as duplicate", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v62 = [*(id *)(a1 + 1928) ID];
      int v71 = 138543362;
      id v72 = v62;
      __int16 v63 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::isDuplicateRequest(CLEEDRequest *)", "%s\n", v63);
      if (v63 != (char *)buf) {
        free(v63);
      }
    }

    *(void *)(a1 + 1928) = 0;
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v39 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      id v40 = [a2 ID];
      *(_DWORD *)long long buf = 138543362;
      id v80 = v40;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#EED2,isDuplicateRequest, Allow the new streaming request:%{public}@ to be added to pending queue", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_70;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 == -1) {
      goto LABEL_101;
    }
    goto LABEL_103;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  id v14 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    id v15 = [a2 ID];
    id v16 = [a2 type];
    id v17 = [*(id *)(a1 + 1928) ID];
    *(_DWORD *)long long buf = 138543874;
    id v80 = v15;
    __int16 v81 = 2048;
    id v82 = v16;
    __int16 v83 = 2114;
    id v84 = v17;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#EED2,isDuplicateRequest,Received request:%{public}@ with type %ld matches current ACCEPTED streaming request with RequestID:%{public}@", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v53 = [a2 ID];
    id v54 = [a2 type];
    id v55 = [*(id *)(a1 + 1928) ID];
    int v71 = 138543874;
    id v72 = v53;
    __int16 v73 = 2048;
    id v74 = v54;
    __int16 v75 = 2114;
    id v76 = v55;
    unsigned int v56 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::isDuplicateRequest(CLEEDRequest *)", "%s\n", v56);
    if (v56 != (char *)buf) {
      free(v56);
    }
  }
  uint64_t v10 = 1;
LABEL_71:
  _Block_object_dispose(&v67, 8);
  return v10;
}

void sub_100AB35E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100AB3678(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v7 = +[CLEEDRequest toCLEEDRequestType:](CLEEDRequest, "toCLEEDRequestType:", [a2 valueForKey:@"capability"]);
  if (v7 == [*(id *)(a1 + 32) type])
  {
    if ((objc_msgSend(objc_msgSend(a2, "valueForKey:", @"status"), "isEqualToString:", @"supported") & 1) != 0|| objc_msgSend(objc_msgSend(a2, "valueForKey:", @"status"), "isEqualToString:", @"supported_nearby_device"))
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v8 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        id v9 = [*(id *)(a1 + 32) type];
        *(_DWORD *)long long buf = 134349056;
        id v12 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#EED2,handleAPNSMessage,requestType:%{public}ld is supported by device", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        [*(id *)(a1 + 32) type];
        uint64_t v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::handleAPNSMessage()_block_invoke", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
    }
    *a4 = 1;
  }
}

void sub_100AB38CC(uint64_t a1, void *a2, int a3, unsigned char *a4)
{
  id v8 = [*(id *)(a1 + 32) type];
  if (v8 == [a2 type])
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a3;
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v9 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = [a2 ID];
      int v11 = *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
      id v12 = [*(id *)(a1 + 32) ID];
      id v13 = [*(id *)(a1 + 32) type];
      *(_DWORD *)long long buf = 138544130;
      id v16 = v10;
      __int16 v17 = 1026;
      int v18 = v11;
      __int16 v19 = 2114;
      id v20 = v12;
      __int16 v21 = 2050;
      id v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#EED2,isDuplicateRequest,found pending request:%{public}@ at index:%{public}d that matches received request:%{public}@ for request type:%{public}ld", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      [a2 ID];
      [*(id *)(a1 + 32) ID];
      [*(id *)(a1 + 32) type];
      id v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::isDuplicateRequest(CLEEDRequest *)_block_invoke", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    *a4 = 1;
  }
}

id sub_100AB3B60(id *a1, int a2, void *a3, void *a4)
{
  uint64_t v26 = 0;
  id v27 = &v26;
  uint64_t v28 = 0x2020000000;
  int v29 = -1;
  id v8 = a1[240];
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  void v25[2] = sub_100AB40E0;
  void v25[3] = &unk_1022DB870;
  v25[4] = a3;
  void v25[5] = &v26;
  [v8 enumerateObjectsUsingBlock:v25];
  if ((v27[3] & 0x80000000) != 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v13 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138543362;
      id v40 = a3;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#EED2,checkHandledQueueForDuplicateRequest,matching handled request not found for request:%{public}@, early return", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      LODWORD(v34) = 138543362;
      *(void *)((char *)&v34 + 4) = a3;
      __int16 v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLEEDRequest *CLEmergencyEED2::checkHandledQueueForDuplicateRequest(BOOL, NSUUID *, NSError **)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
    id v14 = objc_alloc((Class)NSError);
    NSErrorUserInfoKey v37 = NSLocalizedDescriptionKey;
    CFStringRef v38 = @"Request not found";
    id v15 = [[v14 initWithDomain:@"com.apple.CoreLocation.CLEEDHelperService" code:4 userInfo:[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v38, &v37, 1)];
    id v12 = 0;
    *a4 = v15;
  }
  else
  {
    id v9 = [a1[240] objectAtIndex:];
    *(void *)&long long v34 = 0;
    *((void *)&v34 + 1) = &v34;
    uint64_t v35 = 0x2020000000;
    int v36 = -1;
    id v10 = a1[239];
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    void v24[2] = sub_100AB42F4;
    v24[3] = &unk_1022DB870;
    v24[4] = v9;
    void v24[5] = &v34;
    [v10 enumerateObjectsUsingBlock:v24];
    if ((*(_DWORD *)(*((void *)&v34 + 1) + 24) & 0x80000000) != 0)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v16 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        id v17 = [v9 type];
        *(_DWORD *)long long buf = 134349056;
        id v40 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#EED2,checkHandledQueueForDuplicateRequest,request of type:%{public}ld not found in fRequestsPending queue, early return", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        id v22 = [v9 type];
        int v32 = 134349056;
        id v33 = v22;
        id v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLEEDRequest *CLEmergencyEED2::checkHandledQueueForDuplicateRequest(BOOL, NSUUID *, NSError **)", "%s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
      }
      id v18 = objc_alloc((Class)NSError);
      NSErrorUserInfoKey v30 = NSLocalizedDescriptionKey;
      CFStringRef v31 = @"Request not found";
      id v19 = [[v18 initWithDomain:@"com.apple.CoreLocation.CLEEDHelperService" code:4 userInfo:[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v31, &v30, 1)];
      id v12 = 0;
      *a4 = v19;
    }
    else
    {
      id v11 = [a1[239] objectAtIndex:];
      if (v11)
      {
        id v12 = sub_100AB4528(a1, v11, a2, a4);
        [a1[239] removeObjectAtIndex:*(int *)(*((void *)&v34 + 1) + 24)];
      }
      else
      {
        id v12 = 0;
      }
    }
    _Block_object_dispose(&v34, 8);
  }
  _Block_object_dispose(&v26, 8);
  return v12;
}

void sub_100AB409C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_100AB40E0(uint64_t a1, void *a2, int a3, unsigned char *a4)
{
  if (objc_msgSend(*(id *)(a1 + 32), "isEqual:", objc_msgSend(a2, "ID")))
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a3;
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v7 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
      *(_DWORD *)long long buf = 138543618;
      uint64_t v12 = v8;
      __int16 v13 = 1026;
      int v14 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#EED2,checkHandledQueueForDuplicateRequest,found matching handled request for request ID:%{public}@ at index:%{public}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLEEDRequest *CLEmergencyEED2::checkHandledQueueForDuplicateRequest(BOOL, NSUUID *, NSError **)_block_invoke", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    *a4 = 1;
  }
}

void sub_100AB42F4(uint64_t a1, void *a2, int a3, unsigned char *a4)
{
  id v8 = [*(id *)(a1 + 32) type];
  if (v8 == [a2 type])
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a3;
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v9 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = [a2 ID];
      int v11 = *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
      *(_DWORD *)long long buf = 138543618;
      id v14 = v10;
      __int16 v15 = 1026;
      int v16 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#EED2,checkHandledQueueForDuplicateRequest,found matching pending request with request ID:%{public}@ at index:%{public}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      [a2 ID];
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLEEDRequest *CLEmergencyEED2::checkHandledQueueForDuplicateRequest(BOOL, NSUUID *, NSError **)_block_invoke", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    *a4 = 1;
  }
}

id sub_100AB4528(id *a1, void *a2, int a3, void *a4)
{
  id v6 = a2;
  [a2 updateDurationInformationForCA:];
  switch((unint64_t)[v6 type])
  {
    case 0uLL:
    case 3uLL:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v8 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#EED2,updatePendingRequestForResponse,unknown Request Type. This is unexpected", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        LOWORD(v29) = 0;
        id v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLEEDRequest *CLEmergencyEED2::updatePendingRequestForResponse(CLEEDRequest *, BOOL, NSError **)", "%s\n", v22);
        if (v22 != (char *)buf) {
          free(v22);
        }
      }
      [a1[240] addObject:v6];
      NSErrorUserInfoKey v27 = NSLocalizedDescriptionKey;
      CFStringRef v28 = @"Unknown Request Type";
      id v6 = 0;
      *a4 = [objc_alloc((Class)NSError) initWithDomain:@"com.apple.CoreLocation.CLEEDHelperService" code:4 userInfo:[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v28, &v27, 1)];
      return v6;
    case 1uLL:
      id v9 = a1[249];
      if (v9 && [v9 dropStreaming] && (a3 & 1) != 0)
      {
        uint64_t v10 = 17;
      }
      else
      {
        if ([v6 state] == (id)17) {
          goto LABEL_29;
        }
        if (a3) {
          uint64_t v10 = 1;
        }
        else {
          uint64_t v10 = 4;
        }
      }
      [v6 setState:v10];
LABEL_29:
      if (![v6 requestStatusAtFirstUserResponse]) {
        [v6 setRequestStatusAtFirstUserResponse:[v6 state]];
      }
      if ([v6 state] == (id)17)
      {
        [a1[240] addObject:v6];
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        id v14 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138543362;
          id v32 = [v6 ID];
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#EED2,updatePendingRequestForResponse,request:%{public}@ found and moved from pending queue to requestsHandled queue", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          int v29 = 138543362;
          id v30 = [v6 ID];
          __int16 v15 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLEEDRequest *CLEmergencyEED2::updatePendingRequestForResponse(CLEEDRequest *, BOOL, NSError **)", "%s\n", v15);
          if (v15 != (char *)buf) {
            free(v15);
          }
        }
      }
      else
      {
        a1[241] = v6;
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        int v16 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          id v17 = [a1[241] ID];
          *(_DWORD *)long long buf = 138543362;
          id v32 = v17;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#EED2,updatePendingRequestForResponse,request:%{public}@ found and moved from pending queue to fCurrentStreamingRequest", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          id v25 = [a1[241] ID];
          int v29 = 138543362;
          id v30 = v25;
          uint64_t v26 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLEEDRequest *CLEmergencyEED2::updatePendingRequestForResponse(CLEEDRequest *, BOOL, NSError **)", "%s\n", v26);
          if (v26 != (char *)buf) {
            free(v26);
          }
        }
        return a1[241];
      }
      return v6;
    case 2uLL:
      id v11 = v6;
      a1[242] = v11;
      if (!a1[249]
        || ((v12 = [a1[249] uploadMigitation], id v11 = a1[242], v12 == (id)1) ? (v13 = a3 == 0) : (v13 = 1),
            v13))
      {
        if ([v11 state] == (id)18) {
          goto LABEL_48;
        }
        if (a3) {
          uint64_t v18 = 1;
        }
        else {
          uint64_t v18 = 4;
        }
        id v11 = a1[242];
      }
      else
      {
        uint64_t v18 = 18;
      }
      [v11 setState:v18];
LABEL_48:
      if (![a1[242] requestStatusAtFirstUserResponse]) {
        [a1[242] setRequestStatusAtFirstUserResponse:[a1[242] state]];
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v19 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        id v20 = [a1[242] ID];
        *(_DWORD *)long long buf = 138543362;
        id v32 = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#EED2,updatePendingRequestForResponse,request:%{public}@ found and moved from pending queue to fCurrentUploadRequest", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        id v23 = [a1[242] ID];
        int v29 = 138543362;
        id v30 = v23;
        id v24 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLEEDRequest *CLEmergencyEED2::updatePendingRequestForResponse(CLEEDRequest *, BOOL, NSError **)", "%s\n", v24);
        if (v24 != (char *)buf) {
          free(v24);
        }
      }
      return a1[242];
    default:
      return 0;
  }
}

uint64_t sub_100AB4CB4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if ([*(id *)(v3 + 1912) count])
  {
    id v4 = [objc_alloc((Class)NSSet) initWithArray:*(void *)(v3 + 1912)];
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138477827;
      id v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#EED2,pendingRequestCB,pending requests: %{private}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::initializeHelperService()_block_invoke", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v7 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#EED2,pendingRequestCB,No pending requests available", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::initializeHelperService()_block_invoke", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    id v4 = 0;
  }
  return (*(uint64_t (**)(uint64_t, id, void))(a2 + 16))(a2, v4, 0);
}

uint64_t sub_100AB4FD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  id v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(v3 + 1928);
    *(_DWORD *)long long buf = 138477827;
    uint64_t v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2,streamingRequestCB,current streaming request:%{private}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::initializeHelperService()_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  return (*(uint64_t (**)(uint64_t, void, void))(a2 + 16))(a2, *(void *)(v3 + 1928), 0);
}

uint64_t sub_100AB51A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  id v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(v3 + 1936);
    *(_DWORD *)long long buf = 138477827;
    uint64_t v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2,uploadRequestCB,current upload request:%{private}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::initializeHelperService()_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  return (*(uint64_t (**)(uint64_t, void, void))(a2 + 16))(a2, *(void *)(v3 + 1936), 0);
}

uint64_t sub_100AB5378(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 1928);
  if (v5 && objc_msgSend(a2, "isEqual:", objc_msgSend(v5, "ID")))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v6 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#EED2,streamingEndCB,fCurrentStreamingRequest has ended", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      LOWORD(v14) = 0;
      id v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::initializeHelperService()_block_invoke", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    id v7 = 0;
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v8 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      id v17 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#EED2,streamingEndCB,request:%{public}@ does not match fCurrentStreamingRequest.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v14 = 138543362;
      __int16 v15 = a2;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::initializeHelperService()_block_invoke", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    NSErrorUserInfoKey v12 = NSLocalizedDescriptionKey;
    CFStringRef v13 = @"Streaming End for unavailable request Id";
    id v7 = [objc_alloc((Class)NSError) initWithDomain:@"com.apple.CoreLocation.CLEEDHelperService" code:6 userInfo:[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v13, &v12, 1)];
  }
  return (*(uint64_t (**)(uint64_t, id))(a3 + 16))(a3, v7);
}

void sub_100AB56F0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = +[NSMutableSet setWithSet:a2];
  id v8 = sub_100AB59D8(v6, a3, (uint64_t)v7);
  uint64_t v9 = *(void *)(v6 + 2088);
  if (v9) {
    sub_100AB01B4(v9, v7);
  }
  if (v8)
  {
    sub_100AB5F24(v6, v7, v8, (void (**)(void))a4);
    sub_100AA0A2C(v6);
    sub_100AAAF10(v6);
  }
  else
  {
    NSErrorUserInfoKey v17 = NSLocalizedDescriptionKey;
    CFStringRef v18 = @"No matching requestID and upload request";
    id v10 = [objc_alloc((Class)NSError) initWithDomain:@"com.apple.CoreLocation.CLEEDHelperService" code:6 userInfo:[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1)];
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v11 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543618;
      int v14 = a3;
      __int16 v15 = 2114;
      id v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#EED2,uploadListCB,request:%{public}@,no matching upload request,return error:%{public}@", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      NSErrorUserInfoKey v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::initializeHelperService()_block_invoke", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    (*(void (**)(uint64_t, id))(a4 + 16))(a4, v10);
  }
}

void *sub_100AB59D8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(void **)(a1 + 1936);
  if (v6 && objc_msgSend(a2, "isEqual:", objc_msgSend(v6, "ID")))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v7 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138543362;
      id v30 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#EED2,getUpdatedRequestForMediaItemUpload,request:%{public}@ matches fCurrentUploadRequest", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v27 = 138543362;
      id v28 = a2;
      id v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLEEDUploadRequest *CLEmergencyEED2::getUpdatedRequestForMediaItemUpload(NSUUID *, NSMutableSet<CLEEDMediaItem *> *)", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    [*(id *)(a1 + 1936) updateRequestWithMediaItemList:a3];
    return *(void **)(a1 + 1936);
  }
  else
  {
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    uint64_t v9 = *(void **)(a1 + 1920);
    id v10 = [v9 countByEnumeratingWithState:&v22 objects:v26 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v23;
      while (2)
      {
        for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v23 != v12) {
            objc_enumerationMutation(v9);
          }
          id v8 = *(void **)(*((void *)&v22 + 1) + 8 * i);
          if (objc_msgSend(a2, "isEqual:", objc_msgSend(v8, "ID")))
          {
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_1022DBA80);
            }
            __int16 v15 = qword_1024193E8;
            if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
            {
              id v16 = [v8 ID];
              *(_DWORD *)long long buf = 138543362;
              id v30 = v16;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#EED2,getUpdatedRequestForMediaItemUpload,return the request:%{public}@ found in fRequestsHandled queue", buf, 0xCu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193E0 != -1) {
                dispatch_once(&qword_1024193E0, &stru_1022DBA80);
              }
              id v18 = [v8 ID];
              int v27 = 138543362;
              id v28 = v18;
              id v19 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "CLEEDUploadRequest *CLEmergencyEED2::getUpdatedRequestForMediaItemUpload(NSUUID *, NSMutableSet<CLEEDMediaItem *> *)", "%s\n", v19);
              if (v19 != (char *)buf) {
                free(v19);
              }
            }
            [v8 updateRequestWithMediaItemList:a3];
            return v8;
          }
        }
        id v11 = [v9 countByEnumeratingWithState:&v22 objects:v26 count:16];
        if (v11) {
          continue;
        }
        break;
      }
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v14 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138543362;
      id v30 = a2;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "#EED2,getUpdatedRequestForMediaItemUpload,request:%{public}@ was not found", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v27 = 138543362;
      id v28 = a2;
      __int16 v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLEEDUploadRequest *CLEmergencyEED2::getUpdatedRequestForMediaItemUpload(NSUUID *, NSMutableSet<CLEEDMediaItem *> *)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
    return 0;
  }
}

void sub_100AB5F24(uint64_t a1, void *a2, void *a3, void (**a4)(void))
{
  uint64_t v43 = 0;
  id v44 = &v43;
  uint64_t v45 = 0x3052000000;
  id v46 = sub_100177D08;
  id v47 = sub_100177464;
  uint64_t v48 = 0;
  if (!a2 || ![a2 count])
  {
    id v11 = objc_alloc((Class)NSError);
    NSErrorUserInfoKey v59 = NSLocalizedDescriptionKey;
    CFStringRef v60 = @"MediaList is empty, count 0";
    uint64_t v12 = +[NSDictionary dictionaryWithObjects:&v60 forKeys:&v59 count:1];
    uint64_t v13 = 10;
LABEL_8:
    id v14 = [v11 initWithDomain:@"com.apple.CoreLocation.CLEEDHelperService" code:v13 userInfo:v12];
    v44[5] = (uint64_t)v14;
    a4[2](a4);
    goto LABEL_9;
  }
  if (!a3)
  {
    id v11 = objc_alloc((Class)NSError);
    NSErrorUserInfoKey v57 = NSLocalizedDescriptionKey;
    CFStringRef v58 = @"No matching upload request";
    uint64_t v12 = +[NSDictionary dictionaryWithObjects:&v58 forKeys:&v57 count:1];
    uint64_t v13 = 6;
    goto LABEL_8;
  }
  memset(&v42, 0, sizeof(v42));
  id v8 = sub_100A80D4C((int *)(a1 + 1448));
  sub_100ABB240((uint64_t)v41, (uint64_t)(v8 + 20));
  sub_100134750(__p, (char *)[objc_msgSend(objc_msgSend(a3, "partnerID"), "UTF8String") UTF8String]);
  uint64_t v9 = sub_100122860(v41, (unsigned __int8 *)__p);
  id v10 = v9;
  if (v56 < 0)
  {
    operator delete(__p[0]);
    if (!v10) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v9) {
LABEL_12:
  }
    std::string::operator=(&v42, (const std::string *)(v10 + 64));
LABEL_13:
  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v15 = &v42;
  }
  else {
    __int16 v15 = (std::string *)v42.__r_.__value_.__r.__words[0];
  }
  id v16 = +[CLEEDCryptoUtilities copyAdrPublicKeyData:](CLEEDCryptoUtilities, "copyAdrPublicKeyData:", +[NSString stringWithUTF8String:v15]);
  id v17 = v16;
  if (!v16)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v27 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "#EED2,handleMediaUploadRequest,nil partnerAdrPublicKeyData,early return", (uint8_t *)__p, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      __int16 v40 = 0;
      int v36 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::handleMediaUploadRequest(NSSet<CLEEDMediaItem *> *, CLEEDUploadRequest *, CLEEDStatusCompletion)", "%s\n", v36);
      if (v36 != (char *)__p) {
        free(v36);
      }
    }
    id v28 = objc_alloc((Class)NSError);
    NSErrorUserInfoKey v53 = NSLocalizedDescriptionKey;
    CFStringRef v54 = @"Unable to generate partnerAdrPublicKey data";
    id v29 = [v28 initWithDomain:@"com.apple.CoreLocation.CLEEDHelperService" code:1 userInfo:[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v54, &v53, 1)];
    v44[5] = (uint64_t)v29;
    a4[2](a4);
    goto LABEL_34;
  }
  id v18 = [CLEEDRequest getSharedInfoPrefixFromSessionID:[a3 sessionID] partnerID:[a3 partnerID] partnerAdrPublicKeyData:v16 deviceSessionPrivateKey:*(void *)(a1 + 1952)];
  if (v18)
  {
    if (*(void *)(a1 + 1968) || (sub_100AB91E4(a1), *(void *)(a1 + 1968)))
    {
      id v19 = _Block_copy(a4);
      id v20 = *(void **)(a1 + 1968);
      id v21 = [a3 ID];
      uint64_t v22 = *(void *)(a1 + 1888);
      id v23 = [a3 uploadURL];
      id v24 = [a3 combinedSecret];
      id v25 = [a3 token];
      uint64_t v26 = *(void *)(a1 + 1992);
      v39[0] = _NSConcreteStackBlock;
      v39[1] = 3221225472;
      v39[2] = sub_100AB9BD4;
      v39[3] = &unk_1022DBA20;
      unsigned char v39[6] = &v43;
      v39[7] = a1;
      v39[4] = a3;
      v39[5] = v19;
      [v20 processMediaForRequestID:v21 callUUID:v22 uploadURL:v23 sharedInfoPrefix:v18 combinedSecret:v24 token:v25 mediaList:a2 mitigation:v26 completion:v39];
      goto LABEL_34;
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v35 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "#EED2,handleMediaUploadRequest,EEDMediaService initialization failed", (uint8_t *)__p, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      __int16 v40 = 0;
      CFStringRef v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::handleMediaUploadRequest(NSSet<CLEEDMediaItem *> *, CLEEDUploadRequest *, CLEEDStatusCompletion)", "%s\n", v38);
      if (v38 != (char *)__p) {
        free(v38);
      }
    }
    id v31 = objc_alloc((Class)NSError);
    NSErrorUserInfoKey v49 = NSLocalizedDescriptionKey;
    CFStringRef v50 = @"EED Media Service initialization failed";
    id v33 = +[NSDictionary dictionaryWithObjects:&v50 forKeys:&v49 count:1];
    uint64_t v32 = 7;
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v30 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "#EED2,handleMediaUploadRequest,nil sharedInfoPrefix,early return", (uint8_t *)__p, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      __int16 v40 = 0;
      NSErrorUserInfoKey v37 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::handleMediaUploadRequest(NSSet<CLEEDMediaItem *> *, CLEEDUploadRequest *, CLEEDStatusCompletion)", "%s\n", v37);
      if (v37 != (char *)__p) {
        free(v37);
      }
    }
    id v31 = objc_alloc((Class)NSError);
    NSErrorUserInfoKey v51 = NSLocalizedDescriptionKey;
    CFStringRef v52 = @"Unable to generate shared info prefix";
    uint64_t v32 = 1;
    id v33 = +[NSDictionary dictionaryWithObjects:&v52 forKeys:&v51 count:1];
  }
  id v34 = [v31 initWithDomain:@"com.apple.CoreLocation.CLEEDHelperService" code:v32 userInfo:v33];
  v44[5] = (uint64_t)v34;
  a4[2](a4);
LABEL_34:
  sub_100ABB7BC((uint64_t)v41);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
LABEL_9:
  _Block_object_dispose(&v43, 8);
}

void sub_100AB6774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  _Block_object_dispose(&a34, 8);
  _Unwind_Resume(a1);
}

void sub_100AB67E8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a1 + 32);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  id v8 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67240450;
    int v19 = a2;
    __int16 v20 = 2114;
    id v21 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#EED2,userResponseCB,received response:%{public}u for the request:%{public}@", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    int v14 = 67240450;
    int v15 = a2;
    __int16 v16 = 2114;
    id v17 = a3;
    id v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::initializeHelperService()_block_invoke", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  if (a3 && a4)
  {
    sub_100AB6B88(v7, a2, a3, a4);
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v9 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#EED2,userResponseCB,requestID or statusCompletion nil, early return", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      LOWORD(v14) = 0;
      id v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::initializeHelperService()_block_invoke", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    if (a4)
    {
      NSErrorUserInfoKey v12 = NSLocalizedDescriptionKey;
      CFStringRef v13 = @"Request ID not received";
      [objc_alloc((Class)NSError) initWithDomain:@"com.apple.CoreLocation.CLEEDHelperService" code:4 userInfo:[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v13, &v12, 1)];
    }
  }
}

void sub_100AB6B88(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v44 = 0;
  id v8 = *(void **)(a1 + 1928);
  if (v8 && objc_msgSend(a3, "isEqual:", objc_msgSend(v8, "ID")))
  {
    [*(id *)(a1 + 1928) updateDurationInformationForCA:a2];
    uint64_t v9 = *(void **)(a1 + 1992);
    if (v9 && [v9 dropStreaming] && (a2 & 1) != 0)
    {
      uint64_t v10 = 17;
    }
    else
    {
      if ([*(id *)(a1 + 1928) state] == (id)17)
      {
LABEL_31:
        if (![*(id *)(a1 + 1928) requestStatusAtFirstUserResponse]) {
          [*(id *)(a1 + 1928) setRequestStatusAtFirstUserResponse:[*(id *)(a1 + 1928) state]];
        }
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        __int16 v20 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          id v21 = [*(id *)(a1 + 1928) ID];
          id v22 = [*(id *)(a1 + 1928) state];
          *(_DWORD *)long long buf = 138543618;
          id v50 = v21;
          __int16 v51 = 2050;
          id v52 = v22;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#EED2,handleUserResponse,updated streaming request:%{public}@ to state:%{public}ld", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          id v36 = [*(id *)(a1 + 1928) ID];
          id v37 = [*(id *)(a1 + 1928) state];
          *(_DWORD *)id v47 = 138543618;
          *(void *)&v47[4] = v36;
          *(_WORD *)&unsigned char v47[12] = 2050;
          *(void *)&unsigned char v47[14] = v37;
          CFStringRef v38 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::handleUserResponse(BOOL, NSUUID *, CLEEDResponseCompletion)", "%s\n", v38);
          if (v38 != (char *)buf) {
            free(v38);
          }
        }
        id v19 = *(id *)(a1 + 1928);
        goto LABEL_60;
      }
      if (a2) {
        uint64_t v10 = 1;
      }
      else {
        uint64_t v10 = 4;
      }
    }
    [*(id *)(a1 + 1928) setState:v10];
    goto LABEL_31;
  }
  id v11 = *(void **)(a1 + 1936);
  if (v11 && objc_msgSend(a3, "isEqual:", objc_msgSend(v11, "ID")))
  {
    [*(id *)(a1 + 1936) updateDurationInformationForCA:a2];
    NSErrorUserInfoKey v12 = *(void **)(a1 + 1992);
    if (v12 && [v12 uploadMigitation] == (id)1 && (a2 & 1) != 0)
    {
      uint64_t v13 = 18;
    }
    else
    {
      if ([*(id *)(a1 + 1936) state] == (id)18)
      {
LABEL_50:
        if (![*(id *)(a1 + 1936) requestStatusAtFirstUserResponse]) {
          [*(id *)(a1 + 1936) setRequestStatusAtFirstUserResponse:[*(id *)(a1 + 1936) state]];
        }
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        id v25 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          id v26 = [*(id *)(a1 + 1936) state];
          *(_DWORD *)long long buf = 138543618;
          id v50 = a3;
          __int16 v51 = 2050;
          id v52 = v26;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#EED2,handleUserResponse,updated upload request:%{public}@ to state:%{public}ld", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          id v39 = [*(id *)(a1 + 1936) state];
          *(_DWORD *)id v47 = 138543618;
          *(void *)&v47[4] = a3;
          *(_WORD *)&unsigned char v47[12] = 2050;
          *(void *)&unsigned char v47[14] = v39;
          __int16 v40 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::handleUserResponse(BOOL, NSUUID *, CLEEDResponseCompletion)", "%s\n", v40);
          if (v40 != (char *)buf) {
            free(v40);
          }
        }
        id v19 = *(id *)(a1 + 1936);
        goto LABEL_60;
      }
      if (a2) {
        uint64_t v13 = 1;
      }
      else {
        uint64_t v13 = 4;
      }
    }
    [*(id *)(a1 + 1936) setState:v13];
    goto LABEL_50;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  int v14 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#EED2,handleUserResponse,no matching current streaming or upload request found. Search in other queues", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    *(_WORD *)id v47 = 0;
    id v33 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::handleUserResponse(BOOL, NSUUID *, CLEEDResponseCompletion)", "%s\n", v33);
    if (v33 != (char *)buf) {
      free(v33);
    }
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  int v15 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    id v16 = [*(id *)(a1 + 1912) count];
    *(_DWORD *)long long buf = 134349056;
    id v50 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#EED2,handleUserResponse,there are %{public}ld pending requests in fRequestsPending queue", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v34 = [*(id *)(a1 + 1912) count];
    *(_DWORD *)id v47 = 134349056;
    *(void *)&v47[4] = v34;
    uint64_t v35 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::handleUserResponse(BOOL, NSUUID *, CLEEDResponseCompletion)", "%s\n", v35);
    if (v35 != (char *)buf) {
      free(v35);
    }
  }
  *(void *)id v47 = 0;
  *(void *)&v47[8] = v47;
  *(void *)&v47[16] = 0x2020000000;
  int v48 = -1;
  id v17 = *(void **)(a1 + 1912);
  v43[0] = _NSConcreteStackBlock;
  v43[1] = 3221225472;
  v43[2] = sub_100AB8FD0;
  int v43[3] = &unk_1022DB870;
  v43[4] = a3;
  v43[5] = v47;
  [v17 enumerateObjectsUsingBlock:v43];
  if ((*(_DWORD *)(*(void *)&v47[8] + 24) & 0x80000000) != 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v23 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      id v24 = [*(id *)(a1 + 1920) count];
      *(_DWORD *)long long buf = 134349056;
      id v50 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#EED2,handleUserResponse,there are %{public}ld handled requests in fRequestsHandled queue", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v41 = [*(id *)(a1 + 1920) count];
      int v45 = 134349056;
      id v46 = v41;
      std::string v42 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::handleUserResponse(BOOL, NSUUID *, CLEEDResponseCompletion)", "%s\n", v42);
      if (v42 != (char *)buf) {
        free(v42);
      }
    }
    id v19 = sub_100AB3B60((id *)a1, a2, a3, &v44);
  }
  else
  {
    id v18 = [[*(id *)(a1 + 1912) objectAtIndex:];
    if (v18)
    {
      id v19 = sub_100AB4528((id *)a1, v18, a2, &v44);
      [*(id *)(a1 + 1912) removeObjectAtIndex:*(int *)(*(void *)&v47[8] + 24)];
    }
    else
    {
      id v19 = 0;
    }
  }
  _Block_object_dispose(v47, 8);
LABEL_60:
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  int v27 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    id v28 = [v19 ID];
    id v29 = [v19 state];
    *(_DWORD *)long long buf = 138543618;
    id v50 = v28;
    __int16 v51 = 2050;
    id v52 = v29;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#EED2,handleUserResponse,returning back to phone app, the updatedRequest:%{public}@ in state:%{public}ld", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v30 = [v19 ID];
    id v31 = [v19 state];
    *(_DWORD *)id v47 = 138543618;
    *(void *)&v47[4] = v30;
    *(_WORD *)&unsigned char v47[12] = 2050;
    *(void *)&unsigned char v47[14] = v31;
    uint64_t v32 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::handleUserResponse(BOOL, NSUUID *, CLEEDResponseCompletion)", "%s\n", v32);
    if (v32 != (char *)buf) {
      free(v32);
    }
  }
  (*(void (**)(uint64_t, id, uint64_t))(a4 + 16))(a4, v19, v44);
  sub_100A9FA38(a1);
  sub_100AA0A2C(a1);
  sub_100AAAF10(a1);
}

void sub_100AB7690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100AB76C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  id v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2,mitigationsCB", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::initializeHelperService()_block_invoke", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  uint64_t v5 = *(void *)(v3 + 1992);
  if (v5)
  {
    id v6 = 0;
  }
  else
  {
    id v7 = objc_alloc((Class)NSError);
    NSErrorUserInfoKey v10 = NSLocalizedDescriptionKey;
    CFStringRef v11 = @"Mitigations not available";
    id v6 = [v7 initWithDomain:@"com.apple.CoreLocation.CLEEDHelperService" code:1 userInfo:[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1)];
    uint64_t v5 = *(void *)(v3 + 1992);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, id))(a2 + 16))(a2, v5, v6);
}

id sub_100AB78DC()
{
  CFTypeRef v8 = 0;
  uint64_t v0 = sub_1000A6958();
  if (sub_1004D01D8(v0, @"EEDCoexCacheMetricData", &v8))
  {
    id v1 = objc_alloc((Class)NSDictionary);
    id v2 = [v1 initWithDictionary:v8];
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v3 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v12 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#EED2,readCoexMetricDataFromCache,Co-ex metric data read from cache:%@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v9 = 138412290;
      id v10 = v2;
      id v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "NSDictionary *CLEmergencyEED2::readCoexMetricDataFromCache()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#EED2,readCoexMetricDataFromCache,Co-ex metric data not cached,early Return", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      LOWORD(v9) = 0;
      id v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "NSDictionary *CLEmergencyEED2::readCoexMetricDataFromCache()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    return 0;
  }
  return v2;
}

void sub_100AB7BF8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(id **)(a1 + 32);
  dispatch_assert_queue_V2((dispatch_queue_t)[v3[1] silo].queue);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  id v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = v3[249];
    *(_DWORD *)long long buf = 138543618;
    int v15 = a2;
    __int16 v16 = 2114;
    id v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2CX,NewMitigationReceived:%{public}@, OldMitigation:%{public}@", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    CFStringRef v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::initializeCoexMonitor()_block_invoke", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  if (a2)
  {
    id v6 = v3[249];
    BOOL v7 = !v6
      || ([v6 anyChangeToNewRequestsComparedTo:a2] & 1) != 0
      || [v3[249] needsRequestStateUpdateComparedTo:a2];

    id v8 = [objc_alloc((Class)CLEEDMitigation) initWithStreamingAllowed:objc_msgSend(a2, "newStreamingAllowed") framerateFps:objc_msgSend(a2, "streamingFPS") bitrateKbps:objc_msgSend(a2, "streamingBitrate") dropStreaming:objc_msgSend(a2, "dropStreaming") uploadAllowed:objc_msgSend(a2, "newUploadAllowed") uploadMitigation:objc_msgSend(a2, "uploadMigitation") source:objc_msgSend(a2, "source")];
    v3[249] = v8;
    if (v7)
    {
      sub_100AB8148(v3);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v9 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#EED2CX,UpdateControlData", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        uint64_t v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::initializeCoexMonitor()_block_invoke", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
      sub_100A9FA38((uint64_t)v3);
      sub_100AA0A2C((uint64_t)v3);
      sub_100AAAF10((uint64_t)v3);
      id v8 = v3[249];
    }
    [v3[234] notifyMitigationNeeded:v8];
    [v3[246] processMediaForMitigations:v3[249]];
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v10 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#EED2CX,initializeCoexMonitor, callback, new mitigation is null", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::initializeCoexMonitor()_block_invoke", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
}

void sub_100AB8148(id *a1)
{
  id v2 = a1[249];
  if (v2 && (([v2 dropStreaming] & 1) != 0 || objc_msgSend(a1[249], "uploadMigitation")))
  {
    if ([a1[249] dropStreaming])
    {
      id v3 = a1[241];
      if (v3)
      {
        [v3 updateDurationInformationForCA:0];
        [a1[241] setState:17];
        if (![a1[241] requestStatusAtFirstUserResponse]) {
          [a1[241] setRequestStatusAtFirstUserResponse:[a1[241] state]];
        }
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        id v4 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          id v5 = [a1[241] ID];
          id v6 = [a1[241] state];
          *(_DWORD *)long long buf = 138543618;
          id v40 = v5;
          __int16 v41 = 2050;
          id v42 = v6;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#EED2,updateRequestForMitigation,updated streaming request:%{public}@ to state:%{public}ld", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          id v22 = [a1[241] ID];
          id v23 = [a1[241] state];
          *(_DWORD *)id v37 = 138543618;
          *(void *)&v37[4] = v22;
          *(_WORD *)&v37[12] = 2050;
          *(void *)&v37[14] = v23;
          id v24 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::updateRequestsForMitigation()", "%s\n", v24);
          if (v24 != (char *)buf) {
            free(v24);
          }
        }
        [a1[240] addObject:a1[241]];
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        BOOL v7 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          id v8 = [a1[241] ID];
          *(_DWORD *)long long buf = 138543362;
          id v40 = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#EED2,updateRequestForMitigation,fCurrentStreamingRequest:%{public}@ moved to fRequestsHandled queue", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          id v25 = [a1[241] ID];
          *(_DWORD *)id v37 = 138543362;
          *(void *)&v37[4] = v25;
          id v26 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::updateRequestsForMitigation()", "%s\n", v26);
          if (v26 != (char *)buf) {
            free(v26);
          }
        }

        a1[241] = 0;
      }
      *(void *)id v37 = 0;
      *(void *)&v37[8] = v37;
      *(void *)&v37[16] = 0x2020000000;
      int v38 = -1;
      id v9 = a1[239];
      v32[0] = _NSConcreteStackBlock;
      v32[1] = 3221225472;
      v32[2] = sub_100AB8DA8;
      uint64_t v32[3] = &unk_1022DB9B8;
      v32[4] = v37;
      [v9 enumerateObjectsUsingBlock:v32];
      if ((*(_DWORD *)(*(void *)&v37[8] + 24) & 0x80000000) == 0)
      {
        id v10 = [a1[239] objectAtIndex:];
        [v10 setState:17];
        if (![v10 requestStatusAtFirstUserResponse]) {
          [v10 setRequestStatusAtFirstUserResponse:[v10 state]];
        }
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        CFStringRef v11 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          id v12 = [v10 ID];
          id v13 = [v10 state];
          *(_DWORD *)long long buf = 138543618;
          id v40 = v12;
          __int16 v41 = 2050;
          id v42 = v13;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#EED2,updateRequestForMitigation,updated pending streaming request:%{public}@ to state:%{public}ld", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          id v27 = [v10 ID];
          id v28 = [v10 state];
          int v33 = 138543618;
          id v34 = v27;
          __int16 v35 = 2050;
          id v36 = v28;
          id v29 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::updateRequestsForMitigation()", "%s\n", v29);
          if (v29 != (char *)buf) {
            free(v29);
          }
        }
        [a1[240] addObject:v10];
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        int v14 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          id v15 = [v10 ID];
          *(_DWORD *)long long buf = 138543362;
          id v40 = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#EED2,updateRequestForMitigation, pendingRequest:%{public}@ moved to fRequestsHandled queue", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          id v30 = [v10 ID];
          int v33 = 138543362;
          id v34 = v30;
          id v31 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::updateRequestsForMitigation()", "%s\n", v31);
          if (v31 != (char *)buf) {
            free(v31);
          }
        }
        [a1[239] removeObjectAtIndex:*(int *)(*(void *)&v37[8] + 24)];
      }
      _Block_object_dispose(v37, 8);
    }
    if ([a1[249] uploadMigitation] != (id)1) {
      return;
    }
    id v16 = a1[242];
    if (!v16 || [v16 state] != (id)1) {
      return;
    }
    [a1[242] setState:18];
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v17 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      id v18 = [a1[242] ID];
      *(_DWORD *)long long buf = 138543362;
      id v40 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#EED2,updateRequestForMitigation,fCurrentUploadRequest:%{public}@ state updated to MitigationDelayed", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v19 = [a1[242] ID];
    *(_DWORD *)id v37 = 138543362;
    *(void *)&v37[4] = v19;
    __int16 v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::updateRequestsForMitigation()", "%s\n", v20);
    if (v20 == (char *)buf) {
      return;
    }
LABEL_55:
    free(v20);
    return;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  id v21 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#EED2,updateRequestForMitigation,request state update not needed, early return", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    *(_WORD *)id v37 = 0;
    __int16 v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::updateRequestsForMitigation()", "%s\n", v20);
    if (v20 != (char *)buf) {
      goto LABEL_55;
    }
  }
}

void sub_100AB8B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100AB8BC0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(void **)(v3 + 2016);
    if (v4) {

    }
    *(void *)(v3 + 2016) = a2;
    sub_100A8CA74(v3 + 1536, 24);
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#EED2CX,fEEDCoexMonitor,coexMetricUpdateCB, nil coexMetricDict, early return", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      id v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::initializeCoexMonitor()_block_invoke", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_100AB8DA8(uint64_t a1, void *a2, int a3, unsigned char *a4)
{
  if ([a2 type] == (id)1)
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a3;
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v8 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = [a2 ID];
      int v10 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      *(_DWORD *)long long buf = 138543618;
      id v13 = v9;
      __int16 v14 = 1026;
      int v15 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#EED2,updateRequestForMitigation,found matching pending streaming request ID:%{public}@ at index:%{public}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      [a2 ID];
      CFStringRef v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::updateRequestsForMitigation()_block_invoke", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    *a4 = 1;
  }
}

void sub_100AB8FD0(uint64_t a1, void *a2, int a3, unsigned char *a4)
{
  if (objc_msgSend(*(id *)(a1 + 32), "isEqual:", objc_msgSend(a2, "ID")))
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a3;
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    BOOL v7 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
      *(_DWORD *)long long buf = 138543618;
      uint64_t v12 = v8;
      __int16 v13 = 1026;
      int v14 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#EED2,handleUserResponse,found matching pending request for request ID:%{public}@ at index:%{public}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::handleUserResponse(BOOL, NSUUID *, CLEEDResponseCompletion)_block_invoke", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    *a4 = 1;
  }
}

void sub_100AB91E4(uint64_t a1)
{
  if (!*(void *)(a1 + 1968))
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    _DWORD v8[2] = sub_100AB94A4;
    void v8[3] = &unk_1022A5348;
    void v8[4] = a1;
    void v6[4] = a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100AB9670;
    void v7[3] = &unk_1022A3020;
    unsigned __int8 v7[4] = a1;
    void v5[4] = a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    _DWORD v6[2] = sub_100AB9838;
    void v6[3] = &unk_1022DB9D8;
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    _OWORD v5[2] = sub_100AB99F0;
    v5[3] = &unk_1022DB9F8;
    id v2 = [[CLEEDMediaServiceHandler alloc] initWithUniverse:*(void *)(a1 + 8) serviceCompletionCB:v7 getMitigationCB:v6 getUploadConfigCB:v5 errorCB:v8];
    *(void *)(a1 + 1968) = v2;
    if (!v2)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      uint64_t v3 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#EED2,initializeMediaService,EEDMediaService initialization failed", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        id v4 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::initializeMediaService()", "%s\n", v4);
        if (v4 != (char *)buf) {
          free(v4);
        }
      }
    }
  }
}

void sub_100AB94A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  id v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138543362;
    uint64_t v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#EED2,initializeMediaService,received mediaServiceErrorCB,error:%{public}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::initializeMediaService()_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  [*(id *)(v3 + 1968) cleanup];

  *(void *)(v3 + 1968) = 0;
  sub_100A9A888(v3);
}

void sub_100AB9670(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  id v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#EED2,initializeMediaService,received mediaServiceCompletionCB", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::initializeMediaService()_block_invoke", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  *(_DWORD *)(v1 + 1976) = 0;
  if (![+[NSFileManager defaultManager] fileExistsAtPath:@"/private/var/mobile/Library/CLEEDMediaService/CLEEDMSCache"])
  {
    [*(id *)(v1 + 1968) cleanup];

    *(void *)(v1 + 1968) = 0;
  }
}

uint64_t sub_100AB9838(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  id v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(v1 + 1992);
    *(_DWORD *)long long buf = 138543362;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#EED2,initializeMediaService,received getMitigationCB, mitigation:%{public}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::initializeMediaService()_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return *(void *)(v1 + 1992);
}

id sub_100AB99F0(uint64_t a1)
{
  uint64_t v1 = sub_100A80D4C((int *)(*(void *)(a1 + 32) + 1448));
  id v2 = [objc_alloc((Class)CLEEDUploadServiceConfig) initWithNumInflightUploads:(int)v1[48] maxUploadFileSizeMB:v1[48] >> 32 maxUploadQuotaMB:*((int *)v1 + 98)];
  id v3 = v2;
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  id v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 138543362;
    id v8 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#EED2,initializeMediaService,received getUploadConfigCB, uploadConfig:%{public}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::initializeMediaService()_block_invoke", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return v2;
}

void sub_100AB9BD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022DBA80);
  }
  id v5 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = [*(id *)(a1 + 32) ID];
    *(_DWORD *)long long buf = 138543618;
    id v17 = v6;
    __int16 v18 = 2114;
    uint64_t v19 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#EED2,handleMediaUploadRequest,processMedia request for ID:%{public}@ returned :%{public}@", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v9 = [*(id *)(a1 + 32) ID];
    int v12 = 138543618;
    id v13 = v9;
    __int16 v14 = 2114;
    uint64_t v15 = a2;
    int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::handleMediaUploadRequest(NSSet<CLEEDMediaItem *> *, CLEEDUploadRequest *, CLEEDStatusCompletion)_block_invoke", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = a2;
  uint64_t v7 = [objc_msgSend(*(id *)(v4 + 8), "silo") queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100AB9E28;
  block[3] = &unk_1022B30F8;
  uint64_t v8 = *(void *)(a1 + 40);
  block[4] = a2;
  void block[5] = v8;
  dispatch_async(v7, block);
}

void sub_100AB9E28(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  id v2 = *(const void **)(a1 + 40);

  _Block_release(v2);
}

void sub_100AB9E70(uint64_t a1, void *a2)
{
  id v4 = [a2 getRequestDict];
  if (v4)
  {
    [*(id *)(a1 + 32) addObject:v4];
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134349056;
      id v9 = [a2 type];
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#EED2,storeEEDDataToCache,Added pending request of type:%{public}ld to pending array of cacheDataDict", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      [a2 type];
      id v6 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::storeEEDDataToCache()_block_invoke", "%s\n");
LABEL_19:
      if (v6 != buf) {
        free(v6);
      }
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v7 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349056;
      id v9 = [a2 type];
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#EED2,storeEEDDataToCache,fRequestsPending,nil dict for request type:%{public}ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      [a2 type];
      id v6 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::storeEEDDataToCache()_block_invoke", "%s\n");
      goto LABEL_19;
    }
  }
}

void sub_100ABA194(uint64_t a1, void *a2)
{
  id v4 = [a2 getRequestDict];
  if (v4)
  {
    [*(id *)(a1 + 32) addObject:v4];
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    id v5 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134349056;
      id v9 = [a2 type];
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#EED2,storeEEDDataToCache,Added handled request of type:%{public}ld to handled array of cacheDataDict", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      [a2 type];
      id v6 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2::storeEEDDataToCache()_block_invoke", "%s\n");
LABEL_19:
      if (v6 != buf) {
        free(v6);
      }
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v7 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349056;
      id v9 = [a2 type];
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#EED2,storeEEDDataToCache,fRequestsHandled,ignoring request type:%{public}ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      [a2 type];
      id v6 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEmergencyEED2::storeEEDDataToCache()_block_invoke", "%s\n");
      goto LABEL_19;
    }
  }
}

BOOL sub_100ABA4B8(uint64_t a1)
{
  __int16 v41 = 0;
  uint64_t v2 = sub_1000A6958();
  if (sub_1004D01D8(v2, @"EEDCacheMetricData", (CFTypeRef *)&v41))
  {
    if (*(void *)(a1 + 2088))
    {
      id v3 = v41;
      if (byte_10247FB4F >= 0) {
        id v4 = &qword_10247FB38;
      }
      else {
        id v4 = (uint64_t *)qword_10247FB38;
      }
      if (objc_msgSend(objc_msgSend(v41, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4)), "intValue") == 4&& sub_100A988EC(a1) == 3)
      {
        sub_100A9B600();
        sub_100A9B91C();
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        id v5 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#EED2,readEEDMetricDataFromCache,ignore cached data and clear it as new session has started in the interim. Early Return", buf, 2u);
        }
        BOOL result = sub_10013D1A0(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 == -1) {
            goto LABEL_21;
          }
          goto LABEL_122;
        }
      }
      else
      {
        if (byte_10247FC0F >= 0) {
          id v9 = &qword_10247FBF8;
        }
        else {
          id v9 = (uint64_t *)qword_10247FBF8;
        }
        **(_DWORD **)(a1 + 2088) = [objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9)), "intValue");
        if (byte_10247FC27 >= 0) {
          int v10 = &qword_10247FC10;
        }
        else {
          int v10 = (uint64_t *)qword_10247FC10;
        }
        *(_DWORD *)(*(void *)(a1 + 2088) + 4) = [objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v10)), "intValue");
        if (byte_10247FC3F >= 0) {
          CFStringRef v11 = &qword_10247FC28;
        }
        else {
          CFStringRef v11 = (uint64_t *)qword_10247FC28;
        }
        *(_DWORD *)(*(void *)(a1 + 2088) + 8) = [objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11)), "intValue");
        if (byte_10247FC57 >= 0) {
          int v12 = &qword_10247FC40;
        }
        else {
          int v12 = (uint64_t *)qword_10247FC40;
        }
        *(_DWORD *)(*(void *)(a1 + 2088) + 12) = [objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12)), "intValue");
        if (byte_10247FC6F >= 0) {
          id v13 = &qword_10247FC58;
        }
        else {
          id v13 = (uint64_t *)qword_10247FC58;
        }
        *(_DWORD *)(*(void *)(a1 + 2088) + 16) = [objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13)), "intValue");
        if (byte_10247FC87 >= 0) {
          __int16 v14 = &qword_10247FC70;
        }
        else {
          __int16 v14 = (uint64_t *)qword_10247FC70;
        }
        *(_DWORD *)(*(void *)(a1 + 2088) + 20) = [objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14)), "intValue");
        if (byte_10247FC9F >= 0) {
          uint64_t v15 = &qword_10247FC88;
        }
        else {
          uint64_t v15 = (uint64_t *)qword_10247FC88;
        }
        *(_DWORD *)(*(void *)(a1 + 2088) + 24) = [objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v15)), "intValue");
        if (byte_10247FCB7 >= 0) {
          id v16 = &qword_10247FCA0;
        }
        else {
          id v16 = (uint64_t *)qword_10247FCA0;
        }
        [objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v16)) floatValue];
        *(_DWORD *)(*(void *)(a1 + 2088) + 28) = v17;
        if (byte_10247FCCF >= 0) {
          __int16 v18 = &qword_10247FCB8;
        }
        else {
          __int16 v18 = (uint64_t *)qword_10247FCB8;
        }
        [objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v18)) floatValue];
        *(_DWORD *)(*(void *)(a1 + 2088) + 32) = v19;
        if (byte_10247FCE7 >= 0) {
          __int16 v20 = &qword_10247FCD0;
        }
        else {
          __int16 v20 = (uint64_t *)qword_10247FCD0;
        }
        *(_DWORD *)(*(void *)(a1 + 2088) + 36) = [objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v20)), "intValue");
        if (byte_10247FCFF >= 0) {
          id v21 = &qword_10247FCE8;
        }
        else {
          id v21 = (uint64_t *)qword_10247FCE8;
        }
        *(unsigned char *)(*(void *)(a1 + 2088) + 40) = [[objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v21)) stringByAppendingPathComponent:@"DBCShutdownCookie"];
        if (byte_10247FD17 >= 0) {
          id v22 = &qword_10247FD00;
        }
        else {
          id v22 = (uint64_t *)qword_10247FD00;
        }
        *(_DWORD *)(*(void *)(a1 + 2088) + 44) = [objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v22)), "intValue");
        if (byte_10247FD2F >= 0) {
          id v23 = &qword_10247FD18;
        }
        else {
          id v23 = (uint64_t *)qword_10247FD18;
        }
        *(_DWORD *)(*(void *)(a1 + 2088) + 52) = [objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v23)), "intValue");
        if (byte_10247FD47 >= 0) {
          id v24 = &qword_10247FD30;
        }
        else {
          id v24 = (uint64_t *)qword_10247FD30;
        }
        *(_DWORD *)(*(void *)(a1 + 2088) + 56) = [objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v24)), "intValue");
        if (byte_10247FD5F >= 0) {
          id v25 = &qword_10247FD48;
        }
        else {
          id v25 = (uint64_t *)qword_10247FD48;
        }
        *(_DWORD *)(*(void *)(a1 + 2088) + 60) = [[objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v25)) stringValue] intValue];
        if (byte_10247FD77 >= 0) {
          id v26 = &qword_10247FD60;
        }
        else {
          id v26 = (uint64_t *)qword_10247FD60;
        }
        *(_DWORD *)(*(void *)(a1 + 2088) + 64) = [objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v26)), "intValue");
        if (byte_10247FD8F >= 0) {
          id v27 = &qword_10247FD78;
        }
        else {
          id v27 = (uint64_t *)qword_10247FD78;
        }
        *(void *)(*(void *)(a1 + 2088) + 72) = [(int)[v3 valueForKey:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v27)] intValue];
        if (byte_10247FDA7 >= 0) {
          id v28 = &qword_10247FD90;
        }
        else {
          id v28 = (uint64_t *)qword_10247FD90;
        }
        *(_DWORD *)(*(void *)(a1 + 2088) + 80) = [objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v28)), "intValue");
        if (byte_10247FDBF >= 0) {
          id v29 = &qword_10247FDA8;
        }
        else {
          id v29 = (uint64_t *)qword_10247FDA8;
        }
        *(_DWORD *)(*(void *)(a1 + 2088) + 84) = [objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v29)), "intValue");
        if (byte_10247FDD7 >= 0) {
          id v30 = &qword_10247FDC0;
        }
        else {
          id v30 = (uint64_t *)qword_10247FDC0;
        }
        *(_DWORD *)(*(void *)(a1 + 2088) + 88) = [objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v30)), "intValue");
        if (byte_10247FDEF >= 0) {
          id v31 = &qword_10247FDD8;
        }
        else {
          id v31 = (uint64_t *)qword_10247FDD8;
        }
        *(_DWORD *)(*(void *)(a1 + 2088) + 92) = [objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v31)), "intValue");
        if (byte_10247FE07 >= 0) {
          uint64_t v32 = &qword_10247FDF0;
        }
        else {
          uint64_t v32 = (uint64_t *)qword_10247FDF0;
        }
        *(_DWORD *)(*(void *)(a1 + 2088) + 96) = [objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v32)), "intValue");
        if (byte_10247FE1F >= 0) {
          int v33 = &qword_10247FE08;
        }
        else {
          int v33 = (uint64_t *)qword_10247FE08;
        }
        *(_DWORD *)(*(void *)(a1 + 2088) + 100) = [objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v33)), "intValue");
        if (byte_10247FE37 >= 0) {
          id v34 = &qword_10247FE20;
        }
        else {
          id v34 = (uint64_t *)qword_10247FE20;
        }
        *(_DWORD *)(*(void *)(a1 + 2088) + 104) = [objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v34)), "intValue");
        if (byte_10247FE4F >= 0) {
          __int16 v35 = &qword_10247FE38;
        }
        else {
          __int16 v35 = (uint64_t *)qword_10247FE38;
        }
        *(_DWORD *)(*(void *)(a1 + 2088) + 108) = [objc_msgSend(objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v35)), "intValue");
        if (byte_10247FE67 >= 0) {
          id v36 = &qword_10247FE50;
        }
        else {
          id v36 = (uint64_t *)qword_10247FE50;
        }
        *(unsigned char *)(*(void *)(a1 + 2088) + 112) = [[objc_msgSend(v3, "valueForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v36)) stringByAppendingPathComponent:@"DBCShutdownCookie"];
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        id v37 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "#EED2,readEEDMetricDataFromCache,EED metric data successfully read from cache", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022DBA80);
          }
          id v40 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::readEEDMetricDataFromCache()", "%s\n", v40);
          if (v40 != (char *)buf) {
            free(v40);
          }
        }
        return 1;
      }
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      }
      int v38 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "#EED2,readEEDMetricDataFromCache,nil fEED2Report,early return", buf, 2u);
      }
      BOOL v39 = sub_10013D1A0(115, 0);
      BOOL result = 0;
      if (v39)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022DBA80);
        }
        uint64_t v8 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyEED2::readEEDMetricDataFromCache()", "%s\n");
        goto LABEL_119;
      }
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
    }
    uint64_t v7 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#EED2,readEEDMetricDataFromCache,EED metric data not cached,early Return", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1)
      {
LABEL_21:
        uint64_t v8 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2::readEEDMetricDataFromCache()", "%s\n");
LABEL_119:
        if (v8 != buf) {
          free(v8);
        }
        return 0;
      }
LABEL_122:
      dispatch_once(&qword_1024193E0, &stru_1022DBA80);
      goto LABEL_21;
    }
  }
  return result;
}

BOOL sub_100ABAFAC(uint64_t a1)
{
  return sub_100A800B0(a1 + 1448);
}

void sub_100ABAFB4(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

uint64_t sub_100ABAFE4(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(_DWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a3;
  id v5 = (_OWORD *)(a1 + 8);
  long long v6 = *(_OWORD *)(a3 + 8);
  *(void *)(a1 + 32) = *(void *)(a3 + 24);
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 8) = 0;
  long long v7 = *(_OWORD *)(a3 + 32);
  *(void *)(a1 + 56) = *(void *)(a3 + 48);
  *(_OWORD *)(a1 + 40) = v7;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 32) = 0;
  int v8 = *(_DWORD *)(a3 + 56);
  *(unsigned char *)(a1 + 68) = *(unsigned char *)(a3 + 60);
  *(_DWORD *)(a1 + 64) = v8;
  long long v9 = *(_OWORD *)(a3 + 64);
  *(void *)(a1 + 88) = *(void *)(a3 + 80);
  *(_OWORD *)(a1 + 72) = v9;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 80) = 0;
  long long v10 = *(_OWORD *)(a3 + 88);
  *(void *)(a1 + 112) = *(void *)(a3 + 104);
  *(_OWORD *)(a1 + 96) = v10;
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 96) = 0;
  *(void *)(a3 + 104) = 0;
  long long v11 = *(_OWORD *)(a3 + 112);
  *(void *)(a1 + 136) = *(void *)(a3 + 128);
  *(_OWORD *)(a1 + 120) = v11;
  *(void *)(a3 + 112) = 0;
  *(void *)(a3 + 120) = 0;
  *(void *)(a3 + 128) = 0;
  long long v12 = *(_OWORD *)(a3 + 136);
  *(void *)(a1 + 160) = *(void *)(a3 + 152);
  *(_OWORD *)(a1 + 144) = v12;
  sub_1000E2908(a1 + 168, (uint64_t *)(a3 + 160));
  long long v13 = *(_OWORD *)(a3 + 200);
  *(void *)(a1 + 224) = *(void *)(a3 + 216);
  *(_OWORD *)(a1 + 208) = v13;
  *(void *)(a3 + 208) = 0;
  *(void *)(a3 + 216) = 0;
  *(void *)(a3 + 200) = 0;
  long long v14 = *(_OWORD *)(a3 + 272);
  long long v15 = *(_OWORD *)(a3 + 288);
  long long v16 = *(_OWORD *)(a3 + 256);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a3 + 240);
  v5[17] = v14;
  v5[18] = v15;
  v5[16] = v16;
  long long v17 = *(_OWORD *)(a3 + 352);
  long long v19 = *(_OWORD *)(a3 + 304);
  long long v18 = *(_OWORD *)(a3 + 320);
  v5[21] = *(_OWORD *)(a3 + 336);
  v5[22] = v17;
  v5[19] = v19;
  v5[20] = v18;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a3 + 224);
  long long v21 = *(_OWORD *)(a3 + 384);
  long long v20 = *(_OWORD *)(a3 + 400);
  long long v22 = *(_OWORD *)(a3 + 368);
  *(_OWORD *)(a1 + 417) = *(_OWORD *)(a3 + 409);
  v5[24] = v21;
  v5[25] = v20;
  v5[23] = v22;
  long long v23 = *(_OWORD *)(a3 + 432);
  *(void *)(a1 + 456) = *(void *)(a3 + 448);
  v5[27] = v23;
  *(void *)(a3 + 440) = 0;
  *(void *)(a3 + 448) = 0;
  *(void *)(a3 + 432) = 0;
  sub_1000E2908(a1 + 464, (uint64_t *)(a3 + 456));
  long long v24 = *(_OWORD *)(a3 + 496);
  *(_OWORD *)((char *)v5 + 508) = *(_OWORD *)(a3 + 508);
  v5[31] = v24;
  return a1;
}

uint64_t sub_100ABB16C(uint64_t a1)
{
  if (*(char *)(a1 + 455) < 0) {
    operator delete(*(void **)(a1 + 432));
  }
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }
  sub_100ABB7BC(a1 + 160);
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_100ABB210(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_100ABB240(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100100330(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    sub_100ABB2B8(a1, i + 16, (long long *)i + 1);
  return a1;
}

void sub_100ABB2A0(_Unwind_Exception *a1)
{
  sub_100ABB7BC(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100ABB2B8(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  long long v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    long long v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_100ABB53C(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  long long v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *long long v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_100ABB6EC((uint64_t)v25, 0);
  return i;
}

void sub_100ABB524(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100ABB6EC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

char *sub_100ABB53C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x78uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  BOOL result = sub_100ABB5B4((char *)v8 + 16, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_100ABB59C(_Unwind_Exception *a1)
{
  sub_100ABB6EC(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_100ABB5B4(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__uuid_t dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_1000DC48C(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_1000DC48C(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  __dst[72] = *((unsigned char *)a2 + 72);
  uint64_t v7 = __dst + 80;
  if (*((char *)a2 + 103) < 0)
  {
    sub_1000DC48C(v7, *((void **)a2 + 10), *((void *)a2 + 11));
  }
  else
  {
    long long v8 = a2[5];
    *((void *)__dst + 12) = *((void *)a2 + 12);
    *(_OWORD *)uint64_t v7 = v8;
  }
  return __dst;
}

void sub_100ABB6A0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100ABB6EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100ABB744((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void sub_100ABB744(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_100ABB7BC(uint64_t a1)
{
  sub_100ABB7F8(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100ABB7F8(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      sub_100ABB744((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_100ABB83C(uint64_t a1)
{
  sub_100ABB878(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100ABB878(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      sub_1002E4FF4((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_100ABB8BC(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_100ABB7F8(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

uint64_t sub_100ABB914(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 24) != a2[3]) {
    return 0;
  }
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  if (!v2) {
    return 1;
  }
  do
  {
    long long v4 = (const void **)(v2 + 2);
    uint64_t result = (uint64_t)sub_100122860(a2, (unsigned __int8 *)v2 + 16);
    if (!result) {
      break;
    }
    uint64_t v6 = result;
    uint64_t v7 = *((unsigned __int8 *)v2 + 39);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = *((unsigned __int8 *)v2 + 39);
    }
    else {
      uint64_t v8 = v2[3];
    }
    uint64_t v9 = *(unsigned __int8 *)(result + 39);
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(result + 24);
    }
    if (v8 != v9) {
      return 0;
    }
    if (v10 >= 0) {
      uint8x8_t v11 = (unsigned __int8 *)(result + 16);
    }
    else {
      uint8x8_t v11 = *(unsigned __int8 **)(result + 16);
    }
    if ((v7 & 0x80) != 0)
    {
      if (memcmp(*v4, v11, v2[3])) {
        return 0;
      }
    }
    else if (*((unsigned char *)v2 + 39))
    {
      while (*(unsigned __int8 *)v4 == *v11)
      {
        long long v4 = (const void **)((char *)v4 + 1);
        ++v11;
        if (!--v7) {
          goto LABEL_19;
        }
      }
      return 0;
    }
LABEL_19:
    uint64_t v12 = *((unsigned __int8 *)v2 + 63);
    if ((v12 & 0x80u) == 0) {
      uint64_t v13 = *((unsigned __int8 *)v2 + 63);
    }
    else {
      uint64_t v13 = v2[6];
    }
    uint64_t v14 = *(unsigned __int8 *)(v6 + 63);
    int v15 = (char)v14;
    if ((v14 & 0x80u) != 0) {
      uint64_t v14 = *(void *)(v6 + 48);
    }
    if (v13 != v14) {
      return 0;
    }
    float v16 = (const void **)(v2 + 5);
    unint64_t v19 = *(unsigned __int8 **)(v6 + 40);
    BOOL v18 = (unsigned __int8 *)(v6 + 40);
    float v17 = v19;
    if (v15 >= 0) {
      unint64_t v20 = v18;
    }
    else {
      unint64_t v20 = v17;
    }
    if ((v12 & 0x80) != 0)
    {
      if (memcmp(*v16, v20, v2[6])) {
        return 0;
      }
    }
    else if (*((unsigned char *)v2 + 63))
    {
      while (*(unsigned __int8 *)v16 == *v20)
      {
        float v16 = (const void **)((char *)v16 + 1);
        ++v20;
        if (!--v12) {
          goto LABEL_34;
        }
      }
      return 0;
    }
LABEL_34:
    uint64_t v2 = (uint64_t *)*v2;
    uint64_t result = 1;
  }
  while (v2);
  return result;
}

void sub_100ABBA78(void *a1, uint64_t *a2, uint64_t *a3)
{
  long long v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    uint64_t v8 = (void *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      int v10 = v8;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v8 + 2), (const std::string *)(v4 + 2));
        std::string::operator=((std::string *)(v8 + 5), (const std::string *)(v4 + 5));
        int v10 = (void *)*v8;
        sub_100ABBB80(a1, v8);
        long long v4 = (uint64_t *)*v4;
        if (!v10) {
          break;
        }
        uint64_t v8 = v10;
      }
      while (v4 != a3);
    }
    sub_100ABB878((uint64_t)a1, v10);
  }
  while (v4 != a3)
  {
    sub_100ABC018(a1, (long long *)v4 + 1);
    long long v4 = (uint64_t *)*v4;
  }
}

void sub_100ABBB50(void *a1)
{
  __cxa_begin_catch(a1);
  sub_100ABB878(v1, v2);
  __cxa_rethrow();
}

void sub_100ABBB6C(_Unwind_Exception *a1)
{
}

void *sub_100ABBB80(void *a1, void *a2)
{
  long long v4 = (unsigned __int8 *)(a2 + 2);
  unint64_t v5 = sub_100103388((uint64_t)(a1 + 3), (uint64_t)(a2 + 2));
  a2[1] = v5;
  uint64_t v6 = sub_100ABBBE4((uint64_t)a1, v5, v4);
  sub_1000D8A74(a1, a2, v6);
  return a2;
}

unsigned __int8 *sub_100ABBBE4(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6 = a1 + 32;
  float v7 = *(float *)(a1 + 32);
  unint64_t v8 = *(void *)(a1 + 8);
  float v9 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  if (!v8 || (float)(v7 * (float)v8) < v9)
  {
    BOOL v10 = 1;
    if (v8 >= 3) {
      BOOL v10 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v11 = v10 | (2 * v8);
    unint64_t v12 = vcvtps_u32_f32(v9 / v7);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    sub_100ABBD58(a1, v13);
    unint64_t v8 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v14.i16[0] = vaddlv_u8(v14);
  unint64_t v15 = v14.u32[0];
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v16 = a2;
    if (v8 <= a2) {
      unint64_t v16 = a2 % v8;
    }
  }
  else
  {
    unint64_t v16 = (v8 - 1) & a2;
  }
  float v17 = *(unsigned __int8 **)(*(void *)a1 + 8 * v16);
  if (v17)
  {
    BOOL v18 = *(unsigned __int8 **)v17;
    if (*(void *)v17)
    {
      int v19 = 0;
      do
      {
        unint64_t v20 = *((void *)v18 + 1);
        if (v15 > 1)
        {
          unint64_t v21 = *((void *)v18 + 1);
          if (v20 >= v8) {
            unint64_t v21 = v20 % v8;
          }
        }
        else
        {
          unint64_t v21 = v20 & (v8 - 1);
        }
        if (v21 != v16) {
          break;
        }
        int v22 = v20 == a2 ? sub_100103744(v6, v18 + 16, a3) : 0;
        if (v19 & (v22 ^ 1)) {
          break;
        }
        v19 |= v22;
        float v17 = *(unsigned __int8 **)v17;
        BOOL v18 = *(unsigned __int8 **)v17;
      }
      while (*(void *)v17);
    }
  }
  return v17;
}

void sub_100ABBD58(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_100ABBE48(a1, prime);
    }
  }
}

void sub_100ABBE48(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_1001D7FA0();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(unsigned __int8 ***)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = (unint64_t)v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      unint64_t v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      unint64_t v12 = *v7;
      if (*v7)
      {
        unint64_t v18 = v9.u32[0];
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v10 > 1)
          {
            if (v13 >= a2) {
              v13 %= a2;
            }
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 == v8)
          {
            uint64_t v7 = (unsigned __int8 **)v12;
          }
          else if (*(void *)(*(void *)a1 + 8 * v13))
          {
            uint8x8_t v14 = *(unsigned __int8 **)v12;
            if (*(void *)v12)
            {
              unint64_t v15 = v12;
              while (1)
              {
                int v16 = sub_100103744(a1 + 32, v12 + 16, v14 + 16);
                float v17 = *(unsigned __int8 **)v15;
                if (!v16) {
                  break;
                }
                uint8x8_t v14 = *(unsigned __int8 **)v17;
                unint64_t v15 = *(unsigned __int8 **)v15;
                if (!*(void *)v17) {
                  goto LABEL_32;
                }
              }
              uint8x8_t v14 = *(unsigned __int8 **)v15;
              float v17 = v15;
LABEL_32:
              unint64_t v10 = v18;
            }
            else
            {
              float v17 = v12;
            }
            *uint64_t v7 = v14;
            *(void *)float v17 = **(void **)(*(void *)a1 + 8 * v13);
            **(void **)(*(void *)a1 + 8 * v13) = v12;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v13) = v7;
            uint64_t v7 = (unsigned __int8 **)v12;
            unint64_t v8 = v13;
          }
          unint64_t v12 = *v7;
        }
        while (*v7);
      }
    }
  }
  else
  {
    unint64_t v11 = *(void **)a1;
    *(void *)a1 = 0;
    if (v11) {
      operator delete(v11);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *sub_100ABC018(void *a1, long long *a2)
{
  sub_100ABC084((uint64_t)a1, a2, (uint64_t)v5);
  unint64_t v3 = sub_100ABBB80(a1, v5[0]);
  v5[0] = 0;
  sub_100ABC1B0((uint64_t)v5, 0);
  return v3;
}

void sub_100ABC06C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100ABC1B0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t sub_100ABC084@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  uint64_t v7 = operator new(0x40uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  sub_100ABC118((char *)v7 + 16, a2);
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = sub_100103388(a1 + 24, (uint64_t)v7 + 16);
  *((void *)v7 + 1) = result;
  return result;
}

void sub_100ABC100(_Unwind_Exception *a1)
{
  sub_100ABC1B0(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_100ABC118(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__uuid_t dst = v4;
  }
  unint64_t v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_1000DC48C(v5, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)unint64_t v5 = v6;
  }
  return __dst;
}

void sub_100ABC194(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100ABC1B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1002E4FF4((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

unsigned __int8 *sub_100ABC208(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint8x8_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  sub_100ABC4A4(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_100100330(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *unint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  sub_100ABC1B0((uint64_t)v26, 0);
  return i;
}

void sub_100ABC48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100ABC1B0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unsigned char *sub_100ABC4A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t result = v8 + 2;
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    unint64_t result = sub_1000DC48C(result, *(void **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    void v8[4] = *((void *)v10 + 2);
    *(_OWORD *)unint64_t result = v11;
  }
  void v8[5] = 0;
  void v8[6] = 0;
  v8[7] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_100ABC530(_Unwind_Exception *a1)
{
  sub_100ABC1B0(v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100ABC548(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint8x8_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  sub_100ABC7E4(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_100100330(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *unint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  sub_100ABB6EC((uint64_t)v26, 0);
  return i;
}

void sub_100ABC7CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100ABB6EC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double sub_100ABC7E4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x78uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = v8 + 16;
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    sub_1000DC48C(v9, *(void **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    *((void *)v8 + 4) = *((void *)v10 + 2);
    *(_OWORD *)unint64_t v9 = v11;
  }
  double result = 0.0;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_100ABC880(_Unwind_Exception *a1)
{
  sub_100ABB6EC(v1, 0);
  _Unwind_Resume(a1);
}

void sub_100ABC898(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_100ABB878(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

uint64_t sub_100ABC8F0(uint64_t a1)
{
  sub_100ABC92C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100ABC92C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      sub_100ABB16C((uint64_t)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t *sub_100ABC970(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (*((_DWORD *)i + 4) == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v12 = a1 + 16;
  unint64_t v13 = operator new(0x228uLL);
  v23[0] = v13;
  v23[1] = a1 + 16;
  void *v13 = 0;
  v13[1] = v6;
  sub_100ABCBC8((uint64_t)(v13 + 2), a3);
  char v24 = 1;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_100100330(a1, v19);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *(void *)v23[0] = *v20;
    void *v20 = v23[0];
  }
  else
  {
    *(void *)v23[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v23[0];
    *(void *)(*(void *)a1 + 8 * v3) = v12;
    if (*(void *)v23[0])
    {
      unint64_t v21 = *(void *)(*(void *)v23[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v21 >= v7) {
          v21 %= v7;
        }
      }
      else
      {
        v21 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v21) = v23[0];
    }
  }
  uint64_t i = (uint64_t *)v23[0];
  v23[0] = 0;
  ++*(void *)(a1 + 24);
  sub_100ABCD58((uint64_t)v23, 0);
  return i;
}

void sub_100ABCBB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100ABCD58((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_100ABCBC8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  unint64_t v4 = (_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  unint64_t v5 = (_OWORD *)(a1 + 8);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  int v8 = *(_DWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = v8;
  long long v9 = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v9;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  long long v10 = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = v10;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  long long v11 = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v11;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  long long v12 = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v12;
  sub_1000E2908(a1 + 168, (uint64_t *)(a2 + 168));
  long long v13 = *(_OWORD *)(a2 + 208);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = v13;
  *(void *)(a2 + 216) = 0;
  *(void *)(a2 + 224) = 0;
  *(void *)(a2 + 208) = 0;
  long long v14 = v4[16];
  long long v15 = v4[17];
  long long v16 = v4[18];
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  v5[17] = v15;
  v5[18] = v16;
  v5[16] = v14;
  long long v17 = v4[22];
  long long v19 = v4[19];
  long long v18 = v4[20];
  v5[21] = v4[21];
  v5[22] = v17;
  v5[19] = v19;
  v5[20] = v18;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  long long v21 = v4[24];
  long long v20 = v4[25];
  long long v22 = v4[23];
  *(_OWORD *)(a1 + 417) = *(_OWORD *)(a2 + 417);
  v5[24] = v21;
  v5[25] = v20;
  v5[23] = v22;
  long long v23 = v4[27];
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  v5[27] = v23;
  *(void *)(a2 + 448) = 0;
  *(void *)(a2 + 456) = 0;
  *((void *)v4 + 54) = 0;
  sub_1000E2908(a1 + 464, (uint64_t *)(a2 + 464));
  long long v24 = v4[31];
  *(_OWORD *)((char *)v5 + 508) = *(_OWORD *)((char *)v4 + 508);
  v5[31] = v24;
  return a1;
}

void sub_100ABCD58(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100ABB16C((uint64_t)v2 + 24);
    }
    operator delete(v2);
  }
}

uint64_t sub_100ABCDB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100ABCE48(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100ABCECC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100ABCF64(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100ABCFEC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100ABD028(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100ABD06C(uint64_t a1, const void **a2, void *a3)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = *a3;
  uint64_t v5 = a3[1];
  *(void *)(a1 + 40) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  long long v6 = (void **)(a1 + 96);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 2;
  if (*((char *)a2 + 23) < 0)
  {
    if (a2[1]) {
      goto LABEL_5;
    }
LABEL_20:
    sub_101A7D454();
    uint64_t result = abort_report_np();
    __break(1u);
    return result;
  }
  if (!*((unsigned char *)a2 + 23)) {
    goto LABEL_20;
  }
LABEL_5:
  if (*((char *)a2 + 23) >= 0) {
    size_t v7 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v7 = (size_t)a2[1];
  }
  sub_1001110E4((uint64_t)&v11, v7 + 1);
  if (v12 >= 0) {
    int v8 = &v11;
  }
  else {
    int v8 = (long long *)v11;
  }
  if (v7)
  {
    if (*((char *)a2 + 23) >= 0) {
      long long v9 = a2;
    }
    else {
      long long v9 = *a2;
    }
    memmove(v8, v9, v7);
  }
  *(_WORD *)((char *)v8 + v7) = 44;
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)long long v6 = v11;
  *(void *)(a1 + 112) = v12;
  return a1;
}

void sub_100ABD1E0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v5);
  }
  sub_1000F5BB0(v3, *(void **)(v1 + 64));
  size_t v7 = *(std::__shared_weak_count **)(v1 + 40);
  if (v7) {
    sub_1000DB0A0(v7);
  }
  sub_1000F5BB0(v2, *v4);
  _Unwind_Resume(a1);
}

void sub_100ABD224(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_100ABD254(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  sub_100ABD2C4(*(void **)(a1 + 56), (void *)(a1 + 64), a1);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  sub_1000F5BB0(v2, *(void **)(a1 + 64));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000F5BB0(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

uint64_t sub_100ABD2C4(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      sub_100A98240(a3, *((_DWORD *)v5 + 8));
      long long v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          size_t v7 = v6;
          long long v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          size_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      uint64_t v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t sub_100ABD344(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_101399918();
    operator delete();
  }
  return result;
}

uint64_t sub_100ABD394(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_101108F9C();
    operator delete();
  }
  return result;
}

void sub_100ABD3E8()
{
}

void *sub_100ABD3FC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022DBB50;
  result[1] = v3;
  return result;
}

uint64_t sub_100ABD444(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DBB50;
  a2[1] = v2;
  return result;
}

uint64_t sub_100ABD470(uint64_t a1)
{
  return *(void *)(a1 + 8) + 1448;
}

uint64_t sub_100ABD47C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100ABD4BC()
{
}

void sub_100ABD4CC()
{
}

void *sub_100ABD4E0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022DBBE0;
  result[1] = v3;
  return result;
}

uint64_t sub_100ABD528(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DBBE0;
  a2[1] = v2;
  return result;
}

void sub_100ABD554(uint64_t a1, void **a2, id **a3)
{
}

uint64_t sub_100ABD564(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100ABD5A4()
{
}

void *sub_100ABD5B0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_100ABD634(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100ABD6B8(uint64_t *a1, long long *a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333) {
    sub_1001D7FD4();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v6 = 0x333333333333333;
  }
  else {
    unint64_t v6 = v4;
  }
  long long v14 = a1 + 2;
  if (v6) {
    size_t v7 = (char *)sub_100214C7C((uint64_t)(a1 + 2), v6);
  }
  else {
    size_t v7 = 0;
  }
  long long v10 = v7;
  long long v11 = &v7[80 * v3];
  long long v13 = &v7[80 * v6];
  sub_10084E8F0(a1 + 16, v11, a2);
  uint64_t v12 = v11 + 80;
  sub_100ABD7C8(a1, &v10);
  uint64_t v8 = a1[1];
  sub_100ABD9AC(&v10);
  return v8;
}

void sub_100ABD7B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100ABD9AC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100ABD7C8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100ABD840((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100ABD840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  void v14[2] = &v17;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 80);
      *(void *)(v8 - 64) = *(void *)(a3 - 64);
      *(_OWORD *)(v8 - 80) = v9;
      *(void *)(a3 - 72) = 0;
      *(void *)(a3 - 64) = 0;
      *(void *)(a3 - 80) = 0;
      long long v10 = *(_OWORD *)(a3 - 56);
      *(void *)(v8 - 40) = *(void *)(a3 - 40);
      *(_OWORD *)(v8 - 56) = v10;
      *(void *)(a3 - 48) = 0;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 56) = 0;
      *(unsigned char *)(v8 - 32) = *(unsigned char *)(a3 - 32);
      long long v11 = *(_OWORD *)(a3 - 24);
      *(void *)(v8 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v8 - 24) = v11;
      v8 -= 80;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 80;
      a3 -= 80;
    }
    while (a3 != a5);
    *((void *)&v17 + 1) = v8;
    uint64_t v12 = v17;
  }
  char v15 = 1;
  sub_100ABD920((uint64_t)v14);
  return v12;
}

uint64_t sub_100ABD920(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100ABD958((uint64_t *)a1);
  }
  return a1;
}

void sub_100ABD958(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_10084DFAC(v3, v1);
      v1 += 80;
    }
    while (v1 != v2);
  }
}

void **sub_100ABD9AC(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100ABD9E0(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 80;
    sub_10084DFAC(v4, i - 80);
  }
}

uint64_t sub_100ABDA28(uint64_t *a1, long long *a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    sub_1001D7FD4();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  long long v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)sub_10014F86C((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  long long v10 = v7;
  long long v11 = &v7[48 * v3];
  long long v13 = &v7[48 * v6];
  sub_10084ED1C(a1 + 16, v11, a2);
  uint64_t v12 = v11 + 48;
  sub_100ABDB38(a1, &v10);
  uint64_t v8 = a1[1];
  sub_100341194(&v10);
  return v8;
}

void sub_100ABDB24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100341194((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100ABDB38(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100ABDBB0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100ABDBB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 48) = 0;
      long long v11 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((void *)&v16 + 1) = v9;
  }
  char v14 = 1;
  sub_100ABDC68((uint64_t)v13);
  return a6;
}

uint64_t sub_100ABDC68(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100341140((uint64_t *)a1);
  }
  return a1;
}

uint64_t sub_100ABDCA0(uint64_t a1)
{
  return sub_100A8CA74(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void sub_100ABDCB4()
{
}

void *sub_100ABDCC8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022DBC70;
  result[1] = v3;
  return result;
}

uint64_t sub_100ABDD10(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DBC70;
  a2[1] = v2;
  return result;
}

uint64_t sub_100ABDD3C(uint64_t a1)
{
  return *(void *)(a1 + 8) + 1448;
}

uint64_t sub_100ABDD48(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100ABDD88()
{
}

void sub_100ABDD98()
{
}

void *sub_100ABDDAC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022DBCF0;
  result[1] = v3;
  return result;
}

uint64_t sub_100ABDDF4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DBCF0;
  a2[1] = v2;
  return result;
}

void sub_100ABDE20(uint64_t a1, void **a2, id **a3)
{
}

uint64_t sub_100ABDE30(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100ABDE70()
{
}

void sub_100ABDE80()
{
}

void *sub_100ABDE94(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022DBD70;
  result[1] = v3;
  return result;
}

uint64_t sub_100ABDEDC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DBD70;
  a2[1] = v2;
  return result;
}

void sub_100ABDF08(uint64_t a1, int *a2, void **a3, void **a4)
{
}

uint64_t sub_100ABDF1C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100ABDF5C()
{
}

void *sub_100ABDF68(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100ABDFF0()
{
}

void *sub_100ABE004(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022DBE00;
  result[1] = v3;
  return result;
}

uint64_t sub_100ABE04C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022DBE00;
  a2[1] = v2;
  return result;
}

uint64_t sub_100ABE078(uint64_t a1, int *a2, void **a3, void **a4)
{
  int v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v6 = *a4;
  uint64_t v7 = *(void *)(a1 + 8);
  *(unsigned char *)(v7 + 1960) = 0;
  return sub_100AB0E3C(v7, v4, v5, v6);
}

uint64_t sub_100ABE090(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100ABE0D0()
{
}

uint64_t sub_100ABE0DC()
{
  sub_100134750(&qword_10247FAD8, "Emergency SOS");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FAD8, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247FAF0, "/System/Library/LocationBundles/Emergency SOS.bundle");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FAF0, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_10248A828, "https://gateway.icloud.com/eedservice/Device/LIS/Update");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10248A828, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_10248A840, "https://gateway.icloud.com/eedservice/Device/ADR/Update");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10248A840, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_10248A858, "https://gateway.icloud.com/eedservice/Device/Control/Update");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10248A858, (void *)&_mh_execute_header);
  sub_100134750(byte_10248A870, "https://gateway.icloud.com/eedservice/Device/ADR/CacheUpdate");
  __cxa_atexit((void (*)(void *))&std::string::~string, byte_10248A870, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247FB08, "EEDSessionStartTime");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FB08, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247FB20, "EEDCallEndTime");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FB20, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247FB38, "EEDSessionState");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FB38, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247FB50, "EEDDeviceRootSecret");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FB50, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247FB68, "EEDDeviceSessionPrivateKey");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FB68, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247FB80, "EEDCurrentStreamingRequest");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FB80, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247FB98, "EEDCurrentUploadRequest");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FB98, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247FBB0, "EEDCurrentMitigation");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FBB0, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247FBC8, "EEDRequestsPending");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FBC8, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247FBE0, "EEDRequestsHandled");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FBE0, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247FBF8, "EEDNumSendSuccessForValidFix");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FBF8, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247FC10, "EEDNumSendFailForValidFixes");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FC10, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247FC28, "EEDNumValidFixesSent");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FC28, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247FC40, "EEDNumNoFixMessagesSent");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FC40, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247FC58, "EEDNumADRPayloadsSentTotal");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FC58, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247FC70, "EEDNumADRPayloadsSentSuccessfulTotal");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FC70, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247FC88, "EEDErrorCode");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FC88, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247FCA0, "EEDHorzAccuracy");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FCA0, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247FCB8, "EEDVertAccuracy");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FCB8, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247FCD0, "EEDLastHttpPostFailureCode");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FCD0, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247FCE8, "EEDAPNSTokenReceived");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FCE8, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247FD00, "EEDNumRequestsReceived");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FD00, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247FD18, "EEDNumControlPayloadsSent");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FD18, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247FD30, "EEDNumSuccessfulControlPayloadsSent");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FD30, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247FD48, "EEDNumRequestsDuringEEM");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FD48, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247FD60, "EEDNumDuplicateRequests");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FD60, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247FD78, "EEDFirstRequestTypeReceived");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FD78, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247FD90, "EEDNumStreamingRequests");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FD90, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247FDA8, "EEDNumUploadRequests");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FDA8, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247FDC0, "EEDNumDuplicateMediaSelections");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FDC0, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247FDD8, "EEDTotalItems");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FDD8, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247FDF0, "EEDNumImages");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FDF0, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247FE08, "EEDNumVideos");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FE08, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247FE20, "EEDBatteryLevelAtSessionStart");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FE20, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247FE38, "EEDBatteryLevelAtCallEnd");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FE38, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247FE50, "EEDPowerSourceConnected");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FE50, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247FE68, "EEDPartnerInfo");

  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247FE68, (void *)&_mh_execute_header);
}

float sub_100ABE7DC(uint64_t a1, int a2)
{
  int v2 = 0;
  while (1)
  {
    uint64_t v3 = v2;
    uint64_t v4 = dword_10241FB30[63 * a2 + v2];
    if (v4 == 10000) {
      break;
    }
    double v5 = *(float *)(a1 + 4 * v4);
    int v2 = 2 * v3 + 2;
    if (dbl_10243B628[63 * a2 + v3] >= v5) {
      int v2 = (2 * v3) | 1;
    }
    if (v2 >= 63) {
      return 0.0;
    }
  }
  return dbl_10243B628[63 * a2 + v3];
}

uint64_t sub_100ABE860(uint64_t a1)
{
  uint64_t v2 = 0;
  int v3 = -6;
  do
  {
    float v4 = 0.0;
    unsigned int v5 = v3;
    do
    {
      v5 += 6;
      float v4 = v4 + sub_100ABE7DC(a1, v5);
    }
    while (v5 < 0x1BC);
    *(float *)&v13[4 * v2++ + 24] = v4;
    ++v3;
  }
  while (v2 != 6);
  uint64_t v6 = 0;
  float v7 = 0.0;
  do
  {
    float v7 = v7 + expf(*(float *)&v13[v6 + 24]);
    v6 += 4;
  }
  while (v6 != 24);
  for (uint64_t i = 0; i != 24; i += 4)
    *(float *)&v13[i] = expf(*(float *)&v13[i + 24]) / v7;
  uint64_t v9 = 0;
  float v10 = 0.0;
  float v11 = -1.0;
  do
  {
    if (*(float *)&v13[4 * v9] >= v10)
    {
      float v10 = *(float *)&v13[4 * v9];
      float v11 = (float)(int)v9;
    }
    ++v9;
  }
  while (v9 != 6);
  return (int)v11;
}

uint64_t sub_100ABE990(uint64_t a1, uint64_t a2)
{
  sub_100ABE9C8(a1, a2);

  return sub_100ABE860(a1 + 8);
}

float sub_100ABE9C8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 392);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 396);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 316);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 320);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 324);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 196);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 416);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 412);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 388);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 220);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 228);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 328);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 332);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 356);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 232);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 236);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 248);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 336);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 244);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 252);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 256);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 340);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 260);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 344);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 268);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 360);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 312);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 280);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 364);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 284);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 368);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 288);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 292);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 296);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 376);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 380);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 304);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 308);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 384);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 408);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 400);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 404);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 268) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 284) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 292) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 300) = *(_DWORD *)(a2 + 420);
  *(_DWORD *)(a1 + 304) = *(_DWORD *)(a2 + 424);
  *(_DWORD *)(a1 + 308) = *(_DWORD *)(a2 + 428);
  *(_DWORD *)(a1 + 312) = *(_DWORD *)(a2 + 432);
  *(_DWORD *)(a1 + 316) = *(_DWORD *)(a2 + 436);
  *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 440);
  *(_DWORD *)(a1 + 324) = *(_DWORD *)(a2 + 444);
  float result = *(float *)(a2 + 448);
  *(float *)(a1 + 328) = result;
  return result;
}

void sub_100ABEC54()
{
}

double sub_100ABEC68(uint64_t a1, double *a2, int a3)
{
  if (qword_102419360 != -1) {
    dispatch_once(&qword_102419360, &stru_1022DBFE0);
  }
  uint64_t v6 = qword_102419368;
  if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
  {
    double v7 = *a2;
    *(_DWORD *)long long buf = 134349312;
    double v11 = v7;
    __int16 v12 = 1026;
    int v13 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLAccessoryHeadingCorrector,updatePASCDTransmissionState,time,%{public}.1lf,state,%{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_1022DBFE0);
    }
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLAccessoryHeadingCorrector::updatePASCDTransmissionState(const CFAbsoluteTime &, const CLNmeaSCDTransmissionState)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  double result = *a2;
  *(double *)(a1 + 24) = *a2;
  *(_DWORD *)a1 = a3;
  return result;
}

void sub_100ABEE50(double *a1, double *a2, double a3)
{
  a1[1] = a3;
  a1[2] = *a2;
  double v6 = *a2 + 180.0;
  if (v6 >= 360.0) {
    double v6 = v6 + -360.0;
  }
  *a2 = v6;
  if (qword_102419360 != -1) {
    dispatch_once(&qword_102419360, &stru_1022DBFE0);
  }
  double v7 = qword_102419368;
  if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *((void *)a1 + 2);
    double v9 = *a2;
    int v10 = *(_DWORD *)a1;
    *(_DWORD *)long long buf = 134349824;
    double v13 = a3;
    __int16 v14 = 2050;
    uint64_t v15 = v8;
    __int16 v16 = 2050;
    double v17 = v9;
    __int16 v18 = 1026;
    int v19 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLAccessoryHeadingCorrector,%{public}.1lf,corrected course from,%{public}.2lf,to,%{public}.2lf,in PASCD state,%{public}d", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_1022DBFE0);
    }
    double v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLAccessoryHeadingCorrector::flipCourse(double, double &)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
}

void sub_100ABF0A0(int *a1, double a2, double a3)
{
  if (qword_102419360 != -1) {
    dispatch_once(&qword_102419360, &stru_1022DBFE0);
  }
  double v6 = qword_102419368;
  if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = *((void *)a1 + 5);
    int v8 = *a1;
    *(_DWORD *)long long buf = 134349824;
    double v16 = a2;
    __int16 v17 = 2050;
    uint64_t v18 = v7;
    __int16 v19 = 2050;
    double v20 = a3;
    __int16 v21 = 1026;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLAccessoryHeadingCorrector,%{public}.1lf,stored course,prev,%{public}.2lf,now,%{public}.2lf,PASCDState,%{public}d", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_1022DBFE0);
    }
    __int16 v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLAccessoryHeadingCorrector::storeGPRMCCourse(double, double)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  *((double *)a1 + 4) = a2;
  *((double *)a1 + 5) = a3;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 2) = _Q0;
}

void sub_100ABF2B8(uint64_t a1, double *a2, double a3, double a4)
{
  double v39 = a3;
  if (qword_102419360 != -1) {
    dispatch_once(&qword_102419360, &stru_1022DBFE0);
  }
  int v8 = qword_102419368;
  if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
  {
    double v9 = *a2;
    int v10 = *(_DWORD *)a1;
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 134350592;
    double v55 = v9;
    __int16 v56 = 2050;
    double v57 = a3;
    __int16 v58 = 2050;
    double v59 = a4;
    __int16 v60 = 1026;
    int v61 = v10;
    __int16 v62 = 2050;
    uint64_t v63 = v11;
    __int16 v64 = 2050;
    uint64_t v65 = v12;
    __int16 v66 = 2050;
    uint64_t v67 = v13;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLAccessoryHeadingCorrector,%{public}.1lf,gprmcCourse,%{public}.2lf,speed,%{public}.2lf,fPASCDTransmissionState,%{public}d,fPASCDTimestamp,%{public}.1lf,fLastGPRMCTimeStamp,%{public}.1lf,fLastGPRMCCourse,%{public}.2lf", buf, 0x44u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_1022DBFE0);
    }
    double v32 = *a2;
    int v33 = *(_DWORD *)a1;
    uint64_t v34 = *(void *)(a1 + 24);
    uint64_t v35 = *(void *)(a1 + 32);
    uint64_t v36 = *(void *)(a1 + 40);
    int v40 = 134350592;
    double v41 = v32;
    __int16 v42 = 2050;
    double v43 = a3;
    __int16 v44 = 2050;
    double v45 = a4;
    __int16 v46 = 1026;
    int v47 = v33;
    __int16 v48 = 2050;
    uint64_t v49 = v34;
    __int16 v50 = 2050;
    uint64_t v51 = v35;
    __int16 v52 = 2050;
    uint64_t v53 = v36;
    id v37 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "double CLAccessoryHeadingCorrector::getHeading(const CFAbsoluteTime &, double, double)", "%s\n", v37);
    if (v37 != (char *)buf) {
      free(v37);
    }
  }
  double v14 = *(double *)(a1 + 24);
  double v15 = *a2;
  BOOL v16 = v14 < 0.0 || *a2 - v14 > 5.0;
  if (v16 || *(_DWORD *)a1 != 82)
  {
    double v28 = *(double *)(a1 + 8);
    if (v28 < 0.0 || v15 - v28 > 5.0) {
      goto LABEL_43;
    }
    double v30 = fmod(a3 - *(double *)(a1 + 16), 360.0);
    if (v30 < 0.0) {
      double v30 = v30 + 360.0;
    }
    if (v30 > 180.0) {
      double v30 = v30 + -360.0;
    }
    if (a4 >= 1.5 || fabs(v30) >= 15.0)
    {
LABEL_43:
      id v27 = (int *)a1;
      double v26 = v15;
      goto LABEL_44;
    }
    id v31 = (double *)a1;
    double v24 = v15;
    goto LABEL_54;
  }
  double v17 = *(double *)(a1 + 40);
  double v18 = -1.0;
  if (v17 >= 0.0)
  {
    double v19 = fmod(a3 - v17, 360.0);
    if (v19 < 0.0) {
      double v19 = v19 + 360.0;
    }
    if (v19 > 180.0) {
      double v19 = v19 + -360.0;
    }
    double v18 = fabs(v19);
  }
  BOOL v20 = v18 >= 0.0 && v15 - *(double *)(a1 + 32) <= 5.0;
  if (qword_102419360 != -1) {
    dispatch_once(&qword_102419360, &stru_1022DBFE0);
  }
  __int16 v21 = qword_102419368;
  if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134349312;
    double v55 = v18;
    __int16 v56 = 1026;
    LODWORD(v57) = v20;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CLAccessoryHeadingCorrector,courseDiff,%{public}.2lf,courseDiffValid,%{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_1022DBFE0);
    }
    int v40 = 134349312;
    double v41 = v18;
    __int16 v42 = 1026;
    LODWORD(v43) = v20;
    int v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "double CLAccessoryHeadingCorrector::getHeading(const CFAbsoluteTime &, double, double)", "%s\n", v38);
    if (v38 != (char *)buf) {
      free(v38);
    }
  }
  BOOL v22 = v18 > 45.0 && v20;
  if (a4 >= 1.5 || v22)
  {
    double v24 = *a2;
LABEL_53:
    id v31 = (double *)a1;
LABEL_54:
    sub_100ABEE50(v31, &v39, v24);
    return;
  }
  double v23 = *(double *)(a1 + 8);
  if (v23 >= 0.0)
  {
    double v24 = *a2;
    if (*a2 - v23 <= 5.0) {
      goto LABEL_53;
    }
  }
  BOOL v25 = v23 < 0.0 && v20;
  if (v25 && v18 < 15.0)
  {
    double v26 = *a2;
    id v27 = (int *)a1;
LABEL_44:
    sub_100ABF0A0(v27, v26, a3);
  }
}

void sub_100ABF81C(id a1)
{
  qword_102419368 = (uint64_t)os_log_create("com.apple.locationd.Position", "GpsAccessory");
}

void sub_100ABFB40(uint64_t a1, mach_error_t a2)
{
  if (a2)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022DC098);
    }
    float v4 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 134218242;
      uint64_t v10 = v5;
      __int16 v11 = 2080;
      uint64_t v12 = mach_error_string(a2);
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[CLHidManager] setReport: id=0x%lx, failed=%s", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022DC098);
      }
      mach_error_string(a2);
LABEL_18:
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLHidDevice setReport:payload:length:]_block_invoke", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022DC098);
    }
    double v6 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 134218240;
      uint64_t v10 = v7;
      __int16 v11 = 1024;
      LODWORD(v12) = 1;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[CLHidManager] setReport: id=0x%lx, success=%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022DC098);
      }
      goto LABEL_18;
    }
  }
}

id sub_100AC00F8(id result, uint64_t a2, uint64_t a3)
{
  int v3 = (void *)*((void *)result + 4);
  if (v3)
  {
    double result = [[[*((id *)result + 4) clientDevices] count];
    if (result)
    {
      return _[v3 updateClientDeviceWithHidDevice:a2 added:a3];
    }
  }
  return result;
}

uint64_t sub_100AC0264(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 32);
  if (v1)
  {
    uint64_t v2 = result;
    [*(id *)(result + 32) delegate];
    double result = objc_opt_respondsToSelector();
    if (result)
    {
      id v3 = [v1 delegate];
      uint64_t v4 = *(void *)(v2 + 40);
      uint64_t v5 = *(unsigned __int8 *)(v2 + 48);
      return (uint64_t)_[v3 monitorUpdateForDevice:v4 added:v5];
    }
  }
  return result;
}

void sub_100AC04D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6)
  {
    if ([*(id *)(a1 + 40) hidDevice])
    {
      [*(id *)(a1 + 48) delegate];
      if (objc_opt_respondsToSelector())
      {
        if ([*(id *)(a1 + 48) delegateQueue])
        {
          double v9 = [*(id *)(a1 + 48) delegateQueue];
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_100AC059C;
          block[3] = &unk_10229FF28;
          block[4] = a6;
          void block[5] = v6;
          void block[6] = *(void *)(a1 + 40);
          dispatch_async(v9, block);
        }
      }
    }
  }
}

void sub_100AC059C(uint64_t a1)
{
  memset(v9, 0, sizeof(v9));
  if ((unint64_t)[*(id *)(a1 + 32) length] < 0x81)
  {
    [*(id *)(a1 + 32) getBytes:v9 length:[*(id *)(a1 + 32) length]];
    [objc_msgSend(*(id *)(a1 + 40), "delegate") inputReportForDevice:*(void *)(a1 + 48) report:v9 length:[objc_msgSend(*(id *)(a1 + 32), "length")]];
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022DC098);
    }
    uint64_t v2 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      id v3 = [*(id *)(a1 + 32) length];
      *(_DWORD *)long long buf = 134218240;
      id v6 = v3;
      __int16 v7 = 2048;
      uint64_t v8 = 128;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "[CLHidManager], HID report length %lu exceeds %zu byte maximum", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022DC098);
      }
      [*(id *)(a1 + 32) length];
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLHidManager activateClientDevice:]_block_invoke", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_100AC0F70(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100AC0FA0(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 40) = a1 + 48;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  sub_100AC1020((uint64_t **)a1);
  return a1;
}

void sub_100AC0FFC(_Unwind_Exception *a1)
{
  sub_1000DB264(v2, *(char **)(v1 + 48));
  sub_1000DB264(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_100AC1020(uint64_t **a1)
{
  sub_100134750(__p, "Gsm");
  uint64_t v5 = __p;
  *((void *)sub_1002A196C(a1, (const void **)__p, (uint64_t)&unk_101D0B290, (_OWORD **)&v5) + 7) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_100134750(__p, "Cdma");
  uint64_t v5 = __p;
  *((void *)sub_1002A196C(a1, (const void **)__p, (uint64_t)&unk_101D0B290, (_OWORD **)&v5) + 7) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_100134750(__p, "Lte");
  uint64_t v5 = __p;
  *((void *)sub_1002A196C(a1, (const void **)__p, (uint64_t)&unk_101D0B290, (_OWORD **)&v5) + 7) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_100134750(__p, "NR5G");
  uint64_t v5 = __p;
  *((void *)sub_1002A196C(a1, (const void **)__p, (uint64_t)&unk_101D0B290, (_OWORD **)&v5) + 7) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v2 = a1 + 5;
  sub_100134750(__p, "Gsm");
  uint64_t v5 = __p;
  *((void *)sub_1002A196C(v2, (const void **)__p, (uint64_t)&unk_101D0B290, (_OWORD **)&v5) + 7) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_100134750(__p, "Cdma");
  uint64_t v5 = __p;
  *((void *)sub_1002A196C(v2, (const void **)__p, (uint64_t)&unk_101D0B290, (_OWORD **)&v5) + 7) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_100134750(__p, "Lte");
  uint64_t v5 = __p;
  *((void *)sub_1002A196C(v2, (const void **)__p, (uint64_t)&unk_101D0B290, (_OWORD **)&v5) + 7) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_100134750(__p, "NR5G");
  uint64_t v5 = __p;
  *((void *)sub_1002A196C(v2, (const void **)__p, (uint64_t)&unk_101D0B290, (_OWORD **)&v5) + 7) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100AC128C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AC12C8(uint64_t a1)
{
  return a1;
}

void sub_100AC1304(uint64_t **a1)
{
  a1[3] = 0;
  a1[4] = 0;
  a1[8] = 0;
  a1[9] = 0;
  sub_100AC1020(a1);
}

uint64_t sub_100AC1310(void *a1)
{
  sub_10010F274((uint64_t)v37);
  sub_10010F274((uint64_t)v34);
  uint64_t v2 = (void *)*a1;
  if ((void *)*a1 != a1 + 1)
  {
    char v3 = 1;
    do
    {
      if (*((char *)v2 + 55) < 0)
      {
        sub_1000DC48C(buf, (void *)v2[4], v2[5]);
      }
      else
      {
        *(_OWORD *)long long buf = *((_OWORD *)v2 + 2);
        *(void *)&uint8_t buf[16] = v2[6];
      }
      *(void *)&unsigned char buf[24] = v2[7];
      if ((v3 & 1) == 0) {
        sub_100132EFC(v38, (uint64_t)", ", 2);
      }
      char v4 = sub_100132EFC(v38, (uint64_t)"rat, ", 5);
      if (buf[23] >= 0) {
        uint64_t v5 = buf;
      }
      else {
        uint64_t v5 = *(unsigned char **)buf;
      }
      if (buf[23] >= 0) {
        uint64_t v6 = buf[23];
      }
      else {
        uint64_t v6 = *(void *)&buf[8];
      }
      __int16 v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
      sub_100132EFC(v7, (uint64_t)", numAlsRequests, ", 18);
      std::ostream::operator<<();
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      uint64_t v8 = (void *)v2[1];
      if (v8)
      {
        do
        {
          double v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          double v9 = (void *)v2[2];
          BOOL v10 = *v9 == (void)v2;
          uint64_t v2 = v9;
        }
        while (!v10);
      }
      char v3 = 0;
      uint64_t v2 = v9;
    }
    while (v9 != a1 + 1);
  }
  __int16 v11 = (void *)a1[5];
  if (v11 != a1 + 6)
  {
    do
    {
      if (*((char *)v11 + 55) < 0)
      {
        sub_1000DC48C(buf, (void *)v11[4], v11[5]);
      }
      else
      {
        *(_OWORD *)long long buf = *((_OWORD *)v11 + 2);
        *(void *)&uint8_t buf[16] = v11[6];
      }
      *(void *)&unsigned char buf[24] = v11[7];
      sub_100132EFC(v35, (uint64_t)", ", 2);
      uint64_t v12 = sub_100132EFC(v35, (uint64_t)"rat, ", 5);
      if (buf[23] >= 0) {
        uint64_t v13 = buf;
      }
      else {
        uint64_t v13 = *(unsigned char **)buf;
      }
      if (buf[23] >= 0) {
        uint64_t v14 = buf[23];
      }
      else {
        uint64_t v14 = *(void *)&buf[8];
      }
      double v15 = sub_100132EFC(v12, (uint64_t)v13, v14);
      sub_100132EFC(v15, (uint64_t)", numCellsRequested, ", 21);
      std::ostream::operator<<();
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      BOOL v16 = (void *)v11[1];
      if (v16)
      {
        do
        {
          double v17 = v16;
          BOOL v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          double v17 = (void *)v11[2];
          BOOL v10 = *v17 == (void)v11;
          __int16 v11 = v17;
        }
        while (!v10);
      }
      __int16 v11 = v17;
    }
    while (v17 != a1 + 6);
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022DC0D8);
  }
  double v18 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v19 = a1[4];
    uint64_t v21 = a1[8];
    uint64_t v20 = a1[9];
    std::stringbuf::str();
    std::stringbuf::str();
    BOOL v22 = &v32;
    if (v33 < 0) {
      BOOL v22 = v32;
    }
    if (v31 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    uint64_t v24 = a1[3];
    *(void *)long long buf = 68290562;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2050;
    *(void *)&buf[20] = v19;
    *(_WORD *)&unsigned char buf[28] = 2050;
    *(void *)&buf[30] = v21;
    __int16 v41 = 2050;
    uint64_t v42 = v20;
    __int16 v43 = 2082;
    __int16 v44 = v22;
    __int16 v45 = 2082;
    __int16 v46 = p_p;
    __int16 v47 = 2050;
    uint64_t v48 = v24;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"AlsNetworkRequestMetric\", \"number of ALS requests triggered by WiFi\":%{public}lu, \"number of APs requested\":%{public}lu, \"number of surrounding APs requested\":%{public}lu, \"number of ALS requests per Rat\":%{public, location:escape_only}s, \"number of Als Cells requested per Rat\":%{public, location:escape_only}s, \"number of ALS cell requests with different rats\":%{public}lu}", buf, 0x4Eu);
    if (v31 < 0) {
      operator delete(__p);
    }
    if (v33 < 0) {
      operator delete(v32);
    }
  }
  AnalyticsSendEventLazy();
  *(void *)((char *)v34
  uint64_t v28 = v26;
  v35[0] = v26;
  if (v36 < 0) {
    operator delete((void *)v35[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  v37[0] = v25;
  *(void *)((char *)v37 + *(void *)(v25 - 24)) = v27;
  v38[0] = v28;
  if (v39 < 0) {
    operator delete((void *)v38[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100AC18EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a24);
  sub_101A129A8((uint64_t)&a59);
  _Unwind_Resume(a1);
}

id sub_100AC1954(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = +[NSMutableDictionary dictionary];
  double v30 = v1;
  uint64_t v5 = (void *)*v1;
  char v3 = v1 + 1;
  char v4 = v5;
  if (v5 != v3)
  {
    do
    {
      if (*((char *)v4 + 55) < 0)
      {
        sub_1000DC48C(__dst, (void *)v4[4], v4[5]);
      }
      else
      {
        *(_OWORD *)__uuid_t dst = *((_OWORD *)v4 + 2);
        uint64_t v34 = v4[6];
      }
      uint64_t v35 = v4[7];
      uint64_t v6 = +[NSNumber numberWithUnsignedLong:v30];
      if (v34 >= 0) {
        size_t v7 = HIBYTE(v34);
      }
      else {
        size_t v7 = (size_t)__dst[1];
      }
      sub_1001110E4((uint64_t)__p, v7 + 11);
      if (v32 >= 0) {
        uint64_t v8 = __p;
      }
      else {
        uint64_t v8 = (void **)__p[0];
      }
      if (v7)
      {
        if (v34 >= 0) {
          double v9 = __dst;
        }
        else {
          double v9 = (void **)__dst[0];
        }
        memmove(v8, v9, v7);
      }
      strcpy((char *)v8 + v7, "NumRequests");
      if (v32 >= 0) {
        BOOL v10 = __p;
      }
      else {
        BOOL v10 = (void **)__p[0];
      }
      [v2 setObject:v6 forKeyedSubscript:[NSString stringWithUTF8String:v10]];
      if (v32 < 0) {
        operator delete(__p[0]);
      }
      __int16 v11 = +[NSNumber numberWithUnsignedLong:v35];
      if (v34 >= 0) {
        size_t v12 = HIBYTE(v34);
      }
      else {
        size_t v12 = (size_t)__dst[1];
      }
      sub_1001110E4((uint64_t)__p, v12 + 18);
      if (v32 >= 0) {
        uint64_t v13 = __p;
      }
      else {
        uint64_t v13 = (void **)__p[0];
      }
      if (v12)
      {
        if (v34 >= 0) {
          uint64_t v14 = __dst;
        }
        else {
          uint64_t v14 = (void **)__dst[0];
        }
        memmove(v13, v14, v12);
      }
      strcpy((char *)v13 + v12, "NumRequestsBounded");
      if (v32 >= 0) {
        double v15 = __p;
      }
      else {
        double v15 = (void **)__p[0];
      }
      [v2 setObject:v11 forKeyedSubscript:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v15)];
      if (v32 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v34) < 0) {
        operator delete(__dst[0]);
      }
      BOOL v16 = (void *)v4[1];
      if (v16)
      {
        do
        {
          double v17 = v16;
          BOOL v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          double v17 = (void *)v4[2];
          BOOL v18 = *v17 == (void)v4;
          char v4 = v17;
        }
        while (!v18);
      }
      char v4 = v17;
    }
    while (v17 != v3);
  }
  uint64_t v19 = (void *)v30[5];
  uint64_t v20 = v30 + 6;
  if (v19 != v30 + 6)
  {
    do
    {
      if (*((char *)v19 + 55) < 0)
      {
        sub_1000DC48C(__dst, (void *)v19[4], v19[5]);
      }
      else
      {
        *(_OWORD *)__uuid_t dst = *((_OWORD *)v19 + 2);
        uint64_t v34 = v19[6];
      }
      uint64_t v35 = v19[7];
      uint64_t v21 = +[NSNumber numberWithUnsignedLong:v30];
      if (v34 >= 0) {
        size_t v22 = HIBYTE(v34);
      }
      else {
        size_t v22 = (size_t)__dst[1];
      }
      sub_1001110E4((uint64_t)__p, v22 + 8);
      if (v32 >= 0) {
        double v23 = __p;
      }
      else {
        double v23 = (void **)__p[0];
      }
      if (v22)
      {
        if (v34 >= 0) {
          uint64_t v24 = __dst;
        }
        else {
          uint64_t v24 = (void **)__dst[0];
        }
        memmove(v23, v24, v22);
      }
      strcpy((char *)v23 + v22, "NumTower");
      if (v32 >= 0) {
        uint64_t v25 = __p;
      }
      else {
        uint64_t v25 = (void **)__p[0];
      }
      [v2 setObject:v21 forKeyedSubscript:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v25)];
      if (v32 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v34) < 0) {
        operator delete(__dst[0]);
      }
      uint64_t v26 = (void *)v19[1];
      if (v26)
      {
        do
        {
          uint64_t v27 = v26;
          uint64_t v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          uint64_t v27 = (void *)v19[2];
          BOOL v18 = *v27 == (void)v19;
          uint64_t v19 = v27;
        }
        while (!v18);
      }
      uint64_t v19 = v27;
    }
    while (v27 != v20);
  }
  uint64_t v28 = v30;
  [v2 setObject:+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v30[3], v30) forKeyedSubscript:@"CellRequestsWithDifferentRats"];
  [v2 setObject:+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v28[3]) forKeyedSubscript:@"CellRequestsWithDifferentRatsBounded"];
  [v2 setObject:+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v28[4]) forKeyedSubscript:@"WifiRequests"];
  [v2 setObject:+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v28[4]) forKeyedSubscript:@"WifiRequestsBounded"];
  [v2 setObject:[+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v28[8])] forKeyedSubscript:@"WifiNumAps"];
  [v2 setObject:[+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v28[9])] forKeyedSubscript:@"WifiNumSurroundingAps"];
  return v2;
}

void sub_100AC1DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AC1E3C(uint64_t a1, void *a2, uint64_t a3)
{
  sub_10010F274((uint64_t)v28);
  uint64_t v6 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      if (*((char *)v5 + 55) < 0)
      {
        sub_1000DC48C(buf, (void *)v5[4], v5[5]);
      }
      else
      {
        *(_OWORD *)long long buf = *((_OWORD *)v5 + 2);
        *(void *)&uint8_t buf[16] = v5[6];
      }
      *(void *)&unsigned char buf[24] = v5[7];
      sub_100132EFC(v29, (uint64_t)", ", 2);
      size_t v7 = sub_100132EFC(v29, (uint64_t)"rat, ", 5);
      if ((buf[23] & 0x80u) == 0) {
        uint64_t v8 = buf;
      }
      else {
        uint64_t v8 = *(uint8_t **)buf;
      }
      if ((buf[23] & 0x80u) == 0) {
        uint64_t v9 = buf[23];
      }
      else {
        uint64_t v9 = *(void *)&buf[8];
      }
      BOOL v10 = sub_100132EFC(v7, (uint64_t)v8, v9);
      sub_100132EFC(v10, (uint64_t)", numCellsRequested, ", 21);
      std::ostream::operator<<();
      if ((char)buf[23] < 0) {
        operator delete(*(void **)buf);
      }
      __int16 v11 = (void *)v5[1];
      if (v11)
      {
        do
        {
          size_t v12 = v11;
          __int16 v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          size_t v12 = (void *)v5[2];
          BOOL v13 = *v12 == (void)v5;
          uint64_t v5 = v12;
        }
        while (!v13);
      }
      uint64_t v5 = v12;
    }
    while (v12 != v6);
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022DC0D8);
  }
  uint64_t v14 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    std::stringbuf::str();
    double v15 = v27 >= 0 ? __p : (void **)__p[0];
    *(void *)long long buf = 68289282;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2082;
    *(void *)&buf[20] = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"LogCellAlsMetric\", \"number of Als Cells requested per Rat\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (v27 < 0) {
      operator delete(__p[0]);
    }
  }
  BOOL v16 = (void *)*a2;
  if ((void *)*a2 != v6)
  {
    int v17 = 0;
    do
    {
      if (*((char *)v16 + 55) < 0)
      {
        sub_1000DC48C(buf, (void *)v16[4], v16[5]);
      }
      else
      {
        *(_OWORD *)long long buf = *((_OWORD *)v16 + 2);
        *(void *)&uint8_t buf[16] = v16[6];
      }
      *(void *)&unsigned char buf[24] = v16[7];
      if (*(void *)&buf[24])
      {
        __p[0] = buf;
        BOOL v18 = sub_100450F00((uint64_t **)a1, (const void **)buf, (uint64_t)&unk_101D0B290, (long long **)__p);
        ++v18[7];
        uint64_t v19 = *(void *)&buf[24];
        __p[0] = buf;
        uint64_t v20 = sub_100450F00((uint64_t **)(a1 + 40), (const void **)buf, (uint64_t)&unk_101D0B290, (long long **)__p);
        ++v17;
        v20[7] += v19;
      }
      if ((char)buf[23] < 0) {
        operator delete(*(void **)buf);
      }
      uint64_t v21 = (void *)v16[1];
      if (v21)
      {
        do
        {
          size_t v22 = v21;
          uint64_t v21 = (void *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          size_t v22 = (void *)v16[2];
          BOOL v13 = *v22 == (void)v16;
          BOOL v16 = v22;
        }
        while (!v13);
      }
      BOOL v16 = v22;
    }
    while (v22 != v6);
    if (v17 > 1) {
      ++*(void *)(a1 + 24);
    }
  }
  *(void *)(a1 + 72) += a3;
  *(void *)((char *)v28
  v29[0] = v23;
  if (v30 < 0) {
    operator delete((void *)v29[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100AC22B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100AC22F4(void *a1, uint64_t a2, uint64_t a3)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022DC0D8);
  }
  uint64_t v6 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    v8[0] = 68289538;
    v8[1] = 0;
    __int16 v9 = 2082;
    BOOL v10 = "";
    __int16 v11 = 2050;
    uint64_t v12 = a2;
    __int16 v13 = 2050;
    uint64_t v14 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"LogWifiAlsMetric\", \"number of APs requested\":%{public}lu, \"number of surrounding APs requested\":%{public}lu}", (uint8_t *)v8, 0x26u);
  }
  ++a1[4];
  uint64_t v7 = a1[9] + a3;
  a1[8] += a2;
  a1[9] = v7;
}

void *sub_100AC2410@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "Gsm");
}

void *sub_100AC2420@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "Cdma");
}

void *sub_100AC2430@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "Lte");
}

void *sub_100AC2440@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "NR5G");
}

void sub_100AC2450(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

NSDictionary *sub_100AC2480(double *a1)
{
  v3[0] = @"timerFireCount";
  v4[0] = +[CLFenceBinner binForConvergingSessionCount:*(unsigned int *)a1];
  v3[1] = @"locationCount";
  v4[1] = +[CLFenceBinner binForConvergingSessionCount:*((unsigned int *)a1 + 1)];
  _DWORD v3[2] = @"declaredEntry";
  _DWORD v4[2] = +[NSNumber numberWithBool:*((unsigned __int8 *)a1 + 8)];
  unsigned __int8 v3[3] = @"duration";
  unsigned __int8 v4[3] = +[CLFenceBinner binForConvergingSessionDuration:a1[2]];
  void v3[4] = @"distanceFromFenceAtTimeout";
  void v4[4] = +[CLFenceBinner binForDistance:a1[3]];
  void v3[5] = @"lastLocationAgeAtTimeout";
  void v4[5] = +[CLFenceBinner binForAge:a1[4]];
  v3[6] = @"cellLocationCount";
  v4[6] = +[CLFenceBinner binForConvergingSessionCount:*((unsigned int *)a1 + 12)];
  v3[7] = @"wifiLocationCount";
  v4[7] = +[CLFenceBinner binForConvergingSessionCount:*((unsigned int *)a1 + 13)];
  unsigned __int8 v3[8] = @"gnssLocationCount";
  v4[8] = +[CLFenceBinner binForConvergingSessionCount:*((unsigned int *)a1 + 14)];
  v3[9] = @"gnssDuration";
  v4[9] = +[CLFenceBinner binForConvergingSessionDuration:a1[5]];
  v3[10] = @"wifiLocationRequestCount";
  v4[10] = +[CLFenceBinner binForConvergingSessionCount:*((unsigned int *)a1 + 15)];
  v3[11] = @"registeredForEPNO";
  v4[11] = +[NSNumber numberWithBool:*((unsigned __int8 *)a1 + 64)];
  v3[12] = @"triggerReceivedCount";
  v4[12] = +[CLFenceBinner binForConvergingSessionCount:*((unsigned int *)a1 + 17)];
  v3[13] = @"triggerCountEPNO";
  v4[13] = +[CLFenceBinner binForConvergingSessionCount:*((unsigned int *)a1 + 18)];
  v3[14] = @"entryLatency";
  v4[14] = +[CLFenceBinner binForConvergingSessionDuration:*(double *)((char *)a1 + 204) - a1[45]];
  v3[15] = @"distanceLatency";
  v4[15] = +[CLFenceBinner binForDistance:a1[11]];
  v3[16] = @"thresholdNearDuration";
  v4[16] = +[CLFenceBinner binForConvergingSessionDuration:a1[12]];
  v3[17] = @"thresholdAdjacentDuration";
  v4[17] = +[CLFenceBinner binForConvergingSessionDuration:a1[13]];
  v3[18] = @"triggerCountCarConnection";
  v4[18] = +[CLFenceBinner binForConvergingSessionCount:*((unsigned int *)a1 + 29)];
  v3[19] = @"triggerCountWifiAssociation";
  v4[19] = +[CLFenceBinner binForConvergingSessionCount:*((unsigned int *)a1 + 30)];
  v3[20] = @"triggerCountChargeState";
  v4[20] = +[CLFenceBinner binForConvergingSessionCount:*((unsigned int *)a1 + 31)];
  v3[21] = @"entryLocationType";
  v4[21] = +[NSNumber numberWithUnsignedInt:*((unsigned int *)a1 + 56)];
  v3[22] = @"entryLocationAccuracy";
  v4[22] = +[CLFenceBinner binForAccuracy:*(double *)((char *)a1 + 148)];
  v3[23] = @"previousLocationType";
  v4[23] = +[NSNumber numberWithUnsignedInt:*((unsigned int *)a1 + 95)];
  v3[24] = @"previousLocationAccuracy";
  v4[24] = +[CLFenceBinner binForAccuracy:a1[38]];
  v3[25] = @"gnssEnabledAtEntry";
  v4[25] = +[NSNumber numberWithBool:*((unsigned __int8 *)a1 + 112)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:26];
}

uint64_t sub_100AC27DC(uint64_t result, int a2, double a3)
{
  int v3 = *(_DWORD *)(result + 688);
  if (v3 == 3)
  {
    char v4 = (double *)(result + 104);
    goto LABEL_5;
  }
  if (v3 == 2)
  {
    char v4 = (double *)(result + 96);
LABEL_5:
    double *v4 = *v4 + a3 - *(double *)(result + 696);
  }
  *(_DWORD *)(result + 688) = a2;
  *(double *)(result + 696) = a3;
  return result;
}

__n128 sub_100AC281C(_OWORD *a1, uint64_t a2)
{
  long long v2 = a1[13];
  *(_OWORD *)((char *)a1 + 348) = a1[12];
  *(_OWORD *)((char *)a1 + 364) = v2;
  long long v3 = a1[11];
  *(_OWORD *)((char *)a1 + 316) = a1[10];
  *(_OWORD *)((char *)a1 + 332) = v3;
  long long v4 = a1[16];
  long long v5 = a1[14];
  *(_OWORD *)((char *)a1 + 396) = a1[15];
  *(_OWORD *)((char *)a1 + 412) = v4;
  *(_OWORD *)((char *)a1 + 380) = v5;
  *(_OWORD *)((char *)a1 + 424) = *(_OWORD *)((char *)a1 + 268);
  long long v6 = a1[9];
  *(_OWORD *)((char *)a1 + 284) = a1[8];
  *(_OWORD *)((char *)a1 + 300) = v6;
  long long v7 = *(_OWORD *)(a2 + 16);
  a1[8] = *(_OWORD *)a2;
  a1[9] = v7;
  long long v8 = *(_OWORD *)(a2 + 32);
  long long v9 = *(_OWORD *)(a2 + 48);
  long long v10 = *(_OWORD *)(a2 + 80);
  a1[12] = *(_OWORD *)(a2 + 64);
  a1[13] = v10;
  a1[10] = v8;
  a1[11] = v9;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v12 = *(_OWORD *)(a2 + 112);
  long long v13 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)((char *)a1 + 268) = *(_OWORD *)(a2 + 140);
  a1[15] = v12;
  a1[16] = v13;
  a1[14] = result;
  return result;
}

uint64_t sub_100AC2888(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(void *)(a1 + 24) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_100AC28BC(uint64_t a1)
{
  long long v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_100AC28F0(_DWORD *a1, uint64_t a2)
{
  *a1 = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  long long v6 = xmmword_10247FE80;
  memset(v7, 0, sizeof(v7));
  sub_10010F834(v7, (const void *)qword_10247FE90, qword_10247FE98[0], (qword_10247FE98[0] - qword_10247FE90) >> 2);
  long long v8 = *(_OWORD *)&qword_10247FE98[2];
  memset(v4, 0, 24);
  sub_10010F834(v4, (const void *)qword_10247FEB8, unk_10247FEC0, (unk_10247FEC0 - qword_10247FEB8) >> 2);
  unsigned __int8 v4[3] = (void *)qword_10247FED0;
  char v5 = 1;
  sub_100A17C38((uint64_t)&v9, (uint64_t)&v6, (uint64_t)v4);
  sub_100A18650(v3, a2, &v9);
}

void sub_100AC2A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  sub_100A18948(v23);
  _Unwind_Resume(a1);
}

uint64_t sub_100AC2A88(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  sub_100A18718(a1 + 8);
  sub_10120D878(a1 + 152);
  sub_10120DA30(a1 + 152);
  sub_100A18948(v2);
  return a1;
}

BOOL sub_100AC2AE4(int *a1, int a2)
{
  if (*a1 == a2)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022DC0F8);
    }
    uint64_t v3 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v4 = *a1;
      *(_DWORD *)long long buf = 67109120;
      int v12 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Already correct power mode, %d", buf, 8u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022DC0F8);
      }
      long long v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCachedLocationScanMode::setScanMode(CachedLocationScanPowerMode)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
      return 0;
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022DC0F8);
    }
    long long v8 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v9 = *a1;
      *(_DWORD *)long long buf = 67109376;
      int v12 = v9;
      __int16 v13 = 1024;
      int v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Changing cached location power mode from %d to %d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022DC0F8);
      }
      long long v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCachedLocationScanMode::setScanMode(CachedLocationScanPowerMode)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    *a1 = a2;
    if (a2 == 1)
    {
      sub_100A1894C((uint64_t)(a1 + 2));
      sub_10120DA34((uint64_t)(a1 + 38));
    }
    else
    {
      if (a2) {
        return 0;
      }
      sub_100A18718((uint64_t)(a1 + 2));
      sub_10120D878((uint64_t)(a1 + 38));
    }
    return 1;
  }
  return result;
}

void sub_100AC2E48(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100AC2E78()
{
  uint64_t v0 = operator new(4uLL);
  std::string __p = v0;
  *uint64_t v0 = 3;
  int v4 = v0 + 1;
  char v5 = v0 + 1;
  sub_100A17B7C((uint64_t)&xmmword_10247FE80, 10, 0, 1, (uint64_t)&__p, 10.0, 1.0, 1.0);
  if (__p)
  {
    int v4 = __p;
    operator delete(__p);
  }
  __cxa_atexit((void (*)(void *))sub_100AC2888, &xmmword_10247FE80, (void *)&_mh_execute_header);
  uint64_t v1 = operator new(8uLL);
  std::string __p = v1;
  void *v1 = 0x900000001;
  int v4 = v1 + 1;
  char v5 = v1 + 1;
  sub_100A17B80((uint64_t)&qword_10247FEB8, (uint64_t)&__p, 30.0);
  if (__p)
  {
    int v4 = __p;
    operator delete(__p);
  }
  return __cxa_atexit((void (*)(void *))sub_100AC28BC, &qword_10247FEB8, (void *)&_mh_execute_header);
}

void sub_100AC2F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const char *sub_100AC2F94(int a1)
{
  uint64_t v1 = "2.4GHz";
  if (a1 == 1) {
    uint64_t v1 = "stage1+5GHz";
  }
  if (a1 == 2) {
    return "stage2+5GHz";
  }
  else {
    return v1;
  }
}

uint64_t sub_100AC2FC0(unsigned __int8 *a1, unsigned __int8 a2)
{
  if (a1[6] || a1[4] != a2)
  {
    if (a1[7] || a1[5] != a2)
    {
      return 0;
    }
    else
    {
      uint64_t v2 = 1;
      a1[7] = 1;
    }
  }
  else
  {
    uint64_t v2 = 1;
    a1[6] = 1;
  }
  return v2;
}

uint64_t sub_100AC3010(int *a1)
{
  uint64_t v1 = *a1;
  if (v1 > 2) {
    return 0;
  }
  else {
    return qword_101D70FE8[v1] | qword_101D71000[v1] | 0xC0000000000;
  }
}

uint64_t sub_100AC304C(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)a1;
  if (*(unsigned char *)(a1 + 8))
  {
    unsigned int v2 = 0;
  }
  else
  {
    if (v1 > 2)
    {
      BOOL v4 = 0;
    }
    else if (*(unsigned char *)(a1 + 6))
    {
      BOOL v4 = (v1 & 7) == 0 || *(unsigned char *)(a1 + 7) == 0;
    }
    else
    {
      BOOL v4 = 1;
    }
    *(unsigned char *)(a1 + 8) = v4;
    unsigned int v2 = !v4;
  }
  if (v1 == 2)
  {
    uint64_t v12 = 0x90000000000;
    if (v2) {
      uint64_t v12 = 0xC0000000000;
    }
    uint64_t v14 = v2;
    uint64_t v13 = 0x800000000;
  }
  else
  {
    uint64_t v5 = 0x800000000;
    uint64_t v6 = 0x90000000000;
    if (v2) {
      uint64_t v7 = 0xC0000000000;
    }
    else {
      uint64_t v7 = 0x90000000000;
    }
    if (v2)
    {
      uint64_t v5 = 0x900000000;
      uint64_t v8 = 2;
    }
    else
    {
      uint64_t v8 = 0;
    }
    if (v2) {
      uint64_t v6 = 0xC0000000000;
    }
    uint64_t v9 = 0x800000000;
    if (v1)
    {
      uint64_t v6 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
    }
    else
    {
      uint64_t v10 = v2;
    }
    BOOL v11 = v1 == 1;
    if (v1 == 1) {
      uint64_t v12 = v7;
    }
    else {
      uint64_t v12 = v6;
    }
    if (v11) {
      uint64_t v13 = v5;
    }
    else {
      uint64_t v13 = v9;
    }
    if (v11) {
      uint64_t v14 = v8;
    }
    else {
      uint64_t v14 = v10;
    }
  }
  return v13 | v12 | v14;
}

uint64_t sub_100AC3120(uint64_t a1, uint64_t a2, uint64_t a3, int a4, float a5, float a6)
{
  *(_DWORD *)a1 = -1082130432;
  *(unsigned char *)(a1 + 4) = 0;
  *(float *)(a1 + 8) = a5;
  *(float *)(a1 + 12) = a6;
  *(_DWORD *)(a1 + 16) = 5;
  *(void *)(a1 + 24) = off_1022AD0A0;
  *(void *)(a1 + 32) = a2;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = off_1022DC168;
  *(void *)(a1 + 104) = a3;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 184) = off_1022AD0A0;
  *(void *)(a1 + 192) = a2;
  *(void *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(unsigned char *)(a1 + 256) = a4;
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1022DC138);
  }
  uint64_t v10 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
  {
    double v11 = *(float *)(a1 + 8);
    double v12 = *(float *)(a1 + 12);
    *(_DWORD *)long long buf = 134219008;
    double v16 = v11;
    __int16 v17 = 2048;
    double v18 = v12;
    __int16 v19 = 2048;
    uint64_t v20 = a2;
    __int16 v21 = 2048;
    uint64_t v22 = a3;
    __int16 v23 = 1024;
    int v24 = a4;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "mean (%f) scale (%f) variance sample size (%zd) max sample length (%zd), coverAttached (%d)", buf, 0x30u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DC138);
    }
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLCompassAccuracy::CLCompassAccuracy(const float, const float, const size_t, const size_t, const BOOL)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  return a1;
}

void sub_100AC3420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  v12[23] = v15;
  sub_1003A7340(v12 + 26);
  v12[12] = v13;
  sub_1003A7340(v14);
  uint64_t v12[3] = a12;
  sub_1003A7340(v12 + 6);
  _Unwind_Resume(a1);
}

void *sub_100AC3458(void *a1)
{
  *a1 = off_1022DC168;
  sub_1003A7340(a1 + 5);
  return a1;
}

void *sub_100AC34A0(void *a1)
{
  a1[23] = off_1022AD0A0;
  sub_1003A7340(a1 + 26);
  a1[12] = off_1022DC168;
  sub_1003A7340(a1 + 17);
  a1[3] = off_1022AD0A0;
  sub_1003A7340(a1 + 6);
  return a1;
}

void sub_100AC3540(uint64_t a1, uint64_t a2, uint64_t a3, float a4, float a5)
{
  *(_DWORD *)a1 = -1082130432;
  *(float *)(a1 + 8) = a4;
  *(float *)(a1 + 12) = a5;
  *(void *)(a1 + 32) = a2;
  sub_1003A7544((void *)(a1 + 24));
  *(void *)(a1 + 104) = a3;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1022DC138);
  }
  uint64_t v8 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
  {
    double v9 = *(float *)(a1 + 8);
    double v10 = *(float *)(a1 + 12);
    *(_DWORD *)long long buf = 134218752;
    double v13 = v9;
    __int16 v14 = 2048;
    double v15 = v10;
    __int16 v16 = 2048;
    uint64_t v17 = a2;
    __int16 v18 = 2048;
    uint64_t v19 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "mean (%f) scale (%f) variance sample size (%zd) max sample length (%zd)", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DC138);
    }
    double v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCompassAccuracy::init(const float, const float, const size_t, const size_t)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
}

float sub_100AC3774(uint64_t a1, float a2, float a3)
{
  float v9 = a3;
  if (*(unsigned char *)(a1 + 4))
  {
    float v8 = (float)(a2 - *(float *)(a1 + 8)) * (float)(a2 - *(float *)(a1 + 8));
    sub_1001A44F4(a1 + 24, &v8);
    unint64_t v4 = *(void *)(a1 + 88);
    if (v4) {
      float v5 = *(float *)(a1 + 40) / (float)v4;
    }
    else {
      float v5 = 0.0;
    }
    float v7 = v5;
    sub_100AC37FC(a1 + 96, &v7);
  }
  return sub_1001A44F4(a1 + 184, &v9);
}

void sub_100AC37FC(uint64_t a1, float *a2)
{
  uint64_t v4 = a1 + 40;
  sub_1000A1600((void *)(a1 + 40), a2);
  unint64_t v5 = *(void *)(a1 + 80);
  if (v5 > *(void *)(a1 + 8))
  {
    ++*(void *)(a1 + 72);
    *(void *)(a1 + 80) = v5 - 1;
    sub_1000A1688(v4, 1);
  }
  if (*a2 <= *(float *)(a1 + 16))
  {
    unint64_t v6 = *(void *)(a1 + 24) + 1;
    *(void *)(a1 + 24) = v6;
    if (v6 >= *(void *)(a1 + 8))
    {
      sub_100AC3C78(a1);
    }
  }
  else
  {
    *(float *)(a1 + 16) = *a2;
    *(void *)(a1 + 24) = 0;
  }
}

float sub_100AC38B8(uint64_t a1)
{
  sub_1003A7544((void *)(a1 + 24));

  return sub_100AC38F4(a1 + 96);
}

float sub_100AC38F4(uint64_t a1)
{
  unsigned int v2 = *(void ***)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  *(void *)(a1 + 80) = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = *(void *)(a1 + 56);
      unsigned int v2 = (void **)(*(void *)(a1 + 48) + 8);
      *(void *)(a1 + 48) = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 512;
    goto LABEL_7;
  }
  if (v4 >> 3 == 2)
  {
    uint64_t v6 = 1024;
LABEL_7:
    *(void *)(a1 + 72) = v6;
  }
  float result = *(float *)(a1 + 32);
  *(float *)(a1 + 16) = result;
  *(void *)(a1 + 24) = 0;
  return result;
}

float sub_100AC3978(uint64_t a1, int a2)
{
  if (a2 < 1) {
    return *(float *)a1;
  }
  unsigned int v3 = *(_DWORD *)(a1 + 16) - a2;
  if (v3 > 4) {
    float v4 = 40.0;
  }
  else {
    float v4 = flt_101D71060[v3];
  }
  if (*(unsigned char *)(a1 + 4))
  {
    float v5 = sub_100AC3A84(a1);
    if (*(float *)(a1 + 8) >= 70.0) {
      float v6 = v4 + 10.0;
    }
    else {
      float v6 = v4;
    }
    if (v5 < v6) {
      float v4 = v6;
    }
    else {
      float v4 = v5;
    }
  }
  if (*(unsigned char *)(a1 + 256))
  {
    float v7 = v4 + sub_100AC3B38(a1);
    float v4 = -1.0;
    if (v7 > 0.0)
    {
      float v4 = 10.0;
      if (v7 > 10.0)
      {
        float v4 = 15.0;
        if (v7 > 15.0)
        {
          float v4 = 20.0;
          if (v7 > 20.0)
          {
            float v4 = 25.0;
            if (v7 > 25.0)
            {
              float v4 = 30.0;
              if (v7 > 30.0)
              {
                if (v7 <= 35.0) {
                  return 35.0;
                }
                else {
                  return 40.0;
                }
              }
            }
          }
        }
      }
    }
  }
  return v4;
}

float sub_100AC3A84(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 32);
  if (v1) {
    float v2 = sqrtf(*(float *)(a1 + 112)) / sqrt((double)v1);
  }
  else {
    float v2 = 0.0;
  }
  float v3 = v2 * *(float *)(a1 + 12);
  float result = 10.0;
  if (v3 >= 15.0)
  {
    float result = 15.0;
    if (v3 >= 30.0)
    {
      float result = 20.0;
      if (v3 >= 45.0)
      {
        float result = 25.0;
        if (v3 >= 60.0)
        {
          float result = 30.0;
          if (v3 >= 75.0)
          {
            if (v3 >= 90.0) {
              return 40.0;
            }
            else {
              return 35.0;
            }
          }
        }
      }
    }
  }
  return result;
}

float sub_100AC3B38(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 192);
  if (v1 && (unint64_t v2 = *(void *)(a1 + 248), v2 >= v1)) {
    return sub_100AC3B68(*(float *)(a1 + 200) / (float)v2, 5.0);
  }
  else {
    return 0.0;
  }
}

float sub_100AC3B68(float a1, float a2)
{
  if (a2 > a1) {
    return 180.0;
  }
  float v5 = (float)-a2 / a1;
  float v6 = acosf(v5);
  float v7 = sinf(v6);
  return fabsf(atan2f(v7 * a2, a1 + (float)(a2 * v5))) * 57.2957795;
}

void sub_100AC3BE4(id a1)
{
  qword_1024190A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void sub_100AC3C14(void *a1)
{
  *a1 = off_1022DC168;
  sub_1003A7340(a1 + 5);

  operator delete();
}

uint64_t sub_100AC3C78(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 72);
  uint64_t v2 = *(void *)(result + 48);
  uint64_t v3 = *(void *)(result + 56);
  float v4 = (char *)(v2 + 8 * (v1 >> 10));
  if (v3 == v2)
  {
    uint64_t v6 = 0;
    uint64_t v5 = *(void *)(result + 72) & 0x3FFLL;
  }
  else
  {
    uint64_t v5 = *(void *)(result + 72) & 0x3FFLL;
    uint64_t v6 = *(void *)v4 + 4 * v5;
  }
  float v7 = *(float *)(result + 32);
  *(float *)(result + 16) = v7;
  uint64_t v8 = *(void *)(result + 80);
  *(void *)(result + 24) = v8 - 1;
  unint64_t v9 = v8 + v1;
  double v10 = (char *)(v2 + 8 * (v9 >> 10));
  uint64_t v11 = v9 & 0x3FF;
  double v12 = v4;
LABEL_5:
  double v13 = (float *)v6;
  while (1)
  {
    unint64_t v14 = v3 == v2 ? 0 : *(void *)v10 + 4 * v11;
    BOOL v15 = (unint64_t)v13 < v14 && v12 == v10;
    if (v12 >= v10 && !v15) {
      return result;
    }
    float v16 = *v13;
    if (*v13 > v7)
    {
      *(float *)(result + 16) = v16;
      if (v3 == v2) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = *(void *)v4 + 4 * v5;
      }
      if (v13 == (float *)v17) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = ((v12 - v4) << 7) + ((v6 - *(void *)v12) >> 2) - ((v17 - *(void *)v4) >> 2);
      }
      *(void *)(result + 24) = v18;
      float v7 = v16;
    }
    ++v13;
    v6 += 4;
    if (*(void *)v12 + 4096 == v6)
    {
      uint64_t v19 = *((void *)v12 + 1);
      v12 += 8;
      uint64_t v6 = v19;
      goto LABEL_5;
    }
  }
}

double sub_100AC3D8C(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = off_1022AD0A0;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = off_1022AD0A0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 156) = 0u;
  *(void *)(a1 + 176) = off_1022AD0A0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(unsigned char *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = off_1022AD0A0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  return result;
}

void *sub_100AC3E58(void *a1)
{
  a1[32] = off_1022AD0A0;
  sub_1003A7340(a1 + 35);
  a1[22] = off_1022AD0A0;
  sub_1003A7340(a1 + 25);
  a1[11] = off_1022AD0A0;
  sub_1003A7340(a1 + 14);
  a1[2] = off_1022AD0A0;
  sub_1003A7340(a1 + 5);
  return a1;
}

void sub_100AC3F20(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, unsigned int a5, unsigned int a6, unsigned int a7, _DWORD *a8, char a9)
{
  *(_DWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 4) = *a3;
  *(_DWORD *)(a1 + 12) = *a4;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 24) = a5;
  sub_1003A7544((void *)(a1 + 16));
  *(void *)(a1 + 96) = a6;
  sub_1003A7544((void *)(a1 + 88));
  *(void *)(a1 + 160) = a7 / a5;
  *(_DWORD *)(a1 + 168) = *a8;
  *(void *)(a1 + 184) = a6;
  sub_1003A7544((void *)(a1 + 176));
  *(unsigned char *)(a1 + 248) = a9;
  if (a9) {
    unint64_t v14 = vcvtad_u64_f64(*(float *)a1 * 0.25);
  }
  else {
    unint64_t v14 = 1;
  }
  *(void *)(a1 + 264) = v14;
  sub_1003A7544((void *)(a1 + 256));
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1022DC1A8);
  }
  BOOL v15 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
  {
    double v16 = *(float *)a1;
    double v17 = *(float *)(a1 + 4);
    double v18 = *(float *)(a1 + 12);
    int v19 = *(_DWORD *)(a1 + 160);
    double v20 = *(float *)(a1 + 168);
    *(_DWORD *)long long buf = 134219008;
    double v23 = v16;
    __int16 v24 = 2048;
    double v25 = v17;
    __int16 v26 = 2048;
    double v27 = v18;
    __int16 v28 = 1024;
    int v29 = v19;
    __int16 v30 = 2048;
    double v31 = v20;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "sample rate (%.3f) observation rate (%.3f) observation threshold (%.3f) deviation count threshold (%d) standard deviation threshold (%.3f)", buf, 0x30u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DC1A8);
    }
    __int16 v21 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLThreshold::init(const float &, const float &, const float &, const unsigned int, const unsigned int, const unsigned int, const float &, const BOOL)", "%s\n", v21);
    if (v21 != (char *)buf) {
      free(v21);
    }
  }
}

BOOL sub_100AC4200(uint64_t a1, float *a2)
{
  ++*(_DWORD *)(a1 + 8);
  if (*(unsigned char *)(a1 + 248) && *(void *)(a1 + 320) < *(void *)(a1 + 264)) {
    sub_1001A44F4(a1 + 256, a2);
  }
  sub_1001A44F4(a1 + 16, a2);
  if ((unint64_t)*(unsigned int *)(a1 + 8) % *(void *)(a1 + 24)) {
    return 0;
  }
  unint64_t v4 = *(void *)(a1 + 80);
  float v5 = 0.0;
  float v6 = 0.0;
  if (v4) {
    float v6 = *(float *)(a1 + 32) / (float)v4;
  }
  *(float *)long long buf = v6;
  sub_1001A44F4(a1 + 88, (float *)buf);
  unint64_t v7 = *(void *)(a1 + 152);
  if (v7) {
    float v5 = *(float *)(a1 + 104) / (float)v7;
  }
  v25[0] = (float)(*a2 - v5) * (float)(*a2 - v5);
  sub_1001A44F4(a1 + 176, v25);
  if (*(_DWORD *)(a1 + 8) % (float)(*(float *)a1 / *(float *)(a1 + 4))) {
    return 0;
  }
  BOOL result = sub_100AC45A0(a1);
  if (result)
  {
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022DC1A8);
    }
    unint64_t v9 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v10 = *(void *)(a1 + 320);
      if (v10) {
        double v11 = (float)(*(float *)(a1 + 272) / (float)v10);
      }
      else {
        double v11 = 0.0;
      }
      double v12 = *(float *)(a1 + 12);
      double v13 = *a2;
      unint64_t v14 = *(void *)(a1 + 240);
      if (v14) {
        float v15 = *(float *)(a1 + 192) / (float)v14;
      }
      else {
        float v15 = 0.0;
      }
      int v16 = *(_DWORD *)(a1 + 164);
      *(_DWORD *)long long buf = 134219008;
      double v36 = v12;
      __int16 v37 = 2048;
      double v38 = v13;
      __int16 v39 = 2048;
      double v40 = v11;
      __int16 v41 = 2048;
      double v42 = sqrtf(fabsf(v15));
      __int16 v43 = 1024;
      int v44 = v16;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "threshold (%f) was exceeded with observed value (%f) and base value (%f) and standard deviation (%f) and count of (%d)", buf, 0x30u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022DC1A8);
      }
      unint64_t v17 = *(void *)(a1 + 320);
      if (v17) {
        double v18 = (float)(*(float *)(a1 + 272) / (float)v17);
      }
      else {
        double v18 = 0.0;
      }
      double v19 = *(float *)(a1 + 12);
      double v20 = *a2;
      unint64_t v21 = *(void *)(a1 + 240);
      if (v21) {
        float v22 = *(float *)(a1 + 192) / (float)v21;
      }
      else {
        float v22 = 0.0;
      }
      int v23 = *(_DWORD *)(a1 + 164);
      v25[1] = 3.8524e-34;
      double v26 = v19;
      __int16 v27 = 2048;
      double v28 = v20;
      __int16 v29 = 2048;
      double v30 = v18;
      __int16 v31 = 2048;
      double v32 = sqrtf(fabsf(v22));
      __int16 v33 = 1024;
      int v34 = v23;
      __int16 v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLThreshold::update(const float &)", "%s\n", v24);
      if (v24 != (char *)buf) {
        free(v24);
      }
    }
    return 1;
  }
  return result;
}

BOOL sub_100AC45A0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 152);
  float v2 = 0.0;
  float v3 = 0.0;
  if (v1) {
    float v3 = *(float *)(a1 + 104) / (float)v1;
  }
  unint64_t v4 = *(void *)(a1 + 320);
  if (v4) {
    float v2 = *(float *)(a1 + 272) / (float)v4;
  }
  float v5 = vabds_f32(v3, v2);
  unint64_t v6 = *(void *)(a1 + 240);
  if (v6) {
    float v7 = *(float *)(a1 + 192) / (float)v6;
  }
  else {
    float v7 = 0.0;
  }
  unsigned int v8 = *(_DWORD *)(a1 + 164);
  if (v5 <= *(float *)(a1 + 12))
  {
    if (!v8) {
      return sqrtf(v7) != 0.0 && v8 > *(_DWORD *)(a1 + 160);
    }
    int v9 = -1;
  }
  else
  {
    int v9 = 1;
  }
  v8 += v9;
  *(_DWORD *)(a1 + 164) = v8;
  return sqrtf(v7) != 0.0 && v8 > *(_DWORD *)(a1 + 160);
}

float sub_100AC4630(uint64_t a1, int a2)
{
  if (a2)
  {
    unint64_t v3 = *(void *)(a1 + 320);
    if (v3) {
      float v4 = *(float *)(a1 + 272) / (float)v3;
    }
    else {
      float v4 = 0.0;
    }
    float v6 = v4;
    *(_DWORD *)(a1 + 8) = 0;
    sub_1003A7544((void *)(a1 + 16));
    sub_1003A7544((void *)(a1 + 88));
    *(_DWORD *)(a1 + 164) = 0;
    sub_1003A7544((void *)(a1 + 176));
    return sub_100AC46EC((void *)a1, &v6);
  }
  else
  {
    *(_DWORD *)(a1 + 8) = 0;
    sub_1003A7544((void *)(a1 + 16));
    sub_1003A7544((void *)(a1 + 88));
    *(_DWORD *)(a1 + 164) = 0;
    sub_1003A7544((void *)(a1 + 176));
    sub_1003A7544((void *)(a1 + 256));
  }
  return result;
}

float sub_100AC46EC(void *a1, float *a2)
{
  uint64_t v4 = (uint64_t)(a1 + 32);
  sub_1003A7544(a1 + 32);
  while (a1[40] < a1[33])
    float result = sub_1001A44F4(v4, a2);
  return result;
}

float sub_100AC4744(uint64_t a1)
{
  return *(float *)(a1 + 12);
}

double sub_100AC474C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 152);
  if (!v1) {
    return 0.0;
  }
  *(float *)&double result = *(float *)(a1 + 104) / (float)v1;
  return result;
}

double sub_100AC476C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 320);
  if (!v1) {
    return 0.0;
  }
  *(float *)&double result = *(float *)(a1 + 272) / (float)v1;
  return result;
}

void sub_100AC478C(id a1)
{
  qword_1024190A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

uint64_t sub_100AC47BC(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a3 + 48) + 48))(*(void *)(a3 + 48));
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void, unsigned char *, double))(**(void **)(a3 + 48) + 24))(*(void *)(a3 + 48), v6, a1);
    if (v6[208]) {
      return sub_10046B90C(*(void *)(a3 + 8), *(double *)(*(void *)(a3 + 8) + 104), *(double *)(*(void *)(a3 + 8) + 112));
    }
  }
  return result;
}

uint64_t sub_100AC488C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v5 = *(float *)(a3 + 1372);
  int v6 = sub_1001860C8(a3);
  if (!*(unsigned char *)(a3 + 352)) {
    return a2;
  }
  if (!v6) {
    return a2;
  }
  if (*(double *)(a3 + 600) >= *(double *)a3) {
    return a2;
  }
  float v7 = *(double *)(a3 + 560);
  double v8 = 1.0
     - (v5 * -0.699999988 + 208.0 - v7)
     / (v5 * -0.699999988 + 208.0 - fmax(fmin(v5 * -3.20000005 + 117.900002, 100.0), 65.0));
  if (v8 <= 0.324999988) {
    return a2;
  }
  uint64_t v9 = sub_100779764(2, a2);
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022DC210);
  }
  unint64_t v10 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = *(void *)(a3 + 120);
    *(_DWORD *)long long buf = 134218752;
    uint64_t v15 = v11;
    __int16 v16 = 1026;
    int v17 = a2;
    __int16 v18 = 1026;
    int v19 = v9;
    __int16 v20 = 2050;
    double v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Overriding youth type for heart rate, beginTime, %f, before, %{public}d, after, %{public}d, fhr,%{public}f", buf, 0x22u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022DC210);
    }
    double v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLMotionActivity::TypeYouth CLFitnessYouthHeartRateOverride::doOverride(CLMotionActivity::TypeYouth, const CLNatalieModelInput &)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  return v9;
}

void sub_100AC4B48(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100AC4B78(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0;
  }
  return sub_100AC55E4(v2, a2);
}

double sub_100AC4B88(uint64_t a1)
{
  uint64_t v1 = a1 - 8;
  if (!a1) {
    uint64_t v1 = 0;
  }
  double result = 0.0;
  *(_OWORD *)(v1 + 752) = 0u;
  return result;
}

BOOL sub_100AC4BA0(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 20) < 5;
}

double sub_100AC4BB0(uint64_t a1)
{
  uint64_t v1 = a1 - 8;
  if (!a1) {
    uint64_t v1 = 0;
  }
  double result = 0.0;
  *(_OWORD *)(v1 + 752) = 0u;
  return result;
}

BOOL sub_100AC4BC8(uint64_t a1, uint64_t a2)
{
  return *(int *)(a2 + 20) >= 8 && *(double *)a2 < 5.0;
}

uint64_t sub_100AC4BF0(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0;
  }
  return sub_100AC5690(v2, a2);
}

uint64_t sub_100AC4C00(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0;
  }
  return sub_100AC5734(v2, a2);
}

uint64_t sub_100AC4C10(uint64_t a1, int a2)
{
  *(void *)(a1 + 8) = &unk_1022DC230;
  uint64_t v3 = a1 + 8;
  *(void *)(a1 + 16) = 10;
  *(_WORD *)(a1 + 24) = 512;
  *(void *)a1 = off_1022DC330;
  *(void *)(a1 + 32) = 0x400000000;
  *(void *)(a1 + 168) = off_1022D4E20;
  *(_OWORD *)(a1 + 176) = xmmword_101D1E240;
  *(void *)(a1 + 192) = 0xFFEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(unsigned char *)(a1 + 232) = 1;
  *(_DWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 252) = 75;
  *(_DWORD *)(a1 + 244) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(int64x2_t *)(a1 + 576) = vdupq_n_s64(0xC08F380000000000);
  *(unsigned char *)(a1 + 592) = 0;
  *(void *)(a1 + 600) = 0;
  *(unsigned char *)(a1 + 608) = 0;
  *(unsigned char *)(a1 + 616) = 1;
  *(void *)(a1 + 632) = 0xA00000000;
  *(_DWORD *)(a1 + 628) = 0;
  *(unsigned char *)(a1 + 680) = 1;
  *(void *)(a1 + 696) = 0xC00000000;
  *(_DWORD *)(a1 + 692) = 1031798784;
  *(_OWORD *)(a1 + 752) = 0u;
  if (a2 == 1) {
    sub_1001A34E0(v3, 1, (uint64_t)&v5);
  }
  return a1;
}

void sub_100AC4D44(_Unwind_Exception *exception_object)
{
  char v5 = v3;
  void *v5 = v2;
  float v7 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 216) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AC4D70(uint64_t a1, double *a2)
{
  uint64_t v4 = operator new(0xCuLL);
  double v42 = v4 + 3;
  __int16 v43 = (char *)(v4 + 3);
  *(void *)uint64_t v4 = 7;
  _DWORD v4[2] = 5;
  std::string __p = v4;
  uint64_t v5 = sub_1009660E4(a1 + 168, (uint64_t)a2);
  if (v5 && ((v6 = *(unsigned __int8 *)(a1 + 24), v6 != 3) ? (BOOL v7 = v6 == 0) : (BOOL v7 = 1), v7))
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022DC388);
    }
    double v8 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *(unsigned __int8 *)(a1 + 24);
      *(_DWORD *)long long buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "HRStop detect in rowing model during state,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022DC388);
      }
      int v10 = *(unsigned __int8 *)(a1 + 24);
      LODWORD(v62[0]) = 67240192;
      HIDWORD(v62[0]) = v10;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLWorkoutPredictor_Type::WorkoutStopDetectionEvent CLRowingWorkoutStopModel::update(const CLWorkoutPredictorInputs &)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  else
  {
    __int16 v63 = 0;
    *(_OWORD *)__int16 v62 = xmmword_101D1E250;
    memset(&v62[2], 0, 135);
    long long v64 = xmmword_101D1E250;
    uint64_t v65 = 0;
    int v66 = 0;
    uint64_t v67 = 0;
    v68[0] = 0;
    *(void *)((char *)v68 + 5) = 0;
    *(void *)((char *)&v68[1] + 6) = 0;
    char v69 = 0;
    memset(&v68[3], 0, 24);
    long long v70 = xmmword_101D1E250;
    uint64_t v71 = 0;
    int v72 = 0;
    unint64_t v73 = 0xFFEFFFFFFFFFFFFFLL;
    int v84 = 0;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    int v79 = 0;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v82 = 0u;
    memset(v83, 0, sizeof(v83));
    uint64_t v85 = 0;
    uint64_t v86 = 0;
    unint64_t v87 = 0xFFEFFFFFFFFFFFFFLL;
    uint64_t v88 = 0;
    int v89 = 0;
    uint64_t v95 = 0;
    __int16 v96 = 0;
    int v101 = 0;
    int v94 = 0;
    long long v92 = 0u;
    long long v93 = 0u;
    long long v90 = 0u;
    long long v91 = 0u;
    long long v98 = 0u;
    long long v97 = 0u;
    char v99 = 0;
    memset(v100, 0, sizeof(v100));
    unint64_t v102 = 0xFFEFFFFFFFFFFFFFLL;
    long long v121 = 0u;
    long long v120 = 0u;
    long long v119 = 0u;
    long long v118 = 0u;
    long long v117 = 0u;
    long long v116 = 0u;
    long long v115 = 0u;
    long long v114 = 0u;
    long long v113 = 0u;
    long long v112 = 0u;
    long long v111 = 0u;
    long long v110 = 0u;
    long long v109 = 0u;
    long long v108 = 0u;
    long long v107 = 0u;
    long long v106 = 0u;
    long long v105 = 0u;
    long long v104 = 0u;
    long long v103 = 0u;
    uint64_t v122 = 0;
    unint64_t v123 = 0xFFEFFFFFFFFFFFFFLL;
    long long v124 = 0u;
    long long v125 = 0u;
    long long v126 = 0u;
    long long v127 = 0u;
    unint64_t v128 = 0xFFEFFFFFFFFFFFFFLL;
    uint64_t v129 = 0;
    int v130 = 0;
    uint64_t v131 = 0;
    char v132 = 0;
    unint64_t v133 = 0xFFEFFFFFFFFFFFFFLL;
    uint64_t v135 = 0;
    uint64_t v134 = 0;
    uint64_t v136 = 0x80000000800000;
    uint64_t v138 = 0;
    uint64_t v137 = 0;
    long long v139 = xmmword_101D1E260;
    uint64_t v140 = 0x80000000800000;
    long long v141 = 0u;
    long long v142 = 0u;
    uint64_t v143 = 0;
    unint64_t v144 = 0xFFEFFFFFFFFFFFFFLL;
    long long v145 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v150 = 0u;
    int v151 = 0;
    unint64_t v152 = 0xFFEFFFFFFFFFFFFFLL;
    __int16 v153 = 0;
    int v154 = 0;
    unint64_t v155 = 0xFFEFFFFFFFFFFFFFLL;
    uint64_t v156 = 7;
    unint64_t v157 = 0xFFEFFFFFFFFFFFFFLL;
    char v158 = 0;
    uint64_t v160 = 0;
    uint64_t v159 = 0;
    uint64_t v161 = 0;
    if (sub_100174478(a2, &__p, (uint64_t)v62))
    {
      sub_100AC577C((unsigned __int16 *)(a1 + 32), (uint64_t)v62, v124);
      unsigned __int16 v12 = sub_100AC57FC((unsigned __int16 *)(a1 + 32));
      *(_DWORD *)long long buf = v12 & 1;
      sub_1000C0D88((unsigned __int16 *)(a1 + 632), buf);
      *(unsigned char *)(a1 + 616) = 1;
      uint64_t v13 = *(unsigned __int16 *)(a1 + 698);
      unint64_t v14 = *(unsigned int *)(a1 + 700);
      uint64_t v15 = *(unsigned __int16 *)(a1 + 696);
      if (v15 + v13 >= v14) {
        uint64_t v16 = *(unsigned int *)(a1 + 700);
      }
      else {
        uint64_t v16 = 0;
      }
      *(float *)(a1 + 696 + 4 * (v15 + v13 - v16) + 8) = *((float *)&v134 + 1) * 57.296;
      if (v14 <= v13)
      {
        unint64_t v17 = v15 + 1;
        if (v17 >= v14) {
          __int16 v18 = v14;
        }
        else {
          __int16 v18 = 0;
        }
        *(_WORD *)(a1 + 696) = v17 - v18;
      }
      else
      {
        LOWORD(v13) = v13 + 1;
        *(_WORD *)(a1 + 698) = v13;
      }
      uint64_t v5 = 0;
      *(unsigned char *)(a1 + 680) = 1;
      if (*(_DWORD *)(a1 + 636) != *(unsigned __int16 *)(a1 + 634) || v14 != (unsigned __int16)v13) {
        goto LABEL_45;
      }
      sub_1004184F0(a1 + 680);
      float v19 = *(float *)(a1 + 688);
      double v20 = sqrt(v19);
      BOOL v21 = v19 <= 0.0;
      double v22 = 0.0;
      if (!v21) {
        double v22 = v20;
      }
      double v36 = (float)(*(float *)&v134 * 57.296);
      double v37 = v22;
      unsigned __int8 v38 = v12 & 1;
      BOOL v39 = v12 > 0xFFu;
      uint64_t v23 = *(unsigned __int16 *)(a1 + 634);
      if (*(_WORD *)(a1 + 634))
      {
        unint64_t v24 = 0;
        int v25 = 0;
        do
          v25 += *(_DWORD *)sub_1000C0E4C((unsigned __int16 *)(a1 + 632), v24++);
        while (v23 != v24);
      }
      else
      {
        int v25 = 0;
      }
      int v40 = v25;
      sub_1001A34E0(a1 + 8, 0, (uint64_t)&v36);
      int v26 = *(unsigned __int8 *)(a1 + 24);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022DC388);
      }
      __int16 v27 = qword_1024191C8;
      if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
      {
        int v28 = *(_DWORD *)(a1 + 752);
        int v29 = *(_DWORD *)(a1 + 756);
        int v30 = *(_DWORD *)(a1 + 760);
        *(_DWORD *)long long buf = 67111168;
        *(_DWORD *)&uint8_t buf[4] = v26;
        __int16 v163 = 1024;
        int v164 = v28;
        __int16 v165 = 1024;
        int v166 = v29;
        __int16 v167 = 1024;
        int v168 = v30;
        __int16 v169 = 2048;
        double v170 = v37;
        __int16 v171 = 2048;
        double v172 = v36;
        __int16 v173 = 1024;
        int v174 = v38;
        __int16 v175 = 1024;
        int v176 = v40;
        __int16 v177 = 1024;
        BOOL v178 = v39;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "RowStop,state,%d,rowCounter,%d,headingCounter,%d,epochsInExit,%d,longStd,%f,shortStd,%f,isRow,%d,isRowHistory,%d,isRowUnf,%d", buf, 0x40u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_1022DC388);
        }
        int v32 = *(_DWORD *)(a1 + 752);
        int v33 = *(_DWORD *)(a1 + 756);
        int v34 = *(_DWORD *)(a1 + 760);
        int v44 = 67111168;
        int v45 = v26;
        __int16 v46 = 1024;
        int v47 = v32;
        __int16 v48 = 1024;
        int v49 = v33;
        __int16 v50 = 1024;
        int v51 = v34;
        __int16 v52 = 2048;
        double v53 = v37;
        __int16 v54 = 2048;
        double v55 = v36;
        __int16 v56 = 1024;
        int v57 = v38;
        __int16 v58 = 1024;
        int v59 = v40;
        __int16 v60 = 1024;
        BOOL v61 = v39;
        uint64_t v35 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLWorkoutPredictor_Type::WorkoutStopDetectionEvent CLRowingWorkoutStopModel::update(const CLWorkoutPredictorInputs &)", "%s\n", v35);
        if (v35 != (char *)buf) {
          free(v35);
        }
      }
      if (*(unsigned char *)(a1 + 24) == 4)
      {
        uint64_t v5 = 1;
        goto LABEL_45;
      }
    }
    else
    {
      sub_100134750(buf, "RowStop");
      sub_10111B644(a2, (uint64_t *)buf, (uint64_t)&__p);
      if (SBYTE1(v168) < 0) {
        operator delete(*(void **)buf);
      }
    }
    uint64_t v5 = 0;
  }
LABEL_45:
  if (__p)
  {
    double v42 = __p;
    operator delete(__p);
  }
  return v5;
}

void sub_100AC5588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100AC55E4(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(int *)(a2 + 20) <= 7)
  {
    *(_DWORD *)(result + 752) = 0;
    int v5 = *(_DWORD *)(result + 760) + 1;
    *(_DWORD *)(result + 760) = v5;
  }
  else
  {
    int v4 = *(_DWORD *)(result + 752);
    *(_DWORD *)(result + 752) = v4 + 1;
    int v5 = *(_DWORD *)(result + 760) + 1;
    *(_DWORD *)(result + 760) = v5;
    if (v4 >= 15)
    {
      double result = sub_1001A34E0(result + 8, 1, (uint64_t)&v7);
      int v5 = *(_DWORD *)(v3 + 760);
    }
  }
  if (v5 >= 118 && !*(_DWORD *)(a2 + 20) && !*(unsigned char *)(a2 + 17))
  {
    *(_DWORD *)(v3 + 764) = v5;
    return sub_1001A34E0(v3 + 8, 4, (uint64_t)&v6);
  }
  return result;
}

uint64_t sub_100AC5690(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 764);
  *(_DWORD *)(result + 764) = v2 + 1;
  double v3 = *(double *)(a2 + 8);
  if (v3 > 30.0)
  {
    int v4 = *(_DWORD *)(result + 756) + 1;
LABEL_3:
    *(_DWORD *)(result + 756) = v4;
    goto LABEL_9;
  }
  if (v3 < 15.0)
  {
    int v5 = *(_DWORD *)(result + 756);
    if (v5 <= 14)
    {
      if (v5 <= 1) {
        int v5 = 1;
      }
      int v4 = v5 - 1;
      goto LABEL_3;
    }
  }
LABEL_9:
  if (v2 >= 23 && (*(int *)(result + 756) > 15 || (v2 + 1) >= 0x2F) && !*(unsigned char *)(a2 + 16)) {
    return sub_1001A34E0(result + 8, 3, (uint64_t)&v6);
  }
  return result;
}

uint64_t sub_100AC5734(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 764);
  *(_DWORD *)(result + 764) = v2 + 1;
  if (v2 >= 58 && !*(unsigned char *)(a2 + 17)) {
    return sub_1001A34E0(result + 8, 4, (uint64_t)&v3);
  }
  return result;
}

unsigned __int16 *sub_100AC577C(unsigned __int16 *result, uint64_t a2, uint64_t a3)
{
  if (!result[1])
  {
    double v5 = *(double *)(a2 + 8);
LABEL_7:
    int v7 = *(_DWORD *)(a2 + 124);
    int v6 = *(_DWORD *)(a2 + 128);
    LODWORD(v8) = *(_DWORD *)(a2 + 112);
    DWORD1(v8) = v6;
    DWORD2(v8) = *(_DWORD *)(a2 + 136);
    HIDWORD(v8) = v7;
    uint64_t v9 = a3;
    double v10 = v5;
    return sub_100AC5AD0(result, &v8);
  }
  unint64_t v3 = result[1] + (unint64_t)*result - 1;
  unint64_t v4 = *((unsigned int *)result + 1);
  if (v3 < v4) {
    unint64_t v4 = 0;
  }
  double v5 = *(double *)(a2 + 8);
  if (*(double *)&result[16 * (v3 - v4) + 16] != v5) {
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_100AC57FC(unsigned __int16 *a1)
{
  int v1 = a1[1];
  if (*((_DWORD *)a1 + 1) != v1)
  {
    int v1 = 0;
    int v23 = 0;
    return v1 | (v23 << 8);
  }
  if (a1[1])
  {
    int v3 = 0;
    unint64_t v4 = 0;
    float v5 = 0.0;
    LOBYTE(v6) = 1;
    float v7 = 1.1755e-38;
    float v8 = 3.4028e38;
    LOBYTE(v9) = 1;
    LOBYTE(v10) = 1;
    float v11 = 3.4028e38;
    float v12 = 1.1755e-38;
    float v13 = 0.0;
    do
    {
      int v9 = v9 & (*(float *)(sub_100AC5C94(a1, v4) + 8) > 8.0);
      int v6 = v6 & (*(float *)(sub_100AC5C94(a1, v4) + 4) > 0.1);
      uint64_t v14 = sub_100AC5C94(a1, v4);
      float v15 = *(float *)(v14 + 4);
      if (v8 > v15) {
        float v8 = *(float *)(v14 + 4);
      }
      if (v7 < v15) {
        float v7 = *(float *)(v14 + 4);
      }
      float v13 = v13 + *(float *)sub_100AC5C94(a1, v4);
      unint64_t v16 = v4 + 1;
      uint64_t v17 = sub_100AC5C94(a1, v4);
      float v18 = *(float *)(v17 + 12);
      if (v11 > v18) {
        float v11 = *(float *)(v17 + 12);
      }
      if (v12 < v18) {
        float v12 = *(float *)(v17 + 12);
      }
      float v5 = v5 + *(float *)(sub_100AC5C94(a1, v4) + 12);
      v3 |= *(void *)(sub_100AC5C94(a1, v4) + 16) == 12;
      int v10 = v10 & (*(void *)(sub_100AC5C94(a1, v4) + 16) == 1);
      unint64_t v19 = a1[1];
      ++v4;
    }
    while (v16 < v19);
    BOOL v20 = 0;
    int v1 = v10 ^ 1;
    float v21 = v5 / (float)v16;
    if (v21 > 1.25 && v21 < 1.85) {
      BOOL v20 = (float)(v12 - v11) < 0.2;
    }
    BOOL v22 = fabsf(v13 / (float)v16) < 0.5;
    if (!v6) {
      goto LABEL_23;
    }
  }
  else
  {
    unint64_t v19 = 0;
    int v3 = 0;
    BOOL v20 = 0;
    BOOL v22 = 1;
    float v7 = 1.1755e-38;
    float v8 = 3.4028e38;
    int v9 = 1;
  }
  if ((float)(v7 - v8) < 0.2)
  {
    if ((v9 & v22 | v3)) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
LABEL_23:
  if ((v20 && v22) & v9 & 1) != 0 || (v3) {
    goto LABEL_26;
  }
LABEL_25:
  int v1 = 0;
LABEL_26:
  unint64_t v24 = v19 + *a1 - 1;
  unint64_t v25 = *((unsigned int *)a1 + 1);
  if (v24 < v25) {
    unint64_t v25 = 0;
  }
  int v26 = &a1[16 * (v24 - v25)];
  uint64_t v27 = *((void *)v26 + 3);
  BOOL v29 = *((float *)v26 + 3) > 0.1 && *((float *)v26 + 4) > 8.0 && fabsf(*((float *)v26 + 2)) < 0.5;
  if (v27 == 12) {
    BOOL v29 = 1;
  }
  int v23 = v27 != 1 && v29;
  return v1 | (v23 << 8);
}

unsigned __int16 *sub_100AC5AD0(unsigned __int16 *result, long long *a2)
{
  unint64_t v2 = *((unsigned int *)result + 1);
  unint64_t v3 = *result + (unint64_t)result[1];
  if (v3 < v2) {
    unint64_t v2 = 0;
  }
  unint64_t v4 = &result[16 * (v3 - v2)];
  long long v5 = *a2;
  *(_OWORD *)(v4 + 12) = a2[1];
  *(_OWORD *)(v4 + 4) = v5;
  unsigned int v6 = result[1];
  unint64_t v7 = *((unsigned int *)result + 1);
  if (v7 <= v6)
  {
    unint64_t v8 = *result + 1;
    if (v8 < v7) {
      LOWORD(v7) = 0;
    }
    void *result = v8 - v7;
  }
  else
  {
    result[1] = v6 + 1;
  }
  return result;
}

void *sub_100AC5B34(void *a1)
{
  *a1 = off_1022DC330;
  a1[21] = off_1022D4E20;
  unint64_t v2 = (void *)a1[26];
  if (v2)
  {
    a1[27] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_100AC5BA4(void *a1)
{
  *a1 = off_1022DC330;
  a1[21] = off_1022D4E20;
  unint64_t v2 = (void *)a1[26];
  if (v2)
  {
    a1[27] = v2;
    operator delete(v2);
  }

  operator delete();
}

void sub_100AC5C34(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_100AC5C64(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100AC5C94(unsigned __int16 *a1, unint64_t a2)
{
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022DC3A8);
    }
    unint64_t v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)long long buf = 134218240;
      unint64_t v11 = a2;
      __int16 v12 = 1024;
      int v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022DC3A8);
      }
      int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "const T &CMQueue<CLRowingWorkoutStopModel::RowMotionDetector::Features>::operator[](const size_t) const [T = CLRowingWorkoutStopModel::RowMotionDetector::Features]", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0;
  }
  return (uint64_t)&a1[16 * (v4 - v5) + 4];
}

double sub_100AC5E90@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000DF634((_DWORD *)a2, a1);
  if (*(unsigned char *)(a1 + 6376) && (*(int *)(a1 + 6400) > 0 || *(int *)(a1 + 6404) > 0 || *(int *)(a1 + 6408) >= 1))
  {
    sub_100AC5F38(a1, (uint64_t)v6);
    long long v5 = v6[1];
    *(_OWORD *)(a2 + 1872) = v6[0];
    *(_OWORD *)(a2 + 1888) = v5;
    *(_OWORD *)(a2 + 1904) = v7[0];
    double result = *(double *)((char *)v7 + 9);
    *(_OWORD *)(a2 + 1913) = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

void sub_100AC5F24(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

void sub_100AC5F38(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1 + 1428;
  double v5 = *(double *)(a1 + 3404);
  double v6 = *(double *)(a1 + 6384);
  unint64_t v7 = (_DWORD *)(a1 + 5968);
  if (!sub_1006D30E0((_DWORD *)(a1 + 5968)) && !sub_1006D3124(v7))
  {
LABEL_13:
    char v18 = 0;
    *(unsigned char *)a2 = 0;
    goto LABEL_14;
  }
  int v8 = (unsigned char *)(a1 + 6377);
  double v9 = v6 - v5;
  if (*(double *)v4 >= 0.0 || *v8) {
    goto LABEL_5;
  }
  BOOL v10 = 0;
  int v19 = *(_DWORD *)(a1 + 6372);
  if (v19 != 1 && v19 != 6)
  {
    if (*(void *)(a1 + 1128) < 5uLL)
    {
LABEL_5:
      BOOL v10 = 0;
      goto LABEL_6;
    }
    double v20 = *(double *)(v4 + 1920);
    BOOL v21 = v20 >= 0.0;
    if (v20 >= 600.0) {
      BOOL v21 = 0;
    }
    BOOL v10 = v9 < 12.0 && v21;
  }
LABEL_6:
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022DC3C8);
  }
  unint64_t v11 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v12 = *(double *)v4 < 0.0;
    int v13 = *v8;
    int v14 = *(_DWORD *)(a1 + 6372);
    uint64_t v15 = *(void *)(a1 + 1128);
    uint64_t v16 = *(void *)(v4 + 1920);
    *(_DWORD *)long long buf = 67241728;
    BOOL v24 = v10;
    __int16 v25 = 1026;
    BOOL v26 = v12;
    __int16 v27 = 1026;
    int v28 = v13;
    __int16 v29 = 1026;
    int v30 = v14;
    __int16 v31 = 2050;
    uint64_t v32 = v15;
    __int16 v33 = 2050;
    uint64_t v34 = v16;
    __int16 v35 = 1026;
    int v36 = (int)v9;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "WifiFlow, cpitile, %{public}d, didfix, %{public}d, battsaver, %{public}d, sigenv, %{public}d, aps, %{public}ld, hacc, %{public}0.1f, scanAge, %{public}d", buf, 0x34u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022DC3C8);
    }
    BOOL v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static std::optional<Decisions::WifiTileDownloadRequest> CL::Wifi1::Policies::TileRequest::HandleEvent::defaultDecisionLogic(const Input &)", "%s\n", v22);
    if (v22 != (char *)buf) {
      free(v22);
    }
  }
  if (!v10) {
    goto LABEL_13;
  }
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  char v18 = 1;
  *(_WORD *)a2 = 1;
  *(unsigned char *)(a2 + 2) = 1;
  *(void *)(a2 + 8) = 0xBFF0000000000000;
  *(_DWORD *)(a2 + 16) = 3;
  *(CFAbsoluteTime *)(a2 + 24) = Current;
  *(_WORD *)(a2 + 32) = 1;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(v4 + 1904);
LABEL_14:
  *(unsigned char *)(a2 + 56) = v18;
}

double sub_100AC629C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000DF634((_DWORD *)a2, a1);
  if (*(unsigned char *)(a1 + 6376))
  {
    if (*(unsigned char *)(a1 + 809))
    {
      sub_100AC5F38(a1, (uint64_t)v6);
      long long v5 = v6[1];
      *(_OWORD *)(a2 + 1872) = v6[0];
      *(_OWORD *)(a2 + 1888) = v5;
      *(_OWORD *)(a2 + 1904) = v7[0];
      double result = *(double *)((char *)v7 + 9);
      *(_OWORD *)(a2 + 1913) = *(_OWORD *)((char *)v7 + 9);
    }
  }
  return result;
}

void sub_100AC6314(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

double sub_100AC6328@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000DF634((_DWORD *)a2, a1);
  if (*(unsigned char *)(a1 + 6376) && (*(int *)(a1 + 6400) > 0 || *(int *)(a1 + 6404) > 0 || *(int *)(a1 + 6408) >= 1))
  {
    if (*(unsigned char *)(a1 + 808))
    {
      sub_100AC5F38(a1, (uint64_t)v6);
      long long v5 = v6[1];
      *(_OWORD *)(a2 + 1872) = v6[0];
      *(_OWORD *)(a2 + 1888) = v5;
      *(_OWORD *)(a2 + 1904) = v7[0];
      double result = *(double *)((char *)v7 + 9);
      *(_OWORD *)(a2 + 1913) = *(_OWORD *)((char *)v7 + 9);
    }
  }
  return result;
}

void sub_100AC63C4(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

void sub_100AC63D8(id a1)
{
  qword_1024193B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_100AC64A8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_100AC6560(_Unwind_Exception *a1)
{
}

void sub_100AC6578()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    *uint64_t v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_100AC6620(_Unwind_Exception *a1)
{
}

void sub_100AC6940(float *a1@<X0>, float *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, float *a5@<X8>)
{
  uint64_t v53 = a3;
  uint64_t v54 = a4;
  *((void *)a5 + 1) = 0;
  *((void *)a5 + 2) = 0;
  *(void *)a5 = 0;
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 3);
  if (v6 >= 0x42) {
    sub_101A7D5F8();
  }
  int v8 = a1;
  std::string __p = 0;
  int v51 = 0;
  __int16 v52 = 0;
  unint64_t v9 = (v6 - 1) * v6;
  if (v9 <= 1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = v9;
  }
  sub_10031FC98(&__p, v10);
  unint64_t v46 = v10;
  if (a2 == v8)
  {
    BOOL v48 = 0;
  }
  else
  {
    char v55 = 0;
    BOOL v12 = sub_100AC6DCC(v8, a2);
    float v11 = *v13 - *v12;
    BOOL v48 = v11 >= 3.0;
  }
  unint64_t v14 = 0;
  uint64_t v15 = v8 + 6;
  int v47 = v8;
  int v49 = v8 + 6;
  do
  {
    if (BYTE4(v54))
    {
      float v11 = *(float *)sub_1004E4930((uint64_t)&v53, v14);
LABEL_11:
      a5[v14] = v11;
      goto LABEL_39;
    }
    if (v48)
    {
      uint64_t v16 = (float *)__p;
      int v51 = (float *)__p;
      if (v8 == a2)
      {
        int v51 = (float *)__p;
        goto LABEL_60;
      }
      if (v15 != a2)
      {
        uint64_t v17 = v15;
        char v18 = v8;
        do
        {
          int v19 = v18;
          char v18 = v17;
          double v20 = v17;
          do
          {
            float v21 = *v19;
            float v22 = *v20;
            float v11 = vabds_f32(*v19, *v20);
            if (v11 > 0.25)
            {
              float v23 = sub_1004E30E4((uint64_t)(v19 + 1), v14);
              float v11 = v23 - sub_1004E30E4((uint64_t)(v20 + 1), v14);
              BOOL v24 = v51;
              float v25 = v11 / (float)(v21 - v22);
              if (v51 >= (float *)v52)
              {
                BOOL v26 = (float *)__p;
                uint64_t v27 = ((char *)v51 - (unsigned char *)__p) >> 2;
                unint64_t v28 = v27 + 1;
                if ((unint64_t)(v27 + 1) >> 62) {
                  sub_1001D7FD4();
                }
                uint64_t v29 = v52 - (unsigned char *)__p;
                if ((v52 - (unsigned char *)__p) >> 1 > v28) {
                  unint64_t v28 = v29 >> 1;
                }
                if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v30 = v28;
                }
                if (v30)
                {
                  __int16 v31 = (char *)sub_10017EA34((uint64_t)&v52, v30);
                  BOOL v26 = (float *)__p;
                  BOOL v24 = v51;
                }
                else
                {
                  __int16 v31 = 0;
                }
                uint64_t v32 = (float *)&v31[4 * v27];
                *uint64_t v32 = v25;
                uint64_t v16 = v32 + 1;
                while (v24 != v26)
                {
                  float v33 = *--v24;
                  float v11 = v33;
                  *--uint64_t v32 = v33;
                }
                std::string __p = v32;
                int v51 = v16;
                __int16 v52 = &v31[4 * v30];
                if (v26) {
                  operator delete(v26);
                }
              }
              else
              {
                *int v51 = v25;
                uint64_t v16 = v24 + 1;
              }
              int v51 = v16;
            }
            v20 += 6;
          }
          while (v20 != a2);
          uint64_t v17 = v18 + 6;
        }
        while (v18 + 6 != a2);
      }
      uint64_t v15 = v49;
      int v8 = v47;
      if (v16 != __p)
      {
        float v11 = sub_1004EF270((float *)__p, v16, v11);
        goto LABEL_11;
      }
    }
LABEL_39:
    int v51 = (float *)__p;
    if (v8 != a2)
    {
      uint64_t v34 = v8;
      do
      {
        float v11 = sub_1004E30E4((uint64_t)(v34 + 1), v14);
        float v35 = v11 - (float)(a5[v14] * *v34);
        int v36 = v51;
        if (v51 >= (float *)v52)
        {
          unsigned __int8 v38 = (float *)__p;
          uint64_t v39 = ((char *)v51 - (unsigned char *)__p) >> 2;
          unint64_t v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 62) {
            sub_1001D7FD4();
          }
          uint64_t v41 = v52 - (unsigned char *)__p;
          if ((v52 - (unsigned char *)__p) >> 1 > v40) {
            unint64_t v40 = v41 >> 1;
          }
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v42 = v40;
          }
          if (v42)
          {
            __int16 v43 = (char *)sub_10017EA34((uint64_t)&v52, v42);
            unsigned __int8 v38 = (float *)__p;
            int v36 = v51;
          }
          else
          {
            __int16 v43 = 0;
          }
          int v44 = (float *)&v43[4 * v39];
          float *v44 = v35;
          double v37 = v44 + 1;
          while (v36 != v38)
          {
            float v45 = *--v36;
            float v11 = v45;
            *--int v44 = v45;
          }
          std::string __p = v44;
          int v51 = v37;
          __int16 v52 = &v43[4 * v42];
          if (v38) {
            operator delete(v38);
          }
        }
        else
        {
          *int v51 = v35;
          double v37 = v36 + 1;
        }
        int v51 = v37;
        v34 += 6;
      }
      while (v34 != a2);
      uint64_t v15 = v49;
      if (v37 != __p)
      {
        float v11 = sub_1004EF270((float *)__p, v37, v11);
        a5[v14 + 3] = v11;
      }
    }
LABEL_60:
    ++v14;
  }
  while (v14 != 3);
  if (v46 == (v52 - (unsigned char *)__p) >> 2)
  {
    if (__p)
    {
      int v51 = (float *)__p;
      operator delete(__p);
    }
  }
  else
  {
    sub_101A7D7A8();
    abort_report_np();
    __break(1u);
  }
}

void sub_100AC6D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AC6D74(uint64_t result, uint64_t a2, float a3)
{
  for (uint64_t i = 0; i != 12; i += 4)
    *(float *)(result + i) = *(float *)(a2 + i + 12) + (float)(a3 * *(float *)(a2 + i));
  return result;
}

void sub_100AC6D9C(id a1)
{
  off_1024190B8 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

float *sub_100AC6DCC(float *result, float *a2)
{
  unint64_t v2 = result;
  if (result != a2 && result + 6 != a2)
  {
    float v4 = result[6];
    float v5 = *result;
    if (v4 < *result) {
      result += 6;
    }
    unint64_t v6 = v4 >= *v2 ? v2 + 6 : v2;
    unint64_t v7 = v2 + 12;
    if (v7 != a2)
    {
      if (v4 >= v5) {
        float v4 = v5;
      }
      while (v7 + 6 != a2)
      {
        float v8 = v7[6];
        float v9 = *v7;
        if (v8 >= *v7)
        {
          if (v9 < v4)
          {
            float v4 = *v7;
            double result = v7;
          }
          if (v8 >= *v6) {
            unint64_t v6 = v7 + 6;
          }
        }
        else
        {
          float v4 = *result;
          if (v8 < *result)
          {
            float v4 = v7[6];
            double result = v7 + 6;
          }
          if (v9 >= *v6) {
            unint64_t v6 = v7;
          }
        }
        v7 += 12;
        if (v7 == a2) {
          return result;
        }
      }
      if (*v7 < *result) {
        return v7;
      }
    }
  }
  return result;
}

BOOL sub_100AC6EA8()
{
  uint64_t v1 = off_1024190B8;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

uint64_t sub_100AC6EC8(uint64_t a1)
{
  __chkstk_darwin(a1);
  unint64_t v2 = v1;
  long long v57 = 0uLL;
  uint64_t v58 = 0;
  float v33 = 0;
  uint64_t v34 = 0;
  float v35 = 0;
  sub_1007F0828(&v33, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v1[1] - *v1) >> 4));
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (*v2 == v4)
  {
    unsigned int v5 = 0;
LABEL_26:
    uint64_t v54 = 0x300000028;
    *(_OWORD *)&v53[8] = xmmword_101D71120;
    *(void *)uint64_t v53 = off_1022DC458;
    char v55 = &v56;
    if (v5 > 0x28)
    {
      sub_1001DCFA4(&v32, v5 - 40);
      uint64_t v22 = v5;
      float v23 = (double *)(*v2 + 64);
      double v24 = 0.0;
      do
      {
        double v25 = *v23;
        v23 += 14;
        double v24 = v24 + v25;
        --v22;
      }
      while (v22);
      sub_100AC86EC(&v44);
    }
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022DC428);
    }
    double v20 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "CLRS,CLCF,No corners found, input segment too short.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022DC428);
      }
      LOWORD(v44) = 0;
      float v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLSmootherCornerFinder::findCorners(const std::vector<swan::RouteSmootherEpoch> &, std::vector<int> &)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
    uint64_t v29 = 1;
  }
  else
  {
    unsigned int v5 = 0;
    float64x2_t v31 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
    while (1)
    {
      *(float64x2_t *)uint64_t v53 = vmulq_f64(*(float64x2_t *)(v3 + 8), v31);
      *(void *)&v53[16] = *(void *)(v3 + 32);
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v37 = 0;
      if (cnnavigation::LLAToECEF()) {
        break;
      }
      if (!v5)
      {
        long long v57 = *(_OWORD *)__p;
        uint64_t v58 = v37;
      }
      uint64_t v51 = 0;
      uint64_t v50 = 0;
      uint64_t v52 = 0;
      if (cnnavigation::ECEFToENU())
      {
        if (qword_102419410 != -1) {
          dispatch_once(&qword_102419410, &stru_1022DC428);
        }
        unint64_t v28 = qword_102419418;
        if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 134218496;
          uint64_t v39 = __p[0];
          __int16 v40 = 2048;
          uint64_t v41 = __p[1];
          __int16 v42 = 2048;
          uint64_t v43 = v37;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "CLRS,CLCF,Could not convert ECEF Coordinate %.3lf,%.3lf,%.3lf to ENU", buf, 0x20u);
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_52;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419410 != -1) {
          dispatch_once(&qword_102419410, &stru_1022DC428);
        }
        int v44 = 134218496;
        float v45 = __p[0];
        __int16 v46 = 2048;
        int v47 = __p[1];
        __int16 v48 = 2048;
        uint64_t v49 = v37;
        uint64_t v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLSmootherCornerFinder::findCorners(const std::vector<swan::RouteSmootherEpoch> &, std::vector<int> &)", "%s\n", v27);
LABEL_60:
        if (v27 != (char *)buf) {
          free(v27);
        }
        goto LABEL_52;
      }
      uint64_t v6 = v50;
      uint64_t v7 = v51;
      uint64_t v8 = v52;
      float v9 = v34;
      if (v34 >= v35)
      {
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v34 - (unsigned char *)v33) >> 3);
        unint64_t v12 = v11 + 1;
        if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_1001D7FD4();
        }
        if (0x5555555555555556 * ((v35 - (unsigned char *)v33) >> 3) > v12) {
          unint64_t v12 = 0x5555555555555556 * ((v35 - (unsigned char *)v33) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v35 - (unsigned char *)v33) >> 3) >= 0x555555555555555) {
          unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v13) {
          unint64_t v14 = (char *)sub_1000DA5D8((uint64_t)&v35, v13);
        }
        else {
          unint64_t v14 = 0;
        }
        uint64_t v15 = &v14[24 * v11];
        *(void *)uint64_t v15 = v6;
        *((void *)v15 + 1) = v7;
        *((void *)v15 + 2) = v8;
        uint64_t v17 = (char *)v33;
        uint64_t v16 = v34;
        char v18 = v15;
        if (v34 != v33)
        {
          do
          {
            long long v19 = *(_OWORD *)(v16 - 24);
            *((void *)v18 - 1) = *((void *)v16 - 1);
            *(_OWORD *)(v18 - 24) = v19;
            v18 -= 24;
            v16 -= 24;
          }
          while (v16 != v17);
          uint64_t v16 = (char *)v33;
        }
        unint64_t v10 = v15 + 24;
        float v33 = v18;
        uint64_t v34 = v15 + 24;
        float v35 = &v14[24 * v13];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *(void *)uint64_t v34 = v50;
        *((void *)v9 + 1) = v7;
        unint64_t v10 = v9 + 24;
        *((void *)v9 + 2) = v8;
      }
      ++v5;
      uint64_t v34 = v10;
      v3 += 112;
      if (v3 == v4) {
        goto LABEL_26;
      }
    }
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022DC428);
    }
    BOOL v26 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134218240;
      uint64_t v39 = *(void **)v53;
      __int16 v40 = 2048;
      uint64_t v41 = *(void **)&v53[8];
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "CLRS,CLCF,Could not convert LLA Coordinate %.7lf,%.7lf to ECEF", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022DC428);
      }
      int v44 = 134218240;
      float v45 = *(void **)v53;
      __int16 v46 = 2048;
      int v47 = *(void **)&v53[8];
      uint64_t v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLSmootherCornerFinder::findCorners(const std::vector<swan::RouteSmootherEpoch> &, std::vector<int> &)", "%s\n", v27);
      goto LABEL_60;
    }
LABEL_52:
    uint64_t v29 = 0;
  }
  if (v33)
  {
    uint64_t v34 = (char *)v33;
    operator delete(v33);
  }
  return v29;
}

void sub_100AC7D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL sub_100AC7DE8(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(_DWORD *)(a2 + 8) < 0x29u && *(_DWORD *)(a2 + 12) < 4u;
  if (v3)
  {
    *(unsigned char *)(a1 + 3296) = 0;
    sub_100063168(a1, a2);
    sub_100062B3C((_DWORD *)(a1 + 1000), 0, 0);
    sub_100062B3C((_DWORD *)(a1 + 1064), 0, 0);
    sub_100062B3C((_DWORD *)(a1 + 1128), 0, 0);
    sub_100062B3C((_DWORD *)(a1 + 1176), 0, 0);
    sub_100062B3C((_DWORD *)(a1 + 2176), 0, 0);
    sub_100062B3C((_DWORD *)(a1 + 2288), 0, 0);
    *(void *)(a1 + 3288) = *(void *)(a1 + 8);
  }
  return v3;
}

_DWORD *sub_100AC7E94(_DWORD *result)
{
  if (result[2]) {
    BOOL v1 = result[3] == 0;
  }
  else {
    BOOL v1 = 1;
  }
  if (!v1)
  {
    unint64_t v2 = result;
    sub_100AC8F88(result);
    sub_10018865C(v2 + 572, v2[822], v2[823]);
    if (v2[822])
    {
      unsigned int v3 = 0;
      do
      {
        sub_100AC9188(":", (uint64_t)v2, v3, (uint64_t)v10);
        uint64_t v7 = 0x300000001;
        unsigned int v5 = off_1022DC4A0;
        long long v6 = xmmword_101D71140;
        uint64_t v8 = &v9;
        sub_100AC9C3C((uint64_t)v10, (uint64_t)(v2 + 250), (uint64_t)&v5);
        sub_100AC9188(":", (uint64_t)(v2 + 572), v3, (uint64_t)v4);
        sub_100AC926C((uint64_t)v4, (uint64_t)&v5);
        ++v3;
      }
      while (v3 < v2[822]);
    }
    sub_100ACA114((uint64_t)v10, v2[574], v2[575]);
    sub_100ACA1E0((uint64_t)v4);
  }
  return result;
}

void sub_100AC802C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100ACA488((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_100AC8050(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 3296)) {
    return NAN;
  }
  if (!*(_DWORD *)(a1 + 3288)) {
    return 0.0;
  }
  unsigned int v2 = 0;
  double v3 = 0.0;
  do
  {
    sub_100ACA790(a1, v2);
    double v3 = v3 + v4;
    ++v2;
  }
  while (v2 < *(_DWORD *)(a1 + 3288));
  return v3;
}

uint64_t sub_100AC80C8@<X0>(char *__s1@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X8>)
{
  if (strcmp(__s1, ":")) {
    sub_101A7D948();
  }
  signed int v7 = *(_DWORD *)(a2 + 12);
  sub_100ACB5C8((uint64_t)v10, v7, 1u);
  if (v7 >= 1)
  {
    for (unsigned int i = 0; i != v7; ++i)
      *(_DWORD *)sub_100AC9620((uint64_t)v10, i) = i;
  }
  return sub_100ACB6CC(a4, a2, a3, (uint64_t)v10);
}

void *sub_100AC8170(void *result)
{
  void *result = off_1022DC6A8;
  return result;
}

BOOL sub_100AC8190(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(_DWORD *)(a2 + 8) < 0x15u && *(_DWORD *)(a2 + 12) < 4u;
  if (v3)
  {
    *(unsigned char *)(a1 + 5048) = 0;
    sub_100063168(a1, a2);
    sub_100062B3C((_DWORD *)(a1 + 520), 0, 0);
    sub_100062B3C((_DWORD *)(a1 + 584), 0, 0);
    sub_100062B3C((_DWORD *)(a1 + 648), 0, 0);
    sub_100062B3C((_DWORD *)(a1 + 3888), 0, 0);
    sub_100062B3C((_DWORD *)(a1 + 4408), 0, 0);
    sub_100062B3C((_DWORD *)(a1 + 4520), 0, 0);
    *(void *)(a1 + 5040) = *(void *)(a1 + 8);
  }
  return v3;
}

_DWORD *sub_100AC8248(_DWORD *result)
{
  if (result[2]) {
    BOOL v1 = result[3] == 0;
  }
  else {
    BOOL v1 = 1;
  }
  if (!v1)
  {
    unsigned int v2 = result;
    sub_100ACB974(result);
    sub_10018865C(v2 + 1130, v2[1260], v2[1261]);
    if (v2[1260])
    {
      unsigned int v3 = 0;
      do
      {
        sub_100AC9188(":", (uint64_t)v2, v3, (uint64_t)v10);
        uint64_t v7 = 0x300000001;
        unsigned int v5 = off_1022DC4A0;
        long long v6 = xmmword_101D71140;
        uint64_t v8 = &v9;
        sub_100AC9C3C((uint64_t)v10, (uint64_t)(v2 + 130), (uint64_t)&v5);
        sub_100AC9188(":", (uint64_t)(v2 + 1130), v3, (uint64_t)v4);
        sub_100AC926C((uint64_t)v4, (uint64_t)&v5);
        ++v3;
      }
      while (v3 < v2[1260]);
    }
    sub_100ACBB78((uint64_t)v10, v2[1132], v2[1133]);
    sub_100ACBC44((uint64_t)v4);
  }
  return result;
}

void sub_100AC83EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100ACBE64((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_100AC8410(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 5048)) {
    return NAN;
  }
  if (!*(_DWORD *)(a1 + 5040)) {
    return 0.0;
  }
  unsigned int v2 = 0;
  double v3 = 0.0;
  do
  {
    sub_100ACBEE0(a1, v2);
    double v3 = v3 + v4;
    ++v2;
  }
  while (v2 < *(_DWORD *)(a1 + 5040));
  return v3;
}

void *sub_100AC848C(void *result)
{
  result[81] = off_1022DC6A8;
  result[66] = off_1022DC6A8;
  void *result = off_1022CAFC0;
  return result;
}

void *sub_100AC84EC(void *result)
{
  result[565] = off_1022CAFC0;
  result[551] = off_1022CAFC0;
  result[486] = off_1022CAFC0;
  result[81] = off_1022CAFC0;
  result[73] = off_1022CAFC0;
  result[65] = off_1022CAFC0;
  void *result = off_1022CAFC0;
  return result;
}

void *sub_100AC85D4(void *a1)
{
  a1[286] = off_1022CAFC0;
  a1[272] = off_1022CAFC0;
  a1[147] = off_1022CAFC0;
  sub_100AC8C50(a1 + 141);
  a1[133] = off_1022CAFC0;
  a1[125] = off_1022CAFC0;
  *a1 = off_1022CAFC0;
  return a1;
}

void sub_100AC86BC(id a1)
{
  qword_102419418 = (uint64_t)os_log_create("com.apple.locationd.Position", "RouteSmoother");
}

void sub_100AC86EC(void *a1)
{
  a1[3] = 0x300000028;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022DC458;
  a1[4] = a1 + 5;
  a1[128] = 0x300000001;
  a1[125] = off_1022DC4A0;
  a1[127] = 0;
  a1[126] = 0;
  a1[129] = a1 + 130;
  a1[136] = 0x100000003;
  a1[133] = off_1022DC4E8;
  a1[135] = 0;
  a1[134] = 0;
  a1[137] = a1 + 138;
  sub_100AC89B4((uint64_t)(a1 + 141));
}

void sub_100AC8884(_Unwind_Exception *a1)
{
  v1[133] = off_1022CAFC0;
  v1[125] = off_1022CAFC0;
  void *v1 = off_1022CAFC0;
  _Unwind_Resume(a1);
}

void sub_100AC88E0(void *a1)
{
  *a1 = off_1022CAFC0;
  operator delete();
}

void sub_100AC8910(uint64_t a1)
{
  sub_10082938C(a1, v1);
}

void sub_100AC8960(void *a1)
{
  *a1 = off_1022CAFC0;
  operator delete();
}

void sub_100AC8990(uint64_t a1)
{
  sub_10082938C(a1, v1);
}

void sub_100AC89B4(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x2800000028;
  *(void *)a1 = off_1022DC530;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_101D71160;
  sub_100AC8AC8();
}

void sub_100AC8A18(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[5];
  v1[5] = 0;
  if (v3) {
    operator delete[]();
  }
  void *v1 = off_1022CAFC0;
  _Unwind_Resume(exception_object);
}

void sub_100AC8A60(void *a1)
{
  sub_100AC8C50(a1);

  operator delete();
}

void sub_100AC8A98()
{
}

void sub_100AC8AC8()
{
}

void sub_100AC8B38()
{
}

void sub_100AC8BAC()
{
}

void sub_100AC8BD0(void *a1)
{
  *a1 = off_1022CAFC0;
  operator delete();
}

void sub_100AC8C00(uint64_t a1)
{
  sub_10082938C(a1, v1);
}

void *sub_100AC8C50(void *a1)
{
  *a1 = off_1022DC530;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    operator delete[]();
  }
  *a1 = off_1022CAFC0;
  return a1;
}

double sub_100AC8CCC(uint64_t a1)
{
  *(void *)&double result = 0x300000014;
  *(void *)(a1 + 24) = 0x300000014;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_1022DC5C0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)(a1 + 544) = 0x300000001;
  *(void *)(a1 + 520) = off_1022DC4A0;
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 552) = a1 + 560;
  *(void *)(a1 + 608) = 0x100000003;
  *(void *)(a1 + 584) = off_1022DC4E8;
  *(void *)(a1 + 600) = 0;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 616) = a1 + 624;
  *(void *)(a1 + 672) = 0x1400000014;
  *(void *)(a1 + 648) = off_1022DC608;
  *(_OWORD *)(a1 + 656) = xmmword_101D71170;
  *(void *)(a1 + 680) = a1 + 688;
  *(void *)(a1 + 3912) = 0x300000014;
  *(void *)(a1 + 3888) = off_1022DC5C0;
  *(_OWORD *)(a1 + 3896) = xmmword_101D71180;
  *(void *)(a1 + 3920) = a1 + 3928;
  *(void *)(a1 + 4432) = 0x300000003;
  *(void *)(a1 + 4408) = off_1022DC578;
  *(_OWORD *)(a1 + 4416) = xmmword_101D71150;
  *(void *)(a1 + 4440) = a1 + 4448;
  *(void *)(a1 + 4544) = 0x300000014;
  *(void *)(a1 + 4520) = off_1022DC5C0;
  *(void *)(a1 + 4528) = 0;
  *(void *)(a1 + 4536) = 0;
  *(void *)(a1 + 4552) = a1 + 4560;
  *(void *)(a1 + 5040) = 0;
  *(unsigned char *)(a1 + 5048) = 0;
  return result;
}

void sub_100AC8E80(void *a1)
{
  *a1 = off_1022CAFC0;
  operator delete();
}

void sub_100AC8EB0(uint64_t a1)
{
  sub_10082938C(a1, v1);
}

void sub_100AC8F00(void *a1)
{
  *a1 = off_1022CAFC0;
  operator delete();
}

void sub_100AC8F30(uint64_t a1)
{
  sub_10082938C(a1, v1);
}

void sub_100AC8F88(_DWORD *a1)
{
  if (a1[2]) {
    BOOL v2 = a1[3] == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    void v20[3] = 0x300000001;
    v20[0] = off_1022DC4A0;
    v20[1] = 0;
    void v20[2] = 0;
    v20[4] = &v21;
    sub_100063168((uint64_t)(a1 + 250), (uint64_t)v20);
  }
  else
  {
    sub_100AC9188(":", (uint64_t)a1, 0, (uint64_t)v20);
    sub_100063168((uint64_t)(a1 + 250), (uint64_t)v20);
    if (a1[822] >= 2u)
    {
      int v3 = 1;
      do
      {
        unsigned int v4 = v3 + 1;
        sub_100AC9188(":", (uint64_t)a1, v3, (uint64_t)v20);
        uint64_t v7 = 0x300000001;
        unsigned int v5 = off_1022DC4A0;
        long long v6 = xmmword_101D71140;
        uint64_t v8 = &v9;
        sub_100AC9C3C((uint64_t)v20, (uint64_t)(a1 + 250), (uint64_t)&v5);
        uint64_t v12 = 0x300000001;
        unint64_t v10 = off_1022DC4A0;
        long long v11 = xmmword_101D71140;
        unint64_t v13 = &v14;
        sub_100061AC4((uint64_t)&v5, (uint64_t)&v10, 1.0 / (double)v4);
        uint64_t v17 = 0x300000001;
        uint64_t v15 = off_1022DC4A0;
        long long v16 = xmmword_101D71140;
        char v18 = &v19;
        sub_100AC9B3C((uint64_t)(a1 + 250), (uint64_t)&v10, (uint64_t)&v15);
        sub_100063168((uint64_t)(a1 + 250), (uint64_t)&v15);
        int v3 = v4;
      }
      while (v4 < a1[822]);
    }
  }
}

uint64_t sub_100AC9188@<X0>(char *__s1@<X2>, uint64_t a2@<X0>, int a3@<W1>, uint64_t a4@<X8>)
{
  if (strcmp(__s1, ":")) {
    sub_101A7DB84();
  }
  uint64_t v14 = 0x100000001;
  uint64_t v12 = off_1022DC650;
  *(void *)&long long v7 = 0x100000001;
  *((void *)&v7 + 1) = 0x100000001;
  long long v13 = v7;
  uint64_t v15 = &v16;
  *(_DWORD *)sub_100AC9620((uint64_t)&v12, 0) = a3;
  unsigned int v8 = *(_DWORD *)(a2 + 12);
  sub_100AC965C((uint64_t)v11, v8, 1u);
  if (v8)
  {
    for (unsigned int i = 0; i != v8; ++i)
      *(_DWORD *)sub_100AC9620((uint64_t)v11, i) = i;
  }
  return sub_100AC97A0(a4, a2, (uint64_t)&v12, (uint64_t)v11);
}

uint64_t sub_100AC926C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != *(_DWORD *)(a2 + 8)) {
    sub_101A7DBDC();
  }
  uint64_t v5 = *(unsigned int *)(a1 + 12);
  if (v5 != *(_DWORD *)(a2 + 12)) {
    sub_101A7DBB0();
  }
  if (v5)
  {
    int v6 = 0;
    for (uint64_t i = 0; i != v5; ++i)
    {
      if (v2)
      {
        for (uint64_t j = 0; j != v2; ++j)
        {
          uint64_t v9 = *(void *)(*(void *)(a2 + 32) + 8 * (v6 + j));
          *(void *)sub_100AC99CC(*(void *)(a1 + 64), *(_DWORD *)(*(void *)(a1 + 104) + 4 * j), *(_DWORD *)(*(void *)(a1 + 152) + 4 * i)) = v9;
          *(void *)sub_10004DF44(a1, j, i) = v9;
        }
      }
      v6 += v2;
    }
  }
  return a1;
}

void *sub_100AC9348(void *result)
{
  result[15] = off_1022DC6A8;
  result[9] = off_1022DC6A8;
  void *result = off_1022CAFC0;
  return result;
}

uint64_t sub_100AC93A8@<X0>(char *__s1@<X1>, uint64_t a2@<X0>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (strcmp(__s1, ":")) {
    sub_101A7DC08();
  }
  unsigned int v7 = *(_DWORD *)(a2 + 8);
  sub_100AC965C((uint64_t)v16, v7, 1u);
  if (v7)
  {
    for (unsigned int i = 0; i != v7; ++i)
      *(_DWORD *)sub_100AC9620((uint64_t)v16, i) = i;
  }
  uint64_t v13 = 0x100000001;
  long long v11 = off_1022DC650;
  *(void *)&long long v9 = 0x100000001;
  *((void *)&v9 + 1) = 0x100000001;
  long long v12 = v9;
  uint64_t v14 = &v15;
  *(_DWORD *)sub_100AC9620((uint64_t)&v11, 0) = a3;
  return sub_100ACA504(a4, a2, (uint64_t)v16, (uint64_t)&v11);
}

void *sub_100AC9498(void *result)
{
  result[16] = off_1022DC6A8;
  result[9] = off_1022DC6A8;
  void *result = off_1022CAFC0;
  return result;
}

void sub_100AC94F8(void *a1)
{
  *a1 = off_1022DC6A8;
  operator delete();
}

void sub_100AC9528(uint64_t a1)
{
  sub_100AC954C(a1, &v1);
}

void sub_100AC954C(uint64_t a1, char *a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      if (!a2) {
        sub_101A70314();
      }
      int v6 = v4 + v2 - *(_DWORD *)(a1 + 20);
      if (v6 <= 0) {
        sub_101A70340();
      }
      bzero(a2, *(unsigned int *)(a1 + 16));
      int v7 = *(_DWORD *)(a1 + 16);
      if (v7 >= 3)
      {
        uint64_t v8 = (v7 - 1);
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v10 = 1;
        do
        {
          long long v11 = &a2[v10];
          if (!a2[v10])
          {
            int v12 = *(_DWORD *)(v9 + 4 * v10);
            int v13 = v10;
            do
            {
              int v13 = v13 * v6 % (int)v8;
              int v14 = *(_DWORD *)(v9 + 4 * v13);
              *(_DWORD *)(v9 + 4 * v13) = v12;
              *long long v11 = 1;
              long long v11 = &a2[v13];
              int v12 = v14;
            }
            while (!*v11);
          }
          ++v10;
        }
        while (v10 != v8);
      }
    }
  }
}

uint64_t sub_100AC9620(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2) {
    sub_101A7DC34();
  }
  if ((a2 & 0x80000000) != 0) {
    sub_101A7DC60();
  }
  if (*(_DWORD *)(a1 + 16) <= (signed int)a2) {
    sub_101A7DC8C();
  }
  return v2 + 4 * a2;
}

uint64_t sub_100AC965C(uint64_t result, unsigned int a2, unsigned int a3)
{
  *(void *)(result + 24) = 0x100000003;
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = off_1022DC6D8;
  if ((a3 & 0x80000000) != 0)
  {
    int v3 = "nc >= 0";
    int v4 = 487;
    uint64_t v5 = "cnmatrix.h";
    int v6 = "CNMatrix";
    goto LABEL_9;
  }
  if (a2 > 3)
  {
    int v3 = "this->max_num_rows_ >= num_rows";
    int v4 = 422;
LABEL_8:
    uint64_t v5 = "cnmatrixbase.h";
    int v6 = "SetMatrixSize";
LABEL_9:
    __assert_rtn(v6, v5, v4, v3);
  }
  if (a3 >= 2)
  {
    int v3 = "this->max_num_cols_ >= num_cols";
    int v4 = 423;
    goto LABEL_8;
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100AC972C(_Unwind_Exception *a1)
{
  void *v1 = off_1022DC6A8;
  _Unwind_Resume(a1);
}

void sub_100AC974C(void *a1)
{
  *a1 = off_1022DC6A8;
  operator delete();
}

void sub_100AC977C(uint64_t a1)
{
  sub_100AC954C(a1, v1);
}

uint64_t sub_100AC97A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0x300000001;
  *(_OWORD *)(a1 + 8) = xmmword_101D71140;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = off_1022DC720;
  *(void *)(a1 + 96) = 0x100000001;
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 72) = off_1022DC650;
  *(void *)&long long v7 = 0x100000001;
  *((void *)&v7 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 80) = v7;
  *(void *)(a1 + 104) = a1 + 112;
  uint64_t v8 = a1 + 120;
  *(void *)(a1 + 144) = 0x100000003;
  *(void *)(a1 + 120) = off_1022DC6D8;
  *(_OWORD *)(a1 + 128) = xmmword_101D71190;
  *(void *)(a1 + 152) = a1 + 160;
  sub_100AC9A80(a1 + 72, a3);
  sub_100AC9A80(v8, a4);
  uint64_t v9 = *(unsigned int *)(a1 + 88);
  if (*(_DWORD *)(a1 + 24) < v9)
  {
    uint64_t v15 = "this->max_num_rows_ >= num_rows";
    int v16 = 422;
    goto LABEL_12;
  }
  uint64_t v10 = *(unsigned int *)(a1 + 136);
  if (*(_DWORD *)(a1 + 28) < v10)
  {
    uint64_t v15 = "this->max_num_cols_ >= num_cols";
    int v16 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v16, v15);
  }
  *(_DWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 12) = v10;
  *(_DWORD *)(a1 + 16) = v10 * v9;
  *(_DWORD *)(a1 + 20) = v9;
  if (v10)
  {
    int v11 = 0;
    for (uint64_t i = 0; i != v10; ++i)
    {
      if (v9)
      {
        for (uint64_t j = 0; j != v9; ++j)
          *(void *)(*(void *)(a1 + 32) + 8 * (v11 + j)) = *(void *)sub_100AC99CC(a2, *(_DWORD *)(*(void *)(a1 + 104) + 4 * j), *(_DWORD *)(*(void *)(a1 + 152) + 4 * i));
      }
      v11 += v9;
    }
  }
  return a1;
}

void sub_100AC9970(_Unwind_Exception *a1)
{
  v1[15] = off_1022DC6A8;
  char v1[9] = off_1022DC6A8;
  void *v1 = off_1022CAFC0;
  _Unwind_Resume(a1);
}

uint64_t sub_100AC99CC(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (!v3) {
    sub_101A7DCB8();
  }
  unsigned int v4 = a2 + *(_DWORD *)(a1 + 20) * a3;
  if ((v4 & 0x80000000) != 0) {
    sub_101A7DCE4();
  }
  if ((signed int)v4 >= *(_DWORD *)(a1 + 16)) {
    sub_101A7DD10();
  }
  return v3 + 8 * v4;
}

void sub_100AC9A10(void *a1)
{
  a1[15] = off_1022DC6A8;
  a1[9] = off_1022DC6A8;
  *a1 = off_1022CAFC0;
  operator delete();
}

uint64_t sub_100AC9A80(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    unsigned int v2 = *(_DWORD *)(a2 + 8);
    if (*(_DWORD *)(result + 24) < v2) {
      sub_101A7DAD4();
    }
    unsigned int v3 = *(_DWORD *)(a2 + 12);
    if (*(_DWORD *)(result + 28) < v3) {
      sub_101A7DB00();
    }
    *(_DWORD *)(result + 8) = v2;
    *(_DWORD *)(result + 12) = v3;
    int v4 = v3 * v2;
    *(_DWORD *)(result + 16) = v4;
    *(_DWORD *)(result + 20) = v2;
    int v5 = *(_DWORD *)(a2 + 16);
    if (v5 > 3)
    {
      uint64_t v9 = (v5 - 1);
      uint64_t v10 = *(_DWORD **)(result + 32);
      int v11 = *(int **)(a2 + 32);
      uint64_t v12 = v9;
      int v13 = v10;
      int v14 = v11;
      do
      {
        int v15 = *v14++;
        *v13++ = v15;
        --v12;
      }
      while (v12);
      v10[v9] = v11[v9];
    }
    else if (v4 >= 1)
    {
      uint64_t v6 = 0;
      uint64_t v7 = *(void *)(a2 + 32);
      uint64_t v8 = *(void *)(result + 32);
      do
      {
        *(_DWORD *)(v8 + 4 * v6) = *(_DWORD *)(v7 + 4 * v6);
        ++v6;
      }
      while (v6 < *(int *)(result + 16));
    }
  }
  return result;
}

float64x2_t sub_100AC9B3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (v4 != *(_DWORD *)(a2 + 8)) {
    sub_101A7DDC0();
  }
  int v7 = *(_DWORD *)(a1 + 12);
  if (v7 != *(_DWORD *)(a2 + 12)) {
    sub_101A7DD94();
  }
  if (a1 == a3) {
    sub_101A7DD3C();
  }
  if (a2 == a3) {
    sub_101A7DD68();
  }
  sub_100062B3C((_DWORD *)a3, v4, v7);
  uint64_t v9 = *(unsigned int *)(a3 + 16);
  if ((int)v9 > 3)
  {
    int v16 = *(float64x2_t **)(a1 + 32);
    uint64_t v17 = *(float64x2_t **)(a2 + 32);
    char v18 = (float64x2_t *)((char *)v16 + 8 * (v9 - 2));
    uint64_t v19 = *(float64x2_t **)(a3 + 32);
    double v20 = (float64x2_t *)((char *)v17 + 8 * (v9 - 2));
    uint64_t v21 = (float64x2_t *)((char *)v19 + 8 * (v9 - 2));
    uint64_t v22 = (v9 - 1) >> 1;
    do
    {
      float64x2_t v23 = *v16++;
      float64x2_t v24 = v23;
      float64x2_t v25 = *v17++;
      *v19++ = vaddq_f64(v24, v25);
      --v22;
    }
    while (v22);
    float64x2_t result = vaddq_f64(*v18, *v20);
    float64x2_t *v21 = result;
  }
  else if ((int)v9 >= 1)
  {
    uint64_t v10 = *(double **)(a1 + 32);
    int v11 = *(double **)(a2 + 32);
    uint64_t v12 = *(float64_t **)(a3 + 32);
    do
    {
      double v13 = *v10++;
      double v14 = v13;
      double v15 = *v11++;
      result.f64[0] = v14 + v15;
      *v12++ = result.f64[0];
      --v9;
    }
    while (v9);
  }
  return result;
}

float64x2_t sub_100AC9C3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (v4 != *(_DWORD *)(a2 + 8)) {
    sub_101A7DE9C();
  }
  int v7 = *(_DWORD *)(a1 + 12);
  if (v7 != *(_DWORD *)(a2 + 12)) {
    sub_101A7DE70();
  }
  if (a1 == a3) {
    sub_101A7DE18();
  }
  if (a2 == a3) {
    sub_101A7DE44();
  }
  sub_100062B3C((_DWORD *)a3, v4, v7);
  uint64_t v9 = *(unsigned int *)(a3 + 16);
  if ((int)v9 > 3)
  {
    int v16 = *(float64x2_t **)(a1 + 32);
    uint64_t v17 = *(float64x2_t **)(a2 + 32);
    char v18 = (float64x2_t *)((char *)v16 + 8 * (v9 - 2));
    uint64_t v19 = *(float64x2_t **)(a3 + 32);
    double v20 = (float64x2_t *)((char *)v17 + 8 * (v9 - 2));
    uint64_t v21 = (float64x2_t *)((char *)v19 + 8 * (v9 - 2));
    uint64_t v22 = (v9 - 1) >> 1;
    do
    {
      float64x2_t v23 = *v16++;
      float64x2_t v24 = v23;
      float64x2_t v25 = *v17++;
      *v19++ = vsubq_f64(v24, v25);
      --v22;
    }
    while (v22);
    float64x2_t result = vsubq_f64(*v18, *v20);
    float64x2_t *v21 = result;
  }
  else if ((int)v9 >= 1)
  {
    uint64_t v10 = *(double **)(a1 + 32);
    int v11 = *(double **)(a2 + 32);
    uint64_t v12 = *(float64_t **)(a3 + 32);
    do
    {
      double v13 = *v10++;
      double v14 = v13;
      double v15 = *v11++;
      result.f64[0] = v14 - v15;
      *v12++ = result.f64[0];
      --v9;
    }
    while (v9);
  }
  return result;
}

_DWORD *sub_100AC9D3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v8 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 12);
  if (v7 <= v8) {
    int v9 = *(_DWORD *)(a1 + 8);
  }
  else {
    int v9 = *(_DWORD *)(a1 + 12);
  }
  if (v7 >= v8) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = v7;
  }
  if (a1 == a2) {
    sub_101A7DEC8();
  }
  if (a1 == a3) {
    sub_101A7DEF4();
  }
  if (a1 == a4) {
    sub_101A7DF20();
  }
  if (a1 == a5) {
    sub_101A7DF4C();
  }
  if (a1 == a6) {
    sub_101A7DF78();
  }
  if (a2 == a3) {
    sub_101A7DFA4();
  }
  if (a2 == a4) {
    sub_101A7DFD0();
  }
  if (a2 == a5) {
    sub_101A7DFFC();
  }
  if (a2 == a6) {
    sub_101A7E028();
  }
  if (a3 == a4) {
    sub_101A7E054();
  }
  if (a3 == a5) {
    sub_101A7E080();
  }
  if (a3 == a6) {
    sub_101A7E0AC();
  }
  if (a4 == a5) {
    sub_101A7E0D8();
  }
  if (a4 == a6) {
    sub_101A7E104();
  }
  if (a5 == a6) {
    sub_101A7E130();
  }
  unsigned int v15 = *(_DWORD *)(a3 + 28) * *(_DWORD *)(a3 + 24);
  if (!v15) {
    sub_101A7E15C();
  }
  if (v15 < 3 * (int)v10 + v9) {
    sub_101A7E188();
  }
  if (v15 < 5 * (int)v10) {
    sub_101A7E1B4();
  }
  if (*(_DWORD *)(a2 + 24) < v8) {
    sub_101A7E1E0();
  }
  if (*(_DWORD *)(a2 + 28) < v7) {
    sub_101A7E20C();
  }
  if (*(_DWORD *)(a4 + 24) < v8) {
    sub_101A7E238();
  }
  if (*(_DWORD *)(a4 + 28) < v8) {
    sub_101A7E264();
  }
  if (*(_DWORD *)(a5 + 24) < v8) {
    sub_101A7E290();
  }
  if (*(_DWORD *)(a5 + 28) < v7) {
    sub_101A7E2BC();
  }
  if (*(_DWORD *)(a6 + 24) < v7) {
    sub_101A7E2E8();
  }
  if (*(_DWORD *)(a6 + 28) < v7) {
    sub_101A7E314();
  }
  sub_100063168(a2, a1);
  __CLPK_integer v16 = *(_DWORD *)(a2 + 8);
  __CLPK_integer v17 = *(_DWORD *)(a2 + 12);
  char v18 = *(__CLPK_doublereal **)(a2 + 32);
  uint64_t v19 = *(__CLPK_doublereal **)(a5 + 32);
  double v20 = *(__CLPK_doublereal **)(a4 + 32);
  uint64_t v21 = *(__CLPK_doublereal **)(a6 + 32);
  uint64_t v22 = *(__CLPK_doublereal **)(a3 + 32);
  char __jobu = 65;
  char __jobvt = 65;
  __CLPK_integer __n = v17;
  __CLPK_integer __m = v16;
  __CLPK_integer __ldu = v16;
  __CLPK_integer __lda = v16;
  __CLPK_integer __lwork = v15;
  __CLPK_integer __ldvt = v17;
  __CLPK_integer v32 = 0;
  uint64_t v23 = dgesvd_(&__jobu, &__jobvt, &__m, &__n, v18, &__lda, v19, v20, &__ldu, v21, &__ldvt, v22, &__lwork, &v32);
  __CLPK_integer v24 = v32;
  if (v32)
  {
    LOWORD(__m) = 4;
    if (v32 < 0) {
      LOBYTE(__n) = 5;
    }
    else {
      LOBYTE(__n) = 4;
    }
    uint64_t v23 = cnprint::CNPrinter::Print();
  }
  if (v15 < **(double **)(a3 + 32)
    && cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v23) <= 1)
  {
    LOWORD(__m) = 4;
    LOBYTE(__n) = 1;
    cnprint::CNPrinter::Print();
  }
  if (v24) {
    sub_101A7E340();
  }
  sub_100062B3C((_DWORD *)a3, *(_DWORD *)(a3 + 24), *(_DWORD *)(a3 + 28));
  sub_100062B3C((_DWORD *)a4, v8, v8);
  sub_100062B3C((_DWORD *)a5, v8, v7);
  if (v10)
  {
    for (uint64_t i = 0; i != v10; ++i)
    {
      uint64_t v26 = *(void *)(*(void *)(a5 + 32) + 8 * i);
      *(void *)sub_10004DF44(a5, i, i) = v26;
    }
  }
  if (v7)
  {
    unsigned int v27 = 0;
    do
    {
      int v28 = v27;
      if (v8 < v27) {
        unsigned int v27 = v8;
      }
      if (v27)
      {
        for (int j = 0; j != v27; ++j)
          *(void *)sub_10004DF44(a5, j, v28) = 0;
      }
      unsigned int v27 = v28 + 1;
      int v30 = v28 + 1;
      if (v28 + 1 < v8)
      {
        do
          *(void *)sub_10004DF44(a5, v30++, v28) = 0;
        while (v8 != v30);
      }
    }
    while (v27 != v7);
  }
  sub_100062B3C((_DWORD *)a6, v7, v7);
  return sub_100ACA400((_DWORD *)a6);
}

uint64_t sub_100ACA114(uint64_t result, unsigned int a2, unsigned int a3)
{
  *(void *)(result + 24) = 0x300000028;
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)float64x2_t result = off_1022DC458;
  if (a2 > 0x28)
  {
    unsigned int v3 = "this->max_num_rows_ >= num_rows";
    int v4 = 422;
    goto LABEL_6;
  }
  if (a3 >= 4)
  {
    unsigned int v3 = "this->max_num_cols_ >= num_cols";
    int v4 = 423;
LABEL_6:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v4, v3);
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100ACA1C0(_Unwind_Exception *a1)
{
  void *v1 = off_1022CAFC0;
  _Unwind_Resume(a1);
}

void sub_100ACA1E0(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x100001A09;
  *(void *)a1 = off_1022DC768;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_101D711A0;
  sub_100ACA2F8();
}

void sub_100ACA248(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[5];
  v1[5] = 0;
  if (v3) {
    operator delete[]();
  }
  void *v1 = off_1022CAFC0;
  _Unwind_Resume(exception_object);
}

void sub_100ACA290(void *a1)
{
  sub_100ACA488(a1);

  operator delete();
}

void sub_100ACA2C8()
{
}

void sub_100ACA2F8()
{
}

void sub_100ACA368()
{
}

void sub_100ACA3DC()
{
}

_DWORD *sub_100ACA400(_DWORD *a1)
{
  if (a1[6] < a1[3]) {
    sub_101A7E36C();
  }
  if (a1[7] < a1[2]) {
    sub_101A7E398();
  }
  (*(void (**)(_DWORD *))(*(void *)a1 + 24))(a1);
  int v3 = a1[2];
  int v2 = a1[3];

  return sub_100062B3C(a1, v2, v3);
}

void *sub_100ACA488(void *a1)
{
  *a1 = off_1022DC768;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    operator delete[]();
  }
  *a1 = off_1022CAFC0;
  return a1;
}

uint64_t sub_100ACA504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0x100000003;
  *(_OWORD *)(a1 + 8) = xmmword_101D71190;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = off_1022DC7B0;
  *(void *)(a1 + 96) = 0x100000003;
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 72) = off_1022DC6D8;
  *(_OWORD *)(a1 + 80) = xmmword_101D71190;
  *(void *)(a1 + 104) = a1 + 112;
  uint64_t v7 = a1 + 128;
  *(void *)(a1 + 152) = 0x100000001;
  *(void *)(a1 + 128) = off_1022DC650;
  *(void *)&long long v8 = 0x100000001;
  *((void *)&v8 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 136) = v8;
  *(void *)(a1 + 160) = a1 + 168;
  sub_100AC9A80(a1 + 72, a3);
  sub_100AC9A80(v7, a4);
  uint64_t v9 = *(unsigned int *)(a1 + 88);
  if (*(_DWORD *)(a1 + 24) < v9)
  {
    unsigned int v15 = "this->max_num_rows_ >= num_rows";
    int v16 = 422;
    goto LABEL_12;
  }
  uint64_t v10 = *(unsigned int *)(a1 + 144);
  if (*(_DWORD *)(a1 + 28) < v10)
  {
    unsigned int v15 = "this->max_num_cols_ >= num_cols";
    int v16 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v16, v15);
  }
  *(_DWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 12) = v10;
  *(_DWORD *)(a1 + 16) = v10 * v9;
  *(_DWORD *)(a1 + 20) = v9;
  if (v10)
  {
    int v11 = 0;
    for (uint64_t i = 0; i != v10; ++i)
    {
      if (v9)
      {
        for (uint64_t j = 0; j != v9; ++j)
          *(void *)(*(void *)(a1 + 32) + 8 * (v11 + j)) = *(void *)sub_100AC99CC(a2, *(_DWORD *)(*(void *)(a1 + 104) + 4 * j), *(_DWORD *)(*(void *)(a1 + 160) + 4 * i));
      }
      v11 += v9;
    }
  }
  return a1;
}

void sub_100ACA6C4(_Unwind_Exception *a1)
{
  v1[16] = off_1022DC6A8;
  char v1[9] = off_1022DC6A8;
  void *v1 = off_1022CAFC0;
  _Unwind_Resume(a1);
}

void sub_100ACA720(void *a1)
{
  a1[16] = off_1022DC6A8;
  a1[9] = off_1022DC6A8;
  *a1 = off_1022CAFC0;
  operator delete();
}

void sub_100ACA790(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 3288) > a2)
  {
    sub_100ACAA14(":", a1, a2, (uint64_t)v3);
    sub_100ACA7E4(a1, (uint64_t)v3);
  }
}

void sub_100ACA7E4(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8)) {
    BOOL v2 = *(_DWORD *)(a1 + 12) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    if (*(unsigned char *)(a1 + 3296))
    {
      uint64_t v19 = 0x300000001;
      long long v18 = xmmword_101D71140;
      __CLPK_integer v17 = off_1022DC4A0;
      double v20 = &v21;
      sub_100AC9C3C(a2, a1 + 1000, (uint64_t)&v17);
      double v4 = sub_100ACAA94((uint64_t)&v17, a1 + 1064);
      sub_100ACB350((uint64_t)v6, *(_DWORD *)(a1 + 1076), *(_DWORD *)(a1 + 1072));
      sub_100ACB2A4(a1 + 1064, v6);
      uint64_t v9 = 0x300000001;
      uint64_t v7 = off_1022DC4A0;
      long long v8 = xmmword_101D71140;
      uint64_t v10 = &v11;
      sub_100061AC4((uint64_t)v6, (uint64_t)&v7, v4);
      uint64_t v14 = 0x300000001;
      long long v13 = xmmword_101D71140;
      uint64_t v12 = off_1022DC4A0;
      unsigned int v15 = &v16;
      sub_100AC9C3C((uint64_t)&v17, (uint64_t)&v7, (uint64_t)&v12);
      uint64_t v34 = 0x300000001;
      __CLPK_integer v32 = off_1022DC4A0;
      long long v33 = xmmword_101D71140;
      float v35 = &v36;
      uint64_t v29 = 0x100000134;
      long long v28 = xmmword_101D711B0;
      unsigned int v27 = off_1022DC7F8;
      int v30 = &v31;
      uint64_t v24 = 0x100000001;
      *(void *)&long long v5 = 0x100000001;
      *((void *)&v5 + 1) = 0x100000001;
      long long v23 = v5;
      uint64_t v22 = off_1022DC840;
      float64x2_t v25 = &v26;
      sub_100ACAB14((uint64_t)&v12, (uint64_t)&v32, (uint64_t)&v27, (uint64_t)&v22, "2");
    }
  }
}

double sub_100ACAA14@<D0>(char *__s1@<X2>, uint64_t a2@<X0>, int a3@<W1>, uint64_t a4@<X8>)
{
  if (strcmp(__s1, ":")) {
    sub_101A7E3C4();
  }
  unsigned int v7 = *(_DWORD *)(a2 + 12);
  sub_100ACB41C(a4, 1u, v7);
  if (v7)
  {
    int v9 = *(_DWORD *)(a2 + 20);
    uint64_t v10 = *(void *)(a2 + 32);
    uint64_t v11 = *(double **)(a4 + 32);
    do
    {
      double result = *(double *)(v10 + 8 * a3);
      *v11++ = result;
      a3 += v9;
      --v7;
    }
    while (v7);
  }
  return result;
}

double sub_100ACAA94(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) != 1 && *(_DWORD *)(a1 + 12) != 1) {
    sub_101A7E3F0();
  }
  if (*(_DWORD *)(a2 + 8) != 1 && *(_DWORD *)(a2 + 12) != 1) {
    sub_101A7E41C();
  }
  uint64_t v4 = *(unsigned int *)(a1 + 16);
  if (v4 != *(_DWORD *)(a2 + 16)) {
    sub_101A7E448();
  }
  if ((int)v4 < 1) {
    return 0.0;
  }
  long long v5 = *(double **)(a1 + 32);
  uint64_t v6 = *(double **)(a2 + 32);
  double result = 0.0;
  do
  {
    double v8 = *v5++;
    double v9 = v8;
    double v10 = *v6++;
    double result = result + v9 * v10;
    --v4;
  }
  while (v4);
  return result;
}

void sub_100ACAB14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *__s1)
{
  if (a1 == a2) {
    sub_101A7E474();
  }
  if (a1 == a3) {
    sub_101A7E4A0();
  }
  if (a1 == a4) {
    sub_101A7E4CC();
  }
  if (a2 == a3) {
    sub_101A7E4F8();
  }
  if (a2 == a4) {
    sub_101A7E524();
  }
  if (a3 == a4) {
    sub_101A7E550();
  }
  uint64_t v9 = *(unsigned int *)(a1 + 16);
  if (*(_DWORD *)(a2 + 16) < (int)v9) {
    sub_101A7E57C();
  }
  if (v9)
  {
    uint64_t v11 = *(unsigned int *)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 12);
    int v13 = strcmp(__s1, "2");
    if (v11 == 1 || v12 == 1)
    {
      if (v13)
      {
        if (!strcmp(__s1, "1"))
        {
          uint64_t v37 = *(double **)(a1 + 32);
          double v38 = fabs(*v37);
          if (v9 >= 2)
          {
            uint64_t v39 = v37 + 1;
            uint64_t v40 = v9 - 1;
            do
            {
              double v41 = *v39++;
              double v38 = v38 + fabs(v41);
              --v40;
            }
            while (v40);
          }
        }
        else if (!strcmp(__s1, "inf"))
        {
          uint64_t v53 = *(double **)(a1 + 32);
          double v54 = fabs(*v53);
          if (v9 >= 2)
          {
            char v55 = v53 + 1;
            uint64_t v56 = v9 - 1;
            do
            {
              double v57 = *v55++;
              double v58 = fabs(v57);
              if (v58 > v54) {
                double v54 = v58;
              }
              --v56;
            }
            while (v56);
          }
        }
        else if (!strcmp(__s1, "-inf"))
        {
          int v59 = *(double **)(a1 + 32);
          double v60 = fabs(*v59);
          if (v9 >= 2)
          {
            BOOL v61 = v59 + 1;
            uint64_t v62 = v9 - 1;
            do
            {
              double v63 = *v61++;
              double v64 = fabs(v63);
              if (v64 < v60) {
                double v60 = v64;
              }
              --v62;
            }
            while (v62);
          }
        }
        else
        {
          long double v75 = 0.0;
          if (sscanf(__s1, "%lg", &v75) != 1) {
            sub_101A7E600();
          }
          long double v19 = v75;
          if (fabs(v75) >= 2.22044605e-16)
          {
            uint64_t v65 = *(double **)(a1 + 32);
            long double v66 = pow(fabs(*v65), v75);
            if (v9 >= 2)
            {
              uint64_t v67 = v65 + 1;
              uint64_t v68 = v9 - 1;
              do
              {
                double v69 = *v67++;
                long double v66 = v66 + pow(fabs(v69), v19);
                --v68;
              }
              while (v68);
            }
            pow(v66, 1.0 / v19);
          }
        }
      }
      else
      {
        double v20 = *(double **)(a1 + 32);
        double v21 = *v20 * *v20;
        if (v9 >= 2)
        {
          uint64_t v22 = v20 + 1;
          uint64_t v23 = v9 - 1;
          do
          {
            double v24 = *v22++;
            double v21 = v21 + v24 * v24;
            --v23;
          }
          while (v23);
        }
      }
    }
    else if (v13)
    {
      if (!strcmp(__s1, "1"))
      {
        if (v12)
        {
          uint64_t v25 = 0;
          uint64_t v26 = *(void *)(a1 + 32);
          unsigned int v27 = *(double **)(a2 + 32);
          int v28 = 1;
          do
          {
            double v29 = fabs(*(double *)(v26 + 8 * (v11 * v25)));
            v27[v25] = v29;
            uint64_t v30 = v11 - 1;
            unsigned int v31 = v28;
            if (v11 >= 2)
            {
              do
              {
                double v29 = v29 + fabs(*(double *)(v26 + 8 * v31));
                v27[v25] = v29;
                ++v31;
                --v30;
              }
              while (v30);
            }
            ++v25;
            v28 += v11;
          }
          while (v25 != v12);
          double v32 = *v27;
          long long v33 = v27 + 1;
          uint64_t v34 = v12 - 1;
          do
          {
            double v35 = *v33++;
            double v36 = v35;
            if (v35 > v32) {
              double v32 = v36;
            }
            --v34;
          }
          while (v34);
        }
      }
      else if (!strcmp(__s1, "inf"))
      {
        if (v11)
        {
          __int16 v42 = *(double **)(a1 + 32);
          uint64_t v43 = *(double **)(a2 + 32);
          uint64_t v44 = v11;
          do
          {
            double v45 = *v42++;
            *v43++ = fabs(v45);
            --v44;
          }
          while (v44);
        }
        if (v12 <= 1)
        {
          int v47 = *(double **)(a2 + 32);
        }
        else
        {
          uint64_t v46 = *(void *)(a1 + 32);
          int v47 = *(double **)(a2 + 32);
          int v48 = 1;
          unsigned int v49 = v11;
          do
          {
            uint64_t v50 = v11;
            unsigned int v51 = v49;
            uint64_t v52 = v47;
            if (v11)
            {
              do
              {
                *uint64_t v52 = fabs(*(double *)(v46 + 8 * v51)) + *v52;
                ++v52;
                ++v51;
                --v50;
              }
              while (v50);
            }
            ++v48;
            v49 += v11;
          }
          while (v48 != v12);
        }
        double v70 = *v47;
        if (v11 >= 2)
        {
          uint64_t v71 = v47 + 1;
          uint64_t v72 = v11 - 1;
          do
          {
            double v73 = *v71++;
            double v74 = v73;
            if (v73 > v70) {
              double v70 = v74;
            }
            --v72;
          }
          while (v72);
        }
      }
      else
      {
        if (strcmp(__s1, "fro")) {
          sub_101A7E5A8();
        }
        uint64_t v14 = *(double **)(a1 + 32);
        double v15 = *v14 * *v14;
        if (v9 >= 2)
        {
          uint64_t v16 = v14 + 1;
          uint64_t v17 = v9 - 1;
          do
          {
            double v18 = *v16++;
            double v15 = v15 + v18 * v18;
            --v17;
          }
          while (v17);
        }
      }
    }
    else
    {
      sub_100ACB06C(a1, a2, a3, a4);
    }
  }
}

void sub_100ACAF90(void *a1)
{
  *a1 = off_1022CAFC0;
  operator delete();
}

void sub_100ACAFC0(uint64_t a1)
{
  sub_10082938C(a1, v1);
}

void sub_100ACB018(void *a1)
{
  *a1 = off_1022CAFC0;
  operator delete();
}

void sub_100ACB048(uint64_t a1)
{
  sub_10082938C(a1, &v1);
}

_DWORD *sub_100ACB06C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v5 = *(_DWORD *)(a1 + 12);
  if (v5 <= v6) {
    int v7 = *(_DWORD *)(a1 + 8);
  }
  else {
    int v7 = *(_DWORD *)(a1 + 12);
  }
  if (v5 >= v6) {
    unsigned int v8 = *(_DWORD *)(a1 + 8);
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 12);
  }
  if (a1 == a2) {
    sub_101A7E658();
  }
  if (a1 == a3) {
    sub_101A7E684();
  }
  if (a1 == a4) {
    sub_101A7E6B0();
  }
  if (a2 == a3) {
    sub_101A7E6DC();
  }
  if (a2 == a4) {
    sub_101A7E708();
  }
  if (a3 == a4) {
    sub_101A7E734();
  }
  unsigned int v11 = *(_DWORD *)(a3 + 28) * *(_DWORD *)(a3 + 24);
  if (!v11) {
    sub_101A7E760();
  }
  if (v11 < 3 * v8 + v7) {
    sub_101A7E78C();
  }
  if (v11 < 5 * v8) {
    sub_101A7E7B8();
  }
  if (*(_DWORD *)(a2 + 24) < v6) {
    sub_101A7E7E4();
  }
  if (*(_DWORD *)(a2 + 28) < v5) {
    sub_101A7E810();
  }
  if (*(_DWORD *)(a4 + 24) < v8) {
    sub_101A7E83C();
  }
  if (!*(_DWORD *)(a4 + 28)) {
    sub_101A7E868();
  }
  sub_100063168(a2, a1);
  __CLPK_integer v12 = *(_DWORD *)(a2 + 8);
  __CLPK_integer v13 = *(_DWORD *)(a2 + 12);
  uint64_t v14 = *(__CLPK_doublereal **)(a2 + 32);
  double v15 = *(__CLPK_doublereal **)(a4 + 32);
  uint64_t v16 = *(__CLPK_doublereal **)(a3 + 32);
  char __jobu = 78;
  char __jobvt = 78;
  __CLPK_integer __n = v13;
  __CLPK_integer __m = v12;
  __CLPK_integer __lda = v12;
  __CLPK_integer __ldvt = 1;
  __CLPK_integer __ldu = 1;
  __CLPK_integer v20 = 0;
  __CLPK_integer __lwork = v11;
  uint64_t v17 = dgesvd_(&__jobu, &__jobvt, &__m, &__n, v14, &__lda, v15, 0, &__ldu, 0, &__ldvt, v16, &__lwork, &v20);
  __CLPK_integer v18 = v20;
  if (v20)
  {
    LOWORD(__m) = 4;
    if (v20 < 0) {
      LOBYTE(__n) = 5;
    }
    else {
      LOBYTE(__n) = 4;
    }
    uint64_t v17 = cnprint::CNPrinter::Print();
  }
  if (v11 < **(double **)(a3 + 32)
    && cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v17) <= 1)
  {
    LOWORD(__m) = 4;
    LOBYTE(__n) = 1;
    cnprint::CNPrinter::Print();
  }
  if (v18) {
    sub_101A7E894();
  }
  sub_100062B3C((_DWORD *)a3, *(_DWORD *)(a3 + 24), *(_DWORD *)(a3 + 28));
  return sub_100062B3C((_DWORD *)a4, v8, 1);
}

double *sub_100ACB2A4(uint64_t a1, _DWORD *a2)
{
  if ((_DWORD *)a1 == a2) {
    sub_101A7E8C0();
  }
  double result = (double *)sub_100062B3C(a2, *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 8));
  int v5 = a2[2];
  if (v5)
  {
    int v6 = 0;
    int v7 = a2[3];
    do
    {
      if (v7)
      {
        for (int i = 0; i != v7; ++i)
        {
          double v9 = sub_1001733F4(a1, i, v6);
          double result = (double *)sub_10004DF44((uint64_t)a2, v6, i);
          double *result = v9;
        }
      }
      ++v6;
    }
    while (v6 != v5);
  }
  return result;
}

uint64_t sub_100ACB350(uint64_t result, unsigned int a2, unsigned int a3)
{
  *(void *)(result + 24) = 0x300000001;
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = off_1022DC4A0;
  if (a2 > 1)
  {
    int v3 = "this->max_num_rows_ >= num_rows";
    int v4 = 422;
    goto LABEL_6;
  }
  if (a3 >= 4)
  {
    int v3 = "this->max_num_cols_ >= num_cols";
    int v4 = 423;
LABEL_6:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v4, v3);
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100ACB3FC(_Unwind_Exception *a1)
{
  void *v1 = off_1022CAFC0;
  _Unwind_Resume(a1);
}

uint64_t sub_100ACB41C(uint64_t result, unsigned int a2, unsigned int a3)
{
  *(void *)(result + 24) = 0x300000001;
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = off_1022DC4A0;
  if ((a2 & 0x80000000) != 0)
  {
    int v3 = "nr >= 0";
    int v4 = 454;
    int v5 = "cnmatrix.h";
    int v6 = "CNMatrix";
    goto LABEL_9;
  }
  if (a2 > 1)
  {
    int v3 = "this->max_num_rows_ >= num_rows";
    int v4 = 422;
LABEL_8:
    int v5 = "cnmatrixbase.h";
    int v6 = "SetMatrixSize";
LABEL_9:
    __assert_rtn(v6, v5, v4, v3);
  }
  if (a3 >= 4)
  {
    int v3 = "this->max_num_cols_ >= num_cols";
    int v4 = 423;
    goto LABEL_8;
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100ACB4EC(_Unwind_Exception *a1)
{
  void *v1 = off_1022CAFC0;
  _Unwind_Resume(a1);
}

void sub_100ACB50C(void *a1)
{
  *a1 = off_1022DC6A8;
  operator delete();
}

void sub_100ACB53C(uint64_t a1)
{
  sub_100AC954C(a1, v1);
}

uint64_t sub_100ACB58C(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2) {
    sub_101A7E970();
  }
  if ((a2 & 0x80000000) != 0) {
    sub_101A7E99C();
  }
  if (*(_DWORD *)(a1 + 16) <= (signed int)a2) {
    sub_101A7E9C8();
  }
  return v2 + 4 * a2;
}

uint64_t sub_100ACB5C8(uint64_t result, unsigned int a2, unsigned int a3)
{
  *(void *)(result + 24) = 0x100000003;
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = off_1022DC6D8;
  if ((a2 & 0x80000000) != 0)
  {
    int v3 = "nr >= 0";
    int v4 = 419;
LABEL_8:
    int v5 = "cnmatrix.h";
    int v6 = "CNMatrix";
    goto LABEL_12;
  }
  if ((a3 & 0x80000000) != 0)
  {
    int v3 = "nc >= 0";
    int v4 = 420;
    goto LABEL_8;
  }
  if (a2 > 3)
  {
    int v3 = "this->max_num_rows_ >= num_rows";
    int v4 = 422;
LABEL_11:
    int v5 = "cnmatrixbase.h";
    int v6 = "SetMatrixSize";
LABEL_12:
    __assert_rtn(v6, v5, v4, v3);
  }
  if (a3 >= 2)
  {
    int v3 = "this->max_num_cols_ >= num_cols";
    int v4 = 423;
    goto LABEL_11;
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100ACB6AC(_Unwind_Exception *a1)
{
  void *v1 = off_1022DC6A8;
  _Unwind_Resume(a1);
}

uint64_t sub_100ACB6CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0x300000014;
  *(_OWORD *)(a1 + 8) = xmmword_101D71180;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = off_1022DC8D0;
  *(void *)(a1 + 520) = a2;
  *(void *)(a1 + 552) = 0x1400000001;
  *(void *)(a1 + 528) = off_1022DC888;
  *(_OWORD *)(a1 + 536) = xmmword_101D71130;
  *(void *)(a1 + 560) = a1 + 568;
  uint64_t v7 = a1 + 648;
  *(void *)(a1 + 672) = 0x100000003;
  *(void *)(a1 + 648) = off_1022DC6D8;
  *(_OWORD *)(a1 + 656) = xmmword_101D71190;
  *(void *)(a1 + 680) = a1 + 688;
  sub_100AC9A80(a1 + 528, a3);
  sub_100AC9A80(v7, a4);
  uint64_t v8 = *(unsigned int *)(a1 + 544);
  if (*(_DWORD *)(a1 + 24) < v8)
  {
    uint64_t v14 = "this->max_num_rows_ >= num_rows";
    int v15 = 422;
    goto LABEL_12;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 664);
  if (*(_DWORD *)(a1 + 28) < v9)
  {
    uint64_t v14 = "this->max_num_cols_ >= num_cols";
    int v15 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v15, v14);
  }
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if (v9)
  {
    int v10 = 0;
    for (uint64_t i = 0; i != v9; ++i)
    {
      if (v8)
      {
        for (uint64_t j = 0; j != v8; ++j)
          *(void *)(*(void *)(a1 + 32) + 8 * (v10 + j)) = *(void *)sub_100AC99CC(a2, *(_DWORD *)(*(void *)(a1 + 560) + 4 * j), *(_DWORD *)(*(void *)(a1 + 680) + 4 * i));
      }
      v10 += v8;
    }
  }
  return a1;
}

void sub_100ACB8A8(_Unwind_Exception *a1)
{
  v1[81] = off_1022DC6A8;
  v1[66] = off_1022DC6A8;
  void *v1 = off_1022CAFC0;
  _Unwind_Resume(a1);
}

void sub_100ACB904(void *a1)
{
  a1[81] = off_1022DC6A8;
  a1[66] = off_1022DC6A8;
  *a1 = off_1022CAFC0;
  operator delete();
}

void sub_100ACB974(_DWORD *a1)
{
  if (a1[2]) {
    BOOL v2 = a1[3] == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    void v20[3] = 0x300000001;
    v20[0] = off_1022DC4A0;
    v20[1] = 0;
    void v20[2] = 0;
    v20[4] = &v21;
    sub_100063168((uint64_t)(a1 + 130), (uint64_t)v20);
  }
  else
  {
    sub_100AC9188(":", (uint64_t)a1, 0, (uint64_t)v20);
    sub_100063168((uint64_t)(a1 + 130), (uint64_t)v20);
    if (a1[1260] >= 2u)
    {
      int v3 = 1;
      do
      {
        unsigned int v4 = v3 + 1;
        sub_100AC9188(":", (uint64_t)a1, v3, (uint64_t)v20);
        uint64_t v7 = 0x300000001;
        int v5 = off_1022DC4A0;
        long long v6 = xmmword_101D71140;
        uint64_t v8 = &v9;
        sub_100AC9C3C((uint64_t)v20, (uint64_t)(a1 + 130), (uint64_t)&v5);
        uint64_t v12 = 0x300000001;
        int v10 = off_1022DC4A0;
        long long v11 = xmmword_101D71140;
        __CLPK_integer v13 = &v14;
        sub_100061AC4((uint64_t)&v5, (uint64_t)&v10, 1.0 / (double)v4);
        uint64_t v17 = 0x300000001;
        int v15 = off_1022DC4A0;
        long long v16 = xmmword_101D71140;
        __CLPK_integer v18 = &v19;
        sub_100AC9B3C((uint64_t)(a1 + 130), (uint64_t)&v10, (uint64_t)&v15);
        sub_100063168((uint64_t)(a1 + 130), (uint64_t)&v15);
        int v3 = v4;
      }
      while (v4 < a1[1260]);
    }
  }
}