void sub_1010FF70C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  sub_10087B810(v11, v10);
  _Unwind_Resume(a1);
}

void sub_1010FF728()
{
  qword_1024852E0 = (uint64_t)"MAC";
  dword_1024852E8 = 1;
  word_1024852EC = 1;
  byte_1024852F0 = 0;
  byte_102485308 = 0;
  qword_102485310 = (uint64_t)"Channel";
  dword_102485318 = 1;
  word_10248531C = 0;
  byte_102485320 = 0;
  byte_102485338 = 0;
  qword_102485340 = (uint64_t)"Rssi";
  dword_102485348 = 1;
  word_10248534C = 0;
  byte_102485350 = 0;
  byte_102485368 = 0;
  qword_102485370 = (uint64_t)"ScanTimestamp";
  dword_102485378 = 2;
  word_10248537C = 0;
  byte_102485380 = 0;
  byte_102485398 = 0;
  qword_1024853A0 = (uint64_t)"Timestamp";
  dword_1024853A8 = 2;
  word_1024853AC = 1;
  byte_1024853B0 = 0;
  byte_1024853C8 = 0;
  qword_1024853D0 = (uint64_t)"Latitude";
  dword_1024853D8 = 2;
  word_1024853DC = 0;
  byte_1024853E0 = 0;
  byte_1024853F8 = 0;
  qword_102485400 = (uint64_t)"Longitude";
  dword_102485408 = 2;
  word_10248540C = 0;
  byte_102485410 = 0;
  byte_102485428 = 0;
  qword_102485430 = (uint64_t)"HorizontalAccuracy";
  dword_102485438 = 2;
  word_10248543C = 0;
  byte_102485440 = 0;
  byte_102485458 = 0;
  qword_102485460 = (uint64_t)"Altitude";
  dword_102485468 = 2;
  word_10248546C = 0;
  byte_102485470 = 0;
  byte_102485488 = 0;
  qword_102485490 = (uint64_t)"VerticalAccuracy";
  dword_102485498 = 2;
  word_10248549C = 0;
  byte_1024854A0 = 0;
  byte_1024854B8 = 0;
  qword_1024854C0 = (uint64_t)"LoiType";
  dword_1024854C8 = 1;
  word_1024854CC = 0;
  byte_1024854D0 = 0;
  byte_1024854E8 = 0;
  qword_1024854F0 = 0;
  dword_1024854F8 = 5;
  word_1024854FC = 0;
  byte_102485500 = 0;
  byte_102485518 = 0;
}

char *sub_1010FF8A0(char *__dst, uint64_t a2, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    *((void *)__dst + 2) = *((void *)a3 + 2);
    *(_OWORD *)__dst = v5;
  }
  *((void *)__dst + 3) = 0;
  *((void *)__dst + 4) = 0;
  *((void *)__dst + 5) = a2;
  *((void *)__dst + 46) = 0x800000000;
  *((void *)__dst + 63) = 0x800000000;
  *((void *)__dst + 80) = 0x800000000;
  *((void *)__dst + 89) = 0x800000000;
  *((void *)__dst + 98) = 0x800000000;
  *((void *)__dst + 107) = 0x800000000;
  *((void *)__dst + 116) = 0x800000000;
  *((void *)__dst + 125) = 0x800000000;
  *((void *)__dst + 130) = 0x3200000000;
  *((_DWORD *)__dst + 480) = 0;
  *((void *)__dst + 234) = 0;
  *(_OWORD *)(__dst + 1880) = 0u;
  *(_OWORD *)(__dst + 1928) = 0u;
  uint64_t v6 = 1960;
  *((void *)__dst + 243) = 0;
  do
  {
    v7 = &__dst[v6];
    *(void *)v7 = 0x800000000;
    *((void *)v7 + 17) = 0x800000000;
    *((void *)v7 + 30) = 0;
    *((void *)v7 + 27) = 0;
    *((void *)v7 + 28) = 0;
    *((void *)v7 + 26) = 0;
    v6 += 248;
    *((_DWORD *)v7 + 58) = 0;
  }
  while (v7 + 248 != __dst + 2952);
  double v8 = 0.0;
  double v9 = 0.0;
  do
  {
    double v9 = v9 + exp(v8 * -10.0) * 10.0;
    double v8 = v8 + 0.01;
  }
  while (v8 <= 1.0);
  *((double *)__dst + 3) = v9;
  double v10 = 0.0;
  int v11 = 62;
  do
  {
    double v10 = v10 + 0.00000555555556;
    --v11;
  }
  while (v11);
  int v12 = 180;
  do
  {
    double v10 = v10 + 0.00555555556;
    --v12;
  }
  while (v12);
  *((double *)__dst + 4) = v10;
  sub_1010FFA14((uint64_t)__dst);
  return __dst;
}

int64x2_t sub_1010FFA14(uint64_t a1)
{
  uint64_t v1 = 0;
  *(_DWORD *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 640) = 0;
  *(_DWORD *)(a1 + 712) = 0;
  *(_DWORD *)(a1 + 784) = 0;
  *(_DWORD *)(a1 + 856) = 0;
  *(_DWORD *)(a1 + 928) = 0;
  v2 = (_DWORD *)(a1 + 2192);
  *(_DWORD *)(a1 + 1000) = 0;
  do
  {
    *(v2 - 58) = 0;
    *(v2 - 24) = 0;
    *((void *)v2 - 2) = 0;
    *((void *)v2 - 1) = 0;
    _DWORD *v2 = v1;
    v1 += 2;
    *((void *)v2 - 3) = 0;
    v2 += 62;
  }
  while (v1 != 8);
  *(void *)(a1 + 1928) = 0x7FF8000000000000;
  *(int64x2_t *)(a1 + 1936) = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_OWORD *)(a1 + 1872) = 0u;
  *(void *)(a1 + 1896) = 0;
  *(void *)(a1 + 1888) = 0;
  *(void *)(a1 + 48) = 0xFFEFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 1952) = 0;
  int64x2_t result = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(int64x2_t *)(a1 + 1904) = result;
  *(void *)(a1 + 1848) = 0;
  *(void *)(a1 + 1864) = 0;
  *(void *)(a1 + 1856) = 0;
  return result;
}

void sub_1010FFAA8(uint64_t a1, double a2)
{
  double v4 = 0.0;
  int v5 = 361;
  double v6 = -180.0;
  do
  {
    double v4 = v4 + sub_10126D998(v6, 0.0, 40.0);
    double v6 = v6 + 1.0;
    --v5;
  }
  while (v5);
  double v7 = sub_10126D998(a2, 0.0, 40.0) / v4;
  double v8 = dbl_101DA73E0[a2 < 0.0];
  if (a2 < -60.0) {
    double v8 = 0.0;
  }
  log10(v7 / (v8 / *(double *)(a1 + 32)));
}

void *sub_1010FFB80(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(a1 + 1876) = a2[8];
  return memcpy((void *)(a1 + 48), a2, 0x140uLL);
}

unsigned __int16 *sub_1010FFBAC(uint64_t a1, double *a2, double a3, double a4, double a5, double a6)
{
  if (a4 == 1.79769313e308) {
    a4 = a2[27];
  }
  else {
    a2[27] = a4;
  }
  double v8 = a4;
  if (a3 != 1.79769313e308)
  {
    a2[27] = a3;
    double v8 = a3;
  }
  if ((*(_DWORD *)(a1 + 1872) & 7) == *((_DWORD *)a2 + 58))
  {
    a2[26] = a5 - a4;
    unint64_t v9 = *(unsigned __int16 *)(a1 + 368) + (unint64_t)*(unsigned __int16 *)(a1 + 370) - 1;
    unint64_t v10 = *(unsigned int *)(a1 + 372);
    if (v9 < v10) {
      unint64_t v10 = 0;
    }
    uint64_t v11 = a1 + 368 + 16 * (v9 - v10);
    double v12 = *(double *)(v11 + 8);
    double v13 = a5 - a4 + v8;
  }
  else
  {
    unint64_t v14 = *(unsigned __int16 *)a2 + (unint64_t)*((unsigned __int16 *)a2 + 1) - 1;
    unint64_t v15 = *((unsigned int *)a2 + 1);
    if (v14 < v15) {
      unint64_t v15 = 0;
    }
    uint64_t v11 = (uint64_t)&a2[2 * (v14 - v15)];
    double v12 = *(double *)(v11 + 8);
    double v13 = v8 + a2[26];
  }
  __double2 v16 = __sincos_stret(v13);
  double v17 = *(double *)(v11 + 16) + v16.__sinval * a6;
  *(double *)&long long v19 = v12 + v16.__cosval * a6;
  *((double *)&v19 + 1) = v17;
  return sub_1000C0748((unsigned __int16 *)a2, &v19);
}

uint64_t sub_1010FFCC0()
{
  return 0;
}

void sub_1010FFCCC(id a1)
{
  qword_1024192A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "IndoorOutdoor");
}

void sub_1010FFCFC(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1010FFD2C(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

double sub_1010FFD5C(unsigned __int16 *a1, unsigned int (*a2)(double, double), unint64_t a3)
{
  unint64_t v6 = a1[1];
  if (!a1[1])
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102311920);
    }
    uint64_t v11 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Assertion failed: n > 0, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 179,.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102311920);
      }
      double v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "T CMQueue<double>::getComparison(int (*)(const T, const T), size_t) const [T = double]", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  double v7 = *(double *)sub_1000C0B8C(a1, a3);
  if (v6 > a3)
  {
    do
    {
      double v8 = (double *)sub_1000C0B8C(a1, a3);
      double v9 = *v8;
      if (a2(*v8, v7)) {
        double v7 = v9;
      }
      ++a3;
    }
    while (v6 != a3);
  }
  return v7;
}

BOOL sub_1010FFF5C(double a1, double a2)
{
  return a2 < a1;
}

BOOL sub_1010FFF68(double a1, double a2)
{
  return a1 < a2;
}

void sub_1010FFF74(uint64_t a1, double *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a4;
  unint64_t v6 = a2;
  uint64_t v7 = a4 - 1;
  if (a4 != 1)
  {
    double v8 = a3;
    double v9 = a2;
    uint64_t v10 = a4 - 1;
    do
    {
      uint64_t v11 = *v8++;
      *(void *)v9++ = v11;
      --v10;
    }
    while (v10);
  }
  if (a5)
  {
    uint64_t v12 = 0;
    do
    {
      if (a4 == 1)
      {
        uint64_t v13 = v12 + 1;
      }
      else
      {
        uint64_t v13 = v12 + 1;
        unint64_t v14 = (double *)((char *)a3 + 8 * v7 * (v12 + 1));
        unint64_t v15 = a2;
        uint64_t v16 = a4 - 1;
        do
        {
          double v17 = *v14++;
          *unint64_t v15 = *v15 + *(double *)(a1 + 8 * v12) * v17;
          ++v15;
          --v16;
        }
        while (v16);
      }
      uint64_t v12 = v13;
    }
    while (v13 != a5);
  }
  a2[v7] = 1.0;
  if (a4 == 1)
  {
    double v19 = 1.0;
    do
    {
LABEL_18:
      *unint64_t v6 = *v6 / v19;
      ++v6;
      --v5;
    }
    while (v5);
    return;
  }
  uint64_t v18 = 0;
  double v19 = 1.0;
  do
  {
    long double v20 = exp(v6[v18]);
    v6[v18] = v20;
    double v19 = v19 + v20;
    ++v18;
  }
  while (v7 != v18);
  if (v5) {
    goto LABEL_18;
  }
}

double sub_10110006C(void *a1, uint64_t *a2)
{
  v2 = sub_10156C66C(a1, a2);
  void *v2 = off_102311950;
  v2[11] = 0;
  v2[12] = 0;
  *(int64x2_t *)(v2 + 13) = vdupq_n_s64(0x7FF8000000000000uLL);
  v2[15] = 0xBFF0000000000000;
  v2[16] = 0;
  *((_DWORD *)v2 + 34) = 0;
  v2[18] = 0;
  *((_DWORD *)v2 + 38) = 0;
  v2[20] = 0;
  *((_DWORD *)v2 + 42) = 0;
  v2[22] = 0;
  double result = 0.0;
  *(_OWORD *)(v2 + 3) = 0u;
  *(_OWORD *)(v2 + 5) = 0u;
  *(_OWORD *)(v2 + 7) = 0u;
  *(_OWORD *)((char *)v2 + 68) = 0u;
  return result;
}

uint64_t sub_1011000E8()
{
  return 1;
}

uint64_t sub_1011000F0(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 16))(&v13);
  uint64_t v7 = v13;
  unint64_t v6 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  double v8 = *(std::__shared_weak_count **)(a1 + 96);
  *(void *)(a1 + 88) = v7;
  *(void *)(a1 + 96) = v6;
  if (v8) {
    sub_1000DB0A0(v8);
  }
  if (v14) {
    sub_1000DB0A0(v14);
  }
  if (v5) {
    sub_1000DB0A0(v5);
  }
  long long v9 = *a2;
  long long v10 = a2[1];
  long long v11 = a2[2];
  *(_OWORD *)(a1 + 68) = *(long long *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 56) = v11;
  *(_OWORD *)(a1 + 40) = v10;
  *(_OWORD *)(a1 + 24) = v9;
  return 1;
}

void sub_1011001C4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011001DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (v1) {
    sub_100EC8B00(v1);
  }
  return 1;
}

__n128 sub_101100200@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 104);
  long long v3 = *(_OWORD *)(a1 + 120);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_101100210(uint64_t a1)
{
  *(_DWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  return 1;
}

BOOL sub_10110022C(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v3 = a3 - 12;
  if (a3 < 0xC) {
    return 0;
  }
  unint64_t v4 = a3 + 12;
  if (a3 + 12 >= (uint64_t)(a2[1] - *a2) >> 6) {
    return 0;
  }
  double v5 = 0.0;
  if (v3 <= v4)
  {
    unint64_t v6 = (float *)(*a2 + (a3 << 6) - 752);
    double v5 = 0.0;
    do
    {
      float v7 = *v6;
      v6 += 16;
      if (*(double *)(a1 + 144) * 0.77 <= v7) {
        double v5 = v5 + 1.0;
      }
      ++v3;
    }
    while (v3 <= v4);
  }
  return v5 / 25.0 >= 0.5;
}

uint64_t sub_1011002B4(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a1 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 72);
  v2 = *(uint64_t **)(a2 + 48);
  uint64_t v3 = *v2;
  if (*v2 != v2[1])
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    double v8 = *(double *)(v3 + 8);
    long long v9 = (long long *)(a1 + 24);
    do
    {
      long long v10 = (uint64_t *)(v3 + v6);
      double v11 = *(double *)v10;
      double v12 = *((double *)v10 + 1);
      float v13 = *((float *)v10 + 4);
      float v14 = *((float *)v10 + 5);
      uint64_t v15 = v10[3];
      float v16 = *((float *)v10 + 8);
      v34[0] = *(_OWORD *)((char *)v10 + 36);
      *(_OWORD *)((char *)v34 + 12) = *((_OWORD *)v10 + 3);
      *(double *)v28 = v11;
      *(double *)&v28[1] = v12;
      float v29 = v13;
      float v30 = v14;
      uint64_t v31 = v15;
      float v32 = v16;
      *(_OWORD *)v33 = v34[0];
      *(_OWORD *)&v33[12] = *(_OWORD *)((char *)v34 + 12);
      long long v17 = *v9;
      long long v18 = v9[1];
      long long v19 = v9[2];
      *(_OWORD *)&v27[12] = *(long long *)((char *)v9 + 44);
      v26[1] = v18;
      *(_OWORD *)v27 = v19;
      v26[0] = v17;
      BOOL v20 = sub_1013EFA84((uint64_t)v28, (uint64_t)v26);
      if (v12 - v8 < 2700.0 && v16 >= 0.0 && v16 <= 1500.0 && v20 && v14 > 0.39)
      {
        double v21 = v13;
        double v22 = *(double *)(a1 + 144);
        v23 = *(uint64_t **)(a2 + 48);
        if (v22 * 0.77 <= v21 && v22 + v22 >= v21 && sub_10110022C(a1, *(void **)(a2 + 48), v7))
        {
          float v24 = v21 / v22;
          *(float *)(a1 + 168) = *(float *)(a1 + 168) + v24;
          ++*(void *)(a1 + 176);
          *(float *)(a1 + 152) = v16 + *(float *)(a1 + 152);
          ++*(void *)(a1 + 160);
        }
      }
      else
      {
        v23 = *(uint64_t **)(a2 + 48);
      }
      ++v7;
      uint64_t v3 = *v23;
      v6 += 64;
    }
    while (v7 < (v23[1] - *v23) >> 6);
  }
  return 1;
}

uint64_t sub_1011004E4(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 160);
  if (qword_1024192F0 != -1) {
    dispatch_once(&qword_1024192F0, &stru_1023119B0);
  }
  uint64_t v3 = qword_1024192F8;
  if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v4 = *(void *)(a1 + 160);
    double v5 = 0.0;
    double v6 = 0.0;
    if (v4) {
      double v6 = (float)(*(float *)(a1 + 152) / (float)v4);
    }
    uint64_t v7 = *(void *)(a1 + 144);
    unint64_t v8 = *(void *)(a1 + 176);
    if (v8) {
      double v5 = (float)(*(float *)(a1 + 168) / (float)v8);
    }
    *(_DWORD *)buf = 67110912;
    BOOL v16 = v2 > 0xE;
    __int16 v17 = 2048;
    unint64_t v18 = v4;
    __int16 v19 = 1024;
    int v20 = 15;
    __int16 v21 = 2048;
    double v22 = v6;
    __int16 v23 = 2048;
    uint64_t v24 = v7;
    __int16 v25 = 2048;
    uint64_t v26 = 0x3FE8A3D70A3D70A4;
    __int16 v27 = 2048;
    uint64_t v28 = 0x4000000000000000;
    __int16 v29 = 2048;
    double v30 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "powerValid,%d,sampleCount,%zu,requiredSampleCount,%d,meanPower,%f,hrmax,%f,hrPctLow,%f,hrPctHigh,%f,meanHRMaxPercent,%f", buf, 0x4Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_1023119B0);
    }
    float v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLCyclingFTPHRMax::execute()", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  if (v2 < 0xF)
  {
    double v10 = -1.0;
    double v11 = NAN;
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + 160);
    double v10 = 0.5;
    if (v9) {
      double v11 = (float)(*(float *)(a1 + 152) / (float)v9);
    }
    else {
      double v11 = 0.0;
    }
  }
  int v12 = *(_DWORD *)(a1 + 136);
  *(double *)(a1 + 104) = v11;
  *(void *)(a1 + 112) = 0x7FF8000000000000;
  *(double *)(a1 + 120) = v10;
  *(_DWORD *)(a1 + 128) = v12;
  *(_DWORD *)(a1 + 132) = 11;
  return 1;
}

void sub_101100828(void *a1)
{
  sub_101100890(a1);

  operator delete();
}

void sub_101100860(id a1)
{
  qword_1024192F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CyclingPower");
}

void *sub_101100890(void *a1)
{
  *a1 = off_102311950;
  unint64_t v2 = (std::__shared_weak_count *)a1[12];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  *a1 = off_1022FA060;
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    sub_1000DB0A0(v3);
  }
  return a1;
}

double sub_101100904(uint64_t a1)
{
  *(_DWORD *)a1 = 28;
  double result = 0.333333333;
  *(_OWORD *)(a1 + 8) = xmmword_101DA7450;
  *(unsigned char *)(a1 + 24) = 1;
  return result;
}

void sub_101100924(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (a3[1] == *a3) {
    return;
  }
  unint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = 126 - 2 * __clz(0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v6 - v5) >> 3));
  uint64_t v8 = v6 == v5 ? 0 : v7;
  sub_101103844(v5, v6, v8, 1);
  unint64_t v9 = a3[1];
  unint64_t v10 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *a3) >> 3));
  uint64_t v11 = v9 == *a3 ? 0 : v10;
  sub_101104FE4(*a3, v9, v11, 1);
  unint64_t v12 = *a3;
  unint64_t v13 = a3[1];
  if (*a3 == v13) {
    return;
  }
  unint64_t v14 = 0;
  unint64_t v15 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a2[1] - *a2) >> 3);
  uint64_t v16 = *a2 + 76;
  do
  {
    if (v14 >= v15) {
      goto LABEL_29;
    }
    double v17 = *(double *)v12;
    unint64_t v18 = (int *)(v16 + 120 * v14);
    do
    {
      double v19 = (*(double *)(v18 - 17) + *(double *)(v18 - 15)) * 0.5;
      if (v19 < v17) {
        goto LABEL_18;
      }
      if (v19 > *(double *)(v12 + 8)) {
        goto LABEL_29;
      }
      uint64_t v20 = (*(_DWORD *)(v12 + 16) - 13);
      if (v20 > 0x3D)
      {
LABEL_28:
        int v21 = 5;
        goto LABEL_17;
      }
      if (((1 << (*(unsigned char *)(v12 + 16) - 13)) & 0x2000000284400019) != 0)
      {
        int v21 = 4;
LABEL_17:
        *unint64_t v18 = v21;
        goto LABEL_18;
      }
      if (v20 == 24)
      {
        int v21 = 3;
        goto LABEL_17;
      }
      if (v20 != 39) {
        goto LABEL_28;
      }
      if (*(unsigned char *)(v12 + 20)) {
        int v22 = 1;
      }
      else {
        int v22 = 2;
      }
      *unint64_t v18 = v22;
      if (!*(v18 - 1)) {
        goto LABEL_29;
      }
LABEL_18:
      ++v14;
      v18 += 30;
    }
    while (v15 != v14);
    unint64_t v14 = v15;
LABEL_29:
    v12 += 24;
  }
  while (v12 != v13);
}

void sub_101100AC0(double a1, uint64_t a2, uint64_t *a3, float *a4)
{
  uint64_t v4 = *a3;
  uint64_t v5 = a3[1];
  if (*a3 != v5)
  {
    double v6 = a1;
    do
    {
      LODWORD(a1) = *(_DWORD *)(v4 + 24);
      double v8 = (double)*(unint64_t *)&a1 / *(double *)(v4 + 40);
      *(double *)(v4 + 80) = v8;
      double v9 = *(double *)(v4 + 64)
         + (double)(*(_DWORD *)(v4 + 24) - *(_DWORD *)(v4 + 56))
         * (sub_100619054(v8, a4[2], a4[3], a4[5]) + v6);
      *(double *)(v4 + 32) = v9;
      a1 = v9 / *(double *)(v4 + 40);
      *(double *)(v4 + 96) = a1;
      v4 += 120;
    }
    while (v4 != v5);
  }
}

void sub_101100B58(uint64_t a1@<X0>, unint64_t *a2@<X1>, double **a3@<X2>, double **a4@<X3>, double **a5@<X4>, double **a6@<X5>, uint64_t a7@<X6>, float *a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>)
{
  *(double *)a9 = a11;
  *(void *)(a9 + 8) = 0;
  *(_OWORD *)(a9 + 24) = 0u;
  v320 = (double *)(a9 + 24);
  *(_DWORD *)(a9 + 16) = 0;
  *(_OWORD *)(a9 + 40) = 0u;
  *(_OWORD *)(a9 + 56) = 0u;
  *(double *)(a9 + 72) = a12;
  *(_OWORD *)(a9 + 80) = 0u;
  *(_OWORD *)(a9 + 96) = 0u;
  *(_OWORD *)(a9 + 112) = 0u;
  *(_OWORD *)(a9 + 128) = 0u;
  *(_OWORD *)(a9 + 140) = 0u;
  *(_OWORD *)(a9 + 160) = 0u;
  *(_OWORD *)(a9 + 176) = 0u;
  *(_OWORD *)(a9 + 192) = 0u;
  *(_OWORD *)(a9 + 208) = 0u;
  *(_OWORD *)(a9 + 224) = 0u;
  *(_OWORD *)(a9 + 240) = 0u;
  unint64_t v20 = *a2;
  unint64_t v19 = a2[1];
  if (*a2 != v19)
  {
    while (1)
    {
      double v21 = *(double *)(v20 + 16);
      if (v21 > a11 || v21 < a10) {
        break;
      }
      v20 += 120;
      if (v20 == v19) {
        goto LABEL_19;
      }
    }
  }
  if (v20 != v19)
  {
    unint64_t v23 = v20 + 120;
    if (v20 + 120 != v19)
    {
      do
      {
        double v24 = *(double *)(v23 + 16);
        if (v24 <= a11 && v24 >= a10)
        {
          long long v26 = *(_OWORD *)v23;
          long long v27 = *(_OWORD *)(v23 + 16);
          long long v28 = *(_OWORD *)(v23 + 48);
          *(_OWORD *)(v20 + 32) = *(_OWORD *)(v23 + 32);
          *(_OWORD *)(v20 + 48) = v28;
          *(_OWORD *)unint64_t v20 = v26;
          *(_OWORD *)(v20 + 16) = v27;
          long long v29 = *(_OWORD *)(v23 + 64);
          long long v30 = *(_OWORD *)(v23 + 80);
          long long v31 = *(_OWORD *)(v23 + 96);
          *(void *)(v20 + 112) = *(void *)(v23 + 112);
          *(_OWORD *)(v20 + 80) = v30;
          *(_OWORD *)(v20 + 96) = v31;
          *(_OWORD *)(v20 + 64) = v29;
          v20 += 120;
        }
        v23 += 120;
      }
      while (v23 != v19);
      unint64_t v19 = a2[1];
    }
  }
  if (v20 != v19) {
    a2[1] = v20;
  }
LABEL_19:
  __p = 0;
  v338 = 0;
  uint64_t v339 = 0;
  float v32 = sub_1003B2E38(&__p, *(const void **)a7, *(void *)(a7 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a7 + 8) - *(void *)a7) >> 3));
  sub_101100924((uint64_t)v32, a2, (unint64_t *)&__p);
  v33 = __p;
  if (__p)
  {
    v338 = __p;
    operator delete(__p);
  }
  sub_101100AC0(a12, (uint64_t)v33, (uint64_t *)a2, a8);
  v325[0] = 0;
  v325[1] = 0;
  *(void *)&v326[0] = 0;
  unint64_t v34 = *a2;
  unint64_t v35 = a2[1];
  double v36 = 0.0;
  if (*a2 == v35)
  {
    int v38 = 0;
  }
  else
  {
    v37 = 0;
    int v38 = 0;
    do
    {
      if (*(_DWORD *)(v34 + 72) == 1 && (*(_DWORD *)(v34 + 76) - 3) >= 2)
      {
        float v39 = *(double *)(v34 + 80);
        if ((unint64_t)v37 >= *(void *)&v326[0])
        {
          v41 = (float *)v325[0];
          uint64_t v42 = ((char *)v37 - (char *)v325[0]) >> 2;
          unint64_t v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 62) {
            sub_1001D7FD4();
          }
          int64_t v44 = *(void *)&v326[0] - (unint64_t)v325[0];
          if ((uint64_t)(*(void *)&v326[0] - (unint64_t)v325[0]) >> 1 > v43) {
            unint64_t v43 = v44 >> 1;
          }
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v45 = v43;
          }
          if (v45)
          {
            v46 = (char *)sub_10017EA34((uint64_t)v326, v45);
            v41 = (float *)v325[0];
            v37 = (float *)v325[1];
          }
          else
          {
            v46 = 0;
          }
          v47 = (float *)&v46[4 * v42];
          float *v47 = v39;
          v40 = v47 + 1;
          while (v37 != v41)
          {
            int v48 = *((_DWORD *)v37-- - 1);
            *((_DWORD *)v47-- - 1) = v48;
          }
          v325[0] = v47;
          v325[1] = v40;
          *(void *)&v326[0] = &v46[4 * v45];
          if (v41) {
            operator delete(v41);
          }
        }
        else
        {
          float *v37 = v39;
          v40 = v37 + 1;
        }
        v325[1] = v40;
        ++v38;
        v37 = (float *)v40;
      }
      v34 += 120;
    }
    while (v34 != v35);
    if (v38 > 19)
    {
      double v49 = sub_100AD3568((uint64_t)v325, 25);
      double v36 = sub_100AD3568((uint64_t)v325, 75);
      goto LABEL_47;
    }
  }
  double v49 = 0.0;
LABEL_47:
  if (qword_102419200 != -1) {
    dispatch_once(&qword_102419200, &stru_1023119F0);
  }
  v50 = qword_102419208;
  if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218496;
    *(double *)&uint8_t buf[4] = v49;
    *(_WORD *)&buf[12] = 2048;
    *(double *)v352 = v36;
    *(_WORD *)&v352[8] = 1024;
    *(_DWORD *)v353 = v38;
    _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "minCadenceForBouts,%.3f,minCadenceForWorkouts,%.3f,boutsUsed,%d", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419200 != -1) {
      dispatch_once(&qword_102419200, &stru_1023119F0);
    }
    int v340 = 134218496;
    *(double *)v341 = v49;
    *(_WORD *)&v341[8] = 2048;
    *(double *)v342 = v36;
    *(_WORD *)&v342[8] = 1024;
    *(_DWORD *)v343 = v38;
    v279 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "P6MWDUserCadences (anonymous namespace)::calculateCadences(const std::vector<CLPredictedWalkDistanceBoutEntry> &)", "%s\n", v279);
    if (v279 != buf) {
      free(v279);
    }
  }
  if (v325[0])
  {
    v325[1] = v325[0];
    operator delete(v325[0]);
  }
  v313 = a6;
  unint64_t v52 = *a2;
  unint64_t v53 = a2[1];
  if (*a2 == v53)
  {
    int v55 = 0;
    int v54 = 0;
    *(void *)&long long v58 = 0;
    double v321 = 0.0;
  }
  else
  {
    int v54 = 0;
    int v55 = 0;
    double v56 = *(double *)(a9 + 240);
    double v57 = a11 + -604800.0;
    long long v58 = 0uLL;
    double v321 = 0.0;
    double v59 = 2.33333325;
    float64x2_t v60 = (float64x2_t)xmmword_101DA7460;
    double v61 = 360.0;
    *(double *)&uint64_t v62 = 604800.0;
    *(double *)&uint64_t v63 = 0.949999988;
    *(double *)&uint64_t v64 = 330.0;
    *(double *)&uint64_t v65 = 500.0;
    unint64_t v66 = *a2;
    do
    {
      if (*(_DWORD *)(v66 + 72)
        || (*(void *)&long long v51 = *(void *)(v66 + 40), *(double *)&v51 > 361.0)
        || (int v67 = *(_DWORD *)(v66 + 76), v67 == 4)
        || (double v68 = *(double *)(v66 + 8), *(double *)(v66 + 16) - v68 < 120.0))
      {
        *(void *)(v66 + 88) = 0xBFF0000000000000;
      }
      else if (v67 == 3 || (double v69 = *(double *)(v66 + 80), v69 > v59))
      {
        *(void *)(v66 + 88) = 0xBFF0000000000000;
        double v56 = *(double *)&v51 + v56;
        *(double *)(a9 + 240) = v56;
        double v70 = *(double *)(a9 + 200);
        if (v70 < *(double *)(v66 + 32)) {
          double v70 = *(double *)(v66 + 32);
        }
        *(double *)(a9 + 200) = v70;
      }
      else if (v69 >= v49)
      {
        double v304 = *(double *)&v65;
        double v305 = *(double *)&v64;
        double v307 = v49;
        float64x2_t v309 = v60;
        double v310 = v59;
        double v311 = v57;
        long long v312 = v58;
        double v322 = v36;
        int v318 = v55;
        double v308 = v61;
        double v71 = *(double *)&v62;
        long double v72 = *(double *)&v63;
        long long v303 = v51;
        double v302 = pow(*(double *)&v51 / v61, 3.0);
        *(double *)&uint64_t v306 = v72;
        long double v73 = pow(v72, (a11 - v68) / v71);
        *((void *)&v51 + 1) = *((void *)&v303 + 1);
        *(double *)&uint64_t v64 = v305;
        double v74 = v302 * v73;
        *(long double *)(v66 + 88) = v302 * v73;
        if (*(double *)&v303 >= v305 && v67 == 2)
        {
          double v75 = *(double *)(v66 + 32);
          double v36 = v322;
          int v55 = v318;
          long long v58 = v312;
          double v57 = v311;
          float64x2_t v60 = v309;
          *(double *)&uint64_t v65 = v304;
          if (v69 >= v322 || v75 > v304)
          {
            *(double *)(v66 + 88) = v74 * 4.0;
            double v59 = v310;
            *(double *)&uint64_t v62 = v71;
            double v61 = v308;
            uint64_t v63 = v306;
            double v49 = v307;
            if (v68 >= v311) {
              int v55 = v318 + 1;
            }
          }
          else
          {
            double v59 = v310;
            *(double *)&uint64_t v62 = v71;
            double v61 = v308;
            uint64_t v63 = v306;
            double v49 = v307;
          }
        }
        else
        {
          double v75 = *(double *)(v66 + 32);
          int v55 = v318;
          double v36 = v322;
          long long v58 = v312;
          double v59 = v310;
          double v57 = v311;
          float64x2_t v60 = v309;
          *(double *)&uint64_t v62 = v71;
          double v61 = v308;
          uint64_t v63 = v306;
          double v49 = v307;
          *(double *)&uint64_t v65 = v304;
        }
        ++v54;
        *(int32x2_t *)&long long v58 = vsub_s32(*(int32x2_t *)&v58, vmovn_s64(vcgtq_f64((float64x2_t)vdupq_lane_s64(v303, 0), v60)));
        double v76 = v321;
        if (v321 < v75) {
          double v76 = v75;
        }
        double v321 = v76;
        double v77 = v61 / *(double *)&v303 * v75;
        if (*(double *)(a9 + 248) >= v77) {
          double v77 = *(double *)(a9 + 248);
        }
        *(double *)(a9 + 248) = v77;
      }
      else
      {
        *(void *)(v66 + 88) = 0;
      }
      v66 += 120;
    }
    while (v66 != v53);
  }
  *(double *)(a9 + 48) = v321;
  *(_DWORD *)(a9 + 80) = v54;
  *(void *)(a9 + 84) = v58;
  unint64_t v78 = 126 - 2 * __clz(0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v53 - v52) >> 3));
  int v319 = v55;
  *(_DWORD *)(a9 + 92) = v55;
  *(_DWORD *)(a9 + 152) = v38;
  *(double *)(a9 + 160) = v49;
  *(double *)(a9 + 168) = v36;
  if (v53 == v52) {
    uint64_t v79 = 0;
  }
  else {
    uint64_t v79 = v78;
  }
  sub_101105BD0(v52, v53, v79, 1);
  v334 = 0;
  v335 = 0;
  v336 = 0;
  unint64_t v80 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a2[1] - *a2) >> 3);
  buf[0] = 0;
  sub_100BC9C68(&v333, v80, buf);
  unint64_t v81 = *a2;
  unint64_t v82 = a2[1];
  if (v82 == *a2)
  {
    unint64_t v81 = a2[1];
  }
  else
  {
    unint64_t v83 = 0;
    v84 = v335;
    double v85 = 0.0;
    do
    {
      v86 = (unint64_t *)v334;
      uint64_t v87 = (char *)v84 - (unsigned char *)v334;
      if ((unint64_t)((char *)v84 - (unsigned char *)v334) <= 0x10) {
        double v88 = 0.0;
      }
      else {
        double v88 = 0.75;
      }
      if (*(double *)(v81 + 120 * v83 + 88) > v88)
      {
        if (v84 >= v336)
        {
          uint64_t v90 = v87 >> 3;
          unint64_t v91 = (v87 >> 3) + 1;
          if (v91 >> 61) {
            sub_1001D7FD4();
          }
          uint64_t v92 = (char *)v336 - (unsigned char *)v334;
          if (((char *)v336 - (unsigned char *)v334) >> 2 > v91) {
            unint64_t v91 = v92 >> 2;
          }
          if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v93 = v91;
          }
          if (v93)
          {
            v94 = (char *)sub_1000DA54C((uint64_t)&v336, v93);
            v86 = (unint64_t *)v334;
            v84 = v335;
          }
          else
          {
            v94 = 0;
          }
          v95 = (unint64_t *)&v94[8 * v90];
          unint64_t *v95 = v83;
          v89 = v95 + 1;
          while (v84 != v86)
          {
            unint64_t v96 = *--v84;
            *--v95 = v96;
          }
          v334 = v95;
          v335 = v89;
          v336 = (unint64_t *)&v94[8 * v93];
          if (v86) {
            operator delete(v86);
          }
        }
        else
        {
          unint64_t *v84 = v83;
          v89 = v84 + 1;
        }
        v335 = v89;
        unint64_t v81 = *a2;
        uint64_t v97 = *a2 + 120 * v83;
        double v98 = *(double *)(v97 + 88);
        double v85 = v85 + v98;
        *(void *)((char *)v333 + ((v83 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v83;
        *(double *)(v97 + 104) = v98;
        unint64_t v82 = a2[1];
        v84 = v89;
      }
      if (v85 > 2.0) {
        break;
      }
      ++v83;
    }
    while (v83 < 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v82 - v81) >> 3));
  }
  v330 = 0;
  v331 = 0;
  unint64_t v332 = 0;
  v327 = 0;
  v328 = 0;
  v329 = 0;
  memset(v326, 0, sizeof(v326));
  *(_OWORD *)v325 = 0u;
  if (v82 == v81)
  {
    int64_t v127 = 0;
    double v100 = 0.0;
    v128 = (double *)&byte_101D1BF2C[212];
  }
  else
  {
    unint64_t v99 = 0;
    double v100 = 0.0;
    do
    {
      if (*(double *)(v81 + 120 * v99 + 88) >= 0.0)
      {
        unint64_t v101 = v81 + 120 * v99;
        uint64_t v102 = *(void *)(v101 + 40);
        uint64_t v103 = *(void *)(v101 + 96);
        v104 = v328;
        if (v328 >= v329)
        {
          v106 = (double *)v327;
          uint64_t v107 = ((char *)v328 - (unsigned char *)v327) >> 4;
          unint64_t v108 = v107 + 1;
          if ((unint64_t)(v107 + 1) >> 60) {
            sub_1001D7FD4();
          }
          uint64_t v109 = (char *)v329 - (unsigned char *)v327;
          if (((char *)v329 - (unsigned char *)v327) >> 3 > v108) {
            unint64_t v108 = v109 >> 3;
          }
          if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v110 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v110 = v108;
          }
          if (v110)
          {
            v111 = (char *)sub_1000C571C((uint64_t)&v329, v110);
            v106 = (double *)v327;
            v104 = v328;
          }
          else
          {
            v111 = 0;
          }
          v112 = &v111[16 * v107];
          *(void *)v112 = v102;
          *((void *)v112 + 1) = v103;
          v113 = v112;
          if (v104 != v106)
          {
            do
            {
              *((_OWORD *)v113 - 1) = *((_OWORD *)v104 - 1);
              v113 -= 16;
              v104 -= 2;
            }
            while (v104 != v106);
            v106 = (double *)v327;
          }
          v105 = (double *)(v112 + 16);
          v327 = v113;
          v328 = (double *)(v112 + 16);
          v329 = (double *)&v111[16 * v110];
          if (v106) {
            operator delete(v106);
          }
        }
        else
        {
          *(void *)v328 = v102;
          *((void *)v104 + 1) = v103;
          v105 = v104 + 2;
        }
        v328 = v105;
        uint64_t v114 = *a2 + 120 * v99;
        double v115 = *(double *)(v114 + 40);
        sub_101103638((uint64_t)v325, v115, *(double *)(v114 + 96));
        double v100 = v100 + v115;
        unint64_t v81 = *a2;
      }
      if (*(_DWORD *)(v81 + 120 * v99 + 72) == 1 || *(double *)(v81 + 120 * v99 + 88) >= 0.0)
      {
        v116 = (double *)(v81 + 120 * v99 + 96);
        v117 = v331;
        if ((unint64_t)v331 >= v332)
        {
          v119 = (double *)v330;
          int64_t v120 = ((char *)v331 - (unsigned char *)v330) >> 3;
          unint64_t v121 = v120 + 1;
          if ((unint64_t)(v120 + 1) >> 61) {
            sub_1001D7FD4();
          }
          uint64_t v122 = v332 - (void)v330;
          if ((uint64_t)(v332 - (void)v330) >> 2 > v121) {
            unint64_t v121 = v122 >> 2;
          }
          if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v123 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v123 = v121;
          }
          if (v123)
          {
            v124 = (char *)sub_1000DA54C((uint64_t)&v332, v123);
            v119 = (double *)v330;
            v117 = v331;
          }
          else
          {
            v124 = 0;
          }
          v125 = (double *)&v124[8 * v120];
          double *v125 = *v116;
          v118 = v125 + 1;
          while (v117 != v119)
          {
            uint64_t v126 = *((void *)v117-- - 1);
            *((void *)v125-- - 1) = v126;
          }
          v330 = v125;
          v331 = v118;
          unint64_t v332 = (unint64_t)&v124[8 * v123];
          if (v119) {
            operator delete(v119);
          }
        }
        else
        {
          double *v331 = *v116;
          v118 = v117 + 1;
        }
        v331 = v118;
        unint64_t v81 = *a2;
      }
      ++v99;
    }
    while (v99 < 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a2[1] - v81) >> 3));
    int64_t v127 = (char *)v331 - (unsigned char *)v330;
    v128 = (double *)(byte_101D1BF2C + 212);
    if (v331 != v330)
    {
      sub_10110733C((double *)v330, v331, 126 - 2 * __clz(v127 >> 3), 1);
      v129 = v330;
      int64_t v127 = (char *)v331 - (unsigned char *)v330;
      double v130 = (double)(unint64_t)(((char *)v331 - (unsigned char *)v330) >> 3);
      *(void *)(a9 + 224) = *((void *)v330 + (int)(v130 * 0.1));
      *(void *)(a9 + 232) = v129[(int)(v130 * 0.05)];
    }
  }
  unint64_t v131 = (char *)v328 - (unsigned char *)v327;
  *(_DWORD *)(a9 + 216) = (unint64_t)((char *)v328 - (unsigned char *)v327) >> 4;
  *(_DWORD *)(a9 + 220) = (unint64_t)v127 >> 3;
  double v132 = 0.0;
  if (v131 >= 0x141)
  {
    double v132 = sub_10126D5B4((double **)&v327, 0);
    double v134 = v133;
    double v135 = v128[116];
    *(double *)(a9 + 32) = (v133 + v132 * v135) * v135;
    *(double *)(a9 + 96) = sub_1011036E8((uint64_t)v325);
    *(double *)(a9 + 104) = v132;
    v136 = (double *)v327;
    uint64_t v137 = ((char *)v328 - (unsigned char *)v327) >> 4;
    double v138 = v100 / (double)(unint64_t)v137;
    if (v328 == v327)
    {
      double v140 = 0.0;
      double v139 = 0.0;
    }
    else
    {
      double v139 = 0.0;
      double v140 = 0.0;
      do
      {
        double v141 = *v136;
        double v142 = v136[1];
        v136 += 2;
        double v139 = v139 + (v141 - v138) * (v141 - v138);
        double v140 = v140 + (v134 + v141 * v132 - v142) * (v134 + v141 * v132 - v142);
      }
      while (v136 != v328);
    }
    *(double *)(a9 + 112) = sqrt(v140 / (double)(unint64_t)(v137 - 2))
                          * sqrt(1.0 / (double)(unint64_t)v137 + 1.0 + (v135 - v138) * (v135 - v138) / v139);
  }
  unint64_t v143 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a2[1] - *a2) >> 3);
  *(void *)buf = 0;
  sub_1001DCEDC(v324, v143, buf);
  int64_t v144 = a2[1] - *a2;
  if (v144)
  {
    unint64_t v145 = v144 / 120;
    v146 = (double *)v324[0];
    if (v145 <= 1) {
      unint64_t v145 = 1;
    }
    v147 = (double *)(*a2 + 96);
    double v148 = v128[116];
    do
    {
      *v146++ = *v147 + v132 * (v148 - *(v147 - 7));
      v147 += 15;
      --v145;
    }
    while (v145);
  }
  *(_DWORD *)buf = 0;
  sub_100D0C2C0(v323, ((char *)v335 - (unsigned char *)v334) >> 3, buf);
  unint64_t v149 = *a2;
  unint64_t v150 = a2[1];
  v151 = (unint64_t *)v334;
  v152 = v335;
  int64_t v153 = v150 - *a2;
  if (v150 != *a2)
  {
    unint64_t v154 = 0;
    unint64_t v155 = v153 / 120;
    v156 = (char *)v333;
    unint64_t v157 = ((char *)v335 - (unsigned char *)v334) >> 3;
    v158 = (double *)v324[0];
    v159 = v323[0];
    if (v157 <= 1) {
      unint64_t v157 = 1;
    }
    if (v155 <= 1) {
      unint64_t v155 = 1;
    }
    do
    {
      if (((*(void *)&v156[(v154 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v154) & 1) == 0)
      {
        double v160 = *(double *)(v149 + 120 * v154 + 88);
        if (v160 > 0.0 && v152 != v151)
        {
          uint64_t v162 = 0;
          double v163 = 0.0;
          uint64_t v164 = -1;
          do
          {
            unint64_t v165 = v151[v162];
            if (v158[v165] < v158[v154])
            {
              unint64_t v166 = v149 + 120 * v165;
              if (*(double *)(v166 + 32) > v163)
              {
                double v163 = *(double *)(v166 + 32);
                uint64_t v164 = v162;
              }
            }
            ++v162;
          }
          while (v157 != v162);
          if (v163 > 0.0)
          {
            int v167 = v159[v164];
            if (v167 <= 4)
            {
              unint64_t v168 = v149 + 120 * v151[v164];
              *(double *)(v168 + 88) = v160 + *(double *)(v168 + 88);
              v159[v164] = v167 + 1;
              *(void *)(v149 + 120 * v154 + 112) = *(void *)(v149 + 120 * v164 + 8);
            }
          }
        }
      }
      ++v154;
    }
    while (v154 != v155);
    v151 = (unint64_t *)v334;
    v152 = v335;
  }
  double *v320 = 0.0;
  if (v152 != v151)
  {
    unint64_t v169 = 0;
    *(void *)(a9 + 176) = 0x408F380000000000;
    double v170 = 0.0;
    do
    {
      unint64_t v171 = v151[v169];
      unint64_t v172 = *a2;
      if (qword_102419200 != -1) {
        dispatch_once(&qword_102419200, &stru_1023119F0);
      }
      v173 = qword_102419208;
      if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v174 = v172 + 120 * v171;
        uint64_t v175 = *(void *)(v174 + 104);
        double v176 = *(double *)(v174 + 88);
        uint64_t v177 = *(void *)(v174 + 32);
        uint64_t v178 = *(void *)(v174 + 40);
        LODWORD(v174) = *(_DWORD *)(v174 + 24);
        *(_DWORD *)buf = 134219520;
        *(double *)&uint8_t buf[4] = a11;
        *(_WORD *)&buf[12] = 2048;
        *(void *)v352 = v169;
        *(_WORD *)&v352[8] = 2048;
        *(void *)v353 = v175;
        *(_WORD *)&v353[8] = 2048;
        double v354 = v176;
        __int16 v355 = 2048;
        *(void *)v356 = v177;
        *(_WORD *)&v356[8] = 2048;
        *(void *)&v356[10] = v178;
        *(_WORD *)&v356[18] = 1024;
        *(_DWORD *)v357 = v174;
        _os_log_impl((void *)&_mh_execute_header, v173, OS_LOG_TYPE_DEBUG, "Week,%.0f,Support,%lu,BaseConf,%.3f,Conf+,%.3f,Dist,%.1f,timeWithSteps,%.1f,steps,%d", buf, 0x44u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419200 != -1) {
          dispatch_once(&qword_102419200, &stru_1023119F0);
        }
        unint64_t v188 = v172 + 120 * v171;
        uint64_t v189 = *(void *)(v188 + 104);
        double v190 = *(double *)(v188 + 88);
        uint64_t v191 = *(void *)(v188 + 32);
        uint64_t v192 = *(void *)(v188 + 40);
        LODWORD(v188) = *(_DWORD *)(v188 + 24);
        int v340 = 134219520;
        *(double *)v341 = a11;
        *(_WORD *)&v341[8] = 2048;
        *(void *)v342 = v169;
        *(_WORD *)&v342[8] = 2048;
        *(void *)v343 = v189;
        *(_WORD *)&v343[8] = 2048;
        double v344 = v190;
        __int16 v345 = 2048;
        *(void *)v346 = v191;
        *(_WORD *)&v346[8] = 2048;
        *(void *)&v346[10] = v192;
        *(_WORD *)&v346[18] = 1024;
        *(_DWORD *)v347 = v188;
        v193 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLPredictedWalkDistanceEstimate CLPredictedWalkDistanceEstimator::makeEstimate(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLPredictedWalkDistanceBoutEntry>, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<P6MWDHoursPerDay> &, std::vector<HealthKitWorkout>, const CLBodyMetrics &, double) const", "%s\n", v193);
        if (v193 != buf) {
          free(v193);
        }
      }
      v179 = (double *)(v172 + 120 * v171);
      double v180 = v179[11];
      double v181 = *(double *)(a9 + 24) + v179[4] * v180;
      *(double *)(a9 + 24) = v181;
      double v170 = v170 + v180;
      double v182 = v179[5];
      double v183 = *(double *)(a9 + 184);
      if (*(double *)(a9 + 176) < v182) {
        double v182 = *(double *)(a9 + 176);
      }
      *(double *)(a9 + 176) = v182;
      double v184 = v179[5];
      if (v184 >= v183) {
        double v185 = v179[5];
      }
      else {
        double v185 = v183;
      }
      double v186 = v184 + *(double *)(a9 + 192);
      *(double *)(a9 + 184) = v185;
      *(double *)(a9 + 192) = v186;
      double v187 = v179[10] + *(double *)(a9 + 208);
      *(double *)(a9 + 208) = v187;
      ++v169;
      v151 = (unint64_t *)v334;
    }
    while (v169 < ((char *)v335 - (unsigned char *)v334) >> 3);
    double v194 = (double)(unint64_t)(((char *)v335 - (unsigned char *)v334) >> 3);
    *(double *)(a9 + 192) = v186 / v194;
    *(double *)(a9 + 208) = v187 / v194;
    if (v170 > 0.0) {
      double *v320 = v181 / v170;
    }
  }
  unint64_t v195 = *a2;
  unint64_t v196 = a2[1];
  if (*a2 != v196)
  {
    do
    {
      if (!*(_DWORD *)(v195 + 72))
      {
        if (qword_102419200 != -1) {
          dispatch_once(&qword_102419200, &stru_1023119F0);
        }
        v197 = qword_102419208;
        if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v198 = *(void *)(v195 + 8);
          uint64_t v199 = *(void *)(v195 + 16);
          int v200 = *(_DWORD *)(v195 + 24);
          double v201 = *(double *)(v195 + 32);
          uint64_t v202 = *(void *)(v195 + 40);
          int v203 = *(_DWORD *)(v195 + 76);
          uint64_t v204 = *(void *)(v195 + 88);
          uint64_t v205 = *(void *)(v195 + 104);
          uint64_t v206 = *(void *)(v195 + 112);
          *(_DWORD *)buf = 134220288;
          *(double *)&uint8_t buf[4] = a11;
          *(_WORD *)&buf[12] = 2048;
          *(void *)v352 = v198;
          *(_WORD *)&v352[8] = 2048;
          *(void *)v353 = v199;
          *(_WORD *)&v353[8] = 2048;
          double v354 = v201;
          __int16 v355 = 1024;
          *(_DWORD *)v356 = v200;
          *(_WORD *)&v356[4] = 2048;
          *(void *)&v356[6] = v202;
          *(_WORD *)&v356[14] = 1024;
          *(_DWORD *)&v356[16] = v203;
          *(_WORD *)v357 = 2048;
          *(void *)&v357[2] = v204;
          *(_WORD *)v358 = 2048;
          *(void *)&v358[2] = v205;
          __int16 v359 = 2048;
          uint64_t v360 = v206;
          _os_log_impl((void *)&_mh_execute_header, v197, OS_LOG_TYPE_DEBUG, "Week,%.0f,boutStart,%.3f,boutEnd,%.3f,dist,%.3f,steps,%d,activeTime,%.3f,workoutType,%d,conf,%.3f,baseConf,%.3f,supportsBout,%.3f", buf, 0x5Eu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419200 != -1) {
            dispatch_once(&qword_102419200, &stru_1023119F0);
          }
          uint64_t v207 = *(void *)(v195 + 8);
          uint64_t v208 = *(void *)(v195 + 16);
          int v209 = *(_DWORD *)(v195 + 24);
          double v210 = *(double *)(v195 + 32);
          uint64_t v211 = *(void *)(v195 + 40);
          int v212 = *(_DWORD *)(v195 + 76);
          uint64_t v213 = *(void *)(v195 + 88);
          uint64_t v214 = *(void *)(v195 + 104);
          uint64_t v215 = *(void *)(v195 + 112);
          int v340 = 134220288;
          *(double *)v341 = a11;
          *(_WORD *)&v341[8] = 2048;
          *(void *)v342 = v207;
          *(_WORD *)&v342[8] = 2048;
          *(void *)v343 = v208;
          *(_WORD *)&v343[8] = 2048;
          double v344 = v210;
          __int16 v345 = 1024;
          *(_DWORD *)v346 = v209;
          *(_WORD *)&v346[4] = 2048;
          *(void *)&v346[6] = v211;
          *(_WORD *)&v346[14] = 1024;
          *(_DWORD *)&v346[16] = v212;
          *(_WORD *)v347 = 2048;
          *(void *)&v347[2] = v213;
          *(_WORD *)v348 = 2048;
          *(void *)&v348[2] = v214;
          __int16 v349 = 2048;
          uint64_t v350 = v215;
          v216 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void (anonymous namespace)::logBouts(double, const std::vector<CLPredictedWalkDistanceBoutEntry> &)", "%s\n", v216);
          if (v216 != buf) {
            free(v216);
          }
        }
      }
      v195 += 120;
    }
    while (v195 != v196);
  }
  int v217 = *(_DWORD *)a1;
  double v218 = *(double *)(a1 + 8);
  if (*(int *)a1 >= 7) {
    int v219 = 7;
  }
  else {
    int v219 = *(_DWORD *)a1;
  }
  *(double *)(a9 + 8) = a11;
  v220 = *v313;
  v221 = v313[1];
  if (*v313 == v221)
  {
    int v223 = 0;
    int v222 = 0;
    double v225 = a11;
    v226 = (double *)&byte_101D1BF2C[212];
  }
  else
  {
    int v222 = 0;
    int v223 = 0;
    double v224 = *(double *)(a1 + 16);
    double v225 = a11;
    v226 = (double *)(byte_101D1BF2C + 212);
    do
    {
      double v227 = v220[3];
      double v228 = (*v220 + v220[1]) * 0.5;
      if (v227 >= v224 && v220[2] >= v224 && v228 > a10 && v228 < a11)
      {
        ++v222;
        if (v228 > a11 + -604800.0) {
          ++v223;
        }
      }
      if (v227 > 0.0)
      {
        double v225 = fmin(*v220, v225);
        *(double *)(a9 + 8) = v225;
      }
      v220 += 4;
    }
    while (v220 != v221);
  }
  double v232 = (double)v219;
  *(double *)(a9 + 8) = fmax(a10, v225);
  if (qword_102419200 != -1) {
    dispatch_once(&qword_102419200, &stru_1023119F0);
  }
  double v233 = v218 * v232;
  v234 = qword_102419208;
  if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&uint8_t buf[4] = v319;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v223;
    *(_WORD *)v352 = 2048;
    *(double *)&v352[2] = v218 * v232;
    _os_log_impl((void *)&_mh_execute_header, v234, OS_LOG_TYPE_DEBUG, "Saw %d goodWalkWorkouts and %d days of data in current week, 1 workout or at least %.1f days required ", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419200 != -1) {
      dispatch_once(&qword_102419200, &stru_1023119F0);
    }
    int v340 = 67109632;
    *(_DWORD *)v341 = v319;
    *(_WORD *)&v341[4] = 1024;
    *(_DWORD *)&v341[6] = v223;
    *(_WORD *)v342 = 2048;
    *(double *)&v342[2] = v218 * v232;
    v280 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLPredictedWalkDistanceEstimate CLPredictedWalkDistanceEstimator::makeEstimate(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLPredictedWalkDistanceBoutEntry>, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<P6MWDHoursPerDay> &, std::vector<HealthKitWorkout>, const CLBodyMetrics &, double) const", "%s\n", v280);
    if (v280 != buf) {
      free(v280);
    }
  }
  if (qword_102419200 != -1) {
    dispatch_once(&qword_102419200, &stru_1023119F0);
  }
  double v235 = (double)v217;
  double v236 = v218 * (double)v217;
  v237 = qword_102419208;
  if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEBUG))
  {
    int v238 = *(_DWORD *)a1;
    uint64_t v239 = *(void *)(a9 + 8);
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)&uint8_t buf[4] = v222;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v238;
    *(_WORD *)v352 = 2048;
    *(double *)&v352[2] = v218 * v235;
    *(_WORD *)v353 = 2048;
    *(void *)&v353[2] = v239;
    _os_log_impl((void *)&_mh_execute_header, v237, OS_LOG_TYPE_DEBUG, "Saw %d days of data in last %d days, at least %.1f required, earliest day with watch use was %.1f", buf, 0x22u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419200 != -1) {
      dispatch_once(&qword_102419200, &stru_1023119F0);
    }
    int v281 = *(_DWORD *)a1;
    uint64_t v282 = *(void *)(a9 + 8);
    int v340 = 67109888;
    *(_DWORD *)v341 = v222;
    *(_WORD *)&v341[4] = 1024;
    *(_DWORD *)&v341[6] = v281;
    *(_WORD *)v342 = 2048;
    *(double *)&v342[2] = v218 * v235;
    *(_WORD *)v343 = 2048;
    *(void *)&v343[2] = v282;
    v283 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLPredictedWalkDistanceEstimate CLPredictedWalkDistanceEstimator::makeEstimate(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLPredictedWalkDistanceBoutEntry>, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<P6MWDHoursPerDay> &, std::vector<HealthKitWorkout>, const CLBodyMetrics &, double) const", "%s\n", v283);
    if (v283 != buf) {
      free(v283);
    }
  }
  double v240 = sub_101103768(a1, a3, v313, 1, a10, a11);
  double v241 = sub_101103768(a1, a4, v313, *(unsigned __int8 *)(a1 + 24), a10, a11);
  double v242 = sub_101103768(a1, a5, v313, 1, a10, a11);
  if (qword_102419200 != -1) {
    dispatch_once(&qword_102419200, &stru_1023119F0);
  }
  v243 = qword_102419208;
  if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218752;
    *(double *)&uint8_t buf[4] = a11;
    *(_WORD *)&buf[12] = 2048;
    *(double *)v352 = v240;
    *(_WORD *)&v352[8] = 2048;
    *(double *)v353 = v241;
    *(_WORD *)&v353[8] = 2048;
    double v354 = v242;
    _os_log_impl((void *)&_mh_execute_header, v243, OS_LOG_TYPE_DEBUG, "Week,%.0f,meanFlightsPerDay,%.3f,meanStepsPerDay,%.3f,meanExerciseMinutesPerDay,%.3f", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419200 != -1) {
      dispatch_once(&qword_102419200, &stru_1023119F0);
    }
    int v340 = 134218752;
    *(double *)v341 = a11;
    *(_WORD *)&v341[8] = 2048;
    *(double *)v342 = v240;
    *(_WORD *)&v342[8] = 2048;
    *(double *)v343 = v241;
    *(_WORD *)&v343[8] = 2048;
    double v344 = v242;
    v284 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLPredictedWalkDistanceEstimate CLPredictedWalkDistanceEstimator::makeEstimate(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLPredictedWalkDistanceBoutEntry>, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<P6MWDHoursPerDay> &, std::vector<HealthKitWorkout>, const CLBodyMetrics &, double) const", "%s\n", v284);
    if (v284 != buf) {
      free(v284);
    }
  }
  if (v240 >= 0.0 && v241 >= 0.0 && v242 >= 0.0)
  {
    double v244 = log10(fmax(fmin(v240, 80.0), 0.0357142857));
    double v245 = log10(fmax(fmin(v241, 12000.0), 1500.0));
    *(long double *)(a9 + 40) = v244 * 82.7803
                              + -577.7315
                              + v245 * 267.6314
                              + log10(fmax(fmin(v242, 100.0), 1.0)) * -12.0958;
  }
  *(_DWORD *)(a9 + 120) = v222;
  *(_DWORD *)(a9 + 124) = v223;
  *(double *)(a9 + 128) = v240;
  *(double *)(a9 + 136) = v241;
  *(double *)(a9 + 144) = v242;
  if (*(double *)(a9 + 232) * 360.0 >= v321) {
    double v246 = *(double *)(a9 + 232) * 360.0;
  }
  else {
    double v246 = v321;
  }
  double v247 = *(double *)(a9 + 192);
  double v248 = *(double *)(a9 + 24);
  if (v247 > 240.0)
  {
    double v249 = 360.0 / v247 * v248;
    if (v249 >= v246) {
      double v246 = v249;
    }
  }
  double v250 = *(double *)(a9 + 200);
  double v251 = *(double *)(a9 + 32);
  if (*(double *)(a9 + 40) >= v250) {
    double v250 = *(double *)(a9 + 40);
  }
  if (v246 >= v250) {
    double v252 = v250;
  }
  else {
    double v252 = v246;
  }
  if (v248 < v252) {
    double v248 = v252;
  }
  *(double *)(a9 + 56) = v248;
  double v253 = v226[97];
  if (v251 > v248)
  {
    double v254 = fmax(fmin((v250 + -250.0) / 200.0, 0.6), 0.25);
    double v255 = v251 - v248;
    if (v255 > 160.0) {
      double v255 = 160.0;
    }
    double v248 = v248 + v254 * v255;
    *(double *)(a9 + 56) = v248;
  }
  *(double *)(a9 + 64) = fmax(fmin(v248, v253), 120.0);
  if (qword_102419200 != -1) {
    dispatch_once(&qword_102419200, &stru_1023119F0);
  }
  v256 = qword_102419208;
  if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v257 = *(void *)(a9 + 24);
    uint64_t v258 = *(void *)(a9 + 32);
    double v259 = *(double *)(a9 + 232) * 360.0;
    double v260 = *(double *)(a9 + 40);
    uint64_t v261 = *(void *)(a9 + 192);
    uint64_t v262 = *(void *)(a9 + 200);
    uint64_t v263 = *(void *)(a9 + 56);
    *(_DWORD *)buf = 134285313;
    *(void *)&uint8_t buf[4] = v257;
    *(_WORD *)&buf[12] = 2049;
    *(void *)v352 = v258;
    *(_WORD *)&v352[8] = 2049;
    *(double *)v353 = v259;
    *(_WORD *)&v353[8] = 2049;
    double v354 = v260;
    __int16 v355 = 2049;
    *(double *)v356 = v321;
    *(_WORD *)&v356[8] = 2049;
    *(void *)&v356[10] = v261;
    *(_WORD *)&v356[18] = 2049;
    *(void *)v357 = v262;
    *(_WORD *)&v357[8] = 2049;
    *(void *)v358 = v263;
    _os_log_impl((void *)&_mh_execute_header, v256, OS_LOG_TYPE_DEFAULT, "pDist,%{private}.0f,pSpeed,%{private}.0f,pSpeed95,%{private}.0f,pActivity,%{private}.0f,maxBout,%{private}.0f,avgActiveTimeInSupport,%{private}.0f,maxRunningDist,%{private}.0f,p6MWD,%{private}.0f", buf, 0x52u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419200 != -1) {
      dispatch_once(&qword_102419200, &stru_1023119F0);
    }
    uint64_t v285 = *(void *)(a9 + 24);
    uint64_t v286 = *(void *)(a9 + 32);
    double v287 = *(double *)(a9 + 232) * 360.0;
    double v288 = *(double *)(a9 + 40);
    uint64_t v289 = *(void *)(a9 + 192);
    uint64_t v290 = *(void *)(a9 + 200);
    uint64_t v291 = *(void *)(a9 + 56);
    int v340 = 134285313;
    *(void *)v341 = v285;
    *(_WORD *)&v341[8] = 2049;
    *(void *)v342 = v286;
    *(_WORD *)&v342[8] = 2049;
    *(double *)v343 = v287;
    *(_WORD *)&v343[8] = 2049;
    double v344 = v288;
    __int16 v345 = 2049;
    *(double *)v346 = v321;
    *(_WORD *)&v346[8] = 2049;
    *(void *)&v346[10] = v289;
    *(_WORD *)&v346[18] = 2049;
    *(void *)v347 = v290;
    *(_WORD *)&v347[8] = 2049;
    *(void *)v348 = v291;
    v292 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLPredictedWalkDistanceEstimate CLPredictedWalkDistanceEstimator::makeEstimate(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLPredictedWalkDistanceBoutEntry>, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<P6MWDHoursPerDay> &, std::vector<HealthKitWorkout>, const CLBodyMetrics &, double) const", "%s\n", v292);
    if (v292 != buf) {
      free(v292);
    }
  }
  double v264 = fmin(v246, v253);
  if (qword_102419200 != -1) {
    dispatch_once(&qword_102419200, &stru_1023119F0);
  }
  double v265 = fmax(v264, 120.0);
  v266 = qword_102419208;
  if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEFAULT))
  {
    double v267 = *(double *)(a9 + 56);
    if (*(double *)(a9 + 24) >= v267)
    {
      v268 = "pDist";
    }
    else if (*(double *)(a9 + 40) >= v267)
    {
      v268 = "pActivity";
    }
    else
    {
      v268 = "maxDist";
      if (*(double *)(a9 + 32) >= v265) {
        v268 = "pSpeed";
      }
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = v268;
    _os_log_impl((void *)&_mh_execute_header, v266, OS_LOG_TYPE_DEFAULT, "p6MWD based on %{public}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419200 != -1) {
      dispatch_once(&qword_102419200, &stru_1023119F0);
    }
    double v293 = *(double *)(a9 + 56);
    if (*(double *)(a9 + 24) >= v293)
    {
      v294 = "pDist";
    }
    else if (*(double *)(a9 + 40) >= v293)
    {
      v294 = "pActivity";
    }
    else
    {
      v294 = "maxDist";
      if (*(double *)(a9 + 32) >= v265) {
        v294 = "pSpeed";
      }
    }
    int v340 = 136446210;
    *(void *)v341 = v294;
    v297 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLPredictedWalkDistanceEstimate CLPredictedWalkDistanceEstimator::makeEstimate(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLPredictedWalkDistanceBoutEntry>, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<P6MWDHoursPerDay> &, std::vector<HealthKitWorkout>, const CLBodyMetrics &, double) const", "%s\n", v297);
    if (v297 != buf) {
      free(v297);
    }
  }
  if (v233 > (double)v223 || v236 > (double)v222)
  {
    if (qword_102419200 != -1) {
      dispatch_once(&qword_102419200, &stru_1023119F0);
    }
    v271 = qword_102419208;
    if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v271, OS_LOG_TYPE_DEFAULT, "No p6MWD estimate, insufficient time on wrist", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419200 != -1) {
        dispatch_once(&qword_102419200, &stru_1023119F0);
      }
      LOWORD(v340) = 0;
      v296 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLPredictedWalkDistanceEstimate CLPredictedWalkDistanceEstimator::makeEstimate(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLPredictedWalkDistanceBoutEntry>, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<P6MWDHoursPerDay> &, std::vector<HealthKitWorkout>, const CLBodyMetrics &, double) const", "%s\n", v296);
      if (v296 != buf) {
        free(v296);
      }
    }
    int v272 = 0;
  }
  else if (*v320 <= 0.0)
  {
    if (qword_102419200 != -1) {
      dispatch_once(&qword_102419200, &stru_1023119F0);
    }
    v273 = qword_102419208;
    if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349056;
      *(double *)&uint8_t buf[4] = a11;
      _os_log_impl((void *)&_mh_execute_header, v273, OS_LOG_TYPE_DEFAULT, "No valid bouts for period ending %{public}.0f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419200 != -1) {
        dispatch_once(&qword_102419200, &stru_1023119F0);
      }
      int v340 = 134349056;
      *(double *)v341 = a11;
      v298 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLPredictedWalkDistanceEstimate CLPredictedWalkDistanceEstimator::makeEstimate(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLPredictedWalkDistanceBoutEntry>, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<P6MWDHoursPerDay> &, std::vector<HealthKitWorkout>, const CLBodyMetrics &, double) const", "%s\n", v298);
      if (v298 != buf) {
        free(v298);
      }
    }
    int v272 = 5;
  }
  else
  {
    double v269 = *(double *)(a9 + 40);
    if (v269 <= 0.0)
    {
      if (qword_102419200 != -1) {
        dispatch_once(&qword_102419200, &stru_1023119F0);
      }
      v274 = qword_102419208;
      if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v274, OS_LOG_TYPE_DEFAULT, "No p6MWD estimate, no activity prediction", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419200 != -1) {
          dispatch_once(&qword_102419200, &stru_1023119F0);
        }
        LOWORD(v340) = 0;
        v299 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLPredictedWalkDistanceEstimate CLPredictedWalkDistanceEstimator::makeEstimate(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLPredictedWalkDistanceBoutEntry>, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<P6MWDHoursPerDay> &, std::vector<HealthKitWorkout>, const CLBodyMetrics &, double) const", "%s\n", v299);
        if (v299 != buf) {
          free(v299);
        }
      }
      int v272 = 4;
    }
    else
    {
      if (*(double *)(a9 + 32) <= 0.0)
      {
        if (qword_102419200 != -1) {
          dispatch_once(&qword_102419200, &stru_1023119F0);
        }
        v275 = qword_102419208;
        if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v275, OS_LOG_TYPE_DEFAULT, "No p6MWD estimate, insufficient points for pSpeed", buf, 2u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_334;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419200 == -1) {
          goto LABEL_418;
        }
        goto LABEL_429;
      }
      if (*(int *)(a9 + 216) <= 19)
      {
        if (qword_102419200 != -1) {
          dispatch_once(&qword_102419200, &stru_1023119F0);
        }
        v270 = qword_102419208;
        if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v270, OS_LOG_TYPE_DEFAULT, "No p6MWD estimate, high uncertainty in speed prediction", buf, 2u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_334;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419200 == -1)
        {
LABEL_418:
          LOWORD(v340) = 0;
          v300 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLPredictedWalkDistanceEstimate CLPredictedWalkDistanceEstimator::makeEstimate(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLPredictedWalkDistanceBoutEntry>, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<P6MWDHoursPerDay> &, std::vector<HealthKitWorkout>, const CLBodyMetrics &, double) const", "%s\n", v300);
          if (v300 != buf) {
            free(v300);
          }
LABEL_334:
          int v272 = 2;
          goto LABEL_335;
        }
LABEL_429:
        dispatch_once(&qword_102419200, &stru_1023119F0);
        goto LABEL_418;
      }
      if (v269 >= *v320 + -100.0 || v269 >= v253)
      {
        if (qword_102419200 != -1) {
          dispatch_once(&qword_102419200, &stru_1023119F0);
        }
        v278 = qword_102419208;
        if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v278, OS_LOG_TYPE_DEFAULT, "Available p6MWD estimate", buf, 2u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_341;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419200 == -1) {
          goto LABEL_399;
        }
        goto LABEL_428;
      }
      if (qword_102419200 != -1) {
        dispatch_once(&qword_102419200, &stru_1023119F0);
      }
      v277 = qword_102419208;
      if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v277, OS_LOG_TYPE_DEFAULT, "No p6MWD estimate, inconsistent estimates", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419200 != -1) {
          dispatch_once(&qword_102419200, &stru_1023119F0);
        }
        LOWORD(v340) = 0;
        v301 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLPredictedWalkDistanceEstimate CLPredictedWalkDistanceEstimator::makeEstimate(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLPredictedWalkDistanceBoutEntry>, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<P6MWDHoursPerDay> &, std::vector<HealthKitWorkout>, const CLBodyMetrics &, double) const", "%s\n", v301);
        if (v301 != buf) {
          free(v301);
        }
      }
      int v272 = 3;
    }
  }
LABEL_335:
  *(_DWORD *)(a9 + 16) = v272;
  if (v319 >= 1)
  {
    if (qword_102419200 != -1) {
      dispatch_once(&qword_102419200, &stru_1023119F0);
    }
    v276 = qword_102419208;
    if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v276, OS_LOG_TYPE_DEFAULT, "Available p6MWD estimate because of workout", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_341;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419200 == -1)
    {
LABEL_399:
      LOWORD(v340) = 0;
      v295 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLPredictedWalkDistanceEstimate CLPredictedWalkDistanceEstimator::makeEstimate(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLPredictedWalkDistanceBoutEntry>, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &, const std::vector<P6MWDHoursPerDay> &, std::vector<HealthKitWorkout>, const CLBodyMetrics &, double) const", "%s\n", v295);
      if (v295 != buf) {
        free(v295);
      }
LABEL_341:
      *(_DWORD *)(a9 + 16) = 1;
      goto LABEL_343;
    }
LABEL_428:
    dispatch_once(&qword_102419200, &stru_1023119F0);
    goto LABEL_399;
  }
  *(void *)(a9 + 64) = 0;
LABEL_343:
  *(double *)(a9 + 32) = *(double *)(a9 + 232) * 360.0;
  if (v323[0])
  {
    v323[1] = v323[0];
    operator delete(v323[0]);
  }
  if (v324[0])
  {
    v324[1] = v324[0];
    operator delete(v324[0]);
  }
  if (v327)
  {
    v328 = (double *)v327;
    operator delete(v327);
  }
  if (v330)
  {
    v331 = (double *)v330;
    operator delete(v330);
  }
  if (v333) {
    operator delete(v333);
  }
  if (v334)
  {
    v335 = (unint64_t *)v334;
    operator delete(v334);
  }
}

void sub_101103528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (__p) {
    operator delete(__p);
  }
  if (a40) {
    operator delete(a40);
  }
  if (a54) {
    operator delete(a54);
  }
  if (a57) {
    operator delete(a57);
  }
  if (a60) {
    operator delete(a60);
  }
  if (a63) {
    operator delete(a63);
  }
  _Unwind_Resume(a1);
}

double sub_101103638(uint64_t a1, double a2, double a3)
{
  double v3 = *(double *)(a1 + 8);
  double v4 = a2 - v3;
  uint64_t v5 = *(void *)a1 + 1;
  double v6 = v3 + (a2 - v3) / (double)(unint64_t)v5;
  double v7 = *(double *)(a1 + 16) + v4 * (a2 - v6);
  double v8 = *(double *)(a1 + 32);
  double v9 = a3 - v8;
  uint64_t v10 = *(void *)(a1 + 24) + 1;
  double v11 = v8 + (a3 - v8) / (double)(unint64_t)v10;
  double v12 = *(double *)(a1 + 40) + v9 * (a3 - v11);
  *(void *)a1 = v5;
  *(double *)(a1 + 8) = v6;
  *(double *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v10;
  *(double *)(a1 + 32) = v11;
  *(double *)(a1 + 40) = v12;
  uint64_t v13 = *(void *)(a1 + 72) + 1;
  *(void *)(a1 + 72) = v13;
  double v14 = *(double *)(a1 + 48);
  double v15 = *(double *)(a1 + 56);
  double v16 = (a2 - v14) / (double)(unint64_t)v13;
  double v17 = (a3 - v15) / (double)(unint64_t)v13;
  *(double *)(a1 + 48) = v14 + v16;
  *(double *)(a1 + 56) = v15 + v17;
  double result = *(double *)(a1 + 64)
         + -*(double *)(a1 + 64) / (double)(unint64_t)v13
         + ((double)(unint64_t)v13 + -1.0) * v16 * v17;
  *(double *)(a1 + 64) = result;
  return result;
}

double sub_1011036E8(uint64_t a1)
{
  double v1 = 0.0;
  double v2 = 0.0;
  if (*(void *)a1 >= 2uLL) {
    double v2 = *(double *)(a1 + 16) / (double)(unint64_t)(*(void *)a1 - 1);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 2) {
    double v1 = *(double *)(a1 + 40) / (double)(v3 - 1);
  }
  double v4 = v2 * v1;
  double result = 0.0;
  if (v4 > 0.0)
  {
    unint64_t v6 = *(void *)(a1 + 72);
    if (v6 >= 2) {
      double result = (double)v6 / ((double)v6 + -1.0) * *(double *)(a1 + 64);
    }
    return result / sqrt(v4);
  }
  return result;
}

double sub_101103768(uint64_t a1, double **a2, double **a3, int a4, double a5, double a6)
{
  double v7 = *a3;
  double v8 = a3[1];
  double result = -1.0;
  if (*a3 != v8)
  {
    int v10 = 0;
    double v11 = 0.0;
    do
    {
      if (a4) {
        uint64_t v12 = 3;
      }
      else {
        uint64_t v12 = 2;
      }
      double v13 = v7[1];
      double v14 = (*v7 + v13) * 0.5;
      if (v7[v12] >= *(double *)(a1 + 16) && v14 > a5 && v14 < a6)
      {
        for (i = *a2; i != a2[1]; i += 3)
        {
          BOOL v18 = *i >= v13 || *i < *v7;
          double v19 = i[2];
          if (v18) {
            double v19 = -0.0;
          }
          double v11 = v11 + v19;
        }
        ++v10;
      }
      v7 += 4;
    }
    while (v7 != v8);
    if (v10 > 0) {
      return v11 / (double)v10;
    }
  }
  return result;
}

void sub_101103814(id a1)
{
  qword_102419208 = (uint64_t)os_log_create("com.apple.locationd.Motion", "PredictedWalkDistance");
}

void sub_101103844(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
__n128 sub_1011046A4(long long *a1, long long *a2, double *a3)
{
  result.n128_u64[0] = *((void *)a2 + 1);
  double v4 = a3[1];
  if (result.n128_f64[0] >= *((double *)a1 + 1))
  {
    if (v4 < result.n128_f64[0])
    {
      long long v52 = a2[4];
      long long v56 = a2[5];
      long long v60 = a2[6];
      uint64_t v64 = *((void *)a2 + 14);
      long long v36 = *a2;
      long long v40 = a2[1];
      long long v44 = a2[2];
      long long v48 = a2[3];
      long long v11 = *((_OWORD *)a3 + 4);
      long long v12 = *((_OWORD *)a3 + 5);
      long long v13 = *((_OWORD *)a3 + 6);
      *((double *)a2 + 14) = a3[14];
      a2[5] = v12;
      a2[6] = v13;
      a2[4] = v11;
      long long v14 = *(_OWORD *)a3;
      long long v15 = *((_OWORD *)a3 + 1);
      long long v16 = *((_OWORD *)a3 + 3);
      a2[2] = *((_OWORD *)a3 + 2);
      a2[3] = v16;
      *a2 = v14;
      a2[1] = v15;
      *((_OWORD *)a3 + 2) = v44;
      *((_OWORD *)a3 + 3) = v48;
      *(_OWORD *)a3 = v36;
      *((_OWORD *)a3 + 1) = v40;
      *((void *)a3 + 14) = v64;
      result.n128_u64[1] = *((void *)&v56 + 1);
      *((_OWORD *)a3 + 5) = v56;
      *((_OWORD *)a3 + 6) = v60;
      *((_OWORD *)a3 + 4) = v52;
      result.n128_u64[0] = *((void *)a2 + 1);
      if (result.n128_f64[0] < *((double *)a1 + 1))
      {
        long long v53 = a1[4];
        __n128 v57 = (__n128)a1[5];
        long long v61 = a1[6];
        uint64_t v65 = *((void *)a1 + 14);
        long long v37 = *a1;
        long long v41 = a1[1];
        long long v45 = a1[2];
        long long v49 = a1[3];
        long long v17 = a2[4];
        long long v18 = a2[5];
        long long v19 = a2[6];
        *((void *)a1 + 14) = *((void *)a2 + 14);
        a1[5] = v18;
        a1[6] = v19;
        a1[4] = v17;
        long long v20 = *a2;
        long long v21 = a2[1];
        long long v22 = a2[3];
        a1[2] = a2[2];
        a1[3] = v22;
        *a1 = v20;
        a1[1] = v21;
        a2[2] = v45;
        a2[3] = v49;
        *a2 = v37;
        a2[1] = v41;
        *((void *)a2 + 14) = v65;
        __n128 result = v57;
        a2[5] = (__int128)v57;
        a2[6] = v61;
        a2[4] = v53;
      }
    }
  }
  else
  {
    if (v4 >= result.n128_f64[0])
    {
      long long v54 = a1[4];
      long long v58 = a1[5];
      long long v62 = a1[6];
      uint64_t v66 = *((void *)a1 + 14);
      long long v38 = *a1;
      long long v42 = a1[1];
      long long v46 = a1[2];
      long long v50 = a1[3];
      long long v23 = a2[4];
      long long v24 = a2[5];
      long long v25 = a2[6];
      *((void *)a1 + 14) = *((void *)a2 + 14);
      a1[5] = v24;
      a1[6] = v25;
      a1[4] = v23;
      long long v26 = *a2;
      long long v27 = a2[1];
      long long v28 = a2[3];
      a1[2] = a2[2];
      a1[3] = v28;
      *a1 = v26;
      a1[1] = v27;
      a2[2] = v46;
      a2[3] = v50;
      *a2 = v38;
      a2[1] = v42;
      *((void *)a2 + 14) = v66;
      result.n128_u64[1] = *((void *)&v58 + 1);
      a2[5] = v58;
      a2[6] = v62;
      a2[4] = v54;
      result.n128_f64[0] = a3[1];
      if (result.n128_f64[0] >= *((double *)a2 + 1)) {
        return result;
      }
      long long v51 = a2[4];
      __n128 v55 = (__n128)a2[5];
      long long v59 = a2[6];
      uint64_t v63 = *((void *)a2 + 14);
      long long v35 = *a2;
      long long v39 = a2[1];
      long long v43 = a2[2];
      long long v47 = a2[3];
      long long v29 = *((_OWORD *)a3 + 4);
      long long v30 = *((_OWORD *)a3 + 5);
      long long v31 = *((_OWORD *)a3 + 6);
      *((double *)a2 + 14) = a3[14];
      a2[5] = v30;
      a2[6] = v31;
      a2[4] = v29;
      long long v32 = *(_OWORD *)a3;
      long long v33 = *((_OWORD *)a3 + 1);
      long long v34 = *((_OWORD *)a3 + 3);
      a2[2] = *((_OWORD *)a3 + 2);
      a2[3] = v34;
      *a2 = v32;
      a2[1] = v33;
    }
    else
    {
      long long v51 = a1[4];
      __n128 v55 = (__n128)a1[5];
      long long v59 = a1[6];
      uint64_t v63 = *((void *)a1 + 14);
      long long v35 = *a1;
      long long v39 = a1[1];
      long long v43 = a1[2];
      long long v47 = a1[3];
      long long v5 = *((_OWORD *)a3 + 4);
      long long v6 = *((_OWORD *)a3 + 5);
      long long v7 = *((_OWORD *)a3 + 6);
      *((double *)a1 + 14) = a3[14];
      a1[5] = v6;
      a1[6] = v7;
      a1[4] = v5;
      long long v8 = *(_OWORD *)a3;
      long long v9 = *((_OWORD *)a3 + 1);
      long long v10 = *((_OWORD *)a3 + 3);
      a1[2] = *((_OWORD *)a3 + 2);
      a1[3] = v10;
      *a1 = v8;
      a1[1] = v9;
    }
    *((_OWORD *)a3 + 2) = v43;
    *((_OWORD *)a3 + 3) = v47;
    *(_OWORD *)a3 = v35;
    *((_OWORD *)a3 + 1) = v39;
    *((void *)a3 + 14) = v63;
    __n128 result = v55;
    *((__n128 *)a3 + 5) = v55;
    *((_OWORD *)a3 + 6) = v59;
    *((_OWORD *)a3 + 4) = v51;
  }
  return result;
}

BOOL sub_10110492C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xEEEEEEEEEEEEEEEFLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 112) < *(double *)(a1 + 8))
      {
        long long v76 = *(_OWORD *)(a1 + 64);
        long long v82 = *(_OWORD *)(a1 + 80);
        long long v88 = *(_OWORD *)(a1 + 96);
        uint64_t v94 = *(void *)(a1 + 112);
        long long v52 = *(_OWORD *)a1;
        long long v58 = *(_OWORD *)(a1 + 16);
        long long v64 = *(_OWORD *)(a1 + 32);
        long long v70 = *(_OWORD *)(a1 + 48);
        long long v6 = *(_OWORD *)(a2 - 56);
        long long v7 = *(_OWORD *)(a2 - 40);
        long long v8 = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 112) = *(void *)(a2 - 8);
        *(_OWORD *)(a1 + 80) = v7;
        *(_OWORD *)(a1 + 96) = v8;
        *(_OWORD *)(a1 + 64) = v6;
        long long v9 = *(_OWORD *)(a2 - 120);
        long long v10 = *(_OWORD *)(a2 - 104);
        long long v11 = *(_OWORD *)(a2 - 72);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 - 88);
        *(_OWORD *)(a1 + 48) = v11;
        *(_OWORD *)a1 = v9;
        *(_OWORD *)(a1 + 16) = v10;
        *(_OWORD *)(a2 - 72) = v70;
        *(_OWORD *)(a2 - 88) = v64;
        *(_OWORD *)(a2 - 104) = v58;
        *(_OWORD *)(a2 - 120) = v52;
        *(_OWORD *)(a2 - 24) = v88;
        *(_OWORD *)(a2 - 40) = v82;
        *(_OWORD *)(a2 - 56) = v76;
        *(void *)(a2 - 8) = v94;
      }
      return result;
    case 3uLL:
      sub_1011046A4((long long *)a1, (long long *)(a1 + 120), (double *)(a2 - 120));
      return 1;
    case 4uLL:
      sub_101104E0C(a1, a1 + 120, (long long *)(a1 + 240), (long long *)(a2 - 120));
      return 1;
    case 5uLL:
      long long v25 = (long long *)(a1 + 120);
      long long v26 = (long long *)(a1 + 240);
      long long v27 = (long long *)(a1 + 360);
      sub_101104E0C(a1, a1 + 120, (long long *)(a1 + 240), (long long *)(a1 + 360));
      if (*(double *)(a2 - 112) >= *(double *)(a1 + 368)) {
        return 1;
      }
      long long v78 = *(_OWORD *)(a1 + 424);
      long long v84 = *(_OWORD *)(a1 + 440);
      long long v90 = *(_OWORD *)(a1 + 456);
      uint64_t v95 = *(void *)(a1 + 472);
      long long v54 = *v27;
      long long v60 = *(_OWORD *)(a1 + 376);
      long long v66 = *(_OWORD *)(a1 + 392);
      long long v72 = *(_OWORD *)(a1 + 408);
      long long v28 = *(_OWORD *)(a2 - 56);
      long long v29 = *(_OWORD *)(a2 - 40);
      long long v30 = *(_OWORD *)(a2 - 24);
      *(void *)(a1 + 472) = *(void *)(a2 - 8);
      *(_OWORD *)(a1 + 440) = v29;
      *(_OWORD *)(a1 + 456) = v30;
      *(_OWORD *)(a1 + 424) = v28;
      long long v31 = *(_OWORD *)(a2 - 120);
      long long v32 = *(_OWORD *)(a2 - 104);
      long long v33 = *(_OWORD *)(a2 - 72);
      *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 - 88);
      *(_OWORD *)(a1 + 408) = v33;
      *long long v27 = v31;
      *(_OWORD *)(a1 + 376) = v32;
      *(_OWORD *)(a2 - 72) = v72;
      *(_OWORD *)(a2 - 88) = v66;
      *(_OWORD *)(a2 - 104) = v60;
      *(_OWORD *)(a2 - 120) = v54;
      *(_OWORD *)(a2 - 24) = v90;
      *(_OWORD *)(a2 - 40) = v84;
      *(_OWORD *)(a2 - 56) = v78;
      *(void *)(a2 - 8) = v95;
      if (*(double *)(a1 + 368) >= *(double *)(a1 + 248)) {
        return 1;
      }
      long long v79 = *(_OWORD *)(a1 + 304);
      long long v85 = *(_OWORD *)(a1 + 320);
      long long v91 = *(_OWORD *)(a1 + 336);
      uint64_t v96 = *(void *)(a1 + 352);
      long long v55 = *v26;
      long long v61 = *(_OWORD *)(a1 + 256);
      long long v67 = *(_OWORD *)(a1 + 272);
      long long v73 = *(_OWORD *)(a1 + 288);
      long long v34 = *v27;
      long long v35 = *(_OWORD *)(a1 + 376);
      long long v36 = *(_OWORD *)(a1 + 408);
      *(_OWORD *)(a1 + 272) = *(_OWORD *)(a1 + 392);
      *(_OWORD *)(a1 + 288) = v36;
      *long long v26 = v34;
      *(_OWORD *)(a1 + 256) = v35;
      long long v37 = *(_OWORD *)(a1 + 424);
      long long v38 = *(_OWORD *)(a1 + 440);
      long long v39 = *(_OWORD *)(a1 + 456);
      *(void *)(a1 + 352) = *(void *)(a1 + 472);
      *(_OWORD *)(a1 + 320) = v38;
      *(_OWORD *)(a1 + 336) = v39;
      *(_OWORD *)(a1 + 304) = v37;
      *(_OWORD *)(a1 + 392) = v67;
      *(_OWORD *)(a1 + 408) = v73;
      *long long v27 = v55;
      *(_OWORD *)(a1 + 376) = v61;
      *(void *)(a1 + 472) = v96;
      *(_OWORD *)(a1 + 440) = v85;
      *(_OWORD *)(a1 + 456) = v91;
      *(void *)&long long v39 = *(void *)(a1 + 248);
      *(void *)&long long v36 = *(void *)(a1 + 128);
      *(_OWORD *)(a1 + 424) = v79;
      if (*(double *)&v39 >= *(double *)&v36) {
        return 1;
      }
      long long v80 = *(_OWORD *)(a1 + 184);
      long long v86 = *(_OWORD *)(a1 + 200);
      long long v92 = *(_OWORD *)(a1 + 216);
      uint64_t v97 = *(void *)(a1 + 232);
      long long v56 = *v25;
      long long v62 = *(_OWORD *)(a1 + 136);
      long long v68 = *(_OWORD *)(a1 + 152);
      long long v74 = *(_OWORD *)(a1 + 168);
      long long v40 = *v26;
      long long v41 = *(_OWORD *)(a1 + 256);
      long long v42 = *(_OWORD *)(a1 + 288);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a1 + 272);
      *(_OWORD *)(a1 + 168) = v42;
      *long long v25 = v40;
      *(_OWORD *)(a1 + 136) = v41;
      long long v43 = *(_OWORD *)(a1 + 304);
      long long v44 = *(_OWORD *)(a1 + 320);
      long long v45 = *(_OWORD *)(a1 + 336);
      *(void *)(a1 + 232) = *(void *)(a1 + 352);
      *(_OWORD *)(a1 + 200) = v44;
      *(_OWORD *)(a1 + 216) = v45;
      *(_OWORD *)(a1 + 184) = v43;
      *(_OWORD *)(a1 + 272) = v68;
      *(_OWORD *)(a1 + 288) = v74;
      *long long v26 = v56;
      *(_OWORD *)(a1 + 256) = v62;
      *(void *)(a1 + 352) = v97;
      *(_OWORD *)(a1 + 320) = v86;
      *(_OWORD *)(a1 + 336) = v92;
      *(void *)&long long v45 = *(void *)(a1 + 128);
      *(void *)&long long v42 = *(void *)(a1 + 8);
      *(_OWORD *)(a1 + 304) = v80;
      if (*(double *)&v45 >= *(double *)&v42) {
        return 1;
      }
      long long v81 = *(_OWORD *)(a1 + 64);
      long long v87 = *(_OWORD *)(a1 + 80);
      long long v93 = *(_OWORD *)(a1 + 96);
      uint64_t v98 = *(void *)(a1 + 112);
      long long v57 = *(_OWORD *)a1;
      long long v63 = *(_OWORD *)(a1 + 16);
      long long v69 = *(_OWORD *)(a1 + 32);
      long long v75 = *(_OWORD *)(a1 + 48);
      long long v46 = *v25;
      long long v47 = *(_OWORD *)(a1 + 136);
      long long v48 = *(_OWORD *)(a1 + 168);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 152);
      *(_OWORD *)(a1 + 48) = v48;
      *(_OWORD *)a1 = v46;
      *(_OWORD *)(a1 + 16) = v47;
      long long v49 = *(_OWORD *)(a1 + 184);
      long long v50 = *(_OWORD *)(a1 + 200);
      long long v51 = *(_OWORD *)(a1 + 216);
      *(void *)(a1 + 112) = *(void *)(a1 + 232);
      *(_OWORD *)(a1 + 80) = v50;
      *(_OWORD *)(a1 + 96) = v51;
      *(_OWORD *)(a1 + 64) = v49;
      *(_OWORD *)(a1 + 152) = v69;
      *(_OWORD *)(a1 + 168) = v75;
      *long long v25 = v57;
      *(_OWORD *)(a1 + 136) = v63;
      *(void *)(a1 + 232) = v98;
      *(_OWORD *)(a1 + 200) = v87;
      *(_OWORD *)(a1 + 216) = v93;
      BOOL result = 1;
      *(_OWORD *)(a1 + 184) = v81;
      return result;
    default:
      uint64_t v12 = a1 + 240;
      sub_1011046A4((long long *)a1, (long long *)(a1 + 120), (double *)(a1 + 240));
      uint64_t v13 = a1 + 360;
      if (a1 + 360 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    double v16 = *(double *)(v13 + 8);
    if (v16 < *(double *)(v12 + 8))
    {
      uint64_t v17 = *(void *)v13;
      long long v77 = *(_OWORD *)(v13 + 80);
      long long v83 = *(_OWORD *)(v13 + 96);
      uint64_t v89 = *(void *)(v13 + 112);
      long long v53 = *(_OWORD *)(v13 + 16);
      long long v59 = *(_OWORD *)(v13 + 32);
      uint64_t v18 = v14;
      long long v65 = *(_OWORD *)(v13 + 48);
      long long v71 = *(_OWORD *)(v13 + 64);
      while (1)
      {
        long long v19 = (_OWORD *)(a1 + v18 + 360);
        long long v20 = *(_OWORD *)(a1 + v18 + 320);
        v19[4] = *(_OWORD *)(a1 + v18 + 304);
        v19[5] = v20;
        v19[6] = *(_OWORD *)(a1 + v18 + 336);
        *(void *)(a1 + v18 + 472) = *(void *)(a1 + v18 + 352);
        long long v21 = *(_OWORD *)(a1 + v18 + 256);
        *long long v19 = *(_OWORD *)(a1 + v18 + 240);
        v19[1] = v21;
        long long v22 = *(_OWORD *)(a1 + v18 + 288);
        v19[2] = *(_OWORD *)(a1 + v18 + 272);
        v19[3] = v22;
        if (v18 == -240) {
          break;
        }
        double v23 = *(double *)(a1 + v18 + 128);
        v18 -= 120;
        if (v16 >= v23)
        {
          uint64_t v24 = a1 + v18 + 360;
          goto LABEL_13;
        }
      }
      uint64_t v24 = a1;
LABEL_13:
      *(void *)uint64_t v24 = v17;
      *(double *)(v24 + 8) = v16;
      *(_OWORD *)(v24 + 80) = v77;
      *(_OWORD *)(v24 + 96) = v83;
      *(void *)(v24 + 112) = v89;
      *(_OWORD *)(v24 + 16) = v53;
      *(_OWORD *)(v24 + 32) = v59;
      ++v15;
      *(_OWORD *)(v24 + 48) = v65;
      *(_OWORD *)(v24 + 64) = v71;
      if (v15 == 8) {
        return v13 + 120 == a2;
      }
    }
    uint64_t v12 = v13;
    v14 += 120;
    v13 += 120;
    if (v13 == a2) {
      return 1;
    }
  }
}

__n128 sub_101104E0C(uint64_t a1, uint64_t a2, long long *a3, long long *a4)
{
  sub_1011046A4((long long *)a1, (long long *)a2, (double *)a3);
  result.n128_u64[0] = *((void *)a4 + 1);
  if (result.n128_f64[0] < *((double *)a3 + 1))
  {
    long long v39 = a3[4];
    long long v42 = a3[5];
    long long v45 = a3[6];
    uint64_t v48 = *((void *)a3 + 14);
    long long v27 = *a3;
    long long v30 = a3[1];
    long long v33 = a3[2];
    long long v36 = a3[3];
    long long v9 = a4[4];
    long long v10 = a4[5];
    long long v11 = a4[6];
    *((void *)a3 + 14) = *((void *)a4 + 14);
    a3[5] = v10;
    a3[6] = v11;
    a3[4] = v9;
    long long v12 = *a4;
    long long v13 = a4[1];
    long long v14 = a4[3];
    a3[2] = a4[2];
    a3[3] = v14;
    *a3 = v12;
    a3[1] = v13;
    a4[2] = v33;
    a4[3] = v36;
    *a4 = v27;
    a4[1] = v30;
    *((void *)a4 + 14) = v48;
    result.n128_u64[1] = *((void *)&v42 + 1);
    a4[5] = v42;
    a4[6] = v45;
    a4[4] = v39;
    result.n128_u64[0] = *((void *)a3 + 1);
    if (result.n128_f64[0] < *(double *)(a2 + 8))
    {
      long long v40 = *(_OWORD *)(a2 + 64);
      long long v43 = *(_OWORD *)(a2 + 80);
      long long v46 = *(_OWORD *)(a2 + 96);
      uint64_t v49 = *(void *)(a2 + 112);
      long long v28 = *(_OWORD *)a2;
      long long v31 = *(_OWORD *)(a2 + 16);
      long long v34 = *(_OWORD *)(a2 + 32);
      long long v37 = *(_OWORD *)(a2 + 48);
      long long v15 = a3[4];
      long long v16 = a3[5];
      long long v17 = a3[6];
      *(void *)(a2 + 112) = *((void *)a3 + 14);
      *(_OWORD *)(a2 + 80) = v16;
      *(_OWORD *)(a2 + 96) = v17;
      *(_OWORD *)(a2 + 64) = v15;
      long long v18 = *a3;
      long long v19 = a3[1];
      long long v20 = a3[3];
      *(_OWORD *)(a2 + 32) = a3[2];
      *(_OWORD *)(a2 + 48) = v20;
      *(_OWORD *)a2 = v18;
      *(_OWORD *)(a2 + 16) = v19;
      a3[2] = v34;
      a3[3] = v37;
      *a3 = v28;
      a3[1] = v31;
      *((void *)a3 + 14) = v49;
      result.n128_u64[1] = *((void *)&v43 + 1);
      a3[5] = v43;
      a3[6] = v46;
      a3[4] = v40;
      result.n128_u64[0] = *(void *)(a2 + 8);
      if (result.n128_f64[0] < *(double *)(a1 + 8))
      {
        long long v41 = *(_OWORD *)(a1 + 64);
        __n128 v44 = *(__n128 *)(a1 + 80);
        long long v47 = *(_OWORD *)(a1 + 96);
        uint64_t v50 = *(void *)(a1 + 112);
        long long v29 = *(_OWORD *)a1;
        long long v32 = *(_OWORD *)(a1 + 16);
        long long v35 = *(_OWORD *)(a1 + 32);
        long long v38 = *(_OWORD *)(a1 + 48);
        long long v21 = *(_OWORD *)(a2 + 64);
        long long v22 = *(_OWORD *)(a2 + 80);
        long long v23 = *(_OWORD *)(a2 + 96);
        *(void *)(a1 + 112) = *(void *)(a2 + 112);
        *(_OWORD *)(a1 + 80) = v22;
        *(_OWORD *)(a1 + 96) = v23;
        *(_OWORD *)(a1 + 64) = v21;
        long long v24 = *(_OWORD *)a2;
        long long v25 = *(_OWORD *)(a2 + 16);
        long long v26 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v26;
        *(_OWORD *)a1 = v24;
        *(_OWORD *)(a1 + 16) = v25;
        *(_OWORD *)(a2 + 32) = v35;
        *(_OWORD *)(a2 + 48) = v38;
        *(_OWORD *)a2 = v29;
        *(_OWORD *)(a2 + 16) = v32;
        *(void *)(a2 + 112) = v50;
        __n128 result = v44;
        *(__n128 *)(a2 + 80) = v44;
        *(_OWORD *)(a2 + 96) = v47;
        *(_OWORD *)(a2 + 64) = v41;
      }
    }
  }
  return result;
}

void sub_101104FE4(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                double v41 = *(double *)(a2 - 24);
                unint64_t v40 = a2 - 24;
                if (v41 < *(double *)v10)
                {
                  *(void *)&v98[16] = *(void *)(v10 + 16);
                  *(_OWORD *)uint64_t v98 = *(_OWORD *)v10;
                  long long v42 = *(_OWORD *)v40;
                  *(void *)(v10 + 13) = *(void *)(v40 + 13);
                  *(_OWORD *)unint64_t v10 = v42;
                  *(void *)(v40 + 13) = *(void *)&v98[13];
                  *(_OWORD *)unint64_t v40 = *(_OWORD *)v98;
                }
                break;
              case 3uLL:
                sub_100C81E48((long long *)v10, (long long *)(v10 + 24), (long long *)(a2 - 24));
                break;
              case 4uLL:
                sub_100C82250(v10, v10 + 24, v10 + 48, (unint64_t *)(a2 - 24));
                break;
              case 5uLL:
                long long v43 = (_OWORD *)(v10 + 24);
                __n128 v44 = (_OWORD *)(v10 + 48);
                long long v45 = (_OWORD *)(v10 + 72);
                sub_100C82250(v10, v10 + 24, v10 + 48, (unint64_t *)(v10 + 72));
                double v47 = *(double *)(a2 - 24);
                unint64_t v46 = a2 - 24;
                if (v47 < *(double *)(v10 + 72))
                {
                  *(_OWORD *)long long v99 = *v45;
                  long long v48 = *v45;
                  *(void *)&v99[16] = *(void *)(v10 + 88);
                  uint64_t v49 = *(void *)(v46 + 13);
                  *long long v45 = *(_OWORD *)v46;
                  *(void *)(v10 + 85) = v49;
                  *(void *)(v46 + 13) = *(void *)&v99[13];
                  *(_OWORD *)unint64_t v46 = v48;
                  if (*(double *)v45 < *(double *)v44)
                  {
                    *(_OWORD *)long long v100 = *v44;
                    long long v50 = *v44;
                    *(void *)&v100[16] = *(void *)(v10 + 64);
                    *__n128 v44 = *v45;
                    *(void *)(v10 + 61) = *(void *)(v10 + 85);
                    *long long v45 = v50;
                    *(void *)(v10 + 85) = *(void *)&v100[13];
                    if (*(double *)v44 < *(double *)v43)
                    {
                      *(_OWORD *)long long v101 = *v43;
                      long long v51 = *v43;
                      *(void *)&v101[16] = *(void *)(v10 + 40);
                      *long long v43 = *v44;
                      *(void *)(v10 + 37) = *(void *)(v10 + 61);
                      *__n128 v44 = v51;
                      *(void *)(v10 + 61) = *(void *)&v101[13];
                      if (*(double *)(v10 + 24) < *(double *)v10)
                      {
                        *(void *)&v102[16] = *(void *)(v10 + 16);
                        *(_OWORD *)unint64_t v102 = *(_OWORD *)v10;
                        *(_OWORD *)unint64_t v10 = *v43;
                        *(void *)(v10 + 13) = *(void *)(v10 + 37);
                        *long long v43 = *(_OWORD *)v102;
                        *(void *)(v10 + 37) = *(void *)&v102[13];
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 575)
          {
            unint64_t v52 = v10 + 24;
            BOOL v54 = v10 == a2 || v52 == a2;
            if (a4)
            {
              if (!v54)
              {
                uint64_t v55 = 0;
                unint64_t v56 = v10;
                do
                {
                  unint64_t v57 = v52;
                  double v58 = *(double *)(v56 + 24);
                  if (v58 < *(double *)v56)
                  {
                    long long v103 = *(_OWORD *)(v56 + 32);
                    uint64_t v59 = v55;
                    while (1)
                    {
                      uint64_t v60 = v10 + v59;
                      *(_OWORD *)(v60 + 24) = *(_OWORD *)(v10 + v59);
                      *(void *)(v60 + 37) = *(void *)(v10 + v59 + 13);
                      if (!v59) {
                        break;
                      }
                      v59 -= 24;
                      if (v58 >= *(double *)(v60 - 24))
                      {
                        uint64_t v61 = v10 + v59 + 24;
                        goto LABEL_80;
                      }
                    }
                    uint64_t v61 = v10;
LABEL_80:
                    *(double *)uint64_t v61 = v58;
                    *(void *)(v61 + 8) = v103;
                    *(void *)(v61 + 13) = *(void *)((char *)&v103 + 5);
                  }
                  unint64_t v52 = v57 + 24;
                  v55 += 24;
                  unint64_t v56 = v57;
                }
                while (v57 + 24 != a2);
              }
            }
            else if (!v54)
            {
              do
              {
                unint64_t v88 = v52;
                double v89 = *(double *)(a1 + 24);
                if (v89 < *(double *)a1)
                {
                  long long v106 = *(_OWORD *)(a1 + 32);
                  unint64_t v90 = v52;
                  do
                  {
                    *(_OWORD *)unint64_t v90 = *(_OWORD *)(v90 - 24);
                    *(void *)(v90 + 13) = *(void *)(v90 - 11);
                    double v91 = *(double *)(v90 - 48);
                    v90 -= 24;
                  }
                  while (v89 < v91);
                  *(double *)unint64_t v90 = v89;
                  *(void *)(v90 + 13) = *(void *)((char *)&v106 + 5);
                  *(void *)(v90 + 8) = v106;
                }
                v52 += 24;
                a1 = v88;
              }
              while (v88 + 24 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v62 = (v12 - 2) >> 1;
              int64_t v63 = v62;
              do
              {
                int64_t v64 = v63;
                if (v62 >= v63)
                {
                  uint64_t v65 = (2 * v63) | 1;
                  unint64_t v66 = v10 + 24 * v65;
                  if (2 * v64 + 2 < (uint64_t)v12 && *(double *)v66 < *(double *)(v66 + 24))
                  {
                    v66 += 24;
                    uint64_t v65 = 2 * v64 + 2;
                  }
                  unint64_t v67 = v10 + 24 * v64;
                  double v68 = *(double *)v67;
                  if (*(double *)v66 >= *(double *)v67)
                  {
                    long long v104 = *(_OWORD *)(v67 + 8);
                    do
                    {
                      unint64_t v69 = v67;
                      unint64_t v67 = v66;
                      long long v70 = *(_OWORD *)v66;
                      *(void *)(v69 + 13) = *(void *)(v66 + 13);
                      *(_OWORD *)unint64_t v69 = v70;
                      if (v62 < v65) {
                        break;
                      }
                      uint64_t v71 = 2 * v65;
                      uint64_t v65 = (2 * v65) | 1;
                      unint64_t v66 = v10 + 24 * v65;
                      uint64_t v72 = v71 + 2;
                      if (v72 < (uint64_t)v12 && *(double *)v66 < *(double *)(v66 + 24))
                      {
                        v66 += 24;
                        uint64_t v65 = v72;
                      }
                    }
                    while (*(double *)v66 >= v68);
                    *(double *)unint64_t v67 = v68;
                    *(void *)(v67 + 8) = v104;
                    *(void *)(v67 + 13) = *(void *)((char *)&v104 + 5);
                  }
                }
                int64_t v63 = v64 - 1;
              }
              while (v64);
              int64_t v73 = v11 / 0x18uLL;
              do
              {
                uint64_t v74 = 0;
                *(void *)&v105[16] = *(void *)(v10 + 16);
                *(_OWORD *)uint64_t v105 = *(_OWORD *)v10;
                unint64_t v75 = v10;
                do
                {
                  unint64_t v76 = v75;
                  v75 += 24 * v74 + 24;
                  uint64_t v77 = 2 * v74;
                  uint64_t v74 = (2 * v74) | 1;
                  int64_t v78 = v77 + 2;
                  if (v78 < v73 && *(double *)v75 < *(double *)(v75 + 24))
                  {
                    v75 += 24;
                    uint64_t v74 = v78;
                  }
                  long long v79 = *(_OWORD *)v75;
                  *(void *)(v76 + 13) = *(void *)(v75 + 13);
                  *(_OWORD *)unint64_t v76 = v79;
                }
                while (v74 <= (uint64_t)((unint64_t)(v73 - 2) >> 1));
                a2 -= 24;
                if (v75 == a2)
                {
                  *(void *)(v75 + 13) = *(void *)&v105[13];
                  *(_OWORD *)unint64_t v75 = *(_OWORD *)v105;
                }
                else
                {
                  long long v80 = *(_OWORD *)a2;
                  *(void *)(v75 + 13) = *(void *)(a2 + 13);
                  *(_OWORD *)unint64_t v75 = v80;
                  *(void *)(a2 + 13) = *(void *)&v105[13];
                  *(_OWORD *)a2 = *(_OWORD *)v105;
                  uint64_t v81 = v75 - v10 + 24;
                  if (v81 >= 25)
                  {
                    unint64_t v82 = (v81 / 0x18uLL - 2) >> 1;
                    unint64_t v83 = v10 + 24 * v82;
                    double v84 = *(double *)v75;
                    if (*(double *)v83 < *(double *)v75)
                    {
                      long long v94 = *(_OWORD *)(v75 + 8);
                      do
                      {
                        unint64_t v85 = v75;
                        unint64_t v75 = v83;
                        long long v86 = *(_OWORD *)v83;
                        *(void *)(v85 + 13) = *(void *)(v83 + 13);
                        *(_OWORD *)unint64_t v85 = v86;
                        if (!v82) {
                          break;
                        }
                        unint64_t v82 = (v82 - 1) >> 1;
                        unint64_t v83 = v10 + 24 * v82;
                      }
                      while (*(double *)v83 < v84);
                      *(double *)unint64_t v75 = v84;
                      *(void *)(v75 + 8) = v94;
                      *(void *)(v75 + 13) = *(void *)((char *)&v94 + 5);
                    }
                  }
                }
              }
              while (v73-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 24 * (v12 >> 1);
          if ((unint64_t)v11 >= 0xC01)
          {
            sub_100C81E48((long long *)a1, (long long *)(a1 + 24 * (v12 >> 1)), (long long *)(a2 - 24));
            uint64_t v15 = 3 * v13;
            long long v16 = (long long *)(a1 + 24 * v13 - 24);
            sub_100C81E48((long long *)(a1 + 24), v16, (long long *)(a2 - 48));
            long long v17 = (long long *)(a1 + 24 + 8 * v15);
            sub_100C81E48((long long *)(a1 + 48), v17, (long long *)(a2 - 72));
            sub_100C81E48(v16, (long long *)v14, v17);
            *(void *)&v95[16] = *(void *)(a1 + 16);
            *(_OWORD *)uint64_t v95 = *(_OWORD *)a1;
            uint64_t v18 = *(void *)(v14 + 13);
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(void *)(a1 + 13) = v18;
            *(void *)(v14 + 13) = *(void *)&v95[13];
            *(_OWORD *)unint64_t v14 = *(_OWORD *)v95;
          }
          else
          {
            sub_100C81E48((long long *)(a1 + 24 * (v12 >> 1)), (long long *)a1, (long long *)(a2 - 24));
          }
          --a3;
          double v19 = *(double *)a1;
          if ((a4 & 1) != 0 || *(double *)(a1 - 24) < v19) {
            break;
          }
          long long v93 = *(_OWORD *)(a1 + 8);
          if (v19 >= *(double *)(a2 - 24))
          {
            unint64_t v33 = a1 + 24;
            do
            {
              unint64_t v10 = v33;
              if (v33 >= a2) {
                break;
              }
              v33 += 24;
            }
            while (v19 >= *(double *)v10);
          }
          else
          {
            unint64_t v10 = a1;
            do
            {
              double v32 = *(double *)(v10 + 24);
              v10 += 24;
            }
            while (v19 >= v32);
          }
          unint64_t v34 = a2;
          if (v10 < a2)
          {
            unint64_t v34 = a2;
            do
            {
              double v35 = *(double *)(v34 - 24);
              v34 -= 24;
            }
            while (v19 < v35);
          }
          while (v10 < v34)
          {
            *(void *)&v97[16] = *(void *)(v10 + 16);
            *(_OWORD *)uint64_t v97 = *(_OWORD *)v10;
            long long v36 = *(_OWORD *)v34;
            *(void *)(v10 + 13) = *(void *)(v34 + 13);
            *(_OWORD *)unint64_t v10 = v36;
            *(void *)(v34 + 13) = *(void *)&v97[13];
            *(_OWORD *)unint64_t v34 = *(_OWORD *)v97;
            do
            {
              double v37 = *(double *)(v10 + 24);
              v10 += 24;
            }
            while (v19 >= v37);
            do
            {
              double v38 = *(double *)(v34 - 24);
              v34 -= 24;
            }
            while (v19 < v38);
          }
          BOOL v4 = v10 - 24 >= a1;
          BOOL v5 = v10 - 24 == a1;
          if (v10 - 24 != a1)
          {
            long long v39 = *(_OWORD *)(v10 - 24);
            *(void *)(a1 + 13) = *(void *)(v10 - 11);
            *(_OWORD *)a1 = v39;
          }
          a4 = 0;
          *(double *)(v10 - 24) = v19;
          *(void *)(v10 - 11) = *(void *)((char *)&v93 + 5);
          *(void *)(v10 - 16) = v93;
        }
        uint64_t v20 = 0;
        long long v92 = *(_OWORD *)(a1 + 8);
        do
        {
          double v21 = *(double *)(a1 + v20 + 24);
          v20 += 24;
        }
        while (v21 < v19);
        unint64_t v22 = a1 + v20;
        unint64_t v23 = a2;
        if (v20 == 24)
        {
          unint64_t v23 = a2;
          do
          {
            if (v22 >= v23) {
              break;
            }
            double v25 = *(double *)(v23 - 24);
            v23 -= 24;
          }
          while (v25 >= v19);
        }
        else
        {
          do
          {
            double v24 = *(double *)(v23 - 24);
            v23 -= 24;
          }
          while (v24 >= v19);
        }
        unint64_t v10 = a1 + v20;
        if (v22 < v23)
        {
          unint64_t v26 = v23;
          do
          {
            *(void *)&v96[16] = *(void *)(v10 + 16);
            *(_OWORD *)uint64_t v96 = *(_OWORD *)v10;
            long long v27 = *(_OWORD *)v26;
            *(void *)(v10 + 13) = *(void *)(v26 + 13);
            *(_OWORD *)unint64_t v10 = v27;
            *(void *)(v26 + 13) = *(void *)&v96[13];
            *(_OWORD *)unint64_t v26 = *(_OWORD *)v96;
            do
            {
              double v28 = *(double *)(v10 + 24);
              v10 += 24;
            }
            while (v28 < v19);
            do
            {
              double v29 = *(double *)(v26 - 24);
              v26 -= 24;
            }
            while (v29 >= v19);
          }
          while (v10 < v26);
        }
        if (v10 - 24 != a1)
        {
          long long v30 = *(_OWORD *)(v10 - 24);
          *(void *)(a1 + 13) = *(void *)(v10 - 11);
          *(_OWORD *)a1 = v30;
        }
        *(double *)(v10 - 24) = v19;
        *(void *)(v10 - 11) = *(void *)((char *)&v92 + 5);
        *(void *)(v10 - 16) = v92;
        if (v22 >= v23) {
          break;
        }
LABEL_30:
        sub_101104FE4(a1, v10 - 24, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v31 = sub_1011058F0(a1, v10 - 24);
      if (sub_1011058F0(v10, a2)) {
        break;
      }
      if (!v31) {
        goto LABEL_30;
      }
    }
    a2 = v10 - 24;
    if (!v31) {
      continue;
    }
    break;
  }
}

BOOL sub_1011058F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      long long v6 = (_OWORD *)(a2 - 24);
      if (*(double *)(a2 - 24) < *(double *)a1)
      {
        *(_OWORD *)long long v27 = *(_OWORD *)a1;
        long long v7 = *(_OWORD *)a1;
        *(void *)&v27[16] = *(void *)(a1 + 16);
        uint64_t v8 = *(void *)(a2 - 11);
        *(_OWORD *)a1 = *v6;
        *(void *)(a1 + 13) = v8;
        *long long v6 = v7;
        *(void *)(a2 - 11) = *(void *)&v27[13];
      }
      return result;
    case 3uLL:
      sub_100C81E48((long long *)a1, (long long *)(a1 + 24), (long long *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_100C82250(a1, a1 + 24, a1 + 48, (unint64_t *)(a2 - 24));
      return 1;
    case 5uLL:
      long long v17 = (long long *)(a1 + 24);
      uint64_t v18 = (long long *)(a1 + 48);
      double v19 = (long long *)(a1 + 72);
      sub_100C82250(a1, a1 + 24, a1 + 48, (unint64_t *)(a1 + 72));
      double v21 = *(double *)(a2 - 24);
      uint64_t v20 = a2 - 24;
      if (v21 < *(double *)(a1 + 72))
      {
        *(_OWORD *)double v29 = *v19;
        long long v22 = *v19;
        *(void *)&v29[16] = *(void *)(a1 + 88);
        uint64_t v23 = *(void *)(v20 + 13);
        *double v19 = *(_OWORD *)v20;
        *(void *)(a1 + 85) = v23;
        *(_OWORD *)uint64_t v20 = v22;
        *(void *)(v20 + 13) = *(void *)&v29[13];
        if (*(double *)v19 < *(double *)v18)
        {
          *(_OWORD *)long long v30 = *v18;
          long long v24 = *v18;
          *(void *)&v30[16] = *(void *)(a1 + 64);
          *uint64_t v18 = *v19;
          *(void *)(a1 + 61) = *(void *)(a1 + 85);
          *double v19 = v24;
          *(void *)(a1 + 85) = *(void *)&v30[13];
          if (*(double *)v18 < *(double *)v17)
          {
            *(_OWORD *)BOOL v31 = *v17;
            long long v25 = *v17;
            *(void *)&v31[16] = *(void *)(a1 + 40);
            *long long v17 = *v18;
            *(void *)(a1 + 37) = *(void *)(a1 + 61);
            *uint64_t v18 = v25;
            *(void *)(a1 + 61) = *(void *)&v31[13];
            if (*(double *)(a1 + 24) < *(double *)a1)
            {
              *(_OWORD *)double v32 = *(_OWORD *)a1;
              long long v26 = *(_OWORD *)a1;
              *(void *)&v32[16] = *(void *)(a1 + 16);
              *(_OWORD *)a1 = *v17;
              *(void *)(a1 + 13) = *(void *)(a1 + 37);
              *long long v17 = v26;
              *(void *)(a1 + 37) = *(void *)&v32[13];
            }
          }
        }
      }
      return 1;
    default:
      long long v9 = (double *)(a1 + 48);
      sub_100C81E48((long long *)a1, (long long *)(a1 + 24), (long long *)(a1 + 48));
      uint64_t v10 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    double v13 = *(double *)v10;
    if (*(double *)v10 < *v9)
    {
      long long v28 = *(_OWORD *)(v10 + 8);
      uint64_t v14 = v11;
      while (1)
      {
        uint64_t v15 = a1 + v14;
        *(_OWORD *)(v15 + 72) = *(_OWORD *)(a1 + v14 + 48);
        *(void *)(v15 + 85) = *(void *)(a1 + v14 + 61);
        if (v14 == -48) {
          break;
        }
        v14 -= 24;
        if (v13 >= *(double *)(v15 + 24))
        {
          uint64_t v16 = a1 + v14 + 72;
          goto LABEL_13;
        }
      }
      uint64_t v16 = a1;
LABEL_13:
      *(double *)uint64_t v16 = v13;
      *(void *)(v16 + 8) = v28;
      *(void *)(v16 + 13) = *(void *)((char *)&v28 + 5);
      if (++v12 == 8) {
        return v10 + 24 == a2;
      }
    }
    long long v9 = (double *)v10;
    v11 += 24;
    v10 += 24;
    if (v10 == a2) {
      return 1;
    }
  }
}

void sub_101105BD0(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 88) > *(double *)(v10 + 32))
                {
                  long long v222 = *(_OWORD *)(v10 + 32);
                  long long v234 = *(_OWORD *)(v10 + 48);
                  long long v198 = *(_OWORD *)v10;
                  long long v210 = *(_OWORD *)(v10 + 16);
                  uint64_t v276 = *(void *)(v10 + 112);
                  long long v258 = *(_OWORD *)(v10 + 80);
                  long long v267 = *(_OWORD *)(v10 + 96);
                  long long v246 = *(_OWORD *)(v10 + 64);
                  long long v72 = *(_OWORD *)(a2 - 40);
                  long long v73 = *(_OWORD *)(a2 - 24);
                  long long v74 = *(_OWORD *)(a2 - 56);
                  *(void *)(v10 + 112) = *(void *)(a2 - 8);
                  *(_OWORD *)(v10 + 80) = v72;
                  *(_OWORD *)(v10 + 96) = v73;
                  *(_OWORD *)(v10 + 64) = v74;
                  long long v75 = *(_OWORD *)(a2 - 120);
                  long long v76 = *(_OWORD *)(a2 - 104);
                  long long v77 = *(_OWORD *)(a2 - 72);
                  *(_OWORD *)(v10 + 32) = *(_OWORD *)(a2 - 88);
                  *(_OWORD *)(v10 + 48) = v77;
                  *(_OWORD *)unint64_t v10 = v75;
                  *(_OWORD *)(v10 + 16) = v76;
                  *(_OWORD *)(a2 - 72) = v234;
                  *(_OWORD *)(a2 - 88) = v222;
                  *(_OWORD *)(a2 - 104) = v210;
                  *(_OWORD *)(a2 - 120) = v198;
                  *(void *)(a2 - 8) = v276;
                  *(_OWORD *)(a2 - 24) = v267;
                  *(_OWORD *)(a2 - 40) = v258;
                  *(_OWORD *)(a2 - 56) = v246;
                }
                break;
              case 3uLL:
                sub_1011069F4((long long *)v10, (long long *)(v10 + 120), (double *)(a2 - 120));
                break;
              case 4uLL:
                sub_101107164(v10, v10 + 120, (long long *)(v10 + 240), (long long *)(a2 - 120));
                break;
              case 5uLL:
                int64_t v78 = (long long *)(v10 + 120);
                long long v79 = (long long *)(v10 + 240);
                long long v80 = (long long *)(v10 + 360);
                sub_101107164(v10, v10 + 120, (long long *)(v10 + 240), (long long *)(v10 + 360));
                if (*(double *)(a2 - 88) > *(double *)(v10 + 392))
                {
                  long long v247 = *(_OWORD *)(v10 + 424);
                  long long v259 = *(_OWORD *)(v10 + 440);
                  long long v268 = *(_OWORD *)(v10 + 456);
                  uint64_t v277 = *(void *)(v10 + 472);
                  long long v199 = *v80;
                  long long v211 = *(_OWORD *)(v10 + 376);
                  long long v223 = *(_OWORD *)(v10 + 392);
                  long long v235 = *(_OWORD *)(v10 + 408);
                  long long v81 = *(_OWORD *)(a2 - 120);
                  long long v82 = *(_OWORD *)(a2 - 104);
                  long long v83 = *(_OWORD *)(a2 - 72);
                  *(_OWORD *)(v10 + 392) = *(_OWORD *)(a2 - 88);
                  *(_OWORD *)(v10 + 408) = v83;
                  *long long v80 = v81;
                  *(_OWORD *)(v10 + 376) = v82;
                  uint64_t v84 = *(void *)(a2 - 8);
                  long long v85 = *(_OWORD *)(a2 - 24);
                  long long v86 = *(_OWORD *)(a2 - 40);
                  *(_OWORD *)(v10 + 424) = *(_OWORD *)(a2 - 56);
                  *(_OWORD *)(v10 + 440) = v86;
                  *(_OWORD *)(v10 + 456) = v85;
                  *(void *)(v10 + 472) = v84;
                  *(_OWORD *)(a2 - 72) = v235;
                  *(_OWORD *)(a2 - 88) = v223;
                  *(_OWORD *)(a2 - 104) = v211;
                  *(_OWORD *)(a2 - 120) = v199;
                  *(void *)(a2 - 8) = v277;
                  *(_OWORD *)(a2 - 24) = v268;
                  *(_OWORD *)(a2 - 40) = v259;
                  *(_OWORD *)(a2 - 56) = v247;
                  if (*(double *)(v10 + 392) > *(double *)(v10 + 272))
                  {
                    long long v248 = *(_OWORD *)(v10 + 304);
                    long long v260 = *(_OWORD *)(v10 + 320);
                    long long v269 = *(_OWORD *)(v10 + 336);
                    uint64_t v278 = *(void *)(v10 + 352);
                    long long v200 = *v79;
                    long long v212 = *(_OWORD *)(v10 + 256);
                    long long v224 = *(_OWORD *)(v10 + 272);
                    long long v236 = *(_OWORD *)(v10 + 288);
                    long long v87 = *v80;
                    long long v88 = *(_OWORD *)(v10 + 376);
                    long long v89 = *(_OWORD *)(v10 + 408);
                    *(_OWORD *)(v10 + 272) = *(_OWORD *)(v10 + 392);
                    *(_OWORD *)(v10 + 288) = v89;
                    *long long v79 = v87;
                    *(_OWORD *)(v10 + 256) = v88;
                    long long v90 = *(_OWORD *)(v10 + 424);
                    long long v91 = *(_OWORD *)(v10 + 440);
                    long long v92 = *(_OWORD *)(v10 + 456);
                    *(void *)(v10 + 352) = *(void *)(v10 + 472);
                    *(_OWORD *)(v10 + 320) = v91;
                    *(_OWORD *)(v10 + 336) = v92;
                    *(_OWORD *)(v10 + 304) = v90;
                    *(_OWORD *)(v10 + 392) = v224;
                    *(_OWORD *)(v10 + 408) = v236;
                    *long long v80 = v200;
                    *(_OWORD *)(v10 + 376) = v212;
                    *(void *)(v10 + 472) = v278;
                    *(_OWORD *)(v10 + 440) = v260;
                    *(_OWORD *)(v10 + 456) = v269;
                    *(void *)&long long v92 = *(void *)(v10 + 272);
                    *(void *)&long long v89 = *(void *)(v10 + 152);
                    *(_OWORD *)(v10 + 424) = v248;
                    if (*(double *)&v92 > *(double *)&v89)
                    {
                      long long v249 = *(_OWORD *)(v10 + 184);
                      long long v261 = *(_OWORD *)(v10 + 200);
                      long long v270 = *(_OWORD *)(v10 + 216);
                      uint64_t v279 = *(void *)(v10 + 232);
                      long long v201 = *v78;
                      long long v213 = *(_OWORD *)(v10 + 136);
                      long long v225 = *(_OWORD *)(v10 + 152);
                      long long v237 = *(_OWORD *)(v10 + 168);
                      long long v93 = *v79;
                      long long v94 = *(_OWORD *)(v10 + 256);
                      long long v95 = *(_OWORD *)(v10 + 288);
                      *(_OWORD *)(v10 + 152) = *(_OWORD *)(v10 + 272);
                      *(_OWORD *)(v10 + 168) = v95;
                      *int64_t v78 = v93;
                      *(_OWORD *)(v10 + 136) = v94;
                      long long v96 = *(_OWORD *)(v10 + 304);
                      long long v97 = *(_OWORD *)(v10 + 320);
                      long long v98 = *(_OWORD *)(v10 + 336);
                      *(void *)(v10 + 232) = *(void *)(v10 + 352);
                      *(_OWORD *)(v10 + 200) = v97;
                      *(_OWORD *)(v10 + 216) = v98;
                      *(_OWORD *)(v10 + 184) = v96;
                      *(_OWORD *)(v10 + 272) = v225;
                      *(_OWORD *)(v10 + 288) = v237;
                      *long long v79 = v201;
                      *(_OWORD *)(v10 + 256) = v213;
                      *(void *)(v10 + 352) = v279;
                      *(_OWORD *)(v10 + 320) = v261;
                      *(_OWORD *)(v10 + 336) = v270;
                      *(void *)&long long v98 = *(void *)(v10 + 152);
                      *(void *)&long long v95 = *(void *)(v10 + 32);
                      *(_OWORD *)(v10 + 304) = v249;
                      if (*(double *)&v98 > *(double *)&v95)
                      {
                        long long v226 = *(_OWORD *)(v10 + 32);
                        long long v238 = *(_OWORD *)(v10 + 48);
                        long long v202 = *(_OWORD *)v10;
                        long long v214 = *(_OWORD *)(v10 + 16);
                        uint64_t v280 = *(void *)(v10 + 112);
                        long long v262 = *(_OWORD *)(v10 + 80);
                        long long v271 = *(_OWORD *)(v10 + 96);
                        long long v250 = *(_OWORD *)(v10 + 64);
                        long long v99 = *(_OWORD *)(v10 + 200);
                        *(_OWORD *)(v10 + 64) = *(_OWORD *)(v10 + 184);
                        *(_OWORD *)(v10 + 80) = v99;
                        *(_OWORD *)(v10 + 96) = *(_OWORD *)(v10 + 216);
                        *(void *)(v10 + 112) = *(void *)(v10 + 232);
                        long long v100 = *(_OWORD *)(v10 + 136);
                        *(_OWORD *)unint64_t v10 = *v78;
                        *(_OWORD *)(v10 + 16) = v100;
                        long long v101 = *(_OWORD *)(v10 + 168);
                        *(_OWORD *)(v10 + 32) = *(_OWORD *)(v10 + 152);
                        *(_OWORD *)(v10 + 48) = v101;
                        *(_OWORD *)(v10 + 152) = v226;
                        *(_OWORD *)(v10 + 168) = v238;
                        *int64_t v78 = v202;
                        *(_OWORD *)(v10 + 136) = v214;
                        *(void *)(v10 + 232) = v280;
                        *(_OWORD *)(v10 + 200) = v262;
                        *(_OWORD *)(v10 + 216) = v271;
                        *(_OWORD *)(v10 + 184) = v250;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 2879)
          {
            unint64_t v102 = (_OWORD *)(v10 + 120);
            BOOL v104 = v10 == a2 || v102 == (_OWORD *)a2;
            if (a4)
            {
              if (!v104)
              {
                uint64_t v105 = 0;
                unint64_t v106 = v10;
                do
                {
                  unint64_t v107 = v102;
                  double v108 = *(double *)(v106 + 152);
                  if (v108 > *(double *)(v106 + 32))
                  {
                    long long v170 = *v102;
                    long long v176 = v102[1];
                    long long v227 = *(_OWORD *)(v106 + 192);
                    long long v239 = *(_OWORD *)(v106 + 208);
                    long long v251 = *(_OWORD *)(v106 + 224);
                    uint64_t v109 = v105;
                    long long v203 = *(_OWORD *)(v106 + 160);
                    long long v215 = *(_OWORD *)(v106 + 176);
                    while (1)
                    {
                      uint64_t v110 = v10 + v109;
                      long long v111 = *(_OWORD *)(v10 + v109 + 80);
                      *(_OWORD *)(v110 + 184) = *(_OWORD *)(v10 + v109 + 64);
                      *(_OWORD *)(v110 + 200) = v111;
                      *(_OWORD *)(v110 + 216) = *(_OWORD *)(v10 + v109 + 96);
                      long long v112 = *(_OWORD *)(v10 + v109 + 16);
                      *(_OWORD *)(v110 + 120) = *(_OWORD *)(v10 + v109);
                      *(_OWORD *)(v110 + 136) = v112;
                      long long v113 = *(_OWORD *)(v10 + v109 + 48);
                      *(_OWORD *)(v110 + 152) = *(_OWORD *)(v10 + v109 + 32);
                      *(void *)(v110 + 232) = *(void *)(v10 + v109 + 112);
                      *(_OWORD *)(v110 + 168) = v113;
                      if (!v109) {
                        break;
                      }
                      v109 -= 120;
                      if (v108 <= *(double *)(v110 - 88))
                      {
                        uint64_t v114 = v10 + v109 + 120;
                        goto LABEL_83;
                      }
                    }
                    uint64_t v114 = v10;
LABEL_83:
                    *(_OWORD *)uint64_t v114 = v170;
                    *(_OWORD *)(v114 + 16) = v176;
                    *(double *)(v114 + 32) = v108;
                    *(_OWORD *)(v114 + 56) = v215;
                    *(_OWORD *)(v114 + 72) = v227;
                    *(_OWORD *)(v114 + 88) = v239;
                    *(_OWORD *)(v114 + 104) = v251;
                    *(_OWORD *)(v114 + 40) = v203;
                  }
                  unint64_t v102 = (_OWORD *)((char *)v107 + 120);
                  v105 += 120;
                  unint64_t v106 = (unint64_t)v107;
                }
                while ((_OWORD *)((char *)v107 + 120) != (_OWORD *)a2);
              }
            }
            else if (!v104)
            {
              do
              {
                long long v161 = v102;
                double v162 = *(double *)(a1 + 152);
                if (v162 > *(double *)(a1 + 32))
                {
                  long long v173 = *v102;
                  long long v179 = v102[1];
                  long long v230 = *(_OWORD *)(a1 + 192);
                  long long v242 = *(_OWORD *)(a1 + 208);
                  long long v254 = *(_OWORD *)(a1 + 224);
                  long long v163 = v102;
                  long long v206 = *(_OWORD *)(a1 + 160);
                  long long v218 = *(_OWORD *)(a1 + 176);
                  do
                  {
                    long long v164 = *(_OWORD *)((char *)v163 - 40);
                    v163[4] = *(_OWORD *)((char *)v163 - 56);
                    v163[5] = v164;
                    v163[6] = *(_OWORD *)((char *)v163 - 24);
                    *((void *)v163 + 14) = *((void *)v163 - 1);
                    long long v165 = *(_OWORD *)((char *)v163 - 104);
                    *long long v163 = *(_OWORD *)((char *)v163 - 120);
                    v163[1] = v165;
                    long long v166 = *(_OWORD *)((char *)v163 - 72);
                    v163[2] = *(_OWORD *)((char *)v163 - 88);
                    v163[3] = v166;
                    double v167 = *((double *)v163 - 26);
                    long long v163 = (_OWORD *)((char *)v163 - 120);
                  }
                  while (v162 > v167);
                  *long long v163 = v173;
                  v163[1] = v179;
                  *((double *)v163 + 4) = v162;
                  *(_OWORD *)((char *)v163 + 40) = v206;
                  *(_OWORD *)((char *)v163 + 104) = v254;
                  *(_OWORD *)((char *)v163 + 88) = v242;
                  *(_OWORD *)((char *)v163 + 72) = v230;
                  *(_OWORD *)((char *)v163 + 56) = v218;
                }
                unint64_t v102 = (_OWORD *)((char *)v102 + 120);
                a1 = (unint64_t)v161;
              }
              while ((_OWORD *)((char *)v161 + 120) != (_OWORD *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v115 = (v12 - 2) >> 1;
              int64_t v116 = v115;
              do
              {
                int64_t v117 = v116;
                if (v115 >= v116)
                {
                  uint64_t v118 = (2 * v116) | 1;
                  unint64_t v119 = v10 + 120 * v118;
                  if (2 * v116 + 2 < (uint64_t)v12 && *(double *)(v10 + 120 * v118 + 32) > *(double *)(v119 + 152))
                  {
                    v119 += 120;
                    uint64_t v118 = 2 * v116 + 2;
                  }
                  double v120 = *(double *)(v10 + 120 * v116 + 32);
                  if (*(double *)(v119 + 32) <= v120)
                  {
                    unint64_t v121 = v10 + 120 * v116;
                    long long v171 = *(_OWORD *)v121;
                    long long v177 = *(_OWORD *)(v121 + 16);
                    long long v240 = *(_OWORD *)(v121 + 88);
                    long long v252 = *(_OWORD *)(v121 + 104);
                    long long v216 = *(_OWORD *)(v121 + 56);
                    long long v228 = *(_OWORD *)(v121 + 72);
                    long long v204 = *(_OWORD *)(v121 + 40);
                    do
                    {
                      unint64_t v122 = v121;
                      unint64_t v121 = v119;
                      long long v123 = *(_OWORD *)v119;
                      long long v124 = *(_OWORD *)(v119 + 16);
                      long long v125 = *(_OWORD *)(v119 + 48);
                      *(_OWORD *)(v122 + 32) = *(_OWORD *)(v119 + 32);
                      *(_OWORD *)(v122 + 48) = v125;
                      *(_OWORD *)unint64_t v122 = v123;
                      *(_OWORD *)(v122 + 16) = v124;
                      long long v126 = *(_OWORD *)(v119 + 64);
                      long long v127 = *(_OWORD *)(v119 + 80);
                      long long v128 = *(_OWORD *)(v119 + 96);
                      *(void *)(v122 + 112) = *(void *)(v119 + 112);
                      *(_OWORD *)(v122 + 80) = v127;
                      *(_OWORD *)(v122 + 96) = v128;
                      *(_OWORD *)(v122 + 64) = v126;
                      if (v115 < v118) {
                        break;
                      }
                      uint64_t v129 = (2 * v118) | 1;
                      unint64_t v119 = v10 + 120 * v129;
                      uint64_t v130 = 2 * v118 + 2;
                      if (v130 < (uint64_t)v12 && *(double *)(v10 + 120 * v129 + 32) > *(double *)(v119 + 152))
                      {
                        v119 += 120;
                        uint64_t v129 = v130;
                      }
                      uint64_t v118 = v129;
                    }
                    while (*(double *)(v119 + 32) <= v120);
                    *(_OWORD *)unint64_t v121 = v171;
                    *(_OWORD *)(v121 + 16) = v177;
                    *(double *)(v121 + 32) = v120;
                    *(_OWORD *)(v121 + 56) = v216;
                    *(_OWORD *)(v121 + 72) = v228;
                    *(_OWORD *)(v121 + 88) = v240;
                    *(_OWORD *)(v121 + 104) = v252;
                    *(_OWORD *)(v121 + 40) = v204;
                  }
                }
                int64_t v116 = v117 - 1;
              }
              while (v117);
              int64_t v131 = v11 / 0x78uLL;
              do
              {
                uint64_t v132 = 0;
                long long v229 = *(_OWORD *)(v10 + 32);
                long long v241 = *(_OWORD *)(v10 + 48);
                long long v205 = *(_OWORD *)v10;
                long long v217 = *(_OWORD *)(v10 + 16);
                uint64_t v281 = *(void *)(v10 + 112);
                long long v263 = *(_OWORD *)(v10 + 80);
                long long v272 = *(_OWORD *)(v10 + 96);
                long long v253 = *(_OWORD *)(v10 + 64);
                unint64_t v133 = v10;
                do
                {
                  unint64_t v134 = v133;
                  uint64_t v135 = v132 + 1;
                  v133 += 120 * (v132 + 1);
                  uint64_t v136 = 2 * v132;
                  uint64_t v132 = (2 * v132) | 1;
                  int64_t v137 = v136 + 2;
                  if (v137 < v131 && *(double *)(v134 + 120 * v135 + 32) > *(double *)(v133 + 152))
                  {
                    v133 += 120;
                    uint64_t v132 = v137;
                  }
                  long long v138 = *(_OWORD *)v133;
                  long long v139 = *(_OWORD *)(v133 + 16);
                  long long v140 = *(_OWORD *)(v133 + 48);
                  *(_OWORD *)(v134 + 32) = *(_OWORD *)(v133 + 32);
                  *(_OWORD *)(v134 + 48) = v140;
                  *(_OWORD *)unint64_t v134 = v138;
                  *(_OWORD *)(v134 + 16) = v139;
                  long long v141 = *(_OWORD *)(v133 + 64);
                  long long v142 = *(_OWORD *)(v133 + 80);
                  long long v143 = *(_OWORD *)(v133 + 96);
                  *(void *)(v134 + 112) = *(void *)(v133 + 112);
                  *(_OWORD *)(v134 + 80) = v142;
                  *(_OWORD *)(v134 + 96) = v143;
                  *(_OWORD *)(v134 + 64) = v141;
                }
                while (v132 <= (uint64_t)((unint64_t)(v131 - 2) >> 1));
                a2 -= 120;
                if (v133 == a2)
                {
                  *(_OWORD *)(v133 + 32) = v229;
                  *(_OWORD *)(v133 + 48) = v241;
                  *(_OWORD *)unint64_t v133 = v205;
                  *(_OWORD *)(v133 + 16) = v217;
                  *(void *)(v133 + 112) = v281;
                  *(_OWORD *)(v133 + 80) = v263;
                  *(_OWORD *)(v133 + 96) = v272;
                  *(_OWORD *)(v133 + 64) = v253;
                }
                else
                {
                  long long v144 = *(_OWORD *)a2;
                  long long v145 = *(_OWORD *)(a2 + 16);
                  long long v146 = *(_OWORD *)(a2 + 48);
                  *(_OWORD *)(v133 + 32) = *(_OWORD *)(a2 + 32);
                  *(_OWORD *)(v133 + 48) = v146;
                  *(_OWORD *)unint64_t v133 = v144;
                  *(_OWORD *)(v133 + 16) = v145;
                  long long v147 = *(_OWORD *)(a2 + 64);
                  long long v148 = *(_OWORD *)(a2 + 80);
                  long long v149 = *(_OWORD *)(a2 + 96);
                  *(void *)(v133 + 112) = *(void *)(a2 + 112);
                  *(_OWORD *)(v133 + 80) = v148;
                  *(_OWORD *)(v133 + 96) = v149;
                  *(_OWORD *)(v133 + 64) = v147;
                  *(void *)(a2 + 112) = v281;
                  *(_OWORD *)(a2 + 80) = v263;
                  *(_OWORD *)(a2 + 96) = v272;
                  *(_OWORD *)(a2 + 64) = v253;
                  *(_OWORD *)(a2 + 32) = v229;
                  *(_OWORD *)(a2 + 48) = v241;
                  *(_OWORD *)a2 = v205;
                  *(_OWORD *)(a2 + 16) = v217;
                  uint64_t v150 = v133 - v10 + 120;
                  if (v150 >= 121)
                  {
                    unint64_t v151 = (v150 / 0x78uLL - 2) >> 1;
                    double v152 = *(double *)(v133 + 32);
                    if (*(double *)(v10 + 120 * v151 + 32) > v152)
                    {
                      long long v191 = *(_OWORD *)v133;
                      long long v194 = *(_OWORD *)(v133 + 16);
                      long long v185 = *(_OWORD *)(v133 + 88);
                      long long v188 = *(_OWORD *)(v133 + 104);
                      long long v178 = *(_OWORD *)(v133 + 56);
                      long long v182 = *(_OWORD *)(v133 + 72);
                      long long v172 = *(_OWORD *)(v133 + 40);
                      do
                      {
                        unint64_t v153 = v133;
                        unint64_t v133 = v10 + 120 * v151;
                        long long v154 = *(_OWORD *)v133;
                        long long v155 = *(_OWORD *)(v133 + 16);
                        long long v156 = *(_OWORD *)(v133 + 48);
                        *(_OWORD *)(v153 + 32) = *(_OWORD *)(v133 + 32);
                        *(_OWORD *)(v153 + 48) = v156;
                        *(_OWORD *)unint64_t v153 = v154;
                        *(_OWORD *)(v153 + 16) = v155;
                        long long v157 = *(_OWORD *)(v133 + 64);
                        long long v158 = *(_OWORD *)(v133 + 80);
                        long long v159 = *(_OWORD *)(v133 + 96);
                        *(void *)(v153 + 112) = *(void *)(v133 + 112);
                        *(_OWORD *)(v153 + 80) = v158;
                        *(_OWORD *)(v153 + 96) = v159;
                        *(_OWORD *)(v153 + 64) = v157;
                        if (!v151) {
                          break;
                        }
                        unint64_t v151 = (v151 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 120 * v151 + 32) > v152);
                      *(_OWORD *)unint64_t v133 = v191;
                      *(_OWORD *)(v133 + 16) = v194;
                      *(double *)(v133 + 32) = v152;
                      *(_OWORD *)(v133 + 40) = v172;
                      *(_OWORD *)(v133 + 104) = v188;
                      *(_OWORD *)(v133 + 88) = v185;
                      *(_OWORD *)(v133 + 72) = v182;
                      *(_OWORD *)(v133 + 56) = v178;
                    }
                  }
                }
              }
              while (v131-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 120 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x3C01)
          {
            sub_1011069F4((long long *)a1, (long long *)(a1 + 120 * (v12 >> 1)), (double *)(a2 - 120));
            uint64_t v15 = 120 * v13;
            uint64_t v16 = (long long *)(120 * v13 + a1 - 120);
            sub_1011069F4((long long *)(a1 + 120), v16, (double *)(a2 - 240));
            long long v17 = (long long *)(a1 + 120 + v15);
            sub_1011069F4((long long *)(a1 + 240), v17, (double *)(a2 - 360));
            sub_1011069F4(v16, (long long *)v14, (double *)v17);
            long long v219 = *(_OWORD *)(a1 + 32);
            long long v231 = *(_OWORD *)(a1 + 48);
            long long v195 = *(_OWORD *)a1;
            long long v207 = *(_OWORD *)(a1 + 16);
            uint64_t v273 = *(void *)(a1 + 112);
            long long v255 = *(_OWORD *)(a1 + 80);
            long long v264 = *(_OWORD *)(a1 + 96);
            long long v243 = *(_OWORD *)(a1 + 64);
            long long v19 = *(_OWORD *)(v14 + 80);
            long long v18 = *(_OWORD *)(v14 + 96);
            long long v20 = *(_OWORD *)(v14 + 64);
            *(void *)(a1 + 112) = *(void *)(v14 + 112);
            *(_OWORD *)(a1 + 80) = v19;
            *(_OWORD *)(a1 + 96) = v18;
            *(_OWORD *)(a1 + 64) = v20;
            long long v21 = *(_OWORD *)v14;
            long long v22 = *(_OWORD *)(v14 + 16);
            long long v23 = *(_OWORD *)(v14 + 48);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(v14 + 32);
            *(_OWORD *)(a1 + 48) = v23;
            *(_OWORD *)a1 = v21;
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(v14 + 32) = v219;
            *(_OWORD *)(v14 + 48) = v231;
            *(_OWORD *)unint64_t v14 = v195;
            *(_OWORD *)(v14 + 16) = v207;
            *(void *)(v14 + 112) = v273;
            *(_OWORD *)(v14 + 80) = v255;
            *(_OWORD *)(v14 + 96) = v264;
            *(_OWORD *)(v14 + 64) = v243;
          }
          else
          {
            sub_1011069F4((long long *)(a1 + 120 * (v12 >> 1)), (long long *)a1, (double *)(a2 - 120));
          }
          --a3;
          if (a4) {
            break;
          }
          double v24 = *(double *)(a1 + 32);
          if (*(double *)(a1 - 88) > v24) {
            goto LABEL_12;
          }
          long long v190 = *(_OWORD *)a1;
          long long v193 = *(_OWORD *)(a1 + 16);
          long long v187 = *(_OWORD *)(a1 + 104);
          long long v181 = *(_OWORD *)(a1 + 72);
          long long v184 = *(_OWORD *)(a1 + 88);
          long long v169 = *(_OWORD *)(a1 + 40);
          long long v175 = *(_OWORD *)(a1 + 56);
          if (v24 <= *(double *)(a2 - 88))
          {
            unint64_t v52 = a1 + 120;
            do
            {
              unint64_t v10 = v52;
              if (v52 >= a2) {
                break;
              }
              double v53 = *(double *)(v52 + 32);
              v52 += 120;
            }
            while (v24 <= v53);
          }
          else
          {
            unint64_t v50 = a1;
            do
            {
              unint64_t v10 = v50 + 120;
              double v51 = *(double *)(v50 + 152);
              v50 += 120;
            }
            while (v24 <= v51);
          }
          unint64_t v54 = a2;
          if (v10 < a2)
          {
            unint64_t v55 = a2;
            do
            {
              unint64_t v54 = v55 - 120;
              double v56 = *(double *)(v55 - 88);
              v55 -= 120;
            }
            while (v24 > v56);
          }
          while (v10 < v54)
          {
            long long v221 = *(_OWORD *)(v10 + 32);
            long long v233 = *(_OWORD *)(v10 + 48);
            long long v197 = *(_OWORD *)v10;
            long long v209 = *(_OWORD *)(v10 + 16);
            uint64_t v275 = *(void *)(v10 + 112);
            long long v257 = *(_OWORD *)(v10 + 80);
            long long v266 = *(_OWORD *)(v10 + 96);
            long long v245 = *(_OWORD *)(v10 + 64);
            long long v58 = *(_OWORD *)(v54 + 80);
            long long v57 = *(_OWORD *)(v54 + 96);
            long long v59 = *(_OWORD *)(v54 + 64);
            *(void *)(v10 + 112) = *(void *)(v54 + 112);
            *(_OWORD *)(v10 + 80) = v58;
            *(_OWORD *)(v10 + 96) = v57;
            *(_OWORD *)(v10 + 64) = v59;
            long long v60 = *(_OWORD *)v54;
            long long v61 = *(_OWORD *)(v54 + 16);
            long long v62 = *(_OWORD *)(v54 + 48);
            *(_OWORD *)(v10 + 32) = *(_OWORD *)(v54 + 32);
            *(_OWORD *)(v10 + 48) = v62;
            *(_OWORD *)unint64_t v10 = v60;
            *(_OWORD *)(v10 + 16) = v61;
            *(_OWORD *)(v54 + 32) = v221;
            *(_OWORD *)(v54 + 48) = v233;
            *(_OWORD *)unint64_t v54 = v197;
            *(_OWORD *)(v54 + 16) = v209;
            *(void *)(v54 + 112) = v275;
            *(_OWORD *)(v54 + 80) = v257;
            *(_OWORD *)(v54 + 96) = v266;
            *(_OWORD *)(v54 + 64) = v245;
            do
            {
              double v63 = *(double *)(v10 + 152);
              v10 += 120;
            }
            while (v24 <= v63);
            do
            {
              double v64 = *(double *)(v54 - 88);
              v54 -= 120;
            }
            while (v24 > v64);
          }
          uint64_t v65 = (long long *)(v10 - 120);
          BOOL v4 = v10 - 120 >= a1;
          BOOL v5 = v10 - 120 == a1;
          if (v10 - 120 != a1)
          {
            long long v66 = *v65;
            long long v67 = *(_OWORD *)(v10 - 104);
            long long v68 = *(_OWORD *)(v10 - 72);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(v10 - 88);
            *(_OWORD *)(a1 + 48) = v68;
            *(_OWORD *)a1 = v66;
            *(_OWORD *)(a1 + 16) = v67;
            long long v69 = *(_OWORD *)(v10 - 56);
            long long v70 = *(_OWORD *)(v10 - 40);
            long long v71 = *(_OWORD *)(v10 - 24);
            *(void *)(a1 + 112) = *(void *)(v10 - 8);
            *(_OWORD *)(a1 + 80) = v70;
            *(_OWORD *)(a1 + 96) = v71;
            *(_OWORD *)(a1 + 64) = v69;
          }
          a4 = 0;
          *uint64_t v65 = v190;
          *(_OWORD *)(v10 - 104) = v193;
          *(double *)(v10 - 88) = v24;
          *(_OWORD *)(v10 - 80) = v169;
          *(_OWORD *)(v10 - 32) = v184;
          *(_OWORD *)(v10 - 16) = v187;
          *(_OWORD *)(v10 - 64) = v175;
          *(_OWORD *)(v10 - 48) = v181;
        }
        double v24 = *(double *)(a1 + 32);
LABEL_12:
        uint64_t v25 = 0;
        long long v189 = *(_OWORD *)a1;
        long long v192 = *(_OWORD *)(a1 + 16);
        long long v183 = *(_OWORD *)(a1 + 88);
        long long v186 = *(_OWORD *)(a1 + 104);
        long long v174 = *(_OWORD *)(a1 + 56);
        long long v180 = *(_OWORD *)(a1 + 72);
        long long v168 = *(_OWORD *)(a1 + 40);
        do
        {
          double v26 = *(double *)(a1 + v25 + 152);
          v25 += 120;
        }
        while (v26 > v24);
        unint64_t v27 = a1 + v25;
        unint64_t v28 = a2;
        if (v25 == 120)
        {
          unint64_t v31 = a2;
          while (v27 < v31)
          {
            unint64_t v29 = v31 - 120;
            double v32 = *(double *)(v31 - 88);
            v31 -= 120;
            if (v32 > v24) {
              goto LABEL_22;
            }
          }
          unint64_t v29 = v31;
        }
        else
        {
          do
          {
            unint64_t v29 = v28 - 120;
            double v30 = *(double *)(v28 - 88);
            v28 -= 120;
          }
          while (v30 <= v24);
        }
LABEL_22:
        unint64_t v10 = v27;
        if (v27 < v29)
        {
          unint64_t v33 = v29;
          do
          {
            long long v220 = *(_OWORD *)(v10 + 32);
            long long v232 = *(_OWORD *)(v10 + 48);
            long long v196 = *(_OWORD *)v10;
            long long v208 = *(_OWORD *)(v10 + 16);
            uint64_t v274 = *(void *)(v10 + 112);
            long long v256 = *(_OWORD *)(v10 + 80);
            long long v265 = *(_OWORD *)(v10 + 96);
            long long v244 = *(_OWORD *)(v10 + 64);
            long long v35 = *(_OWORD *)(v33 + 80);
            long long v34 = *(_OWORD *)(v33 + 96);
            long long v36 = *(_OWORD *)(v33 + 64);
            *(void *)(v10 + 112) = *(void *)(v33 + 112);
            *(_OWORD *)(v10 + 80) = v35;
            *(_OWORD *)(v10 + 96) = v34;
            *(_OWORD *)(v10 + 64) = v36;
            long long v37 = *(_OWORD *)v33;
            long long v38 = *(_OWORD *)(v33 + 16);
            long long v39 = *(_OWORD *)(v33 + 48);
            *(_OWORD *)(v10 + 32) = *(_OWORD *)(v33 + 32);
            *(_OWORD *)(v10 + 48) = v39;
            *(_OWORD *)unint64_t v10 = v37;
            *(_OWORD *)(v10 + 16) = v38;
            *(_OWORD *)(v33 + 32) = v220;
            *(_OWORD *)(v33 + 48) = v232;
            *(_OWORD *)unint64_t v33 = v196;
            *(_OWORD *)(v33 + 16) = v208;
            *(void *)(v33 + 112) = v274;
            *(_OWORD *)(v33 + 80) = v256;
            *(_OWORD *)(v33 + 96) = v265;
            *(_OWORD *)(v33 + 64) = v244;
            do
            {
              double v40 = *(double *)(v10 + 152);
              v10 += 120;
            }
            while (v40 > v24);
            do
            {
              double v41 = *(double *)(v33 - 88);
              v33 -= 120;
            }
            while (v41 <= v24);
          }
          while (v10 < v33);
        }
        long long v42 = (long long *)(v10 - 120);
        if (v10 - 120 != a1)
        {
          long long v43 = *v42;
          long long v44 = *(_OWORD *)(v10 - 104);
          long long v45 = *(_OWORD *)(v10 - 72);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(v10 - 88);
          *(_OWORD *)(a1 + 48) = v45;
          *(_OWORD *)a1 = v43;
          *(_OWORD *)(a1 + 16) = v44;
          long long v46 = *(_OWORD *)(v10 - 56);
          long long v47 = *(_OWORD *)(v10 - 40);
          long long v48 = *(_OWORD *)(v10 - 24);
          *(void *)(a1 + 112) = *(void *)(v10 - 8);
          *(_OWORD *)(a1 + 80) = v47;
          *(_OWORD *)(a1 + 96) = v48;
          *(_OWORD *)(a1 + 64) = v46;
        }
        *long long v42 = v189;
        *(_OWORD *)(v10 - 104) = v192;
        *(double *)(v10 - 88) = v24;
        *(_OWORD *)(v10 - 80) = v168;
        *(_OWORD *)(v10 - 32) = v183;
        *(_OWORD *)(v10 - 16) = v186;
        *(_OWORD *)(v10 - 64) = v174;
        *(_OWORD *)(v10 - 48) = v180;
        if (v27 >= v29) {
          break;
        }
LABEL_33:
        sub_101105BD0(a1, v10 - 120, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v49 = sub_101106C7C(a1, v10 - 120);
      if (sub_101106C7C(v10, a2)) {
        break;
      }
      if (!v49) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 120;
    if (!v49) {
      continue;
    }
    break;
  }
}

__n128 sub_1011069F4(long long *a1, long long *a2, double *a3)
{
  result.n128_u64[0] = *((void *)a2 + 4);
  double v4 = a3[4];
  if (result.n128_f64[0] <= *((double *)a1 + 4))
  {
    if (v4 > result.n128_f64[0])
    {
      long long v52 = a2[4];
      long long v56 = a2[5];
      long long v60 = a2[6];
      uint64_t v64 = *((void *)a2 + 14);
      long long v36 = *a2;
      long long v40 = a2[1];
      long long v44 = a2[2];
      long long v48 = a2[3];
      long long v11 = *((_OWORD *)a3 + 4);
      long long v12 = *((_OWORD *)a3 + 5);
      long long v13 = *((_OWORD *)a3 + 6);
      *((double *)a2 + 14) = a3[14];
      a2[5] = v12;
      a2[6] = v13;
      a2[4] = v11;
      long long v14 = *(_OWORD *)a3;
      long long v15 = *((_OWORD *)a3 + 1);
      long long v16 = *((_OWORD *)a3 + 3);
      a2[2] = *((_OWORD *)a3 + 2);
      a2[3] = v16;
      *a2 = v14;
      a2[1] = v15;
      *((_OWORD *)a3 + 2) = v44;
      *((_OWORD *)a3 + 3) = v48;
      *(_OWORD *)a3 = v36;
      *((_OWORD *)a3 + 1) = v40;
      *((void *)a3 + 14) = v64;
      result.n128_u64[1] = *((void *)&v56 + 1);
      *((_OWORD *)a3 + 5) = v56;
      *((_OWORD *)a3 + 6) = v60;
      *((_OWORD *)a3 + 4) = v52;
      result.n128_u64[0] = *((void *)a2 + 4);
      if (result.n128_f64[0] > *((double *)a1 + 4))
      {
        long long v53 = a1[4];
        __n128 v57 = (__n128)a1[5];
        long long v61 = a1[6];
        uint64_t v65 = *((void *)a1 + 14);
        long long v37 = *a1;
        long long v41 = a1[1];
        long long v45 = a1[2];
        long long v49 = a1[3];
        long long v17 = a2[4];
        long long v18 = a2[5];
        long long v19 = a2[6];
        *((void *)a1 + 14) = *((void *)a2 + 14);
        a1[5] = v18;
        a1[6] = v19;
        a1[4] = v17;
        long long v20 = *a2;
        long long v21 = a2[1];
        long long v22 = a2[3];
        a1[2] = a2[2];
        a1[3] = v22;
        *a1 = v20;
        a1[1] = v21;
        a2[2] = v45;
        a2[3] = v49;
        *a2 = v37;
        a2[1] = v41;
        *((void *)a2 + 14) = v65;
        __n128 result = v57;
        a2[5] = (__int128)v57;
        a2[6] = v61;
        a2[4] = v53;
      }
    }
  }
  else
  {
    if (v4 <= result.n128_f64[0])
    {
      long long v54 = a1[4];
      long long v58 = a1[5];
      long long v62 = a1[6];
      uint64_t v66 = *((void *)a1 + 14);
      long long v38 = *a1;
      long long v42 = a1[1];
      long long v46 = a1[2];
      long long v50 = a1[3];
      long long v23 = a2[4];
      long long v24 = a2[5];
      long long v25 = a2[6];
      *((void *)a1 + 14) = *((void *)a2 + 14);
      a1[5] = v24;
      a1[6] = v25;
      a1[4] = v23;
      long long v26 = *a2;
      long long v27 = a2[1];
      long long v28 = a2[3];
      a1[2] = a2[2];
      a1[3] = v28;
      *a1 = v26;
      a1[1] = v27;
      a2[2] = v46;
      a2[3] = v50;
      *a2 = v38;
      a2[1] = v42;
      *((void *)a2 + 14) = v66;
      result.n128_u64[1] = *((void *)&v58 + 1);
      a2[5] = v58;
      a2[6] = v62;
      a2[4] = v54;
      result.n128_f64[0] = a3[4];
      if (result.n128_f64[0] <= *((double *)a2 + 4)) {
        return result;
      }
      long long v51 = a2[4];
      __n128 v55 = (__n128)a2[5];
      long long v59 = a2[6];
      uint64_t v63 = *((void *)a2 + 14);
      long long v35 = *a2;
      long long v39 = a2[1];
      long long v43 = a2[2];
      long long v47 = a2[3];
      long long v29 = *((_OWORD *)a3 + 4);
      long long v30 = *((_OWORD *)a3 + 5);
      long long v31 = *((_OWORD *)a3 + 6);
      *((double *)a2 + 14) = a3[14];
      a2[5] = v30;
      a2[6] = v31;
      a2[4] = v29;
      long long v32 = *(_OWORD *)a3;
      long long v33 = *((_OWORD *)a3 + 1);
      long long v34 = *((_OWORD *)a3 + 3);
      a2[2] = *((_OWORD *)a3 + 2);
      a2[3] = v34;
      *a2 = v32;
      a2[1] = v33;
    }
    else
    {
      long long v51 = a1[4];
      __n128 v55 = (__n128)a1[5];
      long long v59 = a1[6];
      uint64_t v63 = *((void *)a1 + 14);
      long long v35 = *a1;
      long long v39 = a1[1];
      long long v43 = a1[2];
      long long v47 = a1[3];
      long long v5 = *((_OWORD *)a3 + 4);
      long long v6 = *((_OWORD *)a3 + 5);
      long long v7 = *((_OWORD *)a3 + 6);
      *((double *)a1 + 14) = a3[14];
      a1[5] = v6;
      a1[6] = v7;
      a1[4] = v5;
      long long v8 = *(_OWORD *)a3;
      long long v9 = *((_OWORD *)a3 + 1);
      long long v10 = *((_OWORD *)a3 + 3);
      a1[2] = *((_OWORD *)a3 + 2);
      a1[3] = v10;
      *a1 = v8;
      a1[1] = v9;
    }
    *((_OWORD *)a3 + 2) = v43;
    *((_OWORD *)a3 + 3) = v47;
    *(_OWORD *)a3 = v35;
    *((_OWORD *)a3 + 1) = v39;
    *((void *)a3 + 14) = v63;
    __n128 result = v55;
    *((__n128 *)a3 + 5) = v55;
    *((_OWORD *)a3 + 6) = v59;
    *((_OWORD *)a3 + 4) = v51;
  }
  return result;
}

BOOL sub_101106C7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xEEEEEEEEEEEEEEEFLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 88) > *(double *)(a1 + 32))
      {
        long long v77 = *(_OWORD *)(a1 + 64);
        long long v83 = *(_OWORD *)(a1 + 80);
        long long v88 = *(_OWORD *)(a1 + 96);
        uint64_t v93 = *(void *)(a1 + 112);
        long long v53 = *(_OWORD *)a1;
        long long v59 = *(_OWORD *)(a1 + 16);
        long long v65 = *(_OWORD *)(a1 + 32);
        long long v71 = *(_OWORD *)(a1 + 48);
        long long v6 = *(_OWORD *)(a2 - 56);
        long long v7 = *(_OWORD *)(a2 - 40);
        long long v8 = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 112) = *(void *)(a2 - 8);
        *(_OWORD *)(a1 + 80) = v7;
        *(_OWORD *)(a1 + 96) = v8;
        *(_OWORD *)(a1 + 64) = v6;
        long long v9 = *(_OWORD *)(a2 - 120);
        long long v10 = *(_OWORD *)(a2 - 104);
        long long v11 = *(_OWORD *)(a2 - 72);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 - 88);
        *(_OWORD *)(a1 + 48) = v11;
        *(_OWORD *)a1 = v9;
        *(_OWORD *)(a1 + 16) = v10;
        *(_OWORD *)(a2 - 72) = v71;
        *(_OWORD *)(a2 - 88) = v65;
        *(_OWORD *)(a2 - 104) = v59;
        *(_OWORD *)(a2 - 120) = v53;
        *(_OWORD *)(a2 - 24) = v88;
        *(_OWORD *)(a2 - 40) = v83;
        *(_OWORD *)(a2 - 56) = v77;
        *(void *)(a2 - 8) = v93;
      }
      return result;
    case 3uLL:
      sub_1011069F4((long long *)a1, (long long *)(a1 + 120), (double *)(a2 - 120));
      return 1;
    case 4uLL:
      sub_101107164(a1, a1 + 120, (long long *)(a1 + 240), (long long *)(a2 - 120));
      return 1;
    case 5uLL:
      long long v24 = (long long *)(a1 + 120);
      long long v25 = (long long *)(a1 + 240);
      long long v26 = (long long *)(a1 + 360);
      sub_101107164(a1, a1 + 120, (long long *)(a1 + 240), (long long *)(a1 + 360));
      if (*(double *)(a2 - 88) <= *(double *)(a1 + 392)) {
        return 1;
      }
      long long v79 = *(_OWORD *)(a1 + 424);
      long long v84 = *(_OWORD *)(a1 + 440);
      long long v89 = *(_OWORD *)(a1 + 456);
      uint64_t v94 = *(void *)(a1 + 472);
      long long v55 = *v26;
      long long v61 = *(_OWORD *)(a1 + 376);
      long long v67 = *(_OWORD *)(a1 + 392);
      long long v73 = *(_OWORD *)(a1 + 408);
      long long v27 = *(_OWORD *)(a2 - 56);
      long long v28 = *(_OWORD *)(a2 - 40);
      long long v29 = *(_OWORD *)(a2 - 24);
      *(void *)(a1 + 472) = *(void *)(a2 - 8);
      *(_OWORD *)(a1 + 440) = v28;
      *(_OWORD *)(a1 + 456) = v29;
      *(_OWORD *)(a1 + 424) = v27;
      long long v30 = *(_OWORD *)(a2 - 120);
      long long v31 = *(_OWORD *)(a2 - 104);
      long long v32 = *(_OWORD *)(a2 - 72);
      *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 - 88);
      *(_OWORD *)(a1 + 408) = v32;
      *long long v26 = v30;
      *(_OWORD *)(a1 + 376) = v31;
      *(_OWORD *)(a2 - 72) = v73;
      *(_OWORD *)(a2 - 88) = v67;
      *(_OWORD *)(a2 - 104) = v61;
      *(_OWORD *)(a2 - 120) = v55;
      *(_OWORD *)(a2 - 24) = v89;
      *(_OWORD *)(a2 - 40) = v84;
      *(_OWORD *)(a2 - 56) = v79;
      *(void *)(a2 - 8) = v94;
      if (*(double *)(a1 + 392) <= *(double *)(a1 + 272)) {
        return 1;
      }
      long long v80 = *(_OWORD *)(a1 + 304);
      long long v85 = *(_OWORD *)(a1 + 320);
      long long v90 = *(_OWORD *)(a1 + 336);
      uint64_t v95 = *(void *)(a1 + 352);
      long long v56 = *v25;
      long long v62 = *(_OWORD *)(a1 + 256);
      long long v68 = *(_OWORD *)(a1 + 272);
      long long v74 = *(_OWORD *)(a1 + 288);
      long long v33 = *v26;
      long long v34 = *(_OWORD *)(a1 + 376);
      long long v35 = *(_OWORD *)(a1 + 408);
      *(_OWORD *)(a1 + 272) = *(_OWORD *)(a1 + 392);
      *(_OWORD *)(a1 + 288) = v35;
      *long long v25 = v33;
      *(_OWORD *)(a1 + 256) = v34;
      long long v36 = *(_OWORD *)(a1 + 424);
      long long v37 = *(_OWORD *)(a1 + 440);
      long long v38 = *(_OWORD *)(a1 + 456);
      *(void *)(a1 + 352) = *(void *)(a1 + 472);
      *(_OWORD *)(a1 + 320) = v37;
      *(_OWORD *)(a1 + 336) = v38;
      *(_OWORD *)(a1 + 304) = v36;
      *(_OWORD *)(a1 + 392) = v68;
      *(_OWORD *)(a1 + 408) = v74;
      *long long v26 = v56;
      *(_OWORD *)(a1 + 376) = v62;
      *(void *)(a1 + 472) = v95;
      *(_OWORD *)(a1 + 440) = v85;
      *(_OWORD *)(a1 + 456) = v90;
      *(void *)&long long v38 = *(void *)(a1 + 272);
      *(void *)&long long v35 = *(void *)(a1 + 152);
      *(_OWORD *)(a1 + 424) = v80;
      if (*(double *)&v38 <= *(double *)&v35) {
        return 1;
      }
      long long v81 = *(_OWORD *)(a1 + 184);
      long long v86 = *(_OWORD *)(a1 + 200);
      long long v91 = *(_OWORD *)(a1 + 216);
      uint64_t v96 = *(void *)(a1 + 232);
      long long v57 = *v24;
      long long v63 = *(_OWORD *)(a1 + 136);
      long long v69 = *(_OWORD *)(a1 + 152);
      long long v75 = *(_OWORD *)(a1 + 168);
      long long v39 = *v25;
      long long v40 = *(_OWORD *)(a1 + 256);
      long long v41 = *(_OWORD *)(a1 + 288);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a1 + 272);
      *(_OWORD *)(a1 + 168) = v41;
      *long long v24 = v39;
      *(_OWORD *)(a1 + 136) = v40;
      long long v42 = *(_OWORD *)(a1 + 304);
      long long v43 = *(_OWORD *)(a1 + 320);
      long long v44 = *(_OWORD *)(a1 + 336);
      *(void *)(a1 + 232) = *(void *)(a1 + 352);
      *(_OWORD *)(a1 + 200) = v43;
      *(_OWORD *)(a1 + 216) = v44;
      *(_OWORD *)(a1 + 184) = v42;
      *(_OWORD *)(a1 + 272) = v69;
      *(_OWORD *)(a1 + 288) = v75;
      *long long v25 = v57;
      *(_OWORD *)(a1 + 256) = v63;
      *(void *)(a1 + 352) = v96;
      *(_OWORD *)(a1 + 320) = v86;
      *(_OWORD *)(a1 + 336) = v91;
      *(void *)&long long v44 = *(void *)(a1 + 152);
      *(void *)&long long v41 = *(void *)(a1 + 32);
      *(_OWORD *)(a1 + 304) = v81;
      if (*(double *)&v44 <= *(double *)&v41) {
        return 1;
      }
      long long v82 = *(_OWORD *)(a1 + 64);
      long long v87 = *(_OWORD *)(a1 + 80);
      long long v92 = *(_OWORD *)(a1 + 96);
      uint64_t v97 = *(void *)(a1 + 112);
      long long v58 = *(_OWORD *)a1;
      long long v64 = *(_OWORD *)(a1 + 16);
      long long v70 = *(_OWORD *)(a1 + 32);
      long long v76 = *(_OWORD *)(a1 + 48);
      long long v45 = *v24;
      long long v46 = *(_OWORD *)(a1 + 136);
      long long v47 = *(_OWORD *)(a1 + 168);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 152);
      *(_OWORD *)(a1 + 48) = v47;
      *(_OWORD *)a1 = v45;
      *(_OWORD *)(a1 + 16) = v46;
      long long v48 = *(_OWORD *)(a1 + 184);
      long long v49 = *(_OWORD *)(a1 + 200);
      long long v50 = *(_OWORD *)(a1 + 216);
      *(void *)(a1 + 112) = *(void *)(a1 + 232);
      *(_OWORD *)(a1 + 80) = v49;
      *(_OWORD *)(a1 + 96) = v50;
      *(_OWORD *)(a1 + 64) = v48;
      *(_OWORD *)(a1 + 152) = v70;
      *(_OWORD *)(a1 + 168) = v76;
      *long long v24 = v58;
      *(_OWORD *)(a1 + 136) = v64;
      *(void *)(a1 + 232) = v97;
      *(_OWORD *)(a1 + 200) = v87;
      *(_OWORD *)(a1 + 216) = v92;
      BOOL result = 1;
      *(_OWORD *)(a1 + 184) = v82;
      return result;
    default:
      uint64_t v12 = a1 + 240;
      sub_1011069F4((long long *)a1, (long long *)(a1 + 120), (double *)(a1 + 240));
      uint64_t v13 = a1 + 360;
      if (a1 + 360 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    double v16 = *(double *)(v13 + 32);
    if (v16 > *(double *)(v12 + 32))
    {
      long long v51 = *(_OWORD *)v13;
      long long v52 = *(_OWORD *)(v13 + 16);
      long long v66 = *(_OWORD *)(v13 + 72);
      long long v72 = *(_OWORD *)(v13 + 88);
      long long v78 = *(_OWORD *)(v13 + 104);
      uint64_t v17 = v14;
      long long v54 = *(_OWORD *)(v13 + 40);
      long long v60 = *(_OWORD *)(v13 + 56);
      while (1)
      {
        long long v18 = (_OWORD *)(a1 + v17 + 360);
        long long v19 = *(_OWORD *)(a1 + v17 + 320);
        v18[4] = *(_OWORD *)(a1 + v17 + 304);
        v18[5] = v19;
        v18[6] = *(_OWORD *)(a1 + v17 + 336);
        *(void *)(a1 + v17 + 472) = *(void *)(a1 + v17 + 352);
        long long v20 = *(_OWORD *)(a1 + v17 + 256);
        *long long v18 = *(_OWORD *)(a1 + v17 + 240);
        v18[1] = v20;
        long long v21 = *(_OWORD *)(a1 + v17 + 288);
        v18[2] = *(_OWORD *)(a1 + v17 + 272);
        v18[3] = v21;
        if (v17 == -240) {
          break;
        }
        double v22 = *(double *)(a1 + v17 + 152);
        v17 -= 120;
        if (v16 <= v22)
        {
          uint64_t v23 = a1 + v17 + 360;
          goto LABEL_13;
        }
      }
      uint64_t v23 = a1;
LABEL_13:
      *(_OWORD *)uint64_t v23 = v51;
      *(_OWORD *)(v23 + 16) = v52;
      *(double *)(v23 + 32) = v16;
      *(_OWORD *)(v23 + 56) = v60;
      *(_OWORD *)(v23 + 72) = v66;
      *(_OWORD *)(v23 + 88) = v72;
      *(_OWORD *)(v23 + 104) = v78;
      ++v15;
      *(_OWORD *)(v23 + 40) = v54;
      if (v15 == 8) {
        return v13 + 120 == a2;
      }
    }
    uint64_t v12 = v13;
    v14 += 120;
    v13 += 120;
    if (v13 == a2) {
      return 1;
    }
  }
}

__n128 sub_101107164(uint64_t a1, uint64_t a2, long long *a3, long long *a4)
{
  sub_1011069F4((long long *)a1, (long long *)a2, (double *)a3);
  result.n128_u64[0] = *((void *)a4 + 4);
  if (result.n128_f64[0] > *((double *)a3 + 4))
  {
    long long v39 = a3[4];
    long long v42 = a3[5];
    long long v45 = a3[6];
    uint64_t v48 = *((void *)a3 + 14);
    long long v27 = *a3;
    long long v30 = a3[1];
    long long v33 = a3[2];
    long long v36 = a3[3];
    long long v9 = a4[4];
    long long v10 = a4[5];
    long long v11 = a4[6];
    *((void *)a3 + 14) = *((void *)a4 + 14);
    a3[5] = v10;
    a3[6] = v11;
    a3[4] = v9;
    long long v12 = *a4;
    long long v13 = a4[1];
    long long v14 = a4[3];
    a3[2] = a4[2];
    a3[3] = v14;
    *a3 = v12;
    a3[1] = v13;
    a4[2] = v33;
    a4[3] = v36;
    *a4 = v27;
    a4[1] = v30;
    *((void *)a4 + 14) = v48;
    result.n128_u64[1] = *((void *)&v42 + 1);
    a4[5] = v42;
    a4[6] = v45;
    a4[4] = v39;
    result.n128_u64[0] = *((void *)a3 + 4);
    if (result.n128_f64[0] > *(double *)(a2 + 32))
    {
      long long v40 = *(_OWORD *)(a2 + 64);
      long long v43 = *(_OWORD *)(a2 + 80);
      long long v46 = *(_OWORD *)(a2 + 96);
      uint64_t v49 = *(void *)(a2 + 112);
      long long v28 = *(_OWORD *)a2;
      long long v31 = *(_OWORD *)(a2 + 16);
      long long v34 = *(_OWORD *)(a2 + 32);
      long long v37 = *(_OWORD *)(a2 + 48);
      long long v15 = a3[4];
      long long v16 = a3[5];
      long long v17 = a3[6];
      *(void *)(a2 + 112) = *((void *)a3 + 14);
      *(_OWORD *)(a2 + 80) = v16;
      *(_OWORD *)(a2 + 96) = v17;
      *(_OWORD *)(a2 + 64) = v15;
      long long v18 = *a3;
      long long v19 = a3[1];
      long long v20 = a3[3];
      *(_OWORD *)(a2 + 32) = a3[2];
      *(_OWORD *)(a2 + 48) = v20;
      *(_OWORD *)a2 = v18;
      *(_OWORD *)(a2 + 16) = v19;
      a3[2] = v34;
      a3[3] = v37;
      *a3 = v28;
      a3[1] = v31;
      *((void *)a3 + 14) = v49;
      result.n128_u64[1] = *((void *)&v43 + 1);
      a3[5] = v43;
      a3[6] = v46;
      a3[4] = v40;
      result.n128_u64[0] = *(void *)(a2 + 32);
      if (result.n128_f64[0] > *(double *)(a1 + 32))
      {
        long long v41 = *(_OWORD *)(a1 + 64);
        __n128 v44 = *(__n128 *)(a1 + 80);
        long long v47 = *(_OWORD *)(a1 + 96);
        uint64_t v50 = *(void *)(a1 + 112);
        long long v29 = *(_OWORD *)a1;
        long long v32 = *(_OWORD *)(a1 + 16);
        long long v35 = *(_OWORD *)(a1 + 32);
        long long v38 = *(_OWORD *)(a1 + 48);
        long long v21 = *(_OWORD *)(a2 + 64);
        long long v22 = *(_OWORD *)(a2 + 80);
        long long v23 = *(_OWORD *)(a2 + 96);
        *(void *)(a1 + 112) = *(void *)(a2 + 112);
        *(_OWORD *)(a1 + 80) = v22;
        *(_OWORD *)(a1 + 96) = v23;
        *(_OWORD *)(a1 + 64) = v21;
        long long v24 = *(_OWORD *)a2;
        long long v25 = *(_OWORD *)(a2 + 16);
        long long v26 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v26;
        *(_OWORD *)a1 = v24;
        *(_OWORD *)(a1 + 16) = v25;
        *(_OWORD *)(a2 + 32) = v35;
        *(_OWORD *)(a2 + 48) = v38;
        *(_OWORD *)a2 = v29;
        *(_OWORD *)(a2 + 16) = v32;
        *(void *)(a2 + 112) = v50;
        __n128 result = v44;
        *(__n128 *)(a2 + 80) = v44;
        *(_OWORD *)(a2 + 96) = v47;
        *(_OWORD *)(a2 + 64) = v41;
      }
    }
  }
  return result;
}

double *sub_10110733C(double *result, double *a2, uint64_t a3, char a4)
{
  long long v9 = result;
LABEL_2:
  long long v10 = v9;
  while (1)
  {
    long long v9 = v10;
    uint64_t v11 = (char *)a2 - (char *)v10;
    unint64_t v12 = a2 - v10;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          double v39 = *(a2 - 1);
          double v40 = *v10;
          if (v39 > *v10)
          {
            *long long v10 = v39;
            *(a2 - 1) = v40;
          }
          break;
        case 3uLL:
          __n128 result = sub_1011079D0(v10, v10 + 1, a2 - 1);
          break;
        case 4uLL:
          __n128 result = sub_101107C20(v10, v10 + 1, v10 + 2, a2 - 1);
          break;
        case 5uLL:
          long long v41 = v10 + 1;
          long long v42 = v10 + 2;
          long long v43 = v10 + 3;
          __n128 result = sub_101107C20(v10, v10 + 1, v10 + 2, v10 + 3);
          double v44 = *(a2 - 1);
          double v45 = v10[3];
          if (v44 > v45)
          {
            *long long v43 = v44;
            *(a2 - 1) = v45;
            double v46 = *v43;
            double v47 = *v42;
            if (*v43 > *v42)
            {
              *long long v42 = v46;
              *long long v43 = v47;
              double v48 = *v41;
              if (v46 > *v41)
              {
                v10[1] = v46;
                v10[2] = v48;
                double v49 = *v10;
                if (v46 > *v10)
                {
                  *long long v10 = v46;
                  v10[1] = v49;
                }
              }
            }
          }
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v11 <= 191) {
      break;
    }
    if (!a3)
    {
      if (v10 == a2) {
        return result;
      }
      int64_t v59 = (v12 - 2) >> 1;
      int64_t v60 = v59;
      do
      {
        int64_t v61 = v60;
        if (v59 >= v60)
        {
          uint64_t v62 = (2 * v60) | 1;
          long long v63 = &v10[v62];
          if (2 * v61 + 2 < (uint64_t)v12 && *v63 > v63[1])
          {
            ++v63;
            uint64_t v62 = 2 * v61 + 2;
          }
          long long v64 = &v10[v61];
          double v65 = *v63;
          double v66 = *v64;
          if (*v63 <= *v64)
          {
            do
            {
              *long long v64 = v65;
              long long v64 = v63;
              if (v59 < v62) {
                break;
              }
              uint64_t v67 = 2 * v62;
              uint64_t v62 = (2 * v62) | 1;
              long long v63 = &v10[v62];
              uint64_t v68 = v67 + 2;
              if (v68 < (uint64_t)v12 && *v63 > v63[1])
              {
                ++v63;
                uint64_t v62 = v68;
              }
              double v65 = *v63;
            }
            while (*v63 <= v66);
            *long long v64 = v66;
          }
        }
        int64_t v60 = v61 - 1;
      }
      while (v61);
      uint64_t v69 = (unint64_t)v11 >> 3;
      while (2)
      {
        uint64_t v70 = 0;
        double v71 = *v10;
        long long v72 = v10;
        do
        {
          long long v73 = v72;
          v72 += v70 + 1;
          uint64_t v74 = 2 * v70;
          uint64_t v70 = (2 * v70) | 1;
          uint64_t v75 = v74 + 2;
          if (v75 < v69 && *v72 > v72[1])
          {
            ++v72;
            uint64_t v70 = v75;
          }
          *long long v73 = *v72;
        }
        while (v70 <= (uint64_t)((unint64_t)(v69 - 2) >> 1));
        if (v72 == --a2)
        {
LABEL_112:
          *long long v72 = v71;
        }
        else
        {
          *long long v72 = *a2;
          *a2 = v71;
          uint64_t v76 = (char *)v72 - (char *)v10 + 8;
          if (v76 >= 9)
          {
            unint64_t v77 = (((unint64_t)v76 >> 3) - 2) >> 1;
            long long v78 = &v10[v77];
            double v79 = *v78;
            double v71 = *v72;
            if (*v78 > *v72)
            {
              do
              {
                *long long v72 = v79;
                long long v72 = v78;
                if (!v77) {
                  break;
                }
                unint64_t v77 = (v77 - 1) >> 1;
                long long v78 = &v10[v77];
                double v79 = *v78;
              }
              while (*v78 > v71);
              goto LABEL_112;
            }
          }
        }
        if (v69-- <= 2) {
          return result;
        }
        continue;
      }
    }
    unint64_t v13 = v12 >> 1;
    long long v14 = &v10[v12 >> 1];
    if ((unint64_t)v11 >= 0x401)
    {
      sub_1011079D0(v9, &v9[v12 >> 1], a2 - 1);
      sub_1011079D0(v9 + 1, v14 - 1, a2 - 2);
      sub_1011079D0(v9 + 2, &v9[v13 + 1], a2 - 3);
      __n128 result = sub_1011079D0(v14 - 1, v14, &v9[v13 + 1]);
      double v15 = *v9;
      *long long v9 = *v14;
      *long long v14 = v15;
    }
    else
    {
      __n128 result = sub_1011079D0(&v9[v12 >> 1], v9, a2 - 1);
    }
    --a3;
    double v16 = *v9;
    if ((a4 & 1) != 0 || *(v9 - 1) > v16)
    {
      uint64_t v17 = 0;
      do
        double v18 = v9[++v17];
      while (v18 > v16);
      long long v19 = &v9[v17];
      long long v20 = a2;
      if (v17 == 1)
      {
        long long v20 = a2;
        do
        {
          if (v19 >= v20) {
            break;
          }
          double v22 = *--v20;
        }
        while (v22 <= v16);
      }
      else
      {
        do
          double v21 = *--v20;
        while (v21 <= v16);
      }
      if (v19 >= v20)
      {
        long long v28 = v19 - 1;
      }
      else
      {
        double v23 = *v20;
        long long v24 = &v9[v17];
        long long v25 = v20;
        do
        {
          *long long v24 = v23;
          *long long v25 = v18;
          do
          {
            double v26 = v24[1];
            ++v24;
            double v18 = v26;
          }
          while (v26 > v16);
          do
          {
            double v27 = *--v25;
            double v23 = v27;
          }
          while (v27 <= v16);
        }
        while (v24 < v25);
        long long v28 = v24 - 1;
      }
      if (v28 != v9) {
        *long long v9 = *v28;
      }
      *long long v28 = v16;
      if (v19 < v20) {
        goto LABEL_33;
      }
      BOOL v29 = sub_101107A40(v9, v28);
      long long v10 = v28 + 1;
      __n128 result = (double *)sub_101107A40(v28 + 1, a2);
      if (result)
      {
        a2 = v28;
        if (v29) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v29)
      {
LABEL_33:
        __n128 result = (double *)sub_10110733C(v9, v28, a3, a4 & 1);
        a4 = 0;
        long long v10 = v28 + 1;
      }
    }
    else
    {
      if (v16 <= *(a2 - 1))
      {
        long long v31 = v9 + 1;
        do
        {
          long long v10 = v31;
          if (v31 >= a2) {
            break;
          }
          ++v31;
        }
        while (v16 <= *v10);
      }
      else
      {
        long long v10 = v9;
        do
        {
          double v30 = v10[1];
          ++v10;
        }
        while (v16 <= v30);
      }
      long long v32 = a2;
      if (v10 < a2)
      {
        long long v32 = a2;
        do
          double v33 = *--v32;
        while (v16 > v33);
      }
      if (v10 < v32)
      {
        double v34 = *v10;
        double v35 = *v32;
        do
        {
          *long long v10 = v35;
          *long long v32 = v34;
          do
          {
            double v36 = v10[1];
            ++v10;
            double v34 = v36;
          }
          while (v16 <= v36);
          do
          {
            double v37 = *--v32;
            double v35 = v37;
          }
          while (v16 > v37);
        }
        while (v10 < v32);
      }
      long long v38 = v10 - 1;
      BOOL v4 = v10 - 1 >= v9;
      BOOL v5 = v10 - 1 == v9;
      if (v10 - 1 != v9) {
        *long long v9 = *v38;
      }
      a4 = 0;
      *long long v38 = v16;
    }
  }
  uint64_t v50 = v10 + 1;
  BOOL v52 = v10 == a2 || v50 == a2;
  if (a4)
  {
    if (!v52)
    {
      uint64_t v53 = 0;
      long long v54 = v10;
      do
      {
        double v56 = *v54;
        double v55 = v54[1];
        long long v54 = v50;
        if (v55 > v56)
        {
          uint64_t v57 = v53;
          while (1)
          {
            *(double *)((char *)v10 + v57 + 8) = v56;
            if (!v57) {
              break;
            }
            double v56 = *(double *)((char *)v10 + v57 - 8);
            v57 -= 8;
            if (v55 <= v56)
            {
              long long v58 = (double *)((char *)v10 + v57 + 8);
              goto LABEL_84;
            }
          }
          long long v58 = v10;
LABEL_84:
          *long long v58 = v55;
        }
        uint64_t v50 = v54 + 1;
        v53 += 8;
      }
      while (v54 + 1 != a2);
    }
  }
  else if (!v52)
  {
    do
    {
      double v82 = *v9;
      double v81 = v9[1];
      long long v9 = v50;
      if (v81 > v82)
      {
        long long v83 = v50;
        do
        {
          *long long v83 = v82;
          double v82 = *(v83 - 2);
          --v83;
        }
        while (v81 > v82);
        *long long v83 = v81;
      }
      ++v50;
    }
    while (v9 + 1 != a2);
  }
  return result;
}

double *sub_1011079D0(double *result, double *a2, double *a3)
{
  double v3 = *a2;
  double v4 = *result;
  double v5 = *a3;
  if (*a2 <= *result)
  {
    if (v5 > v3)
    {
      *a2 = v5;
      *a3 = v3;
      double v6 = *result;
      if (*a2 > *result)
      {
        *__n128 result = *a2;
        *a2 = v6;
      }
    }
  }
  else
  {
    if (v5 <= v3)
    {
      *__n128 result = v3;
      *a2 = v4;
      if (*a3 <= v4) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *__n128 result = v5;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_101107A40(double *a1, double *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      double v6 = *(a2 - 1);
      double v7 = *a1;
      if (v6 > *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1011079D0(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_101107C20(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      uint64_t v17 = a1 + 1;
      double v18 = a1 + 2;
      long long v19 = a1 + 3;
      sub_101107C20(a1, a1 + 1, a1 + 2, a1 + 3);
      double v20 = *(a2 - 1);
      double v21 = a1[3];
      if (v20 > v21)
      {
        *long long v19 = v20;
        *(a2 - 1) = v21;
        double v22 = *v19;
        double v23 = *v18;
        if (*v19 > *v18)
        {
          *double v18 = v22;
          *long long v19 = v23;
          double v24 = *v17;
          if (v22 > *v17)
          {
            a1[1] = v22;
            a1[2] = v24;
            double v25 = *a1;
            if (v22 > *a1)
            {
              *a1 = v22;
              a1[1] = v25;
            }
          }
        }
      }
      return 1;
    default:
      long long v8 = a1 + 2;
      sub_1011079D0(a1, a1 + 1, a1 + 2);
      long long v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    double v12 = *v9;
    double v13 = *v8;
    if (*v9 > *v8)
    {
      uint64_t v14 = v11;
      while (1)
      {
        *(double *)((char *)a1 + v14) = v13;
        uint64_t v15 = v14 - 8;
        if (v14 == 8) {
          break;
        }
        double v13 = *(double *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if (v12 <= v13)
        {
          double v16 = (double *)((char *)a1 + v15);
          goto LABEL_13;
        }
      }
      double v16 = a1;
LABEL_13:
      *double v16 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    long long v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

double *sub_101107C20(double *a1, double *a2, double *a3, double *a4)
{
  BOOL result = sub_1011079D0(a1, a2, a3);
  double v9 = *a3;
  if (*a4 > *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    double v10 = *a2;
    if (*a3 > *a2)
    {
      *a2 = *a3;
      *a3 = v10;
      double v11 = *a1;
      if (*a2 > *a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

void sub_101107D08(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = CMDistributedSensingVehicleStateUpdateKey;
  uint64_t v7 = a2;
  double v5 = +[NSDictionary dictionaryWithObjects:&v7 forKeys:&v6 count:1];
  sub_101108958("DistributedSensing/kCLConnectionMessageDistributedSensingVehicleStateUpdate", &v3);
  double v2 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CLConnection::sendMessage();
  if (v2) {
    sub_1000DB0A0(v2);
  }
  if (v4) {
    sub_1000DB0A0(v4);
  }
}

void sub_101107DDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  if (a13) {
    sub_1000DB0A0(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101107E18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)a1 = off_102311A20;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  if (+[CLDistributedSensingService isSupported])
  {
    *(void *)(a1 + 32) = [[CLDistributedSensingSubscriptionClient alloc] initWithSubscription:a1];
    id v4 = [[[*(id *)(a1 + 16) vendor] proxyForService:@"CLDistributedSensingService"];
    *(void *)(a1 + 24) = v4;
    [v4 registerDelegate:*(void *)(a1 + 32) inSilo:[*(id *)(a1 + 16) silo]];
  }
  CLConnection::setDefaultMessageHandler();
  return a1;
}

void sub_101107F28(_Unwind_Exception *a1)
{
  sub_100426880(v1);
  _Unwind_Resume(a1);
}

void sub_101107F3C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = *a2;
  double v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16))(v2, &v4);
  if (v5) {
    sub_1000DB0A0(v5);
  }
}

void sub_101107FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_101107FCC(uint64_t a1)
{
  *(void *)a1 = off_102311A20;
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {

    *(void *)(a1 + 24) = 0;
  }
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    [v3 invalidate];

    *(void *)(a1 + 32) = 0;
  }

  return sub_100426880((void *)a1);
}

void sub_10110804C(uint64_t a1)
{
  sub_101107FCC(a1);

  operator delete();
}

void sub_101108084(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  double v5 = (void *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
  int v6 = *((char *)v5 + 23);
  if (v6 < 0)
  {
    if (v5[1] != 75)
    {
LABEL_7:
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102311A60);
      }
      uint64_t v7 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
      {
        uint64_t v8 = CLConnectionMessage::name(*(CLConnectionMessage **)a2);
        int v9 = *(char *)(v8 + 23);
        uint64_t v10 = *(void *)v8;
        CLConnection::getName((uint64_t *)__p, *(CLConnection **)(a1 + 8));
        if (v9 >= 0) {
          uint64_t v11 = v8;
        }
        else {
          uint64_t v11 = v10;
        }
        if (v22 >= 0) {
          double v12 = __p;
        }
        else {
          double v12 = (void **)__p[0];
        }
        *(_DWORD *)buf = 68289538;
        int v25 = 0;
        __int16 v26 = 2082;
        double v27 = "";
        __int16 v28 = 2082;
        uint64_t v29 = v11;
        __int16 v30 = 2082;
        long long v31 = v12;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unhandled message\", \"name\":%{public, location:escape_only}s, \"client\":%{public, location:escape_only}s}", buf, 0x26u);
        if (v22 < 0) {
          operator delete(__p[0]);
        }
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_102311A60);
        }
      }
      double v13 = qword_102419528;
      if (os_signpost_enabled((os_log_t)qword_102419528))
      {
        uint64_t v14 = CLConnectionMessage::name(*(CLConnectionMessage **)a2);
        int v15 = *(char *)(v14 + 23);
        uint64_t v16 = *(void *)v14;
        CLConnection::getName((uint64_t *)__p, *(CLConnection **)(a1 + 8));
        if (v15 >= 0) {
          uint64_t v17 = v14;
        }
        else {
          uint64_t v17 = v16;
        }
        if (v22 >= 0) {
          double v18 = __p;
        }
        else {
          double v18 = (void **)__p[0];
        }
        *(_DWORD *)buf = 68289538;
        int v25 = 0;
        __int16 v26 = 2082;
        double v27 = "";
        __int16 v28 = 2082;
        uint64_t v29 = v17;
        __int16 v30 = 2082;
        long long v31 = v18;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unhandled message", "{\"msg%{public}.0s\":\"Unhandled message\", \"name\":%{public, location:escape_only}s, \"client\":%{public, location:escape_only}s}", buf, 0x26u);
        if (v22 < 0) {
          operator delete(__p[0]);
        }
      }
      goto LABEL_33;
    }
    double v5 = (void *)*v5;
  }
  else if (v6 != 75)
  {
    goto LABEL_7;
  }
  if (memcmp(v5, "DistributedSensing/kCLConnectionMessageDistributedSensingVehicleStateUpdate", 0x4BuLL)) {
    goto LABEL_7;
  }
  long long v19 = *(CLConnectionMessage **)a2;
  uint64_t v20 = *(void *)(a2 + 8);
  v23[0] = v19;
  v23[1] = (CLConnectionMessage *)v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1011083A0(a1, v23);
  if (v20) {
    sub_1000DB0A0((std::__shared_weak_count *)v20);
  }
LABEL_33:
}

void sub_101108354(_Unwind_Exception *a1)
{
  if (v2) {
    sub_1000DB0A0(v2);
  }

  _Unwind_Resume(a1);
}

void sub_1011083A0(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_100134750(buf, "com.apple.locationd.activity");
  char isEntitled = CLConnection::isEntitled();
  char v6 = isEntitled;
  if ((SBYTE3(v28) & 0x80000000) == 0)
  {
    if (isEntitled) {
      goto LABEL_3;
    }
LABEL_16:
    uint64_t v33 = CMErrorMessage;
    double v34 = &off_102394250;
    +[NSDictionary dictionaryWithObjects:&v34 forKeys:&v33 count:1];
LABEL_26:
    CLConnectionMessage::sendReply();
    goto LABEL_46;
  }
  operator delete(*(void **)buf);
  if ((v6 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_3:
  if (!+[CLDistributedSensingService isSupported])
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_102311A60);
    }
    double v12 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      CLConnection::getName((uint64_t *)__p, *(CLConnection **)(a1 + 8));
      double v13 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v25 = 2082;
      __int16 v26 = "";
      __int16 v27 = 2082;
      __int16 v28 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#distributedSensing Service unavailable\", \"client\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v31 = CMErrorMessage;
    long long v32 = &off_102394268;
    +[NSDictionary dictionaryWithObjects:&v32 forKeys:&v31 count:1];
    goto LABEL_26;
  }
  CFDictionaryRef Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*a2);
  sub_10013FA80((int)v19, Dictionary);
  BOOL v18 = 0;
  if (sub_1000D2988((uint64_t)v19, "kCLConnectionMessageSubscribeKey", &v18))
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_102311A60);
    }
    uint64_t v8 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      CLConnection::getName((uint64_t *)__p, *(CLConnection **)(a1 + 8));
      if (v21 >= 0) {
        int v9 = __p;
      }
      else {
        int v9 = (void **)__p[0];
      }
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v25 = 2082;
      __int16 v26 = "";
      __int16 v27 = 2082;
      __int16 v28 = v9;
      __int16 v29 = 1026;
      BOOL v30 = v18;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#distributedSensing Client subscribe\", \"client\":%{public, location:escape_only}s, \"subscribe\":%{public}hhd}", buf, 0x22u);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v10 = *(void **)(a1 + 24);
    uint64_t v11 = *(void *)(a1 + 32);
    if (v18) {
      [v10 registerClient:v11 forNotification:0];
    }
    else {
      [v10 unregisterClient:v11 forNotification:0];
    }
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_102311A60);
    }
    uint64_t v14 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      CLConnection::getName((uint64_t *)__p, *(CLConnection **)(a1 + 8));
      if (v21 >= 0) {
        int v15 = __p;
      }
      else {
        int v15 = (void **)__p[0];
      }
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v25 = 2082;
      __int16 v26 = "";
      __int16 v27 = 2082;
      __int16 v28 = v15;
      __int16 v29 = 1026;
      BOOL v30 = v18;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#distributedSensing Error obtaining subscription key\", \"client\":%{public, location:escape_only}s, \"subscribe\":%{public}hhd}", buf, 0x22u);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102311A60);
      }
    }
    uint64_t v16 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      CLConnection::getName((uint64_t *)__p, *(CLConnection **)(a1 + 8));
      uint64_t v17 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v25 = 2082;
      __int16 v26 = "";
      __int16 v27 = 2082;
      __int16 v28 = v17;
      __int16 v29 = 1026;
      BOOL v30 = v18;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#distributedSensing Error obtaining subscription key", "{\"msg%{public}.0s\":\"#distributedSensing Error obtaining subscription key\", \"client\":%{public, location:escape_only}s, \"subscribe\":%{public}hhd}", buf, 0x22u);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v22 = CMErrorMessage;
    double v23 = &off_102394280;
    +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];
    CLConnectionMessage::sendReply();
  }
  sub_10013F3C4(v19);
LABEL_46:
}

void sub_1011088C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_10013F3C4(&a10);

  _Unwind_Resume(a1);
}

void sub_101108928(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void *sub_101108958@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  id v4 = operator new(0x70uLL);
  BOOL result = sub_10017E9C0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1011089A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1011089D0()
{
  sub_100134750(qword_102485520, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102485520, (void *)&_mh_execute_header);
}

void *sub_101108A30(void *a1)
{
  *a1 = off_102311A90;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  uint64_t v2 = sub_1000D3E78();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_101108AE8;
  v4[3] = &unk_1022A3020;
  v4[4] = a1;
  sub_1009E8E94(v2, (uint64_t)v4);
  return a1;
}

void sub_101108AD0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_101108AE8(uint64_t a1)
{
  return sub_101108AF0(*(void *)(a1 + 32));
}

BOOL sub_101108AF0(uint64_t a1)
{
  sub_1000D3E78();
  sub_1000D5B68();
  BOOL v2 = sub_10016CD04();
  if (v2)
  {
    if (!*(void *)(a1 + 8))
    {
      uint64_t v3 = (uint64_t *)sub_100A26784();
      uint64_t v9 = 0x160000FF0CLL;
      char v10 = 0;
      sub_101A46D60(v3, (uint64_t)&v9, (uint64_t *)buf);
      long long v4 = *(_OWORD *)buf;
      memset(buf, 0, sizeof(buf));
      double v5 = *(std::__shared_weak_count **)(a1 + 16);
      *(_OWORD *)(a1 + 8) = v4;
      if (v5)
      {
        sub_1000DB0A0(v5);
        if (*(void *)&buf[8]) {
          sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
        }
      }
      sub_100A2932C(*(uint64_t **)(a1 + 8), (uint64_t)sub_1000E6F58, a1);
    }
  }
  else
  {
    if (qword_1024192E0 != -1) {
      dispatch_once(&qword_1024192E0, &stru_102311AD8);
    }
    char v6 = qword_1024192E8;
    if (os_log_type_enabled((os_log_t)qword_1024192E8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Service unavailable.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192E0 != -1) {
        dispatch_once(&qword_1024192E0, &stru_102311AD8);
      }
      __int16 v11 = 0;
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLSPUInertialOdometryInterface::openHidDevice()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  return v2;
}

void *sub_101108D0C(void *a1)
{
  *a1 = off_102311A90;
  BOOL v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  return a1;
}

void *sub_101108D58(void *a1)
{
  *a1 = off_102311A90;
  BOOL v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  return a1;
}

void sub_101108DA4(void *a1)
{
  *a1 = off_102311A90;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_1000DB0A0(v1);
  }

  operator delete();
}

void sub_101108E14(id a1)
{
  qword_1024192E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "InertialOdometry");
}

uint64_t sub_101108E44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = a2;
  uint64_t v8 = a1 + 40;
  sub_10110D9BC(a1 + 8, a3);
  sub_100ABCDB0(v8, a4);
  sub_10110DA54(a1 + 72, a5);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  uint64_t v9 = +[NSURLSessionConfiguration defaultSessionConfiguration];
  [(NSURLSessionConfiguration *)v9 setAllowsCellularAccess:1];
  *(void *)(a1 + 104) = +[NSURLSession sessionWithConfiguration:v9];
  return a1;
}

void sub_101108EF8(_Unwind_Exception *a1)
{
  sub_100ABCE48(v2);
  sub_100ABD634(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101108F40(uint64_t a1)
{
  *(void *)(a1 + 104) = 0;
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  sub_100ABD5B0((void *)(a1 + 72));
  sub_100ABCE48((void *)(a1 + 40));
  sub_100ABD634((void *)(a1 + 8));
  return a1;
}

void sub_101108FA0(uint64_t a1, int a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102311B60);
  }
  long long v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    sub_100AABABC(a2, __p);
    double v5 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#EED2Control,handleCommTypeChange,comm type changed to %{public}s", buf, 0xCu);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102311B60);
    }
    sub_100AABABC(a2, buf);
    if (v9 >= 0) {
      char v6 = buf;
    }
    else {
      char v6 = *(unsigned char **)buf;
    }
    int v10 = 136446210;
    __int16 v11 = v6;
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    if (v9 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2Control::handleCommTypeChange(Emergency::CommunicationType)", "%s\n", v7);
    if (v7 != (char *)__p) {
      free(v7);
    }
  }
  *(_DWORD *)(a1 + 112) = a2;
}

std::string *sub_1011091C4(std::string *a1, const std::string *a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102311B60);
  }
  long long v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      double v5 = a2;
    }
    else {
      double v5 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136380675;
    char v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#EED2Control,handleCompanionNumberChange,companion phone number changed to %{private}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102311B60);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEmergencyEED2Control::handleCompanionNumberChange(const std::string &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  return std::string::operator=(a1 + 5, a2);
}

uint64_t sub_1011093A0(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10)
{
  if (a3 && a6 && a5 && *(void *)(a8 + 24))
  {
    uint64_t v14 = *(void *)(a1 + 32);
    if (!v14) {
      sub_10015E48C();
    }
    uint64_t v21 = *(unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 48))(v14);
    id v56 = sub_10110A18C(a1, v21);
    id v22 = v56;
    uint64_t v23 = sub_100A96A4C(a1 + 40, v21);
    if (*(char *)(v23 + 159) < 0)
    {
      sub_1000DC48C(__p, *(void **)(v23 + 136), *(void *)(v23 + 144));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(v23 + 136);
      uint64_t v58 = *(void *)(v23 + 152);
    }
    if (v58 >= 0) {
      __int16 v26 = (void *)HIBYTE(v58);
    }
    else {
      __int16 v26 = __p[1];
    }
    if (v26)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102311B60);
      }
      __int16 v27 = &qword_102419000;
      __int16 v28 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#EED2Control,sendControlData,sending control data for native number", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102311B60);
        }
        long long v51 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2Control::sendControlData(NSData *, CFAbsoluteTime, CFAbsoluteTime, NSDictionary *, NSArray<CLEEDRequest *> *, NSData *, SecKeyRef, NSArray *, SendControlDataResponse)", "%s\n", v51);
        if (v51 != (char *)buf) {
          free(v51);
        }
        __int16 v27 = &qword_102419000;
      }
      __int16 v29 = sub_10110A6EC(a1, (uint64_t *)__p, a4, a5, a6);
      uint64_t v30 = (uint64_t)v29;
      if (!v29 || (id v31 = [(NSMutableArray *)v29 count]) == 0)
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102311B60);
        }
        double v35 = v27[125];
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "#EED2Control,sendControlData,nativeNumber,nil or empty perPartnerDataArray,early return", buf, 2u);
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_83;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 == -1) {
          goto LABEL_109;
        }
        goto LABEL_112;
      }
      id v32 = sub_10110AD50(a9, a10, (uint64_t)v31, a2, (uint64_t *)__p, a3, v30, (uint64_t)v56, a7);
      uint64_t v33 = v32;
      if (!v32 || ![v32 count])
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102311B60);
        }
        double v46 = v27[125];
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "#EED2Control,sendControlData,nil or empty nativeNumberDict,early return", buf, 2u);
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_83;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 == -1) {
          goto LABEL_109;
        }
        goto LABEL_112;
      }
      sub_10110DAEC((uint64_t)v60, a8);
      BOOL v34 = sub_10110B158(a1, 0, (uint64_t)v33, (uint64_t)v60);
      sub_100ABDF68(v60);
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102311B60);
      }
      double v36 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#EED2Control,sendControlData,native number is empty, not sending control data", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102311B60);
        }
        BOOL v52 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2Control::sendControlData(NSData *, CFAbsoluteTime, CFAbsoluteTime, NSDictionary *, NSArray<CLEEDRequest *> *, NSData *, SecKeyRef, NSArray *, SendControlDataResponse)", "%s\n", v52);
        if (v52 != (char *)buf) {
          free(v52);
        }
      }
      BOOL v34 = 0;
    }
    if (*(char *)(a1 + 143) < 0) {
      uint64_t v37 = *(void *)(a1 + 128);
    }
    else {
      uint64_t v37 = *(unsigned __int8 *)(a1 + 143);
    }
    if (!v37 || byte_10248D718)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102311B60);
      }
      double v45 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "#EED2Control,sendControlData,companion number is empty or device supports alternate account, not sending control data", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102311B60);
        }
        long long v54 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2Control::sendControlData(NSData *, CFAbsoluteTime, CFAbsoluteTime, NSDictionary *, NSArray<CLEEDRequest *> *, NSData *, SecKeyRef, NSArray *, SendControlDataResponse)", "%s\n", v54);
        if (v54 != (char *)buf) {
          free(v54);
        }
      }
      BOOL v44 = 0;
      goto LABEL_63;
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102311B60);
    }
    long long v38 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#EED2Control,sendControlData,sending control data for companion number", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102311B60);
      }
      uint64_t v53 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2Control::sendControlData(NSData *, CFAbsoluteTime, CFAbsoluteTime, NSDictionary *, NSArray<CLEEDRequest *> *, NSData *, SecKeyRef, NSArray *, SendControlDataResponse)", "%s\n", v53);
      if (v53 != (char *)buf) {
        free(v53);
      }
    }
    double v39 = sub_10110A6EC(a1, (uint64_t *)(a1 + 120), a4, a5, a6);
    uint64_t v40 = (uint64_t)v39;
    if (v39 && (id v41 = [(NSMutableArray *)v39 count]) != 0)
    {
      id v42 = sub_10110AD50(a9, a10, (uint64_t)v41, a2, (uint64_t *)(a1 + 120), a3, v40, (uint64_t)v56, a7);
      long long v43 = v42;
      if (v42 && [v42 count])
      {
        sub_10110DAEC((uint64_t)v59, a8);
        BOOL v44 = sub_10110B158(a1, 1, (uint64_t)v43, (uint64_t)v59);
        sub_100ABDF68(v59);

LABEL_63:
        uint64_t v25 = v34 | v44;
        goto LABEL_84;
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102311B60);
      }
      double v48 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, "#EED2Control,sendControlData,nil or empty companionNumberDict,early return", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0))
      {
LABEL_83:
        uint64_t v25 = 0;
LABEL_84:
        if (SHIBYTE(v58) < 0) {
          operator delete(__p[0]);
        }
        return v25;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1)
      {
LABEL_109:
        double v55 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyEED2Control::sendControlData(NSData *, CFAbsoluteTime, CFAbsoluteTime, NSDictionary *, NSArray<CLEEDRequest *> *, NSData *, SecKeyRef, NSArray *, SendControlDataResponse)", "%s\n", v55);
        if (v55 != (char *)buf) {
          free(v55);
        }
        goto LABEL_83;
      }
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102311B60);
      }
      double v47 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "#EED2Control,sendControlData,fCompanionNumber,nil or empty perPartnerDataArray,early return", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_83;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_109;
      }
    }
LABEL_112:
    dispatch_once(&qword_1024193E0, &stru_102311B60);
    goto LABEL_109;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102311B60);
  }
  double v24 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "#EED2Control,sendControlData,one more more input parameters is nil,early return", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102311B60);
    }
    LOWORD(__p[0]) = 0;
    uint64_t v50 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyEED2Control::sendControlData(NSData *, CFAbsoluteTime, CFAbsoluteTime, NSDictionary *, NSArray<CLEEDRequest *> *, NSData *, SecKeyRef, NSArray *, SendControlDataResponse)", "%s\n", v50);
    if (v50 != (char *)buf) {
      free(v50);
    }
  }
  return 0;
}

void sub_10110A118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_10110A18C(uint64_t a1, uint64_t a2)
{
  long long v4 = (unsigned int *)sub_100A96A4C(a1 + 40, a2);
  id v5 = objc_alloc_init((Class)NSMutableDictionary);
  [v5 setValue:[NSNumber numberWithInt:a2] forKey:@"sim"];
  [v5 setValue:[NSNumber numberWithInt:*v4] forKey:@"rat"];
  uint64_t v6 = *(void *)(a1 + 32);
  if (!v6) {
    sub_10015E48C();
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
  sub_100134750(__p, "carrier");
  uint64_t v8 = sub_100A80F3C(v7, a2, (uint64_t *)__p);
  if (*((char *)v8 + 55) < 0) {
    sub_1000DC48C(&__dst, (void *)v8[4], v8[5]);
  }
  else {
    std::string __dst = *(std::string *)(v8 + 4);
  }
  if (v35 < 0) {
    operator delete(__p[0]);
  }
  std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  char v10 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __dst.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    std::string::assign(&__dst, "Unavailable");
    char v10 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  if (v10 >= 0) {
    p_dst = &__dst;
  }
  else {
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  [v5 setValue:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_dst) forKey:@"sim_bundle_id"];
  uint64_t v12 = *(void *)(a1 + 32);
  if (!v12) {
    sub_10015E48C();
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 48))(v12);
  sub_100134750(v31, "operator");
  uint64_t v14 = sub_100A80F3C(v13, a2, (uint64_t *)v31);
  if (*((char *)v14 + 55) < 0) {
    sub_1000DC48C(&v33, (void *)v14[4], v14[5]);
  }
  else {
    std::string v33 = *(std::string *)(v14 + 4);
  }
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  std::string::size_type v15 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  char v16 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v15 = v33.__r_.__value_.__l.__size_;
  }
  if (!v15)
  {
    std::string::assign(&v33, "Unavailable");
    char v16 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  }
  if (v16 >= 0) {
    uint64_t v17 = &v33;
  }
  else {
    uint64_t v17 = (std::string *)v33.__r_.__value_.__r.__words[0];
  }
  [v5 setValue:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v17) forKey:@"operator_bundle_id"];
  BOOL v18 = sub_101021560(v4[8]);
  [v5 setValue:v18 forKey:@"sim_country"];
  long long v19 = sub_101021560(v4[2]);
  [v5 setValue:v19 forKey:@"operator_country"];
  sub_100103240();
  uint64_t v20 = sub_10073B56C();
  [v5 setValue:[NSNumber numberWithInt:v20] forKey:@"release_type"];
  sub_100103240();
  sub_10073BD08((uint64_t)buf);
  if (v41 >= 0) {
    uint64_t v21 = buf;
  }
  else {
    uint64_t v21 = *(uint8_t **)buf;
  }
  id v22 = +[NSString stringWithUTF8String:v21];
  if (SHIBYTE(v41) < 0) {
    operator delete(*(void **)buf);
  }
  [v5 setValue:v22 forKey:@"product_type"];
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102311B60);
  }
  uint64_t v23 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v30 = *v4;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      double v24 = &__dst;
    }
    else {
      double v24 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    uint64_t v25 = [(NSString *)v18 UTF8String];
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __int16 v26 = &v33;
    }
    else {
      __int16 v26 = (std::string *)v33.__r_.__value_.__r.__words[0];
    }
    __int16 v27 = [(NSString *)v19 UTF8String];
    __int16 v28 = [(NSString *)v22 UTF8String];
    *(_DWORD *)buf = 68291075;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v38 = 2082;
    double v39 = "";
    __int16 v40 = 1026;
    int v41 = a2;
    __int16 v42 = 1026;
    unsigned int v43 = v30;
    __int16 v44 = 2082;
    double v45 = v24;
    __int16 v46 = 2082;
    double v47 = v25;
    __int16 v48 = 2082;
    double v49 = v26;
    __int16 v50 = 2082;
    long long v51 = v27;
    __int16 v52 = 1026;
    int v53 = v20;
    __int16 v54 = 2081;
    double v55 = v28;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EED2Control,createControlInternalDict\", \"sim\":%{public}d, \"rat\":%{public}d, \"sim_bundle_id\":%{public, location:escape_only}s, \"sim_country\":%{public, location:escape_only}s, \"operator_bundle_id\":%{public, location:escape_only}s, \"operator_country\":%{public, location:escape_only}s, \"release_type\":%{public}d, \"product_type\":%{private, location:escape_only}s}", buf, 0x56u);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_10110A650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

NSMutableArray *sub_10110A6EC(uint64_t a1, uint64_t *a2, void *a3, uint64_t *a4, uint64_t a5)
{
  if (a4 && a5)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    if (!v7) {
      sub_10015E48C();
    }
    __int16 v11 = (int *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 48))(v7);
    uint64_t v12 = sub_100A80D4C(v11);
    sub_100ABB240((uint64_t)v26, (uint64_t)(v12 + 20));
    id v13 = +[CLEEDCryptoUtilities copyPublicKeyFromPrivateKey:a5];
    if (v13)
    {
      id v14 = +[CLEEDCryptoUtilities getKeyExternalRepresentation:v13];
      CFRelease(v13);
      if (v14)
      {
        std::string::size_type v15 = +[NSMutableArray arrayWithCapacity:v28];
        for (i = v27; i; i = (void *)*i)
        {
          id v17 = sub_10110BA50(a1, (uint64_t)(i + 5), (uint64_t)v14, a3, a2, a4);
          if (v17)
          {
            [(NSMutableArray *)v15 addObject:v17];
          }
          else
          {
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_102311B60);
            }
            BOOL v18 = qword_1024193E8;
            if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#EED2Control,getEncryptedControlData,nil perPartnerControlDataDict,ignore and continue", buf, 2u);
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193E0 != -1) {
                dispatch_once(&qword_1024193E0, &stru_102311B60);
              }
              long long v19 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "NSArray *CLEmergencyEED2Control::getEncryptedControlData(const std::string &, NSArray<CLEEDRequest *> *, CFAbsoluteTime, NSData *, SecKeyRef)", "%s\n", v19);
              if (v19 != (char *)buf) {
                free(v19);
              }
            }
          }
        }
        goto LABEL_39;
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102311B60);
      }
      id v22 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#EED2Control,getEncryptedControlData,nil deviceSessionPublicKeyRep,early return", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0))
      {
LABEL_38:
        std::string::size_type v15 = 0;
LABEL_39:
        sub_100ABB7BC((uint64_t)v26);
        return v15;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1)
      {
LABEL_46:
        uint64_t v25 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "NSArray *CLEmergencyEED2Control::getEncryptedControlData(const std::string &, NSArray<CLEEDRequest *> *, CFAbsoluteTime, NSData *, SecKeyRef)", "%s\n", v25);
        if (v25 != (char *)buf) {
          free(v25);
        }
        goto LABEL_38;
      }
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102311B60);
      }
      uint64_t v21 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "#EED2Control,getEncryptedControlData,nil deviceSessionPublicKey,early return", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_38;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_46;
      }
    }
    dispatch_once(&qword_1024193E0, &stru_102311B60);
    goto LABEL_46;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102311B60);
  }
  uint64_t v20 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "#EED2Control,getEncryptedControlData,one more more input parameters is nil,early return", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102311B60);
    }
    v26[0] = 0;
    double v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "NSArray *CLEmergencyEED2Control::getEncryptedControlData(const std::string &, NSArray<CLEEDRequest *> *, CFAbsoluteTime, NSData *, SecKeyRef)", "%s\n", v24);
    if (v24 != (char *)buf) {
      free(v24);
    }
  }
  return 0;
}

void sub_10110AD1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100ABB7BC((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_10110AD50(double a1, double a2, uint64_t a3, void *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *((unsigned __int8 *)a5 + 23);
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = a5[1];
  }
  if (a8 && a7 && a6 && v9)
  {
    unint64_t v17 = sub_100AABA94();
    id v18 = objc_alloc_init((Class)NSMutableDictionary);
    if (*((char *)a5 + 23) >= 0) {
      long long v19 = a5;
    }
    else {
      long long v19 = (uint64_t *)*a5;
    }
    [v18 setValue:[NSString stringWithUTF8String:v19] forKey:@"call_ID"];
    [v18 setValue:[NSNumber numberWithLongLong:v17] forKey:@"session_start_time"];
    if (a2 > 0.0) {
      [v18 setValue:[+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", sub_100AABA94())] forKey:@"session_end_time"];
    }
    [v18 setValue:a6 forKey:@"location"];
    if (a4) {
      uint64_t v20 = (__CFString *)[a4 __imHexString];
    }
    else {
      uint64_t v20 = &stru_10234F018;
    }
    [v18 setValue:v20 forKey:@"apns_token"];
    [v18 setValue:@"1" forKey:@"data_version"];
    if (byte_10248557F >= 0) {
      id v22 = &qword_102485568;
    }
    else {
      id v22 = (uint64_t *)qword_102485568;
    }
    [v18 setValue:a7 forKey:[NSString stringWithUTF8String:v22]];
    [v18 setValue:a8 forKey:@"internal"];
    if (a9) {
      [v18 setValue:a9 forKey:@"capabilities"];
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102311B60);
    }
    uint64_t v23 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      id v24 = [(__CFString *)v20 UTF8String];
      if (*((char *)a5 + 23) >= 0) {
        uint64_t v25 = a5;
      }
      else {
        uint64_t v25 = (uint64_t *)*a5;
      }
      *(_DWORD *)buf = 68289795;
      int v29 = 0;
      __int16 v30 = 2082;
      id v31 = "";
      __int16 v32 = 2081;
      id v33 = v24;
      __int16 v34 = 2081;
      char v35 = v25;
      __int16 v36 = 2050;
      unint64_t v37 = v17;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EED2Control,createControlDataDict\", \"APNS Token\":%{private, location:escape_only}s, \"phone number\":%{private, location:escape_only}s, \"session start time\":%{public}lld}", buf, 0x30u);
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102311B60);
    }
    uint64_t v21 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "#EED2Control,createControlDict,missing required info for forming control data POST dict", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102311B60);
      }
      __int16 v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "NSDictionary *CLEmergencyEED2Control::createControlDict(NSData *, const std::string &, CFAbsoluteTime, CFAbsoluteTime, NSDictionary *, NSArray *, NSDictionary *, NSArray *) const", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
    return 0;
  }
  return v18;
}

BOOL sub_10110B158(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (!a3)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102311B60);
    }
    uint64_t v12 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#EED2Control,postControlData,nil controlDataDict,early return", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 == -1) {
      goto LABEL_40;
    }
    goto LABEL_47;
  }
  id v7 = sub_100AABDF0(a3);
  if (!v7)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102311B60);
    }
    id v13 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#EED2Control,postControlData,failed to serialize control data dict into JSON", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 == -1)
    {
LABEL_40:
      LOWORD(__p[0]) = 0;
      __int16 v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyEED2Control::postControlData(NumberType, NSDictionary *, SendControlDataResponse) const", "%s\n", v26);
      if (v26 != (char *)buf) {
        free(v26);
      }
      return 0;
    }
LABEL_47:
    dispatch_once(&qword_1024193E0, &stru_102311B60);
    goto LABEL_40;
  }
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(a1 + 32);
  if (!v9) {
    sub_10015E48C();
  }
  char v10 = (int *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 48))(v9);
  __int16 v11 = sub_100A80D4C(v10);
  if (*((char *)v11 + 135) < 0)
  {
    sub_1000DC48C(__p, (void *)v11[14], v11[15]);
  }
  else
  {
    *(_OWORD *)__p = *((_OWORD *)v11 + 7);
    uint64_t v30 = v11[16];
  }
  if (v30 >= 0) {
    std::string::size_type v15 = __p;
  }
  else {
    std::string::size_type v15 = (void **)__p[0];
  }
  uint64_t v28 = +[NSMutableURLRequest requestWithURL:](NSMutableURLRequest, "requestWithURL:", +[NSURL URLWithString:](NSURL, "URLWithString:", +[NSString stringWithUTF8String:v15]));
  [(NSMutableURLRequest *)v28 setHTTPMethod:@"POST"];
  sub_10110D594(a1 + 72, (uint64_t)v8, (uint64_t)&v28);
  uint64_t v16 = *(void *)(a1 + 104);
  BOOL v14 = v16 != 0;
  if (v16)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102311B60);
    }
    unint64_t v17 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = SHIBYTE(v30);
      long long v19 = (void **)__p[0];
      id v20 = [v8 length];
      *(_DWORD *)buf = 68289539;
      uint64_t v21 = __p;
      if (v18 < 0) {
        uint64_t v21 = v19;
      }
      int v35 = 0;
      __int16 v36 = 2082;
      unint64_t v37 = "";
      __int16 v38 = 2081;
      double v39 = v21;
      __int16 v40 = 2049;
      id v41 = v20;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EED2Control,postControlData,sending Control Data POST\", \"URL\":%{private, location:escape_only}s, \"length\":%{private}lld}", buf, 0x26u);
    }
    id v22 = *(void **)(a1 + 104);
    uint64_t v23 = v28;
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3321888768;
    v31[2] = sub_10110D5EC;
    v31[3] = &unk_102311B30;
    v31[4] = a1;
    int v33 = a2;
    sub_10110DAEC((uint64_t)v32, a4);
    [objc_msgSend(v22, "uploadTaskWithRequest:fromData:completionHandler:", v23, v8, v31) resume];
    sub_100ABDF68(v32);
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102311B60);
    }
    id v24 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "#EED2Control,postControlData,missing NSURLSession", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102311B60);
      }
      __int16 v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyEED2Control::postControlData(NumberType, NSDictionary *, SendControlDataResponse) const", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
  }
  if (SHIBYTE(v30) < 0) {
    operator delete(__p[0]);
  }
  return v14;
}

void sub_10110B798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_10110B7E0(uint64_t a1, void *a2, void *a3)
{
  if ([a2 count])
  {
    id v5 = objc_alloc_init((Class)NSMutableArray);
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    id v6 = [a2 countByEnumeratingWithState:&v14 objects:v19 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v15;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(void *)v15 != v8) {
            objc_enumerationMutation(a2);
          }
          char v10 = *(void **)(*((void *)&v14 + 1) + 8 * i);
          if (objc_msgSend(a3, "isEqualToString:", objc_msgSend(v10, "partnerID"))) {
            [v5 addObject:[v10 getResponseDataDictionary]];
          }
        }
        id v7 = [a2 countByEnumeratingWithState:&v14 objects:v19 count:16];
      }
      while (v7);
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102311B60);
    }
    __int16 v11 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#EED2,createResponseData, no EED Requests, nil responseData", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102311B60);
      }
      __int16 v18 = 0;
      id v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "NSMutableArray *CLEmergencyEED2Control::createResponseData(NSArray<CLEEDRequest *> *, NSString *) const", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    return 0;
  }
  return v5;
}

id sub_10110BA50(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (!a3 || !a6)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102311B60);
    }
    __int16 v26 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "#EED2Control,getPerPartnerControlDataDict,one more more input parameters is nil,early return", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 == -1) {
      goto LABEL_66;
    }
    goto LABEL_68;
  }
  id v12 = +[NSMutableDictionary dictionary];
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v13 = a2;
  }
  else {
    uint64_t v13 = *(void *)a2;
  }
  long long v14 = +[NSString stringWithUTF8String:v13];
  [v12 setValue:v14 forKey:kEEDPartnerIDKey];
  id v15 = +[NSMutableDictionary dictionary];
  if (byte_10248554F >= 0) {
    long long v16 = &qword_102485538;
  }
  else {
    long long v16 = (uint64_t *)qword_102485538;
  }
  long long v17 = sub_10110C100([v15 setValue:a3 forKey:[NSString stringWithUTF8String:v16]], (uint64_t *)a2, a5, a6);
  if (!v17)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102311B60);
    }
    __int16 v27 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "#EED2Control,getPerPartnerControlDataDict,nil deviceSessionSecretForPartner,early return", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 == -1) {
      goto LABEL_66;
    }
    goto LABEL_68;
  }
  id v18 = [v17 base64EncodedStringWithOptions:0];
  if (byte_102485567 >= 0) {
    long long v19 = &qword_102485550;
  }
  else {
    long long v19 = (uint64_t *)qword_102485550;
  }
  [v15 setValue:v18 forKey:[NSString stringWithUTF8String:v19]];
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v20 = a2;
  }
  else {
    uint64_t v20 = *(void *)a2;
  }
  uint64_t v21 = +[NSString stringWithUTF8String:v20];
  id v22 = sub_10110B7E0((uint64_t)v21, a4, v21);
  id v23 = v22;
  if ([v22 count])
  {
    if (byte_102485597 >= 0) {
      id v24 = &qword_102485580;
    }
    else {
      id v24 = (uint64_t *)qword_102485580;
    }
    [v15 setValue:v22 forKey:[NSString stringWithUTF8String:v24]];
  }
  uint64_t v25 = (void *)(a2 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    if (!*(void *)(a2 + 64)) {
      goto LABEL_44;
    }
    uint64_t v25 = (void *)*v25;
  }
  else if (!*(unsigned char *)(a2 + 79))
  {
    goto LABEL_44;
  }
  uint64_t v28 = +[NSString stringWithUTF8String:v25];
  if (byte_1024855AF >= 0) {
    int v29 = &qword_102485598;
  }
  else {
    int v29 = (uint64_t *)qword_102485598;
  }
  [v15 setValue:v28 forKey:[NSString stringWithUTF8String:v29]];
LABEL_44:
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102311B60);
  }
  uint64_t v30 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v39 = v15;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#EED2Control,getPerPartnerControlDataDict,partner control data (pre-encryption),%@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102311B60);
    }
    __int16 v36 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "NSDictionary *CLEmergencyEED2Control::getPerPartnerControlDataDict(const CLEEDPartnerInfo &, NSString *, NSArray<CLEEDRequest *> *, const std::string &, CFAbsoluteTime, NSData *) const", "%s\n", v36);
    if (v36 != (char *)buf) {
      free(v36);
    }
  }
  id v31 = sub_10110CB2C(a1, a2, (uint64_t)v15, a5);
  if (!v31)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102311B60);
    }
    __int16 v34 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "#EED2Control,getPerPartnerControlDataDict,nil encryptedPartnerControlData,early return", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 == -1)
    {
LABEL_66:
      unint64_t v37 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "NSDictionary *CLEmergencyEED2Control::getPerPartnerControlDataDict(const CLEEDPartnerInfo &, NSString *, NSArray<CLEEDRequest *> *, const std::string &, CFAbsoluteTime, NSData *) const", "%s\n", v37);
      if (v37 != (char *)buf) {
        free(v37);
      }
      return 0;
    }
LABEL_68:
    dispatch_once(&qword_1024193E0, &stru_102311B60);
    goto LABEL_66;
  }
  id v32 = [v31 base64EncodedStringWithOptions:0];
  if (byte_1024855C7 >= 0) {
    int v33 = &qword_1024855B0;
  }
  else {
    int v33 = (uint64_t *)qword_1024855B0;
  }
  [v12 setValue:v32 forKey:[NSString stringWithUTF8String:v33]];
  return v12;
}

uint64_t *sub_10110C100(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  if (!a4)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102311B60);
    }
    uint64_t v28 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "#EED2Control,getDeviceSessionSecretForPartner,nil rootSecret,early return", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102311B60);
    }
    LOWORD(v42) = 0;
    goto LABEL_104;
  }
  if (*((char *)a3 + 23) < 0) {
    a3 = (uint64_t *)*a3;
  }
  id v6 = (NSMutableData *)+[CLEEDCryptoUtilities getSessionIDWithPhoneNumber:sessionStartTime:](CLEEDCryptoUtilities, "getSessionIDWithPhoneNumber:sessionStartTime:", +[NSString stringWithUTF8String:a3], sub_100AABA94());
  id v7 = sub_100A7D8F0(a2 + 3);
  if (!v7)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102311B60);
    }
    int v29 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v30 = (NSMutableData *)a2;
      }
      else {
        uint64_t v30 = (NSMutableData *)*a2;
      }
      *(_DWORD *)buf = 136446210;
      double v49 = v30;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "#EED2Control,getDeviceSessionSecretForPartner unable to convert partner cert data to SecCertificateRef,partner ID,%{public}s", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102311B60);
    }
    if (*((char *)a2 + 23) >= 0) {
      id v31 = (NSMutableData *)a2;
    }
    else {
      id v31 = (NSMutableData *)*a2;
    }
    int v42 = 136446210;
    unsigned int v43 = v31;
    goto LABEL_104;
  }
  uint64_t v8 = v7;
  uint64_t v9 = SecCertificateCopyKey(v7);
  if (!v9)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102311B60);
    }
    id v32 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "#EED2Control,getDeviceSessionSecretForPartner,nil publicKey obtained from SecCertificateCopyKey,early return", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102311B60);
      }
      LOWORD(v42) = 0;
      id v39 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "NSData *CLEmergencyEED2Control::getDeviceSessionSecretForPartner(const CLEEDPartnerInfo &, const std::string &, CFAbsoluteTime, NSData *) const", "%s\n", v39);
      if (v39 != (char *)buf) {
        free(v39);
      }
    }
    CFRelease(v8);
    return 0;
  }
  char v10 = v9;
  CFErrorRef error = 0;
  CFDataRef v11 = SecKeyCopyExternalRepresentation(v9, &error);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102311B60);
  }
  id v12 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v13 = a2;
    }
    else {
      uint64_t v13 = (uint64_t *)*a2;
    }
    long long v14 = &qword_1024855C8;
    if (byte_1024855DF < 0) {
      long long v14 = (uint64_t *)qword_1024855C8;
    }
    *(_DWORD *)buf = 138412802;
    double v49 = v6;
    __int16 v50 = 2080;
    long long v51 = v13;
    __int16 v52 = 2080;
    int v53 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#EED2Control,getDeviceSessionSecretForPartner,session ID = %@, partner ID = %s, device session secret const string = %s", buf, 0x20u);
  }
  if (!sub_10013D1A0(115, 2))
  {
    if (v11) {
      goto LABEL_17;
    }
LABEL_86:
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102311B60);
    }
    __int16 v36 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "#EED2Control,getDeviceSessionSecretForPartner,nil adrPublicKeyRep,early return", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102311B60);
    }
    LOWORD(v42) = 0;
    goto LABEL_104;
  }
  bzero(buf, 0x65CuLL);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102311B60);
  }
  if (*((char *)a2 + 23) >= 0) {
    int v33 = a2;
  }
  else {
    int v33 = (uint64_t *)*a2;
  }
  __int16 v34 = &qword_1024855C8;
  if (byte_1024855DF < 0) {
    __int16 v34 = (uint64_t *)qword_1024855C8;
  }
  int v42 = 138412802;
  unsigned int v43 = v6;
  __int16 v44 = 2080;
  double v45 = v33;
  __int16 v46 = 2080;
  double v47 = v34;
  int v35 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 2, "NSData *CLEmergencyEED2Control::getDeviceSessionSecretForPartner(const CLEEDPartnerInfo &, const std::string &, CFAbsoluteTime, NSData *) const", "%s\n", v35);
  if (v35 != (char *)buf) {
    free(v35);
  }
  if (!v11) {
    goto LABEL_86;
  }
LABEL_17:
  id v15 = [(NSMutableData *)v6 length];
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v16 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    uint64_t v16 = a2[1];
  }
  long long v17 = &v15[(void)[(__CFData *)v11 length] + v16];
  uint64_t v18 = byte_1024855DF;
  if (byte_1024855DF < 0) {
    uint64_t v18 = qword_1024855D0;
  }
  long long v19 = +[NSMutableData dataWithCapacity:&v17[v18]];
  [(NSMutableData *)v19 appendData:v6];
  int v20 = *((char *)a2 + 23);
  if (v20 >= 0) {
    uint64_t v21 = a2;
  }
  else {
    uint64_t v21 = (uint64_t *)*a2;
  }
  if (v20 >= 0) {
    uint64_t v22 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    uint64_t v22 = a2[1];
  }
  [(NSMutableData *)v19 appendBytes:v21 length:v22];
  [(NSMutableData *)v19 appendData:v11];
  if (byte_1024855DF >= 0) {
    id v23 = &qword_1024855C8;
  }
  else {
    id v23 = (uint64_t *)qword_1024855C8;
  }
  if (byte_1024855DF >= 0) {
    uint64_t v24 = byte_1024855DF;
  }
  else {
    uint64_t v24 = qword_1024855D0;
  }
  [(NSMutableData *)v19 appendBytes:v23 length:v24];

  uint64_t v25 = (uint64_t *)+[CLEEDCryptoUtilities getDerivedKeyWithLength:32 secretData:a4 additionalInfo:v19];
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102311B60);
  }
  __int16 v26 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412802;
    double v49 = v19;
    __int16 v50 = 2112;
    long long v51 = a4;
    __int16 v52 = 2112;
    int v53 = v25;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#EED2Control,getDeviceSessionSecretForPartner,additional info = %@, root secret = %@, device device session secret for partner = %@", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102311B60);
    }
    int v42 = 138412802;
    unsigned int v43 = v19;
    __int16 v44 = 2112;
    double v45 = a4;
    __int16 v46 = 2112;
    double v47 = v25;
    __int16 v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "NSData *CLEmergencyEED2Control::getDeviceSessionSecretForPartner(const CLEEDPartnerInfo &, const std::string &, CFAbsoluteTime, NSData *) const", "%s\n", v38);
    if (v38 != (char *)buf) {
      free(v38);
    }
  }
  CFRelease(v8);
  CFRelease(v10);
  if (!v25)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102311B60);
    }
    __int16 v27 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "#EED2Control,getDeviceSessionSecretForPartner,nil deviceSessionSecret", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102311B60);
    }
    LOWORD(v42) = 0;
LABEL_104:
    __int16 v40 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "NSData *CLEmergencyEED2Control::getDeviceSessionSecretForPartner(const CLEEDPartnerInfo &, const std::string &, CFAbsoluteTime, NSData *) const", "%s\n", v40);
    if (v40 != (char *)buf) {
      free(v40);
    }
    return 0;
  }
  return v25;
}

id sub_10110CB2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (!v4) {
      sub_10015E48C();
    }
    uint64_t v8 = (int *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4);
    uint64_t v9 = sub_100A80D4C(v8);
    if (*(char *)(a2 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a2;
      uint64_t v42 = *(void *)(a2 + 16);
    }
    sub_100A7D3F8((int *)v9, (unsigned __int8 *)__p, (uint64_t)v43);
    if (SHIBYTE(v42) < 0) {
      operator delete(__p[0]);
    }
    unint64_t v12 = v44;
    if ((v44 & 0x80u) != 0) {
      unint64_t v12 = (unint64_t)v43[1];
    }
    if (v12)
    {
      uint64_t v13 = sub_100A7D8F0((uint64_t *)(a2 + 24));
      long long v14 = v13;
      if (v13)
      {
        SecKeyRef v15 = SecCertificateCopyKey(v13);
        if (!v15)
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102311B60);
          }
          int v35 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "#EED2Control,getEncryptedPartnerControlData,nil partnerKey obtained from SecCertificateCopyKey,early return", buf, 2u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_102311B60);
            }
            LOWORD(v45) = 0;
            id v39 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "NSData *CLEmergencyEED2Control::getEncryptedPartnerControlData(const CLEEDPartnerInfo &, NSDictionary *, const std::string &, CFAbsoluteTime) const", "%s\n", v39);
            if (v39 != (char *)buf) {
              free(v39);
            }
          }
          CFRelease(v14);
          goto LABEL_82;
        }
        id v16 = +[CLEEDCryptoUtilities getKeyFingerprint:v15];
        if (!v16)
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102311B60);
          }
          __int16 v36 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "#EED2Control,getEncryptedPartnerControlData,nil keyFingerprint obtained from getKeyFingerprint,early return", buf, 2u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_102311B60);
            }
            LOWORD(v45) = 0;
            __int16 v40 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "NSData *CLEmergencyEED2Control::getEncryptedPartnerControlData(const CLEEDPartnerInfo &, NSDictionary *, const std::string &, CFAbsoluteTime) const", "%s\n", v40);
            if (v40 != (char *)buf) {
              free(v40);
            }
          }
          CFRelease(v14);
          CFRelease(v15);
          goto LABEL_82;
        }
        id v17 = sub_100AABDF0(a3);
        if (*((char *)a4 + 23) >= 0) {
          uint64_t v18 = a4;
        }
        else {
          uint64_t v18 = (uint64_t *)*a4;
        }
        id v19 = +[CLEEDCryptoUtilities getSessionIDWithPhoneNumber:sessionStartTime:](CLEEDCryptoUtilities, "getSessionIDWithPhoneNumber:sessionStartTime:", +[NSString stringWithUTF8String:v18], sub_100AABA94());
        int v20 = (char *)[v19 length];
        uint64_t v21 = &v20[(void)[v16 length]];
        uint64_t v22 = *(unsigned __int8 *)(a2 + 23);
        if ((v22 & 0x80u) != 0) {
          uint64_t v22 = *(void *)(a2 + 8);
        }
        id v23 = +[NSMutableData dataWithCapacity:&v21[v22]];
        [(NSMutableData *)v23 appendData:v19];
        [(NSMutableData *)v23 appendData:v16];
        int v24 = *(char *)(a2 + 23);
        if (v24 >= 0) {
          uint64_t v25 = (void *)a2;
        }
        else {
          uint64_t v25 = *(void **)a2;
        }
        if (v24 >= 0) {
          uint64_t v26 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v26 = *(void *)(a2 + 8);
        }
        [(NSMutableData *)v23 appendBytes:v25 length:v26];
        id v11 = +[CLEEDCryptoUtilities getECIESEncryptedData:v17 key:v15 sharedInfo:v23 prependKeyFingerprint:1];
        CFRelease(v14);
        CFRelease(v15);
        if (v11) {
          goto LABEL_83;
        }
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102311B60);
        }
        __int16 v27 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "#EED2Control,getEncryptedPartnerControlData,nil encryptedPartnerControlData obtained from getECIESEncryptedData", buf, 2u);
        }
        if (!sub_10013D1A0(115, 0))
        {
LABEL_82:
          id v11 = 0;
LABEL_83:
          if ((char)v44 < 0) {
            operator delete(v43[0]);
          }
          return v11;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102311B60);
        }
        LOWORD(v45) = 0;
        uint64_t v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "NSData *CLEmergencyEED2Control::getEncryptedPartnerControlData(const CLEEDPartnerInfo &, NSDictionary *, const std::string &, CFAbsoluteTime) const", "%s\n", v28);
      }
      else
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102311B60);
        }
        id v32 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
        {
          if (*(char *)(a2 + 23) >= 0) {
            int v33 = (void *)a2;
          }
          else {
            int v33 = *(void **)a2;
          }
          *(_DWORD *)buf = 136446210;
          __int16 v48 = v33;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "#EED2Control,getEncryptedPartnerControlData unable to convert partner cert data to SecCertificateRef,partner ID,%{public}s", buf, 0xCu);
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_82;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102311B60);
        }
        if (*(char *)(a2 + 23) >= 0) {
          __int16 v34 = (void *)a2;
        }
        else {
          __int16 v34 = *(void **)a2;
        }
        int v45 = 136446210;
        __int16 v46 = v34;
        uint64_t v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "NSData *CLEmergencyEED2Control::getEncryptedPartnerControlData(const CLEEDPartnerInfo &, NSDictionary *, const std::string &, CFAbsoluteTime) const", "%s\n", v28);
      }
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102311B60);
      }
      int v29 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(a2 + 23) >= 0) {
          uint64_t v30 = (void *)a2;
        }
        else {
          uint64_t v30 = *(void **)a2;
        }
        *(_DWORD *)buf = 136315138;
        __int16 v48 = v30;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "#EED2Control,getEncryptedPartnerControlData,valid cert not found for partner: %s", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_82;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102311B60);
      }
      if (*(char *)(a2 + 23) >= 0) {
        id v31 = (void *)a2;
      }
      else {
        id v31 = *(void **)a2;
      }
      int v45 = 136315138;
      __int16 v46 = v31;
      uint64_t v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "NSData *CLEmergencyEED2Control::getEncryptedPartnerControlData(const CLEEDPartnerInfo &, NSDictionary *, const std::string &, CFAbsoluteTime) const", "%s\n", v28);
    }
    if (v28 != (char *)buf) {
      free(v28);
    }
    goto LABEL_82;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102311B60);
  }
  char v10 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#EED2Control,getEncryptedPartnerControlData,nil partnerControlData,early return", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102311B60);
    }
    LOWORD(v43[0]) = 0;
    __int16 v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "NSData *CLEmergencyEED2Control::getEncryptedPartnerControlData(const CLEEDPartnerInfo &, NSDictionary *, const std::string &, CFAbsoluteTime) const", "%s\n", v38);
    if (v38 != (char *)buf) {
      free(v38);
    }
  }
  return 0;
}

void sub_10110D524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10110D594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

void *sub_10110D5EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7 = [[[*(id **)(a1 + 32)][@"silo"] queue];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3321888768;
  v9[2] = sub_10110D6E0;
  v9[3] = &unk_102311B00;
  int v11 = *(_DWORD *)(a1 + 72);
  sub_10110DAEC((uint64_t)v10, a1 + 40);
  v9[4] = a3;
  v9[5] = a4;
  dispatch_async(v7, v9);
  return sub_100ABDF68(v10);
}

uint64_t sub_10110D6E0(uint64_t a1)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102311B60);
  }
  BOOL v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_100A956D4(*(_DWORD *)(a1 + 80), __p);
    uint64_t v3 = v12 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2Control,postControlData,received response for %{public}s number", buf, 0xCu);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102311B60);
    }
    sub_100A956D4(*(_DWORD *)(a1 + 80), buf);
    if (v8 >= 0) {
      uint64_t v5 = buf;
    }
    else {
      uint64_t v5 = *(unsigned char **)buf;
    }
    int v9 = 136446210;
    char v10 = v5;
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    if (v8 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEmergencyEED2Control::postControlData(NumberType, NSDictionary *, SendControlDataResponse) const_block_invoke", "%s\n", v6);
    if (v6 != (char *)__p) {
      free(v6);
    }
  }
  return sub_10110D904(a1 + 48, *(_DWORD *)(a1 + 80), *(void *)(a1 + 32), *(void *)(a1 + 40));
}

uint64_t sub_10110D904(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v8 = a2;
  uint64_t v6 = a4;
  uint64_t v7 = a3;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, int *, uint64_t *, uint64_t *))(*(void *)v4 + 48))(v4, &v8, &v7, &v6);
}

uint64_t sub_10110D964(uint64_t a1, uint64_t a2)
{
  return sub_10110DAEC(a1 + 48, a2 + 48);
}

void *sub_10110D970(uint64_t a1)
{
  return sub_100ABDF68((void *)(a1 + 48));
}

uint64_t sub_10110D978(uint64_t a1, uint64_t a2)
{
  return sub_10110DAEC(a1 + 40, a2 + 40);
}

void *sub_10110D984(uint64_t a1)
{
  return sub_100ABDF68((void *)(a1 + 40));
}

void sub_10110D98C(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

uint64_t sub_10110D9BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_10110DA54(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_10110DAEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_10110DB84()
{
  sub_100134750(&qword_102485538, "device_session_key");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102485538, (void *)&_mh_execute_header);
  sub_100134750(&qword_102485550, "device_session_secret");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102485550, (void *)&_mh_execute_header);
  sub_100134750(&qword_102485568, "per_partner_data");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102485568, (void *)&_mh_execute_header);
  sub_100134750(&qword_102485580, "responses");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102485580, (void *)&_mh_execute_header);
  sub_100134750(&qword_102485598, "domain");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102485598, (void *)&_mh_execute_header);
  sub_100134750(&qword_1024855B0, "data");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024855B0, (void *)&_mh_execute_header);
  sub_100134750(&qword_1024855C8, "device session secret");

  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024855C8, (void *)&_mh_execute_header);
}

uint64_t sub_10110DCE4(uint64_t a1)
{
  *(void *)a1 = off_102311B90;
  *(void *)(a1 + 8) = off_1022DE190;
  *(_DWORD *)(a1 + 16) = 1099956224;
  BOOL v2 = (float *)(a1 + 16);
  uint64_t v3 = sub_1000D3E78();
  sub_10006B564(v3, &v5);
  sub_1004D11B0(v5, "SemiStatVMThreshold", v2);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  return a1;
}

void sub_10110DD88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10110DDA4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 3;
  *(void *)(a3 + 32) = 3;
  float v6 = *(float *)(a2 + 296);
  if (*(unsigned char *)(a2 + 352) || v6 > 1.0)
  {
    int v7 = *(unsigned __int8 *)(a2 + 324);
    sub_100B04870(a2, (uint64_t)buf);
    float v8 = *(float *)&v27;
    float v9 = *(float *)v28;
    *(_DWORD *)(a3 + 32) = *(_DWORD *)&v28[4];
    float v10 = 0.0;
    if (v6 > *(float *)(a1 + 16))
    {
      sub_10068D230();
      float v10 = v11;
    }
    if (*(unsigned char *)(a2 + 352))
    {
      float v12 = 4.5;
      if (v8 >= 4.5) {
        float v12 = v8;
      }
      if (v12 >= v10) {
        float v13 = v12;
      }
      else {
        float v13 = v10;
      }
      *(float *)(a3 + 20) = v13;
      *(float *)buf = v9;
      *(void *)uint64_t v25 = 0x3F95C28F3FA66666;
      *(float *)&v25[8] = v10;
      uint64_t v14 = 4;
      float v15 = v9;
      id v16 = buf;
      do
      {
        if (v15 < *(float *)&buf[v14])
        {
          float v15 = *(float *)&buf[v14];
          id v16 = &buf[v14];
        }
        v14 += 4;
      }
      while (v14 != 16);
      float v17 = *(float *)v16;
    }
    else
    {
      BOOL v18 = v6 < 33.0;
      float v19 = fmaxf(v10, 1.17);
      if (v8 != 0.0 && v6 < 33.0) {
        float v13 = v8;
      }
      else {
        float v13 = v19;
      }
      *(float *)(a3 + 20) = v13;
      if (v9 != 0.0 && v18) {
        float v17 = v9;
      }
      else {
        float v17 = v19;
      }
    }
    *(float *)(a3 + 28) = v17;
    *(float *)(a3 + 12) = v17;
    if (v17 == v9) {
      int v20 = 17;
    }
    else {
      int v20 = 1;
    }
    *(_DWORD *)(a3 + 36) = v20;
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_102311BD0);
    }
    uint64_t v21 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v22 = *(void *)(a2 + 112);
      *(_DWORD *)buf = 67110912;
      *(_DWORD *)uint64_t v25 = v7;
      *(_WORD *)&v25[4] = 2048;
      *(double *)&v25[6] = v10;
      __int16 v26 = 2048;
      uint64_t v27 = 0x3FF2B851E0000000;
      *(_WORD *)uint64_t v28 = 2048;
      *(double *)&void v28[2] = v13;
      __int16 v29 = 2048;
      double v30 = v8;
      __int16 v31 = 2048;
      uint64_t v32 = v22;
      __int16 v33 = 2048;
      double v34 = v17;
      __int16 v35 = 2048;
      double v36 = v9;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "Semistationary, Wheelchair, %d, metsFromIntensity, %.1f, metsFromPosture, %.1f, userMetsFinal, %.1f, userMetsFromPushes, %.1f, computeTime, %.1f, truthMetsFinal, %.1f, truthMetsFromPushes, %.1f", buf, 0x4Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_102311BD0);
      }
      id v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLMetsInfo CLCalorieSemiStatWheelchairModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
  }
}

uint64_t sub_10110E168(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)(a2 + 40) + 48))();
}

void sub_10110E190()
{
}

void sub_10110E1A4(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_10110E1D4()
{
  return 1;
}

void sub_10110E1DC(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10110E530(id a1, BOOL a2, NSError *a3)
{
  if (a2)
  {
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102311C50);
    }
    uint64_t v3 = qword_1024192F8;
    if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "HKHealthStore, ftp event successfully inserted", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192F0 != -1) {
        dispatch_once(&qword_1024192F0, &stru_102311C50);
      }
      uint64_t v4 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLCyclingPowerHKWriter writeFTPToHK:]_block_invoke", "%s\n");
LABEL_19:
      if (v4 != buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102311C50);
    }
    float v6 = qword_1024192F8;
    if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      float v8 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "HKHealthStore, saveObjects failed on, %@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192F0 != -1) {
        dispatch_once(&qword_1024192F0, &stru_102311C50);
      }
      uint64_t v4 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLCyclingPowerHKWriter writeFTPToHK:]_block_invoke", "%s\n");
      goto LABEL_19;
    }
  }
}

void sub_10110E844(id a1)
{
  qword_1024192F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CyclingPower");
}

void sub_10110E874(id a1)
{
  qword_1024193B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_10110E8A4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_10110E95C(_Unwind_Exception *a1)
{
}

void sub_10110E974()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    _WORD *v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_10110EA1C(_Unwind_Exception *a1)
{
}

void *sub_10110EA34(uint64_t a1, uint64_t a2)
{
  int v3 = 1;
  BOOL result = (void *)sub_1007FC1E8(a1, &v3, qword_1024855E0, a2);
  *BOOL result = off_102311CA0;
  return result;
}

void sub_10110EA8C(uint64_t a1)
{
  sub_1010456D8(a1);

  operator delete();
}

uint64_t sub_10110EAC4(uint64_t a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_102311D68);
  }
  BOOL v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 16))(__p, a1);
    int v3 = v12 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TILE: clear, tile, %sd", buf, 0xCu);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102311D68);
    }
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 16))(buf, a1);
    if (v8 >= 0) {
      uint64_t v5 = buf;
    }
    else {
      uint64_t v5 = *(unsigned char **)buf;
    }
    int v9 = 136315138;
    float v10 = v5;
    float v6 = (char *)_os_log_send_and_compose_impl();
    if (v8 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLDEMTile::clear()", "%s\n", v6);
    if (v6 != (char *)__p) {
      free(v6);
    }
  }
  return sub_101045750(a1);
}

void sub_10110ED20(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 296) = 0;
}

void sub_10110ED48(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 296) = 0;
}

double sub_10110ED70()
{
  return 0.1;
}

void sub_10110ED7C(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10110EDAC()
{
}

void sub_10110EE00()
{
}

uint64_t sub_10110EE24(uint64_t a1)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  sub_100513074(a1 + 48, "CLBundleKeyValueCache", 1, 1);
  *(void *)a1 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(void *)(a1 + 8) = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(void *)(a1 + 16) = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(void *)(a1 + 24) = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(void *)(a1 + 32) = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(void *)(a1 + 40) = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  return a1;
}

void sub_10110EF30(_Unwind_Exception *a1)
{
  sub_10051310C(v1);
  _Unwind_Resume(a1);
}

void sub_10110EF48()
{
}

void sub_10110EF8C()
{
}

uint64_t sub_10110EFB0(uint64_t a1)
{
  uint64_t v2 = a1 + 48;
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16))(a1 + 48);
  CFPropertyListRef DeepCopy = CFPropertyListCreateDeepCopy(kCFAllocatorDefault, *(CFPropertyListRef *)a1, 2uLL);
  CFRelease(*(CFTypeRef *)a1);
  *(void *)a1 = DeepCopy;
  CFPropertyListRef v4 = CFPropertyListCreateDeepCopy(kCFAllocatorDefault, *(CFPropertyListRef *)(a1 + 8), 2uLL);
  CFRelease(*(CFTypeRef *)(a1 + 8));
  *(void *)(a1 + 8) = v4;
  CFPropertyListRef v5 = CFPropertyListCreateDeepCopy(kCFAllocatorDefault, *(CFPropertyListRef *)(a1 + 16), 2uLL);
  CFRelease(*(CFTypeRef *)(a1 + 16));
  *(void *)(a1 + 16) = v5;
  CFPropertyListRef v6 = CFPropertyListCreateDeepCopy(kCFAllocatorDefault, *(CFPropertyListRef *)(a1 + 24), 2uLL);
  CFRelease(*(CFTypeRef *)(a1 + 24));
  *(void *)(a1 + 24) = v6;
  CFPropertyListRef v7 = CFPropertyListCreateDeepCopy(kCFAllocatorDefault, *(CFPropertyListRef *)(a1 + 32), 2uLL);
  CFRelease(*(CFTypeRef *)(a1 + 32));
  *(void *)(a1 + 32) = v7;
  CFPropertyListRef v8 = CFPropertyListCreateDeepCopy(kCFAllocatorDefault, *(CFPropertyListRef *)(a1 + 40), 2uLL);
  CFRelease(*(CFTypeRef *)(a1 + 40));
  *(void *)(a1 + 40) = v8;
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 48) + 24))(v2);
}

void sub_10110F110(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1011104A4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_101111EF8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1011133B4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1011134BC(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_1011134EC(id a1)
{
  qword_102419658 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Location_deprecated");
}

uint64_t sub_10111351C(uint64_t a1, double a2)
{
  uint64_t v2 = &qword_101DA7570;
  while (1)
  {
    uint64_t v3 = *v2;
    if (*(double *)v2 <= a2)
    {
      double v4 = *((double *)v2 + 1);
      if (v4 > a2)
      {
        int v6 = *((_DWORD *)v2 + 6);
        goto LABEL_10;
      }
    }
    if (*((_DWORD *)v2 + 6) == 1)
    {
      double v4 = *((double *)v2 + 1);
      if (vabdd_f64(a2, v4) <= 1.0e-12) {
        break;
      }
    }
    v2 += 4;
    if (v2 == &qword_101DA75D0) {
      return 0;
    }
  }
  int v6 = 1;
LABEL_10:
  *(_DWORD *)(a1 + 24) = v6;
  uint64_t v5 = 1;
  *(void *)a1 = v3;
  *(double *)(a1 + 8) = v4;
  return v5;
}

uint64_t sub_101114648(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    double v4 = &OBJC_IVAR___CLOdometerAlarmManager_currentlyScheduled;
    uint64_t v5 = &OBJC_IVAR___CLOdometerAlarmManager_currentlyScheduled;
    int v6 = &OBJC_IVAR___CLOdometerAlarmManager_currentlyScheduled;
    CFPropertyListRef v7 = &OBJC_IVAR___CLOdometerAlarmManager_currentlyScheduled;
    CFPropertyListRef v8 = &OBJC_IVAR___CLOdometerAlarmManager_currentlyScheduled;
    int v9 = &OBJC_IVAR___CLOdometerAlarmManager_currentlyScheduled;
    float v10 = &OBJC_IVAR___CLOdometerAlarmManager_currentlyScheduled;
    float v11 = &OBJC_IVAR___CLOdometerAlarmManager_currentlyScheduled;
    char v12 = &OBJC_IVAR___CLOdometerAlarmManager_currentlyScheduled;
    do
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        uint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v17 = v16 + 1;
        if (v16 == -1 || v17 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v18 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17;
        v15 |= (unint64_t)(v18 & 0x7F) << v13;
        if ((v18 & 0x80) == 0) {
          goto LABEL_12;
        }
        v13 += 7;
        BOOL v19 = v14++ >= 9;
        if (v19)
        {
          unint64_t v15 = 0;
          int v20 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
      int v20 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v15 = 0;
      }
LABEL_14:
      if (v20 || (v15 & 7) == 4) {
        break;
      }
      switch((v15 >> 3))
      {
        case 1u:
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          *(unsigned char *)(a1 + v4[31]) |= 0x20u;
          while (1)
          {
            uint64_t v25 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v26 = v25 + 1;
            if (v25 == -1 || v26 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v27 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26;
            v24 |= (unint64_t)(v27 & 0x7F) << v22;
            if ((v27 & 0x80) == 0) {
              goto LABEL_76;
            }
            v22 += 7;
            BOOL v19 = v23++ >= 9;
            if (v19)
            {
              LODWORD(v24) = 0;
              goto LABEL_78;
            }
          }
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_76:
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v24) = 0;
          }
LABEL_78:
          uint64_t v68 = v5[32];
          goto LABEL_83;
        case 2u:
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v24 = 0;
          while (2)
          {
            uint64_t v36 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v37 = v36 + 1;
            if (v36 == -1 || v37 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v38 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v36);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v37;
              v24 |= (unint64_t)(v38 & 0x7F) << v34;
              if (v38 < 0)
              {
                v34 += 7;
                BOOL v19 = v35++ >= 9;
                if (v19)
                {
                  LODWORD(v24) = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v24) = 0;
          }
LABEL_82:
          uint64_t v68 = v6[38];
LABEL_83:
          *(_DWORD *)(a1 + v68) = v24;
          continue;
        case 3u:
          char v39 = 0;
          unsigned int v40 = 0;
          uint64_t v41 = 0;
          while (2)
          {
            uint64_t v42 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v43 = v42 + 1;
            if (v42 == -1 || v43 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v44 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v42);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v43;
              v41 |= (unint64_t)(v44 & 0x7F) << v39;
              if (v44 < 0)
              {
                v39 += 7;
                BOOL v19 = v40++ >= 9;
                if (v19)
                {
                  uint64_t v41 = 0;
                  goto LABEL_87;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v41 = 0;
          }
LABEL_87:
          BOOL v69 = v41 != 0;
          uint64_t v70 = v7[39];
          goto LABEL_101;
        case 4u:
          *(unsigned char *)(a1 + v4[31]) |= 4u;
          unint64_t v45 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v45 <= 0xFFFFFFFFFFFFFFF7 && v45 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v46 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v45);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v45 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v46 = 0;
          }
          uint64_t v72 = v8[33];
          goto LABEL_110;
        case 5u:
          *(unsigned char *)(a1 + v4[31]) |= 0x10u;
          unint64_t v47 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v47 <= 0xFFFFFFFFFFFFFFFBLL && v47 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            int v48 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v47);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v47 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            int v48 = 0;
          }
          *(_DWORD *)(a1 + v9[34]) = v48;
          continue;
        case 6u:
          char v49 = 0;
          unsigned int v50 = 0;
          uint64_t v51 = 0;
          while (2)
          {
            uint64_t v52 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v53 = v52 + 1;
            if (v52 == -1 || v53 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v54 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v52);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v53;
              v51 |= (unint64_t)(v54 & 0x7F) << v49;
              if (v54 < 0)
              {
                v49 += 7;
                BOOL v19 = v50++ >= 9;
                if (v19)
                {
                  uint64_t v51 = 0;
                  goto LABEL_91;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v51 = 0;
          }
LABEL_91:
          uint64_t v71 = v10[40];
          goto LABEL_96;
        case 7u:
          char v55 = 0;
          unsigned int v56 = 0;
          uint64_t v51 = 0;
          *(unsigned char *)(a1 + v4[31]) |= 1u;
          while (2)
          {
            uint64_t v57 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v58 = v57 + 1;
            if (v57 == -1 || v58 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v59 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v57);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v58;
              v51 |= (unint64_t)(v59 & 0x7F) << v55;
              if (v59 < 0)
              {
                v55 += 7;
                BOOL v19 = v56++ >= 9;
                if (v19)
                {
                  uint64_t v51 = 0;
                  goto LABEL_95;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v51 = 0;
          }
LABEL_95:
          uint64_t v71 = v11[35];
LABEL_96:
          *(void *)(a1 + v71) = v51;
          continue;
        case 8u:
          *(unsigned char *)(a1 + v4[31]) |= 8u;
          unint64_t v60 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v60 <= 0xFFFFFFFFFFFFFFF7 && v60 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v46 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v60);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v60 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v46 = 0;
          }
          uint64_t v72 = v12[36];
          goto LABEL_110;
        case 9u:
          *(unsigned char *)(a1 + v4[31]) |= 2u;
          unint64_t v61 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v61 <= 0xFFFFFFFFFFFFFFF7 && v61 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v46 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v61);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v61 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v46 = 0;
          }
          uint64_t v72 = 16;
LABEL_110:
          *(void *)(a1 + v72) = v46;
          continue;
        case 0xAu:
          char v62 = 0;
          unsigned int v63 = 0;
          uint64_t v64 = 0;
          break;
        default:
          uint64_t v28 = v5;
          __int16 v29 = v6;
          double v30 = v7;
          __int16 v31 = v4;
          uint64_t v32 = v8;
          uint64_t result = PBReaderSkipValueWithTag();
          CFPropertyListRef v8 = v32;
          double v4 = v31;
          int v9 = &OBJC_IVAR___CLOdometerAlarmManager_currentlyScheduled;
          CFPropertyListRef v7 = v30;
          float v10 = &OBJC_IVAR___CLOdometerAlarmManager_currentlyScheduled;
          int v6 = v29;
          char v12 = &OBJC_IVAR___CLOdometerAlarmManager_currentlyScheduled;
          uint64_t v5 = v28;
          float v11 = &OBJC_IVAR___CLOdometerAlarmManager_currentlyScheduled;
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v65 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v66 = v65 + 1;
        if (v65 == -1 || v66 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v67 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v65);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v66;
        v64 |= (unint64_t)(v67 & 0x7F) << v62;
        if ((v67 & 0x80) == 0) {
          goto LABEL_98;
        }
        v62 += 7;
        BOOL v19 = v63++ >= 9;
        if (v19)
        {
          uint64_t v64 = 0;
          goto LABEL_100;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_98:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v64 = 0;
      }
LABEL_100:
      BOOL v69 = v64 != 0;
      uint64_t v70 = 61;
LABEL_101:
      *(unsigned char *)(a1 + v70) = v69;
    }
    while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length));
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_1011157F4(uint64_t a1)
{
  *(void *)a1 = &off_1022D8830;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(unsigned char *)(a1 + 40) = 0;
  uint64_t v2 = sub_1000D3E78();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1011158D0;
  v4[3] = &unk_1022A3020;
  v4[4] = a1;
  sub_1009E8E94(v2, (uint64_t)v4);
  return a1;
}

void sub_1011158AC(_Unwind_Exception *a1)
{
  sub_1004C62FC(v2, 0);
  double v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1011158D0(uint64_t a1)
{
  return sub_1011158D8(*(void *)(a1 + 32));
}

uint64_t sub_1011158D8(uint64_t a1)
{
  sub_1000D3E78();
  sub_1000D5B68();
  unint64_t v2 = sub_1000A16E8();
  if ((v2 & 0x200) != 0)
  {
    if (!*(void *)(a1 + 8))
    {
      uint64_t v3 = (uint64_t *)sub_100A26784();
      uint64_t v9 = 0x150000FF0CLL;
      char v10 = 0;
      sub_101A46D60(v3, (uint64_t)&v9, (uint64_t *)buf);
      long long v4 = *(_OWORD *)buf;
      memset(buf, 0, sizeof(buf));
      uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
      *(_OWORD *)(a1 + 8) = v4;
      if (v5)
      {
        sub_1000DB0A0(v5);
        if (*(void *)&buf[8]) {
          sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
        }
      }
      sub_100A2932C(*(uint64_t **)(a1 + 8), (uint64_t)sub_101116710, a1);
      sub_100A294B4(*(void *)(a1 + 8), (uint64_t)sub_101115C80, a1);
      sub_100A293C8(*(void *)(a1 + 8), (uint64_t)sub_101115C80, a1);
      sub_100A29A24(*(void *)(a1 + 8), (uint64_t)sub_101115C80, a1);
      operator new();
    }
  }
  else
  {
    if (qword_102419070 != -1) {
      dispatch_once(&qword_102419070, &stru_102311DE8);
    }
    int v6 = qword_102419078;
    if (os_log_type_enabled((os_log_t)qword_102419078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Service unavailable.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419070 != -1) {
        dispatch_once(&qword_102419070, &stru_102311DE8);
      }
      __int16 v11 = 0;
      CFPropertyListRef v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLSPUMagicMountInterface::openHidDevice()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  return (v2 >> 9) & 1;
}

void sub_101115BAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1000DB0A0(a16);
  }
  operator delete();
}

unint64_t sub_101115BEC()
{
  return ((unint64_t)sub_1000A16E8() >> 9) & 1;
}

BOOL sub_101115C08(uint64_t a1, uint64_t a2, char *a3)
{
  sub_1000D3E78();
  sub_1000D5B68();
  if ((sub_1000A16E8() & 0x200) == 0) {
    sub_101AA2468();
  }
  int v8 = 0;
  uint64_t v7 = 4;
  return sub_1012B4B18(*(void *)(a1 + 24), a2, a3, (uint64_t)&v8, (uint64_t)&v7) == 0;
}

BOOL sub_101115C80(uint64_t a1)
{
  unint64_t v2 = *(uint64_t **)(a1 + 24);
  sub_1012B3B9C(v2);
  sub_1012B3F28(v2);

  return sub_101115CC8(a1);
}

BOOL sub_101115CC8(uint64_t a1)
{
  sub_1000D3E78();
  sub_1000D5B68();
  v9[0] = 2;
  int v2 = *(unsigned __int8 *)(a1 + 40);
  v9[1] = *(unsigned char *)(a1 + 40);
  uint64_t v10 = 0;
  int v11 = 0;
  if (qword_102419070 != -1) {
    dispatch_once(&qword_102419070, &stru_102311DE8);
  }
  uint64_t v3 = qword_102419078;
  if (os_log_type_enabled((os_log_t)qword_102419078, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240192;
    int v15 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[CLMagicMountInterface] Sending config shouldKeepRunning,%{public}u,", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419070 != -1) {
      dispatch_once(&qword_102419070, &stru_102311DE8);
    }
    int v12 = 67240192;
    int v13 = v2;
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLSPUMagicMountInterface::configure()", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  BOOL v4 = sub_101115C08(a1, (uint64_t)v9, (char *)0xE);
  if (!v4)
  {
    if (qword_102419070 != -1) {
      dispatch_once(&qword_102419070, &stru_102311DE8);
    }
    uint64_t v5 = qword_102419078;
    if (os_log_type_enabled((os_log_t)qword_102419078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[CLMagicMountInterface] Configure failed", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419070 != -1) {
        dispatch_once(&qword_102419070, &stru_102311DE8);
      }
      LOWORD(v12) = 0;
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLSPUMagicMountInterface::configure()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  return v4;
}

void sub_101115FD8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    IOHIDEventGetVendorDefinedData();
    if (qword_102419070 != -1) {
      dispatch_once(&qword_102419070, &stru_102311DE8);
    }
    int v2 = qword_102419078;
    if (os_log_type_enabled((os_log_t)qword_102419078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Empty payload, returning", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419070 != -1) {
        dispatch_once(&qword_102419070, &stru_102311DE8);
      }
      uint64_t v3 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSPUMagicMountInterface::onIoHidEvent(IOHIDEventRef)", "%s\n");
LABEL_18:
      if (v3 != buf) {
        free(v3);
      }
    }
  }
  else
  {
    if (qword_102419070 != -1) {
      dispatch_once(&qword_102419070, &stru_102311DE8);
    }
    BOOL v4 = qword_102419078;
    if (os_log_type_enabled((os_log_t)qword_102419078, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Event ref invalid", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419070 != -1) {
        dispatch_once(&qword_102419070, &stru_102311DE8);
      }
      uint64_t v3 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLSPUMagicMountInterface::onIoHidEvent(IOHIDEventRef)", "%s\n");
      goto LABEL_18;
    }
  }
}

void sub_1011162C4(uint64_t a1, unsigned __int8 *a2, size_t a3, double a4)
{
  *(double *)(a1 + 32) = a4;
  sub_1009399D0(__dst, a2, a3);
  if (a3) {
    int v7 = *a2;
  }
  else {
    int v7 = 0;
  }
  if (qword_102419070 != -1) {
    dispatch_once(&qword_102419070, &stru_102311DE8);
  }
  int v8 = qword_102419078;
  if (os_log_type_enabled((os_log_t)qword_102419078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240448;
    int v19 = v7;
    __int16 v20 = 2050;
    size_t v21 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "type,%{public}d,size,%{public}lu", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419070 != -1) {
      dispatch_once(&qword_102419070, &stru_102311DE8);
    }
    int v14 = 67240448;
    int v15 = v7;
    __int16 v16 = 2050;
    size_t v17 = a3;
    int v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSPUMagicMountInterface::visitIoHidEvent(const uint8_t *, size_t, const CFTimeInterval)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  if (v7 == 255)
  {
    if (qword_102419070 != -1) {
      dispatch_once(&qword_102419070, &stru_102311DE8);
    }
    uint64_t v9 = qword_102419078;
    if (os_log_type_enabled((os_log_t)qword_102419078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240448;
      int v19 = 255;
      __int16 v20 = 2050;
      size_t v21 = a3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Bad report,type,%{public}d,size,%{public}lu", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419070 != -1) {
        dispatch_once(&qword_102419070, &stru_102311DE8);
      }
      int v14 = 67240448;
      int v15 = 255;
      __int16 v16 = 2050;
      size_t v17 = a3;
LABEL_32:
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLSPUMagicMountInterface::visitIoHidEvent(const uint8_t *, size_t, const CFTimeInterval)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  else if ((sub_100939A24(__dst, a1) & 1) == 0)
  {
    if (qword_102419070 != -1) {
      dispatch_once(&qword_102419070, &stru_102311DE8);
    }
    uint64_t v10 = qword_102419078;
    if (os_log_type_enabled((os_log_t)qword_102419078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      int v19 = v7;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "CMMagicMountReport::visit() type %{public}d failed.", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419070 != -1) {
        dispatch_once(&qword_102419070, &stru_102311DE8);
      }
      int v14 = 67240192;
      int v15 = v7;
      goto LABEL_32;
    }
  }
}

void sub_101116710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_101116718(id a1)
{
  qword_102419078 = (uint64_t)os_log_create("com.apple.locationd.Motion", "MagicMount");
}

uint64_t sub_101116748(uint64_t a1)
{
  *(void *)a1 = off_102311E18;
  int v3 = 0;
  sub_101117638((void *)(a1 + 8), 0x1FuLL, &v3);
  *(_OWORD *)(a1 + 92) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  return a1;
}

void *sub_1011167B0(void *a1)
{
  *a1 = off_102311E18;
  int v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  sub_1011176BC(a1 + 4);
  int v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_10111681C(void *a1)
{
  sub_1011167B0(a1);

  operator delete();
}

void sub_101116854(uint64_t a1)
{
  int v2 = *(void ***)(a1 + 40);
  int v3 = *(void ***)(a1 + 48);
  if (v3 == v2)
  {
    BOOL v4 = (void *)(a1 + 72);
    int v3 = *(void ***)(a1 + 40);
  }
  else
  {
    BOOL v4 = (void *)(a1 + 72);
    unint64_t v5 = *(void *)(a1 + 64);
    int v6 = &v2[v5 / 0xAA];
    unint64_t v7 = (unint64_t)*v6;
    unint64_t v8 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    unint64_t v9 = (unint64_t)v2[(*(void *)(a1 + 72) + v5) / 0xAA] + 24 * ((*(void *)(a1 + 72) + v5) % 0xAA);
    if (v8 != v9)
    {
      do
      {
        uint64_t v10 = *(void **)v8;
        if (*(void *)v8)
        {
          *(void *)(v8 + 8) = v10;
          operator delete(v10);
          unint64_t v7 = (unint64_t)*v6;
        }
        v8 += 24;
        if (v8 - v7 == 4080)
        {
          unint64_t v11 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v11;
          unint64_t v8 = v11;
        }
      }
      while (v8 != v9);
      int v2 = *(void ***)(a1 + 40);
      int v3 = *(void ***)(a1 + 48);
    }
  }
  *BOOL v4 = 0;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v13 = *(void *)(a1 + 48);
      int v2 = (void **)(*(void *)(a1 + 40) + 8);
      *(void *)(a1 + 40) = v2;
      unint64_t v12 = v13 - (void)v2;
    }
    while (v12 > 0x10);
  }
  if (v12 >> 3 == 1)
  {
    uint64_t v14 = 85;
  }
  else
  {
    if (v12 >> 3 != 2) {
      goto LABEL_17;
    }
    uint64_t v14 = 170;
  }
  *(void *)(a1 + 64) = v14;
LABEL_17:
  int v15 = *(void **)(a1 + 8);
  uint64_t v16 = *(void *)(a1 + 16) - (void)v15;
  if (v16 >= 1) {
    bzero(v15, 4 * (((unint64_t)v16 >> 2) - ((unint64_t)v16 > 3)) + 4);
  }
  *(_DWORD *)(a1 + 104) = 0;
}

void sub_1011169AC(uint64_t a1, uint64_t a2, void *a3)
{
  a3[1] = *a3;
  int v11 = 0;
  sub_10027D230((uint64_t)a3, 0x1FuLL, &v11);
  unint64_t v5 = *(double **)a2;
  uint64_t v6 = *(void *)(a2 + 8) - *(void *)a2;
  if (v6)
  {
    unint64_t v7 = v6 >> 3;
    uint64_t v8 = *a3;
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    do
    {
      double v9 = *v5++;
      unsigned int v10 = (int)(v9 / 0.100000001) & ~((int)(v9 / 0.100000001) >> 31);
      if (v10 >= 0x1E) {
        unsigned int v10 = 30;
      }
      ++*(_DWORD *)(v8 + 4 * v10);
      --v7;
    }
    while (v7);
  }
}

uint64_t sub_101116A48(uint64_t a1, uint64_t *a2, double *a3, double **a4)
{
  if (*a3 < 1.0 || (uint64_t v5 = a2[1], *a2 == v5))
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102311E38);
    }
    __int16 v20 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "noSamples < 1 || hist.empty()", buf, 2u);
    }
    BOOL v21 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v21)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102311E38);
      }
      char v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLOdometerQuality::cdfCalculator(const std::vector<unsigned int> &, const double &, std::vector<double> &)", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  else
  {
    sub_100907574((uint64_t)a4, (v5 - *a2) >> 2);
    uint64_t v8 = (_DWORD *)*a2;
    LODWORD(v9) = *(_DWORD *)*a2;
    double v10 = (double)v9;
    int v11 = *a4;
    *int v11 = v10;
    unint64_t v12 = a4[1];
    unint64_t v13 = v12 - v11;
    if ((unint64_t)((char *)v12 - (char *)v11) >= 9)
    {
      if (v13 <= 2) {
        uint64_t v14 = 2;
      }
      else {
        uint64_t v14 = v12 - v11;
      }
      int v15 = v11 + 1;
      uint64_t v16 = v8 + 1;
      uint64_t v17 = v14 - 1;
      do
      {
        unsigned int v18 = *v16++;
        double v10 = v10 + (double)v18;
        *v15++ = v10;
        --v17;
      }
      while (v17);
    }
    if (v12 != v11)
    {
      if (v13 <= 1) {
        unint64_t v13 = 1;
      }
      do
      {
        *int v11 = *v11 * (100.0 / *a3);
        ++v11;
        --v13;
      }
      while (v13);
    }
    return 1;
  }
  return result;
}

void sub_101116CA8(double *a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t)a1;
  BOOL v4 = (double **)(a1 + 10);
  int v3 = (double *)*((void *)a1 + 10);
  *((void *)a1 + 11) = v3;
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5 == *a2) {
    goto LABEL_44;
  }
  unint64_t v8 = 0;
  unint64_t v9 = a1 + 12;
  do
  {
    double v10 = *(double *)(v6 + 8 * v8);
    if (v10 > 0.0 && v10 < 5000.0)
    {
      if ((unint64_t)v3 >= *v9)
      {
        a1 = *v4;
        uint64_t v12 = v3 - *v4;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 61) {
          sub_1001D7FD4();
        }
        uint64_t v14 = *v9 - (void)a1;
        if (v14 >> 2 > v13) {
          unint64_t v13 = v14 >> 2;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          uint64_t v16 = (char *)sub_1000DA54C(v2 + 96, v15);
          a1 = *(double **)(v2 + 80);
          int v3 = *(double **)(v2 + 88);
          double v10 = *(double *)(v6 + 8 * v8);
        }
        else
        {
          uint64_t v16 = 0;
        }
        uint64_t v17 = (double *)&v16[8 * v12];
        *uint64_t v17 = v10;
        int v11 = v17 + 1;
        while (v3 != a1)
        {
          uint64_t v18 = *((void *)v3-- - 1);
          *((void *)v17-- - 1) = v18;
        }
        *(void *)(v2 + 80) = v17;
        *(void *)(v2 + 88) = v11;
        *(void *)(v2 + 96) = &v16[8 * v15];
        if (a1) {
          operator delete(a1);
        }
      }
      else
      {
        *int v3 = v10;
        int v11 = v3 + 1;
      }
      *(void *)(v2 + 88) = v11;
      uint64_t v6 = *a2;
      uint64_t v5 = a2[1];
      int v3 = v11;
    }
    ++v8;
  }
  while (v8 < (v5 - v6) >> 3);
  if (*v4 == v3)
  {
LABEL_44:
    sub_101116854(v2);
  }
  else
  {
    if (*(void *)(v2 + 72) >= 0xAuLL) {
      a1 = (double *)sub_1011174D0((void *)(v2 + 32));
    }
    __p = 0;
    long long v86 = 0uLL;
    sub_1011169AC((uint64_t)a1, (uint64_t)v4, &__p);
    sub_101117560(v2 + 32, (uint64_t)&__p);
    if (__p)
    {
      *(void *)&long long v86 = __p;
      operator delete(__p);
    }
    uint64_t v19 = *(void *)(v2 + 72);
    if (v19)
    {
      unint64_t v20 = *(void *)(v2 + 64);
      uint64_t v21 = *(void *)(v2 + 40);
      char v22 = (void *)(v21 + 8 * (v20 / 0xAA));
      unsigned int v23 = (void *)(*v22 + 24 * (v20 % 0xAA));
      uint64_t v24 = v23[1];
      uint64_t v25 = v24 - *v23;
      if (v24 == *v23)
      {
        char v39 = *(int **)(v2 + 8);
      }
      else
      {
        unint64_t v26 = 0;
        unsigned int v27 = 0;
        unint64_t v28 = v25 >> 2;
        uint64_t v29 = *(void *)(v2 + 48);
        if (v29 == v21) {
          unsigned int v23 = 0;
        }
        unint64_t v30 = v20 + v19;
        unint64_t v31 = v30 / 0xAA;
        unint64_t v32 = v30 % 0xAA;
        do
        {
          int v33 = 0;
          char v34 = v22;
          unsigned int v35 = v23;
LABEL_34:
          uint64_t v36 = v35 - 510;
          while (1)
          {
            uint64_t v37 = v29 == v21 ? 0 : *(void *)(v21 + 8 * v31) + 24 * v32;
            if (v35 == (void *)v37) {
              break;
            }
            if (v26 >= (uint64_t)(v35[1] - *v35) >> 2) {
              sub_100273D6C();
            }
            v33 += *(_DWORD *)(*v35 + 4 * v26);
            v35 += 3;
            v36 += 3;
            if ((void *)*v34 == v36)
            {
              char v38 = (void *)v34[1];
              ++v34;
              unsigned int v35 = v38;
              goto LABEL_34;
            }
          }
          char v39 = *(int **)(v2 + 8);
          v39[v26] = v33;
          unint64_t v26 = ++v27;
        }
        while (v28 > v27);
      }
      unsigned int v40 = *(int **)(v2 + 16);
      if (v39 == v40)
      {
        int v41 = 0;
      }
      else
      {
        int v41 = 0;
        do
        {
          int v42 = *v39++;
          v41 += v42;
        }
        while (v39 != v40);
      }
      double v80 = (double)v41;
      unint64_t v77 = 0;
      long long v78 = 0;
      uint64_t v79 = 0;
      if (sub_101116A48((uint64_t)v39, (uint64_t *)(v2 + 8), &v80, (double **)&v77))
      {
        uint64_t v43 = ((char *)v78 - (unsigned char *)v77) >> 3;
        if (v43 == (*(void *)algn_1024855F8 - qword_1024855F0) >> 3
          && v43 == (qword_102485610 - qword_102485608) >> 3
          && v43 == (qword_102485628 - qword_102485620) >> 3)
        {
          __p = 0;
          sub_1001DCEDC(&v75, 3uLL, &__p);
          char v44 = (double *)v77;
          unint64_t v45 = v78;
          uint64_t v46 = (double *)v75;
          if (v77 != v78)
          {
            unint64_t v47 = (double *)qword_102485608;
            int v48 = (double *)qword_1024855F0;
            char v49 = (double *)qword_102485620;
            double v51 = *((double *)v75 + 1);
            double v50 = *((double *)v75 + 2);
            double v52 = *(double *)v75;
            do
            {
              double v53 = *v47++;
              double v50 = v50 + (*v44 - v53) * (*v44 - v53);
              v46[2] = v50;
              double v54 = *v48++;
              double v51 = v51 + (*v44 - v54) * (*v44 - v54);
              v46[1] = v51;
              double v55 = *v44++;
              double v56 = v55;
              double v57 = *v49++;
              double v52 = v52 + (v56 - v57) * (v56 - v57);
              double *v46 = v52;
            }
            while (v44 != v45);
          }
          unint64_t v58 = v46 + 1;
          BOOL v59 = v46 == v76 || v58 == v76;
          unint64_t v60 = v46;
          if (!v59)
          {
            double v61 = *v46;
            unint64_t v60 = v46;
            char v62 = v46 + 1;
            do
            {
              double v63 = *v62++;
              double v64 = v63;
              if (v63 < v61)
              {
                double v61 = v64;
                unint64_t v60 = v58;
              }
              unint64_t v58 = v62;
            }
            while (v62 != v76);
          }
          unint64_t v65 = (unint64_t)((char *)v60 - (char *)v46) >> 3;
          *(_DWORD *)(v2 + 104) = v65 + 1;
          if (v65)
          {
            if (v65 != 1 || v46[2] * 0.98 > v46[1]) {
              goto LABEL_84;
            }
            int v66 = 3;
          }
          else
          {
            if (v46[1] * 0.93 > *v46)
            {
LABEL_84:
              if (qword_102419030 != -1) {
                dispatch_once(&qword_102419030, &stru_102311E38);
              }
              uint64_t v68 = qword_102419038;
              if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
              {
                int v69 = *(_DWORD *)(v2 + 104);
                uint64_t v70 = *((void *)v75 + v69 - 1);
                LODWORD(__p) = 67109376;
                HIDWORD(__p) = v69;
                LOWORD(v86) = 2048;
                *(void *)((char *)&v86 + 2) = v70;
                _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEBUG, "OdometerQualityIndicator,%d,r2,%f", (uint8_t *)&__p, 0x12u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(&__p, 0x65CuLL);
                if (qword_102419030 != -1) {
                  dispatch_once(&qword_102419030, &stru_102311E38);
                }
                int v72 = *(_DWORD *)(v2 + 104);
                uint64_t v73 = *((void *)v75 + v72 - 1);
                int v81 = 67109376;
                int v82 = v72;
                __int16 v83 = 2048;
                uint64_t v84 = v73;
                uint64_t v74 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLOdometerQuality::classifySamples(std::vector<double> &)", "%s\n", v74);
                if (v74 != (char *)&__p) {
                  free(v74);
                }
              }
              if (v75)
              {
                uint64_t v76 = (double *)v75;
                operator delete(v75);
              }
              goto LABEL_78;
            }
            int v66 = 2;
          }
          *(_DWORD *)(v2 + 104) = v66;
          goto LABEL_84;
        }
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_102311E38);
        }
        char v67 = qword_102419038;
        if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_FAULT))
        {
          LOWORD(__p) = 0;
          _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_FAULT, "unexpected trained cdf data size issue", (uint8_t *)&__p, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_102419030 != -1) {
            dispatch_once(&qword_102419030, &stru_102311E38);
          }
          LOWORD(v75) = 0;
          uint64_t v71 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLOdometerQuality::classifySamples(std::vector<double> &)", "%s\n", v71);
          if (v71 != (char *)&__p) {
            free(v71);
          }
        }
      }
      sub_101116854(v2);
LABEL_78:
      if (v77)
      {
        long long v78 = (double *)v77;
        operator delete(v77);
      }
    }
  }
}

void sub_101117470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011174D0(void *a1)
{
  uint64_t v2 = a1[5] - 1;
  unint64_t v3 = v2 + a1[4];
  uint64_t v4 = *(void *)(a1[1] + 8 * (v3 / 0xAA));
  unint64_t v5 = v3 % 0xAA;
  uint64_t v6 = *(void **)(v4 + 24 * v5);
  if (v6)
  {
    *(void *)(v4 + 24 * v5 + 8) = v6;
    operator delete(v6);
    uint64_t v2 = a1[5] - 1;
  }
  a1[5] = v2;

  return sub_10047399C(a1, 1);
}

int64x2_t sub_101117560(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    sub_101117814((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (void *)(v5 + 8 * (v4 / 0xAA));
  unint64_t v7 = *v6 + 24 * (v4 % 0xAA);
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v7;
  }
  if (v8 == *v6) {
    uint64_t v8 = *(v6 - 1) + 4080;
  }
  *(void *)(v8 - 24) = 0;
  *(void *)(v8 - 16) = 0;
  unint64_t v9 = (void *)(v8 - 24);
  unsigned char v9[2] = 0;
  sub_10010F834(v9, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  int64x2_t result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_101D1F270);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void sub_101117608(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void *sub_101117638(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10017C6FC(a1, a2);
    uint64_t v6 = (_DWORD *)a1[1];
    unint64_t v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1011176A0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011176BC(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    unint64_t v4 = a1 + 5;
    unint64_t v3 = (void **)a1[1];
  }
  else
  {
    unint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 / 0xAA];
    unint64_t v7 = (unint64_t)*v6;
    unint64_t v8 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    unint64_t v9 = (unint64_t)v2[(a1[5] + v5) / 0xAA] + 24 * ((a1[5] + v5) % 0xAA);
    if (v8 != v9)
    {
      do
      {
        double v10 = *(void **)v8;
        if (*(void *)v8)
        {
          *(void *)(v8 + 8) = v10;
          operator delete(v10);
          unint64_t v7 = (unint64_t)*v6;
        }
        v8 += 24;
        if (v8 - v7 == 4080)
        {
          unint64_t v11 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v11;
          unint64_t v8 = v11;
        }
      }
      while (v8 != v9);
      uint64_t v2 = (void **)a1[1];
      unint64_t v3 = (void **)a1[2];
    }
  }
  *unint64_t v4 = 0;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 85;
  }
  else
  {
    if (v13 != 2) {
      goto LABEL_18;
    }
    uint64_t v14 = 170;
  }
  a1[4] = v14;
LABEL_18:
  while (v2 != v3)
  {
    unint64_t v15 = *v2++;
    operator delete(v15);
  }

  return sub_1000D7EB4((uint64_t)a1);
}

void sub_101117814(void **a1)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = a1[2];
  unint64_t v4 = (v3 - v2) >> 3;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 170 * v4 - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0xAA)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    unint64_t v8 = a1[3];
    unint64_t v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      uint64_t v46 = a1 + 3;
      __p = sub_1000DA54C(v7, v11);
      uint64_t v43 = (char *)__p;
      char v44 = (char *)__p;
      unint64_t v45 = (char *)__p + 8 * v12;
      int v41 = operator new(0xFF0uLL);
      sub_1000DA434(&__p, &v41);
      unint64_t v13 = (char *)a1[1];
      uint64_t v14 = v44;
      if (v13 == a1[2])
      {
        int v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              uint64_t v24 = (char *)sub_1000DA54C((uint64_t)v46, v23);
              unint64_t v26 = v43;
              uint64_t v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                uint64_t v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                uint64_t v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)uint64_t v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              unint64_t v31 = __p;
              __p = v24;
              uint64_t v43 = &v24[8 * (v23 >> 2)];
              char v44 = v14;
              unint64_t v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                uint64_t v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              unint64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                uint64_t v14 = v43;
              }
              char v22 = &v14[-8 * (v19 >> 1)];
              uint64_t v14 = &v20[v21];
              uint64_t v43 = v22;
              char v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)uint64_t v14 = v32;
          uint64_t v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        int v33 = (char *)a1[1];
      }
      uint64_t v36 = *a1;
      uint64_t v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      uint64_t v43 = v33;
      char v38 = (char *)a1[3];
      char v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      char v44 = v13;
      unint64_t v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 85;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 170;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        char v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0xFF0uLL);
        sub_10017F0B4(a1, &__p);
        char v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0xFF0uLL);
      }
      sub_1002D02D8((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 85;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 170;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 170;
    __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    sub_1002D02D8((uint64_t)a1, &__p);
  }
}

void sub_101117AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_101117B30()
{
  qword_1024855F0 = 0;
  *(void *)algn_1024855F8 = 0;
  qword_102485600 = 0;
  v0 = operator new(0xF8uLL);
  qword_102485600 = (uint64_t)v0 + 248;
  v0[12] = xmmword_101DA76A0;
  v0[13] = unk_101DA76B0;
  v0[14] = xmmword_101DA76C0;
  *((void *)v0 + 30) = 0x4059000000000000;
  v0[8] = xmmword_101DA7660;
  v0[9] = unk_101DA7670;
  v0[10] = xmmword_101DA7680;
  v0[11] = unk_101DA7690;
  v0[4] = xmmword_101DA7620;
  v0[5] = unk_101DA7630;
  v0[6] = xmmword_101DA7640;
  v0[7] = unk_101DA7650;
  _OWORD *v0 = xmmword_101DA75E0;
  v0[1] = unk_101DA75F0;
  v0[2] = xmmword_101DA7600;
  v0[3] = unk_101DA7610;
  qword_1024855F0 = (uint64_t)v0;
  *(void *)algn_1024855F8 = (char *)v0 + 248;
  __cxa_atexit((void (*)(void *))sub_10039DF6C, &qword_1024855F0, (void *)&_mh_execute_header);
  qword_102485610 = 0;
  qword_102485618 = 0;
  qword_102485608 = 0;
  uint64_t v1 = operator new(0xF8uLL);
  qword_102485618 = (uint64_t)v1 + 248;
  v1[12] = xmmword_101DA7798;
  v1[13] = unk_101DA77A8;
  v1[14] = xmmword_101DA77B8;
  *((void *)v1 + 30) = 0x4059000000000000;
  v1[8] = xmmword_101DA7758;
  v1[9] = unk_101DA7768;
  v1[10] = xmmword_101DA7778;
  v1[11] = unk_101DA7788;
  v1[4] = xmmword_101DA7718;
  v1[5] = unk_101DA7728;
  v1[6] = xmmword_101DA7738;
  v1[7] = unk_101DA7748;
  *uint64_t v1 = xmmword_101DA76D8;
  v1[1] = unk_101DA76E8;
  v1[2] = xmmword_101DA76F8;
  v1[3] = unk_101DA7708;
  qword_102485608 = (uint64_t)v1;
  qword_102485610 = (uint64_t)v1 + 248;
  __cxa_atexit((void (*)(void *))sub_10039DF6C, &qword_102485608, (void *)&_mh_execute_header);
  qword_102485628 = 0;
  qword_102485630 = 0;
  qword_102485620 = 0;
  uint64_t v2 = operator new(0xF8uLL);
  qword_102485630 = (uint64_t)v2 + 248;
  v2[12] = xmmword_101DA7890;
  v2[13] = unk_101DA78A0;
  v2[14] = xmmword_101DA78B0;
  *((void *)v2 + 30) = 0x4059000000000000;
  v2[8] = xmmword_101DA7850;
  v2[9] = unk_101DA7860;
  v2[10] = xmmword_101DA7870;
  v2[11] = unk_101DA7880;
  v2[4] = xmmword_101DA7810;
  v2[5] = unk_101DA7820;
  v2[6] = xmmword_101DA7830;
  v2[7] = unk_101DA7840;
  _OWORD *v2 = xmmword_101DA77D0;
  v2[1] = unk_101DA77E0;
  v2[2] = xmmword_101DA77F0;
  v2[3] = unk_101DA7800;
  qword_102485620 = (uint64_t)v2;
  qword_102485628 = (uint64_t)v2 + 248;

  return __cxa_atexit((void (*)(void *))sub_10039DF6C, &qword_102485620, (void *)&_mh_execute_header);
}

void sub_101118908(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(std::__shared_weak_count **)(v1 + 528);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_101118944(id a1)
{
  qword_102419548 = (uint64_t)os_log_create("com.apple.locationd.Core", "Streaming");
}

double sub_101118974(uint64_t a1)
{
  *(void *)a1 = 0x400000000;
  *(void *)(a1 + 72) = 0x500000000;
  *(void *)&double result = 0x700000000;
  *(void *)(a1 + 160) = 0x700000000;
  *(_WORD *)(a1 + 448) = 257;
  return result;
}

uint64_t sub_1011189A4(uint64_t result)
{
  *(_DWORD *)double result = 0;
  *(_DWORD *)(result + 72) = 0;
  *(_DWORD *)(result + 160) = 0;
  *(_WORD *)(result + 448) = 257;
  return result;
}

void sub_1011189BC(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_1011189EC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024858C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024858C8))
  {
    word_1024858C0 = sub_101118AAC();
    __cxa_guard_release(&qword_1024858C8);
  }
  if (HIBYTE(word_1024858C0)) {
    return (_BYTE)word_1024858C0 != 0;
  }
  sub_100103240();
  if (sub_10016CCBC()) {
    return 1;
  }
  sub_100103240();

  return sub_1001B7C64();
}

void sub_101118A94(_Unwind_Exception *a1)
{
}

uint64_t sub_101118AAC()
{
  BOOL v8 = 0;
  sub_1000C7F88(buf);
  int v0 = sub_1000D2988(*(uint64_t *)&buf[0], "EnableAONSenseWiFiLeech", &v8);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v0)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_102311EB8);
    }
    uint64_t v1 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      if (v8) {
        uint64_t v2 = "true";
      }
      else {
        uint64_t v2 = "false";
      }
      LODWORD(buf[0]) = 136380675;
      *(void *)((char *)buf + 4) = v2;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#Warning defaults write EnableAONSenseWiFiLeech to %{private}s", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_102311EB8);
      }
      if (v8) {
        uint64_t v6 = "true";
      }
      else {
        uint64_t v6 = "false";
      }
      int v9 = 136380675;
      uint64_t v10 = v6;
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "std::optional<BOOL> isAonsensedScanRequestEnabledByDefaultsWrite()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    int v3 = 1;
    BOOL v4 = v8;
  }
  else
  {
    int v3 = 0;
    BOOL v4 = 0;
  }
  return v4 | (v3 << 8);
}

void sub_101118CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101118CF4(unsigned int a1)
{
  unsigned int v2 = sub_101413060()[2];
  unsigned int v3 = sub_101413060()[3];

  return sub_101118D3C(a1, v2, v3);
}

uint64_t sub_101118D3C(unsigned int a1, unsigned int a2, unsigned int a3)
{
  if (a1 == 1)
  {
    sub_1000C7F88(buf);
    LOBYTE(v10) = 0;
    if (sub_1000D2988(*(uint64_t *)&buf[0], "skipWifiManagerScans", (BOOL *)&v10)) {
      uint64_t v5 = (_BYTE)v10 != 0;
    }
    else {
      uint64_t v5 = a3;
    }
LABEL_9:
    if (*((void *)&buf[0] + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
    }
    return v5;
  }
  if (a1 == 2)
  {
    sub_1000C7F88(buf);
    LOBYTE(v10) = 0;
    if (sub_1000D2988(*(uint64_t *)&buf[0], "skipAonsensedScans", (BOOL *)&v10)) {
      uint64_t v5 = (_BYTE)v10 != 0;
    }
    else {
      uint64_t v5 = a2;
    }
    goto LABEL_9;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_102311EB8);
  }
  uint64_t v7 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf[0]) = 136446210;
    *(void *)((char *)buf + 4) = sub_100D54ED8(a1);
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "@Wsb, warning, unsupported WSB scan source %{public}s", (uint8_t *)buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_102311EB8);
    }
    int v10 = 136446210;
    unint64_t v11 = sub_100D54ED8(a1);
    int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL skipScanSource(const CLWifiService_Type::ScanSource, const BOOL, const BOOL)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  return 0;
}

void sub_101118FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101118FC4(unsigned int a1)
{
  unsigned int v2 = *sub_101413060();
  unsigned int v3 = sub_101413060()[1];

  return sub_101118D3C(a1, v2, v3);
}

uint64_t sub_10111900C(unsigned int a1)
{
  sub_100103240();
  int v2 = sub_100737DF0();
  unsigned int v3 = sub_101413060();
  if (v2)
  {
    int v4 = v3[6];
    uint64_t v5 = sub_101413060() + 7;
  }
  else
  {
    int v4 = v3[4];
    uint64_t v5 = sub_101413060() + 5;
  }
  unsigned int v6 = *v5;

  return sub_101118D3C(a1, v4 != 0, v6);
}

void sub_10111907C(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_1011190AC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    int v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)int v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_101119164(_Unwind_Exception *a1)
{
}

void sub_10111917C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    int v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    _WORD *v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_101119224(_Unwind_Exception *a1)
{
}

void sub_10111981C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_101119E88(id a1)
{
  qword_1024191E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

uint64_t *sub_101119EBC(void *a1, int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = a2[1];
  uint64_t v4 = *a2;
  unint64_t v5 = 0xC6A4A7935BD1E995
     * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v3) ^ ((0xC6A4A7935BD1E995 * v3) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v4) ^ ((0xC6A4A7935BD1E995 * v4) >> 47)) + 3864292196u))
     + 3864292196u;
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = 0xC6A4A7935BD1E995
       * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v3) ^ ((0xC6A4A7935BD1E995 * v3) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v4) ^ ((0xC6A4A7935BD1E995 * v4) >> 47)) + 3864292196u))
       + 3864292196u;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  BOOL v8 = *(uint64_t ***)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  for (double result = *v8; result; double result = (uint64_t *)*result)
  {
    unint64_t v10 = result[1];
    if (v5 == v10)
    {
      if (*((_DWORD *)result + 4) == v4 && *((_DWORD *)result + 5) == v3) {
        return result;
      }
    }
    else
    {
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(void *)&v2) {
          v10 %= *(void *)&v2;
        }
      }
      else
      {
        v10 &= *(void *)&v2 - 1;
      }
      if (v10 != v7) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_101119FC0()
{
  qword_1024858D8 = 0;
  qword_1024858E0 = 0;
  qword_1024858D0 = 0;
  qword_1024858D0 = (uint64_t)operator new(0x284uLL);
  uint64_t v0 = qword_1024858D0 + 644;
  qword_1024858E0 = qword_1024858D0 + 644;
  memcpy((void *)qword_1024858D0, &unk_101DA7900, 0x284uLL);
  qword_1024858D8 = v0;
  __cxa_atexit((void (*)(void *))sub_1003B1838, &qword_1024858D0, (void *)&_mh_execute_header);
  qword_1024858F0 = 0;
  qword_1024858F8 = 0;
  qword_1024858E8 = 0;
  qword_1024858E8 = (uint64_t)operator new(0x284uLL);
  uint64_t v1 = qword_1024858E8 + 644;
  qword_1024858F8 = qword_1024858E8 + 644;
  memcpy((void *)qword_1024858E8, &unk_101DA7B84, 0x284uLL);
  qword_1024858F0 = v1;
  qword_102485908 = 0;
  qword_102485910 = 0;
  qword_102485900 = 0;
  qword_102485900 = (uint64_t)operator new(0x284uLL);
  uint64_t v2 = qword_102485900 + 644;
  qword_102485910 = qword_102485900 + 644;
  memcpy((void *)qword_102485900, &unk_101DA7E08, 0x284uLL);
  qword_102485908 = v2;
  __cxa_atexit((void (*)(void *))sub_100ACE2BC, &qword_1024858E8, (void *)&_mh_execute_header);
  qword_102485920 = 0;
  qword_102485928 = 0;
  qword_102485918 = 0;
  qword_102485918 = (uint64_t)operator new(0x284uLL);
  uint64_t v3 = qword_102485918 + 644;
  qword_102485928 = qword_102485918 + 644;
  memcpy((void *)qword_102485918, &unk_101DA7B84, 0x284uLL);
  qword_102485920 = v3;
  qword_102485938 = 0;
  qword_102485940 = 0;
  qword_102485930 = 0;
  qword_102485930 = (uint64_t)operator new(0x284uLL);
  uint64_t v4 = qword_102485930 + 644;
  qword_102485940 = qword_102485930 + 644;
  memcpy((void *)qword_102485930, &unk_101DA7E08, 0x284uLL);
  qword_102485938 = v4;
  __cxa_atexit((void (*)(void *))sub_100ACE2BC, &qword_102485918, (void *)&_mh_execute_header);
  v6[0] = 0x7800000001;
  v6[1] = &qword_102485918;
  v6[2] = 0x7A00000001;
  v6[3] = &qword_102485918;
  v6[4] = 0x7900000001;
  v6[5] = &qword_102485918;
  v6[6] = 0x7B00000001;
  v6[7] = &qword_102485918;
  v6[8] = 0x7800000004;
  v6[9] = &qword_102485918;
  v6[10] = 0x7A00000004;
  v6[11] = &qword_102485918;
  v6[12] = 0x7900000004;
  v6[13] = &qword_102485918;
  v6[14] = 0x7B00000004;
  v6[15] = &qword_102485918;
  v6[16] = 0x7300000004;
  v6[17] = &qword_1024858E8;
  v6[18] = 0x7C00000004;
  v6[19] = &qword_1024858E8;
  v6[20] = 0x7300000000;
  v6[21] = &qword_1024858E8;
  v6[22] = 0x7C00000000;
  v6[23] = &qword_1024858E8;
  sub_100AD576C((uint64_t)qword_102485948, (int *)v6, 12);
  return __cxa_atexit((void (*)(void *))sub_100ACE300, qword_102485948, (void *)&_mh_execute_header);
}

void sub_10111A240(_Unwind_Exception *exception_object)
{
}

uint64_t sub_10111A274(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  v4[3] = 0;
  sub_1006B1830(a1 + 8, (uint64_t)v4, 10.0, 300.0);
  sub_1006A7C78(v4);
  *(void *)(a1 + 296) = 0xBFF0000000000000;
  *(void *)(a1 + 304) = 0x4050400000000000;
  *(CFAbsoluteTime *)(a1 + 312) = CFAbsoluteTimeGetCurrent();
  *(void *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 328) = xmmword_101DA808C;
  *(_OWORD *)(a1 + 344) = unk_101DA809C;
  *(_OWORD *)(a1 + 360) = xmmword_101DA80AC;
  *(_OWORD *)(a1 + 372) = *(long long *)((char *)&xmmword_101DA80AC + 12);
  sub_10111A364((void *)a1);
  return a1;
}

void sub_10111A340(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1006A7C78((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_10111A364(void *a1)
{
  v29[0] = off_102311F48;
  v29[1] = sub_10019D6AC;
  v29[3] = v29;
  sub_100ADB60C(a1 + 33, (uint64_t)v29);
  sub_1006A7C78(v29);
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)*a1 + 104))();
  v28[0] = off_102311FE8;
  v28[1] = sub_10019D468;
  v28[3] = v28;
  sub_10111EAAC((void *)(v2 + 416), (uint64_t)v28);
  sub_1006ABD00(v28);
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)*a1 + 120))();
  v27[0] = off_102312098;
  v27[1] = sub_10111CB10;
  v27[3] = v27;
  sub_100ADC4EC((void *)(v3 + 288), (uint64_t)v27);
  sub_1005E73C4(v27);
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)*a1 + 112))();
  v26[0] = off_102312138;
  v26[1] = sub_10111C92C;
  v26[3] = v26;
  sub_10111EF18((void *)(v4 + 160), (uint64_t)v26);
  sub_1006AB310(v26);
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)*a1 + 128))();
  v25[0] = off_1023121E8;
  v25[1] = sub_10111CD1C;
  v25[3] = v25;
  sub_10111F2C4((void *)(v5 + 272), (uint64_t)v25);
  sub_1006AA2C8(v25);
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)*a1 + 136))();
  v24[0] = off_102312298;
  v24[1] = sub_10019D234;
  v24[3] = v24;
  sub_100ADBD7C((void *)(v6 + 416), (uint64_t)v24);
  sub_1006A9C3C(v24);
  uint64_t v7 = (*(uint64_t (**)(void))(*(void *)*a1 + 144))();
  v23[0] = off_102312338;
  v23[1] = sub_10111CF20;
  v23[3] = v23;
  sub_10111F730((void *)(v7 + 168), (uint64_t)v23);
  sub_1006A94BC(v23);
  uint64_t v8 = (*(uint64_t (**)(void))(*(void *)*a1 + 152))();
  v22[0] = off_1023123E8;
  v22[1] = sub_10111D0FC;
  v22[3] = v22;
  sub_10111FADC((void *)(v8 + 136), (uint64_t)v22);
  sub_1006A92B4(v22);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)*a1 + 160))();
  v21[0] = off_102312498;
  v21[1] = sub_10111D2D8;
  v21[3] = v21;
  sub_100ADC8CC((void *)(v9 + 168), (uint64_t)v21);
  sub_1006A91BC(v21);
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)*a1 + 168))();
  v20[0] = off_102312538;
  v20[1] = sub_10111D4EC;
  v20[3] = v20;
  sub_10111FF54((void *)(v10 + 248), (uint64_t)v20);
  sub_1006A8C1C(v20);
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)*a1 + 176))();
  v19[0] = off_1023125E8;
  v19[1] = sub_10111D6D0;
  v19[3] = v19;
  sub_101120300((void *)(v11 + 112), (uint64_t)v19);
  sub_1006A8638(v19);
  uint64_t v12 = (*(uint64_t (**)(void))(*(void *)*a1 + 192))();
  v18[0] = off_102312688;
  v18[1] = sub_10111D8D4;
  v18[3] = v18;
  sub_1011206AC((void *)(v12 + 112), (uint64_t)v18);
  sub_1006A8448(v18);
  uint64_t v13 = (*(uint64_t (**)(void))(*(void *)*a1 + 200))();
  v17[0] = off_102312738;
  v17[1] = sub_10111DAA8;
  v17[3] = v17;
  sub_101120A58((void *)(v13 + 136), (uint64_t)v17);
  sub_1006A8174(v17);
  uint64_t v14 = (*(uint64_t (**)(void))(*(void *)*a1 + 184))();
  v16[0] = off_1023127E8;
  v16[1] = sub_10111DCFC;
  v16[3] = v16;
  sub_101120E04((void *)(v14 + 120), (uint64_t)v16);
  return sub_1006A8540(v16);
}

void sub_10111A9B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1006A8540(va);
  _Unwind_Resume(a1);
}

uint64_t sub_10111AB04(uint64_t a1, _OWORD *a2, double a3)
{
  uint64_t v3 = *(void *)(a1 + 312);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 280);
  if (*(void *)(a1 + 288) == v4) {
    return 0;
  }
  unint64_t v5 = *(void *)(a1 + 304);
  char v6 = v5 + v3;
  uint64_t v7 = (uint64_t *)(v4 + 8 * ((v5 + v3) >> 6));
  uint64_t v8 = *v7;
  uint64_t v9 = *v7 + ((unint64_t)(v6 & 0x3F) << 6);
  unint64_t v10 = v5 >> 6;
  uint64_t v11 = *(void *)(v4 + 8 * (v5 >> 6));
  uint64_t v12 = v5 & 0x3F;
  uint64_t v13 = v11 + (v12 << 6);
  if (v9 != v13)
  {
    while (1)
    {
      uint64_t v14 = v9;
      if (v9 == v8) {
        uint64_t v14 = *(v7 - 1) + 4096;
      }
      double v15 = *(double *)(v14 - 56);
      if (v15 <= a3 && v15 > a3 - *(double *)(a1 + 336)) {
        break;
      }
      if (v9 == v8)
      {
        uint64_t v16 = *--v7;
        uint64_t v8 = v16;
        uint64_t v9 = v16 + 4096;
      }
      v9 -= 64;
      if (v9 == v13)
      {
        uint64_t v9 = v13;
        break;
      }
    }
  }
  if (v9 == *(void *)(v4 + 8 * v10) + (v12 << 6)) {
    return 0;
  }
  if (v9 == *v7) {
    uint64_t v9 = *(v7 - 1) + 4096;
  }
  long long v17 = *(_OWORD *)(v9 - 64);
  long long v18 = *(_OWORD *)(v9 - 48);
  long long v19 = *(_OWORD *)(v9 - 16);
  a2[2] = *(_OWORD *)(v9 - 32);
  a2[3] = v19;
  *a2 = v17;
  a2[1] = v18;
  return 1;
}

uint64_t sub_10111ABE0(uint64_t result)
{
  if (*(double *)(result + 320) != -1.0)
  {
    uint64_t v1 = result;
    if (!*(unsigned char *)(result + 264))
    {
      double result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      if (result)
      {
        *(unsigned char *)(v1 + 264) = 1;
      }
      else if (!*(unsigned char *)(v1 + 264))
      {
        double v2 = 2.22507386e-308;
        goto LABEL_7;
      }
    }
    double v2 = *(double *)(v1 + 320) + 30.0;
LABEL_7:
    *(double *)(v1 + 328) = v2;
  }
  return result;
}

uint64_t sub_10111AC74(uint64_t a1, _OWORD *a2, double a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 32) == v4) {
    return 0;
  }
  unint64_t v5 = *(void *)(a1 + 48);
  char v6 = v5 + v3;
  uint64_t v7 = (uint64_t *)(v4 + 8 * ((v5 + v3) >> 6));
  uint64_t v8 = *v7;
  uint64_t v9 = *v7 + ((unint64_t)(v6 & 0x3F) << 6);
  unint64_t v10 = v5 >> 6;
  uint64_t v11 = *(void *)(v4 + 8 * (v5 >> 6));
  uint64_t v12 = v5 & 0x3F;
  uint64_t v13 = v11 + (v12 << 6);
  if (v9 != v13)
  {
    while (1)
    {
      uint64_t v14 = v9;
      if (v9 == v8) {
        uint64_t v14 = *(v7 - 1) + 4096;
      }
      double v15 = *(double *)(v14 - 24);
      if (v15 <= a3 && v15 > a3 - *(double *)(a1 + 80)) {
        break;
      }
      if (v9 == v8)
      {
        uint64_t v16 = *--v7;
        uint64_t v8 = v16;
        uint64_t v9 = v16 + 4096;
      }
      v9 -= 64;
      if (v9 == v13)
      {
        uint64_t v9 = v13;
        break;
      }
    }
  }
  if (v9 == *(void *)(v4 + 8 * v10) + (v12 << 6)) {
    return 0;
  }
  if (v9 == *v7) {
    uint64_t v9 = *(v7 - 1) + 4096;
  }
  long long v17 = *(_OWORD *)(v9 - 64);
  long long v18 = *(_OWORD *)(v9 - 48);
  long long v19 = *(_OWORD *)(v9 - 16);
  a2[2] = *(_OWORD *)(v9 - 32);
  a2[3] = v19;
  *a2 = v17;
  a2[1] = v18;
  return 1;
}

uint64_t sub_10111AD50(uint64_t result)
{
  if (*(double *)(result + 64) != -1.0)
  {
    uint64_t v1 = result;
    if (!*(unsigned char *)(result + 8))
    {
      double result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      if (result)
      {
        *(unsigned char *)(v1 + 8) = 1;
      }
      else if (!*(unsigned char *)(v1 + 8))
      {
        double v2 = 2.22507386e-308;
        goto LABEL_7;
      }
    }
    double v2 = *(double *)(v1 + 64) + 30.0;
LABEL_7:
    *(double *)(v1 + 72) = v2;
  }
  return result;
}

uint64_t sub_10111ADE4(uint64_t a1, _OWORD *a2, double a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 32) == v4) {
    return 0;
  }
  unint64_t v5 = *(void *)(a1 + 48);
  unint64_t v6 = v5 + v3;
  uint64_t v7 = (uint64_t *)(v4 + 8 * (v6 / 0x17));
  uint64_t v8 = *v7;
  uint64_t v9 = *v7 + 176 * (v6 % 0x17);
  unint64_t v10 = v5 / 0x17;
  uint64_t v11 = *(void *)(v4 + 8 * (v5 / 0x17));
  unint64_t v12 = v5 % 0x17;
  uint64_t v13 = v11 + 176 * v12;
  if (v9 != v13)
  {
    while (1)
    {
      uint64_t v14 = v9;
      if (v9 == v8) {
        uint64_t v14 = *(v7 - 1) + 4048;
      }
      double v15 = *(double *)(v14 - 168);
      if (v15 <= a3 && v15 > a3 - *(double *)(a1 + 80)) {
        break;
      }
      if (v9 == v8)
      {
        uint64_t v16 = *--v7;
        uint64_t v8 = v16;
        uint64_t v9 = v16 + 4048;
      }
      v9 -= 176;
      if (v9 == v13)
      {
        uint64_t v9 = v11 + 176 * v12;
        break;
      }
    }
  }
  if (v9 == *(void *)(v4 + 8 * v10) + 176 * v12) {
    return 0;
  }
  if (v9 == *v7) {
    uint64_t v9 = *(v7 - 1) + 4048;
  }
  long long v17 = *(_OWORD *)(v9 - 176);
  long long v18 = *(_OWORD *)(v9 - 144);
  a2[1] = *(_OWORD *)(v9 - 160);
  a2[2] = v18;
  *a2 = v17;
  long long v19 = *(_OWORD *)(v9 - 128);
  long long v20 = *(_OWORD *)(v9 - 112);
  long long v21 = *(_OWORD *)(v9 - 80);
  a2[5] = *(_OWORD *)(v9 - 96);
  a2[6] = v21;
  a2[3] = v19;
  a2[4] = v20;
  long long v22 = *(_OWORD *)(v9 - 64);
  long long v23 = *(_OWORD *)(v9 - 48);
  long long v24 = *(_OWORD *)(v9 - 16);
  a2[9] = *(_OWORD *)(v9 - 32);
  a2[10] = v24;
  a2[7] = v22;
  a2[8] = v23;
  return 1;
}

uint64_t sub_10111AF14(uint64_t result)
{
  if (*(double *)(result + 64) != -1.0)
  {
    uint64_t v1 = result;
    if (!*(unsigned char *)(result + 8))
    {
      double result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      if (result)
      {
        *(unsigned char *)(v1 + 8) = 1;
      }
      else if (!*(unsigned char *)(v1 + 8))
      {
        double v2 = 2.22507386e-308;
        goto LABEL_7;
      }
    }
    double v2 = *(double *)(v1 + 64) + 30.0;
LABEL_7:
    *(double *)(v1 + 72) = v2;
  }
  return result;
}

uint64_t sub_10111AFA8(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 32) == v4) {
    return 0;
  }
  unint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = v5 + v3;
  unint64_t v7 = (v5 + v3) / 0x38;
  uint64_t v8 = (uint64_t *)(v4 + 8 * v7);
  uint64_t v9 = *v8;
  uint64_t v10 = *v8 + 72 * (v6 - 56 * v7);
  unint64_t v11 = v5 / 0x38;
  uint64_t v12 = *(void *)(v4 + 8 * (v5 / 0x38));
  unint64_t v13 = v5 % 0x38;
  uint64_t v14 = v12 + 72 * v13;
  if (v10 != v14)
  {
    while (1)
    {
      uint64_t v15 = v10;
      if (v10 == v9) {
        uint64_t v15 = *(v8 - 1) + 4032;
      }
      double v16 = *(double *)(v15 - 72);
      if (v16 <= a3 && v16 > a3 - *(double *)(a1 + 80)) {
        break;
      }
      if (v10 == v9)
      {
        uint64_t v17 = *--v8;
        uint64_t v9 = v17;
        uint64_t v10 = v17 + 4032;
      }
      v10 -= 72;
      if (v10 == v14)
      {
        uint64_t v10 = v12 + 72 * v13;
        break;
      }
    }
  }
  if (v10 == *(void *)(v4 + 8 * v11) + 72 * v13) {
    return 0;
  }
  if (v10 == *v8) {
    uint64_t v10 = *(v8 - 1) + 4032;
  }
  *(_OWORD *)a2 = *(_OWORD *)(v10 - 72);
  long long v18 = *(_OWORD *)(v10 - 56);
  long long v19 = *(_OWORD *)(v10 - 40);
  long long v20 = *(_OWORD *)(v10 - 24);
  *(void *)(a2 + 64) = *(void *)(v10 - 8);
  *(_OWORD *)(a2 + 32) = v19;
  *(_OWORD *)(a2 + 48) = v20;
  *(_OWORD *)(a2 + 16) = v18;
  return 1;
}

uint64_t sub_10111B0BC(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 32) == v4) {
    return 0;
  }
  unint64_t v5 = *(void *)(a1 + 48);
  unint64_t v6 = v5 + v3;
  unint64_t v7 = (uint64_t *)(v4 + 8 * ((v5 + v3) / 0x66));
  uint64_t v8 = *v7;
  uint64_t v9 = *v7 + 40 * (v6 % 0x66);
  unint64_t v10 = v5 / 0x66;
  uint64_t v11 = *(void *)(v4 + 8 * (v5 / 0x66));
  unint64_t v12 = v5 % 0x66;
  uint64_t v13 = v11 + 40 * v12;
  if (v9 != v13)
  {
    while (1)
    {
      uint64_t v14 = v9;
      if (v9 == v8) {
        uint64_t v14 = *(v7 - 1) + 4080;
      }
      double v15 = *(double *)(v14 - 40);
      if (v15 <= a3 && v15 > a3 - *(double *)(a1 + 80)) {
        break;
      }
      if (v9 == v8)
      {
        uint64_t v16 = *--v7;
        uint64_t v8 = v16;
        uint64_t v9 = v16 + 4080;
      }
      v9 -= 40;
      if (v9 == v13)
      {
        uint64_t v9 = v11 + 40 * v12;
        break;
      }
    }
  }
  if (v9 == *(void *)(v4 + 8 * v10) + 40 * v12) {
    return 0;
  }
  if (v9 == *v7) {
    uint64_t v9 = *(v7 - 1) + 4080;
  }
  long long v17 = *(_OWORD *)(v9 - 40);
  long long v18 = *(_OWORD *)(v9 - 24);
  *(void *)(a2 + 32) = *(void *)(v9 - 8);
  *(_OWORD *)a2 = v17;
  *(_OWORD *)(a2 + 16) = v18;
  return 1;
}

uint64_t sub_10111B1C0(uint64_t result)
{
  if (*(double *)(result + 64) != -1.0)
  {
    uint64_t v1 = result;
    if (!*(unsigned char *)(result + 8))
    {
      double result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      if (result)
      {
        *(unsigned char *)(v1 + 8) = 1;
      }
      else if (!*(unsigned char *)(v1 + 8))
      {
        double v2 = 2.22507386e-308;
        goto LABEL_7;
      }
    }
    double v2 = *(double *)(v1 + 64) + 30.0;
LABEL_7:
    *(double *)(v1 + 72) = v2;
  }
  return result;
}

uint64_t sub_10111B254(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 32) == v4) {
    return 0;
  }
  unint64_t v5 = *(void *)(a1 + 48);
  unint64_t v6 = v5 + v3;
  unint64_t v7 = (uint64_t *)(v4 + 8 * (v6 / 0x1A));
  uint64_t v8 = *v7;
  uint64_t v9 = *v7 + 152 * (v6 % 0x1A);
  unint64_t v10 = v5 / 0x1A;
  uint64_t v11 = *(void *)(v4 + 8 * (v5 / 0x1A));
  unint64_t v12 = v5 % 0x1A;
  uint64_t v13 = v11 + 152 * v12;
  if (v9 != v13)
  {
    while (1)
    {
      uint64_t v14 = v9;
      if (v9 == v8) {
        uint64_t v14 = *(v7 - 1) + 3952;
      }
      double v15 = *(double *)(v14 - 112);
      if (v15 <= a3 && v15 > a3 - *(double *)(a1 + 80)) {
        break;
      }
      if (v9 == v8)
      {
        uint64_t v16 = *--v7;
        uint64_t v8 = v16;
        uint64_t v9 = v16 + 3952;
      }
      v9 -= 152;
      if (v9 == v13)
      {
        uint64_t v9 = v11 + 152 * v12;
        break;
      }
    }
  }
  if (v9 == *(void *)(v4 + 8 * v10) + 152 * v12) {
    return 0;
  }
  if (v9 == *v7) {
    uint64_t v9 = *(v7 - 1) + 3952;
  }
  long long v17 = *(_OWORD *)(v9 - 136);
  *(_OWORD *)a2 = *(_OWORD *)(v9 - 152);
  *(_OWORD *)(a2 + 16) = v17;
  long long v18 = *(_OWORD *)(v9 - 120);
  long long v19 = *(_OWORD *)(v9 - 104);
  long long v20 = *(_OWORD *)(v9 - 72);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(v9 - 88);
  *(_OWORD *)(a2 + 80) = v20;
  *(_OWORD *)(a2 + 32) = v18;
  *(_OWORD *)(a2 + 48) = v19;
  long long v21 = *(_OWORD *)(v9 - 56);
  long long v22 = *(_OWORD *)(v9 - 40);
  long long v23 = *(_OWORD *)(v9 - 24);
  *(void *)(a2 + 144) = *(void *)(v9 - 8);
  *(_OWORD *)(a2 + 112) = v22;
  *(_OWORD *)(a2 + 128) = v23;
  *(_OWORD *)(a2 + 96) = v21;
  return 1;
}

uint64_t sub_10111B384(uint64_t result)
{
  if (*(double *)(result + 64) != -1.0)
  {
    uint64_t v1 = result;
    if (!*(unsigned char *)(result + 8))
    {
      double result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      if (result)
      {
        *(unsigned char *)(v1 + 8) = 1;
      }
      else if (!*(unsigned char *)(v1 + 8))
      {
        double v2 = 2.22507386e-308;
        goto LABEL_7;
      }
    }
    double v2 = *(double *)(v1 + 64) + 30.0;
LABEL_7:
    *(double *)(v1 + 72) = v2;
  }
  return result;
}

uint64_t sub_10111B418(uint64_t result)
{
  if (*(double *)(result + 64) != -1.0)
  {
    uint64_t v1 = result;
    if (!*(unsigned char *)(result + 8))
    {
      double result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      if (result)
      {
        *(unsigned char *)(v1 + 8) = 1;
      }
      else if (!*(unsigned char *)(v1 + 8))
      {
        double v2 = 2.22507386e-308;
        goto LABEL_7;
      }
    }
    double v2 = *(double *)(v1 + 64) + 30.0;
LABEL_7:
    *(double *)(v1 + 72) = v2;
  }
  return result;
}

uint64_t sub_10111B4AC(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 32) == v4) {
    return 0;
  }
  unint64_t v5 = *(void *)(a1 + 48);
  unint64_t v6 = v5 + v3;
  unint64_t v7 = (uint64_t *)(v4 + 8 * ((v5 + v3) / 0x66));
  uint64_t v8 = *v7;
  uint64_t v9 = *v7 + 40 * (v6 % 0x66);
  unint64_t v10 = v5 / 0x66;
  uint64_t v11 = *(void *)(v4 + 8 * (v5 / 0x66));
  unint64_t v12 = v5 % 0x66;
  uint64_t v13 = v11 + 40 * v12;
  if (v9 != v13)
  {
    while (1)
    {
      uint64_t v14 = v9;
      if (v9 == v8) {
        uint64_t v14 = *(v7 - 1) + 4080;
      }
      double v15 = *(double *)(v14 - 40);
      if (v15 <= a3 && v15 > a3 - *(double *)(a1 + 80)) {
        break;
      }
      if (v9 == v8)
      {
        uint64_t v16 = *--v7;
        uint64_t v8 = v16;
        uint64_t v9 = v16 + 4080;
      }
      v9 -= 40;
      if (v9 == v13)
      {
        uint64_t v9 = v11 + 40 * v12;
        break;
      }
    }
  }
  if (v9 == *(void *)(v4 + 8 * v10) + 40 * v12) {
    return 0;
  }
  if (v9 == *v7) {
    uint64_t v9 = *(v7 - 1) + 4080;
  }
  long long v17 = *(_OWORD *)(v9 - 40);
  long long v18 = *(_OWORD *)(v9 - 24);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(v9 - 8);
  *(_OWORD *)a2 = v17;
  *(_OWORD *)(a2 + 16) = v18;
  return 1;
}

uint64_t sub_10111B5B0(uint64_t result)
{
  if (*(double *)(result + 64) != -1.0)
  {
    uint64_t v1 = result;
    if (!*(unsigned char *)(result + 8))
    {
      double result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      if (result)
      {
        *(unsigned char *)(v1 + 8) = 1;
      }
      else if (!*(unsigned char *)(v1 + 8))
      {
        double v2 = 2.22507386e-308;
        goto LABEL_7;
      }
    }
    double v2 = *(double *)(v1 + 64) + 30.0;
LABEL_7:
    *(double *)(v1 + 72) = v2;
  }
  return result;
}

void sub_10111B644(void *a1, uint64_t *a2, uint64_t a3)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_102311F18);
  }
  unint64_t v6 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v7 = a2;
    }
    else {
      unint64_t v7 = (uint64_t *)*a2;
    }
    *(_DWORD *)buf = 136315138;
    char v39 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "logLatestTime for %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102311F18);
    }
    uint64_t v37 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictorInputs::logLatestTimes(const std::string &, const std::vector<Type> &) const", "%s\n", v37);
    if (v37 != (char *)buf) {
      free(v37);
    }
  }
  uint64_t v8 = *(_DWORD **)a3;
  uint64_t v9 = *(_DWORD **)(a3 + 8);
  if (*(_DWORD **)a3 != v9)
  {
    do
    {
      switch(*v8)
      {
        case 0:
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_102311F18);
          }
          unint64_t v10 = qword_1024191C8;
          if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
          {
            uint64_t v11 = (uint64_t *)a1[14];
            *(_DWORD *)buf = 134217984;
            char v39 = v11;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Activity,lastTime,%f", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024191C0 != -1) {
              dispatch_once(&qword_1024191C0, &stru_102311F18);
            }
            goto LABEL_116;
          }
          break;
        case 1:
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_102311F18);
          }
          unint64_t v12 = qword_1024191C8;
          if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
          {
            uint64_t v13 = *(uint64_t **)((*(uint64_t (**)(void))(*(void *)*a1 + 104))() + 360);
            *(_DWORD *)buf = 134217984;
            char v39 = v13;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Elevation,lastTime,%f", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024191C0 != -1) {
              dispatch_once(&qword_1024191C0, &stru_102311F18);
            }
            (*(uint64_t (**)(void))(*(void *)*a1 + 104))();
            goto LABEL_116;
          }
          break;
        case 2:
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_102311F18);
          }
          uint64_t v14 = qword_1024191C8;
          if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
          {
            double v15 = *(uint64_t **)((*(uint64_t (**)(void))(*(void *)*a1 + 120))() + 96);
            *(_DWORD *)buf = 134217984;
            char v39 = v15;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "GPS,lastTime,%f", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024191C0 != -1) {
              dispatch_once(&qword_1024191C0, &stru_102311F18);
            }
            (*(uint64_t (**)(void))(*(void *)*a1 + 120))();
            goto LABEL_116;
          }
          break;
        case 3:
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_102311F18);
          }
          uint64_t v16 = qword_1024191C8;
          if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
          {
            long long v17 = *(uint64_t **)((*(uint64_t (**)(void))(*(void *)*a1 + 112))() + 136);
            *(_DWORD *)buf = 134217984;
            char v39 = v17;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "HR,lastTime,%f", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024191C0 != -1) {
              dispatch_once(&qword_1024191C0, &stru_102311F18);
            }
            (*(uint64_t (**)(void))(*(void *)*a1 + 112))();
            goto LABEL_116;
          }
          break;
        case 4:
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_102311F18);
          }
          long long v18 = qword_1024191C8;
          if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
          {
            long long v19 = *(uint64_t **)((*(uint64_t (**)(void))(*(void *)*a1 + 128))() + 104);
            *(_DWORD *)buf = 134217984;
            char v39 = v19;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Steps,lastTime,%f", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024191C0 != -1) {
              dispatch_once(&qword_1024191C0, &stru_102311F18);
            }
            (*(uint64_t (**)(void))(*(void *)*a1 + 128))();
            goto LABEL_116;
          }
          break;
        case 5:
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_102311F18);
          }
          long long v20 = qword_1024191C8;
          if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
          {
            long long v21 = *(uint64_t **)((*(uint64_t (**)(void))(*(void *)*a1 + 144))() + 96);
            *(_DWORD *)buf = 134217984;
            char v39 = v21;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Activity2,lastTime,%f", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024191C0 != -1) {
              dispatch_once(&qword_1024191C0, &stru_102311F18);
            }
            (*(uint64_t (**)(void))(*(void *)*a1 + 144))();
            goto LABEL_116;
          }
          break;
        case 6:
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_102311F18);
          }
          long long v22 = qword_1024191C8;
          if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
          {
            long long v23 = *(uint64_t **)((*(uint64_t (**)(void))(*(void *)*a1 + 152))() + 96);
            *(_DWORD *)buf = 134217984;
            char v39 = v23;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "Activity2Smooth,lastTime,%f", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024191C0 != -1) {
              dispatch_once(&qword_1024191C0, &stru_102311F18);
            }
            (*(uint64_t (**)(void))(*(void *)*a1 + 152))();
            goto LABEL_116;
          }
          break;
        case 7:
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_102311F18);
          }
          long long v24 = qword_1024191C8;
          if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
          {
            uint64_t v25 = *(uint64_t **)((*(uint64_t (**)(void))(*(void *)*a1 + 160))() + 96);
            *(_DWORD *)buf = 134217984;
            char v39 = v25;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Turns,lastTime,%f", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024191C0 != -1) {
              dispatch_once(&qword_1024191C0, &stru_102311F18);
            }
            (*(uint64_t (**)(void))(*(void *)*a1 + 160))();
            goto LABEL_116;
          }
          break;
        case 8:
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_102311F18);
          }
          unint64_t v26 = qword_1024191C8;
          if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
          {
            uint64_t v27 = *(uint64_t **)((*(uint64_t (**)(void))(*(void *)*a1 + 136))() + 96);
            *(_DWORD *)buf = 134217984;
            char v39 = v27;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "ExtendedSteps,lastTime,%f", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024191C0 != -1) {
              dispatch_once(&qword_1024191C0, &stru_102311F18);
            }
            (*(uint64_t (**)(void))(*(void *)*a1 + 136))();
            goto LABEL_116;
          }
          break;
        case 9:
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_102311F18);
          }
          uint64_t v28 = qword_1024191C8;
          if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
          {
            uint64_t v29 = *(uint64_t **)((*(uint64_t (**)(void))(*(void *)*a1 + 168))() + 136);
            *(_DWORD *)buf = 134217984;
            char v39 = v29;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "Swim,lastTime,%f", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024191C0 != -1) {
              dispatch_once(&qword_1024191C0, &stru_102311F18);
            }
            (*(uint64_t (**)(void))(*(void *)*a1 + 168))();
            goto LABEL_116;
          }
          break;
        case 0xA:
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_102311F18);
          }
          uint64_t v30 = qword_1024191C8;
          if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
          {
            unint64_t v31 = *(uint64_t **)((*(uint64_t (**)(void))(*(void *)*a1 + 176))() + 96);
            *(_DWORD *)buf = 134217984;
            char v39 = v31;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "WatchPressure,lastTime,%f", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024191C0 != -1) {
              dispatch_once(&qword_1024191C0, &stru_102311F18);
            }
            (*(uint64_t (**)(void))(*(void *)*a1 + 176))();
            goto LABEL_116;
          }
          break;
        case 0xB:
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_102311F18);
          }
          uint64_t v32 = qword_1024191C8;
          if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
          {
            int v33 = *(uint64_t **)((*(uint64_t (**)(void))(*(void *)*a1 + 192))() + 96);
            *(_DWORD *)buf = 134217984;
            char v39 = v33;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "CyclingState,lastTime,%f", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024191C0 != -1) {
              dispatch_once(&qword_1024191C0, &stru_102311F18);
            }
            (*(uint64_t (**)(void))(*(void *)*a1 + 192))();
            goto LABEL_116;
          }
          break;
        case 0xC:
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_102311F18);
          }
          char v34 = qword_1024191C8;
          if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
          {
            uint64_t v35 = *(uint64_t **)((*(uint64_t (**)(void))(*(void *)*a1 + 200))() + 96);
            *(_DWORD *)buf = 134217984;
            char v39 = v35;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "Tier1CyclingFeatures,lastTime,%f", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024191C0 != -1) {
              dispatch_once(&qword_1024191C0, &stru_102311F18);
            }
            (*(uint64_t (**)(void))(*(void *)*a1 + 200))();
LABEL_116:
            uint64_t v36 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictorInputs::logLatestTimes(const std::string &, const std::vector<Type> &) const", "%s\n", v36);
            if (v36 != (char *)buf) {
              free(v36);
            }
          }
          break;
        default:
          break;
      }
      ++v8;
    }
    while (v8 != v9);
  }
}

void sub_10111C92C(void *a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_102311F18);
  }
  double v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
    *(_DWORD *)buf = 134218496;
    uint64_t v8 = v3;
    __int16 v9 = 2048;
    uint64_t v10 = v4;
    __int16 v11 = 2048;
    uint64_t v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "HeartRate,%f,hr,%f,conf,%f", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102311F18);
    }
    unint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLWorkoutPredictorInputs::logHeartRate(const CLWorkoutPredictorHeartRate &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

void sub_10111CB10(uint64_t *a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_102311F18);
  }
  double v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *a1;
    uint64_t v5 = a1[4];
    uint64_t v4 = a1[5];
    uint64_t v6 = a1[7];
    *(_DWORD *)buf = 134219008;
    uint64_t v9 = v3;
    __int16 v10 = 2048;
    uint64_t v11 = v4;
    __int16 v12 = 2048;
    uint64_t v13 = v5;
    __int16 v14 = 2048;
    uint64_t v15 = v6;
    __int16 v16 = 2048;
    uint64_t v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Odometer,%f,rawSpeed,%f,speed,%f,speedAccuracy,%f,startTime,%f", buf, 0x34u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102311F18);
    }
    unint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLWorkoutPredictorInputs::logGPS(const CLWorkoutPredictorGPS &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
}

void sub_10111CD1C(uint64_t a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_102311F18);
  }
  double v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 8);
    uint64_t v4 = *(void *)(a1 + 72);
    uint64_t v5 = *(void *)(a1 + 80);
    int v6 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)buf = 134218752;
    uint64_t v9 = v3;
    __int16 v10 = 2048;
    uint64_t v11 = v4;
    __int16 v12 = 2048;
    uint64_t v13 = v5;
    __int16 v14 = 1024;
    int v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Steps,%f,pace,%f,cadence,%f,count,%d", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102311F18);
    }
    unint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLWorkoutPredictorInputs::logStep(const CLWorkoutPredictorStep &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
}

void sub_10111CF20(uint64_t *a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_102311F18);
  }
  double v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *(_DWORD *)buf = 134218496;
    uint64_t v7 = v3;
    __int16 v8 = 2048;
    uint64_t v9 = v4;
    __int16 v10 = 2048;
    uint64_t v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Activity2,%f,result,%lu,startTime,%f", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102311F18);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLWorkoutPredictorInputs::logActivityTier2(const CLWorkoutPredictorActivityTier2 &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

void sub_10111D0FC(uint64_t *a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_102311F18);
  }
  double v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *(_DWORD *)buf = 134218496;
    uint64_t v7 = v3;
    __int16 v8 = 2048;
    uint64_t v9 = v4;
    __int16 v10 = 2048;
    uint64_t v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Tier2Smooth,%f,result,%lu,startTime,%f", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102311F18);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLWorkoutPredictorInputs::logActivityTier2Smoothed(const CLWorkoutPredictorActivityTier2Smoothed &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

void sub_10111D2D8(float *a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_102311F18);
  }
  double v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)a1;
    double v4 = a1[2];
    double v5 = a1[6];
    double v6 = a1[7];
    *(_DWORD *)buf = 134218752;
    uint64_t v9 = v3;
    __int16 v10 = 2048;
    double v11 = v4;
    __int16 v12 = 2048;
    double v13 = v5;
    __int16 v14 = 2048;
    double v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Turn,%f,%f,%f,%f", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102311F18);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLWorkoutPredictorInputs::logTurn(const CLWorkoutPredictorTurn &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
}

void sub_10111D4EC(uint64_t a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_102311F18);
  }
  double v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    int v5 = *(_DWORD *)(a1 + 100);
    int v4 = *(_DWORD *)(a1 + 104);
    *(_DWORD *)buf = 134218496;
    uint64_t v8 = v3;
    __int16 v9 = 1024;
    int v10 = v4;
    __int16 v11 = 1024;
    int v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Swim,startTime,%f,strokes,%d,style,%d\n", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102311F18);
    }
    double v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLWorkoutPredictorInputs::logSwim(const CLWorkoutPredictorSwim &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

void sub_10111D6D0(uint64_t *a1)
{
  __int16 v2 = *((_WORD *)a1 + 4);
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_102311F18);
  }
  unsigned int v3 = v2 & 0x1000;
  int v4 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *a1;
    double v6 = *((float *)a1 + 3);
    *(_DWORD *)buf = 134218496;
    uint64_t v9 = v5;
    __int16 v10 = 2048;
    double v11 = v6;
    __int16 v12 = 1024;
    unsigned int v13 = v3 >> 12;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "WatchPressure,startTime,%f,averagePressure,%f,failureState,%d", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102311F18);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLWorkoutPredictorInputs::logWatchPressure(const CLWorkoutPredictorWatchPressure &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
}

void sub_10111D8D4(uint64_t *a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_102311F18);
  }
  __int16 v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *a1;
    int v4 = *((_DWORD *)a1 + 2);
    *(_DWORD *)buf = 134218240;
    uint64_t v7 = v3;
    __int16 v8 = 1024;
    int v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CyclingState,%.3f,state,%d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102311F18);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLWorkoutPredictorInputs::logCyclingState(const CLWorkoutPredictorCyclingState &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

void sub_10111DAA8(float *a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_102311F18);
  }
  __int16 v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)a1;
    int v4 = *((unsigned __int8 *)a1 + 8);
    double v5 = a1[3];
    double v6 = a1[4];
    double v7 = a1[5];
    double v8 = a1[8];
    *(_DWORD *)buf = 134219264;
    uint64_t v11 = v3;
    __int16 v12 = 1024;
    int v13 = v4;
    __int16 v14 = 2048;
    double v15 = v5;
    __int16 v16 = 2048;
    double v17 = v6;
    __int16 v18 = 2048;
    double v19 = v7;
    __int16 v20 = 2048;
    double v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Tier1CyclingFeatures,%.3f,isArmConstrained,%d,accelXPowerSum,%f,grav90th_100Hz,%f,cyclingProbability,%f,pedEnergyVertical,%f", buf, 0x3Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102311F18);
    }
    int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLWorkoutPredictorInputs::logTier1CyclingFeatures(const CLWorkoutPredictorTier1CyclingFeatures &)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
}

void sub_10111DCFC(uint64_t a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_102311F18);
  }
  __int16 v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 8);
    *(_DWORD *)buf = 134217984;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "ExerciseMinute,%.3f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102311F18);
    }
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLWorkoutPredictorInputs::logExerciseMinute(const CLWorkoutPredictorExerciseMinute &)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
}

void sub_10111DEB0(void *a1, long long *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)*a1 + 144))(*a1);

  sub_10111DF0C(v3, a2);
}

void sub_10111DF0C(uint64_t a1, long long *a2)
{
  long long v3 = a2[3];
  long long v20 = a2[2];
  long long v21 = v3;
  uint64_t v22 = *((void *)a2 + 8);
  long long v4 = a2[1];
  long long v18 = *a2;
  long long v19 = v4;
  uint64_t v5 = *(void *)(a1 + 192);
  if (v5) {
    (*(void (**)(uint64_t, long long *))(*(void *)v5 + 48))(v5, &v18);
  }
  uint64_t v6 = *(void *)(a1 + 56);
  if (v6)
  {
    unint64_t v7 = v6 + *(void *)(a1 + 48) - 1;
    double v8 = *(void ***)(a1 + 24);
    double v9 = *((double *)v8[v7 / 0x38] + 9 * (v7 % 0x38));
    if (v9 > *(double *)&v18)
    {
      uint64_t v10 = *(void *)(a1 + 32);
      *(void *)(a1 + 56) = 0;
      unint64_t v11 = v10 - (void)v8;
      if (v11 >= 0x11)
      {
        do
        {
          operator delete(*v8);
          uint64_t v12 = *(void *)(a1 + 32);
          double v8 = (void **)(*(void *)(a1 + 24) + 8);
          *(void *)(a1 + 24) = v8;
          unint64_t v11 = v12 - (void)v8;
        }
        while (v11 > 0x10);
      }
      if (v11 >> 3 == 1)
      {
        uint64_t v13 = 28;
      }
      else
      {
        if (v11 >> 3 != 2)
        {
LABEL_12:
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_102312878);
          }
          __int16 v14 = qword_102418FD8;
          if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134218240;
            uint64_t v28 = v18;
            __int16 v29 = 2048;
            double v30 = v9;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "time rollback on add, newItemTime, %f, lastItemTime, %f", buf, 0x16u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102418FD0 != -1) {
              dispatch_once(&qword_102418FD0, &stru_102312878);
            }
            int v23 = 134218240;
            uint64_t v24 = v18;
            __int16 v25 = 2048;
            double v26 = v9;
            double v17 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLSourceBuffer<CLWorkoutClassifier_Type::WorkoutClassifierResult>::add(const T &) [T = CLWorkoutClassifier_Type::WorkoutClassifierResult]", "%s\n", v17);
            if (v17 != (char *)buf) {
              free(v17);
            }
          }
          goto LABEL_17;
        }
        uint64_t v13 = 56;
      }
      *(void *)(a1 + 48) = v13;
      goto LABEL_12;
    }
  }
LABEL_17:
  sub_1005076CC((void *)(a1 + 16), (uint64_t)&v18);
  long long v15 = v21;
  *(_OWORD *)(a1 + 128) = v20;
  *(_OWORD *)(a1 + 144) = v15;
  *(void *)(a1 + 160) = v22;
  long long v16 = v19;
  *(_OWORD *)(a1 + 96) = v18;
  *(_OWORD *)(a1 + 112) = v16;
}

void sub_10111E1FC(void *a1, long long *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)*a1 + 152))(*a1);

  sub_10111E258(v3, a2);
}

void sub_10111E258(uint64_t a1, long long *a2)
{
  long long v3 = a2[1];
  long long v16 = *a2;
  long long v17 = v3;
  uint64_t v18 = *((void *)a2 + 4);
  uint64_t v4 = *(void *)(a1 + 160);
  if (v4) {
    (*(void (**)(uint64_t, long long *))(*(void *)v4 + 48))(v4, &v16);
  }
  uint64_t v5 = *(void *)(a1 + 56);
  if (v5)
  {
    unint64_t v6 = v5 + *(void *)(a1 + 48) - 1;
    unint64_t v7 = *(void ***)(a1 + 24);
    double v8 = *((double *)v7[v6 / 0x66] + 5 * (v6 % 0x66));
    if (v8 > *(double *)&v16)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      *(void *)(a1 + 56) = 0;
      unint64_t v10 = v9 - (void)v7;
      if (v10 >= 0x11)
      {
        do
        {
          operator delete(*v7);
          uint64_t v11 = *(void *)(a1 + 32);
          unint64_t v7 = (void **)(*(void *)(a1 + 24) + 8);
          *(void *)(a1 + 24) = v7;
          unint64_t v10 = v11 - (void)v7;
        }
        while (v10 > 0x10);
      }
      if (v10 >> 3 == 1)
      {
        uint64_t v12 = 51;
      }
      else
      {
        if (v10 >> 3 != 2)
        {
LABEL_12:
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_102312878);
          }
          uint64_t v13 = qword_102418FD8;
          if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134218240;
            uint64_t v24 = v16;
            __int16 v25 = 2048;
            double v26 = v8;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "time rollback on add, newItemTime, %f, lastItemTime, %f", buf, 0x16u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102418FD0 != -1) {
              dispatch_once(&qword_102418FD0, &stru_102312878);
            }
            int v19 = 134218240;
            uint64_t v20 = v16;
            __int16 v21 = 2048;
            double v22 = v8;
            long long v15 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLSourceBuffer<CLWorkoutClassifier_Type::SmoothedTier2ClassifierResult>::add(const T &) [T = CLWorkoutClassifier_Type::SmoothedTier2ClassifierResult]", "%s\n", v15);
            if (v15 != (char *)buf) {
              free(v15);
            }
          }
          goto LABEL_17;
        }
        uint64_t v12 = 102;
      }
      *(void *)(a1 + 48) = v12;
      goto LABEL_12;
    }
  }
LABEL_17:
  sub_1011211E0((void *)(a1 + 16), (uint64_t)&v16);
  long long v14 = v17;
  *(_OWORD *)(a1 + 96) = v16;
  *(_OWORD *)(a1 + 112) = v14;
  *(void *)(a1 + 128) = v18;
}

void sub_10111E538(void *a1, __n128 *a2)
{
  long long v3 = (__n128 *)(*(uint64_t (**)(void))(*(void *)*a1 + 192))(*a1);

  sub_10111E594(v3, a2);
}

void sub_10111E594(__n128 *a1, __n128 *a2)
{
  __n128 v14 = *a2;
  unint64_t v3 = a1[8].n128_u64[1];
  if (v3) {
    (*(void (**)(unint64_t, __n128 *))(*(void *)v3 + 48))(v3, &v14);
  }
  unint64_t v4 = a1[3].n128_u64[1];
  if (v4)
  {
    unint64_t v5 = v4 + a1[3].n128_u64[0] - 1;
    unint64_t v6 = (void **)a1[1].n128_u64[1];
    double v7 = (*(double **)((char *)v6 + ((v5 >> 5) & 0x7FFFFFFFFFFFFF8)))[2 * v5];
    if (v7 > v14.n128_f64[0])
    {
      unint64_t v8 = a1[2].n128_u64[0];
      a1[3].n128_u64[1] = 0;
      unint64_t v9 = v8 - (void)v6;
      if (v9 >= 0x11)
      {
        do
        {
          operator delete(*v6);
          unint64_t v10 = a1[2].n128_u64[0];
          unint64_t v6 = (void **)(a1[1].n128_u64[1] + 8);
          a1[1].n128_u64[1] = (unint64_t)v6;
          unint64_t v9 = v10 - (void)v6;
        }
        while (v9 > 0x10);
      }
      if (v9 >> 3 == 1)
      {
        uint64_t v11 = 128;
      }
      else
      {
        if (v9 >> 3 != 2)
        {
LABEL_12:
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_102312878);
          }
          uint64_t v12 = qword_102418FD8;
          if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134218240;
            unint64_t v20 = v14.n128_u64[0];
            __int16 v21 = 2048;
            double v22 = v7;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "time rollback on add, newItemTime, %f, lastItemTime, %f", buf, 0x16u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102418FD0 != -1) {
              dispatch_once(&qword_102418FD0, &stru_102312878);
            }
            int v15 = 134218240;
            unint64_t v16 = v14.n128_u64[0];
            __int16 v17 = 2048;
            double v18 = v7;
            uint64_t v13 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLSourceBuffer<CLCyclingStateDetector_Type::CyclingResult>::add(const T &) [T = CLCyclingStateDetector_Type::CyclingResult]", "%s\n", v13);
            if (v13 != (char *)buf) {
              free(v13);
            }
          }
          goto LABEL_17;
        }
        uint64_t v11 = 256;
      }
      a1[3].n128_u64[0] = v11;
      goto LABEL_12;
    }
  }
LABEL_17:
  sub_1011215B0((__n128 *)a1[1].n128_u64, &v14);
  a1[6] = v14;
}

void sub_10111E84C(void *a1, long long *a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)*a1 + 120))(*a1);

  sub_1006A3368(v3, a2);
}

float sub_10111E8A8(void *a1, double a2, double a3)
{
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)*a1 + 120))(*a1);
  float v6 = 0.0;
  if (a3 > 0.0)
  {
    uint64_t v7 = v5;
    int v8 = 1;
    double v9 = 0.0;
    double v10 = 0.0;
    do
    {
      memset(v13, 0, sizeof(v13));
      if (sub_1000BE0C4(v7, v13, a2 - v9) && (double v11 = *(double *)v13, v10 != *(double *)v13))
      {
        if (*(double *)v13 <= a2 - a3) {
          return v6;
        }
        float v6 = fmax(*((double *)v13 + 1), 0.0) + v6;
      }
      else
      {
        double v11 = v10;
      }
      double v9 = (double)v8++;
      double v10 = v11;
    }
    while (v9 < a3);
  }
  return v6;
}

void sub_10111E9BC(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void *sub_10111E9EC(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_102311F48;
  result[1] = v3;
  return result;
}

uint64_t sub_10111EA34(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102311F48;
  a2[1] = v2;
  return result;
}

uint64_t sub_10111EA60(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_102311FB8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10111EAA0()
{
  return &off_102311FB8;
}

void *sub_10111EAAC(void *a1, uint64_t a2)
{
  sub_1006AE954((uint64_t)v4, a2);
  sub_10111EB20(v4, a1);
  sub_1006ABD00(v4);
  return a1;
}

void *sub_10111EB20(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10111ED80(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void *sub_10111ED8C(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_102311FE8;
  result[1] = v3;
  return result;
}

uint64_t sub_10111EDD4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102311FE8;
  a2[1] = v2;
  return result;
}

uint64_t sub_10111EE00(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_102312068)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10111EE40()
{
  return &off_102312068;
}

void *sub_10111EE4C(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_102312098;
  result[1] = v3;
  return result;
}

uint64_t sub_10111EE94(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102312098;
  a2[1] = v2;
  return result;
}

uint64_t sub_10111EEC0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_10111EECC(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_102312108)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10111EF0C()
{
  return &off_102312108;
}

void *sub_10111EF18(void *a1, uint64_t a2)
{
  sub_1006AEC6C((uint64_t)v4, a2);
  sub_10111EF8C(v4, a1);
  sub_1006AB310(v4);
  return a1;
}

void *sub_10111EF8C(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10111F1EC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void *sub_10111F1F8(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_102312138;
  result[1] = v3;
  return result;
}

uint64_t sub_10111F240(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102312138;
  a2[1] = v2;
  return result;
}

uint64_t sub_10111F26C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_10111F278(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_1023121B8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10111F2B8()
{
  return &off_1023121B8;
}

void *sub_10111F2C4(void *a1, uint64_t a2)
{
  sub_1006AF118((uint64_t)v4, a2);
  sub_10111F338(v4, a1);
  sub_1006AA2C8(v4);
  return a1;
}

void *sub_10111F338(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10111F598(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void *sub_10111F5A4(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_1023121E8;
  result[1] = v3;
  return result;
}

uint64_t sub_10111F5EC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023121E8;
  a2[1] = v2;
  return result;
}

uint64_t sub_10111F618(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_10111F624(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_102312268)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10111F664()
{
  return &off_102312268;
}

void *sub_10111F670(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_102312298;
  result[1] = v3;
  return result;
}

uint64_t sub_10111F6B8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102312298;
  a2[1] = v2;
  return result;
}

uint64_t sub_10111F6E4(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_102312308)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10111F724()
{
  return &off_102312308;
}

void *sub_10111F730(void *a1, uint64_t a2)
{
  sub_1006AF77C((uint64_t)v4, a2);
  sub_10111F7A4(v4, a1);
  sub_1006A94BC(v4);
  return a1;
}

void *sub_10111F7A4(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10111FA04(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void *sub_10111FA10(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_102312338;
  result[1] = v3;
  return result;
}

uint64_t sub_10111FA58(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102312338;
  a2[1] = v2;
  return result;
}

uint64_t sub_10111FA84(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_10111FA90(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_1023123B8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10111FAD0()
{
  return &off_1023123B8;
}

void *sub_10111FADC(void *a1, uint64_t a2)
{
  sub_1006AF8A8((uint64_t)v4, a2);
  sub_10111FB50(v4, a1);
  sub_1006A92B4(v4);
  return a1;
}

void *sub_10111FB50(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10111FDB0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void *sub_10111FDBC(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_1023123E8;
  result[1] = v3;
  return result;
}

uint64_t sub_10111FE04(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023123E8;
  a2[1] = v2;
  return result;
}

uint64_t sub_10111FE30(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_10111FE3C(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_102312468)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10111FE7C()
{
  return &off_102312468;
}

void *sub_10111FE88(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_102312498;
  result[1] = v3;
  return result;
}

uint64_t sub_10111FED0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102312498;
  a2[1] = v2;
  return result;
}

uint64_t sub_10111FEFC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_10111FF08(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_102312508)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10111FF48()
{
  return &off_102312508;
}

void *sub_10111FF54(void *a1, uint64_t a2)
{
  sub_1006AFDB8((uint64_t)v4, a2);
  sub_10111FFC8(v4, a1);
  sub_1006A8C1C(v4);
  return a1;
}

void *sub_10111FFC8(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_101120228(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void *sub_101120234(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_102312538;
  result[1] = v3;
  return result;
}

uint64_t sub_10112027C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102312538;
  a2[1] = v2;
  return result;
}

uint64_t sub_1011202A8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_1011202B4(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_1023125B8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1011202F4()
{
  return &off_1023125B8;
}

void *sub_101120300(void *a1, uint64_t a2)
{
  sub_1006AFEE0((uint64_t)v4, a2);
  sub_101120374(v4, a1);
  sub_1006A8638(v4);
  return a1;
}

void *sub_101120374(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1011205D4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void *sub_1011205E0(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_1023125E8;
  result[1] = v3;
  return result;
}

uint64_t sub_101120628(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023125E8;
  a2[1] = v2;
  return result;
}

uint64_t sub_101120654(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_101120660(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_102312658)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1011206A0()
{
  return &off_102312658;
}

void *sub_1011206AC(void *a1, uint64_t a2)
{
  sub_1006B01EC((uint64_t)v4, a2);
  sub_101120720(v4, a1);
  sub_1006A8448(v4);
  return a1;
}

void *sub_101120720(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_101120980(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void *sub_10112098C(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_102312688;
  result[1] = v3;
  return result;
}

uint64_t sub_1011209D4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102312688;
  a2[1] = v2;
  return result;
}

uint64_t sub_101120A00(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_101120A0C(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_102312708)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_101120A4C()
{
  return &off_102312708;
}

void *sub_101120A58(void *a1, uint64_t a2)
{
  sub_1006B03D8((uint64_t)v4, a2);
  sub_101120ACC(v4, a1);
  sub_1006A8174(v4);
  return a1;
}

void *sub_101120ACC(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_101120D2C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void *sub_101120D38(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_102312738;
  result[1] = v3;
  return result;
}

uint64_t sub_101120D80(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102312738;
  a2[1] = v2;
  return result;
}

uint64_t sub_101120DAC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_101120DB8(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_1023127B8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_101120DF8()
{
  return &off_1023127B8;
}

void *sub_101120E04(void *a1, uint64_t a2)
{
  sub_1006B0004((uint64_t)v4, a2);
  sub_101120E78(v4, a1);
  sub_1006A8540(v4);
  return a1;
}

void *sub_101120E78(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1011210D8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void *sub_1011210E4(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_1023127E8;
  result[1] = v3;
  return result;
}

uint64_t sub_10112112C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023127E8;
  a2[1] = v2;
  return result;
}

uint64_t sub_101121158(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_101121164(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_102312858)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1011211A4()
{
  return &off_102312858;
}

void sub_1011211B0(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

__n128 sub_1011211E0(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 102 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_101121298(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x66)) + 40 * (v7 % 0x66);
  __n128 result = *(__n128 *)a2;
  long long v10 = *(_OWORD *)(a2 + 16);
  *(void *)(v8 + 32) = *(void *)(a2 + 32);
  *(__n128 *)unint64_t v8 = result;
  *(_OWORD *)(v8 + 16) = v10;
  ++a1[5];
  return result;
}

void sub_101121298(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x66;
  unint64_t v4 = v2 - 102;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    double v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      char v34 = (char *)sub_1000DA54C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      char v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      double v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    char v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    double v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      char v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  double v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000DA434(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  __int16 v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_101121564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 sub_1011215B0(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10112163C(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

void sub_10112163C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    double v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      char v34 = (char *)sub_1000DA54C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      char v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      double v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    char v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    double v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      char v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  double v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000DA434(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  __int16 v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_101121908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 sub_101121954@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    int v19 = a2;
    uint64_t v18 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
  }
  else
  {
    uint64_t v13 = a3 - 1;
    uint64_t v12 = *a3;
    BOOL v14 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_101121A24(v12, v14, v15, v16, &v21);
      uint64_t v16 = (char *)v22.n128_u64[1];
      uint64_t v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      uint64_t v17 = *v13--;
      uint64_t v12 = v17;
      BOOL v14 = v17 + 4096;
    }
    uint64_t v18 = *a1 + 4096;
    int v19 = a2;
  }
  sub_101121A24(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_101121A24@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    double v9 = a1;
  }
  else
  {
    double v9 = a2;
    uint64_t v10 = *a3;
    uint64_t v11 = a2;
    while (1)
    {
      uint64_t v12 = (uint64_t)&a4[-v10];
      if ((v11 - a1) >> 6 >= v12 >> 6) {
        uint64_t v13 = v12 >> 6;
      }
      else {
        uint64_t v13 = (v11 - a1) >> 6;
      }
      v11 -= 64 * v13;
      a4 -= 64 * v13;
      if (v13) {
        __n128 result = memmove(a4, v11, v13 << 6);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v15 = *--v6;
      uint64_t v10 = v15;
      a4 = (char *)(v15 + 4096);
    }
    if ((char *)(*v6 + 4096) == a4)
    {
      uint64_t v16 = (char *)v6[1];
      ++v6;
      a4 = v16;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

void *sub_101121AE0(void *result, double *a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6)
{
  if (a2 != (double *)a4)
  {
    while (*(double *)&a5 - a2[5] <= *(double *)(a6 + 88))
    {
      a2 += 8;
      if ((double *)((char *)a2 - *result) == (double *)4096)
      {
        uint64_t v6 = (double *)result[1];
        ++result;
        a2 = v6;
      }
      if (a2 == (double *)a4) {
        return result;
      }
    }
  }
  if (a2 != (double *)a4)
  {
    unint64_t v7 = a2;
    unint64_t v8 = result;
    while (1)
    {
      v7 += 8;
      if ((double *)((char *)v7 - *v8) == (double *)4096)
      {
        double v9 = (double *)v8[1];
        ++v8;
        unint64_t v7 = v9;
      }
      if (v7 == (double *)a4) {
        break;
      }
      if (*(double *)&a5 - v7[5] <= *(double *)(a6 + 88))
      {
        long long v10 = *(_OWORD *)v7;
        long long v11 = *((_OWORD *)v7 + 1);
        long long v12 = *((_OWORD *)v7 + 3);
        *((_OWORD *)a2 + 2) = *((_OWORD *)v7 + 2);
        *((_OWORD *)a2 + 3) = v12;
        *(_OWORD *)a2 = v10;
        *((_OWORD *)a2 + 1) = v11;
        a2 += 8;
        if ((double *)((char *)a2 - *result) == (double *)4096)
        {
          uint64_t v13 = (double *)result[1];
          ++result;
          a2 = v13;
        }
      }
    }
  }
  return result;
}

void *sub_101121B98(void *result, double *a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6)
{
  if (a2 != (double *)a4)
  {
    while (*(double *)&a5 - a2[1] <= *(double *)(a6 + 88))
    {
      a2 += 22;
      if ((double *)((char *)a2 - *result) == (double *)4048)
      {
        uint64_t v6 = (double *)result[1];
        ++result;
        a2 = v6;
      }
      if (a2 == (double *)a4) {
        return result;
      }
    }
  }
  if (a2 != (double *)a4)
  {
    unint64_t v7 = a2;
    unint64_t v8 = result;
    while (1)
    {
      v7 += 22;
      if ((double *)((char *)v7 - *v8) == (double *)4048)
      {
        double v9 = (double *)v8[1];
        ++v8;
        unint64_t v7 = v9;
      }
      if (v7 == (double *)a4) {
        break;
      }
      if (*(double *)&a5 - v7[1] <= *(double *)(a6 + 88))
      {
        long long v10 = *(_OWORD *)v7;
        long long v11 = *((_OWORD *)v7 + 2);
        *((_OWORD *)a2 + 1) = *((_OWORD *)v7 + 1);
        *((_OWORD *)a2 + 2) = v11;
        *(_OWORD *)a2 = v10;
        long long v12 = *((_OWORD *)v7 + 3);
        long long v13 = *((_OWORD *)v7 + 4);
        long long v14 = *((_OWORD *)v7 + 6);
        *((_OWORD *)a2 + 5) = *((_OWORD *)v7 + 5);
        *((_OWORD *)a2 + 6) = v14;
        *((_OWORD *)a2 + 3) = v12;
        *((_OWORD *)a2 + 4) = v13;
        long long v15 = *((_OWORD *)v7 + 7);
        long long v16 = *((_OWORD *)v7 + 8);
        long long v17 = *((_OWORD *)v7 + 10);
        *((_OWORD *)a2 + 9) = *((_OWORD *)v7 + 9);
        *((_OWORD *)a2 + 10) = v17;
        *((_OWORD *)a2 + 7) = v15;
        *((_OWORD *)a2 + 8) = v16;
        a2 += 22;
        if ((double *)((char *)a2 - *result) == (double *)4048)
        {
          uint64_t v18 = (double *)result[1];
          ++result;
          a2 = v18;
        }
      }
    }
  }
  return result;
}

unint64_t sub_101121C74(void *a1, void *a2, char *a3, void *a4, char *a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 56 * (a4 - a2)
  }
       - 0x71C71C71C71C71C7 * ((uint64_t)&a5[-*a4] >> 3)
       + 0x71C71C71C71C71C7 * ((uint64_t)&a3[-*a2] >> 3);
  unint64_t v7 = a1[4];
  uint64_t v8 = a1[1];
  double v9 = (char **)(v8 + 8 * (v7 / 0x38));
  if (a1[2] == v8) {
    long long v10 = 0;
  }
  else {
    long long v10 = &(*v9)[72 * (v7 % 0x38)];
  }
  if (a3 == v10) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = 56 * ((char **)a2 - v9)
  }
        - 0x71C71C71C71C71C7 * ((uint64_t)&a3[-*a2] >> 3)
        + 0x71C71C71C71C71C7 * ((v10 - *v9) >> 3);
  v24[0].n128_u64[0] = v8 + 8 * (v7 / 0x38);
  v24[0].n128_u64[1] = (unint64_t)v10;
  sub_1005AACC4(v24, v11);
  if (v6 >= 1)
  {
    __n128 v12 = v24[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_1005AACC4(v24, v6);
      sub_101121F20(v9, v10, (char **)v12.n128_u64[0], (char *)v12.n128_u64[1], v24[0].n128_u64[0], (char *)v24[0].n128_u64[1], v24);
      uint64_t v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
      while ((sub_100507AAC((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      sub_1005AACC4(v24, v6);
      __n128 v13 = v24[0];
      unint64_t v14 = a1[4] + a1[5];
      uint64_t v15 = a1[1];
      long long v16 = (unsigned char **)(v15 + 8 * (v14 / 0x38));
      if (a1[2] == v15) {
        long long v17 = 0;
      }
      else {
        long long v17 = &(*v16)[72 * (v14 % 0x38)];
      }
      v24[0] = v12;
      sub_1011220DC(v13.n128_u64[0], (unsigned char *)v13.n128_u64[1], v16, v17, (uint64_t)v24);
      a1[5] -= v6;
      while ((sub_1005AAD78(a1, 1) & 1) != 0)
        ;
    }
  }
  unint64_t v19 = a1[4];
  uint64_t v20 = a1[1];
  uint64_t v21 = (void *)(v20 + 8 * (v19 / 0x38));
  if (a1[2] == v20) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = *v21 + 72 * (v19 % 0x38);
  }
  v24[0].n128_u64[0] = (unint64_t)v21;
  v24[0].n128_u64[1] = v22;
  sub_1005AACC4(v24, v11);
  return v24[0].n128_u64[0];
}

__n128 sub_101121F20@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    unint64_t v19 = a2;
    uint64_t v18 = a4;
    uint64_t v15 = a5;
    long long v16 = a6;
  }
  else
  {
    __n128 v13 = a3 - 1;
    __n128 v12 = *a3;
    unint64_t v14 = a4;
    uint64_t v15 = a5;
    long long v16 = a6;
    while (1)
    {
      sub_101121FF0(v12, v14, v15, v16, &v21);
      long long v16 = (char *)v22.n128_u64[1];
      uint64_t v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      long long v17 = *v13--;
      __n128 v12 = v17;
      unint64_t v14 = v17 + 4032;
    }
    uint64_t v18 = *a1 + 4032;
    unint64_t v19 = a2;
  }
  sub_101121FF0(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_101121FF0@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    double v9 = a1;
  }
  else
  {
    double v9 = a2;
    uint64_t v10 = *a3;
    unint64_t v11 = a2;
    while (1)
    {
      int64_t v12 = 0x8E38E38E38E38E39 * ((uint64_t)&a4[-v10] >> 3);
      if ((uint64_t)(0x8E38E38E38E38E39 * ((v11 - a1) >> 3)) < v12) {
        int64_t v12 = 0x8E38E38E38E38E39 * ((v11 - a1) >> 3);
      }
      v11 -= 72 * v12;
      a4 -= 72 * v12;
      if (v12) {
        __n128 result = memmove(a4, v11, 72 * v12);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v10 = v14;
      a4 = (char *)(v14 + 4032);
    }
    if ((char *)(*v6 + 4032) == a4)
    {
      uint64_t v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_1011220DC(void *a1, unsigned char *a2, unsigned char **a3, unsigned char *a4, uint64_t a5)
{
  unint64_t v7 = *(void ***)a5;
  uint64_t v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (i = (unsigned char *)(*a1 + 4032); ; i = v12 + 4032)
    {
      sub_101122170(a2, v8, i, v7, &v14);
      uint64_t v8 = (char *)*((void *)&v15 + 1);
      unint64_t v7 = (void **)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v8;
      if (v10 == a3) {
        break;
      }
      int64_t v12 = (unsigned char *)*v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_101122170(a2, v8, a4, v7, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_101122170@<X0>(unsigned char *__src@<X1>, char *__dst@<X4>, unsigned char *a3@<X2>, void **a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = a4;
  unint64_t v7 = __src;
  if (__src == a3)
  {
    double v9 = __src;
  }
  else
  {
    double v9 = a3;
    uint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      int64_t v11 = 0x8E38E38E38E38E39 * ((v10 - __dst + 4032) >> 3);
      unint64_t v12 = (uint64_t)(0x8E38E38E38E38E39 * ((v9 - v7) >> 3)) >= v11 ? v11 : 0x8E38E38E38E38E39 * ((v9 - v7) >> 3);
      if (v12) {
        double result = memmove(__dst, v7, 72 * v12);
      }
      v7 += 72 * v12;
      if (v7 == v9) {
        break;
      }
      uint64_t v14 = (char *)*v6++;
      uint64_t v10 = v14;
      std::string __dst = v14;
    }
    __dst += 72 * v12;
    if ((char *)*(v6 - 1) + 4032 == __dst) {
      std::string __dst = (char *)*v6;
    }
    else {
      --v6;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

void *sub_101122264(void *result, long long *a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6)
{
  if (a2 != a4)
  {
    while (*(double *)&a5 - *(double *)a2 <= *(double *)(a6 + 88))
    {
      a2 = (long long *)((char *)a2 + 40);
      if ((long long *)((char *)a2 - *result) == (long long *)4080)
      {
        uint64_t v6 = (long long *)result[1];
        ++result;
        a2 = v6;
      }
      if (a2 == a4) {
        return result;
      }
    }
  }
  if (a2 != a4)
  {
    unint64_t v7 = a2;
    uint64_t v8 = result;
    while (1)
    {
      unint64_t v7 = (long long *)((char *)v7 + 40);
      if ((long long *)((char *)v7 - *v8) == (long long *)4080)
      {
        double v9 = (long long *)v8[1];
        ++v8;
        unint64_t v7 = v9;
      }
      if (v7 == a4) {
        break;
      }
      if (*(double *)&a5 - *(double *)v7 <= *(double *)(a6 + 88))
      {
        long long v10 = *v7;
        long long v11 = v7[1];
        *((void *)a2 + 4) = *((void *)v7 + 4);
        *a2 = v10;
        a2[1] = v11;
        a2 = (long long *)((char *)a2 + 40);
        if ((long long *)((char *)a2 - *result) == (long long *)4080)
        {
          unint64_t v12 = (long long *)result[1];
          ++result;
          a2 = v12;
        }
      }
    }
  }
  return result;
}

__n128 sub_101122320@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    unint64_t v19 = a2;
    uint64_t v18 = a4;
    long long v15 = a5;
    long long v16 = a6;
  }
  else
  {
    __n128 v13 = a3 - 1;
    unint64_t v12 = *a3;
    uint64_t v14 = a4;
    long long v15 = a5;
    long long v16 = a6;
    while (1)
    {
      sub_1011223F0(v12, v14, v15, v16, &v21);
      long long v16 = (char *)v22.n128_u64[1];
      long long v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      long long v17 = *v13--;
      unint64_t v12 = v17;
      uint64_t v14 = v17 + 4080;
    }
    uint64_t v18 = *a1 + 4080;
    unint64_t v19 = a2;
  }
  sub_1011223F0(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_1011223F0@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    double v9 = a1;
  }
  else
  {
    double v9 = a2;
    uint64_t v10 = *a3;
    long long v11 = a2;
    while (1)
    {
      int64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&a4[-v10] >> 3);
      if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v11 - a1) >> 3)) < v12) {
        int64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - a1) >> 3);
      }
      v11 -= 40 * v12;
      a4 -= 40 * v12;
      if (v12) {
        __n128 result = memmove(a4, v11, 40 * v12);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v10 = v14;
      a4 = (char *)(v14 + 4080);
    }
    if ((char *)(*v6 + 4080) == a4)
    {
      long long v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

void *sub_1011224D4(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 != a4)
  {
    while (*(double *)&a5 - *(double *)(a2 + 40) <= *(double *)(a6 + 88))
    {
      a2 += 152;
      if (a2 - *result == 3952)
      {
        uint64_t v6 = result[1];
        ++result;
        a2 = v6;
      }
      if (a2 == a4) {
        return result;
      }
    }
  }
  if (a2 != a4)
  {
    uint64_t v7 = a2;
    uint64_t v8 = result;
    while (1)
    {
      v7 += 152;
      if (v7 - *v8 == 3952)
      {
        uint64_t v9 = v8[1];
        ++v8;
        uint64_t v7 = v9;
      }
      if (v7 == a4) {
        break;
      }
      if (*(double *)&a5 - *(double *)(v7 + 40) <= *(double *)(a6 + 88))
      {
        long long v10 = *(_OWORD *)(v7 + 16);
        *(_OWORD *)a2 = *(_OWORD *)v7;
        *(_OWORD *)(a2 + 16) = v10;
        long long v11 = *(_OWORD *)(v7 + 32);
        long long v12 = *(_OWORD *)(v7 + 48);
        long long v13 = *(_OWORD *)(v7 + 80);
        *(_OWORD *)(a2 + 64) = *(_OWORD *)(v7 + 64);
        *(_OWORD *)(a2 + 80) = v13;
        *(_OWORD *)(a2 + 32) = v11;
        *(_OWORD *)(a2 + 48) = v12;
        long long v14 = *(_OWORD *)(v7 + 96);
        long long v15 = *(_OWORD *)(v7 + 112);
        long long v16 = *(_OWORD *)(v7 + 128);
        *(void *)(a2 + 144) = *(void *)(v7 + 144);
        *(_OWORD *)(a2 + 112) = v15;
        *(_OWORD *)(a2 + 128) = v16;
        *(_OWORD *)(a2 + 96) = v14;
        a2 += 152;
        if (a2 - *result == 3952)
        {
          uint64_t v17 = result[1];
          ++result;
          a2 = v17;
        }
      }
    }
  }
  return result;
}

void *sub_1011225B0(void *result, long long *a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6)
{
  if (a2 != a4)
  {
    while (*(double *)&a5 - *((double *)a2 + 1) <= *(double *)(a6 + 88))
    {
      a2 = (long long *)((char *)a2 + 24);
      if ((long long *)((char *)a2 - *result) == (long long *)4080)
      {
        uint64_t v6 = (long long *)result[1];
        ++result;
        a2 = v6;
      }
      if (a2 == a4) {
        return result;
      }
    }
  }
  if (a2 != a4)
  {
    uint64_t v7 = a2;
    uint64_t v8 = result;
    while (1)
    {
      uint64_t v7 = (long long *)((char *)v7 + 24);
      if ((long long *)((char *)v7 - *v8) == (long long *)4080)
      {
        uint64_t v9 = (long long *)v8[1];
        ++v8;
        uint64_t v7 = v9;
      }
      if (v7 == a4) {
        break;
      }
      if (*(double *)&a5 - *((double *)v7 + 1) <= *(double *)(a6 + 88))
      {
        long long v10 = *v7;
        *((void *)a2 + 2) = *((void *)v7 + 2);
        *a2 = v10;
        a2 = (long long *)((char *)a2 + 24);
        if ((long long *)((char *)a2 - *result) == (long long *)4080)
        {
          long long v11 = (long long *)result[1];
          ++result;
          a2 = v11;
        }
      }
    }
  }
  return result;
}

__n128 sub_101122668@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    unint64_t v19 = a2;
    uint64_t v18 = a4;
    long long v15 = a5;
    long long v16 = a6;
  }
  else
  {
    long long v13 = a3 - 1;
    long long v12 = *a3;
    long long v14 = a4;
    long long v15 = a5;
    long long v16 = a6;
    while (1)
    {
      sub_101122738(v12, v14, v15, v16, &v21);
      long long v16 = (char *)v22.n128_u64[1];
      long long v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      uint64_t v17 = *v13--;
      long long v12 = v17;
      long long v14 = v17 + 4080;
    }
    uint64_t v18 = *a1 + 4080;
    unint64_t v19 = a2;
  }
  sub_101122738(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_101122738@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = *a3;
    long long v11 = a2;
    while (1)
    {
      int64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&a4[-v10] >> 3);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - a1) >> 3)) < v12) {
        int64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v11 - a1) >> 3);
      }
      v11 -= 24 * v12;
      a4 -= 24 * v12;
      if (v12) {
        __n128 result = memmove(a4, v11, 24 * v12);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v10 = v14;
      a4 = (char *)(v14 + 4080);
    }
    if ((char *)(*v6 + 4080) == a4)
    {
      long long v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_10112281C(void *a1, unsigned char *a2, unsigned char **a3, unsigned char *a4, uint64_t a5)
{
  uint64_t v7 = *(void ***)a5;
  uint64_t v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (i = (unsigned char *)(*a1 + 4080); ; i = v12 + 4080)
    {
      sub_1011228B0(a2, v8, i, v7, &v14);
      uint64_t v8 = (char *)*((void *)&v15 + 1);
      uint64_t v7 = (void **)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v8;
      if (v10 == a3) {
        break;
      }
      int64_t v12 = (unsigned char *)*v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_1011228B0(a2, v8, a4, v7, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_1011228B0@<X0>(unsigned char *__src@<X1>, char *__dst@<X4>, unsigned char *a3@<X2>, void **a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = a4;
  uint64_t v7 = __src;
  if (__src == a3)
  {
    uint64_t v9 = __src;
  }
  else
  {
    uint64_t v9 = a3;
    uint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      int64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - __dst + 4080) >> 3);
      unint64_t v12 = (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v9 - v7) >> 3)) >= v11 ? v11 : 0xAAAAAAAAAAAAAAABLL * ((v9 - v7) >> 3);
      if (v12) {
        double result = memmove(__dst, v7, 24 * v12);
      }
      v7 += 24 * v12;
      if (v7 == v9) {
        break;
      }
      uint64_t v14 = (char *)*v6++;
      uint64_t v10 = v14;
      std::string __dst = v14;
    }
    __dst += 24 * v12;
    if ((char *)*(v6 - 1) + 4080 == __dst) {
      std::string __dst = (char *)*v6;
    }
    else {
      --v6;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

void *sub_10112299C(void *result, long long *a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6)
{
  if (a2 != a4)
  {
    while (*(double *)&a5 - *(double *)a2 <= *(double *)(a6 + 88))
    {
      a2 = (long long *)((char *)a2 + 40);
      if ((long long *)((char *)a2 - *result) == (long long *)4080)
      {
        uint64_t v6 = (long long *)result[1];
        ++result;
        a2 = v6;
      }
      if (a2 == a4) {
        return result;
      }
    }
  }
  if (a2 != a4)
  {
    uint64_t v7 = a2;
    uint64_t v8 = result;
    while (1)
    {
      uint64_t v7 = (long long *)((char *)v7 + 40);
      if ((long long *)((char *)v7 - *v8) == (long long *)4080)
      {
        uint64_t v9 = (long long *)v8[1];
        ++v8;
        uint64_t v7 = v9;
      }
      if (v7 == a4) {
        break;
      }
      if (*(double *)&a5 - *(double *)v7 <= *(double *)(a6 + 88))
      {
        long long v10 = *v7;
        long long v11 = v7[1];
        *((_DWORD *)a2 + 8) = *((_DWORD *)v7 + 8);
        *a2 = v10;
        a2[1] = v11;
        a2 = (long long *)((char *)a2 + 40);
        if ((long long *)((char *)a2 - *result) == (long long *)4080)
        {
          unint64_t v12 = (long long *)result[1];
          ++result;
          a2 = v12;
        }
      }
    }
  }
  return result;
}

void *sub_101122A58@<X0>(uint64_t a1@<X8>)
{
  v3[0] = off_102312928;
  v3[1] = sub_101122B5C;
  v3[2] = 0;
  v3[3] = v3;
  sub_100134750(__p, "kCLConnectionMessageHeading");
  sub_100BECE64((uint64_t)v6, (uint64_t)v3);
  sub_101123D54(a1, (unsigned __int8 *)__p, 1);
  sub_100BED400(v6);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return sub_100BED400(v3);
}

void sub_101122B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_101122B5C(uint64_t a1, int a2, uint64_t a3)
{
  id v6 = objc_alloc_init((Class)NSAutoreleasePool);
  unint64_t v21 = 0xBFF0000000000000;
  sub_1000A699C(a3, "kCLConnectionMessageHeadingFilterKey", &v21);
  if (*(unsigned char *)(a1 + 56))
  {
    if (a2)
    {
      *(void *)(a1 + 64) = v21;
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1023128F8);
      }
      uint64_t v7 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v8 = *(void *)(a1 + 24);
        uint64_t v9 = *(void *)(a1 + 64);
        buf[0] = 138412546;
        *(void *)&buf[1] = v8;
        __int16 v29 = 2048;
        uint64_t v30 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "client '%@' subscribing to compass filter %.2f", (uint8_t *)buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1023128F8);
        }
        uint64_t v16 = *(void *)(a1 + 24);
        uint64_t v17 = *(void *)(a1 + 64);
        int v24 = 138412546;
        uint64_t v25 = v16;
        __int16 v26 = 2048;
        uint64_t v27 = v17;
        uint64_t v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLHeadingSubscription::handleRequestHeading(BOOL, const CLNameValuePair &)", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
      }
      if (!*(void *)(a1 + 168))
      {
        CFStringRef v22 = @"ClientName";
        id v23 = [*(id *)(a1 + 24) description];
        +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];
        [*(id *)(a1 + 8) silo];
        operator new();
      }
      if (!*(void *)(a1 + 48)) {
        operator new();
      }
    }
    else
    {
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1023128F8);
      }
      long long v10 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v11 = *(void *)(a1 + 24);
        buf[0] = 138412290;
        *(void *)&buf[1] = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "client '%@' unsubscribing from compass", (uint8_t *)buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1023128F8);
        }
        uint64_t v19 = *(void *)(a1 + 24);
        int v24 = 138412290;
        uint64_t v25 = v19;
        uint64_t v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLHeadingSubscription::handleRequestHeading(BOOL, const CLNameValuePair &)", "%s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
      }
      if (*(void *)(a1 + 168))
      {
        uint64_t v12 = sub_100A68CE8();
        sub_1009D26C4(v12, 0, *(void *)(a1 + 168));
        uint64_t v13 = *(void *)(a1 + 168);
        *(void *)(a1 + 168) = 0;
        if (v13) {
          (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
        }
      }
      uint64_t v14 = *(void *)(a1 + 48);
      if (v14)
      {
        sub_100F34650(v14);
        sub_100F35774(*(void *)(a1 + 48));
        uint64_t v15 = *(void *)(a1 + 48);
        *(void *)(a1 + 48) = 0;
        if (v15) {
          (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
        }
      }
    }
  }
  *(_OWORD *)(a1 + 104) = xmmword_101D218F0;
  *(_OWORD *)(a1 + 120) = unk_101D21900;
  *(_OWORD *)(a1 + 136) = xmmword_101D21910;
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 72) = xmmword_101D218D0;
  *(_OWORD *)(a1 + 88) = unk_101D218E0;
  sub_10009C834(a1);
}

void sub_1011230F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  _Unwind_Resume(a1);
}

uint64_t sub_101123188(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1011231C4(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v6 = sub_100054C14(a1, a2, a3, a4, a5);
  *(void *)uint64_t v6 = off_1023128A8;
  *(void *)(v6 + 48) = 0;
  *(unsigned char *)(v6 + 56) = 0;
  *(void *)(v6 + 64) = 0xBFF0000000000000;
  *(_OWORD *)(v6 + 104) = xmmword_101D218F0;
  *(_OWORD *)(v6 + 120) = unk_101D21900;
  *(_OWORD *)(v6 + 136) = xmmword_101D21910;
  *(_OWORD *)(v6 + 72) = xmmword_101D218D0;
  *(_OWORD *)(v6 + 88) = unk_101D218E0;
  *(void *)(v6 + 152) = 0;
  *(void *)(v6 + 160) = 0x3F947AE147AE147BLL;
  *(void *)(v6 + 168) = 0;
  if ((sub_100A33500() & 1) == 0) {
    *(void *)(a1 + 160) = 0x3F9999999999999ALL;
  }
  *(unsigned char *)(a1 + 56) = sub_10074157C() & 1;
  return a1;
}

void sub_101123280(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 168);
  *(void *)(v1 + 168) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(v1 + 48);
  *(void *)(v1 + 48) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  sub_100029A7C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1011232FC(void *a1)
{
  *a1 = off_1023128A8;
  uint64_t v2 = a1[6];
  if (v2)
  {
    sub_100F34650(v2);
    sub_100F35774(a1[6]);
  }
  if (a1[21])
  {
    uint64_t v3 = sub_100A68CE8();
    sub_1009D26C4(v3, 0, a1[21]);
    uint64_t v4 = a1[21];
    a1[21] = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  else
  {
    a1[21] = 0;
  }
  uint64_t v5 = a1[6];
  a1[6] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  return sub_100029A7C((uint64_t)a1);
}

void sub_1011233E8(void *a1)
{
  sub_1011232FC(a1);

  operator delete();
}

uint64_t sub_101123420(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 8), "silo") assertInside];

  return sub_101123474(a2, a1);
}

uint64_t sub_101123474(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = 0;
  *(float64x2_t *)bytes = vcvtq_f64_f32(*(float32x2_t *)(a2 + 20));
  *(double *)uint64_t v20 = *(float *)(a2 + 28);
  float64x2_t v17 = vcvtq_f64_f32(*(float32x2_t *)(a2 + 32));
  *(float64x2_t *)&v20[8] = v17;
  *(double *)&v20[24] = *(float *)(a2 + 40);
  long long v21 = COERCE_UNSIGNED_INT64(CFAbsoluteTimeGetCurrent());
  float64x2_t v22 = vcvtq_f64_f32(*(float32x2_t *)(a2 + 52));
  LODWORD(v23) = *(_DWORD *)(a2 + 44);
  sub_1000E9354(v18);
  double v4 = *(double *)(a1 + 96);
  if (v4 < 0.0 || *(double *)(a1 + 64) <= 0.0 || sub_1004BB18C(v17.f64[0], v4) >= *(double *)(a1 + 64))
  {
    CFDataRef v11 = CFDataCreate(kCFAllocatorDefault, bytes, 88);
    if (v11)
    {
      if (sub_1000EA8A4((uint64_t)v18, "kCLConnectionMessageHeadingDataKey", (uint64_t)v11))
      {
        *(void *)buf = sub_1000E9358((uint64_t)v18);
        sub_1011238F8(a1);
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1023128F8);
        }
        uint64_t v12 = qword_1024190A8;
        if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v23;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "sent kCLConnectionMessageHeading,data.heading.calibration,%d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190A0 != -1) {
            dispatch_once(&qword_1024190A0, &stru_1023128F8);
          }
          int v24 = 67109120;
          LODWORD(v25) = v23;
          uint64_t v16 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLHeadingSubscription::onCompass(const CLCompass_Type::Sample *)", "%s\n", v16);
          if (v16 != buf) {
            free(v16);
          }
        }
      }
      CFRelease(v11);
    }
    long long v13 = v21;
    *(_OWORD *)(a1 + 104) = *(_OWORD *)&v20[16];
    *(_OWORD *)(a1 + 120) = v13;
    *(float64x2_t *)(a1 + 136) = v22;
    *(void *)(a1 + 152) = v23;
    long long v14 = *(_OWORD *)v20;
    *(_OWORD *)(a1 + 72) = *(_OWORD *)bytes;
    *(_OWORD *)(a1 + 88) = v14;
  }
  else
  {
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1023128F8);
    }
    uint64_t v5 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = *(void *)(a1 + 64);
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)buf = 134218496;
      *(float64_t *)&uint8_t buf[4] = v17.f64[0];
      __int16 v31 = 2048;
      uint64_t v32 = v6;
      __int16 v33 = 2048;
      uint64_t v34 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "new heading %.2f is within heading filter of %.2f from previous heading %.2f", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1023128F8);
      }
      uint64_t v8 = *(void *)(a1 + 64);
      uint64_t v9 = *(void *)(a1 + 96);
      int v24 = 134218496;
      float64_t v25 = v17.f64[0];
      __int16 v26 = 2048;
      uint64_t v27 = v8;
      __int16 v28 = 2048;
      uint64_t v29 = v9;
      long long v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLHeadingSubscription::onCompass(const CLCompass_Type::Sample *)", "%s\n", v10);
      if (v10 != buf) {
        free(v10);
      }
    }
  }
  return sub_10013F3C4(v18);
}

void sub_1011238CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_1011238F8(uint64_t a1)
{
  sub_10048C758(&off_1023129C8, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_101123964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_10112397C(id a1)
{
  qword_1024190A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

__n128 sub_1011239AC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_102312928;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1011239F8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_102312928;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_101123A28(uint64_t a1, uint64_t a2, long long *a3)
{
}

uint64_t sub_101123A30(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101123A70()
{
}

void sub_101123A7C(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_101123AD8(a1, a2, (CLConnectionMessage **)&v3);
  if (*((void *)&v3 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v3 + 1));
  }
}

void sub_101123AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101123AD8(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  uint64_t v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  CFDictionaryRef DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_10013FA80((int)v15, DictionaryOfClasses);
  BOOL v14 = 0;
  if (sub_1000D2988((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14))
  {
    uint64_t v8 = *(void (**)(void *, BOOL, uint8_t *))a1;
    uint64_t v9 = *(void *)(a1 + 8);
    long long v10 = (void *)(a2 + (v9 >> 1));
    if (v9) {
      uint64_t v8 = *(void (**)(void *, BOOL, uint8_t *))(*v10 + v8);
    }
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_102312998);
    }
    CFDataRef v11 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102312998);
      }
    }
    uint64_t v12 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      *(_DWORD *)buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10013F3C4(v15);
}

void sub_101123D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_101123D24(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

uint64_t sub_101123D54(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_101123DD0(a1, a2, (long long *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_101123DBC(_Unwind_Exception *a1)
{
  sub_100BED484(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_101123DD0(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    long long v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_101124054(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  float64x2_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *float64x2_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_101124144((uint64_t)v25, 0);
  return i;
}

void sub_10112403C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101124144((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_101124054@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  __n128 result = sub_1011240CC(v8 + 2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1011240B4(_Unwind_Exception *a1)
{
  sub_101124144(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_1011240CC(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
  }
  sub_100BECBBC((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_101124128(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_101124144(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100BED504((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void *sub_10112419C(void *a1, int a2)
{
  sub_100134750(__p, "");
  sub_10112427C((uint64_t)a1, "VO2MaxStagingHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_1023129E0;
  a1[9] = off_102312A98;
  sub_101124FE0((uint64_t)a1);
  return a1;
}

void sub_101124250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_10112477C(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_10112427C(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  unint64_t v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 8));
  *unint64_t v12 = off_1022ADB08;
  *(void *)a1 = off_102312FA8;
  *(void *)(a1 + 72) = off_102313050;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_102312FA8;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 72) = off_102313050;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 368) = 3;
  *(unsigned char *)(a1 + 376) = 0;
  sub_100134750((void *)(a1 + 384), "");
  *(void *)(a1 + 408) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 416) = 12000;
  *(void *)(a1 + 424) = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 432));
  *(void *)(a1 + 432) = off_1022ADB08;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 248) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_1011246C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  *uint64_t v29 = v30;
  sub_1003BE1F8(v31);
  if (*(char *)(v25 + 407) < 0) {
    operator delete(*a11);
  }
  sub_10112A53C(v28);
  sub_1011F8AE0(v27);
  *(void *)uint64_t v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_101124774()
{
}

uint64_t sub_10112477C(uint64_t a1)
{
  *(void *)a1 = off_102312FA8;
  uint64_t v2 = a1 + 72;
  *(void *)(a1 + 72) = off_102313050;
  *(void *)(a1 + 424) = off_1022ADAD8;
  sub_1003BE1F8((void *)(a1 + 432));
  if (*(char *)(a1 + 407) < 0) {
    operator delete(*(void **)(a1 + 384));
  }
  sub_10112A53C((void *)(a1 + 176));
  sub_1011F8AE0(v2);
  *(void *)a1 = off_1022ADAD8;
  sub_1003BE1F8((void *)(a1 + 8));
  return a1;
}

uint64_t sub_101124850(uint64_t a1)
{
  return sub_10112477C(a1 - 72);
}

void sub_101124858(uint64_t a1)
{
  sub_10112477C(a1);

  operator delete();
}

void sub_101124890(uint64_t a1)
{
  sub_10112477C(a1 - 72);

  operator delete();
}

uint64_t sub_1011248CC(uint64_t a1, uint64_t a2)
{
  if (*(double *)(*(void *)(a2 + 8) - 16) == 1.79769313e308 && sub_100082064(a1 + 72))
  {
    sub_10002B640(*(void *)(a1 + 80));
    CFAbsoluteTimeGetCurrent();
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM VO2MaxStagingHistory WHERE startTime < ?");
  }
  return -1;
}

void sub_101124A18(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101124A30(uint64_t a1, uint64_t a2)
{
  return sub_1011248CC(a1 - 72, a2);
}

uint64_t sub_101124A38(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT COUNT(*) FROM VO2MaxStagingHistory");
  }
  return 0xFFFFFFFFLL;
}

void sub_101124AF4(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101124B30(uint64_t a1)
{
  return sub_101124A38(a1 - 72);
}

uint64_t sub_101124B38(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    memset(out, 0, 37);
    uuid_unparse(a2, out);
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM VO2MaxStagingHistory WHERE sessionId = ?");
  }
  return result;
}

void sub_101124D88(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_101124DCC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
}

void sub_101124DD8(uint64_t *a1, uint64_t a2)
{
  long long v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(void *)a2 = sqlite3_column_int(v4, 0);
  uint64_t v5 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 24) = sqlite3_column_double(v5, 1);
  char v6 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(void *)(a2 + 40) = sqlite3_column_int(v6, 2);
  uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 32) = sqlite3_column_double(v7, 3);
  unint64_t v8 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 48) = sqlite3_column_double(v8, 4);
  unint64_t v9 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 56) = sqlite3_column_double(v9, 5);
  unint64_t v10 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 64) = sqlite3_column_double(v10, 6);
  uint8x8_t v11 = (sqlite3_stmt *)sub_10014D19C(*a1);
  unint64_t v12 = sqlite3_column_text(v11, 7);
  uuid_parse((const char *)v12, (unsigned __int8 *)(a2 + 72));
  uint64_t v13 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 88) = sqlite3_column_double(v13, 8);
  BOOL v14 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 96) = sqlite3_column_double(v14, 9);
  uint64_t v15 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 104) = sqlite3_column_int(v15, 10);
  uint64_t v16 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(unsigned char *)(a2 + 108) = sqlite3_column_int(v16, 11) != 0;
  uint64_t v17 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(unsigned char *)(a2 + 109) = sqlite3_column_int(v17, 12) != 0;
  __int16 v18 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 112) = sqlite3_column_int(v18, 13);
  unint64_t v19 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 120) = sqlite3_column_double(v19, 14);
  unint64_t v20 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 128) = sqlite3_column_double(v20, 15);
  size_t v21 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 144) = sqlite3_column_int(v21, 16);
  float64x2_t v22 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 148) = sqlite3_column_int(v22, 17);
  unint64_t v23 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(unsigned char *)(a2 + 152) = sqlite3_column_int(v23, 18) != 0;
  int v24 = (sqlite3_stmt *)sub_10014D19C(*a1);
  uint64_t v25 = sqlite3_column_text(v24, 19);
  std::string::assign((std::string *)(a2 + 160), (const std::string::value_type *)v25);
  __int16 v26 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 184) = sqlite3_column_double(v26, 20);
  uint64_t v27 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 136) = sqlite3_column_double(v27, 21);
}

uint64_t sub_101124FE0(uint64_t a1)
{
  uint64_t result = sub_10014C3C0(*(void *)(a1 + 80));
  if (result)
  {
    sub_101125050(a1);
    uint64_t v3 = *(void *)(a1 + 80);
    return sub_1005F7B0C(v3, "VO2MaxStagingHistory", (const char **)&off_102312B48, (const std::string::value_type **)&off_102476020, 0);
  }
  return result;
}

uint64_t sub_101125050(uint64_t a1)
{
  uint64_t result = sub_1005F93E4(*(void *)(a1 + 80), "VO2MaxStagingHistory");
  if (result)
  {
    uint64_t v3 = "startTime";
    int v4 = 5;
    __int16 v5 = 0;
    char v6 = 0;
    char v7 = 0;
    sub_1005FEC4C(*(void *)(a1 + 80), "VO2MaxStagingHistory", (uint64_t)"startTime", (uint64_t)&v3);
  }
  return result;
}

void sub_101125548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a23);
  if (v61) {
    (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
  }
  sub_101A129A8((uint64_t)&a61);
  _Unwind_Resume(a1);
}

uint64_t sub_1011255F0(uint64_t a1, void *a2)
{
  if (!sub_1005F9734(*(void *)(a1 + 80), (char *)a2))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102313090);
    }
    int v4 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102313090);
      }
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      unint64_t v20 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<VO2MaxStagingOutput, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = VO2MaxStagingOutput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", (const char *)v20);
      if (v20 != buf) {
        free(v20);
      }
    }
    memset(__p, 0, 24);
    sub_100134750(buf, (char *)a2);
    __int16 v5 = std::string::append(buf, "AutoIncr");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    int64_t v22 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)size_t v21 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_100134750(buf, (char *)a2);
    char v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_10002B640(*(void *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0) {
      size_t v8 = HIBYTE(__p[2]);
    }
    else {
      size_t v8 = (size_t)__p[1];
    }
    unint64_t v9 = buf;
    sub_1001110E4((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unint64_t v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0) {
        unint64_t v10 = __p;
      }
      else {
        unint64_t v10 = (void **)__p[0];
      }
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v22 >= 0) {
      uint8x8_t v11 = v21;
    }
    else {
      uint8x8_t v11 = (void **)v21[0];
    }
    if (v22 >= 0) {
      std::string::size_type v12 = HIBYTE(v22);
    }
    else {
      std::string::size_type v12 = (std::string::size_type)v21[1];
    }
    uint64_t v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    BOOL v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v23.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    char v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = v14;
    __p[1] = v23.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v23.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      char v15 = HIBYTE(__p[2]);
      BOOL v14 = __p[0];
    }
    if (v15 >= 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)v14;
    }
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)v16);
  }
  uint64_t v17 = *(void *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0) {
    uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v18 = *(void *)(v17 + 88);
  }
  sub_10003CC68(v17, v18);
  return 0;
}

void sub_10112681C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_101126B7C(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM VO2MaxStagingHistory");
  }
  return result;
}

void sub_101126C2C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101126C44(uint64_t a1)
{
  return sub_101126B7C(a1 - 72);
}

void *sub_101126C4C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "VO2MaxStagingHistory");
}

void *sub_101126C5C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "VO2MaxStagingHistory");
}

uint64_t sub_101126C6C(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"INSERT INTO VO2MaxStagingHistory (startTime, workoutType, estimatedVo2Max, durationInSeconds, hrMax, hrMin, sessionId, variance, filteredVo2Max, sessionType, eligibleForHealthKit, eligibleForCalorimetry, numWorkoutsContrToEstimate, estimatedHRResponseParam, estimatedHRRecoveryParam, algorithmVersion, sampleVersion, betaBlockerUse, bundleIdentifier, previousVo2Max,sessionVo2Max) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
  }
  return result;
}

void sub_101126F54(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101126F74(uint64_t a1, uint64_t *a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    sub_100538BF8(a2);
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * from VO2MaxStagingHistory ORDER BY startTime ASC");
  }
  return result;
}

void sub_101127158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011271C4(uint64_t *a1, uint64_t a2)
{
  int v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1;
  }
  if (v5 != 100) {
    return 2;
  }
  sub_101124DD8(a1, a2);
  return 0;
}

uint64_t sub_101127224(uint64_t a1, uint64_t *a2)
{
  if (sub_100082064(a1 + 72))
  {
    sub_100538BF8(a2);
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM VO2MaxStagingHistory WHERE sessionId IN (SELECT sessionId FROM VO2MaxStagingLostEstimateHistory)");
  }
  if (qword_102419220 != -1) {
    dispatch_once(&qword_102419220, &stru_102312B28);
  }
  int v4 = qword_102419228;
  if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "VO2MaxStagingHistory, DB not accessible", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_102312B28);
    }
    long long v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLVO2MaxStagingOutputRecorderDb::getRecordsWithConflictingStagingData(std::vector<VO2MaxStagingOutput> &) const", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return 109;
}

void sub_101127518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10112757C(uint64_t a1, uint64_t *a2)
{
  if (sub_100082064(a1 + 72))
  {
    sub_100538BF8(a2);
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM VO2MaxStagingHistory WHERE estimatedVo2Max IS NOT NULL AND startTime > ? ORDER BY startTime DESC");
  }
  if (qword_102419220 != -1) {
    dispatch_once(&qword_102419220, &stru_102312B28);
  }
  int v4 = qword_102419228;
  if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "VO2MaxStagingHistory, DB not accessible", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_102312B28);
    }
    long long v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLVO2MaxStagingOutputRecorderDb::querySinceTime(CFAbsoluteTime, std::vector<VO2MaxStagingOutput> &) const", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return 109;
}

void sub_101127894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011278FC(uint64_t a1)
{
  if (qword_102419220 != -1) {
    dispatch_once(&qword_102419220, &stru_102312B28);
  }
  uint64_t v2 = qword_102419228;
  if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Promoting staging data", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_102312B28);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLVO2MaxStagingOutputRecorderDb::promoteStagingData() const", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  if (sub_100082064(a1 + 72))
  {
    sub_10002B640(*(void *)(a1 + 80));
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM VO2MaxHistory WHERE sessionId IN (SELECT sessionId from VO2MaxStagingSummaryHistory) OR sessionId IN (SELECT sessionId from VO2MaxStagingLostEstimateHistory)");
  }
  if (qword_102419220 != -1) {
    dispatch_once(&qword_102419220, &stru_102312B28);
  }
  uint64_t v3 = qword_102419228;
  if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "VO2MaxStagingHistory, DB not accessible", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_102312B28);
    }
    long long v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLVO2MaxStagingOutputRecorderDb::promoteStagingData() const", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return 109;
}

void sub_101127ED0(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101127F28(void *a1)
{
  uint64_t v3 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v13);
  if (SHIBYTE(v14[0]) < 0)
  {
    unint64_t v10 = v13[1];
    operator delete(v13[0]);
    if (v10)
    {
LABEL_3:
      if (sub_100082064(a1 + 9))
      {
        sub_10010F274((uint64_t)v13);
        int v4 = sub_100132EFC(v14, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
        if ((v17 & 0x80u) == 0) {
          int v5 = __p;
        }
        else {
          int v5 = (void **)__p[0];
        }
        if ((v17 & 0x80u) == 0) {
          uint64_t v6 = v17;
        }
        else {
          uint64_t v6 = (uint64_t)__p[1];
        }
        char v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
        sub_100132EFC(v7, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v17 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v8 = a1[10];
        std::stringbuf::str();
        if ((v17 & 0x80u) == 0) {
          unint64_t v9 = __p;
        }
        else {
          unint64_t v9 = (void **)__p[0];
        }
        sub_10014D518(v8, (uint64_t)v9);
      }
      return 2;
    }
  }
  else if (HIBYTE(v14[0]))
  {
    goto LABEL_3;
  }
  sub_101AA2638(v3);
  __break(1u);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  *(void **)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return 2;
}

void sub_10112836C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (a3) {
    (*(void (**)(uint64_t))(*(void *)a3 + 8))(a3);
  }
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101128414(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_10112AB48(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102313090);
  }
  int v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)uint64_t v13 = 0;
    *(_WORD *)&v13[4] = 2082;
    *(void *)&v13[6] = "";
    __int16 v14 = 2082;
    char v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102313090);
    }
    char v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(void *)uint64_t v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102313090);
      }
      unint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<VO2MaxStagingOutput, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = VO2MaxStagingOutput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_101128C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_101128C90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a2 = *(_OWORD *)a3;
  long long v5 = *(_OWORD *)(a3 + 16);
  long long v6 = *(_OWORD *)(a3 + 32);
  long long v7 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 64) = v7;
  *(_OWORD *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 32) = v6;
  long long v8 = *(_OWORD *)(a3 + 80);
  long long v9 = *(_OWORD *)(a3 + 96);
  long long v10 = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(a2 + 128) = v10;
  *(_OWORD *)(a2 + 80) = v8;
  *(_OWORD *)(a2 + 96) = v9;
  uint64_t v11 = *(void *)(a3 + 144);
  *(unsigned char *)(a2 + 152) = *(unsigned char *)(a3 + 152);
  *(void *)(a2 + 144) = v11;
  std::string::operator=((std::string *)(a2 + 160), (const std::string *)(a3 + 160));
  double result = *(double *)(a3 + 184);
  *(double *)(a2 + 184) = result;
  return result;
}

id *sub_101128D00(uint64_t a1, uint64_t a2, char a3)
{
  v49[0] = (id)os_transaction_create();
  v49[1] = 0;
  long long v6 = (_OWORD *)(a1 + 224);
  if (*(double *)(a1 + 248) <= 0.0
    || !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a1 + 224, a2))
  {
    if ((a3 & 1) == 0) {
      sub_10002B640(*(void *)(a1 + 80));
    }
    double v59 = 0.0;
    uint64_t v60 = 0;
    uint64_t v62 = 0;
    uint64_t v61 = 0;
    uint64_t v63 = 3;
    char v64 = 0;
    sub_100134750(&__p, "");
    unint64_t v67 = 0xBFF0000000000000;
    int v7 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 104))(a1, v58);
    if (v7 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
      *long long v6 = *(_OWORD *)a2;
      long long v22 = *(_OWORD *)(a2 + 16);
      long long v23 = *(_OWORD *)(a2 + 32);
      long long v24 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 288) = v24;
      *(_OWORD *)(a1 + 240) = v22;
      *(_OWORD *)(a1 + 256) = v23;
      long long v25 = *(_OWORD *)(a2 + 80);
      long long v26 = *(_OWORD *)(a2 + 96);
      long long v27 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 352) = v27;
      *(_OWORD *)(a1 + 304) = v25;
      *(_OWORD *)(a1 + 320) = v26;
      uint64_t v28 = *(void *)(a2 + 144);
      *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 152);
      *(void *)(a1 + 368) = v28;
      std::string::operator=((std::string *)(a1 + 384), (const std::string *)(a2 + 160));
    }
    else
    {
      if (v7)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102313090);
        }
        uint64_t v29 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_102313090);
          }
          LOWORD(v50) = 0;
          uint64_t v30 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<VO2MaxStagingOutput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxStagingOutput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v30);
          if (v30 != (char *)buf) {
            free(v30);
          }
        }
LABEL_43:
        if (v66 < 0)
        {
          operator delete(__p);
          if (a3) {
            return sub_1000E1098(v49);
          }
        }
        else if (a3)
        {
          return sub_1000E1098(v49);
        }
        sub_100028FB4(*(void *)(a1 + 80));
        return sub_1000E1098(v49);
      }
      double v8 = *(double *)(a2 + 24);
      double v9 = v59;
      double v10 = v8 - v59;
      if (v8 - v59 < 0.0) {
        double v10 = -(v8 - v59);
      }
      if (v10 > 604800.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102313090);
        }
        uint64_t v11 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v12 = *(void *)(a2 + 24);
          *(_DWORD *)buf = 134349312;
          double v55 = v59;
          __int16 v56 = 2050;
          uint64_t v57 = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_102313090);
          }
          uint64_t v43 = *(void *)(a2 + 24);
          int v50 = 134349312;
          double v51 = v59;
          __int16 v52 = 2050;
          uint64_t v53 = v43;
          char v44 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxStagingOutput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxStagingOutput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v44);
          if (v44 != (char *)buf) {
            free(v44);
          }
        }
        CLWriteStackshot();
        double v8 = *(double *)(a2 + 24);
        double v9 = v59;
      }
      if (v8 < v9)
      {
        if (v9 - v8 < 10.0)
        {
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_102313090);
          }
          uint64_t v13 = qword_102418FD8;
          if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
          {
            double v14 = *(double *)(a2 + 24);
            *(_DWORD *)buf = 134217984;
            double v55 = v14;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102418FD0 != -1) {
              dispatch_once(&qword_102418FD0, &stru_102313090);
            }
            double v45 = *(double *)(a2 + 24);
            int v50 = 134217984;
            double v51 = v45;
            unint64_t v46 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxStagingOutput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxStagingOutput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v46);
            if (v46 != (char *)buf) {
              free(v46);
            }
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, a2);
          *long long v6 = *(_OWORD *)a2;
          long long v15 = *(_OWORD *)(a2 + 16);
          long long v16 = *(_OWORD *)(a2 + 32);
          long long v17 = *(_OWORD *)(a2 + 64);
          *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 48);
          *(_OWORD *)(a1 + 288) = v17;
          *(_OWORD *)(a1 + 240) = v15;
          *(_OWORD *)(a1 + 256) = v16;
          long long v18 = *(_OWORD *)(a2 + 80);
          long long v19 = *(_OWORD *)(a2 + 96);
          long long v20 = *(_OWORD *)(a2 + 128);
          *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 112);
          *(_OWORD *)(a1 + 352) = v20;
          *(_OWORD *)(a1 + 304) = v18;
          *(_OWORD *)(a1 + 320) = v19;
          uint64_t v21 = *(void *)(a2 + 144);
          *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 152);
          *(void *)(a1 + 368) = v21;
          std::string::operator=((std::string *)(a1 + 384), (const std::string *)(a2 + 160));
          goto LABEL_42;
        }
        double v31 = v8 - v9;
        double v32 = *(float *)(a1 + 136);
        if (qword_102418FD0 != -1)
        {
          double v48 = *(float *)(a1 + 136);
          dispatch_once(&qword_102418FD0, &stru_102313090);
          double v32 = v48;
        }
        double v33 = v31 - v32;
        uint64_t v34 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134217984;
          double v55 = v33;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_102313090);
          }
          int v50 = 134217984;
          double v51 = v33;
          uint64_t v47 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxStagingOutput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxStagingOutput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v47);
          if (v47 != (char *)buf) {
            free(v47);
          }
        }
        (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v33);
      }
      (*(void (**)(uint64_t, unsigned char *, uint64_t, uint64_t))(*(void *)a1 + 144))(a1, v58, a1 + 224, a2);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
      *long long v6 = *(_OWORD *)a2;
      long long v35 = *(_OWORD *)(a2 + 16);
      long long v36 = *(_OWORD *)(a2 + 32);
      long long v37 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 288) = v37;
      *(_OWORD *)(a1 + 240) = v35;
      *(_OWORD *)(a1 + 256) = v36;
      long long v38 = *(_OWORD *)(a2 + 80);
      long long v39 = *(_OWORD *)(a2 + 96);
      long long v40 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 352) = v40;
      *(_OWORD *)(a1 + 304) = v38;
      *(_OWORD *)(a1 + 320) = v39;
      uint64_t v41 = *(void *)(a2 + 144);
      *(unsigned char *)(a1 + 376) = *(unsigned char *)(a2 + 152);
      *(void *)(a1 + 368) = v41;
      std::string::operator=((std::string *)(a1 + 384), (const std::string *)(a2 + 160));
    }
LABEL_42:
    *(void *)(a1 + 408) = *(void *)(a2 + 184);
    goto LABEL_43;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, a1 + 224, a2);
  return sub_1000E1098(v49);
}

void sub_101129620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (SLOBYTE(STACK[0x76F]) < 0) {
    operator delete((void *)STACK[0x758]);
  }
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101129664(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v13 = (_Unwind_Exception *)sub_101AA27A8(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  uint64_t v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    long long v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      int v7 = __p;
    }
    else {
      int v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_1011299D8(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101AA2918(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    uint64_t v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      long long v5 = __p;
    }
    else {
      long long v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    int v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      double v9 = __p;
    }
    else {
      double v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_101129D04(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101AA2A88(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    uint64_t v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

uint64_t sub_10112A028(uint64_t a1)
{
  return sub_101128414(a1 - 72);
}

void sub_10112A030(id a1)
{
  qword_102419228 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

uint64_t sub_10112A060(void *a1, uint64_t *a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v13);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    if (HIBYTE(v14)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101AA2BF8(v4);
    __break(1u);
  }
  uint64_t v12 = v13[1];
  operator delete(v13[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_100538BF8(a2);
    sub_10010F274((uint64_t)v13);
    uint64_t v6 = sub_100132EFC(&v14, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v16 & 0x80u) == 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    if ((v16 & 0x80u) == 0) {
      uint64_t v8 = v16;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v16 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v16 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_10112A460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a71 < 0) {
    operator delete(__p);
  }
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  sub_101A129A8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_10112A50C(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_10112A53C(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    uint64_t v4 = a1 + 5;
    uint64_t v3 = (void **)a1[1];
  }
  else
  {
    uint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 / 0x15];
    unint64_t v7 = (unint64_t)*v6;
    unint64_t v8 = (unint64_t)*v6 + 192 * (v5 % 0x15);
    unint64_t v9 = (unint64_t)v2[(a1[5] + v5) / 0x15] + 192 * ((a1[5] + v5) % 0x15);
    if (v8 != v9)
    {
      do
      {
        if (*(char *)(v8 + 183) < 0)
        {
          operator delete(*(void **)(v8 + 160));
          unint64_t v7 = (unint64_t)*v6;
        }
        v8 += 192;
        if (v8 - v7 == 4032)
        {
          unint64_t v10 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v10;
          unint64_t v8 = v10;
        }
      }
      while (v8 != v9);
      uint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }
  *uint64_t v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 10;
  }
  else
  {
    if (v12 != 2) {
      goto LABEL_18;
    }
    uint64_t v13 = 21;
  }
  a1[4] = v13;
LABEL_18:
  while (v2 != v3)
  {
    uint64_t v14 = *v2++;
    operator delete(v14);
  }

  return sub_1000D7EB4((uint64_t)a1);
}

uint64_t sub_10112A6AC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

uint64_t sub_10112A73C(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 6);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x155555555555555) {
    sub_1001D7FD4();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 6) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 6);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 6) >= 0xAAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x155555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v14 = a1 + 2;
  if (v6) {
    int v7 = (char *)sub_10017EB28((uint64_t)(a1 + 2), v6);
  }
  else {
    int v7 = 0;
  }
  unint64_t v10 = v7;
  unint64_t v11 = &v7[192 * v3];
  uint64_t v13 = &v7[192 * v6];
  sub_10112A84C((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  unint64_t v12 = v11 + 192;
  sub_10112A8DC(a1, &v10);
  uint64_t v8 = a1[1];
  sub_10112AAB8((uint64_t)&v10);
  return v8;
}

void sub_10112A838(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10112AAB8((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_10112A84C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a2 = *(_OWORD *)a3;
  long long v5 = *(_OWORD *)(a3 + 16);
  long long v6 = *(_OWORD *)(a3 + 32);
  long long v7 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 64) = v7;
  *(_OWORD *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 32) = v6;
  long long v8 = *(_OWORD *)(a3 + 80);
  long long v9 = *(_OWORD *)(a3 + 96);
  long long v10 = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(a2 + 128) = v10;
  *(_OWORD *)(a2 + 80) = v8;
  *(_OWORD *)(a2 + 96) = v9;
  uint64_t v11 = *(void *)(a3 + 144);
  *(unsigned char *)(a2 + 152) = *(unsigned char *)(a3 + 152);
  *(void *)(a2 + 144) = v11;
  unint64_t v12 = (unsigned char *)(a2 + 160);
  if (*(char *)(a3 + 183) < 0)
  {
    sub_1000DC48C(v12, *(void **)(a3 + 160), *(void *)(a3 + 168));
  }
  else
  {
    long long v13 = *(_OWORD *)(a3 + 160);
    *(void *)(a2 + 176) = *(void *)(a3 + 176);
    *(_OWORD *)unint64_t v12 = v13;
  }
  double result = *(double *)(a3 + 184);
  *(double *)(a2 + 184) = result;
  return result;
}

uint64_t sub_10112A8DC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10112A954((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10112A954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v21 = a6;
  *((void *)&v21 + 1) = a7;
  long long v20 = v21;
  v18[0] = a1;
  v18[1] = &v20;
  v18[2] = &v21;
  if (a3 == a5)
  {
    uint64_t v16 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 192) = *(_OWORD *)(a3 - 192);
      long long v8 = *(_OWORD *)(a3 - 176);
      long long v9 = *(_OWORD *)(a3 - 160);
      long long v10 = *(_OWORD *)(a3 - 128);
      *(_OWORD *)(v7 - 144) = *(_OWORD *)(a3 - 144);
      *(_OWORD *)(v7 - 128) = v10;
      *(_OWORD *)(v7 - 176) = v8;
      *(_OWORD *)(v7 - 160) = v9;
      long long v11 = *(_OWORD *)(a3 - 112);
      long long v12 = *(_OWORD *)(a3 - 96);
      long long v13 = *(_OWORD *)(a3 - 64);
      *(_OWORD *)(v7 - 80) = *(_OWORD *)(a3 - 80);
      *(_OWORD *)(v7 - 64) = v13;
      *(_OWORD *)(v7 - 112) = v11;
      *(_OWORD *)(v7 - 96) = v12;
      uint64_t v14 = *(void *)(a3 - 48);
      *(unsigned char *)(v7 - 40) = *(unsigned char *)(a3 - 40);
      *(void *)(v7 - 48) = v14;
      long long v15 = *(_OWORD *)(a3 - 32);
      *(void *)(v7 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v7 - 32) = v15;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      uint64_t v7 = *((void *)&v21 + 1) - 192;
      *((void *)&v21 + 1) -= 192;
      a3 -= 192;
    }
    while (a3 != a5);
    uint64_t v16 = v21;
  }
  char v19 = 1;
  sub_10112AA38((uint64_t)v18);
  return v16;
}

uint64_t sub_10112AA38(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10112AA70(a1);
  }
  return a1;
}

void sub_10112AA70(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 183) < 0) {
      operator delete(*(void **)(v1 + 160));
    }
    v1 += 192;
  }
}

uint64_t sub_10112AAB8(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10112AAF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 192;
      *(void *)(a1 + 16) = v2 - 192;
      if (*(char *)(v2 - 9) < 0)
      {
        operator delete(*(void **)(v2 - 32));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_10112AB48(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_10112ABC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10112ABE4(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_10112AC14(uint64_t *a1)
{
  if (qword_102419000 != -1) {
    dispatch_once(&qword_102419000, &stru_1023130D0);
  }
  uint64_t v2 = qword_102419008;
  if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *((_DWORD *)a1 + 8);
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    uint64_t v6 = a1[2];
    int v7 = *((unsigned __int8 *)a1 + 36);
    double v8 = *((float *)a1 + 12);
    double v9 = *((float *)a1 + 13);
    *(_DWORD *)buf = 67110656;
    int v12 = v3;
    __int16 v13 = 2048;
    uint64_t v14 = v4;
    __int16 v15 = 2048;
    uint64_t v16 = v5;
    __int16 v17 = 2048;
    uint64_t v18 = v6;
    __int16 v19 = 1024;
    int v20 = v7;
    __int16 v21 = 2048;
    double v22 = v8;
    __int16 v23 = 2048;
    double v24 = v9;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "SwimDetectState,nStrokes,%d,startTime,%f,endTime,%f,turnTime,%f,isSwim,%d,distance,%f,distError,%f", buf, 0x40u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_1023130D0);
    }
    long long v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSwimDetect::logState()", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
}

double sub_10112AE68(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 29) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = a2;
  return result;
}

uint64_t sub_10112AE80(uint64_t a1, void *a2)
{
  if (!*(unsigned char *)(a1 + 36) || *(int *)(a1 + 60) < 3) {
    return 0;
  }
  *a2 = *(void *)(a1 + 24);
  return 1;
}

BOOL sub_10112AEAC(uint64_t a1)
{
  return *(_DWORD *)(a1 + 32) > 2;
}

BOOL sub_10112AEBC(uint64_t a1, double a2)
{
  *(double *)(a1 + 16) = a2;
  int v3 = *(unsigned __int8 *)(a1 + 36);
  if (*(unsigned char *)(a1 + 36))
  {
    *(unsigned char *)(a1 + 36) = 0;
    sub_10112AC14((uint64_t *)a1);
    *(void *)(a1 + 29) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
  }
  else
  {
    sub_10112AC14((uint64_t *)a1);
  }
  return v3 != 0;
}

void sub_10112AF18(uint64_t *a1, double a2)
{
  double v4 = *((double *)a1 + 1);
  if (v4 == 0.0)
  {
    *(double *)a1 = a2;
    *((double *)a1 + 1) = a2;
    double v4 = a2;
  }
  double v5 = a2 - v4;
  if (*((unsigned char *)a1 + 36)) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 <= 10.0;
  }
  if (!v6)
  {
    a1[1] = 0;
    a1[2] = 0;
    *(uint64_t *)((char *)a1 + 29) = 0;
    a1[3] = 0;
    a1[6] = 0;
    a1[7] = 0;
    *(double *)a1 = a2;
  }
  *((double *)a1 + 1) = a2;
  (*(void (**)(void **__return_ptr, double))(*(void *)a1[5] + 80))(&__p, *(double *)a1);
  double v8 = (unsigned int *)__p;
  int v7 = v17;
  BOOL v9 = v17 == __p;
  *((_DWORD *)a1 + 8) = -1431655765 * ((unint64_t)((char *)v17 - (unsigned char *)__p) >> 3);
  if (v9)
  {
    double v11 = 0.0;
    double v10 = 0.0;
  }
  else
  {
    double v10 = 0.0;
    double v11 = 0.0;
    do
    {
      double v12 = (*(double (**)(uint64_t, void))(*(void *)a1[5] + 192))(a1[5], v8[2]);
      (*(void (**)(uint64_t, void))(*(void *)a1[5] + 192))(a1[5], v8[2]);
      double v11 = v11 + v12;
      double v10 = v10 + v13;
      v8 += 6;
    }
    while (v8 != v7);
  }
  float v14 = v11;
  float v15 = v10;
  *((float *)a1 + 12) = v14;
  *((float *)a1 + 13) = v15;
  if (!*((unsigned char *)a1 + 36)) {
    *((unsigned char *)a1 + 36) = v11 + v10 * 2.0 > (*(float (**)(uint64_t))(*(void *)a1[5] + 32))(a1[5]) * 0.5;
  }
  sub_10112AC14(a1);
  if (__p)
  {
    __int16 v17 = (unsigned int *)__p;
    operator delete(__p);
  }
}

void sub_10112B0E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10112B10C(uint64_t a1, long long *a2)
{
  long long v64 = *a2;
  float v4 = *(float *)(a1 + 48);
  float v65 = v4 / (*(float (**)(void))(**(void **)(a1 + 40) + 32))(*(void *)(a1 + 40));
  long long v25 = xmmword_101DA8FF8;
  uint64_t v26 = 0x4018507FBEDD8927;
  sub_100081994((uint64_t)&v64, &v63, (int *)&v25, 2, 5);
  float v5 = v63;
  *(float *)(a1 + 56) = v63;
  if (v5 <= 0.925)
  {
    int v6 = 0;
  }
  else
  {
    int v6 = *(unsigned __int8 *)(a1 + 36);
    if (*(unsigned char *)(a1 + 36)) {
      int v6 = *(_DWORD *)(a1 + 60) + 1;
    }
  }
  *(_DWORD *)(a1 + 60) = v6;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  if (qword_102419000 != -1) {
    dispatch_once(&qword_102419000, &stru_1023130D0);
  }
  int v7 = qword_102419008;
  if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *((void *)a2 + 2);
    uint64_t v9 = *((void *)a2 + 3);
    double v10 = *(float *)(a1 + 48);
    double v11 = *(float *)a2;
    double v12 = *((float *)a2 + 1);
    double v13 = *((float *)a2 + 2);
    double v14 = *((float *)a2 + 3);
    int v15 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)buf = 134220032;
    uint64_t v46 = v8;
    __int16 v47 = 2048;
    uint64_t v48 = v9;
    __int16 v49 = 2048;
    double v50 = v10;
    __int16 v51 = 2048;
    double v52 = v11;
    __int16 v53 = 2048;
    double v54 = v12;
    __int16 v55 = 2048;
    double v56 = v13;
    __int16 v57 = 2048;
    double v58 = v14;
    __int16 v59 = 2048;
    double v60 = v63;
    __int16 v61 = 1024;
    int v62 = v15;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "SwimDetectFeatures,startTime,%f,timestamp,%f,distance,%f,periodicity,%f,rotationNorm2,%f,rotationZ,%f,peakAccel,%f,isSwimming,%f,pauseCount,%d", buf, 0x58u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_1023130D0);
    }
    uint64_t v16 = *((void *)a2 + 2);
    uint64_t v17 = *((void *)a2 + 3);
    double v18 = *(float *)(a1 + 48);
    double v19 = *(float *)a2;
    double v20 = *((float *)a2 + 1);
    double v21 = *((float *)a2 + 2);
    double v22 = *((float *)a2 + 3);
    int v23 = *(_DWORD *)(a1 + 60);
    int v27 = 134220032;
    uint64_t v28 = v16;
    __int16 v29 = 2048;
    uint64_t v30 = v17;
    __int16 v31 = 2048;
    double v32 = v18;
    __int16 v33 = 2048;
    double v34 = v19;
    __int16 v35 = 2048;
    double v36 = v20;
    __int16 v37 = 2048;
    double v38 = v21;
    __int16 v39 = 2048;
    double v40 = v22;
    __int16 v41 = 2048;
    double v42 = v63;
    __int16 v43 = 1024;
    int v44 = v23;
    double v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSwimDetect::feedFeatures(const Features &)", "%s\n", v24);
    if (v24 != (char *)buf) {
      free(v24);
    }
  }
}

void sub_10112B460(id a1)
{
  qword_102419008 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

uint64_t sub_10112B490(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  int v6 = (void *)(a1 + 8);
  *(void *)a1 = a1 + 8;
  *(void *)(a1 + 32) = 0;
  int v7 = (char **)(a1 + 32);
  *(void *)(a1 + 24) = a1 + 32;
  uint64_t v8 = (char ***)(a1 + 24);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = a3;
  long long v9 = *a2;
  long long v10 = a2[1];
  *(_OWORD *)(a1 + 88) = a2[2];
  *(_OWORD *)(a1 + 72) = v10;
  *(_OWORD *)(a1 + 56) = v9;
  *(_DWORD *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 109) = 256;
  *(unsigned char *)(a1 + 111) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = a4;
  *(void *)(a1 + 128) = a5;
  sub_1008B4894(a1, 0);
  *(void *)a1 = v6;
  *(void *)(a1 + 16) = 0;
  *int v6 = 0;
  sub_10014F400((uint64_t)v8, *v7);
  *uint64_t v8 = v7;
  *(void *)(a1 + 40) = 0;
  NSObject *v7 = 0;
  int v11 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) < v11)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023130F0);
    }
    double v12 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = *(_DWORD *)(a1 + 56);
      int v14 = *(_DWORD *)(a1 + 60);
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = v13;
      __int16 v34 = 1026;
      int v35 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "TileError, connectivity, current, %{public}d, neighbor, %{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023130F0);
      }
      int v23 = *(_DWORD *)(a1 + 56);
      int v24 = *(_DWORD *)(a1 + 60);
      *(_DWORD *)__int16 v29 = 67240448;
      *(_DWORD *)&void v29[4] = v23;
      *(_WORD *)&v29[8] = 1026;
      *(_DWORD *)&v29[10] = v24;
      long long v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLTileDownloader::CLTileDownloader(CLTileDownloaderPolicy, CLITileDownloaderExternal *, CLTilesSetCollection *, CLTileDownloadPolicy *)", "%s\n", v25);
      if (v25 != (char *)buf) {
        free(v25);
      }
    }
    int v11 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 56) = v11;
  }
  if (v11 < *(_DWORD *)(a1 + 64))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023130F0);
    }
    int v15 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = *(_DWORD *)(a1 + 60);
      int v17 = *(_DWORD *)(a1 + 64);
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = v16;
      __int16 v34 = 1026;
      int v35 = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "TileError, connectivity, neighbor, %{public}d, nonneighbor, %{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023130F0);
      }
      int v26 = *(_DWORD *)(a1 + 60);
      int v27 = *(_DWORD *)(a1 + 64);
      *(_DWORD *)__int16 v29 = 67240448;
      *(_DWORD *)&void v29[4] = v26;
      *(_WORD *)&v29[8] = 1026;
      *(_DWORD *)&v29[10] = v27;
      uint64_t v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLTileDownloader::CLTileDownloader(CLTileDownloaderPolicy, CLITileDownloaderExternal *, CLTilesSetCollection *, CLTileDownloadPolicy *)", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
    *(_DWORD *)(a1 + 60) = *(_DWORD *)(a1 + 64);
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023130F0);
  }
  double v18 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    sub_10112BA4C();
    double v19 = v36 >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)__int16 v29 = 136446210;
    *(void *)&void v29[4] = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "TileQueue, %{public}s", v29, 0xCu);
    if (v36 < 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023130F0);
    }
    sub_10112BA4C();
    if (v30 >= 0) {
      double v21 = v29;
    }
    else {
      double v21 = *(unsigned char **)v29;
    }
    int v31 = 136446210;
    double v32 = v21;
    double v22 = (char *)_os_log_send_and_compose_impl();
    if (v30 < 0) {
      operator delete(*(void **)v29);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "CLTileDownloader::CLTileDownloader(CLTileDownloaderPolicy, CLITileDownloaderExternal *, CLTilesSetCollection *, CLTileDownloadPolicy *)", "%s\n", v22);
    if (v22 != (char *)buf) {
      free(v22);
    }
  }
  return a1;
}

void sub_10112BA14(_Unwind_Exception *a1)
{
  sub_10014F400(v2, *(char **)(v1 + 32));
  sub_1008B4894(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_10112BA4C()
{
  sub_10010F274((uint64_t)v13);
  uint64_t v0 = sub_100132EFC(v14, (uint64_t)"tileDownloaderPolicy", 20);
  sub_100132EFC(v0, (uint64_t)", currentRequirement, ", 22);
  uint64_t v1 = (void *)std::ostream::operator<<();
  sub_100132EFC(v1, (uint64_t)", neighborRequirement, ", 23);
  uint64_t v2 = (void *)std::ostream::operator<<();
  sub_100132EFC(v2, (uint64_t)", nonneighborRequirement, ", 26);
  int v3 = (void *)std::ostream::operator<<();
  sub_100132EFC(v3, (uint64_t)", slowCell, ", 12);
  float v4 = (void *)std::ostream::operator<<();
  sub_100132EFC(v4, (uint64_t)", redownloadLocked, ", 20);
  float v5 = (void *)std::ostream::operator<<();
  sub_100132EFC(v5, (uint64_t)", neighbors, ", 13);
  int v6 = (void *)std::ostream::operator<<();
  sub_100132EFC(v6, (uint64_t)", maxlist,", 10);
  int v7 = (void *)std::ostream::operator<<();
  sub_100132EFC(v7, (uint64_t)", maxage,", 9);
  uint64_t v8 = (void *)std::ostream::operator<<();
  sub_100132EFC(v8, (uint64_t)", cooloff, ", 11);
  long long v9 = (void *)std::ostream::operator<<();
  sub_100132EFC(v9, (uint64_t)", refreshMultiplier, ", 21);
  long long v10 = (void *)std::ostream::operator<<();
  sub_100132EFC(v10, (uint64_t)", decompress, ", 14);
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10112BCD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10112BCE8(uint64_t a1, uint64_t *a2, uint64_t a3, double a4)
{
  std::string v18 = *(std::string *)a3;
  if (*(char *)(a3 + 47) < 0)
  {
    sub_1000DC48C(&v19, *(void **)(a3 + 24), *(void *)(a3 + 32));
  }
  else
  {
    long long v19 = *(_OWORD *)(a3 + 24);
    uint64_t v20 = *(void *)(a3 + 40);
  }
  if (*(unsigned char *)(a1 + 111))
  {
    sub_101063234(*a2, &v18);
    uint64_t v7 = *a2;
    *(unsigned char *)(v7 + 144) = *(unsigned char *)(a1 + 100);
    sub_1010474E4(v7, (uint64_t)&unk_102485970);
    std::string v14 = v18;
    if (SHIBYTE(v20) < 0)
    {
      sub_1000DC48C(&__p, (void *)v19, *((unint64_t *)&v19 + 1));
    }
    else
    {
      long long __p = v19;
      uint64_t v16 = v20;
    }
    sub_10112C080((void *)a1, (unsigned int *)&v14, 0, (uint64_t)"add");
    if (SHIBYTE(v16) < 0) {
      operator delete((void *)__p);
    }
    if ((void *)(a1 + 8) == sub_100144248(a1, (uint64_t)&v18))
    {
      *(void *)buf = &v18;
      long long v10 = sub_1008B48F0((uint64_t **)a1, (uint64_t)&v18, (uint64_t)&unk_101D0B290, (_OWORD **)buf);
      uint64_t v11 = *a2;
      *a2 = 0;
      uint64_t v12 = v10[10];
      v10[10] = v11;
      if (v12) {
        (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      }
      *(void *)buf = &v18;
      int v13 = sub_1001483A0((uint64_t **)(a1 + 24), (uint64_t)&v18, (uint64_t)&unk_101D0B290, (long long **)buf);
      *((double *)v13 + 10) = a4;
      *((unsigned char *)v13 + 88) = 0;
      goto LABEL_22;
    }
    sub_101AA2DA0();
    abort_report_np();
    __break(1u);
    goto LABEL_26;
  }
  a2 = &qword_102419000;
  if (qword_1024193A0 != -1) {
LABEL_26:
  }
    dispatch_once(&qword_1024193A0, &stru_1023130F0);
  uint64_t v8 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "TileDl, preindexskip, addToDownloadList, #CloneMe", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (a2[116] != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023130F0);
    }
    __int16 v17 = 0;
    long long v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLTileDownloader::addToDownloadList(std::unique_ptr<CLTileFile>, const TileId &, CFAbsoluteTime)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
LABEL_22:
  if (SHIBYTE(v20) < 0) {
    operator delete((void *)v19);
  }
}

void sub_10112C03C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10112C080(void *a1, unsigned int *a2, int a3, uint64_t a4)
{
  uint64_t v8 = (uint64_t **)(a1 + 3);
  if (a1 + 4 == sub_100144248((uint64_t)(a1 + 3), (uint64_t)a2))
  {
    *(void *)buf = a2;
    long long v9 = sub_1001483A0(v8, (uint64_t)a2, (uint64_t)&unk_101D0B290, (long long **)buf);
    v9[10] = 0;
    *((unsigned char *)v9 + 88) = 0;
    if (a3)
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023130F0);
      }
      long long v10 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = sub_100147F50(*a2);
        double v12 = sub_10013DAC0((uint64_t)a2);
        double v13 = sub_10013DA9C((uint64_t)a2);
        uint64_t v14 = a1[2];
        uint64_t v15 = a1[5];
        *(_DWORD *)buf = 136447491;
        *(void *)&uint8_t buf[4] = v11;
        __int16 v24 = 2080;
        uint64_t v25 = a4;
        __int16 v26 = 2049;
        double v27 = v12;
        __int16 v28 = 2049;
        double v29 = v13;
        __int16 v30 = 2050;
        uint64_t v31 = v14;
        __int16 v32 = 2050;
        uint64_t v33 = v15;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "@TileError, %{public}s, nostate, %s, llsw, %{private}.2lf, %{private}.2lf, nlist, %{public}ld, nstate, %{public}lu", buf, 0x3Eu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 == -1)
        {
LABEL_17:
          sub_100147F50(*a2);
          sub_10013DAC0((uint64_t)a2);
          sub_10013DA9C((uint64_t)a2);
          double v22 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileDownloader::checkAndMakeState(TileId, BOOL, const char *)", "%s\n", v22);
          if (v22 != buf) {
            free(v22);
          }
          return;
        }
LABEL_19:
        dispatch_once(&qword_1024193A0, &stru_1023130F0);
        goto LABEL_17;
      }
    }
    else
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023130F0);
      }
      uint64_t v16 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
      {
        __int16 v17 = sub_100147F50(*a2);
        double v18 = sub_10013DAC0((uint64_t)a2);
        double v19 = sub_10013DA9C((uint64_t)a2);
        uint64_t v20 = a1[2];
        uint64_t v21 = a1[5];
        *(_DWORD *)buf = 136447491;
        *(void *)&uint8_t buf[4] = v17;
        __int16 v24 = 2080;
        uint64_t v25 = a4;
        __int16 v26 = 2049;
        double v27 = v18;
        __int16 v28 = 2049;
        double v29 = v19;
        __int16 v30 = 2050;
        uint64_t v31 = v20;
        __int16 v32 = 2050;
        uint64_t v33 = v21;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "@TileDl, %{public}s, makestate, %s, llsw, %{private}.2lf, %{private}.2lf, nlist, %{public}ld, nstate, %{public}lu", buf, 0x3Eu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 == -1) {
          goto LABEL_17;
        }
        goto LABEL_19;
      }
    }
  }
}

BOOL sub_10112C4FC(uint64_t a1)
{
  char v2 = sub_10125C084(*(_DWORD *)(a1 + 104), *(unsigned __int8 *)(a1 + 109));
  if (!*(unsigned char *)(a1 + 111))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023130F0);
    }
    float v5 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "@TileDl, skipall, first unlock", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 == -1) {
      goto LABEL_24;
    }
LABEL_29:
    dispatch_once(&qword_1024193A0, &stru_1023130F0);
    goto LABEL_24;
  }
  if ((v2 & 1) == 0)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023130F0);
    }
    int v6 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "@TileDl, skipall, on connectivity", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 == -1)
    {
LABEL_24:
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileDownloader::areDownloadConditionsMet() const", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
      return 0;
    }
    goto LABEL_29;
  }
  if (*(double *)(a1 + 112) == 0.0) {
    return 1;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023130F0);
  }
  int v3 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "@TileDl, skipall, in progress", buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 == -1) {
      goto LABEL_24;
    }
    goto LABEL_29;
  }
  return result;
}

void sub_10112C85C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  *(_DWORD *)buf = 13;
  sub_10014F674(a4, buf);
  __src = 0;
  long long v98 = 0;
  long long v99 = 0;
  uint64_t v84 = a4;
  int v85 = sub_100147F74(*(_DWORD *)(a1 + 104), *(unsigned __int8 *)(a1 + 109));
  int v9 = sub_10125C084(*(_DWORD *)(a1 + 104), *(unsigned __int8 *)(a1 + 109));
  if ((v85 & 1) != 0 || (*(int *)(a1 + 56) > 1 ? (int v10 = v9) : (int v10 = 0), v10 == 1))
  {
    uint64_t v11 = *(void **)a1;
    if (*(void *)a1 == a1 + 8)
    {
      int v12 = 0;
    }
    else
    {
      int v12 = 0;
      do
      {
        *(void *)buf = v11[10];
        if (sub_100147F80(a1, *(uint64_t *)buf, a5))
        {
          double v13 = *(double *)(sub_10015EF24(*(_DWORD *)(*(void *)buf + 48), *(void **)(a1 + 120)) + 136);
          long long v14 = *(_OWORD *)(a3 + 112);
          v95[6] = *(_OWORD *)(a3 + 96);
          v95[7] = v14;
          v96[0] = *(_OWORD *)(a3 + 128);
          *(_OWORD *)((char *)v96 + 12) = *(_OWORD *)(a3 + 140);
          long long v15 = *(_OWORD *)(a3 + 48);
          v95[2] = *(_OWORD *)(a3 + 32);
          v95[3] = v15;
          long long v16 = *(_OWORD *)(a3 + 80);
          v95[4] = *(_OWORD *)(a3 + 64);
          v95[5] = v16;
          long long v17 = *(_OWORD *)(a3 + 16);
          v95[0] = *(_OWORD *)a3;
          v95[1] = v17;
          if (sub_10125BB04(*(uint64_t *)buf, (uint64_t)v95, v13, a5))
          {
            sub_10112D4C8((uint64_t)&__src, (char *)__src, buf);
            ++v12;
          }
          else
          {
            double v18 = v98;
            if (v98 >= v99)
            {
              uint64_t v20 = (v98 - (unsigned char *)__src) >> 3;
              if ((unint64_t)(v20 + 1) >> 61) {
                sub_1001D7FD4();
              }
              unint64_t v21 = (v99 - (unsigned char *)__src) >> 2;
              if (v21 <= v20 + 1) {
                unint64_t v21 = v20 + 1;
              }
              if ((unint64_t)(v99 - (unsigned char *)__src) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v22 = v21;
              }
              if (v22) {
                int v23 = (char *)sub_1000DA54C((uint64_t)&v99, v22);
              }
              else {
                int v23 = 0;
              }
              __int16 v24 = &v23[8 * v20];
              *(void *)__int16 v24 = *(void *)buf;
              double v19 = v24 + 8;
              __int16 v26 = (char *)__src;
              uint64_t v25 = v98;
              if (v98 != __src)
              {
                do
                {
                  uint64_t v27 = *((void *)v25 - 1);
                  v25 -= 8;
                  *((void *)v24 - 1) = v27;
                  v24 -= 8;
                }
                while (v25 != v26);
                uint64_t v25 = (char *)__src;
              }
              __src = v24;
              long long v98 = v19;
              long long v99 = &v23[8 * v22];
              if (v25) {
                operator delete(v25);
              }
            }
            else
            {
              *(void *)long long v98 = *(void *)buf;
              double v19 = v18 + 8;
            }
            long long v98 = v19;
          }
        }
        __int16 v28 = (void *)v11[1];
        if (v28)
        {
          do
          {
            double v29 = v28;
            __int16 v28 = (void *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            double v29 = (void *)v11[2];
            BOOL v30 = *v29 == (void)v11;
            uint64_t v11 = v29;
          }
          while (!v30);
        }
        uint64_t v11 = v29;
      }
      while (v29 != (void *)(a1 + 8));
    }
    int v31 = 1;
  }
  else
  {
    int v31 = 0;
    int v12 = 0;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023130F0);
  }
  __int16 v32 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    double v33 = *(double *)(a1 + 16);
    int v34 = *(_DWORD *)(a1 + 104);
    int v35 = *(unsigned __int8 *)(a1 + 109);
    uint64_t v36 = *(void *)(a3 + 4);
    uint64_t v37 = *(void *)(a3 + 12);
    uint64_t v38 = *(void *)(a3 + 20);
    *(_DWORD *)buf = 136448515;
    *(void *)&uint8_t buf[4] = "TBD";
    __int16 v119 = 2050;
    double v120 = v33;
    __int16 v121 = 2050;
    uint64_t v122 = (v98 - (unsigned char *)__src) >> 3;
    __int16 v123 = 1026;
    BOOL v124 = v12;
    __int16 v125 = 1026;
    int v126 = v31;
    __int16 v127 = 1026;
    *(_DWORD *)long long v128 = v34;
    *(_WORD *)&v128[4] = 1026;
    *(_DWORD *)&v128[6] = v35;
    __int16 v129 = 2049;
    uint64_t v130 = v36;
    __int16 v131 = 2049;
    uint64_t v132 = v37;
    __int16 v133 = 2050;
    uint64_t v134 = v38;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "@TileDl, %{public}s, checkNextEligible, tilesToDownload, %{public}lu, tilesCanBeDownloaded, %{public}lu, ncurrent, %{public}d, connectivity, %{public}d, %{public}d, %{public}d, location, %{private}0.1f, %{private}0.1f, %{public}1.f", buf, 0x56u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023130F0);
    }
    double v71 = *(double *)(a1 + 16);
    int v72 = *(_DWORD *)(a1 + 104);
    int v73 = *(unsigned __int8 *)(a1 + 109);
    uint64_t v74 = *(void *)(a3 + 4);
    uint64_t v75 = *(void *)(a3 + 12);
    uint64_t v76 = *(void *)(a3 + 20);
    int v100 = 136448515;
    long long v101 = "TBD";
    __int16 v102 = 2050;
    double v103 = v71;
    __int16 v104 = 2050;
    uint64_t v105 = (v98 - (unsigned char *)__src) >> 3;
    __int16 v106 = 1026;
    BOOL v107 = v12;
    __int16 v108 = 1026;
    int v109 = v31;
    __int16 v110 = 1026;
    *(_DWORD *)long long v111 = v72;
    *(_WORD *)&v111[4] = 1026;
    *(_DWORD *)&v111[6] = v73;
    __int16 v112 = 2049;
    uint64_t v113 = v74;
    __int16 v114 = 2049;
    uint64_t v115 = v75;
    __int16 v116 = 2050;
    uint64_t v117 = v76;
    unint64_t v77 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "TileId CLTileDownloader::downloadNextEligibleTile(CLFileDownload *, CLDaemonLocation, CFAbsoluteTime)", "%s\n", v77);
    if (v77 != buf) {
      free(v77);
    }
  }
  __int16 v39 = (uint64_t *)__src;
  double v40 = v98;
  if (__src == v98)
  {
LABEL_66:
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023130F0);
    }
    double v58 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_INFO, "@TileDl, cell, skipall", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_93;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023130F0);
    }
    LOWORD(v100) = 0;
    __int16 v59 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "TileId CLTileDownloader::downloadNextEligibleTile(CLFileDownload *, CLDaemonLocation, CFAbsoluteTime)", "%s\n", v59);
LABEL_103:
    if (v59 != buf) {
      free(v59);
    }
    goto LABEL_93;
  }
  while (1)
  {
    uint64_t v41 = *v39;
    uint64_t v42 = sub_10015EF24(*(_DWORD *)(*v39 + 48), *(void **)(a1 + 120));
    unsigned __int8 v94 = 0;
    double v43 = *(double *)(v42 + 136);
    long long v44 = *(_OWORD *)(a3 + 112);
    v92[6] = *(_OWORD *)(a3 + 96);
    v92[7] = v44;
    *(_OWORD *)uint64_t v93 = *(_OWORD *)(a3 + 128);
    *(_OWORD *)&v93[12] = *(_OWORD *)(a3 + 140);
    long long v45 = *(_OWORD *)(a3 + 48);
    v92[2] = *(_OWORD *)(a3 + 32);
    v92[3] = v45;
    long long v46 = *(_OWORD *)(a3 + 80);
    v92[4] = *(_OWORD *)(a3 + 64);
    v92[5] = v46;
    long long v47 = *(_OWORD *)(a3 + 16);
    v92[0] = *(_OWORD *)a3;
    v92[1] = v47;
    int v48 = sub_10125BB04(v41, (uint64_t)v92, v43, a5);
    unsigned __int8 v94 = v48;
    if (*(int *)(a1 + 60) > 1)
    {
      BOOL v91 = 1;
      goto LABEL_46;
    }
    if (v48) {
      break;
    }
    BOOL v91 = 0;
    if (v85) {
      goto LABEL_46;
    }
LABEL_57:
    if (++v39 == (uint64_t *)v40) {
      goto LABEL_66;
    }
  }
  int v55 = *(_DWORD *)(a1 + 56);
  BOOL v56 = v55 <= 1;
  BOOL v91 = v55 > 1;
  char v57 = v85;
  if (!v56) {
    char v57 = 1;
  }
  if ((v57 & 1) == 0) {
    goto LABEL_57;
  }
LABEL_46:
  if (*(char *)(v42 + 79) >= 0) {
    uint64_t v49 = v42 + 56;
  }
  else {
    uint64_t v49 = *(void *)(v42 + 56);
  }
  double v50 = +[NSString stringWithUTF8String:v49];
  if (!*(unsigned char *)(v42 + 80))
  {
    id v51 = +[GEOCountryConfiguration sharedConfiguration];
    if (*(char *)(v42 + 111) >= 0) {
      uint64_t v52 = v42 + 88;
    }
    else {
      uint64_t v52 = *(void *)(v42 + 88);
    }
    double v50 = [[v51 defaultForKey:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v52) defaultValue:v50];
  }
  uint64_t v53 = *(void *)(a1 + 48);
  sub_100134750(buf, (char *)[(NSString *)v50 UTF8String]);
  int v54 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, uint64_t, BOOL))(*(void *)v53 + 24))(v53, v41, buf, a2, v91);
  if (SHIBYTE(v121) < 0) {
    operator delete(*(void **)buf);
  }
  if (!v54) {
    goto LABEL_57;
  }
  (*(void (**)(uint64_t))(*(void *)(v42 + 232) + 16))(v42 + 232);
  ++*(_DWORD *)(v42 + 280);
  (*(void (**)(uint64_t))(*(void *)(v42 + 232) + 24))(v42 + 232);
  sub_100134750(buf, "startDownloading");
  if (v85) {
    int v60 = 2;
  }
  else {
    int v60 = 1;
  }
  sub_100D3B360(v42 + 232, (uint64_t *)buf, v60);
  if (SHIBYTE(v121) < 0) {
    operator delete(*(void **)buf);
  }
  if (sub_1000FC450())
  {
    sub_1000E9354(buf);
    __int16 v61 = (char *)(v41 + 8);
    if (*(char *)(v41 + 31) < 0) {
      __int16 v61 = *(char **)v61;
    }
    sub_1004D34AC((uint64_t)buf, "getTile", v61);
    sub_1000EA238((uint64_t)buf, "isCurrentTile", &v94);
    sub_1000EA238((uint64_t)buf, "isAllowCellular", &v91);
    sub_1000FC45C((uint64_t)buf, (uint64_t)"locationd");
    sub_10013F3C4(buf);
  }
  int v62 = (unsigned int *)(v41 + 48);
  long long v63 = *(_OWORD *)(v41 + 48);
  *(void *)(v84 + 16) = *(void *)(v41 + 64);
  *(_OWORD *)uint64_t v84 = v63;
  std::string::operator=((std::string *)(v84 + 24), (const std::string *)(v41 + 72));
  long long v87 = *(_OWORD *)v84;
  uint64_t v88 = *(void *)(v84 + 16);
  if (*(char *)(v84 + 47) < 0)
  {
    sub_1000DC48C(&__p, *(void **)(v84 + 24), *(void *)(v84 + 32));
  }
  else
  {
    long long __p = *(_OWORD *)(v84 + 24);
    uint64_t v90 = *(void *)(v84 + 40);
  }
  sub_10112C080((void *)a1, (unsigned int *)&v87, 1, (uint64_t)"downloading");
  if (SHIBYTE(v90) < 0) {
    operator delete((void *)__p);
  }
  *(void *)buf = v84;
  *((unsigned char *)sub_1001483A0((uint64_t **)(a1 + 24), v84, (uint64_t)&unk_101D0B290, (long long **)buf) + 88) = 1;
  *(double *)(a1 + 112) = a5;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023130F0);
  }
  long long v64 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    float v65 = sub_100147F50(*v62);
    double v66 = sub_10013DAC0(v41 + 48);
    double v67 = sub_10013DA9C(v41 + 48);
    BOOL v68 = v91;
    int v69 = v94;
    uint64_t v70 = [(NSString *)v50 UTF8String];
    *(_DWORD *)buf = 136447491;
    *(void *)&uint8_t buf[4] = v65;
    __int16 v119 = 2049;
    double v120 = v66;
    __int16 v121 = 2049;
    uint64_t v122 = *(void *)&v67;
    __int16 v123 = 1026;
    BOOL v124 = v68;
    __int16 v125 = 1026;
    int v126 = v69;
    __int16 v127 = 2081;
    *(void *)long long v128 = v70;
    _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "@TileReq, %{public}s, start, llsw, %{private}.2lf, %{private}.2lf, allowOverCellular, %{public}d, isCurrentTile, %{public}d, %{private}s", buf, 0x36u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023130F0);
    }
    long long v78 = sub_100147F50(*v62);
    double v79 = sub_10013DAC0(v41 + 48);
    double v80 = sub_10013DA9C(v41 + 48);
    BOOL v81 = v91;
    int v82 = v94;
    __int16 v83 = [(NSString *)v50 UTF8String];
    int v100 = 136447491;
    long long v101 = v78;
    __int16 v102 = 2049;
    double v103 = v79;
    __int16 v104 = 2049;
    uint64_t v105 = *(void *)&v80;
    __int16 v106 = 1026;
    BOOL v107 = v81;
    __int16 v108 = 1026;
    int v109 = v82;
    __int16 v110 = 2081;
    *(void *)long long v111 = v83;
    __int16 v59 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "TileId CLTileDownloader::downloadNextEligibleTile(CLFileDownload *, CLDaemonLocation, CFAbsoluteTime)", "%s\n", v59);
    goto LABEL_103;
  }
LABEL_93:
  if (__src)
  {
    long long v98 = (char *)__src;
    operator delete(__src);
  }
}

void sub_10112D3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  if (*(char *)(a12 + 47) < 0) {
    operator delete(*(void **)(a12 + 24));
  }
  _Unwind_Resume(a1);
}

char *sub_10112D4C8(uint64_t a1, char *__src, char *a3)
{
  int v3 = a3;
  float v4 = __src;
  int v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    double v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      sub_1001D7FD4();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      double v19 = (char *)sub_1000DA54C(a1 + 16, v18);
    }
    else {
      double v19 = 0;
    }
    uint64_t v20 = &v19[8 * v16];
    long long __p = v19;
    uint64_t v27 = v20;
    __int16 v28 = v20;
    double v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        int v23 = (char *)sub_1000DA54C(v8, v22);
        uint64_t v20 = &v23[8 * (v22 >> 2)];
        long long __p = v23;
        uint64_t v27 = v20;
        double v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        uint64_t v27 = v20;
      }
    }
    *(void *)uint64_t v20 = *(void *)v3;
    __int16 v28 = v20 + 8;
    float v4 = sub_10112FEFC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    int v9 = __src + 8;
    int v10 = v6 - 8;
    uint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)float v4 = *(void *)v3;
  }
  return v4;
}

void sub_10112D6D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10112D70C(void *a1, uint64_t a2)
{
  char v2 = a1 + 1;
  int v3 = (void *)*a1;
  if ((void *)*a1 == a1 + 1) {
    return 0;
  }
  while (sub_1001BF5C0(v3[10]) != a2)
  {
    float v5 = (void *)v3[1];
    if (v5)
    {
      do
      {
        int v6 = v5;
        float v5 = (void *)*v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        int v6 = (void *)v3[2];
        BOOL v7 = *v6 == (void)v3;
        int v3 = v6;
      }
      while (!v7);
    }
    int v3 = v6;
    if (v6 == v2) {
      return 0;
    }
  }
  return v3[10];
}

uint64_t *sub_10112D798@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t *a5@<X8>, double a6@<D0>)
{
  long long v29 = *(_OWORD *)a2;
  uint64_t v30 = *(void *)(a2 + 16);
  if (*(char *)(a2 + 47) < 0)
  {
    sub_1000DC48C(&__p, *(void **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long __p = *(_OWORD *)(a2 + 24);
    uint64_t v32 = *(void *)(a2 + 40);
  }
  sub_10112C080((void *)a1, (unsigned int *)&v29, 1, (uint64_t)"completed");
  if (SHIBYTE(v32) < 0) {
    operator delete((void *)__p);
  }
  *a5 = 0;
  if (a3)
  {
    *(void *)buf = a2;
    uint64_t v12 = sub_1008B48F0((uint64_t **)a1, a2, (uint64_t)&unk_101D0B290, (_OWORD **)buf);
    uint64_t v13 = v12[10];
    v12[10] = 0;
    *a5 = v13;
    sub_1008B46B0((uint64_t **)a1, a2);
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023130F0);
  }
  unint64_t v14 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = sub_100147F50(*(_DWORD *)a2);
    double v16 = sub_10013DAC0(a2);
    double v17 = sub_10013DA9C(a2);
    uint64_t v18 = *(void *)(a1 + 16);
    uint64_t v19 = *(void *)(a1 + 40);
    double v20 = a6 - *(double *)(a1 + 112);
    *(_DWORD *)buf = 136447747;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v48 = 2049;
    double v49 = v16;
    __int16 v50 = 2049;
    double v51 = v17;
    __int16 v52 = 1026;
    int v53 = a3;
    __int16 v54 = 2050;
    uint64_t v55 = v18;
    __int16 v56 = 2050;
    uint64_t v57 = v19;
    __int16 v58 = 2050;
    double v59 = v20;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "@TileDl, %{public}s, completed, llsw, %{private}.2lf, %{private}.2lf, success, %{public}d, nlist, %{public}ld, nstate, %{public}lu, rtt, %{public}.1f", buf, 0x44u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023130F0);
    }
    unint64_t v22 = sub_100147F50(*(_DWORD *)a2);
    double v23 = sub_10013DAC0(a2);
    double v24 = sub_10013DA9C(a2);
    uint64_t v25 = *(void *)(a1 + 16);
    uint64_t v26 = *(void *)(a1 + 40);
    double v27 = a6 - *(double *)(a1 + 112);
    int v33 = 136447747;
    int v34 = v22;
    __int16 v35 = 2049;
    double v36 = v23;
    __int16 v37 = 2049;
    double v38 = v24;
    __int16 v39 = 1026;
    int v40 = a3;
    __int16 v41 = 2050;
    uint64_t v42 = v25;
    __int16 v43 = 2050;
    uint64_t v44 = v26;
    __int16 v45 = 2050;
    double v46 = v27;
    __int16 v28 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "std::unique_ptr<CLTileFile> CLTileDownloader::downloadCompleted(TileId, BOOL, BOOL, CFAbsoluteTime)", "%s\n", v28);
    if (v28 != buf) {
      free(v28);
    }
  }
  *(void *)buf = a2;
  BOOL result = sub_1001483A0((uint64_t **)(a1 + 24), a2, (uint64_t)&unk_101D0B290, (long long **)buf);
  if (!a4 && a3) {
    result[10] = 0;
  }
  *((unsigned char *)result + 88) = 0;
  *(void *)(a1 + 112) = 0;
  return result;
}

void sub_10112DB34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  *uint64_t v19 = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10112DBA0(uint64_t a1, uint64_t a2, double a3)
{
  if (!*(unsigned char *)(a1 + 111))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023130F0);
    }
    BOOL v7 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "TileDl, preindexskip, refresh, #CloneMe", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023130F0);
      }
      LOWORD(v30) = 0;
      unint64_t v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLTileDownloader::shouldRefresh(CLTileFile *, CFAbsoluteTime)", "%s\n", v21);
      if (v21 != buf) {
        free(v21);
      }
    }
    return 0;
  }
  if (!sub_10014548C(a2)) {
    return 0;
  }
  long long v30 = *(_OWORD *)(a2 + 48);
  uint64_t v31 = *(void *)(a2 + 64);
  int v6 = (long long *)(a2 + 72);
  if (*(char *)(a2 + 95) < 0)
  {
    sub_1000DC48C(&v32, *(void **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v32 = *v6;
    uint64_t v33 = *(void *)(a2 + 88);
  }
  uint64_t v9 = sub_10015EF24(v30, *(void **)(a1 + 120));
  int v10 = sub_100147F74(*(_DWORD *)(a1 + 104), *(unsigned __int8 *)(a1 + 109));
  BOOL v11 = sub_101045914(a2, v10, a3, *(float *)(a1 + 96));
  long long v26 = *(_OWORD *)(a2 + 48);
  uint64_t v27 = *(void *)(a2 + 64);
  if (*(char *)(a2 + 95) < 0)
  {
    sub_1000DC48C(&__p, *(void **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long __p = *v6;
    uint64_t v29 = *(void *)(a2 + 88);
  }
  uint64_t v12 = sub_100144248(a1, (uint64_t)&v26);
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__p);
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023130F0);
  }
  uint64_t v13 = (void *)(a1 + 8);
  unint64_t v14 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    double v15 = sub_10013DAC0((uint64_t)&v30);
    double v16 = sub_10013DA9C((uint64_t)&v30);
    *(_DWORD *)buf = 134284289;
    *(double *)&uint8_t buf[4] = v15;
    __int16 v43 = 2049;
    double v44 = v16;
    __int16 v45 = 1026;
    BOOL v46 = v11;
    __int16 v47 = 1026;
    BOOL v48 = v13 != v12;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "@TileDl, checkRefresh, llsw, %{private}.2lf, %{private}.2lf, expired, %{public}d, onlist, %{public}d", buf, 0x22u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023130F0);
    }
    double v22 = sub_10013DAC0((uint64_t)&v30);
    double v23 = sub_10013DA9C((uint64_t)&v30);
    int v34 = 134284289;
    double v35 = v22;
    __int16 v36 = 2049;
    double v37 = v23;
    __int16 v38 = 1026;
    BOOL v39 = v11;
    __int16 v40 = 1026;
    BOOL v41 = v13 != v12;
    double v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileDownloader::shouldRefresh(CLTileFile *, CFAbsoluteTime)", "%s\n", v24);
    if (v24 != buf) {
      free(v24);
    }
  }
  int v17 = v13 != v12 || !v11;
  if ((v17 & 1) == 0)
  {
    sub_10125C090(*(_DWORD *)(v9 + 4), buf);
    sub_101045C60(*(uint64_t *)buf, a2);
    uint64_t v18 = *(void *)buf;
    *(void *)buf = 0;
    uint64_t v25 = v18;
    sub_10112BCE8(a1, &v25, (uint64_t)&v30, a3);
    if (v25) {
      (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
    }
    uint64_t v19 = *(void *)buf;
    *(void *)buf = 0;
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
  }
  uint64_t v8 = v17 ^ 1u;
  if (SHIBYTE(v33) < 0) {
    operator delete((void *)v32);
  }
  return v8;
}

void sub_10112E0D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10112E174(uint64_t a1, double a2)
{
  v53[0] = _NSConcreteStackBlock;
  v53[1] = 3221225472;
  v53[2] = sub_10112EBF8;
  v53[3] = &unk_1022F2D48;
  *(double *)&v53[4] = a2;
  v54[0] = mach_absolute_time();
  v54[1] = (uint64_t)v53;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023130F0);
  }
  float v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(a1 + 16);
    *(_DWORD *)buf = 134349056;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "@TileQueue, deleteAged, startsize, %{public}lu", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023130F0);
    }
    uint64_t v40 = *(void *)(a1 + 16);
    int v55 = 134349056;
    *(void *)__int16 v56 = v40;
    BOOL v41 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileDownloader::deleteAgedDownloads(CFAbsoluteTime)", "%s\n", v41);
    if (v41 != buf) {
      free(v41);
    }
  }
  int v6 = *(uint64_t **)a1;
  if (*(void *)a1 == a1 + 8)
  {
    int v44 = 0;
  }
  else
  {
    int v44 = 0;
    do
    {
      BOOL v7 = (uint64_t *)v6[1];
      uint64_t v8 = v6;
      if (v7)
      {
        do
        {
          uint64_t v9 = v7;
          BOOL v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v9 = (uint64_t *)v8[2];
          BOOL v10 = *v9 == (void)v8;
          uint64_t v8 = v9;
        }
        while (!v10);
      }
      uint64_t v11 = v6[10];
      long long v49 = *(_OWORD *)(v11 + 48);
      uint64_t v50 = *(void *)(v11 + 64);
      if (*(char *)(v11 + 95) < 0)
      {
        sub_1000DC48C(&v51, *(void **)(v11 + 72), *(void *)(v11 + 80));
      }
      else
      {
        long long v51 = *(_OWORD *)(v11 + 72);
        uint64_t v52 = *(void *)(v11 + 88);
      }
      long long v45 = v49;
      uint64_t v46 = v50;
      if (SHIBYTE(v52) < 0)
      {
        sub_1000DC48C(&__p, (void *)v51, *((unint64_t *)&v51 + 1));
      }
      else
      {
        long long __p = v51;
        uint64_t v48 = v52;
      }
      sub_10112C080((void *)a1, (unsigned int *)&v45, 1, (uint64_t)"aged");
      if (SHIBYTE(v48) < 0) {
        operator delete((void *)__p);
      }
      *(void *)buf = &v49;
      double v12 = *((double *)sub_1001483A0((uint64_t **)(a1 + 24), (uint64_t)&v49, (uint64_t)&unk_101D0B290, (long long **)buf)
            + 10);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023130F0);
      }
      uint64_t v13 = (unsigned int *)(v11 + 48);
      double v14 = vabdd_f64(a2, v12);
      double v15 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
      {
        double v16 = sub_100147F50(*v13);
        double v17 = sub_10013DAC0((uint64_t)&v49);
        double v18 = sub_10013DA9C((uint64_t)&v49);
        uint64_t v19 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 136447491;
        *(void *)&uint8_t buf[4] = v16;
        *(_WORD *)&unsigned char buf[12] = 2049;
        *(double *)&unsigned char buf[14] = v17;
        *(_WORD *)&buf[22] = 2049;
        double v66 = v18;
        __int16 v67 = 2050;
        double v68 = v14;
        __int16 v69 = 2050;
        double v70 = v12;
        __int16 v71 = 2050;
        uint64_t v72 = v19;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "TileQueue, %{public}s, reqage, llsw, %{private}.2lf, %{private}.2lf, age, %{public}0.1f, time, %{public}0.1f, size, %{public}lu", buf, 0x3Eu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023130F0);
        }
        long long v26 = sub_100147F50(*v13);
        double v27 = sub_10013DAC0((uint64_t)&v49);
        double v28 = sub_10013DA9C((uint64_t)&v49);
        uint64_t v29 = *(void *)(a1 + 40);
        int v55 = 136447491;
        *(void *)__int16 v56 = v26;
        *(_WORD *)&v56[8] = 2049;
        *(double *)&v56[10] = v27;
        __int16 v57 = 2049;
        double v58 = v28;
        __int16 v59 = 2050;
        double v60 = v14;
        __int16 v61 = 2050;
        double v62 = v12;
        __int16 v63 = 2050;
        uint64_t v64 = v29;
        long long v30 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileDownloader::deleteAgedDownloads(CFAbsoluteTime)", "%s\n", v30);
        if (v30 != buf) {
          free(v30);
        }
      }
      if (v14 >= *(double *)(a1 + 80))
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023130F0);
        }
        uint64_t v20 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v21 = sub_100147F50(*v13);
          double v22 = sub_10013DAC0(v11 + 48);
          double v23 = sub_10013DA9C(v11 + 48);
          uint64_t v24 = *(void *)(a1 + 16) - 1;
          *(_DWORD *)buf = 136446979;
          *(void *)&uint8_t buf[4] = v21;
          *(_WORD *)&unsigned char buf[12] = 2049;
          *(double *)&unsigned char buf[14] = v22;
          *(_WORD *)&buf[22] = 2049;
          double v66 = v23;
          __int16 v67 = 2050;
          double v68 = *(double *)&v24;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "@TileReq, %{public}s, rmlist, llsw, %{private}.2lf, %{private}.2lf, aged, size, %{public}ld", buf, 0x2Au);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1023130F0);
          }
          uint64_t v31 = sub_100147F50(*v13);
          double v32 = sub_10013DAC0(v11 + 48);
          double v33 = sub_10013DA9C(v11 + 48);
          uint64_t v34 = *(void *)(a1 + 16) - 1;
          int v55 = 136446979;
          *(void *)__int16 v56 = v31;
          *(_WORD *)&v56[8] = 2049;
          *(double *)&v56[10] = v32;
          __int16 v57 = 2049;
          double v58 = v33;
          __int16 v59 = 2050;
          double v60 = *(double *)&v34;
          double v35 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileDownloader::deleteAgedDownloads(CFAbsoluteTime)", "%s\n", v35);
          if (v35 != buf) {
            free(v35);
          }
        }
        sub_101048104(v11);
        sub_1000F0A30((uint64_t **)a1, v6);
        sub_1008B4638((uint64_t)(v6 + 4));
        operator delete(v6);
        *(void *)buf = &v49;
        uint64_t v25 = sub_1001483A0((uint64_t **)(a1 + 24), (uint64_t)&v49, (uint64_t)&unk_101D0B290, (long long **)buf);
        v25[10] = 0;
        *((unsigned char *)v25 + 88) = 0;
        ++v44;
      }
      if (SHIBYTE(v52) < 0) {
        operator delete((void *)v51);
      }
      int v6 = v9;
    }
    while (v9 != (uint64_t *)(a1 + 8));
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023130F0);
  }
  __int16 v36 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v37 = *(void *)(a1 + 16);
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)&uint8_t buf[4] = v44;
    *(_WORD *)&uint8_t buf[8] = 2050;
    *(void *)&buf[10] = v37;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "@TileQueue, deleteAged, %{public}d, endsize, %{public}lu", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023130F0);
    }
    uint64_t v42 = *(void *)(a1 + 16);
    int v55 = 67240448;
    *(_DWORD *)__int16 v56 = v44;
    *(_WORD *)&v56[4] = 2050;
    *(void *)&v56[6] = v42;
    __int16 v43 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileDownloader::deleteAgedDownloads(CFAbsoluteTime)", "%s\n", v43);
    if (v43 != buf) {
      free(v43);
    }
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102313130);
  }
  __int16 v38 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v44;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Finished CLTilesDownloader::deleteAgedDownloads\", \"deleted\":%{public}u}", buf, 0x18u);
  }
  return sub_1000E0900(v54);
}

void sub_10112EB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
}

void sub_10112EBF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = sub_1000D3D90(a3 - a2);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102313130);
  }
  BOOL v7 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    v9[0] = 68290306;
    v9[1] = 0;
    __int16 v10 = 2082;
    uint64_t v11 = "";
    __int16 v12 = 2082;
    uint64_t v13 = "elapsed";
    __int16 v14 = 2050;
    uint64_t v15 = a2;
    __int16 v16 = 2050;
    uint64_t v17 = a3;
    __int16 v18 = 2050;
    double v19 = v6;
    __int16 v20 = 2050;
    uint64_t v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLTileDownloader::deleteAgedDownloadItems\", \"event\":%{public, location:escape_only}s, \"begin_mach\":%{public}llu, \"end_mach\":%{public}llu, \"elapsed_s\":\"%{public}.09f\", \"now_s\":\"%{public}.09f\"}", (uint8_t *)v9, 0x44u);
  }
}

uint64_t *sub_10112ED30(uint64_t a1)
{
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_10112EFF0;
  v13[3] = &unk_1022F2D48;
  v13[4] = a1;
  v14[0] = mach_absolute_time();
  v14[1] = (uint64_t)v13;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023130F0);
  }
  char v2 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 16);
    *(_DWORD *)buf = 134217984;
    uint64_t v18 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "@TileQueue, cancelAll, size, %lu", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023130F0);
    }
    uint64_t v11 = *(void *)(a1 + 16);
    int v15 = 134217984;
    uint64_t v16 = v11;
    __int16 v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileDownloader::cancelAllDownloads()", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  float v4 = (void *)(a1 + 8);
  uint64_t v5 = *(void **)a1;
  if (*(void *)a1 != a1 + 8)
  {
    do
    {
      uint64_t v6 = v5[10];
      sub_101048104(v6);
      sub_10104842C(v6);
      BOOL v7 = (void *)v5[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          BOOL v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v5[2];
          BOOL v9 = *v8 == (void)v5;
          uint64_t v5 = v8;
        }
        while (!v9);
      }
      uint64_t v5 = v8;
    }
    while (v8 != v4);
  }
  *(void *)(a1 + 112) = 0;
  sub_1008B4894(a1, *(void **)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = v4;
  sub_10014F400(a1 + 24, *(char **)(a1 + 32));
  *(void *)(a1 + 24) = a1 + 32;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = 0;
  return sub_1000E0900(v14);
}

void sub_10112EFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1000E0900((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10112EFF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  double v6 = sub_1000D3D90(a3 - a2);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102313130);
  }
  BOOL v7 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(void *)(v5 + 16);
    v9[0] = 68290307;
    v9[1] = 0;
    __int16 v10 = 2082;
    uint64_t v11 = "";
    __int16 v12 = 2082;
    uint64_t v13 = "elapsed";
    __int16 v14 = 2050;
    uint64_t v15 = a2;
    __int16 v16 = 2050;
    uint64_t v17 = a3;
    __int16 v18 = 2050;
    double v19 = v6;
    __int16 v20 = 2049;
    uint64_t v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLTileDownloader::cancelAllDownloads\", \"event\":%{public, location:escape_only}s, \"begin_mach\":%{public}llu, \"end_mach\":%{public}llu, \"elapsed_s\":\"%{public}.09f\", \"planned\":%{private}lu}", (uint8_t *)v9, 0x44u);
  }
}

void sub_10112F12C(uint64_t a1, double a2)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023130F0);
  }
  float v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(a1 + 16);
    int v6 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)buf = 134349312;
    *(void *)&uint8_t buf[4] = v5;
    __int16 v42 = 1026;
    LODWORD(v43) = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TileQueue, cleanupList, start, size, %{public}lu, thresh, %{public}d", buf, 0x12u);
  }
  uint64_t v40 = a1;
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023130F0);
    }
    double v35 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileDownloader::cleanupDownloadList(CFAbsoluteTime)", "%s\n", v35);
    if (v35 != buf) {
      free(v35);
    }
  }
  if (*(void *)(a1 + 16) >= (unint64_t)*(int *)(a1 + 76)) {
    sub_10112ED30(a1);
  }
  BOOL v7 = *(uint64_t **)a1;
  BOOL v39 = (uint64_t *)(a1 + 8);
  if (*(void *)a1 != a1 + 8)
  {
    int v37 = 0;
    uint64_t v8 = (uint64_t **)(a1 + 24);
    __int16 v38 = (void *)(a1 + 32);
    while (1)
    {
      BOOL v9 = v7;
      __int16 v10 = (uint64_t *)v7[1];
      uint64_t v11 = v7;
      if (v10)
      {
        do
        {
          BOOL v7 = v10;
          __int16 v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          BOOL v7 = (uint64_t *)v11[2];
          BOOL v12 = *v7 == (void)v11;
          uint64_t v11 = v7;
        }
        while (!v12);
      }
      uint64_t v13 = v9[10];
      __int16 v14 = (unsigned int *)(v13 + 48);
      uint64_t v15 = sub_10015EF24(*(_DWORD *)(v13 + 48), *(void **)(a1 + 120));
      BOOL v16 = sub_10013D858(v15 + 184, (unsigned int *)(v13 + 48));
      BOOL v17 = v16 && sub_100147F80(v40, v13, a2);
      if (v38 == sub_100144248((uint64_t)v8, (uint64_t)v14))
      {
        *(void *)buf = v13 + 48;
        __int16 v18 = sub_1001483A0(v8, (uint64_t)v14, (uint64_t)&unk_101D0B290, (long long **)buf);
        if (*((unsigned char *)v18 + 88)) {
          char v19 = 1;
        }
        else {
          char v19 = v17;
        }
        if ((v19 & 1) == 0 && (v16 & sub_10014548C(v13)) == 1)
        {
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1023130F0);
          }
          __int16 v20 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v21 = sub_100147F50(*v14);
            double v22 = sub_10013DAC0((uint64_t)v14);
            double v23 = sub_10013DA9C((uint64_t)v14);
            uint64_t v24 = *(void *)(v40 + 16) - 1;
            *(_DWORD *)buf = 136446979;
            *(void *)&uint8_t buf[4] = v21;
            __int16 v42 = 2049;
            double v43 = v22;
            __int16 v44 = 2049;
            double v45 = v23;
            __int16 v46 = 2050;
            *(void *)__int16 v47 = v24;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "@TileReq, %{public}s, rmlist, llsw, %{private}.2lf, %{private}.2lf, aged, size, %{public}ld", buf, 0x2Au);
          }
          a1 = v40;
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_1023130F0);
            }
            sub_100147F50(*v14);
            sub_10013DAC0((uint64_t)v14);
            sub_10013DA9C((uint64_t)v14);
            double v32 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileDownloader::cleanupDownloadList(CFAbsoluteTime)", "%s\n", v32);
            if (v32 != buf) {
              free(v32);
            }
            a1 = v40;
          }
          sub_1000F0A30((uint64_t **)a1, v9);
          sub_1008B4638((uint64_t)(v9 + 4));
          operator delete(v9);
          v18[10] = 0;
          ++v37;
          goto LABEL_36;
        }
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023130F0);
        }
        uint64_t v25 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
        {
          long long v26 = sub_100147F50(*(_DWORD *)(v13 + 48));
          double v27 = sub_10013DAC0((uint64_t)v14);
          double v28 = sub_10013DA9C((uint64_t)v14);
          int v29 = *((unsigned __int8 *)v18 + 88);
          BOOL v30 = sub_10014548C(v13);
          *(_DWORD *)buf = 136447747;
          *(void *)&uint8_t buf[4] = v26;
          __int16 v42 = 2049;
          double v43 = v27;
          __int16 v44 = 2049;
          double v45 = v28;
          __int16 v46 = 1026;
          *(_DWORD *)__int16 v47 = v29;
          *(_WORD *)&v47[4] = 1026;
          *(_DWORD *)&v47[6] = v17;
          __int16 v48 = 1026;
          int v49 = !v30;
          __int16 v50 = 1026;
          int v51 = !v16;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "@TileReq, %{public}s, keeplist, llsw, %{private}.2lf, %{private}.2lf, reasons, dl, %{public}d, retry, %{public}d, onserver, %{public}d, ondisc, %{public}d", buf, 0x38u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1023130F0);
          }
          sub_100147F50(*(_DWORD *)(v13 + 48));
          sub_10013DAC0((uint64_t)v14);
          sub_10013DA9C((uint64_t)v14);
          sub_10014548C(v13);
          uint64_t v31 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileDownloader::cleanupDownloadList(CFAbsoluteTime)", "%s\n", v31);
          if (v31 != buf) {
            free(v31);
          }
        }
      }
      a1 = v40;
LABEL_36:
      if (v7 == v39) {
        goto LABEL_48;
      }
    }
  }
  int v37 = 0;
LABEL_48:
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023130F0);
  }
  double v33 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v34 = *(void *)(a1 + 16);
    *(_DWORD *)buf = 134349312;
    *(void *)&uint8_t buf[4] = v34;
    __int16 v42 = 1026;
    LODWORD(v43) = v37;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "TileQueue, cleanupList, done, size, %{public}lu, cleanedFiles, %{public}u", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023130F0);
    }
    __int16 v36 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileDownloader::cleanupDownloadList(CFAbsoluteTime)", "%s\n", v36);
    if (v36 != buf) {
      free(v36);
    }
  }
}

void sub_10112FA4C(uint64_t a1, int a2)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1023130F0);
  }
  float v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    int v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TileQueue, setReach, %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023130F0);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileDownloader::setReachability(CLDaemonStatus_Type::Reachability)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  *(_DWORD *)(a1 + 104) = a2;
}

uint64_t sub_10112FC00(uint64_t a1, char a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48));
  if (result) {
    *(unsigned char *)(a1 + 109) = a2;
  }
  return result;
}

void sub_10112FC54(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0 && !*(unsigned char *)(a1 + 111))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1023130F0);
    }
    float v4 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TileQueue, firstUnlock", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023130F0);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileDownloader::setLockState(BOOL)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    *(unsigned char *)(a1 + 111) = 1;
  }
  *(unsigned char *)(a1 + 110) = a2;
}

void sub_10112FE04(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_10112FE34(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10112FE64(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_10112FE94(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
  uint64_t v4 = a1 + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_1000DC48C((unsigned char *)v4, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *(void *)(v4 + 16) = *((void *)a2 + 5);
    *(_OWORD *)uint64_t v4 = v5;
  }
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  return a1;
}

char *sub_10112FEFC(void **a1, uint64_t a2, char *__src)
{
  long long v5 = *(char **)(a2 + 8);
  int v6 = (char *)*a1;
  int v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    int v7 = *(char **)(a2 + 8);
    do
    {
      uint64_t v9 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  __int16 v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    int v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  uint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  __int16 v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

uint64_t sub_10112FFC4()
{
  sub_100134750(qword_102485970, "t");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102485970, (void *)&_mh_execute_header);
}

uint64_t sub_101130024(uint64_t a1, int a2)
{
  sub_100134750(__p, "");
  sub_1011301C4(a1, "CLElevationRecorderDb", a2, (uint64_t)__p, 1, 2.56);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = off_102313160;
  *(void *)(a1 + 72) = off_102313210;
  sub_100F03BA0((void *)(a1 + 368), 0, 0);
  sub_100F03BA0((void *)(a1 + 384), 0, 0);
  sub_100F03BA0((void *)(a1 + 400), 0, 0);
  sub_100F03BA0((void *)(a1 + 416), 0, 0);
  sub_100F03BA0((void *)(a1 + 432), 0, 0);
  sub_100F03BA0((void *)(a1 + 448), 0, 0);
  sub_100F03BA0((void *)(a1 + 464), 0, 0);
  sub_100F03BA0((void *)(a1 + 480), 0, 0);
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(void *)(a1 + 536) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 544) = 0x7FEFFFFFFFFFFFFFLL;
  (*(void (**)(uint64_t))(*(void *)a1 + 112))(a1);
  return a1;
}

void sub_101130198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011301C4(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  int64_t v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022B2C20;
  sub_1003BDF2C((void *)(a1 + 8));
  *int64_t v12 = &off_1022B2C68;
  *(void *)a1 = off_102313440;
  *(void *)(a1 + 72) = off_1023134E8;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_102313440;
  *(void *)(a1 + 72) = off_1023134E8;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 288) = 12000;
  *(void *)(a1 + 296) = off_1022B2C20;
  sub_1003BDF2C((void *)(a1 + 304));
  *(void *)(a1 + 304) = &off_1022B2C68;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 248) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_1011305D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  *double v27 = v30;
  sub_1003BE1F8(v31);
  sub_100507624(v29);
  sub_1011F8AE0(v28);
  *uint64_t v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_101130668()
{
}

void *sub_101130670(void *a1)
{
  *a1 = off_102313440;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_1023134E8;
  a1[37] = off_1022B2C20;
  sub_1003BE1F8(a1 + 38);
  sub_100507624(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022B2C20;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void *sub_101130730(void *a1)
{
  *a1 = off_102313160;
  a1[9] = off_102313210;
  sub_1011307B0((uint64_t)a1, 0, 0);

  return sub_101130670(a1);
}

void sub_1011307B0(uint64_t a1, void *a2, const void *a3)
{
  if ((a2 != 0) == (a3 != 0))
  {

    *(void *)(a1 + 496) = a2;
    char v6 = *(const void **)(a1 + 504);
    if (v6) {
      _Block_release(v6);
    }
    if (a3) {
      *(void *)(a1 + 504) = _Block_copy(a3);
    }
  }
  else
  {
    uint64_t v7 = sub_101AA2F68();
    sub_101130828(v7);
  }
}

void *sub_10113082C(uint64_t a1)
{
  return sub_101130730((void *)(a1 - 72));
}

void sub_101130834(void *a1)
{
  sub_101130730(a1);

  operator delete();
}

void sub_10113086C(uint64_t a1)
{
  sub_101130730((void *)(a1 - 72));

  operator delete();
}

uint64_t sub_1011308A8(uint64_t *a1, uint64_t a2)
{
  long long v5 = a1 + 14;
  uint64_t v4 = a1[14];
  v16[1] = (uint64_t)(a1 + 14);
  (*(void (**)(uint64_t *))(v4 + 16))(a1 + 14);
  __int16 v17 = 256;
  if (*(double *)(*(void *)(a2 + 8) - 16) == 1.79769313e308)
  {
    if (sub_100082064(a1 + 9))
    {
      sub_1000E1294((uint64_t *)buf, (uint64_t)"CLElevationRecorderDb.aggregateRecords", 0);
      sub_10002B640(a1[10]);
      double Current = CFAbsoluteTimeGetCurrent();
      sub_100082068(a1 + 50, v16);
      uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(v16[0]);
      if (sub_100055D58(v7, 1, Current - *(double *)(*(void *)(a2 + 8) - 24)))
      {
        uint64_t v8 = a1[10];
        uint64_t v9 = (sqlite3_stmt *)sub_10014D19C(v16[0]);
        sub_10001FEB0(v8, v9);
      }
      sub_100028FB4(a1[10]);
      uint64_t v10 = a1[10];
      if (*(uint64_t *)(v10 + 88) <= 0) {
        uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v11 = *(void *)(v10 + 88);
      }
      sub_10003CC68(v10, v11);
      uint64_t v12 = v16[0];
      v16[0] = 0;
      if (v12) {
        (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      }
      sub_1000E1098(buf);
    }
  }
  else
  {
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_1023132A0);
    }
    uint64_t v13 = qword_1024190D8;
    if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Programmer error, we expect an expiration record!", (uint8_t *)buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_1023132A0);
      }
      LOWORD(v16[0]) = 0;
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual long CLElevationRecorderDb::aggregateRecords(const CLAggregationRules &)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  (*(void (**)(uint64_t *))(*v5 + 24))(v5);
  return 0;
}

void sub_101130B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101130BF0()
{
}

uint64_t sub_101130BF8(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t sub_101130C18(uint64_t a1, void **a2, double a3, double a4)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    sub_100082068((void *)(a1 + 368), &v11);
    uint64_t v9 = (sqlite3_stmt *)sub_10014D19C(v11);
    if (sub_100055D58(v9, 1, a3))
    {
      uint64_t v10 = (sqlite3_stmt *)sub_10014D19C(v11);
      if (sub_100055D58(v10, 2, a4)) {
        sub_101130CF8(a1, &v11, a2);
      }
    }
    uint64_t result = v11;
    uint64_t v11 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_101130CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101130CF8(uint64_t a1, uint64_t *a2, void **a3)
{
  sub_10002B640(*(void *)(a1 + 80));
  *(void *)src = 0;
  uint64_t v33 = 0;
  sub_100652E3C(a1, src);
  for (; !sub_10008224C(a2, (uint64_t)&v28); a3[1] = v11)
  {
    uuid_copy((unsigned __int8 *)&v28 + 4, src);
    char v6 = a3[1];
    unint64_t v7 = (unint64_t)a3[2];
    if ((unint64_t)v6 >= v7)
    {
      uint64_t v12 = ((char *)v6 - (unsigned char *)*a3) >> 6;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 58) {
        sub_1001D7FD4();
      }
      uint64_t v14 = v7 - (void)*a3;
      if (v14 >> 5 > v13) {
        unint64_t v13 = v14 >> 5;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFC0) {
        unint64_t v15 = 0x3FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15) {
        uint64_t v16 = (char *)sub_10017EAF0((uint64_t)(a3 + 2), v15);
      }
      else {
        uint64_t v16 = 0;
      }
      __int16 v17 = &v16[64 * v12];
      long long v18 = v28;
      long long v19 = v29;
      long long v20 = v31;
      *((_OWORD *)v17 + 2) = v30;
      *((_OWORD *)v17 + 3) = v20;
      *(_OWORD *)__int16 v17 = v18;
      *((_OWORD *)v17 + 1) = v19;
      double v22 = (char *)*a3;
      uint64_t v21 = (char *)a3[1];
      double v23 = v17;
      if (v21 != *a3)
      {
        do
        {
          long long v24 = *((_OWORD *)v21 - 4);
          long long v25 = *((_OWORD *)v21 - 3);
          long long v26 = *((_OWORD *)v21 - 1);
          *((_OWORD *)v23 - 2) = *((_OWORD *)v21 - 2);
          *((_OWORD *)v23 - 1) = v26;
          *((_OWORD *)v23 - 4) = v24;
          *((_OWORD *)v23 - 3) = v25;
          v23 -= 64;
          v21 -= 64;
        }
        while (v21 != v22);
        uint64_t v21 = (char *)*a3;
      }
      uint64_t v11 = v17 + 64;
      *a3 = v23;
      a3[1] = v17 + 64;
      a3[2] = &v16[64 * v15];
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      long long v8 = v28;
      long long v9 = v29;
      long long v10 = v31;
      v6[2] = v30;
      void v6[3] = v10;
      *char v6 = v8;
      v6[1] = v9;
      uint64_t v11 = v6 + 4;
    }
  }
  return sub_100028FB4(*(void *)(a1 + 80));
}

uint64_t sub_101130EBC(uint64_t a1, int a2, int a3, void **a4, double a5, double a6)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    sub_100082068((void *)(a1 + 480), &v17);
    unint64_t v13 = (sqlite3_stmt *)sub_10014D19C(v17);
    if (sub_100055D58(v13, 1, a5))
    {
      uint64_t v14 = (sqlite3_stmt *)sub_10014D19C(v17);
      if (sub_100055D58(v14, 2, a6))
      {
        unint64_t v15 = (sqlite3_stmt *)sub_10014D19C(v17);
        if (sub_10014D1A4(v15, 3, a2))
        {
          uint64_t v16 = (sqlite3_stmt *)sub_10014D19C(v17);
          if (sub_10014D1A4(v16, 4, a3)) {
            sub_101130CF8(a1, &v17, a4);
          }
        }
      }
    }
    uint64_t result = v17;
    uint64_t v17 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_101130FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_101130FDC(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 104))(a1) == 0;
}

double sub_10113101C(uint64_t a1)
{
  *(void *)(a1 + 528) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 512) = 0u;
  *(void *)(a1 + 536) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 544) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  return result;
}

void sub_101131040(uint64_t *a1)
{
  if (sub_10014C3C0(a1[10]))
  {
    sub_1011312A8((uint64_t)a1);
    sub_1005F7B0C(a1[10], "ElevationHistory", (const char **)&off_1023132E0, (const std::string::value_type **)&off_102476030, 0);
    a1[46] = sub_100601D1C(a1[10], (uint64_t)"SELECT * FROM ElevationHistory WHERE ? <= startTime AND endTime <= ? ORDER BY startTime ASC");
    a1[47] = v2;
    a1[48] = sub_100601D1C(a1[10], (uint64_t)"SELECT * FROM ElevationHistory ORDER BY startTime ASC");
    a1[49] = v3;
    a1[50] = sub_100601D1C(a1[10], (uint64_t)"DELETE FROM ElevationHistory WHERE startTime < ?");
    a1[51] = v4;
    a1[52] = sub_100601D1C(a1[10], (uint64_t)"DELETE FROM ElevationHistory");
    a1[53] = v5;
    a1[54] = sub_100601D1C(a1[10], (uint64_t)"INSERT INTO ElevationHistory (startTime, endTime, elevationAscended, elevationDescended, pressure) VALUES (?, ?, ?, ?, ?)");
    a1[55] = v6;
    a1[56] = sub_100601D1C(a1[10], (uint64_t)"SELECT * FROM ElevationHistory ORDER BY startTime DESC LIMIT 1");
    a1[57] = v7;
    a1[58] = sub_100601D1C(a1[10], (uint64_t)"UPDATE ElevationHistory SET startTime = startTime + ?, endTime = endTime + ?");
    a1[59] = v8;
    a1[60] = sub_100601D1C(a1[10], (uint64_t)"SELECT * FROM ElevationHistory WHERE ? <= startTime AND endTime <= ? AND ? <= id ORDER BY startTime ASC LIMIT ?");
    a1[61] = v9;
  }
  else
  {
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_1023132A0);
    }
    long long v10 = qword_1024190D8;
    if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Device is locked and we are unable to open the database", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_1023132A0);
      }
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLElevationRecorderDb::prepareSQLStatements()", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
}

void sub_1011312A8(uint64_t a1)
{
  if (sub_1005F93E4(*(void *)(a1 + 80), "ElevationHistory"))
  {
    uint64_t v4 = "pressure";
    int v5 = 5;
    __int16 v6 = 0;
    char v7 = 0;
    char v8 = 0;
    sub_1005FEC4C(*(void *)(a1 + 80), "ElevationHistory", (uint64_t)"pressure", (uint64_t)&v4);
  }
  if (qword_1024190D0 != -1) {
    dispatch_once(&qword_1024190D0, &stru_1023132A0);
  }
  uint64_t v2 = qword_1024190D8;
  if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "ElevationHistory table doesn't even exist", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_1023132A0);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLElevationRecorderDb::alterTableIfNecessary()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
}

void sub_1011318C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a20);
  if (v62) {
    (*(void (**)(uint64_t))(*(void *)v62 + 8))(v62);
  }
  sub_101A129A8((uint64_t)&a62);
  _Unwind_Resume(a1);
}

uint64_t sub_101131978(uint64_t a1, void *a2)
{
  if (!sub_1005F9734(*(void *)(a1 + 80), (char *)a2))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102313528);
    }
    uint64_t v4 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102313528);
      }
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      long long v20 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<CLSignificantElevation>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = CLSignificantElevation, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", (const char *)v20);
      if (v20 != buf) {
        free(v20);
      }
    }
    memset(__p, 0, 24);
    sub_100134750(buf, (char *)a2);
    int v5 = std::string::append(buf, "AutoIncr");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    int64_t v22 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v21 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_100134750(buf, (char *)a2);
    char v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_10002B640(*(void *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0) {
      size_t v8 = HIBYTE(__p[2]);
    }
    else {
      size_t v8 = (size_t)__p[1];
    }
    uint64_t v9 = buf;
    sub_1001110E4((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0) {
        long long v10 = __p;
      }
      else {
        long long v10 = (void **)__p[0];
      }
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v22 >= 0) {
      uint64_t v11 = v21;
    }
    else {
      uint64_t v11 = (void **)v21[0];
    }
    if (v22 >= 0) {
      std::string::size_type v12 = HIBYTE(v22);
    }
    else {
      std::string::size_type v12 = (std::string::size_type)v21[1];
    }
    unint64_t v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    uint64_t v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v23.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    char v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = v14;
    __p[1] = v23.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v23.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      char v15 = HIBYTE(__p[2]);
      uint64_t v14 = __p[0];
    }
    if (v15 >= 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)v14;
    }
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)v16);
  }
  uint64_t v17 = *(void *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0) {
    uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v18 = *(void *)(v17 + 88);
  }
  sub_10003CC68(v17, v18);
  return 0;
}

void sub_101132BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_101132F04(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    sub_100082068((void *)(a1 + 416), &v7);
    uint64_t v3 = *(void *)(a1 + 80);
    uint64_t v4 = (sqlite3_stmt *)sub_10014D19C(v7);
    sub_10001FEB0(v3, v4);
    uint64_t v5 = *(void *)(a1 + 80);
    if (*(uint64_t *)(v5 + 88) <= 0) {
      uint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v6 = *(void *)(v5 + 88);
    }
    sub_10003CC68(v5, v6);
    uint64_t result = v7;
    uint64_t v7 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_101132FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101132FC0(uint64_t a1)
{
  return sub_101132F04(a1 - 72);
}

uint64_t sub_101132FCC(uint64_t a1, double a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    sub_100082068((void *)(a1 + 464), &v11);
    uint64_t v5 = (sqlite3_stmt *)sub_10014D19C(v11);
    if (sub_100055D58(v5, 1, a2) && (uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(v11), sub_100055D58(v6, 2, a2)))
    {
      uint64_t v7 = *(void *)(a1 + 80);
      size_t v8 = (sqlite3_stmt *)sub_10014D19C(v11);
      sub_10001FEB0(v7, v8);
    }
    else
    {
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_1023132A0);
      }
      uint64_t v9 = qword_1024190D8;
      if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Failed to shift records.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190D0 != -1) {
          dispatch_once(&qword_1024190D0, &stru_1023132A0);
        }
        long long v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLElevationRecorderDb::shiftRecordsByUL(CFTimeInterval)", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
    }
    uint64_t result = v11;
    uint64_t v11 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_1011331F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101133240(uint64_t a1, void **a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    sub_100082068((void *)(a1 + 384), &v5);
    sub_101130CF8(a1, &v5, a2);
    uint64_t result = v5;
    uint64_t v5 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_1011332C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011332E0(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v11);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if (HIBYTE(v12)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101AA30F4(v2);
    __break(1u);
  }
  uint64_t v9 = v11[1];
  operator delete(v11[0]);
  if (!v9) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v11);
    uint64_t v3 = sub_100132EFC(&v12, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(v13, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v4 = v13;
    }
    else {
      uint64_t v4 = (void **)v13[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)v13[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
    if ((char)v14 < 0) {
      operator delete(v13[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      size_t v8 = v13;
    }
    else {
      size_t v8 = (void **)v13[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_10113372C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (*(char *)(v3 - 145) < 0) {
    operator delete(*(void **)(v3 - 168));
  }
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1011337B4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_101134EB4(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102313528);
  }
  uint64_t v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)unint64_t v13 = 0;
    *(_WORD *)&v13[4] = 2082;
    *(void *)&v13[6] = "";
    __int16 v14 = 2082;
    char v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102313528);
    }
    uint64_t v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(void *)unint64_t v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102313528);
      }
      long long v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLSignificantElevation>::setDatabaseAccessible() [T = CLSignificantElevation, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_101133F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101133F3C(uint64_t a1)
{
  return sub_1011337B4(a1 - 72);
}

void sub_101133F44(id a1)
{
  qword_1024190D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

void sub_101133F74(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_101133FA4(void *a1, void *a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v13);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    if (HIBYTE(v14)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101AA3264(v4);
    __break(1u);
  }
  uint64_t v12 = v13[1];
  operator delete(v13[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    a2[1] = *a2;
    sub_10010F274((uint64_t)v13);
    uint64_t v6 = sub_100132EFC(&v14, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(v15, a1);
    if ((v16 & 0x80u) == 0) {
      uint64_t v7 = v15;
    }
    else {
      uint64_t v7 = (void **)v15[0];
    }
    if ((v16 & 0x80u) == 0) {
      uint64_t v8 = v16;
    }
    else {
      uint64_t v8 = (uint64_t)v15[1];
    }
    uint64_t v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v16 < 0) {
      operator delete(v15[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v16 & 0x80u) == 0) {
      uint64_t v11 = v15;
    }
    else {
      uint64_t v11 = (void **)v15[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_1011343A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101134430(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    unint64_t v13 = (_Unwind_Exception *)sub_101AA33D4(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  uint64_t v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    uint64_t v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    uint64_t v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_1011347A4(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101AA3544(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    uint64_t v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    uint64_t v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      uint64_t v9 = __p;
    }
    else {
      uint64_t v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_101134AD0(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101AA36B4(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    uint64_t v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_101134DF4(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_101134E24(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

void sub_101134EB4(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_101134F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101134F50(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_101134F80(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  *(void *)a1 = off_102313578;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = *a3;
  uint64_t v8 = a3[1];
  *(void *)(a1 + 24) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 32) = *a7;
  uint64_t v9 = a7[1];
  *(void *)(a1 + 40) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 48) = *a4;
  uint64_t v10 = a4[1];
  *(void *)(a1 + 56) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 64) = *a5;
  uint64_t v11 = a5[1];
  *(void *)(a1 + 72) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 80) = *a6;
  uint64_t v12 = a6[1];
  *(void *)(a1 + 88) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *(_WORD *)(a1 + 96) = 256;
  unsigned __int8 v13 = (unsigned char *)(a1 + 96);
  *(void *)(a1 + 104) = qword_102476048;
  unsigned __int8 v14 = (uint64_t *)(a1 + 104);
  *(unsigned char *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0xBFF0000000000000;
  *(_WORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 132) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 168) = 0xFFFF00000000;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 192) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 208) = _Q1;
  *(_OWORD *)(a1 + 224) = _Q1;
  *(_OWORD *)(a1 + 240) = _Q1;
  *(_DWORD *)(a1 + 256) = 0;
  *(void *)(a1 + 260) = 0xBFF0000000000000;
  *(void *)(a1 + 268) = 0;
  *(void *)(a1 + 276) = 0;
  *(_DWORD *)(a1 + 284) = 0;
  *(void *)(a1 + 288) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 296) = 0x7FFFFFFF;
  *(void *)(a1 + 308) = 0;
  *(void *)(a1 + 316) = 0;
  *(void *)(a1 + 300) = 0;
  *(unsigned char *)(a1 + 324) = 0;
  *(void *)(a1 + 328) = 0;
  long long v20 = (_OWORD *)(a1 + 328);
  *(void *)(a1 + 336) = 0;
  sub_100EBBEB0(a1 + 344, (uint64_t)"ProactiveHarvest", a1, 3600.0);
  uint64_t v21 = (unsigned char *)(a1 + 97);
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 56))(*(void *)(a1 + 16), a1 + 97) & 1) == 0) {
    *uint64_t v21 = 1;
  }
  uint64_t v22 = *(void *)(a1 + 16);
  sub_100134750(&__p, "ProactiveTimer");
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472;
  v32[2] = sub_101135598;
  v32[3] = &unk_1022A3020;
  void v32[4] = a1;
  (*(void (**)(long long *__return_ptr, uint64_t, void **, void *, double, double))(*(void *)v22 + 88))(&v33, v22, &__p, v32, 1.79769313e308, 1.79769313e308);
  long long v23 = v33;
  long long v33 = 0uLL;
  long long v24 = *(std::__shared_weak_count **)(a1 + 336);
  *long long v20 = v23;
  if (v24)
  {
    sub_1000DB0A0(v24);
    if (*((void *)&v33 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v33 + 1));
    }
  }
  if (SHIBYTE(v38) < 0) {
    operator delete(__p);
  }
  if (!(*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 16) + 96))(*(void *)(a1 + 16), a1 + 104))goto LABEL_23; {
  if (qword_102419560 != -1)
  }
    dispatch_once(&qword_102419560, &stru_102313648);
  long long v25 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    long long __p = (void *)68289026;
    __int16 v35 = 2082;
    __int16 v36 = "";
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#proactive battery level overwritten by network default\"}", (uint8_t *)&__p, 0x12u);
LABEL_23:
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102313648);
    }
  }
  long long v26 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    int v27 = *v21;
    uint64_t v28 = *v14;
    long long __p = (void *)68289539;
    __int16 v35 = 2082;
    __int16 v36 = "";
    __int16 v37 = 1025;
    int v38 = v27;
    __int16 v39 = 2049;
    uint64_t v40 = v28;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#proactive policy constructor\", \"isProactiveAllowed\":%{private}hhd, \"proactiveBatteryLevel\":\"%{private}.02f\"}", (uint8_t *)&__p, 0x22u);
  }
  *(void *)(a1 + 120) = qword_102476040;
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 64))(*(void *)(a1 + 16), a1 + 96) & 1) == 0) {
    *unsigned __int8 v13 = 0;
  }
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16), a1 + 160) & 1) == 0)
  {
    *(double *)(a1 + 160) = (*(double (**)(void))(**(void **)(a1 + 48) + 64))(*(void *)(a1 + 48));
    (*(void (**)(void))(**(void **)(a1 + 16) + 80))(*(void *)(a1 + 16));
  }
  sub_100103240();
  if (sub_10073E30C())
  {
    LODWORD(__p) = 0;
    long long v29 = [objc_msgSend(*(id *)(a1 + 8), "silo") queue];
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    v31[2] = sub_1011356A4;
    v31[3] = &unk_1022BA9F0;
    v31[4] = a1;
    notify_register_dispatch("CLPolicyProactive.start", (int *)&__p, v29, v31);
  }
  return a1;
}

void sub_101135514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  sub_100EBBF9C(v27);
  long long v29 = (std::__shared_weak_count *)v26[42];
  if (v29) {
    sub_1000DB0A0(v29);
  }
  long long v30 = (std::__shared_weak_count *)v26[11];
  if (v30) {
    sub_1000DB0A0(v30);
  }
  long long v31 = (std::__shared_weak_count *)v26[9];
  if (v31) {
    sub_1000DB0A0(v31);
  }
  double v32 = (std::__shared_weak_count *)v26[7];
  if (v32) {
    sub_1000DB0A0(v32);
  }
  long long v33 = (std::__shared_weak_count *)v26[5];
  if (v33) {
    sub_1000DB0A0(v33);
  }
  uint64_t v34 = (std::__shared_weak_count *)v26[3];
  if (v34) {
    sub_1000DB0A0(v34);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_101135598(uint64_t a1)
{
  return sub_1011355A0(*(void *)(a1 + 32));
}

uint64_t sub_1011355A0(uint64_t a1)
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102313648);
  }
  uint64_t v2 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    __int16 v5 = 2082;
    uint64_t v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#proactive timer fired\"}", (uint8_t *)v4, 0x12u);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
}

void sub_1011356A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102313648);
  }
  uint64_t v2 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    __int16 v4 = 2082;
    __int16 v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#proactive CLPolicyProactive.start Darwin Notification\"}", (uint8_t *)v3, 0x12u);
  }
  sub_1001311C4(v1, 1);
}

void sub_101135790(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 328);
  if (v2)
  {
    uint64_t v3 = (void *)(a1 + 328);
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
    __int16 v4 = *(std::__shared_weak_count **)(a1 + 336);
    *(void *)(a1 + 328) = 0;
    *(void *)(a1 + 336) = 0;
    if (v4)
    {
      sub_1000DB0A0(v4);
      __int16 v5 = *(std::__shared_weak_count **)(a1 + 336);
      *uint64_t v3 = 0;
      *(void *)(a1 + 336) = 0;
      if (v5)
      {
        sub_1000DB0A0(v5);
      }
    }
    else
    {
      *uint64_t v3 = 0;
      *(void *)(a1 + 336) = 0;
    }
  }
}

void sub_101135844(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 104);
  if (sub_1000A699C(a2, "ProactiveBatteryLevel", (void *)(a1 + 104)))
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102313648);
    }
    uint64_t v3 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = *v2;
      v5[0] = 68289283;
      v5[1] = 0;
      __int16 v6 = 2082;
      int v7 = "";
      __int16 v8 = 2049;
      uint64_t v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#proactive battery level overwritten by harvest rules\", \"proactiveBatteryLevel\":\"%{private}f\"}", (uint8_t *)v5, 0x1Cu);
    }
  }
}

uint64_t sub_101135950(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 144);
}

uint64_t sub_10113595C(uint64_t a1)
{
  double v2 = (*(double (**)(void))(**(void **)(a1 + 48) + 64))(*(void *)(a1 + 48));
  double v3 = v2 - *(double *)(a1 + 152);
  if (v3 < 0.0 || v3 >= 3240.0)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102313648);
    }
    uint64_t v4 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134218240;
      double v14 = v3;
      __int16 v15 = 2048;
      uint64_t v16 = 0x40A9500000000000;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#proactive Extending proactive harvesting power assertion. Elapsed proactive time, %0.2f, minimum elapsed interval, %0.2f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102313648);
      }
      int v9 = 134218240;
      double v10 = v3;
      __int16 v11 = 2048;
      uint64_t v12 = 0x40A9500000000000;
      __int16 v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPolicyProactive::extendProactiveAttempt()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    sub_100EBC6AC(a1 + 344);
    if (*(int *)(a1 + 352) >= 1) {
      sub_101AA39B0();
    }
    sub_100134750(__p, "Extend");
    sub_100EBBFD8(a1 + 344, (uint64_t *)__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    *(double *)(a1 + 152) = v2;
  }
  return (*(uint64_t (**)(void, double))(**(void **)(a1 + 328) + 24))(*(void *)(a1 + 328), v2 + 180.0);
}

void sub_101135C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

NSDictionary *__cdecl sub_101135C2C(id a1)
{
  return (NSDictionary *)&off_102397770;
}

NSDictionary *__cdecl sub_101135C38(id a1)
{
  return (NSDictionary *)&off_102397798;
}

uint64_t sub_101135C44(uint64_t a1)
{
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), a1);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), 14);

  return sub_101135CD0(a1);
}

uint64_t sub_101135CD0(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))(*(void *)(a1 + 16));
  if (*(_DWORD *)(a1 + 168) != result)
  {
    *(_DWORD *)(a1 + 168) = result;
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102313648);
    }
    double v3 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      BOOL v4 = *(_DWORD *)(a1 + 168) == 3;
      v5[0] = 68289283;
      v5[1] = 0;
      __int16 v6 = 2082;
      int v7 = "";
      __int16 v8 = 1025;
      BOOL v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#proactive request #proactive authorization status\", \"isAuthorized\":%{private}hhd}", (uint8_t *)v5, 0x18u);
    }
    return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48));
  }
  return result;
}

uint64_t sub_101135E24(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (result)
  {
    uint64_t result = sub_10113595C(a1);
    if (*(double *)(a1 + 192) < 0.0
      || (uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 104))(*(void *)(a1 + 80)),
          result))
    {
      long long v5 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 172) = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 188) = v5;
      long long v6 = *(_OWORD *)(a2 + 32);
      long long v7 = *(_OWORD *)(a2 + 48);
      long long v8 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 236) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 252) = v8;
      *(_OWORD *)(a1 + 204) = v6;
      *(_OWORD *)(a1 + 220) = v7;
      long long v9 = *(_OWORD *)(a2 + 96);
      long long v10 = *(_OWORD *)(a2 + 112);
      long long v11 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 140);
      *(_OWORD *)(a1 + 284) = v10;
      *(_OWORD *)(a1 + 300) = v11;
      *(_OWORD *)(a1 + 268) = v9;
    }
    else if (*(double *)(a2 + 76) - *(double *)(a1 + 160) > 900.0)
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102313648);
      }
      uint64_t v12 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = *(void *)(a1 + 176);
        uint64_t v14 = *(void *)(a1 + 184);
        double v15 = *(double *)(a2 + 76) - *(double *)(a1 + 160);
        *(_DWORD *)buf = 134218496;
        uint64_t v20 = v13;
        __int16 v21 = 2048;
        uint64_t v22 = v14;
        __int16 v23 = 2048;
        double v24 = v15;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#proactive Did not achieve vehicular speed from <%+.8f,%+.8f> in %.3fs, turning off proactive harvesting", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_102313648);
        }
        uint64_t v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLPolicyProactive::updatePolicyProactiveFromGps(const CLDaemonLocation &)", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
      }
      sub_1001311C4(a1, 0);
      uint64_t v16 = *(void *)(a1 + 328);
      double v17 = (*(double (**)(void))(**(void **)(a1 + 48) + 64))(*(void *)(a1 + 48));
      return (*(uint64_t (**)(uint64_t, double))(*(void *)v16 + 24))(v16, v17 + 3600.0);
    }
  }
  return result;
}

uint64_t sub_101136144(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == 14) {
    return sub_101135CD0(a1);
  }
  return a1;
}

void sub_101136154(uint64_t a1, long long *a2)
{
  double v2 = (uint64_t *)(a1 + 120);
  double v3 = *(double *)(a1 + 120);
  long long v4 = *a2;
  *(void *)(a1 + 136) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 120) = v4;
  if (v3 != *(double *)&qword_102476040 || *(double *)a2 >= 100.0 || *((unsigned char *)a2 + 8) != 0)
  {
    int v8 = *(unsigned __int8 *)(a1 + 144);
    if (*(unsigned char *)(a1 + 129))
    {
      double v9 = *(double *)(a1 + 120);
      if (v9 >= *(double *)(a1 + 104))
      {
        if (v9 >= v3 || *(unsigned char *)(a1 + 128) != 0)
        {
          if (*(unsigned char *)(a1 + 144)) {
            return;
          }
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_102313648);
          }
          double v15 = qword_102419568;
          if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "#proactive battery criteria achieved", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419560 != -1) {
              dispatch_once(&qword_102419560, &stru_102313648);
            }
            uint64_t v20 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLPolicyProactive::updatePolicyFromBattery(const CLDaemonStatus_Type::Battery &)", "%s\n", v20);
            if (v20 != (char *)buf) {
              free(v20);
            }
          }
          int v16 = 1;
          goto LABEL_41;
        }
        if (*(unsigned char *)(a1 + 144))
        {
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_102313648);
          }
          double v17 = qword_102419568;
          if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
          {
            uint64_t v18 = *v2;
            *(_DWORD *)buf = 134218240;
            *(double *)uint64_t v22 = v3;
            *(_WORD *)&v22[8] = 2048;
            *(void *)&v22[10] = v18;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "#proactive battery criteria not achieved: battery level dropped: from,%.2f,to,%.2f", buf, 0x16u);
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_40;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102419560 == -1) {
            goto LABEL_47;
          }
          goto LABEL_53;
        }
      }
      else if (*(unsigned char *)(a1 + 144))
      {
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_102313648);
        }
        long long v10 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
        {
          uint64_t v11 = *(void *)(a1 + 120);
          uint64_t v12 = *(void *)(a1 + 104);
          *(_DWORD *)buf = 134218240;
          *(void *)uint64_t v22 = v11;
          *(_WORD *)&v22[8] = 2048;
          *(void *)&v22[10] = v12;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "#proactive battery criteria not achieved: battery level too low:required,%.2f,achieved,%.2f", buf, 0x16u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_40;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419560 == -1)
        {
LABEL_47:
          long long v19 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLPolicyProactive::updatePolicyFromBattery(const CLDaemonStatus_Type::Battery &)", "%s\n", v19);
          if (v19 != (char *)buf) {
            free(v19);
          }
LABEL_40:
          int v16 = 0;
LABEL_41:
          *(unsigned char *)(a1 + 144) = v16;
          goto LABEL_43;
        }
LABEL_53:
        dispatch_once(&qword_102419560, &stru_102313648);
        goto LABEL_47;
      }
    }
    else if (*(unsigned char *)(a1 + 144))
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102313648);
      }
      uint64_t v13 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)uint64_t v22 = 0;
        *(_WORD *)&void v22[4] = 2082;
        *(void *)&v22[6] = "";
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#proactive battery criteria not achieved: battery disconnected\"}", buf, 0x12u);
      }
      goto LABEL_40;
    }
    int v16 = 0;
LABEL_43:
    if (v16 != v8)
    {
      sub_1001B0568(a1);
      sub_1001311C4(a1, *(unsigned __int8 *)(a1 + 112));
    }
  }
}

void sub_1011366B0(void **a1)
{
  uint64_t v2 = (*(uint64_t (**)(void *))(*a1[10] + 56))(a1[10]);
  if (((unsigned int (*)(void **))(*a1)[5])(a1))
  {
    double v3 = (*(double (**)(void *))(*a1[6] + 64))(a1[6]);
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102313648);
    }
    long long v4 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(v2 + 4);
      uint64_t v6 = *(void *)(v2 + 12);
      double v7 = v3 - *(double *)(v2 + 76);
      *(_DWORD *)buf = 134218496;
      uint64_t v12 = v5;
      __int16 v13 = 2048;
      uint64_t v14 = v6;
      __int16 v15 = 2048;
      double v16 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#proactive GPS timed out (last location <%+.8f,%+.8f> from %.3fs ago), turning off proactive harvesting", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102313648);
      }
      double v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLPolicyProactive::updatePolicyFromTrafficTimer()", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    sub_1001311C4((uint64_t)a1, 0);
    (*(void (**)(void *, double))(*a1[41] + 24))(a1[41], v3 + 3600.0);
  }
  else if (sub_1001B0568((uint64_t)a1))
  {
    sub_1001311C4((uint64_t)a1, 1);
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102313648);
    }
    int v8 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#proactive Proactive harvesting is not allowed, ignoring, onProactiveTimer", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102313648);
      }
      long long v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLPolicyProactive::updatePolicyFromTrafficTimer()", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

void *sub_101136AFC(void *a1)
{
  *a1 = off_102313578;
  sub_100EBBF9C(a1 + 43);
  uint64_t v2 = (std::__shared_weak_count *)a1[42];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  double v3 = (std::__shared_weak_count *)a1[11];
  if (v3) {
    sub_1000DB0A0(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[9];
  if (v4) {
    sub_1000DB0A0(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[7];
  if (v5) {
    sub_1000DB0A0(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[5];
  if (v6) {
    sub_1000DB0A0(v6);
  }
  double v7 = (std::__shared_weak_count *)a1[3];
  if (v7) {
    sub_1000DB0A0(v7);
  }
  return a1;
}

void sub_101136B8C(void *a1)
{
  *a1 = off_102313578;
  sub_100EBBF9C(a1 + 43);
  uint64_t v2 = (std::__shared_weak_count *)a1[42];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  double v3 = (std::__shared_weak_count *)a1[11];
  if (v3) {
    sub_1000DB0A0(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[9];
  if (v4) {
    sub_1000DB0A0(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[7];
  if (v5) {
    sub_1000DB0A0(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[5];
  if (v6) {
    sub_1000DB0A0(v6);
  }
  double v7 = (std::__shared_weak_count *)a1[3];
  if (v7) {
    sub_1000DB0A0(v7);
  }

  operator delete();
}

void sub_101136C3C(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_101136C6C(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

std::string *sub_101136C9C@<X0>(unsigned int a1@<W0>, std::string *a2@<X8>)
{
  uint64_t result = (std::string *)sub_100134750(a2, "invalid");
  if (a1 < 4) {
    return std::string::assign(a2, off_102313708[a1]);
  }
  return result;
}

void sub_101136CEC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_101136D08@<X0>(unsigned int a1@<W0>, std::string *a2@<X8>)
{
  uint64_t result = (std::string *)sub_100134750(a2, "invalid");
  if (a1 < 3) {
    return std::string::assign(a2, off_102313728[(char)a1]);
  }
  return result;
}

void sub_101136D5C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_101136D78@<X0>(int a1@<W0>, std::string *a2@<X8>)
{
  uint64_t result = (std::string *)sub_100134750(a2, "invalid");
  if (a1 == 1)
  {
    uint64_t v5 = "stepBout";
  }
  else
  {
    if (a1) {
      return result;
    }
    uint64_t v5 = "gaitBout";
  }
  return std::string::assign(a2, v5);
}

void sub_101136DD4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

double sub_101136DF0(double a1)
{
  return floor(a1 / 86400.0) * 86400.0;
}

double sub_101136E08(double **a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  uint64_t v3 = (char *)v1 - (char *)*a1;
  if ((unint64_t)v3 < 0x10) {
    return -INFINITY;
  }
  double v5 = (double)(unint64_t)(v3 >> 3);
  if (v2 == v1)
  {
    double v9 = 0.0;
  }
  else
  {
    double v6 = 0.0;
    double v7 = *a1;
    do
    {
      double v8 = *v7++;
      double v6 = v6 + v8;
    }
    while (v7 != v1);
    double v9 = 0.0;
    double v10 = v6 / v5;
    do
    {
      double v11 = *v2++;
      double v9 = v9 + (v11 - v10) * (v11 - v10);
    }
    while (v2 != v1);
  }
  return sqrt(v9 / (v5 + -1.0));
}

double sub_101136E84(double **a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  if (v1 == *a1) {
    return 0.0;
  }
  double v3 = 0.0;
  do
  {
    double v4 = *v2++;
    double v3 = v3 + v4;
  }
  while (v2 != v1);
  return v3 / (double)(unint64_t)(v1 - *a1);
}

double sub_101136EBC(double **a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  uint64_t v3 = (char *)v1 - (char *)*a1;
  if ((unint64_t)v3 < 0x10) {
    return -INFINITY;
  }
  double v5 = (double)(unint64_t)(v3 >> 3);
  if (v2 == v1)
  {
    double v10 = 0.0;
    double v9 = 0.0 / v5;
    if (0.0 / v5 != 0.0) {
      return sqrt(v10 / (v5 + -1.0)) / v9;
    }
  }
  else
  {
    double v6 = 0.0;
    double v7 = *a1;
    do
    {
      double v8 = *v7++;
      double v6 = v6 + v8;
    }
    while (v7 != v1);
    double v9 = v6 / v5;
    if (v9 != 0.0)
    {
      double v10 = 0.0;
      do
      {
        double v11 = *v2++;
        double v10 = v10 + (v11 - v9) * (v11 - v9);
      }
      while (v2 != v1);
      return sqrt(v10 / (v5 + -1.0)) / v9;
    }
  }
  if (qword_102418FA0 != -1) {
    dispatch_once(&qword_102418FA0, &stru_1023136A8);
  }
  uint64_t v12 = qword_102418FA8;
  if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "#warning: zero-mean coefficient of variance", buf, 2u);
  }
  double v4 = 0.0;
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_1023136A8);
    }
    __int16 v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "double CLMobility::calculateCV(const std::vector<double> &)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  return v4;
}

double sub_1011370E4(uint64_t *a1)
{
  if (a1[1] == *a1) {
    return -INFINITY;
  }
  std::__sort<std::__less<double,double> &,double *>();
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1] - *a1;
  uint64_t v4 = (v3 >> 3) - 1;
  if ((v3 & 8) != 0) {
    return *(double *)(v2 + ((4 * v4) & 0xFFFFFFFFFFFFFFF8));
  }
  else {
    return (*(double *)(v2 + 8 * (int)vcvtpd_s64_f64((double)(unint64_t)v4 * 0.5))
  }
          + *(double *)(v2 + 8 * (int)vcvtmd_s64_f64((double)(unint64_t)v4 * 0.5)))
         * 0.5;
}

uint64_t sub_101137174(uint64_t a1, unsigned int a2, double a3)
{
  float v5 = *(float *)(a1 + 8);
  float v6 = sub_10095D90C(v5);
  double v7 = 10.0;
  double v8 = 60.0;
  switch(a2)
  {
    case 0u:
      double v8 = v6;
      double v7 = 0.2;
      goto LABEL_5;
    case 1u:
      goto LABEL_5;
    case 2u:
      double v8 = ((float)(v5 * 0.55) + (float)(v5 * 0.55)) * 0.745476;
      double v7 = 0.0923076889;
      goto LABEL_5;
    case 3u:
      double v7 = 0.0;
      double v8 = 100.0;
LABEL_5:
      sub_101136C9C(a2, &__p);
      if (v8 < a3)
      {
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_1023136E8);
        }
        double v9 = qword_1024191F8;
        if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_INFO))
        {
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)buf = 136446467;
          uint64_t v20 = p_p;
          __int16 v21 = 2049;
          double v22 = a3;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "BoutExtractor: Boutwise %{public}s above limit, ignoring (%{private}.3f)", buf, 0x16u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_23;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024191F0 == -1)
        {
LABEL_39:
          double v17 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMobility::isMeasurementInRange(CLBodyMetrics, double, QuantityTypeIdentifier)", "%s\n", v17);
          if (v17 != (char *)buf) {
            free(v17);
          }
LABEL_23:
          uint64_t v13 = 0;
          goto LABEL_31;
        }
LABEL_41:
        dispatch_once(&qword_1024191F0, &stru_1023136E8);
        goto LABEL_39;
      }
      if (v7 > a3)
      {
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_1023136E8);
        }
        double v11 = qword_1024191F8;
        if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_INFO))
        {
          uint64_t v12 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)buf = 136446467;
          uint64_t v20 = v12;
          __int16 v21 = 2049;
          double v22 = a3;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "BoutExtractor: Boutwise %{public}s below limit, ignoring (%{private}.3f)", buf, 0x16u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_23;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024191F0 == -1) {
          goto LABEL_39;
        }
        goto LABEL_41;
      }
      uint64_t v13 = 1;
LABEL_31:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      return v13;
    default:
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1023136E8);
      }
      uint64_t v14 = qword_1024191F8;
      if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v20) = a2;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "BoutExtractor: Unexpected type %d, cannot determine ranges", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_1023136E8);
        }
        LODWORD(__p.__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(__p.__r_.__value_.__r.__words[0]) = a2;
        double v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMobility::isMeasurementInRange(CLBodyMetrics, double, QuantityTypeIdentifier)", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      return 0;
  }
}

void sub_101137704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101137740(id a1)
{
  qword_102418FA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Steadiness");
}

void sub_101137770(id a1)
{
  qword_1024191F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Mobility");
}

void *sub_1011377A0(void *result)
{
  *uint64_t result = off_102313750;
  return result;
}

void sub_1011377C4()
{
}

uint64_t sub_1011377D8()
{
  sub_100103240();

  return sub_10010145C();
}

uint64_t sub_101137800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(unsigned char *)(a4 + 80) = a5;
  *(unsigned char *)(a4 + 81) = 1;
  return sub_101045C74(a2, a3, a4);
}

unint64_t sub_10113781C(void *a1, uint64_t *a2)
{
  double v32 = 0;
  long long v33 = 0;
  unint64_t v34 = 0;
  long long v29 = 0;
  long long v30 = 0;
  long long v31 = 0;
  long long v26 = 0;
  unint64_t v27 = 0;
  unint64_t v28 = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      double v5 = sub_1008B61C8(v3, &Current);
      float v6 = sub_1014122A8();
      if (v5 <= sub_101412DFC(v6))
      {
        double v7 = *(double *)(v3 + 32);
        if (v7 <= *((double *)sub_1014122A8() + 6))
        {
          unint64_t v8 = v27;
          if (v27 >= v28)
          {
            uint64_t v9 = sub_100B8FB04((uint64_t *)&v26, v3);
          }
          else
          {
            sub_1008B5818(v27, v3);
            uint64_t v9 = v8 + 112;
          }
          unint64_t v27 = v9;
        }
      }
      v3 += 112;
    }
    while (v3 != v4);
    double v10 = (void **)v26;
    double v11 = (void **)v27;
    while (v10 != v11)
    {
      if ((unint64_t)v10[8] > 1)
      {
        uint64_t v14 = v30;
        if (v30 >= v31)
        {
          __int16 v15 = (void **)sub_100B8FB04((uint64_t *)&v29, (uint64_t)v10);
        }
        else
        {
          sub_1008B5818(v30, v10);
          __int16 v15 = v14 + 14;
        }
        long long v30 = v15;
      }
      else
      {
        unint64_t v12 = (unint64_t)v33;
        if ((unint64_t)v33 >= v34)
        {
          uint64_t v13 = sub_100B8FB04((uint64_t *)&v32, (uint64_t)v10);
        }
        else
        {
          sub_1008B5818(v33, v10);
          uint64_t v13 = v12 + 112;
        }
        long long v33 = (CFAbsoluteTime *)v13;
      }
      v10 += 14;
    }
  }
  unint64_t v16 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (((char *)v33 - (char *)v32) >> 4));
  __int16 v35 = sub_101137B28;
  if (v33 == v32) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = v16;
  }
  sub_101137B3C((uint64_t)v32, (unint64_t)v33, (uint64_t (**)(uint64_t, uint64_t))&v35, v17, 1);
  unint64_t v18 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (((char *)v30 - (char *)v29) >> 4));
  __int16 v35 = sub_101137B28;
  if (v30 == v29) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = v18;
  }
  sub_101137B3C((uint64_t)v29, (unint64_t)v30, (uint64_t (**)(uint64_t, uint64_t))&v35, v19, 1);
  uint64_t v20 = v32;
  unint64_t v21 = (unint64_t)v33;
  while (v20 != (CFAbsoluteTime *)v21)
  {
    CFAbsoluteTime Current = *v20;
    if (sub_10087B05C(a1, &Current))
    {
LABEL_35:
      CFAbsoluteTime v23 = *v20;
      unint64_t v24 = *(void *)&v23 & 0xFFFFFFFFFFFFFF00;
      goto LABEL_37;
    }
    v20 += 14;
  }
  uint64_t v20 = (CFAbsoluteTime *)v29;
  double v22 = v30;
  while (v20 != (CFAbsoluteTime *)v22)
  {
    CFAbsoluteTime Current = *v20;
    if (sub_10087B05C(a1, &Current)) {
      goto LABEL_35;
    }
    v20 += 14;
  }
  LOBYTE(v23) = 0;
  unint64_t v24 = 0;
LABEL_37:
  CFAbsoluteTime Current = COERCE_DOUBLE(&v26);
  sub_100946620((void ***)&Current);
  long long v26 = &v29;
  sub_100946620((void ***)&v26);
  long long v29 = (void **)&v32;
  sub_100946620(&v29);
  return v24 | LOBYTE(v23);
}

void sub_101137AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, char a16)
{
  *(void *)(v16 - 56) = &a10;
  sub_100946620((void ***)(v16 - 56));
  *(void *)(v16 - 56) = &a13;
  sub_100946620((void ***)(v16 - 56));
  a13 = (void **)&a16;
  sub_100946620(&a13);
  _Unwind_Resume(a1);
}

BOOL sub_101137B28(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 56) > *(double *)(a2 + 56);
}

uint64_t sub_101137B3C(uint64_t result, unint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4, char a5)
{
  unint64_t v9 = a2;
  uint64_t v10 = result;
  unint64_t v25 = a2;
  unint64_t v26 = result;
LABEL_2:
  for (uint64_t i = 1 - a4; ; ++i)
  {
    uint64_t v12 = v9 - v10;
    unint64_t v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v9 - v10) >> 4);
    if (!(!v6 & v5))
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          CFAbsoluteTime v23 = *a3;
          unint64_t v25 = v9 - 112;
          uint64_t result = ((uint64_t (*)(void))v23)();
          if (result) {
            uint64_t result = sub_101137E50((uint64_t *)&v26, (uint64_t *)&v25);
          }
          break;
        case 3uLL:
          unint64_t v25 = v9 - 112;
          uint64_t result = sub_101138070(v10, v10 + 112, v9 - 112, a3);
          break;
        case 4uLL:
          unint64_t v25 = v9 - 112;
          uint64_t result = sub_10113866C(v10, v10 + 112, v10 + 224, v9 - 112, a3);
          break;
        case 5uLL:
          unint64_t v25 = v9 - 112;
          uint64_t result = sub_101138724(v10, v10 + 112, v10 + 224, v10 + 336, v9 - 112, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v12 <= 2687)
    {
      if (a5) {
        return sub_101137EA8(v10, v9, a3);
      }
      else {
        return sub_101137FA4(v10, v9, a3);
      }
    }
    if (i == 1) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    uint64_t v15 = v9 - 112;
    if ((unint64_t)v12 >= 0x3801)
    {
      sub_101138070(v10, v10 + 112 * (v13 >> 1), v15, a3);
      uint64_t v16 = 112 * v14;
      uint64_t v17 = 112 * v14 - 112;
      unint64_t v18 = v25;
      sub_101138070(v26 + 112, v26 + v17, v25 - 224, a3);
      sub_101138070(v26 + 224, v26 + v16 + 112, v18 - 336, a3);
      sub_101138070(v26 + v17, v26 + v16, v26 + v16 + 112, a3);
      unint64_t v24 = v26 + v16;
      sub_101137E50((uint64_t *)&v26, (uint64_t *)&v24);
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_101138070(v10 + 112 * (v13 >> 1), v10, v15, a3);
      if (a5)
      {
LABEL_13:
        unint64_t v9 = v25;
        goto LABEL_14;
      }
    }
    char v19 = ((uint64_t (*)(unint64_t))*a3)(v26 - 112);
    unint64_t v9 = v25;
    if ((v19 & 1) == 0)
    {
      uint64_t result = sub_10113814C(v26, v25, (unsigned int (**)(unsigned char *))a3);
      uint64_t v10 = result;
LABEL_22:
      a5 = 0;
      unint64_t v26 = v10;
      a4 = -i;
      goto LABEL_2;
    }
LABEL_14:
    unint64_t v20 = sub_1011382DC(v26, v9, (uint64_t (**)(void))a3);
    if ((v21 & 1) == 0) {
      goto LABEL_21;
    }
    int v22 = sub_101138460(v26, v20, a3);
    uint64_t v10 = v20 + 112;
    uint64_t result = sub_101138460(v20 + 112, v9, a3);
    if (result)
    {
      if (v22) {
        return result;
      }
      unint64_t v25 = v20;
      uint64_t v10 = v26;
      unint64_t v9 = v20;
    }
    else
    {
      if (!v22)
      {
LABEL_21:
        uint64_t result = sub_101137B3C(v26, v20, a3, -i, a5 & 1);
        uint64_t v10 = v20 + 112;
        goto LABEL_22;
      }
      unint64_t v26 = v20 + 112;
    }
  }
  if (v10 != v9) {
    return sub_101138804(v10, v9, v9, a3);
  }
  return result;
}

uint64_t sub_101137E50(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  sub_1008B595C(v5, *a1);
  sub_1008B5960(v2, v3);
  sub_1008B5960(v3, (uint64_t)v5);
  return sub_1008B5A70(v5);
}

uint64_t sub_101137EA8(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if (result != a2)
  {
    uint64_t v4 = result;
    uint64_t v5 = result + 112;
    if (result + 112 != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = result;
      do
      {
        uint64_t v9 = v8;
        uint64_t v8 = v5;
        uint64_t result = (*a3)(v5, v9);
        if (result)
        {
          sub_1008B595C(v13, v8);
          uint64_t v10 = v7;
          while (1)
          {
            sub_1008B5960(v4 + v10 + 112, v4 + v10);
            if (!v10) {
              break;
            }
            char v11 = (*a3)((uint64_t)v13, v4 + v10 - 112);
            v10 -= 112;
            if ((v11 & 1) == 0)
            {
              uint64_t v12 = v4 + v10 + 112;
              goto LABEL_10;
            }
          }
          uint64_t v12 = v4;
LABEL_10:
          sub_1008B5960(v12, (uint64_t)v13);
          uint64_t result = sub_1008B5A70(v13);
        }
        uint64_t v5 = v8 + 112;
        v7 += 112;
      }
      while (v8 + 112 != a2);
    }
  }
  return result;
}

void sub_101137F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_101137FA4(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if (result != a2)
  {
    uint64_t v4 = result;
    uint64_t v5 = result + 112;
    if (result + 112 != a2)
    {
      do
      {
        uint64_t v7 = v5;
        uint64_t result = (*a3)(v5, v4);
        if (result)
        {
          sub_1008B595C(v8, v7);
          do
          {
            sub_1008B5960(v4 + 112, v4);
            v4 -= 112;
          }
          while (((*a3)((uint64_t)v8, v4) & 1) != 0);
          sub_1008B5960(v4 + 112, (uint64_t)v8);
          uint64_t result = sub_1008B5A70(v8);
        }
        uint64_t v5 = v7 + 112;
        uint64_t v4 = v7;
      }
      while (v7 + 112 != a2);
    }
  }
  return result;
}

void sub_10113805C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_101138070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  uint64_t v12 = a2;
  uint64_t v13 = a1;
  uint64_t v11 = a3;
  char v7 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if ((v7 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    sub_101137E50(&v12, &v11);
    if (!(*a4)(v12, v13)) {
      return 1;
    }
    uint64_t v9 = &v13;
    uint64_t v10 = &v12;
    goto LABEL_9;
  }
  if (!result)
  {
    sub_101137E50(&v13, &v12);
    if (!(*a4)(v11, v12)) {
      return 1;
    }
    uint64_t v9 = &v12;
    uint64_t v10 = &v11;
LABEL_9:
    sub_101137E50(v9, v10);
    return 2;
  }
  sub_101137E50(&v13, &v11);
  return 1;
}

unint64_t sub_10113814C(uint64_t a1, unint64_t a2, unsigned int (**a3)(unsigned char *))
{
  unint64_t v13 = a2;
  unint64_t v14 = a1;
  sub_1008B595C(v12, a1);
  if (((uint64_t (*)(unsigned char *, unint64_t))*a3)(v12, a2 - 112))
  {
    unint64_t v6 = a1;
    do
    {
      v6 += 112;
      unint64_t v14 = v6;
    }
    while ((((uint64_t (*)(unsigned char *, unint64_t))*a3)(v12, v6) & 1) == 0);
  }
  else
  {
    unint64_t v7 = a1 + 112;
    do
    {
      unint64_t v6 = v7;
      unint64_t v14 = v7;
      if (v7 >= v13) {
        break;
      }
      int v8 = ((uint64_t (*)(unsigned char *, unint64_t))*a3)(v12, v7);
      unint64_t v7 = v6 + 112;
    }
    while (!v8);
  }
  unint64_t v9 = v13;
  if (v6 < v13)
  {
    do
    {
      v9 -= 112;
      unint64_t v13 = v9;
    }
    while ((((uint64_t (*)(unsigned char *, unint64_t))*a3)(v12, v9) & 1) != 0);
    unint64_t v6 = v14;
  }
  if (v6 < v9)
  {
    do
    {
      sub_101137E50((uint64_t *)&v14, (uint64_t *)&v13);
      do
        v14 += 112;
      while (!(*a3)(v12));
      do
        v13 -= 112;
      while ((((uint64_t (*)(unsigned char *))*a3)(v12) & 1) != 0);
      unint64_t v6 = v14;
    }
    while (v14 < v13);
  }
  if (v6 - 112 != a1) {
    sub_1008B5960(a1, v6 - 112);
  }
  sub_1008B5960(v6 - 112, (uint64_t)v12);
  unint64_t v10 = v14;
  sub_1008B5A70(v12);
  return v10;
}

void sub_1011382B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1011382DC(uint64_t a1, unint64_t a2, uint64_t (**a3)(void))
{
  unint64_t v15 = a2;
  sub_1008B595C(v14, a1);
  uint64_t v5 = 0;
  do
  {
    unint64_t v16 = a1 + v5 + 112;
    v5 += 112;
  }
  while (((*a3)() & 1) != 0);
  unint64_t v6 = v15;
  if (v5 == 112)
  {
    unint64_t v9 = a1 + 112;
    do
    {
      if (v9 >= v6) {
        break;
      }
      unint64_t v10 = *a3;
      v6 -= 112;
      unint64_t v15 = v6;
    }
    while ((((uint64_t (*)(unint64_t, unsigned char *))v10)(v6, v14) & 1) == 0);
  }
  else
  {
    unint64_t v7 = v15 - 112;
    do
    {
      unint64_t v15 = v7;
      int v8 = ((uint64_t (*)(unint64_t, unsigned char *))*a3)(v7, v14);
      v7 -= 112;
    }
    while (!v8);
    unint64_t v9 = v16;
  }
  unint64_t v11 = v9;
  if (v9 < v15)
  {
    do
    {
      sub_101137E50((uint64_t *)&v16, (uint64_t *)&v15);
      do
        v16 += 112;
      while (((*a3)() & 1) != 0);
      do
        v15 -= 112;
      while (!(*a3)());
      unint64_t v11 = v16;
    }
    while (v16 < v15);
  }
  uint64_t v12 = v11 - 112;
  if (v11 - 112 != a1) {
    sub_1008B5960(a1, v11 - 112);
  }
  sub_1008B5960(v12, (uint64_t)v14);
  sub_1008B5A70(v14);
  return v12;
}

void sub_10113843C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_101138460(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v14 = a2;
  uint64_t v15 = a1;
  BOOL v6 = 1;
  switch(0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 4))
  {
    case 0:
    case 1:
      return v6;
    case 2:
      unint64_t v7 = *a3;
      uint64_t v14 = a2 - 112;
      if (((unsigned int (*)(void))v7)()) {
        sub_101137E50(&v15, &v14);
      }
      return v6;
    case 3:
      sub_101138070(a1, a1 + 112, a2 - 112, a3);
      return v6;
    case 4:
      sub_10113866C(a1, a1 + 112, a1 + 224, a2 - 112, a3);
      return v6;
    case 5:
      sub_101138724(a1, a1 + 112, a1 + 224, a1 + 336, a2 - 112, a3);
      return v6;
    default:
      uint64_t v8 = a1 + 224;
      sub_101138070(a1, a1 + 112, a1 + 224, a3);
      uint64_t v9 = a1 + 336;
      if (v9 == a2) {
        return 1;
      }
      int v10 = 0;
      break;
  }
  while (!(*a3)(v9, v8))
  {
LABEL_12:
    uint64_t v8 = v9;
    v9 += 112;
    if (v9 == v14) {
      return 1;
    }
  }
  sub_1008B595C(v13, v9);
  do
  {
    uint64_t v11 = v8;
    sub_1008B5960(v8 + 112, v8);
    if (v8 == v15) {
      break;
    }
    v8 -= 112;
  }
  while (((*a3)((uint64_t)v13, v11 - 112) & 1) != 0);
  sub_1008B5960(v11, (uint64_t)v13);
  if (++v10 != 8)
  {
    sub_1008B5A70(v13);
    goto LABEL_12;
  }
  BOOL v6 = v9 + 112 == v14;
  sub_1008B5A70(v13);
  return v6;
}

void sub_101138640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10113866C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(uint64_t, uint64_t))
{
  uint64_t v13 = a2;
  uint64_t v14 = a1;
  uint64_t v11 = a4;
  uint64_t v12 = a3;
  sub_101138070(a1, a2, a3, a5);
  uint64_t result = (*a5)(a4, a3);
  if (result)
  {
    sub_101137E50(&v12, &v11);
    uint64_t result = (*a5)(v12, a2);
    if (result)
    {
      sub_101137E50(&v13, &v12);
      uint64_t result = (*a5)(v13, a1);
      if (result) {
        return sub_101137E50(&v14, &v13);
      }
    }
  }
  return result;
}

uint64_t sub_101138724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(uint64_t, uint64_t))
{
  uint64_t v16 = a2;
  uint64_t v17 = a1;
  uint64_t v14 = a4;
  uint64_t v15 = a3;
  uint64_t v13 = a5;
  sub_10113866C(a1, a2, a3, a4, a6);
  uint64_t result = (*a6)(a5, a4);
  if (result)
  {
    sub_101137E50(&v14, &v13);
    uint64_t result = (*a6)(v14, a3);
    if (result)
    {
      sub_101137E50(&v15, &v14);
      uint64_t result = (*a6)(v15, a2);
      if (result)
      {
        sub_101137E50(&v16, &v15);
        uint64_t result = (*a6)(v16, a1);
        if (result) {
          return sub_101137E50(&v17, &v16);
        }
      }
    }
  }
  return result;
}

uint64_t sub_101138804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  uint64_t v15 = a1;
  if (a1 != a2)
  {
    uint64_t v7 = a1;
    uint64_t v8 = (a2 - a1) / 112;
    if (a2 - a1 >= 113)
    {
      unint64_t v9 = (unint64_t)(v8 - 2) >> 1;
      unint64_t v10 = v9 + 1;
      uint64_t v11 = a1 + 112 * v9;
      do
      {
        sub_101138928(v7, a4, v8, v11);
        v11 -= 112;
        --v10;
      }
      while (v10);
    }
    uint64_t v14 = a2;
    if (a2 != a3)
    {
      uint64_t v12 = a2;
      do
      {
        if ((*a4)(v12, v15))
        {
          sub_101137E50(&v14, &v15);
          sub_101138928(v15, a4, v8, v15);
        }
        uint64_t v12 = v14 + 112;
        uint64_t v14 = v12;
      }
      while (v12 != a3);
      uint64_t v7 = v15;
    }
    sub_101138AAC(v7, a2, (unsigned int (**)(uint64_t, uint64_t))a4);
    return v14;
  }
  return a3;
}

uint64_t sub_101138928(uint64_t result, uint64_t (**a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v6 = result;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= 0x6DB6DB6DB6DB6DB7 * ((a4 - result) >> 4))
    {
      int64_t v10 = (0xDB6DB6DB6DB6DB6ELL * ((a4 - result) >> 4)) | 1;
      uint64_t v11 = result + 112 * v10;
      int64_t v12 = 0xDB6DB6DB6DB6DB6ELL * ((a4 - result) >> 4) + 2;
      if (v12 < a3 && (*a2)(result + 112 * v10, v11 + 112))
      {
        v11 += 112;
        int64_t v10 = v12;
      }
      uint64_t result = (*a2)(v11, v5);
      if ((result & 1) == 0)
      {
        sub_1008B595C(v15, v5);
        do
        {
          uint64_t v13 = v11;
          sub_1008B5960(v5, v11);
          if (v7 < v10) {
            break;
          }
          uint64_t v14 = (2 * v10) | 1;
          uint64_t v11 = v6 + 112 * v14;
          int64_t v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            int64_t v10 = v14;
          }
          else if ((*a2)(v6 + 112 * v14, v11 + 112))
          {
            v11 += 112;
          }
          else
          {
            int64_t v10 = v14;
          }
          uint64_t v5 = v13;
        }
        while (!(*a2)(v11, (uint64_t)v15));
        sub_1008B5960(v13, (uint64_t)v15);
        return sub_1008B5A70(v15);
      }
    }
  }
  return result;
}

void sub_101138A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_101138AAC(uint64_t result, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t))
{
  if (a2 - result >= 113)
  {
    uint64_t v4 = result;
    uint64_t v5 = (((unint64_t)(a2 - result) >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64;
    uint64_t v6 = a2 - 112;
    do
    {
      sub_1008B595C(v10, v4);
      uint64_t v7 = sub_101138BC0(v4, a3, v5);
      uint64_t v8 = v7;
      if (v6 == v7)
      {
        sub_1008B5960(v7, (uint64_t)v10);
      }
      else
      {
        sub_1008B5960(v7, v6);
        sub_1008B5960(v6, (uint64_t)v10);
        sub_101138C80(v4, v8 + 112, (uint64_t (**)(uint64_t, uint64_t))a3, 0x6DB6DB6DB6DB6DB7 * ((v8 + 112 - v4) >> 4));
      }
      uint64_t result = sub_1008B5A70(v10);
      v6 -= 112;
    }
    while (v5-- > 2);
  }
  return result;
}

void sub_101138BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_101138BC0(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 112 * v6 + 112;
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1 + 112 * v6 + 112, a1 + 112 * v6 + 224))
    {
      v9 += 112;
      uint64_t v10 = v11;
    }
    sub_1008B5960(a1, v9);
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t sub_101138C80(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = result + 112 * (v4 >> 1);
    uint64_t v9 = a2 - 112;
    uint64_t result = (*a3)(v8, a2 - 112);
    if (result)
    {
      sub_1008B595C(v11, v9);
      do
      {
        uint64_t v10 = v8;
        sub_1008B5960(v9, v8);
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = v6 + 112 * v7;
        uint64_t v9 = v10;
      }
      while (((*a3)(v8, (uint64_t)v11) & 1) != 0);
      sub_1008B5960(v10, (uint64_t)v11);
      return sub_1008B5A70(v11);
    }
  }
  return result;
}

void sub_101138D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_101138D60()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_101138E18(_Unwind_Exception *a1)
{
}

void sub_101138E30()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    _WORD *v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_101138ED8(_Unwind_Exception *a1)
{
}

void sub_1011391F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101139258(uint64_t a1, int a2, int a3, char a4, uint64_t a5)
{
  uint64_t result = sub_100A29210(a1, a2, a3, a4, a5);
  *(void *)uint64_t result = off_1023137A8;
  *(_DWORD *)(result + 168) = 0;
  *(unsigned char *)(result + 172) = 0;
  return result;
}

uint64_t sub_101139294(void *a1)
{
  *a1 = off_1023137A8;
  sub_1011392EC((uint64_t)a1);

  return sub_100A29288((uint64_t)a1);
}

void sub_1011392EC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 172))
  {
    uint64_t v2 = (os_unfair_lock_s *)(a1 + 168);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 168));
    sub_100A291D0(a1);
    IOHIDServiceClientFastPathInvalidate();
    *(unsigned char *)(a1 + 172) = 0;
    os_unfair_lock_unlock(v2);
  }
}

void sub_101139354(void *a1)
{
  sub_101139294(a1);

  operator delete();
}

BOOL sub_10113938C(uint64_t a1, uint64_t a2)
{
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1000D3E78();
  if (Current != (CFRunLoopRef)sub_1001BEA14()) {
    sub_101AA3B3C();
  }
  if (*(unsigned char *)(a1 + 172))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1023137E8);
    }
    uint64_t v5 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "[FastPath] Already initialized", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1023137E8);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL FastPathDevice::initializeFastPath(NSDictionary *)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    return 1;
  }
  else if (sub_100A297A4(a1))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 168));
    sub_100A291D0(a1);
    *(unsigned char *)(a1 + 172) = IOHIDServiceClientFastPathInit() != 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 168));
    if (!*(unsigned char *)(a1 + 172))
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1023137E8);
      }
      unint64_t v7 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        uint64_t v14 = sub_100A291D0(a1);
        __int16 v15 = 2112;
        uint64_t v16 = a2;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[FastPath] Initialization failed,serviceRef,%@,properties,%@", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1023137E8);
        }
        sub_100A291D0(a1);
        int64_t v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL FastPathDevice::initializeFastPath(NSDictionary *)", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
    }
    return *(unsigned char *)(a1 + 172) != 0;
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1023137E8);
    }
    uint64_t v8 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[FastPath] Couldn't initialize FastPath due null service ref", buf, 2u);
    }
    BOOL v9 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v9)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1023137E8);
      }
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL FastPathDevice::initializeFastPath(NSDictionary *)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_101139854(uint64_t a1)
{
  if (!*(void *)(a1 + 24)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 172))
  {
    uint64_t v1 = (os_unfair_lock_s *)(a1 + 168);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 168));
    int v2 = IOHIDServiceClientFastPathCopyEventWithStatus();
    os_unfair_lock_unlock(v1);
    if (v2)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1023137E8);
      }
      uint64_t v3 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67240192;
        int v7 = v2;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[FastPath] copyEvent Failed (%{public}x)", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1023137E8);
        }
        uint64_t v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual IOHIDEventRef FastPathDevice::copyEvent()", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
      }
    }
  }
  return 0;
}

void sub_101139A4C(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_101139A7C()
{
  sub_100103240();
  if ((sub_10010145C() & 1) != 0 || (sub_100103240(), sub_100106424()))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102313808);
    }
    uint64_t v0 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Instantiating CLTileSyncManager", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102313808);
      }
      int v2 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static std::unique_ptr<CLITileSyncManager> CLITileSyncManager::createProduction(CLWifiTilesManager *, id<CLIntersiloUniverse>, std::shared_ptr<CLWifiAccessPointLocationService>)", "%s\n", v2);
      if (v2 != (char *)buf) {
        free(v2);
      }
    }
    sub_1014E9D34();
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_102313808);
  }
  uint64_t v1 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "Instantiating NoopTileSyncManager", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102313808);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static std::unique_ptr<CLITileSyncManager> CLITileSyncManager::createProduction(CLWifiTilesManager *, id<CLIntersiloUniverse>, std::shared_ptr<CLWifiAccessPointLocationService>)", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  operator new();
}

void sub_101139DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    sub_101AA3CB4(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_101139E1C()
{
}

void sub_101139F08(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);
  if (a3) {
    sub_1000DB0A0(a3);
  }
  sub_101AA3CEC((uint64_t *)va);
  operator delete();
}

void sub_101139F40(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_101139F70()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_101139FF0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_10113A080(_Unwind_Exception *a1)
{
}

void *sub_10113A098(void *result, uint64_t a2)
{
  *BOOL result = off_1023138A0;
  result[1] = a2;
  return result;
}

uint64_t sub_10113A0B8(uint64_t a1, _DWORD *a2)
{
  sub_1000C7F88(&v5);
  uint64_t v3 = sub_10006EF84(v5, "MaxHarvestPasses", a2);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  return v3;
}

void sub_10113A114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10113A140(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)a1 = off_1023138F0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v5 = objc_alloc_init(CLDaemonHealthClientAdapter);
  *(void *)(a1 + 40) = v5;
  [(CLDaemonHealthClientAdapter *)v5 setValid:1];
  id v6 = [[[a3 vendor] proxyForService:@"CLNatalimetryNotifier"];
  *(void *)(a1 + 32) = v6;
  [v6 registerDelegate:*(void *)(a1 + 40) inSilo:[a3 silo]];
  CLConnection::setDefaultMessageHandler();
  return a1;
}

void sub_10113A244(_Unwind_Exception *a1)
{
  sub_100426880(v1);
  _Unwind_Resume(a1);
}

void sub_10113A258(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = *a2;
  uint64_t v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16))(v2, &v4);
  if (v5) {
    sub_1000DB0A0(v5);
  }
}

void sub_10113A2CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10113A2E8(uint64_t a1)
{
  *(void *)a1 = off_1023138F0;
  [*(id *)(a1 + 40) setValid:0];

  *(void *)(a1 + 40) = 0;

  return sub_100426880((void *)a1);
}

void sub_10113A360(uint64_t a1)
{
  sub_10113A2E8(a1);

  operator delete();
}

void sub_10113A398(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
  int v5 = *((char *)v4 + 23);
  if (v5 < 0)
  {
    if (v4[1] != 42) {
      goto LABEL_7;
    }
    uint64_t v4 = (void *)*v4;
  }
  else if (v5 != 42)
  {
    goto LABEL_7;
  }
  if (!memcmp(v4, "Health/kCLConnectionMessageMetMinutesQuery", 0x2AuLL))
  {
    uint64_t v11 = *(CLConnectionMessage **)a2;
    int64_t v12 = *(std::__shared_weak_count **)(a2 + 8);
    v18[0] = v11;
    v18[1] = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_10113A6B4(a1, (uint64_t)v18);
    goto LABEL_28;
  }
LABEL_7:
  id v6 = (void *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
  int v7 = *((char *)v6 + 23);
  if (v7 < 0)
  {
    if (v6[1] != 44)
    {
LABEL_13:
      if (qword_102419170 != -1) {
        dispatch_once(&qword_102419170, &stru_102313990);
      }
      uint64_t v8 = qword_102419178;
      if (os_log_type_enabled((os_log_t)qword_102419178, OS_LOG_TYPE_FAULT))
      {
        uint64_t v9 = CLConnectionMessage::name(*(CLConnectionMessage **)a2);
        if (*(char *)(v9 + 23) >= 0) {
          uint64_t v10 = v9;
        }
        else {
          uint64_t v10 = *(void *)v9;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Got unhandled mesage of type %{public}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419170 != -1) {
          dispatch_once(&qword_102419170, &stru_102313990);
        }
        uint64_t v14 = CLConnectionMessage::name(*(CLConnectionMessage **)a2);
        if (*(char *)(v14 + 23) >= 0) {
          uint64_t v15 = v14;
        }
        else {
          uint64_t v15 = *(void *)v14;
        }
        int v19 = 136446210;
        uint64_t v20 = v15;
        uint64_t v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLDaemonHealthClient::handleMessage(std::shared_ptr<CLConnectionMessage>)", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      return;
    }
    id v6 = (void *)*v6;
  }
  else if (v7 != 44)
  {
    goto LABEL_13;
  }
  if (memcmp(v6, "Health/kCLConnectionMessageVO2MaxInputsQuery", 0x2CuLL)) {
    goto LABEL_13;
  }
  uint64_t v13 = *(CLConnectionMessage **)a2;
  int64_t v12 = *(std::__shared_weak_count **)(a2 + 8);
  v17[0] = v13;
  v17[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_10113AC08(a1, (uint64_t)v17);
LABEL_28:
  if (v12)
  {
    sub_1000DB0A0(v12);
  }
}

void sub_10113A690(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

id *sub_10113A6B4(uint64_t a1, uint64_t a2)
{
  unsigned int v26 = 0;
  if (sub_10113B25C(a1, (int *)&v26))
  {
    uint64_t v4 = objc_opt_class();
    int v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(), 0);
    CFDictionaryRef DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v5);
    uint64_t v7 = CMTimeRangeKey;
    if ([DictionaryOfClasses objectForKeyedSubscript:CMTimeRangeKey])
    {
      +[CMMotionTimeRange CLMotionTimeRangeFromCMMotionTimeRange:](CMMotionTimeRange, "CLMotionTimeRangeFromCMMotionTimeRange:", [DictionaryOfClasses objectForKeyedSubscript:v7]);
      double v9 = v8;
      double v11 = v10;
      if (v8 <= CFAbsoluteTimeGetCurrent() && (v11 <= CFAbsoluteTimeGetCurrent() ? (BOOL v12 = v9 < v11) : (BOOL v12 = 0), v12))
      {
        sub_1000E1294((uint64_t *)buf, (uint64_t)"CLDaemonClient.MetMinutesQuery", 0);
        uint64_t v17 = *(void **)(a1 + 32);
        v22[0] = _NSConcreteStackBlock;
        v22[1] = 3321888768;
        v22[2] = sub_10113B58C;
        v22[3] = &unk_102313918;
        unint64_t v18 = *(std::__shared_weak_count **)(a2 + 8);
        void v22[4] = *(void *)a2;
        CFAbsoluteTime v23 = v18;
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        double v24 = v9;
        double v25 = v11;
        [v17 queryMetMinutesInTimeRange:v22 withReply:v9, v11];
        if (v23) {
          sub_1000DB0A0(v23);
        }
        return sub_1000E1098((id *)buf);
      }
      else
      {
        if (qword_102419170 != -1) {
          dispatch_once(&qword_102419170, &stru_102313990);
        }
        uint64_t v13 = qword_102419178;
        if (os_log_type_enabled((os_log_t)qword_102419178, OS_LOG_TYPE_ERROR))
        {
          id v14 = [DictionaryOfClasses objectForKeyedSubscript:v7];
          *(_DWORD *)buf = 138412290;
          id v34 = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "METMinutes,query,error,invalid parameter,%@", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419170 != -1) {
            dispatch_once(&qword_102419170, &stru_102313990);
          }
          id v19 = [DictionaryOfClasses objectForKeyedSubscript:v7];
          int v29 = 138412290;
          id v30 = v19;
          uint64_t v20 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonHealthClient::handleMessageMetMinutesQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v20);
          if (v20 != (char *)buf) {
            free(v20);
          }
        }
        uint64_t v27 = CMErrorMessage;
        unint64_t v28 = &off_1023942B0;
        +[NSDictionary dictionaryWithObjects:&v28 forKeys:&v27 count:1];
        return (id *)CLConnectionMessage::sendReply();
      }
    }
    else
    {
      if (qword_102419170 != -1) {
        dispatch_once(&qword_102419170, &stru_102313990);
      }
      uint64_t v16 = qword_102419178;
      if (os_log_type_enabled((os_log_t)qword_102419178, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "METMinutes,query,empty request", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419170 != -1) {
          dispatch_once(&qword_102419170, &stru_102313990);
        }
        LOWORD(v29) = 0;
        char v21 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonHealthClient::handleMessageMetMinutesQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v21);
        if (v21 != (char *)buf) {
          free(v21);
        }
      }
      uint64_t v31 = CMErrorMessage;
      double v32 = &off_1023942B0;
      +[NSDictionary dictionaryWithObjects:&v32 forKeys:&v31 count:1];
      return (id *)CLConnectionMessage::sendReply();
    }
  }
  else
  {
    uint64_t v35 = CMErrorMessage;
    __int16 v36 = +[NSNumber numberWithUnsignedInt:v26];
    +[NSDictionary dictionaryWithObjects:&v36 forKeys:&v35 count:1];
    return (id *)CLConnectionMessage::sendReply();
  }
}

void sub_10113ABE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
  if (a17) {
    sub_1000DB0A0(a17);
  }
  sub_1000E1098(&a27);
  _Unwind_Resume(a1);
}

void sub_10113AC08(uint64_t a1, uint64_t a2)
{
  unsigned int v12 = 0;
  if (sub_10113B9C4(a1, (int *)&v12))
  {
    uint64_t v4 = objc_opt_class();
    int v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(), 0);
    CFDictionaryRef DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v5);
    uint64_t v7 = CMVO2MaxInputsRecord;
    if ([DictionaryOfClasses objectForKeyedSubscript:CMVO2MaxInputsRecord])
    {
      +[CMVO2MaxInputs VO2MaxInputFromCMVO2MaxInputs:](CMVO2MaxInputs, "VO2MaxInputFromCMVO2MaxInputs:", [DictionaryOfClasses objectForKeyedSubscript:v7]);
      double v8 = *(void **)(a1 + 32);
      void v22[4] = v29;
      void v22[5] = v30;
      v22[6] = v31;
      v22[0] = *(_OWORD *)buf;
      v22[1] = v26;
      v22[2] = v27;
      v22[3] = v28;
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3321888768;
      void v13[2] = sub_10113BCF4;
      v13[3] = &unk_102313948;
      double v9 = *(std::__shared_weak_count **)(a2 + 8);
      v13[4] = *(void *)a2;
      id v14 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v19 = v29;
      long long v20 = v30;
      long long v21 = v31;
      long long v15 = *(_OWORD *)buf;
      long long v16 = v26;
      long long v17 = v27;
      long long v18 = v28;
      [v8 queryVO2MaxInputsFromRecord:v22 withReply:v13];
      if (v14) {
        sub_1000DB0A0(v14);
      }
    }
    else
    {
      if (qword_102419170 != -1) {
        dispatch_once(&qword_102419170, &stru_102313990);
      }
      double v10 = qword_102419178;
      if (os_log_type_enabled((os_log_t)qword_102419178, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "VO2MaxData,query,empty request", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419170 != -1) {
          dispatch_once(&qword_102419170, &stru_102313990);
        }
        double v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonHealthClient::handleMessageVO2MaxInputsQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
      uint64_t v23 = CMErrorMessage;
      double v24 = &off_1023942B0;
      +[NSDictionary dictionaryWithObjects:&v24 forKeys:&v23 count:1];
      CLConnectionMessage::sendReply();
    }
  }
  else
  {
    uint64_t v32 = CMErrorMessage;
    long long v33 = +[NSNumber numberWithUnsignedInt:v12];
    +[NSDictionary dictionaryWithObjects:&v33 forKeys:&v32 count:1];
    CLConnectionMessage::sendReply();
  }
}

void sub_10113AF78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    sub_1000DB0A0(a18);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10113AF98(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 24))
  {
    sub_100134750(__p, "com.apple.locationd.activity");
    int isEntitled = CLConnection::isEntitled();
    int v3 = isEntitled;
    if (v15 < 0)
    {
      operator delete(__p[0]);
      if (v3)
      {
LABEL_7:
        *(_DWORD *)(a1 + 24) = 1;
        return *(_DWORD *)(a1 + 24) == 1;
      }
    }
    else if (isEntitled)
    {
      goto LABEL_7;
    }
    CLConnection::getAuditToken(v9, *(CLConnection **)(a1 + 8));
    if (TCCAccessCheckAuditToken()) {
      goto LABEL_7;
    }
    *(_DWORD *)(a1 + 24) = 2;
    if (qword_102419170 != -1) {
      dispatch_once(&qword_102419170, &stru_102313990);
    }
    int v5 = qword_102419178;
    if (os_log_type_enabled((os_log_t)qword_102419178, OS_LOG_TYPE_DEFAULT))
    {
      CLConnection::getName((uint64_t *)__p, *(CLConnection **)(a1 + 8));
      id v6 = v15 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Client %s did not pass entitlement/tcc checks.", buf, 0xCu);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419170 != -1) {
        dispatch_once(&qword_102419170, &stru_102313990);
      }
      CLConnection::getName((uint64_t *)buf, *(CLConnection **)(a1 + 8));
      if (v11 >= 0) {
        uint64_t v7 = buf;
      }
      else {
        uint64_t v7 = *(unsigned char **)buf;
      }
      int v12 = 136315138;
      uint64_t v13 = v7;
      double v8 = (char *)_os_log_send_and_compose_impl();
      if (v11 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDaemonHealthClient::isAuthorizedForMotionActivity()", "%s\n", v8);
      if (v8 != (char *)__p) {
        free(v8);
      }
    }
  }
  return *(_DWORD *)(a1 + 24) == 1;
}

void sub_10113B238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10113B25C(uint64_t a1, int *a2)
{
  sub_100134750(__p, "com.apple.locationd.metminutes");
  char isEntitled = CLConnection::isEntitled();
  char v5 = isEntitled;
  if (SBYTE3(v29) < 0)
  {
    operator delete(*(void **)__p);
    if (v5)
    {
LABEL_3:
      uint64_t result = sub_101290CD0(*(void *)(a1 + 16));
      if (result)
      {
        uint64_t result = sub_10113AF98(a1);
        if (result) {
          int v7 = 100;
        }
        else {
          int v7 = 111;
        }
      }
      else
      {
        int v7 = 109;
      }
      goto LABEL_18;
    }
  }
  else if (isEntitled)
  {
    goto LABEL_3;
  }
  if (qword_102419170 != -1) {
    dispatch_once(&qword_102419170, &stru_102313990);
  }
  double v8 = qword_102419178;
  if (os_log_type_enabled((os_log_t)qword_102419178, OS_LOG_TYPE_DEFAULT))
  {
    CLConnection::getName((uint64_t *)v20, *(CLConnection **)(a1 + 8));
    int v9 = SBYTE3(v24);
    double v10 = *(unsigned char **)v20;
    int RemotePid = CLConnection::getRemotePid(*(CLConnection **)(a1 + 8));
    int v12 = v20;
    *(_DWORD *)std::string __p = 136315650;
    if (v9 < 0) {
      int v12 = v10;
    }
    *(void *)&__p[4] = v12;
    __int16 v26 = 1024;
    int v27 = RemotePid;
    __int16 v28 = 2048;
    uint64_t v29 = a1;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning METMinutes,Client failed entitlement check, %s, %d, %p", __p, 0x1Cu);
    if (SBYTE3(v24) < 0) {
      operator delete(*(void **)v20);
    }
  }
  uint64_t result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419170 != -1) {
      dispatch_once(&qword_102419170, &stru_102313990);
    }
    CLConnection::getName((uint64_t *)v18, *(CLConnection **)(a1 + 8));
    int v13 = v19;
    id v14 = (void **)v18[0];
    int v15 = CLConnection::getRemotePid(*(CLConnection **)(a1 + 8));
    long long v16 = v18;
    *(_DWORD *)long long v20 = 136315650;
    if (v13 < 0) {
      long long v16 = v14;
    }
    *(void *)&void v20[4] = v16;
    __int16 v21 = 1024;
    int v22 = v15;
    __int16 v23 = 2048;
    uint64_t v24 = a1;
    long long v17 = (char *)_os_log_send_and_compose_impl();
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDaemonHealthClient::isAuthorizedForMetMinutes(CMError &)", "%s\n", v17);
    if (v17 != __p) {
      free(v17);
    }
    uint64_t result = 0;
  }
  int v7 = 110;
LABEL_18:
  *a2 = v7;
  return result;
}

void sub_10113B540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10113B58C(uint64_t a1, void *a2, int a3)
{
  if (a3 == 100)
  {
    uint64_t v14 = CMMetMinutesArray;
    int v15 = a2;
    +[NSDictionary dictionaryWithObjects:&v15 forKeys:&v14 count:1];
    if (qword_102419170 != -1) {
      dispatch_once(&qword_102419170, &stru_102313990);
    }
    char v5 = qword_102419178;
    if (os_log_type_enabled((os_log_t)qword_102419178, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a1 + 48);
      uint64_t v6 = *(void *)(a1 + 56);
      id v8 = [a2 count];
      if ([a2 count]) {
        CFStringRef v9 = (const __CFString *)[a2 lastObject];
      }
      else {
        CFStringRef v9 = @" ";
      }
      *(_DWORD *)buf = 134218754;
      uint64_t v17 = v7;
      __int16 v18 = 2048;
      uint64_t v19 = v6;
      __int16 v20 = 2048;
      id v21 = v8;
      __int16 v22 = 2112;
      CFStringRef v23 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "METMinutes,query,range,from,%.3f,to,%.3f,count,%lu,response,%@", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419170 != -1) {
        dispatch_once(&qword_102419170, &stru_102313990);
      }
      [a2 count];
      if ([a2 count]) {
        [a2 lastObject];
      }
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonHealthClient::handleMessageMetMinutesQuery(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    CLConnectionMessage::sendReply();
  }
  else
  {
    uint64_t v24 = CMErrorMessage;
    double v25 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:");
    +[NSDictionary dictionaryWithObjects:&v25 forKeys:&v24 count:1];
    CLConnectionMessage::sendReply();
    if (qword_102419170 != -1) {
      dispatch_once(&qword_102419170, &stru_102313990);
    }
    char v11 = qword_102419178;
    if (os_log_type_enabled((os_log_t)qword_102419178, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v17) = a3;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "METMinutes,query,error,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419170 != -1) {
        dispatch_once(&qword_102419170, &stru_102313990);
      }
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonHealthClient::handleMessageMetMinutesQuery(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
}

uint64_t sub_10113B9C4(uint64_t a1, int *a2)
{
  sub_100134750(__p, "com.apple.locationd.vo2max");
  char isEntitled = CLConnection::isEntitled();
  char v5 = isEntitled;
  if (SBYTE3(v29) < 0)
  {
    operator delete(*(void **)__p);
    if (v5)
    {
LABEL_3:
      uint64_t result = sub_101290CD0(*(void *)(a1 + 16));
      if (result)
      {
        uint64_t result = sub_10113AF98(a1);
        if (result) {
          int v7 = 100;
        }
        else {
          int v7 = 111;
        }
      }
      else
      {
        int v7 = 109;
      }
      goto LABEL_18;
    }
  }
  else if (isEntitled)
  {
    goto LABEL_3;
  }
  if (qword_102419170 != -1) {
    dispatch_once(&qword_102419170, &stru_102313990);
  }
  id v8 = qword_102419178;
  if (os_log_type_enabled((os_log_t)qword_102419178, OS_LOG_TYPE_ERROR))
  {
    CLConnection::getName((uint64_t *)v20, *(CLConnection **)(a1 + 8));
    int v9 = SBYTE3(v24);
    double v10 = *(unsigned char **)v20;
    int RemotePid = CLConnection::getRemotePid(*(CLConnection **)(a1 + 8));
    int v12 = v20;
    *(_DWORD *)std::string __p = 136315650;
    if (v9 < 0) {
      int v12 = v10;
    }
    *(void *)&__p[4] = v12;
    __int16 v26 = 1024;
    int v27 = RemotePid;
    __int16 v28 = 2048;
    uint64_t v29 = a1;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "VO2MaxData,Client failed entitlement check, %s, %d, %p", __p, 0x1Cu);
    if (SBYTE3(v24) < 0) {
      operator delete(*(void **)v20);
    }
  }
  uint64_t result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419170 != -1) {
      dispatch_once(&qword_102419170, &stru_102313990);
    }
    CLConnection::getName((uint64_t *)v18, *(CLConnection **)(a1 + 8));
    int v13 = v19;
    uint64_t v14 = (void **)v18[0];
    int v15 = CLConnection::getRemotePid(*(CLConnection **)(a1 + 8));
    long long v16 = v18;
    *(_DWORD *)__int16 v20 = 136315650;
    if (v13 < 0) {
      long long v16 = v14;
    }
    *(void *)&void v20[4] = v16;
    __int16 v21 = 1024;
    int v22 = v15;
    __int16 v23 = 2048;
    uint64_t v24 = a1;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLDaemonHealthClient::isAuthorizedForVO2Max(CMError &)", "%s\n", v17);
    if (v17 != __p) {
      free(v17);
    }
    uint64_t result = 0;
  }
  int v7 = 110;
LABEL_18:
  *a2 = v7;
  return result;
}

void sub_10113BCA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10113BCF4(uint64_t a1, void *a2, int a3)
{
  if (a3 == 100)
  {
    uint64_t v13 = CMVO2MaxInputsArray;
    uint64_t v14 = a2;
    +[NSDictionary dictionaryWithObjects:&v14 forKeys:&v13 count:1];
    if (qword_102419170 != -1) {
      dispatch_once(&qword_102419170, &stru_102313990);
    }
    char v5 = qword_102419178;
    if (os_log_type_enabled((os_log_t)qword_102419178, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 48);
      id v7 = [a2 count];
      if ([a2 count]) {
        CFStringRef v8 = (const __CFString *)[a2 lastObject];
      }
      else {
        CFStringRef v8 = @" ";
      }
      *(_DWORD *)buf = 134218498;
      uint64_t v16 = v6;
      __int16 v17 = 2048;
      id v18 = v7;
      __int16 v19 = 2112;
      CFStringRef v20 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "VO2MaxData,query,fromRecordId,%llu,count,%lu,response,%@", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419170 != -1) {
        dispatch_once(&qword_102419170, &stru_102313990);
      }
      [a2 count];
      if ([a2 count]) {
        [a2 lastObject];
      }
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonHealthClient::handleMessageVO2MaxInputsQuery(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    CLConnectionMessage::sendReply();
  }
  else
  {
    uint64_t v21 = CMErrorMessage;
    int v22 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:");
    +[NSDictionary dictionaryWithObjects:&v22 forKeys:&v21 count:1];
    CLConnectionMessage::sendReply();
    if (qword_102419170 != -1) {
      dispatch_once(&qword_102419170, &stru_102313990);
    }
    double v10 = qword_102419178;
    if (os_log_type_enabled((os_log_t)qword_102419178, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v16) = a3;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "VO2MaxData,query,error,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419170 != -1) {
        dispatch_once(&qword_102419170, &stru_102313990);
      }
      char v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonHealthClient::handleMessageVO2MaxInputsQuery(std::shared_ptr<CLConnectionMessage>)_block_invoke", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
}

void sub_10113C11C(id a1)
{
  qword_102419178 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Health");
}

uint64_t sub_10113C14C()
{
  sub_100134750(qword_102485988, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102485988, (void *)&_mh_execute_header);
}

NSDictionary *sub_10113C794(uint64_t a1)
{
  v7[0] = @"type";
  v8[0] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 16)];
  v7[1] = @"typeBounded";
  v8[1] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 16)];
  v7[2] = @"pressureDifferenceFromLastLocationCalibration";
  uint64_t v2 = (void *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    uint64_t v2 = (void *)*v2;
  }
  v8[2] = +[NSString stringWithUTF8String:v2];
  v7[3] = @"timeSinceLastLocationCalibration";
  int v3 = (void *)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    int v3 = (void *)*v3;
  }
  v8[3] = +[NSString stringWithUTF8String:v3];
  v7[4] = @"pressureDifferenceFromLastMotionCalibration";
  uint64_t v4 = (void *)(a1 + 96);
  if (*(char *)(a1 + 119) < 0) {
    uint64_t v4 = (void *)*v4;
  }
  v8[4] = +[NSString stringWithUTF8String:v4];
  v7[5] = @"timeSinceLastMotionCalibration";
  char v5 = (void *)(a1 + 120);
  if (*(char *)(a1 + 143) < 0) {
    char v5 = (void *)*v5;
  }
  v8[5] = +[NSString stringWithUTF8String:v5];
  return +[NSDictionary dictionaryWithObjects:v8 forKeys:v7 count:6];
}

unsigned char *sub_10113C8E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a2 + 71) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 48), *(void **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v5;
  }
  if (*(char *)(a2 + 95) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 72), *(void **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = v6;
  }
  if (*(char *)(a2 + 119) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 96), *(void **)(a2 + 96), *(void *)(a2 + 104));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 96);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = v7;
  }
  uint64_t result = (unsigned char *)(a1 + 120);
  if (*(char *)(a2 + 143) < 0) {
    return sub_1000DC48C(result, *(void **)(a2 + 120), *(void *)(a2 + 128));
  }
  long long v9 = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_OWORD *)uint64_t result = v9;
  return result;
}

void sub_10113C9F0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v2);
  }
  long long v6 = *(std::__shared_weak_count **)(v1 + 40);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_10113CA50(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    sub_1000DB0A0(v2);
  }
}

void sub_10113CBCC(_Unwind_Exception *a1)
{
  for (uint64_t i = 432; i != -48; i -= 48)
    sub_1000DAF68((void *)(v1 + i));
  _Unwind_Resume(a1);
}

void sub_10113CFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000DAF68((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10113D044(id a1)
{
  qword_1024191E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void sub_10113D074(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    long long v6 = (char *)a1[3];
    a1[4] = v4;
    long long v7 = (void *)a1[1];
    CFStringRef v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    long long v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)CFStringRef v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      id v34 = (char *)sub_1000DA54C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      __int16 v37 = &v34[8 * v36];
      int v38 = (uint64_t *)a1[1];
      CFStringRef v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        CFStringRef v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        BOOL v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)BOOL v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    __int16 v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      long long v9 = (char *)a1[1];
    }
    CFStringRef v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    __int16 v44 = (void *)a1[1];
    CFStringRef v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    long long v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      id v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      __int16 v37 = &v34[8 * v47];
      __int16 v48 = (uint64_t *)a1[1];
      CFStringRef v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        CFStringRef v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      double v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        CFStringRef v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __int16 v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  int v53 = operator new(0x1000uLL);
  sub_1000DA434(&v54, &v53);
  int v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10113D340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10113D38C(char *a1, double **a2, char *a3, double **a4, uint64_t a5, char a6)
{
  long long v267 = a1;
  long long v268 = a2;
  BOOL v6 = a2 > a4;
  if (a2 == a4) {
    return;
  }
  unint64_t v9 = (unint64_t)a4;
  uint64_t v11 = a2;
  while (1)
  {
    uint64_t v12 = v267;
    uint64_t v13 = a3 - v267;
    BOOL v14 = *(double ***)a3;
    uint64_t v15 = *(char **)v267;
    unint64_t v16 = ((uint64_t)(v9 - *(void *)a3) >> 4) + 32 * (a3 - v267) - (((uint64_t)v11 - *(void *)v267) >> 4);
    if (!v6) {
      break;
    }
    if ((uint64_t)v16 <= 23)
    {
      if (a6)
      {
        if ((double **)v9 != v11)
        {
          for (uint64_t i = v11 + 2; ; i += 2)
          {
            if ((char *)i - v15 == 4096)
            {
              long long v163 = (char *)*((void *)v12 + 1);
              v12 += 8;
              uint64_t v15 = v163;
              uint64_t i = (double **)v163;
            }
            if (i == (double **)v9) {
              break;
            }
            long long v164 = v12;
            uint64_t v165 = (uint64_t)i;
            if (i == (double **)v15)
            {
              long long v164 = v12 - 8;
              uint64_t v165 = *((void *)v12 - 1) + 4096;
            }
            double v167 = *(double **)(v165 - 16);
            long long v166 = (double **)(v165 - 16);
            long long v168 = *i;
            if (**i < *v167)
            {
              long long v169 = i[1];
              unsigned __int8 *i = 0;
              i[1] = 0;
              long long v170 = *v166;
              long long v171 = i;
              while (1)
              {
                long long v172 = v166;
                long long v173 = v166[1];
                *long long v172 = 0;
                v172[1] = 0;
                long long v174 = (std::__shared_weak_count *)v171[1];
                *long long v171 = v170;
                v171[1] = v173;
                if (v174) {
                  sub_1000DB0A0(v174);
                }
                if (v172 == v11) {
                  break;
                }
                if (v172 == *(double ***)v164)
                {
                  uint64_t v176 = *((void *)v164 - 1);
                  v164 -= 8;
                  long long v175 = (double **)(v176 + 4096);
                }
                else
                {
                  long long v175 = v172;
                }
                long long v177 = *(v175 - 2);
                long long v166 = v175 - 2;
                long long v170 = v177;
                long long v171 = v172;
                if (*v168 >= *v177) {
                  goto LABEL_169;
                }
              }
              long long v172 = v11;
LABEL_169:
              long long v178 = (std::__shared_weak_count *)v172[1];
              *long long v172 = v168;
              v172[1] = v169;
              if (v178) {
                sub_1000DB0A0(v178);
              }
            }
            uint64_t v15 = *(char **)v12;
          }
        }
      }
      else if ((double **)v9 != v11)
      {
        uint64_t v237 = (char *)v11 - v15;
        uint64_t v238 = v237 >> 4;
        if (v237 >= -15)
        {
          unsigned __int8 v242 = v238 + 1;
          long long v243 = &v267[8 * ((unint64_t)(v238 + 1) >> 8)];
        }
        else
        {
          unint64_t v241 = 254 - v238;
          unsigned __int8 v242 = ~(_BYTE)v241;
          long long v243 = &v267[-8 * (v241 >> 8)];
        }
        uint64_t v244 = *(void *)v243;
        uint64_t v245 = *(void *)v243 + 16 * v242;
        while (v245 != v9)
        {
          uint64_t v246 = v245 - v244;
          uint64_t v247 = (v245 - v244) >> 4;
          if (v246 >= 17)
          {
            unint64_t v248 = v247 - 1;
            long long v250 = &v243[8 * (v248 >> 8)];
            long long v251 = (double **)(*(void *)v250 + 16 * v248);
          }
          else
          {
            unint64_t v249 = 256 - v247;
            long long v250 = &v243[-8 * (v249 >> 8)];
            long long v251 = (double **)(*(void *)v250 + 16 * ~(_BYTE)v249);
          }
          long long v252 = *(double **)v245;
          if (**(double **)v245 < **v251)
          {
            long long v253 = *(double **)(v245 + 8);
            *(void *)uint64_t v245 = 0;
            *(void *)(v245 + 8) = 0;
            long long v254 = *v251;
            long long v255 = (void *)v245;
            do
            {
              long long v256 = v251;
              long long v257 = v251[1];
              NSObject *v256 = 0;
              v256[1] = 0;
              long long v258 = (std::__shared_weak_count *)v255[1];
              *long long v255 = v254;
              v255[1] = v257;
              if (v258) {
                sub_1000DB0A0(v258);
              }
              if (v256 == *(double ***)v250)
              {
                uint64_t v260 = *((void *)v250 - 1);
                v250 -= 8;
                long long v259 = (double **)(v260 + 4096);
              }
              else
              {
                long long v259 = v256;
              }
              long long v261 = *(v259 - 2);
              long long v251 = v259 - 2;
              long long v254 = v261;
              long long v255 = v256;
            }
            while (*v252 < *v261);
            long long v262 = (std::__shared_weak_count *)v256[1];
            NSObject *v256 = v252;
            v256[1] = v253;
            if (v262) {
              sub_1000DB0A0(v262);
            }
          }
          v245 += 16;
          uint64_t v244 = *(void *)v243;
          if (v245 - *(void *)v243 == 4096)
          {
            uint64_t v263 = *((void *)v243 + 1);
            v243 += 8;
            uint64_t v244 = v263;
            uint64_t v245 = v263;
          }
        }
      }
      return;
    }
    if (!a5)
    {
      if ((double **)v9 == v11) {
        return;
      }
      uint64_t v179 = 32 * v13;
      long long v269 = v267;
      long long v270 = v11;
      uint64_t v180 = 32 * v13 + ((uint64_t)(v9 - *(void *)a3) >> 4) - (((uint64_t)v11 - *(void *)v267) >> 4);
      if (v180 <= 1) {
        return;
      }
      unint64_t v181 = (unint64_t)(v180 - 2) >> 1;
      do
      {
        long long v182 = v269;
        long long v183 = v270;
        long long v184 = (char *)sub_1000D9B0C((uint64_t)&v269, v181);
        sub_10113EC48(v182, v183, v180, v184, v185);
        --v181;
      }
      while (v181 != -1);
      uint64_t v186 = v179 + ((uint64_t)(v9 - *(void *)a3) >> 4) - (((uint64_t)v11 - *(void *)v12) >> 4);
      if (v186 < 2) {
        return;
      }
      while (2)
      {
        uint64_t v187 = 0;
        long long v265 = *v11;
        long long v266 = v11[1];
        *uint64_t v11 = 0;
        v11[1] = 0;
        long long v188 = v11;
        long long v189 = v12;
        do
        {
          if (v187 == -1)
          {
            uint64_t v190 = (uint64_t)v188;
          }
          else
          {
            uint64_t v191 = v187 + 1 + (((uint64_t)v188 - *(void *)v189) >> 4);
            if (v191 < 1)
            {
              unint64_t v192 = 255 - v191;
              v189 -= 8 * (v192 >> 8);
              uint64_t v190 = *(void *)v189 + 16 * ~(_BYTE)v192;
            }
            else
            {
              v189 += 8 * ((unint64_t)v191 >> 8);
              uint64_t v190 = *(void *)v189 + 16 * v191;
            }
          }
          uint64_t v193 = (2 * v187) | 1;
          uint64_t v187 = 2 * v187 + 2;
          if (v187 >= v186
            || ((uint64_t v194 = v190 - *(void *)v189, v195 = v194 >> 4, v194 < -15)
              ? (long long v196 = (double **)(*(void *)&v189[-8 * ((unint64_t)(254 - v195) >> 8)]
                                  + 16 * ~(-2 - v195)))
              : (long long v196 = (double **)(*(void *)&v189[((unint64_t)(v195 + 1) >> 5) & 0x7FFFFFFFFFFFFF8]
                                  + 16 * (v195 + 1))),
                **(double **)v190 >= **v196))
          {
            uint64_t v187 = v193;
          }
          else
          {
            v190 += 16;
            if (v190 - *(void *)v189 == 4096)
            {
              uint64_t v197 = *((void *)v189 + 1);
              v189 += 8;
              uint64_t v190 = v197;
            }
          }
          long long v198 = *(_OWORD *)v190;
          *(void *)uint64_t v190 = 0;
          *(void *)(v190 + 8) = 0;
          long long v199 = (std::__shared_weak_count *)v188[1];
          *(_OWORD *)long long v188 = v198;
          if (v199) {
            sub_1000DB0A0(v199);
          }
          long long v188 = (void *)v190;
        }
        while (v187 <= (uint64_t)((unint64_t)(v186 - 2) >> 1));
        uint64_t v200 = v9;
        if (*(void *)a3 == v9) {
          uint64_t v200 = *((void *)a3 - 1) + 4096;
        }
        if (v190 == v200 - 16)
        {
          long long v217 = *(std::__shared_weak_count **)(v190 + 8);
          *(void *)uint64_t v190 = v265;
          *(void *)(v190 + 8) = v266;
          if (!v217) {
            goto LABEL_217;
          }
        }
        else
        {
          long long v201 = *(_OWORD *)(v200 - 16);
          *(void *)(v200 - 16) = 0;
          *(void *)(v200 - 8) = 0;
          long long v202 = *(std::__shared_weak_count **)(v190 + 8);
          *(_OWORD *)uint64_t v190 = v201;
          if (v202) {
            sub_1000DB0A0(v202);
          }
          uint64_t v203 = v190 + 16;
          if (v190 + 16 - *(void *)v189 == 4096)
          {
            uint64_t v204 = *((void *)v189 + 1);
            v189 += 8;
            uint64_t v203 = v204;
          }
          long long v205 = *(std::__shared_weak_count **)(v200 - 8);
          *(void *)(v200 - 16) = v265;
          *(void *)(v200 - 8) = v266;
          if (v205) {
            sub_1000DB0A0(v205);
          }
          if ((double **)v203 == v11) {
            goto LABEL_217;
          }
          uint64_t v206 = ((v203 - *(void *)v189) >> 4) + 32 * (v189 - v12) - (((uint64_t)v11 - *(void *)v12) >> 4);
          long long v269 = v12;
          long long v270 = v11;
          BOOL v6 = v206 < 2;
          unint64_t v207 = v206 - 2;
          if (v6) {
            goto LABEL_217;
          }
          uint64_t v208 = v207 >> 1;
          sub_1000D9B0C((uint64_t)&v269, v207 >> 1);
          if (*(void *)v189 == v203) {
            uint64_t v203 = *((void *)v189 - 1) + 4096;
          }
          long long v210 = (double **)(v203 - 16);
          long long v211 = *(double **)(v203 - 16);
          if (**v209 >= *v211) {
            goto LABEL_217;
          }
          long long v212 = *(double **)(v203 - 8);
          *long long v210 = 0;
          *(void *)(v203 - 8) = 0;
          long long v213 = *v209;
          do
          {
            long long v214 = v209;
            long long v215 = v209[1];
            *long long v209 = 0;
            v209[1] = 0;
            long long v216 = (std::__shared_weak_count *)v210[1];
            *long long v210 = v213;
            v210[1] = v215;
            if (v216) {
              sub_1000DB0A0(v216);
            }
            if (!v208) {
              break;
            }
            uint64_t v208 = (unint64_t)(v208 - 1) >> 1;
            sub_1000D9B0C((uint64_t)&v269, v208);
            long long v213 = *v209;
            long long v210 = v214;
          }
          while (**v209 < *v211);
          long long v217 = (std::__shared_weak_count *)v214[1];
          *long long v214 = v211;
          v214[1] = v212;
          if (!v217)
          {
LABEL_217:
            if (v9 == *(void *)a3)
            {
              uint64_t v218 = *((void *)a3 - 1);
              a3 -= 8;
              unint64_t v9 = v218 + 4096;
            }
            v9 -= 16;
            BOOL v6 = v186-- <= 2;
            if (v6) {
              return;
            }
            continue;
          }
        }
        break;
      }
      sub_1000DB0A0(v217);
      goto LABEL_217;
    }
    uint64_t v17 = v16 >> 1;
    uint64_t v18 = sub_1000D9B0C((uint64_t)&v267, v16 >> 1);
    if (v16 < 0x81)
    {
      uint64_t v23 = v9 - *(void *)a3;
      uint64_t v24 = v23 >> 4;
      if (v23 >= 17)
      {
        unint64_t v25 = v24 - 1;
        unint64_t v33 = &a3[8 * (v25 >> 8)];
        uint64_t v34 = *(void *)v33 + 16 * v25;
      }
      else
      {
        unint64_t v32 = 256 - v24;
        unint64_t v33 = &a3[-8 * (v32 >> 8)];
        uint64_t v34 = *(void *)v33 + 16 * ~(_BYTE)v32;
      }
      sub_10113E52C((uint64_t)v18, v19, (uint64_t)v267, (uint64_t)v268, (uint64_t)v33, v34);
    }
    else
    {
      uint64_t v20 = v9 - *(void *)a3;
      uint64_t v21 = v20 >> 4;
      if (v20 >= 17)
      {
        unint64_t v22 = v21 - 1;
        int v27 = &a3[8 * (v22 >> 8)];
        uint64_t v28 = *(void *)v27 + 16 * v22;
      }
      else
      {
        unint64_t v26 = 256 - v21;
        int v27 = &a3[-8 * (v26 >> 8)];
        uint64_t v28 = *(void *)v27 + 16 * ~(_BYTE)v26;
      }
      sub_10113E52C((uint64_t)v12, v11, (uint64_t)v18, (uint64_t)v19, (uint64_t)v27, v28);
      uint64_t v29 = (uint64_t)v268 - *(void *)v267;
      uint64_t v30 = v29 >> 4;
      if (v29 >= -15)
      {
        unint64_t v31 = v30 + 1;
        uint64_t v36 = &v267[8 * (v31 >> 8)];
        __int16 v37 = (double **)(*(void *)v36 + 16 * v31);
      }
      else
      {
        unint64_t v35 = 254 - v30;
        uint64_t v36 = &v267[-8 * (v35 >> 8)];
        __int16 v37 = (double **)(*(void *)v36 + 16 * ~(_BYTE)v35);
      }
      uint64_t v39 = sub_1000D9B0C((uint64_t)&v267, v17 - 1);
      uint64_t v40 = v9 - *(void *)a3;
      uint64_t v41 = v40 >> 4;
      if (v40 < 33)
      {
        unint64_t v45 = 257 - v41;
        double v43 = &a3[-8 * (v45 >> 8)];
        uint64_t v44 = *(void *)v43 + 16 * ~(_BYTE)v45;
      }
      else
      {
        unint64_t v42 = v41 - 2;
        double v43 = &a3[8 * (v42 >> 8)];
        uint64_t v44 = *(void *)v43 + 16 * v42;
      }
      sub_10113E52C((uint64_t)v36, v37, (uint64_t)v39, v38, (uint64_t)v43, v44);
      uint64_t v46 = (uint64_t)v268 - *(void *)v267;
      uint64_t v47 = v46 >> 4;
      if (v46 < -31)
      {
        unint64_t v51 = 253 - v47;
        uint64_t v49 = &v267[-8 * (v51 >> 8)];
        uint64_t v50 = (double **)(*(void *)v49 + 16 * ~(_BYTE)v51);
      }
      else
      {
        unint64_t v48 = v47 + 2;
        uint64_t v49 = &v267[8 * (v48 >> 8)];
        uint64_t v50 = (double **)(*(void *)v49 + 16 * v48);
      }
      int v53 = sub_1000D9B0C((uint64_t)&v267, v17 + 1);
      uint64_t v54 = v9 - *(void *)a3;
      uint64_t v55 = v54 >> 4;
      if (v54 < 49)
      {
        unint64_t v59 = 258 - v55;
        __int16 v57 = &a3[-8 * (v59 >> 8)];
        uint64_t v58 = *(void *)v57 + 16 * ~(_BYTE)v59;
      }
      else
      {
        unint64_t v56 = v55 - 3;
        __int16 v57 = &a3[8 * (v56 >> 8)];
        uint64_t v58 = *(void *)v57 + 16 * v56;
      }
      sub_10113E52C((uint64_t)v49, v50, (uint64_t)v53, v52, (uint64_t)v57, v58);
      double v60 = sub_1000D9B0C((uint64_t)&v267, v17 - 1);
      uint64_t v62 = v61;
      __int16 v63 = sub_1000D9B0C((uint64_t)&v267, v17);
      uint64_t v65 = v64;
      double v66 = sub_1000D9B0C((uint64_t)&v267, v17 + 1);
      sub_10113E52C((uint64_t)v60, v62, (uint64_t)v63, v65, (uint64_t)v66, v67);
      sub_1000D9B0C((uint64_t)&v267, v17);
      double v68 = v268;
      __int16 v69 = *v268;
      const char *v268 = *v70;
      *double v70 = v69;
      __int16 v71 = v68[1];
      v68[1] = v70[1];
      v70[1] = v71;
    }
    --a5;
    if (a6)
    {
      int v73 = v267;
      uint64_t v72 = v268;
      uint64_t v74 = *v268;
    }
    else
    {
      int v73 = v267;
      uint64_t v72 = v268;
      uint64_t v75 = (uint64_t)v268 - *(void *)v267;
      uint64_t v76 = v75 >> 4;
      if (v75 >= 17) {
        unint64_t v77 = (double **)(*(void *)&v267[((unint64_t)(v76 - 1) >> 5) & 0x7FFFFFFFFFFFFF8]
      }
                        + 16 * (v76 - 1));
      else {
        unint64_t v77 = (double **)(*(void *)&v267[-8 * ((unint64_t)(256 - v76) >> 8)] + 16
      }
                                                                                      * (v76 - 1));
      uint64_t v74 = *v268;
      if (**v77 >= **v268)
      {
        uint64_t v115 = v268[1];
        const char *v268 = 0;
        v72[1] = 0;
        __int16 v116 = *(double ***)a3;
        uint64_t v117 = v9 - *(void *)a3;
        uint64_t v118 = v117 >> 4;
        if (v117 < 17) {
          __int16 v119 = (double **)(*(void *)&a3[-8 * ((unint64_t)(256 - v118) >> 8)]
        }
                           + 16 * (v118 - 1));
        else {
          __int16 v119 = (double **)(*(void *)&a3[((unint64_t)(v118 - 1) >> 5) & 0x7FFFFFFFFFFFFF8]
        }
                           + 16 * (v118 - 1));
        double v123 = *v74;
        double v124 = **v119;
        __int16 v125 = *(double ***)v73;
        uint64_t v11 = v72;
        if (*v74 >= v124)
        {
          do
          {
            v11 += 2;
            if ((char *)v11 - (char *)v125 == 4096)
            {
              __int16 v127 = (double **)*((void *)v73 + 1);
              v73 += 8;
              __int16 v125 = v127;
              uint64_t v11 = v127;
            }
          }
          while ((v73 < a3 || v73 == a3 && (unint64_t)v11 < v9) && v123 >= **v11);
        }
        else
        {
          do
          {
            v11 += 2;
            if ((char *)v11 - (char *)v125 == 4096)
            {
              int v126 = (double **)*((void *)v73 + 1);
              v73 += 8;
              __int16 v125 = v126;
              uint64_t v11 = v126;
            }
          }
          while (v123 >= **v11);
        }
        if (v73 < a3
          || (long long v128 = a3, v129 = (double **)v9, v73 == a3)
          && (long long v128 = a3, v129 = (double **)v9, (unint64_t)v11 < v9))
        {
          long long v128 = a3;
          __int16 v129 = (double **)v9;
          do
          {
            if (v129 == v116)
            {
              uint64_t v130 = (double **)*((void *)v128 - 1);
              v128 -= 8;
              __int16 v116 = v130;
              __int16 v129 = v130 + 512;
            }
            __int16 v131 = *(v129 - 2);
            v129 -= 2;
          }
          while (v123 < *v131);
        }
        while (v73 < v128 || v73 == v128 && v11 < v129)
        {
          uint64_t v132 = *v11;
          *uint64_t v11 = *v129;
          void *v129 = v132;
          __int16 v133 = v11[1];
          v11[1] = v129[1];
          v129[1] = v133;
          __int16 v125 = *(double ***)v73;
          do
          {
            v11 += 2;
            if ((char *)v11 - (char *)v125 == 4096)
            {
              uint64_t v134 = (double **)*((void *)v73 + 1);
              v73 += 8;
              __int16 v125 = v134;
              uint64_t v11 = v134;
            }
          }
          while (v123 >= **v11);
          uint64_t v135 = *(double ***)v128;
          do
          {
            if (v129 == v135)
            {
              uint64_t v136 = (double **)*((void *)v128 - 1);
              v128 -= 8;
              uint64_t v135 = v136;
              __int16 v129 = v136 + 512;
            }
            int64_t v137 = *(v129 - 2);
            v129 -= 2;
          }
          while (v123 < *v137);
        }
        uint64_t v138 = (char *)v11 - (char *)v125;
        uint64_t v139 = ((char *)v11 - (char *)v125) >> 4;
        if (v138 < 17) {
          uint64_t v140 = *(void *)&v73[-8 * ((unint64_t)(256 - v139) >> 8)] + 16 * (v139 - 1);
        }
        else {
          uint64_t v140 = *(void *)&v73[((unint64_t)(v139 - 1) >> 5) & 0x7FFFFFFFFFFFFF8]
        }
               + 16 * (v139 - 1);
        if ((double **)v140 != v72)
        {
          long long v141 = *(_OWORD *)v140;
          *(void *)uint64_t v140 = 0;
          *(void *)(v140 + 8) = 0;
          long long v142 = (std::__shared_weak_count *)v72[1];
          *(_OWORD *)uint64_t v72 = v141;
          if (v142) {
            sub_1000DB0A0(v142);
          }
        }
        long long v143 = *(std::__shared_weak_count **)(v140 + 8);
        *(void *)uint64_t v140 = v74;
        *(void *)(v140 + 8) = v115;
        if (v143) {
          sub_1000DB0A0(v143);
        }
        goto LABEL_135;
      }
    }
    long long v78 = v72[1];
    *uint64_t v72 = 0;
    v72[1] = 0;
    double v79 = *v74;
    double v80 = v72;
    BOOL v81 = *(double ***)v73;
    do
    {
      v80 += 2;
      if ((char *)v80 - (char *)v81 == 4096)
      {
        int v82 = (double **)*((void *)v73 + 1);
        v73 += 8;
        BOOL v81 = v82;
        double v80 = v82;
      }
      __int16 v83 = *v80;
    }
    while (**v80 < v79);
    uint64_t v84 = ((char *)v80 - (char *)v81) >> 4;
    if ((char *)v80 - (char *)v81 < 17) {
      uint64_t v85 = *(void *)&v73[-8 * ((unint64_t)(256 - v84) >> 8)] + 16 * (v84 - 1);
    }
    else {
      uint64_t v85 = *(void *)&v73[((unint64_t)(v84 - 1) >> 5) & 0x7FFFFFFFFFFFFF8]
    }
          + 16 * (v84 - 1);
    long long v86 = a3;
    long long v87 = (double **)v9;
    if ((double **)v85 == v72)
    {
      do
      {
        if (v73 >= v86 && (v73 != v86 || v80 >= v87)) {
          break;
        }
        if (v87 == *(double ***)v86)
        {
          uint64_t v91 = *((void *)v86 - 1);
          v86 -= 8;
          long long v87 = (double **)(v91 + 4096);
        }
        long long v92 = *(v87 - 2);
        v87 -= 2;
      }
      while (*v92 >= v79);
    }
    else
    {
      uint64_t v88 = *(double ***)a3;
      long long v86 = a3;
      long long v87 = (double **)v9;
      do
      {
        if (v87 == v88)
        {
          long long v89 = (double **)*((void *)v86 - 1);
          v86 -= 8;
          uint64_t v88 = v89;
          long long v87 = v89 + 512;
        }
        uint64_t v90 = *(v87 - 2);
        v87 -= 2;
      }
      while (*v90 >= v79);
    }
    BOOL v94 = v73 != v86 || v80 >= v87;
    BOOL v95 = v73 >= v86 && v94;
    while (v73 < v86 || v73 == v86 && v80 < v87)
    {
      *double v80 = *v87;
      *long long v87 = v83;
      uint64_t v96 = v80[1];
      v80[1] = v87[1];
      v87[1] = v96;
      BOOL v81 = *(double ***)v73;
      do
      {
        v80 += 2;
        if ((char *)v80 - (char *)v81 == 4096)
        {
          uint64_t v97 = (double **)*((void *)v73 + 1);
          v73 += 8;
          BOOL v81 = v97;
          double v80 = v97;
        }
        __int16 v83 = *v80;
      }
      while (**v80 < v79);
      long long v98 = *(double ***)v86;
      do
      {
        if (v87 == v98)
        {
          long long v99 = (double **)*((void *)v86 - 1);
          v86 -= 8;
          long long v98 = v99;
          long long v87 = v99 + 512;
        }
        int v100 = *(v87 - 2);
        v87 -= 2;
      }
      while (*v100 >= v79);
    }
    uint64_t v101 = (char *)v80 - (char *)v81;
    uint64_t v102 = v101 >> 4;
    if (v101 < 17)
    {
      unint64_t v105 = 256 - v102;
      v73 -= 8 * (v105 >> 8);
      uint64_t v104 = *(void *)v73 + 16 * ~(_BYTE)v105;
    }
    else
    {
      unint64_t v103 = v102 - 1;
      v73 += 8 * (v103 >> 8);
      uint64_t v104 = *(void *)v73 + 16 * v103;
    }
    if ((double **)v104 != v72)
    {
      long long v106 = *(_OWORD *)v104;
      *(void *)uint64_t v104 = 0;
      *(void *)(v104 + 8) = 0;
      BOOL v107 = (std::__shared_weak_count *)v72[1];
      *(_OWORD *)uint64_t v72 = v106;
      if (v107) {
        sub_1000DB0A0(v107);
      }
    }
    __int16 v108 = *(std::__shared_weak_count **)(v104 + 8);
    *(void *)uint64_t v104 = v74;
    *(void *)(v104 + 8) = v78;
    if (v108) {
      sub_1000DB0A0(v108);
    }
    if (v95)
    {
      BOOL v109 = sub_10113E600(v267, (uint64_t)v268, v73, v104);
      uint64_t v110 = v104 - *(void *)v73;
      uint64_t v111 = v110 >> 4;
      if (v110 < -15)
      {
        unint64_t v120 = 254 - v111;
        uint64_t v113 = &v73[-8 * (v120 >> 8)];
        uint64_t v114 = *(void *)v113 + 16 * ~(_BYTE)v120;
      }
      else
      {
        unint64_t v112 = v111 + 1;
        uint64_t v113 = &v73[8 * (v112 >> 8)];
        uint64_t v114 = *(void *)v113 + 16 * v112;
      }
      if (sub_10113E600(v113, v114, a3, v9))
      {
        if (v109) {
          return;
        }
        uint64_t v11 = v268;
        a3 = v73;
        unint64_t v9 = v104;
        goto LABEL_137;
      }
      if (v109)
      {
        uint64_t v11 = (double **)(v104 + 16);
        if (v104 + 16 - *(void *)v73 == 4096)
        {
          __int16 v121 = (double **)*((void *)v73 + 1);
          v73 += 8;
          uint64_t v11 = v121;
        }
        goto LABEL_136;
      }
    }
    sub_10113D38C(v267, v268, v73, v104, a5, a6 & 1);
    uint64_t v11 = (double **)(v104 + 16);
    if (v104 + 16 - *(void *)v73 == 4096)
    {
      uint64_t v122 = (double **)*((void *)v73 + 1);
      v73 += 8;
      uint64_t v11 = v122;
    }
LABEL_135:
    a6 = 0;
LABEL_136:
    long long v267 = v73;
    long long v268 = v11;
LABEL_137:
    BOOL v6 = v9 > (unint64_t)v11;
    if ((double **)v9 == v11) {
      return;
    }
  }
  switch(v16)
  {
    case 0uLL:
    case 1uLL:
      return;
    case 2uLL:
      if ((double **)v9 == v14) {
        unint64_t v9 = *((void *)a3 - 1) + 4096;
      }
      long long v144 = *(double **)(v9 - 16);
      if (*v144 < **v11)
      {
        long long v145 = *v11;
        *uint64_t v11 = v144;
        *(void *)(v9 - 16) = v145;
        long long v146 = v11[1];
        v11[1] = *(double **)(v9 - 8);
        *(void *)(v9 - 8) = v146;
      }
      return;
    case 3uLL:
      uint64_t v147 = (char *)v11 - v15;
      uint64_t v148 = ((char *)v11 - v15) >> 4;
      if (v147 < -15)
      {
        unint64_t v219 = 254 - v148;
        uint64_t v150 = &v267[-8 * (v219 >> 8)];
        uint64_t v151 = *(void *)v150 + 16 * ~(_BYTE)v219;
      }
      else
      {
        unint64_t v149 = v148 + 1;
        uint64_t v150 = &v267[8 * (v149 >> 8)];
        uint64_t v151 = *(void *)v150 + 16 * v149;
      }
      if ((double **)v9 == v14)
      {
        uint64_t v220 = *((void *)a3 - 1);
        a3 -= 8;
        unint64_t v9 = v220 + 4096;
      }
      sub_10113E52C((uint64_t)v267, v11, (uint64_t)v150, v151, (uint64_t)a3, v9 - 16);
      return;
    case 4uLL:
      uint64_t v152 = (char *)v11 - v15;
      uint64_t v153 = ((char *)v11 - v15) >> 4;
      if (v152 >= -15)
      {
        long long v154 = &v267[8 * ((unint64_t)(v153 + 1) >> 8)];
        long long v155 = (double **)(*(void *)v154 + 16 * (v153 + 1));
        unint64_t v156 = v153 + 2;
LABEL_228:
        long long v221 = &v267[8 * (v156 >> 8)];
        long long v222 = (double **)(*(void *)v221 + 16 * v156);
        goto LABEL_245;
      }
      long long v154 = &v267[-8 * ((unint64_t)(254 - v153) >> 8)];
      long long v155 = (double **)(*(void *)v154 + 16 * ~(-2 - v153));
      if ((unint64_t)v152 >= 0xFFFFFFFFFFFFFFE1)
      {
        unint64_t v156 = 1;
        goto LABEL_228;
      }
      unint64_t v239 = 253 - v153;
      long long v221 = &v267[-8 * (v239 >> 8)];
      long long v222 = (double **)(*(void *)v221 + 16 * ~(_BYTE)v239);
LABEL_245:
      if ((double **)v9 == v14)
      {
        uint64_t v240 = *((void *)a3 - 1);
        a3 -= 8;
        unint64_t v9 = v240 + 4096;
      }
      sub_10113EB80((uint64_t)v267, v11, (uint64_t)v154, v155, (uint64_t)v221, v222, (uint64_t)a3, (double **)(v9 - 16));
      return;
    case 5uLL:
      uint64_t v157 = (char *)v11 - v15;
      uint64_t v158 = ((char *)v11 - v15) >> 4;
      if (v157 >= -15)
      {
        long long v159 = &v267[8 * ((unint64_t)(v158 + 1) >> 8)];
        uint64_t v160 = *(void *)v159 + 16 * (v158 + 1);
        unint64_t v161 = v158 + 2;
LABEL_231:
        long long v223 = &v267[8 * (v161 >> 8)];
        uint64_t v224 = *(void *)v223 + 16 * v161;
        unint64_t v225 = v158 + 3;
LABEL_232:
        long long v226 = &v267[8 * (v225 >> 8)];
        uint64_t v227 = *(void *)v226 + 16 * v225;
        goto LABEL_233;
      }
      long long v159 = &v267[-8 * ((unint64_t)(254 - v158) >> 8)];
      uint64_t v160 = *(void *)v159 + 16 * ~(-2 - v158);
      if ((unint64_t)v157 >= 0xFFFFFFFFFFFFFFE1)
      {
        unint64_t v161 = 1;
        goto LABEL_231;
      }
      long long v223 = &v267[-8 * ((unint64_t)(253 - v158) >> 8)];
      uint64_t v224 = *(void *)v223 + 16 * ~(-3 - v158);
      if ((unint64_t)v157 >= 0xFFFFFFFFFFFFFFD1)
      {
        unint64_t v225 = 1;
        goto LABEL_232;
      }
      unint64_t v264 = 252 - v158;
      long long v226 = &v267[-8 * (v264 >> 8)];
      uint64_t v227 = *(void *)v226 + 16 * ~(_BYTE)v264;
LABEL_233:
      if ((double **)v9 == v14) {
        unint64_t v9 = *((void *)a3 - 1) + 4096;
      }
      sub_10113EB80((uint64_t)v267, v11, (uint64_t)v159, (double **)v160, (uint64_t)v223, (double **)v224, (uint64_t)v226, (double **)v227);
      long long v228 = *(double **)(v9 - 16);
      long long v229 = *(double **)v227;
      if (*v228 < **(double **)v227)
      {
        *(void *)uint64_t v227 = v228;
        *(void *)(v9 - 16) = v229;
        uint64_t v230 = *(void *)(v227 + 8);
        *(void *)(v227 + 8) = *(void *)(v9 - 8);
        *(void *)(v9 - 8) = v230;
        long long v231 = *(double **)v224;
        if (**(double **)v227 < **(double **)v224)
        {
          *(void *)uint64_t v224 = *(void *)v227;
          *(void *)uint64_t v227 = v231;
          uint64_t v232 = *(void *)(v224 + 8);
          *(void *)(v224 + 8) = *(void *)(v227 + 8);
          *(void *)(v227 + 8) = v232;
          long long v233 = *(double **)v160;
          if (**(double **)v224 < **(double **)v160)
          {
            *(void *)uint64_t v160 = *(void *)v224;
            *(void *)uint64_t v224 = v233;
            uint64_t v234 = *(void *)(v160 + 8);
            *(void *)(v160 + 8) = *(void *)(v224 + 8);
            *(void *)(v224 + 8) = v234;
            long long v235 = *v11;
            if (**(double **)v160 < **v11)
            {
              *uint64_t v11 = *(double **)v160;
              *(void *)uint64_t v160 = v235;
              long long v236 = v11[1];
              v11[1] = *(double **)(v160 + 8);
              *(void *)(v160 + 8) = v236;
            }
          }
        }
      }
      break;
    default:
      JUMPOUT(0);
  }
}

void sub_10113E4FC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10113E52C(uint64_t a1, double **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  BOOL v6 = *(double **)a4;
  double v7 = **(double **)a4;
  CFStringRef v8 = *a2;
  unint64_t v9 = *(double **)a6;
  double v10 = **(double **)a6;
  if (v7 < **a2)
  {
    if (v10 >= v7)
    {
      *a2 = v6;
      *(void *)a4 = v8;
      unint64_t v16 = a2[1];
      a2[1] = *(double **)(a4 + 8);
      *(void *)(a4 + 8) = v16;
      uint64_t v17 = *(double **)a4;
      if (**(double **)a6 >= **(double **)a4) {
        return;
      }
      *(void *)a4 = *(void *)a6;
      *(void *)a6 = v17;
      uint64_t v12 = (uint64_t *)(a6 + 8);
      uint64_t v11 = (uint64_t *)(a4 + 8);
    }
    else
    {
      *a2 = v9;
      uint64_t v11 = (uint64_t *)(a2 + 1);
      *(void *)a6 = v8;
      uint64_t v12 = (uint64_t *)(a6 + 8);
    }
    uint64_t v13 = v12;
    goto LABEL_10;
  }
  if (v10 < v7)
  {
    *(void *)a4 = v9;
    *(void *)a6 = v6;
    uint64_t v13 = (uint64_t *)(a4 + 8);
    uint64_t v14 = *(void *)(a4 + 8);
    *(void *)(a4 + 8) = *(void *)(a6 + 8);
    *(void *)(a6 + 8) = v14;
    uint64_t v15 = *a2;
    if (**(double **)a4 < **a2)
    {
      *a2 = *(double **)a4;
      uint64_t v11 = (uint64_t *)(a2 + 1);
      *(void *)a4 = v15;
LABEL_10:
      uint64_t v18 = *v11;
      *uint64_t v11 = *v13;
      *uint64_t v13 = v18;
    }
  }
}

BOOL sub_10113E600(char *a1, uint64_t a2, char *a3, uint64_t a4)
{
  if (a4 == a2) {
    return 1;
  }
  uint64_t v4 = a4;
  uint64_t v5 = (uint64_t)a3;
  uint64_t v7 = *(void *)a3;
  uint64_t v8 = a2 - *(void *)a1;
  uint64_t v9 = v8 >> 4;
  uint64_t v10 = 1;
  switch(((a4 - *(void *)a3) >> 4) + 32 * (a3 - a1) - (v8 >> 4))
  {
    case 0:
    case 1:
      return v10;
    case 2:
      if (v7 == a4) {
        uint64_t v4 = *((void *)a3 - 1) + 4096;
      }
      uint64_t v11 = *(double **)(v4 - 16);
      uint64_t v12 = *(double **)a2;
      if (*v11 < **(double **)a2)
      {
        *(void *)a2 = v11;
        *(void *)(v4 - 16) = v12;
        uint64_t v13 = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = *(void *)(v4 - 8);
        *(void *)(v4 - 8) = v13;
      }
      return 1;
    case 3:
      if (v8 < -15)
      {
        uint64_t v14 = &a1[-8 * ((unint64_t)(254 - v9) >> 8)];
        uint64_t v15 = *(void *)v14 + 16 * ~(-2 - v9);
      }
      else
      {
        uint64_t v14 = &a1[8 * ((unint64_t)(v9 + 1) >> 8)];
        uint64_t v15 = *(void *)v14 + 16 * (v9 + 1);
      }
      if (v7 == v4)
      {
        uint64_t v26 = *(void *)(v5 - 8);
        v5 -= 8;
        uint64_t v4 = v26 + 4096;
      }
      sub_10113E52C((uint64_t)a1, (double **)a2, (uint64_t)v14, v15, v5, v4 - 16);
      return 1;
    case 4:
      if (v8 >= -15)
      {
        uint64_t v20 = &a1[8 * ((unint64_t)(v9 + 1) >> 8)];
        uint64_t v21 = (double **)(*(void *)v20 + 16 * (v9 + 1));
        unint64_t v22 = v9 + 2;
LABEL_35:
        double v43 = &a1[8 * (v22 >> 8)];
        uint64_t v44 = (double **)(*(void *)v43 + 16 * v22);
        goto LABEL_63;
      }
      uint64_t v20 = &a1[-8 * ((unint64_t)(254 - v9) >> 8)];
      uint64_t v21 = (double **)(*(void *)v20 + 16 * ~(-2 - v9));
      if ((unint64_t)v8 >= 0xFFFFFFFFFFFFFFE1)
      {
        unint64_t v22 = 1;
        goto LABEL_35;
      }
      double v43 = &a1[-8 * ((unint64_t)(253 - v9) >> 8)];
      uint64_t v44 = (double **)(*(void *)v43 + 16 * ~(-3 - v9));
LABEL_63:
      if (v7 == v4)
      {
        uint64_t v65 = *(void *)(v5 - 8);
        v5 -= 8;
        uint64_t v4 = v65 + 4096;
      }
      sub_10113EB80((uint64_t)a1, (double **)a2, (uint64_t)v20, v21, (uint64_t)v43, v44, v5, (double **)(v4 - 16));
      return 1;
    case 5:
      if (v8 >= -15)
      {
        uint64_t v23 = &a1[8 * ((unint64_t)(v9 + 1) >> 8)];
        uint64_t v24 = *(void *)v23 + 16 * (v9 + 1);
        unint64_t v25 = v9 + 2;
LABEL_22:
        int v27 = &a1[8 * (v25 >> 8)];
        uint64_t v28 = *(void *)v27 + 16 * v25;
        unint64_t v29 = v9 + 3;
LABEL_23:
        uint64_t v30 = &a1[8 * (v29 >> 8)];
        uint64_t v31 = *(void *)v30 + 16 * v29;
        goto LABEL_24;
      }
      uint64_t v23 = &a1[-8 * ((unint64_t)(254 - v9) >> 8)];
      uint64_t v24 = *(void *)v23 + 16 * ~(-2 - v9);
      if ((unint64_t)v8 >= 0xFFFFFFFFFFFFFFE1)
      {
        unint64_t v25 = 1;
        goto LABEL_22;
      }
      int v27 = &a1[-8 * ((unint64_t)(253 - v9) >> 8)];
      uint64_t v28 = *(void *)v27 + 16 * ~(-3 - v9);
      if ((unint64_t)v8 >= 0xFFFFFFFFFFFFFFD1)
      {
        unint64_t v29 = 1;
        goto LABEL_23;
      }
      uint64_t v30 = &a1[-8 * ((unint64_t)(252 - v9) >> 8)];
      uint64_t v31 = *(void *)v30 + 16 * ~(-4 - v9);
LABEL_24:
      if (v7 == a4) {
        uint64_t v4 = *(void *)(v5 - 8) + 4096;
      }
      sub_10113EB80((uint64_t)a1, (double **)a2, (uint64_t)v23, (double **)v24, (uint64_t)v27, (double **)v28, (uint64_t)v30, (double **)v31);
      unint64_t v32 = *(double **)(v4 - 16);
      unint64_t v33 = *(double **)v31;
      if (*v32 < **(double **)v31)
      {
        *(void *)uint64_t v31 = v32;
        *(void *)(v4 - 16) = v33;
        uint64_t v34 = *(void *)(v31 + 8);
        *(void *)(v31 + 8) = *(void *)(v4 - 8);
        *(void *)(v4 - 8) = v34;
        unint64_t v35 = *(double **)v28;
        if (**(double **)v31 < **(double **)v28)
        {
          *(void *)uint64_t v28 = *(void *)v31;
          *(void *)uint64_t v31 = v35;
          uint64_t v36 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = *(void *)(v31 + 8);
          *(void *)(v31 + 8) = v36;
          __int16 v37 = *(double **)v24;
          if (**(double **)v28 < **(double **)v24)
          {
            *(void *)uint64_t v24 = *(void *)v28;
            *(void *)uint64_t v28 = v37;
            uint64_t v38 = *(void *)(v24 + 8);
            *(void *)(v24 + 8) = *(void *)(v28 + 8);
            *(void *)(v28 + 8) = v38;
            uint64_t v39 = *(double **)a2;
            if (**(double **)v24 < **(double **)a2)
            {
              *(void *)a2 = *(void *)v24;
              *(void *)uint64_t v24 = v39;
              uint64_t v40 = *(void *)(a2 + 8);
              *(void *)(a2 + 8) = *(void *)(v24 + 8);
              *(void *)(v24 + 8) = v40;
            }
          }
        }
      }
      return 1;
    default:
      if (v8 <= -32)
      {
        unint64_t v16 = &a1[-8 * ((unint64_t)(253 - v9) >> 8)];
        uint64_t v17 = *(void *)v16 + 16 * ~(-3 - v9);
        unint64_t v19 = 254 - v9;
        goto LABEL_32;
      }
      unint64_t v16 = &a1[8 * ((unint64_t)(v9 + 2) >> 8)];
      uint64_t v17 = *(void *)v16 + 16 * (v9 + 2);
      unint64_t v18 = v9 + 1;
      if (v9 == -1)
      {
        unint64_t v19 = 255;
LABEL_32:
        uint64_t v41 = &a1[-8 * (v19 >> 8)];
        uint64_t v42 = *(void *)v41 + 16 * ~(_BYTE)v19;
        goto LABEL_39;
      }
      uint64_t v41 = &a1[8 * (v18 >> 8)];
      uint64_t v42 = *(void *)v41 + 16 * v18;
LABEL_39:
      sub_10113E52C((uint64_t)a1, (double **)a2, (uint64_t)v41, v42, (uint64_t)v16, v17);
      uint64_t v45 = v17 - *(void *)v16;
      uint64_t v46 = v45 >> 4;
      if (v45 < -15)
      {
        unint64_t v49 = 254 - v46;
        unsigned __int8 v47 = ~(_BYTE)v49;
        unint64_t v48 = (uint64_t *)&v16[-8 * (v49 >> 8)];
      }
      else
      {
        unsigned __int8 v47 = v46 + 1;
        unint64_t v48 = (uint64_t *)&v16[8 * ((unint64_t)(v46 + 1) >> 8)];
      }
      uint64_t v50 = *v48;
      uint64_t v51 = *v48 + 16 * v47;
      if (v51 == v4) {
        return 1;
      }
      int v52 = 0;
      break;
  }
  while (1)
  {
    uint64_t v53 = v51;
    uint64_t v54 = v48;
    uint64_t v55 = *(double **)v51;
    if (**(double **)v51 < **(double **)v17) {
      break;
    }
LABEL_58:
    uint64_t v51 = v53 + 16;
    unint64_t v48 = v54;
    if (v53 + 16 - v50 == 4096)
    {
      unint64_t v48 = v54 + 1;
      uint64_t v50 = v54[1];
      uint64_t v51 = v50;
    }
    unint64_t v16 = (char *)v54;
    uint64_t v17 = v53;
    if (v51 == v4) {
      return 1;
    }
  }
  uint64_t v56 = *(void *)(v51 + 8);
  *(void *)uint64_t v51 = 0;
  *(void *)(v51 + 8) = 0;
  __int16 v57 = *(double **)v17;
  uint64_t v58 = (void *)v51;
  while (1)
  {
    unint64_t v59 = (void *)v17;
    uint64_t v60 = *(void *)(v17 + 8);
    *(void *)uint64_t v17 = 0;
    *(void *)(v17 + 8) = 0;
    __int16 v61 = (std::__shared_weak_count *)v58[1];
    *uint64_t v58 = v57;
    v58[1] = v60;
    if (v61) {
      sub_1000DB0A0(v61);
    }
    if (v17 == a2) {
      break;
    }
    if (v17 == *(void *)v16)
    {
      uint64_t v62 = *((void *)v16 - 1);
      v16 -= 8;
      uint64_t v17 = v62 + 4096;
    }
    __int16 v63 = *(double **)(v17 - 16);
    v17 -= 16;
    __int16 v57 = v63;
    uint64_t v58 = v59;
    if (*v55 >= *v63) {
      goto LABEL_54;
    }
  }
  unint64_t v59 = (void *)a2;
LABEL_54:
  uint64_t v64 = (std::__shared_weak_count *)v59[1];
  *unint64_t v59 = v55;
  v59[1] = v56;
  if (v64) {
    sub_1000DB0A0(v64);
  }
  if (++v52 != 8)
  {
    uint64_t v50 = *v54;
    goto LABEL_58;
  }
  uint64_t v67 = v53 + 16;
  if (v53 + 16 - *v54 == 4096) {
    uint64_t v67 = v54[1];
  }
  return v67 == v4;
}

void sub_10113EB80(uint64_t a1, double **a2, uint64_t a3, double **a4, uint64_t a5, double **a6, uint64_t a7, double **a8)
{
  sub_10113E52C(a1, a2, a3, (uint64_t)a4, a5, (uint64_t)a6);
  uint64_t v12 = *a6;
  if (**a8 < **a6)
  {
    *a6 = *a8;
    *a8 = v12;
    uint64_t v13 = a6[1];
    a6[1] = a8[1];
    a8[1] = v13;
    uint64_t v14 = *a4;
    if (**a6 < **a4)
    {
      *a4 = *a6;
      *a6 = v14;
      uint64_t v15 = a4[1];
      a4[1] = a6[1];
      a6[1] = v15;
      unint64_t v16 = *a2;
      if (**a4 < **a2)
      {
        *a2 = *a4;
        *a4 = v16;
        uint64_t v17 = a2[1];
        a2[1] = a4[1];
        a4[1] = v17;
      }
    }
  }
}

void sub_10113EC48(char *a1, double **a2, uint64_t a3, char *a4, double **a5)
{
  uint64_t v5 = a5;
  v29[0] = a1;
  v29[1] = a2;
  if (a2 == a5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = (((uint64_t)a5 - *(void *)a4) >> 4) + 32 * (a4 - a1) - (((uint64_t)a2 - *(void *)a1) >> 4);
  }
  unint64_t v8 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) >= v7)
    {
      uint64_t v10 = 2 * v7;
      uint64_t v11 = (2 * v7) | 1;
      uint64_t v12 = sub_1000D9B0C((uint64_t)v29, v11);
      if (v10 + 2 < a3)
      {
        uint64_t v14 = (uint64_t)v13 - *v12;
        uint64_t v15 = v14 >> 4;
        unint64_t v16 = (double **)(v14 < -15
                        ? v12[-((unint64_t)(254 - v15) >> 8)] + 16 * ~(-2 - v15)
                        : *(void *)((char *)v12 + (((unint64_t)(v15 + 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * (v15 + 1));
        if (**v13 < **v16)
        {
          v13 += 2;
          if ((double **)((char *)v13 - *v12) == (double **)4096) {
            uint64_t v13 = (double **)v12[1];
          }
          uint64_t v11 = v10 + 2;
        }
      }
      uint64_t v17 = *v5;
      if (**v13 >= **v5)
      {
        unint64_t v18 = v5[1];
        *uint64_t v5 = 0;
        v5[1] = 0;
        unint64_t v19 = *v13;
        do
        {
          uint64_t v20 = v5;
          uint64_t v5 = v13;
          uint64_t v21 = v13[1];
          *uint64_t v13 = 0;
          v13[1] = 0;
          unint64_t v22 = (std::__shared_weak_count *)v20[1];
          *uint64_t v20 = v19;
          v20[1] = v21;
          if (v22) {
            sub_1000DB0A0(v22);
          }
          if (v9 < v11) {
            break;
          }
          uint64_t v23 = (2 * v11) | 1;
          uint64_t v24 = sub_1000D9B0C((uint64_t)v29, v23);
          if (2 * v11 + 2 < a3)
          {
            uint64_t v25 = (uint64_t)v13 - *v24;
            uint64_t v26 = v25 >> 4;
            int v27 = (double **)(v25 < -15
                            ? v24[-((unint64_t)(254 - v26) >> 8)] + 16 * ~(-2 - v26)
                            : *(void *)((char *)v24 + (((unint64_t)(v26 + 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                            + 16 * (v26 + 1));
            if (**v13 < **v27)
            {
              v13 += 2;
              if ((double **)((char *)v13 - *v24) == (double **)4096) {
                uint64_t v13 = (double **)v24[1];
              }
              uint64_t v23 = 2 * v11 + 2;
            }
          }
          unint64_t v19 = *v13;
          uint64_t v11 = v23;
        }
        while (**v13 >= *v17);
        uint64_t v28 = (std::__shared_weak_count *)v5[1];
        *uint64_t v5 = v17;
        v5[1] = v18;
        if (v28) {
          sub_1000DB0A0(v28);
        }
      }
    }
  }
}

void sub_10113EE80(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10113EE98()
{
  qword_1024859A0 = 0;
  qword_1024859A8 = 0;
  qword_1024859B0 = 0;
  uint64_t v0 = operator new(0x44uLL);
  qword_1024859A8 = (uint64_t)(v0 + 17);
  qword_1024859B0 = (uint64_t)(v0 + 17);
  v0[16] = 1189765120;
  *(_OWORD *)uint64_t v0 = xmmword_101DA91A4;
  *((_OWORD *)v0 + 1) = unk_101DA91B4;
  *((_OWORD *)v0 + 2) = xmmword_101DA91C4;
  *((_OWORD *)v0 + 3) = unk_101DA91D4;
  qword_1024859A0 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_1003B1838, &qword_1024859A0, (void *)&_mh_execute_header);
  qword_1024859C0 = 0;
  unk_1024859C8 = 0;
  qword_1024859B8 = 0;
  uint64_t v1 = operator new(0x30uLL);
  qword_1024859C0 = (uint64_t)(v1 + 3);
  unk_1024859C8 = v1 + 3;
  *uint64_t v1 = xmmword_101DA91E8;
  v1[1] = unk_101DA91F8;
  v1[2] = xmmword_101DA9208;
  qword_1024859B8 = (uint64_t)v1;

  return __cxa_atexit((void (*)(void *))sub_1003B1838, &qword_1024859B8, (void *)&_mh_execute_header);
}

uint64_t sub_10113EF84(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v6 = sub_100054C14(a1, a2, a3, a4, a5);
  *(void *)uint64_t v6 = off_102313A10;
  *(unsigned char *)(v6 + 41) = 0;
  *(void *)(v6 + 48) = 0;
  *(_DWORD *)(v6 + 56) = 3;
  int v11 = 0;
  sub_1000C7F88(&v9);
  int v7 = sub_10006EF84(v9, "OnBodyStatusOverride", &v11);
  if (v10) {
    sub_1000DB0A0(v10);
  }
  if (v7)
  {
    *(unsigned char *)(a1 + 41) = 1;
    *(_DWORD *)(a1 + 56) = v11;
  }
  return a1;
}

void sub_10113F028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  uint64_t v13 = *(void *)(v11 + 48);
  *(void *)(v11 + 48) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  sub_100029A7C(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_10113F084(void *a1)
{
  *a1 = off_102313A10;
  uint64_t v2 = a1[6];
  a1[6] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  return sub_100029A7C((uint64_t)a1);
}

void sub_10113F108(void *a1)
{
  sub_10113F084(a1);

  operator delete();
}

void *sub_10113F140@<X0>(uint64_t a1@<X8>)
{
  v5[0] = off_102313AB0;
  v5[1] = sub_10113F2F8;
  _DWORD v5[2] = 0;
  v5[3] = v5;
  sub_100134750(v6, "kCLConnectionMessageOnBodyDetection");
  sub_100BF9938((uint64_t)&v7, (uint64_t)v5);
  v4[0] = off_102313B60;
  v4[1] = sub_10113F610;
  _DWORD v4[2] = 0;
  v4[3] = v4;
  sub_100134750(v8, "kCLConnectionMessageOnBodyDetectionParams");
  sub_100BF9938((uint64_t)v9, (uint64_t)v4);
  sub_1011406BC(a1, (unsigned __int8 *)v6, 2);
  for (uint64_t i = 0; i != -14; i -= 7)
  {
    sub_100BF9E54(&v9[i * 8]);
    if (SHIBYTE(v8[i + 2]) < 0) {
      operator delete((void *)v8[i]);
    }
  }
  sub_100BF9E54(v4);
  return sub_100BF9E54(v5);
}

void sub_10113F298(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  for (uint64_t i = 56; i != -56; i -= 56)
    sub_10113F98C(v2 + i);
  sub_100BF9E54((uint64_t *)va);
  sub_100BF9E54(va1);
  _Unwind_Resume(a1);
}

void sub_10113F2F8(uint64_t a1, int a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_102419250 != -1) {
    dispatch_once(&qword_102419250, &stru_102313A60);
  }
  uint64_t v5 = qword_102419258;
  if (os_log_type_enabled((os_log_t)qword_102419258, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void *)(a1 + 24);
    buf[0] = 138412546;
    *(void *)&buf[1] = v6;
    __int16 v10 = 1024;
    int v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Received OnBodyDetection request,client,%@,subscribe,%d", (uint8_t *)buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419250 != -1) {
      dispatch_once(&qword_102419250, &stru_102313A60);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOnBodyDetectionSubscription::handleRequestOnBodyDetection(BOOL, const CLNameValuePair &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if (sub_10113FD04(a1))
  {
    sub_10009C834(a1);
    uint64_t v7 = *(void *)(a1 + 48);
    if (a2)
    {
      if (!v7) {
        sub_100C67AF8();
      }
    }
    else if (v7)
    {
      *(void *)(a1 + 48) = 0;
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
}

void sub_10113F5DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10113F610(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_102419250 != -1) {
    dispatch_once(&qword_102419250, &stru_102313A60);
  }
  uint64_t v5 = qword_102419258;
  if (os_log_type_enabled((os_log_t)qword_102419258, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419250 != -1) {
      dispatch_once(&qword_102419250, &stru_102313A60);
    }
    __int16 v11 = 0;
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOnBodyDetectionSubscription::handleMessageOnBodyDetectionParams(std::shared_ptr<CLConnectionMessage>)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if (sub_10113FD04(a1))
  {
    uint64_t Dictionary = CLConnectionMessage::getDictionary(*a2);
    if (Dictionary)
    {
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_1011400F0;
      v10[3] = &unk_1022CA588;
      void v10[4] = Dictionary;
      sub_100C67BF0((uint64_t)v10);
    }
    else
    {
      if (qword_102419250 != -1) {
        dispatch_once(&qword_102419250, &stru_102313A60);
      }
      uint64_t v7 = qword_102419258;
      if (os_log_type_enabled((os_log_t)qword_102419258, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Wrong parameters were passed!", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419250 != -1) {
          dispatch_once(&qword_102419250, &stru_102313A60);
        }
        __int16 v11 = 0;
        uint64_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLOnBodyDetectionSubscription::handleMessageOnBodyDetectionParams(std::shared_ptr<CLConnectionMessage>)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
    }
  }
}

void sub_10113F958(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10113F98C(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10113F9C8(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  int v6 = *(unsigned __int8 *)(a1 + 41);
  id v7 = objc_alloc((Class)CMOnBodyStatus);
  if (v6)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 56);
    double v9 = a4[1];
    uint64_t v10 = 1;
  }
  else
  {
    uint64_t v8 = *(unsigned int *)a4;
    uint64_t v10 = *((unsigned int *)a4 + 1);
    double v9 = a4[1];
  }
  id v11 = [v7 initWithOnBodyResult:v8 confidence:v10 timestamp:v9];
  uint64_t v22 = CMOnBodyStatusData;
  id v23 = v11;
  +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];

  sub_10113FC80(a1);
  if (qword_102419250 != -1) {
    dispatch_once(&qword_102419250, &stru_102313A60);
  }
  uint64_t v12 = qword_102419258;
  if (os_log_type_enabled((os_log_t)qword_102419258, OS_LOG_TYPE_DEBUG))
  {
    if (*(unsigned char *)(a1 + 41)) {
      uint64_t v13 = " overridden";
    }
    else {
      uint64_t v13 = "";
    }
    uint64_t v14 = *(void *)(a1 + 24);
    *(_DWORD *)buf = 136315650;
    uint64_t v17 = v13;
    __int16 v18 = 2112;
    uint64_t v19 = v14;
    __int16 v20 = 2080;
    id v21 = [[[v11 description] UTF8String];
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Sent%s onBodyDetection message to %@, %s", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419250 != -1) {
      dispatch_once(&qword_102419250, &stru_102313A60);
    }
    [objc_msgSend(v11, "description") UTF8String];
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOnBodyDetectionSubscription::onOnBodyNotification(int, const CLOnBodyNotifier_Type::Notification &, const CLOnBodyNotifier_Type::NotificationData &)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
}

void sub_10113FC80(uint64_t a1)
{
  sub_1000E9420(&off_102313BD0, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_10113FCEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10113FD04(uint64_t a1)
{
  sub_100134750(__p, "com.apple.locationd.on_body_detection");
  uint64_t v2 = sub_1010A4BAC(a1);
  uint64_t v3 = v2;
  if (v9 < 0)
  {
    operator delete(*(void **)__p);
    if (v3) {
      return v3;
    }
  }
  else if (v2)
  {
    return v3;
  }
  if (qword_102419250 != -1) {
    dispatch_once(&qword_102419250, &stru_102313A60);
  }
  id v4 = qword_102419258;
  if (os_log_type_enabled((os_log_t)qword_102419258, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    *(_DWORD *)std::string __p = 138412290;
    *(void *)&__p[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning Client %@ does not have appropriate entitlement to access on body detection SPI", __p, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419250 != -1) {
      dispatch_once(&qword_102419250, &stru_102313A60);
    }
    id v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLOnBodyDetectionSubscription::isEntitledForOnBodyDetection()", "%s\n", v7);
    if (v7 != __p) {
      free(v7);
    }
  }
  return v3;
}

void sub_10113FEF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10113FF1C(uint64_t a1, uint64_t a2, double *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102313A80);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLOnBodyDetectionSubscription::onOnBodyNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102313A80);
    }
    char v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLOnBodyDetectionSubscription::onOnBodyNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10113F9C8(a4, v6, v7, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1011400D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011400F0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 208))(a2, *(void *)(a1 + 32));
}

void sub_101140120(id a1)
{
  qword_102419258 = (uint64_t)os_log_create("com.apple.locationd.Motion", "OnBody");
}

void sub_101140150(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

__n128 sub_101140180(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_102313AB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1011401CC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_102313AB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1011401FC(uint64_t a1, uint64_t a2, long long *a3)
{
}

uint64_t sub_101140204(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101140244()
{
}

void sub_101140250(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_1011402AC(a1, a2, (CLConnectionMessage **)&v3);
  if (*((void *)&v3 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v3 + 1));
  }
}

void sub_101140294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011402AC(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  uint64_t v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  CFDictionaryRef DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_10013FA80((int)v15, DictionaryOfClasses);
  BOOL v14 = 0;
  if (sub_1000D2988((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14))
  {
    uint64_t v8 = *(void (**)(void *, BOOL, uint8_t *))a1;
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v10 = (void *)(a2 + (v9 >> 1));
    if (v9) {
      uint64_t v8 = *(void (**)(void *, BOOL, uint8_t *))(*v10 + v8);
    }
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_102313B20);
    }
    char v11 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102313B20);
      }
    }
    uint64_t v12 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      *(_DWORD *)buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10013F3C4(v15);
}

void sub_1011404DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1011404F8(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_101140528(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_102313B60;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_101140574(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_102313B60;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1011405A4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_1011405AC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1011405EC()
{
}

void sub_1011405F8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  id v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v5 = *(void (**)(void *, uint64_t *))a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)(a2 + (v6 >> 1));
  if (v6) {
    uint64_t v5 = *(void (**)(void *, uint64_t *))(*v7 + v5);
  }
  uint64_t v8 = v3;
  uint64_t v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v5(v7, &v8);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (v4) {
    sub_1000DB0A0(v4);
  }
}

void sub_101140698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011406BC(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_101140738(a1, a2, (long long *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_101140724(_Unwind_Exception *a1)
{
  sub_100BF9ED8(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_101140738(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    int v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_1011409BC(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_101140AAC((uint64_t)v25, 0);
  return i;
}

void sub_1011409A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101140AAC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_1011409BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  __n128 result = sub_101140A34(v8 + 2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_101140A1C(_Unwind_Exception *a1)
{
  sub_101140AAC(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_101140A34(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
  }
  sub_100BF9690((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_101140A90(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_101140AAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100BF9F58((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t sub_101140F2C(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v6 = 0;
        int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v11 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        *(unsigned char *)(a1 + 44) |= 4u;
        unint64_t v13 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v13 <= 0xFFFFFFFFFFFFFFF7 && v13 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v14 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v13);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v13 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v14 = 0;
        }
        uint64_t v36 = 24;
        goto LABEL_69;
      case 2u:
        *(unsigned char *)(a1 + 44) |= 1u;
        unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v16 <= 0xFFFFFFFFFFFFFFF7 && v16 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v14 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v14 = 0;
        }
        uint64_t v36 = 8;
        goto LABEL_69;
      case 3u:
        *(unsigned char *)(a1 + 44) |= 2u;
        unint64_t v17 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v17 <= 0xFFFFFFFFFFFFFFF7 && v17 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v14 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v14 = 0;
        }
        uint64_t v36 = 16;
LABEL_69:
        *(void *)(a1 + v36) = v14;
        continue;
      case 4u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 44) |= 0x10u;
        while (2)
        {
          uint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v22 = v21 + 1;
          if (v21 == -1 || v22 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v23 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if (v23 < 0)
            {
              v18 += 7;
              BOOL v10 = v19++ >= 9;
              if (v10)
              {
                LODWORD(v20) = 0;
                goto LABEL_53;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v20) = 0;
        }
LABEL_53:
        uint64_t v35 = 36;
        goto LABEL_62;
      case 5u:
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 44) |= 0x20u;
        while (2)
        {
          uint64_t v27 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v28 = v27 + 1;
          if (v27 == -1 || v28 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v29 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28;
            v26 |= (unint64_t)(v29 & 0x7F) << v24;
            if (v29 < 0)
            {
              v24 += 7;
              BOOL v10 = v25++ >= 9;
              if (v10)
              {
                uint64_t v26 = 0;
                goto LABEL_57;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v26 = 0;
        }
LABEL_57:
        *(unsigned char *)(a1 + 40) = v26 != 0;
        continue;
      case 6u:
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 44) |= 8u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      uint64_t v32 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v33 = v32 + 1;
      if (v32 == -1 || v33 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v34 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v32);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v33;
      v20 |= (unint64_t)(v34 & 0x7F) << v30;
      if ((v34 & 0x80) == 0) {
        goto LABEL_59;
      }
      v30 += 7;
      BOOL v10 = v31++ >= 9;
      if (v10)
      {
        LODWORD(v20) = 0;
        goto LABEL_61;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_59:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v20) = 0;
    }
LABEL_61:
    uint64_t v35 = 32;
LABEL_62:
    *(_DWORD *)(a1 + v35) = v20;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

float sub_101141BD8(float a1, float a2)
{
  float v4 = 0.8856;
  if (a1 > 0.0) {
    float v4 = (float)(a1 * -0.7123) + 0.8856;
  }
  float v5 = 0.88649;
  if (a1 > 0.0) {
    float v5 = (float)(a1 * -0.71301) + 0.88649;
  }
  if (a2 <= 18.0) {
    float v6 = v5;
  }
  else {
    float v6 = v4;
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_102313BD8);
  }
  float v7 = fmaxf(v6, 0.0);
  unint64_t v8 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134284033;
    double v12 = a1;
    __int16 v13 = 2049;
    double v14 = a2;
    __int16 v15 = 2049;
    double v16 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "HR,fhr,%{private}0.2f,userAge,%{private}0.2f,normalizedMets,%{private}0.2f", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_102313BD8);
    }
    BOOL v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static float CLNatalieHeartRateModel::computeNormMETS(float, float)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  return v7;
}

void sub_101141E1C(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

int32x2_t *sub_101141E4C(int32x2_t *a1)
{
  *a1 = vdup_n_s32(0xC61C3C00);
  a1[1].i32[0] = -971228160;
  a1[2] = (int32x2_t)0xBFF0000000000000;
  a1[3] = 0;
  uint64_t v2 = (void **)&a1[3];
  a1[4] = 0;
  a1[5] = 0;
  unsigned __int8 v4 = 0;
  sub_10006ACBC((unsigned __int8 *)&a1[6], "DaylightIsAstronomicalDaytimeOverride", &v4, 0);
  sub_100231E88(v2, 0x40uLL);
  return a1;
}

void sub_101141ED0(_Unwind_Exception *exception_object)
{
  unsigned __int8 v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_101141EF8(id a1)
{
  qword_1024194F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Outdoor");
}

double *sub_101141F40(double *a1, double *a2)
{
  double v2 = *a1;
  float v3 = *a1;
  float v4 = *(a2 - 1);
  if (v3 <= v4)
  {
    unint64_t v8 = a1 + 1;
    do
    {
      float v5 = v8;
      if (v8 >= a2) {
        break;
      }
      ++v8;
      float v9 = *v5;
    }
    while (v3 <= v9);
  }
  else
  {
    float v5 = a1;
    do
    {
      double v6 = v5[1];
      ++v5;
      float v7 = v6;
    }
    while (v3 <= v7);
  }
  if (v5 < a2)
  {
    do
    {
      double v10 = *--a2;
      float v11 = v10;
    }
    while (v3 > v11);
  }
  if (v5 < a2)
  {
    double v12 = *v5;
    double v13 = *a2;
    do
    {
      *float v5 = v13;
      *a2 = v12;
      do
      {
        double v14 = v5[1];
        ++v5;
        double v12 = v14;
        float v15 = v14;
      }
      while (v3 <= v15);
      do
      {
        double v16 = *--a2;
        double v13 = v16;
        float v17 = v16;
      }
      while (v3 > v17);
    }
    while (v5 < a2);
  }
  if (v5 - 1 != a1) {
    *a1 = *(v5 - 1);
  }
  *(v5 - 1) = v2;
  return v5;
}

BOOL sub_10114200C(double *a1, double *a2)
{
  uint64_t v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      double v3 = *(a2 - 1);
      float v4 = v3;
      double v5 = *a1;
      float v6 = *a1;
      if (v4 > v6)
      {
        *a1 = v3;
        *(a2 - 1) = v5;
      }
      return v2;
    case 3:
      double v33 = a1[1];
      float v34 = v33;
      float v35 = *(a2 - 1);
      BOOL v36 = v34 <= v35;
      if (v34 <= v35) {
        uint64_t v37 = *((void *)a2 - 1);
      }
      else {
        uint64_t v37 = *((void *)a1 + 1);
      }
      if (!v36) {
        double v33 = *(a2 - 1);
      }
      *(a2 - 1) = v33;
      *((void *)a1 + 1) = v37;
      double v38 = *(a2 - 1);
      float v39 = v38;
      float v40 = *a1;
      BOOL v41 = v39 <= v40;
      if (v39 <= v40) {
        double v42 = *a1;
      }
      else {
        double v42 = *(a2 - 1);
      }
      if (!v41) {
        double v38 = *a1;
      }
      *(a2 - 1) = v38;
      float v43 = v42;
      float v44 = a1[1];
      BOOL v45 = v43 <= v44;
      if (v43 <= v44) {
        uint64_t v46 = *((void *)a1 + 1);
      }
      else {
        uint64_t v46 = *(void *)a1;
      }
      if (!v45) {
        double v42 = a1[1];
      }
      *(void *)a1 = v46;
      a1[1] = v42;
      return v2;
    case 4:
      uint64_t v47 = *(void *)a1;
      double v48 = a1[1];
      float v49 = *a1;
      float v50 = a1[2];
      BOOL v51 = v49 <= v50;
      if (v49 <= v50) {
        uint64_t v52 = *((void *)a1 + 2);
      }
      else {
        uint64_t v52 = *(void *)a1;
      }
      if (!v51) {
        uint64_t v47 = *((void *)a1 + 2);
      }
      *((void *)a1 + 2) = v47;
      *(void *)a1 = v52;
      float v53 = v48;
      float v54 = *(a2 - 1);
      BOOL v55 = v53 <= v54;
      if (v53 <= v54) {
        double v56 = *(a2 - 1);
      }
      else {
        double v56 = v48;
      }
      if (!v55) {
        double v48 = *(a2 - 1);
      }
      *(a2 - 1) = v48;
      float v57 = *a1;
      float v58 = v56;
      BOOL v59 = v57 <= v58;
      if (v57 <= v58) {
        double v60 = v56;
      }
      else {
        double v60 = *a1;
      }
      if (v59) {
        double v56 = *a1;
      }
      *a1 = v60;
      a1[1] = v56;
      double v61 = a1[2];
      float v62 = v61;
      float v63 = *(a2 - 1);
      BOOL v64 = v62 <= v63;
      if (v62 <= v63) {
        double v65 = *(a2 - 1);
      }
      else {
        double v65 = a1[2];
      }
      if (!v64) {
        double v61 = *(a2 - 1);
      }
      *(a2 - 1) = v61;
      double v66 = a1[1];
      float v67 = v66;
      float v68 = v65;
      BOOL v69 = v67 <= v68;
      if (v67 <= v68) {
        double v70 = v65;
      }
      else {
        double v70 = a1[1];
      }
      if (!v69) {
        double v66 = v65;
      }
      a1[1] = v70;
      a1[2] = v66;
      return v2;
    case 5:
      sub_10017E5C8(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      float v7 = a1 + 2;
      double v8 = a1[2];
      double v9 = *a1;
      float v10 = a1[1];
      float v11 = v8;
      BOOL v12 = v10 <= v11;
      if (v10 <= v11) {
        double v13 = a1[2];
      }
      else {
        double v13 = a1[1];
      }
      if (v12) {
        double v8 = a1[1];
      }
      float v14 = v8;
      float v15 = v9;
      BOOL v16 = v14 <= v15;
      if (v14 <= v15) {
        double v17 = *a1;
      }
      else {
        double v17 = v8;
      }
      if (!v16) {
        double v8 = *a1;
      }
      double *v7 = v8;
      float v18 = v17;
      float v19 = v13;
      BOOL v20 = v18 <= v19;
      if (v18 <= v19) {
        double v21 = v13;
      }
      else {
        double v21 = v9;
      }
      if (!v20) {
        double v17 = v13;
      }
      *a1 = v21;
      a1[1] = v17;
      unint64_t v22 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v23 = 0;
      uint64_t v24 = 24;
      break;
  }
  while (1)
  {
    double v25 = *v22;
    float v26 = *v22;
    double v27 = *v7;
    float v28 = *v7;
    if (v26 > v28)
    {
      uint64_t v29 = v24;
      while (1)
      {
        *(double *)((char *)a1 + v29) = v27;
        uint64_t v30 = v29 - 8;
        if (v29 == 8) {
          break;
        }
        double v27 = *(double *)((char *)a1 + v29 - 16);
        float v31 = v27;
        v29 -= 8;
        if (v26 <= v31)
        {
          uint64_t v32 = (double *)((char *)a1 + v30);
          goto LABEL_28;
        }
      }
      uint64_t v32 = a1;
LABEL_28:
      *uint64_t v32 = v25;
      if (++v23 == 8) {
        return v22 + 1 == a2;
      }
    }
    float v7 = v22;
    v24 += 8;
    if (++v22 == a2) {
      return 1;
    }
  }
}

double *sub_1011422A0(double *a1, double *a2, double *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    float v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      BOOL v12 = &a1[v10];
      do
      {
        sub_101142448((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    double v13 = v6;
    if (v6 != a3)
    {
      float v14 = v6;
      do
      {
        double v15 = *v14;
        float v16 = *v14;
        float v17 = *a1;
        if (v16 > v17)
        {
          *float v14 = *a1;
          *a1 = v15;
          sub_101142448((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      double v13 = a3;
    }
    if (v8 >= 9)
    {
      uint64_t v18 = (unint64_t)v8 >> 3;
      do
      {
        uint64_t v19 = 0;
        double v20 = *a1;
        double v21 = a1;
        do
        {
          unint64_t v22 = v21;
          v21 += v19 + 1;
          uint64_t v23 = 2 * v19;
          uint64_t v19 = (2 * v19) | 1;
          uint64_t v24 = v23 + 2;
          if (v24 < v18)
          {
            float v25 = *v21;
            float v26 = v21[1];
            if (v25 > v26)
            {
              ++v21;
              uint64_t v19 = v24;
            }
          }
          *unint64_t v22 = *v21;
        }
        while (v19 <= (uint64_t)((unint64_t)(v18 - 2) >> 1));
        if (v21 == --v6)
        {
          *double v21 = v20;
        }
        else
        {
          *double v21 = *v6;
          *float v6 = v20;
          sub_101142520((uint64_t)a1, (uint64_t)(v21 + 1), a4, v21 + 1 - a1);
        }
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_101142448(uint64_t result, uint64_t a2, uint64_t a3, double *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) + 1;
      uint64_t v8 = (double *)(result + 8 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        float v10 = *v8;
        float v11 = v8[1];
        if (v10 > v11)
        {
          ++v8;
          uint64_t v7 = v9;
        }
      }
      double v12 = *v8;
      float v13 = *v8;
      double v14 = *a4;
      float v15 = *a4;
      if (v13 <= v15)
      {
        do
        {
          *a4 = v12;
          a4 = v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v16 = 2 * v7;
          uint64_t v7 = (2 * v7) | 1;
          uint64_t v8 = (double *)(result + 8 * v7);
          uint64_t v17 = v16 + 2;
          if (v17 < a3)
          {
            float v18 = *v8;
            float v19 = v8[1];
            if (v18 > v19)
            {
              ++v8;
              uint64_t v7 = v17;
            }
          }
          double v12 = *v8;
          float v20 = *v8;
        }
        while (v20 <= v15);
        *a4 = v14;
      }
    }
  }
  return result;
}

uint64_t sub_101142520(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    int64_t v5 = (double *)(result + 8 * v4);
    double v6 = *v5;
    float v7 = *v5;
    double v9 = *(double *)(a2 - 8);
    uint64_t v8 = (double *)(a2 - 8);
    double v10 = v9;
    float v11 = v9;
    if (v7 > v11)
    {
      do
      {
        *uint64_t v8 = v6;
        uint64_t v8 = v5;
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
        int64_t v5 = (double *)(result + 8 * v4);
        double v6 = *v5;
        float v12 = *v5;
      }
      while (v12 > v11);
      *uint64_t v8 = v10;
    }
  }
  return result;
}

id sub_1011429B0(uint64_t a1, void *a2, uint64_t a3)
{
  double v5 = *(double *)(a1 + 40);
  id result = [[[objc_msgSend(objc_msgSend(a2, "advertisement"), "scanDate")] timeIntervalSinceReferenceDate];
  if (v5 - v7 > 1.95)
  {
    uint64_t v8 = *(void **)(a1 + 32);
    return [v8 addIndex:a3];
  }
  return result;
}

uint64_t sub_101142A90(uint64_t a1)
{
  return a1;
}

double sub_101142AB8()
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_102313C40);
  }
  uint64_t v19 = 0;
  uint64_t v0 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Fence: init globals", (uint8_t *)buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_102313C40);
    }
    LOWORD(v20) = 0;
    float v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceSettings::initSettingOverrides()", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  sub_1000C7F88(buf);
  int v1 = sub_1000A699C(*(uint64_t *)&buf[0], "WifiFenceCalculatorMaxFenceRadius", &v19);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v1)
  {
    qword_102476288 = v19;
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_102313C40);
    }
    uint64_t v2 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 134217984;
      *(void *)((char *)buf + 4) = v19;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "FenceCal: Overriding WifiFenceCalculatorMaxFenceRadius = %5.1lf", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_102313C40);
      }
      int v20 = 134217984;
      uint64_t v21 = v19;
      float v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceSettings::initSettingOverrides()", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  sub_1000C7F88(buf);
  int v3 = sub_1000A699C(*(uint64_t *)&buf[0], "WifiFenceCalculatorMinFenceRadius", &v19);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v3)
  {
    qword_102476290 = v19;
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_102313C40);
    }
    unint64_t v4 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 134217984;
      *(void *)((char *)buf + 4) = v19;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "FenceCal: Overriding WifiFenceCalculatorMinFenceRadius = %5.1lf", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_102313C40);
      }
      int v20 = 134217984;
      uint64_t v21 = v19;
      double v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceSettings::initSettingOverrides()", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
  }
  if (_os_feature_enabled_impl()) {
    byte_1024762C8 = 1;
  }
  int v18 = 0;
  sub_1000C7F88(buf);
  int v5 = sub_10006EF84(*(uint64_t *)&buf[0], "ConvergingStateConverganceAttemptsPerWindow", &v18);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v5)
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_102313C40);
    }
    double v6 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 67109120;
      DWORD1(buf[0]) = v18;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "converging state overriding ConvergenceAttemptsPerWindow, %d", (uint8_t *)buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_102313C40);
      }
      int v20 = 67109120;
      LODWORD(v21) = v18;
      float v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceSettings::initSettingOverrides()", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    dword_1024762FC = v18;
  }
  sub_1000C7F88(buf);
  int v7 = sub_1000A699C(*(uint64_t *)&buf[0], "ConvergingStateConverganceBudgetWindow", &v19);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v7)
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_102313C40);
    }
    uint64_t v8 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 134217984;
      *(void *)((char *)buf + 4) = v19;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "converging state overriding ConvergenceBudgetWindow, %f", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_102313C40);
      }
      int v20 = 134217984;
      uint64_t v21 = v19;
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceSettings::initSettingOverrides()", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    qword_102476300 = v19;
  }
  sub_1000C7F88(buf);
  int v9 = sub_1000A699C(*(uint64_t *)&buf[0], "ConvergingStateConvergenceAttemptMaxDuration", &v19);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v9)
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_102313C40);
    }
    float v11 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 134217984;
      *(void *)((char *)buf + 4) = v19;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "converging state overriding ConvergenceAttemptMaxDuration, %f", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_102313C40);
      }
      int v20 = 134217984;
      uint64_t v21 = v19;
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceSettings::initSettingOverrides()", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    double result = *(double *)&v19;
    qword_102476308 = v19;
  }
  return result;
}

void sub_10114341C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1000DB0A0(a16);
  }
  _Unwind_Resume(exception_object);
}

int *sub_10114344C()
{
  return &dword_102476270;
}

char *sub_101143458()
{
  return &byte_1024762A8;
}

void sub_101143464(id a1)
{
  qword_1024193C8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

uint64_t sub_101143494(uint64_t a1, int a2)
{
  *(_DWORD *)a1 = a2;
  *(void *)(a1 + 8) = 0x3FF0000000000000;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0xBFF0000000000000;
  sub_101171D90(a1 + 64);
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(unsigned char *)(a1 + 144) = 1;
  *(void *)(a1 + 152) = 0xBFF0000000000000;
  sub_101143530((_DWORD *)a1, a2);
  return a1;
}

void sub_101143514(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 112) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_101143530(_DWORD *a1, int a2)
{
  if ((a2 - 16) > 0xFFFFFFF0)
  {
    if (*a1 != a2)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102313C60);
      }
      int v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67240192;
        int v9 = a2;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "GPSODOM, changing modified subsampler window size to,%{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102313C60);
        }
        int v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryModifiedSubsampler::changeWindowSize(const unsigned int)", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
      *a1 = a2;
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102313C60);
    }
    unint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240448;
      int v9 = a2;
      __int16 v10 = 1026;
      int v11 = 15;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "GPSODOM, invalid windowSize,%{public}d, outside allowed range, 1 to,%{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102313C60);
      }
      double v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGpsOdometryModifiedSubsampler::changeWindowSize(const unsigned int)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    sub_1011445F8((uint64_t)a1);
  }
}

void sub_101143874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, double a17, uint64_t a18)
{
  double v11 = __chkstk_darwin(a1);
  int v105 = v13;
  double v15 = v14;
  double v17 = v16;
  double v19 = v18;
  double v21 = v20;
  double v23 = v22;
  double v25 = v24;
  double v26 = v11;
  double v27 = v10;
  uint64_t v106 = a18;
  double v28 = a17;
  double v120 = v11;
  double v118 = v24;
  double v117 = v22;
  double v116 = v20;
  double v115 = v18;
  double v114 = v16;
  double v113 = v14;
  double v108 = v10[4];
  v10[3] = v108;
  if (*((unsigned char *)v10 + 144))
  {
    v10[16] = v11;
    v10[17] = v12;
    double v29 = v12;
    *((unsigned char *)v10 + 144) = 0;
  }
  else
  {
    double v29 = v10[17];
  }
  int v30 = *(_DWORD *)v10;
  double v31 = sub_1011717B4(v29, v12) + v10[17];
  double v119 = v31;
  if (v31 <= 180.0)
  {
    if (v31 >= -180.0) {
      goto LABEL_9;
    }
    double v32 = 360.0;
  }
  else
  {
    double v32 = -360.0;
  }
  double v31 = v31 + v32;
  double v119 = v31;
LABEL_9:
  unint64_t v33 = *((void *)v27 + 14);
  if (v33 >= *((void *)v27 + 15))
  {
    uint64_t v39 = sub_10114509C((uint64_t *)v27 + 13, (uint64_t *)&v120, (uint64_t *)&v119, (uint64_t *)&v118, &v117, &v116, (uint64_t *)&v115, (uint64_t *)&v114, (uint64_t *)&v113, (uint64_t *)&a17, &a18);
  }
  else
  {
    __asm { FMOV            V1.2D, #1.0 }
    *(_OWORD *)(v33 + 80) = _Q1;
    *(double *)unint64_t v33 = v26;
    *(double *)(v33 + 8) = v31;
    *(double *)(v33 + 16) = v25;
    *(double *)(v33 + 24) = v23;
    *(double *)(v33 + 32) = v21;
    *(double *)(v33 + 40) = v19;
    *(double *)(v33 + 48) = v17;
    *(double *)(v33 + 56) = v15;
    *(double *)(v33 + 64) = v28;
    *(void *)(v33 + 72) = v106;
    if (v23 > 0.0) {
      *(double *)(v33 + 80) = 1.0 / (v23 * v23);
    }
    if (v21 > 0.0) {
      *(double *)(v33 + 88) = 1.0 / (v21 * v21);
    }
    *(void *)(v33 + 96) = 0;
    uint64_t v39 = v33 + 104;
    *((void *)v27 + 14) = v33 + 104;
  }
  *((void *)v27 + 14) = v39;
  double v40 = v27[19];
  if (v40 >= 0.0
    && v113 >= 0.0
    && (*(void *)&v113 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && a17 > 0.0
    && (*(void *)&a17 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && a17 < 45.0)
  {
    double v41 = fmod(v113 - v40, 360.0);
    if (v41 < 0.0) {
      double v41 = v41 + 360.0;
    }
    if (v41 > 180.0) {
      double v41 = v41 + -360.0;
    }
    if (fabs(v41) > 45.0)
    {
      int v30 = *(_DWORD *)v27;
      sub_101143530(v27, 3);
      uint64_t v39 = *((void *)v27 + 14);
    }
  }
  unint64_t v42 = *(unsigned int *)v27;
  if (0x4EC4EC4EC4EC4EC5 * ((v39 - *((void *)v27 + 13)) >> 3) < v42)
  {
LABEL_29:
    double v43 = sub_1000F1648(v27 + 8, v27[16], v27[17], v120, v119, v118) * v27[1];
    v27[7] = v43;
    double v44 = v27[6];
    double v45 = v43 + v44;
    double v46 = fmax(v27[4], v43 + v44);
    double v47 = v46 - v108;
    void v27[4] = v46;
    v27[5] = v46 - v108;
    if (v114 != -1.0 && v114 > 0.0 && (*(void *)&v114 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v114 < 2.0)
    {
      double v48 = v115;
      double v49 = vabdd_f64(fabs(v47), v115);
      if (v49 > v114 * 4.0 && v49 > v115 * 4.0)
      {
        void v27[4] = v46 - v47 + v115;
        v27[5] = v48;
        v27[6] = v44 - v47 + v48;
      }
    }
    v27[19] = v113;
    sub_101143530(v27, v30);
    v27[3] = v27[4];
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102313C60);
    }
    BOOL v51 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v52 = *((void *)v27 + 4);
      uint64_t v53 = *((void *)v27 + 5);
      uint64_t v55 = *((void *)v27 + 6);
      uint64_t v54 = *((void *)v27 + 7);
      *(_DWORD *)buf = 134350592;
      double v132 = v45;
      __int16 v133 = 2050;
      uint64_t v134 = v52;
      __int16 v135 = 2050;
      uint64_t v136 = v53;
      __int16 v137 = 2050;
      uint64_t v138 = v54;
      __int16 v139 = 2050;
      double v140 = v43;
      __int16 v141 = 2050;
      uint64_t v142 = v55;
      __int16 v143 = 1026;
      int v144 = v105;
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "GPSODOM,totalD,%{public}.3lf,greatestD,%{public}.3lf,deltaGreatestD,%{public}.3lf,windowD,%{public}.3lf,deltaD,%{public}.3lf,fLockedDistance,%{public}.3lf,source,%{public}d", buf, 0x44u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102313C60);
      }
      uint64_t v56 = *((void *)v27 + 4);
      uint64_t v57 = *((void *)v27 + 5);
      uint64_t v59 = *((void *)v27 + 6);
      uint64_t v58 = *((void *)v27 + 7);
      *(_DWORD *)__int16 v121 = 134350592;
      *(double *)&v121[4] = v45;
      *(_WORD *)&v121[12] = 2050;
      *(void *)&v121[14] = v56;
      *(_WORD *)&v121[22] = 2050;
      uint64_t v122 = v57;
      __int16 v123 = 2050;
      uint64_t v124 = v58;
      __int16 v125 = 2050;
      double v126 = v43;
      __int16 v127 = 2050;
      uint64_t v128 = v59;
      __int16 v129 = 1026;
      int v130 = v105;
      double v60 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryModifiedSubsampler::update(const double, double, const double, const double, const double, const double, const double, const double, const double, const double, const CLGpsOdometerSource)", "%s\n", v60);
LABEL_81:
      if (v60 != (char *)buf) {
        free(v60);
      }
    }
    return;
  }
  sub_101145314((uint64_t)v112, v42, 4u);
  if (!*(_DWORD *)v27)
  {
LABEL_53:
    sub_1011453E0((uint64_t)buf, (uint64_t)v112);
    sub_1011447FC(buf);
    std::string __p = 0;
    uint64_t v110 = 0;
    uint64_t v111 = 0;
    sub_10017C3FC(&__p, *(unsigned int *)v27);
    if (*(_DWORD *)v27)
    {
      unint64_t v68 = 0;
      double v69 = 0.0;
      do
      {
        sub_101144BE8(":", (uint64_t)v112, v68, (uint64_t)v121);
        sub_1011449B8((uint64_t)buf, (uint64_t)v121);
        double v71 = v70;
        uint64_t v72 = v110;
        if (v110 >= v111)
        {
          uint64_t v74 = (char *)__p;
          uint64_t v75 = (v110 - (unsigned char *)__p) >> 3;
          unint64_t v76 = v75 + 1;
          if ((unint64_t)(v75 + 1) >> 61) {
            sub_1001D7FD4();
          }
          uint64_t v77 = v111 - (unsigned char *)__p;
          if ((v111 - (unsigned char *)__p) >> 2 > v76) {
            unint64_t v76 = v77 >> 2;
          }
          if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v78 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v78 = v76;
          }
          if (v78)
          {
            double v79 = (char *)sub_1000DA54C((uint64_t)&v111, v78);
            uint64_t v74 = (char *)__p;
            uint64_t v72 = v110;
          }
          else
          {
            double v79 = 0;
          }
          double v80 = (double *)&v79[8 * v75];
          *double v80 = v71;
          int v73 = v80 + 1;
          while (v72 != v74)
          {
            uint64_t v81 = *((void *)v72 - 1);
            v72 -= 8;
            *((void *)v80-- - 1) = v81;
          }
          std::string __p = v80;
          uint64_t v110 = (char *)v73;
          uint64_t v111 = &v79[8 * v78];
          if (v74) {
            operator delete(v74);
          }
        }
        else
        {
          *(double *)uint64_t v110 = v70;
          int v73 = (double *)(v72 + 8);
        }
        uint64_t v110 = (char *)v73;
        *(double *)(*((void *)v27 + 13) + 104 * v68 + 96) = v71;
        double v69 = v69 + v71;
        ++v68;
      }
      while (v68 < *(unsigned int *)v27);
    }
    else
    {
      double v69 = 0.0;
      int v73 = (double *)v110;
    }
    __int16 v83 = (double *)__p;
    double v84 = 0.0;
    uint64_t v85 = ((char *)v73 - (unsigned char *)__p) >> 3;
    if (v73 == __p)
    {
      double v86 = 0.0;
    }
    else
    {
      double v86 = v69 / (double)(unint64_t)v85;
      if ((unint64_t)((char *)v73 - (unsigned char *)__p) >= 9)
      {
        do
        {
          double v87 = *v83++;
          double v84 = v84 + (v87 - v86) * (v87 - v86);
        }
        while (v83 != v73);
      }
    }
    uint64_t v88 = (double *)*((void *)v27 + 13);
    long long v89 = (double *)*((void *)v27 + 14);
    if (v88 == v89) {
      goto LABEL_97;
    }
    double v90 = v86 + sqrt(v84 / (double)(unint64_t)(v85 - 1));
    double v91 = 0.0;
    double v92 = 0.0;
    double v93 = 0.0;
    double v94 = 0.0;
    double v95 = 0.0;
    do
    {
      if (v88[12] <= v90)
      {
        double v97 = v88[10];
        double v96 = v88[11];
        double v95 = v95 + *v88 * v97;
        double v94 = v94 + v88[1] * v97;
        double v93 = v93 + v88[2] * v96;
        double v92 = v92 + v97;
        double v91 = v91 + v96;
      }
      v88 += 13;
    }
    while (v88 != v89);
    if (v92 == 0.0 || v91 == 0.0)
    {
LABEL_97:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102313C60);
      }
      uint64_t v101 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__int16 v121 = 0;
        _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEBUG, "GPSODOM, Modified Subsampler, computed weights sensibility check failed.", v121, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(v121, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102313C60);
        }
        LOWORD(v145) = 0;
        unint64_t v103 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryModifiedSubsampler::update(const double, double, const double, const double, const double, const double, const double, const double, const double, const double, const CLGpsOdometerSource)", "%s\n", v103);
        if (v103 != v121) {
          free(v103);
        }
      }
      sub_1011445F8((uint64_t)v27);
      char v100 = 0;
    }
    else
    {
      double v98 = v95 / v92;
      double v99 = v94 / v92;
      v27[6] = v27[6] + sub_1000F1648(v27 + 8, v27[16], v27[17], v95 / v92, v94 / v92, v93 / v91) * v27[1];
      v27[7] = 0.0;
      v27[16] = v98;
      v27[17] = v99;
      v27[14] = v27[13];
      char v100 = 1;
    }
    if (__p)
    {
      uint64_t v110 = (char *)__p;
      operator delete(__p);
    }
    if ((v100 & 1) == 0) {
      return;
    }
    goto LABEL_29;
  }
  unint64_t v61 = 0;
  double v62 = *(double *)(*((void *)v27 + 13) + 72);
  float64x2_t v63 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
  float64x2_t v107 = v63;
LABEL_48:
  uint64_t v64 = *((void *)v27 + 13) + 104 * v61;
  uint64_t v65 = *(void *)(v64 + 16);
  double v66 = *(double *)(v64 + 72);
  *(float64x2_t *)__int16 v121 = vmulq_f64(*(float64x2_t *)v64, v63);
  *(void *)&v121[16] = v65;
  std::string __p = 0;
  uint64_t v110 = 0;
  uint64_t v111 = 0;
  if (cnnavigation::LLAToECEF())
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102313C60);
    }
    uint64_t v102 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134283777;
      double v132 = *(double *)v121;
      __int16 v133 = 2049;
      uint64_t v134 = *(void *)&v121[8];
      _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_ERROR, "GPSODOM, Could not convert LLA Coordinate,%{private}.7lf,%{private}.7lf, to ECEF", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102313C60);
      }
      int v145 = 134283777;
      uint64_t v146 = *(void *)v121;
      __int16 v147 = 2049;
      uint64_t v148 = *(void *)&v121[8];
      uint64_t v104 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGpsOdometryModifiedSubsampler::update(const double, double, const double, const double, const double, const double, const double, const double, const double, const double, const CLGpsOdometerSource)", "%s\n", v104);
      if (v104 != (char *)buf) {
        free(v104);
      }
    }
    sub_1011445F8((uint64_t)v27);
  }
  else
  {
    *(void *)sub_10004DF44((uint64_t)v112, v61, 0) = __p;
    *(void *)sub_10004DF44((uint64_t)v112, v61, 1) = v110;
    *(void *)sub_10004DF44((uint64_t)v112, v61, 2) = v111;
    int v67 = 0;
    *(double *)sub_10004DF44((uint64_t)v112, v61, 3) = (v66 - v62) * 1000.0;
    while ((*(void *)sub_10004DF44((uint64_t)v112, v61, v67) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      if (++v67 == 4)
      {
        ++v61;
        float64x2_t v63 = v107;
        if (v61 < *(unsigned int *)v27) {
          goto LABEL_48;
        }
        goto LABEL_53;
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102313C60);
    }
    int v82 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_ERROR, "GPSODOM, Modified Subsampler window point sensibility check failed.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102313C60);
      }
      LOWORD(v145) = 0;
      double v60 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGpsOdometryModifiedSubsampler::update(const double, double, const double, const double, const double, const double, const double, const double, const double, const double, const CLGpsOdometerSource)", "%s\n", v60);
      goto LABEL_81;
    }
  }
}

void sub_10114458C(_Unwind_Exception *a1)
{
}

void sub_1011445F8(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102313C60);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 24);
    *(_DWORD *)buf = 134349056;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "GPSODOM,resetting and storing distance,%{public}.3lf", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102313C60);
    }
    unint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryModifiedSubsampler::reset()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  *(double *)(a1 + 16) = *(double *)(a1 + 24) + *(double *)(a1 + 16);
  *(_DWORD *)a1 = 5;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = xmmword_101D1C320;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 144) = 1;
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  sub_1006156AC(a1 + 64);
  *(void *)(a1 + 152) = 0xBFF0000000000000;
}

_DWORD *sub_1011447FC(_DWORD *result)
{
  if (result[2]) {
    BOOL v1 = result[3] == 0;
  }
  else {
    BOOL v1 = 1;
  }
  if (!v1)
  {
    uint64_t v2 = result;
    sub_10114572C(result);
    sub_10018865C(v2 + 798, v2[928], v2[929]);
    if (v2[928])
    {
      unsigned int v3 = 0;
      do
      {
        sub_101144BE8(":", (uint64_t)v2, v3, (uint64_t)v10);
        uint64_t v7 = 0x400000001;
        int v5 = off_1022F1D80;
        long long v6 = xmmword_101D8B000;
        uint64_t v8 = &v9;
        sub_100AC9C3C((uint64_t)v10, (uint64_t)(v2 + 130), (uint64_t)&v5);
        sub_101144BE8(":", (uint64_t)(v2 + 798), v3, (uint64_t)v4);
        sub_10114592C((uint64_t)v4, (uint64_t)&v5);
        ++v3;
      }
      while (v3 < v2[928]);
    }
    sub_101145314((uint64_t)v10, v2[800], v2[801]);
    sub_101145F3C((uint64_t)v4);
  }
  return result;
}

void sub_101144994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10114615C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1011449B8(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8)) {
    BOOL v2 = *(_DWORD *)(a1 + 12) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    if (*(unsigned char *)(a1 + 3720))
    {
      uint64_t v19 = 0x400000001;
      long long v18 = xmmword_101D8B000;
      double v17 = off_1022F1D80;
      double v20 = &v21;
      sub_100AC9C3C(a2, a1 + 520, (uint64_t)&v17);
      double v4 = sub_100ACAA94((uint64_t)&v17, a1 + 592);
      sub_1011464EC((uint64_t)v6, *(_DWORD *)(a1 + 604), *(_DWORD *)(a1 + 600));
      sub_100ACB2A4(a1 + 592, v6);
      uint64_t v9 = 0x400000001;
      uint64_t v7 = off_1022F1D80;
      long long v8 = xmmword_101D8B000;
      __int16 v10 = &v11;
      sub_100061AC4((uint64_t)v6, (uint64_t)&v7, v4);
      uint64_t v14 = 0x400000001;
      long long v13 = xmmword_101D8B000;
      double v12 = off_1022F1D80;
      double v15 = &v16;
      sub_100AC9C3C((uint64_t)&v17, (uint64_t)&v7, (uint64_t)&v12);
      uint64_t v34 = 0x400000001;
      double v32 = off_1022F1D80;
      long long v33 = xmmword_101D8B000;
      float v35 = &v36;
      uint64_t v29 = 0x10000018BLL;
      long long v28 = xmmword_101DA96A0;
      double v27 = off_102313E40;
      int v30 = &v31;
      uint64_t v24 = 0x100000001;
      *(void *)&long long v5 = 0x100000001;
      *((void *)&v5 + 1) = 0x100000001;
      long long v23 = v5;
      double v22 = off_1022DC840;
      double v25 = &v26;
      sub_100ACAB14((uint64_t)&v12, (uint64_t)&v32, (uint64_t)&v27, (uint64_t)&v22, "2");
    }
  }
}

uint64_t sub_101144BE8@<X0>(char *__s1@<X2>, uint64_t a2@<X0>, int a3@<W1>, uint64_t a4@<X8>)
{
  if (strcmp(__s1, ":")) {
    sub_101A7DB84();
  }
  uint64_t v14 = 0x100000001;
  double v12 = off_1022DC650;
  *(void *)&long long v7 = 0x100000001;
  *((void *)&v7 + 1) = 0x100000001;
  long long v13 = v7;
  double v15 = &v16;
  *(_DWORD *)sub_100AC9620((uint64_t)&v12, 0) = a3;
  unsigned int v8 = *(_DWORD *)(a2 + 12);
  sub_101145B58((uint64_t)v11, v8, 1u);
  if (v8)
  {
    for (unsigned int i = 0; i != v8; ++i)
      *(_DWORD *)sub_100AC9620((uint64_t)v11, i) = i;
  }
  return sub_101145C9C(a4, a2, (uint64_t)&v12, (uint64_t)v11);
}

void *sub_101144CCC(void *result)
{
  result[16] = off_1022DC6A8;
  result[10] = off_1022DC6A8;
  *double result = off_1022CAFC0;
  return result;
}

void *sub_101144D2C(void *result)
{
  result[399] = off_1022CAFC0;
  result[378] = off_1022CAFC0;
  result[313] = off_1022CAFC0;
  result[83] = off_1022CAFC0;
  result[74] = off_1022CAFC0;
  result[65] = off_1022CAFC0;
  *double result = off_1022CAFC0;
  return result;
}

double sub_101144E0C(uint64_t a1)
{
  return *(double *)(a1 + 32) + *(double *)(a1 + 16);
}

void sub_101144E1C(uint64_t a1, double a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102313C60);
  }
  double v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349056;
    double v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "GPSODOM, setting distance multiplier to,%{public}.3f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102313C60);
    }
    long long v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryModifiedSubsampler::changeDistanceMultiplier(const double)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  if (*(double *)(a1 + 8) != a2) {
    *(double *)(a1 + 8) = a2;
  }
}

void sub_101144FE4(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_101145014(void *a1)
{
  *a1 = off_1022CAFC0;
  operator delete();
}

void sub_101145044(uint64_t a1)
{
  sub_10082938C(a1, v1);
}

uint64_t sub_10114509C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, double *a5, double *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11)
{
  uint64_t v12 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 3);
  unint64_t v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) > 0x276276276276276) {
    sub_1001D7FD4();
  }
  double v17 = a5;
  double v22 = a10;
  uint64_t v21 = a11;
  long long v23 = a9;
  if (0x9D89D89D89D89D8ALL * ((a1[2] - *a1) >> 3) > v13) {
    unint64_t v13 = 0x9D89D89D89D89D8ALL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((a1[2] - *a1) >> 3)) >= 0x13B13B13B13B13BLL) {
    unint64_t v24 = 0x276276276276276;
  }
  else {
    unint64_t v24 = v13;
  }
  if (v24)
  {
    unint64_t v42 = a7;
    uint64_t v43 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 3);
    double v25 = a6;
    double v27 = (char *)sub_100644404((uint64_t)(a1 + 2), v24);
    long long v23 = a9;
    a7 = v42;
    double v22 = a10;
    uint64_t v12 = v43;
    uint64_t v21 = a11;
    double v17 = a5;
    a6 = v25;
    long long v28 = v27;
    uint64_t v30 = v29;
  }
  else
  {
    long long v28 = 0;
    uint64_t v30 = 0;
  }
  uint64_t v31 = (uint64_t)&v28[104 * v12];
  sub_101145290((uint64_t)(a1 + 2), v31, a2, a3, a4, v17, a6, a7, a8, v23, v22, v21);
  double v32 = &v28[104 * v30];
  uint64_t v33 = v31 + 104;
  float v35 = (char *)*a1;
  uint64_t v34 = (char *)a1[1];
  if (v34 != (char *)*a1)
  {
    do
    {
      long long v36 = *(_OWORD *)(v34 - 104);
      long long v37 = *(_OWORD *)(v34 - 88);
      *(_OWORD *)(v31 - 72) = *(_OWORD *)(v34 - 72);
      *(_OWORD *)(v31 - 88) = v37;
      *(_OWORD *)(v31 - 104) = v36;
      long long v38 = *(_OWORD *)(v34 - 56);
      long long v39 = *(_OWORD *)(v34 - 40);
      long long v40 = *(_OWORD *)(v34 - 24);
      *(void *)(v31 - 8) = *((void *)v34 - 1);
      *(_OWORD *)(v31 - 24) = v40;
      *(_OWORD *)(v31 - 40) = v39;
      *(_OWORD *)(v31 - 56) = v38;
      v31 -= 104;
      v34 -= 104;
    }
    while (v34 != v35);
    uint64_t v34 = (char *)*a1;
  }
  *a1 = v31;
  a1[1] = v33;
  a1[2] = (uint64_t)v32;
  if (v34) {
    operator delete(v34);
  }
  return v33;
}

void sub_101145278(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_101145290(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, double *a6, double *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12)
{
  uint64_t v12 = *a3;
  uint64_t v13 = *a4;
  uint64_t v14 = *a5;
  double v15 = *a6;
  double v16 = *a7;
  uint64_t v17 = *a8;
  uint64_t v18 = *a9;
  uint64_t v19 = *a10;
  uint64_t v20 = *a11;
  uint64_t v21 = *a12;
  __asm { FMOV            V18.2D, #1.0 }
  *(_OWORD *)(a2 + 80) = _Q18;
  *(void *)a2 = v12;
  *(void *)(a2 + 8) = v13;
  *(void *)(a2 + 16) = v14;
  *(double *)(a2 + 24) = v15;
  *(double *)(a2 + 32) = v16;
  *(void *)(a2 + 40) = v17;
  *(void *)(a2 + 48) = v18;
  *(void *)(a2 + 56) = v19;
  *(void *)(a2 + 64) = v20;
  *(void *)(a2 + 72) = v21;
  if (v15 > 0.0) {
    *(double *)(a2 + 80) = 1.0 / (v15 * v15);
  }
  if (v16 > 0.0) {
    *(double *)(a2 + 88) = 1.0 / (v16 * v16);
  }
  *(void *)(a2 + 96) = 0;
}

uint64_t sub_101145314(uint64_t result, unsigned int a2, unsigned int a3)
{
  *(void *)(result + 24) = 0x40000000FLL;
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = off_102313CD8;
  if (a2 > 0xF)
  {
    unsigned int v3 = "this->max_num_rows_ >= num_rows";
    int v4 = 422;
    goto LABEL_6;
  }
  if (a3 >= 5)
  {
    unsigned int v3 = "this->max_num_cols_ >= num_cols";
    int v4 = 423;
LABEL_6:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v4, v3);
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_1011453C0(_Unwind_Exception *a1)
{
  *BOOL v1 = off_1022CAFC0;
  _Unwind_Resume(a1);
}

uint64_t sub_1011453E0(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0x40000000FLL;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_102313CD8;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)(a1 + 544) = 0x400000001;
  *(void *)(a1 + 520) = off_1022F1D80;
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 552) = a1 + 560;
  *(void *)(a1 + 616) = 0x100000004;
  *(void *)(a1 + 592) = off_1022F1B20;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 600) = 0;
  *(void *)(a1 + 624) = a1 + 632;
  *(void *)(a1 + 688) = 0xF0000000FLL;
  *(void *)(a1 + 664) = off_102313C90;
  *(_OWORD *)(a1 + 672) = xmmword_101DA96B0;
  *(void *)(a1 + 696) = a1 + 704;
  *(void *)(a1 + 2528) = 0x40000000FLL;
  *(void *)(a1 + 2504) = off_102313CD8;
  *(_OWORD *)(a1 + 2512) = xmmword_101DA96C0;
  *(void *)(a1 + 2536) = a1 + 2544;
  *(void *)(a1 + 3048) = 0x400000004;
  *(void *)(a1 + 3024) = off_1022F1B68;
  *(_OWORD *)(a1 + 3032) = xmmword_101D8AFF0;
  *(void *)(a1 + 3056) = a1 + 3064;
  *(void *)(a1 + 3216) = 0x40000000FLL;
  *(void *)(a1 + 3192) = off_102313CD8;
  *(void *)(a1 + 3200) = 0;
  *(void *)(a1 + 3208) = 0;
  *(void *)(a1 + 3224) = a1 + 3232;
  *(void *)(a1 + 3712) = 0;
  *(unsigned char *)(a1 + 3720) = 0;
  sub_101145680(a1, a2);
  return a1;
}

void sub_1011455B8(_Unwind_Exception *a1)
{
  v1[399] = off_1022CAFC0;
  v1[378] = off_1022CAFC0;
  v1[313] = off_1022CAFC0;
  v1[83] = off_1022CAFC0;
  v1[74] = off_1022CAFC0;
  v1[65] = off_1022CAFC0;
  *BOOL v1 = off_1022CAFC0;
  _Unwind_Resume(a1);
}

BOOL sub_101145680(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(_DWORD *)(a2 + 8) < 0x10u && *(_DWORD *)(a2 + 12) < 5u;
  if (v3)
  {
    *(unsigned char *)(a1 + 3720) = 0;
    sub_100063168(a1, a2);
    sub_100062B3C((_DWORD *)(a1 + 520), 0, 0);
    sub_100062B3C((_DWORD *)(a1 + 592), 0, 0);
    sub_100062B3C((_DWORD *)(a1 + 664), 0, 0);
    sub_100062B3C((_DWORD *)(a1 + 2504), 0, 0);
    sub_100062B3C((_DWORD *)(a1 + 3024), 0, 0);
    sub_100062B3C((_DWORD *)(a1 + 3192), 0, 0);
    *(void *)(a1 + 3712) = *(void *)(a1 + 8);
  }
  return v3;
}

void sub_10114572C(_DWORD *a1)
{
  if (a1[2]) {
    BOOL v2 = a1[3] == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    v20[3] = 0x400000001;
    v20[0] = off_1022F1D80;
    v20[1] = 0;
    v20[2] = 0;
    void v20[4] = &v21;
    sub_100063168((uint64_t)(a1 + 130), (uint64_t)v20);
  }
  else
  {
    sub_101144BE8(":", (uint64_t)a1, 0, (uint64_t)v20);
    sub_100063168((uint64_t)(a1 + 130), (uint64_t)v20);
    if (a1[928] >= 2u)
    {
      int v3 = 1;
      do
      {
        unsigned int v4 = v3 + 1;
        sub_101144BE8(":", (uint64_t)a1, v3, (uint64_t)v20);
        uint64_t v7 = 0x400000001;
        long long v5 = off_1022F1D80;
        long long v6 = xmmword_101D8B000;
        unsigned int v8 = &v9;
        sub_100AC9C3C((uint64_t)v20, (uint64_t)(a1 + 130), (uint64_t)&v5);
        uint64_t v12 = 0x400000001;
        __int16 v10 = off_1022F1D80;
        long long v11 = xmmword_101D8B000;
        uint64_t v13 = &v14;
        sub_100061AC4((uint64_t)&v5, (uint64_t)&v10, 1.0 / (double)v4);
        uint64_t v17 = 0x400000001;
        double v15 = off_1022F1D80;
        long long v16 = xmmword_101D8B000;
        uint64_t v18 = &v19;
        sub_100AC9B3C((uint64_t)(a1 + 130), (uint64_t)&v10, (uint64_t)&v15);
        sub_100063168((uint64_t)(a1 + 130), (uint64_t)&v15);
        int v3 = v4;
      }
      while (v4 < a1[928]);
    }
  }
}

uint64_t sub_10114592C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != *(_DWORD *)(a2 + 8)) {
    sub_101A7DBDC();
  }
  uint64_t v5 = *(unsigned int *)(a1 + 12);
  if (v5 != *(_DWORD *)(a2 + 12)) {
    sub_101A7DBB0();
  }
  if (v5)
  {
    int v6 = 0;
    for (uint64_t i = 0; i != v5; ++i)
    {
      if (v2)
      {
        for (uint64_t j = 0; j != v2; ++j)
        {
          uint64_t v9 = *(void *)(*(void *)(a2 + 32) + 8 * (v6 + j));
          *(void *)sub_100AC99CC(*(void *)(a1 + 72), *(_DWORD *)(*(void *)(a1 + 112) + 4 * j), *(_DWORD *)(*(void *)(a1 + 160) + 4 * i)) = v9;
          *(void *)sub_10004DF44(a1, j, i) = v9;
        }
      }
      v6 += v2;
    }
  }
  return a1;
}

uint64_t sub_101145A08@<X0>(char *__s1@<X1>, uint64_t a2@<X0>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (strcmp(__s1, ":")) {
    sub_101A7DC08();
  }
  unsigned int v7 = *(_DWORD *)(a2 + 8);
  sub_101145B58((uint64_t)v16, v7, 1u);
  if (v7)
  {
    for (unsigned int i = 0; i != v7; ++i)
      *(_DWORD *)sub_100AC9620((uint64_t)v16, i) = i;
  }
  uint64_t v13 = 0x100000001;
  long long v11 = off_1022DC650;
  *(void *)&long long v9 = 0x100000001;
  *((void *)&v9 + 1) = 0x100000001;
  long long v12 = v9;
  uint64_t v14 = &v15;
  *(_DWORD *)sub_100AC9620((uint64_t)&v11, 0) = a3;
  return sub_1011461D8(a4, a2, (uint64_t)v16, (uint64_t)&v11);
}

void *sub_101145AF8(void *result)
{
  result[17] = off_1022DC6A8;
  result[10] = off_1022DC6A8;
  *double result = off_1022CAFC0;
  return result;
}

uint64_t sub_101145B58(uint64_t result, unsigned int a2, unsigned int a3)
{
  *(void *)(result + 24) = 0x100000004;
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = off_102313D20;
  if ((a3 & 0x80000000) != 0)
  {
    int v3 = "nc >= 0";
    int v4 = 487;
    uint64_t v5 = "cnmatrix.h";
    int v6 = "CNMatrix";
    goto LABEL_9;
  }
  if (a2 > 4)
  {
    int v3 = "this->max_num_rows_ >= num_rows";
    int v4 = 422;
LABEL_8:
    uint64_t v5 = "cnmatrixbase.h";
    int v6 = "SetMatrixSize";
LABEL_9:
    __assert_rtn(v6, v5, v4, v3);
  }
  if (a3 >= 2)
  {
    int v3 = "this->max_num_cols_ >= num_cols";
    int v4 = 423;
    goto LABEL_8;
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_101145C28(_Unwind_Exception *a1)
{
  *BOOL v1 = off_1022DC6A8;
  _Unwind_Resume(a1);
}

void sub_101145C48(void *a1)
{
  *a1 = off_1022DC6A8;
  operator delete();
}

void sub_101145C78(uint64_t a1)
{
  sub_100AC954C(a1, v1);
}

uint64_t sub_101145C9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0x400000001;
  *(_OWORD *)(a1 + 8) = xmmword_101D8B000;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = off_102313D68;
  *(void *)(a1 + 104) = 0x100000001;
  *(void *)(a1 + 72) = a2;
  *(void *)(a1 + 80) = off_1022DC650;
  *(void *)&long long v7 = 0x100000001;
  *((void *)&v7 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 88) = v7;
  *(void *)(a1 + 112) = a1 + 120;
  uint64_t v8 = a1 + 128;
  *(void *)(a1 + 152) = 0x100000004;
  *(void *)(a1 + 128) = off_102313D20;
  *(_OWORD *)(a1 + 136) = xmmword_101DA96D0;
  *(void *)(a1 + 160) = a1 + 168;
  sub_100AC9A80(a1 + 80, a3);
  sub_100AC9A80(v8, a4);
  uint64_t v9 = *(unsigned int *)(a1 + 96);
  if (*(_DWORD *)(a1 + 24) < v9)
  {
    uint64_t v15 = "this->max_num_rows_ >= num_rows";
    int v16 = 422;
    goto LABEL_12;
  }
  uint64_t v10 = *(unsigned int *)(a1 + 144);
  if (*(_DWORD *)(a1 + 28) < v10)
  {
    uint64_t v15 = "this->max_num_cols_ >= num_cols";
    int v16 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v16, v15);
  }
  *(_DWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 12) = v10;
  *(_DWORD *)(a1 + 16) = v10 * v9;
  *(_DWORD *)(a1 + 20) = v9;
  if (v10)
  {
    int v11 = 0;
    for (uint64_t i = 0; i != v10; ++i)
    {
      if (v9)
      {
        for (uint64_t j = 0; j != v9; ++j)
          *(void *)(*(void *)(a1 + 32) + 8 * (v11 + j)) = *(void *)sub_100AC99CC(a2, *(_DWORD *)(*(void *)(a1 + 112) + 4 * j), *(_DWORD *)(*(void *)(a1 + 160) + 4 * i));
      }
      v11 += v9;
    }
  }
  return a1;
}

void sub_101145E6C(_Unwind_Exception *a1)
{
  v1[16] = off_1022DC6A8;
  v1[10] = off_1022DC6A8;
  *BOOL v1 = off_1022CAFC0;
  _Unwind_Resume(a1);
}

void sub_101145EC8(void *a1)
{
  a1[16] = off_1022DC6A8;
  a1[10] = off_1022DC6A8;
  *a1 = off_1022CAFC0;
  operator delete();
}

void sub_101145F3C(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x1000007F1;
  *(void *)a1 = off_102313DB0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_101DA96E0;
  sub_101146054();
}

void sub_101145FA4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[5];
  v1[5] = 0;
  if (v3) {
    operator delete[]();
  }
  *BOOL v1 = off_1022CAFC0;
  _Unwind_Resume(exception_object);
}

void sub_101145FEC(void *a1)
{
  sub_10114615C(a1);

  operator delete();
}

void sub_101146024()
{
}

void sub_101146054()
{
}

void sub_1011460C4()
{
}

void sub_101146138()
{
}

void *sub_10114615C(void *a1)
{
  *a1 = off_102313DB0;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    operator delete[]();
  }
  *a1 = off_1022CAFC0;
  return a1;
}

uint64_t sub_1011461D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0x100000004;
  *(_OWORD *)(a1 + 8) = xmmword_101DA96D0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = off_102313DF8;
  *(void *)(a1 + 104) = 0x100000004;
  *(void *)(a1 + 72) = a2;
  *(void *)(a1 + 80) = off_102313D20;
  *(_OWORD *)(a1 + 88) = xmmword_101DA96D0;
  *(void *)(a1 + 112) = a1 + 120;
  uint64_t v7 = a1 + 136;
  *(void *)(a1 + 160) = 0x100000001;
  *(void *)(a1 + 136) = off_1022DC650;
  *(void *)&long long v8 = 0x100000001;
  *((void *)&v8 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 144) = v8;
  *(void *)(a1 + 168) = a1 + 176;
  sub_100AC9A80(a1 + 80, a3);
  sub_100AC9A80(v7, a4);
  uint64_t v9 = *(unsigned int *)(a1 + 96);
  if (*(_DWORD *)(a1 + 24) < v9)
  {
    uint64_t v15 = "this->max_num_rows_ >= num_rows";
    int v16 = 422;
    goto LABEL_12;
  }
  uint64_t v10 = *(unsigned int *)(a1 + 152);
  if (*(_DWORD *)(a1 + 28) < v10)
  {
    uint64_t v15 = "this->max_num_cols_ >= num_cols";
    int v16 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v16, v15);
  }
  *(_DWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 12) = v10;
  *(_DWORD *)(a1 + 16) = v10 * v9;
  *(_DWORD *)(a1 + 20) = v9;
  if (v10)
  {
    int v11 = 0;
    for (uint64_t i = 0; i != v10; ++i)
    {
      if (v9)
      {
        for (uint64_t j = 0; j != v9; ++j)
          *(void *)(*(void *)(a1 + 32) + 8 * (v11 + j)) = *(void *)sub_100AC99CC(a2, *(_DWORD *)(*(void *)(a1 + 112) + 4 * j), *(_DWORD *)(*(void *)(a1 + 168) + 4 * i));
      }
      v11 += v9;
    }
  }
  return a1;
}

void sub_101146398(_Unwind_Exception *a1)
{
  v1[17] = off_1022DC6A8;
  v1[10] = off_1022DC6A8;
  *BOOL v1 = off_1022CAFC0;
  _Unwind_Resume(a1);
}

void sub_1011463F4(void *a1)
{
  a1[17] = off_1022DC6A8;
  a1[10] = off_1022DC6A8;
  *a1 = off_1022CAFC0;
  operator delete();
}

void sub_101146464(void *a1)
{
  *a1 = off_1022CAFC0;
  operator delete();
}

void sub_101146494(uint64_t a1)
{
  sub_10082938C(a1, v1);
}

uint64_t sub_1011464EC(uint64_t result, unsigned int a2, unsigned int a3)
{
  *(void *)(result + 24) = 0x400000001;
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = off_1022F1D80;
  if (a2 > 1)
  {
    uint64_t v3 = "this->max_num_rows_ >= num_rows";
    int v4 = 422;
    goto LABEL_6;
  }
  if (a3 >= 5)
  {
    uint64_t v3 = "this->max_num_cols_ >= num_cols";
    int v4 = 423;
LABEL_6:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v4, v3);
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_101146598(_Unwind_Exception *a1)
{
  *BOOL v1 = off_1022CAFC0;
  _Unwind_Resume(a1);
}

void sub_101146664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101146680(uint64_t a1, double **a2)
{
  uint64_t v19 = a1;
  id v3 = objc_alloc_init((Class)NSMutableArray);
  int v4 = *a2;
  if (*a2 != a2[1])
  {
    uint64_t v20 = a2[1];
    do
    {
      id v21 = objc_alloc((Class)CMOdometerData);
      double v5 = v4[1];
      int v6 = +[NSDate dateWithTimeIntervalSinceReferenceDate:*v4];
      uint64_t v7 = +[NSNumber numberWithDouble:v4[2]];
      id v8 = v3;
      uint64_t v9 = +[NSNumber numberWithDouble:v4[5]];
      uint64_t v10 = +[NSNumber numberWithDouble:v4[7]];
      int v11 = +[NSNumber numberWithDouble:v4[8]];
      long long v12 = +[NSNumber numberWithDouble:v4[13]];
      uint64_t v13 = +[NSNumber numberWithDouble:v4[18]];
      uint64_t v14 = +[NSNumber numberWithDouble:v4[19]];
      uint64_t v15 = v9;
      id v3 = v8;
      id v16 = [v21 initWithDeltaDistance:0 startDate:v6 endDate:v7 accuracy:v15 rawSpeed:v10 gpsSpeedAccuracy:v11 timestampGps:v5 deltaGroundAltitude:0 groundAltitudeUncertainty:v12 originDevice:v13 slope:2 maxAbsSlope:v14];
      [v16 setCurrentSpeed:+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v4[4])];
      [v16 setGpsAltitude:+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v4[3])];
      [v16 setOdometer:[NSNumber numberWithDouble:v4[6]]];
      [v16 setGroundAltitude:[NSNumber numberWithDouble:v4[12]]];
      [v16 setSmoothedGPSAltitude:[NSNumber numberWithDouble:v4[14]]];
      [v16 setSmoothedGPSAltitudeUncertainty:[NSNumber numberWithDouble:v4[15]]];
      [v16 setGpsCourseRadians:+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v4[16])];
      [v16 setGpsCourseAccuracy:[NSNumber numberWithDouble:v4[17]]];
      [v3 addObject:v16];

      v4 += 24;
    }
    while (v4 != v20);
  }
  if ((unint64_t)[v3 count] > 1)
  {
    if (qword_102419150 != -1) {
      dispatch_once(&qword_102419150, &stru_102313EF8);
    }
    uint64_t v17 = qword_102419158;
    if (os_log_type_enabled((os_log_t)qword_102419158, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349570;
      *(void *)&uint8_t buf[4] = [v3 count];
      __int16 v31 = 2114;
      id v32 = [v3 firstObject];
      __int16 v33 = 2114;
      id v34 = [v3 lastObject];
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "CyclingDistance, sent datums, %{public}lu, first, %{public}@, last, %{public}@", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419150 != -1) {
        dispatch_once(&qword_102419150, &stru_102313EF8);
      }
      int v24 = 134349570;
      id v25 = [v3 count];
      __int16 v26 = 2114;
      id v27 = [v3 firstObject];
      __int16 v28 = 2114;
      id v29 = [v3 lastObject];
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLOdometerSubscription::onCyclingDistanceUpdate(const std::vector<CLOdometerEntry> &)", "%s\n", v18);
      if (v18 != buf) {
        free(v18);
      }
    }
  }
  uint64_t v22 = CMCyclingWorkoutDistanceDataArray;
  id v23 = v3;
  *(void *)buf = +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];

  sub_101148490(v19);
}

void sub_101146AFC(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v5 = sub_100054C14(a1, a2, a3, a4, a5);
  *(_OWORD *)(v5 + 216) = xmmword_101DA9870;
  *(_OWORD *)(v5 + 232) = unk_101DA9880;
  *(_OWORD *)(v5 + 248) = xmmword_101DA9890;
  *(_OWORD *)(v5 + 264) = unk_101DA98A0;
  *(_OWORD *)(v5 + 152) = xmmword_101DA9830;
  *(_OWORD *)(v5 + 168) = unk_101DA9840;
  *(_OWORD *)(v5 + 184) = xmmword_101DA9850;
  *(_OWORD *)(v5 + 200) = unk_101DA9860;
  *(_OWORD *)(v5 + 88) = xmmword_101DA97F0;
  *(_OWORD *)(v5 + 104) = unk_101DA9800;
  *(_OWORD *)(v5 + 120) = xmmword_101DA9810;
  *(void *)(v5 + 48) = 0;
  *(void *)uint64_t v5 = off_102313E88;
  *(void *)(v5 + 56) = 0;
  *(unsigned char *)(v5 + 64) = 0;
  *(_OWORD *)(v5 + 136) = unk_101DA9820;
  sub_1004A1714();
}

void sub_101146D2C(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 56);
  *(void *)(v1 + 56) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *v2;
  uint64_t *v2 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  sub_100029A7C(v1);
  _Unwind_Resume(a1);
}

void sub_101146DA8(uint64_t a1, _DWORD *a2, double *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102313ED8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    id v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLOdometerSubscription::onOdometerUpdate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102313ED8);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLOdometerSubscription::onOdometerUpdate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101147CE8(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_101146F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101146F84(uint64_t a1, _DWORD *a2, unsigned __int8 *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102313ED8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    id v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLOdometerSubscription::onNatalimetryUpdate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102313ED8);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLOdometerSubscription::onNatalimetryUpdate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10114835C(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_101147140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101147164(uint64_t a1)
{
  *(void *)a1 = off_102313E88;
  uint64_t v2 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(unsigned char *)(a1 + 64)) {
    [*(id *)(a1 + 80) unregisterForCyclingWorkoutDistanceUpdates:*(void *)(a1 + 72)];
  }

  *(void *)(a1 + 80) = 0;
  [*(id *)(a1 + 72) setValid:0];

  *(void *)(a1 + 72) = 0;
  uint64_t v4 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  return sub_100029A7C(a1);
}

void sub_1011472B0(uint64_t a1)
{
  sub_101147164(a1);

  operator delete();
}

void *sub_1011472E8@<X0>(uint64_t a1@<X8>)
{
  v6[0] = off_102313F68;
  v6[1] = sub_101147538;
  v6[2] = 0;
  void v6[3] = v6;
  sub_100134750(v7, "kCLConnectionMessageOdometerGpsAvailability");
  sub_100BF2F1C((uint64_t)&v8, (uint64_t)v6);
  v5[0] = off_102313F68;
  v5[1] = sub_1011477B4;
  _DWORD v5[2] = 0;
  v5[3] = v5;
  sub_100134750(v9, "kCLConnectionMessageStartOdometerUpdate");
  sub_100BF2F1C((uint64_t)&v10, (uint64_t)v5);
  v4[0] = off_102313F68;
  v4[1] = sub_101147A50;
  _DWORD v4[2] = 0;
  v4[3] = v4;
  sub_100134750(v11, "kCLConnectionMessageCyclingWorkoutDistanceUpdate");
  sub_100BF2F1C((uint64_t)v12, (uint64_t)v4);
  sub_10114897C(a1, (unsigned __int8 *)v7, 3);
  for (uint64_t i = 0; i != -21; i -= 7)
  {
    sub_100BF3438(&v12[i * 8]);
    if (SHIBYTE(v11[i + 2]) < 0) {
      operator delete((void *)v11[i]);
    }
  }
  sub_100BF3438(v4);
  sub_100BF3438(v5);
  return sub_100BF3438(v6);
}

void sub_1011474B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  for (uint64_t i = 112; i != -56; i -= 56)
    sub_101147CAC((uint64_t)(&a21 + i));
  sub_100BF3438(&a9);
  sub_100BF3438(&a13);
  sub_100BF3438(&a17);
  _Unwind_Resume(a1);
}

void sub_101147538(uint64_t *a1, int a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (sub_101290CD0(a1[1]))
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_102313F38);
    }
    uint64_t v5 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = a1[3];
      *(_DWORD *)buf = 67109634;
      int v12 = a2;
      __int16 v13 = 2112;
      uint64_t v14 = v6;
      __int16 v15 = 2048;
      __int16 v16 = a1;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "OdometerGpsAvailability subscription changed, %d, %@, %p", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_102313F38);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLOdometerSubscription::handleRequestOdometerGpsAvailability(BOOL, const CLNameValuePair &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    sub_10009C834((uint64_t)a1);
    uint64_t v7 = a1[7];
    uint64_t v9 = *(void *)(v7 + 8);
    uint64_t v8 = *(void **)(v7 + 16);
    if (a2) {
      [v8 register:v9 forNotification:1 registrationInfo:0];
    }
    else {
      [v8 unregister:v9 forNotification:1];
    }
  }
}

void sub_101147780(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1011477B4(uint64_t a1, int a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_102419150 != -1) {
    dispatch_once(&qword_102419150, &stru_102313EF8);
  }
  uint64_t v5 = qword_102419158;
  if (os_log_type_enabled((os_log_t)qword_102419158, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 24);
    *(_DWORD *)buf = 138412802;
    uint64_t v12 = v6;
    __int16 v13 = 2048;
    uint64_t v14 = a1;
    __int16 v15 = 1024;
    int v16 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Odometer subscription changed, %@, %p, %d", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419150 != -1) {
      dispatch_once(&qword_102419150, &stru_102313EF8);
    }
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOdometerSubscription::handleRequestOdometerUpdate(BOOL, const CLNameValuePair &)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  sub_10009C834(a1);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(v7 + 8);
  uint64_t v8 = *(void **)(v7 + 16);
  if (a2)
  {
    [v8 register:v9 forNotification:2 registrationInfo:0];
    [*(id *)(*(void *)(a1 + 48) + 16) register:*(void *)(*(void *)(a1 + 48) + 8) forNotification:4 registrationInfo:0];
  }
  else
  {
    [v8 unregister:v9 forNotification:2];
    [*(id *)(*(void *)(a1 + 48) + 16) unregister:*(void *)(*(void *)(a1 + 48) + 8) forNotification:4];
  }
}

void sub_101147A14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_101147A50(uint64_t a1, int a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_102419150 != -1) {
    dispatch_once(&qword_102419150, &stru_102313EF8);
  }
  uint64_t v5 = qword_102419158;
  if (os_log_type_enabled((os_log_t)qword_102419158, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 24);
    *(_DWORD *)buf = 138412802;
    uint64_t v11 = v6;
    __int16 v12 = 2048;
    uint64_t v13 = a1;
    __int16 v14 = 1024;
    int v15 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Cycling Workout Distance subscription changed, %@, %p, %d", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419150 != -1) {
      dispatch_once(&qword_102419150, &stru_102313EF8);
    }
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOdometerSubscription::handleRequestCyclingWorkoutDistanceUpdate(BOOL, const CLNameValuePair &)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  sub_10009C834(a1);
  *(unsigned char *)(a1 + 64) = a2;
  uint64_t v8 = *(void *)(a1 + 72);
  uint64_t v7 = *(void **)(a1 + 80);
  if (a2) {
    [v7 registerForCyclingWorkoutDistanceUpdates:v8];
  }
  else {
    [v7 unregisterForCyclingWorkoutDistanceUpdates:v8];
  }
}

void sub_101147C80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_101147CAC(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_101147CE8(uint64_t a1, uint64_t a2, _DWORD *a3, double *a4)
{
  if (*a3 != 4) {
    return;
  }
  int v5 = *((_DWORD *)a4 + 21);
  BOOL v6 = v5 == 1;
  BOOL v7 = v5 == 2;
  uint64_t v8 = 2;
  if (!v7) {
    uint64_t v8 = v6;
  }
  uint64_t v32 = v8;
  uint64_t v9 = a1 + 88;
  double v10 = *(double *)(a1 + 88);
  if (v10 == 0.0) {
    goto LABEL_12;
  }
  if (vabdd_f64(*a4, v10) >= 1800.0)
  {
    if (qword_102419150 != -1) {
      dispatch_once(&qword_102419150, &stru_102313EF8);
    }
    uint64_t v11 = qword_102419158;
    if (os_log_type_enabled((os_log_t)qword_102419158, OS_LOG_TYPE_DEBUG))
    {
      double v12 = *a4;
      uint64_t v13 = *(void *)v9;
      *(_DWORD *)buf = 134349312;
      *(double *)&uint8_t buf[4] = v12;
      __int16 v43 = 2050;
      uint64_t v44 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Ignoring cached OdometerEntry due to significant time between entries (%{public}.2f) (%{public}.2f)", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419150 != -1) {
        dispatch_once(&qword_102419150, &stru_102313EF8);
      }
      __int16 v28 = *(void **)a4;
      uint64_t v29 = *(void *)v9;
      int v36 = 134349312;
      id v37 = v28;
      __int16 v38 = 2050;
      uint64_t v39 = v29;
      uint64_t v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLOdometerSubscription::onOdometerUpdate(int, const CLOdometerNotifier_Type::Notification &, const CLOdometerNotifier_Type::NotificationData &)", "%s\n", v30);
      if (v30 != buf) {
        free(v30);
      }
    }
LABEL_12:
    __int16 v31 = 0;
    goto LABEL_13;
  }
  __int16 v31 = +[NSNumber numberWithDouble:a4[12] - *(double *)(a1 + 184)];
LABEL_13:
  id v14 = [objc_alloc((Class)CMOdometerData) initWithDeltaDistance:0 startDate:[NSDate dateWithTimeIntervalSinceReferenceDate:a4[2]] endDate:[NSDate dateWithTimeIntervalSinceReferenceDate:a4[5]] accuracy:[NSNumber numberWithDouble:a4[7]] rawSpeed:[NSNumber numberWithDouble:a4[8]] gpsSpeedAccuracy:[NSNumber numberWithDouble:a4[13]] timestampGps:[NSNumber numberWithDouble:a4[18]] deltaGroundAltitude:[NSNumber numberWithDouble:a4[19]] groundAltitudeUncertainty:[NSNumber numberWithDouble:a4[1]] originDevice:v31 slope:[NSNumber numberWithDouble:a4[3]] maxAbsSlope:[NSNumber numberWithDouble:a4[4]]];
  [v14 setCurrentSpeed:[NSNumber numberWithDouble:a4[4]]];
  [v14 setAverageSpeed:0];
  [v14 setGpsAltitude:[NSNumber numberWithDouble:a4[3]]];
  [v14 setOdometer:[NSNumber numberWithDouble:a4[6]]];
  [v14 setGroundAltitude:+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4[12])];
  [v14 setSmoothedGPSAltitude:+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4[14])];
  [v14 setSmoothedGPSAltitudeUncertainty:[NSNumber numberWithDouble:a4[15]]];
  [v14 setGpsCourseRadians:+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4[16])];
  [v14 setGpsCourseAccuracy:+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4[17])];
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102313F18);
  }
  int v15 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v16 = *(void *)(a1 + 24);
    *(_DWORD *)buf = 138412802;
    *(void *)&uint8_t buf[4] = v14;
    __int16 v43 = 2112;
    uint64_t v44 = v16;
    __int16 v45 = 2048;
    uint64_t v46 = a1;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "%@, %@, %p", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102313F18);
    }
    uint64_t v26 = *(void *)(a1 + 24);
    int v36 = 138412802;
    id v37 = v14;
    __int16 v38 = 2112;
    uint64_t v39 = v26;
    __int16 v40 = 2048;
    uint64_t v41 = a1;
    id v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOdometerSubscription::onOdometerUpdate(int, const CLOdometerNotifier_Type::Notification &, const CLOdometerNotifier_Type::NotificationData &)", "%s\n", v27);
    if (v27 != buf) {
      free(v27);
    }
  }
  uint64_t v34 = CMOdometerDataObject;
  id v35 = v14;
  *(void *)buf = +[NSDictionary dictionaryWithObjects:&v35 forKeys:&v34 count:1];

  sub_1011482D8(a1);
  long long v17 = *(_OWORD *)a4;
  long long v18 = *((_OWORD *)a4 + 1);
  long long v19 = *((_OWORD *)a4 + 3);
  *(_OWORD *)(v9 + 32) = *((_OWORD *)a4 + 2);
  *(_OWORD *)(v9 + 48) = v19;
  *(_OWORD *)uint64_t v9 = v17;
  *(_OWORD *)(v9 + 16) = v18;
  long long v20 = *((_OWORD *)a4 + 4);
  long long v21 = *((_OWORD *)a4 + 5);
  long long v22 = *((_OWORD *)a4 + 7);
  *(_OWORD *)(v9 + 96) = *((_OWORD *)a4 + 6);
  *(_OWORD *)(v9 + 112) = v22;
  *(_OWORD *)(v9 + 64) = v20;
  *(_OWORD *)(v9 + 80) = v21;
  long long v23 = *((_OWORD *)a4 + 8);
  long long v24 = *((_OWORD *)a4 + 9);
  long long v25 = *((_OWORD *)a4 + 11);
  *(_OWORD *)(v9 + 160) = *((_OWORD *)a4 + 10);
  *(_OWORD *)(v9 + 176) = v25;
  *(_OWORD *)(v9 + 128) = v23;
  *(_OWORD *)(v9 + 144) = v24;
}

void sub_1011482D8(uint64_t a1)
{
  sub_1000E9420(off_102314008, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_101148344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_10114835C(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned __int8 *a4)
{
  if (*a3 == 1)
  {
    uint64_t v5 = CMOdometerGpsAvailability;
    BOOL v6 = +[NSNumber numberWithBool:*a4];
    +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];
    sub_10114840C(a1);
  }
}

void sub_10114840C(uint64_t a1)
{
  sub_1000E9420(off_102314010, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_101148478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_101148490(uint64_t a1)
{
  sub_1000E9420(&off_102314018, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_1011484FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_101148514(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101148544(id a1)
{
  qword_102419158 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Odometer");
}

void sub_101148574(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1011485A4(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

__n128 sub_1011485D4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_102313F68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_101148620(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_102313F68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_101148650(uint64_t a1, uint64_t a2, long long *a3)
{
}

uint64_t sub_101148658(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101148698()
{
}

void sub_1011486A4(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_101148700(a1, a2, (CLConnectionMessage **)&v3);
  if (*((void *)&v3 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v3 + 1));
  }
}

void sub_1011486E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101148700(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  BOOL v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  CFDictionaryRef DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_10013FA80((int)v15, DictionaryOfClasses);
  BOOL v14 = 0;
  if (sub_1000D2988((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14))
  {
    uint64_t v8 = *(void (**)(void *, BOOL, uint8_t *))a1;
    uint64_t v9 = *(void *)(a1 + 8);
    double v10 = (void *)(a2 + (v9 >> 1));
    if (v9) {
      uint64_t v8 = *(void (**)(void *, BOOL, uint8_t *))(*v10 + v8);
    }
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_102313FD8);
    }
    uint64_t v11 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      long long v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102313FD8);
      }
    }
    double v12 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      *(_DWORD *)buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      long long v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10013F3C4(v15);
}

void sub_101148930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_10114894C(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

uint64_t sub_10114897C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_1011489F8(a1, a2, (long long *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_1011489E4(_Unwind_Exception *a1)
{
  sub_100BF34BC(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1011489F8(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  BOOL v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_101148C7C(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  long long v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *long long v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_101148D6C((uint64_t)v25, 0);
  return i;
}

void sub_101148C64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101148D6C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_101148C7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  __n128 result = sub_101148CF4(v8 + 2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_101148CDC(_Unwind_Exception *a1)
{
  sub_101148D6C(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_101148CF4(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
  }
  sub_100BF2C74((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_101148D50(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_101148D6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100BF353C((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t sub_101148DC4()
{
  sub_100134750(qword_102485A18, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102485A18, (void *)&_mh_execute_header);
}

uint64_t sub_10114969C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    long long v4 = &OBJC_IVAR___CLOdometerAlarmManager_currentlyScheduled;
    uint64_t v5 = &OBJC_IVAR___CLOdometerAlarmManager_currentlyScheduled;
    BOOL v6 = &OBJC_IVAR___CLOdometerAlarmManager_currentlyScheduled;
    uint64_t v7 = &OBJC_IVAR___CLOdometerAlarmManager_currentlyScheduled;
    unint64_t v8 = &OBJC_IVAR___CLOdometerAlarmManager_currentlyScheduled;
    unint64_t v9 = &OBJC_IVAR___CLOdometerAlarmManager_currentlyScheduled;
    unint64_t v10 = &OBJC_IVAR___CLOdometerAlarmManager_currentlyScheduled;
    uint8x8_t v11 = &OBJC_IVAR___CLOdometerAlarmManager_currentlyScheduled;
    unint64_t v12 = &OBJC_IVAR___CLOdometerAlarmManager_currentlyScheduled;
    do
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        uint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v17 = v16 + 1;
        if (v16 == -1 || v17 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v18 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17;
        v15 |= (unint64_t)(v18 & 0x7F) << v13;
        if ((v18 & 0x80) == 0) {
          goto LABEL_12;
        }
        v13 += 7;
        BOOL v19 = v14++ >= 9;
        if (v19)
        {
          unint64_t v15 = 0;
          int v20 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
      int v20 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v15 = 0;
      }
LABEL_14:
      if (v20 || (v15 & 7) == 4) {
        break;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + v4[76]) |= 0x20u;
          unint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v55 = v5[77];
          goto LABEL_95;
        case 2u:
          *(_WORD *)(a1 + v4[76]) |= 1u;
          unint64_t v30 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v55 = v6[78];
          goto LABEL_95;
        case 3u:
          *(_WORD *)(a1 + v4[76]) |= 2u;
          unint64_t v31 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v31 <= 0xFFFFFFFFFFFFFFF7 && v31 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v31);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v31 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v55 = v7[79];
          goto LABEL_95;
        case 4u:
          *(_WORD *)(a1 + v4[76]) |= 0x80u;
          unint64_t v32 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v32 <= 0xFFFFFFFFFFFFFFF7 && v32 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v32);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v32 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v55 = v8[80];
          goto LABEL_95;
        case 5u:
          *(_WORD *)(a1 + v4[76]) |= 0x40u;
          unint64_t v33 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v33 <= 0xFFFFFFFFFFFFFFF7 && v33 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v33 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v55 = v9[81];
          goto LABEL_95;
        case 6u:
          *(_WORD *)(a1 + v4[76]) |= 0x10u;
          unint64_t v34 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v34 <= 0xFFFFFFFFFFFFFFF7 && v34 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v55 = v10[82];
          goto LABEL_95;
        case 7u:
          *(_WORD *)(a1 + v4[76]) |= 4u;
          unint64_t v35 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v35 <= 0xFFFFFFFFFFFFFFF7 && v35 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v35);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v35 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v55 = v11[83];
          goto LABEL_95;
        case 8u:
          *(_WORD *)(a1 + v4[76]) |= 8u;
          unint64_t v36 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v36 <= 0xFFFFFFFFFFFFFFF7 && v36 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v36);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v36 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v55 = v12[84];
LABEL_95:
          *(void *)(a1 + v55) = v23;
          continue;
        case 9u:
          char v37 = 0;
          unsigned int v38 = 0;
          uint64_t v39 = 0;
          *(_WORD *)(a1 + v4[76]) |= 0x400u;
          while (2)
          {
            uint64_t v40 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v41 = v40 + 1;
            if (v40 == -1 || v41 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v42 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v40);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v41;
              v39 |= (unint64_t)(v42 & 0x7F) << v37;
              if (v42 < 0)
              {
                v37 += 7;
                BOOL v19 = v38++ >= 9;
                if (v19)
                {
                  LODWORD(v39) = 0;
                  goto LABEL_69;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v39) = 0;
          }
LABEL_69:
          uint64_t v54 = 84;
          goto LABEL_74;
        case 0xAu:
          char v43 = 0;
          unsigned int v44 = 0;
          uint64_t v39 = 0;
          *(_WORD *)(a1 + v4[76]) |= 0x200u;
          while (2)
          {
            uint64_t v45 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v46 = v45 + 1;
            if (v45 == -1 || v46 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v47 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v45);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v46;
              v39 |= (unint64_t)(v47 & 0x7F) << v43;
              if (v47 < 0)
              {
                v43 += 7;
                BOOL v19 = v44++ >= 9;
                if (v19)
                {
                  LODWORD(v39) = 0;
                  goto LABEL_73;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v39) = 0;
          }
LABEL_73:
          uint64_t v54 = 80;
LABEL_74:
          *(_DWORD *)(a1 + v54) = v39;
          continue;
        case 0xBu:
          char v48 = 0;
          unsigned int v49 = 0;
          uint64_t v50 = 0;
          *(_WORD *)(a1 + v4[76]) |= 0x100u;
          break;
        default:
          long long v24 = v5;
          long long v25 = v6;
          uint64_t v26 = v7;
          id v27 = v4;
          __int16 v28 = v8;
          uint64_t result = PBReaderSkipValueWithTag();
          unint64_t v8 = v28;
          long long v4 = v27;
          unint64_t v9 = &OBJC_IVAR___CLOdometerAlarmManager_currentlyScheduled;
          uint64_t v7 = v26;
          unint64_t v10 = &OBJC_IVAR___CLOdometerAlarmManager_currentlyScheduled;
          BOOL v6 = v25;
          uint8x8_t v11 = &OBJC_IVAR___CLOdometerAlarmManager_currentlyScheduled;
          uint64_t v5 = v24;
          unint64_t v12 = &OBJC_IVAR___CLOdometerAlarmManager_currentlyScheduled;
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v51 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v52 = v51 + 1;
        if (v51 == -1 || v52 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v53 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v51);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v52;
        v50 |= (unint64_t)(v53 & 0x7F) << v48;
        if ((v53 & 0x80) == 0) {
          goto LABEL_76;
        }
        v48 += 7;
        BOOL v19 = v49++ >= 9;
        if (v19)
        {
          uint64_t v50 = 0;
          goto LABEL_78;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_76:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v50 = 0;
      }
LABEL_78:
      *(void *)(a1 + 72) = v50;
    }
    while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length));
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10114AC70()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101DA9B24;
      v0[3] = unk_101DA9B34;
      v0[4] = xmmword_101DA9B44;
      v0[0] = xmmword_101DA9B04;
      v0[1] = unk_101DA9B14;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_10114AD50(_Unwind_Exception *a1)
{
}

void sub_10114AD68()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_10114ADE8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_10114AE78(_Unwind_Exception *a1)
{
}

void sub_10114AF40(id a1)
{
  qword_102485A30 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLRayTracingTileManagerSilo"];
}

uint64_t sub_10114B000(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10114FFD8;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_102485A50 != -1) {
    dispatch_once(&qword_102485A50, block);
  }
  return qword_10248B358;
}

void sub_10114B264(id a1)
{
  sub_100103240();
  if (sub_100744498())
  {
    byte_102485A40 = 1;
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_102314218);
    }
    uint64_t v1 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
    {
      v2[0] = 68289026;
      v2[1] = 0;
      __int16 v3 = 2082;
      long long v4 = "";
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"RayTracingTileManager is not supported\"}", (uint8_t *)v2, 0x12u);
    }
  }
}

void sub_10114B518(uint64_t a1, int a2, double a3, double a4)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_102314218);
  }
  unint64_t v8 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    int v20 = 0;
    __int16 v21 = 2082;
    unint64_t v22 = "";
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,getTiles\"}", buf, 0x12u);
  }
  if (*(unsigned char *)(a1 + 272))
  {
    if (*(void *)(a1 + 120) && *(void *)(a1 + 360))
    {
      id v9 = [*(id *)(a1 + 112) silo];
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      void v17[2] = sub_10115125C;
      v17[3] = &unk_1022BBB98;
      void v17[4] = a1;
      *(double *)&v17[5] = a3;
      *(double *)&v17[6] = a4;
      int v18 = a2;
      [v9 async:v17];
    }
    else
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_102314218);
      }
      unint64_t v10 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
      {
        BOOL v11 = *(void *)(a1 + 120) == 0;
        BOOL v12 = *(void *)(a1 + 360) == 0;
        *(_DWORD *)buf = 68289538;
        int v20 = 0;
        __int16 v21 = 2082;
        unint64_t v22 = "";
        __int16 v23 = 1026;
        BOOL v24 = v11;
        __int16 v25 = 1026;
        BOOL v26 = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,getTiles,unexpected null pointer\", \"fRTTileDownloader null\":%{public}hhd, \"fTileAvailabilityMgr null\":%{public}hhd}", buf, 0x1Eu);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_102314218);
        }
      }
      char v13 = qword_1024193A8;
      if (os_signpost_enabled((os_log_t)qword_1024193A8))
      {
        BOOL v14 = *(void *)(a1 + 120) == 0;
        BOOL v15 = *(void *)(a1 + 360) == 0;
        *(_DWORD *)buf = 68289538;
        int v20 = 0;
        __int16 v21 = 2082;
        unint64_t v22 = "";
        __int16 v23 = 1026;
        BOOL v24 = v14;
        __int16 v25 = 1026;
        BOOL v26 = v15;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLRayTracingTileManager,getTiles,unexpected null pointer", "{\"msg%{public}.0s\":\"CLRayTracingTileManager,getTiles,unexpected null pointer\", \"fRTTileDownloader null\":%{public}hhd, \"fTileAvailabilityMgr null\":%{public}hhd}", buf, 0x1Eu);
      }
    }
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_102314218);
    }
    uint64_t v16 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      int v20 = 0;
      __int16 v21 = 2082;
      unint64_t v22 = "";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,feature not enabled\"}", buf, 0x12u);
    }
  }
}

void sub_10114BA14(uint64_t a1)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_102314218);
  }
  uint64_t v2 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 68289026;
    int v6 = 0;
    __int16 v7 = 2082;
    unint64_t v8 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,runPreCachingCycle\"}", (uint8_t *)&v5, 0x12u);
  }
  if (*(unsigned char *)(a1 + 272))
  {
    if (!*(unsigned char *)(a1 + 274))
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_102314218);
      }
      __int16 v3 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 68289026;
        int v6 = 0;
        __int16 v7 = 2082;
        unint64_t v8 = "";
        long long v4 = "{\"msg%{public}.0s\":\"CLRayTracingTileManager,runPreCachingCycle not allowed\"}";
LABEL_15:
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, v4, (uint8_t *)&v5, 0x12u);
      }
    }
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_102314218);
    }
    __int16 v3 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 68289026;
      int v6 = 0;
      __int16 v7 = 2082;
      unint64_t v8 = "";
      long long v4 = "{\"msg%{public}.0s\":\"CLRayTracingTileManager,feature not enabled\"}";
      goto LABEL_15;
    }
  }
}

void sub_10114BD98(uint64_t a1)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_102314218);
  }
  uint64_t v2 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    __int16 v5 = 2082;
    int v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,cancelRequest\"}", (uint8_t *)v4, 0x12u);
  }
  uint64_t v3 = *(void *)(a1 + 120);
  if (v3) {
    sub_100777198(v3);
  }
  *(unsigned char *)(a1 + 356) = 0;
}

void sub_10114BE84(uint64_t a1, void *a2)
{
  *(void *)sub_10114C3B0(a1, "CLRayTracingTileManager", a2) = off_1023140A0;
  id v4 = a2;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 112) = v4;
  *(_OWORD *)(a1 + 136) = 0u;
  *(unsigned char *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 192) = 0;
  *(unsigned char *)(a1 + 200) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(unsigned char *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 232) = 0;
  *(unsigned char *)(a1 + 240) = 0;
  *(unsigned char *)(a1 + 248) = 0;
  *(unsigned char *)(a1 + 256) = 0;
  *(unsigned char *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 268) = 0;
  *(_OWORD *)(a1 + 150) = 0u;
  *(_WORD *)(a1 + 272) = 1;
  *(unsigned char *)(a1 + 274) = 0;
  *(void *)(a1 + 280) = 0x415BAF8000000000;
  *(_OWORD *)(a1 + 288) = xmmword_101DA9B70;
  *(_OWORD *)(a1 + 304) = xmmword_101DA9B80;
  *(void *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 3;
  *(void *)(a1 + 349) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 360) = 0;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_102314218);
  }
  __int16 v5 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    v7[0] = 2082;
    *(void *)&v7[1] = "";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,constructor\"}", buf, 0x12u);
  }
  operator new();
}

void sub_10114C294(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v6 = v2[47];
  v2[47] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = v2[46];
  v2[46] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_101154EAC(v4, 0);
  sub_101154E08((void ***)va);
  uint64_t v8 = v2[16];
  v2[16] = 0;
  if (v8) {
    operator delete();
  }
  sub_101154CF4(v3, 0);
  sub_10114F4F0((uint64_t)v2);
  _Unwind_Resume(a1);
}

uint64_t sub_10114C3B0(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_102314268;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_10114C440(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_10114C45C(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 112), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1023141F8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRayTracingTileManager::onDaemonStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023141F8);
    }
    id v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      BOOL v15 = "";
      __int16 v16 = 2082;
      unint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRayTracingTileManager::onDaemonStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101151270(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10114C618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

double sub_10114C638(uint64_t a1)
{
  double v49 = 0.0;
  sub_1000C7F88(buf);
  int v2 = sub_1000A699C(*(uint64_t *)&buf[0], "RayTracingAvlExpirationAgeDefaults", &v49);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v2)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102314238);
    }
    uint64_t v3 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0]) = 134349056;
      *(double *)((char *)buf + 4) = v49;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "RayTracingTileManager,defaults expirationAge,%{public}.3lf", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102314238);
      }
      int v50 = 134349056;
      double v51 = v49;
      id v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileManager::readRayTracingDefaultsWriteConfig()", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
    *(double *)(a1 + 168) = v49;
    *(unsigned char *)(a1 + 176) = 1;
  }
  BOOL v48 = 0;
  sub_1000C7F88(buf);
  int v4 = sub_1000D2988(*(uint64_t *)&buf[0], "RayTracingTileManagerEnableDefaults", &v48);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v4)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102314238);
    }
    __int16 v5 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      if (v48) {
        uint64_t v6 = "On";
      }
      else {
        uint64_t v6 = "Off";
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "RayTracingTileManager,defaults featureEnable,%{public}s", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102314238);
      }
      if (v48) {
        *(double *)&__int16 v28 = COERCE_DOUBLE("On");
      }
      else {
        *(double *)&__int16 v28 = COERCE_DOUBLE("Off");
      }
      int v50 = 136446210;
      double v51 = *(double *)&v28;
      uint64_t v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileManager::readRayTracingDefaultsWriteConfig()", "%s\n", v29);
      if (v29 != (char *)buf) {
        free(v29);
      }
    }
    *(_WORD *)(a1 + 160) = v48 | 0x100;
  }
  BOOL v47 = 0;
  sub_1000C7F88(buf);
  int v7 = sub_1000D2988(*(uint64_t *)&buf[0], "RayTracingPreCacheingEnabledDefaults", &v47);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v7)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102314238);
    }
    uint64_t v8 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      if (v47) {
        id v9 = "On";
      }
      else {
        id v9 = "Off";
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "RayTracingTileManager,defaults preCacheingEnable,%{public}s", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102314238);
      }
      if (v47) {
        *(double *)&unint64_t v30 = COERCE_DOUBLE("On");
      }
      else {
        *(double *)&unint64_t v30 = COERCE_DOUBLE("Off");
      }
      int v50 = 136446210;
      double v51 = *(double *)&v30;
      unint64_t v31 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileManager::readRayTracingDefaultsWriteConfig()", "%s\n", v31);
      if (v31 != (char *)buf) {
        free(v31);
      }
    }
    *(_WORD *)(a1 + 164) = v47 | 0x100;
  }
  BOOL v46 = 0;
  sub_1000C7F88(buf);
  int v10 = sub_1000D2988(*(uint64_t *)&buf[0], "RayTracingFlushRTDataDefaults", &v46);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v10)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102314238);
    }
    char v11 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      if (v46) {
        BOOL v12 = "On";
      }
      else {
        BOOL v12 = "Off";
      }
      LODWORD(buf[0]) = 136446210;
      *(void *)((char *)buf + 4) = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "RayTracingTileManager,defaults FlushEnabled,%{public}s", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102314238);
      }
      if (v46) {
        *(double *)&unint64_t v32 = COERCE_DOUBLE("On");
      }
      else {
        *(double *)&unint64_t v32 = COERCE_DOUBLE("Off");
      }
      int v50 = 136446210;
      double v51 = *(double *)&v32;
      unint64_t v33 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileManager::readRayTracingDefaultsWriteConfig()", "%s\n", v33);
      if (v33 != (char *)buf) {
        free(v33);
      }
    }
    *(_WORD *)(a1 + 162) = v46 | 0x100;
  }
  double v45 = 0.0;
  sub_1000C7F88(buf);
  int v13 = sub_1000A699C(*(uint64_t *)&buf[0], "RayTracingFlushRTDataBeforeTimeDefaults", &v45);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v13)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102314238);
    }
    __int16 v14 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0]) = 134349056;
      *(double *)((char *)buf + 4) = v45;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "RayTracingTileManager,defaults flushTime,%{public}.3lf", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102314238);
      }
      int v50 = 134349056;
      double v51 = v45;
      unint64_t v34 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileManager::readRayTracingDefaultsWriteConfig()", "%s\n", v34);
      if (v34 != (char *)buf) {
        free(v34);
      }
    }
    *(double *)(a1 + 184) = v45;
    *(unsigned char *)(a1 + 192) = 1;
  }
  double v44 = 0.0;
  sub_1000C7F88(buf);
  int v15 = sub_1000A699C(*(uint64_t *)&buf[0], "RayTracingAvlDownloadRateOnWifiDefaults", &v44);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v15)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102314238);
    }
    __int16 v16 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0]) = 134349056;
      *(double *)((char *)buf + 4) = v44;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "RayTracingTileManager,defaults wifiDownloadRateDefault,%{public}.3lf", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102314238);
      }
      int v50 = 134349056;
      double v51 = v44;
      unint64_t v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileManager::readRayTracingDefaultsWriteConfig()", "%s\n", v35);
      if (v35 != (char *)buf) {
        free(v35);
      }
    }
    *(double *)(a1 + 200) = v44;
    *(unsigned char *)(a1 + 208) = 1;
  }
  double v43 = 0.0;
  sub_1000C7F88(buf);
  int v17 = sub_1000A699C(*(uint64_t *)&buf[0], "RayTracingAvlDownloadRateOnCellDefaults", &v43);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v17)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102314238);
    }
    __int16 v18 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0]) = 134349056;
      *(double *)((char *)buf + 4) = v43;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "RayTracingTileManager,defaults CellDownloadRateDefault,%{public}.3lf", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102314238);
      }
      int v50 = 134349056;
      double v51 = v43;
      unint64_t v36 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileManager::readRayTracingDefaultsWriteConfig()", "%s\n", v36);
      if (v36 != (char *)buf) {
        free(v36);
      }
    }
    *(double *)(a1 + 216) = v43;
    *(unsigned char *)(a1 + 224) = 1;
  }
  double v42 = 0.0;
  sub_1000C7F88(buf);
  int v19 = sub_1000A699C(*(uint64_t *)&buf[0], "RayTracingTrialDownloadMaxRetrialAllowedDefaults", &v42);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v19)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102314238);
    }
    int v20 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0]) = 134349056;
      *(double *)((char *)buf + 4) = v42;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "RayTracingTileManager,defaults retrial,%{public}.3lf", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102314238);
      }
      int v50 = 134349056;
      double v51 = v42;
      char v37 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileManager::readRayTracingDefaultsWriteConfig()", "%s\n", v37);
      if (v37 != (char *)buf) {
        free(v37);
      }
    }
    double v21 = v42;
    if (!*(unsigned char *)(a1 + 268)) {
      *(unsigned char *)(a1 + 268) = 1;
    }
    *(_DWORD *)(a1 + 264) = v21;
  }
  double v41 = 0.0;
  sub_1000C7F88(buf);
  int v22 = sub_1000A699C(*(uint64_t *)&buf[0], "RayTracingTileGridSizeDefaults", &v41);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v22)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102314238);
    }
    __int16 v23 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0]) = 134349056;
      *(double *)((char *)buf + 4) = v41;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "RayTracingTileManager,defaults GridSize,%{public}.3lf", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102314238);
      }
      int v50 = 134349056;
      double v51 = v41;
      unsigned int v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileManager::readRayTracingDefaultsWriteConfig()", "%s\n", v38);
      if (v38 != (char *)buf) {
        free(v38);
      }
    }
    *(double *)(a1 + 248) = v41;
    *(unsigned char *)(a1 + 256) = 1;
  }
  double v40 = 0.0;
  sub_1000C7F88(buf);
  int v24 = sub_1000A699C(*(uint64_t *)&buf[0], "RayTracingStorageLimitDefaults", &v40);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v24)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102314238);
    }
    BOOL v26 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0]) = 134349056;
      *(double *)((char *)buf + 4) = v40;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "RayTracingTileManager,defaults diskSpace,%{public}.3lf", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102314238);
      }
      int v50 = 134349056;
      double v51 = v40;
      uint64_t v39 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileManager::readRayTracingDefaultsWriteConfig()", "%s\n", v39);
      if (v39 != (char *)buf) {
        free(v39);
      }
    }
    double result = v40;
    *(double *)(a1 + 232) = v40;
    *(unsigned char *)(a1 + 240) = 1;
  }
  return result;
}

void sub_10114D71C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    sub_1000DB0A0(a22);
  }
  _Unwind_Resume(exception_object);
}

double sub_10114D760(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 176))
  {
    double result = *(double *)(a1 + 168);
    *(double *)(a1 + 280) = result;
  }
  if (*(unsigned char *)(a1 + 161)) {
    *(unsigned char *)(a1 + 272) = *(unsigned char *)(a1 + 160);
  }
  if (*(unsigned char *)(a1 + 165)) {
    *(unsigned char *)(a1 + 274) = *(unsigned char *)(a1 + 164);
  }
  if (*(unsigned char *)(a1 + 163)) {
    *(unsigned char *)(a1 + 273) = *(unsigned char *)(a1 + 162);
  }
  if (*(unsigned char *)(a1 + 192))
  {
    double result = *(double *)(a1 + 184);
    *(double *)(a1 + 288) = result;
  }
  if (*(unsigned char *)(a1 + 208))
  {
    double result = *(double *)(a1 + 200);
    *(double *)(a1 + 296) = result;
  }
  if (*(unsigned char *)(a1 + 224))
  {
    double result = *(double *)(a1 + 216);
    *(double *)(a1 + 304) = result;
  }
  if (*(unsigned char *)(a1 + 268)) {
    *(_DWORD *)(a1 + 328) = *(_DWORD *)(a1 + 264);
  }
  if (*(unsigned char *)(a1 + 256))
  {
    double result = *(double *)(a1 + 248);
    *(double *)(a1 + 320) = result;
  }
  if (*(unsigned char *)(a1 + 240))
  {
    double result = *(double *)(a1 + 232);
    *(double *)(a1 + 312) = result;
  }
  return result;
}

void sub_10114D804(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 112), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1023141F8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRayTracingTileManager::onMobileAssetNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023141F8);
    }
    id v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRayTracingTileManager::onMobileAssetNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1011514DC(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10114D9C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10114D9E0(void *a1)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_102314218);
  }
  uint64_t v1 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "RayTracingTileManager,getListOfRayTracingTilesOnDisk", (uint8_t *)&buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_102314218);
    }
    LOWORD(v108.st_dev) = 0;
    float64x2_t v63 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRayTracingTileManager::getListOfRayTracingTilesOnDisk()", "%s\n", (const char *)v63);
    if (v63 != &buf) {
      free(v63);
    }
  }
  int v2 = (char *)sub_1000A6958();
  sub_1000A5670(v2, (uint64_t)&v81);
  if (((char)v83 & 0x80000000) == 0)
  {
    if (v83)
    {
      uint64_t v3 = (const char *)&v81;
      goto LABEL_11;
    }
LABEL_154:
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_102314218);
    }
    uint64_t v58 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_INFO, "RayTracingTileManager,empty dir", (uint8_t *)&buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_169;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_102314218);
    }
    LOWORD(v108.st_dev) = 0;
    uint64_t v59 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRayTracingTileManager::getListOfRayTracingTilesOnDisk()", "%s\n", (const char *)v59);
    goto LABEL_182;
  }
  if (!v82) {
    goto LABEL_154;
  }
  uint64_t v3 = v81;
LABEL_11:
  int v4 = opendir(v3);
  if (!v4)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_102314218);
    }
    double v60 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      unint64_t v61 = &v81;
      if ((v83 & 0x80u) != 0) {
        unint64_t v61 = v81;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v61;
      _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, "RayTracingTileManager,can't open dir,%{public}s", (uint8_t *)&buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_169;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_102314218);
    }
    uint64_t v64 = &v81;
    if ((v83 & 0x80u) != 0) {
      uint64_t v64 = v81;
    }
    v108.st_dev = 136446210;
    *(void *)&v108.st_mode = v64;
    uint64_t v59 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLRayTracingTileManager::getListOfRayTracingTilesOnDisk()", "%s\n", (const char *)v59);
LABEL_182:
    if (v59 != &buf) {
      free(v59);
    }
LABEL_169:
    uint64_t v57 = 0;
    goto LABEL_170;
  }
  long long v79 = 0uLL;
  uint64_t v80 = 0;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  memset(v74, 0, sizeof(v74));
  __int16 v5 = +[NSFileManager defaultManager];
  if ((v83 & 0x80u) == 0) {
    uint64_t v6 = &v81;
  }
  else {
    uint64_t v6 = v81;
  }
  long long v72 = 0u;
  long long v73 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  uint64_t v7 = [(NSArray *)[(NSFileManager *)v5 contentsOfDirectoryAtPath:+[NSString stringWithUTF8String:v6] error:0] reverseObjectEnumerator];
  id v8 = [(NSEnumerator *)v7 countByEnumeratingWithState:&v70 objects:v109 count:16];
  if (v8)
  {
    uint64_t v67 = *(void *)v71;
    obuint64_t j = v7;
    do
    {
      id v9 = 0;
      do
      {
        if (*(void *)v71 != v67) {
          objc_enumerationMutation(obj);
        }
        int v10 = (const std::string::value_type *)[*(id *)(*((void *)&v70 + 1) + 8 * (void)v9) UTF8String];
        if (v10)
        {
          std::string::assign((std::string *)v74, v10);
          if (byte_10248B33F >= 0) {
            char v11 = &qword_10248B328;
          }
          else {
            char v11 = (uint64_t *)qword_10248B328;
          }
          if (byte_10248B33F >= 0) {
            int64_t v12 = byte_10248B33F;
          }
          else {
            int64_t v12 = unk_10248B330;
          }
          if (v74[23] >= 0) {
            int v13 = v74;
          }
          else {
            int v13 = *(unsigned char **)v74;
          }
          if (v74[23] >= 0) {
            int64_t v14 = v74[23];
          }
          else {
            int64_t v14 = *(void *)&v74[8];
          }
          if (v12)
          {
            if (v14 >= v12)
            {
              int v15 = &v13[v14];
              int v16 = *(char *)v11;
              int64_t v17 = v14;
              __int16 v18 = v13;
              do
              {
                int64_t v19 = v17 - v12;
                if (v19 == -1) {
                  break;
                }
                int v20 = (char *)memchr(v18, v16, v19 + 1);
                if (!v20) {
                  break;
                }
                double v21 = v20;
                if (!memcmp(v20, v11, v12))
                {
                  if (v21 == v15 || v21 - v13 == -1) {
                    break;
                  }
                  goto LABEL_50;
                }
                __int16 v18 = v21 + 1;
                int64_t v17 = v15 - (v21 + 1);
              }
              while (v17 >= v12);
            }
          }
          else
          {
LABEL_50:
            __int16 v23 = &qword_10248B340;
            uint64_t v24 = byte_10248B357;
            if (byte_10248B357 < 0)
            {
              __int16 v23 = (uint64_t *)qword_10248B340;
              uint64_t v24 = unk_10248B348;
            }
            __int16 v25 = &v13[v14];
            if (v14 && v24)
            {
              BOOL v26 = v13;
              id v27 = &v13[v14];
              do
              {
                if (*v26 == *(unsigned __int8 *)v23)
                {
                  uint64_t v28 = 1;
                  while (v24 != v28)
                  {
                    if (&v26[v28] == v25) {
                      goto LABEL_65;
                    }
                    int v29 = v26[v28];
                    int v30 = *((unsigned __int8 *)v23 + v28++);
                    if (v29 != v30) {
                      goto LABEL_56;
                    }
                  }
                  id v27 = v26;
                }
LABEL_56:
                ++v26;
              }
              while (v26 != v25);
            }
            else
            {
              id v27 = &v13[v14];
            }
LABEL_65:
            BOOL v31 = v27 != v25 || v24 == 0;
            if (v31 && v27 - v13 != -1)
            {
              if ((v83 & 0x80u) == 0) {
                size_t v32 = v83;
              }
              else {
                size_t v32 = v82;
              }
              sub_1001110E4((uint64_t)&buf, v32 + 1);
              if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                p_std::string buf = &buf;
              }
              else {
                p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
              }
              if (v32)
              {
                if ((v83 & 0x80u) == 0) {
                  unint64_t v34 = &v81;
                }
                else {
                  unint64_t v34 = v81;
                }
                memmove(p_buf, v34, v32);
              }
              *(_WORD *)((char *)&p_buf->__r_.__value_.__l.__data_ + v32) = 47;
              if (v74[23] >= 0) {
                unint64_t v35 = v74;
              }
              else {
                unint64_t v35 = *(const std::string::value_type **)v74;
              }
              if (v74[23] >= 0) {
                std::string::size_type v36 = v74[23];
              }
              else {
                std::string::size_type v36 = *(void *)&v74[8];
              }
              char v37 = std::string::append(&buf, v35, v36);
              long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
              int64_t v69 = v37->__r_.__value_.__r.__words[2];
              *(_OWORD *)std::string __p = v38;
              v37->__r_.__value_.__l.__size_ = 0;
              v37->__r_.__value_.__r.__words[2] = 0;
              v37->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(buf.__r_.__value_.__l.__data_);
              }
              if (qword_1024193A0 != -1) {
                dispatch_once(&qword_1024193A0, &stru_102314218);
              }
              uint64_t v39 = qword_1024193A8;
              if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
              {
                double v40 = __p;
                if (v69 < 0) {
                  double v40 = (void **)__p[0];
                }
                LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
                *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v40;
                _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "RayTracingTileManager,fileOnDisk,%{public}s", (uint8_t *)&buf, 0xCu);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(&buf, 0x65CuLL);
                if (qword_1024193A0 != -1) {
                  dispatch_once(&qword_1024193A0, &stru_102314218);
                }
                int v50 = __p;
                if (v69 < 0) {
                  int v50 = (void **)__p[0];
                }
                v108.st_dev = 136446210;
                *(void *)&v108.st_mode = v50;
                double v51 = (std::string *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRayTracingTileManager::getListOfRayTracingTilesOnDisk()", "%s\n", (const char *)v51);
                if (v51 != &buf) {
                  free(v51);
                }
              }
              if (v69 >= 0) {
                double v41 = __p;
              }
              else {
                double v41 = (void **)__p[0];
              }
              uint64_t v42 = stat((const char *)v41, &v108);
              if (v42 == -1)
              {
                if (qword_1024193A0 != -1) {
                  dispatch_once(&qword_1024193A0, &stru_102314218);
                }
                BOOL v47 = qword_1024193A8;
                if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
                {
                  BOOL v48 = __p;
                  if (v69 < 0) {
                    BOOL v48 = (void **)__p[0];
                  }
                  LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
                  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v48;
                  _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_INFO, "RayTracingTileManager,fileOnDisk,%{public}s,stat error", (uint8_t *)&buf, 0xCu);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(&buf, 0x65CuLL);
                  if (qword_1024193A0 != -1) {
                    dispatch_once(&qword_1024193A0, &stru_102314218);
                  }
                  uint64_t v54 = __p;
                  if (v69 < 0) {
                    uint64_t v54 = (void **)__p[0];
                  }
                  int v84 = 136446210;
                  uint64_t v85 = v54;
                  uint64_t v55 = (std::string *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRayTracingTileManager::getListOfRayTracingTilesOnDisk()", "%s\n", (const char *)v55);
                  if (v55 != &buf) {
                    free(v55);
                  }
                }
              }
              else
              {
                sub_10114F574(v42, (const std::string *)v74, (unint64_t *)&v74[24]);
                uint64_t v43 = a1[16];
                if (v43) {
                  sub_1004DD944(v43, (uint64_t)__p, (uint64_t)v74);
                }
                LODWORD(v75) = v108.st_size;
                *(void *)&long long v76 = sub_10016BE44(&v108.st_ctimespec.tv_sec);
                *(void *)&long long v77 = sub_10016BE44(&v108.st_atimespec.tv_sec);
                if (qword_1024193A0 != -1) {
                  dispatch_once(&qword_1024193A0, &stru_102314218);
                }
                double v44 = qword_1024193A8;
                if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
                {
                  double v45 = v74;
                  if (v74[23] < 0) {
                    double v45 = *(unsigned char **)v74;
                  }
                  LODWORD(buf.__r_.__value_.__l.__data_) = 136449027;
                  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v45;
                  WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
                  *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = *(void *)&v74[24];
                  HIWORD(buf.__r_.__value_.__r.__words[2]) = 1026;
                  int v111 = v75;
                  __int16 v112 = 1026;
                  int v113 = DWORD1(v75);
                  __int16 v114 = 1026;
                  int v115 = HIDWORD(v75);
                  __int16 v116 = 1026;
                  int v117 = DWORD2(v75);
                  __int16 v118 = 2049;
                  uint64_t v119 = v78;
                  __int16 v120 = 2049;
                  uint64_t v121 = v78;
                  __int16 v122 = 2050;
                  uint64_t v123 = *((void *)&v77 + 1);
                  __int16 v124 = 2050;
                  uint64_t v125 = v76;
                  __int16 v126 = 2050;
                  uint64_t v127 = *((void *)&v76 + 1);
                  __int16 v128 = 2050;
                  uint64_t v129 = v77;
                  _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "RayTracingTileManager,fileName,%{public}s,tileIndex,%{public}llu,fileSize,%{public}u,fileVersion,%{public}d,fileIODBasedOnTileFile,%{public}d,fileIODBasedOnAvlFile,%{public}d,minLat,%{private}.3lf,minLon,%{private}.3lf,expirationAge,%{public}.3lf,downloadTimeStamp_s,%{public}.3lf,creationTimeStamp_s,%{public}.3lf,lastAccessTimeStamp_s,%{public}.3lf", (uint8_t *)&buf, 0x6Au);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(&buf, 0x65CuLL);
                  if (qword_1024193A0 != -1) {
                    dispatch_once(&qword_1024193A0, &stru_102314218);
                  }
                  unint64_t v52 = (void **)v74;
                  if (v74[23] < 0) {
                    unint64_t v52 = *(void ***)v74;
                  }
                  int v84 = 136449027;
                  uint64_t v85 = v52;
                  __int16 v86 = 2050;
                  uint64_t v87 = *(void *)&v74[24];
                  __int16 v88 = 1026;
                  int v89 = v75;
                  __int16 v90 = 1026;
                  int v91 = DWORD1(v75);
                  __int16 v92 = 1026;
                  int v93 = HIDWORD(v75);
                  __int16 v94 = 1026;
                  int v95 = DWORD2(v75);
                  __int16 v96 = 2049;
                  uint64_t v97 = v78;
                  __int16 v98 = 2049;
                  uint64_t v99 = v78;
                  __int16 v100 = 2050;
                  uint64_t v101 = *((void *)&v77 + 1);
                  __int16 v102 = 2050;
                  uint64_t v103 = v76;
                  __int16 v104 = 2050;
                  uint64_t v105 = *((void *)&v76 + 1);
                  __int16 v106 = 2050;
                  uint64_t v107 = v77;
                  char v53 = (std::string *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRayTracingTileManager::getListOfRayTracingTilesOnDisk()", "%s\n", (const char *)v53);
                  if (v53 != &buf) {
                    free(v53);
                  }
                }
                sub_101152ADC((uint64_t *)&v79, (long long *)v74);
              }
              if (SHIBYTE(v69) < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_116;
            }
          }
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_102314218);
          }
          BOOL v46 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
          {
            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
            _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "RayTracingTileManager,not a RayTracing file", (uint8_t *)&buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1024193A0 == -1) {
              goto LABEL_128;
            }
            goto LABEL_148;
          }
        }
        else
        {
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_102314218);
          }
          int v22 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
          {
            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "RayTracingTileManager,null file", (uint8_t *)&buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1024193A0 == -1)
            {
LABEL_128:
              LOWORD(v108.st_dev) = 0;
              double v49 = (std::string *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRayTracingTileManager::getListOfRayTracingTilesOnDisk()", "%s\n", (const char *)v49);
              if (v49 != &buf) {
                free(v49);
              }
              goto LABEL_116;
            }
LABEL_148:
            dispatch_once(&qword_1024193A0, &stru_102314218);
            goto LABEL_128;
          }
        }
LABEL_116:
        id v9 = (char *)v9 + 1;
      }
      while (v9 != v8);
      id v56 = [(NSEnumerator *)obj countByEnumeratingWithState:&v70 objects:v109 count:16];
      id v8 = v56;
    }
    while (v56);
  }
  closedir(v4);
  sub_101156138(a1 + 17);
  *(_OWORD *)(a1 + 17) = v79;
  a1[19] = v80;
  uint64_t v80 = 0;
  long long v79 = 0uLL;
  if ((v74[23] & 0x80000000) != 0) {
    operator delete(*(void **)v74);
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v79;
  sub_101154E08((void ***)&buf);
  uint64_t v57 = 1;
LABEL_170:
  if ((char)v83 < 0) {
    operator delete(v81);
  }
  return v57;
}

void sub_10114EA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a55 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10114EB0C(uint64_t a1)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_102314218);
  }
  int v2 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 68289026;
    LODWORD(v35[0]) = 0;
    WORD2(v35[0]) = 2082;
    *(void *)((char *)v35 + 6) = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,cleanupRayTracingTiles\"}", buf, 0x12u);
  }
  if (*(void *)(a1 + 144) == *(void *)(a1 + 136))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_102314218);
    }
    BOOL v31 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 68289026;
      LODWORD(v35[0]) = 0;
      WORD2(v35[0]) = 2082;
      *(void *)((char *)v35 + 6) = "";
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,cleanupRayTracingTiles no files\"}", buf, 0x12u);
    }
  }
  else
  {
    double v3 = *(double *)(a1 + 288);
    int v4 = *(unsigned __int8 *)(a1 + 273);
    double Current = CFAbsoluteTimeGetCurrent();
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_102314218);
    }
    uint64_t v6 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 144) - *(void *)(a1 + 136)) >> 5);
      *(_DWORD *)std::string buf = 134349056;
      v35[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLRayTracingTileManager,cleanupRayTracingTiles,%{public}lu", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_102314218);
      }
      size_t v32 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileManager::cleanupRayTracingTiles()", "%s\n", v32);
      if (v32 != (char *)buf) {
        free(v32);
      }
    }
    uint64_t v8 = *(void *)(a1 + 136);
    while (v8 != *(void *)(a1 + 144))
    {
      double v9 = *(double *)(a1 + 280);
      if (v9 >= *(double *)(v8 + 72)) {
        double v9 = *(double *)(v8 + 72);
      }
      if (v4 && *(double *)(v8 + 48) < v3)
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_102314218);
        }
        int v10 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v11 = v8;
          if (*(char *)(v8 + 23) < 0) {
            uint64_t v11 = *(void *)v8;
          }
          *(_DWORD *)std::string buf = 136446210;
          v35[0] = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "CLRayTracingTileManager,cleanupRayTracingTiles,delete Flush,%{public}s", buf, 0xCu);
        }
        uint64_t v12 = sub_10013D1A0(115, 2);
        if (v12)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_102314218);
          }
          id v27 = (char *)_os_log_send_and_compose_impl();
          uint64_t v12 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileManager::cleanupRayTracingTiles()", "%s\n", v27);
          if (v27 != (char *)buf) {
            free(v27);
          }
        }
        if (sub_10114FB6C(v12, v8))
        {
          sub_1011550E0((uint64_t)buf, (long long *)(v8 + 96), *(long long **)(a1 + 144), v8);
          uint64_t v14 = v13;
          for (uint64_t i = *(void *)(a1 + 144); i != v14; i -= 96)
          {
            if (*(char *)(i - 73) < 0) {
              operator delete(*(void **)(i - 96));
            }
          }
LABEL_58:
          *(void *)(a1 + 144) = v14;
          continue;
        }
      }
      else if (v9 + *(double *)(v8 + 56) >= Current)
      {
        if (*(_DWORD *)(v8 + 44) < *(_DWORD *)(v8 + 40))
        {
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_102314218);
          }
          double v21 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v22 = v8;
            if (*(char *)(v8 + 23) < 0) {
              uint64_t v22 = *(void *)v8;
            }
            *(_DWORD *)std::string buf = 136446210;
            v35[0] = v22;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "CLRayTracingTileManager,cleanupRayTracingTiles,delete Iod,%{public}s", buf, 0xCu);
          }
          uint64_t v23 = sub_10013D1A0(115, 2);
          if (v23)
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_102314218);
            }
            uint64_t v28 = (char *)_os_log_send_and_compose_impl();
            uint64_t v23 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileManager::cleanupRayTracingTiles()", "%s\n", v28);
            if (v28 != (char *)buf) {
              free(v28);
            }
          }
          if (sub_10114FB6C(v23, v8))
          {
            sub_1011550E0((uint64_t)buf, (long long *)(v8 + 96), *(long long **)(a1 + 144), v8);
            uint64_t v14 = v24;
            for (uint64_t j = *(void *)(a1 + 144); j != v14; j -= 96)
            {
              if (*(char *)(j - 73) < 0) {
                operator delete(*(void **)(j - 96));
              }
            }
            goto LABEL_58;
          }
        }
      }
      else
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_102314218);
        }
        int v16 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v17 = v8;
          if (*(char *)(v8 + 23) < 0) {
            uint64_t v17 = *(void *)v8;
          }
          *(_DWORD *)std::string buf = 136446210;
          v35[0] = v17;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "CLRayTracingTileManager,cleanupRayTracingTiles,delete ExpAge,%{public}s", buf, 0xCu);
        }
        uint64_t v18 = sub_10013D1A0(115, 2);
        if (v18)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_102314218);
          }
          BOOL v26 = (char *)_os_log_send_and_compose_impl();
          uint64_t v18 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileManager::cleanupRayTracingTiles()", "%s\n", v26);
          if (v26 != (char *)buf) {
            free(v26);
          }
        }
        if (sub_10114FB6C(v18, v8))
        {
          sub_1011550E0((uint64_t)buf, (long long *)(v8 + 96), *(long long **)(a1 + 144), v8);
          uint64_t v14 = v19;
          for (uint64_t k = *(void *)(a1 + 144); k != v14; k -= 96)
          {
            if (*(char *)(k - 73) < 0) {
              operator delete(*(void **)(k - 96));
            }
          }
          goto LABEL_58;
        }
      }
      v8 += 96;
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_102314218);
    }
    int v29 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 144) - *(void *)(a1 + 136)) >> 5);
      *(_DWORD *)std::string buf = 134349056;
      v35[0] = v30;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "CLRayTracingTileManager,cleanupRayTracingTiles,%{public}lu", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_102314218);
      }
      unint64_t v33 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileManager::cleanupRayTracingTiles()", "%s\n", v33);
      if (v33 != (char *)buf) {
        free(v33);
      }
    }
    sub_10114FDB4(a1);
  }
}

uint64_t sub_10114F4F0(uint64_t a1)
{
  *(void *)a1 = off_102314268;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_10114F574(uint64_t a1, const std::string *a2, unint64_t *a3)
{
  __int16 v5 = &qword_102419000;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_102314218);
  }
  uint64_t v6 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 68289026;
    *(_DWORD *)BOOL v47 = 0;
    *(_WORD *)&v47[4] = 2082;
    *(void *)&v47[6] = "";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,getTileIdFromFilePath\"}", buf, 0x12u);
  }
  unint64_t v7 = (char *)HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((char)v7 >= 0) {
    std::string::size_type v8 = (std::string::size_type)a2;
  }
  else {
    std::string::size_type v8 = a2->__r_.__value_.__r.__words[0];
  }
  if (byte_10248B33F >= 0) {
    double v9 = &qword_10248B328;
  }
  else {
    double v9 = (uint64_t *)qword_10248B328;
  }
  if (byte_10248B33F >= 0) {
    int64_t v10 = byte_10248B33F;
  }
  else {
    int64_t v10 = unk_10248B330;
  }
  if (v10)
  {
    if ((char)v7 >= 0) {
      std::string::size_type size = (char *)HIBYTE(a2->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = (char *)a2->__r_.__value_.__l.__size_;
    }
    uint64_t v12 = &size[v8];
    if ((uint64_t)size >= v10)
    {
      int v21 = *(char *)v9;
      uint64_t v22 = (void *)v8;
      do
      {
        uint64_t v23 = &size[-v10];
        if (v23 == (char *)-1) {
          break;
        }
        uint64_t v24 = (char *)memchr(v22, v21, (size_t)(v23 + 1));
        if (!v24) {
          break;
        }
        uint64_t v13 = v24;
        if (!memcmp(v24, v9, v10)) {
          goto LABEL_20;
        }
        uint64_t v22 = v13 + 1;
        std::string::size_type size = (char *)(v12 - (v13 + 1));
      }
      while ((uint64_t)size >= v10);
    }
    uint64_t v13 = v12;
LABEL_20:
    if (v13 == v12) {
      uint64_t v14 = -1;
    }
    else {
      uint64_t v14 = (uint64_t)&v13[-v8];
    }
    __int16 v5 = &qword_102419000;
  }
  else
  {
    uint64_t v14 = 0;
  }
  if (byte_10248B357 >= 0) {
    int v15 = &qword_10248B340;
  }
  else {
    int v15 = (uint64_t *)qword_10248B340;
  }
  if (byte_10248B357 >= 0) {
    int64_t v16 = byte_10248B357;
  }
  else {
    int64_t v16 = unk_10248B348;
  }
  if (v16)
  {
    if ((char)v7 >= 0) {
      uint64_t v17 = v7;
    }
    else {
      uint64_t v17 = (char *)a2->__r_.__value_.__l.__size_;
    }
    uint64_t v18 = &v17[v8];
    if ((uint64_t)v17 >= v16)
    {
      int v25 = *(char *)v15;
      BOOL v26 = (void *)v8;
      do
      {
        id v27 = &v17[-v16];
        if (v27 == (char *)-1) {
          break;
        }
        uint64_t v28 = (char *)memchr(v26, v25, (size_t)(v27 + 1));
        if (!v28) {
          break;
        }
        uint64_t v19 = v28;
        if (!memcmp(v28, v15, v16)) {
          goto LABEL_50;
        }
        BOOL v26 = v19 + 1;
        uint64_t v17 = (char *)(v18 - (v19 + 1));
      }
      while ((uint64_t)v17 >= v16);
      uint64_t v19 = v18;
LABEL_50:
      __int16 v5 = &qword_102419000;
    }
    else
    {
      uint64_t v19 = &v17[v8];
    }
    uint64_t v20 = (uint64_t)&v19[-v8];
    if (v19 == v18) {
      uint64_t v20 = -1;
    }
  }
  else
  {
    uint64_t v20 = 0;
  }
  if (v14 != -1 && v20 != -1)
  {
    std::string::basic_string(&v41, a2, v14 + v10, v20 - (v14 + v10), (std::allocator<char> *)buf);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v41.__r_.__value_.__l.__size_)
      {
        __endptr = 0;
        int v29 = (std::string *)v41.__r_.__value_.__r.__words[0];
        goto LABEL_64;
      }
    }
    else if (*((unsigned char *)&v41.__r_.__value_.__s + 23))
    {
      __endptr = 0;
      int v29 = &v41;
LABEL_64:
      unint64_t v31 = strtoull((const char *)v29, &__endptr, 10);
      if (__endptr)
      {
        *a3 = v31;
        if (v5[116] != -1) {
          dispatch_once(&qword_1024193A0, &stru_102314218);
        }
        size_t v32 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          unint64_t v33 = *a3;
          if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v34 = a2;
          }
          else {
            unint64_t v34 = (const std::string *)a2->__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)std::string buf = 134218242;
          *(void *)BOOL v47 = v33;
          *(_WORD *)&v47[8] = 2080;
          *(void *)&unsigned char v47[10] = v34;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "CLRayTracingTileManager,getTileIdFromFilePath,tileId,%llu,fileName,%s", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (v5[116] != -1) {
            dispatch_once(&qword_1024193A0, &stru_102314218);
          }
          unint64_t v35 = *a3;
          if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v36 = a2;
          }
          else {
            std::string::size_type v36 = (const std::string *)a2->__r_.__value_.__r.__words[0];
          }
          int v42 = 134218242;
          unint64_t v43 = v35;
          __int16 v44 = 2080;
          double v45 = v36;
          char v37 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileManager::getTileIdFromFilePath(const std::string &, uint64_t &)", "%s\n", v37);
          if (v37 != (char *)buf) {
            free(v37);
          }
        }
        goto LABEL_89;
      }
      if (v5[116] != -1) {
        dispatch_once(&qword_1024193A0, &stru_102314218);
      }
      long long v38 = qword_1024193A8;
      if (!os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_89;
      }
      *(_DWORD *)std::string buf = 68289026;
      *(_DWORD *)BOOL v47 = 0;
      *(_WORD *)&v47[4] = 2082;
      *(void *)&v47[6] = "";
      uint64_t v39 = "{\"msg%{public}.0s\":\"CLRayTracingTileManager,getTileIdFromFilePath,strtoull error\"}";
LABEL_88:
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, v39, buf, 0x12u);
LABEL_89:
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v41.__r_.__value_.__l.__data_);
      }
      return;
    }
    if (v5[116] != -1) {
      dispatch_once(&qword_1024193A0, &stru_102314218);
    }
    long long v38 = qword_1024193A8;
    if (!os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_89;
    }
    *(_DWORD *)std::string buf = 68289026;
    *(_DWORD *)BOOL v47 = 0;
    *(_WORD *)&v47[4] = 2082;
    *(void *)&v47[6] = "";
    uint64_t v39 = "{\"msg%{public}.0s\":\"CLRayTracingTileManager,getTileIdFromFilePath,invalid Filename sub-string\"}";
    goto LABEL_88;
  }
  if (v5[116] != -1) {
    dispatch_once(&qword_1024193A0, &stru_102314218);
  }
  unint64_t v30 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 68289026;
    *(_DWORD *)BOOL v47 = 0;
    *(_WORD *)&v47[4] = 2082;
    *(void *)&v47[6] = "";
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,getTileIdFromFilePath,invalid Filename\"}", buf, 0x12u);
  }
}

void sub_10114FB44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10114FB6C(uint64_t a1, uint64_t a2)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_102314218);
  }
  double v3 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,deleteRayTracingFile\"}", buf, 0x12u);
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (v4)
  {
    __int16 v5 = (char *)sub_1000A6958();
    sub_1000A5670(v5, (uint64_t)&v15);
    int v6 = *(char *)(a2 + 23);
    if (v6 >= 0) {
      unint64_t v7 = (const std::string::value_type *)a2;
    }
    else {
      unint64_t v7 = *(const std::string::value_type **)a2;
    }
    if (v6 >= 0) {
      std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v8 = *(void *)(a2 + 8);
    }
    double v9 = std::string::append(&v15, v7, v8);
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    *(void *)&uint8_t buf[16] = *((void *)&v9->__r_.__value_.__l + 2);
    *(_OWORD *)std::string buf = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    if (buf[23] >= 0) {
      uint64_t v11 = buf;
    }
    else {
      uint64_t v11 = *(const char **)buf;
    }
    BOOL v12 = !sub_1004BB38C(v11);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_102314218);
    }
    uint64_t v13 = qword_1024193A8;
    BOOL v12 = 0;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,deleteRayTracingFileOrFiles no files\"}", buf, 0x12u);
      return 0;
    }
  }
  return v12;
}

void sub_10114FD7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10114FDB4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 136);
  uint64_t v3 = *(void *)(a1 + 144);
  if (v2 == v3)
  {
    uint64_t v4 = 0;
  }
  else
  {
    LODWORD(v4) = 0;
    do
    {
      uint64_t v4 = (*(_DWORD *)(v2 + 32) + v4);
      v2 += 96;
    }
    while (v2 != v3);
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_102314218);
  }
  __int16 v5 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 144) - *(void *)(a1 + 136)) >> 5);
    *(_DWORD *)std::string buf = 67240448;
    int v10 = v4;
    __int16 v11 = 2050;
    unint64_t v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "RayTracingTileManager,getTotalSizeOfAllRayTracingTilesOnDisk,%{public}u,numberOfFileOnDisk,%{public}zu", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_102314218);
    }
    std::string::size_type v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "uint32_t CLRayTracingTileManager::getTotalSizeOfAllRayTracingTilesOnDisk()", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  return v4;
}

void sub_10114FFD8()
{
}

void sub_101150024()
{
}

void sub_101150048(uint64_t a1)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_102314218);
  }
  uint64_t v2 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289026;
    v5[1] = 0;
    __int16 v6 = 2082;
    unint64_t v7 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,shutdown\"}", (uint8_t *)v5, 0x12u);
  }
  uint64_t v3 = *(void *)(a1 + 120);
  if (v3) {
    sub_100777198(v3);
  }
  uint64_t v4 = *(void *)(a1 + 368);
  if (v4)
  {
    [*(id *)(v4 + 16) unregister:*(void *)(v4 + 8) forNotification:6];
    [*(id *)(*(void *)(a1 + 368) + 16) unregister:*(void *)(*(void *)(a1 + 368) + 8) forNotification:8];
  }
}

uint64_t sub_101150154(uint64_t a1)
{
  *(void *)a1 = off_1023140A0;
  sub_101150048(a1);
  uint64_t v2 = *(void *)(a1 + 376);
  *(void *)(a1 + 376) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 368);
  *(void *)(a1 + 368) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_101154EAC((uint64_t *)(a1 + 360), 0);
  __int16 v6 = (void **)(a1 + 136);
  sub_101154E08(&v6);
  uint64_t v4 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = 0;
  if (v4) {
    operator delete();
  }
  sub_101154CF4((uint64_t *)(a1 + 120), 0);
  return sub_10114F4F0(a1);
}

void sub_101150250(uint64_t a1)
{
  sub_101150154(a1);

  operator delete();
}

void sub_101150288(uint64_t a1, void *a2, int a3, int a4)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_102314218);
  }
  std::string::size_type v8 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
    uint64_t v10 = *(void *)(a1 + 336);
    uint64_t v11 = *(void *)(a1 + 344);
    int v12 = *(_DWORD *)(a1 + 352);
    *(_DWORD *)std::string buf = 68290563;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2050;
    *(void *)std::string __p = v9;
    *(_WORD *)&__p[8] = 1026;
    *(_DWORD *)&__p[10] = a3;
    *(_WORD *)&__p[14] = 1026;
    *(_DWORD *)&__p[16] = a4 ^ 1;
    LOWORD(v18[0]) = 2049;
    *(void *)((char *)v18 + 2) = v10;
    WORD5(v18[0]) = 2049;
    *(void *)((char *)v18 + 12) = v11;
    WORD2(v18[1]) = 1026;
    *(_DWORD *)((char *)&v18[1] + 6) = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,kNotificationTilesProvided\", \"numberOfTileFiles\":%{public}ld, \"responseCode\":%{public}d, \"requestComplete\":%{public}hhd, \"requestLat\":\"%{private}f\", \"requestLon\":\"%{private}f\", \"numTilesRequested\":%{public}d}", buf, 0x42u);
  }
  memset(buf, 0, sizeof(buf));
  __p[0] = 2;
  *(_OWORD *)&__p[4] = 0u;
  memset(v18, 0, sizeof(v18));
  char v19 = 1;
  if (*a2 != a2[1])
  {
    sub_100314FE8((uint64_t *)v18 + 1);
    *(_OWORD *)((char *)v18 + 8) = *(_OWORD *)a2;
    *((void *)&v18[1] + 1) = a2[2];
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
  }
  uint64_t v13 = (char *)sub_1000A6958();
  sub_1000A5670(v13, (uint64_t)&v14);
  if (SBYTE7(v18[0]) < 0) {
    operator delete(*(void **)&__p[4]);
  }
  *(_OWORD *)&__p[4] = v14;
  *(void *)&v18[0] = v15;
  __p[0] = a3;
  char v19 = a4 ^ 1;
  *(_OWORD *)std::string buf = *(_OWORD *)(a1 + 336);
  *(_DWORD *)&uint8_t buf[16] = *(_DWORD *)(a1 + 352);
  if ((a4 & 1) == 0) {
    *(unsigned char *)(a1 + 356) = 0;
  }
  LODWORD(v14) = 0;
  (*(void (**)(uint64_t, long long *, uint8_t *, void, uint64_t, void))(*(void *)a1 + 152))(a1, &v14, buf, 0, 0xFFFFFFFFLL, 0);
  *(void *)&long long v14 = (char *)v18 + 8;
  sub_1000A7B4C((void ***)&v14);
  if (SBYTE7(v18[0]) < 0) {
    operator delete(*(void **)&__p[4]);
  }
}

void sub_1011504F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_101150508((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101150508(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 48);
  sub_1000A7B4C(&v3);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void sub_101150554(uint64_t a1, int a2, double a3, double a4)
{
  double v29 = a4;
  double v30 = a3;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_102314218);
  }
  std::string::size_type v8 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 68289795;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)size_t v32 = 2082;
    *(void *)&v32[2] = "";
    *(_WORD *)&v32[10] = 2049;
    *(double *)&v32[12] = a3;
    __int16 v33 = 2049;
    double v34 = a4;
    __int16 v35 = 1026;
    int v36 = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,getOnDemandTiles\", \"lat\":\"%{private}f\", \"lon\":\"%{private}f\", \"tileBoundarySizeAroundCurrentTile\":%{public}d}", buf, 0x2Cu);
  }
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  if (*(unsigned char *)(a1 + 356))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_102314218);
    }
    unint64_t v9 = qword_1024193A8;
    int v10 = 1;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)size_t v32 = 2082;
      *(void *)&v32[2] = "";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,getTiles,request already in progress\"}", buf, 0x12u);
    }
LABEL_16:
    sub_101150288(a1, &v26, v10, 0);
    goto LABEL_17;
  }
  double v11 = v29;
  *(double *)(a1 + 336) = v30;
  *(double *)(a1 + 344) = v11;
  *(_DWORD *)(a1 + 352) = a2;
  if ((a2 - 4) <= 0xFFFFFFFC)
  {
    *(_DWORD *)(a1 + 352) = 0;
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_102314218);
    }
    int v12 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)size_t v32 = 2082;
      *(void *)&v32[2] = "";
      *(_WORD *)&v32[10] = 1026;
      *(_DWORD *)&v32[12] = a2;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,getTiles,invalid number of tiles requested\", \"tileBoundarySizeAroundCurrentTile\":%{public}d}", buf, 0x18u);
    }
    int v10 = 2;
    goto LABEL_16;
  }
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v22 = 0;
  uint64_t v13 = *(void *)(a1 + 360);
  *(_DWORD *)std::string buf = a2;
  BOOL v14 = sub_100A760DC(v13, &v30, &v29, (unsigned int *)buf, &v22, (char *)&v23);
  if (v23 != v24 && v14)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_102314218);
    }
    int64_t v16 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)size_t v32 = 2082;
      *(void *)&v32[2] = "";
      *(_WORD *)&v32[10] = 2050;
      *(void *)&v32[12] = (v24 - (unsigned char *)v23) >> 4;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,isRayTracingTileAvailable success\", \"AvailabilityMgrTileListSize\":%{public}ld}", buf, 0x1Cu);
    }
    *(void *)std::string buf = 0;
    *(void *)size_t v32 = 0;
    *(void *)&v32[8] = 0;
    sub_101150A7C(a1, (uint64_t *)&v23, &v26, (uint64_t *)buf, v22);
    *(unsigned char *)(a1 + 356) = 1;
    sub_100A76DE4(*(char **)(a1 + 360), (uint64_t)__p);
    if (v26 == v27)
    {
      BOOL v18 = 0;
    }
    else
    {
      unint64_t v17 = v21;
      if ((v21 & 0x80u) != 0) {
        unint64_t v17 = (unint64_t)__p[1];
      }
      BOOL v18 = v17 != 0;
    }
    if (*(void *)buf != *(void *)v32) {
      sub_101150288(a1, buf, 0, v18);
    }
    if (v18) {
      sub_100776DEC(*(void *)(a1 + 120), (uint64_t)&v26, (long long *)__p);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
    __p[0] = buf;
    sub_1000A7B4C((void ***)__p);
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_102314218);
    }
    char v19 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)size_t v32 = 2082;
      *(void *)&v32[2] = "";
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,getTiles,no tiles according to availability file\"}", buf, 0x12u);
    }
    sub_101150288(a1, &v26, 2, 0);
  }
  if (v23)
  {
    uint64_t v24 = v23;
    operator delete(v23);
  }
LABEL_17:
  *(void *)std::string buf = &v26;
  sub_1000A7B4C((void ***)buf);
}

void sub_101150A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char *a24)
{
  if (__p) {
    operator delete(__p);
  }
  a24 = &a19;
  sub_1000A7B4C((void ***)&a24);
  _Unwind_Resume(a1);
}

void sub_101150A7C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (v7 == *a2)
  {
    sub_1000A7BA0(a3);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_102314218);
    }
    double v51 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      v67.st_dev = 68289026;
      *(_DWORD *)&v67.st_mode = 0;
      LOWORD(v67.st_ino) = 2082;
      *(__darwin_ino64_t *)((char *)&v67.st_ino + 2) = (__darwin_ino64_t)"";
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,tilesToDownload,no new tiles to download\"}", (uint8_t *)&v67, 0x12u);
    }
  }
  else
  {
    std::string __p = 0;
    char v10 = 0;
    memset(v66, 0, 11);
    uint64_t v58 = (uint64_t)(a4 + 2);
    uint64_t v59 = (uint64_t)(a3 + 2);
    std::string::size_type v60 = 0;
    do
    {
      sub_100134750(&v65, "rt_tile_");
      std::to_string((std::string *)&v68, *(void *)v6);
      if (v69[15] >= 0) {
        double v11 = (const std::string::value_type *)&v68;
      }
      else {
        double v11 = (const std::string::value_type *)v68;
      }
      if (v69[15] >= 0) {
        std::string::size_type v12 = v69[15];
      }
      else {
        std::string::size_type v12 = *(void *)v69;
      }
      std::string::append(&v65, v11, v12);
      if ((v69[15] & 0x80000000) != 0) {
        operator delete((void *)v68);
      }
      std::string::append(&v65, ".bin");
      uint64_t v13 = (char *)sub_1000A6958();
      sub_1000A5670(v13, (uint64_t)&v68);
      if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        BOOL v14 = &v65;
      }
      else {
        BOOL v14 = (std::string *)v65.__r_.__value_.__r.__words[0];
      }
      if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v65.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v65.__r_.__value_.__l.__size_;
      }
      int64_t v16 = std::string::append((std::string *)&v68, (const std::string::value_type *)v14, size);
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      int64_t v64 = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)float64x2_t v63 = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      if ((v69[15] & 0x80000000) != 0) {
        operator delete((void *)v68);
      }
      if (v64 >= 0) {
        BOOL v18 = v63;
      }
      else {
        BOOL v18 = (void **)v63[0];
      }
      if (stat((const char *)v18, &v67) != -1
        && sub_1004DDA90(*(void *)(a1 + 128), (uint64_t)v63, v66)
        && v66[0] == *(_DWORD *)(v6 + 8))
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_102314218);
        }
        char v19 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          if (v64 >= 0) {
            uint64_t v20 = v63;
          }
          else {
            uint64_t v20 = (void **)v63[0];
          }
          int v21 = *(_DWORD *)(v6 + 8);
          uint64_t v68 = 68289794;
          *(_WORD *)int64_t v69 = 2082;
          *(void *)&v69[2] = "";
          *(_WORD *)&v69[10] = 2082;
          *(void *)&v69[12] = v20;
          *(_WORD *)&v69[20] = 1026;
          *(_DWORD *)&v69[22] = v66[0];
          *(_WORD *)&v69[26] = 1026;
          *(_DWORD *)&v69[28] = v21;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,tilesToDownload,no need to download\", \"alreadyExistingTile\":%{public, location:escape_only}s, \"tileIod\":%{public}u, \"fTile_content_iod_number\":%{public}u}", (uint8_t *)&v68, 0x28u);
        }
        unint64_t v22 = a4[1];
        unint64_t v23 = a4[2];
        if (v22 >= v23)
        {
          unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a4) >> 3);
          unint64_t v41 = v40 + 1;
          if (v40 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_98:
          }
            sub_1001D7FD4();
          unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a4) >> 3);
          if (2 * v42 > v41) {
            unint64_t v41 = 2 * v42;
          }
          if (v42 >= 0x555555555555555) {
            unint64_t v43 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v43 = v41;
          }
          *(void *)&v69[24] = v58;
          if (v43) {
            __int16 v44 = (char *)sub_1000DA5D8(v58, v43);
          }
          else {
            __int16 v44 = 0;
          }
          double v45 = &v44[24 * v40];
          uint64_t v68 = (uint64_t)v44;
          *(void *)int64_t v69 = v45;
          *(void *)&v69[16] = &v44[24 * v43];
          long long v46 = *(_OWORD *)&v65.__r_.__value_.__l.__data_;
          *((void *)v45 + 2) = *((void *)&v65.__r_.__value_.__l + 2);
          *(_OWORD *)double v45 = v46;
          memset(&v65, 0, sizeof(v65));
          *(void *)&v69[8] = v45 + 24;
          sub_1001D7FEC(a4, &v68);
          uint64_t v25 = a4[1];
          sub_1001D8184((uint64_t)&v68);
        }
        else
        {
          long long v24 = *(_OWORD *)&v65.__r_.__value_.__l.__data_;
          *(void *)(v22 + 16) = *((void *)&v65.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v22 = v24;
          memset(&v65, 0, sizeof(v65));
          uint64_t v25 = v22 + 24;
          a4[1] = v22 + 24;
        }
        a4[1] = v25;
      }
      else
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_102314218);
        }
        uint64_t v26 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          if (v64 >= 0) {
            uint64_t v27 = v63;
          }
          else {
            uint64_t v27 = (void **)v63[0];
          }
          int v28 = *(_DWORD *)(v6 + 8);
          uint64_t v68 = 68289794;
          *(_WORD *)int64_t v69 = 2082;
          *(void *)&v69[2] = "";
          *(_WORD *)&v69[10] = 2082;
          *(void *)&v69[12] = v27;
          *(_WORD *)&v69[20] = 1026;
          *(_DWORD *)&v69[22] = v66[0];
          *(_WORD *)&v69[26] = 1026;
          *(_DWORD *)&v69[28] = v28;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,tilesToDownload\", \"tileToDownload\":%{public, location:escape_only}s, \"tileIod\":%{public}u, \"fTile_content_iod_number\":%{public}u}", (uint8_t *)&v68, 0x28u);
        }
        if (v66[0] == a5)
        {
          if (v10 < 0) {
            operator delete(__p);
          }
          std::string::size_type v60 = v65.__r_.__value_.__l.__size_;
          std::string __p = (void *)v65.__r_.__value_.__r.__words[0];
          v66[1] = v65.__r_.__value_.__r.__words[2];
          *(_DWORD *)((char *)&v66[1] + 3) = *(_DWORD *)((char *)&v65.__r_.__value_.__r.__words[2] + 3);
          char v10 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
          *((unsigned char *)&v65.__r_.__value_.__s + 23) = 0;
          v65.__r_.__value_.__s.__data_[0] = 0;
        }
        else
        {
          unint64_t v29 = a3[1];
          unint64_t v30 = a3[2];
          if (v29 >= v30)
          {
            unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - *a3) >> 3);
            unint64_t v34 = v33 + 1;
            if (v33 + 1 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_98;
            }
            unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - *a3) >> 3);
            if (2 * v35 > v34) {
              unint64_t v34 = 2 * v35;
            }
            if (v35 >= 0x555555555555555) {
              unint64_t v36 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v36 = v34;
            }
            *(void *)&v69[24] = v59;
            if (v36) {
              char v37 = (char *)sub_1000DA5D8(v59, v36);
            }
            else {
              char v37 = 0;
            }
            long long v38 = &v37[24 * v33];
            uint64_t v68 = (uint64_t)v37;
            *(void *)int64_t v69 = v38;
            *(void *)&v69[16] = &v37[24 * v36];
            long long v39 = *(_OWORD *)&v65.__r_.__value_.__l.__data_;
            *((void *)v38 + 2) = *((void *)&v65.__r_.__value_.__l + 2);
            *(_OWORD *)long long v38 = v39;
            memset(&v65, 0, sizeof(v65));
            *(void *)&v69[8] = v38 + 24;
            sub_1001D7FEC(a3, &v68);
            uint64_t v32 = a3[1];
            sub_1001D8184((uint64_t)&v68);
          }
          else
          {
            long long v31 = *(_OWORD *)&v65.__r_.__value_.__l.__data_;
            *(void *)(v29 + 16) = *((void *)&v65.__r_.__value_.__l + 2);
            *(_OWORD *)unint64_t v29 = v31;
            memset(&v65, 0, sizeof(v65));
            uint64_t v32 = v29 + 24;
            a3[1] = v29 + 24;
          }
          a3[1] = v32;
        }
      }
      if (SHIBYTE(v64) < 0) {
        operator delete(v63[0]);
      }
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__r_.__value_.__l.__data_);
      }
      v6 += 16;
    }
    while (v6 != v7);
    if (v10 >= 0) {
      std::string::size_type v47 = v10;
    }
    else {
      std::string::size_type v47 = v60;
    }
    if (v47)
    {
      unint64_t v48 = a3[1];
      unint64_t v49 = a3[2];
      if (v48 >= v49)
      {
        unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - *a3) >> 3);
        unint64_t v53 = v52 + 1;
        if (v52 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_1001D7FD4();
        }
        unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - *a3) >> 3);
        if (2 * v54 > v53) {
          unint64_t v53 = 2 * v54;
        }
        if (v54 >= 0x555555555555555) {
          unint64_t v55 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v55 = v53;
        }
        *(void *)&v69[24] = v59;
        if (v55) {
          id v56 = (char *)sub_1000DA5D8(v59, v55);
        }
        else {
          id v56 = 0;
        }
        uint64_t v57 = &v56[24 * v52];
        uint64_t v68 = (uint64_t)v56;
        *(void *)int64_t v69 = v57;
        *(void *)&v69[16] = &v56[24 * v55];
        *(void *)uint64_t v57 = __p;
        *((void *)v57 + 1) = v60;
        *((_DWORD *)v57 + 4) = v66[1];
        *(_DWORD *)(v57 + 19) = *(_DWORD *)((char *)&v66[1] + 3);
        v57[23] = v10;
        *(void *)&v69[8] = v57 + 24;
        sub_1001D7FEC(a3, &v68);
        uint64_t v50 = a3[1];
        sub_1001D8184((uint64_t)&v68);
      }
      else
      {
        *(void *)unint64_t v48 = __p;
        *(void *)(v48 + 8) = v60;
        *(_DWORD *)(v48 + 16) = v66[1];
        *(_DWORD *)(v48 + 19) = *(_DWORD *)((char *)&v66[1] + 3);
        *(unsigned char *)(v48 + 23) = v10;
        uint64_t v50 = v48 + 24;
        a3[1] = v48 + 24;
      }
      a3[1] = v50;
    }
    else if (v10 < 0)
    {
      operator delete(__p);
    }
  }
}

void sub_1011511C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  sub_1001D8184(v28 - 144);
  _Unwind_Resume(a1);
}

void sub_10115125C(uint64_t a1)
{
}

void sub_101151270(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  if (*a3 == 8)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_102314218);
    }
    double v11 = qword_1024193A8;
    BOOL v12 = os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT);
    char v10 = 0;
    char v9 = 0;
    if (v12)
    {
      int v13 = *(unsigned __int8 *)a4;
      int v16 = 68289282;
      int v17 = 0;
      __int16 v18 = 2082;
      char v19 = "";
      __int16 v20 = 1026;
      int v21 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,kNotificationAirplaneMode\", \"airplaneMode\":%{public}hhd}", (uint8_t *)&v16, 0x18u);
      char v10 = 0;
      char v9 = 0;
    }
    goto LABEL_12;
  }
  if (*a3 == 6)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_102314218);
    }
    uint64_t v6 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *a4;
      int v7 = a4[1];
      int v16 = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      char v19 = "";
      __int16 v20 = 1026;
      int v21 = v7;
      __int16 v22 = 1026;
      int v23 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,kNotificationReachability\", \"currentReachability\":%{public}d, \"previousReachability\":%{public}d}", (uint8_t *)&v16, 0x1Eu);
    }
    char v9 = a4[1] == 1;
    char v10 = (a4[1] - 1) < 2;
LABEL_12:
    uint64_t v14 = *(void *)(a1 + 120);
    if (v14) {
      sub_100776CDC(v14, v10, v9);
    }
    return;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_102314218);
  }
  uint64_t v15 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = 68289026;
    int v17 = 0;
    __int16 v18 = 2082;
    char v19 = "";
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileManager,unexpected Daemon notification\"}", (uint8_t *)&v16, 0x12u);
  }
}

void sub_1011514DC(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (*a3 == 2)
  {
    sub_1000E9354(v86);
    if (sub_100012960(a4, "RayTracingConfigurations_v1", v86))
    {
      uint64_t v85 = (uint64_t *)(a1 + 280);
      if ((sub_1000A699C((uint64_t)v86, "RayTracingAvlExpirationAge", (void *)(a1 + 280)) & 1) == 0)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102314238);
        }
        uint64_t v6 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "RayTracingTileManager,#Warning,MA-OTA,file exp age config read error", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102314238);
          }
          LOWORD(v87) = 0;
          long long v71 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v71);
          if (v71 != (char *)buf) {
            free(v71);
          }
        }
        *uint64_t v85 = 0x415BAF8000000000;
      }
      int v84 = (unsigned char *)(a1 + 272);
      if ((sub_1000D2988((uint64_t)v86, "RayTracingTileManagerEnable", (BOOL *)(a1 + 272)) & 1) == 0)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102314238);
        }
        int v7 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "RayTracingTileManager,#Warning,MA-OTA,RayTracing feature state config read error", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102314238);
          }
          LOWORD(v87) = 0;
          long long v72 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v72);
          if (v72 != (char *)buf) {
            free(v72);
          }
        }
      }
      unsigned __int8 v83 = (unsigned char *)(a1 + 274);
      if ((sub_1000D2988((uint64_t)v86, "RayTracingPreCacheingEnabled", (BOOL *)(a1 + 274)) & 1) == 0)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102314238);
        }
        int v8 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "RayTracingTileManager,#Warning,MA-OTA,RayTracing pre-Cacheing read error", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102314238);
          }
          LOWORD(v87) = 0;
          long long v73 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v73);
          if (v73 != (char *)buf) {
            free(v73);
          }
        }
      }
      size_t v82 = (unsigned char *)(a1 + 273);
      if ((sub_1000D2988((uint64_t)v86, "RayTracingFlushRTData", (BOOL *)(a1 + 273)) & 1) == 0)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102314238);
        }
        char v9 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "RayTracingTileManager,#Warning,MA-OTA,RayTracing flush read error", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102314238);
          }
          LOWORD(v87) = 0;
          uint64_t v74 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v74);
          if (v74 != (char *)buf) {
            free(v74);
          }
        }
      }
      uint64_t v81 = (uint64_t *)(a1 + 288);
      if ((sub_1000A699C((uint64_t)v86, "RayTracingFlushRTDataBeforeTime", (void *)(a1 + 288)) & 1) == 0)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102314238);
        }
        char v10 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "RayTracingTileManager,#Warning,MA-OTA,flush time read error", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102314238);
          }
          LOWORD(v87) = 0;
          long long v75 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v75);
          if (v75 != (char *)buf) {
            free(v75);
          }
        }
      }
      double v11 = (uint64_t *)(a1 + 296);
      if ((sub_1000A699C((uint64_t)v86, "RayTracingAvlDownloadRateOnWifi", (void *)(a1 + 296)) & 1) == 0)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102314238);
        }
        BOOL v12 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "RayTracingTileManager,#Warning,MA-OTA,wifi download rate read error", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102314238);
          }
          LOWORD(v87) = 0;
          long long v76 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v76);
          if (v76 != (char *)buf) {
            free(v76);
          }
        }
      }
      int v13 = (uint64_t *)(a1 + 304);
      if ((sub_1000A699C((uint64_t)v86, "RayTracingAvlDownloadRateOnCell", (void *)(a1 + 304)) & 1) == 0)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102314238);
        }
        uint64_t v14 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "RayTracingTileManager,#Warning,MA-OTA,cell download rate read error", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102314238);
          }
          LOWORD(v87) = 0;
          long long v77 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v77);
          if (v77 != (char *)buf) {
            free(v77);
          }
        }
      }
      uint64_t v15 = (int *)(a1 + 328);
      if ((sub_1004D0870((uint64_t)v86, "RayTracingTrialDownloadMaxRetrialAllowed", (_DWORD *)(a1 + 328)) & 1) == 0)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102314238);
        }
        int v16 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "RayTracingTileManager,#Warning,MA-OTA,retrial read error", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102314238);
          }
          LOWORD(v87) = 0;
          long long v78 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v78);
          if (v78 != (char *)buf) {
            free(v78);
          }
        }
      }
      int v17 = (uint64_t *)(a1 + 320);
      if ((sub_1000A699C((uint64_t)v86, "RayTracingTileGridSize", (void *)(a1 + 320)) & 1) == 0)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102314238);
        }
        __int16 v18 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "RayTracingTileManager,#Warning,MA-OTA,grid size read error", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102314238);
          }
          LOWORD(v87) = 0;
          long long v79 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v79);
          if (v79 != (char *)buf) {
            free(v79);
          }
        }
      }
      char v19 = (uint64_t *)(a1 + 312);
      if ((sub_1000A699C((uint64_t)v86, "RayTracingStorageLimit", (void *)(a1 + 312)) & 1) == 0)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102314238);
        }
        __int16 v20 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "RayTracingTileManager,#Warning,MA-OTA,storage limit read error", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102314238);
          }
          LOWORD(v87) = 0;
          uint64_t v80 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v80);
          if (v80 != (char *)buf) {
            free(v80);
          }
        }
      }
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102314238);
      }
      int v21 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
      {
        uint64_t v22 = *v85;
        int v23 = "Yes";
        if (*v84) {
          long long v24 = "Yes";
        }
        else {
          long long v24 = "No";
        }
        if (*v83) {
          uint64_t v25 = "Yes";
        }
        else {
          uint64_t v25 = "No";
        }
        uint64_t v26 = *v81;
        if (!*v82) {
          int v23 = "No";
        }
        uint64_t v27 = *v11;
        uint64_t v28 = *v13;
        uint64_t v29 = *v19;
        uint64_t v30 = *v17;
        int v31 = *v15;
        *(_DWORD *)std::string buf = 134351362;
        uint64_t v108 = v22;
        __int16 v109 = 2082;
        uint64_t v110 = v24;
        __int16 v111 = 2082;
        __int16 v112 = v25;
        __int16 v113 = 2082;
        __int16 v114 = v23;
        __int16 v115 = 2050;
        uint64_t v116 = v26;
        __int16 v117 = 2050;
        uint64_t v118 = v27;
        __int16 v119 = 2050;
        uint64_t v120 = v28;
        __int16 v121 = 2050;
        uint64_t v122 = v29;
        __int16 v123 = 2050;
        uint64_t v124 = v30;
        __int16 v125 = 1026;
        int v126 = v31;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "RayTracingTileManager,MA-OTA,AvlFileExpAge,%{public}.3lf,featureEnable,%{public}s,flush,%{public}s,pre-Cacheing,%{public}s,flushTime,%{public}.3lf,WifiDownloadrate,%{public}.3lf,CellDownloadrate,%{public}.3lf,sotrageLimit,%{public}.3lf,gridSize,%{public}.3lf,retrial,%{public}d", buf, 0x62u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102314238);
        }
        uint64_t v60 = *v85;
        unint64_t v61 = "Yes";
        if (*v84) {
          double v62 = "Yes";
        }
        else {
          double v62 = "No";
        }
        if (*v83) {
          float64x2_t v63 = "Yes";
        }
        else {
          float64x2_t v63 = "No";
        }
        if (!*v82) {
          unint64_t v61 = "No";
        }
        uint64_t v64 = *v81;
        uint64_t v65 = *v11;
        uint64_t v66 = *v13;
        uint64_t v67 = *v19;
        uint64_t v68 = *v17;
        int v69 = *v15;
        int v87 = 134351362;
        uint64_t v88 = v60;
        __int16 v89 = 2082;
        __int16 v90 = v62;
        __int16 v91 = 2082;
        __int16 v92 = v63;
        __int16 v93 = 2082;
        __int16 v94 = v61;
        __int16 v95 = 2050;
        uint64_t v96 = v64;
        __int16 v97 = 2050;
        uint64_t v98 = v65;
        __int16 v99 = 2050;
        uint64_t v100 = v66;
        __int16 v101 = 2050;
        uint64_t v102 = v67;
        __int16 v103 = 2050;
        uint64_t v104 = v68;
        __int16 v105 = 1026;
        int v106 = v69;
        long long v70 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v70);
        if (v70 != (char *)buf) {
          free(v70);
        }
      }
      sub_10114D760(a1);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102314238);
      }
      uint64_t v32 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v33 = *v85;
        unint64_t v34 = "Yes";
        if (*v84) {
          unint64_t v35 = "Yes";
        }
        else {
          unint64_t v35 = "No";
        }
        if (*v83) {
          unint64_t v36 = "Yes";
        }
        else {
          unint64_t v36 = "No";
        }
        uint64_t v37 = *v81;
        if (!*v82) {
          unint64_t v34 = "No";
        }
        uint64_t v38 = *v11;
        uint64_t v39 = *v13;
        uint64_t v40 = *v19;
        uint64_t v41 = *v17;
        int v42 = *v15;
        *(_DWORD *)std::string buf = 134351362;
        uint64_t v108 = v33;
        __int16 v109 = 2082;
        uint64_t v110 = v35;
        __int16 v111 = 2082;
        __int16 v112 = v36;
        __int16 v113 = 2082;
        __int16 v114 = v34;
        __int16 v115 = 2050;
        uint64_t v116 = v37;
        __int16 v117 = 2050;
        uint64_t v118 = v38;
        __int16 v119 = 2050;
        uint64_t v120 = v39;
        __int16 v121 = 2050;
        uint64_t v122 = v40;
        __int16 v123 = 2050;
        uint64_t v124 = v41;
        __int16 v125 = 1026;
        int v126 = v42;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "RayTracingTileManager,final,AvlFileExpAge,%{public}.3lf,featureEnable,%{public}s,flush,%{public}s,pre-Cacheing,%{public}s,flushTime,%{public}.3lf,WifiDownloadrate,%{public}.3lf,CellDownloadrate,%{public}.3lf,sotrageLimit,%{public}.3lf,gridSize,%{public}.3lf,retrial,%{public}d", buf, 0x62u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_115;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102314238);
      }
      uint64_t v43 = *v85;
      __int16 v44 = "Yes";
      if (*v84) {
        double v45 = "Yes";
      }
      else {
        double v45 = "No";
      }
      if (*v83) {
        long long v46 = "Yes";
      }
      else {
        long long v46 = "No";
      }
      if (!*v82) {
        __int16 v44 = "No";
      }
      uint64_t v47 = *v81;
      uint64_t v48 = *v11;
      uint64_t v49 = *v13;
      uint64_t v50 = *v19;
      uint64_t v51 = *v17;
      int v52 = *v15;
      int v87 = 134351362;
      uint64_t v88 = v43;
      __int16 v89 = 2082;
      __int16 v90 = v45;
      __int16 v91 = 2082;
      __int16 v92 = v46;
      __int16 v93 = 2082;
      __int16 v94 = v44;
      __int16 v95 = 2050;
      uint64_t v96 = v47;
      __int16 v97 = 2050;
      uint64_t v98 = v48;
      __int16 v99 = 2050;
      uint64_t v100 = v49;
      __int16 v101 = 2050;
      uint64_t v102 = v50;
      __int16 v103 = 2050;
      uint64_t v104 = v51;
      __int16 v105 = 1026;
      int v106 = v52;
      unint64_t v53 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v53);
    }
    else
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102314238);
      }
      uint64_t v59 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_INFO, "RayTracingTileManager,#Warning,MA-OTA,RayTracing Config not available", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_115;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102314238);
      }
      LOWORD(v87) = 0;
      unint64_t v53 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v53);
    }
    if (v53 != (char *)buf) {
      free(v53);
    }
LABEL_115:
    sub_10013F3C4(v86);
    return;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102314238);
  }
  unint64_t v55 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    int v56 = *a3;
    *(_DWORD *)std::string buf = 67240192;
    LODWORD(v108) = v56;
    _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_INFO, "RayTracingTileManager,#Warning,Invalid notification,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102314238);
    }
    int v57 = *a3;
    int v87 = 67240192;
    LODWORD(v88) = v57;
    uint64_t v58 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRayTracingTileManager::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v58);
    if (v58 != (char *)buf) {
      free(v58);
    }
  }
}

void sub_101152A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_101152ADC(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 5);
    unint64_t v14 = v13 + 1;
    if (v13 + 1 > 0x2AAAAAAAAAAAAAALL) {
      sub_1001D7FD4();
    }
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 5);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x155555555555555) {
      unint64_t v16 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v16 = v14;
    }
    void v23[4] = result;
    if (v16) {
      int v17 = (char *)sub_100642EA8(result, v16);
    }
    else {
      int v17 = 0;
    }
    __int16 v18 = &v17[96 * v13];
    v23[0] = v17;
    v23[1] = v18;
    v23[3] = &v17[96 * v16];
    long long v19 = *a2;
    *((void *)v18 + 2) = *((void *)a2 + 2);
    *(_OWORD *)__int16 v18 = v19;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(_OWORD *)(v18 + 24) = *(long long *)((char *)a2 + 24);
    long long v20 = *(long long *)((char *)a2 + 56);
    long long v21 = *(long long *)((char *)a2 + 72);
    uint64_t v22 = *((void *)a2 + 11);
    *(_OWORD *)(v18 + 40) = *(long long *)((char *)a2 + 40);
    *((void *)v18 + 11) = v22;
    *(_OWORD *)(v18 + 72) = v21;
    *(_OWORD *)(v18 + 56) = v20;
    v23[2] = v18 + 96;
    sub_101155EE8(a1, v23);
    uint64_t v12 = a1[1];
    uint64_t result = sub_1011560A8((uint64_t)v23);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(_OWORD *)(v7 + 24) = *(long long *)((char *)a2 + 24);
    long long v9 = *(long long *)((char *)a2 + 56);
    long long v10 = *(long long *)((char *)a2 + 72);
    uint64_t v11 = *((void *)a2 + 11);
    *(_OWORD *)(v7 + 40) = *(long long *)((char *)a2 + 40);
    *(void *)(v7 + 88) = v11;
    *(_OWORD *)(v7 + 72) = v10;
    *(_OWORD *)(v7 + 56) = v9;
    uint64_t v12 = v7 + 96;
    a1[1] = v7 + 96;
  }
  a1[1] = v12;
  return result;
}

void sub_101152C54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1011560A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101152C68()
{
}

void sub_101152D24(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_101152D60(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = &off_102314448;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    uint64_t v12 = a3;
  }
  else {
    uint64_t v12 = (uint64_t *)*a3;
  }
  id v13 = [objc_msgSend(a4, "vendor") proxyForService:[NSString stringWithUTF8String:v12]];
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:[a4 silo]];
  return a1;
}

void sub_101152E44(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        long long v9 = (uint64_t *)v4;
      }
      else {
        long long v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)std::string buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1023141F8);
      }
      long long v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        uint64_t v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          uint64_t v11 = (void *)*v11;
        }
        *(_DWORD *)std::string buf = 136446466;
        long long v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1023141F8);
        }
        uint64_t v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          uint64_t v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        unint64_t v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLRayTracingTileManager_Type::Notification, CLRayTracingTileManager_Type::NotificationData>::removeClient(int) [Notification_T = CLRayTracingTileManager_Type::Notification, NotificationData_T = CLRayTracingTileManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_1011530D4(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_101153188(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_1011531D0(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_101153218(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_101153260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_1024763D8);
}

BOOL sub_10115328C(uint64_t a1, int a2, int *a3, char *a4)
{
  int v39 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      uint64_t v38 = v10;
      int v16 = *a3;
      uint64_t v19 = *(void *)(v10 + 48);
      uint64_t v18 = v10 + 48;
      uint64_t v17 = v19;
      if (!v19) {
        goto LABEL_31;
      }
      uint64_t v20 = v18;
      do
      {
        int v21 = *(_DWORD *)(v17 + 28);
        BOOL v22 = v21 < v16;
        if (v21 >= v16) {
          int v23 = (uint64_t *)v17;
        }
        else {
          int v23 = (uint64_t *)(v17 + 8);
        }
        if (!v22) {
          uint64_t v20 = v17;
        }
        uint64_t v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28)) {
LABEL_31:
      }
        uint64_t v20 = v18;
      uint64_t v24 = *(void *)(a1 + 64);
      if (!v24) {
        goto LABEL_42;
      }
      uint64_t v25 = a1 + 64;
      do
      {
        int v26 = *(_DWORD *)(v24 + 32);
        BOOL v27 = v26 < v16;
        if (v26 >= v16) {
          uint64_t v28 = (uint64_t *)v24;
        }
        else {
          uint64_t v28 = (uint64_t *)(v24 + 8);
        }
        if (!v27) {
          uint64_t v25 = v24;
        }
        uint64_t v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        uint64_t v34 = *(void *)(v25 + 56);
        char v35 = *a4;
        *(void *)std::string buf = &v39;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v25 + 40), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v35;
        memset(buf, 0, 20);
        uint8_t buf[20] = 2;
        *(_OWORD *)std::string __p = 0u;
        memset(v45, 0, sizeof(v45));
        char v46 = 1;
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, uint8_t *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_1011561E4();
        }
        *(void *)uint64_t v40 = (char *)v45 + 8;
        sub_1000A7B4C((void ***)v40);
        if (SBYTE7(v45[0]) < 0) {
          operator delete(__p[0]);
        }
        if (v34) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        char v29 = byte_1024763D9;
        *(_DWORD *)uint64_t v40 = *a3;
        *(void *)std::string buf = v40;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), (int *)v40, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v29;
        *(_DWORD *)uint64_t v40 = *a3;
        *(void *)std::string buf = v40;
        uint64_t v30 = sub_10044715C((uint64_t **)(a1 + 56), (int *)v40, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        int v31 = (std::__shared_weak_count *)v30[9];
        v30[8] = 0;
        v30[9] = 0;
        if (v31) {
          sub_1000DB0A0(v31);
        }
        char v32 = *a4;
        *(_DWORD *)uint64_t v40 = *a3;
        *(void *)std::string buf = v40;
        uint64_t v33 = sub_10044715C((uint64_t **)(a1 + 56), (int *)v40, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)std::string buf = &v39;
        *((unsigned char *)sub_1000EB1B8(v33 + 5, &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v20 == v18)
      {
        *(_DWORD *)std::string buf = *a3;
        sub_1000EDED4((uint64_t **)(v38 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1023141F8);
  }
  id v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    unint64_t v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      unint64_t v15 = (void *)*v15;
    }
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&unsigned char buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023141F8);
    }
    unint64_t v36 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      unint64_t v36 = (void *)*v36;
    }
    *(_DWORD *)uint64_t v40 = 136446466;
    *(void *)&v40[4] = v36;
    __int16 v41 = 1026;
    int v42 = a2;
    uint64_t v37 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLRayTracingTileManager_Type::Notification, CLRayTracingTileManager_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLRayTracingTileManager_Type::Notification, NotificationData_T = CLRayTracingTileManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v37 != (char *)buf) {
      free(v37);
    }
    return 0;
  }
  return result;
}

void sub_101153778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_101150508((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_101153798(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        int v21 = (uint64_t *)v15;
      }
      else {
        int v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023141F8);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1023141F8);
      }
      BOOL v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLRayTracingTileManager_Type::Notification, CLRayTracingTileManager_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLRayTracingTileManager_Type::Notification, NotificationData_T = CLRayTracingTileManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_101153A1C(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            BOOL v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                BOOL v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1023141F8);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                BOOL v27 = a1 + 8;
                if (a1[31] < 0) {
                  BOOL v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  uint64_t v28 = __p;
                }
                else {
                  uint64_t v28 = (void **)__p[0];
                }
                *(_DWORD *)std::string buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                char v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1023141F8);
                }
                char v29 = a1 + 8;
                if (a1[31] < 0) {
                  char v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  uint64_t v30 = buf;
                }
                else {
                  uint64_t v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                uint64_t v38 = v29;
                __int16 v39 = 2082;
                uint64_t v40 = v30;
                int v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLRayTracingTileManager_Type::Notification, CLRayTracingTileManager_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLRayTracingTileManager_Type::Notification, NotificationData_T = CLRayTracingTileManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_101153DF0(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v7 = *a2;
  uint64_t v8 = v3;
  do
  {
    int v9 = *(_DWORD *)(v4 + 32);
    BOOL v10 = v9 < v7;
    if (v9 >= v7) {
      int v11 = (uint64_t *)v4;
    }
    else {
      int v11 = (uint64_t *)(v4 + 8);
    }
    if (!v10) {
      uint64_t v8 = v4;
    }
    uint64_t v4 = *v11;
  }
  while (*v11);
  if (v8 == v3) {
    return 0;
  }
  if (v7 < *(_DWORD *)(v8 + 32)) {
    return 0;
  }
  BOOL v12 = *(long long **)(v8 + 64);
  if (!v12) {
    return 0;
  }
  long long v13 = *v12;
  *(void *)(a3 + 13) = *(void *)((char *)v12 + 13);
  *(_OWORD *)a3 = v13;
  std::string::operator=((std::string *)(a3 + 24), (const std::string *)v12 + 1);
  if (v12 != (long long *)a3) {
    sub_1019EF7A8(a3 + 48, *((std::string **)v12 + 6), *((long long **)v12 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v12 + 7) - *((void *)v12 + 6)) >> 3));
  }
  *(unsigned char *)(a3 + 72) = *((unsigned char *)v12 + 72);
  return 1;
}

uint64_t sub_101153EB0(uint64_t a1, int *a2, long long *a3)
{
  sub_1011557C8(a3, &v10);
  int v9 = *a2;
  int v11 = &v9;
  uint64_t v5 = sub_10044715C((uint64_t **)(a1 + 56), &v9, (uint64_t)&unk_101D0B290, &v11);
  long long v6 = v10;
  long long v10 = 0uLL;
  int v7 = (std::__shared_weak_count *)v5[9];
  *((_OWORD *)v5 + 4) = v6;
  if (v7)
  {
    sub_1000DB0A0(v7);
    if (*((void *)&v10 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  return 1;
}

void sub_101153F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_101153F5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[0] = 0;
  v4[1] = 0;
  int v5 = 0;
  char v6 = 2;
  *(_OWORD *)std::string __p = 0u;
  memset(v8, 0, sizeof(v8));
  char v9 = 1;
  (*(void (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, v4, a3, a4, 0);
  long long v10 = (void **)v8 + 1;
  sub_1000A7B4C(&v10);
  if (SBYTE7(v8[0]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_101153FFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101150508((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101154010(uint64_t a1, unsigned int *a2, long long *a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1023141F8);
  }
  char v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    long long v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)std::string buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(void *)&uint8_t buf[20] = "activity";
    __int16 v23 = 2082;
    BOOL v24 = v10;
    __int16 v25 = 2050;
    int v26 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    BOOL v27 = v28;
    memset(v28, 0, sizeof(v28));
    char v29 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v27);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v26) {
      sub_1000DB0A0(v26);
    }
    sub_1000F5BB0((uint64_t)&buf[8], *(void **)&buf[16]);
    if (v29) {
      sub_1000DB0A0(v29);
    }
    sub_1000F5BB0((uint64_t)&v27, v28[0]);
  }
  if (!a4)
  {
    uint64_t v20 = (std::__shared_weak_count *)v14[9];
    v14[8] = 0;
    v14[9] = 0;
    if (!v20) {
      goto LABEL_29;
    }
LABEL_28:
    sub_1000DB0A0(v20);
    goto LABEL_29;
  }
  sub_1011557C8(a3, buf);
  long long v18 = *(_OWORD *)buf;
  *(void *)std::string buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  int v19 = (std::__shared_weak_count *)v14[9];
  *((_OWORD *)v14 + 4) = v18;
  if (v19)
  {
    sub_1000DB0A0(v19);
    uint64_t v20 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]) {
      goto LABEL_28;
    }
  }
LABEL_29:
  if (v14[7]) {
    sub_101155184();
  }
  os_activity_scope_leave(&state);
}

void sub_1011545E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_10115462C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023141F8);
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)std::string buf = 136315138;
      BOOL v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1023141F8);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLRayTracingTileManager_Type::Notification, CLRayTracingTileManager_Type::NotificationData>::listClients() [Notification_T = CLRayTracingTileManager_Type::Notification, NotificationData_T = CLRayTracingTileManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023141F8);
    }
    int v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      char v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        char v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)std::string buf = 136315394;
      BOOL v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1023141F8);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLRayTracingTileManager_Type::Notification, CLRayTracingTileManager_Type::NotificationData>::listClients() [Notification_T = CLRayTracingTileManager_Type::Notification, NotificationData_T = CLRayTracingTileManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    uint64_t v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        char v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_1023141F8);
            }
            long long v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)std::string buf = 136315650;
              BOOL v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1023141F8);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLRayTracingTileManager_Type::Notification, CLRayTracingTileManager_Type::NotificationData>::listClients() [Notification_T = CLRayTracingTileManager_Type::Notification, NotificationData_T = CLRayTracingTileManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                char v9 = v15;
              }
              while (!v16);
            }
            char v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        long long v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            long long v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            uint64_t v8 = v19;
          }
          while (!v16);
        }
        uint64_t v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_101154BDC(uint64_t a1)
{
  sub_101156174(a1);

  operator delete();
}

id sub_101154C14(uint64_t a1, int a2, void *a3)
{
  id result = sub_101155A98(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_101154C64(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101154C94(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_101154CC4(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_101154CF4(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_101154D44(result);
    operator delete();
  }
  return result;
}

uint64_t sub_101154D44(uint64_t a1)
{
  sub_100777300((void *)(a1 + 160));
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  uint64_t v4 = (void **)(a1 + 112);
  sub_1000A7B4C(&v4);
  uint64_t v4 = (void **)(a1 + 88);
  sub_1000A7B4C(&v4);
  uint64_t v4 = (void **)(a1 + 64);
  sub_1000A7B4C(&v4);
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_101154E08(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_101154E5C((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_101154E5C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 96)
  {
    if (*(char *)(i - 73) < 0) {
      operator delete(*(void **)(i - 96));
    }
  }
  a1[1] = v2;
}

uint64_t sub_101154EAC(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_101154EFC(result);
    operator delete();
  }
  return result;
}

uint64_t sub_101154EFC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 560) && *(char *)(a1 + 559) < 0) {
    operator delete(*(void **)(a1 + 536));
  }
  if (*(char *)(a1 + 487) < 0) {
    operator delete(*(void **)(a1 + 464));
  }
  if (*(char *)(a1 + 447) < 0) {
    operator delete(*(void **)(a1 + 424));
  }
  if (*(char *)(a1 + 423) < 0) {
    operator delete(*(void **)(a1 + 400));
  }
  if (*(char *)(a1 + 399) < 0) {
    operator delete(*(void **)(a1 + 376));
  }
  std::mutex::~mutex((std::mutex *)(a1 + 312));
  sub_1005C3B7C(a1 + 64);
  uint64_t v2 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void **)(a1 + 16);
  if (v4)
  {
    *(void *)(a1 + 24) = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_101154FFC()
{
}

void *sub_101155010(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102314348;
  result[1] = v3;
  return result;
}

uint64_t sub_101155058(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102314348;
  a2[1] = v2;
  return result;
}

void sub_101155084(uint64_t a1, void *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
}

uint64_t sub_101155094(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1011550D4()
{
}

long long *sub_1011550E0(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  int v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      long long v7 = *v5;
      *(void *)(a4 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a4 = v7;
      *((unsigned char *)v5 + 23) = 0;
      *(unsigned char *)int v5 = 0;
      *(_OWORD *)(a4 + 24) = *(long long *)((char *)v5 + 24);
      long long v8 = *(long long *)((char *)v5 + 40);
      long long v9 = *(long long *)((char *)v5 + 56);
      long long v10 = *(long long *)((char *)v5 + 72);
      *(void *)(a4 + 88) = *((void *)v5 + 11);
      *(_OWORD *)(a4 + 72) = v10;
      *(_OWORD *)(a4 + 56) = v9;
      *(_OWORD *)(a4 + 40) = v8;
      a4 += 96;
      v5 += 6;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void sub_101155184()
{
}

void sub_1011552A4()
{
}

void sub_1011552E0(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    int v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      long long v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          int v12 = (uint64_t *)v4;
        }
        else {
          int v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          long long v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        uint64_t v49 = v9;
        id v13 = sub_101155A98(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            int v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                BOOL v22 = (uint64_t *)v17;
              }
              else {
                BOOL v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                int v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              uint64_t v48 = v19;
              sub_1011556D0(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              char v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  char v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              uint64_t v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                char v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    char v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  uint64_t v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      uint64_t v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      char v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              uint64_t v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1023141F8);
              }
              BOOL v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)std::string buf = 136446466;
                unint64_t v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1023141F8);
                }
                double v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  double v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                uint64_t v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                uint64_t v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLRayTracingTileManager_Type::Notification, CLRayTracingTileManager_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLRayTracingTileManager_Type::Notification, NotificationData_T = CLRayTracingTileManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_1011556D0(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    long long v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_101155A98(a4);
    uint64_t v10 = *(void *)a3 + 80;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40);
    uint64_t v14 = (int *)(*(void *)a2 + 32);
    int v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4 v13];
    }
  }
  return result;
}

void *sub_1011557C8@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x68uLL);
  uint64_t result = sub_101155824(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_101155810(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_101155824(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1023143D8;
  sub_101155934((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_101155880(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_101155894(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1023143D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1011558B4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1023143D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_101155908(uint64_t a1)
{
  sub_1011559EC((uint64_t)&v1, a1 + 24);
}

char *sub_101155934(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v5 = *a3;
  *(void *)(a2 + 13) = *(void *)((char *)a3 + 13);
  *(_OWORD *)a2 = v5;
  int v6 = (unsigned char *)(a2 + 24);
  if (*((char *)a3 + 47) < 0)
  {
    sub_1000DC48C(v6, *((void **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v7 = *(long long *)((char *)a3 + 24);
    *(void *)(a2 + 40) = *((void *)a3 + 5);
    *(_OWORD *)int v6 = v7;
  }
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  uint64_t result = sub_1001D857C((char *)(a2 + 48), *((long long **)a3 + 6), *((long long **)a3 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a3 + 7) - *((void *)a3 + 6)) >> 3));
  *(unsigned char *)(a2 + 72) = *((unsigned char *)a3 + 72);
  return result;
}

void sub_1011559D0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1011559EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void **)(a2 + 48);
  sub_1000A7B4C(&v3);
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
}

uint64_t sub_101155A34(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    uint64_t v2 = (void **)(v1 + 48);
    sub_1000A7B4C(&v2);
    if (*(char *)(v1 + 47) < 0) {
      operator delete(*(void **)(v1 + 24));
    }
    operator delete();
  }
  return result;
}

id sub_101155A98(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return sub_101155AF8(a1);
}

id sub_101155AF8(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102314418);
      }
      uint64_t v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101DA9EF3 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLRayTracingTileManager_Type::NotificationData, Callbacuint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102314418);
      }
      long long v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101DA9EF3 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_102314418);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

void sub_101155EB8(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_101155EE8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_101155F60((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_101155F60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v18 = a6;
  *((void *)&v18 + 1) = a7;
  long long v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 96);
      *(void *)(v9 - 80) = *(void *)(a3 - 80);
      *(_OWORD *)(v9 - 96) = v10;
      *(void *)(a3 - 88) = 0;
      *(void *)(a3 - 80) = 0;
      *(void *)(a3 - 96) = 0;
      *(_OWORD *)(v9 - 72) = *(_OWORD *)(a3 - 72);
      long long v11 = *(_OWORD *)(a3 - 40);
      long long v12 = *(_OWORD *)(a3 - 24);
      uint64_t v13 = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 56) = *(_OWORD *)(a3 - 56);
      *(void *)(v9 - 8) = v13;
      *(_OWORD *)(v9 - 24) = v12;
      *(_OWORD *)(v9 - 40) = v11;
      v9 -= 96;
      v7 -= 96;
      a3 -= 96;
    }
    while (a3 != a5);
    *((void *)&v18 + 1) = v9;
  }
  char v16 = 1;
  sub_101156028((uint64_t)v15);
  return a6;
}

uint64_t sub_101156028(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_101156060(a1);
  }
  return a1;
}

void sub_101156060(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 96;
  }
}

uint64_t sub_1011560A8(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1011560E0(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 12;
      *(void *)(a1 + 16) = v2 - 12;
      if (*((char *)v2 - 73) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_101156138(uint64_t *a1)
{
  if (*a1)
  {
    sub_101154E5C(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_101156174(uint64_t a1)
{
  *(void *)a1 = &off_102314448;
  uint64_t v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  id *v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_1011561E4()
{
}

void sub_101156304()
{
}

uint64_t sub_101156340(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    uint64_t v2 = (void **)(v1 + 48);
    sub_1000A7B4C(&v2);
    if (*(char *)(v1 + 47) < 0) {
      operator delete(*(void **)(v1 + 24));
    }
    operator delete();
  }
  return result;
}

uint64_t sub_1011563A4()
{
  sub_100134750(&qword_10248B328, "rt_tile_");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248B328, (void *)&_mh_execute_header);
  sub_100134750(&qword_10248B340, ".bin");

  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10248B340, (void *)&_mh_execute_header);
}

void sub_1011564CC(id a1)
{
  qword_102485A58 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLDigitalElevationModelSilo"];
}

uint64_t sub_10115657C(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10115F0CC;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_102485A68 != -1) {
    dispatch_once(&qword_102485A68, block);
  }
  return qword_10248B360;
}

uint64_t sub_10115666C(uint64_t a1)
{
  uint64_t v2 = a1 + 104;
  (*(void (**)(uint64_t))(*(void *)(a1 + 104) + 16))(a1 + 104);
  sub_10115CC9C(v2 + 808);
  *(_OWORD *)(a1 + 704) = xmmword_101DA9F80;
  *(void *)(a1 + 728) = 0;
  *(void *)(a1 + 720) = 0;
  *(void *)(a1 + 864) = 0xC0C3878000000000;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(int64x2_t *)(a1 + 848) = vdupq_n_s64(0xC0C3878000000000);
  *(void *)(a1 + 880) = 0;
  *(void *)(a1 + 872) = 0;
  *(_WORD *)(a1 + 888) = 0;
  *(void *)(a1 + 904) = 0;
  *(void *)(a1 + 896) = 0;
  *(unsigned char *)(a1 + 576) = 0;
  *(unsigned char *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  if (*(char *)(a1 + 575) < 0)
  {
    **(unsigned char **)(a1 + 552) = 0;
    *(void *)(a1 + 560) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 552) = 0;
    *(unsigned char *)(a1 + 575) = 0;
  }
  sub_1005C70E0(a1 + 120);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

void sub_101156780(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1011567BC(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = a1 + 104;
  (*(void (**)(uint64_t))(*(void *)(a1 + 104) + 16))(a1 + 104);
  *(CFAbsoluteTime *)(a1 + 400) = CFAbsoluteTimeGetCurrent();
  *(_DWORD *)(a1 + 408) = a2;
  *(_DWORD *)(a1 + 412) = a3;
  uint64_t v7 = 1;
  if (a2 > 11804)
  {
    if (a2 > 15651)
    {
      if (a2 > 18199)
      {
        if (a2 <= 19149)
        {
          if (a2 > 19029)
          {
            if (a2 == 19030) {
              goto LABEL_60;
            }
            int v8 = 19090;
            goto LABEL_54;
          }
          if (a2 == 18200) {
            goto LABEL_60;
          }
          int v12 = 18240;
        }
        else
        {
          if (a2 > 515620)
          {
            if (a2 == 515621 || a2 == 515652) {
              goto LABEL_60;
            }
            int v8 = 519150;
            goto LABEL_54;
          }
          if (a2 == 19150) {
            goto LABEL_61;
          }
          int v12 = 90603;
        }
        if (a2 != v12) {
          return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 24))(v6, v7);
        }
        goto LABEL_61;
      }
      if (a2 <= 15732)
      {
        if ((a2 - 15652) > 0x3B) {
          return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 24))(v6, v7);
        }
        uint64_t v9 = 1 << (a2 - 36);
        uint64_t v10 = 0x800000000840101;
        goto LABEL_59;
      }
      if (a2 > 18049)
      {
        if (a2 == 18050) {
          goto LABEL_60;
        }
        int v8 = 18100;
      }
      else
      {
        if (a2 == 15733) {
          goto LABEL_60;
        }
        int v8 = 17150;
      }
    }
    else if (a2 > 15329)
    {
      if ((a2 - 15560) <= 0x3C && ((1 << (a2 + 56)) & 0x1004000100000001) != 0
        || (a2 - 15330) <= 0x1E && ((1 << (a2 + 30)) & 0x40100001) != 0)
      {
        goto LABEL_60;
      }
      int v8 = 15460;
    }
    else if (a2 <= 15054)
    {
      if (a2 == 11805) {
        goto LABEL_61;
      }
      if (a2 == 12150)
      {
LABEL_60:
        LOBYTE(v7) = 0;
        goto LABEL_61;
      }
      int v8 = 15030;
    }
    else
    {
      if ((a2 - 15100) <= 0x32 && ((1 << (a2 + 4)) & 0x4000000000401) != 0
        || (a2 - 15230) <= 0x19 && ((1 << (a2 - 126)) & 0x2100001) != 0)
      {
        goto LABEL_60;
      }
      int v8 = 15055;
    }
LABEL_54:
    if (a2 != v8) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 24))(v6, v7);
    }
    goto LABEL_60;
  }
  if (a2 <= 2009)
  {
    if (a2 > 0x38)
    {
LABEL_57:
      if ((a2 - 61) > 0x27) {
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 24))(v6, v7);
      }
      uint64_t v9 = 1 << (a2 - 61);
      uint64_t v10 = 0x800000043FLL;
LABEL_59:
      if ((v9 & v10) == 0) {
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 24))(v6, v7);
      }
      goto LABEL_60;
    }
    if (((1 << a2) & 0x2000000029FLL) == 0)
    {
      if (((1 << a2) & 0x110000000000C60) != 0)
      {
        char v11 = 1;
        sub_10115D490(a1, 1);
LABEL_62:
        sub_10115D414(a1, v11);
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 24))(v6, v7);
      }
      if (a2 != 8) {
        goto LABEL_57;
      }
LABEL_61:
      sub_10115D490(a1, v7);
      char v11 = 0;
      goto LABEL_62;
    }
    goto LABEL_60;
  }
  if ((a2 - 2010) <= 0x3D && ((1 << (a2 + 38)) & 0x2488004000005401) != 0
    || (a2 - 2101) <= 0x31 && ((1 << (a2 - 53)) & 0x2000000000011) != 0
    || (a2 - 3015) < 2)
  {
    goto LABEL_60;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 24))(v6, v7);
}

void sub_101156B84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101156BAC(uint64_t a1, char a2)
{
  uint64_t v3 = (unsigned char *)(a1 + 104);
  (*(void (**)(uint64_t))(*(void *)(a1 + 104) + 16))(a1 + 104);
  v3[384] = a2;
  return (*(uint64_t (**)(unsigned char *))(*(void *)v3 + 24))(v3);
}

uint64_t sub_101156CB4(uint64_t a1, uint64_t a2, char a3, int a4, int a5)
{
  char v11 = (unsigned char *)(a1 + 104);
  uint64_t v10 = *(void *)(a1 + 104);
  uint64_t v42 = a1 + 104;
  (*(void (**)(uint64_t))(v10 + 16))(a1 + 104);
  __int16 v43 = 256;
  if (!v11[384])
  {
    int v12 = sub_1000E6EF0(a1 + 8);
    BOOL v13 = a5 <= 0 && *(unsigned char *)(a1 + 464) == 0;
    char v14 = v13 ? v12 : 1;
    if (v14)
    {
      if (v12 && a5 <= 0 && vabdd_f64(*(double *)(a2 + 76), *(double *)(a1 + 584)) > 3600.0)
      {
        sub_101157538(a1, (void *)(a2 + 76));
        return (*(uint64_t (**)(unsigned char *))(*(void *)v11 + 24))(v11);
      }
      if (*(double *)(a2 + 44) > 15.0) {
        return (*(uint64_t (**)(unsigned char *))(*(void *)v11 + 24))(v11);
      }
      if (*(unsigned char *)(a1 + 464))
      {
        double v15 = *(double *)(a2 + 76);
        if (a5 <= 0 && vabdd_f64(v15, *(double *)(a1 + 592)) <= 31.0) {
          return (*(uint64_t (**)(unsigned char *))(*(void *)v11 + 24))(v11);
        }
      }
      else
      {
        if (a5 < 1) {
          return (*(uint64_t (**)(unsigned char *))(*(void *)v11 + 24))(v11);
        }
        double v15 = *(double *)(a2 + 76);
      }
      *(double *)(a1 + 592) = v15;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      char v16 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        uint64_t v17 = *(void *)(a1 + 472);
        uint64_t v18 = *(void *)(a1 + 480);
        *(_DWORD *)std::string buf = 134283777;
        uint64_t v49 = v17;
        __int16 v50 = 2049;
        uint64_t v51 = v18;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "DEM,requestDownload, Requesting DEM Tile download,lat,%{private}.7lf,lon,%{private}.7lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023144B0);
        }
        uint64_t v30 = *(void *)(a1 + 472);
        uint64_t v31 = *(void *)(a1 + 480);
        int v44 = 134283777;
        uint64_t v45 = v30;
        __int16 v46 = 2049;
        uint64_t v47 = v31;
        int v32 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLDigitalElevationModel::downloadIfNeeded(const CLDaemonLocation &, const BOOL, const BOOL, const int)", "%s\n", v32);
        if (v32 != (char *)buf) {
          free(v32);
        }
      }
      if (a4)
      {
        if (*(double *)(a2 + 20) <= 10.0) {
          char v19 = 1;
        }
        else {
          char v19 = a3;
        }
        if ((v19 & 1) == 0)
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023144B0);
          }
          int v20 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "DEM,allowing download request over cell due to poor GNSS signal conditions", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023144B0);
            }
            LOWORD(v44) = 0;
            uint64_t v34 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLDigitalElevationModel::downloadIfNeeded(const CLDaemonLocation &, const BOOL, const BOOL, const int)", "%s\n", v34);
            if (v34 != (char *)buf) {
              free(v34);
            }
          }
        }
        if (sub_10115E6D0(a1, a1 + 400))
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023144B0);
          }
          BOOL v21 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
          {
            int v22 = *(_DWORD *)(a1 + 408);
            *(_DWORD *)std::string buf = 67109120;
            LODWORD(v49) = v22;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "DEM,allowing download request over cell due to activity,%d", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023144B0);
            }
            int v35 = *(_DWORD *)(a1 + 408);
            int v44 = 67109120;
            LODWORD(v45) = v35;
            uint64_t v36 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLDigitalElevationModel::downloadIfNeeded(const CLDaemonLocation &, const BOOL, const BOOL, const int)", "%s\n", v36);
            if (v36 != (char *)buf) {
              free(v36);
            }
          }
          LOBYTE(a4) = 1;
        }
        else
        {
          LOBYTE(a4) = v19 ^ 1;
        }
      }
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      char v24 = *(unsigned char *)(a1 + 605);
      if (v24) {
        LOBYTE(a4) = 1;
      }
      if ((a5 - 1) >= 2)
      {
        a5 = 0;
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023144B0);
        }
        __int16 v25 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 67109120;
          LODWORD(v49) = a5;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "DEM,downloadIfNeeded,numRingsToDownloadOverCellular,%d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023144B0);
          }
          int v44 = 67109120;
          LODWORD(v45) = a5;
          uint64_t v33 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLDigitalElevationModel::downloadIfNeeded(const CLDaemonLocation &, const BOOL, const BOOL, const int)", "%s\n", v33);
          if (v33 != (char *)buf) {
            free(v33);
          }
        }
        char v24 = 1;
        LOBYTE(a4) = 1;
      }
      double v26 = *(double *)(a1 + 472);
      double v27 = *(double *)(a1 + 480);
      if (!sub_1000EF68C(v26, v27) || sub_1000EF668(v26, v27))
      {
        double v26 = *(double *)(a2 + 4);
        double v27 = *(double *)(a2 + 12);
      }
      id v28 = [[objc_msgSend(*(id *)(a1 + 368), "vendor") proxyForService:@"CLTilesManager"];
      v37[0] = a4;
      v37[1] = v24;
      v37[2] = 0;
      unint64_t v38 = 0xBFF0000000000000;
      int v39 = a5;
      CFAbsoluteTime v40 = Current;
      __int16 v41 = 1;
      [v28 requestTileDownloadByType:1 lat:-1 lon:v37 seckey:v26 details:v27];
    }
  }
  return (*(uint64_t (**)(unsigned char *))(*(void *)v11 + 24))(v11);
}

void sub_101157444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101157538(uint64_t a1, void *a2)
{
  if (*(char *)(a1 + 463) < 0)
  {
    sub_1000DC48C(__p, *(void **)(a1 + 440), *(void *)(a1 + 448));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 440);
    uint64_t v33 = *(void *)(a1 + 456);
  }
  sub_101065BA0(&v31);
  sub_1000C7F88(buf);
  BOOL v4 = sub_1004D1284(*(uint64_t *)buf, "DEMTilesServerUrl", &v31);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v4)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    uint64_t v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = &v31;
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v6 = (std::string *)v31.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "DEM, server, %{public}s, overridden, 1", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      uint64_t v7 = &v31;
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v7 = (std::string *)v31.__r_.__value_.__r.__words[0];
      }
LABEL_89:
      *(_DWORD *)uint64_t v34 = 136446210;
      *(void *)&v34[4] = v7;
      double v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDigitalElevationModel::downloadAvailabilityFile(const CFAbsoluteTime &)", "%s\n", v27);
      if (v27 != buf) {
        free(v27);
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    int v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = &v31;
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v9 = (std::string *)v31.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "DEM, server, %{public}s, overridden, 0", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      uint64_t v7 = &v31;
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v7 = (std::string *)v31.__r_.__value_.__r.__words[0];
      }
      goto LABEL_89;
    }
  }
  std::string::append(&v31, "/");
  if (v33 >= 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if (v33 >= 0) {
    std::string::size_type v11 = HIBYTE(v33);
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  std::string::append(&v31, (const std::string::value_type *)v10, v11);
  int v12 = (char *)sub_1000A6958();
  sub_1000A5670(v12, (uint64_t)&v30);
  if (v33 >= 0) {
    BOOL v13 = __p;
  }
  else {
    BOOL v13 = (void **)__p[0];
  }
  if (v33 >= 0) {
    std::string::size_type v14 = HIBYTE(v33);
  }
  else {
    std::string::size_type v14 = (std::string::size_type)__p[1];
  }
  std::string::append(&v30, (const std::string::value_type *)v13, v14);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023144B0);
  }
  double v15 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    char v16 = &v31;
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      char v16 = (std::string *)v31.__r_.__value_.__r.__words[0];
    }
    uint64_t v17 = &v30;
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v17 = (std::string *)v30.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136446722;
    *(void *)&uint8_t buf[4] = v16;
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&unsigned char buf[14] = v17;
    __int16 v40 = 2050;
    uint64_t v41 = 0x40AC200000000000;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "DEM,download request,url,%{public}s,storeTo,%{public}s,retryInterval,%{public}.1lf", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    int v23 = &v31;
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v23 = (std::string *)v31.__r_.__value_.__r.__words[0];
    }
    char v24 = &v30;
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      char v24 = (std::string *)v30.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)uint64_t v34 = 136446722;
    *(void *)&v34[4] = v23;
    __int16 v35 = 2082;
    uint64_t v36 = v24;
    __int16 v37 = 2050;
    uint64_t v38 = 0x40AC200000000000;
    __int16 v25 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDigitalElevationModel::downloadAvailabilityFile(const CFAbsoluteTime &)", "%s\n", v25);
    if (v25 != buf) {
      free(v25);
    }
  }
  *(void *)(a1 + 584) = *a2;
  *(void *)uint64_t v34 = 0x404E000000000000;
  uint64_t v18 = (double *)(a1 + 120);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v19 = &v31;
  }
  else {
    char v19 = (std::string *)v31.__r_.__value_.__r.__words[0];
  }
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v20 = &v30;
  }
  else {
    int v20 = (std::string *)v30.__r_.__value_.__r.__words[0];
  }
  if (sub_1005C653C((uint64_t)v18, (const std::string::value_type *)v19, (const std::string::value_type *)v20, (double *)v34))
  {
    *(void *)std::string buf = sub_10115EC08();
    v29[0] = sub_10115E744();
    if (sub_1005C6BBC((uint64_t)v18, (double *)buf, v29))
    {
      *(double *)std::string buf = *(double *)a2 + 3600.0 + -0.5;
      sub_1005C6FFC(v18, (double *)buf);
      goto LABEL_66;
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    BOOL v21 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "#Warning,DEM,could not setUpdateSource AVL file updater", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      LOWORD(v29[0]) = 0;
      id v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDigitalElevationModel::downloadAvailabilityFile(const CFAbsoluteTime &)", "%s\n", v28);
      if (v28 != buf) {
        free(v28);
      }
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023144B0);
  }
  int v22 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "#Warning,DEM,could not setUpdateRate AVl file updater", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    LOWORD(v29[0]) = 0;
    double v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDigitalElevationModel::downloadAvailabilityFile(const CFAbsoluteTime &)", "%s\n", v26);
    if (v26 != buf) {
      free(v26);
    }
  }
LABEL_66:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33) < 0) {
    operator delete(__p[0]);
  }
}

void sub_101157E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101157ECC(uint64_t a1, char a2)
{
  uint64_t v3 = (unsigned char *)(a1 + 104);
  (*(void (**)(uint64_t))(*(void *)(a1 + 104) + 16))(a1 + 104);
  v3[544] = a2;
  return (*(uint64_t (**)(unsigned char *))(*(void *)v3 + 24))(v3);
}

uint64_t sub_101157F68(uint64_t a1, double *a2, void *a3, double a4, double a5, double a6, double a7, double a8)
{
  if (a6 <= 90.0)
  {
    if (a6 < -90.0)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      int v12 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#Error,DEM,latitude_degs<-90.0", buf, 2u);
      }
      BOOL v13 = sub_10013D1A0(115, 0);
      uint64_t result = 0;
      if (!v13) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_41;
      }
      goto LABEL_102;
    }
    if (a4 < -500.0)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      std::string::size_type v14 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#Error,DEM,heightDEM<-500", buf, 2u);
      }
      BOOL v15 = sub_10013D1A0(115, 0);
      uint64_t result = 0;
      if (!v15) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_41;
      }
      goto LABEL_102;
    }
    if (a5 <= 0.0)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      char v24 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "#Error,DEM,heightVariance<=0", buf, 2u);
      }
      BOOL v25 = sub_10013D1A0(115, 0);
      uint64_t result = 0;
      if (!v25) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_41:
        double v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLDigitalElevationModel::CLDEMAltitudeFilter::update(const double, double, const double, const double, const double, double &, double &)", "%s\n", v26);
        if (v26 != (char *)buf) {
          free(v26);
        }
        return 0;
      }
LABEL_102:
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
      goto LABEL_41;
    }
    long long v20 = *(_OWORD *)(a1 + 168);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a1 + 152);
    *(_OWORD *)(a1 + 128) = v20;
    *(void *)(a1 + 144) = *(void *)(a1 + 184);
    *(double *)(a1 + 168) = a4;
    *(double *)(a1 + 176) = a5;
    *(double *)(a1 + 152) = a6;
    *(double *)(a1 + 160) = a7;
    double v21 = *(double *)(a1 + 192);
    *(double *)(a1 + 184) = a8;
    if (v21 == -9999.0) {
      goto LABEL_50;
    }
    *(double *)(a1 + 208) = v21;
    *(void *)(a1 + 192) = 0xC0C3878000000000;
    double v22 = a8 - *(double *)(a1 + 144);
    if (v22 < 0.0)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      int v23 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#Warning,DEM,deltaT<0,DEM height filter internal_reset", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_50;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_96:
        __int16 v46 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDigitalElevationModel::CLDEMAltitudeFilter::update(const double, double, const double, const double, const double, double &, double &)", "%s\n", v46);
        if (v46 == (char *)buf)
        {
LABEL_50:
          *(double *)(a1 + 192) = a4;
          *(double *)(a1 + 48) = a5;
          *(double *)(a1 + 56) = a5;
          *(void *)(a1 + 104) = 0;
          *(void *)(a1 + 216) = 0;
          *(void *)(a1 + 224) = 0;
          *(_WORD *)(a1 + 232) = 0;
          *(void *)(a1 + 240) = 0;
          *(void *)(a1 + 248) = 0;
          *a2 = a4;
LABEL_51:
          *a3 = *(void *)(a1 + 48);
          return 1;
        }
LABEL_97:
        free(v46);
        goto LABEL_50;
      }
LABEL_104:
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
      goto LABEL_96;
    }
    if (v22 > 2400.0)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      double v27 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "#Warning,DEM,Height filter timed out,DEM height filter internal_reset", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_50;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_96;
      }
      goto LABEL_104;
    }
    double v28 = *(double *)(a1 + 128);
    double v29 = sub_1000F1648((double *)(a1 + 8), a6, a7, *(double *)(a1 + 112), *(double *)(a1 + 120), a4);
    *(double *)(a1 + 216) = v29;
    if (v29 > 3500.0)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      std::string v30 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "DEM,Height filter exceeded maximum change in horizontal position,DEM height filter internal_reset", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_50;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      __int16 v46 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDigitalElevationModel::CLDEMAltitudeFilter::update(const double, double, const double, const double, const double, double &, double &)", "%s\n", v46);
      if (v46 == (char *)buf) {
        goto LABEL_50;
      }
      goto LABEL_97;
    }
    double v31 = (a4 - v28) / v29;
    BOOL v32 = v29 < 5.0;
    double v33 = 0.0;
    if (v32) {
      double v34 = 0.0;
    }
    else {
      double v34 = v31;
    }
    double v35 = *(double *)(a1 + 208);
    *(double *)(a1 + 200) = v35;
    *(double *)(a1 + 64) = v22 * 1.3;
    *(double *)(a1 + 48) = v22 * 1.3 + *(double *)(a1 + 48);
    *(void *)(a1 + 56) = 0x40C3880000000000;
    if ((*(unsigned char *)(a1 + 232) || *(unsigned char *)(a1 + 233))
      && (double v33 = sub_1000F1648((double *)(a1 + 8), *(double *)(a1 + 152), *(double *)(a1 + 160), *(double *)(a1 + 80), *(double *)(a1 + 88), *(double *)(a1 + 168)), *(unsigned char *)(a1 + 232)))
    {
      if (*(double *)(a1 + 168) < *(double *)(a1 + 96) + v33 * -0.07) {
        goto LABEL_67;
      }
    }
    else
    {
      if (!*(unsigned char *)(a1 + 233))
      {
        double v40 = fabs(v34);
        if (v40 <= 0.4)
        {
          if (v40 <= 0.32)
          {
            double v36 = *(double *)(a1 + 176);
            double v41 = 0.0;
            if (v40 > 0.18)
            {
              double v36 = v36 * 5.0;
              double v41 = 0.5;
            }
          }
          else
          {
            double v36 = *(double *)(a1 + 176) * 20.0;
            double v41 = 1.0;
          }
        }
        else
        {
          double v36 = *(double *)(a1 + 176) * 25.0;
          double v41 = 2.0;
        }
        uint64_t v42 = 248;
        if (v34 < 0.0) {
          uint64_t v42 = 240;
        }
        double v43 = *(double *)(a1 + v42);
        *(double *)(a1 + 56) = v36;
        *(double *)(a1 + v42) = v41 + v43;
        if (v34 <= 0.32 || *(double *)(a1 + 248) <= 4.1 || *(double *)(a1 + 184) - *(double *)(a1 + 104) <= 30.0)
        {
          int v44 = (double *)(a1 + 240);
          if (v34 >= -0.32 || *v44 <= 4.1 || *(double *)(a1 + 184) - *(double *)(a1 + 104) <= 30.0)
          {
            if (v40 < 0.18)
            {
              *int v44 = 0.0;
              *(void *)(a1 + 248) = 0;
            }
            goto LABEL_75;
          }
          *(unsigned char *)(a1 + 232) = 1;
        }
        else
        {
          *(unsigned char *)(a1 + 233) = 1;
        }
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 152);
        uint64_t v45 = *(void *)(a1 + 184);
        *(void *)(a1 + 96) = *(void *)(a1 + 200);
        *(void *)(a1 + 104) = v45;
        *(void *)(a1 + 56) = 0x40C3880000000000;
        double v36 = 10000.0;
LABEL_75:
        double v37 = *(double *)(a1 + 48);
        double v38 = v37 / (v37 + v36);
        *(double *)(a1 + 48) = v37 * (1.0 - v38);
        double v39 = *(double *)(a1 + 200) + (a4 - v35) * v38;
        *(double *)(a1 + 192) = v39;
        *a2 = v39;
        goto LABEL_51;
      }
      if (*(double *)(a1 + 168) > *(double *)(a1 + 96) + v33 * 0.1)
      {
LABEL_67:
        if (*(double *)(a1 + 184) - *(double *)(a1 + 104) > 1800.0 || v33 > 3500.0) {
          goto LABEL_50;
        }
        double v36 = *(double *)(a1 + 56);
        goto LABEL_75;
      }
    }
    *(_WORD *)(a1 + 232) = 0;
    *(void *)(a1 + 240) = 0;
    *(void *)(a1 + 248) = 0;
    double v36 = *(double *)(a1 + 176);
    *(void *)(a1 + 104) = *(void *)(a1 + 184);
    if (fabs(v34) > 0.18) {
      double v36 = v36 * 10.0;
    }
    *(double *)(a1 + 56) = v36;
    goto LABEL_75;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023144B0);
  }
  uint64_t v9 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#Error,DEM,latitude_degs>90.0", buf, 2u);
  }
  BOOL v10 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v10)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_41;
    }
    goto LABEL_102;
  }
  return result;
}

void sub_101158ADC(uint64_t a1, void *a2)
{
  *(void *)a1 = off_102314490;
  *(void *)(a1 + 8) = a1 + 8;
  *(void *)(a1 + 16) = a1 + 8;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  sub_100134750((void *)(a1 + 48), "cldavl.avl");
  *(unsigned char *)(a1 + 72) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = 0;
  sub_100513074(a1 + 104, "cldem", 1, 1);
  sub_1005C3A50(a1 + 120, a2, (uint64_t)sub_10115906C, a1);
}

void sub_101158F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (*(char *)(v13 + 975) < 0) {
    operator delete(*v17);
  }
  if (*(char *)(v13 + 575) < 0) {
    operator delete(*(void **)(v13 + 552));
  }
  if (*(char *)(v13 + 463) < 0) {
    operator delete(*v16);
  }
  if (*(char *)(v13 + 439) < 0) {
    operator delete(*v15);
  }
  uint64_t v19 = *(void *)(v13 + 376);
  *(void *)(v13 + 376) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  sub_1005C3B7C(v14);
  sub_10051310C(a12);
  sub_101057098(v12);
  _Unwind_Resume(a1);
}

void sub_10115906C(uint64_t a1, int a2, uint64_t a3)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a3 + 368), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1023144D0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v9 = 1;
    uint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDigitalElevationModel::onAvlFileUpdated", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023144D0);
    }
    uint64_t v7 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v11 = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2082;
      BOOL v15 = "activity";
      __int16 v16 = 2050;
      uint64_t v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDigitalElevationModel::onAvlFileUpdated\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v9 = 0;
  }
  sub_10115D50C(a3, a1, a2);
  if (v9) {
    os_activity_scope_leave(&state);
  }
}

void sub_101159228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101159248(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 368), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1023144D0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDigitalElevationModel::onManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023144D0);
    }
    char v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      BOOL v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDigitalElevationModel::onManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10115F13C(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_101159404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101159424(uint64_t a1)
{
  *(void *)a1 = off_102314490;

  *(void *)(a1 + 392) = 0;
  sub_10115666C(a1);
  if (*(char *)(a1 + 975) < 0) {
    operator delete(*(void **)(a1 + 952));
  }
  if (*(char *)(a1 + 575) < 0) {
    operator delete(*(void **)(a1 + 552));
  }
  if (*(char *)(a1 + 463) < 0) {
    operator delete(*(void **)(a1 + 440));
  }
  if (*(char *)(a1 + 439) < 0) {
    operator delete(*(void **)(a1 + 416));
  }
  uint64_t v2 = *(void *)(a1 + 376);
  *(void *)(a1 + 376) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_1005C3B7C(a1 + 120);
  sub_10051310C(a1 + 104);
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  sub_1003B2350((void *)(a1 + 8));
  return a1;
}

void sub_101159528(uint64_t a1)
{
  sub_101159424(a1);

  operator delete();
}

id sub_1011595A0(uint64_t a1, unsigned char *a2, double a3, double a4)
{
  memset(&__p, 0, sizeof(__p));
  *a2 = 0;
  __int16 v26 = 0;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023144B0);
  }
  int v8 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    buf[0].st_dev = 134283777;
    *(double *)&buf[0].st_mode = a3;
    WORD2(buf[0].st_ino) = 2049;
    *(double *)((char *)&buf[0].st_ino + 6) = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "DEM,loadTile,lat,%{private}.7lf,lon,%{private}.7lf", (uint8_t *)buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    int v28 = 134283777;
    double v29 = a3;
    __int16 v30 = 2049;
    double v31 = a4;
    double v21 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDigitalElevationModel::loadTile(double, double, BOOL &)", "%s\n", v21);
    if (v21 != (char *)buf) {
      free(v21);
    }
  }
  double Current = CFAbsoluteTimeGetCurrent();
  id v10 = [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 368), "vendor"), "proxyForService:", @"CLTilesManager"), "syncgetTileFilePath:latitude:longitude:isFileAccessible:isTileNotExistingOnServer:", 1, (char *)&v26 + 1, &v26, a3, a4];
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023144B0);
  }
  char v11 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    CFAbsoluteTime v12 = CFAbsoluteTimeGetCurrent();
    buf[0].st_dev = 134349056;
    *(double *)&buf[0].st_mode = v12 - Current;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "DEM,loadTile,CLTilesManager,getTileFile,took,%{public}.1lf", (uint8_t *)buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    CFAbsoluteTime v22 = CFAbsoluteTimeGetCurrent();
    int v28 = 134349056;
    double v29 = v22 - Current;
    int v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDigitalElevationModel::loadTile(double, double, BOOL &)", "%s\n", v23);
    if (v23 != (char *)buf) {
      free(v23);
    }
  }
  if (!v10) {
    goto LABEL_27;
  }
  sub_100134750(buf, (char *)[v10 UTF8String]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&buf[0].st_dev;
  __p.__r_.__value_.__r.__words[2] = *(void *)&buf[0].st_uid;
  if (!HIBYTE(v26))
  {
LABEL_26:
    id v10 = 0;
LABEL_27:
    *a2 = 1;
    goto LABEL_28;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (stat((const char *)p_p, buf))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    __int16 v14 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      BOOL v15 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        BOOL v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      buf[0].st_dev = 136446210;
      *(void *)&buf[0].st_mode = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "#Warning,Unexpected, this tile should be on disk,%{public}s", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      *(double *)&data = COERCE_DOUBLE(&__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        data = (std::string *)__p.__r_.__value_.__l.__data_;
      }
      int v28 = 136446210;
      double v29 = *(double *)&data;
      BOOL v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDigitalElevationModel::loadTile(double, double, BOOL &)", "%s\n", v25);
      if (v25 != (char *)buf) {
        free(v25);
      }
    }
    goto LABEL_26;
  }
  LOBYTE(buf[0].st_dev) = 0;
  uint64_t v17 = sub_10115AC84(a1 + 912, &__p, (BOOL *)buf);
  id v10 = (id)v17;
  if (LOBYTE(buf[0].st_dev)) {
    char v18 = v17;
  }
  else {
    char v18 = 1;
  }
  if ((v18 & 1) == 0)
  {
    id v19 = [[objc_msgSend(*(id *)(a1 + 368), "vendor") proxyForService:@"CLTilesManager"];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v20 = &__p;
    }
    else {
      long long v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    [v19 syncgetDeleteTileFile:1 atPath:[NSString stringWithUTF8String:v20]];
    *a2 = 1;
  }
LABEL_28:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_101159B88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_101159BC8(uint64_t a1, uint64_t a2, double a3, long double a4)
{
  *(_DWORD *)(a2 + 784) = -2;
  if (!*(unsigned char *)(a1 + 32))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    int v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "#Warning,DEM,current tile is not valid", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_107;
    }
    goto LABEL_138;
  }
  if (*(double *)(a1 + 136) != 0.0)
  {
    *(_DWORD *)(a2 + 784) = -3;
    if (a3 < -90.0 || a3 > 90.0)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      __int16 v16 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 134283521;
        double v72 = a3;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "#Warning,DEM,latitude,%{private}.9lf,out of range", buf, 0xCu);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_107:
        __int16 v52 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLDigitalElevationModel::getFlatnessMetric(const CLDEMTile &, const double, const double, GNSS::DaemonLocation &)", "%s\n", v52);
        if (v52 != (char *)buf) {
          free(v52);
        }
        return 0;
      }
    }
    else
    {
      sub_10005B720(a4);
      double v13 = *(double *)(a1 + 128);
      if (v13 > a3)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023144B0);
        }
        __int16 v14 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
        {
          double v15 = *(double *)(a1 + 128);
          *(_DWORD *)std::string buf = 134283777;
          double v72 = a3;
          __int16 v73 = 2049;
          double v74 = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "#Warning,DEM,latitude,%{private}.9lf,lessThanMin,%{private}.9lf", buf, 0x16u);
        }
        BOOL result = sub_10013D1A0(115, 2);
        if (!result) {
          return result;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1) {
          goto LABEL_107;
        }
        goto LABEL_138;
      }
      long double v17 = v10;
      *(_DWORD *)(a2 + 784) = -2;
      double v18 = *(double *)(a1 + 136);
      LOWORD(v11) = *(_WORD *)(a1 + 108);
      double v19 = (double)v11;
      double v20 = v13 + v18 * v19;
      if (v20 < a3)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023144B0);
        }
        double v21 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 134283777;
          double v72 = a3;
          __int16 v73 = 2049;
          double v74 = v20;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "#Warning,DEM,latitude,%{private}.9lf,exceedsMax,%{private}.9lf", buf, 0x16u);
        }
        BOOL result = sub_10013D1A0(115, 2);
        if (!result) {
          return result;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1) {
          goto LABEL_107;
        }
        goto LABEL_138;
      }
      double v22 = *(double *)(a1 + 120);
      if (v17 < v22)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023144B0);
        }
        int v23 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
        {
          double v24 = *(double *)(a1 + 120);
          *(_DWORD *)std::string buf = 134283777;
          double v72 = v17;
          __int16 v73 = 2049;
          double v74 = v24;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "#Warning,DEM,longitude,%{private}.9lf,lessThanMin,%{private}.9lf", buf, 0x16u);
        }
        BOOL result = sub_10013D1A0(115, 2);
        if (!result) {
          return result;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1) {
          goto LABEL_107;
        }
        goto LABEL_138;
      }
      LOWORD(v19) = *(_WORD *)(a1 + 110);
      double v25 = (double)*(unint64_t *)&v19;
      double v26 = v22 + v18 * v25;
      if (v17 > v26)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023144B0);
        }
        double v27 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 134283777;
          double v72 = v17;
          __int16 v73 = 2049;
          double v74 = v26;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "#Warning,DEM,longitude,%{private}.9lf,exceedsMax,%{private}.9lf", buf, 0x16u);
        }
        BOOL result = sub_10013D1A0(115, 2);
        if (!result) {
          return result;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1) {
          goto LABEL_107;
        }
        goto LABEL_138;
      }
      if (!sub_100059D38(a1, a3, v17, v25, v12))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023144B0);
        }
        int v28 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 134283777;
          double v72 = a3;
          __int16 v73 = 2049;
          double v74 = v17;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "#Warning,DEM,latitude,%{private}.9lf,longitude,%{private}.9lf,is not in the current DEM tile", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023144B0);
          }
          uint64_t v67 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLDigitalElevationModel::getFlatnessMetric(const CLDEMTile &, const double, const double, GNSS::DaemonLocation &)", "%s\n", v67);
          if (v67 != (char *)buf) {
            free(v67);
          }
        }
        return 1;
      }
      if (*(float *)(a1 + 148) == *(float *)(a1 + 144))
      {
        *(_DWORD *)(a2 + 784) = *(unsigned __int16 *)(a1 + 110) * *(unsigned __int16 *)(a1 + 108);
        *(_DWORD *)(a2 + 788) = 1065353216;
        return 1;
      }
      double v29 = *(double *)(a1 + 136);
      int v30 = (int)(floor((v17 - *(double *)(a1 + 120)) / v29) + 0.5);
      if (v30 < 0)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023144B0);
        }
        double v38 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
        {
          double v39 = *(double *)(a1 + 120);
          *(_DWORD *)std::string buf = 134283777;
          double v72 = v17;
          __int16 v73 = 2049;
          double v74 = v39;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "#Warning,DEM,longitude,%{private}.9lf,invalid,minLongitude,%{private}.9lf", buf, 0x16u);
        }
        BOOL result = sub_10013D1A0(115, 2);
        if (!result) {
          return result;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1) {
          goto LABEL_107;
        }
      }
      else
      {
        double v31 = floor((a3 - *(double *)(a1 + 128)) / v29) + 0.5;
        int v32 = (int)v31;
        if ((int)v31 < 0)
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023144B0);
          }
          double v40 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
          {
            double v41 = *(double *)(a1 + 128);
            *(_DWORD *)std::string buf = 134283777;
            double v72 = a3;
            __int16 v73 = 2049;
            double v74 = v41;
            _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "#Warning,DEM,latitude,%{private}.9lf,invalid,minLatitude,%{private}.9lf", buf, 0x16u);
          }
          BOOL result = sub_10013D1A0(115, 2);
          if (!result) {
            return result;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 == -1) {
            goto LABEL_107;
          }
        }
        else
        {
          uint64_t v33 = *(unsigned __int16 *)(a1 + 110);
          if (v30 >= v33)
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023144B0);
            }
            uint64_t v42 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
            {
              LOWORD(v43) = *(_WORD *)(a1 + 110);
              double v44 = *(double *)(a1 + 120) + (double)v43 * *(double *)(a1 + 136);
              *(_DWORD *)std::string buf = 134283777;
              double v72 = v17;
              __int16 v73 = 2049;
              double v74 = v44;
              _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "#Warning,DEM,longitude,%{private}.9lf,invalid,maxLongitude,%{private}.9lf", buf, 0x16u);
            }
            BOOL result = sub_10013D1A0(115, 2);
            if (!result) {
              return result;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 == -1) {
              goto LABEL_107;
            }
          }
          else
          {
            unsigned int v34 = *(unsigned __int16 *)(a1 + 108);
            if (v32 < v34)
            {
              uint64_t v35 = v30;
              uint64_t v36 = *(void *)(a1 + 24);
              int v37 = *(unsigned __int8 *)(v36 + v30 + *(unsigned __int16 *)(a1 + 110) * (uint64_t)v32);
              if (v37 == *(unsigned __int8 *)(a1 + 80))
              {
                *(_DWORD *)(a2 + 784) = -2;
              }
              else
              {
                unsigned int v70 = v30;
                int v48 = v30 + 1;
                if (v37 == *(unsigned __int8 *)(v36 + *(unsigned __int16 *)(a1 + 110) * (uint64_t)v32 + v35 + 1)
                  && (uint64_t v49 = (v32 + 1) * v33, v37 == *(unsigned __int8 *)(v36 + v49 + v35))
                  && v37 == *(unsigned __int8 *)(v36 + v49 + v48))
                {
                  unsigned int v69 = (int)v31;
                  int v50 = v70 - 6;
                  if (v70 >= 6)
                  {
                    int v51 = v70 + 6;
                    if (v70 + 6 >= v33)
                    {
                      int v51 = v33 - 1;
                      int v50 = v33 - 12;
                    }
                  }
                  else
                  {
                    int v50 = 0;
                    int v51 = 11;
                  }
                  int v53 = v69 - 6;
                  if (v69 >= 6)
                  {
                    int v54 = v69 + 6;
                    if (v69 + 6 >= v34)
                    {
                      int v54 = v34 - 1;
                      int v53 = v34 - 12;
                    }
                  }
                  else
                  {
                    int v53 = 0;
                    int v54 = 11;
                  }
                  int v55 = sub_10115CF08(a1, v53, v54, v50, v51, v70, v69, 12);
                  *(_DWORD *)(a2 + 784) = v55;
                  if (v55 >= 143)
                  {
                    int v56 = v70 - 20;
                    if (v70 >= 0x14)
                    {
                      int v57 = v70 + 20;
                      unsigned int v58 = *(unsigned __int16 *)(a1 + 110);
                      if (v70 + 20 >= v58)
                      {
                        int v57 = v58 - 1;
                        int v56 = v58 - 40;
                      }
                    }
                    else
                    {
                      int v56 = 0;
                      int v57 = 39;
                    }
                    int v59 = v69 - 20;
                    if (v69 >= 0x14)
                    {
                      int v60 = v69 + 20;
                      unsigned int v61 = *(unsigned __int16 *)(a1 + 108);
                      if (v69 + 20 >= v61)
                      {
                        int v60 = v61 - 1;
                        int v59 = v61 - 40;
                      }
                    }
                    else
                    {
                      int v59 = 0;
                      int v60 = 39;
                    }
                    int v62 = sub_10115CF08(a1, v59, v60, v56, v57, v70, v69, 40);
                    *(_DWORD *)(a2 + 784) = v62;
                    float v63 = *(float *)(a1 + 148);
                    float v64 = 0.9;
                    float v65 = 1.0;
                    if (v63 >= 5.0) {
                      float v64 = 1.0;
                    }
                    if (*(float *)(a1 + 156) > 1.0)
                    {
                      float v66 = *(float *)(a1 + 144) - v63;
                      if (v66 >= 2000.0) {
                        float v65 = 0.0005;
                      }
                      else {
                        float v65 = (float)(v66 / -2000.0) + 1.0;
                      }
                    }
                    float v68 = 0.25;
                    if (v62 >= 500) {
                      float v68 = (float)((float)v62 / 1600.0) * 0.2 + 0.8;
                    }
                    *(float *)(a2 + 788) = (float)(v64 * v65) * v68;
                  }
                }
                else
                {
                  *(void *)(a2 + 784) = 0x3F80000000000000;
                }
              }
              return 1;
            }
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023144B0);
            }
            uint64_t v45 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
            {
              LOWORD(v46) = *(_WORD *)(a1 + 108);
              double v47 = *(double *)(a1 + 128) + (double)v46 * *(double *)(a1 + 136);
              *(_DWORD *)std::string buf = 134283777;
              double v72 = a3;
              __int16 v73 = 2049;
              double v74 = v47;
              _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, "#Warning,DEM,latitude,%{private}.9lf,invalid,maxLatitude,%{private}.9lf", buf, 0x16u);
            }
            BOOL result = sub_10013D1A0(115, 2);
            if (!result) {
              return result;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 == -1) {
              goto LABEL_107;
            }
          }
        }
      }
    }
LABEL_138:
    dispatch_once(&qword_1024193D0, &stru_1023144B0);
    goto LABEL_107;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023144B0);
  }
  uint64_t v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#Warning,DEM,cellsize == 0", buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_107;
    }
    goto LABEL_138;
  }
  return result;
}

uint64_t sub_10115AC84(uint64_t a1, const std::string *a2, BOOL *a3)
{
  unint64_t v62 = 0;
  uint64_t v63 = 0;
  int v61 = 0;
  sub_10115CC9C(a1);
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v6 = (const char *)a2;
  }
  else {
    uint64_t v6 = (const char *)a2->__r_.__value_.__r.__words[0];
  }
  uint64_t v7 = fopen(v6, "rb");
  if (v7)
  {
    int v8 = v7;
    uint64_t v9 = ftell(v7);
    if (!sub_10115BF3C(v8, a1 + 64, &v62, &v63))
    {
LABEL_12:
      fclose(v8);
LABEL_13:
      sub_10115CC9C(a1);
      return 0;
    }
    if (fseek(v8, 0, 2))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      double v10 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#Error,DEM,fseek returned non-zero", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023144B0);
        }
        LOWORD(v74.st_dev) = 0;
        unsigned int v58 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLDigitalElevationModel::readCLDEMTileFromFile(CLDEMTile &, const std::string &, BOOL &)", "%s\n", v58);
        if (v58 != (char *)buf) {
          free(v58);
        }
      }
      goto LABEL_12;
    }
    uint64_t v16 = ftell(v8);
    fclose(v8);
    if (*(unsigned __int8 *)(a1 + 91) | *(unsigned __int8 *)(a1 + 90))
    {
      *a3 = 0;
      goto LABEL_13;
    }
    BOOL v17 = *(unsigned char *)(a1 + 78) == 2;
    *a3 = v17;
    if (!v17) {
      goto LABEL_13;
    }
    uint64_t v18 = v16 - v9;
    uint64_t v19 = *(_DWORD *)(a1 + 112) + *(unsigned __int8 *)(a1 + 79);
    uint64_t v20 = v63;
    if (v18 != v63 + v19)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      double v22 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#Error,DEM,Invalid CLDEM tile file - file size does not match headerLength+dataSizeBytes", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_13;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      LOWORD(v74.st_dev) = 0;
      goto LABEL_116;
    }
    if (v19 > 0x400000)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      double v21 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "#Error,DEM,tile is larger than the allowed maximum", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_13;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      LOWORD(v74.st_dev) = 0;
      goto LABEL_116;
    }
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v23 = (const char *)a2;
    }
    else {
      int v23 = (const char *)a2->__r_.__value_.__r.__words[0];
    }
    if (sub_1004BF004(v23, 3))
    {
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        double v24 = (const char *)a2;
      }
      else {
        double v24 = (const char *)a2->__r_.__value_.__r.__words[0];
      }
      int v25 = open(v24, 0);
      *(_DWORD *)a1 = v25;
      if (v25 == -1)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023144B0);
        }
        uint64_t v36 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
        {
          if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v37 = a2;
          }
          else {
            int v37 = (const std::string *)a2->__r_.__value_.__r.__words[0];
          }
          int v38 = *__error();
          *(_DWORD *)std::string buf = 136315394;
          *(void *)long long v76 = v37;
          *(_WORD *)&v76[8] = 1024;
          LODWORD(st_size) = v38;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "#Error,DEM,can't open,%s,errno,%d", buf, 0x12u);
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_100;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023144B0);
        }
        if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          double v39 = a2;
        }
        else {
          double v39 = (const std::string *)a2->__r_.__value_.__r.__words[0];
        }
        int v40 = *__error();
        v74.st_dev = 136315394;
        *(void *)&v74.st_mode = v39;
        WORD2(v74.st_ino) = 1024;
        *(_DWORD *)((char *)&v74.st_ino + 6) = v40;
      }
      else
      {
        if (fstat(v25, &v74) != -1)
        {
          double v26 = mmap(0, v74.st_size, 1, 2, *(_DWORD *)a1, 0);
          if (v26 == (void *)-1)
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023144B0);
            }
            int v50 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
            {
              int v51 = *__error();
              *(_DWORD *)std::string buf = 67109120;
              *(_DWORD *)long long v76 = v51;
              _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, "#Error,DEM,mmap,MAP_FAILED,errno,%d", buf, 8u);
            }
            if (!sub_10013D1A0(115, 0)) {
              goto LABEL_13;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023144B0);
            }
            int v52 = *__error();
            int v64 = 67109120;
            LODWORD(v65) = v52;
            goto LABEL_116;
          }
          *(void *)(a1 + 8) = v74.st_size;
          *(void *)(a1 + 16) = v26;
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023144B0);
          }
          double v27 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
          {
            if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v28 = a2;
            }
            else {
              int v28 = (const std::string *)a2->__r_.__value_.__r.__words[0];
            }
            uint64_t v30 = *(void *)(a1 + 8);
            uint64_t v29 = *(void *)(a1 + 16);
            *(_DWORD *)std::string buf = 136316162;
            *(void *)long long v76 = v28;
            *(_WORD *)&v76[8] = 2048;
            st_std::string::size_type size = v74.st_size;
            __int16 v78 = 1024;
            BOOL v79 = (v74.st_mode & 0xF000) == 0x8000;
            __int16 v80 = 2048;
            uint64_t v81 = v29;
            __int16 v82 = 2048;
            uint64_t v83 = v30;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "DEM,mmapDem,%s,size,%lld,regfile,%d,m,%p,size,%lu", buf, 0x30u);
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_100;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023144B0);
          }
          if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            double v31 = a2;
          }
          else {
            double v31 = (const std::string *)a2->__r_.__value_.__r.__words[0];
          }
          uint64_t v33 = *(void *)(a1 + 8);
          uint64_t v32 = *(void *)(a1 + 16);
          int v64 = 136316162;
          float v65 = v31;
          __int16 v66 = 2048;
          off_t v67 = v74.st_size;
          __int16 v68 = 1024;
          BOOL v69 = (v74.st_mode & 0xF000) == 0x8000;
          __int16 v70 = 2048;
          uint64_t v71 = v32;
          __int16 v72 = 2048;
          uint64_t v73 = v33;
          unsigned int v34 = (uint8_t *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLDigitalElevationModel::readCLDEMTileFromFile(CLDEMTile &, const std::string &, BOOL &)", "%s\n");
          goto LABEL_160;
        }
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023144B0);
        }
        double v41 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
        {
          if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v42 = a2;
          }
          else {
            uint64_t v42 = (const std::string *)a2->__r_.__value_.__r.__words[0];
          }
          int v43 = *__error();
          *(_DWORD *)std::string buf = 136315394;
          *(void *)long long v76 = v42;
          *(_WORD *)&v76[8] = 1024;
          LODWORD(st_size) = v43;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "#Error,DEM,can't stat,%s,errno,%d", buf, 0x12u);
        }
        if (!sub_10013D1A0(115, 0))
        {
LABEL_100:
          uint64_t v44 = *(void *)(a1 + 16);
          if (v44 && (uint64_t v45 = *(void *)(a1 + 8), v45 == v18) && v45)
          {
            if ((sub_10115BD44(v44 + v20, *(_DWORD *)(a1 + 112) + *(unsigned __int8 *)(a1 + 79), v62, &v61) & 1) == 0)
            {
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_1023144B0);
              }
              uint64_t v49 = qword_1024193D8;
              if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)std::string buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_INFO, "#Warning,DEM,calculateCLDEM_CRC returned false unexpectedly", buf, 2u);
              }
              if (!sub_10013D1A0(115, 2)) {
                goto LABEL_13;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_1023144B0);
              }
              LOWORD(v74.st_dev) = 0;
              int v48 = (uint8_t *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLDigitalElevationModel::readCLDEMTileFromFile(CLDEMTile &, const std::string &, BOOL &)", "%s\n");
              goto LABEL_117;
            }
            int v46 = v61;
            if (v61 == *(_DWORD *)(a1 + 116))
            {
              if (*(_DWORD *)(a1 + 112)) {
                *(void *)(a1 + 24) = *(void *)(a1 + 16) + v20 + *(unsigned __int8 *)(a1 + 79);
              }
              uint64_t v11 = 1;
              *(unsigned char *)(a1 + 32) = 1;
              std::string::operator=((std::string *)(a1 + 40), a2);
              return v11;
            }
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023144B0);
            }
            int v53 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
            {
              int v54 = *(_DWORD *)(a1 + 116);
              *(_DWORD *)std::string buf = 67109376;
              *(_DWORD *)long long v76 = v46;
              *(_WORD *)&v76[4] = 1024;
              *(_DWORD *)&v76[6] = v54;
              _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "#Error,DEM,Invalid CLDEM,crc fail,calculated,%X,received,%X", buf, 0xEu);
            }
            if (!sub_10013D1A0(115, 0)) {
              goto LABEL_13;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023144B0);
            }
            int v55 = *(_DWORD *)(a1 + 116);
            v74.st_dev = 67109376;
            *(_DWORD *)&v74.st_mode = v46;
            LOWORD(v74.st_ino) = 1024;
            *(_DWORD *)((char *)&v74.st_ino + 2) = v55;
          }
          else
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023144B0);
            }
            double v47 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)std::string buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "#Error,mmap failed", buf, 2u);
            }
            if (!sub_10013D1A0(115, 0)) {
              goto LABEL_13;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023144B0);
            }
            LOWORD(v74.st_dev) = 0;
          }
LABEL_116:
          int v48 = (uint8_t *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLDigitalElevationModel::readCLDEMTileFromFile(CLDEMTile &, const std::string &, BOOL &)", "%s\n");
LABEL_117:
          if (v48 != buf) {
            free(v48);
          }
          goto LABEL_13;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023144B0);
        }
        if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v59 = a2;
        }
        else {
          int v59 = (const std::string *)a2->__r_.__value_.__r.__words[0];
        }
        int v60 = *__error();
        int v64 = 136315394;
        float v65 = v59;
        __int16 v66 = 1024;
        LODWORD(v67) = v60;
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      uint64_t v35 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "#Error,DEM,CLCommonSetFileProtectionClass,fail", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_100;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      LOWORD(v74.st_dev) = 0;
    }
    unsigned int v34 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLDigitalElevationModel::readCLDEMTileFromFile(CLDEMTile &, const std::string &, BOOL &)", "%s\n");
LABEL_160:
    if (v34 != buf) {
      free(v34);
    }
    goto LABEL_100;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023144B0);
  }
  double v12 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      double v13 = a2;
    }
    else {
      double v13 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    }
    int v14 = *__error();
    *(_DWORD *)std::string buf = 136446466;
    *(void *)long long v76 = v13;
    *(_WORD *)&v76[8] = 1026;
    LODWORD(st_size) = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#Error,DEM,Unable to load %{public}s,errno,%{public}d", buf, 0x12u);
  }
  uint64_t v11 = 0;
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      a2 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    }
    int v56 = *__error();
    v74.st_dev = 136446466;
    *(void *)&v74.st_mode = a2;
    WORD2(v74.st_ino) = 1026;
    *(_DWORD *)((char *)&v74.st_ino + 6) = v56;
    int v57 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLDigitalElevationModel::readCLDEMTileFromFile(CLDEMTile &, const std::string &, BOOL &)", "%s\n", v57);
    if (v57 != (char *)buf) {
      free(v57);
    }
    return 0;
  }
  return v11;
}

uint64_t sub_10115BD44(uint64_t result, uint64_t a2, unint64_t a3, _DWORD *a4)
{
  if (result)
  {
    uint64_t v5 = a2 - 4;
    if (a2 - 4 <= a3)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      uint64_t v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 134218240;
        unint64_t v10 = a3;
        __int16 v11 = 2050;
        uint64_t v12 = v5;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#Error,DEM,indexCrcInBuffer,%zu,exceeds (bufferSize-4) bytes,%{public}zu", buf, 0x16u);
      }
      BOOL v7 = sub_10013D1A0(115, 0);
      BOOL result = 0;
      if (v7)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023144B0);
        }
        int v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLDigitalElevationModel::calculateCLDEM_CRC(unsigned char *, const size_t, const size_t, unsigned int &)", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
        return 0;
      }
    }
    else
    {
      *a4 = sub_100D5CFCC(result, a2, a3);
      return 1;
    }
  }
  return result;
}

BOOL sub_10115BF3C(FILE *a1, uint64_t a2, void *a3, void *a4)
{
  if (!a1 || feof(a1)) {
    return 0;
  }
  uint64_t v10 = 0;
  while (1)
  {
    LOBYTE(__ptr) = 0;
    if (fread(&__ptr, 1uLL, 1uLL, a1) != 1) {
      return 0;
    }
    uint64_t v11 = ftell(a1);
    if (__ptr == 67) {
      break;
    }
LABEL_12:
    BOOL v8 = 0;
    if (!feof(a1) && v10++ < 0xFF) {
      continue;
    }
    return v8;
  }
  uint64_t v12 = v11;
  v166[0] = 67;
  if (fread(&v166[1], 1uLL, 4uLL, a1) != 4) {
    return 0;
  }
  *(_DWORD *)a2 = *(_DWORD *)v166;
  int v14 = v166[4];
  *(unsigned char *)(a2 + 4) = v166[4];
  v13.i32[0] = *(_DWORD *)a2;
  if (vmovn_s16((int16x8_t)vmovl_u8(v13)).u32[0] != 1162103875 || v14 != 77)
  {
    if (!fseek(a1, v12, 0)) {
      goto LABEL_12;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    BOOL v69 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_ERROR, "#Error,DEM,fseek returned non-zero", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    LOWORD(v78) = 0;
    goto LABEL_70;
  }
  *a4 = v10;
  if (fread(&v166[5], 1uLL, 9uLL, a1) != 9)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    __int16 v70 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_ERROR, "#Error,DEM,Invalid CLDEM tile file - header string", buf, 2u);
    }
    BOOL v8 = 0;
    if (!sub_10013D1A0(115, 0)) {
      return v8;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    LOWORD(v78) = 0;
    goto LABEL_70;
  }
  *(void *)a2 = *(void *)v166;
  *(void *)(a2 + 6) = *(void *)&v166[6];
  if (fread(&v167, 1uLL, 1uLL, a1) != 1)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    uint64_t v71 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_ERROR, "#Error,DEM,Invalid CLDEM tile file - version", buf, 2u);
    }
    BOOL v8 = 0;
    if (!sub_10013D1A0(115, 0)) {
      return v8;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    LOWORD(v78) = 0;
    goto LABEL_70;
  }
  *(unsigned char *)(a2 + 14) = v167;
  if (fread(&v168, 1uLL, 1uLL, a1) != 1)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    __int16 v72 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_ERROR, "#Error,DEM,Invalid CLDEM tile file - headerLength", buf, 2u);
    }
    BOOL v8 = 0;
    if (!sub_10013D1A0(115, 0)) {
      return v8;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    LOWORD(v78) = 0;
    goto LABEL_70;
  }
  uint64_t v16 = v168;
  *(unsigned char *)(a2 + 15) = v168;
  size_t v17 = fread(&v169, 1uLL, v16 - 16, a1);
  uint64_t v18 = *(unsigned __int8 *)(a2 + 15);
  if (v17 != v18 - 16)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    uint64_t v73 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_ERROR, "#Error,DEM,Invalid CLDEM tile file - headerLength", buf, 2u);
    }
    BOOL v8 = 0;
    if (!sub_10013D1A0(115, 0)) {
      return v8;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    LOWORD(v78) = 0;
LABEL_70:
    stat v74 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLDigitalElevationModel::readCLDEMTileHeaderHelper(FILE *, CLDEMTileFileHeader &, size_t &, size_t &)", "%s\n");
    goto LABEL_71;
  }
  *(unsigned char *)(a2 + 16) = v169;
  *(_WORD *)(a2 + 17) = v170;
  *(_DWORD *)(a2 + 19) = v171;
  *(unsigned char *)(a2 + 23) = v172;
  *(_DWORD *)(a2 + 24) = v173;
  *(_DWORD *)(a2 + 28) = bswap32(v174);
  *(void *)(a2 + 32) = bswap64(v175);
  *(_DWORD *)(a2 + 40) = bswap32(v176);
  unsigned int v19 = bswap32(v177) >> 16;
  *(_WORD *)(a2 + 44) = v19;
  unsigned int v20 = bswap32(v178) >> 16;
  *(_WORD *)(a2 + 46) = v20;
  unsigned int v21 = bswap32(v179);
  *(_DWORD *)(a2 + 48) = v21;
  if (v21 != v20 * v19)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    long long v75 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_INFO, "#Warning,DEM,header.dataSizeBytes != header.nrows*header.ncols", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    LOWORD(v78) = 0;
    stat v74 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLDigitalElevationModel::readCLDEMTileHeaderHelper(FILE *, CLDEMTileFileHeader &, size_t &, size_t &)", "%s\n");
LABEL_71:
    if (v74 != buf) {
      free(v74);
    }
    return 0;
  }
  *a3 = 52;
  *(_DWORD *)(a2 + 52) = bswap32(v180);
  unint64_t __ptr = (unint64_t)vzip1_s32(*(int32x2_t *)v181, *(int32x2_t *)v182);
  unint64_t v22 = bswap64(__ptr);
  *(void *)(a2 + 56) = bswap64(*(void *)&vext_s8(*(int8x8_t *)&v181[4], *(int8x8_t *)&v181[4], 4uLL));
  *(void *)(a2 + 64) = v22;
  *(void *)(a2 + 72) = bswap64(*(unint64_t *)&v182[4]);
  *(_DWORD *)(a2 + 80) = bswap32(v183);
  *(_DWORD *)(a2 + 84) = bswap32(v184);
  *(_DWORD *)(a2 + 88) = bswap32(v185);
  *(_DWORD *)(a2 + 92) = bswap32(v186);
  *(_DWORD *)(a2 + 96) = bswap32(v187);
  BOOL v8 = v18 == 100;
  if (v18 == 100)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    int v23 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v24 = *(unsigned __int8 *)(a2 + 14);
      int v25 = *(unsigned __int8 *)(a2 + 15);
      int v26 = *(unsigned __int8 *)(a2 + 16);
      int v27 = *(unsigned __int8 *)(a2 + 17);
      int v28 = *(unsigned __int8 *)(a2 + 18);
      int v29 = *(unsigned __int8 *)(a2 + 26);
      int v30 = *(unsigned __int8 *)(a2 + 27);
      int v31 = *(_DWORD *)(a2 + 28);
      uint64_t v32 = *(void *)(a2 + 32);
      double v33 = *(float *)(a2 + 40);
      int v34 = *(unsigned __int16 *)(a2 + 44);
      int v35 = *(unsigned __int16 *)(a2 + 46);
      int v36 = *(_DWORD *)(a2 + 48);
      int v37 = *(_DWORD *)(a2 + 52);
      uint64_t v38 = *(void *)(a2 + 56);
      uint64_t v39 = *(void *)(a2 + 64);
      uint64_t v40 = *(void *)(a2 + 72);
      double v41 = *(float *)(a2 + 80);
      double v42 = *(float *)(a2 + 84);
      double v43 = *(float *)(a2 + 88);
      double v44 = *(float *)(a2 + 92);
      double v45 = *(float *)(a2 + 96);
      *(_DWORD *)std::string buf = 67114496;
      int v123 = v24;
      __int16 v124 = 1024;
      int v125 = v25;
      __int16 v126 = 1024;
      int v127 = v26;
      __int16 v128 = 1024;
      int v129 = v27;
      __int16 v130 = 1024;
      int v131 = v28;
      __int16 v132 = 1024;
      int v133 = v29;
      __int16 v134 = 1024;
      int v135 = v30;
      __int16 v136 = 1024;
      int v137 = v31;
      __int16 v138 = 2048;
      uint64_t v139 = v32;
      __int16 v140 = 2048;
      double v141 = v33;
      __int16 v142 = 1024;
      int v143 = v34;
      __int16 v144 = 1024;
      int v145 = v35;
      __int16 v146 = 1024;
      int v147 = v36;
      __int16 v148 = 1024;
      int v149 = v37;
      __int16 v150 = 2048;
      uint64_t v151 = v38;
      __int16 v152 = 2048;
      uint64_t v153 = v39;
      __int16 v154 = 2048;
      uint64_t v155 = v40;
      __int16 v156 = 2048;
      double v157 = v41;
      __int16 v158 = 2048;
      double v159 = v42;
      __int16 v160 = 2048;
      double v161 = v43;
      __int16 v162 = 2048;
      double v163 = v44;
      __int16 v164 = 2048;
      double v165 = v45;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "DEM,header,vers,%d,headerLen,%d,noDataValue,%d,importance,%d,overlapInPixels,%d,dataElementType,%d,compressionType,%d,expirationAge,%d,timestamp,%.1f,uncertainty_m,%.1f,nrows,%d,ncols,%d,dataSizeBytes,%d,crc,%d,xllcorner,%f,yllcorner,%f,cellsize,%f,maxalt,%f,minalt,%f,medianalt,%f,scaleFactor,%f,meanUndulation,%f", buf, 0xAEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      int v46 = *(unsigned __int8 *)(a2 + 14);
      int v47 = *(unsigned __int8 *)(a2 + 15);
      int v48 = *(unsigned __int8 *)(a2 + 16);
      int v49 = *(unsigned __int8 *)(a2 + 17);
      int v50 = *(unsigned __int8 *)(a2 + 18);
      int v51 = *(unsigned __int8 *)(a2 + 26);
      int v52 = *(unsigned __int8 *)(a2 + 27);
      int v53 = *(_DWORD *)(a2 + 28);
      uint64_t v54 = *(void *)(a2 + 32);
      double v55 = *(float *)(a2 + 40);
      int v56 = *(unsigned __int16 *)(a2 + 44);
      int v57 = *(unsigned __int16 *)(a2 + 46);
      int v58 = *(_DWORD *)(a2 + 48);
      int v59 = *(_DWORD *)(a2 + 52);
      uint64_t v60 = *(void *)(a2 + 56);
      uint64_t v61 = *(void *)(a2 + 64);
      uint64_t v62 = *(void *)(a2 + 72);
      double v63 = *(float *)(a2 + 80);
      double v64 = *(float *)(a2 + 84);
      double v65 = *(float *)(a2 + 88);
      double v66 = *(float *)(a2 + 92);
      double v67 = *(float *)(a2 + 96);
      int v78 = 67114496;
      int v79 = v46;
      __int16 v80 = 1024;
      int v81 = v47;
      __int16 v82 = 1024;
      int v83 = v48;
      __int16 v84 = 1024;
      int v85 = v49;
      __int16 v86 = 1024;
      int v87 = v50;
      __int16 v88 = 1024;
      int v89 = v51;
      __int16 v90 = 1024;
      int v91 = v52;
      __int16 v92 = 1024;
      int v93 = v53;
      __int16 v94 = 2048;
      uint64_t v95 = v54;
      __int16 v96 = 2048;
      double v97 = v55;
      __int16 v98 = 1024;
      int v99 = v56;
      __int16 v100 = 1024;
      int v101 = v57;
      __int16 v102 = 1024;
      int v103 = v58;
      __int16 v104 = 1024;
      int v105 = v59;
      __int16 v106 = 2048;
      uint64_t v107 = v60;
      __int16 v108 = 2048;
      uint64_t v109 = v61;
      __int16 v110 = 2048;
      uint64_t v111 = v62;
      __int16 v112 = 2048;
      double v113 = v63;
      __int16 v114 = 2048;
      double v115 = v64;
      __int16 v116 = 2048;
      double v117 = v65;
      __int16 v118 = 2048;
      double v119 = v66;
      __int16 v120 = 2048;
      double v121 = v67;
      __int16 v68 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLDigitalElevationModel::readCLDEMTileHeaderHelper(FILE *, CLDEMTileFileHeader &, size_t &, size_t &)", "%s\n");
      goto LABEL_89;
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    long long v76 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_ERROR, "#Error,DEM,Invalid CLDEM tile file - headerLength", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      LOWORD(v78) = 0;
      __int16 v68 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLDigitalElevationModel::readCLDEMTileHeaderHelper(FILE *, CLDEMTileFileHeader &, size_t &, size_t &)", "%s\n");
LABEL_89:
      if (v68 != buf) {
        free(v68);
      }
    }
  }
  return v8;
}

void *sub_10115CC9C(uint64_t a1)
{
  int v2 = *(_DWORD *)a1;
  if ((v2 & 0x80000000) == 0)
  {
    close(v2);
    *(_DWORD *)a1 = -1;
  }
  BOOL result = *(void **)(a1 + 16);
  if (result)
  {
    size_t v4 = *(void *)(a1 + 8);
    if (v4) {
      BOOL result = (void *)munmap(result, v4);
    }
  }
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  if (*(char *)(a1 + 63) < 0)
  {
    **(unsigned char **)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 63) = 0;
  }
  return result;
}

void sub_10115CD24(void *a1, uint64_t *a2, int a3, int a4, int a5, _DWORD *a6)
{
  unint64_t v30 = 0;
  uint64_t v12 = (char *)sub_10017EA34((uint64_t)&v30, 1uLL);
  unint64_t v14 = (unint64_t)&v12[4 * v13];
  *(_DWORD *)uint64_t v12 = a4;
  double v15 = v12 + 4;
  std::string __p = v12;
  unint64_t v30 = v14;
  int v29 = v12 + 4;
  if ((unint64_t)(v12 + 4) >= v14)
  {
    size_t v17 = (char *)__p;
    uint64_t v18 = (v15 - (unsigned char *)__p) >> 2;
    unint64_t v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 62) {
      sub_1001D7FD4();
    }
    uint64_t v20 = v14 - (void)__p;
    if (v20 >> 1 > v19) {
      unint64_t v19 = v20 >> 1;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v19;
    }
    if (v21)
    {
      unint64_t v22 = (char *)sub_10017EA34((uint64_t)&v30, v21);
      size_t v17 = (char *)__p;
      double v15 = v29;
    }
    else
    {
      unint64_t v22 = 0;
    }
    int v23 = &v22[4 * v18];
    int v24 = &v22[4 * v21];
    *(_DWORD *)int v23 = a3;
    uint64_t v16 = v23 + 4;
    while (v15 != v17)
    {
      int v25 = *((_DWORD *)v15 - 1);
      v15 -= 4;
      *((_DWORD *)v23 - 1) = v25;
      v23 -= 4;
    }
    std::string __p = v23;
    int v29 = v16;
    unint64_t v30 = (unint64_t)v24;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    *((_DWORD *)v12 + 1) = a3;
    uint64_t v16 = v12 + 8;
  }
  int v29 = v16;
  unint64_t v26 = a2[1];
  if (v26 >= a2[2])
  {
    uint64_t v27 = sub_100ACDDFC(a2, (uint64_t)&__p);
  }
  else
  {
    sub_100ACDDA8((uint64_t)a2, (uint64_t)&__p);
    uint64_t v27 = v26 + 24;
  }
  a2[1] = v27;
  *(_DWORD *)(*(void *)(*a1 + 24 * a3) + 4 * a4) = a5;
  ++*a6;
  if (__p)
  {
    int v29 = (char *)__p;
    operator delete(__p);
  }
}

void sub_10115CEEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10115CF08(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  int v16 = *(unsigned __int8 *)(*(void *)(a1 + 24) + a6 + *(unsigned __int16 *)(a1 + 110) * a7);
  unsigned int v62 = 0;
  memset(v61, 0, sizeof(v61));
  int v60 = 0;
  unint64_t v17 = a8;
  sub_100D0C2C0(&__p, a8, &v60);
  sub_10115D36C(v61, v17, (uint64_t)&__p);
  if (__p)
  {
    int v58 = __p;
    operator delete(__p);
  }
  if (a3 > a2)
  {
    uint64_t v18 = v61[0];
    uint64_t v19 = a3;
    uint64_t v20 = *(void *)(a1 + 24) + a4 + *(unsigned __int16 *)(a1 + 110) * (uint64_t)a3;
    uint64_t v21 = -(uint64_t)*(unsigned __int16 *)(a1 + 110);
    do
    {
      --v17;
      if (a5 > a4)
      {
        unint64_t v22 = *(_DWORD **)(v18 + 24 * v17);
        int v23 = (unsigned __int8 *)v20;
        uint64_t v24 = (a5 - a4);
        do
        {
          int v25 = *v23++;
          *v22++ = v25;
          --v24;
        }
        while (v24);
      }
      --v19;
      v20 += v21;
    }
    while (v19 > a2);
  }
  std::string __p = 0;
  int v58 = 0;
  unint64_t v59 = 0;
  unint64_t v56 = 0;
  unint64_t v26 = sub_10017EA34((uint64_t)&v56, 1uLL);
  int v27 = a6 - a4;
  unint64_t v29 = (unint64_t)&v26[v28];
  *unint64_t v26 = v27;
  unint64_t v30 = v26 + 1;
  p_p = v26;
  unint64_t v56 = v29;
  double v55 = v26 + 1;
  int v31 = a7 - a2;
  if ((unint64_t)(v26 + 1) >= v29)
  {
    double v33 = p_p;
    uint64_t v34 = (v30 - (unsigned char *)p_p) >> 2;
    unint64_t v35 = v34 + 1;
    if ((unint64_t)(v34 + 1) >> 62) {
      sub_1001D7FD4();
    }
    uint64_t v36 = v29 - (void)p_p;
    if (v36 >> 1 > v35) {
      unint64_t v35 = v36 >> 1;
    }
    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v37 = v35;
    }
    if (v37)
    {
      uint64_t v38 = (char *)sub_10017EA34((uint64_t)&v56, v37);
      double v33 = p_p;
      unint64_t v30 = v55;
    }
    else
    {
      uint64_t v38 = 0;
    }
    uint64_t v39 = &v38[4 * v34];
    uint64_t v40 = &v38[4 * v37];
    *(_DWORD *)uint64_t v39 = v31;
    uint64_t v32 = v39 + 4;
    while (v30 != v33)
    {
      int v41 = *((_DWORD *)v30 - 1);
      v30 -= 4;
      *((_DWORD *)v39 - 1) = v41;
      v39 -= 4;
    }
    p_p = v39;
    double v55 = v32;
    unint64_t v56 = (unint64_t)v40;
    if (v33) {
      operator delete(v33);
    }
  }
  else
  {
    v26[1] = v31;
    uint64_t v32 = v26 + 2;
  }
  double v55 = v32;
  double v42 = v58;
  if ((unint64_t)v58 >= v59)
  {
    double v43 = (void *)sub_100ACDDFC((uint64_t *)&__p, (uint64_t)&p_p);
  }
  else
  {
    *int v58 = 0;
    v42[1] = 0;
    v42[2] = 0;
    sub_10010F834(v42, p_p, (uint64_t)v55, (v55 - (unsigned char *)p_p) >> 2);
    double v43 = v42 + 3;
  }
  int v58 = v43;
  *(_DWORD *)(*(void *)(v61[0] + 24 * v31) + 4 * v27) = *(unsigned __int8 *)(a1 + 80);
  while (v43 != __p)
  {
    double v45 = v43 - 3;
    double v44 = (int *)*(v43 - 3);
    uint64_t v46 = *v44;
    int v47 = v44[1];
    if (v44)
    {
      *(v43 - 2) = v44;
      operator delete(v44);
    }
    int v58 = v45;
    int v48 = v46 + 1;
    if ((int)v46 + 1 < a8 && *(_DWORD *)(*(void *)(v61[0] + 24 * v47) + 4 * v48) == v16) {
      sub_10115CD24(v61, (uint64_t *)&__p, v47, v48, *(unsigned __int8 *)(a1 + 80), &v62);
    }
    int v49 = v47 + 1;
    if (v47 + 1 < a8 && *(_DWORD *)(*(void *)(v61[0] + 24 * v49) + 4 * v46) == v16) {
      sub_10115CD24(v61, (uint64_t *)&__p, v49, v46, *(unsigned __int8 *)(a1 + 80), &v62);
    }
    unsigned int v50 = v46 - 1;
    if ((int)v46 >= 1 && *(_DWORD *)(*(void *)(v61[0] + 24 * v47) + 4 * v50) == v16) {
      sub_10115CD24(v61, (uint64_t *)&__p, v47, v50, *(unsigned __int8 *)(a1 + 80), &v62);
    }
    unsigned int v51 = v47 - 1;
    if (v47 >= 1 && *(_DWORD *)(*(void *)(v61[0] + 24 * v51) + 4 * v46) == v16) {
      sub_10115CD24(v61, (uint64_t *)&__p, v51, v46, *(unsigned __int8 *)(a1 + 80), &v62);
    }
    double v43 = v58;
  }
  uint64_t v52 = v62;
  if (p_p)
  {
    double v55 = p_p;
    operator delete(p_p);
  }
  p_p = &__p;
  sub_1001DCABC((void ***)&p_p);
  std::string __p = v61;
  sub_1001DCABC((void ***)&__p);
  return v52;
}

void sub_10115D2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char **__p, char **a11, uint64_t a12, char *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (__p)
  {
    a11 = __p;
    operator delete(__p);
  }
  std::string __p = &a13;
  sub_1001DCABC((void ***)&__p);
  a13 = &a17;
  sub_1001DCABC((void ***)&a13);
  _Unwind_Resume(a1);
}

void sub_10115D36C(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  BOOL v6 = a2 >= v5;
  unint64_t v7 = a2 - v5;
  if (v7 != 0 && v6)
  {
    sub_10115F6E8(a1, v7, a3);
  }
  else if (!v6)
  {
    uint64_t v8 = *a1 + 24 * a2;
    if (v4 != v8)
    {
      uint64_t v9 = a1[1];
      do
      {
        uint64_t v11 = *(void **)(v9 - 24);
        v9 -= 24;
        uint64_t v10 = v11;
        if (v11)
        {
          *(void *)(v4 - 16) = v10;
          operator delete(v10);
        }
        uint64_t v4 = v9;
      }
      while (v9 != v8);
    }
    a1[1] = v8;
  }
}

uint64_t sub_10115D414(uint64_t a1, char a2)
{
  uint64_t v3 = (unsigned char *)(a1 + 104);
  (*(void (**)(uint64_t))(*(void *)(a1 + 104) + 16))(a1 + 104);
  v3[472] = a2;
  return (*(uint64_t (**)(unsigned char *))(*(void *)v3 + 24))(v3);
}

uint64_t sub_10115D490(uint64_t a1, char a2)
{
  uint64_t v3 = (unsigned char *)(a1 + 104);
  (*(void (**)(uint64_t))(*(void *)(a1 + 104) + 16))(a1 + 104);
  v3[473] = a2;
  return (*(uint64_t (**)(unsigned char *))(*(void *)v3 + 24))(v3);
}

uint64_t sub_10115D50C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = a1 + 104;
  (*(void (**)(uint64_t))(*(void *)(a1 + 104) + 16))(a1 + 104);
  switch(a3)
  {
    case 0:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      unint64_t v7 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "DEM,avl download status,NONE", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023144B0);
        }
        LOWORD(__p[0]) = 0;
        uint64_t v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLDigitalElevationModel::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v8);
        goto LABEL_70;
      }
      break;
    case 1:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      int v25 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "DEM,avl download status,STARTED", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023144B0);
        }
        LOWORD(__p[0]) = 0;
        double v43 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLDigitalElevationModel::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v43);
        if (v43 != buf) {
          free(v43);
        }
      }
      *(CFAbsoluteTime *)(a1 + 584) = CFAbsoluteTimeGetCurrent();
      break;
    case 2:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      uint64_t v9 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "DEM,avl download status,COMPLETED", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023144B0);
        }
        LOWORD(__p[0]) = 0;
        int v41 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLDigitalElevationModel::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v41);
        if (v41 != buf) {
          free(v41);
        }
      }
      sub_1005C768C(a2, (uint64_t)__p);
      *(_DWORD *)(a1 + 600) = 1;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      uint64_t v10 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v11 = __p;
        if (v53 < 0) {
          uint64_t v11 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "DEM,avl downloaded,%{public}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023144B0);
        }
        double v44 = __p;
        if (v53 < 0) {
          double v44 = (void **)__p[0];
        }
        LODWORD(v51.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 4) = (std::string::size_type)v44;
        double v45 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLDigitalElevationModel::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v45);
        if (v45 != buf) {
          free(v45);
        }
      }
      if (v53 >= 0) {
        uint64_t v12 = __p;
      }
      else {
        uint64_t v12 = (void **)__p[0];
      }
      if (!sub_1004BF004((const char *)v12, 4))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023144B0);
        }
        uint64_t v13 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
        {
          unint64_t v14 = __p;
          if (v53 < 0) {
            unint64_t v14 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "#Warning,DEM,Cannot set protection class for DEM avl file,%{public}s", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023144B0);
          }
          int v48 = __p;
          if (v53 < 0) {
            int v48 = (void **)__p[0];
          }
          LODWORD(v51.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 4) = (std::string::size_type)v48;
          int v49 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLDigitalElevationModel::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v49);
          if (v49 != buf) {
            free(v49);
          }
        }
      }
      double v15 = (char *)sub_1000A6958();
      sub_1000A5670(v15, (uint64_t)&v51);
      if (*(char *)(a1 + 439) < 0)
      {
        sub_1000DC48C(buf, *(void **)(a1 + 416), *(void *)(a1 + 424));
      }
      else
      {
        *(_OWORD *)std::string buf = *(_OWORD *)(a1 + 416);
        *(void *)&uint8_t buf[16] = *(void *)(a1 + 432);
      }
      if (buf[23] >= 0) {
        int v27 = buf;
      }
      else {
        int v27 = *(const std::string::value_type **)buf;
      }
      if (buf[23] >= 0) {
        std::string::size_type v28 = buf[23];
      }
      else {
        std::string::size_type v28 = *(void *)&buf[8];
      }
      std::string::append(&v51, v27, v28);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      *(CFAbsoluteTime *)(a1 + 584) = CFAbsoluteTimeGetCurrent();
      if (v53 >= 0) {
        unint64_t v29 = __p;
      }
      else {
        unint64_t v29 = (void **)__p[0];
      }
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v30 = &v51;
      }
      else {
        unint64_t v30 = (std::string *)v51.__r_.__value_.__r.__words[0];
      }
      sub_1004BC3D8((const char *)v29, (const char *)v30);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      int v31 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v32 = __p;
        if (v53 < 0) {
          uint64_t v32 = (void **)__p[0];
        }
        double v33 = &v51;
        if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          double v33 = (std::string *)v51.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 136446466;
        *(void *)&uint8_t buf[4] = v32;
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&unsigned char buf[14] = v33;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "DEM,avl file decompressed,%{public}s,to,%{public}s", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023144B0);
        }
        uint64_t v46 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLDigitalElevationModel::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v46);
        if (v46 != buf) {
          free(v46);
        }
      }
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v34 = &v51;
      }
      else {
        uint64_t v34 = (std::string *)v51.__r_.__value_.__r.__words[0];
      }
      if (!sub_1004BF004((const char *)v34, 4))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023144B0);
        }
        unint64_t v35 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
        {
          uint64_t v36 = &v51;
          if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v36 = (std::string *)v51.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = v36;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "#Warning,DEM,Cannot set protection class for DEM decompressed avl file,%{public}s", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023144B0);
          }
          unsigned int v50 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLDigitalElevationModel::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v50);
          if (v50 != buf) {
            free(v50);
          }
        }
      }
      uint64_t v37 = a1 + 8;
      int v38 = sub_100142194(v37);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      uint64_t v39 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = v38;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "DEM,is availability file valid,%{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023144B0);
        }
        int v47 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLDigitalElevationModel::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v47);
        if (v47 != buf) {
          free(v47);
        }
      }
      sub_1008B4AB8(v37);
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v51.__r_.__value_.__l.__data_);
      }
      goto LABEL_114;
    case 3:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      int v16 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#Warning,DEM,avl download status,FAILED", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023144B0);
        }
        LOWORD(__p[0]) = 0;
        double v42 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLDigitalElevationModel::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v42);
        if (v42 != buf) {
          free(v42);
        }
      }
      int v17 = *(_DWORD *)(a1 + 600);
      if (v17 < 5) {
        int v18 = v17 + 1;
      }
      else {
        int v18 = v17 + 10;
      }
      *(_DWORD *)(a1 + 600) = v18;
      sub_1005C768C(a2, (uint64_t)__p);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      uint64_t v19 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v20 = __p;
        if (v53 < 0) {
          uint64_t v20 = (void **)__p[0];
        }
        int v21 = *(_DWORD *)(a1 + 600);
        *(_DWORD *)std::string buf = 136446466;
        *(void *)&uint8_t buf[4] = v20;
        *(_WORD *)&unsigned char buf[12] = 1026;
        *(_DWORD *)&unsigned char buf[14] = v21;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#Warning,DEM,avl download request failed,%{public}s,retryMultiplier,%{public}d", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023144B0);
        }
        unint64_t v22 = __p;
        if (v53 < 0) {
          unint64_t v22 = (void **)__p[0];
        }
        int v23 = *(_DWORD *)(a1 + 600);
        LODWORD(v51.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 4) = (std::string::size_type)v22;
        WORD2(v51.__r_.__value_.__r.__words[1]) = 1026;
        *(_DWORD *)((char *)&v51.__r_.__value_.__r.__words[1] + 6) = v23;
        uint64_t v24 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLDigitalElevationModel::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v24);
        if (v24 != buf) {
          free(v24);
        }
      }
LABEL_114:
      if (v53 < 0) {
        operator delete(__p[0]);
      }
      break;
    default:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      unint64_t v26 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = a3;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#Warning,DEM,avl download status,%{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023144B0);
        }
        LODWORD(__p[0]) = 67240192;
        HIDWORD(__p[0]) = a3;
        uint64_t v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLDigitalElevationModel::onAvlFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v8);
LABEL_70:
        if (v8 != buf) {
          free(v8);
        }
      }
      break;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
}

void sub_10115E610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  sub_1019DB560((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_10115E6D0(uint64_t a1, uint64_t a2)
{
  if (!*(_DWORD *)(a1 + 412)) {
    return 0;
  }
  int v2 = *(_DWORD *)(a2 + 8);
  uint64_t result = 1;
  if (v2 <= 99)
  {
    BOOL v4 = v2 > 0x29;
    uint64_t v5 = (1 << v2) & 0x20000000150;
    if (!v4 && v5 != 0) {
      return result;
    }
    return 0;
  }
  if (v2 > 19149)
  {
    BOOL v7 = v2 == 19150;
    int v8 = 90603;
  }
  else
  {
    BOOL v7 = v2 == 100;
    int v8 = 11805;
  }
  if (!v7 && v2 != v8) {
    return 0;
  }
  return result;
}

double sub_10115E744()
{
  double v9 = 0.0;
  sub_1000C7F88(buf);
  int v0 = sub_1000A699C(*(uint64_t *)&buf[0], "DemAvlFileUpdatePeriodOverWifi", &v9);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v0)
  {
    if (v9 > 0.0)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      uint64_t v1 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0]) = 134349056;
        *(double *)((char *)buf + 4) = v9;
        _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "DEM,DemAvlFileUpdatePeriodOverWifi,%{public}.1lf", (uint8_t *)buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023144B0);
        }
        int v10 = 134349056;
        uint64_t v11 = *(void *)&v9;
        BOOL v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CFTimeInterval CLDigitalElevationModel::getAvlFileDownloadRateOverWifi() const", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
      return v9;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0]) = 134349056;
      *(double *)((char *)buf + 4) = v9;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#Warning,DEM,given avl update rate over WiFi is invalid,%{public}.1lf,using default value instead", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      int v10 = 134349056;
      uint64_t v11 = *(void *)&v9;
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CFTimeInterval CLDigitalElevationModel::getAvlFileDownloadRateOverWifi() const", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023144B0);
  }
  BOOL v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0]) = 134349056;
    *(void *)((char *)buf + 4) = 0x40F5180000000000;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "DEM,DemAvlFileUpdatePeriodOverWifi,%{public}.1lf", (uint8_t *)buf, 0xCu);
  }
  double v2 = 86400.0;
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    int v10 = 134349056;
    uint64_t v11 = 0x40F5180000000000;
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CFTimeInterval CLDigitalElevationModel::getAvlFileDownloadRateOverWifi() const", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return v2;
}

void sub_10115EBE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1000DB0A0(a16);
  }
  _Unwind_Resume(exception_object);
}

double sub_10115EC08()
{
  double v9 = 0.0;
  sub_1000C7F88(buf);
  int v0 = sub_1000A699C(*(uint64_t *)&buf[0], "DemAvlFileUpdatePeriodOverCell", &v9);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v0)
  {
    if (v9 > 0.0)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      uint64_t v1 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0]) = 134349056;
        *(double *)((char *)buf + 4) = v9;
        _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "DEM,DemAvlFileUpdatePeriodOverCell,%{public}.1lf", (uint8_t *)buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023144B0);
        }
        int v10 = 134349056;
        uint64_t v11 = *(void *)&v9;
        BOOL v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CFTimeInterval CLDigitalElevationModel::getAvlFileDownloadRateOverCell() const", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
      return v9;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0]) = 134349056;
      *(double *)((char *)buf + 4) = v9;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#Warning,DEM,given avl update rate over Cell is invalid,%{public}.1lf,using default value instead", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023144B0);
      }
      int v10 = 134349056;
      uint64_t v11 = *(void *)&v9;
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CFTimeInterval CLDigitalElevationModel::getAvlFileDownloadRateOverCell() const", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023144B0);
  }
  BOOL v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0]) = 134349056;
    *(void *)((char *)buf + 4) = 0x4122750000000000;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "DEM,DemAvlFileUpdatePeriodOverCell,%{public}.1lf", (uint8_t *)buf, 0xCu);
  }
  double v2 = 604800.0;
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    int v10 = 134349056;
    uint64_t v11 = 0x4122750000000000;
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CFTimeInterval CLDigitalElevationModel::getAvlFileDownloadRateOverCell() const", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return v2;
}

void sub_10115F0AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1000DB0A0(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_10115F0CC()
{
}

void sub_10115F118()
{
}

uint64_t sub_10115F13C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v8 = a1 + 104;
  uint64_t v7 = *(void *)(a1 + 104);
  uint64_t v25 = a1 + 104;
  (*(void (**)(uint64_t))(v7 + 16))(a1 + 104);
  __int16 v26 = 256;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023144B0);
  }
  double v9 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v10 = *a3;
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 67240192;
    HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Notification,%{public}d", (uint8_t *)buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023144B0);
    }
    int v20 = *a3;
    LODWORD(__dst.__r_.__value_.__l.__data_) = 67240192;
    HIDWORD(__dst.__r_.__value_.__r.__words[0]) = v20;
    int v21 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDigitalElevationModel::onManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", (const char *)v21);
    if (v21 != buf) {
      free(v21);
    }
  }
  if (*a3 == 4)
  {
    int v11 = *(_DWORD *)(a4 + 188);
    if (v11 == 1)
    {
      if (!*(unsigned char *)(a1 + 384))
      {
        buf[0].__r_.__value_.__r.__words[0] = CFAbsoluteTimeGetCurrent();
        sub_101157538(a1, buf);
        *(unsigned char *)(a1 + 384) = 1;
      }
    }
    else if (!v11)
    {
      uint64_t v12 = (char *)sub_1000A6958();
      sub_1000A5670(v12, (uint64_t)buf);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
        sub_1000DC48C(&__dst, buf[0].__r_.__value_.__l.__data_, buf[0].__r_.__value_.__l.__size_);
      }
      else {
        std::string __dst = buf[0];
      }
      if (*(char *)(a1 + 439) < 0) {
        sub_1000DC48C(&__p, *(void **)(a1 + 416), *(void *)(a1 + 424));
      }
      else {
        std::string __p = *(std::string *)(a1 + 416);
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(&__dst, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_dst = &__dst;
      }
      else {
        p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      sub_1004BEB14((const char *)p_dst);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
        sub_1000DC48C(&__p, buf[0].__r_.__value_.__l.__data_, buf[0].__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = buf[0];
      }
      if (*(char *)(a1 + 463) < 0)
      {
        sub_1000DC48C(v22, *(void **)(a1 + 440), *(void *)(a1 + 448));
      }
      else
      {
        *(_OWORD *)unint64_t v22 = *(_OWORD *)(a1 + 440);
        uint64_t v23 = *(void *)(a1 + 456);
      }
      if (v23 >= 0) {
        int v16 = v22;
      }
      else {
        int v16 = (void **)v22[0];
      }
      if (v23 >= 0) {
        std::string::size_type v17 = HIBYTE(v23);
      }
      else {
        std::string::size_type v17 = (std::string::size_type)v22[1];
      }
      std::string::append(&__p, (const std::string::value_type *)v16, v17);
      if (SHIBYTE(v23) < 0) {
        operator delete(v22[0]);
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v18 = &__p;
      }
      else {
        int v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      sub_1004BEB14((const char *)v18);
      *(unsigned char *)(a1 + 384) = 0;
      sub_1005C70E0(a1 + 120);
      sub_1008B4C78(a1 + 8);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf[0].__r_.__value_.__l.__data_);
      }
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 24))(v8);
}

void sub_10115F534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
}

void sub_10115F5D4(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_10115F604(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_10115F634(uint64_t a1)
{
  *(void *)a1 = off_102314500;
  sub_101171D90(a1 + 8);
  *(_OWORD *)(a1 + 48) = xmmword_101DA9F80;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 96) = 0xC0C3878000000000;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = xmmword_101DA9F90;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 168) = xmmword_101DA9F90;
  *(_OWORD *)(a1 + 184) = xmmword_101DA9FA0;
  *(int64x2_t *)(a1 + 200) = vdupq_n_s64(0xC0C3878000000000);
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(_WORD *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  return a1;
}

void sub_10115F6D4()
{
}

void *sub_10115F6E8(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1[2];
  uint64_t result = a1 + 2;
  uint64_t v7 = v8;
  double v9 = (void *)*(result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v9) >> 3) >= a2)
  {
    if (a2)
    {
      double v15 = &v9[3 * a2];
      uint64_t v16 = 24 * a2;
      do
      {
        *double v9 = 0;
        v9[1] = 0;
        _DWORD v9[2] = 0;
        uint64_t result = sub_10010F834(v9, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
        v9 += 3;
        v16 -= 24;
      }
      while (v16);
      double v9 = v15;
    }
    a1[1] = (uint64_t)v9;
  }
  else
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *a1) >> 3);
    unint64_t v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_1001D7FD4();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    int v21 = result;
    if (v13) {
      unint64_t v14 = (char *)sub_1000DA5D8((uint64_t)result, v13);
    }
    else {
      unint64_t v14 = 0;
    }
    std::string::size_type v17 = v14;
    int v18 = &v14[24 * v10];
    uint64_t v19 = v18;
    int v20 = &v14[24 * v13];
    sub_10115F85C(&v17, a2, a3);
    sub_100ACDF14(a1, &v17);
    return (void *)sub_1001DD2D0((uint64_t)&v17);
  }
  return result;
}

void sub_10115F83C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001DD2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10115F85C(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  BOOL v4 = (void *)result[2];
  if (a2)
  {
    uint64_t v6 = &v4[3 * a2];
    uint64_t v7 = 24 * a2;
    do
    {
      *BOOL v4 = 0;
      v4[1] = 0;
      void v4[2] = 0;
      uint64_t result = sub_10010F834(v4, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
      v4 += 3;
      v7 -= 24;
    }
    while (v7);
    BOOL v4 = v6;
  }
  _DWORD v3[2] = v4;
  return result;
}

void sub_10115F8D8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

void sub_10115F8E0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_10115F960()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_10115F9F0(_Unwind_Exception *a1)
{
}

BOOL sub_10115FA08(uint64_t a1, _DWORD *a2)
{
  return *a2 == 0;
}

uint64_t sub_10115FA18(uint64_t a1)
{
  sub_101160EF8(a1);

  return sub_100902D40(a1 + 240);
}

BOOL sub_10115FA54(uint64_t a1, _DWORD *a2)
{
  return *a2 == 1;
}

void *sub_10115FA64(void *a1)
{
  sub_1011618F0(a1);

  return sub_1011613C0(a1);
}

uint64_t sub_10115FA9C(void *a1)
{
  sub_1011618F0(a1);

  return sub_100902D40((uint64_t)(a1 + 30));
}

BOOL sub_10115FAD4(uint64_t a1, _DWORD *a2)
{
  return *a2 == 2;
}

BOOL sub_10115FAE8(uint64_t a1, uint64_t a2)
{
  return *(void *)a2 == *(void *)(a1 + 80) && *(_DWORD *)(a2 + 8) == 1;
}

void *sub_10115FB04(void *a1, uint64_t *a2)
{
  sub_101161420((uint64_t)a1, a2);

  return sub_101161398(a1);
}

BOOL sub_10115FB3C(uint64_t a1, uint64_t a2)
{
  return *(void *)a2 == *(void *)(a1 + 80) && *(_DWORD *)(a2 + 8) == 2;
}

BOOL sub_10115FB5C(uint64_t a1, void *a2)
{
  return *a2 != *(void *)(a1 + 80);
}

BOOL sub_10115FB74(uint64_t a1, unsigned char *a2)
{
  return *a2 == 0;
}

uint64_t sub_10115FB84(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  *(void *)a1 = &unk_102314520;
  *(void *)(a1 + 8) = 12;
  *(_WORD *)(a1 + 16) = 512;
  *(void *)(a1 + 24) = a2;
  long long v5 = a3[8];
  long long v6 = a3[9];
  uint64_t v7 = *((void *)a3 + 20);
  long long v8 = a3[4];
  long long v9 = a3[5];
  long long v11 = a3[6];
  long long v10 = a3[7];
  long long v12 = *a3;
  long long v13 = a3[1];
  long long v15 = a3[2];
  long long v14 = a3[3];
  *(void *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 48) = v13;
  *(_OWORD *)(a1 + 32) = v12;
  *(_OWORD *)(a1 + 128) = v11;
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 80) = v14;
  *(void *)(a1 + 192) = v7;
  *(_OWORD *)(a1 + 176) = v6;
  *(_OWORD *)(a1 + 160) = v5;
  *(_OWORD *)(a1 + 144) = v10;
  sub_10090326C(a1 + 208, a4);
  v17[0] = off_102314670;
  v17[1] = a1;
  v17[3] = v17;
  sub_100902AD0(a1 + 240, v17);
  sub_1006A79C8(v17);
  *(unsigned char *)(a1 + 296) = 1;
  *(void *)(a1 + 304) = 0;
  return a1;
}

void sub_10115FCA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1006A79C8((uint64_t *)va);
  sub_1006A79C8(v3);
  sub_101161934(v2, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_10115FCD4(uint64_t a1)
{
  sub_10115FD5C(a1);
  uint64_t v2 = *(void *)(a1 + 304);
  *(void *)(a1 + 304) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_1006A79C8((void *)(a1 + 264));
  uint64_t v3 = *(void **)(a1 + 240);
  if (v3)
  {
    *(void *)(a1 + 248) = v3;
    operator delete(v3);
  }
  sub_1006A79C8((void *)(a1 + 208));
  sub_101161934((uint64_t ***)(a1 + 200), 0);
  return a1;
}

void *sub_10115FD5C(uint64_t a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_102314640);
  }
  uint64_t v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[resume reminders] tearing down controller", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102314640);
    }
    BOOL v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutResumeReminders::Controller::teardown()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  if (*(void *)(a1 + 200)) {
    sub_101161934((uint64_t ***)(a1 + 200), 0);
  }
  sub_100902D40(a1 + 240);
  return sub_101161984((void *)a1);
}

double *sub_10115FF18(uint64_t a1)
{
  uint64_t result = *(double **)(a1 + 200);
  if (result)
  {
    unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
    sub_100506EB0(result, (uint64_t)v16);
    v15[0] = v16[0];
    *(_OWORD *)((char *)v15 + 12) = *(_OWORD *)((char *)v16 + 12);
    sub_1001A34E0(a1, 1, (uint64_t)v15);
    if (v3 != *(unsigned __int8 *)(a1 + 16))
    {
      sub_101160214(a1, v3, &v14);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_102314640);
      }
      BOOL v4 = qword_1024191C8;
      if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = SHIBYTE(v14.__r_.__value_.__r.__words[2]);
        std::string::size_type v6 = v14.__r_.__value_.__r.__words[0];
        sub_101160214(a1, *(unsigned __int8 *)(a1 + 16), __p);
        uint64_t v7 = &v14;
        if (v5 < 0) {
          uint64_t v7 = (std::string *)v6;
        }
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v8 = __p;
        }
        else {
          long long v8 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v8;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[resume reminders] detection, %s, %s", (uint8_t *)&buf, 0x16u);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_102314640);
        }
        int v9 = SHIBYTE(v14.__r_.__value_.__r.__words[2]);
        std::string::size_type v10 = v14.__r_.__value_.__r.__words[0];
        sub_101160214(a1, *(unsigned __int8 *)(a1 + 16), &buf);
        long long v11 = &v14;
        if (v9 < 0) {
          long long v11 = (std::string *)v10;
        }
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        int v18 = 136315394;
        uint64_t v19 = v11;
        __int16 v20 = 2080;
        int v21 = p_buf;
        long long v13 = (std::string *)_os_log_send_and_compose_impl();
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutResumeReminders::Controller::update()", "%s\n", (const char *)v13);
        if (v13 != __p) {
          free(v13);
        }
      }
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v14.__r_.__value_.__l.__data_);
      }
    }
    return (double *)sub_1011603E4(a1);
  }
  return result;
}

void sub_1011601E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101160214(uint64_t a1@<X0>, unsigned int a2@<W1>, std::string *a3@<X8>)
{
  if (a2 > 3) {
    int v5 = "unknown";
  }
  else {
    int v5 = (&off_1023146E0)[(char)a2];
  }
  sub_100134750(&v17, v5);
  std::to_string(&v16, *(void *)(a1 + 80));
  std::operator+<char>();
  std::string::size_type v6 = std::string::append(&v13, ", workout = ");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v8 = &v16;
  }
  else {
    long long v8 = (std::string *)v16.__r_.__value_.__r.__words[0];
  }
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v16.__r_.__value_.__l.__size_;
  }
  std::string::size_type v10 = std::string::append(&v14, (const std::string::value_type *)v8, size);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  long long v12 = std::string::append(&v15, "]");
  *a3 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (v18 < 0) {
    operator delete(v17);
  }
}

void sub_101160368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  if (*(char *)(v28 - 17) < 0) {
    operator delete(*(void **)(v28 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011603E4(uint64_t result)
{
  if (*(void *)(result + 192) != 1)
  {
    unint64_t v1 = *(void *)(result + 80);
    uint64_t v2 = *(_DWORD **)(result + 24);
    BOOL v3 = v1 <= 0x18 && ((0xFD7FFFu >> v1) & 1) == 0;
    BOOL v4 = v3 && v2[92] == 0;
    if (v4 && *(unsigned char *)(result + 16) == 2)
    {
      uint64_t v6 = (*(uint64_t (**)(void))(**(void **)v2 + 16))();
      return sub_1006C1B00(v6);
    }
  }
  return result;
}

void sub_101160478(uint64_t a1, double a2)
{
  sub_101160214(a1, *(unsigned __int8 *)(a1 + 16), &v15);
  v14[0] = 0;
  *(double *)&v14[1] = a2;
  sub_1001A34E0(a1, 2, (uint64_t)v14);
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_102314640);
  }
  BOOL v4 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = SHIBYTE(v15.__r_.__value_.__r.__words[2]);
    std::string::size_type v6 = v15.__r_.__value_.__r.__words[0];
    sub_101160214(a1, *(unsigned __int8 *)(a1 + 16), __p);
    long long v7 = &v15;
    if (v5 < 0) {
      long long v7 = (std::string *)v6;
    }
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v8 = __p;
    }
    else {
      long long v8 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[resume reminders] manual pause, prev, %s, current, %s", (uint8_t *)&buf, 0x16u);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102314640);
    }
    int v9 = SHIBYTE(v15.__r_.__value_.__r.__words[2]);
    std::string::size_type v10 = v15.__r_.__value_.__r.__words[0];
    sub_101160214(a1, *(unsigned __int8 *)(a1 + 16), &buf);
    long long v11 = &v15;
    if (v9 < 0) {
      long long v11 = (std::string *)v10;
    }
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    int v17 = 136315394;
    char v18 = v11;
    __int16 v19 = 2080;
    __int16 v20 = p_buf;
    std::string v13 = (std::string *)_os_log_send_and_compose_impl();
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutResumeReminders::Controller::feedManualPause(CFAbsoluteTime)", "%s\n", (const char *)v13);
    if (v13 != __p) {
      free(v13);
    }
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_101160718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101160748(uint64_t a1, double a2)
{
  sub_101160214(a1, *(unsigned __int8 *)(a1 + 16), &v15);
  v14[0] = 1;
  *(double *)&v14[1] = a2;
  sub_1001A34E0(a1, 2, (uint64_t)v14);
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_102314640);
  }
  BOOL v4 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = SHIBYTE(v15.__r_.__value_.__r.__words[2]);
    std::string::size_type v6 = v15.__r_.__value_.__r.__words[0];
    sub_101160214(a1, *(unsigned __int8 *)(a1 + 16), __p);
    long long v7 = &v15;
    if (v5 < 0) {
      long long v7 = (std::string *)v6;
    }
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v8 = __p;
    }
    else {
      long long v8 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[resume reminders] manual resume, prev, %s, current, %s", (uint8_t *)&buf, 0x16u);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102314640);
    }
    int v9 = SHIBYTE(v15.__r_.__value_.__r.__words[2]);
    std::string::size_type v10 = v15.__r_.__value_.__r.__words[0];
    sub_101160214(a1, *(unsigned __int8 *)(a1 + 16), &buf);
    long long v11 = &v15;
    if (v9 < 0) {
      long long v11 = (std::string *)v10;
    }
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    int v17 = 136315394;
    char v18 = v11;
    __int16 v19 = 2080;
    __int16 v20 = p_buf;
    std::string v13 = (std::string *)_os_log_send_and_compose_impl();
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutResumeReminders::Controller::feedManualResume(CFAbsoluteTime)", "%s\n", (const char *)v13);
    if (v13 != __p) {
      free(v13);
    }
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_1011609F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101160A20(uint64_t a1, double a2)
{
  sub_101160214(a1, *(unsigned __int8 *)(a1 + 16), &v15);
  v14[0] = 2;
  *(double *)&v14[1] = a2;
  sub_1001A34E0(a1, 2, (uint64_t)v14);
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_102314640);
  }
  BOOL v4 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = SHIBYTE(v15.__r_.__value_.__r.__words[2]);
    std::string::size_type v6 = v15.__r_.__value_.__r.__words[0];
    sub_101160214(a1, *(unsigned __int8 *)(a1 + 16), __p);
    long long v7 = &v15;
    if (v5 < 0) {
      long long v7 = (std::string *)v6;
    }
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v8 = __p;
    }
    else {
      long long v8 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[resume reminders] alert dismissed, prev, %s, current, %s", (uint8_t *)&buf, 0x16u);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102314640);
    }
    int v9 = SHIBYTE(v15.__r_.__value_.__r.__words[2]);
    std::string::size_type v10 = v15.__r_.__value_.__r.__words[0];
    sub_101160214(a1, *(unsigned __int8 *)(a1 + 16), &buf);
    long long v11 = &v15;
    if (v9 < 0) {
      long long v11 = (std::string *)v10;
    }
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    int v17 = 136315394;
    char v18 = v11;
    __int16 v19 = 2080;
    __int16 v20 = p_buf;
    std::string v13 = (std::string *)_os_log_send_and_compose_impl();
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutResumeReminders::Controller::feedAlertDismiss(CFAbsoluteTime)", "%s\n", (const char *)v13);
    if (v13 != __p) {
      free(v13);
    }
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_101160CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101160CF8(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 296) != a2)
  {
    uint64_t v3 = result;
    *(unsigned char *)(result + 296) = a2;
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102314640);
    }
    BOOL v4 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109120;
      int v7 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[resume reminder] toggling enablement to %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_102314640);
      }
      int v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutResumeReminders::Controller::toggle(BOOL)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    if (*(unsigned char *)(v3 + 296))
    {
      if (*(unsigned char *)(v3 + 16) == 1)
      {
        CFAbsoluteTimeGetCurrent();
        sub_101160EF8(v3);
      }
    }
    else
    {
      sub_10115FD5C(v3);
    }
    buf[0] = a2;
    return sub_1001A34E0(v3, 3, (uint64_t)buf);
  }
  return result;
}

void sub_101160EF8(uint64_t a1)
{
  uint64_t v2 = (uint64_t ***)(a1 + 200);
  if (*(void *)(a1 + 200))
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102314640);
    }
    uint64_t v3 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[resume reminders] resetting detector", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_102314640);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutResumeReminders::Controller::bringupDetector(CFAbsoluteTime)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    sub_101161934(v2, 0);
  }
  if (*(void *)(a1 + 192) == 1 || *(_DWORD *)(*(void *)(a1 + 24) + 368))
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102314640);
    }
    BOOL v4 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[resume reminders] workout isn't eligible", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 == -1)
    {
LABEL_26:
      std::string::size_type v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutResumeReminders::Controller::bringupDetector(CFAbsoluteTime)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
      return;
    }
LABEL_32:
    dispatch_once(&qword_1024191C0, &stru_102314640);
    goto LABEL_26;
  }
  if (*(unsigned char *)(a1 + 296)) {
    operator new();
  }
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_102314640);
  }
  int v5 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[resume reminders] reminders aren't enabled", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 == -1) {
      goto LABEL_26;
    }
    goto LABEL_32;
  }
}

void sub_10116136C()
{
}

void *sub_101161398(void *result)
{
  uint64_t v1 = result[10];
  if (v1 == 19 || v1 == 4) {
    return (void *)sub_100902F64((uint64_t)(result + 30), v1, result[11], result[12], result[13]);
  }
  return result;
}

void *sub_1011613C0(void *result)
{
  uint64_t v1 = result[10];
  if (v1 == 19 || v1 == 4)
  {
    uint64_t v3 = result + 30;
    sub_100902C40((uint64_t)(result + 30), v1, result[11], result[12], result[13]);
    return sub_100903014(v3);
  }
  return result;
}

uint64_t sub_101161420(uint64_t a1, uint64_t *a2)
{
  *(double *)&uint64_t v4 = CFAbsoluteTimeGetCurrent();
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v5 = a2[2];
  void v15[3] = v4;
  v15[0] = v5;
  v15[1] = v4;
  _OWORD v15[2] = 22;
  long long v6 = *(_OWORD *)(a1 + 176);
  long long v26 = *(_OWORD *)(a1 + 160);
  long long v27 = v6;
  uint64_t v28 = *(void *)(a1 + 192);
  long long v7 = *(_OWORD *)(a1 + 112);
  long long v22 = *(_OWORD *)(a1 + 96);
  long long v23 = v7;
  long long v8 = *(_OWORD *)(a1 + 144);
  long long v24 = *(_OWORD *)(a1 + 128);
  long long v25 = v8;
  long long v9 = *(_OWORD *)(a1 + 48);
  long long v18 = *(_OWORD *)(a1 + 32);
  long long v19 = v9;
  long long v10 = *(_OWORD *)(a1 + 80);
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = v10;
  uint64_t v11 = *a2;
  uint64_t v12 = *(void *)(a1 + 80);
  int v13 = *((_DWORD *)a2 + 2);
  if (*a2 == v12 && v13 == 2)
  {
    if (*((_DWORD *)a2 + 6) == 2) {
      *(void *)&long long v21 = 25;
    }
  }
  else if (v11 == v12 && v13 == 1)
  {
    long long v21 = xmmword_101DAA010;
  }
  else if (v11 != v12)
  {
    long long v21 = 0uLL;
  }
  return sub_10116169C(a1, v15);
}

void sub_10116153C(uint64_t a1, uint64_t *a2)
{
  sub_101161420(a1, a2);
  uint64_t v3 = *(uint64_t ***)(a1 + 200);
  if (v3)
  {
    sub_100506FE4(v3, 1);
  }
}

void sub_101161588(uint64_t a1, uint64_t *a2)
{
  sub_101161420(a1, a2);
  sub_100902D40(a1 + 240);
  uint64_t v3 = *(uint64_t ***)(a1 + 200);
  if (v3)
  {
    sub_100506FE4(v3, 0);
  }
}

uint64_t sub_1011615DC(uint64_t a1)
{
  sub_101160EF8(a1);
  sub_100902D40(a1 + 240);
  v7[0] = CFAbsoluteTimeGetCurrent();
  v7[1] = v7[0];
  v7[2] = 22;
  void v7[3] = v7[0];
  long long v8 = 0u;
  long long v9 = 0u;
  long long v2 = *(_OWORD *)(a1 + 176);
  long long v18 = *(_OWORD *)(a1 + 160);
  long long v19 = v2;
  uint64_t v20 = *(void *)(a1 + 192);
  long long v3 = *(_OWORD *)(a1 + 112);
  long long v14 = *(_OWORD *)(a1 + 96);
  long long v15 = v3;
  long long v4 = *(_OWORD *)(a1 + 144);
  long long v16 = *(_OWORD *)(a1 + 128);
  long long v17 = v4;
  long long v5 = *(_OWORD *)(a1 + 48);
  long long v10 = *(_OWORD *)(a1 + 32);
  long long v11 = v5;
  long long v12 = *(_OWORD *)(a1 + 64);
  long long v13 = 0uLL;
  return sub_10116169C(a1, v7);
}

uint64_t sub_10116169C(uint64_t result, uint64_t *a2)
{
  if (*(void *)(result + 232))
  {
    uint64_t v3 = result;
    uint64_t result = _os_feature_enabled_impl();
    if (result)
    {
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_102314640);
      }
      long long v4 = qword_1024191C8;
      if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = a2[14];
        uint64_t v6 = *a2;
        uint64_t v7 = a2[2];
        uint64_t v8 = a2[3];
        *(_DWORD *)std::string buf = 134218752;
        uint64_t v12 = v7;
        __int16 v13 = 2048;
        uint64_t v14 = v5;
        __int16 v15 = 2048;
        uint64_t v16 = v6;
        __int16 v17 = 2048;
        uint64_t v18 = v8;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[resume reminders] notifying event %zu, workout, %zu, detectionTime, %f, currentTime, %f", buf, 0x2Au);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_102314640);
        }
        long long v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutResumeReminders::Controller::notifyEvent(const CLMotionStateMediator_Type::WorkoutEvent &) const", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
      uint64_t v9 = *(void *)(v3 + 232);
      if (!v9) {
        sub_10015E48C();
      }
      return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v9 + 48))(v9, a2);
    }
  }
  return result;
}

void *sub_1011618F0(void *a1)
{
  uint64_t v3 = a1[25];
  long long v2 = (uint64_t ***)(a1 + 25);
  if (v3) {
    sub_101161934(v2, 0);
  }

  return sub_101161984(a1);
}

uint64_t **sub_101161934(uint64_t ***a1, uint64_t **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100506EAC(result);
    operator delete();
  }
  return result;
}

void *sub_101161984(void *result)
{
  if (result[38])
  {
    uint64_t v1 = result;
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102314640);
    }
    long long v2 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[resume reminders] releasing power assertion", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_102314640);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutResumeReminders::Controller::releasePowerAssertion()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    sub_100EBC6AC(v1[38]);
    uint64_t result = (void *)v1[38];
    v1[38] = 0;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  return result;
}

void sub_101161B58(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 296) || *(void *)(a1 + 192) == 1 || *(_DWORD *)(*(void *)(a1 + 24) + 368))
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102314640);
    }
    long long v2 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[resume reminder] destroying power assertion because it shouldn't be running", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_102314640);
      }
      __int16 v9 = 0;
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutResumeReminders::Controller::takePowerAsertion()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    sub_101161984((void *)a1);
  }
  else
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102314640);
    }
    uint64_t v3 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[resume reminders] taking power assertion", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_102314640);
      }
      __int16 v9 = 0;
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutResumeReminders::Controller::takePowerAsertion()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    uint64_t v4 = *(void *)(a1 + 304);
    if (!v4) {
      operator new();
    }
    sub_100134750(__p, "Running Resume Controller");
    if (*(int *)(v4 + 8) <= 0)
    {
      if (SHIBYTE(v8) < 0)
      {
        sub_1000DC48C(buf, __p[0], (unint64_t)__p[1]);
      }
      else
      {
        *(_OWORD *)std::string buf = *(_OWORD *)__p;
        uint64_t v11 = v8;
      }
      sub_100EBBFD8(v4, (uint64_t *)buf);
      if (SHIBYTE(v11) < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_101161F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101161F78(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_101161FAC()
{
}

void *sub_101161FC0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102314670;
  result[1] = v3;
  return result;
}

uint64_t sub_101162008(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102314670;
  a2[1] = v2;
  return result;
}

uint64_t sub_101162034(uint64_t a1, uint64_t *a2)
{
  return sub_10116169C(*(void *)(a1 + 8), a2);
}

uint64_t sub_10116203C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10116207C()
{
}

uint64_t *sub_101162088(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  sub_1011628B8(v6, a4);
  sub_1011621DC(a1, (uint64_t)v6);
  if (v7) {
    sub_101162834(v6);
  }
  return a1;
}

void sub_101162118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a15) {
    sub_101162834(&a11);
  }
  sub_1011629B0(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_101162148(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  LOBYTE(v5[0]) = 0;
  char v6 = 0;
  sub_101162088(a1, a2, a3, (uint64_t)v5);
  if (v6) {
    sub_101162834(v5);
  }
  return a1;
}

void sub_1011621C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a13) {
    sub_101162834(&a9);
  }
  _Unwind_Resume(exception_object);
}

void **sub_1011621DC(uint64_t *a1, uint64_t a2)
{
  sub_1000C7F88(&buf);
  LODWORD(v23[0]) = 0;
  CFStringRef v4 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsMaintenanceInterval", 0x8000100u, kCFAllocatorNull);
  int v5 = sub_1004D08E4(buf, (uint64_t)v4, v23);
  CFRelease(v4);
  uint64_t v6 = LODWORD(v23[0]);
  if (*((void *)&buf + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf + 1));
  }
  if (v5) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 86400;
  }
  sub_1002D05F0(v16, v7);
  sub_1002D0604(v15, (uint64_t)XPC_ACTIVITY_PRIORITY_MAINTENANCE);
  sub_1002D05C0((uint64_t)v14, 0);
  sub_1002D05D8((uint64_t)v13, 1);
  sub_101162A88(&v17, v16[0], v16[1], v15[0], v15[1], v14[0], v14[1], v8, v13[0], v13[1]);
  uint64_t v9 = *a1;
  sub_1011628B8(v18, a2);
  v23[0] = v9;
  v23[1] = a1;
  sub_1011628B8(v24, (uint64_t)v18);
  if (!v20)
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_102314700);
    }
    long long v10 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = "MicroLocationMaintenance";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Registering for XPC Activity %s", (uint8_t *)&buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_102314700);
      }
      v26[0] = 136315138;
      *(void *)&v26[1] = "MicroLocationMaintenance";
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void (anonymous namespace)::registerActivity(const XPCCriteria &, CLMicroLocationBackgroundActivities::IBackgroundActivitiesDelegate &, std::vector<std::unique_ptr<XPCRegistration>> &, std::optional<ObserverRegistrationFunction>, RunActivity) [WorkT = CLMicroLocationMaintenance, RunActivity = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationBackgroundActivities.mm:100:15)]", "%s\n", v12);
      if (v12 != (char *)&buf) {
        free(v12);
      }
    }
    operator new();
  }
  sub_100134750(&buf, "MicroLocationMaintenance");
  if (!v19) {
    sub_10015E48C();
  }
  (*(void (**)(uint64_t, long long *, void **))(*(void *)v19 + 48))(v19, &buf, &v17);
  if (v22 < 0) {
    operator delete((void *)buf);
  }
  if (v25) {
    sub_101162834(v24);
  }
  if (v20) {
    sub_101162834(v18);
  }
  return sub_1002D064C(&v17);
}

void sub_1011626F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  if (*(unsigned char *)(v49 - 120)) {
    sub_101162834(v48);
  }
  if (a31) {
    sub_101162834(&a27);
  }
  sub_1002D064C(&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_1011627F8(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 16);
  sub_1011629B0(&v3);
  return a1;
}

void *sub_101162834(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

unsigned char *sub_1011628B8(unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[32] = 0;
  if (*(unsigned char *)(a2 + 32))
  {
    sub_101162918((uint64_t)a1, a2);
    a1[32] = 1;
  }
  return a1;
}

void sub_1011628FC(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 32)) {
    sub_101162834((void *)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101162918(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1011629B0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (const char **)**a1;
  if (v2)
  {
    CFStringRef v4 = (const char **)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
        sub_101162A38(--v4, 0);
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

const char *sub_101162A38(const char **a1, const char *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1002D0B18(result);
    operator delete();
  }
  return result;
}

xpc_object_t *sub_101162A88(xpc_object_t *a1, uint64_t a2, uint64_t a3, const char *a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v16[0] = a2;
  v16[1] = a3;
  v15[0] = a4;
  v15[1] = a5;
  v14[0] = a6;
  v14[1] = a7;
  v13[0] = a9;
  v13[1] = a10;
  xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
  *a1 = v11;
  sub_1002D05A0((uint64_t)v16, v11);
  sub_1002D05B0(v15, *a1);
  sub_1002D058C((uint64_t)v14, *a1);
  sub_1002D058C((uint64_t)v13, *a1);
  return a1;
}

void sub_101162B0C(id a1)
{
  qword_102419458 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

uint64_t sub_101162B3C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    sub_101162A38((const char **)(i - 8), 0);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_101162B90(uint64_t a1)
{
  *(void *)a1 = off_102314730;
  if (*(unsigned char *)(a1 + 56)) {
    sub_101162834((void *)(a1 + 24));
  }
  return a1;
}

void sub_101162BE0(uint64_t a1)
{
  *(void *)a1 = off_102314730;
  if (*(unsigned char *)(a1 + 56)) {
    sub_101162834((void *)(a1 + 24));
  }

  operator delete();
}

char *sub_101162C50(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = off_102314730;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  sub_1011628B8(v2 + 24, a1 + 24);
  return v2;
}

void sub_101162CB0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned char *sub_101162CC4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_102314730;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return sub_1011628B8((unsigned char *)(a2 + 24), a1 + 24);
}

void *sub_101162CF8(void *result)
{
  if (*((unsigned char *)result + 56)) {
    return sub_101162834(result + 3);
  }
  return result;
}

void sub_101162D0C(void *__p)
{
  if (*((unsigned char *)__p + 56)) {
    sub_101162834(__p + 3);
  }

  operator delete(__p);
}

id sub_101162D50(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  CFStringRef v4 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 64))(*(void *)(a1 + 8));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3321888768;
  v7[2] = sub_101162EC8;
  void v7[3] = &unk_1023147A0;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7[4] = *(void *)(a1 + 8);
  v7[5] = v3;
  void v7[6] = v5;
  return [v4 async:v7];
}

uint64_t sub_101162DFC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101162E3C()
{
}

uint64_t sub_101162E48(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void sub_101162EC8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  sub_10022DA1C(&v3, *(void *)(*(void *)(a1 + 48) + 8));
  sub_101162F5C((uint64_t)v2, v1, (uint64_t)&v3);
  sub_1011632C4((uint64_t)v2);
  v2[0] = (void **)&v4;
  sub_10022F0E4(v2);
}

void sub_101162F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 8);
  sub_10022F0E4(&a10);
  _Unwind_Resume(a1);
}

__n128 sub_101162F44(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[3].n128_u64[0] = a2[3].n128_u64[0];
  a1[2] = result;
  return result;
}

uint64_t sub_101162F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  *(_WORD *)(a1 + 8) = 0;
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_102314700);
  }
  uint64_t v5 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = 68289282;
    int v16 = 0;
    __int16 v17 = 2082;
    uint64_t v18 = "";
    __int16 v19 = 2082;
    v20[0] = "MicroLocationMaintenance";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Activity runner: starting activty\", \"Activity\":%{public, location:escape_only}s}", (uint8_t *)&v15, 0x1Cu);
  }
  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v7 = (uint64_t *)sub_1000B894C(a3);
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  if (*v7 == v9)
  {
LABEL_9:
    *(_WORD *)(a1 + 8) = 2;
    v11.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_102314700);
    }
    uint64_t v12 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = *(unsigned __int16 *)(a1 + 8);
      int v15 = 68289538;
      int v16 = 0;
      __int16 v17 = 2082;
      uint64_t v18 = "";
      __int16 v19 = 1026;
      LODWORD(v20[0]) = v13;
      WORD2(v20[0]) = 1026;
      *(_DWORD *)((char *)v20 + 6) = (v11.__d_.__rep_ - v6.__d_.__rep_) / 1000000;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Activity runner: activity finished\", \"State\":%{public}u, \"Time elapsed (ms)\":%{public}u}", (uint8_t *)&v15, 0x1Eu);
    }
  }
  else
  {
    while (!sub_1002D0D04((xpc_activity_t *)a1))
    {
      v21[0] = off_1023147E0;
      v21[1] = a1;
      v21[3] = v21;
      uint64_t v10 = *(void *)(v8 + 24);
      if (!v10) {
        sub_10015E48C();
      }
      (*(void (**)(uint64_t, void *))(*(void *)v10 + 48))(v10, v21);
      sub_1001EFA74(v21);
      v8 += 32;
      if (v8 == v9) {
        goto LABEL_9;
      }
    }
    *(_WORD *)(a1 + 8) = 1;
  }
  return a1;
}

void sub_1011631DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1001EFA74((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1011631FC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_1023147E0;
  result[1] = v3;
  return result;
}

uint64_t sub_101163244(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023147E0;
  a2[1] = v2;
  return result;
}

BOOL sub_101163270(uint64_t a1)
{
  return sub_1002D0D04(*(xpc_activity_t **)(a1 + 8));
}

uint64_t sub_101163278(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1011632B8()
{
}

uint64_t sub_1011632C4(uint64_t a1)
{
  int v2 = *(unsigned __int16 *)(a1 + 8);
  if (v2 == 2)
  {
LABEL_15:
    sub_1002D0D0C((xpc_activity_t *)a1);
    return a1;
  }
  if (v2 == 1)
  {
    sub_1002D0D14((xpc_activity_t *)a1);
    return a1;
  }
  if (!*(_WORD *)(a1 + 8))
  {
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_102314700);
    }
    uint64_t v3 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning Activity runner: Activity didn't complete before the runner was destroyed. Most likely this means there was an exception during the activity. Please check the logs.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_102314700);
      }
      std::chrono::steady_clock::time_point v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLMicroLocationBackgroundActivities::ActivityRunner<CLMicroLocationXPCActivityHelpers::XPCActivity, CLMicroLocationMaintenance>::~ActivityRunner() [ActivityT = CLMicroLocationXPCActivityHelpers::XPCActivity, WorkT = CLMicroLocationMaintenance]", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102314850);
    }
    uint64_t v4 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      uint64_t v9 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationBackgroundActivities.h";
      __int16 v10 = 1024;
      int v11 = 92;
      __int16 v12 = 2080;
      int v13 = "false";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Assert Failed, %s, %d, %s", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102314850);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLMicroLocationBackgroundActivities::ActivityRunner<CLMicroLocationXPCActivityHelpers::XPCActivity, CLMicroLocationMaintenance>::~ActivityRunner() [ActivityT = CLMicroLocationXPCActivityHelpers::XPCActivity, WorkT = CLMicroLocationMaintenance]", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    sub_1004BA578();
    goto LABEL_15;
  }
  return a1;
}

void sub_10116362C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_101163638(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

BOOL sub_101163668(uint64_t a1, const char *a2)
{
  if (a2[23] >= 0) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = *(const char **)a2;
  }
  if (!sub_1000A569C(v4))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102314A58);
    }
    int v11 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      if (a2[23] >= 0) {
        __int16 v12 = a2;
      }
      else {
        __int16 v12 = *(const char **)a2;
      }
      *(_DWORD *)long long buf = 136315138;
      __int16 v19 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "The handsfree whitelist file %s does not exist.", buf, 0xCu);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102314A58);
    }
    int v13 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBTHandsfreeWhitelist::load(const std::string &)", "%s\n");
LABEL_45:
    if (v13 != buf) {
      free(v13);
    }
    return 0;
  }
  if (a2[23] >= 0) {
    uint64_t v5 = (uint64_t *)a2;
  }
  else {
    uint64_t v5 = *(uint64_t **)a2;
  }
  std::chrono::steady_clock::time_point v6 = +[NSDictionary dictionaryWithContentsOfFile:](NSDictionary, "dictionaryWithContentsOfFile:", +[NSString stringWithUTF8String:v5]);
  if (v6)
  {
    uint64_t v7 = v6;
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102314A58);
    }
    uint64_t v8 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      if (a2[23] >= 0) {
        uint64_t v9 = a2;
      }
      else {
        uint64_t v9 = *(const char **)a2;
      }
      *(_DWORD *)long long buf = 136315138;
      __int16 v19 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Loaded handsfree whitelist file from file %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102314A58);
      }
      __int16 v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBTHandsfreeWhitelist::load(const std::string &)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    return sub_101163B60(a1, v7);
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_102314A58);
  }
  uint64_t v14 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    if (a2[23] >= 0) {
      int v15 = a2;
    }
    else {
      int v15 = *(const char **)a2;
    }
    *(_DWORD *)long long buf = 136446210;
    __int16 v19 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "The handsfree whitelist file %{public}s is malformed.", buf, 0xCu);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  BOOL result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102314A58);
    }
    int v13 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLBTHandsfreeWhitelist::load(const std::string &)", "%s\n");
    goto LABEL_45;
  }
  return result;
}

BOOL sub_101163B60(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  id v4 = [a2 objectForKey:@"version"];
  if (v4) {
    signed int v5 = [v4 intValue];
  }
  else {
    signed int v5 = 1;
  }
  if (*(_DWORD *)(a1 + 80) < v5)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102314A58);
    }
    std::chrono::steady_clock::time_point v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v7 = *(_DWORD *)(a1 + 80);
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v7;
      __int16 v60 = 1024;
      signed int v61 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Handsfree whitelist current version,%d,new version,%d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102314A58);
      }
      int v31 = *(_DWORD *)(a1 + 80);
      LODWORD(__str.__r_.__value_.__l.__data_) = 67109376;
      HIDWORD(__str.__r_.__value_.__r.__words[0]) = v31;
      LOWORD(__str.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = v5;
      uint64_t v32 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBTHandsfreeWhitelist::load(NSDictionary *)", "%s\n", v32);
      if (v32 != (char *)buf) {
        free(v32);
      }
    }
    *(_DWORD *)(a1 + 80) = v5;
    double v33 = (uint64_t **)(a1 + 8);
    sub_1000F5BB0(a1 + 8, *(void **)(a1 + 16));
    *(void *)(a1 + 8) = a1 + 16;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 16) = 0;
    uint64_t v8 = (uint64_t **)(a1 + 56);
    sub_10116F06C(a1 + 56, *(void **)(a1 + 64));
    *(void *)(a1 + 56) = a1 + 64;
    *(void *)(a1 + 64) = 0;
    uint64_t v9 = *(char **)(a1 + 40);
    *(void *)(a1 + 72) = 0;
    uint64_t v39 = (uint64_t **)(a1 + 32);
    sub_1000DB264(a1 + 32, v9);
    *(void *)(a1 + 32) = a1 + 40;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    if (*(_DWORD *)(a1 + 80) == 1) {
      obuint64_t j = [a2 allKeys];
    }
    else {
      obuint64_t j = [a2 objectForKey:@"addresses"];
    }
    if (*(_DWORD *)(a1 + 80) == 1) {
      id v36 = 0;
    }
    else {
      id v36 = [a2 objectForKey:@"filters"];
    }
    id v35 = [a2 objectForKey:@"btNames"];
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    id v38 = [obj countByEnumeratingWithState:&v50 objects:v58 count:16];
    if (v38)
    {
      uint64_t v37 = *(void *)v51;
      do
      {
        uint64_t v15 = 0;
        do
        {
          if (*(void *)v51 != v37)
          {
            uint64_t v16 = v15;
            objc_enumerationMutation(obj);
            uint64_t v15 = v16;
          }
          uint64_t v40 = v15;
          uint64_t v17 = *(void *)(*((void *)&v50 + 1) + 8 * v15);
          uint64_t v18 = +[NSScanner scannerWithString:v17];
          unsigned int v49 = 0;
          if ([(NSScanner *)v18 scanHexInt:&v49])
          {
            v49 &= 0xFFFFFFu;
            if (v36)
            {
              id v19 = [v36 objectForKey:v17];
              char v20 = v19;
              if (v19)
              {
                long long v47 = 0u;
                long long v48 = 0u;
                long long v45 = 0u;
                long long v46 = 0u;
                id v21 = [v19 countByEnumeratingWithState:&v45 objects:v57 count:16];
                if (v21)
                {
                  uint64_t v22 = *(void *)v46;
                  do
                  {
                    for (uint64_t i = 0; i != v21; uint64_t i = (char *)i + 1)
                    {
                      if (*(void *)v46 != v22) {
                        objc_enumerationMutation(v20);
                      }
                      long long v24 = *(void **)(*((void *)&v45 + 1) + 8 * i);
                      id v25 = [v20 objectForKey:v24];
                      sub_100134750(buf, (char *)[v24 UTF8String]);
                      sub_100134750(&__str, (char *)[v25 UTF8String]);
                      uint64_t v54 = (uint8_t *)&v49;
                      long long v26 = sub_10116FA94(v8, &v49, (uint64_t)&unk_101D0B290, (_DWORD **)&v54);
                      uint64_t v54 = buf;
                      long long v27 = sub_10116FB64(v26 + 5, (const void **)buf, (uint64_t)&unk_101D0B290, (long long **)&v54);
                      std::string::operator=((std::string *)(v27 + 7), &__str);
                      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__str.__r_.__value_.__l.__data_);
                      }
                      if (v62 < 0) {
                        operator delete(*(void **)buf);
                      }
                    }
                    id v21 = [v20 countByEnumeratingWithState:&v45 objects:v57 count:16];
                  }
                  while (v21);
                }
              }
            }
            sub_10116FCA8(v33, &v49, &v49);
          }
          uint64_t v15 = v40 + 1;
        }
        while ((id)(v40 + 1) != v38);
        id v38 = [obj countByEnumeratingWithState:&v50 objects:v58 count:16];
      }
      while (v38);
    }
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    id v28 = [v35 countByEnumeratingWithState:&v41 objects:v55 count:16];
    if (v28)
    {
      uint64_t v29 = *(void *)v42;
      do
      {
        for (uint64_t j = 0; j != v28; uint64_t j = (char *)j + 1)
        {
          if (*(void *)v42 != v29) {
            objc_enumerationMutation(v35);
          }
          sub_100134750(buf, (char *)[*(id *)(*((void *)&v41 + 1) + 8 * (void)j) UTF8String]);
          sub_100645C44(v39, (const void **)buf, (uint64_t)buf);
          if (v62 < 0) {
            operator delete(*(void **)buf);
          }
        }
        id v28 = [v35 countByEnumeratingWithState:&v41 objects:v55 count:16];
      }
      while (v28);
    }
    return 1;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_102314A58);
  }
  __int16 v10 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    signed int v11 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v5;
    __int16 v60 = 1024;
    signed int v61 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Will not load older handsfree whitelist version %d than the current version %d", buf, 0xEu);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102314A58);
    }
    int v13 = *(_DWORD *)(a1 + 80);
    LODWORD(__str.__r_.__value_.__l.__data_) = 67109376;
    HIDWORD(__str.__r_.__value_.__r.__words[0]) = v5;
    LOWORD(__str.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = v13;
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBTHandsfreeWhitelist::load(NSDictionary *)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
    return 0;
  }
  return result;
}

void sub_10116427C(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x2E7]) < 0) {
    operator delete((void *)STACK[0x2D0]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1011642BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 8;
  unsigned int v5 = sub_100C5273C((const char *)(a2 + 8));
  if (v5)
  {
    unsigned int v6 = v5;
    uint64_t v8 = a1 + 16;
    uint64_t v7 = *(void *)(a1 + 16);
    if (!v7) {
      goto LABEL_13;
    }
    uint64_t v9 = a1 + 16;
    do
    {
      unsigned int v10 = *(_DWORD *)(v7 + 28);
      BOOL v11 = v10 >= v5;
      if (v10 >= v5) {
        __int16 v12 = (uint64_t *)v7;
      }
      else {
        __int16 v12 = (uint64_t *)(v7 + 8);
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      uint64_t v7 = *v12;
    }
    while (*v12);
    if (v9 == v8 || *(_DWORD *)(v9 + 28) > v5) {
LABEL_13:
    }
      uint64_t v9 = a1 + 16;
    int v13 = sub_101164870(a1, v5);
    unsigned int v14 = sub_101164A1C(a1, a2 + 32);
    unsigned int v15 = v14;
    int v16 = *(_DWORD *)(a2 + 84);
    uint64_t v17 = &qword_102419000;
    if (v16 == 22)
    {
      uint64_t v19 = v13 ^ 1u;
    }
    else if (v16 == 17)
    {
      int v18 = v13 ^ 1;
      if (v9 == v8) {
        int v18 = 0;
      }
      uint64_t v19 = v18 | v14;
    }
    else
    {
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_102314A78);
      }
      uint64_t v22 = qword_102419018;
      if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#Warning Unexpected device type in handsfree check.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419010 != -1) {
          dispatch_once(&qword_102419010, &stru_102314A78);
        }
        id v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBTHandsfreeWhitelist::isHandsfree(const CLBTDeviceEntry &) const", "%s\n", v28);
        if (v28 != (char *)buf) {
          free(v28);
        }
        uint64_t v19 = 0;
        uint64_t v17 = &qword_102419000;
      }
      else
      {
        uint64_t v19 = 0;
      }
    }
    if (v17[2] != -1) {
      dispatch_once(&qword_102419010, &stru_102314A78);
    }
    long long v23 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a2 + 31) >= 0) {
        uint64_t v24 = v4;
      }
      else {
        uint64_t v24 = *(void *)(a2 + 8);
      }
      *(_DWORD *)long long buf = 136316418;
      uint64_t v30 = v24;
      __int16 v31 = 1026;
      unsigned int v32 = v6;
      __int16 v33 = 1026;
      BOOL v34 = v9 != v8;
      __int16 v35 = 1026;
      int v36 = v13;
      __int16 v37 = 1026;
      unsigned int v38 = v15;
      __int16 v39 = 1026;
      int v40 = v19;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#fmc BT device,address,%s,oui,%{public}d,on whitelist,%{public}d,on denylist,%{public}d,isNameWhitelisted,%{public}d,ishandsfree,%{public}d", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_102314A78);
      }
      long long v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBTHandsfreeWhitelist::isHandsfree(const CLBTDeviceEntry &) const", "%s\n", v26);
      if (v26 != (char *)buf) {
        free(v26);
      }
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102314A58);
    }
    char v20 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a2 + 31) >= 0) {
        uint64_t v21 = v4;
      }
      else {
        uint64_t v21 = *(void *)(a2 + 8);
      }
      *(_DWORD *)long long buf = 136315138;
      uint64_t v30 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning Input BT MAC address %s is malformed.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102314A58);
      }
      long long v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBTHandsfreeWhitelist::isHandsfree(const CLBTDeviceEntry &) const", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
    return 0;
  }
  return v19;
}

uint64_t sub_101164870(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v2 = a1 + 64;
  uint64_t v3 = v4;
  if (v4)
  {
    uint64_t v5 = v2;
    do
    {
      unsigned int v6 = *(_DWORD *)(v3 + 32);
      BOOL v7 = v6 >= a2;
      if (v6 >= a2) {
        uint64_t v8 = (uint64_t *)v3;
      }
      else {
        uint64_t v8 = (uint64_t *)(v3 + 8);
      }
      if (v7) {
        uint64_t v5 = v3;
      }
      uint64_t v3 = *v8;
    }
    while (*v8);
    if (v5 != v2 && *(_DWORD *)(v5 + 32) <= a2)
    {
      sub_10116FD64(&v14, (const void ***)(v5 + 40));
      sub_100134750(__p, "Name");
      unsigned int v10 = (void **)sub_10012FFE0((uint64_t)&v14, (const void **)__p);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      if (&v15 != v10) {
        sub_101032120(&v13, (uint64_t)(v10 + 7), 0);
      }
      sub_100DB0390((uint64_t)&v14, v15);
    }
  }
  return 0;
}

void sub_1011649C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1016F8C7C((std::locale *)(v14 - 104));
  sub_100DB0390(v14 - 40, *(void **)(v14 - 32));
  _Unwind_Resume(a1);
}

uint64_t sub_101164A1C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)a2;
    uint64_t v14 = *(void *)(a2 + 16);
  }
  if (v14 >= 0) {
    uint64_t v3 = __dst;
  }
  else {
    uint64_t v3 = (void **)__dst[0];
  }
  if (v14 >= 0) {
    uint64_t v4 = (char *)HIBYTE(v14);
  }
  else {
    uint64_t v4 = (char *)__dst[1];
  }
  for (; v4; --v4)
  {
    *(unsigned char *)uint64_t v3 = __toupper(*(char *)v3);
    uint64_t v3 = (void **)((char *)v3 + 1);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5 != a1 + 40)
  {
    if (*(char *)(v5 + 55) < 0)
    {
      sub_1000DC48C(v11, *(void **)(v5 + 32), *(void *)(v5 + 40));
    }
    else
    {
      *(_OWORD *)BOOL v11 = *(_OWORD *)(v5 + 32);
      uint64_t v12 = *(void *)(v5 + 48);
    }
    std::operator+<char>();
    unsigned int v6 = std::string::append(&__p, "\\b");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    *(void *)&long long v16 = *((void *)&v6->__r_.__value_.__l + 2);
    long long v15 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    sub_101032120(&v10, (uint64_t)&v15, 0);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
  return 0;
}

void sub_101164CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::locale a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101164E10(id a1)
{
  qword_102485A70 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLVehicleConnectionNotifierSilo"];
}

uint64_t sub_101164ED0(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1011657C4;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_102485A80 != -1) {
    dispatch_once(&qword_102485A80, block);
  }
  return qword_10248B368;
}

void sub_101165214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101165274(uint64_t a1, char a2)
{
  int v4 = a2 & 3;
  if (qword_102419010 != -1) {
    dispatch_once(&qword_102419010, &stru_102314A78);
  }
  uint64_t v5 = qword_102419018;
  if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v6 = "answered";
    if ((~a2 & 3) == 0) {
      unsigned int v6 = "timeout";
    }
    *(_DWORD *)long long buf = 136315394;
    uint64_t v30 = v6;
    __int16 v31 = 1024;
    int v32 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#fmc IsVehicleConnectedDialog dismissed with state (%s), %u", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_102314A78);
    }
    long long v16 = "answered";
    if ((~a2 & 3) == 0) {
      long long v16 = "timeout";
    }
    int v25 = 136315394;
    long long v26 = v16;
    __int16 v27 = 1024;
    int v28 = v4;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::onConfirmationPopupDialogCb(CFOptionFlags)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  if ((v4 - 1) >= 2)
  {
    if (v4) {
      goto LABEL_27;
    }
  }
  else
  {
    if (*(char *)(a1 + 895) < 0)
    {
      sub_1000DC48C(__dst, *(void **)(a1 + 872), *(void *)(a1 + 880));
    }
    else
    {
      *(_OWORD *)std::string __dst = *(_OWORD *)(a1 + 872);
      uint64_t v21 = *(void *)(a1 + 888);
    }
    p_p = &__p;
    if (*(char *)(a1 + 919) < 0)
    {
      p_p = (long long *)sub_1000DC48C(&__p, *(void **)(a1 + 896), *(void *)(a1 + 904));
    }
    else
    {
      long long __p = *(_OWORD *)(a1 + 896);
      uint64_t v23 = *(void *)(a1 + 912);
    }
    int v24 = *(_DWORD *)(a1 + 920);
    sub_10116B6F4((uint64_t)p_p, (std::string::size_type)__dst, (a2 & 3) == 1);
    if (SHIBYTE(v23) < 0) {
      operator delete((void *)__p);
    }
    if (SHIBYTE(v21) < 0) {
      operator delete(__dst[0]);
    }
  }
  uint64_t v9 = (void *)(a1 + 872);
  if (*(char *)(a1 + 895) < 0) {
    uint64_t v9 = (void *)*v9;
  }
  std::locale v10 = +[NSString stringWithUTF8String:v9];
  if ((a2 & 3) == 1) {
    BOOL v11 = &__kCFBooleanTrue;
  }
  else {
    BOOL v11 = &__kCFBooleanFalse;
  }
  [*(id *)(a1 + 928) setObject:v11 forKeyedSubscript:v10];
  uint64_t v12 = sub_1000A6958();
  sub_1004D258C(v12);
  uint64_t v13 = sub_1000A6958();
  (*(void (**)(uint64_t))(*(void *)v13 + 944))(v13);
LABEL_27:
  CFRelease(*(CFTypeRef *)(a1 + 936));
  *(void *)(a1 + 936) = 0;
  sub_10116BC5C((int64x2_t *)(a1 + 824));
  if (qword_102419010 != -1) {
    dispatch_once(&qword_102419010, &stru_102314A78);
  }
  uint64_t v14 = qword_102419018;
  if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEBUG))
  {
    long long v15 = *(const char **)(a1 + 864);
    *(_DWORD *)long long buf = 134217984;
    uint64_t v30 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#fmc fToBePromptedBTDevices.size(), %lu", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_102314A78);
    }
    int v18 = *(const char **)(a1 + 864);
    int v25 = 134217984;
    long long v26 = v18;
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::onConfirmationPopupDialogCb(CFOptionFlags)", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
}

void sub_101165730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1011657C4()
{
}

void sub_101165810()
{
}

void sub_101165834(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_101166A70(a1, "CLVehicleConnectionNotifier", a2);
  *(void *)uint64_t v3 = off_1023148B0;
  *(void *)(v3 + 112) = 0;
  *(void *)(v3 + 128) = 0;
  *(void *)(v3 + 120) = v3 + 128;
  *(void *)(v3 + 160) = 0;
  *(void *)(v3 + 184) = 0;
  *(void *)(v3 + 136) = 0;
  *(void *)(v3 + 144) = off_102314AC8;
  *(void *)(v3 + 152) = v3 + 160;
  *(void *)(v3 + 168) = 0;
  *(void *)(v3 + 176) = v3 + 184;
  *(void *)(v3 + 208) = 0;
  *(void *)(v3 + 216) = 0;
  *(void *)(v3 + 192) = 0;
  *(void *)(v3 + 200) = v3 + 208;
  *(_DWORD *)(v3 + 224) = -1;
  sub_100134750((void *)(v3 + 232), "https://configuration.apple.com/configurations/internetservices/bt/bcwv.plist");
  sub_1005C3A50(a1 + 256, *(void **)(a1 + 32), (uint64_t)sub_101166B1C, a1);
}

void sub_101166898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  if (a27) {
    sub_1000DB0A0(a27);
  }
  uint64_t v64 = *(void *)(v58 + 2568);
  *(void *)(v58 + 2568) = 0;
  if (v64) {
    (*(void (**)(uint64_t))(*(void *)v64 + 8))(v64);
  }
  uint64_t v65 = *v61;
  *signed int v61 = 0;
  if (v65) {
    (*(void (**)(uint64_t))(*(void *)v65 + 8))(v65);
  }
  sub_100286A7C(v58 + 872);
  sub_10116FEE0(v62);
  sub_1005C3B7C(a13);
  if (*(char *)(v58 + 535) < 0) {
    operator delete(*v60);
  }
  sub_1005C3B7C(a14);
  if (*(char *)(v58 + 255) < 0) {
    operator delete(*v59);
  }
  sub_10116F00C(a11);
  sub_100C54F50(a12, *(void **)(v58 + 128));
  sub_1011687EC(v58);
  _Unwind_Resume(a1);
}

void sub_101166A60()
{
}

uint64_t sub_101166A70(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_102314B18;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_101166B00(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_101166B1C(uint64_t a1, int a2, uint64_t a3)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a3 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102314A98);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v9 = 1;
    unsigned int v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLVehicleConnectionNotifier::onBluetoothWhitelistFileUpdated", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102314A98);
    }
    long long v7 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v11 = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2082;
      long long v15 = "activity";
      __int16 v16 = 2050;
      uint64_t v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLVehicleConnectionNotifier::onBluetoothWhitelistFileUpdated\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v9 = 0;
  }
  sub_10116A194(a3, a1, a2);
  if (v9) {
    os_activity_scope_leave(&state);
  }
}

void sub_101166CD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101166CF8(uint64_t a1, int *a2, unsigned __int8 *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102314A98);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLVehicleConnectionNotifier::onBluetoothNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102314A98);
    }
    char v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      long long v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLVehicleConnectionNotifier::onBluetoothNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10116C77C(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_101166EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101166ED4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102314A98);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    uint64_t v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLVehicleConnectionNotifier::onMotionStateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102314A98);
    }
    uint64_t v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2082;
      __int16 v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLVehicleConnectionNotifier::onMotionStateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  sub_10116CF48(a4, v6, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_101167090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011670B0(uint64_t a1)
{
  sub_100103240();
  uint64_t result = sub_1000A16E8();
  if ((result & 0x80000000) != 0)
  {
    *(unsigned char *)(a1 + 960) = 1;
    [*(id *)(*(void *)(a1 + 2568) + 16) register:*(void *)(*(void *)(a1 + 2568) + 8) forNotification:2 registrationInfo:0];
    return (uint64_t)sub_101169308((id)a1);
  }
  return result;
}

void sub_101167118(_DWORD *a1, int a2, void *a3, void *a4, void *a5)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_102314A58);
  }
  char v10 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    int v11 = a1[238];
    int v12 = a1[239];
    *(_DWORD *)long long buf = 67109632;
    int v15 = a2;
    __int16 v16 = 1024;
    int v17 = v11;
    __int16 v18 = 1024;
    int v19 = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CarKitConnectionStatus,%d,HandsfreeConnectionStatus,%d,current VehicleConnectionStatus,%d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102314A58);
    }
    __int16 v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::setCarKitConnectionStatus(ConnectionStatus, NSString *, NSString *, NSString *)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  if (a1[237] != a2)
  {
    a1[237] = a2;
    sub_101168D08((uint64_t)a1, a2, a1[238], a3, a4, a5);
  }
}

id sub_101167348(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(v5 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _OWORD v8[2] = sub_1011673C4;
  void v8[3] = &unk_1022C9610;
  char v9 = a2;
  v8[4] = a3;
  v8[5] = a4;
  void v8[6] = a5;
  v8[7] = v5;
  return [v6 async:v8];
}

void sub_1011673C4(uint64_t a1)
{
  uint64_t v2 = *(_DWORD **)(a1 + 56);
  if (qword_102419010 != -1) {
    dispatch_once(&qword_102419010, &stru_102314A78);
  }
  uint64_t v3 = qword_102419018;
  if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(a1 + 64);
    *(_DWORD *)long long buf = 67240192;
    int v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#fmc CarKit connection status, %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_102314A78);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLVehicleConnectionNotifier::CLVehicleConnectionNotifier(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_101167118(v2, *(unsigned __int8 *)(a1 + 64), *(void **)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48));
}

void sub_101167590(uint64_t a1)
{
}

void sub_101167598(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 792))
  {
    if (*(void *)(a1 + 936))
    {
      uint64_t v2 = *(void **)(a1 + 800);
      [v2 setNextFireDelay:5.0];
    }
    else if (*(void *)(a1 + 864))
    {
      unint64_t v3 = *(void *)(*(void *)(a1 + 832) + 8 * (*(void *)(a1 + 856) / 0x49uLL))
         + 56 * (*(void *)(a1 + 856) % 0x49uLL);
      int v4 = (std::string::size_type *)(a1 + 872);
      std::string::operator=((std::string *)(a1 + 872), (const std::string *)v3);
      uint64_t v5 = (const std::string::value_type *)(a1 + 896);
      std::string::operator=((std::string *)(a1 + 896), (const std::string *)(v3 + 24));
      *(_DWORD *)(a1 + 920) = *(_DWORD *)(v3 + 48);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_102314A78);
      }
      uint64_t v6 = qword_102419018;
      if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
      {
        std::string::size_type v7 = a1 + 872;
        if (*(char *)(a1 + 895) < 0) {
          std::string::size_type v7 = *v4;
        }
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#fmc Ask user to confirm BT device %s", (uint8_t *)buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419010 != -1) {
          dispatch_once(&qword_102419010, &stru_102314A78);
        }
        if (*(char *)(a1 + 895) < 0) {
          int v4 = (std::string::size_type *)*v4;
        }
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
        uint64_t v30 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::showConfirmationDialogIfNeeded()", "%s\n", (const char *)v30);
        if (v30 != buf) {
          free(v30);
        }
      }
      memset(&__p, 0, sizeof(__p));
      switch(*(_DWORD *)(a1 + 920))
      {
        case 0x10:
          sub_100134750(buf, "headset");
          break;
        case 0x13:
          sub_100134750(buf, "speaker");
          break;
        case 0x14:
          sub_100134750(buf, "headphone");
          break;
        default:
          sub_100134750(buf, "vehicle");
          break;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = buf[0];
      sub_100134750(&v36, "Is BT device \"");
      if (*(char *)(a1 + 919) < 0) {
        uint64_t v5 = *(const std::string::value_type **)v5;
      }
      uint64_t v8 = std::string::append(&v36, v5);
      long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v37.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      sub_100134750(v34, "\" a ");
      if ((v35 & 0x80u) == 0) {
        char v10 = v34;
      }
      else {
        char v10 = (void **)v34[0];
      }
      if ((v35 & 0x80u) == 0) {
        std::string::size_type v11 = v35;
      }
      else {
        std::string::size_type v11 = (std::string::size_type)v34[1];
      }
      int v12 = std::string::append(&v37, (const std::string::value_type *)v10, v11);
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v40.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      __int16 v16 = std::string::append(&v40, (const std::string::value_type *)p_p, size);
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      buf[0].__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      sub_100134750(v32, "?\n\n With your answer, we collect the accessory name and device type to improve Bluetooth accessory detection. \n\n");
      if ((v33 & 0x80u) == 0) {
        __int16 v18 = v32;
      }
      else {
        __int16 v18 = (void **)v32[0];
      }
      if ((v33 & 0x80u) == 0) {
        std::string::size_type v19 = v33;
      }
      else {
        std::string::size_type v19 = (std::string::size_type)v32[1];
      }
      char v20 = std::string::append(buf, (const std::string::value_type *)v18, v19);
      long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      int64_t v39 = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)unsigned int v38 = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if ((char)v33 < 0) {
        operator delete(v32[0]);
      }
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf[0].__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      if ((char)v35 < 0) {
        operator delete(v34[0]);
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
      LODWORD(v37.__r_.__value_.__l.__data_) = 0;
      Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      CFDictionaryAddValue(Mutable, kCFUserNotificationAlertHeaderKey, @"Apple Internal Data Collection");
      if (v39 >= 0) {
        uint64_t v23 = v38;
      }
      else {
        uint64_t v23 = (void **)v38[0];
      }
      CFStringRef v24 = CFStringCreateWithCStringNoCopy(kCFAllocatorDefault, (const char *)v23, 0x8000100u, kCFAllocatorNull);
      CFDictionaryAddValue(Mutable, kCFUserNotificationAlertMessageKey, v24);
      CFDictionaryAddValue(Mutable, kCFUserNotificationDefaultButtonTitleKey, @"Cancel");
      CFDictionaryAddValue(Mutable, kCFUserNotificationAlternateButtonTitleKey, @"Yes");
      CFDictionaryAddValue(Mutable, kCFUserNotificationOtherButtonTitleKey, @"No");
      int v25 = CFUserNotificationCreate(kCFAllocatorDefault, 20.0, 2uLL, (SInt32 *)&v37, Mutable);
      long long v26 = v25;
      if (!LODWORD(v37.__r_.__value_.__l.__data_))
      {
        if (v25)
        {
          CFRunLoopSourceRef RunLoopSource = CFUserNotificationCreateRunLoopSource(kCFAllocatorDefault, v25, (CFUserNotificationCallBack)sub_10116B498, 0);
          *(void *)(a1 + 936) = RunLoopSource;
          if (RunLoopSource)
          {
            sub_10116B418(a1, v26);
            int v28 = (__CFRunLoop *)sub_1001C2710();
            CFRunLoopAddSource(v28, *(CFRunLoopSourceRef *)(a1 + 936), kCFRunLoopCommonModes);
          }
        }
      }
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_102314A78);
      }
      uint64_t v29 = qword_102419018;
      if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v37.__r_.__value_.__l.__data_;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#fmc In vehicle confirmation dialog shown. %d", (uint8_t *)buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419010 != -1) {
          dispatch_once(&qword_102419010, &stru_102314A78);
        }
        LODWORD(v40.__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(v40.__r_.__value_.__r.__words[0]) = v37.__r_.__value_.__l.__data_;
        __int16 v31 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::showConfirmationDialogIfNeeded()", "%s\n", (const char *)v31);
        if (v31 != buf) {
          free(v31);
        }
      }
      if (v26) {
        CFRelease(v26);
      }
      CFRelease(v24);
      CFRelease(Mutable);
      if (SHIBYTE(v39) < 0) {
        operator delete(v38[0]);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_101167D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  _Unwind_Resume(exception_object);
}

void sub_101167E34(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_102314A58);
  }
  uint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "Timed out waiting to attach to BTServer", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102314A58);
    }
    unint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLVehicleConnectionNotifier::CLVehicleConnectionNotifier(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  sub_101167FD0(v1);
}

void sub_101167FD0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 816))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102314A58);
    }
    uint64_t v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v3 = *(_DWORD *)(a1 + 948);
      int v4 = *(_DWORD *)(a1 + 952);
      *(_DWORD *)long long buf = 67109376;
      int v8 = v3;
      __int16 v9 = 1024;
      int v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "BT is initializing,fCarKitConnectionStatus,%d,fHandsfreeConnectionStatus,%d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102314A58);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::BTInitialized()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    *(unsigned char *)(a1 + 816) = 0;
    int v5 = *(_DWORD *)(a1 + 952);
    if (v5 == -1)
    {
      int v5 = 0;
      *(_DWORD *)(a1 + 952) = 0;
    }
    sub_101168D08(a1, *(_DWORD *)(a1 + 948), v5, 0, 0, 0);
  }
}

uint64_t sub_1011681DC(uint64_t a1)
{
  v31[0] = 0;
  v31[1] = 0;
  uint64_t v29 = off_102314AC8;
  uint64_t v30 = (unsigned int *)v31;
  int v32 = v33;
  v33[0] = 0;
  v35[0] = 0;
  v35[1] = 0;
  v33[1] = 0;
  BOOL v34 = v35;
  int v36 = -1;
  sub_10116A06C(__p);
  sub_101163668((uint64_t)&v29, (const char *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  v23[0] = 0;
  v23[1] = 0;
  long long v21 = off_102314AC8;
  uint64_t v22 = (unsigned int *)v23;
  CFStringRef v24 = v25;
  v25[0] = 0;
  v27[0] = 0;
  v27[1] = 0;
  v25[1] = 0;
  long long v26 = v27;
  int v28 = -1;
  sub_10053B99C(0, __p);
  uint64_t v2 = std::string::append(__p, "bluetooth-carkit-whitelist.plist");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  std::string::size_type v39 = v2->__r_.__value_.__r.__words[2];
  long long v38 = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  sub_101163668((uint64_t)&v21, (const char *)&v38);
  if (SHIBYTE(v39) < 0) {
    operator delete((void *)v38);
  }
  int v4 = v36;
  int v5 = v28;
  uint64_t v6 = (uint64_t (***)())(a1 + 144);
  if (v36 >= v28)
  {
    if (v6 != &v29)
    {
      sub_10116F0CC((uint64_t **)(a1 + 152), v30, (unsigned int *)v31);
      sub_1007790B0((uint64_t **)(a1 + 176), v32, v33);
      sub_10116F330((uint64_t **)(a1 + 200), v34, v35);
      int v4 = v36;
    }
    *(_DWORD *)(a1 + 224) = v4;
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102314A58);
    }
    __int16 v9 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v10 = *(_DWORD *)(a1 + 224);
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(__p[0].__r_.__value_.__r.__words[0]) = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Use framework's handsfree whitelist, version = %d", (uint8_t *)__p, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 == -1) {
        goto LABEL_35;
      }
      goto LABEL_37;
    }
  }
  else
  {
    if (v6 != &v21)
    {
      sub_10116F0CC((uint64_t **)(a1 + 152), v22, (unsigned int *)v23);
      sub_1007790B0((uint64_t **)(a1 + 176), v24, v25);
      sub_10116F330((uint64_t **)(a1 + 200), v26, v27);
      int v5 = v28;
    }
    *(_DWORD *)(a1 + 224) = v5;
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102314A58);
    }
    std::string::size_type v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v8 = *(_DWORD *)(a1 + 224);
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(__p[0].__r_.__value_.__r.__words[0]) = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Use cached handsfree whitelist, version = %d", (uint8_t *)__p, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 == -1)
      {
LABEL_35:
        int v19 = *(_DWORD *)(a1 + 224);
        LODWORD(v38) = 67109120;
        DWORD1(v38) = v19;
        char v20 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::loadHandsfreeWhitelist()", "%s\n", (const char *)v20);
        if (v20 != __p) {
          free(v20);
        }
        goto LABEL_24;
      }
LABEL_37:
      dispatch_once(&qword_102419630, &stru_102314A58);
      goto LABEL_35;
    }
  }
LABEL_24:
  __p[0].__r_.__value_.__r.__words[0] = 0;
  uint64_t v11 = sub_1000A6958();
  if (sub_1004D01D8(v11, @"InVehiclePromptedAddress", (CFTypeRef *)&__p[0].__r_.__value_.__l.__data_))
  {
    CFTypeID v12 = CFGetTypeID(__p[0].__r_.__value_.__l.__data_);
    if (v12 == CFDictionaryGetTypeID())
    {
      uint64_t v13 = sub_1000A6958();
      sub_1004CF870(v13);
      uint64_t v14 = sub_1000A6958();
      (*(void (**)(uint64_t))(*(void *)v14 + 944))(v14);
    }
  }
  uint64_t v15 = sub_1000A6958();
  if (sub_1004D01D8(v15, @"InVehicleRepromptedAddress", (CFTypeRef *)&__p[0].__r_.__value_.__l.__data_)&& (CFTypeID v16 = CFGetTypeID(__p[0].__r_.__value_.__l.__data_), v16 == CFDictionaryGetTypeID()))
  {
    long long v17 = __p[0].__r_.__value_.__l.__data_;
  }
  else
  {
    long long v17 = (char *)objc_alloc_init((Class)NSMutableDictionary);
  }
  *(void *)(a1 + 928) = v17;
  if (*(int *)(a1 + 224) >= 1) {
    sub_10116979C(a1);
  }
  sub_10116F00C((uint64_t)&v21);
  return sub_10116F00C((uint64_t)&v29);
}

void sub_101168770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
}

uint64_t sub_1011687EC(uint64_t a1)
{
  *(void *)a1 = off_102314B18;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_101168870(uint64_t a1)
{
  *(void *)a1 = off_1023148B0;
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_102314A58);
  }
  uint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLVehicleConnectionNotifier is shutting down", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102314A58);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLVehicleConnectionNotifier::~CLVehicleConnectionNotifier()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  [*(id *)(a1 + 112) setConnectionUpdateHandler:0];

  [*(id *)(a1 + 808) invalidate];
  *(void *)(a1 + 808) = 0;
  [*(id *)(a1 + 968) invalidate];

  *(void *)(a1 + 968) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = *(void *)(a1 + 2568);
  *(void *)(a1 + 2568) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 2560);
  *(void *)(a1 + 2560) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  if (*(char *)(a1 + 919) < 0) {
    operator delete(*(void **)(a1 + 896));
  }
  if (*(char *)(a1 + 895) < 0) {
    operator delete(*(void **)(a1 + 872));
  }
  sub_10116FEE0((void *)(a1 + 824));
  sub_1005C3B7C(a1 + 536);
  if (*(char *)(a1 + 535) < 0) {
    operator delete(*(void **)(a1 + 512));
  }
  sub_1005C3B7C(a1 + 256);
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  sub_10116F00C(a1 + 144);
  sub_100C54F50(a1 + 120, *(void **)(a1 + 128));
  sub_1011687EC(a1);
  return a1;
}

void sub_101168B6C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_101168B7C(uint64_t a1)
{
  sub_101168870(a1);

  operator delete();
}

void *sub_101168BB4@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

uint64_t sub_101168C30(double *a1)
{
  if (a1[221] > 0.0)
  {
    uint64_t v2 = a1 + 221;
    memcpy(__dst, a1 + 122, sizeof(__dst));
    int v4 = 0;
    (*(void (**)(double *, int *, unsigned char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v4, __dst, 1, 0xFFFFFFFFLL, 0);
    memcpy(v2, __dst, 0x318uLL);
  }
  return 1;
}

uint64_t sub_101168D00()
{
  return 1;
}

void sub_101168D08(uint64_t a1, int a2, int a3, void *a4, void *a5, void *a6)
{
  if (sub_10116BF80((_DWORD *)a1, a2, a3))
  {
    int v10 = *(_DWORD *)(a1 + 956);
    BOOL v11 = *(double *)(a1 + 976) > 0.0;
    if (*(double *)(a1 + 984) >= 0.0) {
      BOOL v11 = 0;
    }
    if ((v10 == 1) != v11)
    {
      sub_10116C1B4(a1, v10 == 1, a4, a5, a6);
    }
  }
}

void sub_101168DA8(uint64_t a1)
{
  sub_101169154(a1);
  if (qword_102419010 != -1) {
    dispatch_once(&qword_102419010, &stru_102314A78);
  }
  uint64_t v2 = qword_102419018;
  if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#fmc Posting notification upon vehicle exit", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_102314A78);
    }
    LOWORD(v14) = 0;
    __int16 v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::postVehicleExitNotification()", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, kCMVehicleExitNotification, 0, 0, 0);
  *(CFAbsoluteTime *)(a1 + 1760) = CFAbsoluteTimeGetCurrent();
  sub_1011691A8(v4, (double *)(a1 + 976));
  memcpy(buf, (const void *)(a1 + 976), 0x318uLL);
  int v14 = 0;
  (*(void (**)(uint64_t, int *, uint8_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v14, buf, 1, 0xFFFFFFFFLL, 0);
  memcpy((void *)(a1 + 1768), buf, 0x318uLL);
  if (qword_102419010 != -1) {
    dispatch_once(&qword_102419010, &stru_102314A78);
  }
  int v5 = qword_102419018;
  if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 976);
    uint64_t v7 = *(void *)(a1 + 984);
    uint64_t v8 = *(void *)(a1 + 1760);
    *(_DWORD *)long long buf = 134218496;
    *(void *)&uint8_t buf[4] = v6;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&unsigned char buf[14] = v7;
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)&uint8_t buf[24] = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#fmc startTime,%f,endTime,%f,exitTime,%f", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_102314A78);
    }
    uint64_t v10 = *(void *)(a1 + 976);
    uint64_t v11 = *(void *)(a1 + 984);
    uint64_t v12 = *(void *)(a1 + 1760);
    int v14 = 134218496;
    uint64_t v15 = v10;
    __int16 v16 = 2048;
    uint64_t v17 = v11;
    __int16 v18 = 2048;
    uint64_t v19 = v12;
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::postVehicleExitNotification()", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
}

void sub_101169154(uint64_t a1)
{
  if ((sub_1000A16E8() & 0x80000000) != 0)
  {
    *(unsigned char *)(a1 + 960) = 0;
    [*(id *)(*(void *)(a1 + 2568) + 16) unregister:*(void *)(*(void *)(a1 + 2568) + 8) forNotification:2];
    [*(id *)(a1 + 968) invalidate];

    *(void *)(a1 + 968) = 0;
  }
}

void sub_1011691A8(uint64_t a1, double *a2)
{
  uint64_t v4 = +[NSMutableArray arrayWithCapacity:6];
  [(NSMutableArray *)v4 setObject:+[NSNumber numberWithDouble:*a2] atIndexedSubscript:0];
  [(NSMutableArray *)v4 setObject:+[NSNumber numberWithDouble:a2[1]] atIndexedSubscript:1];
  [(NSMutableArray *)v4 setObject:+[NSString stringWithUTF8String:a2 + 2] atIndexedSubscript:2];
  [(NSMutableArray *)v4 setObject:+[NSString stringWithUTF8String:a2 + 34] atIndexedSubscript:3];
  [(NSMutableArray *)v4 setObject:+[NSString stringWithUTF8String:a2 + 66] atIndexedSubscript:4];
  [(NSMutableArray *)v4 setObject:+[NSNumber numberWithDouble:a2[98]] atIndexedSubscript:5];
  uint64_t v5 = sub_1000A6958();
  sub_1004D258C(v5);
  uint64_t v6 = *(void *)sub_1000A6958();
  (*(void (**)(void))(v6 + 944))();
}

id sub_101169308(id result)
{
  if (*((unsigned char *)result + 960))
  {
    uint64_t v1 = (id *)result;
    uint64_t result = (id)+[CMActivityAlarmLocal activityAlarmAvailable];
    if (result)
    {
      uint64_t v2 = [CMActivityAlarmLocal alloc];
      id v3 = [v1[5] queue];
      v4[0] = _NSConcreteStackBlock;
      v4[1] = 3221225472;
      void v4[2] = sub_10116C768;
      v4[3] = &unk_1022B7B30;
      void v4[4] = v1;
      uint64_t result = [(CMActivityAlarmLocal *)v2 initWithTrigger:13 duration:v3 onQueue:v4 withHandler:1.0];
      v1[121] = result;
    }
  }
  return result;
}

void sub_1011693C0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  *(unsigned char *)(a1 + 816) = 0;
  if (a3 != -1)
  {
    if (*(char *)(a2 + 31) < 0)
    {
      sub_1000DC48C(__dst, *(void **)(a2 + 8), *(void *)(a2 + 16));
    }
    else
    {
      *(_OWORD *)std::string __dst = *(_OWORD *)(a2 + 8);
      uint64_t v34 = *(void *)(a2 + 24);
    }
    if (!sub_100040D3C(a1 + 120, (const void **)__dst))
    {
      sub_100997A7C((uint64_t)&v22, a2);
      int v8 = *(_DWORD *)(a2 + 84);
      LODWORD(v31) = 0;
      DWORD1(v31) = v8;
      BYTE8(v31) = 0;
      uint64_t v32 = 0x7FEFFFFFFFFFFFFFLL;
      unsigned __int8 v35 = __dst;
      __int16 v9 = sub_101170030((uint64_t **)(a1 + 120), (const void **)__dst, (uint64_t)&unk_101D0B290, (long long **)&v35);
      v9[7] = (uint64_t)v22;
      uint64_t v10 = (void **)(v9 + 8);
      if (*((char *)v9 + 87) < 0) {
        operator delete(*v10);
      }
      v9[10] = v24;
      *(_OWORD *)uint64_t v10 = v23;
      HIBYTE(v24) = 0;
      LOBYTE(v23) = 0;
      uint64_t v11 = (void **)(v9 + 11);
      if (*((char *)v9 + 111) < 0) {
        operator delete(*v11);
      }
      char v12 = 0;
      v9[13] = v26;
      *(_OWORD *)uint64_t v11 = __p;
      HIBYTE(v26) = 0;
      LOBYTE(__p) = 0;
      uint64_t v13 = (void **)(v9 + 14);
      if (*((char *)v9 + 135) < 0)
      {
        operator delete(*v13);
        char v12 = HIBYTE(v26);
      }
      v9[16] = v28;
      *(_OWORD *)uint64_t v13 = v27;
      HIBYTE(v28) = 0;
      LOBYTE(v27) = 0;
      *(_OWORD *)(v9 + 17) = v29;
      *((unsigned char *)v9 + 152) = v30;
      v9[22] = v32;
      *((_OWORD *)v9 + 10) = v31;
      if (v12 < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v24) < 0) {
        operator delete((void *)v23);
      }
    }
    uint64_t v22 = __dst;
    int v14 = *((_DWORD *)sub_101170030((uint64_t **)(a1 + 120), (const void **)__dst, (uint64_t)&unk_101D0B290, (long long **)&v22)+ 40);
    int v15 = *a4;
    if (*a4 == 11)
    {
      uint64_t v22 = __dst;
      uint64_t v17 = sub_101170030((uint64_t **)(a1 + 120), (const void **)__dst, (uint64_t)&unk_101D0B290, (long long **)&v22);
      int v18 = 0;
    }
    else
    {
      uint64_t v22 = __dst;
      if (v15 == 10)
      {
        int v16 = *((_DWORD *)sub_101170030((uint64_t **)(a1 + 120), (const void **)__dst, (uint64_t)&unk_101D0B290, (long long **)&v22)+ 40);
        uint64_t v22 = __dst;
        uint64_t v17 = sub_101170030((uint64_t **)(a1 + 120), (const void **)__dst, (uint64_t)&unk_101D0B290, (long long **)&v22);
        int v18 = v16 | a3;
      }
      else
      {
        int v19 = *((_DWORD *)sub_101170030((uint64_t **)(a1 + 120), (const void **)__dst, (uint64_t)&unk_101D0B290, (long long **)&v22)+ 40);
        uint64_t v22 = __dst;
        uint64_t v17 = sub_101170030((uint64_t **)(a1 + 120), (const void **)__dst, (uint64_t)&unk_101D0B290, (long long **)&v22);
        int v18 = v19 & ~a3;
      }
    }
    *((_DWORD *)v17 + 40) = v18;
    if (v14)
    {
      uint64_t v22 = __dst;
      if (*((_DWORD *)sub_101170030((uint64_t **)(a1 + 120), (const void **)__dst, (uint64_t)&unk_101D0B290, (long long **)&v22)+ 40))goto LABEL_27; {
      uint64_t v22 = __dst;
      }
      char v20 = sub_101170030((uint64_t **)(a1 + 120), (const void **)__dst, (uint64_t)&unk_101D0B290, (long long **)&v22);
      CFAbsoluteTime Current = 1.79769313e308;
    }
    else
    {
      uint64_t v22 = __dst;
      if (!*((_DWORD *)sub_101170030((uint64_t **)(a1 + 120), (const void **)__dst, (uint64_t)&unk_101D0B290, (long long **)&v22)+ 40))goto LABEL_27; {
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      }
      uint64_t v22 = __dst;
      char v20 = sub_101170030((uint64_t **)(a1 + 120), (const void **)__dst, (uint64_t)&unk_101D0B290, (long long **)&v22);
    }
    *((CFAbsoluteTime *)v20 + 22) = Current;
LABEL_27:
    sub_10116979C(a1);
    if (SHIBYTE(v34) < 0) {
      operator delete(__dst[0]);
    }
  }
}

void sub_101169768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10116979C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 816))
  {
    memset(&__p, 0, sizeof(__p));
    int v2 = sub_10116986C(a1, (void *)(a1 + 120), &__p);
    if (*(_DWORD *)(a1 + 952) != v2)
    {
      *(_DWORD *)(a1 + 952) = v2;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      sub_101168D08(a1, *(_DWORD *)(a1 + 948), v2, 0, 0, +[NSString stringWithCString:p_p encoding:4]);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_101169850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10116986C(uint64_t a1, void *a2, std::string *a3)
{
  id v3 = a2 + 1;
  uint64_t v4 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    uint64_t v6 = 0;
    double v7 = 1.79769313e308;
    while (1)
    {
      if (*((_DWORD *)v4 + 40))
      {
        double v8 = *((double *)v4 + 22);
        if (v8 != 1.79769313e308)
        {
          int v9 = *((_DWORD *)v4 + 41);
          BOOL v10 = v9 == 22 || v9 == 17;
          if (v10)
          {
            if (sub_101169B88(a1, (uint64_t)(v4 + 4)))
            {
              double v8 = *((double *)v4 + 22);
LABEL_32:
              uint64_t v6 = 1;
              *((unsigned char *)v4 + 168) = 1;
              if (v8 < v7)
              {
                std::string::operator=(a3, (const std::string *)(v4 + 4));
                double v7 = v8;
              }
              goto LABEL_18;
            }
          }
          else if (v9 == 16 && *(unsigned char *)(a1 + 944) != 0)
          {
            goto LABEL_32;
          }
        }
      }
      *((unsigned char *)v4 + 168) = 0;
LABEL_18:
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_102314A78);
      }
      char v12 = qword_102419018;
      if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_INFO))
      {
        uint64_t v13 = v4 + 4;
        if (*((char *)v4 + 55) < 0) {
          uint64_t v13 = (void *)v4[4];
        }
        int v14 = sub_100C5273C((const char *)v4 + 32);
        int v15 = *((_DWORD *)v4 + 40);
        int v16 = *((_DWORD *)v4 + 41);
        *(_DWORD *)long long buf = 136315906;
        long long v23 = v13;
        __int16 v24 = 1026;
        int v25 = v14;
        __int16 v26 = 1026;
        int v27 = v15;
        __int16 v28 = 1026;
        int v29 = v16;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "#fmc address,%s,oui,%{public}d,mask,0x%{public}x,type,%{public}d", buf, 0x1Eu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419010 != -1) {
          dispatch_once(&qword_102419010, &stru_102314A78);
        }
        sub_100C5273C((const char *)v4 + 32);
        int v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLVehicleConnectionNotifier::ConnectionStatus CLVehicleConnectionNotifier::updateHandsfreeConnectionState(std::map<std::string, CLBTDeviceEntry> &, std::string &)", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
      uint64_t v17 = (void *)v4[1];
      if (v17)
      {
        do
        {
          int v18 = v17;
          uint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          int v18 = (void *)v4[2];
          BOOL v10 = *v18 == (void)v4;
          uint64_t v4 = v18;
        }
        while (!v10);
      }
      uint64_t v4 = v18;
      if (v18 == v3) {
        return v6;
      }
    }
  }
  return 0;
}

uint64_t sub_101169B88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10012FFE0(a1 + 120, (const void **)a2);
  if (a1 + 128 == v4)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102314A58);
    }
    uint64_t v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(a2 + 23) >= 0) {
        double v7 = (const void *)a2;
      }
      else {
        double v7 = *(const void **)a2;
      }
      *(_DWORD *)long long buf = 136315138;
      BOOL v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Cannot find the corresponding device entry for BT address %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102314A58);
      }
      double v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLVehicleConnectionNotifier::isHandsfreeDevice(const std::string &) const", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    return 0;
  }
  else
  {
    return sub_1011642BC(a1 + 144, v4 + 56);
  }
}

BOOL sub_101169DBC(uint64_t a1, const char *a2)
{
  v13[0] = 0;
  v13[1] = 0;
  uint64_t v11 = off_102314AC8;
  char v12 = (unsigned int *)v13;
  int v14 = v15;
  v15[0] = 0;
  v17[0] = 0;
  v17[1] = 0;
  v15[1] = 0;
  int v16 = v17;
  int v18 = -1;
  BOOL v3 = sub_101163668((uint64_t)&v11, a2);
  if (v3)
  {
    int v4 = *(_DWORD *)(a1 + 224);
    int v5 = v18;
    if (v4 < v18)
    {
      if ((uint64_t (***)())(a1 + 144) != &v11)
      {
        sub_10116F0CC((uint64_t **)(a1 + 152), v12, (unsigned int *)v13);
        sub_1007790B0((uint64_t **)(a1 + 176), v14, v15);
        sub_10116F330((uint64_t **)(a1 + 200), v16, v17);
        int v5 = v18;
      }
      *(_DWORD *)(a1 + 224) = v5;
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102314A58);
      }
      uint64_t v6 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        int v7 = *(_DWORD *)(a1 + 224);
        *(_DWORD *)long long buf = 67109376;
        int v24 = v4;
        __int16 v25 = 1024;
        int v26 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Use cache handsfree whitelist, old version = %d, new version = %d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_102314A58);
        }
        int v9 = *(_DWORD *)(a1 + 224);
        int v19 = 67109376;
        int v20 = v4;
        __int16 v21 = 1024;
        int v22 = v9;
        BOOL v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLVehicleConnectionNotifier::loadHandsfreeWhitelist(const std::string &)", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
    }
    sub_10116979C(a1);
  }
  sub_10116F00C((uint64_t)&v11);
  return v3;
}

void sub_10116A050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10116F00C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10116A06C(std::string *a1@<X8>)
{
  sub_10053B690(&v7);
  int v2 = std::string::append(&v7, off_10241F848);
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v8.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v8.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  int v4 = std::string::append(&v8, "/");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v9.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  uint64_t v6 = std::string::append(&v9, "bluetooth-carkit-whitelist.plist");
  *a1 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
}

void sub_10116A148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 25) < 0) {
    operator delete(*(void **)(v21 - 48));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10116A194(uint64_t a1, uint64_t a2, int a3)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_102314A58);
  }
  uint64_t v6 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_1005C768C(a2, (uint64_t)__p);
    std::string v7 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? __p
       : (std::string *)__p[0].__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Handsfree whitelist,%s,update,%d", (uint8_t *)&buf, 0x12u);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102314A58);
    }
    sub_1005C768C(a2, (uint64_t)&buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    LODWORD(v81.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v81.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_buf;
    WORD2(v81.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&v81.__r_.__value_.__r.__words[1] + 6) = a3;
    stat v74 = (std::string *)_os_log_send_and_compose_impl();
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::onBluetoothWhitelistFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", (const char *)v74);
    if (v74 != __p) {
      free(v74);
    }
  }
  if (a3 != 2) {
    return;
  }
  sub_1005C768C(a2, (uint64_t)&buf);
  sub_10053B99C(0, __p);
  std::string v8 = std::string::append(__p, "bluetooth-carkit-whitelist-version.plist");
  std::string v81 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  char v9 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = buf.__r_.__value_.__l.__size_;
  }
  std::string::size_type v11 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
  int v12 = SHIBYTE(v81.__r_.__value_.__r.__words[2]);
  if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v11 = v81.__r_.__value_.__l.__size_;
  }
  if (size == v11)
  {
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v13 = &v81;
    }
    else {
      uint64_t v13 = (std::string *)v81.__r_.__value_.__r.__words[0];
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      BOOL v22 = memcmp(buf.__r_.__value_.__l.__data_, v13, buf.__r_.__value_.__l.__size_) == 0;
      if ((v12 & 0x80000000) == 0) {
        goto LABEL_31;
      }
    }
    else if (*((unsigned char *)&buf.__r_.__value_.__s + 23))
    {
      uint64_t v14 = HIBYTE(buf.__r_.__value_.__r.__words[2]) - 1;
      int v15 = &buf;
      do
      {
        int v17 = v15->__r_.__value_.__s.__data_[0];
        int v15 = (std::string *)((char *)v15 + 1);
        int v16 = v17;
        int v19 = v13->__r_.__value_.__s.__data_[0];
        uint64_t v13 = (std::string *)((char *)v13 + 1);
        int v18 = v19;
        BOOL v20 = v14-- != 0;
        char v21 = v20;
        BOOL v22 = v16 == v18;
      }
      while (v16 == v18 && (v21 & 1) != 0);
      if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_31:
        if ((v9 & 0x80) == 0) {
          goto LABEL_32;
        }
        goto LABEL_41;
      }
    }
    else
    {
      BOOL v22 = 1;
      if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_31;
      }
    }
  }
  else
  {
    BOOL v22 = 0;
    if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
  }
  operator delete(v81.__r_.__value_.__l.__data_);
  if ((*((unsigned char *)&buf.__r_.__value_.__s + 23) & 0x80) == 0)
  {
LABEL_32:
    if (v22) {
      goto LABEL_33;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete(buf.__r_.__value_.__l.__data_);
  if (v22)
  {
LABEL_33:
    sub_1005C768C(a2, (uint64_t)__p);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v23 = __p;
    }
    else {
      long long v23 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    }
    int v24 = +[NSDictionary dictionaryWithContentsOfFile:](NSDictionary, "dictionaryWithContentsOfFile:", +[NSString stringWithUTF8String:v23]);
    __int16 v25 = v24;
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p[0].__r_.__value_.__l.__data_);
      if (!v25) {
        return;
      }
    }
    else if (!v24)
    {
      return;
    }
    id v40 = [(NSDictionary *)v25 objectForKey:@"version"];
    if (v40)
    {
      signed int v41 = [v40 intValue];
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102314A58);
      }
      long long v42 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        int v43 = *(_DWORD *)(a1 + 224);
        LODWORD(__p[0].__r_.__value_.__l.__data_) = 67109376;
        HIDWORD(__p[0].__r_.__value_.__r.__words[0]) = v43;
        LOWORD(__p[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 2) = v41;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "Handsfree whitelist current version,%d,new version,%d", (uint8_t *)__p, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_102314A58);
        }
        int v77 = *(_DWORD *)(a1 + 224);
        LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
        HIDWORD(buf.__r_.__value_.__r.__words[0]) = v77;
        LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v41;
        int v78 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::onBluetoothWhitelistFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", (const char *)v78);
        if (v78 != __p) {
          free(v78);
        }
      }
      if (v41 > *(_DWORD *)(a1 + 224))
      {
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_102314A58);
        }
        long long v44 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "Scheduling downloading handsfree whitelist", (uint8_t *)__p, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_102314A58);
          }
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          int v79 = (std::string *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::onBluetoothWhitelistFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", (const char *)v79);
          if (v79 != __p) {
            free(v79);
          }
        }
        if ((sub_1005C6BBC(a1 + 536, (double *)(a1 + 784), (double *)(a1 + 784)) & 1) == 0)
        {
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_102314A58);
          }
          long long v45 = qword_102419638;
          if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
          {
            long long v46 = (void *)(a1 + 512);
            if (*(char *)(a1 + 535) < 0) {
              long long v46 = (void *)*v46;
            }
            LODWORD(__p[0].__r_.__value_.__l.__data_) = 136446210;
            *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v46;
            _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_FAULT, "could not start handsfree whitelist file download from %{public}s", (uint8_t *)__p, 0xCu);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(__p, 0x65CuLL);
            if (qword_102419630 != -1) {
              dispatch_once(&qword_102419630, &stru_102314A58);
            }
            long long v47 = (void *)(a1 + 512);
            if (*(char *)(a1 + 535) < 0) {
              long long v47 = (void *)*v47;
            }
            goto LABEL_220;
          }
        }
      }
    }
    return;
  }
LABEL_42:
  sub_1005C768C(a2, (uint64_t)&buf);
  sub_10116B314(__p);
  int v26 = std::string::append(__p, ".gz");
  std::string v81 = *v26;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  char v27 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v28 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v28 = buf.__r_.__value_.__l.__size_;
  }
  std::string::size_type v29 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
  int v30 = SHIBYTE(v81.__r_.__value_.__r.__words[2]);
  if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v29 = v81.__r_.__value_.__l.__size_;
  }
  if (v28 != v29)
  {
    BOOL v39 = 0;
    if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_98;
    }
    goto LABEL_63;
  }
  if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v31 = &v81;
  }
  else {
    long long v31 = (std::string *)v81.__r_.__value_.__r.__words[0];
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v39 = memcmp(buf.__r_.__value_.__l.__data_, v31, buf.__r_.__value_.__l.__size_) == 0;
    goto LABEL_97;
  }
  if (*((unsigned char *)&buf.__r_.__value_.__s + 23))
  {
    uint64_t v32 = HIBYTE(buf.__r_.__value_.__r.__words[2]) - 1;
    unsigned __int8 v33 = &buf;
    do
    {
      int v35 = v33->__r_.__value_.__s.__data_[0];
      unsigned __int8 v33 = (std::string *)((char *)v33 + 1);
      int v34 = v35;
      int v37 = v31->__r_.__value_.__s.__data_[0];
      long long v31 = (std::string *)((char *)v31 + 1);
      int v36 = v37;
      BOOL v20 = v32-- != 0;
      char v38 = v20;
      BOOL v39 = v34 == v36;
    }
    while (v34 == v36 && (v38 & 1) != 0);
LABEL_97:
    if ((v30 & 0x80000000) == 0) {
      goto LABEL_98;
    }
LABEL_63:
    operator delete(v81.__r_.__value_.__l.__data_);
    if ((*((unsigned char *)&buf.__r_.__value_.__s + 23) & 0x80) == 0) {
      goto LABEL_99;
    }
LABEL_64:
    operator delete(buf.__r_.__value_.__l.__data_);
    if (!v39) {
      return;
    }
    goto LABEL_100;
  }
  BOOL v39 = 1;
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_63;
  }
LABEL_98:
  if (v27 < 0) {
    goto LABEL_64;
  }
LABEL_99:
  if (!v39) {
    return;
  }
LABEL_100:
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_102314A58);
  }
  long long v48 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_1005C768C(a2, (uint64_t)__p);
    unsigned int v49 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? __p
        : (std::string *)__p[0].__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v49;
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "Uncompressing handsfree white list file %s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102314A58);
    }
    sub_1005C768C(a2, (uint64_t)&buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v75 = &buf;
    }
    else {
      long long v75 = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    LODWORD(v81.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v81.__r_.__value_.__r.__words + 4) = (std::string::size_type)v75;
    long long v76 = (std::string *)_os_log_send_and_compose_impl();
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::onBluetoothWhitelistFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", (const char *)v76);
    if (v76 != __p) {
      free(v76);
    }
  }
  sub_1005C768C(a2, (uint64_t)__p);
  int v50 = SHIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  std::string::size_type v51 = __p[0].__r_.__value_.__r.__words[0];
  sub_10116B314(&buf);
  if (v50 >= 0) {
    long long v52 = __p;
  }
  else {
    long long v52 = (std::string *)v51;
  }
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v53 = &buf;
  }
  else {
    long long v53 = (std::string *)buf.__r_.__value_.__r.__words[0];
  }
  BOOL v54 = sub_1004BC3D8((const char *)v52, (const char *)v53);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v54) {
      goto LABEL_119;
    }
LABEL_147:
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102314A58);
    }
    uint64_t v65 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1005C768C(a2, (uint64_t)__p);
      double v66 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? __p
          : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v66;
      _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_FAULT, "Failed to decompress handsfree whitelist file %{public}s", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102314A58);
      }
      sub_1005C768C(a2, (uint64_t)&buf);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        double v67 = &buf;
      }
      else {
        double v67 = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      LODWORD(v81.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v81.__r_.__value_.__r.__words + 4) = (std::string::size_type)v67;
      __int16 v68 = (std::string *)_os_log_send_and_compose_impl();
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLVehicleConnectionNotifier::onBluetoothWhitelistFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", (const char *)v68);
      if (v68 != __p) {
        goto LABEL_221;
      }
    }
    return;
  }
  operator delete(__p[0].__r_.__value_.__l.__data_);
  if (!v54) {
    goto LABEL_147;
  }
LABEL_119:
  sub_1005C768C(a2, (uint64_t)__p);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    double v55 = __p;
  }
  else {
    double v55 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  }
  sub_1004BB38C((const char *)v55);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  sub_10116B314(__p);
  BOOL v56 = sub_101169DBC(a1, (const char *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (v56)
  {
    sub_10053B99C(0, __p);
    int v57 = std::string::append(__p, "bluetooth-carkit-whitelist.plist");
    long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    buf.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v58;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v59 = &buf;
    }
    else {
      unint64_t v59 = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    sub_1004BEB14((const char *)v59);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    __int16 v60 = (const std::__fs::filesystem::path *)&buf;
    sub_10116B314(&buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      __int16 v60 = (const std::__fs::filesystem::path *)buf.__r_.__value_.__r.__words[0];
    }
    sub_10053B99C(0, __p);
    signed int v61 = std::string::append(__p, "bluetooth-carkit-whitelist.plist");
    long long v63 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
    v81.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v63;
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v64 = (const std::__fs::filesystem::path *)&v81;
    }
    else {
      uint64_t v64 = (const std::__fs::filesystem::path *)v81.__r_.__value_.__r.__words[0];
    }
    sub_1004BB3CC(v60, v64, v62);
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v81.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    sub_1005C70E0(a1 + 536);
    return;
  }
  sub_10116B314(__p);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v69 = __p;
  }
  else {
    BOOL v69 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  }
  sub_1004BEB14((const char *)v69);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_102314A58);
  }
  __int16 v70 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEBUG, "Downloaded handsfree whitelist file appeared to be corrupt, schedule another download", (uint8_t *)__p, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102314A58);
    }
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    __int16 v80 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::onBluetoothWhitelistFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", (const char *)v80);
    if (v80 != __p) {
      free(v80);
    }
  }
  if ((sub_1005C6BBC(a1 + 536, (double *)(a1 + 784), (double *)(a1 + 784)) & 1) == 0)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102314A58);
    }
    uint64_t v71 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      __int16 v72 = (void *)(a1 + 512);
      if (*(char *)(a1 + 535) < 0) {
        __int16 v72 = (void *)*v72;
      }
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v72;
      _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_FAULT, "could not start handsfree whitelist file download from %{public}s", (uint8_t *)__p, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102314A58);
      }
      long long v47 = (void *)(a1 + 512);
      if (*(char *)(a1 + 535) < 0) {
        long long v47 = (void *)*v47;
      }
LABEL_220:
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v47;
      __int16 v68 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLVehicleConnectionNotifier::onBluetoothWhitelistFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", (const char *)v68);
      if (v68 != __p) {
LABEL_221:
      }
        free(v68);
    }
  }
}

void sub_10116B270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10116B314(std::string *a1@<X8>)
{
  sub_10053B99C(0, &v5);
  int v2 = std::string::append(&v5, "Download_");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  int v4 = std::string::append(&v6, "bluetooth-carkit-whitelist.plist");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_10116B3B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10116B3EC(uint64_t a1)
{
  return a1;
}

uint64_t *sub_10116B418(uint64_t a1, const void *a2)
{
  std::string v6 = a2;
  id v3 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLVehicleConnectionNotifier"];
  CFRetain(a2);
  id v4 = v3;
  std::string v7 = (unint64_t *)&v6;
  uint64_t result = sub_10017C9B0((uint64_t **)&qword_102485A88, (unint64_t *)&v6, (uint64_t)&unk_101D0B290, (uint64_t **)&v7);
  result[5] = (uint64_t)v4;
  return result;
}

void sub_10116B498(const void *a1, uint64_t a2)
{
  CFRetain(a1);
  uint64_t v4 = qword_102485A90;
  if (!qword_102485A90) {
    goto LABEL_12;
  }
  std::string v5 = &qword_102485A90;
  do
  {
    unint64_t v6 = *(void *)(v4 + 32);
    BOOL v7 = v6 >= (unint64_t)a1;
    if (v6 >= (unint64_t)a1) {
      std::string v8 = (uint64_t *)v4;
    }
    else {
      std::string v8 = (uint64_t *)(v4 + 8);
    }
    if (v7) {
      std::string v5 = (uint64_t *)v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 != &qword_102485A90 && v5[4] <= (unint64_t)a1)
  {
    BOOL v10 = (void *)v5[5];
    [v10 deliverAndReleaseNotification:a1 withFlags:a2];

    CFRelease((CFTypeRef)v5[4]);
    sub_1000F0A30((uint64_t **)&qword_102485A88, v5);
    operator delete(v5);
  }
  else
  {
LABEL_12:
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102314A58);
    }
    char v9 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "CFUserNotification event delivery for unknown notification", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102314A58);
      }
      std::string::size_type v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void thunkDeliverCFUserNotification(CFUserNotificationRef, CFOptionFlags)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
}

void sub_10116B6F4(uint64_t a1, std::string::size_type a2, char a3)
{
  if (qword_102419010 != -1) {
    dispatch_once(&qword_102419010, &stru_102314A78);
  }
  std::string v5 = qword_102419018;
  if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
  {
    std::string::size_type v6 = a2;
    if (*(char *)(a2 + 23) < 0) {
      std::string::size_type v6 = *(void *)a2;
    }
    int v7 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)std::string buf = 136315394;
    long long v31 = (std::string *)v6;
    __int16 v32 = 1024;
    int v33 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#fmc logBTConnection, deviceAddr, %s, deviceType, %u", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_102314A78);
    }
    std::string::size_type v12 = a2;
    if (*(char *)(a2 + 23) < 0) {
      std::string::size_type v12 = *(void *)a2;
    }
    int v13 = *(_DWORD *)(a2 + 48);
    LODWORD(v29.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v29.__r_.__value_.__r.__words + 4) = v12;
    WORD2(v29.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&v29.__r_.__value_.__r.__words[1] + 6) = v13;
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::logBTConnection(CLBTDialogDeviceInfo, BOOL) const", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  if ((a3 & 1) != 0 || (unsigned int v8 = *(_DWORD *)(a2 + 48), v8 <= 0x16) && ((1 << v8) & 0x5B0000) != 0)
  {
    std::string::basic_string(&v29, (const std::string *)a2, 0, 8uLL, (std::allocator<char> *)buf);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3321888768;
    uint64_t v17[2] = sub_10116BCE4;
    v17[3] = &unk_1023149A0;
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      sub_1000DC48C(&v18, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
    }
    else {
      std::string v18 = v29;
    }
    if (*(char *)(a2 + 23) < 0)
    {
      sub_1000DC48C(&v19, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v19 = *(_OWORD *)a2;
      uint64_t v20 = *(void *)(a2 + 16);
    }
    if (*(char *)(a2 + 47) < 0)
    {
      sub_1000DC48C(&__p, *(void **)(a2 + 24), *(void *)(a2 + 32));
    }
    else
    {
      long long __p = *(_OWORD *)(a2 + 24);
      uint64_t v22 = *(void *)(a2 + 40);
    }
    int v23 = *(_DWORD *)(a2 + 48);
    char v24 = a3;
    int v9 = off_1024765C8(@"212", @"VehicleConnection_NOT_A_CRASH", 0, 0, (uint64_t)v17);
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_102314A78);
    }
    BOOL v10 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
    {
      std::string::size_type v11 = &v29;
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v11 = (std::string *)v29.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315394;
      long long v31 = v11;
      __int16 v32 = 1024;
      int v33 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#fmc logBTConnection, btOUI, %s,success,%u", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_102314A78);
      }
      int v15 = &v29;
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v15 = (std::string *)v29.__r_.__value_.__r.__words[0];
      }
      int v25 = 136315394;
      int v26 = v15;
      __int16 v27 = 1024;
      int v28 = v9;
      int v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::logBTConnection(CLBTDialogDeviceInfo, BOOL) const", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    if (SHIBYTE(v22) < 0) {
      operator delete((void *)__p);
    }
    if (SHIBYTE(v20) < 0) {
      operator delete((void *)v19);
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
  }
}

void sub_10116BBF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  sub_100286A7C(v42);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10116BC5C(int64x2_t *a1)
{
  sub_10028B738((uint64_t)&a1[2].i64[1], *(void *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x49uLL)) + 56 * (a1[2].i64[0] % 0x49uLL));
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_101D0A740);

  return sub_100ADB118((uint64_t)a1, 1);
}

id sub_10116BCE4(uint64_t a1, void *a2)
{
  CFStringRef v7 = @"btOUI";
  uint64_t v4 = (void *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    uint64_t v4 = (void *)*v4;
  }
  v10[0] = +[NSString stringWithUTF8String:v4];
  CFStringRef v8 = @"btDeviceName";
  std::string v5 = (void *)(a1 + 80);
  if (*(char *)(a1 + 103) < 0) {
    std::string v5 = (void *)*v5;
  }
  v10[1] = +[NSString stringWithUTF8String:v5];
  v10[2] = +[NSString stringWithFormat:@"%u", *(unsigned int *)(a1 + 104), v7, v8, @"btDeviceType"];
  CFStringRef v9 = @"isCorrectlyAdvertised";
  v10[3] = +[NSString stringWithFormat:@"%u", *(unsigned __int8 *)(a1 + 112)];
  return [a2 writeData:+[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v10, &v7, 4), 0, 0)];
}

unsigned char *sub_10116BE24(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 32), *(void **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  if (*(char *)(a2 + 79) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 56), *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v5;
  }
  uint64_t result = (unsigned char *)(a1 + 80);
  if (*(char *)(a2 + 103) < 0)
  {
    uint64_t result = sub_1000DC48C(result, *(void **)(a2 + 80), *(void *)(a2 + 88));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(_OWORD *)uint64_t result = v7;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  return result;
}

void sub_10116BEE4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_10116BF18(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0)
  {
    int v2 = *(void **)(a1 + 32);
    operator delete(v2);
  }
}

uint64_t sub_10116BF80(_DWORD *a1, int a2, int a3)
{
  int v4 = 1;
  if (a2 != 1 && a3 != 1)
  {
    uint64_t result = 0;
    if (a3 | a2) {
      return result;
    }
    int v4 = 0;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_102314A58);
  }
  std::string::size_type v6 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    int v7 = a1[237];
    int v8 = a1[238];
    int v9 = a1[239];
    *(_DWORD *)std::string buf = 67109888;
    int v12 = v7;
    __int16 v13 = 1024;
    int v14 = v8;
    __int16 v15 = 1024;
    int v16 = v9;
    __int16 v17 = 1024;
    int v18 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CarKitConnectionStatus,%d,HandsfreeConnectionStatus,%d,current VehicleConnectionStatus,%d,new VehicleConnectionStatus,%d", buf, 0x1Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102314A58);
    }
    BOOL v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLVehicleConnectionNotifier::setVehicleConnectionStatus(ConnectionStatus, ConnectionStatus)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  if (a1[239] == v4) {
    return 0;
  }
  a1[239] = v4;
  return 1;
}

void sub_10116C1B4(uint64_t a1, int a2, void *a3, void *a4, void *a5)
{
  if (a2)
  {
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_102314A78);
    }
    int v9 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#fmc Posting notification upon vehicle connect", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_102314A78);
      }
      __int16 v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::postStatus(BOOL, NSString *, NSString *, NSString *)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, kCMVehicleConnectedNotification, 0, 0, 0);
    sub_10116C508(a1, 1, a3, a4, a5);
    sub_101169154(a1);
  }
  else
  {
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_102314A78);
    }
    std::string::size_type v11 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#fmc Posting notification upon vehicle disconnect", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_102314A78);
      }
      int v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::postStatus(BOOL, NSString *, NSString *, NSString *)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    int v12 = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(v12, kCMVehicleDisconnectedNotification, 0, 0, 0);
    sub_10116C508(a1, 0, a3, a4, a5);
    sub_1011670B0(a1);
  }
}

void *sub_10116C508(uint64_t a1, int a2, void *a3, void *a4, void *a5)
{
  double Current = CFAbsoluteTimeGetCurrent();
  if (a2)
  {
    *(double *)(a1 + 976) = Current;
    *(void *)(a1 + 984) = 0xBFF0000000000000;
    *(void *)(a1 + 1760) = 0xBFF0000000000000;
    if (a3 && (BOOL v10 = (char *)[a3 UTF8String]) != 0)
    {
      BOOL v10 = strncpy((char *)(a1 + 992), (const char *)[a3 UTF8String], 0x100uLL);
      if (!a4) {
        goto LABEL_11;
      }
    }
    else
    {
      *(_OWORD *)(a1 + 1232) = 0u;
      *(_OWORD *)(a1 + 1216) = 0u;
      *(_OWORD *)(a1 + 1200) = 0u;
      *(_OWORD *)(a1 + 1184) = 0u;
      *(_OWORD *)(a1 + 1168) = 0u;
      *(_OWORD *)(a1 + 1152) = 0u;
      *(_OWORD *)(a1 + 1136) = 0u;
      *(_OWORD *)(a1 + 1120) = 0u;
      *(_OWORD *)(a1 + 1104) = 0u;
      *(_OWORD *)(a1 + 1088) = 0u;
      *(_OWORD *)(a1 + 1072) = 0u;
      *(_OWORD *)(a1 + 1056) = 0u;
      *(_OWORD *)(a1 + 1040) = 0u;
      *(_OWORD *)(a1 + 1008) = 0u;
      *(_OWORD *)(a1 + 1024) = 0u;
      *(_OWORD *)(a1 + 992) = 0u;
      if (!a4) {
        goto LABEL_11;
      }
    }
    BOOL v10 = (char *)[a4 UTF8String];
    if (v10)
    {
      BOOL v10 = strncpy((char *)(a1 + 1248), (const char *)[a4 UTF8String], 0x100uLL);
      if (!a5) {
        goto LABEL_14;
      }
LABEL_12:
      BOOL v10 = (char *)[a5 UTF8String];
      if (v10)
      {
        BOOL v10 = strncpy((char *)(a1 + 1504), (const char *)[a5 UTF8String], 0x100uLL);
        goto LABEL_15;
      }
LABEL_14:
      *(_OWORD *)(a1 + 1744) = 0u;
      *(_OWORD *)(a1 + 1728) = 0u;
      *(_OWORD *)(a1 + 1712) = 0u;
      *(_OWORD *)(a1 + 1696) = 0u;
      *(_OWORD *)(a1 + 1680) = 0u;
      *(_OWORD *)(a1 + 1664) = 0u;
      *(_OWORD *)(a1 + 1648) = 0u;
      *(_OWORD *)(a1 + 1632) = 0u;
      *(_OWORD *)(a1 + 1616) = 0u;
      *(_OWORD *)(a1 + 1600) = 0u;
      *(_OWORD *)(a1 + 1584) = 0u;
      *(_OWORD *)(a1 + 1568) = 0u;
      *(_OWORD *)(a1 + 1552) = 0u;
      *(_OWORD *)(a1 + 1536) = 0u;
      *(_OWORD *)(a1 + 1520) = 0u;
      *(_OWORD *)(a1 + 1504) = 0u;
      goto LABEL_15;
    }
LABEL_11:
    *(_OWORD *)(a1 + 1488) = 0u;
    *(_OWORD *)(a1 + 1472) = 0u;
    *(_OWORD *)(a1 + 1456) = 0u;
    *(_OWORD *)(a1 + 1440) = 0u;
    *(_OWORD *)(a1 + 1424) = 0u;
    *(_OWORD *)(a1 + 1408) = 0u;
    *(_OWORD *)(a1 + 1392) = 0u;
    *(_OWORD *)(a1 + 1376) = 0u;
    *(_OWORD *)(a1 + 1360) = 0u;
    *(_OWORD *)(a1 + 1344) = 0u;
    *(_OWORD *)(a1 + 1328) = 0u;
    *(_OWORD *)(a1 + 1312) = 0u;
    *(_OWORD *)(a1 + 1296) = 0u;
    *(_OWORD *)(a1 + 1280) = 0u;
    *(_OWORD *)(a1 + 1264) = 0u;
    *(_OWORD *)(a1 + 1248) = 0u;
    if (!a5) {
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  *(double *)(a1 + 984) = Current;
LABEL_15:
  sub_1011691A8((uint64_t)v10, (double *)(a1 + 976));
  memcpy(__dst, (const void *)(a1 + 976), sizeof(__dst));
  int v13 = 0;
  (*(void (**)(uint64_t, int *, unsigned char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v13, __dst, 1, 0xFFFFFFFFLL, 0);
  return memcpy((void *)(a1 + 1768), __dst, 0x318uLL);
}

void sub_10116C768(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 960)) {
    sub_101168DA8(v1);
  }
}

void sub_10116C77C(uint64_t a1, uint64_t a2, int *a3, unsigned __int8 *a4)
{
  long long v5 = a3;
  if (*a3)
  {
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_102314A78);
    }
    int v7 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *v5;
      BOOL v9 = *v5 == 10;
      BOOL v11 = *v5 == 5 || v8 == 11;
      int v13 = a4 + 16;
      int v12 = (unsigned __int8 *)*((void *)a4 + 2);
      int v14 = v5;
      __int16 v15 = a4;
      uint64_t v16 = a1;
      int v17 = *((_DWORD *)v13 + 19);
      int v18 = v13[88];
      int v41 = *((_DWORD *)v13 + 25);
      if ((v13[23] & 0x80u) == 0) {
        int v12 = v13;
      }
      id v40 = v12;
      int v19 = sub_100C5273C((const char *)v13);
      int v20 = *((_DWORD *)v13 + 26);
      *(_DWORD *)std::string buf = 67242242;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v9;
      *(_WORD *)&unsigned char buf[14] = 1024;
      LODWORD(__p[0]) = v11;
      WORD2(__p[0]) = 1026;
      *(_DWORD *)((char *)__p + 6) = v17;
      a1 = v16;
      a4 = v15;
      long long v5 = v14;
      WORD1(__p[1]) = 1024;
      HIDWORD(__p[1]) = v18;
      LOWORD(v44) = 1026;
      *(_DWORD *)((char *)&v44 + 2) = v41;
      WORD3(v44) = 2080;
      *((void *)&v44 + 1) = v40;
      *(_WORD *)long long v45 = 1026;
      *(_DWORD *)&_OWORD v45[2] = v19;
      __int16 v46 = 1024;
      int v47 = v20;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#fmc Received BT notification, %{public}d. Connect,%d,Disconnect,%d,DeviceType,%{public}d,isAppleAudio,%d,Services,0x%{public}x,Address,%s,Oui,%{public}d,BTResult,%d", buf, 0x3Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_102314A78);
      }
      sub_100C5273C((const char *)a4 + 16);
      char v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::onBluetoothNotification(int, const CLBluetoothService_Type::Notification &, const CLBluetoothService_Type::NotificationData &)", "%s\n", v38);
      if (v38 != (char *)buf) {
        free(v38);
      }
    }
    if (!*((_DWORD *)a4 + 30) && *v5 <= 0xB && ((1 << *v5) & 0xC20) != 0)
    {
      if (*(unsigned char *)(a1 + 792))
      {
        if (!a4[104])
        {
          unsigned int v21 = *((_DWORD *)a4 + 23);
          if (v21 <= 0x14 && ((1 << v21) & 0x1B0000) != 0)
          {
            uint64_t v22 = (a4[39] & 0x80u) == 0 ? (uint64_t)(a4 + 16) : *((void *)a4 + 2);
            if (!objc_msgSend(*(id *)(a1 + 928), "objectForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v22))|| *(unsigned char *)(a1 + 793))
            {
              *(_OWORD *)long long __p = 0u;
              long long v44 = 0u;
              *(_OWORD *)std::string buf = 0u;
              std::string::operator=((std::string *)buf, (const std::string *)(a4 + 16));
              std::string::operator=((std::string *)&__p[1], (const std::string *)(a4 + 40));
              *(_DWORD *)long long v45 = *((_DWORD *)a4 + 23);
              uint64_t v23 = *(void *)(a1 + 832);
              unint64_t v24 = *(void *)(a1 + 856);
              int v25 = (unsigned __int8 **)(v23 + 8 * (v24 / 0x49));
              if (*(void *)(a1 + 840) == v23)
              {
                int v26 = 0;
                std::string v29 = 0;
                int v28 = (unsigned __int8 **)(v23
                                         + (((unint64_t)(((*(void *)(a1 + 864) + v24)
                                                               * (unsigned __int128)0x70381C0E070381C1uLL) >> 64) >> 2) & 0x1FFFFFFFFFFFFFF8));
              }
              else
              {
                int v26 = (unsigned __int8 *)(*(void *)(v23 + 8 * (v24 / 0x49)) + 56 * (v24 % 0x49));
                unint64_t v27 = *(void *)(a1 + 864) + v24;
                int v28 = (unsigned __int8 **)(v23 + 8 * (v27 / 0x49));
                std::string v29 = &(*v28)[56 * (v27 % 0x49)];
              }
              sub_101171068(v25, v26, v28, v29, buf);
              uint64_t v34 = *(void *)(a1 + 832);
              if (*(void *)(a1 + 840) == v34)
              {
                unint64_t v36 = 0;
              }
              else
              {
                unint64_t v35 = *(void *)(a1 + 864) + *(void *)(a1 + 856);
                unint64_t v36 = *(void *)(v34 + 8 * (v35 / 0x49)) + 56 * (v35 % 0x49);
              }
              if (v36 == v33) {
                sub_10116CE7C((void *)(a1 + 824), (long long *)buf);
              }
              sub_101167598(a1);
              if (SHIBYTE(v44) < 0) {
                operator delete(__p[1]);
              }
              if (SHIBYTE(__p[0]) < 0) {
                operator delete(*(void **)buf);
              }
            }
          }
        }
      }
      int v37 = *((_DWORD *)a4 + 23);
      if (v37 == 17
        || v37 == 22
        || v37 == 16 && *(unsigned char *)(a1 + 944)
        || a1 + 128 != sub_10012FFE0(a1 + 120, (const void **)a4 + 2))
      {
        sub_1011693C0(a1, (uint64_t)(a4 + 8), *((_DWORD *)a4 + 29), v5);
      }
    }
  }
  else
  {
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_102314A78);
    }
    int v30 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
    {
      int v31 = *v5;
      int v32 = *a4;
      *(_DWORD *)std::string buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = v31;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v32;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#fmc Received BT notification, %{public}d. Ready,%{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_102314A78);
      }
      BOOL v39 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLVehicleConnectionNotifier::onBluetoothNotification(int, const CLBluetoothService_Type::Notification &, const CLBluetoothService_Type::NotificationData &)", "%s\n", v39);
      if (v39 != (char *)buf) {
        free(v39);
      }
    }
    if (*a4)
    {
      [*(id *)(a1 + 808) invalidate];

      *(void *)(a1 + 808) = 0;
      sub_101167FD0(a1);
    }
  }
}

void sub_10116CE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_100286A7C((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_10116CE7C(void *a1, long long *a2)
{
  int v4 = a1 + 5;
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v7 = 73 * ((v6 - v5) >> 3) - 1;
  if (v6 == v5) {
    uint64_t v7 = 0;
  }
  if (v7 == a1[5] + a1[4])
  {
    sub_101171214(a1);
    uint64_t v5 = a1[1];
    uint64_t v6 = a1[2];
  }
  if (v6 == v5)
  {
    BOOL v9 = 0;
  }
  else
  {
    unint64_t v8 = a1[5] + a1[4];
    BOOL v9 = (void *)(*(void *)(v5 + 8 * (v8 / 0x49)) + 56 * (v8 % 0x49));
  }
  uint64_t result = sub_10117152C((int)v4, v9, a2);
  ++*v4;
  return result;
}

void sub_10116CF48(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (*a3 == 2 && CLMotionActivity::isTypePedestrian() && *(unsigned char *)(a1 + 960))
  {
    sub_101168DA8(a1);
  }
}

uint64_t sub_10116CFA8(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_102314C68;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    int v12 = a3;
  }
  else {
    int v12 = (uint64_t *)*a3;
  }
  id v13 = [objc_msgSend(a4, "vendor") proxyForService:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12)];
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:objc_msgSend(a4, "silo")];
  return a1;
}

void sub_10116D08C()
{
}

void sub_10116D148(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_10116D184(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        BOOL v9 = (uint64_t *)v4;
      }
      else {
        BOOL v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)std::string buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102314A98);
      }
      BOOL v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        BOOL v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          BOOL v11 = (void *)*v11;
        }
        *(_DWORD *)std::string buf = 136446466;
        int v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_102314A98);
        }
        int v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          int v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        __int16 v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData>::removeClient(int) [Notification_T = CLVehicleConnectionNotifier_Type::Notification, NotificationData_T = CLVehicleConnectionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_10116D414(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_10116D4C8(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_10116D510(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_10116D558(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_10116D5A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_1024765D0);
}

uint64_t sub_10116D5CC(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)uint64_t v42 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          unint64_t v24 = (uint64_t *)v18;
        }
        else {
          unint64_t v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          std::string v29 = (uint64_t *)v25;
        }
        else {
          std::string v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v40 = v26;
        uint64_t v35 = *(void *)(v26 + 56);
        char v36 = *a4;
        *(void *)std::string buf = &v41;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v36;
        bzero(buf, 0x318uLL);
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_101171638();
        }
        if (v35) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v40 = a1 + 64;
        char v30 = byte_1024765D1;
        int v39 = v17;
        *(void *)std::string buf = &v39;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v30;
        int v39 = *a3;
        *(void *)std::string buf = &v39;
        int v31 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        int v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        char v33 = *a4;
        int v39 = *a3;
        *(void *)std::string buf = &v39;
        uint64_t v34 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)std::string buf = &v41;
        *((unsigned char *)sub_1000EB1B8(v34 + 5, &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v33;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        *(_DWORD *)std::string buf = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102314A98);
  }
  id v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    __int16 v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      __int16 v15 = (void *)*v15;
    }
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v46 = 1026;
    int v47 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102314A98);
    }
    int v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v37 = (void *)*v37;
    }
    *(_DWORD *)uint64_t v42 = 136446466;
    *(void *)&v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = a2;
    char v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLVehicleConnectionNotifier_Type::Notification, NotificationData_T = CLVehicleConnectionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v38);
    if (v38 != buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

BOOL sub_10116DA78(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102314A98);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)std::string buf = 136446466;
      unint64_t v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102314A98);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLVehicleConnectionNotifier_Type::Notification, NotificationData_T = CLVehicleConnectionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_10116DCFC(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_102314A98);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)std::string buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                uint64_t v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_102314A98);
                }
                std::string v29 = a1 + 8;
                if (a1[31] < 0) {
                  std::string v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  char v30 = buf;
                }
                else {
                  char v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                char v38 = v29;
                __int16 v39 = 2082;
                uint64_t v40 = v30;
                int v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLVehicleConnectionNotifier_Type::Notification, NotificationData_T = CLVehicleConnectionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_10116E0D0(uint64_t a1, int *a2, void *__dst)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      BOOL v10 = (uint64_t *)v4;
    }
    else {
      BOOL v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v7 == v3) {
    return 0;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0;
  }
  int v11 = *(const void **)(v7 + 64);
  if (!v11) {
    return 0;
  }
  memcpy(__dst, v11, 0x318uLL);
  return 1;
}

uint64_t sub_10116E144(uint64_t a1, int *a2, const void *a3)
{
  int v6 = (uint64_t *)operator new(0x330uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = (uint64_t)off_102314BF8;
  memcpy(v6 + 3, a3, 0x318uLL);
  int v10 = *a2;
  int v11 = &v10;
  uint64_t v7 = sub_10044715C((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101D0B290, &v11);
  int v8 = (std::__shared_weak_count *)v7[9];
  _WORD v7[8] = v6 + 3;
  v7[9] = v6;
  if (v8) {
    sub_1000DB0A0(v8);
  }
  return 1;
}

void sub_10116E208(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10116E21C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  bzero(v9, 0x318uLL);
  return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, v9, a3, a4, 0);
}

void sub_10116E2D4(uint64_t a1, unsigned int *a2, const void *a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102314A98);
  }
  BOOL v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    int v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)std::string buf = 68289794;
    int v22 = 0;
    __int16 v23 = 2082;
    *(void *)BOOL v24 = "";
    *(_WORD *)&v24[8] = 2082;
    *(void *)&v24[10] = "activity";
    __int16 v25 = 2082;
    int v26 = v10;
    __int16 v27 = 2050;
    BOOL v28 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    std::string v29 = v30;
    memset(v30, 0, sizeof(v30));
    int v31 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v29);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v28) {
      sub_1000DB0A0(v28);
    }
    sub_1000F5BB0((uint64_t)&v23, *(void **)&v24[6]);
    if (v31) {
      sub_1000DB0A0(v31);
    }
    sub_1000F5BB0((uint64_t)&v29, v30[0]);
  }
  if (a4)
  {
    BOOL v18 = (uint64_t *)operator new(0x330uLL);
    v18[1] = 0;
    _OWORD v18[2] = 0;
    *BOOL v18 = (uint64_t)off_102314BF8;
    memcpy(v18 + 3, a3, 0x318uLL);
    int v19 = (std::__shared_weak_count *)v14[9];
    v14[8] = v18 + 3;
    v14[9] = v18;
    if (!v19) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  int v19 = (std::__shared_weak_count *)v14[9];
  v14[8] = 0;
  v14[9] = 0;
  if (v19) {
LABEL_27:
  }
    sub_1000DB0A0(v19);
LABEL_28:
  if (v14[7]) {
    sub_101170190();
  }
  os_activity_scope_leave(&state);
}

void sub_10116E8C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_10116E90C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102314A98);
    }
    int v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)std::string buf = 136315138;
      int v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102314A98);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData>::listClients() [Notification_T = CLVehicleConnectionNotifier_Type::Notification, NotificationData_T = CLVehicleConnectionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102314A98);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)std::string buf = 136315394;
      int v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102314A98);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData>::listClients() [Notification_T = CLVehicleConnectionNotifier_Type::Notification, NotificationData_T = CLVehicleConnectionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    int v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        BOOL v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_102314A98);
            }
            int v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)std::string buf = 136315650;
              int v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_102314A98);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData>::listClients() [Notification_T = CLVehicleConnectionNotifier_Type::Notification, NotificationData_T = CLVehicleConnectionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                BOOL v9 = v15;
              }
              while (!v16);
            }
            BOOL v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        BOOL v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            BOOL v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            int v8 = v19;
          }
          while (!v16);
        }
        int v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_10116EEBC(uint64_t a1)
{
  sub_1011715C8(a1);

  operator delete();
}

id sub_10116EEF4(uint64_t a1, int a2, void *a3)
{
  id result = sub_1011707C8(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_10116EF44(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10116EF74(id a1)
{
  qword_102419018 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Activity");
}

void sub_10116EFA4(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10116EFD4(uint64_t a1)
{
  sub_10116F00C(a1);

  operator delete();
}

uint64_t sub_10116F00C(uint64_t a1)
{
  *(void *)a1 = off_102314AC8;
  sub_10116F06C(a1 + 56, *(void **)(a1 + 64));
  sub_1000DB264(a1 + 32, *(char **)(a1 + 40));
  sub_1000F5BB0(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

void sub_10116F06C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10116F06C(a1, *a2);
    sub_10116F06C(a1, a2[1]);
    sub_100DB0390((uint64_t)(a2 + 5), (void *)a2[6]);
    operator delete(a2);
  }
}

uint64_t **sub_10116F0CC(uint64_t **result, unsigned int *a2, unsigned int *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    int v6 = *result;
    uint64_t v7 = result[1];
    *id result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      int v8 = (uint64_t *)v6[1];
    }
    else {
      int v8 = v6;
    }
    uint64_t v14 = result;
    int v15 = v8;
    BOOL v16 = v8;
    if (v8)
    {
      int v15 = sub_1002FABD8((uint64_t)v8);
      if (a2 != a3)
      {
        BOOL v9 = a2;
        do
        {
          *((_DWORD *)v8 + 7) = v9[7];
          sub_10116F230(v5, (uint64_t)v8);
          int v8 = v15;
          BOOL v16 = v15;
          if (v15) {
            int v15 = sub_1002FABD8((uint64_t)v15);
          }
          int v10 = (unsigned int *)*((void *)v9 + 1);
          if (v10)
          {
            do
            {
              a2 = v10;
              int v10 = *(unsigned int **)v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (unsigned int *)*((void *)v9 + 2);
              BOOL v11 = *(void *)a2 == (void)v9;
              BOOL v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          BOOL v9 = a2;
        }
        while (a2 != a3);
      }
    }
    id result = (uint64_t **)sub_1002FAC2C((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      id result = (uint64_t **)sub_10116F2A0(v5, a2 + 7);
      int v12 = (unsigned int *)*((void *)a2 + 1);
      if (v12)
      {
        do
        {
          int v13 = v12;
          int v12 = *(unsigned int **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          int v13 = (unsigned int *)*((void *)a2 + 2);
          BOOL v11 = *(void *)v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_10116F21C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002FAC2C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10116F230(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = a1 + 1;
  uint64_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 28) >= *((_DWORD *)v4 + 7)) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    uint64_t v5 = v3 + 1;
  }
  else
  {
    uint64_t v5 = a1 + 1;
  }
LABEL_8:
  sub_1000EDF90(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

uint64_t *sub_10116F2A0(uint64_t **a1, unsigned int *a2)
{
  uint64_t v4 = (uint64_t *)operator new(0x20uLL);
  unsigned int v5 = *a2;
  *((_DWORD *)v4 + 7) = *a2;
  int v6 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        int v6 = (uint64_t **)v7;
        if (v5 >= *((_DWORD *)v7 + 7)) {
          break;
        }
        uint64_t v7 = (uint64_t *)*v7;
        int v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      uint64_t v7 = (uint64_t *)v7[1];
    }
    while (v7);
    int v8 = v6 + 1;
  }
  else
  {
    int v8 = a1 + 1;
  }
LABEL_8:
  sub_1000EDF90(a1, (uint64_t)v6, v8, v4);
  return v4;
}

uint64_t **sub_10116F330(uint64_t **result, uint64_t *a2, uint64_t *a3)
{
  unsigned int v5 = result;
  if (result[2])
  {
    int v6 = *result;
    uint64_t v7 = result[1];
    *id result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      int v8 = (uint64_t *)v6[1];
    }
    else {
      int v8 = v6;
    }
    uint64_t v14 = result;
    int v15 = v8;
    BOOL v16 = v8;
    if (v8)
    {
      int v15 = sub_1002FABD8((uint64_t)v8);
      if (a2 != a3)
      {
        BOOL v9 = a2;
        do
        {
          *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
          if (v8 != v9)
          {
            sub_10116F520((uint64_t **)v8 + 5, (long long *)v9[5], (long long *)v9 + 3);
            int v8 = v16;
          }
          sub_10116F4B0(v5, (uint64_t)v8);
          int v8 = v15;
          BOOL v16 = v15;
          if (v15) {
            int v15 = sub_1002FABD8((uint64_t)v15);
          }
          int v10 = (uint64_t *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              int v10 = (uint64_t *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (uint64_t *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              BOOL v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          BOOL v9 = a2;
        }
        while (a2 != a3);
      }
    }
    id result = (uint64_t **)sub_10116F7F8((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      id result = (uint64_t **)sub_10116F850((uint64_t)v5, (uint64_t)(a2 + 4));
      int v12 = (uint64_t *)a2[1];
      if (v12)
      {
        do
        {
          int v13 = v12;
          int v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          int v13 = (uint64_t *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_10116F49C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10116F7F8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10116F4B0(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = a1 + 1;
  uint64_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 32) >= *((_DWORD *)v4 + 8)) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v4;
        unsigned int v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    unsigned int v5 = v3 + 1;
  }
  else
  {
    unsigned int v5 = a1 + 1;
  }
LABEL_8:
  sub_1000EDF90(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

uint64_t **sub_10116F520(uint64_t **result, long long *a2, long long *a3)
{
  unsigned int v5 = result;
  if (result[2])
  {
    int v6 = *result;
    uint64_t v7 = result[1];
    *id result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      int v8 = (uint64_t *)v6[1];
    }
    else {
      int v8 = v6;
    }
    int v15 = result;
    BOOL v16 = v8;
    int v17 = (const void **)v8;
    if (v8)
    {
      BOOL v16 = sub_1002FABD8((uint64_t)v8);
      if (a2 != a3)
      {
        BOOL v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          std::string::operator=((std::string *)(v8 + 7), (const std::string *)((char *)v9 + 56));
          int v10 = (uint64_t **)sub_1002A5268((uint64_t)v5, &v18, v17 + 4);
          sub_1000EDF90(v5, v18, v10, (uint64_t *)v17);
          int v17 = (const void **)v16;
          if (v16) {
            BOOL v16 = sub_1002FABD8((uint64_t)v16);
          }
          BOOL v11 = (long long *)*((void *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              BOOL v11 = *(long long **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v9 + 2);
              BOOL v12 = *(void *)a2 == (void)v9;
              BOOL v9 = a2;
            }
            while (!v12);
          }
          int v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          BOOL v9 = a2;
        }
        while (!v12);
      }
    }
    id result = (uint64_t **)sub_10116F6B0((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      id result = (uint64_t **)sub_10116F708(v5, a2 + 2);
      int v13 = (long long *)*((void *)a2 + 1);
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          int v13 = *(long long **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (long long *)*((void *)a2 + 2);
          BOOL v12 = *(void *)v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_10116F69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10116F6B0(uint64_t a1)
{
  sub_100DB0390(*(void *)a1, *(void **)(a1 + 16));
  int v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        int v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_100DB0390(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *sub_10116F708(uint64_t **a1, long long *a2)
{
  sub_10116F78C((uint64_t)a1, a2, (uint64_t)v7);
  uint64_t v3 = (uint64_t **)sub_1002A5268((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  sub_1000EDF90(a1, v6, v3, v7[0]);
  uint64_t v4 = v7[0];
  v7[0] = 0;
  sub_100DB0738((uint64_t)v7, 0);
  return v4;
}

void sub_10116F774(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100DB0738((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

char *sub_10116F78C@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  id result = sub_100ABC118(v6 + 32, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_10116F7E0(_Unwind_Exception *a1)
{
  sub_100DB0738(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_10116F7F8(uint64_t a1)
{
  sub_10116F06C(*(void *)a1, *(void **)(a1 + 16));
  int v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        int v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_10116F06C(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *sub_10116F850(uint64_t a1, uint64_t a2)
{
  sub_10116F8D4(a1, a2, (uint64_t)&v7);
  uint64_t v3 = (uint64_t **)(a1 + 8);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (*((_DWORD *)v7 + 8) >= *((_DWORD *)v4 + 8)) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    uint64_t v5 = v3 + 1;
  }
  else
  {
    uint64_t v5 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  sub_1000EDF90((uint64_t **)a1, (uint64_t)v3, v5, v7);
  return v7;
}

uint64_t *sub_10116F8D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x40uLL);
  *(void *)(a3 + 8) = v5;
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *((_DWORD *)v6 + 8) = *(_DWORD *)a2;
  id result = sub_10116FD64((uint64_t *)v6 + 5, (const void ***)(a2 + 8));
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_10116F944(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_10116F960(v3, v2);
  _Unwind_Resume(a1);
}

void sub_10116F960(uint64_t a1, void **a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    sub_100DB0390((uint64_t)(a2 + 5), a2[6]);
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

uint64_t sub_10116F9BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (qword_102485AA0 != -1) {
    dispatch_once(&qword_102485AA0, &stru_102314AE8);
  }
  int v10 = (uint64_t (*)())dlsym((void *)qword_102485AA8, "OSAWriteLogForSubmission");
  off_1024765C8 = v10;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v10)(a1, a2, a3, a4, a5);
}

void sub_10116FA68(id a1)
{
  qword_102485AA8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CrashReporterSupport.framework/CrashReporterSupport", 2);
}

uint64_t **sub_10116FA94(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        BOOL v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    BOOL v9 = a1 + 1;
LABEL_10:
    BOOL v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((void *)v11 + 7) = 0;
    *((void *)v11 + 6) = 0;
    *((void *)v11 + 5) = v11 + 12;
    sub_1000EDF90(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *sub_10116FB64(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)sub_1001070AC((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    unsigned int v8 = v6;
    sub_10116FC10((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000EDF90(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_100DB0738((uint64_t)v10, 0);
  }
  return v7;
}

unsigned char *sub_10116FC10@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  id result = v6 + 4;
  unsigned int v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    id result = sub_1000DC48C(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)id result = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_10116FC90(_Unwind_Exception *a1)
{
  sub_100DB0738(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t **sub_10116FCA8(uint64_t **a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        unsigned int v8 = (uint64_t **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unsigned int v8 = a1 + 1;
LABEL_10:
    unsigned int v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    sub_1000EDF90(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *sub_10116FD64(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_10116FDBC(a1, *a2, a2 + 1);
  return a1;
}

void sub_10116FDA4(_Unwind_Exception *a1)
{
  sub_100DB0390(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_10116FDBC(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      id result = sub_10116FE48(v5, v6, v4 + 4, (long long *)v4 + 2);
      unsigned int v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          unsigned int v8 = (const void ***)v7;
          unsigned int v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unsigned int v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      uint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_10116FE48(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  uint64_t v6 = sub_100645F1C(a1, a2, &v12, &v11, a3);
  unsigned int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unsigned int v8 = (uint64_t **)v6;
    sub_10116F78C((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000EDF90(a1, (uint64_t)v12, v8, v10[0]);
    unsigned int v7 = v10[0];
    v10[0] = 0;
    sub_100DB0738((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t sub_10116FEE0(void *a1)
{
  int v2 = a1 + 5;
  uint64_t v3 = (void **)a1[1];
  uint64_t v4 = (void **)a1[2];
  if (v4 == v3)
  {
    uint64_t v4 = (void **)a1[1];
  }
  else
  {
    unint64_t v5 = a1[4];
    uint64_t v6 = &v3[v5 / 0x49];
    uint64_t v7 = (uint64_t)*v6 + 56 * (v5 % 0x49);
    unint64_t v8 = (unint64_t)v3[(a1[5] + v5) / 0x49] + 56 * ((a1[5] + v5) % 0x49);
    if (v7 != v8)
    {
      do
      {
        sub_10028B738((uint64_t)v2, v7);
        v7 += 56;
        if (v7 - (void)*v6 == 4088)
        {
          uint64_t v9 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != v8);
      uint64_t v3 = (void **)a1[1];
      uint64_t v4 = (void **)a1[2];
    }
  }
  void *v2 = 0;
  unint64_t v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      uint64_t v4 = (void **)a1[2];
      uint64_t v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      unint64_t v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 36;
  }
  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 73;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    int v13 = *v3++;
    operator delete(v13);
  }

  return sub_1000D7EB4((uint64_t)a1);
}

uint64_t *sub_101170030(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)sub_1001070AC((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = v6;
    sub_1011700DC((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000EDF90(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_100C55F94((uint64_t)v10, 0);
  }
  return v7;
}

double sub_1011700DC@<D0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0xB8uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = v6 + 32;
  unint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    sub_1000DC48C(v7, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)uint64_t v7 = v9;
  }
  double result = 0.0;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_101170178(_Unwind_Exception *a1)
{
  sub_100C55F94(v1, 0);
  _Unwind_Resume(a1);
}

void sub_101170190()
{
}

void sub_101170244(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      long long v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          uint64_t v12 = (uint64_t *)v4;
        }
        else {
          uint64_t v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          long long v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        unsigned int v49 = v9;
        id v13 = sub_1011707C8(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            int v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                int v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              long long v48 = v19;
              sub_101170634(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              std::string v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  std::string v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              unsigned int v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                uint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    uint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      uint64_t v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              long long v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_102314A98);
              }
              BOOL v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)std::string buf = 136446466;
                double v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_102314A98);
                }
                long long v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  long long v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                std::string::size_type v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                int v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLVehicleConnectionNotifier_Type::Notification, NotificationData_T = CLVehicleConnectionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_101170634(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_1011707C8(a4);
    uint64_t v10 = *(void *)a3 + 80;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40);
    uint64_t v14 = (int *)(*(void *)a2 + 32);
    uint64_t v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    double result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4];
    }
  }
  return result;
}

void sub_10117072C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102314BF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10117074C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102314BF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1011707A8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

id sub_1011707C8(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    return sub_101170864(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      return sub_101170BF0(a1);
    }
    else
    {
      return 0;
    }
  }
}

id sub_101170864(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_101170FB0((uint64_t)&v7, a1);
  }
  if (!getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_102314C38);
    }
    uint64_t v5 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v15 = v2;
      __int16 v16 = 2048;
      uint64_t v17 = 0;
      __int16 v18 = 2080;
      unint64_t v19 = 0x8000000101DAAB99 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418F90 == -1) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  if (qword_102418F90 != -1) {
    dispatch_once(&qword_102418F90, &stru_102314C38);
  }
  uint64_t v3 = qword_102418F98;
  if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 134218498;
    id v15 = v2;
    __int16 v16 = 2048;
    uint64_t v17 = 0;
    __int16 v18 = 2080;
    unint64_t v19 = 0x8000000101DAAB99 & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  }
  if (!sub_10013D1A0(115, 0)) {
    return 0;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102418F90 != -1) {
LABEL_20:
  }
    dispatch_once(&qword_102418F90, &stru_102314C38);
LABEL_18:
  int v8 = 134218498;
  id v9 = v2;
  __int16 v10 = 2048;
  uint64_t v11 = 0;
  __int16 v12 = 2080;
  unint64_t v13 = 0x8000000101DAAB99 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLVehicleConnectionNotifier_Type::NotificationData, Callbacuint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v6);
  if (v6 != (char *)buf) {
    free(v6);
  }
  return 0;
}

id sub_101170BF0(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102314C38);
      }
      uint64_t v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101DAAB99 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        uint64_t v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLVehicleConnectionNotifier_Type::NotificationData, Callbacuint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102314C38);
      }
      uint64_t v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101DAAB99 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_102314C38);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

id sub_101170FB0(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_1023942E0))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)792) {
      sub_101AA405C();
    }
    [a2 setCppObjectPtr:[objc_msgSend(objc_msgSend(a2, "serialized"), "bytes") bytes]];
  }

  return [a2 cppObjectPtr];
}

void sub_101171038(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

unsigned __int8 **sub_101171068(unsigned __int8 **a1, unsigned __int8 *a2, unsigned __int8 **a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  char v7 = a2;
  id v8 = a1;
  if (a1 == a3)
  {
    if (a2 != a4)
    {
      while (!sub_1006FE7E0(v7, a5))
      {
        v7 += 56;
        if (v7 == a4)
        {
          char v7 = a4;
          break;
        }
      }
    }
    if (!v8) {
      return 0;
    }
    __int16 v9 = v8;
    if (*v8 + 4088 == v7) {
      return v8 + 1;
    }
  }
  else
  {
    __int16 v9 = a3;
    uint64_t v10 = (uint64_t)(*a1 + 4088);
    if ((unsigned __int8 *)v10 == a2) {
      goto LABEL_21;
    }
    while (!sub_1006FE7E0(v7, a5))
    {
      v7 += 56;
      if (v7 == (unsigned __int8 *)v10) {
        goto LABEL_21;
      }
    }
    if (v7 == (unsigned __int8 *)v10)
    {
LABEL_21:
      uint64_t v14 = (uint64_t *)(v8 + 1);
      if (v8 + 1 == v9)
      {
        id v15 = *v9;
        if (*v9 == a4)
        {
          __int16 v16 = *v9;
        }
        else
        {
          while (!sub_1006FE7E0(v15, a5))
          {
            v15 += 56;
            if (v15 == a4)
            {
              id v15 = a4;
              break;
            }
          }
          __int16 v16 = v15;
          id v15 = *v9;
        }
        if (v15 + 4088 == v16) {
          return v8 + 2;
        }
      }
      else
      {
        uint64_t v11 = 0;
        unint64_t v12 = v8++;
        uint64_t v13 = *v14;
        while (!sub_1006FE7E0((unsigned __int8 *)(v13 + v11), a5))
        {
          v11 += 56;
          if (v11 == 4088) {
            goto LABEL_21;
          }
        }
        __int16 v9 = v8;
        if ((unsigned __int8 *)(v13 + v11) == *v8 + 4088) {
          return v12 + 2;
        }
      }
    }
    else
    {
      __int16 v9 = v8;
      if (v7 == *v8 + 4088) {
        return v8 + 1;
      }
    }
  }
  return v9;
}

void sub_101171214(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x49;
  unint64_t v4 = v2 - 73;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    char v7 = (void *)a1[1];
    id v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    __int16 v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)id v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      BOOL v38 = (uint64_t *)a1[1];
      id v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        id v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        BOOL v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)BOOL v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      __int16 v9 = (char *)a1[1];
    }
    id v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF8uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF8uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    BOOL v44 = (void *)a1[1];
    id v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    __int16 v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      long long v48 = (uint64_t *)a1[1];
      id v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        id v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        std::string::size_type v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)std::string::size_type v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      __int16 v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        id v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __int16 v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  int v53 = operator new(0xFF8uLL);
  sub_1000DA434(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  std::string v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1011714E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

unsigned char *sub_10117152C(int a1, void *__dst, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    __dst[2] = *((void *)a3 + 2);
    *(_OWORD *)std::string __dst = v5;
  }
  uint64_t result = __dst + 3;
  if (*((char *)a3 + 47) < 0)
  {
    uint64_t result = sub_1000DC48C(result, *((void **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v7 = *(long long *)((char *)a3 + 24);
    __dst[5] = *((void *)a3 + 5);
    *(_OWORD *)uint64_t result = v7;
  }
  *((_DWORD *)__dst + 12) = *((_DWORD *)a3 + 12);
  return result;
}

void sub_1011715AC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011715C8(uint64_t a1)
{
  *(void *)a1 = off_102314C68;
  unint64_t v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  id *v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_101171638()
{
}

uint64_t sub_1011716EC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

uint64_t sub_10117170C()
{
  qword_102485A98 = 0;
  qword_102485A90 = 0;
  qword_102485A88 = (uint64_t)&qword_102485A90;
  return __cxa_atexit((void (*)(void *))sub_10116B3EC, &qword_102485A88, (void *)&_mh_execute_header);
}

void *sub_101171740(void *result)
{
  *uint64_t result = off_102314C90;
  return result;
}

void sub_101171764()
{
}

unsigned __int8 *sub_101171778()
{
  unsigned __int8 v1 = 1;
  return sub_10006ACBC(v2, "ShouldWriteTimeInDaylightToHealthKit", &v1, 0);
}

double sub_1011717B4(double a1, double a2)
{
  if (a1 < 0.0) {
    a1 = a1 + 360.0;
  }
  if (a2 < 0.0) {
    a2 = a2 + 360.0;
  }
  double result = a2 - a1;
  if (result > 180.0) {
    return result + -360.0;
  }
  if (result < -180.0) {
    return result + 360.0;
  }
  return result;
}

long double sub_101171810(double a1, double a2, double a3, double a4)
{
  double v4 = a3;
  long double result = 0.0;
  if (a3 > 90.0 || a1 < -90.0 || a1 > 90.0 || a3 < -90.0) {
    return result;
  }
  double v7 = a4 + 360.0;
  if (a4 >= 0.0) {
    double v7 = a4;
  }
  double v8 = a2 + 360.0;
  if (a2 >= 0.0) {
    double v8 = a2;
  }
  double v9 = v8 - v7;
  if (v9 <= 180.0)
  {
    if (v9 < -180.0) {
      double v9 = v9 + 360.0;
    }
  }
  else
  {
    double v9 = v9 + -360.0;
  }
  if (fabs(a1 + v4) >= 0.0001)
  {
    double v42 = a2;
    double v43 = a4;
LABEL_18:
    double v11 = v9;
    goto LABEL_19;
  }
  double v10 = fabs(a1);
  if (v10 < 0.0001 && 180.0 - fabs(v9) < 0.0001) {
    return 20037508.3;
  }
  BOOL v41 = fabs(v10 + -90.0) < 0.0001;
  if (v41) {
    double v11 = 0.0;
  }
  else {
    double v11 = v9;
  }
  double v42 = a2;
  double v43 = a4;
  if (!v41 && 180.0 - fabs(v9) >= 0.0001) {
    goto LABEL_18;
  }
  if (a1 <= v4) {
    double v4 = v4 + -0.0001;
  }
  else {
    a1 = a1 + -0.0001;
  }
LABEL_19:
  double v12 = v11 * 0.0174532925;
  double v44 = a1;
  double v13 = tan(a1 * 0.0174532925);
  long double v14 = tan(v4 * 0.0174532925);
  long double v15 = v13 * 0.996647189;
  long double v16 = v14 * 0.996647189;
  double v17 = atan(v15);
  double v18 = atan(v16);
  __double2 v19 = __sincos_stret(v17);
  __double2 v20 = __sincos_stret(v18);
  unsigned int v21 = 0;
  double v22 = v19.__cosval * v20.__cosval;
  double v23 = v12;
  while (1)
  {
    __double2 v24 = __sincos_stret(v23);
    double v25 = sqrt((-(v19.__sinval * v20.__cosval) * v24.__cosval + v19.__cosval * v20.__sinval)* (-(v19.__sinval * v20.__cosval) * v24.__cosval + v19.__cosval * v20.__sinval)+ v20.__cosval * v24.__sinval * (v20.__cosval * v24.__sinval));
    if (v25 < 2.22044605e-15) {
      break;
    }
    double v26 = v22 * v24.__cosval + v19.__sinval * v20.__sinval;
    double v27 = fabs(v26);
    if (fabs(v25) > 1.0 || v27 > 1.0) {
      break;
    }
    double v29 = atan2(v25, v26);
    double v30 = v22 * v24.__sinval / v25;
    if (v30 > 1.0) {
      break;
    }
    double v31 = 1.0 - v30 * v30;
    if (fabs(v31) >= 2.22044605e-15)
    {
      double v33 = v26 - (v19.__sinval + v19.__sinval) * v20.__sinval / v31;
      double v32 = v31 * 0.000209550667 * ((v31 * -3.0 + 4.0) * 0.00335281066 + 4.0);
    }
    else
    {
      double v32 = 0.0;
      double v33 = -1.0;
    }
    double v34 = v30 * ((1.0 - v32) * 0.00335281066);
    double v35 = v33 * v33 * 2.0 + -1.0;
    double v36 = v12 + v34 * (v29 + v25 * v32 * (v33 + v26 * v32 * v35));
    if (vabdd_f64(v36, v23) > 0.000000001)
    {
      double v23 = v36;
      if (v21++ < 0x31) {
        continue;
      }
    }
    double v38 = v31 * 2.72331606e11 / 4.04083e13;
    double v39 = v38 * 0.0000610351562 * (v38 * (v38 * (v38 * -175.0 + 320.0) + -768.0) + 4096.0) + 1.0;
    double v40 = v38 * 0.0009765625 * (v38 * (v38 * (v38 * -47.0 + 74.0) + -128.0) + 256.0);
    return v39
         * 6356752.31
         * (v29 - v25 * v40 * (v33 + v40 * 0.25 * ((v33 * v33 * 4.0 + -3.0) * (v33 * (v40 / 6.0) * 3.0) + v26 * v35)));
  }

  return sub_101171C68(v44, v42, v4, v43);
}

long double sub_101171C68(double a1, double a2, double a3, double a4)
{
  double v5 = 360.0;
  if (a2 < 0.0) {
    a2 = a2 + 360.0;
  }
  if (a4 < 0.0) {
    a4 = a4 + 360.0;
  }
  double v6 = a4 - a2;
  if (v6 <= 180.0)
  {
    if (v6 >= -180.0) {
      goto LABEL_9;
    }
  }
  else
  {
    double v5 = -360.0;
  }
  double v6 = v6 + v5;
LABEL_9:
  double v7 = a1 * 0.0174532925;
  double v8 = v6 * 0.0174532925;
  long double v9 = sin((a3 - a1) * 0.0174532925 * 0.5);
  long double v10 = v9 * v9;
  __double2 v11 = __sincos_stret(v7);
  long double v12 = v11.__cosval * cos(a3 * 0.0174532925);
  long double v13 = sin(v8 * 0.5);
  double v14 = v10 + v12 * (v13 * v13);
  double v15 = 1.0 - v14;
  if (v14 < 0.0) {
    double v14 = 0.0;
  }
  if (v15 < 0.0) {
    double v15 = 0.0;
  }
  long double v16 = atan2(sqrt(v14), sqrt(v15));
  return (fabs(v11.__sinval) * -21000.0 + 6378160.0) * (v16 + v16);
}

double sub_101171D90(uint64_t a1)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  double result = 6335439.33;
  *(_OWORD *)a1 = xmmword_101DAAC80;
  *(void *)(a1 + 32) = 0x3FF0000000000000;
  return result;
}

long double sub_101171DAC(double *a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  double v16 = 0.0;
  double v17 = 0.0;
  double v15 = 0.0;
  if (!sub_1000F1724(a2, a3, a5, a6) && sub_1000F17A8(a1, &v17, &v16, &v15, a2, a3, a4, a5, a6, a7)) {
    return sqrt(v16 * v16 + v17 * v17 + v15 * v15);
  }

  return sub_101171810(a2, a3, a5, a6);
}

long double sub_101171EA0(double *a1, uint64_t a2, double a3, double a4)
{
  if (*(double *)(a2 + 36) <= 0.0) {
    double v4 = 0.0;
  }
  else {
    double v4 = *(double *)(a2 + 28);
  }
  return sub_1000F1648(a1, *(double *)(a2 + 4), *(double *)(a2 + 12), a3, a4, v4);
}

BOOL sub_101171EC8(double *a1, double *a2, double *a3, double *a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  double v33 = a6;
  double v34 = a5;
  *a2 = 0.0;
  *a3 = 0.0;
  *a4 = 0.0;
  double v31 = fabs(a8);
  double v32 = a7;
  double v30 = fabs(a9);
  double v15 = -49000.0;
  if (a8 >= 0.0) {
    double v16 = 49000.0;
  }
  else {
    double v16 = -49000.0;
  }
  double v27 = v16;
  if (a9 >= 0.0) {
    double v15 = 49000.0;
  }
  double v26 = v15;
  double v17 = 0.0;
  int v18 = 21;
  double v19 = 0.0;
  double v20 = 0.0;
  while (1)
  {
    BOOL v21 = fabs(v17) >= v31;
    BOOL v22 = fabs(v19) >= v30 && (unint64_t)v21;
    if (v22) {
      break;
    }
    if (vabdd_f64(a8, v17) >= 49000.0) {
      double v23 = v27;
    }
    else {
      double v23 = a8 - v17;
    }
    if (vabdd_f64(a9, v19) >= 49000.0) {
      double v24 = v26;
    }
    else {
      double v24 = a9 - v19;
    }
    if (sub_10005B848(a1, &v34, &v33, &v32, v34, v33, v32, v23, v24, a10 - v20))
    {
      double v20 = v20 + a10 - v20;
      double v17 = v17 + v23;
      double v19 = v19 + v24;
      if (--v18) {
        continue;
      }
    }
    return v22;
  }
  *a2 = v34;
  *a3 = v33;
  *a4 = v32;
  return v22;
}

double sub_101172040(double *a1, double *a2, double *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double v17 = 0.0;
  double v18 = 0.0;
  sub_1000F17A8(a1, &v18, &v17, &v16, a4, a5, a6, a8, a9, a6);
  double v12 = sqrt(v17 * v17 + v18 * v18);
  long double v13 = atan2(v17, v18);
  __double2 v14 = __sincos_stret(v13 + a7 * -0.0174532925);
  *a3 = v12 * v14.__cosval;
  double result = v12 * v14.__sinval;
  *a2 = v12 * v14.__sinval;
  return result;
}

void sub_1011720D0(double *a1, double *a2, double *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double v18 = a1[3];
  if (v18 == 0.0 || vabdd_f64(a4, v18) > 0.005)
  {
    a1[2] = a4 * 0.0174532925;
    a1[3] = a4;
    __double2 v19 = __sincos_stret(a4 * 0.0174532925);
    double v20 = v19.__sinval * -0.00669437999 * v19.__sinval + 1.0;
    double v21 = sqrt(v20);
    *a1 = 6335439.33 / (v20 * v21);
    a1[1] = 6378137.0 / v21;
    a1[4] = v19.__cosval;
  }
  *a2 = a4;
  *a3 = a5;
  if (a4 < 90.0 && a4 > -90.0 && a7 > 0.0 && a8 > 0.0 && a9 >= 0.0)
  {
    double v22 = a7 * a8;
    __double2 v23 = __sincos_stret(a9 * 0.0174532925);
    double v24 = a5 * 0.0174532925 + v22 * v23.__sinval / ((a1[1] + a6) * a1[4]);
    *a2 = (a4 * 0.0174532925 + v22 * v23.__cosval / (*a1 + a6)) * 57.2957795;
    double v25 = v24 * 57.2957795;
    *a3 = v25;
    double v26 = *a2;
    if (*a2 > 90.0)
    {
      *a2 = 180.0 - v26;
      double v25 = *a3 + 180.0;
      *a3 = v25;
      double v26 = *a2;
    }
    if (v26 < -90.0)
    {
      *a2 = -180.0 - v26;
      double v25 = *a3 + 180.0;
      *a3 = v25;
    }
    if (v25 > -180.0)
    {
      if (v25 <= 180.0) {
        return;
      }
    }
    else
    {
      double v25 = v25 + 360.0;
    }
    if (v25 > 180.0) {
      double v25 = v25 + -360.0;
    }
    *a3 = v25;
  }
}

double sub_1011722DC(double *a1, double a2, double a3, double a4, double a5)
{
  if (vabdd_f64(a2, a4) >= 0.00000001 || vabdd_f64(a3, a5) >= 0.00000001)
  {
    *(void *)std::string buf = 0;
    __y[0] = 0.0;
    BOOL v9 = sub_1000F17A8(a1, (double *)buf, __y, &v11, a2, a3, 0.0, a4, a5, 0.0);
    double result = -1.0;
    if (v9)
    {
      double v10 = atan2(__y[0], *(long double *)buf);
      if (v10 < 0.0) {
        double v10 = v10 + 6.28318531;
      }
      return v10 * 57.2957795;
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102314CD8);
    }
    double v5 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning, same coordinates input", buf, 2u);
    }
    BOOL v6 = sub_10013D1A0(115, 2);
    double result = -1.0;
    if (v6)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102314CD8);
      }
      LOWORD(__y[0]) = 0;
      double v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "double CLDistanceCalc::calculateAzimuth(double, double, double, double)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
      return -1.0;
    }
  }
  return result;
}

void sub_1011724E8(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1011725C8(id a1)
{
  qword_102485AC8 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLMotionSyncStoreSilo"];
}

uint64_t sub_101172688(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1011736B8;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_102485AD8 != -1) {
    dispatch_once(&qword_102485AD8, block);
  }
  return qword_10248B370;
}

void sub_101172A80(uint64_t a1, void *a2)
{
  uint64_t v2 = sub_101172C94(a1, "CLMotionSyncStore", a2);
  *(void *)uint64_t v2 = off_102314D28;
  *(unsigned char *)(v2 + 109) = 0;
  *(void *)(v2 + 112) = 0;
  *(void *)(v2 + 120) = 0;
  sub_100EB2E6C();
}

void sub_101172C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1000DB0A0(a15);
  }
  uint64_t v17 = *(void *)(v15 + 120);
  *(void *)(v15 + 120) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  sub_101173578(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_101172C94(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_102314ED8;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_101172D24(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_101172D40(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102314E68);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    double v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionSyncStore::onDataProtectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102314E68);
    }
    BOOL v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionSyncStore::onDataProtectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10117381C((unsigned char *)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_101172EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101172F1C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(v1 + 32), "vendor"), "proxyForService:", @"CLNatalimetryNotifier"), "refreshMetrics"];
  uint64_t v2 = *(void *)sub_1000A6958();
  (*(void (**)(void))(v2 + 936))();
  id v3 = [[[*(id *)(v1 + 32) vendor] proxyForService:@"CLStepCountNotifier"];
  uint64_t v15 = 0;
  uint64_t v4 = sub_1000A6958();
  if (sub_1004D0164(v4, (const char *)[@"RawSpeedToKValueTable" UTF8String], (CFTypeRef *)&v15))
  {
    id v5 = sub_101173324(v15);
    id v6 = [v3 syncgetCopyRawSpeedToKValueBins];
    if (([v6 isEqualToArray:v5] & 1) == 0)
    {
      if (qword_102419120 != -1) {
        dispatch_once(&qword_102419120, &stru_102314EA8);
      }
      uint64_t v7 = qword_102419128;
      if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Forcing a raw speed to kValue bins update.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419120 != -1) {
          dispatch_once(&qword_102419120, &stru_102314EA8);
        }
        LOWORD(v14) = 0;
        double v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLMotionSyncStore::CLMotionSyncStore(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
      [v3 setRawSpeedToKValueBins:v5];
    }
  }
  uint64_t v14 = 0;
  uint64_t v8 = sub_1000A6958();
  if (sub_1004D0164(v8, (const char *)[@"StepCadenceToStrideLengthTable" UTF8String], (CFTypeRef *)&v14))
  {
    id v9 = sub_101173324(v14);
    id v10 = [v3 syncgetCopyStepCadenceToStrideLengthBins];
    if (([v10 isEqualToArray:v9] & 1) == 0)
    {
      if (qword_102419120 != -1) {
        dispatch_once(&qword_102419120, &stru_102314EA8);
      }
      char v11 = qword_102419128;
      if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Forcing a step cadence to stride length bins update.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419120 != -1) {
          dispatch_once(&qword_102419120, &stru_102314EA8);
        }
        int v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLMotionSyncStore::CLMotionSyncStore(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
      [v3 setStepCadenceToStrideLengthBins:v9];
    }
  }
}

id sub_101173324(uint64_t a1)
{
  id v1 = [objc_alloc((Class)NSKeyedUnarchiver) initForReadingFromData:a1 error:0];
  uint64_t v2 = objc_opt_class();
  id v3 = [v1 decodeObjectOfClasses:+[NSSet setWithObjects:](NSSet, "setWithObjects:", v2, objc_opt_class(), 0) forKey:NSKeyedArchiveRootObjectKey];
  [v1 finishDecoding];

  return v3;
}

void sub_101173414(_Unwind_Exception *a1)
{
}

uint64_t sub_101173578(uint64_t a1)
{
  *(void *)a1 = off_102314ED8;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_1011735FC(uint64_t a1)
{
  *(void *)a1 = off_102314D28;

  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v2 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  return sub_101173578(a1);
}

uint64_t sub_1011736B8()
{
  sub_100103240();
  if (sub_10010145C()) {
    operator new();
  }
  sub_100103240();
  uint64_t result = sub_10016CCBC();
  if (result) {
    operator new();
  }
  return result;
}

void sub_101173744()
{
}

uint64_t sub_10117377C(uint64_t result)
{
  *(unsigned char *)(result + 108) = 1;
  return result;
}

void *sub_101173788@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

uint64_t sub_101173804()
{
  return 1;
}

uint64_t sub_10117380C()
{
  return 1;
}

uint64_t sub_101173814(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 109);
}

void sub_10117381C(unsigned char *a1, uint64_t a2, int *a3, int *a4)
{
  if (qword_102419120 != -1) {
    dispatch_once(&qword_102419120, &stru_102314EA8);
  }
  uint64_t v7 = qword_102419128;
  if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_DEBUG))
  {
    int v8 = *a3;
    int v9 = *a4;
    *(_DWORD *)std::string buf = 67109376;
    int v12 = v8;
    __int16 v13 = 1024;
    int v14 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Received CLDataProtectionManager_Type %d, data availability %d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_102314EA8);
    }
    id v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionSyncStore::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  if (!*a3)
  {
    if (*a4 == 1)
    {
      a1[109] = 1;
      (*(void (**)(unsigned char *))(*(void *)a1 + 264))(a1);
    }
    else
    {
      a1[109] = 0;
    }
  }
}

uint64_t sub_101173A50(void *a1)
{
  sub_10010F274((uint64_t)v47);
  sub_100132EFC(v48, (uint64_t)"(", 1);
  sub_100132EFC(v48, (uint64_t)"CalibrationVersion,", 19);
  if ([a1 objectForKeyedSubscript:@"CalibrationVersion"]) {
    [objc_msgSend(a1, "objectForKeyedSubscript:", @"CalibrationVersion") intValue];
  }
  uint64_t v2 = (void *)std::ostream::operator<<();
  sub_100132EFC(v2, (uint64_t)",", 1);
  id v3 = sub_100132EFC(v48, (uint64_t)"CalibrationUDID,", 16);
  sub_101174138(a1, __p);
  if ((v46 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v46 & 0x80u) == 0) {
    uint64_t v5 = v46;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  id v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
  sub_100132EFC(v6, (uint64_t)",", 1);
  if ((char)v46 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = sub_100132EFC(v48, (uint64_t)"CalibrationTimestamp,", 21);
  uint64_t v8 = *v7;
  *(_DWORD *)((char *)v7 + *(void *)(*v7 - 24) + 8) = *(_DWORD *)((unsigned char *)v7 + *(void *)(*v7 - 24) + 8) & 0xFFFFFEFB | 4;
  *(uint64_t *)((char *)v7 + *(void *)(v8 - 24) + 16) = 2;
  if ([a1 objectForKeyedSubscript:@"CalibrationTimestamp"]) {
    [a1[@"CalibrationTimestamp"] doubleValue];
  }
  int v9 = (void *)std::ostream::operator<<();
  sub_100132EFC(v9, (uint64_t)",", 1);
  id v10 = sub_100132EFC(v48, (uint64_t)"CMNatalimeterSetUserPal,", 24);
  uint64_t v11 = CMNatalimeterSetUserPal;
  if ([a1 objectForKeyedSubscript:CMNatalimeterSetUserPal]) {
    int v12 = (const char *)[([a1 objectForKeyedSubscript:v11] stringValue) UTF8String];
  }
  else {
    int v12 = "na";
  }
  size_t v13 = strlen(v12);
  int v14 = sub_100132EFC(v10, (uint64_t)v12, v13);
  sub_100132EFC(v14, (uint64_t)",", 1);
  uint64_t v15 = sub_100132EFC(v48, (uint64_t)"CMNatalimeterSetUserVo2max,", 27);
  uint64_t v16 = CMNatalimeterSetUserVo2max;
  if ([a1 objectForKeyedSubscript:CMNatalimeterSetUserVo2max]) {
    uint64_t v17 = (const char *)[[[a1 objectForKeyedSubscript:v16] stringValue] UTF8String];
  }
  else {
    uint64_t v17 = "na";
  }
  size_t v18 = strlen(v17);
  uint64_t v19 = sub_100132EFC(v15, (uint64_t)v17, v18);
  sub_100132EFC(v19, (uint64_t)",", 1);
  double v20 = sub_100132EFC(v48, (uint64_t)"CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold,", 52);
  uint64_t v21 = CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold;
  if ([a1 objectForKeyedSubscript:CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold]) {
    double v22 = (const char *)[[[a1 objectForKeyedSubscript:v21] stringValue] UTF8String];
  }
  else {
    double v22 = "na";
  }
  size_t v23 = strlen(v22);
  double v24 = sub_100132EFC(v20, (uint64_t)v22, v23);
  sub_100132EFC(v24, (uint64_t)",", 1);
  double v25 = sub_100132EFC(v48, (uint64_t)"RawSpeedToKValueTable,", 22);
  id v26 = [a1 objectForKeyedSubscript:@"RawSpeedToKValueTable"];
  if (v26) {
    double v27 = "avail";
  }
  else {
    double v27 = "na";
  }
  if (v26) {
    uint64_t v28 = 5;
  }
  else {
    uint64_t v28 = 2;
  }
  double v29 = sub_100132EFC(v25, (uint64_t)v27, v28);
  sub_100132EFC(v29, (uint64_t)",", 1);
  double v30 = sub_100132EFC(v48, (uint64_t)"StepCadenceToStrideLengthTable,", 31);
  id v31 = [a1 objectForKeyedSubscript:@"StepCadenceToStrideLengthTable"];
  if (v31) {
    double v32 = "avail";
  }
  else {
    double v32 = "na";
  }
  if (v31) {
    uint64_t v33 = 5;
  }
  else {
    uint64_t v33 = 2;
  }
  double v34 = sub_100132EFC(v30, (uint64_t)v32, v33);
  sub_100132EFC(v34, (uint64_t)",", 1);
  double v35 = sub_100132EFC(v48, (uint64_t)"CalibrationResetRequested,", 26);
  if ([a1 objectForKeyedSubscript:@"CalibrationResetRequested"]) {
    double v36 = (const char *)[[[a1 objectForKeyedSubscript:@"CalibrationResetRequested"] stringValue] UTF8String];
  }
  else {
    double v36 = "na";
  }
  size_t v37 = strlen(v36);
  double v38 = sub_100132EFC(v35, (uint64_t)v36, v37);
  sub_100132EFC(v38, (uint64_t)",", 1);
  double v39 = sub_100132EFC(v48, (uint64_t)"HasSavedInitialMotionCalsToDisk,", 32);
  if ([a1 objectForKeyedSubscript:@"HasSavedInitialMotionCalsToDisk"]) {
    double v40 = (const char *)[a1 objectForKeyedSubscript:@"HasSavedInitialMotionCalsToDisk"][@"stringValue"][@"UTF8String"];
  }
  else {
    double v40 = "na";
  }
  size_t v41 = strlen(v40);
  double v42 = sub_100132EFC(v39, (uint64_t)v40, v41);
  sub_100132EFC(v42, (uint64_t)",", 1);
  sub_100132EFC(v48, (uint64_t)")", 1);
  std::stringbuf::str();
  *(void *)((char *)v47
  v48[0] = v43;
  if (v49 < 0) {
    operator delete((void *)v48[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1011740A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t sub_1011740D8(void *a1)
{
  if (![a1 objectForKeyedSubscript:@"CalibrationVersion"]) {
    return 0xFFFFFFFFLL;
  }
  id v2 = [a1 objectForKeyedSubscript:@"CalibrationVersion"];

  return (uint64_t)[v2 intValue];
}

void *sub_101174138@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  if ([a1 objectForKeyedSubscript:@"CalibrationUDID"]) {
    uint64_t v4 = (char *)[a1 objectForKeyedSubscript:@"CalibrationUDID"];
  }
  else {
    uint64_t v4 = "unset";
  }

  return sub_100134750(a2, v4);
}

double sub_1011741A4(void *a1)
{
  if (![a1 objectForKeyedSubscript:@"CalibrationTimestamp"]) {
    return 0.0;
  }
  id v2 = [a1 objectForKeyedSubscript:@"CalibrationTimestamp"];

  [v2 doubleValue];
  return result;
}

id sub_101174204(void *a1, uint64_t a2)
{
  if (qword_102419120 != -1) {
    dispatch_once(&qword_102419120, &stru_102314EA8);
  }
  uint64_t v4 = qword_102419128;
  if (os_log_type_enabled((os_log_t)qword_102419128, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Setting the current Motion Cals version to, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419120 != -1) {
      dispatch_once(&qword_102419120, &stru_102314EA8);
    }
    id v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLMotionSyncStore::setCurrentVersion(NSMutableDictionary *, int)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return [a1 setObject:+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2) forKeyedSubscript:@"CalibrationVersion"];
}

id sub_1011743D8(void *a1)
{
  id result = [a1 objectForKeyedSubscript:@"CalibrationResetRequested"];
  if (result)
  {
    id v3 = [a1 objectForKeyedSubscript:@"CalibrationResetRequested"];
    return [v3 BOOLValue];
  }
  return result;
}

uint64_t sub_101174434(int a1, int a2)
{
  BOOL v3 = a1 == 2 && a2 > 1;
  return a1 > 2 || v3;
}

BOOL sub_101174450(void *a1)
{
  return ![a1 objectForKeyedSubscript:@"CalibrationUDID"]
      || [a1 objectForKeyedSubscript:@"HasSavedInitialMotionCalsToDisk"] != 0;
}

id sub_1011744A0(void *a1)
{
  if ([a1 objectForKeyedSubscript:@"HasSavedInitialMotionCalsToDisk"]) {
    [a1 removeObjectForKey:@"HasSavedInitialMotionCalsToDisk"];
  }
  if ([a1 objectForKeyedSubscript:@"CalibrationResetRequested"]) {
    [a1 removeObjectForKey:@"CalibrationResetRequested"];
  }
  id result = [a1 objectForKeyedSubscript:@"StrideCalibrationDataBins"];
  if (result)
  {
    [a1 setObject:+[CMPedometerTable convertToCMPedometerBins:](CMPedometerTableRawSpeedToKValue, "convertToCMPedometerBins:", [a1 objectForKeyedSubscript:@"StrideCalibrationDataBins"]) forKeyedSubscript:@"RawSpeedToKValueTable"];
    return [a1 removeObjectForKey:@"StrideCalibrationDataBins"];
  }
  return result;
}

uint64_t sub_101174584(void *a1, void *a2)
{
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  v28[0] = CMNatalimeterSetUserPal;
  v28[1] = CMNatalimeterSetUserVo2max;
  void v28[2] = CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold;
  uint64_t v4 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v28, 3, 0);
  id v5 = [(NSArray *)v4 countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v24;
LABEL_3:
    uint64_t v8 = 0;
    while (1)
    {
      if (*(void *)v24 != v7) {
        objc_enumerationMutation(v4);
      }
      uint64_t v9 = *(void *)(*((void *)&v23 + 1) + 8 * v8);
      unint64_t v10 = (unint64_t)[a1 objectForKeyedSubscript:v9];
      unint64_t v11 = (unint64_t)[a2 objectForKeyedSubscript:v9];
      if (!v10 && v11 != 0) {
        return 0;
      }
      size_t v13 = (void *)v11;
      if (v10 && v11 == 0) {
        return 0;
      }
      if (v10 | v11)
      {
        [(id)v10 floatValue];
        float v16 = v15;
        [v13 floatValue];
        if (vabds_f32(v16, v17) >= 0.000001) {
          return 0;
        }
      }
      if (v6 == (id)++v8)
      {
        id v6 = [(NSArray *)v4 countByEnumeratingWithState:&v23 objects:v27 count:16];
        if (v6) {
          goto LABEL_3;
        }
        break;
      }
    }
  }
  unint64_t v18 = (unint64_t)[a1 objectForKeyedSubscript:@"RawSpeedToKValueTable"];
  unint64_t v19 = (unint64_t)[a2 objectForKeyedSubscript:@"RawSpeedToKValueTable"];
  if (!v18 && v19 || v18 && !v19) {
    return 0;
  }
  if (!(v18 | v19) || (uint64_t result = (uint64_t)[(id)v18 isEqualToArray:v19], result))
  {
    unint64_t v21 = (unint64_t)[a1 objectForKeyedSubscript:@"StepCadenceToStrideLengthTable"];
    unint64_t v22 = (unint64_t)[a2 objectForKeyedSubscript:@"StepCadenceToStrideLengthTable"];
    if (!v21 && v22 || v21 && !v22) {
      return 0;
    }
    if (v21 | v22) {
      return (uint64_t)[(id)v21 isEqualToArray:v22];
    }
    else {
      return 1;
    }
  }
  return result;
}

void sub_1011747D0(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101174800(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_101174830(id a1)
{
  qword_102419128 = (uint64_t)os_log_create("com.apple.locationd.Motion", "MotionSync");
}

uint64_t sub_101174860()
{
  sub_100134750(qword_102485AB0, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102485AB0, (void *)&_mh_execute_header);
}

void sub_101174970(id a1)
{
  qword_102485AE0 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLLocationAwarenessProviderSilo"];
}

uint64_t sub_101174A30(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1011753D4;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_102485AF0 != -1) {
    dispatch_once(&qword_102485AF0, block);
  }
  return qword_102485AF8;
}

void sub_101174C50()
{
}

void sub_101174D0C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_101174D48(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_102315180;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    int v12 = a3;
  }
  else {
    int v12 = (uint64_t *)*a3;
  }
  id v13 = [[[a4 vendor] proxyForService:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12)];
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:objc_msgSend(a4, "silo")];
  return a1;
}

void sub_101175084(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 152) != a2)
  {
    *(unsigned char *)(a1 + 152) = a2;
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102315150);
    }
    BOOL v3 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *(unsigned __int8 *)(a1 + 152);
      v5[0] = 68289282;
      v5[1] = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 1026;
      int v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Awareness Settled state changed\", \"isSettled\":%{public}hhd}", (uint8_t *)v5, 0x18u);
    }
    sub_100127E50(a1);
  }
}

uint64_t sub_101175188(BOOL *a1, uint64_t a2)
{
  int v4 = sub_1000A699C(a2, "SettledLatencyBudget", a1);
  int v5 = sub_1000A699C(a2, "UnsettledLatencyBudget", a1 + 24);
  int v6 = sub_1000A699C(a2, "SettledRetryRate", a1 + 8);
  int v7 = sub_1000A699C(a2, "UnsettledRetryRate", a1 + 32);
  int v8 = sub_1000D2988(a2, "SettledQueryALS", a1 + 16);
  return sub_1000D2988(a2, "UnsettledQueryALS", a1 + 40) | v8 | v7 | v6 | v5 | v4;
}

BOOL sub_10117527C(double *a1, void *a2)
{
  double v4 = *a1;
  double v5 = a1[1];
  int v6 = *((unsigned __int8 *)a1 + 16);
  double v8 = a1[3];
  double v7 = a1[4];
  int v9 = *((unsigned __int8 *)a1 + 40);
  [a2 doubleForKey:@"SettledLatencyBudget" defaultValue:*a1];
  *(void *)a1 = v10;
  [a2 doubleForKey:@"UnsettledLatencyBudget" defaultValue:a1[3]];
  *((void *)a1 + 3) = v11;
  [a2 doubleForKey:@"SettledRetryRate" defaultValue:a1[1]];
  *((void *)a1 + 1) = v12;
  [a2 doubleForKey:@"UnsettledRetryRate" defaultValue:a1[4]];
  *((void *)a1 + 4) = v13;
  if (*((unsigned char *)a1 + 16)) {
    double v14 = 1.0;
  }
  else {
    double v14 = 0.0;
  }
  [a2 doubleForKey:@"SettledQueryALS" defaultValue:v14];
  *((unsigned char *)a1 + 16) = v15 != 0.0;
  if (*((unsigned char *)a1 + 40)) {
    double v16 = 1.0;
  }
  else {
    double v16 = 0.0;
  }
  [a2 doubleForKey:@"UnsettledQueryALS" defaultValue:v16];
  int v18 = v17 != 0.0;
  *((unsigned char *)a1 + 40) = v18;
  return *a1 != v4 || a1[1] != v5 || *((unsigned __int8 *)a1 + 16) != v6 || a1[3] != v8 || a1[4] != v7 || v9 != v18;
}

void sub_1011753D4()
{
}

void sub_101175420()
{
}

void sub_101175444(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_101175A24(a1, "Awareness", a2);
  *(void *)uint64_t v3 = off_102315000;
  *(int64x2_t *)(v3 + 112) = vdupq_n_s64(0x405E000000000000uLL);
  *(int64x2_t *)(v3 + 128) = vdupq_n_s64(0x7FF0000000000000uLL);
  *(unsigned char *)(v3 + 144) = 0;
  *(_WORD *)(v3 + 152) = 0;
  *(int64x2_t *)(v3 + 160) = vdupq_n_s64(0xFFF0000000000000);
  *(_OWORD *)(v3 + 176) = xmmword_101DAAD10;
  sub_100134750(&__p, "Awareness");
  sub_100998BE0(a1 + 192, &__p, sub_101175AD0, a1, *(void *)(a1 + 40), 1, 1.79769313e308, 1.79769313e308, 0.9);
  if (v6 < 0) {
    operator delete(__p);
  }
  *(_WORD *)(a1 + 248) = sub_1001198CC() == 1;
  *(void *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_WORD *)(a1 + 288) = 0;
  *(void *)(a1 + 304) = [objc_msgSend(*(id *)(a1 + 32), "silo") newTimer];
  *(_DWORD *)(a1 + 312) = 48;
  *(void *)(a1 + 320) = [objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLWifiLocationProvider" forClient:@"CLLocationAwarenessProvider"];
  [*(id *)(a1 + 32) vendor] proxyForService:@"CLRoutineMonitor" forClient:@"CLLocationAwarenessProvider"];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_101175C94;
  v4[3] = &unk_1022A3020;
  void v4[4] = a1;
  [*(id *)(a1 + 304) setHandler:v4];
  sub_1001AE6FC();
}

void sub_1011758B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, std::__shared_weak_count *a15, int a16, __int16 a17, char a18, char a19)
{
  if (a15) {
    sub_1000DB0A0(a15);
  }
  uint64_t v23 = v19[37];
  v19[37] = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = v19[35];
  v19[35] = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  uint64_t v25 = v19[34];
  v19[34] = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = v19[33];
  v19[33] = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  uint64_t v27 = *v21;
  *unint64_t v21 = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  sub_100998C38(v20);
  sub_10117613C((uint64_t)v19);
  _Unwind_Resume(a1);
}

uint64_t sub_101175A24(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_1023151A8;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_101175AB4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_101175AD0(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102315130);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v6 = 1;
    uint64_t v3 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationAwarenessProvider::onWakeTimer", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v3, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102315130);
    }
    double v4 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v8 = 0;
      __int16 v9 = 2082;
      uint64_t v10 = "";
      __int16 v11 = 2082;
      uint64_t v12 = "activity";
      __int16 v13 = 2050;
      uint64_t v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationAwarenessProvider::onWakeTimer\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v6 = 0;
  }
  sub_10117762C(a2);
  if (v6) {
    os_activity_scope_leave(&state);
  }
}

void sub_101175C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101175C94(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102315150);
  }
  id v2 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    __int16 v4 = 2082;
    double v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Awareness Active location request has timed out\"}", (uint8_t *)v3, 0x12u);
  }
  sub_1001282A8(v1);
  sub_100127E50(v1);
}

void sub_101175D80(uint64_t a1, int *a2, unsigned char *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102315130);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationAwarenessProvider::onWifiNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102315130);
    }
    __int16 v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      double v15 = "";
      __int16 v16 = 2082;
      double v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationAwarenessProvider::onWifiNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101177AC8(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_101175F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101175F60(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102315130);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationAwarenessProvider::onClientManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102315130);
    }
    __int16 v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      double v15 = "";
      __int16 v16 = 2082;
      double v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationAwarenessProvider::onClientManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10117783C((unsigned char *)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10117611C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10117613C(uint64_t a1)
{
  *(void *)a1 = off_1023151A8;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_1011761C0(uint64_t a1)
{
  *(void *)a1 = off_102315000;

  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  [*(id *)(a1 + 304) invalidate];

  uint64_t v2 = *(void *)(a1 + 296);
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 280);
  *(void *)(a1 + 280) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 272);
  *(void *)(a1 + 272) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 264);
  *(void *)(a1 + 264) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 256);
  *(void *)(a1 + 256) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  sub_100998C38(a1 + 192);

  return sub_10117613C(a1);
}

void sub_101176338(uint64_t a1)
{
  sub_1011761C0(a1);

  operator delete();
}

id sub_101176370(uint64_t a1)
{
  sub_101176474(a1);
  sub_1001B0AE4(a1 + 192);
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102315150);
  }
  uint64_t v2 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 68289282;
    v4[1] = 0;
    __int16 v5 = 2082;
    uint64_t v6 = "";
    __int16 v7 = 2050;
    uint64_t v8 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#Awareness shutting down provider\", \"self\":\"%{public}p\"}", (uint8_t *)v4, 0x1Cu);
  }
  id result = [*(id *)(a1 + 304) invalidate];
  *(unsigned char *)(a1 + 108) = 1;
  return result;
}

uint64_t sub_101176474(uint64_t a1)
{
  sub_1001282A8(a1);
  *(int64x2_t *)(a1 + 160) = vdupq_n_s64(0xFFF0000000000000);
  if (*(_DWORD *)(a1 + 312) != 48)
  {
    [*(id *)(*(void *)(a1 + 264) + 16) unregister:*(void *)(*(void *)(a1 + 264) + 8) forNotification:];
    *(_DWORD *)(a1 + 312) = 48;
  }
  sub_100128200(a1, 0);
  sub_1001283F8((double *)a1, INFINITY);
  int v3 = 0;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

BOOL sub_101176518(uint64_t a1, int a2, int *a3, double *a4)
{
  int v19 = a2;
  if (*a4 >= a4[3]) {
    double v4 = a4[3];
  }
  else {
    double v4 = *a4;
  }
  if (v4 <= 0.0)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102315150);
    }
    uint64_t v10 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v21 = 2082;
      unint64_t v22 = "";
      __int16 v23 = 2050;
      double v24 = v4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Awareness Attempting to set a non-positive latency budget\", \"budget\":\"%{public}f\"}", buf, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102315150);
      }
    }
    uint64_t v11 = qword_102419538;
    BOOL result = os_signpost_enabled((os_log_t)qword_102419538);
    if (result)
    {
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v21 = 2082;
      unint64_t v22 = "";
      __int16 v23 = 2050;
      double v24 = v4;
      uint64_t v12 = "#Awareness Attempting to set a non-positive latency budget";
      int v13 = "{\"msg%{public}.0s\":\"#Awareness Attempting to set a non-positive latency budget\", \"budget\":\"%{public}f\"}";
      __int16 v14 = v11;
LABEL_25:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v12, v13, buf, 0x1Cu);
      return 0;
    }
  }
  else
  {
    if (sub_1011768BC(a1, a2, a3, (long long *)a4))
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102315150);
      }
      __int16 v7 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        *(void *)std::string buf = &v19;
        double v8 = COERCE_DOUBLE([objc_msgSend(objc_msgSend(sub_10008A098((uint64_t **)(a1 + 80), &v19, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[8], "description"), "UTF8String"));
        *(_DWORD *)std::string buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v21 = 2082;
        unint64_t v22 = "";
        __int16 v23 = 2082;
        double v24 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#Awareness New registration\", \"client\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      sub_100127E50(a1);
      return 1;
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102315150);
    }
    double v15 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(void *)&double v16 = *a3;
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v21 = 2082;
      unint64_t v22 = "";
      __int16 v23 = 2050;
      double v24 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Awareness failed to register\", \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld}", buf, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102315150);
      }
    }
    uint64_t v17 = qword_102419538;
    BOOL result = os_signpost_enabled((os_log_t)qword_102419538);
    if (result)
    {
      *(void *)&double v18 = *a3;
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v21 = 2082;
      unint64_t v22 = "";
      __int16 v23 = 2050;
      double v24 = v18;
      uint64_t v12 = "#Awareness failed to register";
      int v13 = "{\"msg%{public}.0s\":\"#Awareness failed to register\", \"notification\":%{public, location:CLLocationProvid"
            "er_Type::Notification}lld}";
      __int16 v14 = v17;
      goto LABEL_25;
    }
  }
  return result;
}

uint64_t sub_1011768BC(uint64_t a1, int a2, int *a3, long long *a4)
{
  int v50 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        int v13 = (uint64_t *)v7;
      }
      else {
        int v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)std::string::size_type v51 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          double v24 = (uint64_t *)v18;
        }
        else {
          double v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          double v29 = (uint64_t *)v25;
        }
        else {
          double v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v49 = v26;
        uint64_t v37 = *(void *)(v26 + 56);
        *(void *)std::string buf = &v50;
        double v38 = sub_10014A600((uint64_t **)(v26 + 40), &v50, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        long long v39 = *a4;
        long long v40 = a4[1];
        *(_OWORD *)(v38 + 9) = a4[2];
        *(_OWORD *)(v38 + 7) = v40;
        *(_OWORD *)(v38 + 5) = v39;
        *(_DWORD *)std::string buf = 0xFFFF;
        uint64_t v55 = 0;
        *(void *)&uint8_t buf[4] = 0;
        long long v56 = xmmword_101D1C320;
        __asm { FMOV            V0.2D, #-1.0 }
        long long v57 = _Q0;
        long long v58 = _Q0;
        long long v59 = _Q0;
        uint64_t v62 = 0;
        uint64_t v63 = 0;
        unint64_t v61 = 0xBFF0000000000000;
        int v60 = 0;
        int v64 = 0;
        unint64_t v65 = 0xBFF0000000000000;
        int v66 = 0x7FFFFFFF;
        uint64_t v68 = 0;
        uint64_t v69 = 0;
        uint64_t v67 = 0;
        char v70 = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_101178CC8();
        }
        if (v37) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v49 = a1 + 64;
        char v30 = byte_102476758;
        int v48 = v17;
        *(void *)std::string buf = &v48;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v48, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v30;
        int v48 = *a3;
        *(void *)std::string buf = &v48;
        id v31 = sub_10044715C((uint64_t **)(a1 + 56), &v48, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        double v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        int v48 = *a3;
        *(void *)std::string buf = &v48;
        uint64_t v33 = sub_10044715C((uint64_t **)(a1 + 56), &v48, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)std::string buf = &v50;
        double v34 = sub_10014A600(v33 + 5, &v50, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        long long v35 = *a4;
        long long v36 = a4[1];
        *(_OWORD *)(v34 + 9) = a4[2];
        *(_OWORD *)(v34 + 7) = v36;
        *(_OWORD *)(v34 + 5) = v35;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        *(_DWORD *)std::string buf = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v51 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102315130);
  }
  __int16 v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    double v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      double v15 = (void *)*v15;
    }
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    LOWORD(v55) = 1026;
    *(_DWORD *)((char *)&v55 + 2) = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102315130);
    }
    unsigned __int8 v46 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      unsigned __int8 v46 = (void *)*v46;
    }
    *(_DWORD *)std::string::size_type v51 = 136446466;
    *(void *)&v51[4] = v46;
    __int16 v52 = 1026;
    int v53 = a2;
    uint64_t v47 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLLocationAwarenessProvider_Type::Notification, NotificationData_T = CLLocationAwarenessProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationAwarenessProvider_Type::RegInfo]", "%s\n", v47);
    if (v47 != buf) {
      free(v47);
    }
    return 0;
  }
  return result;
}

BOOL sub_101176DC8(uint64_t a1, int a2, int *a3)
{
  int v13 = a2;
  BOOL v5 = sub_101177038((char *)a1, a2, a3);
  if (v5)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102315150);
    }
    uint64_t v6 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      *(void *)std::string buf = &v13;
      id v7 = [[objc_msgSend(objc_msgSend(sub_10008A098((uint64_t **)(a1 + 80), &v13, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[8], "description"), "UTF8String");
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v15 = 2082;
      BOOL v16 = "";
      __int16 v17 = 2082;
      unint64_t v18 = (unint64_t)v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#Awareness Removed registration\", \"client\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    sub_100127E50(a1);
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102315150);
    }
    double v8 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      unint64_t v9 = *a3;
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v15 = 2082;
      BOOL v16 = "";
      __int16 v17 = 2050;
      unint64_t v18 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Awareness failed to unregister\", \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld}", buf, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102315150);
      }
    }
    uint64_t v10 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      unint64_t v11 = *a3;
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v15 = 2082;
      BOOL v16 = "";
      __int16 v17 = 2050;
      unint64_t v18 = v11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Awareness failed to unregister", "{\"msg%{public}.0s\":\"#Awareness failed to unregister\", \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld}", buf, 0x1Cu);
    }
  }
  return v5;
}

BOOL sub_101177038(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      double v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          unint64_t v11 = (uint64_t *)v6;
        }
        else {
          unint64_t v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          double v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        __int16 v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        int v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          BOOL v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              uint64_t v19 = (char **)v13;
            }
            else {
              uint64_t v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              BOOL v16 = v13;
            }
            int v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                uint64_t v25 = (uint64_t *)v20;
              }
              else {
                uint64_t v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10017C890((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_102315130);
              }
              uint64_t v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)std::string buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                long long v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_102315130);
                }
                double v29 = a1 + 8;
                if (a1[31] < 0) {
                  double v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  char v30 = buf;
                }
                else {
                  char v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                double v38 = v29;
                __int16 v39 = 2082;
                long long v40 = v30;
                id v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLLocationAwarenessProvider_Type::Notification, NotificationData_T = CLLocationAwarenessProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationAwarenessProvider_Type::RegInfo]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_10117740C(uint64_t result)
{
  if (!*(unsigned char *)(result + 289))
  {
    uint64_t v1 = result;
    *(unsigned char *)(result + 289) = 1;
    [*(id *)(*(void *)(result + 272) + 16) register:*(void *)(*(void *)(result + 272) + 8) forNotification:1 registrationInfo:0];
    [*(id *)(v1 + 304) setNextFireDelay:10.0];
    operator new();
  }
  return result;
}

void sub_1011775C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void sub_10117762C(uint64_t a1)
{
  int v5 = 0;
  if (sub_1001072EC(a1, &v5, 1))
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102315150);
    }
    uint64_t v2 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      int v5 = 68289026;
      int v6 = 0;
      __int16 v7 = 2082;
      double v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#Awareness Awakened\"}", (uint8_t *)&v5, 0x12u);
    }
    sub_100127E50(a1);
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102315150);
    }
    int v3 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      int v5 = 68289026;
      int v6 = 0;
      __int16 v7 = 2082;
      double v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Awareness #warning Awakened with no clients\"}", (uint8_t *)&v5, 0x12u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102315150);
      }
    }
    double v4 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      int v5 = 68289026;
      int v6 = 0;
      __int16 v7 = 2082;
      double v8 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Awareness #warning Awakened with no clients", "{\"msg%{public}.0s\":\"#Awareness #warning Awakened with no clients\"}", (uint8_t *)&v5, 0x12u);
    }
  }
}

void sub_10117783C(unsigned char *a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (*a3 == 4)
  {
    a1[248] = *(_DWORD *)(a4 + 188) == 1;
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102315150);
    }
    int v5 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = a1[248];
      int v12 = 68289282;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 1026;
      int v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Awareness New big switch state\", \"enabled\":%{public}d}", (uint8_t *)&v12, 0x18u);
    }
    if (!a1[248])
    {
      int v12 = 0;
      (*(void (**)(unsigned char *, int *))(*(void *)a1 + 120))(a1, &v12);
    }
    sub_100127E50((uint64_t)a1);
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102315150);
    }
    double v8 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      int v9 = *a3;
      int v12 = 68289282;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 1026;
      int v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Awareness Unexpected client manager notification\", \"notification\":%{public}d}", (uint8_t *)&v12, 0x18u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102315150);
      }
    }
    BOOL v10 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      int v11 = *a3;
      int v12 = 68289282;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 1026;
      int v17 = v11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Awareness Unexpected client manager notification", "{\"msg%{public}.0s\":\"#Awareness Unexpected client manager notification\", \"notification\":%{public}d}", (uint8_t *)&v12, 0x18u);
    }
  }
}

void sub_101177AC8(uint64_t a1, uint64_t a2, int *a3, unsigned char *a4)
{
  if (*a3 == 1)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102315150);
    }
    int v6 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *a4;
      int v13 = 68289282;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 1026;
      int v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Awareness Wifi power state changed\", \"powered\":%{public}hhd}", (uint8_t *)&v13, 0x18u);
    }
    *(unsigned char *)(a1 + 249) = *a4;
    sub_100127E50(a1);
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102315150);
    }
    int v9 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      int v10 = *a3;
      int v13 = 68289282;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 1026;
      int v18 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Awareness Unexpected wifi notification\", \"notification\":%{public}d}", (uint8_t *)&v13, 0x18u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102315150);
      }
    }
    int v11 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      int v12 = *a3;
      int v13 = 68289282;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 1026;
      int v18 = v12;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Awareness Unexpected wifi notification", "{\"msg%{public}.0s\":\"#Awareness Unexpected wifi notification\", \"notification\":%{public}d}", (uint8_t *)&v13, 0x18u);
    }
  }
}

void sub_101177D10(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        int v9 = (uint64_t *)v4;
      }
      else {
        int v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)std::string buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102315130);
      }
      int v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        int v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          int v11 = (void *)*v11;
        }
        *(_DWORD *)std::string buf = 136446466;
        uint64_t v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_102315130);
        }
        int v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          int v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        __int16 v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        int v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::removeClient(int) [Notification_T = CLLocationAwarenessProvider_Type::Notification, NotificationData_T = CLLocationAwarenessProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationAwarenessProvider_Type::RegInfo]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_101177FA0(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_101179034(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_101178054(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_10117809C(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_1011780E4(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_10117812C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_102476760);
}

BOOL sub_101178158(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        int v21 = (uint64_t *)v15;
      }
      else {
        int v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102315130);
    }
    int v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)std::string buf = 136446466;
      BOOL v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102315130);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::clientRegistered(int, const Notification_T &) [Notification_T = CLLocationAwarenessProvider_Type::Notification, NotificationData_T = CLLocationAwarenessProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationAwarenessProvider_Type::RegInfo]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1011783DC(uint64_t a1, int *a2, _OWORD *a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      int v10 = (uint64_t *)v4;
    }
    else {
      int v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v7 == v3) {
    return 0;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0;
  }
  int v11 = *(_OWORD **)(v7 + 64);
  if (!v11) {
    return 0;
  }
  long long v12 = v11[1];
  *a3 = *v11;
  a3[1] = v12;
  long long v13 = v11[2];
  long long v14 = v11[3];
  long long v15 = v11[5];
  a3[4] = v11[4];
  a3[5] = v15;
  a3[2] = v13;
  a3[3] = v14;
  long long v16 = v11[6];
  long long v17 = v11[7];
  long long v18 = v11[8];
  *(_OWORD *)((char *)a3 + 140) = *(_OWORD *)((char *)v11 + 140);
  a3[7] = v17;
  a3[8] = v18;
  a3[6] = v16;
  return 1;
}

uint64_t sub_101178464(uint64_t a1, int *a2, _OWORD *a3)
{
  int v6 = (char *)operator new(0xB8uLL);
  long long v7 = a3[7];
  *(_OWORD *)(v6 + 120) = a3[6];
  *(_OWORD *)(v6 + 136) = v7;
  *(_OWORD *)(v6 + 152) = a3[8];
  *(_OWORD *)(v6 + 164) = *(_OWORD *)((char *)a3 + 140);
  long long v8 = a3[3];
  *(_OWORD *)(v6 + 56) = a3[2];
  *(_OWORD *)(v6 + 72) = v8;
  long long v9 = a3[5];
  *(_OWORD *)(v6 + 88) = a3[4];
  *(_OWORD *)(v6 + 104) = v9;
  long long v10 = a3[1];
  *(_OWORD *)(v6 + 24) = *a3;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = off_1023152A8;
  *(_OWORD *)(v6 + 40) = v10;
  int v14 = *a2;
  long long v15 = &v14;
  int v11 = sub_10044715C((uint64_t **)(a1 + 56), &v14, (uint64_t)&unk_101D0B290, &v15);
  long long v12 = (std::__shared_weak_count *)v11[9];
  v11[8] = (uint64_t *)(v6 + 24);
  v11[9] = (uint64_t *)v6;
  if (v12) {
    sub_1000DB0A0(v12);
  }
  return 1;
}

void sub_101178550(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101178564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v10 = 0xFFFF;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  long long v13 = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v14 = _Q0;
  long long v15 = _Q0;
  long long v16 = _Q0;
  int v17 = 0;
  uint64_t v20 = 0;
  unint64_t v18 = 0xBFF0000000000000;
  uint64_t v19 = 0;
  int v21 = 0;
  unint64_t v22 = 0xBFF0000000000000;
  int v23 = 0x7FFFFFFF;
  uint64_t v26 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  char v27 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, &v10, a3, a4, 0);
}

void sub_101178610(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102315130);
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)std::string buf = 136315138;
      unint64_t v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102315130);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::listClients() [Notification_T = CLLocationAwarenessProvider_Type::Notification, NotificationData_T = CLLocationAwarenessProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationAwarenessProvider_Type::RegInfo]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102315130);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)std::string buf = 136315394;
      unint64_t v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102315130);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::listClients() [Notification_T = CLLocationAwarenessProvider_Type::Notification, NotificationData_T = CLLocationAwarenessProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationAwarenessProvider_Type::RegInfo]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    long long v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        long long v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_102315130);
            }
            int v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                uint64_t v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)std::string buf = 136315650;
              unint64_t v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_102315130);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::listClients() [Notification_T = CLLocationAwarenessProvider_Type::Notification, NotificationData_T = CLLocationAwarenessProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationAwarenessProvider_Type::RegInfo]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            long long v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                long long v15 = v14;
                long long v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                long long v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                long long v9 = v15;
              }
              while (!v16);
            }
            long long v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        unint64_t v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            uint64_t v19 = v18;
            unint64_t v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            uint64_t v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            long long v8 = v19;
          }
          while (!v16);
        }
        long long v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_101178BC0(uint64_t a1)
{
  sub_101178C58(a1);

  operator delete();
}

void sub_101178BF8(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101178C28(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

uint64_t sub_101178C58(uint64_t a1)
{
  *(void *)a1 = off_102315180;
  uint64_t v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  id *v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_101178CC8()
{
}

uint64_t sub_101178D9C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

void sub_101178DBC(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_101178DEC(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(_DWORD *)a1 = *a2;
  sub_101178E44(a1 + 8, a3);
  uint64_t v5 = *(void *)(a3 + 32);
  *(void *)(a1 + 32) = *(void *)(a3 + 24);
  *(void *)(a1 + 40) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a3 + 40);
  return a1;
}

uint64_t sub_101178E44(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  sub_101178E9C((_OWORD *)a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_101178E84(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *sub_101178E9C(_OWORD *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    int v6 = (uint64_t *)result + 1;
    do
    {
      uint64_t result = sub_101178F28(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      uint64_t v7 = (int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          long long v8 = v7;
          uint64_t v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          long long v8 = (int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

_OWORD *sub_101178F28(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  int v6 = sub_1002CF4AC(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    long long v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x58uLL);
    long long v9 = *(_OWORD *)(a4 + 16);
    v7[2] = *(_OWORD *)a4;
    void v7[3] = v9;
    uint64_t v7[4] = *(_OWORD *)(a4 + 32);
    *((void *)v7 + 10) = *(void *)(a4 + 48);
    sub_1000EDF90(a1, (uint64_t)v12, v8, (uint64_t *)v7);
  }
  return v7;
}

void sub_101178FC0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1023152A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101178FE0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1023152A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

id sub_101179034(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return sub_101179094(a1);
}

id sub_101179094(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102315278);
      }
      uint64_t v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101DAAEDDLL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLLocationAwarenessProvider_Type::RegInfo, Callbacuint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102315278);
      }
      uint64_t v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101DAAEDDLL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_102315278);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

void sub_101179454()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    int v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)int v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_10117950C(_Unwind_Exception *a1)
{
}

void sub_101179524()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    int v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    _WORD *v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_1011795CC(_Unwind_Exception *a1)
{
}

void sub_101179B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void sub_101179E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

id sub_101179EA0(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3321888768;
  _DWORD v3[2] = sub_10117A92C;
  v3[3] = &unk_102315308;
  sub_10048B9C8((uint64_t)v4, a1);
  id v1 = [v3 copy];
  sub_100111F40((uint64_t)v4);
  return v1;
}

void sub_101179F34(_Unwind_Exception *a1)
{
  sub_100111F40(v1);
  _Unwind_Resume(a1);
}

void sub_10117A124(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  sub_100111F40((uint64_t)va);
  sub_100111F40((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_10117A8B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_100111F40((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10117A8FC(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

uint64_t sub_10117A92C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10048B9C8(a2, a1 + 32);
}

uint64_t sub_10117A938(uint64_t a1, uint64_t a2)
{
  return sub_10048B9C8(a1 + 32, a2 + 32);
}

uint64_t sub_10117A944(uint64_t a1)
{
  return sub_100111F40(a1 + 32);
}

void sub_10117A9FC(id a1)
{
  qword_102485B00 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CMHealthColdStorageCompanionSyncServiceSilo"];
}

void sub_10117AABC(id a1)
{
  if (sub_10016CCBC()) {
    byte_102485B10 = 1;
  }
}

void sub_10117B1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23)
{
  sub_1000C5954(&a21);
  uint64_t v24 = 56;
  while (1)
  {
    uint64_t v25 = *(std::__shared_weak_count **)((char *)&a23 + v24);
    if (v25) {
      sub_1000DB0A0(v25);
    }
    v24 -= 16;
    if (v24 == -8) {
      _Unwind_Resume(a1);
    }
  }
}

id sub_10117B26C(uint64_t a1)
{
  id result = objc_loadWeak((id *)(a1 + 32));
  if (result)
  {
    id v2 = result;
    [result sendAnalytics];
    return [v2 resetAnalytics];
  }
  return result;
}

void sub_10117B618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1000DB0A0(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10117B630(uint64_t a1)
{
  if (qword_1024192C0 != -1) {
    dispatch_once(&qword_1024192C0, &stru_102315398);
  }
  id v2 = qword_1024192C8;
  if (os_log_type_enabled((os_log_t)qword_1024192C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Aggregating HRRecovery db records", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192C0 != -1) {
      dispatch_once(&qword_1024192C0, &stru_102315398);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CMHealthColdStorageCompanionSyncService setUpAggregationOnTimer]_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_10048E02C(*(void *)(*(void *)(a1 + 32) + 24));
  sub_10048E5E4(*(void *)(*(void *)(a1 + 32) + 48));
  sub_10048EB9C(*(void *)(*(void *)(a1 + 32) + 72));
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1023153B8);
  }
  uint64_t v3 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Aggregating ElevationGrade db records", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1023153B8);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CMHealthColdStorageCompanionSyncService setUpAggregationOnTimer]_block_invoke", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return sub_1005D3100(*(void *)(*(void *)(a1 + 32) + 120));
}

uint64_t sub_10117CAE4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + 14;
  (*(void (**)(void *))(a1[14] + 16))(a1 + 14);
  (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, a3);
  return (*(uint64_t (**)(void *))(*v6 + 24))(v6);
}

void sub_10117CBB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10117D1F0(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_10117D3A8(id a1)
{
  qword_102419308 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HealthColdStorage");
}

void sub_10117D3D8(id a1)
{
  qword_1024192C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HRRecovery");
}

void sub_10117D408(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_10117D4E8(id a1)
{
  qword_102485B38 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLFitnessMachineNotifierSilo"];
}

uint64_t sub_10117D5A8(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10117DFC8;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_102485B58 != -1) {
    dispatch_once(&qword_102485B58, block);
  }
  return qword_10248B378;
}

__n128 sub_10117D850(uint64_t a1, uint64_t a2)
{
  if (*(double *)(a2 + 112) != 1.79769313e308 && *(double *)(a2 + 120) != 1.79769313e308)
  {
    *(void *)&long long v21 = sub_100C397CC(a2);
    *((void *)&v21 + 1) = v4;
    sub_100C397E4((uint64_t *)(a1 + 304), (double *)&v21);
    *(void *)(a2 + 112) = v5;
  }
  if (*(double *)(a2 + 64) != 1.79769313e308 && *(double *)(a2 + 72) != 1.79769313e308)
  {
    *(void *)&long long v21 = sub_100C397D4(a2);
    *((void *)&v21 + 1) = v6;
    sub_100C398C8(a1 + 304, (double *)&v21);
    *(void *)(a2 + 64) = v7;
  }
  if (*(double *)(a2 + 88) != 1.79769313e308 && *(double *)(a2 + 96) != 1.79769313e308)
  {
    *(void *)&long long v21 = sub_100C397DC(a2);
    *((void *)&v21 + 1) = v8;
    sub_100C398D0(a1 + 304, (double *)&v21);
    *(void *)(a2 + 88) = v9;
  }
  long long v10 = *(_OWORD *)(a2 + 144);
  long long v29 = *(_OWORD *)(a2 + 128);
  long long v30 = v10;
  uint64_t v31 = *(void *)(a2 + 160);
  long long v11 = *(_OWORD *)(a2 + 80);
  long long v25 = *(_OWORD *)(a2 + 64);
  long long v26 = v11;
  long long v12 = *(_OWORD *)(a2 + 112);
  long long v27 = *(_OWORD *)(a2 + 96);
  long long v28 = v12;
  long long v13 = *(_OWORD *)(a2 + 16);
  long long v21 = *(_OWORD *)a2;
  long long v22 = v13;
  __n128 v14 = *(__n128 *)(a2 + 48);
  long long v23 = *(_OWORD *)(a2 + 32);
  __n128 v24 = v14;
  sub_10117E26C((uint64_t)&v21, a1 + 112);
  if (BYTE4(v31))
  {
    int v20 = 0;
    (*(void (**)(uint64_t, int *, long long *, void, uint64_t, void))(*(void *)a1 + 152))(a1, &v20, &v21, 0, 0xFFFFFFFFLL, 0);
  }
  long long v15 = v30;
  *(_OWORD *)(a1 + 240) = v29;
  *(_OWORD *)(a1 + 256) = v15;
  *(void *)(a1 + 272) = v31;
  long long v16 = v26;
  *(_OWORD *)(a1 + 176) = v25;
  *(_OWORD *)(a1 + 192) = v16;
  long long v17 = v28;
  *(_OWORD *)(a1 + 208) = v27;
  *(_OWORD *)(a1 + 224) = v17;
  long long v18 = v22;
  *(_OWORD *)(a1 + 112) = v21;
  *(_OWORD *)(a1 + 128) = v18;
  __n128 result = v24;
  *(_OWORD *)(a1 + 144) = v23;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

void sub_10117DA50(id a1)
{
  if (sub_10016CCBC())
  {
    sub_100103240();
    if (sub_10010145C()) {
      byte_102485B48 = 1;
    }
  }
}

void sub_10117DA88(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)sub_10117DC30(a1, "CLFitnessMachineNotifier", a2);
  *uint64_t v3 = off_102315428;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  sub_10126C970(v3 + 36, 0);
  *(void *)(a1 + 304) = a1 + 304;
  *(void *)(a1 + 312) = a1 + 304;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = a1 + 328;
  *(void *)(a1 + 336) = a1 + 328;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = a1 + 352;
  *(void *)(a1 + 360) = a1 + 352;
  *(void *)(a1 + 368) = 0;
  sub_1006A564C();
}

void sub_10117DBCC(_Unwind_Exception *a1)
{
  sub_10117DF08(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 296);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  uint64_t v5 = *(void *)(v1 + 280);
  *(void *)(v1 + 280) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  sub_10117DF44(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10117DC30(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_1023155B0;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_10117DCC0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_10117DCDC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102315580);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFitnessMachineNotifier::onMotionStateMediatorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102315580);
    }
    uint64_t v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      long long v15 = "";
      __int16 v16 = 2082;
      long long v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFitnessMachineNotifier::onMotionStateMediatorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  if (*a2 == 2 && !*(void *)(a3 + 16))
  {
    *(void *)(a4 + 244) = 0;
    uint64_t v9 = a4 + 244;
    *(_OWORD *)(v9 - 68) = 0u;
    *(_OWORD *)(v9 - 84) = 0u;
    *(_OWORD *)(v9 - 100) = 0u;
    *(_OWORD *)(v9 - 116) = 0u;
    *(_OWORD *)(v9 - 132) = 0u;
    *(void *)(v9 - 48) = 0;
    *(void *)(v9 - 40) = 0;
    *(void *)(v9 - 24) = 0;
    *(void *)(v9 - 16) = 0;
    *(void *)(v9 + 8) = 0;
    *(void *)(v9 + 16) = 0;
    *(void *)(v9 + 24) = 0x200000000;
    *(unsigned char *)(v9 + 32) = 1;
    *(unsigned char *)(v9 + 35) = 0;
    *(_WORD *)(v9 + 33) = 0;
    *(_DWORD *)(v9 - 52) = -1;
    *(_DWORD *)(v9 - 32) = 0;
    *(_DWORD *)(v9 - 28) = -1;
    *(_DWORD *)(v9 - 8) = 0;
    *(_DWORD *)(v9 - 4) = -1;
  }
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10117DEEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10117DF08(void *a1)
{
  return a1;
}

uint64_t sub_10117DF44(uint64_t a1)
{
  *(void *)a1 = off_1023155B0;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_10117DFC8()
{
}

void sub_10117E014()
{
}

uint64_t sub_10117E038(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10117E0C8;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_102485B68 != -1) {
    dispatch_once(&qword_102485B68, block);
  }
  return byte_102485B60;
}

id sub_10117E0C8(uint64_t a1)
{
  id result = [[[*(id *)(a1 + 32) vendor] isServiceEnabled:@"CLFitnessMachineNotifier"];
  byte_102485B60 = (char)result;
  return result;
}

uint64_t sub_10117E0F8(uint64_t a1)
{
  *(void *)a1 = off_102315428;
  *(unsigned char *)(a1 + 108) = 1;
  id v2 = (void *)(a1 + 304);
  sub_1003B2350((void *)(a1 + 352));
  sub_1003B2350((void *)(a1 + 328));
  sub_1003B2350(v2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 296);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  uint64_t v4 = *(void *)(a1 + 280);
  *(void *)(a1 + 280) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return sub_10117DF44(a1);
}

void sub_10117E1AC(uint64_t a1)
{
  sub_10117E0F8(a1);

  operator delete();
}

uint64_t sub_10117E1E4(uint64_t result)
{
  *(unsigned char *)(result + 108) = 1;
  return result;
}

void *sub_10117E1F0@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

uint64_t sub_10117E26C(uint64_t result, uint64_t a2)
{
  if (*(double *)(result + 72) == 1.79769313e308)
  {
    *(void *)(result + 72) = *(void *)(a2 + 72);
    *(_DWORD *)(result + 80) = *(_DWORD *)(a2 + 80);
  }
  if (*(double *)(result + 96) == 1.79769313e308)
  {
    *(void *)(result + 96) = *(void *)(a2 + 96);
    *(_DWORD *)(result + 104) = *(_DWORD *)(a2 + 104);
  }
  if (*(double *)(result + 120) == 1.79769313e308)
  {
    *(void *)(result + 120) = *(void *)(a2 + 120);
    *(_DWORD *)(result + 128) = *(_DWORD *)(a2 + 128);
  }
  double v2 = *(double *)a2;
  double v3 = *(double *)(result + 8);
  if (*(double *)result >= *(double *)a2 && *(double *)result != 1.79769313e308) {
    double v2 = *(double *)result;
  }
  *(double *)id result = v2;
  double v5 = *(double *)(result + 88);
  if (v5 == 1.79769313e308) {
    double v5 = *(double *)(a2 + 88);
  }
  *(double *)(result + 88) = v5;
  double v6 = *(double *)(result + 112);
  if (v6 == 1.79769313e308) {
    double v6 = *(double *)(a2 + 112);
  }
  *(double *)(result + 112) = v6;
  double v7 = *(double *)(result + 64);
  if (v7 == 1.79769313e308) {
    double v7 = *(double *)(a2 + 64);
  }
  *(double *)(result + 64) = v7;
  double v8 = *(double *)(a2 + 8);
  if (v3 >= v8 && v3 != 1.79769313e308) {
    double v8 = v3;
  }
  *(double *)(result + 8) = v8;
  double v10 = *(double *)(a2 + 16);
  double v11 = *(double *)(result + 16);
  double v12 = *(double *)(result + 24);
  if (v11 >= v10 && v11 != 1.79769313e308) {
    double v10 = *(double *)(result + 16);
  }
  *(double *)(result + 16) = v10;
  double v14 = *(double *)(a2 + 24);
  if (v12 >= v14 && v12 != 1.79769313e308) {
    double v14 = v12;
  }
  *(double *)(result + 24) = v14;
  double v16 = *(double *)(result + 32);
  if (v16 < *(double *)(a2 + 32) || v16 == 1.79769313e308) {
    double v16 = *(double *)(a2 + 32);
  }
  *(double *)(result + 32) = v16;
  uint64_t v18 = *(void *)(a2 + 40);
  uint64_t v19 = *(void *)(result + 40);
  uint64_t v20 = *(void *)(result + 48);
  if (v19 >= v18 && v19 != 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v18 = *(void *)(result + 40);
  }
  *(void *)(result + 40) = v18;
  uint64_t v22 = *(void *)(a2 + 48);
  if (v20 >= v22 && v20 != 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v22 = v20;
  }
  *(void *)(result + 48) = v22;
  uint64_t v24 = *(void *)(result + 56);
  if (v24 < *(void *)(a2 + 56) || v24 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v24 = *(void *)(a2 + 56);
  }
  *(void *)(result + 56) = v24;
  if (*(double *)(result + 136) == 1.79769313e308) {
    *(void *)(result + 136) = *(void *)(a2 + 136);
  }
  if (*(double *)(result + 144) == 1.79769313e308) {
    *(void *)(result + 144) = *(void *)(a2 + 144);
  }
  *(unsigned char *)(result + 164) = 1;
  return result;
}

void sub_10117E410()
{
}

void sub_10117E4CC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_10117E508(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_102315700;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    double v12 = a3;
  }
  else {
    double v12 = (uint64_t *)*a3;
  }
  id v13 = [[[a4 vendor] proxyForService:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12)];
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:[a4 silo]];
  return a1;
}

void sub_10117E5EC(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        uint64_t v9 = (uint64_t *)v4;
      }
      else {
        uint64_t v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)std::string buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102315580);
      }
      double v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        double v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          double v11 = (void *)*v11;
        }
        *(_DWORD *)std::string buf = 136446466;
        uint64_t v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_102315580);
        }
        double v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          double v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        long long v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData>::removeClient(int) [Notification_T = CLFitnessMachineNotifier_Type::Notification, NotificationData_T = CLFitnessMachineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_10117E87C(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_10117E930(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_10117E978(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_10117E9C0(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_10117EA08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_102476970);
}

uint64_t sub_10117EA34(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)char v42 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          uint64_t v24 = (uint64_t *)v18;
        }
        else {
          uint64_t v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          long long v29 = (uint64_t *)v25;
        }
        else {
          long long v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v40 = v26;
        uint64_t v35 = *(void *)(v26 + 56);
        char v36 = *a4;
        *(void *)&buf[0] = &v41;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v36;
        uint64_t v46 = 0;
        memset(buf, 0, sizeof(buf));
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _OWORD *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_101180FE4();
        }
        if (v35) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v40 = a1 + 64;
        char v30 = byte_102476971;
        int v39 = v17;
        *(void *)&buf[0] = &v39;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v30;
        int v39 = *a3;
        *(void *)&buf[0] = &v39;
        uint64_t v31 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        int v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        char v33 = *a4;
        int v39 = *a3;
        *(void *)&buf[0] = &v39;
        __int16 v34 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)&buf[0] = &v41;
        *((unsigned char *)sub_1000EB1B8(v34 + 5, &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v33;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        LODWORD(buf[0]) = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102315580);
  }
  id v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    long long v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v15 = (void *)*v15;
    }
    LODWORD(buf[0]) = 136446466;
    *(void *)((char *)buf + 4) = v15;
    WORD6(buf[0]) = 1026;
    *(_DWORD *)((char *)buf + 14) = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      (uint8_t *)buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102315580);
    }
    int v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v37 = (void *)*v37;
    }
    *(_DWORD *)char v42 = 136446466;
    *(void *)&v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = a2;
    double v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLFitnessMachineNotifier_Type::Notification, NotificationData_T = CLFitnessMachineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v38);
    if (v38 != (char *)buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

BOOL sub_10117EEF8(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102315580);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102315580);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLFitnessMachineNotifier_Type::Notification, NotificationData_T = CLFitnessMachineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_10117F17C(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_102315580);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)std::string buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                uint64_t v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_102315580);
                }
                long long v29 = a1 + 8;
                if (a1[31] < 0) {
                  long long v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  char v30 = buf;
                }
                else {
                  char v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                double v38 = v29;
                __int16 v39 = 2082;
                uint64_t v40 = v30;
                uint64_t v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLFitnessMachineNotifier_Type::Notification, NotificationData_T = CLFitnessMachineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_10117F550(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      BOOL v10 = (uint64_t *)v4;
    }
    else {
      BOOL v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v7 == v3) {
    return 0;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0;
  }
  int v11 = *(long long **)(v7 + 64);
  if (!v11) {
    return 0;
  }
  long long v12 = *v11;
  long long v13 = v11[2];
  *(_OWORD *)(a3 + 16) = v11[1];
  *(_OWORD *)(a3 + 32) = v13;
  *(_OWORD *)a3 = v12;
  long long v14 = v11[3];
  long long v15 = v11[4];
  long long v16 = v11[6];
  *(_OWORD *)(a3 + 80) = v11[5];
  *(_OWORD *)(a3 + 96) = v16;
  *(_OWORD *)(a3 + 48) = v14;
  *(_OWORD *)(a3 + 64) = v15;
  long long v17 = v11[7];
  long long v18 = v11[8];
  long long v19 = v11[9];
  *(void *)(a3 + 160) = *((void *)v11 + 20);
  *(_OWORD *)(a3 + 128) = v18;
  *(_OWORD *)(a3 + 144) = v19;
  *(_OWORD *)(a3 + 112) = v17;
  return 1;
}

uint64_t sub_10117F5E0(uint64_t a1, int *a2, uint64_t a3)
{
  int v6 = (char *)operator new(0xC0uLL);
  long long v7 = *(_OWORD *)(a3 + 96);
  *(_OWORD *)(v6 + 136) = *(_OWORD *)(a3 + 112);
  long long v8 = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(v6 + 152) = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(v6 + 168) = v8;
  long long v9 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v6 + 72) = *(_OWORD *)(a3 + 48);
  long long v10 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v6 + 88) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v6 + 104) = v10;
  *(_OWORD *)(v6 + 120) = v7;
  long long v11 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)a3;
  *(_OWORD *)(v6 + 40) = v11;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = off_102315690;
  *((void *)v6 + 23) = *(void *)(a3 + 160);
  *(_OWORD *)(v6 + 56) = v9;
  int v15 = *a2;
  long long v16 = &v15;
  long long v12 = sub_10044715C((uint64_t **)(a1 + 56), &v15, (uint64_t)&unk_101D0B290, &v16);
  long long v13 = (std::__shared_weak_count *)v12[9];
  v12[8] = (uint64_t *)(v6 + 24);
  v12[9] = (uint64_t *)v6;
  if (v13) {
    sub_1000DB0A0(v13);
  }
  return 1;
}

void sub_10117F6D0(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10117F6E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_10117F750(uint64_t a1, unsigned int *a2, uint64_t a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  long long v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102315580);
  }
  long long v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    long long v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v10 = (void *)*v10;
    }
    long long v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)std::string buf = 68289794;
    int v27 = 0;
    __int16 v28 = 2082;
    *(void *)long long v29 = "";
    *(_WORD *)&v29[8] = 2082;
    *(void *)&v29[10] = "activity";
    __int16 v30 = 2082;
    uint64_t v31 = v10;
    __int16 v32 = 2050;
    char v33 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  long long v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      long long v17 = (uint64_t *)v12;
    }
    else {
      long long v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      long long v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    __int16 v34 = v35;
    memset(v35, 0, sizeof(v35));
    char v36 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v34);
    long long v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v33) {
      sub_1000DB0A0(v33);
    }
    sub_1000F5BB0((uint64_t)&v28, *(void **)&v29[6]);
    if (v36) {
      sub_1000DB0A0(v36);
    }
    sub_1000F5BB0((uint64_t)&v34, v35[0]);
  }
  if (a4)
  {
    long long v18 = (char *)operator new(0xC0uLL);
    long long v19 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(v18 + 24) = *(_OWORD *)a3;
    *(_OWORD *)(v18 + 40) = v19;
    long long v20 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(v18 + 56) = *(_OWORD *)(a3 + 32);
    long long v21 = *(_OWORD *)(a3 + 112);
    *(_OWORD *)(v18 + 120) = *(_OWORD *)(a3 + 96);
    long long v22 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(v18 + 104) = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(v18 + 88) = v22;
    *(_OWORD *)(v18 + 72) = v20;
    long long v23 = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(v18 + 168) = *(_OWORD *)(a3 + 144);
    *(_OWORD *)(v18 + 152) = v23;
    *((void *)v18 + 1) = 0;
    *((void *)v18 + 2) = 0;
    *(void *)long long v18 = off_102315690;
    *((void *)v18 + 23) = *(void *)(a3 + 160);
    *(_OWORD *)(v18 + 136) = v21;
    BOOL v24 = (std::__shared_weak_count *)v14[9];
    v14[8] = (uint64_t *)(v18 + 24);
    v14[9] = (uint64_t *)v18;
    if (!v24) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  BOOL v24 = (std::__shared_weak_count *)v14[9];
  v14[8] = 0;
  v14[9] = 0;
  if (v24) {
LABEL_27:
  }
    sub_1000DB0A0(v24);
LABEL_28:
  if (v14[7]) {
    sub_101180424();
  }
  os_activity_scope_leave(&state);
}

void sub_10117FD70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_10117FDBC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102315580);
    }
    double v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)std::string buf = 136315138;
      long long v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102315580);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData>::listClients() [Notification_T = CLFitnessMachineNotifier_Type::Notification, NotificationData_T = CLFitnessMachineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102315580);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)std::string buf = 136315394;
      long long v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102315580);
      }
      long long v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData>::listClients() [Notification_T = CLFitnessMachineNotifier_Type::Notification, NotificationData_T = CLFitnessMachineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    long long v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        long long v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_102315580);
            }
            long long v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              long long v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                long long v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)std::string buf = 136315650;
              long long v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_102315580);
              }
              long long v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData>::listClients() [Notification_T = CLFitnessMachineNotifier_Type::Notification, NotificationData_T = CLFitnessMachineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            long long v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                long long v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                long long v9 = v15;
              }
              while (!v16);
            }
            long long v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        long long v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            long long v19 = v18;
            long long v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            long long v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            long long v8 = v19;
          }
          while (!v16);
        }
        long long v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_10118036C(uint64_t a1)
{
  sub_101180F74(a1);

  operator delete();
}

id sub_1011803A4(uint64_t a1, int a2, void *a3)
{
  id result = sub_101180A7C(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_1011803F4(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101180424()
{
}

void sub_1011804F8(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      long long v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          int v12 = (uint64_t *)v4;
        }
        else {
          int v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          long long v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        uint64_t v49 = v9;
        id v13 = sub_101180A7C(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        long long v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            long long v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                long long v22 = (uint64_t *)v17;
              }
              else {
                long long v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                long long v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              int v48 = v19;
              sub_1011808E8(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              long long v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  __int16 v32 = (uint64_t *)v27;
                }
                else {
                  __int16 v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  long long v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              uint64_t v49 = v29;
              uint64_t v34 = v29[6];
              long long v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                uint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    uint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      long long v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      long long v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      long long v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      uint64_t v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              int v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_102315580);
              }
              BOOL v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)std::string buf = 136446466;
                uint64_t v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_102315580);
                }
                uint64_t v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  uint64_t v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                std::string::size_type v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                uint64_t v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLFitnessMachineNotifier_Type::Notification, CLFitnessMachineNotifier_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLFitnessMachineNotifier_Type::Notification, NotificationData_T = CLFitnessMachineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_1011808E8(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_101180A7C(a4);
    uint64_t v10 = *(void *)a3 + 80;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40);
    long long v14 = (int *)(*(void *)a2 + 32);
    int v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    id result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4, v13];
    }
  }
  return result;
}

void sub_1011809E0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102315690;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101180A00(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102315690;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_101180A5C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

id sub_101180A7C(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    return sub_101180B18(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      return sub_101180CD4(a1);
    }
    else
    {
      return 0;
    }
  }
}

id sub_101180B18(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_101180EBC((uint64_t)&v8, a1);
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_1023156D0);
    }
    uint64_t v3 = qword_102418F98;
    if (!os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)std::string buf = 134218498;
    id v10 = v2;
    __int16 v11 = 2048;
    uint64_t v12 = 0;
    __int16 v13 = 2080;
    unint64_t v14 = 0x8000000101DAB069 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v4 = v3;
    os_log_type_t v5 = OS_LOG_TYPE_ERROR;
  }
  else
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_1023156D0);
    }
    uint64_t v7 = qword_102418F98;
    if (!os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT)) {
      return 0;
    }
    *(_DWORD *)std::string buf = 134218498;
    id v10 = v2;
    __int16 v11 = 2048;
    uint64_t v12 = 0;
    __int16 v13 = 2080;
    unint64_t v14 = 0x8000000101DAB069 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v4 = v7;
    os_log_type_t v5 = OS_LOG_TYPE_FAULT;
  }
  _os_log_impl((void *)&_mh_execute_header, v4, v5, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  return 0;
}

id sub_101180CD4(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1023156D0);
      }
      uint64_t v3 = qword_102418F98;
      if (!os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      int v8 = 134218498;
      id v9 = v2;
      __int16 v10 = 2048;
      uint64_t v11 = 0;
      __int16 v12 = 2080;
      unint64_t v13 = 0x8000000101DAB069 & 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v4 = v3;
      os_log_type_t v5 = OS_LOG_TYPE_ERROR;
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1023156D0);
      }
      uint64_t v7 = qword_102418F98;
      if (!os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT)) {
        return 0;
      }
      int v8 = 134218498;
      id v9 = v2;
      __int16 v10 = 2048;
      uint64_t v11 = 0;
      __int16 v12 = 2080;
      unint64_t v13 = 0x8000000101DAB069 & 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v4 = v7;
      os_log_type_t v5 = OS_LOG_TYPE_FAULT;
    }
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", (uint8_t *)&v8, 0x20u);
    return 0;
  }

  return [a1 cppObjectPtr];
}

id sub_101180EBC(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_102394310))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)168) {
      sub_101AA47AC();
    }
    [a2 setCppObjectPtr:[objc_msgSend(objc_msgSend(a2, "serialized"), "bytes") bytes]];
  }

  return [a2 cppObjectPtr];
}

void sub_101180F44(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_101180F74(uint64_t a1)
{
  *(void *)a1 = off_102315700;
  id v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  id *v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_101180FE4()
{
}

uint64_t sub_1011810B8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

uint64_t sub_1011810D8()
{
  sub_100134750(qword_102485B20, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102485B20, (void *)&_mh_execute_header);
}

uint64_t sub_101181138(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, void *a7, uint64_t a8, uint64_t a9)
{
  __int16 v12 = (std::__shared_weak_count *)a4[1];
  uint64_t v30 = *a4;
  BOOL v31 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v13 = (std::__shared_weak_count *)a5[1];
  uint64_t v28 = *a5;
  long long v29 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v14 = (std::__shared_weak_count *)a6[1];
  uint64_t v26 = *a6;
  uint64_t v27 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v25[0] = xmmword_102485B70;
  v25[1] = unk_102485B80;
  void v25[2] = xmmword_102485B90;
  sub_100D6AEB4(a1, a2, 0, &v30, &v28, &v26, a9, a8, v25);
  if (v27) {
    sub_1000DB0A0(v27);
  }
  if (v29) {
    sub_1000DB0A0(v29);
  }
  if (v31) {
    sub_1000DB0A0(v31);
  }
  *(void *)a1 = off_102315728;
  *(void *)(a1 + 352) = *a3;
  uint64_t v15 = a3[1];
  *(void *)(a1 + 360) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 368) = *a7;
  uint64_t v16 = a7[1];
  *(void *)(a1 + 376) = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 392) = 500;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(_DWORD *)(a1 + 415) = 0;
  *(void *)(a1 + 424) = objc_opt_new();
  *(void *)(a1 + 432) = objc_opt_new();
  *(void *)(a1 + 440) = objc_opt_new();
  *(void *)(a1 + 448) = objc_opt_new();
  *(void *)(a1 + 456) = objc_opt_new();
  sub_1000C7F88(buf);
  uint64_t v17 = (int *)(a1 + 392);
  char v18 = sub_10006EF84(*(uint64_t *)buf, "MaxHarvestCells", (_DWORD *)(a1 + 392));
  if (*(void *)v33) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v33);
  }
  if ((v18 & 1) == 0) {
    *uint64_t v17 = 500;
  }
  char v24 = 0;
  sub_1000C7F88(buf);
  sub_1000D2988(*(uint64_t *)buf, "EnableCellHarvesterLegacy", (BOOL *)&v24);
  if (*(void *)v33) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v33);
  }
  sub_1000C7F88(buf);
  sub_1000D2988(*(uint64_t *)buf, "EnableCellHarvesterLegacyForMultiSim", (BOOL *)(a1 + 418));
  if (*(void *)v33) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v33);
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102315808);
  }
  long long v19 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = *(unsigned __int8 *)(a1 + 418);
    *(void *)std::string buf = 68289538;
    *(_WORD *)uint64_t v33 = 2082;
    *(void *)&void v33[2] = "";
    __int16 v34 = 1026;
    *(_DWORD *)uint64_t v35 = v24;
    *(_WORD *)&v35[4] = 1026;
    *(_DWORD *)&v35[6] = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Defaults #legacy for CellHarvesterLegacy\", \"EnableCellHarvesterLegacy\":%{public}hhd, \"EnableCellHarvesterLegacyForMultiSim\":%{public}hhd}", buf, 0x1Eu);
  }
  sub_1012B77A8((unsigned char *)(a1 + 280), v24);
  *(void *)(a1 + 384) = [*(id *)(a1 + 72) classifyingStoreForHarvester:0];
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102315808);
  }
  BOOL v21 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v22 = *v17;
    *(void *)std::string buf = 68289539;
    *(_WORD *)uint64_t v33 = 2082;
    *(void *)&void v33[2] = "";
    __int16 v34 = 2050;
    *(void *)uint64_t v35 = 0;
    *(_WORD *)&v35[8] = 2049;
    uint64_t v36 = v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"construction\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"maxHarvestPointCount\":%{private}lu}", buf, 0x26u);
  }
  return a1;
}

void sub_101181500(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v2 - 88);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  os_log_type_t v5 = *(std::__shared_weak_count **)(v1 + 376);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  int v6 = *(std::__shared_weak_count **)(v1 + 360);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  sub_1003C0998(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101181584(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, void *a7, uint64_t a8, uint64_t a9)
{
  return sub_101181138(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_101181590(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 456);
}

id sub_1011815E4(uint64_t a1)
{
  return [*(id *)(a1 + 384) count];
}

uint64_t sub_1011815EC(uint64_t a1, uint64_t a2)
{
  sub_1000E9354(v9);
  if (sub_100012960(a2, "Cell", v9)) {
    sub_1012B77D8(a1 + 280, (uint64_t)v9);
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102315808);
  }
  uint64_t v4 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    sub_1012B7520();
    if (v8 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)std::string buf = 68289539;
    int v11 = 0;
    __int16 v12 = 2082;
    unint64_t v13 = "";
    __int16 v14 = 2050;
    uint64_t v15 = 0;
    __int16 v16 = 2081;
    uint64_t v17 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"harvest-apply-rules\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"rules\":%{private, location:escape_only}s}", buf, 0x26u);
    if (v8 < 0) {
      operator delete(__p);
    }
  }
  return sub_10013F3C4(v9);
}

void sub_10118174C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_10118176C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102485BA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102485BA8))
  {
    sub_100103240();
    if (sub_1001073D0())
    {
      sub_100103240();
      unsigned int v1 = (sub_1001073D0() >> 3) & 1;
    }
    else
    {
      LOBYTE(v1) = 0;
    }
    byte_102485BA0 = v1;
    __cxa_guard_release(&qword_102485BA8);
  }
  return byte_102485BA0;
}

void sub_1011817E4(_Unwind_Exception *a1)
{
}

void sub_1011817FC()
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102315808);
  }
  int v0 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    v1[0] = 68289282;
    v1[1] = 0;
    __int16 v2 = 2082;
    uint64_t v3 = "";
    __int16 v4 = 2050;
    uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"uploading is disabled\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v1, 0x1Cu);
  }
}

uint64_t sub_1011818E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = sub_10012FD50(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 24))(v2, v3, 5);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = sub_10012FD50(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 24))(v4, v5, 2);
  return 1;
}

uint64_t sub_101181978(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = sub_10012FD50(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 32))(v2, v3, 5);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = sub_10012FD50(a1);
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 32);

  return v6(v4, v5, 2);
}

uint64_t sub_101181A18(uint64_t a1)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 352) + 16))(*(void *)(a1 + 352));
  int v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 224))(*(void *)(a1 + 56));
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102315808);
  }
  uint64_t v3 = (v6 != 1) & ~v2;
  uint64_t v4 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 68290307;
    __int16 v9 = 2082;
    int v8 = 0;
    __int16 v10 = "";
    __int16 v11 = 2050;
    uint64_t v12 = 0;
    __int16 v13 = 1025;
    int v14 = (v6 != 1) & ~v2;
    __int16 v15 = 1025;
    int v16 = v2;
    __int16 v17 = 1040;
    int v18 = 4;
    __int16 v19 = 2097;
    int v20 = &v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"cellHarvestingAllowed\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"isOkToHarvestCells\":%{private}hhd, \"hasActiveOrHeldCalls\":%{private}hhd, \"transmitStatus\":%{private, location:CLTelephonyService_Type::CellTransmitStatus}.*P}", buf, 0x38u);
  }
  return v3;
}

void sub_101181BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v6 = *(double *)(a4 + 76);
  double v7 = *(double *)(a1 + 400);
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102315808);
  }
  double v8 = v6 - v7;
  __int16 v9 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    sub_1012B77B0(a1 + 280);
    int v10 = *(unsigned __int8 *)(a1 + 417);
    int v15 = 68290050;
    __int16 v17 = 2082;
    int v16 = 0;
    int v18 = "";
    __int16 v19 = 2050;
    uint64_t v20 = 0;
    __int16 v21 = 2050;
    double v22 = v8;
    __int16 v23 = 2050;
    uint64_t v24 = v11;
    __int16 v25 = 1026;
    int v26 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#legacy onGpsNotification\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"timeSinceLastHarvest_s\":\"%{public}.09f\", \"harvestInterval_s\":\"%{public}.09f\", \"cellMonitoringEnabled\":%{public}hhd}", (uint8_t *)&v15, 0x36u);
  }
  if (*(unsigned char *)(a1 + 417))
  {
    sub_1012B77B0(a1 + 280);
    if (v8 >= v12)
    {
      unsigned int v13 = (*(uint64_t (**)(void))(**(void **)(a1 + 352) + 24))(*(void *)(a1 + 352));
      if (v13 <= 7)
      {
        if (((1 << v13) & 0xF0) != 0)
        {
          sub_101181DF0(a1, (_OWORD *)a4);
        }
        else if (((1 << v13) & 5) != 0)
        {
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_102315808);
          }
          int v14 = qword_102419568;
          if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
          {
            int v15 = 68289282;
            int v16 = 0;
            __int16 v17 = 2082;
            int v18 = "";
            __int16 v19 = 2050;
            uint64_t v20 = 0;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"not harvesting since the device is in a transient state.\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v15, 0x1Cu);
          }
        }
        else
        {
          sub_101181F8C(a1, (_OWORD *)a4);
        }
      }
    }
  }
}

void sub_101181DF0(uint64_t a1, _OWORD *a2)
{
  if (sub_101181A18(a1))
  {
    unsigned int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 352) + 48))(*(void *)(a1 + 352));
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 352) + 136))(*(void *)(a1 + 352))) {
      *(unsigned char *)(a1 + 416) = 1;
    }
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102315808);
    }
    uint64_t v5 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      v7[0] = 68289539;
      v7[1] = 0;
      __int16 v8 = 2082;
      __int16 v9 = "";
      __int16 v10 = 2050;
      uint64_t v11 = 0;
      __int16 v12 = 2049;
      uint64_t v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"harvestCell\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"rat\":%{private, location:CLTelephonyService_Type::RadioAccessTechnology}lld}", (uint8_t *)v7, 0x26u);
    }
    BOOL v6 = v4 > 9 || ((1 << v4) & 0x287) == 0;
    if (!v6 && !*(unsigned char *)(a1 + 416)) {
      sub_101186404(a1, a2);
    }
  }
}

void sub_101181F8C(uint64_t a1, _OWORD *a2)
{
  if (sub_101181A18(a1))
  {
    id v4 = objc_alloc_init((Class)CLPCellOutOfServiceInfo);
    id v5 = objc_alloc((Class)CLPLocation);
    long long v6 = a2[5];
    v44[4] = a2[4];
    v44[5] = v6;
    long long v7 = a2[3];
    v44[2] = a2[2];
    v44[3] = v7;
    *(_OWORD *)((char *)v45 + 12) = *(_OWORD *)((char *)a2 + 140);
    long long v8 = a2[8];
    long long v9 = a2[6];
    v44[7] = a2[7];
    v45[0] = v8;
    v44[6] = v9;
    long long v10 = a2[1];
    v44[0] = *a2;
    v44[1] = v10;
    uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 80))(*(void *)(a1 + 56));
    v42[0] = *(_OWORD *)v11;
    long long v13 = *(_OWORD *)(v11 + 16);
    long long v12 = *(_OWORD *)(v11 + 32);
    long long v14 = *(_OWORD *)(v11 + 64);
    v42[3] = *(_OWORD *)(v11 + 48);
    v42[4] = v14;
    v42[1] = v13;
    long long v15 = *(_OWORD *)(v11 + 80);
    long long v16 = *(_OWORD *)(v11 + 96);
    long long v17 = *(_OWORD *)(v11 + 112);
    uint64_t v43 = *(void *)(v11 + 128);
    v42[6] = v16;
    v42[7] = v17;
    v42[5] = v15;
    v42[2] = v12;
    uint64_t v18 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 88))(*(void *)(a1 + 56));
    v40[0] = *(_OWORD *)v18;
    long long v19 = *(_OWORD *)(v18 + 16);
    long long v20 = *(_OWORD *)(v18 + 32);
    long long v21 = *(_OWORD *)(v18 + 64);
    v40[3] = *(_OWORD *)(v18 + 48);
    v40[4] = v21;
    v40[1] = v19;
    v40[2] = v20;
    long long v22 = *(_OWORD *)(v18 + 80);
    long long v23 = *(_OWORD *)(v18 + 96);
    long long v24 = *(_OWORD *)(v18 + 112);
    uint64_t v41 = *(void *)(v18 + 128);
    v40[6] = v23;
    v40[7] = v24;
    v40[5] = v22;
    uint64_t v25 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 96))(*(void *)(a1 + 56));
    v38[0] = *(_OWORD *)v25;
    long long v26 = *(_OWORD *)(v25 + 64);
    long long v28 = *(_OWORD *)(v25 + 16);
    long long v27 = *(_OWORD *)(v25 + 32);
    v38[3] = *(_OWORD *)(v25 + 48);
    v38[4] = v26;
    v38[1] = v28;
    v38[2] = v27;
    long long v30 = *(_OWORD *)(v25 + 96);
    long long v29 = *(_OWORD *)(v25 + 112);
    long long v31 = *(_OWORD *)(v25 + 80);
    uint64_t v39 = *(void *)(v25 + 128);
    v38[7] = v29;
    v38[5] = v31;
    v38[6] = v30;
    uint64_t v32 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 216))(*(void *)(a1 + 56));
    id v33 = [v5 initWithDaemonLocation:v44 rawMotionActivity:v42 motionActivity:v40 dominantMotionActivity:v38 vehicleConnected:v32 vehicleConnectionStateChanged:(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 208))(*(void *)(a1 + 56))];
    [v4 setLocation:v33];

    __p[0] = 0;
    __p[1] = 0;
    uint64_t v37 = 0;
    (*(void (**)(void, void **))(**(void **)(a1 + 352) + 96))(*(void *)(a1 + 352), __p);
    if (v37 >= 0) {
      __int16 v34 = __p;
    }
    else {
      __int16 v34 = (void **)__p[0];
    }
    [v4 setServiceProviderName:[NSString stringWithUTF8String:v34]];
    [*(id *)(a1 + 384) writeSecondaryObject:v4 collectedAt:[v4 location] toField:7];
    ++*(_DWORD *)(a1 + 208);
    *(double *)(a1 + 400) = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102315808);
    }
    uint64_t v35 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      uint64_t buf = 68289795;
      __int16 v47 = 2082;
      int v48 = "";
      __int16 v49 = 2050;
      uint64_t v50 = 0;
      __int16 v51 = 2081;
      __int16 v52 = "OutOfService";
      __int16 v53 = 2113;
      id v54 = v4;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s, \"harvest\":%{private, location:escape_only}@}", (uint8_t *)&buf, 0x30u);
    }
    if (SHIBYTE(v37) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_101182370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_101182394(uint64_t a1, uint64_t a2, int *a3, id *a4)
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102315808);
  }
  long long v7 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    CFStringRef v8 = (const __CFString *)sub_1000FA17C(a3);
    sub_1000FECE0(v8, (uint64_t)&__p);
    long long v9 = (v112 & 0x80000000) == 0 ? &__p : (void **)__p;
    int v10 = *(unsigned __int8 *)(a1 + 417);
    *(_DWORD *)uint64_t buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&_OWORD buf[10] = "";
    *(_WORD *)&buf[18] = 2050;
    *(void *)&uint8_t buf[20] = 0;
    *(_WORD *)&unsigned char buf[28] = 2082;
    *(void *)&buf[30] = v9;
    *(_WORD *)&buf[38] = 1026;
    *(_DWORD *)&buf[40] = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#legacy onTelephonyNotification\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"notification\":%{public, location:escape_only}s, \"cellMonitoringEnabled\":%{public}hhd}", buf, 0x2Cu);
    if (SBYTE3(v112) < 0) {
      operator delete(__p);
    }
  }
  uint64_t v11 = (const void *)sub_1000FA17C(a3);
  if (CFEqual(v11, @"kSubscriptionsInUseNotification"))
  {
    id v12 = [*a4 valueForKey:@"kSubscriptionsInUseKey"];
    id v13 = [v12 count];
    BOOL v14 = (unint64_t)v13 >= 2 && *(unsigned char *)(a1 + 418) == 0;
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102315808);
    }
    id v54 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68290050;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(void *)&_OWORD buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(void *)&uint8_t buf[20] = 0;
      *(_WORD *)&unsigned char buf[28] = 2050;
      *(void *)&buf[30] = v13;
      *(_WORD *)&buf[38] = 1026;
      *(_DWORD *)&buf[40] = v12 == 0;
      *(_WORD *)&buf[44] = 1026;
      *(_DWORD *)&buf[46] = v14;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#legacy updated InUseSubscriptions\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"inUseSubCount\":%{public}ld, \"hasError\":%{public}hhd, \"disbaledDueToInvalidSubscriptionCount\":%{public}hhd}", buf, 0x32u);
    }
    BOOL v55 = !v14;
    if (!v12) {
      BOOL v55 = 0;
    }
    *(unsigned char *)(a1 + 417) = v55;
    return;
  }
  if (!*(unsigned char *)(a1 + 417)) {
    return;
  }
  long long v15 = (_OWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 368) + 56))(*(void *)(a1 + 368));
  ++*(_DWORD *)(a1 + 204);
  if ((*(uint64_t (**)(void, _OWORD *))(**(void **)(a1 + 56) + 184))(*(void *)(a1 + 56), v15))
  {
    long long v16 = (const void *)sub_1000FA17C(a3);
    if (CFEqual(v16, kCTCellMonitorUpdateNotification))
    {
      if (!*(unsigned char *)(a1 + 416)) {
        return;
      }
      *(unsigned char *)(a1 + 416) = 0;
      if (!sub_101181A18(a1)) {
        return;
      }
      uint64_t v105 = 0;
      uint64_t v106 = 0;
      uint64_t v107 = 0;
      if (!(*(unsigned int (**)(void, uint64_t *, uint64_t))(**(void **)(a1 + 352) + 64))(*(void *)(a1 + 352), &v105, 1)|| (uint64_t v17 = v105, v95 = v106, v105 == v106))
      {
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_102315808);
        }
        long long v59 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t buf = 68289282;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&_OWORD buf[10] = "";
          *(_WORD *)&buf[18] = 2050;
          *(void *)&uint8_t buf[20] = 0;
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning: could not retrieve current serving cell info\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
        }
      }
      else
      {
        uint64_t v102 = 0;
        unint64_t v103 = 0;
        unint64_t v104 = 0;
        uint64_t v99 = 0;
        unint64_t v100 = 0;
        unint64_t v101 = 0;
        do
        {
          *(_OWORD *)uint64_t buf = *(_OWORD *)v17;
          long long v18 = *(_OWORD *)(v17 + 16);
          long long v19 = *(_OWORD *)(v17 + 32);
          long long v20 = *(_OWORD *)(v17 + 48);
          *(_OWORD *)&buf[60] = *(_OWORD *)(v17 + 60);
          *(_OWORD *)&buf[32] = v19;
          *(_OWORD *)&buf[48] = v20;
          *(_OWORD *)&uint8_t buf[16] = v18;
          int v116 = *(_DWORD *)(v17 + 80);
          __int16 v118 = 0;
          uint64_t v119 = 0;
          double v117 = 0;
          sub_10010F834(&v117, *(const void **)(v17 + 88), *(void *)(v17 + 96), (uint64_t)(*(void *)(v17 + 96) - *(void *)(v17 + 88)) >> 2);
          long long v120 = *(_OWORD *)(v17 + 112);
          long long v21 = *(_OWORD *)(v17 + 128);
          long long v22 = *(_OWORD *)(v17 + 144);
          long long v23 = *(_OWORD *)(v17 + 176);
          long long v123 = *(_OWORD *)(v17 + 160);
          long long v124 = v23;
          long long v121 = v21;
          long long v122 = v22;
          long long v24 = *(_OWORD *)(v17 + 192);
          long long v25 = *(_OWORD *)(v17 + 208);
          long long v26 = *(_OWORD *)(v17 + 240);
          long long v127 = *(_OWORD *)(v17 + 224);
          long long v128 = v26;
          long long v125 = v24;
          long long v126 = v25;
          long long v27 = *(_OWORD *)(v17 + 256);
          long long v28 = *(_OWORD *)(v17 + 272);
          long long v29 = *(_OWORD *)(v17 + 288);
          *(_OWORD *)((char *)v131 + 12) = *(_OWORD *)(v17 + 300);
          long long v130 = v28;
          v131[0] = v29;
          long long v129 = v27;
          if (*(char *)(v17 + 343) < 0)
          {
            sub_1000DC48C(&v132, *(void **)(v17 + 320), *(void *)(v17 + 328));
          }
          else
          {
            long long v30 = *(_OWORD *)(v17 + 320);
            uint64_t v133 = *(void *)(v17 + 336);
            long long v132 = v30;
          }
          long long v31 = *(_OWORD *)(v17 + 344);
          long long v32 = *(_OWORD *)(v17 + 376);
          long long v135 = *(_OWORD *)(v17 + 360);
          long long v136 = v32;
          long long v134 = v31;
          long long v33 = *(_OWORD *)(v17 + 392);
          long long v34 = *(_OWORD *)(v17 + 408);
          long long v35 = *(_OWORD *)(v17 + 440);
          long long v139 = *(_OWORD *)(v17 + 424);
          long long v140 = v35;
          long long v137 = v33;
          long long v138 = v34;
          long long v36 = *(_OWORD *)(v17 + 456);
          long long v37 = *(_OWORD *)(v17 + 472);
          long long v38 = *(_OWORD *)(v17 + 488);
          int v144 = *(_DWORD *)(v17 + 504);
          long long v142 = v37;
          long long v143 = v38;
          long long v141 = v36;
          long long v39 = *(_OWORD *)(v17 + 512);
          long long v40 = *(_OWORD *)(v17 + 528);
          long long v41 = *(_OWORD *)(v17 + 560);
          long long v147 = *(_OWORD *)(v17 + 544);
          long long v148 = v41;
          long long v145 = v39;
          long long v146 = v40;
          long long v42 = *(_OWORD *)(v17 + 576);
          long long v43 = *(_OWORD *)(v17 + 592);
          long long v44 = *(_OWORD *)(v17 + 624);
          long long v151 = *(_OWORD *)(v17 + 608);
          long long v152 = v44;
          long long v149 = v42;
          long long v150 = v43;
          long long v45 = *(_OWORD *)(v17 + 640);
          long long v46 = *(_OWORD *)(v17 + 656);
          long long v47 = *(_OWORD *)(v17 + 672);
          int v156 = *(_DWORD *)(v17 + 688);
          long long v154 = v46;
          long long v155 = v47;
          long long v153 = v45;
          if (*(_DWORD *)&buf[4])
          {
            if (*(_DWORD *)&buf[4] == 1)
            {
              unint64_t v48 = v100;
              if (v100 >= v101)
              {
                uint64_t v49 = sub_1005630D0(&v99, (uint64_t)buf);
              }
              else
              {
                sub_1000FC2C4((uint64_t)&v101, v100, (uint64_t)buf);
                uint64_t v49 = v48 + 696;
              }
              unint64_t v100 = v49;
            }
            else
            {
              if (qword_102419560 != -1) {
                dispatch_once(&qword_102419560, &stru_102315808);
              }
              __int16 v52 = qword_102419568;
              if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_FAULT))
              {
                long long __p = (void *)68289539;
                __int16 v109 = 2082;
                __int16 v110 = "";
                __int16 v111 = 2050;
                uint64_t v112 = 0;
                __int16 v113 = 1025;
                LODWORD(v114) = *(_DWORD *)&buf[4];
                _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unexpected cell type\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"cellType\":%{private}d}", (uint8_t *)&__p, 0x22u);
                if (qword_102419560 != -1) {
                  dispatch_once(&qword_102419560, &stru_102315808);
                }
              }
              __int16 v53 = qword_102419568;
              if (os_signpost_enabled((os_log_t)qword_102419568))
              {
                long long __p = (void *)68289539;
                __int16 v109 = 2082;
                __int16 v110 = "";
                __int16 v111 = 2050;
                uint64_t v112 = 0;
                __int16 v113 = 1025;
                LODWORD(v114) = *(_DWORD *)&buf[4];
                _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v53, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unexpected cell type", "{\"msg%{public}.0s\":\"Unexpected cell type\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"cellType\":%{private}d}", (uint8_t *)&__p, 0x22u);
              }
            }
          }
          else
          {
            unint64_t v50 = v103;
            if (v103 >= v104)
            {
              uint64_t v51 = sub_1005630D0(&v102, (uint64_t)buf);
            }
            else
            {
              sub_1000FC2C4((uint64_t)&v104, v103, (uint64_t)buf);
              uint64_t v51 = v50 + 696;
            }
            unint64_t v103 = v51;
          }
          if (SHIBYTE(v133) < 0) {
            operator delete((void *)v132);
          }
          if (v117)
          {
            __int16 v118 = v117;
            operator delete(v117);
          }
          v17 += 696;
        }
        while (v17 != v95);
        uint64_t v60 = v102;
        unint64_t v96 = v103;
        while (v60 != v96)
        {
          *(_OWORD *)uint64_t buf = *(_OWORD *)v60;
          long long v61 = *(_OWORD *)(v60 + 16);
          long long v62 = *(_OWORD *)(v60 + 32);
          long long v63 = *(_OWORD *)(v60 + 48);
          *(_OWORD *)&buf[60] = *(_OWORD *)(v60 + 60);
          *(_OWORD *)&buf[32] = v62;
          *(_OWORD *)&buf[48] = v63;
          *(_OWORD *)&uint8_t buf[16] = v61;
          int v116 = *(_DWORD *)(v60 + 80);
          __int16 v118 = 0;
          uint64_t v119 = 0;
          double v117 = 0;
          sub_10010F834(&v117, *(const void **)(v60 + 88), *(void *)(v60 + 96), (uint64_t)(*(void *)(v60 + 96) - *(void *)(v60 + 88)) >> 2);
          long long v120 = *(_OWORD *)(v60 + 112);
          long long v64 = *(_OWORD *)(v60 + 128);
          long long v65 = *(_OWORD *)(v60 + 144);
          long long v66 = *(_OWORD *)(v60 + 176);
          long long v123 = *(_OWORD *)(v60 + 160);
          long long v124 = v66;
          long long v121 = v64;
          long long v122 = v65;
          long long v67 = *(_OWORD *)(v60 + 192);
          long long v68 = *(_OWORD *)(v60 + 208);
          long long v69 = *(_OWORD *)(v60 + 240);
          long long v127 = *(_OWORD *)(v60 + 224);
          long long v128 = v69;
          long long v125 = v67;
          long long v126 = v68;
          long long v70 = *(_OWORD *)(v60 + 256);
          long long v71 = *(_OWORD *)(v60 + 272);
          long long v72 = *(_OWORD *)(v60 + 288);
          *(_OWORD *)((char *)v131 + 12) = *(_OWORD *)(v60 + 300);
          long long v130 = v71;
          v131[0] = v72;
          long long v129 = v70;
          if (*(char *)(v60 + 343) < 0)
          {
            sub_1000DC48C(&v132, *(void **)(v60 + 320), *(void *)(v60 + 328));
          }
          else
          {
            long long v73 = *(_OWORD *)(v60 + 320);
            uint64_t v133 = *(void *)(v60 + 336);
            long long v132 = v73;
          }
          long long v74 = *(_OWORD *)(v60 + 344);
          long long v75 = *(_OWORD *)(v60 + 376);
          long long v135 = *(_OWORD *)(v60 + 360);
          long long v136 = v75;
          long long v134 = v74;
          long long v76 = *(_OWORD *)(v60 + 392);
          long long v77 = *(_OWORD *)(v60 + 408);
          long long v78 = *(_OWORD *)(v60 + 440);
          long long v139 = *(_OWORD *)(v60 + 424);
          long long v140 = v78;
          long long v137 = v76;
          long long v138 = v77;
          long long v79 = *(_OWORD *)(v60 + 456);
          long long v80 = *(_OWORD *)(v60 + 472);
          long long v81 = *(_OWORD *)(v60 + 488);
          int v144 = *(_DWORD *)(v60 + 504);
          long long v142 = v80;
          long long v143 = v81;
          long long v141 = v79;
          long long v82 = *(_OWORD *)(v60 + 512);
          long long v83 = *(_OWORD *)(v60 + 528);
          long long v84 = *(_OWORD *)(v60 + 560);
          long long v147 = *(_OWORD *)(v60 + 544);
          long long v148 = v84;
          long long v145 = v82;
          long long v146 = v83;
          long long v85 = *(_OWORD *)(v60 + 576);
          long long v86 = *(_OWORD *)(v60 + 592);
          long long v87 = *(_OWORD *)(v60 + 624);
          long long v151 = *(_OWORD *)(v60 + 608);
          long long v152 = v87;
          long long v149 = v85;
          long long v150 = v86;
          long long v88 = *(_OWORD *)(v60 + 640);
          long long v89 = *(_OWORD *)(v60 + 656);
          long long v90 = *(_OWORD *)(v60 + 672);
          int v156 = *(_DWORD *)(v60 + 688);
          long long v154 = v89;
          long long v155 = v90;
          long long v153 = v88;
          if (*(_DWORD *)&buf[8] >= 3u)
          {
            if (*(_DWORD *)&buf[8] == 9)
            {
              sub_101183A40(a1, v15, (uint64_t)buf, &v99);
              goto LABEL_76;
            }
            if (*(_DWORD *)&buf[8] != 7)
            {
              if ((*(_DWORD *)&buf[8] - 3) > 2)
              {
                if (*(_DWORD *)&buf[8] == 10)
                {
                  sub_1011858E4(a1, v15, (uint64_t)buf, &v99);
                }
                else if (*(_DWORD *)&buf[8] == 6)
                {
                  sub_101184E64(a1, v15, (uint64_t)buf, &v99);
                }
                else
                {
                  if (qword_102419560 != -1) {
                    dispatch_once(&qword_102419560, &stru_102315808);
                  }
                  log = qword_102419568;
                  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_FAULT))
                  {
                    sub_10142D00C((uint64_t)buf);
                    int v91 = v97;
                    if (v98 < 0) {
                      int v91 = (void **)v97[0];
                    }
                    long long __p = (void *)68289539;
                    __int16 v109 = 2082;
                    __int16 v110 = "";
                    __int16 v111 = 2050;
                    uint64_t v112 = 0;
                    __int16 v113 = 2081;
                    __int16 v114 = v91;
                    _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"failed to harvest cell\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"cell\":%{private, location:escape_only}s}", (uint8_t *)&__p, 0x26u);
                    if (v98 < 0) {
                      operator delete(v97[0]);
                    }
                    if (qword_102419560 != -1) {
                      dispatch_once(&qword_102419560, &stru_102315808);
                    }
                  }
                  loga = qword_102419568;
                  if (os_signpost_enabled((os_log_t)qword_102419568))
                  {
                    sub_10142D00C((uint64_t)buf);
                    __int16 v92 = v97;
                    if (v98 < 0) {
                      __int16 v92 = (void **)v97[0];
                    }
                    long long __p = (void *)68289539;
                    __int16 v109 = 2082;
                    __int16 v110 = "";
                    __int16 v111 = 2050;
                    uint64_t v112 = 0;
                    __int16 v113 = 2081;
                    __int16 v114 = v92;
                    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, loga, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "failed to harvest cell", "{\"msg%{public}.0s\":\"failed to harvest cell\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"cell\":%{private, location:escape_only}s}", (uint8_t *)&__p, 0x26u);
                    if (v98 < 0) {
                      operator delete(v97[0]);
                    }
                  }
                }
              }
              else
              {
                sub_1011843F8(a1, v15, (uint64_t)buf, &v99);
              }
              goto LABEL_76;
            }
          }
          sub_101183080(a1, v15, (uint64_t)buf, &v99);
LABEL_76:
          if (SHIBYTE(v133) < 0) {
            operator delete((void *)v132);
          }
          if (v117)
          {
            __int16 v118 = v117;
            operator delete(v117);
          }
          v60 += 696;
        }
        *(void *)uint64_t buf = &v99;
        sub_1000FA7C8((void ***)buf);
        *(void *)uint64_t buf = &v102;
        sub_1000FA7C8((void ***)buf);
      }
      *(void *)uint64_t buf = &v105;
      sub_1000FA7C8((void ***)buf);
      return;
    }
    int v57 = (const void *)sub_1000FA17C(a3);
    if (CFEqual(v57, kCTRegistrationCellChangedNotification)
      || (long long v58 = (const void *)sub_1000FA17C(a3), CFEqual(v58, kCTRegistrationNewServingNetworkNotification)))
    {
      sub_101181DF0(a1, v15);
    }
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102315808);
    }
    __int16 v56 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&_OWORD buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(void *)&uint8_t buf[20] = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"not harvesting eligible - skipping\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
    }
  }
}

void sub_101182FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47)
{
  a35 = &a20;
  sub_1000FA7C8((void ***)&a35);
  a35 = &a23;
  sub_1000FA7C8((void ***)&a35);
  a35 = &a26;
  sub_1000FA7C8((void ***)&a35);
  _Unwind_Resume(a1);
}

void sub_101183080(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t *a4)
{
  long long v7 = (unsigned int *)sub_1006E6690(a3);
  uint64_t v8 = *(void *)(a1 + 368);
  if (v8 && (*(unsigned int (**)(uint64_t))(*(void *)v8 + 64))(v8))
  {
    (*(void (**)(void, unsigned int *, _OWORD *))(**(void **)(a1 + 352) + 168))(*(void *)(a1 + 352), v7, a2);
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102315808);
    }
    long long v9 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Legacy GSM local harvesting not done", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102315808);
      }
      LOWORD(v67[0]) = 0;
      int v57 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSubHarvesterCellLegacy::harvestCellGSM(const CLDaemonLocation &, const CLCell &, const std::vector<CLCell> &)", "%s\n", v57);
      if (v57 != (char *)buf) {
        free(v57);
      }
    }
  }
  id v10 = objc_alloc_init((Class)CLPCellTowerLocation);
  id v11 = objc_alloc((Class)CLPLocation);
  long long v12 = a2[5];
  v76[4] = a2[4];
  v76[5] = v12;
  long long v13 = a2[3];
  v76[2] = a2[2];
  v76[3] = v13;
  *(_OWORD *)((char *)v77 + 12) = *(_OWORD *)((char *)a2 + 140);
  long long v14 = a2[8];
  long long v15 = a2[6];
  v76[7] = a2[7];
  v77[0] = v14;
  v76[6] = v15;
  long long v16 = a2[1];
  v76[0] = *a2;
  v76[1] = v16;
  uint64_t v17 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 80))(*(void *)(a1 + 56));
  v74[0] = *(_OWORD *)v17;
  long long v18 = *(_OWORD *)(v17 + 16);
  long long v19 = *(_OWORD *)(v17 + 32);
  long long v20 = *(_OWORD *)(v17 + 64);
  v74[3] = *(_OWORD *)(v17 + 48);
  v74[4] = v20;
  v74[1] = v18;
  v74[2] = v19;
  long long v21 = *(_OWORD *)(v17 + 80);
  long long v22 = *(_OWORD *)(v17 + 96);
  long long v23 = *(_OWORD *)(v17 + 112);
  uint64_t v75 = *(void *)(v17 + 128);
  v74[6] = v22;
  v74[7] = v23;
  v74[5] = v21;
  uint64_t v24 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 88))();
  v72[0] = *(_OWORD *)v24;
  long long v25 = *(_OWORD *)(v24 + 16);
  long long v26 = *(_OWORD *)(v24 + 32);
  long long v27 = *(_OWORD *)(v24 + 64);
  v72[3] = *(_OWORD *)(v24 + 48);
  v72[4] = v27;
  v72[1] = v25;
  v72[2] = v26;
  long long v28 = *(_OWORD *)(v24 + 80);
  long long v29 = *(_OWORD *)(v24 + 96);
  long long v30 = *(_OWORD *)(v24 + 112);
  uint64_t v73 = *(void *)(v24 + 128);
  v72[6] = v29;
  v72[7] = v30;
  v72[5] = v28;
  uint64_t v31 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 96))();
  v70[0] = *(_OWORD *)v31;
  long long v32 = *(_OWORD *)(v31 + 16);
  long long v33 = *(_OWORD *)(v31 + 32);
  long long v34 = *(_OWORD *)(v31 + 64);
  v70[3] = *(_OWORD *)(v31 + 48);
  v70[4] = v34;
  v70[1] = v32;
  v70[2] = v33;
  long long v35 = *(_OWORD *)(v31 + 80);
  long long v36 = *(_OWORD *)(v31 + 96);
  long long v37 = *(_OWORD *)(v31 + 112);
  uint64_t v71 = *(void *)(v31 + 128);
  v70[6] = v36;
  v70[7] = v37;
  v70[5] = v35;
  uint64_t v38 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 216))();
  id v39 = [v11 initWithDaemonLocation:v76 rawMotionActivity:v74 motionActivity:v72 dominantMotionActivity:v70 vehicleConnected:v38 vehicleConnectionStateChanged:(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 208))()];
  [v10 setLocation:v39];

  [v10 setMcc:*v7];
  [v10 setMnc:v7[1]];
  [v10 setLac:v7[2]];
  [v10 setCi:v7[3]];
  [v10 setArfcn:v7[4]];
  [v10 setPsc:v7[5]];
  [v10 setRat:(*(uint64_t (**)(void))(**(void **)(a1 + 352) + 48))(*(void *)(a1 + 352))];
  long long v40 = (void *)(a1 + 352);
  [v10 setTransmit:(*(uint64_t (**)(void))(**(void **)(a1 + 352) + 16))(*(void *)(a1 + 352))];
  unsigned int v69 = 0;
  (*(void (**)(void, unsigned int *))(*(void *)*v40 + 112))(*v40, &v69);
  [v10 setRssi:v69];
  v67[0] = 0;
  v67[1] = 0;
  uint64_t v68 = 0;
  (*(void (**)(void, void **))(*(void *)*v40 + 80))(*v40, v67);
  if (v68 >= 0) {
    long long v41 = v67;
  }
  else {
    long long v41 = (void **)v67[0];
  }
  [v10 setOperatorName:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v41)];
  v65[0] = 0;
  v65[1] = 0;
  uint64_t v66 = 0;
  (*(void (**)(void, void **))(**(void **)(a1 + 352) + 96))(*(void *)(a1 + 352), v65);
  if (v66 >= 0) {
    long long v42 = v65;
  }
  else {
    long long v42 = (void **)v65[0];
  }
  [v10 setServiceProviderName:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v42)];
  [v10 setIsLimitedService:(*(unsigned int (**)(void))(**(void **)(a1 + 352) + 24))(*(void *)(a1 + 352)) == 6];
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v64 = 0;
  (*(void (**)(void, void **))(**(void **)(a1 + 352) + 160))(*(void *)(a1 + 352), __p);
  if (v64 >= 0) {
    long long v43 = __p;
  }
  else {
    long long v43 = (void **)__p[0];
  }
  [v10 setAppBundleId:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v43)];
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v44 = *(void **)(a1 + 456);
  unint64_t v45 = 0;
  id v46 = [v44 countByEnumeratingWithState:&v59 objects:v78 count:16];
  if (v46)
  {
    uint64_t v47 = *(void *)v60;
    do
    {
      for (uint64_t i = 0; i != v46; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v60 != v47) {
          objc_enumerationMutation(v44);
        }
        uint64_t v49 = *(void **)(*((void *)&v59 + 1) + 8 * i);
        unsigned int v50 = [v10 mcc];
        if (v50 == [v49 mcc])
        {
          unsigned int v51 = [v10 mnc];
          if (v51 == [v49 mnc])
          {
            unsigned int v52 = [v10 lac];
            if (v52 == [v49 lac])
            {
              unsigned int v53 = [v10 ci];
              v45 += v53 == [v49 ci];
            }
          }
        }
      }
      id v46 = [v44 countByEnumeratingWithState:&v59 objects:v78 count:16];
    }
    while (v46);
  }
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24)) & 0x80000000) != 0
    || v45 < (*(int (**)(void))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24)))
  {
    id v54 = sub_101186660(a4);
    [v10 setNeighborGroup:v54];

    ++*(_DWORD *)(a1 + 208);
    *(double *)(a1 + 400) = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
    sub_100D6B950(a1);
    uint64_t v55 = *(void *)(a1 + 352);
    v58[0] = _NSConcreteStackBlock;
    v58[1] = 3221225472;
    v58[2] = sub_101186ECC;
    v58[3] = &unk_102307D48;
    v58[4] = v10;
    v58[5] = a1;
    (*(void (**)(uint64_t, void, void *))(*(void *)v55 + 128))(v55, 0, v58);
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102315808);
    }
    __int16 v56 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v80 = 0;
      __int16 v81 = 2082;
      long long v82 = "";
      __int16 v83 = 2050;
      uint64_t v84 = 0;
      __int16 v85 = 2081;
      long long v86 = "SCDMA";
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Dropping point - maximum point count per reached\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s}", buf, 0x26u);
    }
  }
  if (SHIBYTE(v64) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v66) < 0) {
    operator delete(v65[0]);
  }
  if (SHIBYTE(v68) < 0) {
    operator delete(v67[0]);
  }
}

void sub_1011839D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  _Unwind_Resume(exception_object);
}

void sub_101183A40(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t *a4)
{
  long long v7 = (unsigned int *)sub_1006E744C(a3);
  uint64_t v8 = *(void *)(a1 + 368);
  if (v8 && (*(unsigned int (**)(uint64_t))(*(void *)v8 + 64))(v8))
  {
    (*(void (**)(void, unsigned int *, _OWORD *))(**(void **)(a1 + 352) + 176))(*(void *)(a1 + 352), v7, a2);
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102315808);
    }
    long long v9 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Legacy SCDMA local harvesting not done", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102315808);
      }
      LOWORD(v65[0]) = 0;
      __int16 v56 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSubHarvesterCellLegacy::harvestCellScdma(const CLDaemonLocation &, const CLCell &, const std::vector<CLCell> &)", "%s\n", v56);
      if (v56 != (char *)buf) {
        free(v56);
      }
    }
  }
  id v10 = objc_alloc_init((Class)CLPSCdmaCellTowerLocation);
  id v11 = objc_alloc((Class)CLPLocation);
  long long v12 = a2[5];
  v74[4] = a2[4];
  v74[5] = v12;
  long long v13 = a2[3];
  v74[2] = a2[2];
  v74[3] = v13;
  *(_OWORD *)((char *)v75 + 12) = *(_OWORD *)((char *)a2 + 140);
  long long v14 = a2[8];
  long long v15 = a2[6];
  v74[7] = a2[7];
  v75[0] = v14;
  v74[6] = v15;
  long long v16 = a2[1];
  v74[0] = *a2;
  v74[1] = v16;
  uint64_t v17 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 80))(*(void *)(a1 + 56));
  v72[0] = *(_OWORD *)v17;
  long long v18 = *(_OWORD *)(v17 + 16);
  long long v19 = *(_OWORD *)(v17 + 32);
  long long v20 = *(_OWORD *)(v17 + 64);
  v72[3] = *(_OWORD *)(v17 + 48);
  v72[4] = v20;
  v72[1] = v18;
  v72[2] = v19;
  long long v21 = *(_OWORD *)(v17 + 80);
  long long v22 = *(_OWORD *)(v17 + 96);
  long long v23 = *(_OWORD *)(v17 + 112);
  uint64_t v73 = *(void *)(v17 + 128);
  v72[6] = v22;
  v72[7] = v23;
  v72[5] = v21;
  uint64_t v24 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 88))();
  v70[0] = *(_OWORD *)v24;
  long long v25 = *(_OWORD *)(v24 + 16);
  long long v26 = *(_OWORD *)(v24 + 32);
  long long v27 = *(_OWORD *)(v24 + 64);
  v70[3] = *(_OWORD *)(v24 + 48);
  v70[4] = v27;
  v70[1] = v25;
  v70[2] = v26;
  long long v28 = *(_OWORD *)(v24 + 80);
  long long v29 = *(_OWORD *)(v24 + 96);
  long long v30 = *(_OWORD *)(v24 + 112);
  uint64_t v71 = *(void *)(v24 + 128);
  v70[6] = v29;
  v70[7] = v30;
  v70[5] = v28;
  uint64_t v31 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 96))();
  v68[0] = *(_OWORD *)v31;
  long long v32 = *(_OWORD *)(v31 + 16);
  long long v33 = *(_OWORD *)(v31 + 32);
  long long v34 = *(_OWORD *)(v31 + 64);
  v68[3] = *(_OWORD *)(v31 + 48);
  v68[4] = v34;
  v68[1] = v32;
  v68[2] = v33;
  long long v35 = *(_OWORD *)(v31 + 80);
  long long v36 = *(_OWORD *)(v31 + 96);
  long long v37 = *(_OWORD *)(v31 + 112);
  uint64_t v69 = *(void *)(v31 + 128);
  v68[6] = v36;
  v68[7] = v37;
  v68[5] = v35;
  uint64_t v38 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 216))();
  id v39 = [v11 initWithDaemonLocation:v74 rawMotionActivity:v72 motionActivity:v70 dominantMotionActivity:v68 vehicleConnected:v38 vehicleConnectionStateChanged:(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 208))()];
  [v10 setLocation:v39];

  [v10 setMcc:*v7];
  [v10 setMnc:v7[1]];
  [v10 setLac:v7[2]];
  [v10 setCi:v7[3]];
  [v10 setEcn0:v7[7]];
  [v10 setRscp:v7[6]];
  unsigned int v67 = 0;
  (*(void (**)(void, unsigned int *))(**(void **)(a1 + 352) + 112))(*(void *)(a1 + 352), &v67);
  [v10 setRssi:v67];
  v65[0] = 0;
  v65[1] = 0;
  uint64_t v66 = 0;
  (*(void (**)(void, void **))(**(void **)(a1 + 352) + 80))(*(void *)(a1 + 352), v65);
  if (v66 >= 0) {
    long long v40 = v65;
  }
  else {
    long long v40 = (void **)v65[0];
  }
  [v10 setOperatorName:[NSString stringWithUTF8String:v40]];
  v63[0] = 0;
  v63[1] = 0;
  uint64_t v64 = 0;
  (*(void (**)(void, void **))(**(void **)(a1 + 352) + 96))(*(void *)(a1 + 352), v63);
  if (v64 >= 0) {
    long long v41 = v63;
  }
  else {
    long long v41 = (void **)v63[0];
  }
  [v10 setServiceProviderName:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v41)];
  [v10 setIsLimitedService:(*(unsigned int (**)(void))(**(void **)(a1 + 352) + 24))(*(void *)(a1 + 352)) == 6];
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v62 = 0;
  (*(void (**)(void, void **))(**(void **)(a1 + 352) + 160))(*(void *)(a1 + 352), __p);
  if (v62 >= 0) {
    long long v42 = __p;
  }
  else {
    long long v42 = (void **)__p[0];
  }
  [v10 setAppBundleId:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v42)];
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v43 = *(void **)(a1 + 448);
  unint64_t v44 = 0;
  id v45 = [v43 countByEnumeratingWithState:&v57 objects:v76 count:16];
  if (v45)
  {
    uint64_t v46 = *(void *)v58;
    do
    {
      for (uint64_t i = 0; i != v45; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v58 != v46) {
          objc_enumerationMutation(v43);
        }
        unint64_t v48 = *(void **)(*((void *)&v57 + 1) + 8 * i);
        unsigned int v49 = [v10 mcc];
        if (v49 == [v48 mcc])
        {
          unsigned int v50 = [v10 mnc];
          if (v50 == [v48 mnc])
          {
            unsigned int v51 = [v10 lac];
            if (v51 == [v48 lac])
            {
              unsigned int v52 = [v10 ci];
              v44 += v52 == [v48 ci];
            }
          }
        }
      }
      id v45 = [v43 countByEnumeratingWithState:&v57 objects:v76 count:16];
    }
    while (v45);
  }
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24)) & 0x80000000) != 0
    || v44 < (*(int (**)(void))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24)))
  {
    id v53 = sub_101186660(a4);
    [v10 setNeighborGroup:v53];

    [*(id *)(a1 + 384) writeSecondaryObject:v10 collectedAt:[v10 location] toField:6];
    ++*(_DWORD *)(a1 + 208);
    *(double *)(a1 + 400) = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
    sub_100D6B950(a1);
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102315808);
    }
    id v54 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289795;
      int v78 = 0;
      __int16 v79 = 2082;
      int v80 = "";
      __int16 v81 = 2050;
      uint64_t v82 = 0;
      __int16 v83 = 2081;
      uint64_t v84 = "SCDMA";
      __int16 v85 = 2113;
      id v86 = v10;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s, \"harvest\":%{private, location:escape_only}@}", buf, 0x30u);
    }
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102315808);
    }
    uint64_t v55 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v78 = 0;
      __int16 v79 = 2082;
      int v80 = "";
      __int16 v81 = 2050;
      uint64_t v82 = 0;
      __int16 v83 = 2081;
      uint64_t v84 = "SCDMA";
      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Dropping point - maximum point count per reached\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s}", buf, 0x26u);
    }
  }

  if (SHIBYTE(v62) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v64) < 0) {
    operator delete(v63[0]);
  }
  if (SHIBYTE(v66) < 0) {
    operator delete(v65[0]);
  }
}

void sub_10118438C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  _Unwind_Resume(exception_object);
}

void sub_1011843F8(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = (double *)sub_1006E58D4(a3);
  if (*(_DWORD *)(a3 + 8) == 3)
  {
    uint64_t v9 = *(void *)(a1 + 368);
    if (v9 && (*(unsigned int (**)(uint64_t))(*(void *)v9 + 64))(v9))
    {
      (*(void (**)(void, double *, _OWORD *))(**(void **)(a1 + 352) + 192))(*(void *)(a1 + 352), v8, a2);
    }
    else
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102315808);
      }
      id v10 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Legacy CDMA local harvesting not done", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_102315808);
        }
        LOWORD(v68[0]) = 0;
        long long v59 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLSubHarvesterCellLegacy::harvestCellCdma(const CLDaemonLocation &, const CLCell &, const std::vector<CLCell> &)", "%s\n", v59);
        if (v59 != (char *)buf) {
          free(v59);
        }
      }
    }
  }
  id v11 = objc_alloc_init((Class)CLPCdmaCellTowerLocation);
  id v12 = objc_alloc((Class)CLPLocation);
  long long v13 = a2[5];
  v76[4] = a2[4];
  v76[5] = v13;
  long long v14 = a2[3];
  v76[2] = a2[2];
  v76[3] = v14;
  *(_OWORD *)((char *)v77 + 12) = *(_OWORD *)((char *)a2 + 140);
  long long v15 = a2[8];
  long long v16 = a2[6];
  v76[7] = a2[7];
  v77[0] = v15;
  v76[6] = v16;
  long long v17 = a2[1];
  v76[0] = *a2;
  v76[1] = v17;
  uint64_t v18 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 80))(*(void *)(a1 + 56));
  v74[0] = *(_OWORD *)v18;
  long long v19 = *(_OWORD *)(v18 + 16);
  long long v20 = *(_OWORD *)(v18 + 32);
  long long v21 = *(_OWORD *)(v18 + 64);
  v74[3] = *(_OWORD *)(v18 + 48);
  v74[4] = v21;
  v74[1] = v19;
  v74[2] = v20;
  long long v22 = *(_OWORD *)(v18 + 80);
  long long v23 = *(_OWORD *)(v18 + 96);
  long long v24 = *(_OWORD *)(v18 + 112);
  uint64_t v75 = *(void *)(v18 + 128);
  v74[6] = v23;
  v74[7] = v24;
  v74[5] = v22;
  uint64_t v25 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 88))();
  v72[0] = *(_OWORD *)v25;
  long long v26 = *(_OWORD *)(v25 + 16);
  long long v27 = *(_OWORD *)(v25 + 32);
  long long v28 = *(_OWORD *)(v25 + 64);
  v72[3] = *(_OWORD *)(v25 + 48);
  v72[4] = v28;
  v72[1] = v26;
  v72[2] = v27;
  long long v29 = *(_OWORD *)(v25 + 80);
  long long v30 = *(_OWORD *)(v25 + 96);
  long long v31 = *(_OWORD *)(v25 + 112);
  uint64_t v73 = *(void *)(v25 + 128);
  v72[6] = v30;
  v72[7] = v31;
  v72[5] = v29;
  uint64_t v32 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 96))();
  v70[0] = *(_OWORD *)v32;
  long long v33 = *(_OWORD *)(v32 + 16);
  long long v34 = *(_OWORD *)(v32 + 32);
  long long v35 = *(_OWORD *)(v32 + 64);
  v70[3] = *(_OWORD *)(v32 + 48);
  v70[4] = v35;
  v70[1] = v33;
  v70[2] = v34;
  long long v36 = *(_OWORD *)(v32 + 80);
  long long v37 = *(_OWORD *)(v32 + 96);
  long long v38 = *(_OWORD *)(v32 + 112);
  uint64_t v71 = *(void *)(v32 + 128);
  v70[6] = v37;
  v70[7] = v38;
  v70[5] = v36;
  uint64_t v39 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 216))();
  id v40 = [v12 initWithDaemonLocation:v76 rawMotionActivity:v74 motionActivity:v72 dominantMotionActivity:v70 vehicleConnected:v39 vehicleConnectionStateChanged:(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 208))()];
  [v11 setLocation:v40];

  [v11 setMcc:*(unsigned int *)v8];
  [v11 setMnc:*((unsigned int *)v8 + 58)];
  [v11 setSid:*((unsigned int *)v8 + 8)];
  [v11 setNid:*((unsigned int *)v8 + 9)];
  [v11 setBsid:*((unsigned int *)v8 + 11)];
  [v11 setBsLatitude:v8[9]];
  [v11 setBsLongitude:v8[10]];
  [v11 setZoneid:*((unsigned int *)v8 + 10)];
  if (*((char *)v8 + 263) >= 0) {
    long long v41 = (unsigned int *)(v8 + 30);
  }
  else {
    long long v41 = (unsigned int *)*((void *)v8 + 30);
  }
  [v11 setSectorid:[NSString stringWithUTF8String:v41]];
  [v11 setSectorLatitude:*(double *)((char *)v8 + 268)];
  [v11 setSectorLongitude:*(double *)((char *)v8 + 276)];
  [v11 setBandclass:*((unsigned int *)v8 + 12)];
  [v11 setRat:*((unsigned int *)v8 + 56)];
  [v11 setCelltype:*((unsigned int *)v8 + 57)];
  [v11 setPnoffset:*((unsigned int *)v8 + 14)];
  [v11 setRscp:*((unsigned int *)v8 + 15)];
  [v11 setEcn0:*((unsigned int *)v8 + 16)];
  [v11 setChannel:*((unsigned int *)v8 + 13)];
  [v11 setLtmOffset:*((unsigned int *)v8 + 105)];
  [v11 setDayLightSavings:*((unsigned int *)v8 + 106)];
  v68[0] = 0;
  v68[1] = 0;
  uint64_t v69 = 0;
  (*(void (**)(void, void **))(**(void **)(a1 + 352) + 80))(*(void *)(a1 + 352), v68);
  if (v69 >= 0) {
    long long v42 = v68;
  }
  else {
    long long v42 = (void **)v68[0];
  }
  [v11 setOperatorName:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v42)];
  v66[0] = 0;
  v66[1] = 0;
  uint64_t v67 = 0;
  (*(void (**)(void, void **))(**(void **)(a1 + 352) + 96))(*(void *)(a1 + 352), v66);
  if (v67 >= 0) {
    long long v43 = v66;
  }
  else {
    long long v43 = (void **)v66[0];
  }
  [v11 setServiceProviderName:[NSString stringWithUTF8String:v43]];
  [v11 setIsLimitedService:(*(unsigned int (**)(void))(**(void **)(a1 + 352) + 24))(*(void *)(a1 + 352)) == 6];
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v65 = 0;
  (*(void (**)(void, void **))(**(void **)(a1 + 352) + 160))(*(void *)(a1 + 352), __p);
  if (v65 >= 0) {
    unint64_t v44 = __p;
  }
  else {
    unint64_t v44 = (void **)__p[0];
  }
  [v11 setAppBundleId:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v44)];
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  id v45 = *(void **)(a1 + 440);
  unint64_t v46 = 0;
  id v47 = [v45 countByEnumeratingWithState:&v60 objects:v78 count:16];
  if (v47)
  {
    uint64_t v48 = *(void *)v61;
    do
    {
      for (uint64_t i = 0; i != v47; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v61 != v48) {
          objc_enumerationMutation(v45);
        }
        unsigned int v50 = *(void **)(*((void *)&v60 + 1) + 8 * i);
        unsigned int v51 = [v11 mcc];
        if (v51 == [v50 mcc])
        {
          unsigned int v52 = [v11 mnc];
          if (v52 == [v50 mnc])
          {
            unsigned int v53 = [v11 sid];
            if (v53 == [v50 sid])
            {
              unsigned int v54 = [v11 nid];
              if (v54 == [v50 nid])
              {
                unsigned int v55 = [v11 bsid];
                v46 += v55 == [v50 bsid];
              }
            }
          }
        }
      }
      id v47 = [v45 countByEnumeratingWithState:&v60 objects:v78 count:16];
    }
    while (v47);
  }
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24)) & 0x80000000) != 0
    || v46 < (*(int (**)(void))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24)))
  {
    id v56 = sub_101186660(a4);
    [v11 setNeighborGroup:v56];

    [*(id *)(a1 + 384) writeSecondaryObject:v11 collectedAt:[v11 location] toField:4];
    ++*(_DWORD *)(a1 + 208);
    *(double *)(a1 + 400) = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
    sub_100D6B950(a1);
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102315808);
    }
    long long v57 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289795;
      int v80 = 0;
      __int16 v81 = 2082;
      uint64_t v82 = "";
      __int16 v83 = 2050;
      uint64_t v84 = 0;
      __int16 v85 = 2081;
      id v86 = "CDMA";
      __int16 v87 = 2113;
      id v88 = v11;
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s, \"harvest\":%{private, location:escape_only}@}", buf, 0x30u);
    }
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102315808);
    }
    long long v58 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v80 = 0;
      __int16 v81 = 2082;
      uint64_t v82 = "";
      __int16 v83 = 2050;
      uint64_t v84 = 0;
      __int16 v85 = 2081;
      id v86 = "CDMA";
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Dropping point - maximum point count per reached\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s}", buf, 0x26u);
    }
  }

  if (SHIBYTE(v65) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v67) < 0) {
    operator delete(v66[0]);
  }
  if (SHIBYTE(v69) < 0) {
    operator delete(v68[0]);
  }
}

void sub_101184DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  _Unwind_Resume(exception_object);
}

void sub_101184E64(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t *a4)
{
  long long v7 = (unsigned int *)sub_100117098(a3);
  uint64_t v8 = *(void *)(a1 + 368);
  if (v8 && (*(unsigned int (**)(uint64_t))(*(void *)v8 + 64))(v8))
  {
    (*(void (**)(void, unsigned int *, _OWORD *))(**(void **)(a1 + 352) + 184))(*(void *)(a1 + 352), v7, a2);
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102315808);
    }
    uint64_t v9 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Legacy LTE local harvesting not done", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102315808);
      }
      LOWORD(v67[0]) = 0;
      long long v57 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSubHarvesterCellLegacy::harvestCellLTE(const CLDaemonLocation &, const CLCell &, const std::vector<CLCell> &)", "%s\n", v57);
      if (v57 != (char *)buf) {
        free(v57);
      }
    }
  }
  if (*(_DWORD *)(a1 + 392))
  {
    id v10 = objc_alloc_init((Class)CLPLteCellTowerLocation);
    id v11 = objc_alloc((Class)CLPLocation);
    long long v12 = a2[5];
    v76[4] = a2[4];
    v76[5] = v12;
    long long v13 = a2[3];
    v76[2] = a2[2];
    v76[3] = v13;
    *(_OWORD *)((char *)v77 + 12) = *(_OWORD *)((char *)a2 + 140);
    long long v14 = a2[8];
    long long v15 = a2[6];
    v76[7] = a2[7];
    v77[0] = v14;
    v76[6] = v15;
    long long v16 = a2[1];
    v76[0] = *a2;
    v76[1] = v16;
    uint64_t v17 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 80))(*(void *)(a1 + 56));
    v74[0] = *(_OWORD *)v17;
    long long v18 = *(_OWORD *)(v17 + 16);
    long long v19 = *(_OWORD *)(v17 + 32);
    long long v20 = *(_OWORD *)(v17 + 64);
    v74[3] = *(_OWORD *)(v17 + 48);
    v74[4] = v20;
    v74[1] = v18;
    v74[2] = v19;
    long long v21 = *(_OWORD *)(v17 + 80);
    long long v22 = *(_OWORD *)(v17 + 96);
    long long v23 = *(_OWORD *)(v17 + 112);
    uint64_t v75 = *(void *)(v17 + 128);
    v74[6] = v22;
    v74[7] = v23;
    v74[5] = v21;
    uint64_t v24 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 88))();
    v72[0] = *(_OWORD *)v24;
    long long v25 = *(_OWORD *)(v24 + 16);
    long long v26 = *(_OWORD *)(v24 + 32);
    long long v27 = *(_OWORD *)(v24 + 64);
    v72[3] = *(_OWORD *)(v24 + 48);
    v72[4] = v27;
    v72[1] = v25;
    v72[2] = v26;
    long long v28 = *(_OWORD *)(v24 + 80);
    long long v29 = *(_OWORD *)(v24 + 96);
    long long v30 = *(_OWORD *)(v24 + 112);
    uint64_t v73 = *(void *)(v24 + 128);
    v72[6] = v29;
    v72[7] = v30;
    v72[5] = v28;
    uint64_t v31 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 96))();
    v70[0] = *(_OWORD *)v31;
    long long v32 = *(_OWORD *)(v31 + 16);
    long long v33 = *(_OWORD *)(v31 + 32);
    long long v34 = *(_OWORD *)(v31 + 64);
    v70[3] = *(_OWORD *)(v31 + 48);
    v70[4] = v34;
    v70[1] = v32;
    v70[2] = v33;
    long long v35 = *(_OWORD *)(v31 + 80);
    long long v36 = *(_OWORD *)(v31 + 96);
    long long v37 = *(_OWORD *)(v31 + 112);
    uint64_t v71 = *(void *)(v31 + 128);
    v70[6] = v36;
    v70[7] = v37;
    v70[5] = v35;
    uint64_t v38 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 216))();
    id v39 = [v11 initWithDaemonLocation:v76 rawMotionActivity:v74 motionActivity:v72 dominantMotionActivity:v70 vehicleConnected:v38 vehicleConnectionStateChanged:(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 208))()];
    [v10 setLocation:v39];

    [v10 setMcc:*v7];
    [v10 setMnc:v7[1]];
    [v10 setTac:v7[2]];
    [v10 setCi:v7[3]];
    [v10 setUarfcn:v7[4]];
    [v10 setPid:v7[5]];
    [v10 setBandwidth:v7[15]];
    if ((v7[14] & 0x80000000) == 0) {
      [v10 setDeploymentType:];
    }
    [v10 setPmax:v7[16]];
    [v10 setMaxThroughput:v7[17]];
    [v10 setCsgIndication:v7[18]];
    [v10 setCsgId:v7[19]];
    [v10 setBandInfo:v7[6]];
    [v10 setCellLatitude:*((double *)v7 + 4)];
    [v10 setCellLongitude:*((double *)v7 + 5)];
    unsigned int v69 = 0;
    (*(void (**)(void, unsigned int *))(**(void **)(a1 + 352) + 112))(*(void *)(a1 + 352), &v69);
    [v10 setRssi:v69];
    v67[0] = 0;
    v67[1] = 0;
    uint64_t v68 = 0;
    (*(void (**)(void, void **))(**(void **)(a1 + 352) + 80))(*(void *)(a1 + 352), v67);
    if (v68 >= 0) {
      id v40 = v67;
    }
    else {
      id v40 = (void **)v67[0];
    }
    [v10 setOperatorName:[NSString stringWithUTF8String:v40]];
    v65[0] = 0;
    v65[1] = 0;
    uint64_t v66 = 0;
    (*(void (**)(void, void **))(**(void **)(a1 + 352) + 96))(*(void *)(a1 + 352), v65);
    if (v66 >= 0) {
      long long v41 = v65;
    }
    else {
      long long v41 = (void **)v65[0];
    }
    [v10 setServiceProviderName:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v41)];
    [v10 setIsLimitedService:(*(unsigned int (**)(void))(**(void **)(a1 + 352) + 24))(*(void *)(a1 + 352)) == 6];
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v64 = 0;
    (*(void (**)(void, void **))(**(void **)(a1 + 352) + 160))(*(void *)(a1 + 352), __p);
    if (v64 >= 0) {
      long long v42 = __p;
    }
    else {
      long long v42 = (void **)__p[0];
    }
    [v10 setAppBundleId:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v42)];
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v43 = *(void **)(a1 + 424);
    unint64_t v44 = 0;
    id v45 = [v43 countByEnumeratingWithState:&v59 objects:v78 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v60;
      do
      {
        for (uint64_t i = 0; i != v45; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v60 != v46) {
            objc_enumerationMutation(v43);
          }
          uint64_t v48 = *(void **)(*((void *)&v59 + 1) + 8 * i);
          unsigned int v49 = [v10 mcc];
          if (v49 == [v48 mcc])
          {
            unsigned int v50 = [v10 mnc];
            if (v50 == [v48 mnc])
            {
              unsigned int v51 = [v10 tac];
              if (v51 == [v48 tac])
              {
                unsigned int v52 = [v10 ci];
                v44 += v52 == [v48 ci];
              }
            }
          }
        }
        id v45 = [v43 countByEnumeratingWithState:&v59 objects:v78 count:16];
      }
      while (v45);
    }
    if (((*(uint64_t (**)(void))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24)) & 0x80000000) != 0
      || v44 < (*(int (**)(void))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24)))
    {
      id v53 = sub_101186660(a4);
      [v10 setNeighborGroup:v53];

      ++*(_DWORD *)(a1 + 208);
      *(double *)(a1 + 400) = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
      sub_100D6B950(a1);
      uint64_t v54 = *(void *)(a1 + 352);
      v58[0] = _NSConcreteStackBlock;
      v58[1] = 3221225472;
      v58[2] = sub_101187050;
      v58[3] = &unk_102307D48;
      v58[4] = v10;
      v58[5] = a1;
      (*(void (**)(uint64_t, void, void *))(*(void *)v54 + 128))(v54, 0, v58);
    }
    else
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102315808);
      }
      id v56 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 68289539;
        int v80 = 0;
        __int16 v81 = 2082;
        uint64_t v82 = "";
        __int16 v83 = 2050;
        uint64_t v84 = 0;
        __int16 v85 = 2081;
        id v86 = "LTE";
        _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Dropping point - maximum point count per reached\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s}", buf, 0x26u);
      }
    }
    if (SHIBYTE(v64) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v66) < 0) {
      operator delete(v65[0]);
    }
    if (SHIBYTE(v68) < 0) {
      operator delete(v67[0]);
    }
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102315808);
    }
    unsigned int v55 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v80 = 0;
      __int16 v81 = 2082;
      uint64_t v82 = "";
      __int16 v83 = 2050;
      uint64_t v84 = 0;
      __int16 v85 = 2081;
      id v86 = "LTE";
      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Dropping point - maximum point count reached\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s}", buf, 0x26u);
    }
  }
}

void sub_101185878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  _Unwind_Resume(exception_object);
}

void sub_1011858E4(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t *a4)
{
  long long v7 = (unsigned int *)sub_1006E8278(a3);
  uint64_t v8 = *(void *)(a1 + 368);
  if (v8 && (*(unsigned int (**)(uint64_t))(*(void *)v8 + 64))(v8))
  {
    (*(void (**)(void, unsigned int *, _OWORD *))(**(void **)(a1 + 352) + 200))(*(void *)(a1 + 352), v7, a2);
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102315808);
    }
    uint64_t v9 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Legacy NR local harvesting not done", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102315808);
      }
      LOWORD(v67[0]) = 0;
      long long v57 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSubHarvesterCellLegacy::harvestCellNR(const CLDaemonLocation &, const CLCell &, const std::vector<CLCell> &)", "%s\n", v57);
      if (v57 != (char *)buf) {
        free(v57);
      }
    }
  }
  if (*(_DWORD *)(a1 + 392))
  {
    id v10 = objc_alloc_init((Class)CLPNRCellTowerLocation);
    id v11 = objc_alloc((Class)CLPLocation);
    long long v12 = a2[5];
    v76[4] = a2[4];
    v76[5] = v12;
    long long v13 = a2[3];
    v76[2] = a2[2];
    v76[3] = v13;
    *(_OWORD *)((char *)v77 + 12) = *(_OWORD *)((char *)a2 + 140);
    long long v14 = a2[8];
    long long v15 = a2[6];
    v76[7] = a2[7];
    v77[0] = v14;
    v76[6] = v15;
    long long v16 = a2[1];
    v76[0] = *a2;
    v76[1] = v16;
    uint64_t v17 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 80))(*(void *)(a1 + 56));
    v74[0] = *(_OWORD *)v17;
    long long v18 = *(_OWORD *)(v17 + 16);
    long long v19 = *(_OWORD *)(v17 + 32);
    long long v20 = *(_OWORD *)(v17 + 64);
    v74[3] = *(_OWORD *)(v17 + 48);
    v74[4] = v20;
    v74[1] = v18;
    v74[2] = v19;
    long long v21 = *(_OWORD *)(v17 + 80);
    long long v22 = *(_OWORD *)(v17 + 96);
    long long v23 = *(_OWORD *)(v17 + 112);
    uint64_t v75 = *(void *)(v17 + 128);
    v74[6] = v22;
    v74[7] = v23;
    v74[5] = v21;
    uint64_t v24 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 88))();
    v72[0] = *(_OWORD *)v24;
    long long v25 = *(_OWORD *)(v24 + 16);
    long long v26 = *(_OWORD *)(v24 + 32);
    long long v27 = *(_OWORD *)(v24 + 64);
    v72[3] = *(_OWORD *)(v24 + 48);
    v72[4] = v27;
    v72[1] = v25;
    v72[2] = v26;
    long long v28 = *(_OWORD *)(v24 + 80);
    long long v29 = *(_OWORD *)(v24 + 96);
    long long v30 = *(_OWORD *)(v24 + 112);
    uint64_t v73 = *(void *)(v24 + 128);
    v72[6] = v29;
    v72[7] = v30;
    v72[5] = v28;
    uint64_t v31 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 96))();
    v70[0] = *(_OWORD *)v31;
    long long v32 = *(_OWORD *)(v31 + 16);
    long long v33 = *(_OWORD *)(v31 + 32);
    long long v34 = *(_OWORD *)(v31 + 64);
    v70[3] = *(_OWORD *)(v31 + 48);
    v70[4] = v34;
    v70[1] = v32;
    v70[2] = v33;
    long long v35 = *(_OWORD *)(v31 + 80);
    long long v36 = *(_OWORD *)(v31 + 96);
    long long v37 = *(_OWORD *)(v31 + 112);
    uint64_t v71 = *(void *)(v31 + 128);
    v70[6] = v36;
    v70[7] = v37;
    v70[5] = v35;
    uint64_t v38 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 216))();
    id v39 = [v11 initWithDaemonLocation:v76 rawMotionActivity:v74 motionActivity:v72 dominantMotionActivity:v70 vehicleConnected:v38 vehicleConnectionStateChanged:(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 208))()];
    [v10 setLocation:v39];

    [v10 setMcc:*v7];
    [v10 setMnc:v7[1]];
    [v10 setTac:v7[2]];
    [v10 setCi:*((void *)v7 + 2)];
    [v10 setNrarfcn:v7[6]];
    [v10 setPid:v7[7]];
    [v10 setScs:v7[16]];
    [v10 setGscn:v7[17]];
    [v10 setBandInfo:v7[8]];
    [v10 setCellLatitude:*((double *)v7 + 5)];
    [v10 setCellLongitude:*((double *)v7 + 6)];
    [v10 setBandwidth:v7[18]];
    [v10 setPmax:v7[19]];
    [v10 setMaxThroughput:v7[20]];
    [v10 setBwpSupport:v7[22]];
    unsigned int v69 = 0;
    (*(void (**)(void, unsigned int *))(**(void **)(a1 + 352) + 112))(*(void *)(a1 + 352), &v69);
    [v10 setRssi:v69];
    v67[0] = 0;
    v67[1] = 0;
    uint64_t v68 = 0;
    (*(void (**)(void, void **))(**(void **)(a1 + 352) + 80))(*(void *)(a1 + 352), v67);
    if (v68 >= 0) {
      id v40 = v67;
    }
    else {
      id v40 = (void **)v67[0];
    }
    [v10 setOperatorName:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v40)];
    v65[0] = 0;
    v65[1] = 0;
    uint64_t v66 = 0;
    (*(void (**)(void, void **))(**(void **)(a1 + 352) + 96))(*(void *)(a1 + 352), v65);
    if (v66 >= 0) {
      long long v41 = v65;
    }
    else {
      long long v41 = (void **)v65[0];
    }
    [v10 setServiceProviderName:[+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v41)]];
    [v10 setIsLimitedService:(*(unsigned int (**)(void))(**(void **)(a1 + 352) + 24))(*(void *)(a1 + 352)) == 6];
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v64 = 0;
    (*(void (**)(void, void **))(**(void **)(a1 + 352) + 160))(*(void *)(a1 + 352), __p);
    if (v64 >= 0) {
      long long v42 = __p;
    }
    else {
      long long v42 = (void **)__p[0];
    }
    [v10 setAppBundleId:[NSString stringWithUTF8String:v42]];
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v43 = *(void **)(a1 + 432);
    unint64_t v44 = 0;
    id v45 = [v43 countByEnumeratingWithState:&v59 objects:v78 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v60;
      do
      {
        for (uint64_t i = 0; i != v45; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v60 != v46) {
            objc_enumerationMutation(v43);
          }
          uint64_t v48 = *(void **)(*((void *)&v59 + 1) + 8 * i);
          unsigned int v49 = [v10 mcc];
          if (v49 == [v48 mcc])
          {
            unsigned int v50 = [v10 mnc];
            if (v50 == [v48 mnc])
            {
              unsigned int v51 = [v10 tac];
              if (v51 == [v48 tac])
              {
                id v52 = [v10 ci];
                v44 += v52 == [v48 ci];
              }
            }
          }
        }
        id v45 = [v43 countByEnumeratingWithState:&v59 objects:v78 count:16];
      }
      while (v45);
    }
    if (((*(uint64_t (**)(void))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24)) & 0x80000000) != 0
      || v44 < (*(int (**)(void))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24)))
    {
      id v53 = sub_101186660(a4);
      [v10 setNeighborGroup:v53];

      ++*(_DWORD *)(a1 + 208);
      *(double *)(a1 + 400) = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
      sub_100D6B950(a1);
      uint64_t v54 = *(void *)(a1 + 352);
      v58[0] = _NSConcreteStackBlock;
      v58[1] = 3221225472;
      v58[2] = sub_101187540;
      v58[3] = &unk_102307D48;
      v58[4] = v10;
      v58[5] = a1;
      (*(void (**)(uint64_t, void, void *))(*(void *)v54 + 128))(v54, 0, v58);
    }
    else
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102315808);
      }
      id v56 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 68289539;
        int v80 = 0;
        __int16 v81 = 2082;
        uint64_t v82 = "";
        __int16 v83 = 2050;
        uint64_t v84 = 0;
        __int16 v85 = 2081;
        id v86 = "NR5G";
        _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Dropping point - maximum point count per reached\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s}", buf, 0x26u);
      }
    }
    if (SHIBYTE(v64) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v66) < 0) {
      operator delete(v65[0]);
    }
    if (SHIBYTE(v68) < 0) {
      operator delete(v67[0]);
    }
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102315808);
    }
    unsigned int v55 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v80 = 0;
      __int16 v81 = 2082;
      uint64_t v82 = "";
      __int16 v83 = 2050;
      uint64_t v84 = 0;
      __int16 v85 = 2081;
      id v86 = "NR";
      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Dropping point - maximum point count reached\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s}", buf, 0x26u);
    }
  }
}

void sub_1011862F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  _Unwind_Resume(exception_object);
}

id sub_101186360(uint64_t a1)
{
  double v2 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
  double v3 = v2 - (*(double (**)(uint64_t))(*(void *)a1 + 184))(a1);
  id v4 = *(void **)(a1 + 72);

  return _[v4 pruneSecondaryDataOlderThan:0 forHarvester:v3];
}

id sub_1011863F8(uint64_t a1)
{
  return [*(id *)(a1 + 72) clearDataForHarvester:0];
}

void sub_101186404(uint64_t a1, _OWORD *a2)
{
  *(void *)&long long v4 = -1;
  *((void *)&v4 + 1) = -1;
  v8[0] = v4;
  v8[1] = v4;
  if ((*(uint64_t (**)(void, _OWORD *))(**(void **)(a1 + 352) + 72))(*(void *)(a1 + 352), v8))
  {
    memset(v7, 0, 24);
    sub_10142D434(buf, v8, 0);
    sub_101183080(a1, a2, (uint64_t)buf, v7);
    if (v13 < 0) {
      operator delete(__p);
    }
    if (v10)
    {
      id v11 = v10;
      operator delete(v10);
    }
    *(void *)uint64_t buf = v7;
    sub_1000FA7C8((void ***)buf);
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102315808);
    }
    id v5 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#warning could not retrieve serving cell info", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102315808);
      }
      LOWORD(v7[0]) = 0;
      long long v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSubHarvesterCellLegacy::harvestCell2G(const CLDaemonLocation &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_10118662C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)&a11;
  sub_1000FA7C8(&a19);
  _Unwind_Resume(a1);
}

id sub_101186660(uint64_t *a1)
{
  id v2 = objc_alloc_init((Class)CLPCellNeighborsGroup);
  uint64_t v3 = *a1;
  uint64_t v91 = a1[1];
  id v92 = v2;
  if (*a1 != v91)
  {
    do
    {
      v95[0] = *(_OWORD *)v3;
      long long v4 = *(_OWORD *)(v3 + 16);
      long long v5 = *(_OWORD *)(v3 + 32);
      long long v6 = *(_OWORD *)(v3 + 48);
      *(_OWORD *)&v96[12] = *(_OWORD *)(v3 + 60);
      v95[2] = v5;
      *(_OWORD *)unint64_t v96 = v6;
      v95[1] = v4;
      int v97 = *(_DWORD *)(v3 + 80);
      uint64_t v99 = 0;
      uint64_t v100 = 0;
      char v98 = 0;
      sub_10010F834(&v98, *(const void **)(v3 + 88), *(void *)(v3 + 96), (uint64_t)(*(void *)(v3 + 96) - *(void *)(v3 + 88)) >> 2);
      long long v101 = *(_OWORD *)(v3 + 112);
      long long v7 = *(_OWORD *)(v3 + 128);
      long long v8 = *(_OWORD *)(v3 + 144);
      long long v9 = *(_OWORD *)(v3 + 176);
      long long v104 = *(_OWORD *)(v3 + 160);
      long long v105 = v9;
      long long v102 = v7;
      long long v103 = v8;
      long long v10 = *(_OWORD *)(v3 + 192);
      long long v11 = *(_OWORD *)(v3 + 208);
      long long v12 = *(_OWORD *)(v3 + 240);
      long long v108 = *(_OWORD *)(v3 + 224);
      long long v109 = v12;
      long long v106 = v10;
      long long v107 = v11;
      long long v13 = *(_OWORD *)(v3 + 256);
      long long v14 = *(_OWORD *)(v3 + 272);
      long long v15 = *(_OWORD *)(v3 + 288);
      *(_OWORD *)((char *)v112 + 12) = *(_OWORD *)(v3 + 300);
      long long v111 = v14;
      v112[0] = v15;
      long long v110 = v13;
      if (*(char *)(v3 + 343) < 0)
      {
        sub_1000DC48C(&__p, *(void **)(v3 + 320), *(void *)(v3 + 328));
      }
      else
      {
        long long v16 = *(_OWORD *)(v3 + 320);
        uint64_t v114 = *(void *)(v3 + 336);
        long long __p = v16;
      }
      long long v17 = *(_OWORD *)(v3 + 344);
      long long v18 = *(_OWORD *)(v3 + 376);
      long long v116 = *(_OWORD *)(v3 + 360);
      long long v117 = v18;
      long long v115 = v17;
      long long v19 = *(_OWORD *)(v3 + 392);
      long long v20 = *(_OWORD *)(v3 + 408);
      long long v21 = *(_OWORD *)(v3 + 440);
      long long v120 = *(_OWORD *)(v3 + 424);
      long long v121 = v21;
      long long v118 = v19;
      long long v119 = v20;
      long long v22 = *(_OWORD *)(v3 + 456);
      long long v23 = *(_OWORD *)(v3 + 472);
      long long v24 = *(_OWORD *)(v3 + 488);
      int v125 = *(_DWORD *)(v3 + 504);
      long long v123 = v23;
      long long v124 = v24;
      long long v122 = v22;
      long long v25 = *(_OWORD *)(v3 + 512);
      long long v26 = *(_OWORD *)(v3 + 528);
      long long v27 = *(_OWORD *)(v3 + 560);
      long long v128 = *(_OWORD *)(v3 + 544);
      long long v129 = v27;
      long long v126 = v25;
      long long v127 = v26;
      long long v28 = *(_OWORD *)(v3 + 576);
      long long v29 = *(_OWORD *)(v3 + 592);
      long long v30 = *(_OWORD *)(v3 + 624);
      long long v132 = *(_OWORD *)(v3 + 608);
      long long v133 = v30;
      long long v130 = v28;
      long long v131 = v29;
      long long v31 = *(_OWORD *)(v3 + 640);
      long long v32 = *(_OWORD *)(v3 + 656);
      long long v33 = *(_OWORD *)(v3 + 672);
      int v137 = *(_DWORD *)(v3 + 688);
      long long v135 = v32;
      long long v136 = v33;
      long long v134 = v31;
      if (DWORD1(v95[0]) != 1)
      {
        sub_101AA4930();
        abort_report_np();
        __break(1u);
      }
      if (DWORD2(v95[0]) < 3) {
        goto LABEL_9;
      }
      if (DWORD2(v95[0]) == 9)
      {
        id v40 = (unsigned int *)sub_1006E744C((uint64_t)v95);
        uint64_t v41 = v40[4];
        uint64_t v42 = v40[5];
        uint64_t v43 = v40[6];
        uint64_t v44 = v40[7];
        id v45 = objc_alloc_init((Class)CLPCellNeighbor);
        [v45 setEcn0:v44];
        [v45 setPsc:v42];
        [v45 setRscp:v43];
        [v45 setRssi:0xFFFFFFFFLL];
        [v45 setUarfcn:v41];
        [v92 addScdmaNeighbors:v45];

        goto LABEL_10;
      }
      if (DWORD2(v95[0]) == 7)
      {
LABEL_9:
        long long v34 = (unsigned int *)sub_1006E6690((uint64_t)v95);
        uint64_t v35 = v34[4];
        uint64_t v36 = v34[5];
        uint64_t v37 = v34[6];
        uint64_t v38 = v34[7];
        id v39 = objc_alloc_init((Class)CLPCellNeighbor);
        [v39 setEcn0:v38];
        [v39 setPsc:v36];
        [v39 setRscp:v37];
        [v39 setRssi:0xFFFFFFFFLL];
        [v39 setUarfcn:v35];
        [v92 addGsmNeighbors:v39];
      }
      else
      {
        if ((DWORD2(v95[0]) - 3) <= 2)
        {
          uint64_t v46 = sub_1006E58D4((uint64_t)v95);
          *(_DWORD *)uint64_t buf = *(_DWORD *)v46;
          memset(v140, 0, 24);
          sub_10010F834(v140, *(const void **)(v46 + 8), *(void *)(v46 + 16), (uint64_t)(*(void *)(v46 + 16) - *(void *)(v46 + 8)) >> 2);
          *(_OWORD *)&v140[24] = *(_OWORD *)(v46 + 32);
          long long v47 = *(_OWORD *)(v46 + 48);
          long long v48 = *(_OWORD *)(v46 + 64);
          long long v49 = *(_OWORD *)(v46 + 96);
          long long v143 = *(_OWORD *)(v46 + 80);
          long long v144 = v49;
          long long v141 = v47;
          long long v142 = v48;
          long long v50 = *(_OWORD *)(v46 + 112);
          long long v51 = *(_OWORD *)(v46 + 128);
          long long v52 = *(_OWORD *)(v46 + 160);
          long long v147 = *(_OWORD *)(v46 + 144);
          long long v148 = v52;
          long long v145 = v50;
          long long v146 = v51;
          long long v53 = *(_OWORD *)(v46 + 176);
          long long v54 = *(_OWORD *)(v46 + 192);
          long long v55 = *(_OWORD *)(v46 + 208);
          *(_OWORD *)((char *)v151 + 12) = *(_OWORD *)(v46 + 220);
          long long v150 = v54;
          v151[0] = v55;
          long long v149 = v53;
          if (*(char *)(v46 + 263) < 0)
          {
            sub_1000DC48C(&v152, *(void **)(v46 + 240), *(void *)(v46 + 248));
          }
          else
          {
            long long v56 = *(_OWORD *)(v46 + 240);
            uint64_t v153 = *(void *)(v46 + 256);
            long long v152 = v56;
          }
          long long v63 = *(_OWORD *)(v46 + 264);
          long long v64 = *(_OWORD *)(v46 + 296);
          long long v155 = *(_OWORD *)(v46 + 280);
          long long v156 = v64;
          long long v154 = v63;
          long long v65 = *(_OWORD *)(v46 + 312);
          long long v66 = *(_OWORD *)(v46 + 328);
          long long v67 = *(_OWORD *)(v46 + 360);
          long long v159 = *(_OWORD *)(v46 + 344);
          long long v160 = v67;
          long long v157 = v65;
          long long v158 = v66;
          long long v68 = *(_OWORD *)(v46 + 376);
          long long v69 = *(_OWORD *)(v46 + 392);
          long long v70 = *(_OWORD *)(v46 + 408);
          int v164 = *(_DWORD *)(v46 + 424);
          long long v162 = v69;
          long long v163 = v70;
          long long v161 = v68;
          id v71 = objc_alloc_init((Class)CLPCdmaCellNeighbor);
          [v71 setEcn0:v142];
          [v71 setPilotPhase:0xFFFFFFFFLL];
          [v71 setPnoffset:DWORD2(v141)];
          [v71 setRscp:HIDWORD(v141)];
          [v71 setChannel:DWORD1(v141)];
          [v92 addCdmaNeighbors:v71];

          if (SHIBYTE(v153) < 0) {
            operator delete((void *)v152);
          }
          long long v72 = *(void **)v140;
          if (!*(void *)v140) {
            goto LABEL_10;
          }
          *(void *)&v140[8] = *(void *)v140;
          goto LABEL_28;
        }
        if (DWORD2(v95[0]) == 10)
        {
          uint64_t v73 = (unsigned int *)sub_1006E8278((uint64_t)v95);
          uint64_t v74 = v73[6];
          uint64_t v75 = v73[7];
          uint64_t v76 = v73[14];
          uint64_t v77 = v73[15];
          unsigned int v88 = v73[21];
          unsigned int v90 = v73[18];
          unsigned int v84 = v73[22];
          unsigned int v86 = v73[20];
          id v78 = objc_alloc_init((Class)CLPNRCellNeighbor);
          [v78 setEcn0:v77];
          [v78 setPid:v75];
          [v78 setRscp:v76];
          [v78 setRssi:0xFFFFFFFFLL];
          [v78 setNrarfcn:v74];
          [v78 setBandwidth:v90];
          [v78 setNeighborType:v88];
          [v78 setMaxThroughput:v86];
          [v78 setBwpSupport:v84];
          [v92 addNrNeighbors:v78];

          goto LABEL_10;
        }
        if (DWORD2(v95[0]) != 6)
        {
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_102315808);
          }
          __int16 v79 = qword_102419568;
          if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_FAULT))
          {
            sub_10142D00C((uint64_t)v95);
            int v80 = v93;
            if (v94 < 0) {
              int v80 = (void **)v93[0];
            }
            *(_DWORD *)uint64_t buf = 68289539;
            int v139 = 0;
            *(_WORD *)long long v140 = 2082;
            *(void *)&v140[2] = "";
            *(_WORD *)&v140[10] = 2050;
            *(void *)&v140[12] = 0;
            *(_WORD *)&v140[20] = 2081;
            *(void *)&v140[22] = v80;
            _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"failed to harvest cell\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"cell\":%{private, location:escape_only}s}", buf, 0x26u);
            if (v94 < 0) {
              operator delete(v93[0]);
            }
            if (qword_102419560 != -1) {
              dispatch_once(&qword_102419560, &stru_102315808);
            }
          }
          __int16 v81 = qword_102419568;
          if (!os_signpost_enabled((os_log_t)qword_102419568)) {
            goto LABEL_10;
          }
          sub_10142D00C((uint64_t)v95);
          uint64_t v82 = v93;
          if (v94 < 0) {
            uint64_t v82 = (void **)v93[0];
          }
          *(_DWORD *)uint64_t buf = 68289539;
          int v139 = 0;
          *(_WORD *)long long v140 = 2082;
          *(void *)&v140[2] = "";
          *(_WORD *)&v140[10] = 2050;
          *(void *)&v140[12] = 0;
          *(_WORD *)&v140[20] = 2081;
          *(void *)&v140[22] = v82;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v81, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "failed to harvest cell", "{\"msg%{public}.0s\":\"failed to harvest cell\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"cell\":%{private, location:escape_only}s}", buf, 0x26u);
          if ((v94 & 0x80000000) == 0) {
            goto LABEL_10;
          }
          long long v72 = v93[0];
LABEL_28:
          operator delete(v72);
          goto LABEL_10;
        }
        long long v57 = (unsigned int *)sub_100117098((uint64_t)v95);
        uint64_t v58 = v57[4];
        uint64_t v59 = v57[5];
        uint64_t v60 = v57[12];
        uint64_t v61 = v57[13];
        unsigned int v85 = v57[17];
        unsigned int v87 = v57[20];
        unsigned int v89 = v57[15];
        id v62 = objc_alloc_init((Class)CLPLteCellNeighbor);
        [v62 setEcn0:v61];
        [v62 setPid:v59];
        [v62 setRscp:v60];
        [v62 setRssi:0xFFFFFFFFLL];
        [v62 setUarfcn:v58];
        [v62 setBandwidth:v89];
        [v62 setNeighborType:v87];
        [v62 setMaxThroughput:v85];
        [v92 addLteNeighbors:v62];
      }
LABEL_10:
      if (SHIBYTE(v114) < 0) {
        operator delete((void *)__p);
      }
      if (v98)
      {
        uint64_t v99 = v98;
        operator delete(v98);
      }
      v3 += 696;
    }
    while (v3 != v91);
  }
  return v92;
}

void sub_101186E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_101186ECC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (a2)
  {
    [*(id *)(a1 + 32) setRscp:[objc_msgSend(objc_msgSend(a2, "rscp"), "intValue")];
    [*(id *)(a1 + 32) setEcn0:[objc_msgSend(objc_msgSend(a2, "ecn0"), "intValue")];
  }
  [*(id *)(v3 + 384) writeSecondaryObject:*(void *)(a1 + 32) collectedAt:objc_msgSend(*(id *)(a1 + 32), "location") toField:2];
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102315808);
  }
  long long v5 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    v7[0] = 68289795;
    v7[1] = 0;
    __int16 v8 = 2082;
    long long v9 = "";
    __int16 v10 = 2050;
    uint64_t v11 = 0;
    __int16 v12 = 2081;
    long long v13 = "GSM";
    __int16 v14 = 2113;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s, \"harvest\":%{private, location:escape_only}@}", (uint8_t *)v7, 0x30u);
  }
}

void sub_101187050(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (a2)
  {
    [*(id *)(a1 + 32) setRscp:[objc_msgSend(objc_msgSend(a2, "rsrp"), "intValue")];
    [*(id *)(a1 + 32) setEcn0:[objc_msgSend(objc_msgSend(a2, "snr"), "intValue")];
  }
  if ((*(uint64_t (**)(void))(**(void **)(v3 + 56) + 152))(*(void *)(v3 + 56)))
  {
    uint64_t v5 = *(void *)(v3 + 352);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_101187310;
    void v9[3] = &unk_102307D70;
    uint64_t v9[4] = *(void *)(a1 + 32);
    v9[5] = v3;
    (*(void (**)(uint64_t, void *))(*(void *)v5 + 152))(v5, v9);
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102315808);
    }
    uint64_t v6 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      int v11 = 0;
      __int16 v12 = 2082;
      long long v13 = "";
      __int16 v14 = 2050;
      uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"DiagnosticsSubmission is not allowed\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
    }
    [*(id *)(v3 + 384) writeSecondaryObject:*(void *)(a1 + 32) collectedAt:objc_msgSend(*(id *)(a1 + 32), "location") toField:5];
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102315808);
    }
    long long v7 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      *(_DWORD *)uint64_t buf = 68289795;
      int v11 = 0;
      __int16 v12 = 2082;
      long long v13 = "";
      __int16 v14 = 2050;
      uint64_t v15 = 0;
      __int16 v16 = 2081;
      long long v17 = "LTE";
      __int16 v18 = 2113;
      uint64_t v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s, \"harvest\":%{private, location:escape_only}@}", buf, 0x30u);
    }
  }
}

void sub_101187310(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a1 + 40);
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102315808);
  }
  int v11 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    int v14 = 68290050;
    int v15 = 0;
    __int16 v16 = 2082;
    long long v17 = "";
    __int16 v18 = 1026;
    *(_DWORD *)uint64_t v19 = a2;
    *(_WORD *)&void v19[4] = 1026;
    *(_DWORD *)&v19[6] = a3;
    LOWORD(v20) = 1026;
    *(_DWORD *)((char *)&v20 + 2) = a4;
    HIWORD(v20) = 1026;
    v21[0] = a5;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#irat streamingInfo\", \"isValidMetrics\":%{public}hhd, \"downlinkBandwidth\":%{public}d, \"isStalled\":%{public}hhd, \"latency\":%{public}d}", (uint8_t *)&v14, 0x2Au);
  }
  if (a2)
  {
    [*(id *)(a1 + 32) setDownlinkBandwidth:a3];
    [*(id *)(a1 + 32) setIsStalled:a4];
    [*(id *)(a1 + 32) setLatency:a5];
  }
  [*(id *)(v10 + 384) writeSecondaryObject:*(void *)(a1 + 32) collectedAt:[*(id *)(a1 + 32) location] toField:5];
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102315808);
  }
  __int16 v12 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v13 = *(void *)(a1 + 32);
    int v14 = 68289795;
    int v15 = 0;
    __int16 v16 = 2082;
    long long v17 = "";
    __int16 v18 = 2050;
    *(void *)uint64_t v19 = 0;
    *(_WORD *)&v19[8] = 2081;
    long long v20 = "LTE";
    LOWORD(v21[0]) = 2113;
    *(void *)((char *)v21 + 2) = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s, \"harvest\":%{private, location:escape_only}@}", (uint8_t *)&v14, 0x30u);
  }
}

void sub_101187540(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (a2)
  {
    [*(id *)(a1 + 32) setRscp:[objc_msgSend(objc_msgSend(a2, "rsrp"), "intValue")];
    [*(id *)(a1 + 32) setEcn0:[objc_msgSend(objc_msgSend(a2, "snr"), "intValue")];
  }
  if ((*(uint64_t (**)(void))(**(void **)(v3 + 56) + 152))(*(void *)(v3 + 56)))
  {
    uint64_t v5 = *(void *)(v3 + 352);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_101187800;
    void v9[3] = &unk_102307D70;
    uint64_t v9[4] = *(void *)(a1 + 32);
    v9[5] = v3;
    (*(void (**)(uint64_t, void *))(*(void *)v5 + 152))(v5, v9);
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102315808);
    }
    uint64_t v6 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      int v11 = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2050;
      uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"DiagnosticsSubmission is not allowed\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
    }
    [*(id *)(v3 + 384) writeSecondaryObject:*(void *)(a1 + 32) collectedAt:[*(id *)(a1 + 32) location] toField:8];
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102315808);
    }
    long long v7 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      *(_DWORD *)uint64_t buf = 68289795;
      int v11 = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2050;
      uint64_t v15 = 0;
      __int16 v16 = 2081;
      long long v17 = "NR5G";
      __int16 v18 = 2113;
      uint64_t v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s, \"harvest\":%{private, location:escape_only}@}", buf, 0x30u);
    }
  }
}

void sub_101187800(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a1 + 40);
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102315808);
  }
  int v11 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    int v14 = 68290050;
    int v15 = 0;
    __int16 v16 = 2082;
    long long v17 = "";
    __int16 v18 = 1026;
    *(_DWORD *)uint64_t v19 = a2;
    *(_WORD *)&void v19[4] = 1026;
    *(_DWORD *)&v19[6] = a3;
    LOWORD(v20) = 1026;
    *(_DWORD *)((char *)&v20 + 2) = a4;
    HIWORD(v20) = 1026;
    v21[0] = a5;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#irat streamingInfo\", \"isValidMetrics\":%{public}hhd, \"downlinkBandwidth\":%{public}d, \"isStalled\":%{public}hhd, \"latency\":%{public}d}", (uint8_t *)&v14, 0x2Au);
  }
  if (a2)
  {
    [*(id *)(a1 + 32) setDownlinkBandwidth:a3];
    [*(id *)(a1 + 32) setIsStalled:a4];
    [*(id *)(a1 + 32) setLatency:a5];
  }
  [*(id *)(v10 + 384) writeSecondaryObject:*(void *)(a1 + 32) collectedAt:[*(id *)(a1 + 32) location] toField:8];
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102315808);
  }
  __int16 v12 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v13 = *(void *)(a1 + 32);
    int v14 = 68289795;
    int v15 = 0;
    __int16 v16 = 2082;
    long long v17 = "";
    __int16 v18 = 2050;
    *(void *)uint64_t v19 = 0;
    *(_WORD *)&v19[8] = 2081;
    long long v20 = "NR5G";
    LOWORD(v21[0]) = 2113;
    *(void *)((char *)v21 + 2) = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"type\":%{private, location:escape_only}s, \"harvest\":%{private, location:escape_only}@}", (uint8_t *)&v14, 0x30u);
  }
}

uint64_t sub_101187A30(void *a1)
{
  *a1 = off_102315728;
  id v2 = (std::__shared_weak_count *)a1[47];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[45];
  if (v3) {
    sub_1000DB0A0(v3);
  }

  return sub_1003C0998((uint64_t)a1);
}

void sub_101187A98(void *a1)
{
  *a1 = off_102315728;
  id v2 = (std::__shared_weak_count *)a1[47];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[45];
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1003C0998((uint64_t)a1);

  operator delete();
}

void sub_101187B14(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

uint64_t sub_101187B44()
{
  return sub_1012B748C((uint64_t)&xmmword_102485B70, 0, 2, 2, 1, 60.0, 43200.0, 43200.0);
}

void sub_101187B88(unsigned int a1@<W0>, char a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  sub_100134750(&__str, "CLGeoMapFeatureAccessGeometryVehicle");
  if (a1 < 4) {
    std::string::assign(&__str, (&off_102315900)[a1]);
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 24) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 32) = 0x3FE0000000000000;
  *(_WORD *)(a4 + 40) = 0;
  *(_OWORD *)(a4 + 48) = xmmword_101D474D0;
  *(_WORD *)(a4 + 64) = 1;
  *(_OWORD *)(a4 + 72) = xmmword_101D474E0;
  *(_WORD *)(a4 + 88) = 1;
  *(_DWORD *)(a4 + 92) = 0;
  std::string::operator=((std::string *)a4, &__str);
  *(_DWORD *)(a4 + 24) = a1;
  *(void *)(a4 + 32) = 0x3FE0000000000000;
  *(unsigned char *)(a4 + 41) = a2;
  *(unsigned char *)(a4 + 40) = 1;
  *(double *)(a4 + 48) = (double)a3;
  *(_WORD *)(a4 + 88) = 256;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_101187C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101187CA8(uint64_t a1)
{
  *(void *)a1 = off_102315838;
  *(void *)(a1 + 8) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 31) = 0;
  *(void *)(a1 + 48) = 0xBFF0000000000000;
  sub_101171D90(a1 + 56);
  unsigned int v2 = 5489;
  *(_DWORD *)(a1 + 96) = 5489;
  uint64_t v3 = 1;
  for (uint64_t i = 25; i != 648; ++i)
  {
    int v5 = 1812433253 * (v2 ^ (v2 >> 30));
    unsigned int v2 = v5 + v3;
    *(_DWORD *)(a1 + 4 * i) = i + v5 - 24;
    ++v3;
  }
  unsigned int v6 = 0;
  *(void *)(a1 + 2632) = 0;
  *(void *)(a1 + 2624) = 0;
  *(void *)(a1 + 2592) = 0;
  *(void *)(a1 + 2608) = 0;
  *(void *)(a1 + 2600) = 0;
  *(void *)(a1 + 2616) = a1 + 2624;
  *(void *)(a1 + 2640) = 0xBFF0000000000000;
  uint64_t v7 = 1;
  uint64_t v8 = 25;
  *(_DWORD *)(a1 + 96) = 0;
  do
  {
    int v9 = 1812433253 * (v6 ^ (v6 >> 30));
    unsigned int v6 = v9 + v7;
    *(_DWORD *)(a1 + 4 * v8) = v8 + v9 - 24;
    ++v7;
    ++v8;
  }
  while (v8 != 648);
  *(void *)(a1 + 2592) = 0;
  sub_100F85E90();
  return a1;
}

void sub_101187DB8(_Unwind_Exception *a1)
{
  long long v4 = v3;
  sub_10082AF3C(v2, *v4);
  unsigned int v6 = *(std::__shared_weak_count **)(v1 + 24);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_101187DE8(uint64_t a1)
{
  *(void *)a1 = off_102315838;
  if (!*(unsigned char *)(a1 + 33))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023158E0);
    }
    uint64_t v2 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLMM,CLGCZ,destroy geocodec malloc zone,~CLGeoMapFeatureAccessGeometry()", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023158E0);
      }
      int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLMapGeometry::~CLMapGeometry()", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3) {
      sub_1011898F0(v3);
    }
    long long v4 = *(void **)(a1 + 2600);
    if (v4) {
      [v4 clearAllTiles];
    }
    int v5 = *(void **)(a1 + 2608);
    if (v5)
    {

      *(void *)(a1 + 2608) = 0;
    }
    unsigned int v6 = *(void **)(a1 + 2600);
    if (v6)
    {

      *(void *)(a1 + 2600) = 0;
    }
    GEOResetGeoCodecsAllocator();
  }
  sub_10082AF3C(a1 + 2616, *(char **)(a1 + 2624));
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 24);
  if (v7) {
    sub_1000DB0A0(v7);
  }
  return a1;
}

void sub_101187FF8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

id sub_101188004(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    sub_1011898F0(v4);
  }
  id result = *(id *)(a1 + 2600);
  switch(a2)
  {
    case 0:
      id result = [result clearRoadTiles];
      break;
    case 1:
      id result = [result clearBuildingTiles];
      break;
    case 2:
      id result = _[result clearTransitTiles];
      break;
    case 3:
      id result = [result clearRunningTrackTiles];
      break;
    case 4:
      id result = [result clearAllTiles];
      break;
    default:
      return result;
  }
  return result;
}

void sub_101188110(uint64_t a1, int a2, int a3, int a4)
{
  if (!*(unsigned char *)(a1 + 32) || *(unsigned __int8 *)(a1 + 33) != a2 || *(unsigned __int8 *)(a1 + 34) != a3)
  {
    *(unsigned char *)(a1 + 32) = 1;
    *(unsigned char *)(a1 + 33) = a2;
    *(unsigned char *)(a1 + 34) = a3;
    if (a2)
    {
      unsigned int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      sub_101187B88(v6, *(unsigned char *)(a1 + 34), a4, (uint64_t)&__str);
      uint64_t v7 = *(void *)(a1 + 16);
      if (v7)
      {
        std::string::operator=((std::string *)(v7 + 128), &__str);
        *(_OWORD *)(v7 + 168) = v17;
        *(_OWORD *)(v7 + 184) = v18;
        *(_OWORD *)(v7 + 200) = v19;
        *(void *)(v7 + 216) = v20;
        *(_OWORD *)(v7 + 152) = v16;
      }
      else
      {
        sub_10082AB54((uint64_t **)&__str, buf);
        long long v11 = *(_OWORD *)buf;
        *(void *)uint64_t buf = 0;
        *(void *)&uint8_t buf[8] = 0;
        __int16 v12 = *(std::__shared_weak_count **)(a1 + 24);
        *(_OWORD *)(a1 + 16) = v11;
        if (v12)
        {
          sub_1000DB0A0(v12);
          if (*(void *)&buf[8]) {
            sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
          }
        }
      }
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023158E0);
      }
      uint64_t v8 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEFAULT))
      {
        p_str = &__str;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)uint64_t buf = 136446978;
        *(void *)&uint8_t buf[4] = p_str;
        *(_WORD *)&unsigned char buf[12] = 1026;
        *(_DWORD *)&unsigned char buf[14] = BYTE1(v17);
        __int16 v30 = 1026;
        int v31 = v20;
        __int16 v32 = 1026;
        int v33 = a4;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CLMM,%{public}s,initialized maps buffer,xpc,%{public}d,waitForQueryComplete,%{public}d,radius,%{public}d", buf, 0x1Eu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023158E0);
        }
        uint64_t v13 = &__str;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v13 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        int v21 = 136446978;
        long long v22 = v13;
        __int16 v23 = 1026;
        int v24 = BYTE1(v17);
        __int16 v25 = 1026;
        int v26 = v20;
        __int16 v27 = 1026;
        int v28 = a4;
        int v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapGeometry::initialize(const BOOL, const BOOL, const int)", "%s\n", v14);
        if (v14 != buf) {
          free(v14);
        }
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      uint64_t v10 = *(void (**)(void))(*(void *)a1 + 24);
      v10();
    }
  }
}

void sub_101188488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_1011884B4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (*(char *)(*a2 + 71) < 0) {
    sub_1000DC48C(&__p, *(void **)(v4 + 48), *(void *)(v4 + 56));
  }
  else {
    std::string __p = *(std::string *)(v4 + 48);
  }
  std::string::operator=((std::string *)(a1 + 128), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *a2;
  *(void *)(a1 + 112) = *(void *)*a2;
  *(void *)(a1 + 120) = *(void *)(v5 + 20);
  *(_OWORD *)(a1 + 152) = *((_OWORD *)a2 + 2);
  double result = *((float *)a2 + 6);
  *(double *)(a1 + 168) = result;
  return result;
}

void sub_101188550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10118856C(uint64_t a1)
{
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023158E0);
  }
  uint64_t v2 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(_DWORD *)(a1 + 36);
    int v4 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)uint64_t buf = 67240448;
    int v7 = v3;
    __int16 v8 = 1026;
    int v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLMM,MapsAPICallCount,%{public}d,MapsAPIQueryContinuousFailCount,%{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023158E0);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapGeometry::logMapsAPICallCount() const", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

BOOL sub_101188738(void *a1)
{
  if (*((unsigned char *)a1 + 33) && (uint64_t v2 = a1[2]) != 0) {
    int v3 = (int *)(v2 + 124);
  }
  else {
    int v3 = (int *)(a1 + 5);
  }
  int v4 = *v3;
  if (*v3 < 6) {
    goto LABEL_9;
  }
  double v5 = *((double *)a1 + 6);
  if (v5 < 0.0)
  {
    double v5 = sub_10016C458();
    *((double *)a1 + 6) = v5;
  }
  double v6 = vabdd_f64(v5, sub_10016C458());
  if (v6 < 60.0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023158E0);
    }
    uint64_t v13 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      int v14 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
      int v15 = (*(uint64_t (**)(void *))(*a1 + 112))(a1);
      long long v16 = "road";
      *(_DWORD *)uint64_t buf = 67240962;
      int v19 = v14;
      __int16 v20 = 2082;
      if (v15) {
        long long v16 = "building";
      }
      int v21 = v16;
      __int16 v22 = 1026;
      int v23 = v4;
      __int16 v24 = 2050;
      double v25 = v6;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "CLMM,shouldBackOffFromNetworkAccess,1,geometryType,%{public}d,type,%{public}s,failCount,%{public}d,timeSinceLastFail,%{public}.1lf", buf, 0x22u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023158E0);
      }
      (*(void (**)(void *))(*a1 + 16))(a1);
      (*(uint64_t (**)(void *))(*a1 + 112))(a1);
      long long v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMapGeometry::shouldBackOffFromNetworkAccess()", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    return 1;
  }
  else
  {
LABEL_9:
    a1[6] = 0xBFF0000000000000;
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023158E0);
    }
    int v7 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      int v8 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
      int v9 = (*(uint64_t (**)(void *))(*a1 + 112))(a1);
      uint64_t v10 = "road";
      *(_DWORD *)uint64_t buf = 67240706;
      int v19 = v8;
      if (v9) {
        uint64_t v10 = "building";
      }
      __int16 v20 = 2082;
      int v21 = v10;
      __int16 v22 = 1026;
      int v23 = v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLMM,shouldBackOffFromNetworkAccess,0,geometryType,%{public}d,type,%{public}s,failCount,%{public}d", buf, 0x18u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023158E0);
      }
      (*(void (**)(void *))(*a1 + 16))(a1);
      (*(uint64_t (**)(void *))(*a1 + 112))(a1);
      __int16 v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMapGeometry::shouldBackOffFromNetworkAccess()", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_101188CD4(uint64_t a1, double a2, CLLocationDegrees a3, CLLocationDegrees a4)
{
  if (!*(unsigned char *)(a1 + 33)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    return 0;
  }
  if (*(unsigned char *)(v5 + 192))
  {
    BOOL v9 = sub_101188738((void *)a1);
    uint64_t v5 = *(void *)(a1 + 16);
    if (v9) {
      *(unsigned char *)(v5 + 192) = 0;
    }
  }
  double v10 = *(double *)(v5 + 176);

  return sub_100D20C24(v5, 0, 0, 1, a2, a3, a4, v10);
}

BOOL sub_101188D84(uint64_t a1, uint64_t a2, double **a3, char a4, double *a5, int a6)
{
  if (!a6) {
    return 0;
  }
  uint64_t v10 = 8 * a6;
  double v11 = 0.0;
  do
  {
    double v12 = *a5++;
    double v11 = v11 + v12;
    v10 -= 8;
  }
  while (v10);
  int v14 = *a3;
  uint64_t v13 = (std::__shared_weak_count *)a3[1];
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  double v15 = v11 / (double)a6;
  if (!v14)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023158E0);
    }
    int v19 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "CLMM, NULL road", (uint8_t *)buf, 2u);
    }
    double v17 = 0.0;
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_35;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_16;
    }
    goto LABEL_99;
  }
  uint64_t v16 = (*((void *)v14 + 18) - *((void *)v14 + 17)) >> 4;
  if ((int)v16 <= 0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023158E0);
    }
    int v21 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,CoordinateCount is 0", (uint8_t *)buf, 2u);
    }
    double v17 = 0.0;
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_35;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_96;
    }
    goto LABEL_100;
  }
  double v17 = 0.0;
  if (v16 == 1)
  {
    char v18 = 1;
    goto LABEL_36;
  }
  sub_10039C4B4(v14);
  uint64_t v22 = (uint64_t)(*((void *)v14 + 21) - *((void *)v14 + 20)) >> 3;
  if (v22 != v16 - 1)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023158E0);
    }
    __int16 v30 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,inconsistent array size", (uint8_t *)buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_35;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_96;
    }
    goto LABEL_100;
  }
  sub_10039C4B4(v14);
  int v23 = (double *)(a1 + 56);
  if (v15 >= 0.000001)
  {
    if (v15 >= 0.999999)
    {
      uint64_t v45 = *((void *)v14 + 17) + 16 * v22;
      double v25 = *(double *)v45;
      double v17 = *(double *)(v45 + 8);
      double v46 = sub_10071B58C(v23, *(double *)(v45 - 16), *(double *)(v45 - 8), *(double *)v45, v17);
LABEL_78:
      double v29 = v46;
      goto LABEL_79;
    }
    uint64_t v38 = (double *)*((void *)v14 + 20);
    id v39 = (double *)*((void *)v14 + 21);
    if (v38 != v39)
    {
      double v40 = 0.0;
      int v41 = 2;
      uint64_t v42 = 24;
      while (1)
      {
        double v43 = *v38 / v14[5];
        if (vabdd_f64(v15, v40 + v43) < 0.000001) {
          break;
        }
        if (v40 + v43 > v15)
        {
          uint64_t v58 = (double *)(*((void *)v14 + 17) + v42);
          double v60 = *(v58 - 3);
          double v59 = *(v58 - 2);
          double v61 = *(v58 - 1);
          double v62 = sub_1011717B4(v59, *v58);
          double v63 = (v15 - v40) / v43;
          sub_10005B720(v59 + v62 * v63);
          double v17 = v64;
          long long v65 = (double *)(*((void *)v14 + 17) + v42);
          double v66 = *(v65 - 3);
          double v67 = *(v65 - 2);
          double v68 = *(v65 - 1);
          double v69 = *v65;
          buf[0].__r_.__value_.__r.__words[0] = 0;
          uint64_t v71 = 0;
          __y[0] = 0.0;
          sub_1000F17A8(v23, (double *)buf, __y, (double *)&v71, v66, v67, 0.0, v68, v69, 0.0);
          double v25 = v60 + (v61 - v60) * v63;
          goto LABEL_27;
        }
        ++v38;
        v42 += 16;
        ++v41;
        double v40 = v40 + v43;
        if (v38 == v39) {
          goto LABEL_70;
        }
      }
      if (v41 < (int)v16)
      {
        long long v47 = (double *)(*((void *)v14 + 17) + v42);
        double v25 = *(v47 - 1);
        double v17 = *v47;
        double v48 = *(v47 - 3);
        double v49 = *(v47 - 2);
        buf[0].__r_.__value_.__r.__words[0] = 0;
        uint64_t v71 = 0;
        __y[0] = 0.0;
        sub_1000F17A8(v23, (double *)buf, __y, (double *)&v71, v48, v49, 0.0, v25, v17, 0.0);
        long double v50 = __y[0];
        long double v51 = *(double *)&buf[0].__r_.__value_.__l.__data_;
        uint64_t v52 = *((void *)v14 + 17) + v42;
        double v53 = *(double *)(v52 + 8);
        double v54 = *(double *)(v52 + 16);
        buf[0].__r_.__value_.__r.__words[0] = 0;
        uint64_t v71 = 0;
        __y[0] = 0.0;
        sub_1000F17A8(v23, (double *)buf, __y, (double *)&v71, v25, v17, 0.0, v53, v54, 0.0);
        double v55 = atan2(v50, v51);
        if (v55 < 0.0) {
          double v55 = v55 + 6.28318531;
        }
        double v56 = v55 * 57.2957795;
        double v57 = atan2(__y[0], *(long double *)&buf[0].__r_.__value_.__l.__data_);
        if (v57 < 0.0) {
          double v57 = v57 + 6.28318531;
        }
        sub_1004BAC08(v56, v57 * 57.2957795);
        goto LABEL_78;
      }
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023158E0);
      }
      long long v70 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_ERROR, "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount", (uint8_t *)buf, 2u);
      }
      double v17 = 0.0;
      if (!sub_10013D1A0(115, 0))
      {
LABEL_35:
        char v18 = 0;
LABEL_36:
        double v25 = 0.0;
        double v29 = 0.0;
        if (!v13) {
          goto LABEL_38;
        }
        goto LABEL_37;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_16;
      }
LABEL_99:
      dispatch_once(&qword_102419430, &stru_1023158E0);
LABEL_16:
      LOWORD(__y[0]) = 0;
      __int16 v20 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", (const char *)v20);
      goto LABEL_97;
    }
LABEL_70:
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023158E0);
    }
    uint64_t v44 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,Could not interpolate to intended projection", (uint8_t *)buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_35;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1)
    {
LABEL_96:
      LOWORD(__y[0]) = 0;
      __int16 v20 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", (const char *)v20);
LABEL_97:
      if (v20 != buf) {
        free(v20);
      }
      goto LABEL_35;
    }
LABEL_100:
    dispatch_once(&qword_102419430, &stru_1023158E0);
    goto LABEL_96;
  }
  __int16 v24 = (double *)*((void *)v14 + 17);
  double v25 = *v24;
  double v17 = v24[1];
  double v26 = v24[2];
  double v27 = v24[3];
  buf[0].__r_.__value_.__r.__words[0] = 0;
  uint64_t v71 = 0;
  __y[0] = 0.0;
  sub_1000F17A8(v23, (double *)buf, __y, (double *)&v71, v25, v17, 0.0, v26, v27, 0.0);
LABEL_27:
  double v28 = atan2(__y[0], *(long double *)&buf[0].__r_.__value_.__l.__data_);
  if (v28 < 0.0) {
    double v28 = v28 + 6.28318531;
  }
  double v29 = v28 * 57.2957795;
LABEL_79:
  char v18 = 1;
  if (v13) {
LABEL_37:
  }
    sub_1000DB0A0(v13);
LABEL_38:
  if (v18)
  {
    if ((a4 & 1) == 0)
    {
      BOOL v31 = v29 >= 360.0 || v29 < 0.0;
      double v32 = dbl_101DAB0C0[v29 > 180.0];
      if (v31) {
        double v32 = -0.0;
      }
      double v29 = v29 + v32;
    }
    int v33 = *a3;
    if (*((char *)*a3 + 71) < 0) {
      sub_1000DC48C(buf, *((void **)v33 + 6), *((void *)v33 + 7));
    }
    else {
      buf[0] = *(std::string *)((unsigned char *)v33 + 2);
    }
    std::string::operator=((std::string *)(a2 + 128), buf);
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    uint64_t v37 = *a3;
    *(double *)(a2 + 112) = **a3;
    *(double *)(a2 + 120) = *(double *)((char *)v37 + 20);
    *(double *)(a2 + 152) = v25;
    *(double *)(a2 + 160) = v17;
    *(double *)(a2 + 168) = v29;
    *(double *)(a2 + 272) = v15;
    return 1;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023158E0);
  }
  long long v34 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "CLMM,interpolateOnRoad,interpolateProjections returned false", (uint8_t *)buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023158E0);
    }
    LOWORD(__y[0]) = 0;
    uint64_t v36 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMapGeometry::interpolateOnRoad(CLMapCrumb &, const CLMapRoadPtr &, BOOL, const double *, int) const", "%s\n", (const char *)v36);
    if (v36 != buf) {
      free(v36);
    }
    return 0;
  }
  return result;
}

void sub_1011898B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1011898F0(uint64_t a1)
{
  sub_100D2029C(a1);
  int v3 = *(void **)(a1 + 248);
  uint64_t v2 = a1 + 248;
  sub_10082AFAC(v2 - 8, v3);
  *(void *)(v2 - 8) = v2;
  *(void *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  sub_10082AFAC(v2 + 16, *(void **)(v2 + 24));
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 16) = v2 + 24;
  sub_10082AF3C(v2 + 40, *(char **)(v2 + 48));
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 56) = 0;
  *(void *)(v2 + 40) = v2 + 48;
  *(void *)(v2 + 72) = 0;

  sub_1000C59A8((uint64_t *)(v2 + 80));
}

uint64_t sub_101189970(uint64_t a1, uint64_t a2, double a3)
{
  return (*(uint64_t (**)(double, double, double))(*(void *)a1 + 40))(*(double *)(a2 + 56), *(double *)(a2 + 64), a3);
}

void sub_10118999C(uint64_t a1, double a2, double a3, double a4)
{
  if (!*(unsigned char *)(a1 + 33))
  {
    uint64_t v5 = *(void **)(a1 + 2600);
    if (v5)
    {
      if ([v5 allowNetworkTileLoad])
      {
        ++*(_DWORD *)(a1 + 36);
        BOOL v9 = *(void **)(a1 + 2600);
        [v9 preloadRoadTilesNear:&stru_1023158B0 radius:a2 completionHandler:a3];
      }
    }
    else
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023158E0);
      }
      uint64_t v10 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "CLMM,provideCacheHint,fGEOMapFeatureAccess is unexpectedly nil", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1023158E0);
        }
        double v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLMapGeometry::provideCacheHint(double, double, double)", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
    }
  }
}

void sub_101189BC4(id a1, NSError *a2)
{
  if (a2)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023158E0);
    }
    int v3 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134349571;
      NSInteger v6 = [(NSError *)a2 code];
      __int16 v7 = 2114;
      int v8 = [(NSError *)a2 domain];
      __int16 v9 = 2113;
      uint64_t v10 = [(NSError *)a2 localizedDescription];
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "CLMM,Warning,provideCacheHint reported error:%{public}lld (%{public}@) \"%{private}@\"", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1023158E0);
      }
      [(NSError *)a2 code];
      [(NSError *)a2 domain];
      [(NSError *)a2 localizedDescription];
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMapGeometry::provideCacheHint(double, double, double)_block_invoke", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

uint64_t sub_101189DF0()
{
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1023158E0);
  }
  int v0 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Base function called for moveOnRouteRoads", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1023158E0);
    }
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLMapGeometry::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
  return 0;
}

void sub_101189F7C(id a1)
{
  qword_102419438 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

double sub_101189FAC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 512) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 704) = xmmword_101DAB140;
  *(_OWORD *)(a1 + 720) = unk_101DAB150;
  *(_OWORD *)(a1 + 736) = xmmword_101DAB160;
  *(_OWORD *)(a1 + 748) = *(long long *)((char *)&xmmword_101DAB160 + 12);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 552) = 0xFFF0000000000000;
  *(void *)(a1 + 600) = 0xFFF0000000000000;
  *(int64x2_t *)(a1 + 608) = vdupq_n_s64(0xFFF0000000000000);
  *(void *)(a1 + 624) = 0xFFF0000000000000;
  *(void *)(a1 + 560) = 0x3F747AE147AE147BLL;
  *(void *)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(unsigned char *)(a1 + 352) = 0;
  *(_WORD *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_DWORD *)(a1 + 520) = 0;
  *(void *)(a1 + 528) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 568) = xmmword_101DAB180;
  *(_OWORD *)(a1 + 584) = unk_101DAB190;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 695) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  return result;
}

void *sub_10118A0B8(double *a1, uint64_t a2)
{
  float64_t v63 = 0.0;
  double v64 = 0.0;
  double v4 = *(double *)(a2 + 24);
  if (v4 <= 0.0)
  {
    double v4 = a1[30];
    if (v4 <= 0.0)
    {
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102315920);
      }
      uint64_t v5 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[RunningSpeedKF] feedStepCountEntry - firstStepTime & previous step count unset. Assuming 1 epoch prior", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_102315920);
        }
        LOWORD(v65) = 0;
        double v54 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLPedometer::RunningSpeedKF::feedStepCountEntry(const CLExtendedStepCountEntry &)", "%s\n", v54);
        if (v54 != (char *)buf) {
          free(v54);
        }
      }
      double v4 = *(double *)(a2 + 16) + -2.56;
    }
  }
  double v6 = *(double *)(a2 + 232);
  double v7 = *(double *)(a2 + 48);
  double v59 = v6 - v4;
  double v60 = *(double *)(a2 + 256);
  if (v7 <= 0.0) {
    double v8 = a1[66];
  }
  else {
    double v8 = *(double *)(a2 + 280) / v7;
  }
  double v57 = *(double *)(a2 + 232);
  double v58 = vabdd_f64(a1[64], v4);
  int v62 = 0;
  char v61 = 0;
  BOOL v9 = v7 <= 0.0;
  if (v60 <= 0.0) {
    BOOL v9 = 1;
  }
  int v10 = v59 <= 0.0 || v9;
  if (v10 == 1)
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102315920);
    }
    double v11 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134218496;
      *(double *)long long v72 = v7;
      *(_WORD *)&_OWORD v72[8] = 2048;
      *(double *)&v72[10] = v60;
      *(_WORD *)&v72[18] = 2048;
      *(double *)&v72[20] = v59;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[RunningSpeedKF] feedStepCountEntry - zero deltaPedDist (%.2f), deltaCalPedDist (%.2f) and/or deltaTime (%.2f)", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102315920);
      }
      int v65 = 134218496;
      double v66 = v7;
      __int16 v67 = 2048;
      double v68 = v60;
      __int16 v69 = 2048;
      double v70 = v59;
      uint64_t v52 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPedometer::RunningSpeedKF::feedStepCountEntry(const CLExtendedStepCountEntry &)", "%s\n", v52);
      if (v52 != (char *)buf) {
        free(v52);
      }
    }
    BOOL v12 = 0;
    goto LABEL_37;
  }
  if (!*(unsigned char *)(*(void *)a1 + 80))
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102315920);
    }
    int v14 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
    {
      int v15 = *(unsigned __int8 *)(*(void *)a1 + 80);
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)long long v72 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "[RunningSpeedKF] feedStepCountEntry - odometerSpeed is unavailable (isActive=%{public}d)", buf, 8u);
    }
    double v13 = 2.96714;
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102315920);
      }
      int v55 = *(unsigned __int8 *)(*(void *)a1 + 80);
      int v65 = 67240192;
      LODWORD(v66) = v55;
      double v56 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPedometer::RunningSpeedKF::feedStepCountEntry(const CLExtendedStepCountEntry &)", "%s\n", v56);
      if (v56 != (char *)buf) {
        free(v56);
      }
    }
    goto LABEL_33;
  }
  double v13 = 2.96714;
  if (!sub_10118ABE0(a1, &v62, &v61, v6) || !sub_10118AF40((void **)a1, &v63, v4, v57))
  {
LABEL_33:
    BOOL v12 = 0;
    goto LABEL_34;
  }
  sub_10118B7DC((uint64_t)a1, &v63, v62, v60);
  BOOL v12 = a1[71] < 100.0;
  double v13 = dbl_101DAB120[a1[71] < 100.0];
LABEL_34:
  double v16 = 0.148357;
  if (v58 < 8.25) {
    double v16 = v13;
  }
  a1[74] = v16;
LABEL_37:
  a1[69] = a1[69] + a1[70];
  double v17 = sub_10118B9F4(a1);
  double v18 = sub_10118C050(a1);
  if (*(unsigned char *)(a2 + 248))
  {
    if (v8 > 0.0)
    {
      if (*(unsigned char *)(a2 + 288))
      {
        double v20 = v18;
        if (vabdd_f64(v8, a1[66]) > 0.001 && vabdd_f64(v18, v17) > 0.1)
        {
          if (qword_102419030 != -1) {
            dispatch_once(&qword_102419030, &stru_102315920);
          }
          int v21 = qword_102419038;
          if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v22 = *((void *)a1 + 66);
            int v23 = *(unsigned __int8 *)(a2 + 288);
            *(_DWORD *)uint64_t buf = 68290306;
            *(_DWORD *)long long v72 = 0;
            *(_WORD *)&v72[4] = 2082;
            *(void *)&v72[6] = "";
            *(_WORD *)&v72[14] = 2050;
            *(double *)&v72[16] = v8;
            *(_WORD *)&v72[24] = 2050;
            *(void *)&v72[26] = v22;
            __int16 v73 = 1026;
            int v74 = v23;
            __int16 v75 = 1026;
            int v76 = (int)v17;
            __int16 v77 = 1026;
            int v78 = (int)v20;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"[RunningSpeedKF] Reset fDistanceBuffer\", \"currentkValue\":\"%{public}f\", \"previouskValue\":\"%{public}f\", \"energyIsCalibrated\":%{public}u, \"biasFactor\":%{public}d, \"biasFactorInstantaneous\":%{public}d}", buf, 0x38u);
          }
          __int16 v24 = (void **)*((void *)a1 + 80);
          uint64_t v25 = *((void *)a1 + 81);
          a1[84] = 0.0;
          unint64_t v26 = v25 - (void)v24;
          if (v26 >= 0x11)
          {
            do
            {
              operator delete(*v24);
              __int16 v24 = (void **)(*((void *)a1 + 80) + 8);
              *((void *)a1 + 80) = v24;
              unint64_t v26 = *((void *)a1 + 81) - (void)v24;
            }
            while (v26 > 0x10);
          }
          double v17 = 0.0;
          if (v26 >> 3 == 1)
          {
            uint64_t v27 = 85;
          }
          else
          {
            if (v26 >> 3 != 2) {
              goto LABEL_53;
            }
            uint64_t v27 = 170;
          }
          *((void *)a1 + 83) = v27;
        }
      }
    }
  }
LABEL_53:
  a1[66] = v8;
  if (v10)
  {
    int v28 = *((_DWORD *)a1 + 130);
    *((_DWORD *)a1 + 130) = v28 + 1;
    if (v28 < 1)
    {
      int v30 = 1;
      double v31 = -INFINITY;
      double v32 = -INFINITY;
    }
    else
    {
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102315920);
      }
      double v29 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "[RunningSpeedKF] feedStepCountEntry - no valid non-zero measurements for 2 epochs, resetting KF", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_102315920);
        }
        LOWORD(v65) = 0;
        double v53 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLPedometer::RunningSpeedKF::feedStepCountEntry(const CLExtendedStepCountEntry &)", "%s\n", v53);
        if (v53 != (char *)buf) {
          free(v53);
        }
      }
      int v30 = 0;
      *(_OWORD *)(a1 + 1) = 0u;
      *((int64x2_t *)a1 + 38) = vdupq_n_s64(0xFFF0000000000000);
      *(_OWORD *)(a1 + 71) = xmmword_101DAB180;
      *(_OWORD *)(a1 + 73) = unk_101DAB190;
      *((_OWORD *)a1 + 21) = 0u;
      *((_OWORD *)a1 + 24) = 0u;
      *((_OWORD *)a1 + 25) = 0u;
      *((_OWORD *)a1 + 26) = 0u;
      *((_OWORD *)a1 + 27) = 0u;
      *((_OWORD *)a1 + 28) = 0u;
      *((_OWORD *)a1 + 29) = 0u;
      *((_OWORD *)a1 + 30) = 0u;
      *((_OWORD *)a1 + 31) = 0u;
      *(_DWORD *)((char *)a1 + 695) = 0;
      *(_OWORD *)(a1 + 37) = 0u;
      *(_OWORD *)(a1 + 39) = 0u;
      *(_OWORD *)(a1 + 33) = 0u;
      *(_OWORD *)(a1 + 35) = 0u;
      *(_OWORD *)(a1 + 29) = 0u;
      *(_OWORD *)(a1 + 31) = 0u;
      *(_OWORD *)(a1 + 25) = 0u;
      *(_OWORD *)(a1 + 27) = 0u;
      *(_OWORD *)(a1 + 21) = 0u;
      *(_OWORD *)(a1 + 23) = 0u;
      *(_OWORD *)(a1 + 17) = 0u;
      *(_OWORD *)(a1 + 19) = 0u;
      *(_OWORD *)(a1 + 13) = 0u;
      *(_OWORD *)(a1 + 15) = 0u;
      *(_OWORD *)(a1 + 9) = 0u;
      *(_OWORD *)(a1 + 11) = 0u;
      *(_OWORD *)(a1 + 5) = 0u;
      *(_OWORD *)(a1 + 7) = 0u;
      *(_OWORD *)(a1 + 3) = 0u;
      *(_OWORD *)(a1 + 67) = 0u;
      a1[75] = -INFINITY;
      a1[78] = -INFINITY;
      *(_OWORD *)(a1 + 69) = xmmword_101DAB130;
      a1[41] = 0.0;
      *((unsigned char *)a1 + 352) = 0;
      *(_OWORD *)(a1 + 45) = 0u;
      *((_WORD *)a1 + 188) = 0;
      *((_DWORD *)a1 + 130) = 0;
      *(_OWORD *)(a1 + 85) = 0u;
      double v31 = -INFINITY;
      double v32 = -INFINITY;
      a1[66] = 0.0;
    }
  }
  else
  {
    double v33 = v7 * v17;
    if (v17 <= 0.0) {
      double v33 = v60;
    }
    double v31 = v33 / v59;
    if (v12)
    {
      double v34 = v63;
      v19.f64[0] = v7;
      sub_10118C108(a1, v4, v19, v63);
      double v32 = v34 / v64;
      sub_10118C180((uint64_t)a1, v62, v32, v31);
    }
    else
    {
      sub_10118C2C0((uint64_t)a1, v33 / v59);
      double v32 = -INFINITY;
    }
    int v30 = 0;
    *((_DWORD *)a1 + 130) = 0;
  }
  sub_10118C350(a1, v4);
  double Current = CFAbsoluteTimeGetCurrent();
  uint64_t v36 = *((void *)a1 + 68);
  char v38 = sub_10118C6C0(v37, (uint64_t)(a1 + 67), v30);
  float64_t v40 = v63;
  double v39 = v64;
  long long v41 = *(_OWORD *)(a1 + 69);
  uint64_t v42 = *((void *)a1 + 77);
  uint64_t v43 = *((void *)a1 + 78);
  uint64_t v44 = *((void *)a1 + 71);
  long long v45 = *((_OWORD *)a1 + 37);
  uint64_t v46 = *((void *)a1 + 76);
  int v47 = v62;
  if (v58 >= 8.25)
  {
    char v48 = 0;
    char v49 = 0;
  }
  else
  {
    char v48 = *((unsigned char *)a1 + 696);
    char v49 = *((unsigned char *)a1 + 697);
  }
  char v50 = v61;
  a1[41] = v4;
  a1[42] = v57;
  *((void *)a1 + 43) = v36;
  *((unsigned char *)a1 + 352) = v38;
  a1[45] = v31;
  a1[46] = v32;
  *((unsigned char *)a1 + 376) = v12;
  *((unsigned char *)a1 + 377) = v10 ^ 1;
  a1[48] = v7;
  a1[49] = v60;
  a1[50] = v40;
  a1[51] = v59;
  a1[52] = v39;
  a1[53] = Current - v57;
  a1[54] = v17;
  *(_OWORD *)(a1 + 55) = v41;
  *((void *)a1 + 57) = v42;
  *((void *)a1 + 58) = v43;
  *((void *)a1 + 59) = v44;
  *((_OWORD *)a1 + 30) = v45;
  *((void *)a1 + 62) = v46;
  *((_DWORD *)a1 + 126) = v47;
  *((unsigned char *)a1 + 508) = v48;
  *((unsigned char *)a1 + 509) = v49;
  *((unsigned char *)a1 + 510) = v58 < 8.25;
  *((unsigned char *)a1 + 511) = v50;
  return memcpy(a1 + 1, (const void *)a2, 0x140uLL);
}

BOOL sub_10118ABE0(void *a1, _DWORD *a2, unsigned char *a3, double a4)
{
  *a2 = 0;
  if (((*(uint64_t (**)(void, unsigned char *))(*(void *)*a1 + 24))(*a1, v12) & 1) == 0)
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102315920);
    }
    double v8 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134349056;
      double v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[RunningSpeedKF] No recent odometer value (%{public}.2f)", buf, 0xCu);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102315920);
    }
    int v16 = 134349056;
    double v17 = a4;
    BOOL v9 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPedometer::RunningSpeedKF::getOdometerProperties(CFAbsoluteTime, CLOdometerQuality::Quality &, BOOL &) const", "%s\n");
LABEL_21:
    if (v9 != buf) {
      free(v9);
    }
    return 0;
  }
  *a3 = v15;
  *a2 = v14;
  if (v13 > 0.0) {
    return 1;
  }
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_102315920);
  }
  int v10 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 134217984;
    double v19 = v13;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[RunningSpeedKF] invalid odometer value: %.2f", buf, 0xCu);
  }
  BOOL v11 = sub_10013D1A0(115, 0);
  BOOL result = 0;
  if (v11)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102315920);
    }
    int v16 = 134217984;
    double v17 = v13;
    BOOL v9 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLPedometer::RunningSpeedKF::getOdometerProperties(CFAbsoluteTime, CLOdometerQuality::Quality &, BOOL &) const", "%s\n");
    goto LABEL_21;
  }
  return result;
}

BOOL sub_10118AF40(void **a1, double *a2, double a3, double a4)
{
  *a2 = 0.0;
  a2[1] = 0.0;
  if (a3 > a4)
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102315920);
    }
    double v6 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134349312;
      double v43 = a3;
      __int16 v44 = 2050;
      double v45 = a4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "[RunningSpeedKF] calculateDeltaOdometer - time rollback! t1,%{public}f,t2,%{public}f", buf, 0x16u);
    }
    BOOL v7 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v7)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102315920);
      }
      int v30 = 134349312;
      double v31 = a3;
      __int16 v32 = 2050;
      double v33 = a4;
LABEL_20:
      BOOL v11 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLPedometer::RunningSpeedKF::calculateDeltaOdometer(CFAbsoluteTime, CFAbsoluteTime, DeltaOdometerResult &) const", "%s\n");
LABEL_21:
      if (v11 != buf) {
        free(v11);
      }
      return 0;
    }
    return result;
  }
  if (a3 == a4)
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102315920);
    }
    BOOL v9 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134349056;
      double v43 = a3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "[RunningSpeedKF] calculateDeltaOdometer - time did not advance! t=%{public}f", buf, 0xCu);
    }
    BOOL v10 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v10)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102315920);
      }
      int v30 = 134349056;
      double v31 = a3;
      goto LABEL_20;
    }
    return result;
  }
  double v28 = 0.0;
  double v29 = 0.0;
  double v26 = 0.0;
  double v27 = 0.0;
  BOOL v14 = sub_10118CA74(a1, &v29, &v27, a3);
  if (!v14 || !sub_10118CA74(a1, &v28, &v26, a4))
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102315920);
    }
    int v21 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 134349312;
      double v43 = a3;
      __int16 v44 = 2050;
      double v45 = a4;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "[RunningSpeedKF] calculateDeltaOdometer - #warning: failed to interpolate odometer between (startTime, %{public}f, endTime, %{public}f)", buf, 0x16u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102315920);
    }
    int v30 = 134349312;
    double v31 = a3;
    __int16 v32 = 2050;
    double v33 = a4;
LABEL_61:
    BOOL v11 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPedometer::RunningSpeedKF::calculateDeltaOdometer(CFAbsoluteTime, CFAbsoluteTime, DeltaOdometerResult &) const", "%s\n");
    goto LABEL_21;
  }
  double v16 = v28;
  double v15 = v29;
  double v17 = v28 - v29;
  double v19 = v26;
  double v18 = v27;
  if (v28 - v29 >= 0.0 && v26 - v27 >= 0.0)
  {
    if (v26 - v27 != 0.0)
    {
      if (v17 == 0.0)
      {
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_102315920);
        }
        __int16 v24 = qword_102419038;
        if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t buf = 134349569;
          double v43 = a3;
          __int16 v44 = 2050;
          double v45 = a4;
          __int16 v46 = 2049;
          double v47 = v15;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "[RunningSpeedKF] calculateDeltaOdometer - No change in odometer distance (startTime=%{public}.2f, endTime=%{public}.2f, outDist=%{private}.2f)", buf, 0x20u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419030 != -1) {
            dispatch_once(&qword_102419030, &stru_102315920);
          }
          int v30 = 134349569;
          double v31 = a3;
          __int16 v32 = 2050;
          double v33 = a4;
          __int16 v34 = 2049;
          double v35 = v15;
          uint64_t v25 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPedometer::RunningSpeedKF::calculateDeltaOdometer(CFAbsoluteTime, CFAbsoluteTime, DeltaOdometerResult &) const", "%s\n", v25);
          if (v25 != (char *)buf) {
            free(v25);
          }
        }
      }
      *a2 = v17;
      a2[1] = v19 - v18;
      return 1;
    }
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102315920);
    }
    double v20 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 134349568;
      double v43 = a3;
      __int16 v44 = 2050;
      double v45 = a4;
      __int16 v46 = 2050;
      double v47 = v18;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "[RunningSpeedKF] calculateDeltaOdometer - #warning: No change in time (startTime=%{public}.2f, endTime=%{public}.2f, outTime=%{public}.2f)", buf, 0x20u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102315920);
    }
    int v30 = 134349568;
    double v31 = a3;
    __int16 v32 = 2050;
    double v33 = a4;
    __int16 v34 = 2050;
    double v35 = v18;
    goto LABEL_61;
  }
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_102315920);
  }
  uint64_t v22 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 134350336;
    double v43 = a3;
    __int16 v44 = 2050;
    double v45 = a4;
    __int16 v46 = 2048;
    double v47 = v15;
    __int16 v48 = 2048;
    double v49 = v16;
    __int16 v50 = 2050;
    double v51 = v18;
    __int16 v52 = 2050;
    double v53 = v19;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "[RunningSpeedKF] calculateDeltaOdometer - negative interpolation error startTime,%{public}.2f,endTime,%{public}.2f,dist1,%f,dist2,%f,outTime1,%{public}f,outTime2,%{public}f", buf, 0x3Eu);
  }
  BOOL v23 = sub_10013D1A0(115, 0);
  BOOL result = 0;
  if (v23)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102315920);
    }
    int v30 = 134350336;
    double v31 = a3;
    __int16 v32 = 2050;
    double v33 = a4;
    __int16 v34 = 2048;
    double v35 = v15;
    __int16 v36 = 2048;
    double v37 = v16;
    __int16 v38 = 2050;
    double v39 = v18;
    __int16 v40 = 2050;
    double v41 = v19;
    goto LABEL_20;
  }
  return result;
}

void sub_10118B7DC(uint64_t a1, double *a2, int a3, double a4)
{
  if (a3)
  {
    if (a3 == 3)
    {
      uint64_t v7 = 0x3FEF1FE21D96E9BCLL;
    }
    else if (a3 == 2)
    {
      uint64_t v7 = 0x3FE4BFEC13B9F128;
    }
    else
    {
      uint64_t v7 = 0x3FC4BFEC13B9F128;
    }
  }
  else
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102315920);
    }
    double v8 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[RunningSpeedKF] updateOdoMeasurementNoise - #warning unexpected kUnknown odometer quality", buf, 2u);
    }
    BOOL v9 = sub_10013D1A0(115, 2);
    uint64_t v7 = 0x4059400000000000;
    if (v9)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102315920);
      }
      BOOL v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPedometer::RunningSpeedKF::updateOdoMeasurementNoise(const DeltaOdometerResult &, double, CLOdometerQuality::Quality)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
      uint64_t v7 = 0x4059400000000000;
    }
  }
  if (*a2 > a4 * 1.75 || *a2 < a4 * 0.25) {
    uint64_t v7 = 0x4059400000000000;
  }
  *(void *)(a1 + 568) = v7;
}

double sub_10118B9F4(void *a1)
{
  unint64_t v1 = a1[84];
  if (!v1)
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102315920);
    }
    BOOL v14 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "[RunningSpeedKF] calcBiasFactor - empty distance buffer", buf, 2u);
    }
    double v13 = 0.0;
    if (!sub_10013D1A0(115, 2)) {
      return v13;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      goto LABEL_39;
    }
    goto LABEL_16;
  }
  double v3 = (double)v1;
  unint64_t v4 = a1[83];
  unint64_t v5 = v1 + v4 - 1;
  uint64_t v6 = a1[80];
  uint64_t v7 = *(void *)(v6 + 8 * (v5 / 0xAA));
  unint64_t v8 = v5 % 0xAA;
  uint64_t v9 = *(void *)(v6 + 8 * (v4 / 0xAA));
  unint64_t v10 = v4 % 0xAA;
  double v11 = *(double *)(v7 + 24 * v8) - *(double *)(v9 + 24 * v10) + 2.56;
  if (v3 * 2.56 / v11 >= 0.5)
  {
    uint64_t v16 = v7 + 24 * v8;
    uint64_t v17 = v9 + 24 * v10;
    double v18 = *(double *)(v16 + 8) - *(double *)(v17 + 8);
    double v19 = *(double *)(v16 + 16) - *(double *)(v17 + 16);
    if (v19 <= 0.0 || v18 <= 0.0)
    {
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102315920);
      }
      double v20 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134218240;
        double v26 = v18;
        __int16 v27 = 2048;
        double v28 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "[RunningSpeedKF] calcBiasFactor - invalid (ped, ref) buffer distance: %.2f, %.2f", buf, 0x16u);
      }
      double v13 = 0.0;
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_102315920);
        }
        double v15 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "double CLPedometer::RunningSpeedKF::calcBiasFactor() const", "%s\n");
        goto LABEL_17;
      }
      return v13;
    }
    if (v19 > 20.0 && v18 > 0.0) {
      return v19 / v18;
    }
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102315920);
    }
    int v21 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
    {
      unint64_t v22 = a1[84] + a1[83] - 1;
      double v23 = *(double *)(*(void *)(a1[80] + 8 * (v22 / 0xAA)) + 24 * (v22 % 0xAA));
      *(_DWORD *)uint64_t buf = 134218496;
      double v26 = v23;
      __int16 v27 = 2048;
      double v28 = v18;
      __int16 v29 = 2048;
      double v30 = v19;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "[RunningSpeedKF] calcBiasFactor - insufficient distance (latest time, ped, odo): %.2f, %.2f, %.2f", buf, 0x20u);
    }
    double v13 = 0.0;
    if (!sub_10013D1A0(115, 2)) {
      return v13;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
LABEL_39:
    }
      dispatch_once(&qword_102419030, &stru_102315920);
LABEL_16:
    double v15 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "double CLPedometer::RunningSpeedKF::calcBiasFactor() const", "%s\n");
LABEL_17:
    if (v15 != buf) {
      free(v15);
    }
    return v13;
  }
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_102315920);
  }
  BOOL v12 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 134218240;
    double v26 = v3;
    __int16 v27 = 2048;
    double v28 = v11;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "[RunningSpeedKF] calcBiasFactor - fDistanceBuffer has too many gaps (buffer size, buffer duration): %.2f, %.2f", buf, 0x16u);
  }
  double v13 = 0.0;
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 == -1) {
      goto LABEL_16;
    }
    goto LABEL_39;
  }
  return v13;
}

double sub_10118C050(void *a1)
{
  unint64_t v1 = a1[84];
  double result = 0.0;
  if ((int)v1 >= 2)
  {
    unint64_t v3 = (v1 - 2);
    if (v1 <= v3) {
      sub_10000EDDC("deque");
    }
    uint64_t v4 = a1[80];
    uint64_t v5 = a1[83];
    unint64_t v6 = v1 + v5 - 1;
    uint64_t v7 = *(void *)(v4 + 8 * (v6 / 0xAA));
    unint64_t v8 = v6 % 0xAA;
    unint64_t v9 = v5 + v3;
    uint64_t v10 = *(void *)(v4 + 8 * (v9 / 0xAA));
    double v11 = *(double *)(v7 + 24 * v8 + 8) - *(double *)(v10 + 24 * (v9 % 0xAA) + 8);
    if (v11 > 0.0) {
      return (*(double *)(v7 + 24 * v8 + 16) - *(double *)(v10 + 24 * (v9 % 0xAA) + 16)) / v11;
    }
  }
  return result;
}

double sub_10118C108(void *a1, double a2, float64x2_t a3, float64_t a4)
{
  uint64_t v4 = a1[84];
  a3.f64[1] = a4;
  if (v4) {
    a3 = vaddq_f64(*(float64x2_t *)(*(void *)(a1[80] + 8 * ((v4 + a1[83] - 1) / 0xAAuLL))+ 24 * ((v4 + a1[83] - 1) % 0xAAuLL)+ 8), a3);
  }
  double v6 = a2;
  float64x2_t v7 = a3;
  *(void *)&double result = sub_10118D518(a1 + 79, (__n128 *)&v6).n128_u64[0];
  return result;
}

void sub_10118C180(uint64_t a1, int a2, double a3, double a4)
{
  double v8 = *(double *)(a1 + 592);
  double v9 = *(double *)(a1 + 568);
  if (*(unsigned char *)(a1 + 536)) {
    double v10 = *(double *)(a1 + 544);
  }
  else {
    double v10 = (a3 + a4) * 0.5;
  }
  if (*(unsigned char *)(a1 + 536)) {
    double v11 = *(double *)(a1 + 552);
  }
  else {
    double v11 = (v8 + v9) * 0.25;
  }
  double v12 = sub_10118D318(v11, a1, (double *)(a1 + 568));
  double v13 = a4 - v10;
  *(double *)(a1 + 544) = v10 + v14 * (a4 - v10) + 0.0 + v12 * (a3 - v10);
  double v15 = v11 * (1.0 - (v12 + v14 + 0.0));
  *(double *)(a1 + 552) = v15;
  *(double *)(a1 + 600) = v12;
  *(double *)(a1 + 608) = v14;
  double v16 = -(a3 - v10);
  if (a3 - v10 >= 0.0) {
    double v16 = a3 - v10;
  }
  double v17 = v16 / (v9 + v15);
  *(double *)(a1 + 616) = v17;
  double v18 = -v13;
  if (v13 >= 0.0) {
    double v18 = a4 - v10;
  }
  double v19 = v18 / (v8 + v15);
  *(double *)(a1 + 624) = v19;
  if (a2 == 1)
  {
    if (v17 >= v19) {
      double v17 = v19;
    }
    if (v17 > 2.0) {
      goto LABEL_15;
    }
LABEL_17:
    uint64_t v20 = 0x3F747AE147AE147BLL;
    goto LABEL_18;
  }
  if (v19 <= 2.0) {
    goto LABEL_17;
  }
LABEL_15:
  uint64_t v20 = 0x4024000000000000;
LABEL_18:
  *(void *)(a1 + 560) = v20;
  *(unsigned char *)(a1 + 536) = 1;
}

uint64_t sub_10118C2C0(uint64_t result, double a2)
{
  double v2 = *(double *)(result + 544);
  double v3 = *(double *)(result + 552);
  double v4 = *(double *)(result + 592);
  if (!*(unsigned char *)(result + 536))
  {
    double v3 = *(double *)(result + 592);
    double v2 = a2;
  }
  double v5 = v3 / (v4 + v3);
  double v6 = a2 - v2;
  *(double *)(result + 544) = v2 + v5 * v6;
  double v7 = v3 * (1.0 - v5);
  *(double *)(result + 552) = v7;
  *(void *)(result + 600) = 0;
  *(double *)(result + 608) = v5;
  *(void *)(result + 616) = 0xFFF0000000000000;
  if (v6 < 0.0) {
    double v6 = -v6;
  }
  double v8 = v6 / (v4 + v7);
  *(double *)(result + 624) = v8;
  BOOL v9 = v8 <= 2.0;
  double v10 = 0.005;
  if (!v9) {
    double v10 = 10.0;
  }
  *(double *)(result + 560) = v10;
  *(unsigned char *)(result + 536) = 1;
  return result;
}

void sub_10118C350(void *a1, double a2)
{
  uint64_t v2 = a1[84];
  if (v2)
  {
    uint64_t v5 = (uint64_t)(a1 + 79);
    uint64_t v6 = a1[80];
    unint64_t v7 = a1[83];
    double v8 = a2 - *(double *)(*(void *)(v6 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
    if (v8 <= 111.846818)
    {
LABEL_6:
      for (double i = *(double *)(*(void *)(v6 + 8 * ((v2 + v7 - 1) / 0xAA)) + 24 * ((v2 + v7 - 1) % 0xAA) + 16)
              - *(double *)(*(void *)(v6 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA) + 16);
            i > 150.0 && v2 != 0;
            double i = *(double *)(*(void *)(a1[80] + 8 * ((v2 + v7 - 1) / 0xAA)) + 24 * ((v2 + v7 - 1) % 0xAA) + 16)
              - *(double *)(*(void *)(a1[80] + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA) + 16))
      {
        a1[84] = v2 - 1;
        a1[83] = v7 + 1;
        sub_10041FD7C(v5, 1);
        uint64_t v2 = a1[84];
        unint64_t v7 = a1[83];
      }
      if (v8 <= 0.0 || i <= 0.0)
      {
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_102315920);
        }
        double v13 = qword_102419038;
        if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t buf = 134218240;
          double v16 = v8;
          __int16 v17 = 2048;
          double v18 = i;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "[RunningSpeedKF] trimDistanceBuffer - invalid buffer timeDiff or odoDistDiff: %.2f, %.2f", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419030 != -1) {
            dispatch_once(&qword_102419030, &stru_102315920);
          }
          double v14 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLPedometer::RunningSpeedKF::trimDistanceBuffer(CFAbsoluteTime)", "%s\n", v14);
          if (v14 != (char *)buf) {
            free(v14);
          }
        }
      }
    }
    else
    {
      while (1)
      {
        uint64_t v9 = a1[84];
        if (!v9) {
          break;
        }
        a1[84] = v9 - 1;
        a1[83] = v7 + 1;
        sub_10041FD7C(v5, 1);
        uint64_t v6 = a1[80];
        unint64_t v7 = a1[83];
        double v8 = a2 - *(double *)(*(void *)(v6 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
        if (v8 <= 111.846818)
        {
          uint64_t v2 = a1[84];
          if (!v2) {
            return;
          }
          goto LABEL_6;
        }
      }
    }
  }
}

uint64_t sub_10118C6C0(uint64_t a1, uint64_t a2, int a3)
{
  if (!*(unsigned char *)a2) {
    return 0;
  }
  double v3 = *(double *)(a2 + 8);
  if (v3 >= 0.0 && v3 <= 13.0) {
    return a3 ^ 1u;
  }
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_102315920);
  }
  uint64_t v5 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 134217984;
    double v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[RunningSpeedKF] Running speed out of range %.2f", buf, 0xCu);
  }
  BOOL v6 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102315920);
    }
    double v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLPedometer::RunningSpeedKF::isRunningSpeedValid(const KalmanParams &, BOOL) const", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
    return 0;
  }
  return result;
}

void sub_10118C894(uint64_t a1, long long *a2)
{
  double v4 = *(double *)(a1 + 344);
  if (v4 <= 0.0)
  {
    BOOL v11 = 0;
    if (*((unsigned char *)a2 + 16) == 3 && *((unsigned char *)a2 + 17) == 4) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  BOOL v5 = sub_10007E3A4(1.0 / v4, *(float *)(a1 + 712));
  int v6 = *((unsigned __int8 *)a2 + 16);
  int v7 = *((unsigned __int8 *)a2 + 17);
  BOOL v9 = v6 == 3 && v7 == 4;
  if (!v5)
  {
    BOOL v10 = (v7 & 0xFE) == 2;
    BOOL v11 = (v6 & 0xFE) == 2 && v10;
    if (v9) {
      goto LABEL_24;
    }
LABEL_23:
    if (!v11) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  BOOL v11 = 0;
  if (!v9) {
    goto LABEL_23;
  }
LABEL_24:
  *(void *)(a1 + 512) = *(void *)a2;
  long long v14 = *a2;
  *(_DWORD *)(a1 + 695) = *(_DWORD *)((char *)a2 + 15);
  *(_OWORD *)(a1 + 680) = v14;
LABEL_25:
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_102315920);
  }
  double v15 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
  {
    uint64_t v16 = *(void *)a2;
    uint64_t v17 = *((void *)a2 + 1);
    int v18 = *((unsigned __int8 *)a2 + 16);
    int v19 = *((unsigned __int8 *)a2 + 17);
    int v20 = *((unsigned __int8 *)a2 + 18);
    v21[0] = 68290306;
    v21[1] = 0;
    __int16 v22 = 2082;
    double v23 = "";
    __int16 v24 = 2050;
    uint64_t v25 = v16;
    __int16 v26 = 2050;
    uint64_t v27 = v17;
    __int16 v28 = 1026;
    int v29 = v18;
    __int16 v30 = 1026;
    int v31 = v19;
    __int16 v32 = 1026;
    int v33 = v20;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[RunningSpeedKF] feedWakeGesture\", \"receivedTime\":\"%{public}.2f\", \"timestampPossible\":%{public}llu, \"state\":%{public}d, \"gestureType\":%{public}d, \"hostPowerState\":%{public}d}", (uint8_t *)v21, 0x38u);
  }
}

__n128 sub_10118CA54(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 748) = *(_OWORD *)(a2 + 44);
  *(_OWORD *)(a1 + 720) = v3;
  *(_OWORD *)(a1 + 736) = v4;
  *(__n128 *)(a1 + 704) = result;
  return result;
}

BOOL sub_10118CA74(void **a1, double *a2, double *a3, double a4)
{
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  if (!sub_100174F3C(*a1, (uint64_t)&v59, &v57, a4))
  {
    uint64_t v17 = *((void *)&v60 + 1);
    if (*((void *)&v60 + 1) != *((void *)&v58 + 1))
    {
      if (*(void *)v60 == *((void *)&v60 + 1))
      {
        uint64_t v38 = *(void *)(v60 - 8);
        int v18 = (double *)(v38 + 3888);
        uint64_t v17 = v38 + 4032;
      }
      else
      {
        int v18 = (double *)(*((void *)&v60 + 1) - 144);
      }
      *a2 = *v18;
      *a3 = *(double *)(v17 - 192);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102315920);
      }
      double v39 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
      {
        double v40 = *a2;
        double v41 = *a3;
        *(_DWORD *)uint64_t buf = 134349568;
        double v68 = a4;
        __int16 v69 = 2048;
        double v70 = v40;
        __int16 v71 = 2048;
        double v72 = v41;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "[RunningSpeedKF] interpolateOdometry - Unable to find odometer entry after %{public}.2f. Nearest=(%.2f, %.2f)", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_102315920);
        }
        double v54 = *a2;
        double v55 = *a3;
        int v61 = 134349568;
        double v62 = a4;
        __int16 v63 = 2048;
        double v64 = v54;
        __int16 v65 = 2048;
        double v66 = v55;
        double v56 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPedometer::RunningSpeedKF::interpolateOdometry(CFAbsoluteTime, double &, CFAbsoluteTime &) const", "%s\n", v56);
        if (v56 != (char *)buf) {
          free(v56);
        }
      }
      return 1;
    }
LABEL_38:
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102315920);
    }
    double v37 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 134349056;
      double v68 = a4;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "[RunningSpeedKF] interpolateOdometry - #warning did not find odometer after t=(%{public}.2f)", buf, 0xCu);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102315920);
      }
      int v61 = 134349056;
      double v62 = a4;
      __int16 v36 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPedometer::RunningSpeedKF::interpolateOdometry(CFAbsoluteTime, double &, CFAbsoluteTime &) const", "%s\n");
      goto LABEL_46;
    }
    return result;
  }
  uint64_t v7 = *((void *)&v60 + 1);
  uint64_t v8 = *(void *)v60;
  uint64_t v9 = *((void *)&v60 + 1) - *(void *)v60;
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 6);
  if (v9 < 193)
  {
    unint64_t v19 = 21 - v10;
    uint64_t v20 = ((21 - v10) * (unsigned __int128)0x8618618618618619) >> 64;
    unint64_t v21 = (v20 + ((v19 - v20) >> 1)) >> 4;
    long long v14 = (uint64_t *)(v60 - 8 * v21);
    uint64_t v15 = *v14;
    uint64_t v16 = *v14 + 192 * (21 * v21 - v19) + 3840;
  }
  else
  {
    unint64_t v11 = v10 - 1;
    uint64_t v12 = ((v10 - 1) * (unsigned __int128)0x8618618618618619) >> 64;
    unint64_t v13 = (v12 + ((v11 - v12) >> 1)) >> 4;
    long long v14 = (uint64_t *)(v60 + 8 * v13);
    uint64_t v15 = *v14;
    uint64_t v16 = *v14 + 192 * (v11 - 21 * v13);
  }
  if (v16 == *((void *)&v58 + 1)) {
    goto LABEL_38;
  }
  uint64_t v22 = v16;
  if (v16 == v15) {
    uint64_t v22 = *(v14 - 1) + 4032;
  }
  if (*(double *)(v22 - 192) > a4) {
    goto LABEL_38;
  }
  uint64_t v23 = *((void *)&v60 + 1);
  if (*((void *)&v60 + 1) == v8) {
    uint64_t v23 = *(void *)(v60 - 8) + 4032;
  }
  if (*(double *)(v23 - 192) <= a4) {
    goto LABEL_38;
  }
  uint64_t v24 = v16;
  if (v16 == v15) {
    uint64_t v24 = *(v14 - 1) + 4032;
  }
  if (*(double *)(v24 - 192) > a4) {
    goto LABEL_21;
  }
  uint64_t v25 = *((void *)&v60 + 1);
  if (*((void *)&v60 + 1) == v8) {
    uint64_t v25 = *(void *)(v60 - 8) + 4032;
  }
  if (*(double *)(v25 - 192) < a4)
  {
LABEL_21:
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102315920);
    }
    __int16 v26 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = v16;
      if (v16 == *v14) {
        uint64_t v27 = *(v14 - 1) + 4032;
      }
      double v28 = *(double *)(v27 - 192);
      uint64_t v29 = *((void *)&v60 + 1);
      if (*((void *)&v60 + 1) == *(void *)v60) {
        uint64_t v29 = *(void *)(v60 - 8) + 4032;
      }
      double v30 = *(double *)(v29 - 192);
      *(_DWORD *)uint64_t buf = 134349568;
      double v68 = v28;
      __int16 v69 = 2050;
      double v70 = a4;
      __int16 v71 = 2050;
      double v72 = v30;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "[RunningSpeedKF] interpolateOdometry time error, t_0, %{public}.2f, t_int, %{public}.2f, t_1, %{public}.2f", buf, 0x20u);
    }
    BOOL v31 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v31)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102315920);
      }
      if (v16 == *v14) {
        uint64_t v16 = *(v14 - 1) + 4032;
      }
      double v33 = *(double *)(v16 - 192);
      uint64_t v34 = *((void *)&v60 + 1);
      if (*((void *)&v60 + 1) == *(void *)v60) {
        uint64_t v34 = *(void *)(v60 - 8) + 4032;
      }
      double v35 = *(double *)(v34 - 192);
      int v61 = 134349568;
      double v62 = v33;
      __int16 v63 = 2050;
      double v64 = a4;
      __int16 v65 = 2050;
      double v66 = v35;
LABEL_37:
      __int16 v36 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLPedometer::RunningSpeedKF::interpolateOdometry(CFAbsoluteTime, double &, CFAbsoluteTime &) const", "%s\n");
LABEL_46:
      if (v36 != buf) {
        free(v36);
      }
      return 0;
    }
    return result;
  }
  uint64_t v42 = v16;
  if (v16 == v15) {
    uint64_t v42 = *(v14 - 1) + 4032;
  }
  double v43 = *(double *)(v42 - 144);
  uint64_t v44 = *((void *)&v60 + 1);
  if (*((void *)&v60 + 1) == v8) {
    uint64_t v44 = *(void *)(v60 - 8) + 4032;
  }
  if (v43 <= *(double *)(v44 - 144))
  {
    if (v16 == v15) {
      uint64_t v16 = *(v14 - 1) + 4032;
    }
    if (*((void *)&v60 + 1) == v8) {
      uint64_t v7 = *(void *)(v60 - 8) + 4032;
    }
    *a2 = sub_1001BF26C(*(double *)(v16 - 192), *(double *)(v16 - 144), *(double *)(v7 - 192), *(double *)(v7 - 144), a4);
    *a3 = a4;
    return 1;
  }
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_102315920);
  }
  double v45 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_ERROR))
  {
    uint64_t v46 = v16;
    if (v16 == *v14) {
      uint64_t v46 = *(v14 - 1) + 4032;
    }
    double v47 = *(double *)(v46 - 144);
    uint64_t v48 = *((void *)&v60 + 1);
    if (*((void *)&v60 + 1) == *(void *)v60) {
      uint64_t v48 = *(void *)(v60 - 8) + 4032;
    }
    double v49 = *(double *)(v48 - 144);
    *(_DWORD *)uint64_t buf = 134349312;
    double v68 = v47;
    __int16 v69 = 2050;
    double v70 = v49;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "[RunningSpeedKF] interpolateOdometry odometer error, y_0, %{public}.4f, y_1, %{public}.4f", buf, 0x16u);
  }
  BOOL v50 = sub_10013D1A0(115, 0);
  BOOL result = 0;
  if (v50)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102315920);
    }
    if (v16 == *v14) {
      uint64_t v16 = *(v14 - 1) + 4032;
    }
    double v51 = *(double *)(v16 - 144);
    uint64_t v52 = *((void *)&v60 + 1);
    if (*((void *)&v60 + 1) == *(void *)v60) {
      uint64_t v52 = *(void *)(v60 - 8) + 4032;
    }
    double v53 = *(double *)(v52 - 144);
    int v61 = 134349312;
    double v62 = v51;
    __int16 v63 = 2050;
    double v64 = v53;
    goto LABEL_37;
  }
  return result;
}

double sub_10118D318(double a1, uint64_t a2, double *a3)
{
  double v4 = a3[2];
  double v3 = a3[3];
  double v5 = *a3 * v3 + a1 * (*a3 + v3 + v4 * -2.0) - v4 * v4;
  if (v5 == 0.0)
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102315920);
    }
    int v6 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "[RunningSpeedKF] kalmanGain - determinant is zero, logical error?", buf, 2u);
    }
    double v7 = 0.0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102315920);
      }
      unint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "RunningSpeedKF::Measurement CLPedometer::RunningSpeedKF::kalmanGain(double, const RunningSpeedKF::MeasurementNoise &) const", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  else
  {
    v8.f64[0] = v3 + a1;
    v8.f64[1] = -(v4 + a1);
    return vaddvq_f64(vmulq_n_f64(v8, 1.0 / v5)) * a1;
  }
  return v7;
}

__n128 sub_10118D518(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10118D5F8(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  float64x2_t v8 = (__n128 *)(*(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  __n128 result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *float64x2_t v8 = result;
  ++a1[5];
  return result;
}

void sub_10118D5C8(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_10118D5F8(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    float64x2_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)float64x2_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      double v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      float64x2_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        float64x2_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    float64x2_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    float64x2_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      double v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      float64x2_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        float64x2_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      double v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        float64x2_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  double v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000DA434(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10118D8C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10118D910(uint64_t a1, void *a2)
{
  [a2 count];
  int v2 = 0;
  operator new();
}

void sub_10118DA88()
{
}

void sub_10118DB34(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = sub_1011C08D4(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v6 = off_102315950;
  *(void *)(v6 + 184) = 0;
  *(CLLocationCoordinate2D *)(v6 + 208) = kCLLocationCoordinate2DInvalid;
  *(unsigned char *)(v6 + 224) = 0;
  *(_OWORD *)(v6 + 264) = 0u;
  *(_OWORD *)(v6 + 280) = 0u;
  *(void *)(v6 + 296) = 0;
  operator new();
}

void sub_10118E59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,os_activity_scope_state_s state)
{
  if (a19) {
    sub_1000DB0A0(a19);
  }
  uint64_t v38 = *(std::__shared_weak_count **)(v36 - 200);
  if (v38) {
    sub_1000DB0A0(v38);
  }
  os_activity_scope_leave(&state);
  uint64_t v39 = *(std::__shared_weak_count **)(v35 + 280);
  if (v39) {
    std::__shared_weak_count::__release_weak(v39);
  }
  sub_1011C0F50(v35);
  _Unwind_Resume(a1);
}

uint64_t sub_10118E6A0(uint64_t a1, const void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if ((*(unsigned int (**)(const void *))(*(void *)a2 + 24))(a2) != 2) {
    return 0;
  }
  uint64_t result = (uint64_t)[*(id *)(v3 + 16) isEqual:sub_10014D19C((uint64_t)a2)];
  if (!result) {
    return result;
  }
  if (*((_DWORD *)v5 + 48) != *(_DWORD *)(v3 + 192)) {
    return 0;
  }
  uint64_t v6 = v5;
  if (*((double *)v5 + 26) != *(double *)(v3 + 208)
    || *((double *)v5 + 27) != *(double *)(v3 + 216)
    || *((double *)v5 + 25) != *(double *)(v3 + 200))
  {
    return 0;
  }
  uint64_t result = (uint64_t)[*((id *)v5 + 29) isEqualToDateInterval:*(void *)(v3 + 232)];
  if (!result) {
    return result;
  }
  uint64_t v7 = v6[35];
  if (v7 && *(void *)(v7 + 8) != -1 || *(void *)v6[18] != *(void *)(v6[18] + 8))
  {
    uint64_t v8 = *(void *)(v3 + 288);
    *(void *)(v3 + 288) = v6[36];
    v6[36] = v8;
    uint64_t v9 = *(void *)(v3 + 272);
    *(void *)(v3 + 272) = v6[34];
    v6[34] = v9;
    uint64_t v10 = *(void *)(v3 + 280);
    *(void *)(v3 + 280) = v6[35];
    v6[35] = v10;
    uint64_t v11 = *(void *)(v3 + 296);
    *(void *)(v3 + 296) = v6[37];
    v6[37] = v11;
    uint64_t v12 = *(void *)(v3 + 144);
    *(void *)(v3 + 144) = v6[18];
    _DWORD v6[18] = v12;
    [*(id *)(v3 + 288) setUpdater:v3];
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102315A88);
    }
    uint64_t v13 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = (*(uint64_t (**)(const void *))(*(void *)a2 + 24))(a2);
      uint64_t v15 = *(void *)(v3 + 16);
      uint64_t v16 = *(void *)(v3 + 280);
      BOOL v17 = !v16 || *(void *)(v16 + 8) == -1;
      uint64_t v20 = (*(void *)(*(void *)(v3 + 144) + 8) - **(void **)(v3 + 144)) >> 4;
      uint64_t v21 = *(void **)(v3 + 288);
      int v32 = 68290818;
      int v33 = 0;
      __int16 v34 = 2082;
      uint64_t v35 = "";
      __int16 v36 = 1026;
      int v37 = v14;
      __int16 v38 = 2114;
      uint64_t v39 = v15;
      __int16 v40 = 1026;
      BOOL v41 = v17;
      __int16 v42 = 1026;
      int v43 = v20;
      __int16 v44 = 2050;
      uint64_t v45 = v21;
      __int16 v46 = 2050;
      id v47 = [v21 updater];
      __int16 v48 = 2050;
      uint64_t v49 = v3;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luHistorical #dic consumeMatchingButterfly\", \"dicType\":%{public}d, \"ClientKeyPath\":%{public, location:escape_only}@, \"IsSessionExpired\":%{public}hhd, \"fPendingMessagesSize\":%{public}d, \"fAdapter\":\"%{public}p\", \"updater\":\"%{public}p\", \"this\":\"%{public}p\"}", (uint8_t *)&v32, 0x4Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102315A88);
      }
    }
    unint64_t v22 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      int v23 = (*(uint64_t (**)(const void *))(*(void *)a2 + 24))(a2);
      uint64_t v24 = *(void *)(v3 + 16);
      uint64_t v25 = *(void *)(v3 + 280);
      if (v25) {
        BOOL v26 = *(void *)(v25 + 8) == -1;
      }
      else {
        BOOL v26 = 1;
      }
      uint64_t v27 = *(uint64_t **)(v3 + 144);
      uint64_t v29 = *v27;
      uint64_t v28 = v27[1];
      long long v30 = *(void **)(v3 + 288);
      id v31 = [v30 updater];
      int v32 = 68290818;
      int v33 = 0;
      __int16 v34 = 2082;
      uint64_t v35 = "";
      __int16 v36 = 1026;
      int v37 = v23;
      __int16 v38 = 2114;
      uint64_t v39 = v24;
      __int16 v40 = 1026;
      BOOL v41 = v26;
      __int16 v42 = 1026;
      int v43 = (unint64_t)(v28 - v29) >> 4;
      __int16 v44 = 2050;
      uint64_t v45 = v30;
      __int16 v46 = 2050;
      id v47 = v31;
      __int16 v48 = 2050;
      uint64_t v49 = v3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v22, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#luHistorical #dic consumeMatchingButterfly", "{\"msg%{public}.0s\":\"#luHistorical #dic consumeMatchingButterfly\", \"dicType\":%{public}d, \"ClientKeyPath\":%{public, location:escape_only}@, \"IsSessionExpired\":%{public}hhd, \"fPendingMessagesSize\":%{public}d, \"fAdapter\":\"%{public}p\", \"updater\":\"%{public}p\", \"this\":\"%{public}p\"}", (uint8_t *)&v32, 0x4Cu);
    }
    return 1;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102315A88);
  }
  uint64_t v18 = qword_102419538;
  BOOL v19 = os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v19)
  {
    int v32 = 68289026;
    int v33 = 0;
    __int16 v34 = 2082;
    uint64_t v35 = "";
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luHistorical #dic not matching butterfly with dead session and empty pending queue\"}", (uint8_t *)&v32, 0x12u);
    return 0;
  }
  return result;
}

void ***sub_10118EB8C(void ***result, void **a2)
{
  int v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = v2;
    sub_1000C5954(&v3);
    operator delete();
  }
  return result;
}

void sub_10118EBE0(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a3)
  {
LABEL_9:
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102315A88);
    }
    goto LABEL_11;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102315A88);
  }
  uint64_t v6 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
  {
    uint64_t v7 = *((void *)[*(id *)(a1 + 32) updater] + 2);
    *(_DWORD *)uint64_t buf = 68289794;
    int v15 = 0;
    __int16 v16 = 2082;
    BOOL v17 = "";
    __int16 v18 = 2114;
    uint64_t v19 = v7;
    __int16 v20 = 2114;
    id v21 = a3;
    __int16 v22 = 2114;
    uint64_t v23 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#luHistorical #warning an error occurred when getting fetchLookbackWindowStartDate from CoreRoutine\", \"client\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}@, \"date\":%{public, location:escape_only}@}", buf, 0x30u);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102315A88);
    }
  }
  uint64_t v8 = qword_102419538;
  if (os_signpost_enabled((os_log_t)qword_102419538))
  {
    uint64_t v9 = *((void *)[*(id *)(a1 + 32) updater] + 2);
    *(_DWORD *)uint64_t buf = 68289794;
    int v15 = 0;
    __int16 v16 = 2082;
    BOOL v17 = "";
    __int16 v18 = 2114;
    uint64_t v19 = v9;
    __int16 v20 = 2114;
    id v21 = a3;
    __int16 v22 = 2114;
    uint64_t v23 = a2;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#luHistorical #warning an error occurred when getting fetchLookbackWindowStartDate from CoreRoutine", "{\"msg%{public}.0s\":\"#luHistorical #warning an error occurred when getting fetchLookbackWindowStartDate from CoreRoutine\", \"client\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}@, \"date\":%{public, location:escape_only}@}", buf, 0x30u);
    goto LABEL_9;
  }
LABEL_11:
  uint64_t v10 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = [*(id *)(a1 + 32) updater];
    *(_DWORD *)uint64_t buf = 68289538;
    int v15 = 0;
    __int16 v16 = 2082;
    BOOL v17 = "";
    __int16 v18 = 2114;
    uint64_t v19 = a2;
    __int16 v20 = 2050;
    id v21 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luHistorical routine has responded with the lookbackWindow\", \"lookbackWindowStartDate\":%{public, location:escape_only}@, \"updater\":\"%{public}p\"}", buf, 0x26u);
  }
  id v12 = [*(id *)(a1 + 32) updater];
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 48);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_10118EEB0((uint64_t)v12, a2);
  if (v13) {
    sub_1000DB0A0(v13);
  }
}

void sub_10118EE90(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10118EEB0(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 192);
  if (v4 <= 0)
  {
    *(_DWORD *)(a1 + 192) = 3;
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_102315A68);
    }
    uint64_t v5 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 16);
      *(void *)uint64_t buf = 68289538;
      v35[0] = 2082;
      *(void *)&v35[1] = "";
      __int16 v36 = 2114;
      uint64_t v37 = v8;
      __int16 v38 = 2050;
      uint64_t v39 = a1;
      uint64_t v7 = "{\"msg%{public}.0s\":\"#luHistorical sampleCount is clamping to MIN sample count\", \"ClientKeyPath\":%{publi"
           "c, location:escape_only}@, \"self\":\"%{public}p\"}";
      goto LABEL_11;
    }
  }
  else if (v4 >= 0xBB9)
  {
    *(_DWORD *)(a1 + 192) = 3000;
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_102315A68);
    }
    uint64_t v5 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 16);
      *(void *)uint64_t buf = 68289538;
      v35[0] = 2082;
      *(void *)&v35[1] = "";
      __int16 v36 = 2114;
      uint64_t v37 = v6;
      __int16 v38 = 2050;
      uint64_t v39 = a1;
      uint64_t v7 = "{\"msg%{public}.0s\":\"#luHistorical sampleCount is clamping to MAX sample count\", \"ClientKeyPath\":%{publi"
           "c, location:escape_only}@, \"self\":\"%{public}p\"}";
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v7, buf, 0x26u);
    }
  }
  if (!*(unsigned char *)(a1 + 224))
  {
LABEL_17:
    uint64_t v28 = 0;
    uint64_t v29 = &v28;
    uint64_t v30 = 0x3052000000;
    id v31 = sub_100177EE8;
    int v32 = sub_100177668;
    uint64_t v33 = 0;
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v9 = *(void *)(a1 + 24);
    id v11 = *(void **)(a1 + 232);
    id v12 = *(void **)(a1 + 184);
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    uint64_t v27[2] = sub_10118FCC8;
    v27[3] = &unk_102315A00;
    void v27[4] = &v28;
    sub_1007BBB78(v9, v10, v11, v12, a2, (uint64_t)v27);
    if ([(id)v29[5] count]) {
      sub_10118D910(*(unsigned int *)(a1 + 192), (void *)v29[5]);
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102315A88);
    }
    __int16 v20 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = *(void *)(a1 + 16);
      id v22 = [*(id *)(a1 + 232) startDate];
      id v23 = [*(id *)(a1 + 232) endDate];
      *(_DWORD *)uint64_t buf = 68290050;
      v35[0] = 2082;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(void *)&v35[1] = "";
      __int16 v36 = 2114;
      uint64_t v37 = v21;
      __int16 v38 = 2050;
      uint64_t v39 = a1;
      __int16 v40 = 2114;
      id v41 = v22;
      __int16 v42 = 2114;
      id v43 = v23;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luHistorical no allowed historical dateIntervals found.\", \"ClientKeyPath\":%{public, location:escape_only}@, \"self\":\"%{public}p\", \"ReceiverDateStartDate\":%{public, location:escape_only}@, \"ReceiverDateEndDate\":%{public, location:escape_only}@}", buf, 0x3Au);
    }
    _Block_object_dispose(&v28, 8);
    return;
  }
  if (sub_1011C24AC(*(double *)(a1 + 208), *(double *)(a1 + 216)))
  {
    if (!*(unsigned char *)(a1 + 224)
      || !sub_1011C24AC(*(double *)(a1 + 208), *(double *)(a1 + 216))
      || *(double *)(a1 + 200) > 0.0)
    {
      goto LABEL_17;
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102315A88);
    }
    uint64_t v24 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v25 = *(void *)(a1 + 16);
      BOOL v26 = *(void **)(a1 + 200);
      *(void *)uint64_t buf = 68289794;
      v35[0] = 2082;
      *(void *)&v35[1] = "";
      __int16 v36 = 2114;
      uint64_t v37 = v25;
      __int16 v38 = 2050;
      uint64_t v39 = a1;
      __int16 v40 = 2050;
      id v41 = v26;
      BOOL v17 = "{\"msg%{public}.0s\":\"#luHistorical radius cannot be zero or less when center is specified\", \"ClientKeyPa"
            "th\":%{public, location:escape_only}@, \"self\":\"%{public}p\", \"Radius\":\"%{public}f\"}";
      __int16 v18 = v24;
      uint32_t v19 = 48;
      goto LABEL_23;
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102315A88);
    }
    uint64_t v13 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(a1 + 16);
      int v15 = *(void **)(a1 + 208);
      __int16 v16 = *(void **)(a1 + 216);
      *(_DWORD *)uint64_t buf = 68290050;
      v35[0] = 2082;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(void *)&v35[1] = "";
      __int16 v36 = 2114;
      uint64_t v37 = v14;
      __int16 v38 = 2050;
      uint64_t v39 = a1;
      __int16 v40 = 2050;
      id v41 = v15;
      __int16 v42 = 2050;
      id v43 = v16;
      BOOL v17 = "{\"msg%{public}.0s\":\"#luHistorical specified Center is not valid\", \"ClientKeyPath\":%{public, location:e"
            "scape_only}@, \"self\":\"%{public}p\", \"Center.lat\":\"%{public}f\", \"Center.lon\":\"%{public}f\"}";
      __int16 v18 = v13;
      uint32_t v19 = 58;
LABEL_23:
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v17, buf, v19);
    }
  }
}

void sub_10118F758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

uint64_t sub_10118F7F8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10118F814(uint64_t a1)
{
  unint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_1000DB0A0(v1);
  }
}

uint64_t sub_10118F828(uint64_t a1)
{
  *(void *)a1 = off_102315950;
  sub_1011C2B50();
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 280);
  if (v2 && v2->__shared_owners_ != -1)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    int v4 = *(id **)(a1 + 272);

    *int v4 = 0;
    sub_1000DB0A0(v3);
  }

  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 296) = 0;
  [*(id *)(a1 + 288) invalidate];

  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 264) = 0;

  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 280);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }

  return sub_1011C0F50(a1);
}

void sub_10118F920(uint64_t a1)
{
  sub_10118F828(a1);

  operator delete();
}

void sub_10118F958(uint64_t a1, CLConnectionMessage **a2)
{
  int v4 = (void *)CLConnectionMessage::name(*a2);
  int v5 = *((char *)v4 + 23);
  if (v5 < 0)
  {
    if (v4[1] != 44) {
      goto LABEL_7;
    }
    int v4 = (void *)*v4;
  }
  else if (v5 != 44)
  {
    goto LABEL_7;
  }
  if (!memcmp(v4, "kCLConnectionMessageDestroyUponDisconnection", 0x2CuLL))
  {
    *(unsigned char *)(a1 + 48) = 1;
    return;
  }
LABEL_7:
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_102315A68);
  }
  uint64_t v6 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v8 = CLConnectionMessage::name(*a2);
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = *(void *)v8;
    }
    v10[0] = 68289794;
    v10[1] = 0;
    __int16 v11 = 2082;
    id v12 = "";
    __int16 v13 = 2114;
    uint64_t v14 = v7;
    __int16 v15 = 2050;
    uint64_t v16 = a1;
    __int16 v17 = 2082;
    uint64_t v18 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning #luHistorical received unhandled message\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"message\":%{public, location:escape_only}s}", (uint8_t *)v10, 0x30u);
  }
}

BOOL sub_10118FACC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 280);
  return !v1 || *(void *)(v1 + 8) == -1 || *(unsigned char *)(a1 + 48) != 0;
}

uint64_t sub_10118FAF8()
{
  return 2;
}

NSDictionary *sub_10118FB00(uint64_t a1)
{
  if (![*(id *)(a1 + 184) objectForKeyedSubscript:@"com.apple.developer.corelocation.wilderness-safety"])sub_101AA4C5C(); {
  if (![*(id *)(a1 + 184) objectForKeyedSubscript:@"com.apple.locationd.transcript-session"])
  }
    sub_101AA4DE0();
  v6[0] = @"kCLConnectionMessageTranscriptFetchSampleCountKey";
  v7[0] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 192)];
  v6[1] = @"kCLConnectionMessageTranscriptFetchRadiusKey";
  v7[1] = +[NSNumber numberWithDouble:*(double *)(a1 + 200)];
  v6[2] = @"kCLConnectionMessageLocationUpdaterStartDateKey";
  _DWORD v7[2] = [*(id *)(a1 + 232) startDate];
  void v6[3] = @"kCLConnectionMessageLocationUpdaterEndDateKey";
  void v7[3] = [*(id *)(a1 + 232) endDate];
  void v6[4] = @"kCLConnectionMessageTranscriptFetchCenterLatitudeKey";
  uint64_t v7[4] = +[NSNumber numberWithDouble:*(double *)(a1 + 208)];
  v6[5] = @"kCLConnectionMessageTranscriptFetchCenterLongitudeKey";
  v7[5] = +[NSNumber numberWithDouble:*(double *)(a1 + 216)];
  v6[6] = @"kCLConnectionMessageLocationUpdaterEntitlementDictKey";
  v4[0] = @"com.apple.developer.corelocation.wilderness-safety";
  uint64_t v2 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [objc_msgSend(*(id *)(a1 + 184), "objectForKeyedSubscript:", @"com.apple.developer.corelocation.wilderness-safety") boolValue]);
  v4[1] = @"com.apple.locationd.transcript-session";
  v5[0] = v2;
  v5[1] = [NSNumber numberWithBool:][objc_msgSend(objc_msgSend(*(id *)(a1 + 184), "objectForKeyedSubscript:", @"com.apple.locationd.transcript-session"), "BOOLValue")];
  void v7[6] = +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:2];
  return +[NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:7];
}

uint64_t sub_10118FCC8(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 40) = a2;
  return result;
}

void sub_10118FCD8(uint64_t a1, void *a2, void *a3, int a4)
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_102315A68);
  }
  uint64_t v8 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *((void *)[*(id *)(a1 + 32) updater] + 2);
    uint64_t v10 = *(void *)(a1 + 40);
    id v11 = [*(id *)(a1 + 32) updater];
    *(_DWORD *)uint64_t buf = 68290562;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)__int16 v17 = 2082;
    *(void *)&uint64_t v17[2] = "";
    __int16 v18 = 2114;
    uint64_t v19 = v9;
    __int16 v20 = 2050;
    uint64_t v21 = v10;
    __int16 v22 = 2050;
    id v23 = v11;
    __int16 v24 = 1026;
    unsigned int v25 = [a2 count];
    __int16 v26 = 2082;
    id v27 = [[objc_msgSend(a3, "description") UTF8String];
    __int16 v28 = 1026;
    int v29 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luHistorical received update from CoreRoutine\", \"ClientKeyPath\":%{public, location:escape_only}@, \"session\":\"%{public}p\", \"updater\":\"%{public}p\", \"locationCount\":%{public}d, \"Error\":%{public, location:escape_only}s, \"enumerationCompleted\":%{public}hhd}", buf, 0x46u);
  }
  if ([a2 count])
  {
    id v15 = +[NSMutableDictionary dictionary];
    [v15 setObject:a2 forKeyedSubscript:@"Locations"];
    sub_10064DDE8("kCLConnectionMessageHistoricalLocations", buf);
    id v12 = [*(id *)(a1 + 32) updater];
    uint64_t v13 = *(void *)buf;
    uint64_t v14 = *(std::__shared_weak_count **)v17;
    if (*(void *)v17) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)v17 + 8), 1uLL, memory_order_relaxed);
    }
    sub_1011C187C((uint64_t)v12, (uint64_t)&v13, 0, 1, 0.0);
    if (v14) {
      sub_1000DB0A0(v14);
    }
    if (*(void *)v17) {
      sub_1000DB0A0(*(std::__shared_weak_count **)v17);
    }
  }
}

void sub_10118FEDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

id sub_10118FF10(void *a1, uint64_t a2)
{
  a1[4] = 0;
  id result = *(id *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 48);
  a1[4] = result;
  a1[5] = v6;
  a1[6] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10118FF5C(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    sub_1000DB0A0(v2);
  }
}

uint64_t sub_10118FF94(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    sub_1000DB0A0(v2);
  }

  return a1;
}

void sub_10118FFD0(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_101190000(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void *sub_101190030@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new(0x70uLL);
  id result = sub_100EC7FF4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_101190078(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10119008C@<X0>(void **a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new(0x20uLL);
  id result = sub_1011900E8(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1011900D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1011900E8(void *a1, void **a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_102315AB8;
  sub_1011901C8(a1 + 3, *a2);
  return a1;
}

void sub_101190134(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_101190148(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102315AB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101190168(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102315AB8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

id *sub_1011901BC(uint64_t a1)
{
  return sub_1011902C0((id *)(a1 + 24));
}

uint64_t *sub_1011901C8(uint64_t *a1, void *a2)
{
  *a1 = (uint64_t)a2;
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102315A88);
  }
  uint64_t v3 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = *a1;
    v6[0] = 68289282;
    v6[1] = 0;
    __int16 v7 = 2082;
    uint64_t v8 = "";
    __int16 v9 = 2050;
    uint64_t v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#luHistorical  LocationUpdaterHistoricalSession()\", \"adapter\":\"%{public}p\"}", (uint8_t *)v6, 0x1Cu);
  }
  return a1;
}

id *sub_1011902C0(id *a1)
{
  if ([*a1 updater])
  {
    sub_101190030("kCLConnectionMessageHistoricalLocationsFinished", &v10);
    id v2 = [*a1 updater];
    uint64_t v8 = v10;
    __int16 v9 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_1011C187C((uint64_t)v2, (uint64_t)&v8, 0, 1, 0.0);
    if (v9) {
      sub_1000DB0A0(v9);
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102315A88);
    }
    uint64_t v3 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = [*a1 updater:v8];
      *(_DWORD *)uint64_t buf = 68289282;
      int v13 = 0;
      __int16 v14 = 2082;
      id v15 = "";
      __int16 v16 = 2050;
      id v17 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luHistorical fetch and sending finished\", \"updater\":\"%{public}p\"}", buf, 0x1Cu);
    }
    if (v11) {
      sub_1000DB0A0(v11);
    }
    goto LABEL_16;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102315A88);
  }
  uint64_t v5 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    id v15 = "";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luHistorical historical session has been invalidated\"}", buf, 0x12u);
LABEL_16:
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102315A88);
    }
  }
  uint64_t v6 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    id v15 = "";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luHistorical LocationUpdaterHistoricalSession deallocating\"}", buf, 0x12u);
  }

  *a1 = 0;
  return a1;
}

void sub_101190538(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_101190544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10143A068(a1 + 8, a3, (uint64_t)v11);
  if (!v11[0]) {
    return a2;
  }
  uint64_t v5 = sub_100779764(2, a2);
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_102315B40);
  }
  uint64_t v6 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a3 + 120);
    *(_DWORD *)uint64_t buf = 134218496;
    uint64_t v19 = v7;
    __int16 v20 = 1026;
    int v21 = a2;
    __int16 v22 = 1026;
    int v23 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Overriding youth type for elevation credit, beginTime, %f, before, %{public}d, after, %{public}d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_102315B40);
    }
    uint64_t v8 = *(void *)(a3 + 120);
    int v12 = 134218496;
    uint64_t v13 = v8;
    __int16 v14 = 1026;
    int v15 = a2;
    __int16 v16 = 1026;
    int v17 = v5;
    __int16 v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLMotionActivity::TypeYouth CLFitnessYouthElevationCreditOverride::doOverride(CLMotionActivity::TypeYouth, const CLNatalieModelInput &)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  return v5;
}

void sub_10119075C()
{
}

void sub_101190770(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_1011907A0(uint64_t a1, int a2, uint64_t a3)
{
  id v4 = (void *)sub_1011908EC(a1, "CLPredictedWalkDistanceBoutRecorderDb", a2, a3, 1, 2.56);
  *id v4 = off_102315B70;
  v4[9] = off_102315C38;
  v4[53] = off_102315C88;
  sub_100F03BA0(v4 + 54, 0, 0);
  sub_100F03BA0((void *)(a1 + 448), 0, 0);
  sub_100F03BA0((void *)(a1 + 464), 0, 0);
  sub_100F03BA0((void *)(a1 + 480), 0, 0);
  sub_100F03BA0((void *)(a1 + 496), 0, 0);
  *(_OWORD *)(a1 + 512) = 0u;
  (*(void (**)(uint64_t))(*(void *)a1 + 112))(a1);
  *(void *)(a1 + 160) = [[CLPredictedWalkDistanceCloudKitDelegate alloc] initWithPredictedWalkDistanceBoutRecorderDb:a1];
  return a1;
}

void sub_1011908D8(_Unwind_Exception *a1)
{
  sub_101190DCC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1011908EC(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  int v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 8));
  *int v12 = off_1022ADB08;
  *(void *)a1 = off_102315DA0;
  *(void *)(a1 + 72) = off_102315E48;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_102315DA0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 72) = off_102315E48;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 248) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(void *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 344) = 12000;
  *(void *)(a1 + 352) = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 360));
  *(void *)(a1 + 360) = off_1022ADB08;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_101190D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  *a11 = v29;
  sub_1003BE1F8(v30);
  sub_10080DB1C(v28);
  sub_1011F8AE0(v27);
  *unsigned int v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_101190DC4()
{
}

void *sub_101190DCC(void *a1)
{
  *a1 = off_102315DA0;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_102315E48;
  a1[44] = off_1022ADAD8;
  sub_1003BE1F8(a1 + 45);
  sub_10080DB1C(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022ADAD8;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void *sub_101190E8C(void *a1)
{
  *a1 = off_102315B70;
  a1[9] = off_102315C38;
  a1[53] = off_102315C88;
  sub_101190F3C((uint64_t)a1, 0, 0);
  uint64_t v2 = (void *)a1[20];
  if (v2)
  {

    a1[20] = 0;
  }

  return sub_101190DCC(a1);
}

void sub_101190F3C(uint64_t a1, void *a2, const void *a3)
{
  if ((a2 != 0) == (a3 != 0))
  {

    *(void *)(a1 + 520) = a2;
    uint64_t v6 = *(const void **)(a1 + 512);
    if (v6) {
      _Block_release(v6);
    }
    if (a3) {
      *(void *)(a1 + 512) = _Block_copy(a3);
    }
  }
  else
  {
    uint64_t v7 = sub_101AA4F64();
    sub_101190FB4(v7);
  }
}

void *sub_101190FB8(uint64_t a1)
{
  return sub_101190E8C((void *)(a1 - 72));
}

void *sub_101190FC0(uint64_t a1)
{
  return sub_101190E8C((void *)(a1 - 424));
}

void sub_101190FC8(void *a1)
{
  sub_101190E8C(a1);

  operator delete();
}

void sub_101191000(uint64_t a1)
{
  sub_101190E8C((void *)(a1 - 72));

  operator delete();
}

void sub_10119103C(uint64_t a1)
{
  sub_101190E8C((void *)(a1 - 424));

  operator delete();
}

uint64_t sub_101191078(uint64_t a1)
{
  if (!sub_100082064(a1 + 72)) {
    return 0xFFFFFFFFLL;
  }
  sub_100082068((void *)(a1 + 496), &v8);
  uint64_t v3 = (sqlite3_stmt *)sub_10014D19C(v8);
  int v4 = sqlite3_step(v3);
  if (v4 == 100)
  {
    uint64_t v5 = (sqlite3_stmt *)sub_10014D19C(v8);
    uint64_t v1 = sqlite3_column_int(v5, 0);
  }
  uint64_t v6 = v8;
  uint64_t v8 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  if (v4 != 100) {
    return 0xFFFFFFFFLL;
  }
  return v1;
}

void sub_101191124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101191164(uint64_t a1)
{
  return sub_101191078(a1 - 72);
}

uint64_t sub_10119116C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v8 = a1 + 112;
  uint64_t v10 = v8 - 40;
  uint64_t v14 = v8;
  (*(void (**)(void))(v9 + 16))();
  if (sub_100082064(v10))
  {
    if (a3)
    {
      if (a5) {
        sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM PredictedWalkDistanceBoutHistory WHERE endTime BETWEEN ? and ? ORDER BY startTime ASC LIMIT ?");
      }
      sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM PredictedWalkDistanceBoutHistory WHERE endTime > ? and endTime < ? ORDER BY startTime ASC LIMIT ?");
    }
    if (a5) {
      sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM PredictedWalkDistanceBoutHistory WHERE endTime BETWEEN ? and ? AND boutType != ? ORDER BY startTime ASC LIMIT ?");
    }
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM PredictedWalkDistanceBoutHistory WHERE endTime > ? and endTime < ? AND boutType != ? ORDER BY startTime ASC LIMIT ?");
  }
  if (qword_102419200 != -1) {
    dispatch_once(&qword_102419200, &stru_102315D50);
  }
  id v11 = qword_102419208;
  if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "CLPredictedWalkDistanceBoutRecorderDb - DB, not accessible", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419200 != -1) {
      dispatch_once(&qword_102419200, &stru_102315D50);
    }
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CMError CLPredictedWalkDistanceBoutRecorderDb::queryBoutDataInTimeRange(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLPredictedWalkDistanceBoutEntry> &, BOOL, int, BOOL) const", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  (*(void (**)(uint64_t))(*(void *)v14 + 24))(v14);
  return 109;
}

void sub_101191AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  sub_1019DB560((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_101191B20(uint64_t *a1, uint64_t a2)
{
  int v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1;
  }
  if (v5 != 100) {
    return 2;
  }
  sub_101192CF8(a1, a2);
  return 0;
}

uint64_t sub_101191B80(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  return sub_10119116C(a1 - 424, a2, a3, a4, a5);
}

uint64_t sub_101191B88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 112;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 16))(a1 + 112);
  if (*(double *)(*(void *)(a2 + 8) - 16) == 1.79769313e308)
  {
    if (sub_100082064(a1 + 72))
    {
      sub_10002B640(*(void *)(a1 + 80));
      CFAbsoluteTimeGetCurrent();
      sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM PredictedWalkDistanceBoutHistory WHERE endTime < ?");
    }
  }
  else
  {
    if (qword_102419200 != -1) {
      dispatch_once(&qword_102419200, &stru_102315D50);
    }
    int v5 = qword_102419208;
    if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "CLPredictedWalkDistanceBoutRecorderDb - Failed to expire records.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419200 != -1) {
        dispatch_once(&qword_102419200, &stru_102315D50);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual long CLPredictedWalkDistanceBoutRecorderDb::aggregateRecords(const CLAggregationRules &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  return -1;
}

void sub_101191E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101191EE0()
{
}

uint64_t sub_101191EE8(uint64_t a1, uint64_t a2)
{
  return sub_101191B88(a1 - 72, a2);
}

void *sub_101191EF0@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "PredictedWalkDistanceBoutHistory");
}

void *sub_101191F00@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "PredictedWalkDistanceBoutHistory");
}

uint64_t sub_101191F10(void *a1, uint64_t a2)
{
  return sub_1003B0548(a1, a2, 0);
}

uint64_t sub_101191F18(uint64_t a1, uint64_t a2)
{
  return sub_1003B0548((void *)(a1 - 424), a2, 0);
}

BOOL sub_101191F24(uint64_t a1, uint64_t *a2, NSArray **a3)
{
  if (!a3) {
    return 0;
  }
  id v6 = objc_alloc_init((Class)NSMutableArray);
  int v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v19 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v20 = 0;
  int v23 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 0;
  int v7 = sub_1011921F0(a1, a2, (uint64_t)&v16);
  if (!v7)
  {
    do
    {
      uint64_t v15 = 0;
      uint64_t v8 = [[CLSerializablePredictedWalkDistanceBout alloc] initWithPredictedWalkDistanceBout:&v16];
      uint64_t v9 = +[NSKeyedArchiver archivedDataWithRootObject:v8 requiringSecureCoding:1 error:&v15];
      if (v15)
      {
        if (qword_102419200 != -1) {
          dispatch_once(&qword_102419200, &stru_102315D50);
        }
        uint64_t v10 = qword_102419208;
        if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t buf = 138412290;
          uint64_t v31 = v15;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Unable to serialize bout data: %@", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419200 != -1) {
            dispatch_once(&qword_102419200, &stru_102315D50);
          }
          int v28 = 138412290;
          uint64_t v29 = v15;
          id v11 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLPredictedWalkDistanceBoutRecorderDb::convertToDataBlobWithCode(const CLSqliteScopedStatement &, NSArray<NSData *> **)", "%s\n", v11);
          if (v11 != (char *)buf) {
            free(v11);
          }
        }
      }
      else
      {
        [v6 addObject:v9];
      }

      int v12 = sub_1011921F0(a1, a2, (uint64_t)&v16);
    }
    while (!v12);
    int v7 = v12;
  }
  uint64_t v14 = (NSArray *)[v6 count];
  if (v14) {
    uint64_t v14 = +[NSArray arrayWithArray:v6];
  }
  *a3 = v14;

  return v7 == 1;
}

uint64_t sub_1011921F0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  id v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

BOOL sub_101192280(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = 0;
  id v4 = +[NSKeyedUnarchiver unarchivedObjectOfClass:objc_opt_class() fromData:a2 error:&v9];
  uint64_t v5 = v9;
  if (v9)
  {
    if (qword_102419200 != -1) {
      dispatch_once(&qword_102419200, &stru_102315D50);
    }
    id v6 = qword_102419208;
    if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 138412290;
      uint64_t v13 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Unable to deserialize bout data: %@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419200 != -1) {
        dispatch_once(&qword_102419200, &stru_102315D50);
      }
      int v10 = 138412290;
      uint64_t v11 = v9;
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLPredictedWalkDistanceBoutRecorderDb::dataBlobToEntry(NSData *, CLPredictedWalkDistanceBoutEntry &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    [v4 getPredictedWalkDistanceBout:a3];
  }
  return v5 == 0;
}

void sub_10119247C(uint64_t a1)
{
  if (sub_10014C3C0(*(void *)(a1 + 80)))
  {
    sub_1005F7B0C(*(void *)(a1 + 80), "PredictedWalkDistanceBoutHistory", (const char **)&qword_102485BB0, (const std::string::value_type **)&qword_102485DF0, 0);
    *(void *)(a1 + 432) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"INSERT INTO PredictedWalkDistanceBoutHistory (startTime, endTime, stepCount, distance, activeTime, elevationAscended, elevationDescended, stepCountGPS, distanceGPS, boutType) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
    *(void *)(a1 + 440) = v2;
    *(void *)(a1 + 448) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"UPDATE PredictedWalkDistanceBoutHistory SET startTime = ?, endTime = ?, stepCount = ?, distance = ?, activeTime = ?, elevationAscended = ?, elevationDescended = ?, stepCountGPS = ?, distanceGPS = ?, boutType = ? WHERE id = ?");
    *(void *)(a1 + 456) = v3;
    *(void *)(a1 + 464) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"DELETE FROM PredictedWalkDistanceBoutHistory WHERE id = ?");
    *(void *)(a1 + 472) = v4;
    *(void *)(a1 + 480) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM PredictedWalkDistanceBoutHistory ORDER BY startTime DESC LIMIT 1");
    *(void *)(a1 + 488) = v5;
    *(void *)(a1 + 496) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"SELECT COUNT(*) FROM PredictedWalkDistanceBoutHistory");
    *(void *)(a1 + 504) = v6;
    *(_DWORD *)(a1 + 132) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
  }
  else
  {
    if (qword_102419200 != -1) {
      dispatch_once(&qword_102419200, &stru_102315D50);
    }
    int v7 = qword_102419208;
    if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLPredictedWalkDistanceBoutRecorderDb: Device is locked and we are unable to open the database", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419200 != -1) {
        dispatch_once(&qword_102419200, &stru_102315D50);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLPredictedWalkDistanceBoutRecorderDb::prepareSQLStatements()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

uint64_t sub_1011926CC(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    sub_100082068((void *)(a1 + 432), &v35);
    if (v35)
    {
      uint64_t v5 = (sqlite3_stmt *)sub_10014D19C(v35);
      if (sub_100055D58(v5, 1, *(double *)(a2 + 8)))
      {
        uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(v35);
        if (sub_100055D58(v6, 2, *(double *)(a2 + 16)))
        {
          int v7 = (sqlite3_stmt *)sub_10014D19C(v35);
          if (sub_100055B20(v7, 3, *(_DWORD *)(a2 + 24)))
          {
            uint64_t v8 = (sqlite3_stmt *)sub_10014D19C(v35);
            if (sub_100055D58(v8, 4, *(double *)(a2 + 32)))
            {
              uint64_t v9 = (sqlite3_stmt *)sub_10014D19C(v35);
              if (sub_100055D58(v9, 5, *(double *)(a2 + 40)))
              {
                int v10 = (sqlite3_stmt *)sub_10014D19C(v35);
                if (sub_100055B20(v10, 6, *(_DWORD *)(a2 + 48)))
                {
                  uint64_t v11 = (sqlite3_stmt *)sub_10014D19C(v35);
                  if (sub_100055B20(v11, 7, *(_DWORD *)(a2 + 52)))
                  {
                    int v12 = (sqlite3_stmt *)sub_10014D19C(v35);
                    if (sub_100055B20(v12, 8, *(_DWORD *)(a2 + 56)))
                    {
                      uint64_t v13 = (sqlite3_stmt *)sub_10014D19C(v35);
                      if (sub_100055D58(v13, 9, *(double *)(a2 + 64)))
                      {
                        uint64_t v14 = (sqlite3_stmt *)sub_10014D19C(v35);
                        if (sub_10014D1A4(v14, 10, *(_DWORD *)(a2 + 72)))
                        {
                          uint64_t v15 = *(void *)(a1 + 80);
                          int v16 = (sqlite3_stmt *)sub_10014D19C(v35);
                          sub_10001FEB0(v15, v16);
                          ++*(_DWORD *)(a1 + 132);
                          if (*(void *)(a1 + 520))
                          {
                            if (*(void *)(a1 + 512))
                            {
                              long long v17 = *(_OWORD *)(a2 + 84);
                              long long v40 = *(_OWORD *)(a2 + 68);
                              long long v41 = v17;
                              long long v42 = *(_OWORD *)(a2 + 100);
                              int v43 = *(_DWORD *)(a2 + 116);
                              long long v18 = *(_OWORD *)(a2 + 20);
                              *(_OWORD *)uint64_t buf = *(_OWORD *)(a2 + 4);
                              long long v37 = v18;
                              long long v19 = *(_OWORD *)(a2 + 52);
                              long long v38 = *(_OWORD *)(a2 + 36);
                              long long v39 = v19;
                              int v20 = sub_1006037D0(*(void *)(a1 + 80));
                              uint64_t v21 = *(void **)(a1 + 520);
                              v24[0] = _NSConcreteStackBlock;
                              v24[1] = 3221225472;
                              long long v30 = v40;
                              long long v31 = v41;
                              long long v32 = v42;
                              long long v26 = *(_OWORD *)buf;
                              long long v27 = v37;
                              long long v28 = v38;
                              __n128 v24[2] = sub_101192AE8;
                              v24[3] = &unk_102315CB0;
                              void v24[4] = a1;
                              int v25 = v20;
                              int v33 = v43;
                              long long v29 = v39;
                              [v21 async:v24];
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      if (qword_102419200 != -1) {
        dispatch_once(&qword_102419200, &stru_102315D50);
      }
      uint64_t v22 = qword_102419208;
      if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "PredictedWalkDistanceBoutRecorderDb: failed to prepare insert #InvalidPreparedSQLStatement", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419200 != -1) {
          dispatch_once(&qword_102419200, &stru_102315D50);
        }
        __int16 v34 = 0;
        int v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLPredictedWalkDistanceBoutRecorderDb::insertRecordUL(const CLPredictedWalkDistanceBoutEntry &, BOOL)", "%s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
      }
    }
    uint64_t result = v35;
    uint64_t v35 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_101192A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a32) {
    (*(void (**)(uint64_t))(*(void *)a32 + 8))(a32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101192AE8(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 512);
  long long v2 = *(_OWORD *)(a1 + 120);
  void v6[4] = *(_OWORD *)(a1 + 104);
  v6[5] = v2;
  v6[6] = *(_OWORD *)(a1 + 136);
  uint64_t v7 = *(void *)(a1 + 152);
  long long v3 = *(_OWORD *)(a1 + 56);
  long long v4 = *(_OWORD *)(a1 + 88);
  _DWORD v6[2] = *(_OWORD *)(a1 + 72);
  void v6[3] = v4;
  v6[0] = *(_OWORD *)(a1 + 40);
  v6[1] = v3;
  return (*(uint64_t (**)(uint64_t, _OWORD *))(v1 + 16))(v1, v6);
}

uint64_t sub_101192B54(uint64_t a1, uint64_t a2)
{
  if (!sub_100082064(a1 + 72)) {
    return 2;
  }
  sub_100082068((void *)(a1 + 480), &v15);
  int v7 = 0;
  uint64_t v13 = 0;
  int v14 = 0;
  long long v8 = 0uLL;
  int v9 = 0;
  uint64_t v11 = 0;
  long long v10 = 0uLL;
  int v12 = 0;
  uint64_t v4 = sub_101191B20(&v15, (uint64_t)&v7);
  if (!v4)
  {
    *(_DWORD *)a2 = v7;
    *(_OWORD *)(a2 + 8) = v8;
    *(_DWORD *)(a2 + 24) = v9;
    *(_OWORD *)(a2 + 32) = v10;
    *(void *)(a2 + 48) = v11;
    *(_DWORD *)(a2 + 56) = v12;
    *(void *)(a2 + 64) = v13;
    *(_DWORD *)(a2 + 72) = v14;
  }
  uint64_t v5 = v15;
  uint64_t v15 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return v4;
}

void sub_101192C48(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 24);
  *(void *)(v1 - 24) = 0;
  if (v3) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

double sub_101192C64(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = 0;
  double v11 = 0.0;
  int v12 = 0;
  long long v6 = 0uLL;
  int v7 = 0;
  uint64_t v9 = 0;
  long long v8 = 0uLL;
  int v10 = 0;
  sub_101192CF8(a2, (uint64_t)&v5);
  *(_DWORD *)a3 = v5;
  *(_OWORD *)(a3 + 8) = v6;
  *(_DWORD *)(a3 + 24) = v7;
  *(_OWORD *)(a3 + 32) = v8;
  *(void *)(a3 + 48) = v9;
  *(_DWORD *)(a3 + 56) = v10;
  double result = v11;
  *(double *)(a3 + 64) = v11;
  *(_DWORD *)(a3 + 72) = v12;
  return result;
}

uint64_t sub_101192CF8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)a2 = sqlite3_column_int(v4, 0);
  int v5 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v5, 1);
  long long v6 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 16) = sqlite3_column_double(v6, 2);
  int v7 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 24) = sqlite3_column_int(v7, 3);
  long long v8 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 32) = sqlite3_column_double(v8, 4);
  uint64_t v9 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 40) = sqlite3_column_double(v9, 5);
  int v10 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 48) = sqlite3_column_int(v10, 6);
  double v11 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 52) = sqlite3_column_int(v11, 7);
  int v12 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 56) = sqlite3_column_int(v12, 8);
  uint64_t v13 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 64) = sqlite3_column_double(v13, 9);
  int v14 = (sqlite3_stmt *)sub_10014D19C(*a1);
  uint64_t result = sqlite3_column_int(v14, 10);
  *(_DWORD *)(a2 + 72) = result;
  return result;
}

uint64_t sub_101192DF8(uint64_t a1)
{
  uint64_t v2 = a1 + 112;
  uint64_t v3 = a1 + 72;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 16))(a1 + 112);
  if (sub_100082064(v3)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * from PredictedWalkDistanceBoutHistory ORDER BY startTime ASC");
  }
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_102315D70);
  }
  uint64_t v4 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "PredictedWalkDistanceBoutHistory not accessible", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102315D70);
    }
    long long v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CMError CLPredictedWalkDistanceBoutRecorderDb::queryBoutAllRecords(std::vector<CLPredictedWalkDistanceBoutEntry> &) const", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return 109;
}

void sub_101193274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1011932E0(uint64_t a1)
{
  return sub_101192DF8(a1 - 424);
}

uint64_t sub_1011932E8(void *a1, void *a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101AA50F0(v4);
    sub_1001D7FD4();
  }
  int v12 = v15[1];
  operator delete(v15[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    a2[1] = *a2;
    sub_10010F274((uint64_t)v15);
    long long v6 = sub_100132EFC(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      int v7 = __p;
    }
    else {
      int v7 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = v14;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    uint64_t v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      double v11 = __p;
    }
    else {
      double v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_101193784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  sub_101A129A8((uint64_t)&a30);
  _Unwind_Resume(a1);
}

uint64_t sub_101193804(void *a1)
{
  uint64_t v3 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17[0]) < 0)
  {
    uint64_t v10 = v16[1];
    operator delete(v16[0]);
    if (v10)
    {
LABEL_3:
      if (sub_100082064(a1 + 9))
      {
        sub_10010F274((uint64_t)v16);
        uint64_t v4 = sub_100132EFC(v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0) {
          int v5 = __p;
        }
        else {
          int v5 = (void **)__p[0];
        }
        if ((v14 & 0x80u) == 0) {
          uint64_t v6 = v14;
        }
        else {
          uint64_t v6 = (uint64_t)__p[1];
        }
        int v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
        sub_100132EFC(v7, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v8 = a1[10];
        std::stringbuf::str();
        if ((v14 & 0x80u) == 0) {
          uint64_t v9 = __p;
        }
        else {
          uint64_t v9 = (void **)__p[0];
        }
        sub_10014D518(v8, (uint64_t)v9);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17[0]))
  {
    goto LABEL_3;
  }
  sub_101AA5260(v3);
  uint64_t v15 = 0;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  *(void **)((char *)v16
  v17[0] = v11;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return 2;
}

void sub_101193CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a30);
  _Unwind_Resume(a1);
}

uint64_t sub_101193D64(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_10119581C(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102315E88);
  }
  int v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)uint64_t v13 = 0;
    *(_WORD *)&v13[4] = 2082;
    *(void *)&v13[6] = "";
    __int16 v14 = 2082;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102315E88);
    }
    int v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)uint64_t v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102315E88);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLPredictedWalkDistanceBoutEntry, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = CLPredictedWalkDistanceBoutEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_1011944DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_101194510(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  long long v4 = a3[1];
  long long v5 = a3[3];
  *(_OWORD *)(a2 + 32) = a3[2];
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v4;
  __n128 result = (__n128)a3[4];
  long long v7 = a3[5];
  long long v8 = a3[6];
  *(void *)(a2 + 112) = *((void *)a3 + 14);
  *(_OWORD *)(a2 + 80) = v7;
  *(_OWORD *)(a2 + 96) = v8;
  *(__n128 *)(a2 + 64) = result;
  return result;
}

id *sub_10119453C(uint64_t a1, long long *a2, char a3)
{
  v45[0] = (id)os_transaction_create();
  v45[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 72))(a1, a1 + 224, a2);
    return sub_1000E1098(v45);
  }
  if ((a3 & 1) == 0) {
    sub_10002B640(*(void *)(a1 + 80));
  }
  int v33 = 0;
  double v34 = 0.0;
  uint64_t v35 = 0;
  int v36 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v37 = 0;
  int v40 = 0;
  long long v43 = 0u;
  uint64_t v44 = 0;
  long long v41 = 0u;
  long long v42 = 0u;
  int v6 = (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 104))(a1, &v33);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102315E88);
      }
      __int16 v14 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102315E88);
        }
        LOWORD(v46) = 0;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLPredictedWalkDistanceBoutEntry, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLPredictedWalkDistanceBoutEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      goto LABEL_43;
    }
    double v7 = *((double *)a2 + 1);
    double v8 = v34;
    double v9 = v7 - v34;
    if (v7 - v34 < 0.0) {
      double v9 = -(v7 - v34);
    }
    if (v9 > 604800.0)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102315E88);
      }
      uint64_t v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *((void *)a2 + 1);
        *(_DWORD *)uint64_t buf = 134349312;
        double v51 = v34;
        __int16 v52 = 2050;
        uint64_t v53 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102315E88);
        }
        uint64_t v27 = *((void *)a2 + 1);
        int v46 = 134349312;
        double v47 = v34;
        __int16 v48 = 2050;
        uint64_t v49 = v27;
        long long v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLPredictedWalkDistanceBoutEntry, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLPredictedWalkDistanceBoutEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v28);
        if (v28 != (char *)buf) {
          free(v28);
        }
      }
      CLWriteStackshot();
      double v7 = *((double *)a2 + 1);
      double v8 = v34;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102315E88);
        }
        int v12 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          double v13 = *((double *)a2 + 1);
          *(_DWORD *)uint64_t buf = 134217984;
          double v51 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_102315E88);
          }
          double v29 = *((double *)a2 + 1);
          int v46 = 134217984;
          double v47 = v29;
          uint64_t v30 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLPredictedWalkDistanceBoutEntry, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLPredictedWalkDistanceBoutEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v30);
          if (v30 != (char *)buf) {
            free(v30);
          }
        }
        (*(void (**)(uint64_t, long long *))(*(void *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      double v16 = v7 - v8;
      double v17 = *(float *)(a1 + 136);
      if (qword_102418FD0 != -1)
      {
        double v32 = *(float *)(a1 + 136);
        dispatch_once(&qword_102418FD0, &stru_102315E88);
        double v17 = v32;
      }
      double v18 = v16 - v17;
      long long v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 134217984;
        double v51 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102315E88);
        }
        int v46 = 134217984;
        double v47 = v18;
        long long v31 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLPredictedWalkDistanceBoutEntry, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLPredictedWalkDistanceBoutEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v31);
        if (v31 != (char *)buf) {
          free(v31);
        }
      }
      (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v18);
    }
    (*(void (**)(uint64_t, int *, uint64_t, long long *))(*(void *)a1 + 144))(a1, &v33, a1 + 224, a2);
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  long long v20 = *a2;
  long long v21 = a2[1];
  long long v22 = a2[3];
  *(_OWORD *)(a1 + 256) = a2[2];
  *(_OWORD *)(a1 + 272) = v22;
  *(_OWORD *)(a1 + 224) = v20;
  *(_OWORD *)(a1 + 240) = v21;
  long long v23 = a2[4];
  long long v24 = a2[5];
  long long v25 = a2[6];
  *(void *)(a1 + 336) = *((void *)a2 + 14);
  *(_OWORD *)(a1 + 304) = v24;
  *(_OWORD *)(a1 + 320) = v25;
  *(_OWORD *)(a1 + 288) = v23;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_100028FB4(*(void *)(a1 + 80));
  }
  return sub_1000E1098(v45);
}

void sub_101194D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
}

uint64_t sub_101194DC0(void *a1, uint64_t a2)
{
  long long v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101AA53D0(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  int v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    int v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_101195134(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101AA5540(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    long long v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      long long v5 = __p;
    }
    else {
      long long v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    double v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      double v9 = __p;
    }
    else {
      double v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_101195460(uint64_t a1)
{
  return sub_101193D64(a1 - 72);
}

void sub_101195468(id a1)
{
  qword_102419208 = (uint64_t)os_log_create("com.apple.locationd.Motion", "PredictedWalkDistance");
}

void sub_101195498(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_1011954C8(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101AA56B0(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    long long v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      long long v4 = __p;
    }
    else {
      long long v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_1011957EC(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_10119581C(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_10119589C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1011958B8()
{
  qword_102485BB0 = (uint64_t)"id";
  dword_102485BB8 = 1;
  word_102485BBC = 257;
  byte_102485BC0 = 0;
  byte_102485BD8 = 0;
  qword_102485BE0 = (uint64_t)"startTime";
  dword_102485BE8 = 2;
  word_102485BEC = 0;
  byte_102485BF0 = 0;
  byte_102485C08 = 0;
  qword_102485C10 = (uint64_t)"endTime";
  dword_102485C18 = 2;
  word_102485C1C = 0;
  byte_102485C20 = 0;
  byte_102485C38 = 0;
  qword_102485C40 = (uint64_t)"stepCount";
  dword_102485C48 = 1;
  word_102485C4C = 0;
  byte_102485C50 = 0;
  byte_102485C68 = 0;
  qword_102485C70 = (uint64_t)"distance";
  dword_102485C78 = 2;
  word_102485C7C = 0;
  byte_102485C80 = 0;
  byte_102485C98 = 0;
  qword_102485CA0 = (uint64_t)"activeTime";
  dword_102485CA8 = 2;
  word_102485CAC = 0;
  byte_102485CB0 = 0;
  byte_102485CC8 = 0;
  qword_102485CD0 = (uint64_t)"elevationAscended";
  dword_102485CD8 = 1;
  word_102485CDC = 0;
  byte_102485CE0 = 0;
  byte_102485CF8 = 0;
  qword_102485D00 = (uint64_t)"elevationDescended";
  dword_102485D08 = 1;
  word_102485D0C = 0;
  byte_102485D10 = 0;
  byte_102485D28 = 0;
  qword_102485D30 = (uint64_t)"stepCountGPS";
  dword_102485D38 = 1;
  word_102485D3C = 0;
  byte_102485D40 = 0;
  byte_102485D58 = 0;
  qword_102485D60 = (uint64_t)"distanceGPS";
  dword_102485D68 = 2;
  word_102485D6C = 0;
  byte_102485D70 = 0;
  byte_102485D88 = 0;
  qword_102485D90 = (uint64_t)"boutType";
  dword_102485D98 = 1;
  word_102485D9C = 0;
  byte_102485DA0 = 0;
  byte_102485DB8 = 0;
  qword_102485DC0 = 0;
  dword_102485DC8 = 5;
  word_102485DCC = 0;
  byte_102485DD0 = 0;
  byte_102485DE8 = 0;
  qword_102485DF0 = (uint64_t)"startTime";
  *(void *)algn_102485DF8 = 0;
}

uint64_t sub_101195A28(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  *(void *)a1 = off_102315EB8;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (unsigned char *)(a1 + 24);
  if (*((char *)a3 + 23) < 0)
  {
    sub_1000DC48C(v6, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    *(void *)(a1 + 40) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v6 = v7;
  }
  *(void *)(a1 + 48) = 0x600000006;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 80) = _Q0;
  *(_WORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 114) = 1;
  return a1;
}

void sub_101195AD0(_Unwind_Exception *exception_object)
{
  long long v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101195AE8(uint64_t a1)
{
  *(void *)a1 = off_102315EB8;
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  long long v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  return a1;
}

void sub_101195B5C(uint64_t a1, uint64_t *a2)
{
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    if (*((unsigned char *)a2 + 23) != 6)
    {
      uint64_t v2 = a2;
      if (*((unsigned char *)a2 + 23) != 8) {
        goto LABEL_27;
      }
      goto LABEL_17;
    }
    if (*(_DWORD *)a2 != 1886218611 || *((_WORD *)a2 + 2) != 25964)
    {
      if (*(_DWORD *)a2 != 1919902579 || *((_WORD *)a2 + 2) != 25701) {
LABEL_27:
      }
        operator new();
LABEL_29:
      operator new();
    }
LABEL_28:
    operator new();
  }
  uint64_t v3 = a2[1];
  if (v3 == 6)
  {
    uint64_t v4 = (int *)*a2;
    if (*(_DWORD *)*a2 == 1886218611 && *(_WORD *)(*a2 + 4) == 25964) {
      goto LABEL_28;
    }
    int v6 = *v4;
    int v7 = *((unsigned __int16 *)v4 + 2);
    if (v6 == 1919902579 && v7 == 25701) {
      goto LABEL_29;
    }
    uint64_t v3 = a2[1];
  }
  if (v3 != 8) {
    goto LABEL_27;
  }
  uint64_t v2 = (void *)*a2;
LABEL_17:
  if (*v2 == 0x656C636974726170) {
    operator new();
  }
  goto LABEL_27;
}

void sub_101195E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  if (v16) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_101195E90(__n128 *a1, uint64_t a2)
{
  a1[3].n128_u64[0] = *(void *)a2;
  if (&a1[3] != (__n128 *)a2) {
    sub_1008A9A00(&a1[3].n128_i8[8], *(char **)(a2 + 8), *(void *)(a2 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
  }
  __n128 result = *(__n128 *)(a2 + 32);
  a1[5] = result;
  return result;
}

BOOL sub_101195EF0(uint64_t a1, double a2)
{
  uint64_t v2 = (_DWORD *)(a1 + 48);
  return !sub_100178D5C(a1 + 48, a2, 6.0) && *v2 == 1;
}

double sub_101195F34(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 108);
  double result = *(double *)(a1 + 100);
  *(double *)(a2 + 40) = result;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 100) = 0;
  return result;
}

uint64_t sub_101195F50(uint64_t result, char a2)
{
  *(unsigned char *)(result + 96) = a2;
  return result;
}

void sub_101195F58(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void sub_101195F60(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_101195FC8(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101AA5820(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101195FE0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_101196010(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_101196054(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1011960BC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101AA5820(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011960D4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_101196104(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_101196148(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1011961B0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101AA5820(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011961C8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_1011961F8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_101196758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_101196770(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 40) = a3;
  return result;
}

void sub_1011967EC(uint64_t a1)
{
  sub_101198338((uint64_t)v2);
  long long v4 = xmmword_101DAB660;
  long long v5 = xmmword_101DAB670;
  long long v6 = xmmword_101DAB680;
  uint64_t v7 = 0x4006A09E667F3BCCLL;
  swan::BatchedGNSSDataSmoother::Configure();
  sub_101196910(a1);
  v2[0] = off_1022CAE80;
  if (v3 < 0) {
    operator delete((void *)v2[1]);
  }
}

void sub_1011968D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

double sub_101196910(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102316130);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 1960);
    *(_DWORD *)uint64_t buf = 134283521;
    uint64_t v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "GPSODOM,resetting storing distance %{private}.3lf", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102316130);
    }
    double v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometrySmoother::reset()", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  *(double *)(a1 + 1952) = *(double *)(a1 + 1960) + *(double *)(a1 + 1952);
  long long v4 = *(void ***)(a1 + 1656);
  uint64_t v5 = *(void *)(a1 + 1664);
  *(void *)(a1 + 1688) = 0;
  unint64_t v6 = v5 - (void)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      long long v4 = (void **)(*(void *)(a1 + 1656) + 8);
      *(void *)(a1 + 1656) = v4;
      unint64_t v6 = *(void *)(a1 + 1664) - (void)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    uint64_t v7 = 8;
    goto LABEL_12;
  }
  if (v6 >> 3 == 2)
  {
    uint64_t v7 = 16;
LABEL_12:
    *(void *)(a1 + 1680) = v7;
  }
  *(void *)(a1 + 1984) = 0xBFF0000000000000;
  double result = 0.0;
  *(_OWORD *)(a1 + 1968) = 0u;
  *(unsigned char *)(a1 + 1944) = 0;
  return result;
}

uint64_t sub_101196B4C(uint64_t a1)
{
  *(void *)a1 = off_1022CAE80;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

double sub_101196B9C(uint64_t a1)
{
  return *(double *)(a1 + 1968) + *(double *)(a1 + 1952);
}

double sub_101196BAC(uint64_t a1)
{
  return *(double *)(a1 + 1984);
}

BOOL sub_101196BB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = cnnavigation::ECEFToLLA();
  if (!v5)
  {
    *(float64x2_t *)(a3 + 8) = vdivq_f64(vmulq_f64(v7, (float64x2_t)vdupq_n_s64(0x4066800000000000uLL)), (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL));
    *(void *)(a3 + 64) = v8;
    *(double *)(a3 + 48) = sqrt(*(double *)(a1 + 32) * *(double *)(a1 + 32) + *(double *)(a1 + 24)
                                                                            * *(double *)(a1 + 24));
  }
  return v5 == 0;
}

uint64_t sub_101196C84(uint64_t a1, double *a2)
{
  double v2 = *(double *)(a1 + 1968);
  *(double *)(a1 + 1960) = v2;
  *(void *)(a1 + 1984) = 0xBFF0000000000000;
  if (a2[14] > 0.0 && a2[30] > 0.0)
  {
    if (a2[9] <= 0.0) {
      double v5 = 0.0;
    }
    else {
      double v5 = a2[8];
    }
    uint64_t v6 = a1 + 1648;
    sub_101197EE8((void *)(a1 + 1648), (long long *)a2);
    unint64_t v7 = *(void *)(a1 + 1688);
    if (v7 == 1) {
      return 1;
    }
    unint64_t v10 = *(void *)(a1 + 1688);
    if (v7 >= 0x3D)
    {
      uint64_t v11 = *(void *)(a1 + 1680);
      *(void *)(a1 + 1688) = v7 - 1;
      *(void *)(a1 + 1680) = v11 + 1;
      sub_100A32A04(v6, 1);
      unint64_t v10 = *(void *)(a1 + 1688);
    }
    long long v123 = 0;
    long long v124 = 0;
    uint64_t v125 = 0;
    sub_10017C3FC(&v123, v10);
    long long v120 = 0;
    long long v121 = 0;
    uint64_t v122 = 0;
    sub_10017C3FC(&v120, v10);
    long long v117 = 0;
    long long v118 = 0;
    uint64_t v119 = 0;
    sub_1001F6538(&v117, v10);
    memset(v116, 0, sizeof(v116));
    sub_100288E3C((char **)v116, v10);
    __int16 v113 = 0;
    uint64_t v114 = 0;
    uint64_t v115 = 0;
    sub_101197FBC(&v113, v10);
    long long v110 = 0;
    long long v111 = 0;
    uint64_t v112 = 0;
    sub_1011980AC(&v110, v10);
    std::string __p = 0;
    long long v108 = 0;
    long long v109 = 0;
    sub_1011981C4(&__p, 0x3CuLL);
    int v106 = 0;
    uint64_t v105 = 0;
    uint64_t v12 = *(void *)(a1 + 1656);
    unint64_t v13 = *(void *)(a1 + 1680);
    unsigned __int8 v14 = (char *)(v12 + 8 * (v13 >> 4));
    if (*(void *)(a1 + 1664) == v12)
    {
      uint64_t v15 = 0;
      double v18 = 0;
      uint64_t v17 = (char *)(v12 + 8 * ((*(void *)(a1 + 1688) + v13) >> 4));
    }
    else
    {
      uint64_t v15 = (long long *)(*(void *)v14 + 248 * (*(void *)(a1 + 1680) & 0xFLL));
      unint64_t v16 = *(void *)(a1 + 1688) + v13;
      uint64_t v17 = (char *)(v12 + 8 * (v16 >> 4));
      double v18 = (long long *)(*(void *)v17 + 248 * (v16 & 0xF));
    }
    sub_101199200((uint64_t)v104, v14, v15, v17, v18);
    if (swan::BatchedGNSSDataSmoother::Run() | v106)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102316130);
      }
      long long v20 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "GPSODOM,smoother is unhealthy", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_64;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_26;
      }
LABEL_133:
      dispatch_once(&qword_1024193D0, &stru_102316130);
LABEL_26:
      *(_WORD *)long long v126 = 0;
      long long v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGpsOdometrySmoother::update(const swan::stGPSsa &)", "%s\n", v21);
      goto LABEL_117;
    }
    if (v105 != v10)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102316130);
      }
      int v61 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134349056;
        *(void *)&double v141 = v10 - v105;
        _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_ERROR, "GPSODOM,samples rejected,%{public}lu", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_64;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102316130);
      }
      *(_DWORD *)long long v126 = 134349056;
      *(void *)&v126[4] = v10 - v105;
      long long v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGpsOdometrySmoother::update(const swan::stGPSsa &)", "%s\n", v21);
LABEL_117:
      if (v21 == (char *)buf)
      {
LABEL_64:
        sub_101196910(a1);
        uint64_t v8 = 0;
LABEL_65:
        if (v104[0])
        {
          v104[1] = v104[0];
          operator delete(v104[0]);
        }
        if (__p)
        {
          long long v108 = (char *)__p;
          operator delete(__p);
        }
        if (v110)
        {
          long long v111 = v110;
          operator delete(v110);
        }
        if (v113)
        {
          uint64_t v114 = v113;
          operator delete(v113);
        }
        if (v116[0]) {
          operator delete(v116[0]);
        }
        if (v117)
        {
          long long v118 = v117;
          operator delete(v117);
        }
        if (v120)
        {
          long long v121 = v120;
          operator delete(v120);
        }
        if (v123)
        {
          long long v124 = v123;
          operator delete(v123);
        }
        return v8;
      }
LABEL_118:
      free(v21);
      goto LABEL_64;
    }
    if (v10)
    {
      uint64_t v22 = 0;
      while (sub_101196BB4((uint64_t)v113 + 48 * v22, v19, (uint64_t)v126))
      {
        long long v23 = v108;
        if (v108 >= v109)
        {
          long long v24 = __p;
          unint64_t v25 = 0xEF7BDEF7BDEF7BDFLL * ((v108 - (unsigned char *)__p) >> 3);
          unint64_t v26 = v25 + 1;
          if (v25 + 1 > 0x108421084210842) {
            sub_1001D7FD4();
          }
          if (0xDEF7BDEF7BDEF7BELL * ((v109 - (unsigned char *)__p) >> 3) > v26) {
            unint64_t v26 = 0xDEF7BDEF7BDEF7BELL * ((v109 - (unsigned char *)__p) >> 3);
          }
          if (0xEF7BDEF7BDEF7BDFLL * ((v109 - (unsigned char *)__p) >> 3) >= 0x84210842108421) {
            unint64_t v19 = 0x108421084210842;
          }
          else {
            unint64_t v19 = v26;
          }
          if (v19)
          {
            uint64_t v27 = (char *)sub_1009204C4((uint64_t)&v109, v19);
            long long v24 = __p;
            long long v23 = v108;
          }
          else
          {
            uint64_t v27 = 0;
          }
          long long v28 = &v27[248 * v25];
          *((_OWORD *)v28 + 12) = v136;
          *((_OWORD *)v28 + 13) = v137;
          *((_OWORD *)v28 + 14) = v138;
          *((void *)v28 + 30) = v139;
          *((_OWORD *)v28 + 8) = v132;
          *((_OWORD *)v28 + 9) = v133;
          *((_OWORD *)v28 + 10) = v134;
          *((_OWORD *)v28 + 11) = v135;
          *((_OWORD *)v28 + 4) = v128;
          *((_OWORD *)v28 + 5) = v129;
          *((_OWORD *)v28 + 6) = v130;
          *((_OWORD *)v28 + 7) = v131;
          *(_OWORD *)long long v28 = *(_OWORD *)v126;
          *((_OWORD *)v28 + 1) = *(_OWORD *)&v126[16];
          *((_OWORD *)v28 + 2) = *(_OWORD *)v127;
          *((_OWORD *)v28 + 3) = *(_OWORD *)&v127[16];
          if (v23 == v24)
          {
            long long v42 = &v27[248 * v25];
          }
          else
          {
            double v29 = &v27[248 * v25];
            do
            {
              long long v30 = *(_OWORD *)((char *)v23 - 248);
              long long v31 = *(_OWORD *)((char *)v23 - 232);
              long long v32 = *(_OWORD *)((char *)v23 - 216);
              *(_OWORD *)(v29 - 200) = *(_OWORD *)((char *)v23 - 200);
              *(_OWORD *)(v29 - 216) = v32;
              *(_OWORD *)(v29 - 232) = v31;
              *(_OWORD *)(v29 - 248) = v30;
              long long v33 = *(_OWORD *)((char *)v23 - 184);
              long long v34 = *(_OWORD *)((char *)v23 - 168);
              long long v35 = *(_OWORD *)((char *)v23 - 152);
              *(_OWORD *)(v29 - 136) = *(_OWORD *)((char *)v23 - 136);
              *(_OWORD *)(v29 - 152) = v35;
              *(_OWORD *)(v29 - 168) = v34;
              *(_OWORD *)(v29 - 184) = v33;
              long long v36 = *(_OWORD *)((char *)v23 - 120);
              long long v37 = *(_OWORD *)((char *)v23 - 104);
              long long v38 = *(_OWORD *)((char *)v23 - 88);
              *(_OWORD *)(v29 - 72) = *(_OWORD *)((char *)v23 - 72);
              *(_OWORD *)(v29 - 88) = v38;
              *(_OWORD *)(v29 - 104) = v37;
              *(_OWORD *)(v29 - 120) = v36;
              long long v39 = *(_OWORD *)((char *)v23 - 56);
              long long v40 = *(_OWORD *)((char *)v23 - 40);
              long long v41 = *(_OWORD *)((char *)v23 - 24);
              long long v42 = v29 - 248;
              *((void *)v29 - 1) = *((void *)v23 - 1);
              *(_OWORD *)(v29 - 24) = v41;
              *(_OWORD *)(v29 - 40) = v40;
              *(_OWORD *)(v29 - 56) = v39;
              long long v23 = (_OWORD *)((char *)v23 - 248);
              v29 -= 248;
            }
            while (v23 != v24);
          }
          long long v43 = v28 + 248;
          std::string __p = v42;
          long long v108 = v28 + 248;
          long long v109 = &v27[248 * v19];
          if (v24) {
            operator delete(v24);
          }
          long long v108 = v43;
        }
        else
        {
          *((_OWORD *)v108 + 12) = v136;
          v23[13] = v137;
          v23[14] = v138;
          *((void *)v23 + 30) = v139;
          v23[8] = v132;
          v23[9] = v133;
          v23[10] = v134;
          v23[11] = v135;
          void v23[4] = v128;
          void v23[5] = v129;
          v23[6] = v130;
          v23[7] = v131;
          _OWORD *v23 = *(_OWORD *)v126;
          v23[1] = *(_OWORD *)&v126[16];
          void v23[2] = *(_OWORD *)v127;
          v23[3] = *(_OWORD *)&v127[16];
          long long v108 = (char *)v23 + 248;
        }
        if (++v22 == v10)
        {
          if (v7 > 0x3C) {
            goto LABEL_83;
          }
          double v44 = 0.0;
          double v45 = 0.0;
          if (v10 >= 2)
          {
            uint64_t v46 = 264;
            for (uint64_t i = 1; i != v10; ++i)
            {
              double v44 = v44
                  + sub_1000F1648((double *)(a1 + 1992), *(double *)((char *)__p + v46 - 256), *(double *)((char *)__p + v46 - 248), *(double *)((char *)__p + v46 - 8), *(double *)((char *)__p + v46), v5);
              if (v10 == 60 && i == 30)
              {
                __int16 v48 = __p;
                long long v49 = *((_OWORD *)__p + 466);
                long long v50 = *((_OWORD *)__p + 468);
                long long v51 = *((_OWORD *)__p + 465);
                *(_OWORD *)(a1 + 1728) = *((_OWORD *)__p + 467);
                *(_OWORD *)(a1 + 1744) = v50;
                *(_OWORD *)(a1 + 1696) = v51;
                *(_OWORD *)(a1 + 1712) = v49;
                long long v52 = v48[470];
                long long v53 = v48[472];
                long long v54 = v48[469];
                *(_OWORD *)(a1 + 1792) = v48[471];
                *(_OWORD *)(a1 + 1808) = v53;
                *(_OWORD *)(a1 + 1760) = v54;
                *(_OWORD *)(a1 + 1776) = v52;
                long long v55 = v48[474];
                long long v56 = v48[476];
                long long v57 = v48[473];
                *(_OWORD *)(a1 + 1856) = v48[475];
                *(_OWORD *)(a1 + 1872) = v56;
                *(_OWORD *)(a1 + 1824) = v57;
                *(_OWORD *)(a1 + 1840) = v55;
                long long v58 = v48[478];
                long long v59 = v48[479];
                long long v60 = v48[477];
                *(void *)(a1 + 1936) = *((void *)v48 + 960);
                *(_OWORD *)(a1 + 1904) = v58;
                *(_OWORD *)(a1 + 1920) = v59;
                *(_OWORD *)(a1 + 1888) = v60;
                *(unsigned char *)(a1 + 1944) = 1;
                *(double *)(a1 + 1976) = v44;
                double v44 = 0.0;
              }
              v46 += 248;
            }
            double v45 = 0.0;
          }
          goto LABEL_91;
        }
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102316130);
      }
      unsigned int v90 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_ERROR, "GPSODOM,Conversion Failed", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_64;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102316130);
      }
      long long v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGpsOdometrySmoother::update(const swan::stGPSsa &)", "%s\n", v21);
      if (v21 == (char *)buf) {
        goto LABEL_64;
      }
      goto LABEL_118;
    }
    double v44 = 0.0;
    double v45 = 0.0;
    if (v7 > 0x3C)
    {
LABEL_83:
      if (!*(unsigned char *)(a1 + 1944))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102316130);
        }
        uint64_t v91 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_ERROR, "GPSODOM,Invalid prior location", buf, 2u);
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_64;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1) {
          goto LABEL_26;
        }
        goto LABEL_133;
      }
      double v44 = 0.0;
      uint64_t v63 = -7192;
      do
      {
        double v44 = v44
            + sub_1000F1648((double *)(a1 + 1992), *(double *)((char *)__p + v63 + 14640), *(double *)((char *)__p + v63 + 14648), *(double *)((char *)__p + v63 + 14888), *(double *)((char *)__p + v63 + 14896), v5);
        v63 += 248;
      }
      while (v63);
      double v45 = sub_1000F1648((double *)(a1 + 1992), *(double *)(a1 + 1704), *(double *)(a1 + 1712), *((double *)__p + 931), *((double *)__p + 932), v5);
      *(double *)(a1 + 1976) = v45 + *(double *)(a1 + 1976);
      double v64 = __p;
      long long v65 = *((_OWORD *)__p + 466);
      long long v66 = *((_OWORD *)__p + 467);
      long long v67 = *((_OWORD *)__p + 468);
      *(_OWORD *)(a1 + 1696) = *((_OWORD *)__p + 465);
      *(_OWORD *)(a1 + 1744) = v67;
      *(_OWORD *)(a1 + 1728) = v66;
      *(_OWORD *)(a1 + 1712) = v65;
      long long v68 = v64[470];
      long long v69 = v64[471];
      long long v70 = v64[472];
      *(_OWORD *)(a1 + 1760) = v64[469];
      *(_OWORD *)(a1 + 1808) = v70;
      *(_OWORD *)(a1 + 1792) = v69;
      *(_OWORD *)(a1 + 1776) = v68;
      long long v71 = v64[474];
      long long v72 = v64[475];
      long long v73 = v64[476];
      *(_OWORD *)(a1 + 1824) = v64[473];
      *(_OWORD *)(a1 + 1872) = v73;
      *(_OWORD *)(a1 + 1856) = v72;
      *(_OWORD *)(a1 + 1840) = v71;
      long long v74 = v64[478];
      long long v75 = v64[479];
      uint64_t v76 = *((void *)v64 + 960);
      *(_OWORD *)(a1 + 1888) = v64[477];
      *(void *)(a1 + 1936) = v76;
      *(_OWORD *)(a1 + 1920) = v75;
      *(_OWORD *)(a1 + 1904) = v74;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102316130);
      }
      __int16 v77 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        double v78 = *((double *)v104[0] + 930);
        uint64_t v79 = *(void *)(a1 + 1704);
        uint64_t v80 = *(void *)(a1 + 1712);
        double v81 = *(double *)(a1 + 1760);
        double v82 = *(double *)(a1 + 1744);
        *(_DWORD *)uint64_t buf = 134284545;
        double v141 = v78;
        __int16 v142 = 2049;
        uint64_t v143 = v79;
        __int16 v144 = 2049;
        uint64_t v145 = v80;
        __int16 v146 = 2049;
        double v147 = v81;
        __int16 v148 = 2050;
        double v149 = v82;
        _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "GPSODOM,time,%{private}.3lf,lat,%{private}.10lf,lon,%{private}.10lf,altWGS84,%{private}.3lf,horizontalSpeed,%{public}.3lf", buf, 0x34u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102316130);
        }
        uint64_t v98 = *((void *)v104[0] + 930);
        uint64_t v99 = *(void *)(a1 + 1704);
        uint64_t v100 = *(void *)(a1 + 1712);
        uint64_t v101 = *(void *)(a1 + 1760);
        uint64_t v102 = *(void *)(a1 + 1744);
        *(_DWORD *)long long v126 = 134284545;
        *(void *)&v126[4] = v98;
        *(_WORD *)&v126[12] = 2049;
        *(void *)&v126[14] = v99;
        *(_WORD *)&v126[22] = 2049;
        *(void *)&v126[24] = v100;
        *(_WORD *)long long v127 = 2049;
        *(void *)&v127[2] = v101;
        *(_WORD *)&v127[10] = 2050;
        *(void *)&v127[12] = v102;
        long long v103 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGpsOdometrySmoother::update(const swan::stGPSsa &)", "%s\n", v103);
        if (v103 != (char *)buf) {
          free(v103);
        }
      }
    }
LABEL_91:
    double v83 = v44 + *(double *)(a1 + 1976);
    double v84 = fmax(*(double *)(a1 + 1968), v83);
    *(double *)(a1 + 1968) = v84;
    *(double *)(a1 + 1984) = v84 - v2;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102316130);
    }
    unsigned int v85 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      double v86 = *a2;
      uint64_t v87 = *(void *)(a1 + 1968);
      uint64_t v88 = *(void *)(a1 + 1984);
      uint64_t v89 = *(void *)(a1 + 1976);
      *(_DWORD *)uint64_t buf = 134350592;
      double v141 = v86;
      __int16 v142 = 2050;
      uint64_t v143 = v87;
      __int16 v144 = 2050;
      uint64_t v145 = v88;
      __int16 v146 = 2050;
      double v147 = v83;
      __int16 v148 = 2050;
      double v149 = v44;
      __int16 v150 = 2050;
      double v151 = v45;
      __int16 v152 = 2050;
      uint64_t v153 = v89;
      _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEBUG, "GPSODOM,time,%{public}.3lf,greatestD,%{public}.3lf,deltaGreatestD,%{public}.3lf,totalD,%{public}.3lf,windowD,%{public}.3lf,deltaD,%{public}.3lf,sumDeltaD,%{public}.3lf", buf, 0x48u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102316130);
      }
      double v93 = *a2;
      uint64_t v94 = *(void *)(a1 + 1968);
      uint64_t v95 = *(void *)(a1 + 1984);
      uint64_t v96 = *(void *)(a1 + 1976);
      *(_DWORD *)long long v126 = 134350592;
      *(double *)&v126[4] = v93;
      *(_WORD *)&v126[12] = 2050;
      *(void *)&v126[14] = v94;
      *(_WORD *)&v126[22] = 2050;
      *(void *)&v126[24] = v95;
      *(_WORD *)long long v127 = 2050;
      *(double *)&v127[2] = v83;
      *(_WORD *)&v127[10] = 2050;
      *(double *)&v127[12] = v44;
      *(_WORD *)&v127[20] = 2050;
      *(double *)&v127[22] = v45;
      *(_WORD *)&v127[30] = 2050;
      *(void *)&long long v128 = v96;
      int v97 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGpsOdometrySmoother::update(const swan::stGPSsa &)", "%s\n", v97);
      if (v97 != (char *)buf) {
        free(v97);
      }
    }
    uint64_t v8 = 1;
    goto LABEL_65;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102316130);
  }
  double v9 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning,GPSODOM,position missing speed information", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102316130);
    }
    *(_WORD *)long long v126 = 0;
    id v92 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGpsOdometrySmoother::update(const swan::stGPSsa &)", "%s\n", v92);
    if (v92 != (char *)buf) {
      free(v92);
    }
  }
  return 0;
}

void sub_101197DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  if (a23) {
    operator delete(a23);
  }
  if (a26) {
    operator delete(a26);
  }
  if (a29) {
    operator delete(a29);
  }
  if (a32) {
    operator delete(a32);
  }
  if (a35) {
    operator delete(a35);
  }
  if (a38) {
    operator delete(a38);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_101197EE8(void *a1, long long *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 2 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_101198E9C(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  uint64_t v8 = *(void *)(v5 + ((v7 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 248 * (v7 & 0xF);
  long long v9 = *a2;
  long long v10 = a2[1];
  long long v11 = a2[3];
  *(_OWORD *)(v8 + 32) = a2[2];
  *(_OWORD *)(v8 + 48) = v11;
  *(_OWORD *)uint64_t v8 = v9;
  *(_OWORD *)(v8 + 16) = v10;
  long long v12 = a2[4];
  long long v13 = a2[5];
  long long v14 = a2[7];
  *(_OWORD *)(v8 + 96) = a2[6];
  *(_OWORD *)(v8 + 112) = v14;
  *(_OWORD *)(v8 + 64) = v12;
  *(_OWORD *)(v8 + 80) = v13;
  long long v15 = a2[8];
  long long v16 = a2[9];
  long long v17 = a2[11];
  *(_OWORD *)(v8 + 160) = a2[10];
  *(_OWORD *)(v8 + 176) = v17;
  *(_OWORD *)(v8 + 128) = v15;
  *(_OWORD *)(v8 + 144) = v16;
  __n128 result = (__n128)a2[12];
  long long v19 = a2[13];
  long long v20 = a2[14];
  *(void *)(v8 + 240) = *((void *)a2 + 30);
  *(_OWORD *)(v8 + 208) = v19;
  *(_OWORD *)(v8 + 224) = v20;
  *(__n128 *)(v8 + 192) = result;
  ++a1[5];
  return result;
}

void sub_101197FBC(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556) {
      sub_1001D7FD4();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 48;
    uint64_t v6 = (char *)sub_10014F86C(v3, a2);
    unint64_t v7 = &v6[48 * v5];
    long long v9 = &v6[48 * v8];
    long long v11 = (char *)*a1;
    long long v10 = (char *)a1[1];
    long long v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 3);
        long long v14 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v14;
        *((_OWORD *)v12 - 3) = v13;
        v12 -= 48;
        v10 -= 48;
      }
      while (v10 != v11);
      long long v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_1011980AC(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0x8E38E38E38E38E39 * ((v4 - (unsigned char *)*a1) >> 5) < a2)
  {
    if (a2 >= 0xE38E38E38E38E4) {
      sub_1001D7FD4();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 288;
    uint64_t v6 = (char *)sub_1011991B4(v3, a2);
    unint64_t v7 = &v6[288 * v5];
    long long v9 = &v6[288 * v8];
    long long v11 = (char *)*a1;
    long long v10 = (char *)a1[1];
    long long v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v12 -= 288;
        v10 -= 288;
        memcpy(v12, v10, 0x120uLL);
      }
      while (v10 != v11);
      long long v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_1011981C4(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xEF7BDEF7BDEF7BDFLL * ((v4 - (unsigned char *)*a1) >> 3) < a2)
  {
    if (a2 >= 0x108421084210843) {
      sub_1001D7FD4();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_1009204C4(v3, a2);
    unint64_t v7 = &v6[248 * (v5 / 248)];
    long long v9 = &v6[248 * v8];
    long long v11 = (char *)*a1;
    long long v10 = (char *)a1[1];
    long long v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *(_OWORD *)(v10 - 248);
        long long v14 = *(_OWORD *)(v10 - 232);
        long long v15 = *(_OWORD *)(v10 - 216);
        *(_OWORD *)(v12 - 200) = *(_OWORD *)(v10 - 200);
        *(_OWORD *)(v12 - 216) = v15;
        *(_OWORD *)(v12 - 232) = v14;
        *(_OWORD *)(v12 - 248) = v13;
        long long v16 = *(_OWORD *)(v10 - 184);
        long long v17 = *(_OWORD *)(v10 - 168);
        long long v18 = *(_OWORD *)(v10 - 152);
        *(_OWORD *)(v12 - 136) = *(_OWORD *)(v10 - 136);
        *(_OWORD *)(v12 - 152) = v18;
        *(_OWORD *)(v12 - 168) = v17;
        *(_OWORD *)(v12 - 184) = v16;
        long long v19 = *(_OWORD *)(v10 - 120);
        long long v20 = *(_OWORD *)(v10 - 104);
        long long v21 = *(_OWORD *)(v10 - 88);
        *(_OWORD *)(v12 - 72) = *(_OWORD *)(v10 - 72);
        *(_OWORD *)(v12 - 88) = v21;
        *(_OWORD *)(v12 - 104) = v20;
        *(_OWORD *)(v12 - 120) = v19;
        long long v22 = *(_OWORD *)(v10 - 56);
        long long v23 = *(_OWORD *)(v10 - 40);
        long long v24 = *(_OWORD *)(v10 - 24);
        *((void *)v12 - 1) = *((void *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v24;
        *(_OWORD *)(v12 - 40) = v23;
        *(_OWORD *)(v12 - 56) = v22;
        v12 -= 248;
        v10 -= 248;
      }
      while (v10 != v11);
      long long v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t sub_101198338(uint64_t a1)
{
  *(void *)a1 = off_1022CAE80;
  sub_100134750((void *)(a1 + 8), "");
  *(void *)a1 = off_1023160F0;
  *(_WORD *)(a1 + 33) = 0;
  *(unsigned char *)(a1 + 35) = 0;
  *(_WORD *)(a1 + 291) = 0;
  *(_WORD *)(a1 + 548) = 0;
  *(_WORD *)(a1 + 805) = 0;
  *(unsigned char *)(a1 + 1062) = 0;
  *(_WORD *)(a1 + 1318) = 0;
  *(unsigned char *)(a1 + 1575) = 0;
  *(void *)(a1 + 1576) = 0x4014000000000000;
  *(_OWORD *)(a1 + 1584) = xmmword_101DAB690;
  *(_OWORD *)(a1 + 1600) = xmmword_101DAB6A0;
  *(_OWORD *)(a1 + 1616) = xmmword_101DAB680;
  *(void *)(a1 + 1632) = 0x4006A09E667F3BCCLL;
  return a1;
}

void sub_101198408(uint64_t a1)
{
  *(void *)a1 = off_1022CAE80;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  operator delete();
}

uint64_t sub_101198478(uint64_t a1)
{
  double v2 = (unsigned char *)(a1 + 34);
  if (sub_101198B48(a1, (char *)(a1 + 34), "use_input_locationd_data_file"))
  {
    if (*v2 && (sub_10082759C(a1, (char *)(a1 + 35), "input_locationd_data_file", "") & 1) == 0)
    {
      uint64_t v3 = sub_100132EFC(&std::cout, (uint64_t)"Invalid input_locationd_batched_data_file", 41);
      std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)));
      uint64_t v4 = std::locale::use_facet(&v23, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
LABEL_29:
      std::locale::~locale(&v23);
      std::ostream::put();
      std::ostream::flush();
      return 0;
    }
  }
  else
  {
    unsigned char *v2 = 0;
  }
  if ((sub_101198B48(a1, (char *)(a1 + 33), "load_batched_data_from_locationd") & 1) == 0) {
    *(unsigned char *)(a1 + 33) = 0;
  }
  int64_t v5 = (unsigned char *)(a1 + 291);
  if (sub_101198B48(a1, (char *)(a1 + 291), "use_input_ascii_batched_data_file"))
  {
    if (*v5 && (sub_10082759C(a1, (char *)(a1 + 292), "input_ascii_batched_data_file", "") & 1) == 0)
    {
      uint64_t v6 = sub_100132EFC(&std::cout, (uint64_t)"Invalid input_ascii_batched_data_file", 37);
      std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
      unint64_t v7 = std::locale::use_facet(&v23, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
      goto LABEL_29;
    }
  }
  else
  {
    *int64_t v5 = 0;
  }
  uint64_t v8 = (unsigned char *)(a1 + 548);
  if (sub_101198B48(a1, (char *)(a1 + 548), "save_results_to_disk"))
  {
    if (*v8 && (sub_10082759C(a1, (char *)(a1 + 549), "save_results_path", "") & 1) == 0)
    {
      long long v9 = sub_100132EFC(&std::cout, (uint64_t)"Invalid save_results_path", 25);
      std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
      long long v10 = std::locale::use_facet(&v23, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
      goto LABEL_29;
    }
  }
  else
  {
    *uint64_t v8 = 0;
  }
  long long v11 = (unsigned char *)(a1 + 805);
  if (sub_101198B48(a1, (char *)(a1 + 805), "load_matlab_inputs"))
  {
    if (*v11 && (sub_10082759C(a1, (char *)(a1 + 806), "load_matlab_inputs_path", "") & 1) == 0)
    {
      long long v12 = sub_100132EFC(&std::cout, (uint64_t)"Invalid load_matlab_inputs_path", 31);
      std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
      long long v13 = std::locale::use_facet(&v23, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
      goto LABEL_29;
    }
  }
  else
  {
    *long long v11 = 0;
  }
  if ((sub_10082759C(a1, (char *)(a1 + 1062), "temp_writable_path", "") & 1) == 0)
  {
    long long v17 = sub_100132EFC(&std::cout, (uint64_t)"Invalid temp_writable_path", 26);
    std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
    long long v18 = std::locale::use_facet(&v23, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
    goto LABEL_29;
  }
  long long v14 = (unsigned char *)(a1 + 1318);
  if (sub_101198B48(a1, (char *)(a1 + 1318), "use_truth_reference"))
  {
    if (*v14 && (sub_10082759C(a1, (char *)(a1 + 1319), "truth_reference_filename", "") & 1) == 0)
    {
      long long v15 = sub_100132EFC(&std::cout, (uint64_t)"Invalid truth_reference_filename", 32);
      std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
      long long v16 = std::locale::use_facet(&v23, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
      goto LABEL_29;
    }
  }
  else
  {
    *long long v14 = 0;
  }
  long long v20 = (unsigned char *)(a1 + 1575);
  if (sub_101198B48(a1, (char *)(a1 + 1575), "enable_data_editing"))
  {
    if (*v20 && (sub_100827A44(a1, (void *)(a1 + 1576), "data_editing_sigma_threshold") & 1) == 0)
    {
      *(void *)(a1 + 1576) = 0x4008000000000000;
      long long v21 = sub_100132EFC(&std::cout, (uint64_t)"Invalid data_editing_sigma_threshold", 36);
      std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
      long long v22 = std::locale::use_facet(&v23, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
      goto LABEL_29;
    }
  }
  else
  {
    *long long v20 = 0;
  }
  if ((sub_100827A44(a1, (void *)(a1 + 1584), "horizontal_position_process_noise") & 1) == 0) {
    *(void *)(a1 + 1584) = 0x3FF0000000000000;
  }
  if ((sub_100827A44(a1, (void *)(a1 + 1592), "vertical_position_process_noise") & 1) == 0) {
    *(void *)(a1 + 1592) = 0x3FB999999999999ALL;
  }
  if ((sub_100827A44(a1, (void *)(a1 + 1600), "velocity_sigma_fudge_factor") & 1) == 0) {
    *(void *)(a1 + 1600) = 0x3FF0000000000000;
  }
  if ((sub_100827A44(a1, (void *)(a1 + 1608), "vertical_speed_limit") & 1) == 0) {
    *(void *)(a1 + 1608) = 0x4049000000000000;
  }
  if ((sub_100827A44(a1, (void *)(a1 + 1616), "minimum_single_component_speed_standard_deviation") & 1) == 0) {
    *(void *)(a1 + 1616) = 0x3FD6A09E667F3BD1;
  }
  if ((sub_100827A44(a1, (void *)(a1 + 1624), "mimimum_driving_speed_that_requires_speed_uncertainty_inflation") & 1) == 0) {
    *(void *)(a1 + 1624) = 0x4024000000000000;
  }
  if ((sub_100827A44(a1, (void *)(a1 + 1632), "minimum_driving_speed_standard_deviation") & 1) == 0) {
    *(void *)(a1 + 1632) = 0x4006A09E667F3BCCLL;
  }
  return 1;
}

void sub_101198B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_101198B48(uint64_t a1, char *a2, const std::string::value_type *a3)
{
  int v4 = a1;
  uint64_t result = sub_10082759C(a1, __dst, a3, "");
  if (result) {
    return sub_101198BCC(v4, a2, __dst);
  }
  return result;
}

uint64_t sub_101198BCC(int a1, char *a2, char *__s)
{
  if (!*__s) {
    goto LABEL_65;
  }
  p_p = (char *)&__p;
  sub_100134750(&__p, __s);
  unsigned __int8 v5 = v20;
  if ((v20 & 0x80u) == 0) {
    uint64_t v6 = (char *)&__p + v20;
  }
  else {
    uint64_t v6 = (char *)__p + v19;
  }
  if ((v20 & 0x80u) != 0) {
    p_p = (char *)__p;
  }
  if (p_p != v6)
  {
    do
    {
      char *p_p = __tolower(*p_p);
      ++p_p;
    }
    while (p_p != v6);
    unsigned __int8 v5 = v20;
  }
  if ((v5 & 0x80) != 0)
  {
    int v7 = *(unsigned __int8 *)__p;
    if (v7 == 49) {
      goto LABEL_39;
    }
    int v8 = __p;
    if (v19 != 1)
    {
      if (v19 == 3)
      {
        if (*(_WORD *)__p == 25977 && *((unsigned char *)__p + 2) == 115) {
          goto LABEL_39;
        }
      }
      else if (v19 == 4 && *(_DWORD *)__p == 1702195828)
      {
        goto LABEL_39;
      }
      goto LABEL_37;
    }
    goto LABEL_24;
  }
  int v7 = __p;
  if (__p == 49) {
    goto LABEL_39;
  }
  switch(v5)
  {
    case 1u:
      int v8 = __p;
LABEL_24:
      if (v7 == 121) {
        goto LABEL_39;
      }
      break;
    case 3u:
      BOOL v9 = (unsigned __int16)__p == 25977 && BYTE2(__p) == 115;
      int v8 = __p;
      if (v9) {
        goto LABEL_39;
      }
      break;
    case 4u:
      if (__p != 1702195828)
      {
        int v8 = __p;
        break;
      }
LABEL_39:
      char v11 = 1;
      goto LABEL_40;
    default:
      int v8 = __p;
      break;
  }
LABEL_37:
  if (v7 == 48)
  {
LABEL_38:
    char v11 = 0;
LABEL_40:
    uint64_t v12 = 1;
    goto LABEL_41;
  }
  if ((v5 & 0x80) != 0)
  {
    uint64_t v14 = v19;
    if (v19 == 1)
    {
      if (*(unsigned char *)__p == 110) {
        goto LABEL_38;
      }
      uint64_t v14 = v19;
    }
    else if (v19 == 5 && *(_DWORD *)__p == 1936482662 && *((unsigned char *)__p + 4) == 101)
    {
      goto LABEL_38;
    }
    if (v14 != 2)
    {
      uint64_t v12 = 0;
      *a2 = 0;
      goto LABEL_42;
    }
    long long v16 = __p;
  }
  else
  {
    if (v5 == 1)
    {
      if (v8 == 110) {
        goto LABEL_38;
      }
LABEL_65:
      uint64_t v12 = 0;
      *a2 = 0;
      return v12;
    }
    if (v5 != 2)
    {
      if (v5 == 5 && __p == 1936482662 && BYTE4(__p) == 101) {
        goto LABEL_38;
      }
      goto LABEL_65;
    }
    long long v16 = &__p;
  }
  char v11 = 0;
  uint64_t v12 = 0;
  if (*v16 == 28526) {
    goto LABEL_40;
  }
LABEL_41:
  *a2 = v11;
  if ((v5 & 0x80) != 0) {
LABEL_42:
  }
    operator delete(__p);
  return v12;
}

void sub_101198E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101198E6C(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_101198E9C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x10;
  unint64_t v4 = v2 - 16;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    int v7 = (void *)a1[1];
    int v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    BOOL v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)int v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      long long v34 = (char *)sub_1000DA54C(v5, v33);
      long long v35 = &v34[8 * (v33 >> 2)];
      long long v37 = &v34[8 * v36];
      long long v38 = (uint64_t *)a1[1];
      int v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        int v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        long long v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)long long v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      BOOL v9 = (char *)a1[1];
    }
    int v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xF80uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xF80uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    double v44 = (void *)a1[1];
    int v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    BOOL v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      long long v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      long long v35 = &v34[8 * (v46 >> 2)];
      long long v37 = &v34[8 * v47];
      __int16 v48 = (uint64_t *)a1[1];
      int v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        int v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      long long v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        int v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  long long v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0xF80uLL);
  sub_1000DA434(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  double v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_101199168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_1011991B4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xE38E38E38E38E4) {
    sub_1001D7FA0();
  }
  return operator new(288 * a2);
}

uint64_t sub_101199200(uint64_t a1, char *a2, long long *a3, char *a4, long long *a5)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (a5 == a3) {
    unint64_t v6 = 0;
  }
  else {
    unint64_t v6 = 0xEF7BDEF7BDEF7BDFLL * (((uint64_t)a5 - *(void *)a4) >> 3)
  }
       + 2 * (a4 - a2)
       + 0x1084210842108421 * (((uint64_t)a3 - *(void *)a2) >> 3);
  sub_10119928C((char *)a1, a2, a3, (uint64_t)a4, a5, v6);
  return a1;
}

char *sub_10119928C(char *result, void *a2, long long *a3, uint64_t a4, long long *a5, unint64_t a6)
{
  if (a6)
  {
    BOOL v9 = result;
    uint64_t result = sub_10092046C(result, a6);
    uint64_t v10 = *((void *)v9 + 1);
    while (a3 != a5)
    {
      long long v11 = *a3;
      long long v12 = a3[1];
      long long v13 = a3[3];
      *(_OWORD *)(v10 + 32) = a3[2];
      *(_OWORD *)(v10 + 48) = v13;
      *(_OWORD *)uint64_t v10 = v11;
      *(_OWORD *)(v10 + 16) = v12;
      long long v14 = a3[4];
      long long v15 = a3[5];
      long long v16 = a3[7];
      *(_OWORD *)(v10 + 96) = a3[6];
      *(_OWORD *)(v10 + 112) = v16;
      *(_OWORD *)(v10 + 64) = v14;
      *(_OWORD *)(v10 + 80) = v15;
      long long v17 = a3[8];
      long long v18 = a3[9];
      long long v19 = a3[11];
      *(_OWORD *)(v10 + 160) = a3[10];
      *(_OWORD *)(v10 + 176) = v19;
      *(_OWORD *)(v10 + 128) = v17;
      *(_OWORD *)(v10 + 144) = v18;
      long long v20 = a3[12];
      long long v21 = a3[13];
      long long v22 = a3[14];
      *(void *)(v10 + 240) = *((void *)a3 + 30);
      *(_OWORD *)(v10 + 208) = v21;
      *(_OWORD *)(v10 + 224) = v22;
      *(_OWORD *)(v10 + 192) = v20;
      a3 = (long long *)((char *)a3 + 248);
      if ((long long *)((char *)a3 - *a2) == (long long *)3968)
      {
        uint64_t v23 = (long long *)a2[1];
        ++a2;
        a3 = v23;
      }
      v10 += 248;
    }
    *((void *)v9 + 1) = v10;
  }
  return result;
}

void sub_101199344(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_101199360(void *a1)
{
  *a1 = objc_alloc_init((Class)HKHealthStore);
  return a1;
}

id *sub_101199394(id *a1)
{
  *a1 = 0;
  return a1;
}

void sub_1011993CC(id *a1, uint64_t a2, double a3, double a4)
{
  if (+[HKHealthStore isHealthDataAvailable])
  {
    id v8 = [objc_alloc((Class)NSDate) initWithTimeIntervalSinceReferenceDate:a3];
    id v9 = [objc_alloc((Class)NSDate) initWithTimeIntervalSinceReferenceDate:a4];
    v20[0] = +[HKQuery predicateForSamplesWithStartDate:v8 endDate:v9 options:0];
    v20[1] = +[HKQuery _predicateForObjectsFromAppleWatches];
    uint64_t v10 = +[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", +[NSArray arrayWithObjects:v20 count:2]);
    long long v19 = +[NSSortDescriptor sortDescriptorWithKey:HKSampleSortIdentifierStartDate ascending:0];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    int v14[2] = sub_101199754;
    v14[3] = &unk_102316158;
    v14[4] = a2;
    id v11 = [objc_alloc((Class)HKSampleQuery) initWithSampleType:+[HKSampleType workoutType](HKSampleType, "workoutType") predicate:v10 limit:0 sortDescriptors:+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v19, 1) resultsHandler:v14];
    [*a1 executeQuery:v11];
  }
  else
  {
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1023162E0);
    }
    long long v12 = qword_1024191F8;
    if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Workout query, health data is not available.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1023162E0);
      }
      __int16 v18 = 0;
      long long v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMobility::HealthKitQueryDelegate::queryWorkoutsInTimeRange(CFAbsoluteTime, CFAbsoluteTime, WorkoutsHandlerFunction)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    std::string __p = 0;
    long long v16 = 0;
    uint64_t v17 = 0;
    sub_1003B2E38(&__p, 0, 0, 0);
    (*(void (**)(uint64_t, uint64_t, void **))(a2 + 16))(a2, 109, &__p);
    if (__p)
    {
      long long v16 = __p;
      operator delete(__p);
    }
  }
}

void sub_101199730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101199754(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4)
  {
    if ([a4 code] == (id)6)
    {
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1023162E0);
      }
      unint64_t v6 = qword_1024191F8;
      if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "HealthKit Workout query failed due to device lock", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_1023162E0);
        }
        LOWORD(v65) = 0;
        unint64_t v46 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobility::HealthKitQueryDelegate::queryWorkoutsInTimeRange(CFAbsoluteTime, CFAbsoluteTime, WorkoutsHandlerFunction)_block_invoke", "%s\n", v46);
        if (v46 != (char *)buf) {
          free(v46);
        }
      }
      uint64_t v7 = *(void *)(a1 + 32);
      uint64_t v63 = 0;
      uint64_t v64 = 0;
      double v62 = 0;
      sub_1003B2E38(&v62, 0, 0, 0);
      (*(void (**)(uint64_t, uint64_t, void **))(v7 + 16))(v7, 109, &v62);
      id v8 = v62;
      if (v62)
      {
        uint64_t v63 = v62;
LABEL_54:
        operator delete(v8);
      }
    }
    else
    {
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1023162E0);
      }
      double v44 = qword_1024191F8;
      if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 138543362;
        id v75 = a4;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "HealthKit Workout query encountered error,%{public}@", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_1023162E0);
        }
        int v65 = 138543362;
        id v66 = a4;
        uint64_t v47 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLMobility::HealthKitQueryDelegate::queryWorkoutsInTimeRange(CFAbsoluteTime, CFAbsoluteTime, WorkoutsHandlerFunction)_block_invoke", "%s\n", v47);
        if (v47 != (char *)buf) {
          free(v47);
        }
      }
      uint64_t v45 = *(void *)(a1 + 32);
      long long v60 = 0;
      uint64_t v61 = 0;
      long long v59 = 0;
      sub_1003B2E38(&v59, 0, 0, 0);
      (*(void (**)(uint64_t, uint64_t, void **))(v45 + 16))(v45, 103, &v59);
      id v8 = v59;
      if (v59)
      {
        long long v60 = v59;
        goto LABEL_54;
      }
    }
  }
  else
  {
    long long v56 = 0;
    long long v57 = 0;
    unint64_t v58 = 0;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    id v10 = [a3 countByEnumeratingWithState:&v52 objects:v73 count:16];
    if (v10)
    {
      uint64_t v11 = *(void *)v53;
      do
      {
        long long v12 = 0;
        do
        {
          if (*(void *)v53 != v11) {
            objc_enumerationMutation(a3);
          }
          long long v13 = *(void **)(*((void *)&v52 + 1) + 8 * (void)v12);
          unsigned int v14 = [[[v13 metadata] objectForKeyedSubscript:HKMetadataKeyIndoorWorkout] boolValue];
          if (qword_1024191F0 != -1) {
            dispatch_once(&qword_1024191F0, &stru_1023162E0);
          }
          long long v15 = qword_1024191F8;
          if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
          {
            id v16 = [v13 workoutActivityType];
            [objc_msgSend(v13, "startDate") timeIntervalSinceReferenceDate];
            uint64_t v18 = v17;
            [objc_msgSend(v13, "endDate") timeIntervalSinceReferenceDate];
            *(_DWORD *)uint64_t buf = 134284289;
            id v75 = v16;
            __int16 v76 = 1025;
            unsigned int v77 = v14;
            __int16 v78 = 2049;
            uint64_t v79 = v18;
            __int16 v80 = 2049;
            uint64_t v81 = v19;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Found workout... Type: %{private}lu, indoor: %{private}d, startTime: %{private}f, endTime: %{private}f", buf, 0x26u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024191F0 != -1) {
              dispatch_once(&qword_1024191F0, &stru_1023162E0);
            }
            id v37 = [v13 workoutActivityType];
            [objc_msgSend(v13, "startDate") timeIntervalSinceReferenceDate];
            uint64_t v39 = v38;
            [objc_msgSend(v13, "endDate") timeIntervalSinceReferenceDate];
            int v65 = 134284289;
            id v66 = v37;
            __int16 v67 = 1025;
            unsigned int v68 = v14;
            __int16 v69 = 2049;
            uint64_t v70 = v39;
            __int16 v71 = 2049;
            uint64_t v72 = v40;
            long long v41 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobility::HealthKitQueryDelegate::queryWorkoutsInTimeRange(CFAbsoluteTime, CFAbsoluteTime, WorkoutsHandlerFunction)_block_invoke", "%s\n", v41);
            if (v41 != (char *)buf) {
              free(v41);
            }
          }
          [objc_msgSend(v13, "startDate") timeIntervalSinceReferenceDate];
          uint64_t v21 = v20;
          [objc_msgSend(v13, "endDate") timeIntervalSinceReferenceDate];
          uint64_t v23 = v22;
          unsigned int v24 = [v13 workoutActivityType];
          unsigned int v25 = v24;
          uint64_t v26 = v57;
          if ((unint64_t)v57 >= v58)
          {
            unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * (v57 - v56);
            unint64_t v29 = v28 + 1;
            if (v28 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_1001D7FD4();
            }
            if (0x5555555555555556 * ((uint64_t)(v58 - (void)v56) >> 3) > v29) {
              unint64_t v29 = 0x5555555555555556 * ((uint64_t)(v58 - (void)v56) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - (void)v56) >> 3) >= 0x555555555555555) {
              unint64_t v30 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v30 = v29;
            }
            if (v30) {
              long long v31 = (char *)sub_1000DA5D8((uint64_t)&v58, v30);
            }
            else {
              long long v31 = 0;
            }
            long long v32 = &v31[24 * v28];
            *(void *)long long v32 = v21;
            *((void *)v32 + 1) = v23;
            *((_DWORD *)v32 + 4) = v25;
            unsigned char v32[20] = v14;
            long long v34 = v56;
            unint64_t v33 = v57;
            long long v35 = v32;
            if (v57 != v56)
            {
              do
              {
                long long v36 = *(_OWORD *)(v33 - 3);
                *(void *)(v35 - 11) = *(void *)((char *)v33 - 11);
                *(_OWORD *)(v35 - 24) = v36;
                v35 -= 24;
                v33 -= 3;
              }
              while (v33 != v34);
              unint64_t v33 = v56;
            }
            uint64_t v27 = v32 + 24;
            long long v56 = v35;
            long long v57 = v32 + 24;
            unint64_t v58 = (unint64_t)&v31[24 * v30];
            if (v33) {
              operator delete(v33);
            }
          }
          else
          {
            *long long v57 = v21;
            v26[1] = v23;
            *((_DWORD *)v26 + 4) = v24;
            uint64_t v27 = v26 + 3;
            *((unsigned char *)v26 + 20) = v14;
          }
          long long v57 = v27;
          long long v12 = (char *)v12 + 1;
        }
        while (v12 != v10);
        id v42 = [a3 countByEnumeratingWithState:&v52 objects:v73 count:16];
        id v10 = v42;
      }
      while (v42);
    }
    uint64_t v43 = *(void *)(a1 + 32);
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    std::string __p = 0;
    sub_1003B2E38(&__p, v56, (uint64_t)v57, 0xAAAAAAAAAAAAAAABLL * (v57 - v56));
    (*(void (**)(uint64_t, uint64_t, void **))(v43 + 16))(v43, 100, &__p);
    if (__p)
    {
      uint64_t v50 = __p;
      operator delete(__p);
    }
    id v8 = v56;
    if (v56)
    {
      long long v57 = v56;
      goto LABEL_54;
    }
  }
}

void sub_101199F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101199FB8(id *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, double a6, double a7)
{
  if (+[HKHealthStore isHealthDataAvailable])
  {
    if (a4) {
      char v13 = 1;
    }
    else {
      char v13 = sub_10119A538();
    }
    id v16 = [objc_alloc((Class)NSDate) initWithTimeIntervalSinceReferenceDate:a6];
    id v17 = [objc_alloc((Class)NSDate) initWithTimeIntervalSinceReferenceDate:a7];
    id v18 = +[NSMutableArray array];
    [v18 addObject:[+[HKQuery predicateForSamplesWithStartDate:endDate:options:](HKQuery, "predicateForSamplesWithStartDate:endDate:options:", v16, v17, 0)];
    if (v13) {
      goto LABEL_16;
    }
    if (a3)
    {
      [v18 addObject:[+[HKQuery predicateForObjectsWithMetadataKey:](HKQuery, "predicateForObjectsWithMetadataKey:", _HKPrivateMetadataKeyCoreMotionSourceIdentifier)];
LABEL_16:
      uint64_t v19 = +[NSCompoundPredicate andPredicateWithSubpredicates:v18];
      unint64_t v33 = +[NSSortDescriptor sortDescriptorWithKey:HKSampleSortIdentifierStartDate ascending:0];
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472;
      void v25[2] = sub_10119A758;
      long long v25[3] = &unk_102316180;
      char v26 = v13;
      void v25[4] = a3;
      v25[5] = v16;
      v25[6] = v17;
      v25[7] = a5;
      id v20 = [objc_alloc((Class)HKSampleQuery) initWithSampleType:+[HKQuantityType quantityTypeForIdentifier:](HKQuantityType, "quantityTypeForIdentifier:", HKQuantityTypeIdentifierAppleWalkingSteadiness) predicate:v19 limit:a2 sortDescriptors:[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v33, 1) resultsHandler:v25];
      [*a1 executeQuery:v20];

      return;
    }
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1023162E0);
    }
    uint64_t v21 = qword_1024191F8;
    if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Missing Database  UUID", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1023162E0);
      }
      LOWORD(v34) = 0;
      uint64_t v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMobility::HealthKitQueryDelegate::queryWalkingSteadiness(CFAbsoluteTime, CFAbsoluteTime, NSUInteger, NSString *, BOOL, QuantityHandlerFunction)", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
    uint64_t v27 = 0;
    unint64_t v28 = 0;
    uint64_t v29 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(a5 + 16))(a5, 109, &v27);
    long long v15 = v27;
    if (v27)
    {
      unint64_t v28 = v27;
      goto LABEL_11;
    }
  }
  else
  {
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_102316300);
    }
    unsigned int v14 = qword_102418FA8;
    if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134283777;
      double v39 = a6;
      __int16 v40 = 2049;
      double v41 = a7;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Steadiness query failed, health data unavailable (%{private}f, %{private}f)", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FA0 != -1) {
        dispatch_once(&qword_102418FA0, &stru_102316300);
      }
      int v34 = 134283777;
      double v35 = a6;
      __int16 v36 = 2049;
      double v37 = a7;
      uint64_t v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMobility::HealthKitQueryDelegate::queryWalkingSteadiness(CFAbsoluteTime, CFAbsoluteTime, NSUInteger, NSString *, BOOL, QuantityHandlerFunction)", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
    std::string __p = 0;
    long long v31 = 0;
    uint64_t v32 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(a5 + 16))(a5, 109, &__p);
    long long v15 = __p;
    if (__p)
    {
      long long v31 = __p;
LABEL_11:
      operator delete(v15);
    }
  }
}

void sub_10119A504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (__p)
  {
    *unsigned int v25 = __p;
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10119A538()
{
  sub_100103240();
  uint64_t result = sub_10073E30C();
  if (result)
  {
    BOOL v4 = 0;
    uint64_t v1 = sub_1000D3E78();
    sub_10006B564(v1, buf);
    sub_1000D2988(*(uint64_t *)&buf[0], "MobilityQuerySamplesFromAnyDevice", &v4);
    if (*((void *)&buf[0] + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
    }
    if (v4)
    {
      if (qword_102418FA0 != -1) {
        dispatch_once(&qword_102418FA0, &stru_102316300);
      }
      unint64_t v2 = qword_102418FA8;
      if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 136315138;
        *(void *)((char *)buf + 4) = "MobilityQuerySamplesFromAnyDevice";
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#WARNING: Testing mode. Querying HK samples from any device (%s)", (uint8_t *)buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FA0 != -1) {
          dispatch_once(&qword_102418FA0, &stru_102316300);
        }
        int v5 = 136315138;
        unint64_t v6 = "MobilityQuerySamplesFromAnyDevice";
        BOOL v3 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMobility::HealthKitQueryDelegate::allowSamplesFromAnyDevice() const", "%s\n", v3);
        if (v3 != (char *)buf) {
          free(v3);
        }
      }
    }
    return v4;
  }
  return result;
}

void sub_10119A738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_10119A758(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4)
  {
    if ([a4 code] == (id)6)
    {
      if (qword_102418FA0 != -1) {
        dispatch_once(&qword_102418FA0, &stru_102316300);
      }
      unint64_t v6 = qword_102418FA8;
      if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "HealthKit Steadiness query failed due to device lock", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FA0 != -1) {
          dispatch_once(&qword_102418FA0, &stru_102316300);
        }
        LOWORD(v61) = 0;
        uint64_t v49 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobility::HealthKitQueryDelegate::queryWalkingSteadiness(CFAbsoluteTime, CFAbsoluteTime, NSUInteger, NSString *, BOOL, QuantityHandlerFunction)_block_invoke", "%s\n", v49);
        if (v49 != (char *)buf) {
          free(v49);
        }
      }
      uint64_t v7 = *(void *)(a1 + 56);
      memset(&v60[4], 0, 24);
      (*(void (**)(void))(v7 + 16))();
    }
    else
    {
      if (qword_102418FA0 != -1) {
        dispatch_once(&qword_102418FA0, &stru_102316300);
      }
      double v44 = qword_102418FA8;
      if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 138543362;
        unint64_t v69 = (unint64_t)a4;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "HealthKit Steadiness query encountered error: %{public}@", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FA0 != -1) {
          dispatch_once(&qword_102418FA0, &stru_102316300);
        }
        int v61 = 138543362;
        unint64_t v62 = (unint64_t)a4;
        uint64_t v50 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLMobility::HealthKitQueryDelegate::queryWalkingSteadiness(CFAbsoluteTime, CFAbsoluteTime, NSUInteger, NSString *, BOOL, QuantityHandlerFunction)_block_invoke", "%s\n", v50);
        if (v50 != (char *)buf) {
          free(v50);
        }
      }
      uint64_t v45 = *(void *)(a1 + 56);
      memset(&v60[1], 0, 24);
      (*(void (**)(void))(v45 + 16))();
    }
    return;
  }
  std::string __p = 0;
  long long v59 = 0;
  v60[0] = 0;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  id v9 = [a3 countByEnumeratingWithState:&v54 objects:v67 count:16];
  if (!v9) {
    goto LABEL_55;
  }
  uint64_t v10 = *(void *)v55;
  uint64_t v11 = _HKPrivateMetadataKeyCoreMotionSourceIdentifier;
  do
  {
    long long v12 = 0;
    do
    {
      if (*(void *)v55 != v10) {
        objc_enumerationMutation(a3);
      }
      char v13 = *(void **)(*((void *)&v54 + 1) + 8 * (void)v12);
      if (objc_msgSend(objc_msgSend(v13, "metadata"), "objectForKey:", v11) || *(unsigned char *)(a1 + 64))
      {
        if ((objc_msgSend(objc_msgSend(objc_msgSend(v13, "metadata"), "objectForKeyedSubscript:", v11), "isEqualToString:", *(void *)(a1 + 32)) & 1) != 0|| *(unsigned char *)(a1 + 64))
        {
          [objc_msgSend(v13, "startDate") timeIntervalSinceReferenceDate];
          uint64_t v15 = v14;
          [objc_msgSend(v13, "endDate") timeIntervalSinceReferenceDate];
          uint64_t v17 = v16;
          [objc_msgSend(v13, "quantity") doubleValueForUnit:+[HKUnit percentUnit](HKUnit, "percentUnit")];
          uint64_t v19 = v18;
          id v20 = v59;
          if ((unint64_t)v59 >= v60[0])
          {
            uint64_t v22 = __p;
            unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * (((char *)v59 - (unsigned char *)__p) >> 3);
            unint64_t v24 = v23 + 1;
            if (v23 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_1001D7FD4();
            }
            if (0x5555555555555556 * ((uint64_t)(v60[0] - (void)__p) >> 3) > v24) {
              unint64_t v24 = 0x5555555555555556 * ((uint64_t)(v60[0] - (void)__p) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60[0] - (void)__p) >> 3) >= 0x555555555555555) {
              unint64_t v25 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v25 = v24;
            }
            if (v25)
            {
              char v26 = (char *)sub_1000DA5D8((uint64_t)v60, v25);
              uint64_t v22 = __p;
              id v20 = v59;
            }
            else
            {
              char v26 = 0;
            }
            int v34 = &v26[24 * v23];
            *(void *)int v34 = v15;
            *((void *)v34 + 1) = v17;
            *((void *)v34 + 2) = v19;
            double v35 = v34;
            if (v20 != v22)
            {
              do
              {
                long long v36 = *(_OWORD *)(v20 - 3);
                *((void *)v35 - 1) = *(v20 - 1);
                *(_OWORD *)(v35 - 24) = v36;
                v35 -= 24;
                v20 -= 3;
              }
              while (v20 != v22);
              uint64_t v22 = __p;
            }
            uint64_t v21 = v34 + 24;
            std::string __p = v35;
            long long v59 = v34 + 24;
            v60[0] = &v26[24 * v25];
            if (v22) {
              operator delete(v22);
            }
          }
          else
          {
            *long long v59 = v15;
            v20[1] = v17;
            uint64_t v21 = v20 + 3;
            void v20[2] = v18;
          }
          long long v59 = v21;
          goto LABEL_53;
        }
        if (qword_102418FA0 != -1) {
          dispatch_once(&qword_102418FA0, &stru_102316300);
        }
        uint64_t v27 = qword_102418FA8;
        if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEBUG))
        {
          id v28 = [[[v13 metadata] objectForKeyedSubscript:v11];
          uint64_t v29 = *(void *)(a1 + 32);
          *(_DWORD *)uint64_t buf = 138478083;
          unint64_t v69 = (unint64_t)v28;
          __int16 v70 = 2113;
          uint64_t v71 = v29;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "Sample's source UUID %{private}@ did not match dBUUID %{private}@", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FA0 != -1) {
            dispatch_once(&qword_102418FA0, &stru_102316300);
          }
          id v30 = [[objc_msgSend(v13, "metadata") objectForKeyedSubscript:v11];
          uint64_t v31 = *(void *)(a1 + 32);
          int v61 = 138478083;
          unint64_t v62 = (unint64_t)v30;
          __int16 v63 = 2113;
          uint64_t v64 = v31;
          uint64_t v32 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobility::HealthKitQueryDelegate::queryWalkingSteadiness(CFAbsoluteTime, CFAbsoluteTime, NSUInteger, NSString *, BOOL, QuantityHandlerFunction)_block_invoke", "%s\n", v32);
LABEL_44:
          if (v32 != (char *)buf) {
            free(v32);
          }
        }
      }
      else
      {
        if (qword_102418FA0 != -1) {
          dispatch_once(&qword_102418FA0, &stru_102316300);
        }
        unint64_t v33 = qword_102418FA8;
        if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "Sample did not contain the source UUID metadata", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FA0 != -1) {
            dispatch_once(&qword_102418FA0, &stru_102316300);
          }
          LOWORD(v61) = 0;
          uint64_t v32 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobility::HealthKitQueryDelegate::queryWalkingSteadiness(CFAbsoluteTime, CFAbsoluteTime, NSUInteger, NSString *, BOOL, QuantityHandlerFunction)_block_invoke", "%s\n", v32);
          goto LABEL_44;
        }
      }
LABEL_53:
      long long v12 = (char *)v12 + 1;
    }
    while (v12 != v9);
    id v9 = [a3 countByEnumeratingWithState:&v54 objects:v67 count:16];
  }
  while (v9);
LABEL_55:
  unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * (((char *)v59 - (unsigned char *)__p) >> 3);
  if (v37 >= 2)
  {
    unint64_t v38 = 126 - 2 * __clz(v37);
    if (v59 == __p) {
      uint64_t v39 = 0;
    }
    else {
      uint64_t v39 = v38;
    }
    sub_10119EFC8((unint64_t)__p, (unint64_t)v59, v39, 1);
  }
  if (qword_102418FA0 != -1) {
    dispatch_once(&qword_102418FA0, &stru_102316300);
  }
  __int16 v40 = qword_102418FA8;
  if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v41 = *(void *)(a1 + 40);
    uint64_t v42 = *(void *)(a1 + 48);
    *(_DWORD *)uint64_t buf = 134349570;
    unint64_t v69 = 0xAAAAAAAAAAAAAAABLL * (((char *)v59 - (unsigned char *)__p) >> 3);
    __int16 v70 = 2114;
    uint64_t v71 = v41;
    __int16 v72 = 2114;
    uint64_t v73 = v42;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "[WalkingSteadiness] numSamples, %{public}lu, startDate, %{public}@, endDate, %{public}@", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_102316300);
    }
    uint64_t v46 = *(void *)(a1 + 40);
    uint64_t v47 = *(void *)(a1 + 48);
    int v61 = 134349570;
    unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * (((char *)v59 - (unsigned char *)__p) >> 3);
    __int16 v63 = 2114;
    uint64_t v64 = v46;
    __int16 v65 = 2114;
    uint64_t v66 = v47;
    __int16 v48 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobility::HealthKitQueryDelegate::queryWalkingSteadiness(CFAbsoluteTime, CFAbsoluteTime, NSUInteger, NSString *, BOOL, QuantityHandlerFunction)_block_invoke", "%s\n", v48);
    if (v48 != (char *)buf) {
      free(v48);
    }
  }
  uint64_t v43 = *(void *)(a1 + 56);
  long long v52 = 0;
  uint64_t v53 = 0;
  uint64_t v51 = 0;
  sub_1001F703C(&v51, __p, (uint64_t)v59, 0xAAAAAAAAAAAAAAABLL * (((char *)v59 - (unsigned char *)__p) >> 3));
  (*(void (**)(uint64_t, uint64_t, void **))(v43 + 16))(v43, 100, &v51);
  if (v51)
  {
    long long v52 = v51;
    operator delete(v51);
  }
  if (__p)
  {
    long long v59 = __p;
    operator delete(__p);
  }
}

void sub_10119B200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10119B28C(id *a1, uint64_t a2, double a3, double a4)
{
  if (+[HKHealthStore isHealthDataAvailable])
  {
    id v8 = [objc_alloc((Class)NSDate) initWithTimeIntervalSinceReferenceDate:a3];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10119B584;
    v12[3] = &unk_1023161A8;
    id v13 = [objc_alloc((Class)NSDate) initWithTimeIntervalSinceReferenceDate:a4];
    uint64_t v14 = a2;
    v12[4] = v8;
    id v9 = [objc_alloc((Class)HKStatisticsQuery) initWithQuantityType:+[HKQuantityType quantityTypeForIdentifier:](HKQuantityType, "quantityTypeForIdentifier:", HKQuantityTypeIdentifierNumberOfTimesFallen) quantitySamplePredicate:+[HKQuery predicateForSamplesWithStartDate:endDate:options:](HKQuery, "predicateForSamplesWithStartDate:endDate:options:", v8, v13, 0) options:16 completionHandler:v12];
    [*a1 executeQuery:v9];
  }
  else
  {
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_102316300);
    }
    uint64_t v10 = qword_102418FA8;
    if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134283777;
      double v20 = a3;
      __int16 v21 = 2049;
      double v22 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Falls query failed, health data unavailable (%{private}f, %{private}f)", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FA0 != -1) {
        dispatch_once(&qword_102418FA0, &stru_102316300);
      }
      int v15 = 134283777;
      double v16 = a3;
      __int16 v17 = 2049;
      double v18 = a4;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMobility::HealthKitQueryDelegate::queryNumFalls(CFAbsoluteTime, CFAbsoluteTime, StatisticHandlerFunction)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    (*(void (**)(uint64_t, uint64_t, void))(a2 + 16))(a2, 109, 0);
  }
}

uint64_t sub_10119B584(void *a1, uint64_t a2, void *a3, void *a4)
{
  if (!a4)
  {
    [objc_msgSend(a3, "sumQuantity") _value];
    int v9 = (int)v8;
LABEL_12:
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_102316300);
    }
    uint64_t v10 = qword_102418FA8;
    if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = a1[4];
      uint64_t v12 = a1[5];
      *(_DWORD *)uint64_t buf = 67175171;
      *(_DWORD *)uint64_t v19 = v9;
      *(_WORD *)&void v19[4] = 2114;
      *(void *)&v19[6] = v11;
      __int16 v20 = 2114;
      uint64_t v21 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[NumFalls] sumQuantity, %{private}d, startDate, %{public}@, endDate, %{public}@", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FA0 != -1) {
        dispatch_once(&qword_102418FA0, &stru_102316300);
      }
      int v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobility::HealthKitQueryDelegate::queryNumFalls(CFAbsoluteTime, CFAbsoluteTime, StatisticHandlerFunction)_block_invoke", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    uint64_t v7 = *(uint64_t (**)(void))(a1[6] + 16);
    return v7();
  }
  if ([a4 code] == (id)6)
  {
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_102316300);
    }
    unint64_t v6 = qword_102418FA8;
    if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "HealthKit numFalls query failed due to device lock", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FA0 != -1) {
        dispatch_once(&qword_102418FA0, &stru_102316300);
      }
      double v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobility::HealthKitQueryDelegate::queryNumFalls(CFAbsoluteTime, CFAbsoluteTime, StatisticHandlerFunction)_block_invoke", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    uint64_t v7 = *(uint64_t (**)(void))(a1[6] + 16);
    return v7();
  }
  if ([a4 code] == (id)11)
  {
    int v9 = 0;
    goto LABEL_12;
  }
  if (qword_102418FA0 != -1) {
    dispatch_once(&qword_102418FA0, &stru_102316300);
  }
  id v13 = qword_102418FA8;
  if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 138543362;
    *(void *)uint64_t v19 = a4;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "HealthKit numFalls query encountered error: %{public}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_102316300);
    }
    __int16 v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLMobility::HealthKitQueryDelegate::queryNumFalls(CFAbsoluteTime, CFAbsoluteTime, StatisticHandlerFunction)_block_invoke", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  uint64_t v7 = *(uint64_t (**)(void))(a1[6] + 16);
  return v7();
}

void sub_10119BA5C(id *a1, uint64_t a2, double a3, double a4)
{
  id v8 = +[HKQuantityType quantityTypeForIdentifier:HKQuantityTypeIdentifierStepCount];

  sub_10119BACC(a1, v8, a2, a3, a4);
}

void sub_10119BACC(id *a1, void *a2, uint64_t a3, double a4, double a5)
{
  if (+[HKHealthStore isHealthDataAvailable])
  {
    char v10 = sub_10119A538();
    id v11 = [objc_alloc((Class)NSDate) initWithTimeIntervalSinceReferenceDate:a4];
    id v12 = [objc_alloc((Class)NSDate) initWithTimeIntervalSinceReferenceDate:a5];
    id v13 = +[NSMutableArray array];
    [v13 addObject:[+[HKQuery predicateForSamplesWithStartDate:endDate:options:](HKQuery, "predicateForSamplesWithStartDate:endDate:options:", v11, v12, 0)];
    if ((v10 & 1) == 0) {
      [v13 addObject:[+[HKQuery predicateForObjectsWithDeviceProperty:allowedValues:](HKQuery, "predicateForObjectsWithDeviceProperty:allowedValues:", HKDevicePropertyKeyName, +[NSSet setWithObject:](NSSet, "setWithObject:", @"iPhone"))]];
    }
    uint64_t v14 = +[NSCompoundPredicate andPredicateWithSubpredicates:v13];
    id v15 = objc_alloc_init((Class)NSDateComponents);
    [v15 setDay:1];
    id v16 = [objc_alloc((Class)HKStatisticsCollectionQuery) initWithQuantityType:a2 quantitySamplePredicate:v14 options:16 anchorDate:v12 intervalComponents:v15];
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_10119CEF8;
    v19[3] = &unk_1023161D0;
    void v19[4] = a2;
    v19[5] = v11;
    v19[6] = v12;
    v19[7] = a3;
    [v16 setInitialResultsHandler:v19];
    [*a1 executeQuery:v16];
  }
  else
  {
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_102316300);
    }
    __int16 v17 = qword_102418FA8;
    if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 138543875;
      id v30 = [a2 identifier];
      __int16 v31 = 2049;
      double v32 = a4;
      __int16 v33 = 2049;
      double v34 = a5;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "QuantityType %{public}@ query failed, health data unavailable (%{private}f, %{private}f)", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FA0 != -1) {
        dispatch_once(&qword_102418FA0, &stru_102316300);
      }
      int v23 = 138543875;
      id v24 = [a2 identifier];
      __int16 v25 = 2049;
      double v26 = a4;
      __int16 v27 = 2049;
      double v28 = a5;
      double v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMobility::HealthKitQueryDelegate::_queryLocalDeviceDailyQuantitySum(CFAbsoluteTime, CFAbsoluteTime, HKQuantityType *, QuantityHandlerFunction)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    std::string __p = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(a3 + 16))(a3, 109, &__p);
    if (__p)
    {
      uint64_t v21 = __p;
      operator delete(__p);
    }
  }
}

void sub_10119BE90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10119BEB4(id *a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  if (+[HKHealthStore isHealthDataAvailable])
  {
    id v10 = +[NSMutableArray array];
    char v11 = sub_10119A538();
    id v12 = [objc_alloc((Class)NSDate) initWithTimeIntervalSinceReferenceDate:a4];
    id v13 = [objc_alloc((Class)NSDate) initWithTimeIntervalSinceReferenceDate:a5];
    [v10 addObject:[+[HKQuery predicateForSamplesWithStartDate:endDate:options:](HKQuery, "predicateForSamplesWithStartDate:endDate:options:", v12, v13, 0)];
    if (v11)
    {
LABEL_5:
      uint64_t v14 = +[NSCompoundPredicate andPredicateWithSubpredicates:v10];
      id v15 = +[HKObjectType categoryTypeForIdentifier:HKCategoryTypeIdentifierAppleWalkingSteadinessEvent];
      id v30 = +[NSSortDescriptor sortDescriptorWithKey:HKSampleSortIdentifierStartDate ascending:0];
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      v22[2] = sub_10119C41C;
      v22[3] = &unk_102316180;
      char v23 = v11;
      void v22[4] = a2;
      void v22[5] = v12;
      v22[6] = v13;
      _OWORD v22[7] = a3;
      id v16 = [objc_alloc((Class)HKSampleQuery) initWithSampleType:v15 predicate:v14 limit:0 sortDescriptors:[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v30, 1) resultsHandler:v22];
      [*a1 executeQuery:v16];

      return;
    }
    if (a2)
    {
      [v10 addObject:[+[HKQuery predicateForObjectsWithMetadataKey:](HKQuery, "predicateForObjectsWithMetadataKey:", _HKPrivateMetadataKeyCoreMotionSourceIdentifier)];
      goto LABEL_5;
    }
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1023162E0);
    }
    uint64_t v19 = qword_1024191F8;
    if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Missing Database  UUID", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1023162E0);
      }
      LOWORD(v31) = 0;
      uint64_t v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMobility::HealthKitQueryDelegate::queryWalkingSteadinessEvents(CFAbsoluteTime, CFAbsoluteTime, NSString *, CategoryHandlerFunction)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
    id v24 = 0;
    __int16 v25 = 0;
    uint64_t v26 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(a3 + 16))(a3, 109, &v24);
    double v18 = v24;
    if (v24)
    {
      __int16 v25 = v24;
      goto LABEL_13;
    }
  }
  else
  {
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1023162E0);
    }
    __int16 v17 = qword_1024191F8;
    if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134283777;
      double v36 = a4;
      __int16 v37 = 2049;
      double v38 = a5;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Steadiness Events query failed, health data unavailable (%{private}f, %{private}f)", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1023162E0);
      }
      int v31 = 134283777;
      double v32 = a4;
      __int16 v33 = 2049;
      double v34 = a5;
      __int16 v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMobility::HealthKitQueryDelegate::queryWalkingSteadinessEvents(CFAbsoluteTime, CFAbsoluteTime, NSString *, CategoryHandlerFunction)", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    std::string __p = 0;
    double v28 = 0;
    uint64_t v29 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(a3 + 16))(a3, 109, &__p);
    double v18 = __p;
    if (__p)
    {
      double v28 = __p;
LABEL_13:
      operator delete(v18);
    }
  }
}

void sub_10119C3E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (__p)
  {
    void *v23 = __p;
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10119C41C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4)
  {
    if ([a4 code] == (id)6)
    {
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1023162E0);
      }
      unint64_t v6 = qword_1024191F8;
      if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "HealthKit SteadinessEvent query failed due to device lock", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_1023162E0);
        }
        LOWORD(v58) = 0;
        uint64_t v46 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobility::HealthKitQueryDelegate::queryWalkingSteadinessEvents(CFAbsoluteTime, CFAbsoluteTime, NSString *, CategoryHandlerFunction)_block_invoke", "%s\n", v46);
        if (v46 != (char *)buf) {
          free(v46);
        }
      }
      uint64_t v7 = *(void *)(a1 + 56);
      memset(&v57[4], 0, 24);
      (*(void (**)(void))(v7 + 16))();
    }
    else
    {
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1023162E0);
      }
      uint64_t v41 = qword_1024191F8;
      if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 138543362;
        unint64_t v66 = (unint64_t)a4;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "HealthKit SteadinessEvent query encountered error: %{public}@", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_1023162E0);
        }
        int v58 = 138543362;
        unint64_t v59 = (unint64_t)a4;
        uint64_t v47 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLMobility::HealthKitQueryDelegate::queryWalkingSteadinessEvents(CFAbsoluteTime, CFAbsoluteTime, NSString *, CategoryHandlerFunction)_block_invoke", "%s\n", v47);
        if (v47 != (char *)buf) {
          free(v47);
        }
      }
      uint64_t v42 = *(void *)(a1 + 56);
      memset(&v57[1], 0, 24);
      (*(void (**)(void))(v42 + 16))();
    }
    return;
  }
  std::string __p = 0;
  long long v56 = 0;
  v57[0] = 0;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  id v9 = [a3 countByEnumeratingWithState:&v51 objects:v64 count:16];
  if (!v9) {
    goto LABEL_55;
  }
  uint64_t v10 = *(void *)v52;
  uint64_t v11 = _HKPrivateMetadataKeyCoreMotionSourceIdentifier;
  do
  {
    id v12 = 0;
    do
    {
      if (*(void *)v52 != v10) {
        objc_enumerationMutation(a3);
      }
      id v13 = *(void **)(*((void *)&v51 + 1) + 8 * (void)v12);
      if (objc_msgSend(objc_msgSend(v13, "metadata"), "objectForKey:", v11) || *(unsigned char *)(a1 + 64))
      {
        if ((objc_msgSend(objc_msgSend(objc_msgSend(v13, "metadata"), "objectForKeyedSubscript:", v11), "isEqualToString:", *(void *)(a1 + 32)) & 1) != 0|| *(unsigned char *)(a1 + 64))
        {
          [objc_msgSend(v13, "startDate") timeIntervalSinceReferenceDate];
          uint64_t v15 = v14;
          [objc_msgSend(v13, "endDate") timeIntervalSinceReferenceDate];
          uint64_t v17 = v16;
          id v18 = [v13 value];
          id v19 = v18;
          __int16 v20 = v56;
          if ((unint64_t)v56 >= v57[0])
          {
            uint64_t v22 = __p;
            unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * (((char *)v56 - (unsigned char *)__p) >> 3);
            unint64_t v24 = v23 + 1;
            if (v23 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_1001D7FD4();
            }
            if (0x5555555555555556 * ((uint64_t)(v57[0] - (void)__p) >> 3) > v24) {
              unint64_t v24 = 0x5555555555555556 * ((uint64_t)(v57[0] - (void)__p) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57[0] - (void)__p) >> 3) >= 0x555555555555555) {
              unint64_t v25 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v25 = v24;
            }
            if (v25)
            {
              uint64_t v26 = (char *)sub_1000DA5D8((uint64_t)v57, v25);
              uint64_t v22 = __p;
              __int16 v20 = v56;
            }
            else
            {
              uint64_t v26 = 0;
            }
            double v34 = &v26[24 * v23];
            *(void *)double v34 = v15;
            *((void *)v34 + 1) = v17;
            *((void *)v34 + 2) = v19;
            double v35 = v34;
            if (v20 != v22)
            {
              do
              {
                long long v36 = *(_OWORD *)(v20 - 3);
                *((void *)v35 - 1) = *(v20 - 1);
                *(_OWORD *)(v35 - 24) = v36;
                v35 -= 24;
                v20 -= 3;
              }
              while (v20 != v22);
              uint64_t v22 = __p;
            }
            uint64_t v21 = v34 + 24;
            std::string __p = v35;
            long long v56 = v34 + 24;
            v57[0] = &v26[24 * v25];
            if (v22) {
              operator delete(v22);
            }
          }
          else
          {
            *long long v56 = v15;
            v20[1] = v17;
            uint64_t v21 = v20 + 3;
            void v20[2] = v18;
          }
          long long v56 = v21;
          goto LABEL_53;
        }
        if (qword_102418FA0 != -1) {
          dispatch_once(&qword_102418FA0, &stru_102316300);
        }
        __int16 v27 = qword_102418FA8;
        if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEBUG))
        {
          id v28 = [[[v13 metadata] objectForKeyedSubscript:v11];
          uint64_t v29 = *(void *)(a1 + 32);
          *(_DWORD *)uint64_t buf = 138478083;
          unint64_t v66 = (unint64_t)v28;
          __int16 v67 = 2113;
          uint64_t v68 = v29;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "Sample's source UUID %{private}@ did not match dBUUID %{private}@", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FA0 != -1) {
            dispatch_once(&qword_102418FA0, &stru_102316300);
          }
          id v30 = [objc_msgSend(v13, "metadata") objectForKeyedSubscript:v11];
          uint64_t v31 = *(void *)(a1 + 32);
          int v58 = 138478083;
          unint64_t v59 = (unint64_t)v30;
          __int16 v60 = 2113;
          uint64_t v61 = v31;
          double v32 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobility::HealthKitQueryDelegate::queryWalkingSteadinessEvents(CFAbsoluteTime, CFAbsoluteTime, NSString *, CategoryHandlerFunction)_block_invoke", "%s\n", v32);
LABEL_44:
          if (v32 != (char *)buf) {
            free(v32);
          }
        }
      }
      else
      {
        if (qword_102418FA0 != -1) {
          dispatch_once(&qword_102418FA0, &stru_102316300);
        }
        __int16 v33 = qword_102418FA8;
        if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "Sample did not contain the source UUID metadata", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FA0 != -1) {
            dispatch_once(&qword_102418FA0, &stru_102316300);
          }
          LOWORD(v58) = 0;
          double v32 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobility::HealthKitQueryDelegate::queryWalkingSteadinessEvents(CFAbsoluteTime, CFAbsoluteTime, NSString *, CategoryHandlerFunction)_block_invoke", "%s\n", v32);
          goto LABEL_44;
        }
      }
LABEL_53:
      id v12 = (char *)v12 + 1;
    }
    while (v12 != v9);
    id v9 = [a3 countByEnumeratingWithState:&v51 objects:v64 count:16];
  }
  while (v9);
LABEL_55:
  if (qword_102418FA0 != -1) {
    dispatch_once(&qword_102418FA0, &stru_102316300);
  }
  __int16 v37 = qword_102418FA8;
  if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v38 = *(void *)(a1 + 40);
    uint64_t v39 = *(void *)(a1 + 48);
    *(_DWORD *)uint64_t buf = 134349570;
    unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * (((char *)v56 - (unsigned char *)__p) >> 3);
    __int16 v67 = 2114;
    uint64_t v68 = v38;
    __int16 v69 = 2114;
    uint64_t v70 = v39;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "[SteadinessEvent] numSamples, %{public}lu, startDate, %{public}@, endDate, %{public}@", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_102316300);
    }
    uint64_t v43 = *(void *)(a1 + 40);
    uint64_t v44 = *(void *)(a1 + 48);
    int v58 = 134349570;
    unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * (((char *)v56 - (unsigned char *)__p) >> 3);
    __int16 v60 = 2114;
    uint64_t v61 = v43;
    __int16 v62 = 2114;
    uint64_t v63 = v44;
    uint64_t v45 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobility::HealthKitQueryDelegate::queryWalkingSteadinessEvents(CFAbsoluteTime, CFAbsoluteTime, NSString *, CategoryHandlerFunction)_block_invoke", "%s\n", v45);
    if (v45 != (char *)buf) {
      free(v45);
    }
  }
  uint64_t v40 = *(void *)(a1 + 56);
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  __int16 v48 = 0;
  sub_1001F703C(&v48, __p, (uint64_t)v56, 0xAAAAAAAAAAAAAAABLL * (((char *)v56 - (unsigned char *)__p) >> 3));
  (*(void (**)(uint64_t, uint64_t, void **))(v40 + 16))(v40, 100, &v48);
  if (v48)
  {
    uint64_t v49 = v48;
    operator delete(v48);
  }
  if (__p)
  {
    long long v56 = __p;
    operator delete(__p);
  }
}

void sub_10119CE6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10119CEF8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4)
  {
    if ([a4 code] == (id)6)
    {
      if (qword_102418FA0 != -1) {
        dispatch_once(&qword_102418FA0, &stru_102316300);
      }
      unint64_t v6 = qword_102418FA8;
      if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEBUG))
      {
        id v7 = [*(id *)(a1 + 32) identifier];
        *(_DWORD *)uint64_t buf = 138543362;
        id v49 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "HealthKit  %{public}@ query failed due to device lock", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FA0 != -1) {
          dispatch_once(&qword_102418FA0, &stru_102316300);
        }
        id v25 = [*(id *)(a1 + 32) identifier];
        *(_DWORD *)uint64_t v41 = 138543362;
        *(void *)&v41[4] = v25;
        uint64_t v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobility::HealthKitQueryDelegate::_queryLocalDeviceDailyQuantitySum(CFAbsoluteTime, CFAbsoluteTime, HKQuantityType *, QuantityHandlerFunction)_block_invoke", "%s\n", v26);
        if (v26 != (char *)buf) {
          free(v26);
        }
      }
      uint64_t v8 = *(void *)(a1 + 56);
      memset(&v32[8], 0, 24);
      (*(void (**)(void))(v8 + 16))();
    }
    else
    {
      if (qword_102418FA0 != -1) {
        dispatch_once(&qword_102418FA0, &stru_102316300);
      }
      uint64_t v17 = qword_102418FA8;
      if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_ERROR))
      {
        id v18 = [*(id *)(a1 + 32) identifier];
        *(_DWORD *)uint64_t buf = 138543618;
        id v49 = v18;
        __int16 v50 = 2114;
        unint64_t v51 = (unint64_t)a4;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "HealthKit %{public}@ query encountered error: %{public}@", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FA0 != -1) {
          dispatch_once(&qword_102418FA0, &stru_102316300);
        }
        id v27 = [*(id *)(a1 + 32) identifier];
        *(_DWORD *)uint64_t v41 = 138543618;
        *(void *)&v41[4] = v27;
        *(_WORD *)&v41[12] = 2114;
        *(void *)&v41[14] = a4;
        id v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLMobility::HealthKitQueryDelegate::_queryLocalDeviceDailyQuantitySum(CFAbsoluteTime, CFAbsoluteTime, HKQuantityType *, QuantityHandlerFunction)_block_invoke", "%s\n", v28);
        if (v28 != (char *)buf) {
          free(v28);
        }
      }
      uint64_t v19 = *(void *)(a1 + 56);
      memset(&v32[5], 0, 24);
      (*(void (**)(void))(v19 + 16))();
    }
  }
  else
  {
    *(void *)uint64_t v41 = 0;
    *(void *)&v41[8] = v41;
    *(void *)&v41[16] = 0x4812000000;
    uint64_t v42 = sub_100177F08;
    uint64_t v43 = sub_100177680;
    uint64_t v44 = "";
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v45 = 0;
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_10119D61C;
    v32[3] = &unk_1022D7C18;
    void v32[4] = v41;
    [a3 enumerateStatisticsFromDate:v10 toDate:v9 withBlock:v32];
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_102316300);
    }
    uint64_t v11 = qword_102418FA8;
    if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEBUG))
    {
      id v12 = [*(id *)(a1 + 32) identifier];
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL
          * ((uint64_t)(*(void *)(*(void *)&v41[8] + 56) - *(void *)(*(void *)&v41[8] + 48)) >> 3);
      uint64_t v14 = *(void *)(a1 + 40);
      uint64_t v15 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 138544131;
      id v49 = v12;
      __int16 v50 = 2049;
      unint64_t v51 = v13;
      __int16 v52 = 2113;
      uint64_t v53 = v14;
      __int16 v54 = 2113;
      uint64_t v55 = v15;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[%{public}@] daysOfData, %{private}lu, startDate, %{private}@, endDate, %{private}@", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FA0 != -1) {
        dispatch_once(&qword_102418FA0, &stru_102316300);
      }
      id v20 = [*(id *)(a1 + 32) identifier];
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL
          * ((uint64_t)(*(void *)(*(void *)&v41[8] + 56) - *(void *)(*(void *)&v41[8] + 48)) >> 3);
      uint64_t v22 = *(void *)(a1 + 40);
      uint64_t v23 = *(void *)(a1 + 48);
      int v33 = 138544131;
      id v34 = v20;
      __int16 v35 = 2049;
      unint64_t v36 = v21;
      __int16 v37 = 2113;
      uint64_t v38 = v22;
      __int16 v39 = 2113;
      uint64_t v40 = v23;
      unint64_t v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobility::HealthKitQueryDelegate::_queryLocalDeviceDailyQuantitySum(CFAbsoluteTime, CFAbsoluteTime, HKQuantityType *, QuantityHandlerFunction)_block_invoke", "%s\n", v24);
      if (v24 != (char *)buf) {
        free(v24);
      }
    }
    uint64_t v16 = *(void *)(a1 + 56);
    id v30 = 0;
    uint64_t v31 = 0;
    std::string __p = 0;
    sub_1001F703C(&__p, *(const void **)(*(void *)&v41[8] + 48), *(void *)(*(void *)&v41[8] + 56), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(void *)(*(void *)&v41[8] + 56) - *(void *)(*(void *)&v41[8] + 48)) >> 3));
    (*(void (**)(uint64_t, uint64_t, void **))(v16 + 16))(v16, 100, &__p);
    if (__p)
    {
      id v30 = __p;
      operator delete(__p);
    }
    _Block_object_dispose(v41, 8);
    if (v45)
    {
      uint64_t v46 = v45;
      operator delete(v45);
    }
  }
}

void sub_10119D5A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38)
{
  if (__p)
  {
    a38 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10119D61C(uint64_t a1, void *a2)
{
  if (a2)
  {
    [objc_msgSend(a2, "startDate") timeIntervalSinceReferenceDate];
    uint64_t v5 = v4;
    [objc_msgSend(a2, "endDate") timeIntervalSinceReferenceDate];
    uint64_t v7 = v6;
    [objc_msgSend(a2, "sumQuantity") doubleValueForUnit:+[HKUnit countUnit](HKUnit, "countUnit")];
    uint64_t v9 = v8;
    uint64_t v10 = *(void **)(*(void *)(a1 + 32) + 8);
    uint64_t v11 = (char *)v10[7];
    unint64_t v12 = v10[8];
    if ((unint64_t)v11 >= v12)
    {
      uint64_t v14 = (char *)v10[6];
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v14) >> 3);
      unint64_t v16 = v15 + 1;
      if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)v14) >> 3);
      if (2 * v17 > v16) {
        unint64_t v16 = 2 * v17;
      }
      if (v17 >= 0x555555555555555) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        uint64_t v19 = (char *)sub_1000DA5D8((uint64_t)(v10 + 8), v18);
        uint64_t v14 = (char *)v10[6];
        uint64_t v11 = (char *)v10[7];
      }
      else
      {
        uint64_t v19 = 0;
      }
      id v20 = &v19[24 * v15];
      unint64_t v21 = &v19[24 * v18];
      *(void *)id v20 = v5;
      *((void *)v20 + 1) = v7;
      *((void *)v20 + 2) = v9;
      unint64_t v13 = v20 + 24;
      if (v11 != v14)
      {
        do
        {
          long long v22 = *(_OWORD *)(v11 - 24);
          *((void *)v20 - 1) = *((void *)v11 - 1);
          *(_OWORD *)(v20 - 24) = v22;
          v20 -= 24;
          v11 -= 24;
        }
        while (v11 != v14);
        uint64_t v14 = (char *)v10[6];
      }
      v10[6] = v20;
      v10[7] = v13;
      v10[8] = v21;
      if (v14) {
        operator delete(v14);
      }
    }
    else
    {
      *(void *)uint64_t v11 = v5;
      *((void *)v11 + 1) = v7;
      unint64_t v13 = v11 + 24;
      *((void *)v11 + 2) = v8;
    }
    v10[7] = v13;
  }
}

void sub_10119D7A8(id *a1, uint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x3052000000;
  uint64_t v9 = sub_10119D8EC;
  uint64_t v10 = sub_10119D8FC;
  uint64_t v11 = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_10119D908;
  v5[3] = &unk_1023161F8;
  v5[5] = &v6;
  v5[6] = a1;
  void v5[4] = a2;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_10119D98C;
  v4[3] = &unk_102316220;
  void v4[4] = v5;
  id v3 = [objc_alloc((Class)HKMCPregnancyStateQuery) initWithUpdateHandler:v4];
  v7[5] = (uint64_t)v3;
  [*a1 executeQuery:v3];
  _Block_object_dispose(&v6, 8);
}

void sub_10119D8D4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10119D8EC(uint64_t a1, uint64_t a2)
{
}

void sub_10119D8FC(uint64_t a1)
{
}

uint64_t sub_10119D908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  [**(id **)(a1 + 48) stopQuery:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];

  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v12 = *(void *)(a3 + 32);
  long long v7 = *(_OWORD *)(a3 + 16);
  v11[0] = *(_OWORD *)a3;
  v11[1] = v7;
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t))(v6 + 16))(v6, a2, v11, v8, v9);
}

void sub_10119D98C(uint64_t a1, uint64_t a2, void *a3, char *a4)
{
  if (a4)
  {
    if ([a4 code] == (id)6)
    {
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1023162E0);
      }
      uint64_t v6 = qword_1024191F8;
      if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "[PregnancyState] HealthKit PregnancyState query failed due to device lock", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_1023162E0);
        }
        id v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobility::HealthKitQueryDelegate::queryLatestPregnancyState(PregnancyHandlerFunction)_block_invoke", "%s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
      }
      long long v7 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
    }
    else
    {
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1023162E0);
      }
      unint64_t v16 = qword_1024191F8;
      if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 138543362;
        unint64_t v24 = a4;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "[PregnancyState] HealthKit PregnancyState query encountered error: %{public}@", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_1023162E0);
        }
        unint64_t v21 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLMobility::HealthKitQueryDelegate::queryLatestPregnancyState(PregnancyHandlerFunction)_block_invoke", "%s\n", v21);
        if (v21 != (char *)buf) {
          free(v21);
        }
      }
      long long v7 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
    }
LABEL_30:
    v7();
    return;
  }
  if (!a3)
  {
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_102316300);
    }
    unint64_t v17 = qword_102418FA8;
    if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "[PregnancyState] not available", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FA0 != -1) {
        dispatch_once(&qword_102418FA0, &stru_102316300);
      }
      long long v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobility::HealthKitQueryDelegate::queryLatestPregnancyState(PregnancyHandlerFunction)_block_invoke", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
    long long v7 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
    goto LABEL_30;
  }
  if ([a3 state] == (id)1)
  {
    [objc_msgSend(a3, "pregnancyStartDate") timeIntervalSinceReferenceDate];
    uint64_t v10 = v9;
    [objc_msgSend(a3, "pregnancyEndDate") timeIntervalSinceReferenceDate];
    [objc_msgSend(a3, "estimatedDueDate") timeIntervalSinceReferenceDate];
    uint64_t v12 = v11;
    [objc_msgSend(a3, "pregnancyDuration") duration];
    uint64_t v14 = v13;
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_102316300);
    }
    unint64_t v15 = qword_102418FA8;
    if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 136643587;
      unint64_t v24 = "True";
      __int16 v25 = 2053;
      uint64_t v26 = v14;
      __int16 v27 = 2053;
      uint64_t v28 = v10;
      __int16 v29 = 2053;
      uint64_t v30 = v12;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "[PregnancyState] %{sensitive}s, duration, %{sensitive}f, startDate, %{sensitive}f, dueDate, %{sensitive}f", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FA0 == -1)
      {
LABEL_38:
        uint64_t v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobility::HealthKitQueryDelegate::queryLatestPregnancyState(PregnancyHandlerFunction)_block_invoke", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
        return;
      }
LABEL_52:
      dispatch_once(&qword_102418FA0, &stru_102316300);
      goto LABEL_38;
    }
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_102316300);
    }
    unint64_t v18 = qword_102418FA8;
    if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 136643587;
      unint64_t v24 = "Not ongoing";
      __int16 v25 = 2053;
      uint64_t v26 = 0;
      __int16 v27 = 2053;
      uint64_t v28 = 0;
      __int16 v29 = 2053;
      uint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "[PregnancyState] %{sensitive}s, duration, %{sensitive}f, startDate, %{sensitive}f, dueDate, %{sensitive}f", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FA0 == -1) {
        goto LABEL_38;
      }
      goto LABEL_52;
    }
  }
}

void sub_10119E198(id *a1, void *a2, double *a3, uint64_t a4, uint64_t a5)
{
  v60[0] = 0;
  v60[1] = v60;
  v60[2] = 0x2020000000;
  char v61 = 0;
  v56[0] = 0;
  v56[1] = v56;
  v56[2] = 0x4812000000;
  v56[3] = sub_100177F08;
  v56[4] = sub_100177680;
  v56[5] = "";
  int v58 = 0;
  uint64_t v59 = 0;
  long long v57 = 0;
  v54[0] = 0;
  v54[1] = v54;
  uint64_t v54[2] = 0x2020000000;
  char v55 = 0;
  v52[0] = 0;
  v52[1] = v52;
  v52[2] = 0x2020000000;
  int v53 = 0;
  v50[0] = 0;
  v50[1] = v50;
  v50[2] = 0x2020000000;
  char v51 = 0;
  v46[0] = 0;
  v46[1] = v46;
  v46[2] = 0x4812000000;
  v46[3] = sub_100177F08;
  v46[4] = sub_100177680;
  v46[5] = "";
  uint64_t v49 = 0;
  uint64_t v47 = 0;
  __int16 v48 = 0;
  v44[0] = 0;
  v44[1] = v44;
  v44[2] = 0x2020000000;
  char v45 = 0;
  v40[0] = 0;
  v40[1] = v40;
  v40[2] = 0x4812000000;
  v40[3] = sub_100177F08;
  v40[4] = sub_100177680;
  v40[5] = "";
  uint64_t v43 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  v38[0] = 0;
  v38[1] = v38;
  v38[2] = 0x2020000000;
  char v39 = 0;
  v34[0] = 0;
  v34[1] = v34;
  _OWORD v34[2] = 0x4812000000;
  v34[3] = sub_10119E904;
  v34[4] = sub_10119E928;
  v34[5] = "";
  uint64_t v37 = 0;
  std::string __p = 0;
  unint64_t v36 = 0;
  v32[0] = 0;
  v32[1] = v32;
  v32[2] = 0x2020000000;
  char v33 = 0;
  v28[0] = 0;
  v28[1] = v28;
  void v28[2] = 0x5812000000;
  void v28[3] = sub_10119E940;
  void v28[4] = nullsub_1428;
  v28[5] = "";
  char v29 = 0;
  long long v30 = 0u;
  long long v31 = 0u;
  uint64_t v9 = dispatch_group_create();
  dispatch_group_enter(v9);
  double v10 = *a3;
  double v11 = a3[1];
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  uint64_t v27[2] = sub_10119E958;
  v27[3] = &unk_102316248;
  void v27[5] = v56;
  v27[6] = v60;
  void v27[4] = v9;
  sub_101199FB8(a1, 0, a4, 0, (uint64_t)v27, v10, v11);
  dispatch_group_enter(v9);
  double v12 = a3[2];
  double v13 = a3[3];
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  _OWORD v26[2] = sub_10119E9D4;
  v26[3] = &unk_102316270;
  v26[5] = v52;
  v26[6] = v54;
  _DWORD v26[4] = v9;
  sub_10119B28C(a1, (uint64_t)v26, v12, v13);
  dispatch_group_enter(v9);
  double v14 = a3[4];
  double v15 = a3[5];
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  void v25[2] = sub_10119E9FC;
  long long v25[3] = &unk_102316248;
  v25[5] = v46;
  v25[6] = v50;
  void v25[4] = v9;
  sub_10119BACC(a1, +[HKQuantityType quantityTypeForIdentifier:HKQuantityTypeIdentifierStepCount], (uint64_t)v25, v14, v15);
  dispatch_group_enter(v9);
  double v16 = a3[6];
  double v17 = a3[7];
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  __n128 v24[2] = sub_10119EA78;
  v24[3] = &unk_102316248;
  void v24[5] = v40;
  v24[6] = v44;
  void v24[4] = v9;
  sub_10119BACC(a1, +[HKQuantityType quantityTypeForIdentifier:HKQuantityTypeIdentifierFlightsClimbed], (uint64_t)v24, v16, v17);
  dispatch_group_enter(v9);
  double v18 = a3[8];
  double v19 = a3[9];
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  void v23[2] = sub_10119EAF4;
  v23[3] = &unk_102316298;
  void v23[5] = v34;
  v23[6] = v38;
  void v23[4] = v9;
  sub_10119BEB4(a1, a4, (uint64_t)v23, v18, v19);
  dispatch_group_enter(v9);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_10119EB70;
  v22[3] = &unk_1023162C0;
  v22[6] = v32;
  void v22[4] = v9;
  void v22[5] = v28;
  sub_10119D7A8(a1, (uint64_t)v22);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10119EBA4;
  block[3] = &unk_1022ACE50;
  block[6] = v60;
  block[7] = v54;
  block[8] = v50;
  block[9] = v44;
  block[10] = v38;
  block[11] = v32;
  block[4] = v9;
  void block[5] = a5;
  block[12] = v56;
  block[13] = v52;
  block[14] = v46;
  block[15] = v40;
  block[16] = v34;
  block[17] = v28;
  dispatch_group_notify(v9, (dispatch_queue_t)[a2 queue], block);
  _Block_object_dispose(v28, 8);
  _Block_object_dispose(v32, 8);
  _Block_object_dispose(v34, 8);
  if (__p)
  {
    unint64_t v36 = __p;
    operator delete(__p);
  }
  _Block_object_dispose(v38, 8);
  _Block_object_dispose(v40, 8);
  if (v41)
  {
    uint64_t v42 = v41;
    operator delete(v41);
  }
  _Block_object_dispose(v44, 8);
  _Block_object_dispose(v46, 8);
  if (v47)
  {
    __int16 v48 = v47;
    operator delete(v47);
  }
  _Block_object_dispose(v50, 8);
  _Block_object_dispose(v52, 8);
  _Block_object_dispose(v54, 8);
  _Block_object_dispose(v56, 8);
  if (v57)
  {
    int v58 = v57;
    operator delete(v57);
  }
  _Block_object_dispose(v60, 8);
}

void sub_10119E828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a71, 8);
  _Block_object_dispose(&STACK[0x248], 8);
  _Block_object_dispose(&STACK[0x268], 8);
  uint64_t v73 = (void *)STACK[0x298];
  if (STACK[0x298])
  {
    STACK[0x2A0] = (unint64_t)v73;
    operator delete(v73);
  }
  _Block_object_dispose(&STACK[0x2B0], 8);
  _Block_object_dispose(&STACK[0x2D0], 8);
  long long v74 = (void *)STACK[0x300];
  if (STACK[0x300])
  {
    STACK[0x308] = (unint64_t)v74;
    operator delete(v74);
  }
  _Block_object_dispose(&STACK[0x318], 8);
  _Block_object_dispose(&STACK[0x338], 8);
  id v75 = (void *)STACK[0x368];
  if (STACK[0x368])
  {
    STACK[0x370] = (unint64_t)v75;
    operator delete(v75);
  }
  _Block_object_dispose(&STACK[0x380], 8);
  _Block_object_dispose(&STACK[0x3A0], 8);
  _Block_object_dispose((const void *)(v71 - 256), 8);
  _Block_object_dispose((const void *)(v71 - 224), 8);
  __int16 v76 = *(void **)(v71 - 176);
  if (v76)
  {
    *(void *)(v71 - 168) = v76;
    operator delete(v76);
  }
  _Block_object_dispose((const void *)(v71 - 152), 8);
  _Unwind_Resume(a1);
}

__n128 sub_10119E904(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_10119E928(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

__n128 sub_10119E940(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_10119E958(void *a1, int a2, uint64_t a3)
{
  uint64_t v5 = (char *)(*(void *)(a1[5] + 8) + 48);
  if (v5 != (char *)a3) {
    sub_1002A9098(v5, *(char **)a3, *(void *)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  }
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = a2 == 100;
  uint64_t v6 = a1[4];

  dispatch_group_leave(v6);
}

void sub_10119E9D4(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a3;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = a2 == 100;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10119E9FC(void *a1, int a2, uint64_t a3)
{
  uint64_t v5 = (char *)(*(void *)(a1[5] + 8) + 48);
  if (v5 != (char *)a3) {
    sub_1002A9098(v5, *(char **)a3, *(void *)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  }
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = a2 == 100;
  uint64_t v6 = a1[4];

  dispatch_group_leave(v6);
}

void sub_10119EA78(void *a1, int a2, uint64_t a3)
{
  uint64_t v5 = (char *)(*(void *)(a1[5] + 8) + 48);
  if (v5 != (char *)a3) {
    sub_1002A9098(v5, *(char **)a3, *(void *)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  }
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = a2 == 100;
  uint64_t v6 = a1[4];

  dispatch_group_leave(v6);
}

void sub_10119EAF4(void *a1, int a2, uint64_t a3)
{
  uint64_t v5 = (char *)(*(void *)(a1[5] + 8) + 48);
  if (v5 != (char *)a3) {
    sub_1002A9098(v5, *(char **)a3, *(void *)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  }
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = a2 == 100;
  uint64_t v6 = a1[4];

  dispatch_group_leave(v6);
}

void sub_10119EB70(uint64_t a1, int a2, long long *a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  long long v4 = *a3;
  long long v5 = a3[1];
  *(void *)(v3 + 80) = *((void *)a3 + 4);
  *(_OWORD *)(v3 + 48) = v4;
  *(_OWORD *)(v3 + 64) = v5;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = a2 == 100;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10119EBA4(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)(a1 + 32));
  BOOL v2 = *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)
    && *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)
    && *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24)
    && *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24)
    && *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24)
    && *(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) != 0;
  if (qword_102418FA0 != -1) {
    dispatch_once(&qword_102418FA0, &stru_102316300);
  }
  uint64_t v3 = qword_102418FA8;
  if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    BOOL v30 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Steadiness HealthKit inputs queried success, %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_102316300);
    }
    int v27 = 67240192;
    BOOL v28 = v2;
    double v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobility::HealthKitQueryDelegate::querySteadinessHealthKitInputs(CLSilo *, SteadinessHealthKitQueryBounds, NSString *, SteadinessInputsHandler)_block_invoke", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(*(void *)(a1 + 96) + 8);
  __int16 v25 = 0;
  uint64_t v26 = 0;
  unint64_t v24 = 0;
  sub_1001F703C(&v24, *(const void **)(v5 + 48), *(void *)(v5 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v5 + 56) - *(void *)(v5 + 48)) >> 3));
  uint64_t v6 = *(unsigned int *)(*(void *)(*(void *)(a1 + 104) + 8) + 24);
  uint64_t v7 = *(void *)(*(void *)(a1 + 112) + 8);
  long long v22 = 0;
  uint64_t v23 = 0;
  unint64_t v21 = 0;
  sub_1001F703C(&v21, *(const void **)(v7 + 48), *(void *)(v7 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v7 + 56) - *(void *)(v7 + 48)) >> 3));
  uint64_t v8 = *(void *)(*(void *)(a1 + 120) + 8);
  double v19 = 0;
  uint64_t v20 = 0;
  double v18 = 0;
  sub_1001F703C(&v18, *(const void **)(v8 + 48), *(void *)(v8 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v8 + 56) - *(void *)(v8 + 48)) >> 3));
  uint64_t v9 = *(void *)(*(void *)(a1 + 128) + 8);
  double v16 = 0;
  uint64_t v17 = 0;
  std::string __p = 0;
  sub_1001F703C(&__p, *(const void **)(v9 + 48), *(void *)(v9 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v9 + 56) - *(void *)(v9 + 48)) >> 3));
  uint64_t v10 = *(void *)(*(void *)(a1 + 136) + 8);
  uint64_t v14 = *(void *)(v10 + 80);
  long long v11 = *(_OWORD *)(v10 + 64);
  v13[0] = *(_OWORD *)(v10 + 48);
  v13[1] = v11;
  (*(void (**)(uint64_t, BOOL, void **, uint64_t, void **, void **, void **, _OWORD *))(v4 + 16))(v4, v2, &v24, v6, &v21, &v18, &__p, v13);
  if (__p)
  {
    double v16 = __p;
    operator delete(__p);
  }
  if (v18)
  {
    double v19 = v18;
    operator delete(v18);
  }
  if (v21)
  {
    long long v22 = v21;
    operator delete(v21);
  }
  if (v24)
  {
    __int16 v25 = v24;
    operator delete(v24);
  }
}

void sub_10119EEFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  if (a23) {
    operator delete(a23);
  }
  if (a26) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

void sub_10119EF68(id a1)
{
  qword_1024191F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Mobility");
}

void sub_10119EF98(id a1)
{
  qword_102418FA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Steadiness");
}

void sub_10119EFC8(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 16) < *(double *)(v10 + 8))
                {
                  uint64_t v117 = *(void *)(v10 + 16);
                  long long v111 = *(_OWORD *)v10;
                  long long v49 = *(_OWORD *)(a2 - 24);
                  *(void *)(v10 + 16) = *(void *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v49;
                  *(void *)(a2 - 8) = v117;
                  *(_OWORD *)(a2 - 24) = v111;
                }
                break;
              case 3uLL:
                sub_10119F8B4((long long *)v10, (double *)(v10 + 24), (double *)(a2 - 24));
                break;
              case 4uLL:
                sub_10119FC3C(v10, v10 + 24, v10 + 48, a2 - 24);
                break;
              case 5uLL:
                __int16 v50 = (long long *)(v10 + 24);
                char v51 = (long long *)(v10 + 48);
                __int16 v52 = (long long *)(v10 + 72);
                sub_10119FC3C(v10, v10 + 24, v10 + 48, v10 + 72);
                if (*(double *)(a2 - 16) < *(double *)(v10 + 80))
                {
                  long long v53 = *v52;
                  uint64_t v54 = *(void *)(v10 + 88);
                  uint64_t v55 = *(void *)(a2 - 8);
                  *__int16 v52 = *(_OWORD *)(a2 - 24);
                  *(void *)(v10 + 88) = v55;
                  *(void *)(a2 - 8) = v54;
                  *(_OWORD *)(a2 - 24) = v53;
                  if (*(double *)(v10 + 80) < *(double *)(v10 + 56))
                  {
                    uint64_t v56 = *(void *)(v10 + 64);
                    long long v57 = *v51;
                    *char v51 = *v52;
                    *(void *)(v10 + 64) = *(void *)(v10 + 88);
                    *__int16 v52 = v57;
                    *(void *)(v10 + 88) = v56;
                    if (*(double *)(v10 + 56) < *(double *)(v10 + 32))
                    {
                      uint64_t v58 = *(void *)(v10 + 40);
                      long long v59 = *v50;
                      long long *v50 = *v51;
                      *(void *)(v10 + 40) = *(void *)(v10 + 64);
                      *char v51 = v59;
                      *(void *)(v10 + 64) = v58;
                      if (*(double *)(v10 + 32) < *(double *)(v10 + 8))
                      {
                        uint64_t v118 = *(void *)(v10 + 16);
                        long long v112 = *(_OWORD *)v10;
                        *(_OWORD *)unint64_t v10 = *v50;
                        *(void *)(v10 + 16) = *(void *)(v10 + 40);
                        long long *v50 = v112;
                        *(void *)(v10 + 40) = v118;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 575)
          {
            __int16 v60 = (void *)(v10 + 24);
            BOOL v62 = v10 == a2 || v60 == (void *)a2;
            if (a4)
            {
              if (!v62)
              {
                uint64_t v63 = 0;
                unint64_t v64 = v10;
                do
                {
                  __int16 v65 = v60;
                  double v66 = *(double *)(v64 + 32);
                  if (v66 < *(double *)(v64 + 8))
                  {
                    uint64_t v67 = *v60;
                    uint64_t v68 = *(void *)(v64 + 40);
                    uint64_t v69 = v63;
                    while (1)
                    {
                      uint64_t v70 = v10 + v69;
                      *(_OWORD *)(v70 + 24) = *(_OWORD *)(v10 + v69);
                      *(void *)(v70 + 40) = *(void *)(v10 + v69 + 16);
                      if (!v69) {
                        break;
                      }
                      v69 -= 24;
                      if (v66 >= *(double *)(v70 - 16))
                      {
                        uint64_t v71 = v10 + v69 + 24;
                        goto LABEL_84;
                      }
                    }
                    uint64_t v71 = v10;
LABEL_84:
                    *(void *)uint64_t v71 = v67;
                    *(double *)(v71 + 8) = v66;
                    *(void *)(v71 + 16) = v68;
                  }
                  __int16 v60 = v65 + 3;
                  v63 += 24;
                  unint64_t v64 = (unint64_t)v65;
                }
                while (v65 + 3 != (void *)a2);
              }
            }
            else if (!v62)
            {
              do
              {
                uint64_t v102 = v60;
                double v103 = *(double *)(a1 + 32);
                if (v103 < *(double *)(a1 + 8))
                {
                  uint64_t v104 = *v60;
                  uint64_t v105 = *(void *)(a1 + 40);
                  int v106 = (double *)v60;
                  do
                  {
                    *(_OWORD *)int v106 = *(_OWORD *)(v106 - 3);
                    v106[2] = *(v106 - 1);
                    double v107 = *(v106 - 5);
                    v106 -= 3;
                  }
                  while (v103 < v107);
                  *(void *)int v106 = v104;
                  v106[1] = v103;
                  *((void *)v106 + 2) = v105;
                }
                v60 += 3;
                a1 = (unint64_t)v102;
              }
              while (v102 + 3 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v72 = (v12 - 2) >> 1;
              int64_t v73 = v72;
              do
              {
                int64_t v74 = v73;
                if (v72 >= v73)
                {
                  uint64_t v75 = (2 * v73) | 1;
                  unint64_t v76 = v10 + 24 * v75;
                  if (2 * v74 + 2 < (uint64_t)v12 && *(double *)(v10 + 24 * v75 + 8) < *(double *)(v76 + 32))
                  {
                    v76 += 24;
                    uint64_t v75 = 2 * v74 + 2;
                  }
                  double v77 = *(double *)(v10 + 24 * v74 + 8);
                  if (*(double *)(v76 + 8) >= v77)
                  {
                    unint64_t v78 = v10 + 24 * v74;
                    uint64_t v79 = *(void *)v78;
                    uint64_t v80 = *(void *)(v78 + 16);
                    do
                    {
                      unint64_t v81 = v78;
                      unint64_t v78 = v76;
                      long long v82 = *(_OWORD *)v76;
                      *(void *)(v81 + 16) = *(void *)(v76 + 16);
                      *(_OWORD *)unint64_t v81 = v82;
                      if (v72 < v75) {
                        break;
                      }
                      uint64_t v83 = (2 * v75) | 1;
                      unint64_t v76 = v10 + 24 * v83;
                      uint64_t v84 = 2 * v75 + 2;
                      if (v84 < (uint64_t)v12 && *(double *)(v10 + 24 * v83 + 8) < *(double *)(v76 + 32))
                      {
                        v76 += 24;
                        uint64_t v83 = v84;
                      }
                      uint64_t v75 = v83;
                    }
                    while (*(double *)(v76 + 8) >= v77);
                    *(void *)unint64_t v78 = v79;
                    *(double *)(v78 + 8) = v77;
                    *(void *)(v78 + 16) = v80;
                  }
                }
                int64_t v73 = v74 - 1;
              }
              while (v74);
              int64_t v85 = v11 / 0x18uLL;
              do
              {
                uint64_t v86 = 0;
                uint64_t v119 = *(void *)(v10 + 16);
                long long v113 = *(_OWORD *)v10;
                unint64_t v87 = v10;
                do
                {
                  unint64_t v88 = v87;
                  uint64_t v89 = v86 + 1;
                  v87 += 24 * (v86 + 1);
                  uint64_t v90 = 2 * v86;
                  uint64_t v86 = (2 * v86) | 1;
                  int64_t v91 = v90 + 2;
                  if (v91 < v85 && *(double *)(v88 + 24 * v89 + 8) < *(double *)(v87 + 32))
                  {
                    v87 += 24;
                    uint64_t v86 = v91;
                  }
                  long long v92 = *(_OWORD *)v87;
                  *(void *)(v88 + 16) = *(void *)(v87 + 16);
                  *(_OWORD *)unint64_t v88 = v92;
                }
                while (v86 <= (uint64_t)((unint64_t)(v85 - 2) >> 1));
                a2 -= 24;
                if (v87 == a2)
                {
                  *(void *)(v87 + 16) = v119;
                  *(_OWORD *)unint64_t v87 = v113;
                }
                else
                {
                  long long v93 = *(_OWORD *)a2;
                  *(void *)(v87 + 16) = *(void *)(a2 + 16);
                  *(_OWORD *)unint64_t v87 = v93;
                  *(void *)(a2 + 16) = v119;
                  *(_OWORD *)a2 = v113;
                  uint64_t v94 = v87 - v10 + 24;
                  if (v94 >= 25)
                  {
                    unint64_t v95 = (v94 / 0x18uLL - 2) >> 1;
                    double v96 = *(double *)(v87 + 8);
                    if (*(double *)(v10 + 24 * v95 + 8) < v96)
                    {
                      uint64_t v97 = *(void *)v87;
                      uint64_t v98 = *(void *)(v87 + 16);
                      do
                      {
                        unint64_t v99 = v87;
                        unint64_t v87 = v10 + 24 * v95;
                        long long v100 = *(_OWORD *)v87;
                        *(void *)(v99 + 16) = *(void *)(v87 + 16);
                        *(_OWORD *)unint64_t v99 = v100;
                        if (!v95) {
                          break;
                        }
                        unint64_t v95 = (v95 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 24 * v95 + 8) < v96);
                      *(void *)unint64_t v87 = v97;
                      *(double *)(v87 + 8) = v96;
                      *(void *)(v87 + 16) = v98;
                    }
                  }
                }
              }
              while (v85-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 24 * (v12 >> 1);
          if ((unint64_t)v11 >= 0xC01)
          {
            sub_10119F8B4((long long *)a1, (double *)(a1 + 24 * (v12 >> 1)), (double *)(a2 - 24));
            uint64_t v15 = 3 * v13;
            double v16 = (double *)(a1 + 24 * v13 - 24);
            sub_10119F8B4((long long *)(a1 + 24), v16, (double *)(a2 - 48));
            uint64_t v17 = (double *)(a1 + 24 + 8 * v15);
            sub_10119F8B4((long long *)(a1 + 48), v17, (double *)(a2 - 72));
            sub_10119F8B4((long long *)v16, (double *)v14, v17);
            uint64_t v114 = *(void *)(a1 + 16);
            long long v108 = *(_OWORD *)a1;
            uint64_t v18 = *(void *)(v14 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(void *)(a1 + 16) = v18;
            *(void *)(v14 + 16) = v114;
            *(_OWORD *)unint64_t v14 = v108;
          }
          else
          {
            sub_10119F8B4((long long *)(a1 + 24 * (v12 >> 1)), (double *)a1, (double *)(a2 - 24));
          }
          --a3;
          if (a4) {
            break;
          }
          double v19 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 16) < v19) {
            goto LABEL_12;
          }
          if (v19 >= *(double *)(a2 - 16))
          {
            unint64_t v38 = a1 + 24;
            do
            {
              unint64_t v10 = v38;
              if (v38 >= a2) {
                break;
              }
              double v39 = *(double *)(v38 + 8);
              v38 += 24;
            }
            while (v19 >= v39);
          }
          else
          {
            unint64_t v36 = a1;
            do
            {
              unint64_t v10 = v36 + 24;
              double v37 = *(double *)(v36 + 32);
              v36 += 24;
            }
            while (v19 >= v37);
          }
          unint64_t v40 = a2;
          if (v10 < a2)
          {
            unint64_t v41 = a2;
            do
            {
              unint64_t v40 = v41 - 24;
              double v42 = *(double *)(v41 - 16);
              v41 -= 24;
            }
            while (v19 < v42);
          }
          uint64_t v43 = *(void *)a1;
          uint64_t v44 = *(void *)(a1 + 16);
          while (v10 < v40)
          {
            uint64_t v116 = *(void *)(v10 + 16);
            long long v110 = *(_OWORD *)v10;
            long long v45 = *(_OWORD *)v40;
            *(void *)(v10 + 16) = *(void *)(v40 + 16);
            *(_OWORD *)unint64_t v10 = v45;
            *(void *)(v40 + 16) = v116;
            *(_OWORD *)unint64_t v40 = v110;
            do
            {
              double v46 = *(double *)(v10 + 32);
              v10 += 24;
            }
            while (v19 >= v46);
            do
            {
              double v47 = *(double *)(v40 - 16);
              v40 -= 24;
            }
            while (v19 < v47);
          }
          BOOL v4 = v10 - 24 >= a1;
          BOOL v5 = v10 - 24 == a1;
          if (v10 - 24 != a1)
          {
            long long v48 = *(_OWORD *)(v10 - 24);
            *(void *)(a1 + 16) = *(void *)(v10 - 8);
            *(_OWORD *)a1 = v48;
          }
          a4 = 0;
          *(void *)(v10 - 24) = v43;
          *(double *)(v10 - 16) = v19;
          *(void *)(v10 - 8) = v44;
        }
        double v19 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v20 = 0;
        uint64_t v21 = *(void *)a1;
        uint64_t v22 = *(void *)(a1 + 16);
        do
        {
          double v23 = *(double *)(a1 + v20 + 32);
          v20 += 24;
        }
        while (v23 < v19);
        unint64_t v24 = a1 + v20;
        unint64_t v25 = a2;
        if (v20 == 24)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 24;
            double v29 = *(double *)(v28 - 16);
            v28 -= 24;
            if (v29 < v19) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 24;
            double v27 = *(double *)(v25 - 16);
            v25 -= 24;
          }
          while (v27 >= v19);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v115 = *(void *)(v10 + 16);
            long long v109 = *(_OWORD *)v10;
            long long v31 = *(_OWORD *)v30;
            *(void *)(v10 + 16) = *(void *)(v30 + 16);
            *(_OWORD *)unint64_t v10 = v31;
            *(void *)(v30 + 16) = v115;
            *(_OWORD *)unint64_t v30 = v109;
            do
            {
              double v32 = *(double *)(v10 + 32);
              v10 += 24;
            }
            while (v32 < v19);
            do
            {
              double v33 = *(double *)(v30 - 16);
              v30 -= 24;
            }
            while (v33 >= v19);
          }
          while (v10 < v30);
        }
        if (v10 - 24 != a1)
        {
          long long v34 = *(_OWORD *)(v10 - 24);
          *(void *)(a1 + 16) = *(void *)(v10 - 8);
          *(_OWORD *)a1 = v34;
        }
        *(void *)(v10 - 24) = v21;
        *(double *)(v10 - 16) = v19;
        *(void *)(v10 - 8) = v22;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        sub_10119EFC8(a1, v10 - 24, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v35 = sub_10119F9A4(a1, v10 - 24);
      if (sub_10119F9A4(v10, a2)) {
        break;
      }
      if (!v35) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 24;
    if (!v35) {
      continue;
    }
    break;
  }
}

long long *sub_10119F8B4(long long *result, double *a2, double *a3)
{
  double v3 = a2[1];
  double v4 = a3[1];
  if (v3 >= *((double *)result + 1))
  {
    if (v4 < v3)
    {
      uint64_t v8 = *((void *)a2 + 2);
      long long v9 = *(_OWORD *)a2;
      uint64_t v10 = *((void *)a3 + 2);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((void *)a2 + 2) = v10;
      *(_OWORD *)a3 = v9;
      *((void *)a3 + 2) = v8;
      if (a2[1] < *((double *)result + 1))
      {
        uint64_t v11 = *((void *)result + 2);
        long long v12 = *result;
        uint64_t v13 = *((void *)a2 + 2);
        *__n128 result = *(_OWORD *)a2;
        *((void *)result + 2) = v13;
        *(_OWORD *)a2 = v12;
        *((void *)a2 + 2) = v11;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      uint64_t v14 = *((void *)result + 2);
      long long v15 = *result;
      uint64_t v16 = *((void *)a2 + 2);
      *__n128 result = *(_OWORD *)a2;
      *((void *)result + 2) = v16;
      *(_OWORD *)a2 = v15;
      *((void *)a2 + 2) = v14;
      if (a3[1] >= a2[1]) {
        return result;
      }
      uint64_t v5 = *((void *)a2 + 2);
      long long v6 = *(_OWORD *)a2;
      uint64_t v17 = *((void *)a3 + 2);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((void *)a2 + 2) = v17;
    }
    else
    {
      uint64_t v5 = *((void *)result + 2);
      long long v6 = *result;
      uint64_t v7 = *((void *)a3 + 2);
      *__n128 result = *(_OWORD *)a3;
      *((void *)result + 2) = v7;
    }
    *(_OWORD *)a3 = v6;
    *((void *)a3 + 2) = v5;
  }
  return result;
}

BOOL sub_10119F9A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 16) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 16);
        long long v7 = *(_OWORD *)a1;
        uint64_t v8 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 16) = v8;
        *(_OWORD *)(a2 - 24) = v7;
        *(void *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      sub_10119F8B4((long long *)a1, (double *)(a1 + 24), (double *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_10119FC3C(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      double v19 = (long long *)(a1 + 24);
      uint64_t v20 = (long long *)(a1 + 48);
      uint64_t v21 = (long long *)(a1 + 72);
      sub_10119FC3C(a1, a1 + 24, a1 + 48, a1 + 72);
      if (*(double *)(a2 - 16) < *(double *)(a1 + 80))
      {
        uint64_t v22 = *(void *)(a1 + 88);
        long long v23 = *v21;
        uint64_t v24 = *(void *)(a2 - 8);
        *uint64_t v21 = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 88) = v24;
        *(_OWORD *)(a2 - 24) = v23;
        *(void *)(a2 - 8) = v22;
        if (*(double *)(a1 + 80) < *(double *)(a1 + 56))
        {
          uint64_t v25 = *(void *)(a1 + 64);
          long long v26 = *v20;
          *uint64_t v20 = *v21;
          *(void *)(a1 + 64) = *(void *)(a1 + 88);
          *uint64_t v21 = v26;
          *(void *)(a1 + 88) = v25;
          if (*(double *)(a1 + 56) < *(double *)(a1 + 32))
          {
            uint64_t v27 = *(void *)(a1 + 40);
            long long v28 = *v19;
            *double v19 = *v20;
            *(void *)(a1 + 40) = *(void *)(a1 + 64);
            *uint64_t v20 = v28;
            *(void *)(a1 + 64) = v27;
            if (*(double *)(a1 + 32) < *(double *)(a1 + 8))
            {
              uint64_t v29 = *(void *)(a1 + 16);
              long long v30 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v19;
              *(void *)(a1 + 16) = *(void *)(a1 + 40);
              *double v19 = v30;
              *(void *)(a1 + 40) = v29;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v9 = a1 + 48;
      sub_10119F8B4((long long *)a1, (double *)(a1 + 24), (double *)(a1 + 48));
      uint64_t v10 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    double v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      uint64_t v14 = *(void *)v10;
      uint64_t v15 = *(void *)(v10 + 16);
      uint64_t v16 = v11;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)(a1 + v16 + 48);
        *(void *)(v17 + 88) = *(void *)(a1 + v16 + 64);
        if (v16 == -48) {
          break;
        }
        v16 -= 24;
        if (v13 >= *(double *)(v17 + 32))
        {
          uint64_t v18 = a1 + v16 + 72;
          goto LABEL_13;
        }
      }
      uint64_t v18 = a1;
LABEL_13:
      *(void *)uint64_t v18 = v14;
      *(double *)(v18 + 8) = v13;
      *(void *)(v18 + 16) = v15;
      if (++v12 == 8) {
        return v10 + 24 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 24;
    v10 += 24;
    if (v10 == a2) {
      return 1;
    }
  }
}

__n128 sub_10119FC3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10119F8B4((long long *)a1, (double *)a2, (double *)a3);
  result.n128_u64[0] = *(void *)(a4 + 8);
  if (result.n128_f64[0] < *(double *)(a3 + 8))
  {
    uint64_t v9 = *(void *)(a3 + 16);
    __n128 result = *(__n128 *)a3;
    uint64_t v10 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v10;
    *(__n128 *)a4 = result;
    *(void *)(a4 + 16) = v9;
    result.n128_u64[0] = *(void *)(a3 + 8);
    if (result.n128_f64[0] < *(double *)(a2 + 8))
    {
      uint64_t v11 = *(void *)(a2 + 16);
      __n128 result = *(__n128 *)a2;
      uint64_t v12 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v12;
      *(__n128 *)a3 = result;
      *(void *)(a3 + 16) = v11;
      result.n128_u64[0] = *(void *)(a2 + 8);
      if (result.n128_f64[0] < *(double *)(a1 + 8))
      {
        uint64_t v13 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v14 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v14;
        *(__n128 *)a2 = result;
        *(void *)(a2 + 16) = v13;
      }
    }
  }
  return result;
}

uint64_t sub_10119FD0C(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = sub_1011C08D4(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = off_102316330;
  *(void *)(v8 + 184) = 0;
  *(_WORD *)(v8 + 196) = 0;
  uint64_t v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonServiceSession(ctor) #clss", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v9, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1023163B8);
  }
  uint64_t v10 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 16);
    *(_DWORD *)uint64_t buf = 68290050;
    int v17 = 0;
    __int16 v18 = 2082;
    double v19 = "";
    __int16 v20 = 2082;
    uint64_t v21 = "activity";
    __int16 v22 = 2114;
    uint64_t v23 = v11;
    __int16 v24 = 2050;
    uint64_t v25 = a1;
    __int16 v26 = 2114;
    uint64_t v27 = a4;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLDaemonServiceSession(ctor) #clss\", \"event\":%{public, location:escape_only}s, \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"Config\":%{public, location:escape_only}@}", buf, 0x3Au);
  }
  *(_DWORD *)(a1 + 192) = [[objc_msgSend(a4, "objectForKey:", @"SessionType") integerValue];
  uint64_t v12 = *(void *)(a1 + 24);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  int v14[2] = sub_10119FF3C;
  v14[3] = &unk_1022BF730;
  v14[4] = a1;
  sub_1007B39D0(v12, (uint64_t)v14);
  *(unsigned char *)(a1 + 197) = sub_1011C0EB4(a1);
  sub_1011A0204(a1);
  os_activity_scope_leave(&state);
  return a1;
}

void sub_10119FF10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  sub_1011A1068(v16, 0);
  sub_1011C0F50(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_10119FF3C(uint64_t a1, const void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if ((*(unsigned int (**)(const void *))(*(void *)a2 + 24))(a2) != 6) {
    return 0;
  }
  uint64_t result = (uint64_t)[*(id *)(v3 + 16) isEqual:sub_10014D19C((uint64_t)a2)];
  if (result)
  {
    uint64_t v6 = *(void *)(v3 + 184);
    *(void *)(v3 + 184) = v5[23];
    v5[23] = v6;
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1023163D8);
    }
    long long v7 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = (*(uint64_t (**)(const void *))(*(void *)a2 + 24))(a2);
      uint64_t v9 = *(void *)(v3 + 16);
      int v13 = 68289794;
      int v14 = 0;
      __int16 v15 = 2082;
      uint64_t v16 = "";
      __int16 v17 = 1026;
      int v18 = v8;
      __int16 v19 = 2114;
      uint64_t v20 = v9;
      __int16 v21 = 2050;
      uint64_t v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#clss consumeMatchingButterfly\", \"dicType\":%{public}d, \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v13, 0x2Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1023163D8);
      }
    }
    uint64_t v10 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      int v11 = (*(uint64_t (**)(const void *))(*(void *)a2 + 24))(a2);
      uint64_t v12 = *(void *)(v3 + 16);
      int v13 = 68289794;
      int v14 = 0;
      __int16 v15 = 2082;
      uint64_t v16 = "";
      __int16 v17 = 1026;
      int v18 = v11;
      __int16 v19 = 2114;
      uint64_t v20 = v12;
      __int16 v21 = 2050;
      uint64_t v22 = v3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#clss consumeMatchingButterfly", "{\"msg%{public}.0s\":\"#clss consumeMatchingButterfly\", \"dicType\":%{public}d, \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v13, 0x2Cu);
    }
    return 1;
  }
  return result;
}

void sub_1011A0204(uint64_t a1)
{
  BOOL v2 = (uint64_t *)(a1 + 184);
  uint64_t v3 = *(void *)(a1 + 184);
  if (!v3)
  {
    if (*(_DWORD *)(a1 + 192) != 2
      || *(unsigned char *)(a1 + 197)
      || ([*(id *)(a1 + 40) inUseLevelIsAtLeast:5] & 1) != 0
      || [*(id *)(a1 + 40) isAuthorizedForServiceType:19])
    {
      operator new();
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1023163D8);
    }
    uint64_t v16 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)(a1 + 16);
      int v18 = *(_DWORD *)(a1 + 192);
      unsigned int v19 = [*(id *)(a1 + 40) inUseLevel];
      unsigned int v20 = [*(id *)(a1 + 40) isAuthorizedForServiceType:19];
      *(_DWORD *)uint64_t buf = 68290306;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v28 = 2082;
      uint64_t v29 = "";
      __int16 v30 = 2114;
      uint64_t v31 = v17;
      __int16 v32 = 2050;
      uint64_t v33 = a1;
      __int16 v34 = 1026;
      BOOL v35 = v18;
      __int16 v36 = 1026;
      BOOL v37 = v19;
      __int16 v38 = 1026;
      unsigned int v39 = v20;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#clss can't create ServiceSessionAssertion\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"SessionType\":%{public}d, \"InUseLevel\":%{public}d, \"ServiceSession\":%{public}hhd}", buf, 0x38u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1023163D8);
      }
    }
    __int16 v21 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      uint64_t v22 = *(void *)(a1 + 16);
      int v23 = *(_DWORD *)(a1 + 192);
      unsigned int v24 = [*(id *)(a1 + 40) inUseLevel];
      unsigned int v25 = [*(id *)(a1 + 40) isAuthorizedForServiceType:19];
      *(_DWORD *)uint64_t buf = 68290306;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v28 = 2082;
      uint64_t v29 = "";
      __int16 v30 = 2114;
      uint64_t v31 = v22;
      __int16 v32 = 2050;
      uint64_t v33 = a1;
      __int16 v34 = 1026;
      BOOL v35 = v23;
      __int16 v36 = 1026;
      BOOL v37 = v24;
      __int16 v38 = 1026;
      unsigned int v39 = v25;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#clss can't create ServiceSessionAssertion", "{\"msg%{public}.0s\":\"#clss can't create ServiceSessionAssertion\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"SessionType\":%{public}d, \"InUseLevel\":%{public}d, \"ServiceSession\":%{public}hhd}", buf, 0x38u);
    }
  }
  uint64_t v4 = *v2;
  if ((v3 != 0) != (*v2 != 0))
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023163B8);
    }
    uint64_t v5 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 16);
      *(_DWORD *)uint64_t buf = 68290050;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v28 = 2082;
      uint64_t v29 = "";
      __int16 v30 = 2114;
      uint64_t v31 = v6;
      __int16 v32 = 2050;
      uint64_t v33 = a1;
      __int16 v34 = 1026;
      BOOL v35 = v3 != 0;
      __int16 v36 = 1026;
      BOOL v37 = v4 != 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#clss active state changed. persist for #dic rehydration\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"wasActive\":%{public}hhd, \"isActive\":%{public}hhd}", buf, 0x32u);
    }
    sub_100134750(buf, (char *)[+[NSString stringWithFormat:@"%p", a1] UTF8String]);
    uint64_t v8 = *(void *)(a1 + 16);
    uint64_t v7 = *(void *)(a1 + 24);
    unsigned int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    sub_1007A4ED4(v7, v8, (uint64_t *)buf, v9, v10, 1);
    if (SBYTE3(v31) < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v4 = *v2;
  }
  if (v4 && sub_1011C38AC(a1)) {
    sub_1011C3A24(a1);
  }
  sub_1011C3B0C((id *)a1);
  int v11 = *(_DWORD *)(a1 + 192);
  BOOL v12 = [*(id *)(a1 + 40) registrationResult] != 1
     && [*(id *)(a1 + 40) registrationResult] != 8;
  unsigned int v13 = [*(id *)(a1 + 40) transientAwareRegistrationResult];
  if (v11 == 2)
  {
    unsigned int v14 = v13;
    if (!sub_1011C0EB4(a1)
      && !v12
      && !((*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) & 1 | (v14 == 0)))
    {
      if (sub_100743580())
      {
        *(unsigned char *)(a1 + 196) = 1;
        if (!sub_1011C2EC4(a1, 7))
        {
          id v15 = [*(id *)(a1 + 32) silo];
          v26[0] = _NSConcreteStackBlock;
          v26[1] = 3221225472;
          _OWORD v26[2] = sub_1011A0F60;
          v26[3] = &unk_1022A3020;
          _DWORD v26[4] = a1;
          [v15 async:v26];
        }
      }
    }
    if (*(unsigned char *)(a1 + 196) && (!v14 || (*(unsigned int (**)(uint64_t))(*(void *)a1 + 96))(a1))) {
      *(unsigned char *)(a1 + 196) = 0;
    }
  }
  sub_1011C3CD8(a1);
}

void sub_1011A0870(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

uint64_t sub_1011A08B8(void *a1)
{
  *a1 = off_102316330;
  sub_1011C2B50();
  sub_1011A1068(a1 + 23, 0);

  return sub_1011C0F50((uint64_t)a1);
}

void sub_1011A0924(void *a1)
{
  sub_1011A08B8(a1);

  operator delete();
}

void sub_1011A095C(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = (void *)CLConnectionMessage::name(*a2);
  int v5 = *((char *)v4 + 23);
  if (v5 < 0)
  {
    if (v4[1] != 44) {
      goto LABEL_7;
    }
    uint64_t v4 = (void *)*v4;
  }
  else if (v5 != 44)
  {
    goto LABEL_7;
  }
  if (!memcmp(v4, "kCLConnectionMessageDestroyUponDisconnection", 0x2CuLL))
  {
    *(unsigned char *)(a1 + 48) = 1;
    return;
  }
LABEL_7:
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1023163B8);
  }
  uint64_t v6 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v8 = CLConnectionMessage::name(*a2);
    uint64_t v9 = *(char *)(v8 + 23) >= 0 ? v8 : *(void *)v8;
    int v14 = 68289794;
    int v15 = 0;
    __int16 v16 = 2082;
    uint64_t v17 = "";
    __int16 v18 = 2114;
    uint64_t v19 = v7;
    __int16 v20 = 2050;
    uint64_t v21 = a1;
    __int16 v22 = 2082;
    uint64_t v23 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning #clss received unhandled message\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"message\":%{public, location:escape_only}s}", (uint8_t *)&v14, 0x30u);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023163B8);
    }
  }
  uint64_t v10 = qword_102419528;
  if (os_signpost_enabled((os_log_t)qword_102419528))
  {
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v12 = CLConnectionMessage::name(*a2);
    if (*(char *)(v12 + 23) >= 0) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = *(void *)v12;
    }
    int v14 = 68289794;
    int v15 = 0;
    __int16 v16 = 2082;
    uint64_t v17 = "";
    __int16 v18 = 2114;
    uint64_t v19 = v11;
    __int16 v20 = 2050;
    uint64_t v21 = a1;
    __int16 v22 = 2082;
    uint64_t v23 = v13;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Warning #clss received unhandled message", "{\"msg%{public}.0s\":\"#Warning #clss received unhandled message\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"message\":%{public, location:escape_only}s}", (uint8_t *)&v14, 0x30u);
  }
}

uint64_t sub_1011A0BA4()
{
  return 6;
}

uint64_t sub_1011A0BAC(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 192);
  uint64_t v2 = 3;
  if (!v1) {
    uint64_t v2 = 4099;
  }
  if ((v1 - 1) < 2) {
    v2 |= 0x2014uLL;
  }
  if (v1 == 2) {
    return v2 | 0x400;
  }
  else {
    return v2;
  }
}

void sub_1011A0BE4(uint64_t a1)
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1023163B8);
  }
  uint64_t v2 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 16);
    int v6 = 68289538;
    int v7 = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    __int16 v10 = 2114;
    uint64_t v11 = v3;
    __int16 v12 = 2050;
    uint64_t v13 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#clss authContext has changed\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v6, 0x26u);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023163B8);
    }
  }
  uint64_t v4 = qword_102419528;
  if (os_signpost_enabled((os_log_t)qword_102419528))
  {
    uint64_t v5 = *(void *)(a1 + 16);
    int v6 = 68289538;
    int v7 = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    __int16 v10 = 2114;
    uint64_t v11 = v5;
    __int16 v12 = 2050;
    uint64_t v13 = a1;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#clss authContext has changed", "{\"msg%{public}.0s\":\"#clss authContext has changed\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v6, 0x26u);
  }
  sub_1011A0204(a1);
}

uint64_t sub_1011A0D94(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

NSDictionary *sub_1011A0D9C(uint64_t a1)
{
  v3[0] = @"SessionType";
  v4[0] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 192)];
  v3[1] = @"SDKAtLeast2024";
  v4[1] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 80)];
  _DWORD v3[2] = @"SessionActive";
  void v4[2] = +[NSNumber numberWithBool:*(void *)(a1 + 184) != 0];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:3];
}

BOOL sub_1011A0E68(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 192) - 1) < 2;
}

uint64_t sub_1011A0E7C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 192) || [*(id *)(a1 + 40) transientAwareRegistrationResult] != 4) {
    return 16 * (*(void *)(a1 + 184) == 0);
  }
  else {
    return 4096;
  }
}

uint64_t sub_1011A0ECC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 196);
}

BOOL sub_1011A0ED4(uint64_t a1)
{
  return ([*(id *)(a1 + 40) diagnosticMask] & 0x400) != 0
      || *(_DWORD *)(a1 + 192) == 2
      && ([*(id *)(a1 + 40) transientAwareRegistrationResult] == 1
       && [*(id *)(a1 + 40) registrationResult] == 4
       || [*(id *)(a1 + 40) registrationResult] == 2
       || [*(id *)(a1 + 40) registrationResult] == 1 && !sub_100743580());
}

void sub_1011A0F60(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 16);
  sub_100134750(__p, "");
  sub_1007E1DB0((uint64_t)v5, 7, v2, 0, (long long *)__p);
  sub_1011C326C(v1, v5, 0);
  sub_1007E1E64((uint64_t)v5);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1011A0FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1011A1008(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_1011A1038(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

uint64_t sub_1011A1068(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1011A10B8(result);
    operator delete();
  }
  return result;
}

uint64_t sub_1011A10B8(uint64_t a1)
{
  sub_1007C000C(*(void *)(a1 + 16), *(void **)a1, *(_DWORD *)(a1 + 8) == 0, *(_DWORD *)(a1 + 8) == 1, *(_DWORD *)(a1 + 8) == 2, *(unsigned __int8 *)(a1 + 24), 0);

  return a1;
}

uint64_t sub_1011A1118(uint64_t a1, void *a2, int a3, int a4, uint64_t a5)
{
  *(unsigned char *)(a1 + 24) = 0;
  id v9 = a2;
  *(void *)a1 = v9;
  *(void *)(a1 + 16) = a5;
  *(_DWORD *)(a1 + 8) = a3;
  *(unsigned char *)(a1 + 24) = a4;
  sub_1007C000C(a5, v9, a3 == 0, a3 == 1, a3 == 2, a4, 1);
  return a1;
}

void sub_1011A1194(uint64_t a1)
{
  *(void *)(a1 + 29) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v2 = (void *)(a1 + 72);
  sub_1011A2BCC(a1 + 64, *(void **)(a1 + 72));
  *(void *)(a1 + 64) = v2;
  *(void *)(a1 + 80) = 0;
  void *v2 = 0;
}

double sub_1011A11DC(uint64_t a1)
{
  *(void *)(a1 + 29) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 64) = a1 + 72;
  *(void *)(a1 + 80) = 0;
  return result;
}

uint64_t sub_1011A11FC(uint64_t a1)
{
  *(void *)(a1 + 29) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v2 = (void *)(a1 + 72);
  sub_1011A2BCC(a1 + 64, *(void **)(a1 + 72));
  *(void *)(a1 + 64) = v2;
  *(void *)(a1 + 80) = 0;
  void *v2 = 0;
  return a1;
}

void sub_1011A1248(uint64_t a1, float32x2_t *a2, double a3, int32x4_t a4)
{
  float v20 = *(float *)&a3;
  *(float *)a4.i32 = *(float *)(a1 + 4) + (float)(*(float *)&a3 * *(float *)&a3);
  *(float *)a1 = *(float *)a1 + *(float *)&a3;
  *(_DWORD *)(a1 + 4) = a4.i32[0];
  float32x2_t v6 = *a2;
  *(float32x2_t *)a4.i8 = vadd_f32(*a2, *(float32x2_t *)(a1 + 8));
  *(void *)(a1 + 8) = a4.i64[0];
  a4.i32[0] = a2[1].i32[0];
  *(float *)(a1 + 16) = *(float *)a4.i32 + *(float *)(a1 + 16);
  double v7 = COERCE_DOUBLE(vmla_n_f32(*(float32x2_t *)(a1 + 20), v6, *(float *)&a3));
  *(double *)(a1 + 20) = v7;
  LODWORD(v7) = *(_DWORD *)(a1 + 28);
  *(float *)a4.i32 = *(float *)&v7 + (float)(*(float *)&a3 * *(float *)a4.i32);
  *(_DWORD *)(a1 + 28) = a4.i32[0];
  ++*(_DWORD *)(a1 + 32);
  sub_1011A1400(a1, a3, a4, v7, *(double *)&v6);
  signed int v8 = llroundf(v20);
  int v22 = v8;
  uint64_t v11 = *(void *)(a1 + 72);
  uint64_t v10 = a1 + 72;
  uint64_t v9 = v11;
  if (!v11) {
    goto LABEL_11;
  }
  uint64_t v12 = v10;
  do
  {
    signed int v13 = *(_DWORD *)(v9 + 32);
    BOOL v14 = v13 < v8;
    if (v13 >= v8) {
      int v15 = (uint64_t *)v9;
    }
    else {
      int v15 = (uint64_t *)(v9 + 8);
    }
    if (!v14) {
      uint64_t v12 = v9;
    }
    uint64_t v9 = *v15;
  }
  while (*v15);
  if (v12 != v10 && *(_DWORD *)(v12 + 32) <= v8)
  {
    uint64_t v19 = (void *)(v12 + 40);
    if (*(void *)(v12 + 80) == 10)
    {
      ++*(void *)(v12 + 72);
      *(void *)(v12 + 80) = 9;
      sub_1011A2F44(v12 + 40, 1);
    }
    sub_1011A14A0(v19, (uint64_t *)a2);
  }
  else
  {
LABEL_11:
    __int16 v16 = (uint64_t **)(v10 - 8);
    memset(v21, 0, sizeof(v21));
    uint64_t v23 = &v22;
    uint64_t v17 = sub_1011A2C28(v16, &v22, (uint64_t)&unk_101D0B290, &v23);
    sub_1011A2E1C((uint64_t)(v17 + 5), (uint64_t)v21);
    sub_1011A2D74(v21);
    *(void *)&v21[0] = &v22;
    __int16 v18 = sub_1011A2C28(v16, &v22, (uint64_t)&unk_101D0B290, (_DWORD **)v21);
    sub_1011A14A0(v18 + 5, (uint64_t *)a2);
  }
}

void sub_1011A13EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1011A2D74((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1011A1400(uint64_t result, double a2, int32x4_t a3, double a4, double a5)
{
  *(float *)a3.i32 = (float)*(int *)(result + 32);
  LODWORD(a5) = *(_DWORD *)result;
  float v5 = *(float *)(result + 4);
  *(float *)&a4 = (float)(*(float *)a3.i32 * v5) - (float)(*(float *)&a5 * *(float *)&a5);
  if (fabsf(*(float *)&a4) <= 0.000001)
  {
    char v12 = 0;
  }
  else
  {
    *(float *)&a5 = -*(float *)&a5;
    *(float *)&a4 = 1.0 / *(float *)&a4;
    float32x4_t v6 = *(float32x4_t *)(result + 8);
    int32x4_t v7 = a3;
    v7.i32[1] = *(_DWORD *)(result + 4);
    float32x4_t v8 = (float32x4_t)vzip1q_s32(v7, v7);
    v8.f32[2] = (float)*(int *)(result + 32);
    int8x16_t v9 = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL);
    float32x4_t v10 = (float32x4_t)vextq_s8((int8x16_t)v6, v9, 0xCuLL);
    float32x2_t v11 = *(float32x2_t *)(result + 24);
    *(float32x2_t *)&v10.i32[1] = v11;
    *(float32x4_t *)(result + 40) = vmulq_n_f32(vmlaq_f32(vmulq_n_f32(v6, *(float *)&a5), v10, v8), *(float *)&a4);
    *(float32x2_t *)(result + 56) = vmul_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&a4, 0), vmla_n_f32(vmul_f32(v11, (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&a5, 0)), (float32x2_t)vext_s8(*(int8x8_t *)v6.f32, *(int8x8_t *)v9.i8, 4uLL), v5));
    char v12 = 1;
  }
  *(unsigned char *)(result + 36) = v12;
  return result;
}

void sub_1011A14A0(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 341 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1011A3160(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x155)) + 12 * (v7 % 0x155);
  uint64_t v9 = *a2;
  *(_DWORD *)(v8 + 8) = *((_DWORD *)a2 + 2);
  *(void *)unint64_t v8 = v9;
  ++a1[5];
}

BOOL sub_1011A1560(uint64_t a1, _DWORD *a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 36);
  if (*(unsigned char *)(a1 + 36))
  {
    *a2 = 1;
    a2[8] = *(_DWORD *)(a1 + 40);
    a2[9] = *(_DWORD *)(a1 + 44);
    a2[10] = *(_DWORD *)(a1 + 48);
    a2[11] = *(_DWORD *)(a1 + 52);
    a2[12] = *(_DWORD *)(a1 + 56);
    a2[13] = *(_DWORD *)(a1 + 60);
  }
  return v2 != 0;
}

void sub_1011A15AC(uint64_t a1)
{
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_102316418);
  }
  int v2 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Begin.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_102316418);
    }
    LOWORD(v55) = 0;
    __int16 v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGyroCalibrationCache::removeOutliers()", "%s\n", v16);
    if (v16 != buf) {
      free(v16);
    }
  }
  if (*(int *)(a1 + 32) < 2 || !*(unsigned char *)(a1 + 36))
  {
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_102316418);
    }
    signed int v13 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Too few points.  End.", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_102316418);
    }
    LOWORD(v55) = 0;
    BOOL v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGyroCalibrationCache::removeOutliers()", "%s\n", v14);
LABEL_68:
    if (v14 != buf) {
      free(v14);
    }
    return;
  }
  uint64_t v54 = 0;
  float v53 = 0.0;
  *(float *)&double v3 = sub_1011A2030(a1, (float *)&v54 + 1, (float *)&v54, &v53);
  if (*(void *)(a1 + 80))
  {
    unint64_t v7 = *(void **)(a1 + 64);
    uint64_t v8 = a1 + 72;
    unint64_t v9 = v7[9];
    uint64_t v10 = v7[6];
    float32x2_t v11 = (void *)(v10 + 8 * (v9 / 0x155));
    if (v7[7] == v10) {
      unint64_t v12 = 0;
    }
    else {
      unint64_t v12 = *v11 + 12 * (v9 % 0x155);
    }
    *(void *)&long long v50 = *(void *)(a1 + 64);
    *((void *)&v50 + 1) = a1 + 72;
    *(void *)&long long v51 = v11;
    *((void *)&v51 + 1) = v12;
  }
  else
  {
    uint64_t v8 = a1 + 72;
    long long v51 = 0uLL;
    *(void *)&long long v50 = a1 + 72;
    *((void *)&v50 + 1) = a1 + 72;
    unint64_t v7 = (void *)(a1 + 72);
  }
  uint64_t v52 = 0;
  uint64_t v15 = a1 + 72;
  if (v7 == (void *)(a1 + 72)) {
    goto LABEL_28;
  }
  do
  {
    do
    {
      float v34 = *(float *)sub_101A12AE0((uint64_t)&v50);
      float v35 = *(float *)(a1 + 40);
      float v36 = *(float *)(a1 + 52);
      float v37 = *(float *)(sub_101A12AE0((uint64_t)&v50) + 4);
      float v38 = *(float *)(a1 + 44);
      float v39 = *(float *)(a1 + 56);
      float v40 = *(float *)(sub_101A12AE0((uint64_t)&v50) + 8);
      float v49 = *(float *)(a1 + 48);
      float v41 = *(float *)(a1 + 60);
      uint64_t v42 = sub_101A12AE0((uint64_t)&v50);
      if (fabsf((float)(v36 + (float)(v34 * v35)) - v37) <= (float)(*((float *)&v54 + 1) * 3.5)
        && fabsf((float)(v39 + (float)(v34 * v38)) - v40) <= (float)(*(float *)&v54 * 3.5)
        && fabsf((float)(v41 + (float)(v34 * v49)) - *(float *)(v42 + 12)) <= (float)(v53 * 3.5))
      {
        if (qword_1024190B0 != -1) {
          dispatch_once(&qword_1024190B0, &stru_102316418);
        }
        uint64_t v19 = off_1024190B8;
        if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
        {
          float v20 = *(float *)sub_101A12AE0((uint64_t)&v50);
          float v21 = *(float *)(sub_101A12AE0((uint64_t)&v50) + 4);
          float v22 = *(float *)(sub_101A12AE0((uint64_t)&v50) + 8);
          double v23 = *(float *)(sub_101A12AE0((uint64_t)&v50) + 12);
          *(_DWORD *)uint64_t buf = 134218752;
          *(double *)&uint8_t buf[4] = v20;
          *(_WORD *)&uint8_t buf[12] = 2048;
          *(double *)&unsigned char buf[14] = v21;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(double *)&uint8_t buf[24] = v22;
          LOWORD(v64[0]) = 2048;
          *(double *)((char *)v64 + 2) = v23;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "temperature,%f,bias.x,%f,bias.y,%f,bias.z,%f,deleted,0", buf, 0x2Au);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190B0 != -1) {
            dispatch_once(&qword_1024190B0, &stru_102316418);
          }
          float v29 = *(float *)sub_101A12AE0((uint64_t)&v50);
          float v30 = *(float *)(sub_101A12AE0((uint64_t)&v50) + 4);
          float v31 = *(float *)(sub_101A12AE0((uint64_t)&v50) + 8);
          double v32 = *(float *)(sub_101A12AE0((uint64_t)&v50) + 12);
          int v55 = 134218752;
          double v56 = v29;
          __int16 v57 = 2048;
          double v58 = v30;
          __int16 v59 = 2048;
          double v60 = v31;
          __int16 v61 = 2048;
          double v62 = v32;
          uint64_t v33 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGyroCalibrationCache::removeOutliers()", "%s\n", v33);
          if (v33 != buf) {
            free(v33);
          }
        }
        sub_101A12B68(&v50);
      }
      else
      {
        if (qword_1024190B0 != -1) {
          dispatch_once(&qword_1024190B0, &stru_102316418);
        }
        uint64_t v43 = off_1024190B8;
        if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
        {
          float v44 = *(float *)sub_101A12AE0((uint64_t)&v50);
          float v45 = *(float *)(sub_101A12AE0((uint64_t)&v50) + 4);
          float v46 = *(float *)(sub_101A12AE0((uint64_t)&v50) + 8);
          double v47 = *(float *)(sub_101A12AE0((uint64_t)&v50) + 12);
          *(_DWORD *)uint64_t buf = 134218752;
          *(double *)&uint8_t buf[4] = v44;
          *(_WORD *)&uint8_t buf[12] = 2048;
          *(double *)&unsigned char buf[14] = v45;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(double *)&uint8_t buf[24] = v46;
          LOWORD(v64[0]) = 2048;
          *(double *)((char *)v64 + 2) = v47;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "temperature,%f,bias.x,%f,bias.y,%f,bias.z,%f,deleted,1", buf, 0x2Au);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190B0 != -1) {
            dispatch_once(&qword_1024190B0, &stru_102316418);
          }
          float v24 = *(float *)sub_101A12AE0((uint64_t)&v50);
          float v25 = *(float *)(sub_101A12AE0((uint64_t)&v50) + 4);
          float v26 = *(float *)(sub_101A12AE0((uint64_t)&v50) + 8);
          double v27 = *(float *)(sub_101A12AE0((uint64_t)&v50) + 12);
          int v55 = 134218752;
          double v56 = v24;
          __int16 v57 = 2048;
          double v58 = v25;
          __int16 v59 = 2048;
          double v60 = v26;
          __int16 v61 = 2048;
          double v62 = v27;
          __int16 v28 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGyroCalibrationCache::removeOutliers()", "%s\n", v28);
          if (v28 != buf) {
            free(v28);
          }
        }
        sub_1011A2318(a1, (uint64_t)&v50, buf);
        long long v50 = *(_OWORD *)buf;
        double v3 = *(double *)&buf[16];
        long long v51 = *(_OWORD *)&buf[16];
        uint64_t v48 = v52;
        uint64_t v52 = 0;
        if (v48) {
          operator delete();
        }
        if (v64[0]) {
          operator delete();
        }
      }
    }
    while ((void)v50 != v15);
    uint64_t v8 = *((void *)&v50 + 1);
LABEL_28:
    ;
  }
  while (v8 != v15);
  uint64_t v17 = v52;
  uint64_t v52 = 0;
  if (v17) {
    operator delete();
  }
  sub_1011A2498(a1, v3, v4, v5, v6);
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_102316418);
  }
  __int16 v18 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "End.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_102316418);
    }
    LOWORD(v55) = 0;
    BOOL v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGyroCalibrationCache::removeOutliers()", "%s\n", v14);
    goto LABEL_68;
  }
}

void sub_1011A1FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

float sub_1011A2030(uint64_t a1, float *a2, float *a3, float *a4)
{
  if (*(void *)(a1 + 80))
  {
    uint64_t v8 = *(void **)(a1 + 64);
    unint64_t v9 = v8[9];
    uint64_t v10 = v8[6];
    float32x2_t v11 = (void *)(v10 + 8 * (v9 / 0x155));
    if (v8[7] == v10) {
      unint64_t v12 = 0;
    }
    else {
      unint64_t v12 = *v11 + 12 * (v9 % 0x155);
    }
    uint64_t v43 = *(void *)(a1 + 64);
    uint64_t v44 = a1 + 72;
    float v45 = v11;
    unint64_t v46 = v12;
  }
  else
  {
    float v45 = 0;
    unint64_t v46 = 0;
    uint64_t v43 = a1 + 72;
    uint64_t v44 = a1 + 72;
  }
  uint64_t v47 = 0;
  uint64_t v13 = a1 + 72;
  float v14 = 0.0;
  float v15 = 0.0;
  float v16 = 0.0;
  float v17 = 0.0;
  float v18 = 0.0;
  float v19 = 0.0;
  while (v43 != v13 || v44 != v13)
  {
    float v21 = *(float *)sub_101A12AE0((uint64_t)&v43);
    float v42 = *(float *)(a1 + 52);
    float v36 = *(float *)(a1 + 40);
    float v37 = v19;
    float v38 = v18;
    float v39 = v17;
    float v40 = v15;
    float v41 = v16;
    float v22 = v14;
    float v23 = *(float *)(sub_101A12AE0((uint64_t)&v43) + 4);
    float v24 = *(float *)(a1 + 44);
    float v25 = *(float *)(a1 + 56);
    float v26 = *(float *)(sub_101A12AE0((uint64_t)&v43) + 8);
    float v27 = *(float *)(a1 + 48);
    float v28 = *(float *)(a1 + 60);
    uint64_t v29 = sub_101A12AE0((uint64_t)&v43);
    float v30 = (float)(v42 + (float)(v21 * v36)) - v23;
    float v31 = (float)(v25 + (float)(v21 * v24)) - v26;
    float v32 = (float)(v28 + (float)(v21 * v27)) - *(float *)(v29 + 12);
    float v19 = v37 + v30;
    float v14 = v22 + (float)(v30 * v30);
    float v18 = v38 + v31;
    float v15 = v40 + (float)(v31 * v31);
    float v17 = v39 + v32;
    float v16 = v41 + (float)(v32 * v32);
    sub_101A12B68(&v43);
  }
  uint64_t v33 = v47;
  uint64_t v47 = 0;
  if (v33) {
    operator delete();
  }
  int v34 = *(_DWORD *)(a1 + 32) - 1;
  *a2 = sqrtf((float)(v14 - (float)(v19 * v19)) / (float)v34);
  *a3 = sqrtf((float)(v15 - (float)(v18 * v18)) / (float)v34);
  float result = sqrtf((float)(v16 - (float)(v17 * v17)) / (float)v34);
  *a4 = result;
  return result;
}

void sub_1011A2248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a18) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1011A2284@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (*(void *)(result + 80))
  {
    int v2 = *(void **)(result + 64);
    unint64_t v3 = v2[9];
    uint64_t v4 = v2[6];
    double v5 = (void *)(v4 + 8 * (v3 / 0x155));
    if (v2[7] == v4) {
      unint64_t v6 = 0;
    }
    else {
      unint64_t v6 = *v5 + 12 * (v3 % 0x155);
    }
    *a2 = v2;
    a2[1] = result + 72;
    a2[2] = v5;
    a2[3] = v6;
  }
  else
  {
    a2[2] = 0;
    a2[3] = 0;
    *a2 = result + 72;
    a2[1] = result + 72;
  }
  a2[4] = 0;
  return result;
}

uint64_t sub_1011A2304@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  a2[2] = 0;
  a2[3] = 0;
  *a2 = result + 72;
  a2[1] = result + 72;
  a2[4] = 0;
  return result;
}

void sub_1011A2318(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v7 = (void *)sub_1011A2634((int64x2_t *)(*(void *)a2 + 40), *(void **)(a2 + 16), *(char **)(a2 + 24));
  unint64_t v8 = v6;
  unint64_t v9 = *(void **)a2;
  uint64_t v10 = *(void *)(*(void *)a2 + 48);
  if (*(void *)(*(void *)a2 + 56) == v10)
  {
    unint64_t v12 = 0;
  }
  else
  {
    unint64_t v11 = v9[10] + v9[9];
    unint64_t v12 = *(void *)(v10 + 8 * (v11 / 0x155)) + 12 * (v11 % 0x155);
  }
  if (v12 == v6)
  {
    float v14 = (void *)v9[1];
    if (v14)
    {
      do
      {
        float v15 = v14;
        float v14 = (void *)*v14;
      }
      while (v14);
    }
    else
    {
      float v16 = *(void **)a2;
      do
      {
        float v15 = (void *)v16[2];
        BOOL v17 = *v15 == (void)v16;
        float v16 = v15;
      }
      while (!v17);
    }
    if (!v9[10])
    {
      sub_1000F0A30((uint64_t **)(a1 + 64), *(uint64_t **)a2);
      sub_1011A2D74(v9 + 5);
      operator delete(v9);
    }
    uint64_t v13 = *(void **)(a2 + 8);
    if (v15 != v13)
    {
      unint64_t v18 = v15[9];
      uint64_t v19 = v15[6];
      unint64_t v7 = (void *)(v19 + 8 * (v18 / 0x155));
      if (v15[7] == v19) {
        unint64_t v8 = 0;
      }
      else {
        unint64_t v8 = *v7 + 12 * (v18 % 0x155);
      }
    }
    *a3 = v15;
  }
  else
  {
    uint64_t v13 = *(void **)(a2 + 8);
    *a3 = v9;
  }
  a3[1] = v13;
  a3[2] = v7;
  a3[3] = v8;
  a3[4] = 0;
}

uint64_t sub_1011A2498(uint64_t a1, double a2, int32x4_t a3, double a4, double a5)
{
  *(_DWORD *)(a1 + 32) = 0;
  double v6 = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (*(void *)(a1 + 80))
  {
    unint64_t v7 = *(void **)(a1 + 64);
    unint64_t v8 = v7[9];
    uint64_t v9 = v7[6];
    uint64_t v10 = (void *)(v9 + 8 * (v8 / 0x155));
    if (v7[7] == v9) {
      unint64_t v11 = 0;
    }
    else {
      unint64_t v11 = *v10 + 12 * (v8 % 0x155);
    }
    uint64_t v21 = *(void *)(a1 + 64);
    uint64_t v22 = a1 + 72;
    float v23 = v10;
    unint64_t v24 = v11;
  }
  else
  {
    float v23 = 0;
    unint64_t v24 = 0;
    uint64_t v21 = a1 + 72;
    uint64_t v22 = a1 + 72;
  }
  uint64_t v25 = 0;
  uint64_t v12 = a1 + 72;
  while (v21 != v12 || v22 != v12)
  {
    float v20 = *(float *)sub_101A12AE0((uint64_t)&v21);
    uint64_t v14 = sub_101A12AE0((uint64_t)&v21);
    float v15 = *(float *)(v14 + 12);
    float v16 = *(float *)(a1 + 4) + (float)(v20 * v20);
    float32x2_t v17 = *(float32x2_t *)(v14 + 4);
    *(float *)a1 = v20 + *(float *)a1;
    *(float *)(a1 + 4) = v16;
    *(float32x2_t *)(a1 + 8) = vadd_f32(v17, *(float32x2_t *)(a1 + 8));
    *(float *)(a1 + 16) = v15 + *(float *)(a1 + 16);
    *(float32x2_t *)(a1 + 20) = vmla_n_f32(*(float32x2_t *)(a1 + 20), v17, v20);
    *(float *)(a1 + 28) = *(float *)(a1 + 28) + (float)(v20 * v15);
    ++*(_DWORD *)(a1 + 32);
    sub_101A12B68(&v21);
  }
  uint64_t v18 = v25;
  uint64_t v25 = 0;
  if (v18) {
    operator delete();
  }
  return sub_1011A1400(a1, v6, a3, a4, a5);
}

void sub_1011A2600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1011A2634(int64x2_t *a1, void *a2, char *a3)
{
  unint64_t v4 = a1[2].u64[0];
  uint64_t v5 = a1->i64[1];
  double v6 = (char **)(v5 + 8 * (v4 / 0x155));
  if (a1[1].i64[0] == v5) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = &(*v6)[12 * (v4 % 0x155)];
  }
  if (a3 == v7) {
    unint64_t v8 = 0;
  }
  else {
    unint64_t v8 = 341 * ((char **)a2 - v6)
  }
       - 0x5555555555555555 * ((uint64_t)&a3[-*a2] >> 2)
       + 0x5555555555555555 * ((v7 - *v6) >> 2);
  v33[0].n128_u64[0] = v5 + 8 * (v4 / 0x155);
  v33[0].n128_u64[1] = (unint64_t)v7;
  sub_1011A3478(v33, v8);
  uint64_t v9 = a1[2].i64[1];
  int64_t v10 = v33[0].n128_u64[1] - *(void *)v33[0].n128_u64[0];
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 2);
  if (v8 <= (unint64_t)(v9 - 1) >> 1)
  {
    if (v10 < -11)
    {
      unint64_t v25 = 339 - v11;
      uint64_t v26 = ((339 - v11) * (unsigned __int128)0x8060180601806019) >> 64;
      unint64_t v27 = (v26 + ((v25 - v26) >> 1)) >> 8;
      uint64_t v18 = (void *)(v33[0].n128_u64[0] - 8 * v27);
      uint64_t v19 = (char *)(*v18 + 12 * (341 * v27 - v25) + 4080);
    }
    else
    {
      unint64_t v15 = v11 + 1;
      uint64_t v16 = ((v11 + 1) * (unsigned __int128)0x8060180601806019) >> 64;
      unint64_t v17 = (v16 + ((v15 - v16) >> 1)) >> 8;
      uint64_t v18 = (void *)(v33[0].n128_u64[0] + 8 * v17);
      uint64_t v19 = (char *)(*v18 + 12 * (v15 - 341 * v17));
    }
    sub_1011A3534(v6, v7, (char **)v33[0].n128_u64[0], (char *)v33[0].n128_u64[1], v18, v19, v33);
    a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_101D0A740);
    sub_1011A2F44((uint64_t)a1, 1);
  }
  else
  {
    if (v10 < -11)
    {
      unint64_t v20 = 339 - v11;
      uint64_t v13 = (void *)(v33[0].n128_u64[0] - 8 * (v20 / 0x155));
      uint64_t v14 = (unsigned char *)(*v13 + 12 * (341 * (v20 / 0x155) - v20) + 4080);
    }
    else
    {
      unint64_t v12 = v11 + 1;
      uint64_t v13 = (void *)(v33[0].n128_u64[0] + 8 * (v12 / 0x155));
      uint64_t v14 = (unsigned char *)(*v13 + 12 * (v12 % 0x155));
    }
    unint64_t v21 = a1[2].i64[0] + v9;
    uint64_t v22 = a1->i64[1];
    float v23 = (unsigned char **)(v22 + 8 * (v21 / 0x155));
    if (a1[1].i64[0] == v22) {
      unint64_t v24 = 0;
    }
    else {
      unint64_t v24 = &(*v23)[12 * (v21 % 0x155)];
    }
    sub_1011A36E8(v13, v14, v23, v24, (uint64_t)v33);
    --a1[2].i64[1];
    sub_1011A2FA4(a1, 1);
  }
  unint64_t v28 = a1[2].u64[0];
  uint64_t v29 = a1->i64[1];
  float v30 = (void *)(v29 + 8 * (v28 / 0x155));
  if (a1[1].i64[0] == v29) {
    unint64_t v31 = 0;
  }
  else {
    unint64_t v31 = *v30 + 12 * (v28 % 0x155);
  }
  v33[0].n128_u64[0] = (unint64_t)v30;
  v33[0].n128_u64[1] = v31;
  sub_1011A3478(v33, v8);
  return v33[0].n128_u64[0];
}

uint64_t sub_1011A2974(uint64_t a1, float32x2_t *a2, double a3)
{
  if (!*(unsigned char *)(a1 + 36) || *(int *)(a1 + 32) < 1) {
    return 0;
  }
  a2[1].i32[0] = 0;
  *a2 = 0;
  if (*(void *)(a1 + 80))
  {
    uint64_t v5 = *(void **)(a1 + 64);
    unint64_t v6 = v5[9];
    uint64_t v7 = v5[6];
    unint64_t v8 = (void *)(v7 + 8 * (v6 / 0x155));
    unint64_t v9 = v5[7] == v7 ? 0 : *v8 + 12 * (v6 % 0x155);
    uint64_t v26 = *(void *)(a1 + 64);
    uint64_t v27 = a1 + 72;
    unint64_t v28 = v8;
    unint64_t v29 = v9;
  }
  else
  {
    unint64_t v28 = 0;
    unint64_t v29 = 0;
    uint64_t v26 = a1 + 72;
    uint64_t v27 = a1 + 72;
  }
  int v10 = 0;
  uint64_t v30 = 0;
  uint64_t v11 = a1 + 72;
  while (v26 != v11 || v27 != v11)
  {
    float v13 = *(float *)sub_101A12AE0((uint64_t)&v26);
    float v14 = *(float *)(a1 + 40);
    float v15 = *(float *)(a1 + 52);
    float v16 = *(float *)(sub_101A12AE0((uint64_t)&v26) + 4);
    float v25 = *(float *)(a1 + 44);
    float v17 = *(float *)(a1 + 56);
    float v18 = *(float *)(sub_101A12AE0((uint64_t)&v26) + 8);
    float v19 = *(float *)(a1 + 48);
    float v20 = *(float *)(a1 + 60);
    float v21 = (float)(v20 + (float)(v13 * v19)) - *(float *)(sub_101A12AE0((uint64_t)&v26) + 12);
    float32_t v22 = a2->f32[1]
        + (float)((float)((float)(v17 + (float)(v13 * v25)) - v18) * (float)((float)(v17 + (float)(v13 * v25)) - v18));
    a2->f32[0] = a2->f32[0]
               + (float)((float)((float)(v15 + (float)(v13 * v14)) - v16)
                       * (float)((float)(v15 + (float)(v13 * v14)) - v16));
    a2->f32[1] = v22;
    a2[1].f32[0] = a2[1].f32[0] + (float)(v21 * v21);
    --v10;
    sub_101A12B68(&v26);
  }
  uint64_t v23 = v30;
  uint64_t v30 = 0;
  if (v23) {
    operator delete();
  }
  if (!v10) {
    return 0;
  }
  *(float *)&a3 = (float)-v10;
  *a2 = vdiv_f32(*a2, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0));
  a2[1].f32[0] = a2[1].f32[0] / *(float *)&a3;
  return 1;
}

void sub_1011A2B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

void sub_1011A2B9C(id a1)
{
  off_1024190B8 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

void sub_1011A2BCC(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1011A2BCC(a1, *a2);
    sub_1011A2BCC(a1, a2[1]);
    sub_1011A2D74(a2 + 5);
    operator delete(a2);
  }
}

uint64_t **sub_1011A2C28(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  unint64_t v6 = a1[1];
  unint64_t v8 = a1 + 1;
  unint64_t v9 = a1 + 1;
  if (v6)
  {
    int v10 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        int v11 = *((_DWORD *)v6 + 8);
        if (v10 >= v11) {
          break;
        }
        unint64_t v6 = *v9;
        unint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v11 >= v10) {
        break;
      }
      unint64_t v6 = v9[1];
      if (!v6)
      {
        unint64_t v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    unint64_t v12 = (char *)operator new(0x58uLL);
    v14[1] = v7;
    *((_DWORD *)v12 + 8) = **a4;
    *(_OWORD *)(v12 + 72) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    *(_OWORD *)(v12 + 40) = 0u;
    char v15 = 1;
    sub_1000EDF90(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0;
    sub_1011A2D1C((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void sub_1011A2D1C(uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1011A2D74(v2 + 5);
    }
    operator delete(v2);
  }
}

uint64_t sub_1011A2D74(void *a1)
{
  int v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = (void **)a1[2];
      int v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 170;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 341;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000D7EB4((uint64_t)a1);
}

uint64_t sub_1011A2E1C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void ***)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v6 = v5 - (void)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      uint64_t v7 = *(void *)(a1 + 16);
      unint64_t v4 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v4;
      unint64_t v6 = v7 - (void)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    uint64_t v8 = 170;
    goto LABEL_7;
  }
  if (v6 >> 3 == 2)
  {
    uint64_t v8 = 341;
LABEL_7:
    *(void *)(a1 + 32) = v8;
  }
  sub_1011A2EC0((void **)a1);
  uint64_t result = sub_1011A30F0(a1, a2);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1011A2EC0(void **a1)
{
  if (a1[5])
  {
    sub_1011A2F44((uint64_t)a1, 0);
    sub_1011A2FA4(a1, 0);
  }
  else
  {
    unint64_t v3 = a1[1];
    for (uint64_t i = (uint64_t)a1[2]; (void *)i != v3; a1[2] = (void *)i)
    {
      operator delete(*(void **)(i - 8));
      unint64_t v3 = a1[1];
      uint64_t i = (uint64_t)a1[2] - 8;
    }
    a1[4] = 0;
  }

  sub_1011A301C(a1);
}

uint64_t sub_1011A2F44(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x155) {
    a2 = 1;
  }
  if (v2 < 0x2AA) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 341;
  }
  return v4 ^ 1u;
}

uint64_t sub_1011A2FA4(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 341 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x155) {
    a2 = 1;
  }
  if (v5 < 0x2AA) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void sub_1011A301C(void **a1)
{
  uint64_t v3 = a1[3];
  uint64_t v2 = (uint64_t)(a1 + 3);
  uint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 >= (v3 - (unsigned char *)*a1) >> 3) {
    return;
  }
  if (v5 == v4)
  {
    int v10 = 0;
    int v7 = 0;
    goto LABEL_8;
  }
  int v7 = (char *)sub_1000DA54C(v2, v6);
  uint64_t v8 = a1[1];
  unint64_t v5 = a1[2];
  int v10 = &v7[8 * v9];
  uint64_t v11 = v5 - v8;
  if (v5 == v8)
  {
LABEL_8:
    float v14 = v5;
    goto LABEL_9;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 8 * (v11 >> 3);
  do
  {
    *(void *)&v7[v12] = *(void *)&v8[v12];
    v12 += 8;
  }
  while (v13 != v12);
  unint64_t v5 = a1[1];
  float v14 = a1[2];
LABEL_9:
  int64_t v15 = v14 - v5;
  float v16 = *a1;
  *a1 = v7;
  a1[1] = v7;
  a1[2] = &v7[v15];
  a1[3] = v10;
  if (v16)
  {
    operator delete(v16);
  }
}

uint64_t sub_1011A30F0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 != v5) {
    *(void *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  sub_1011A301C((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

void sub_1011A3160(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x155;
  unint64_t v4 = v2 - 341;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    unint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    int v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)sub_1000DA54C(v5, v33);
      float v35 = &v34[8 * (v33 >> 2)];
      float v37 = &v34[8 * v36];
      float v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        float v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)float v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    float v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFFCuLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFFCuLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      float v35 = &v34[8 * (v46 >> 2)];
      float v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  double v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  float v53 = operator new(0xFFCuLL);
  sub_1000DA434(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1011A342C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_1011A3478(void *result, uint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = (void *)*result;
    unint64_t v3 = a2 - 0x5555555555555555 * ((uint64_t)(result[1] - *(void *)*result) >> 2);
    if ((uint64_t)v3 < 1)
    {
      unint64_t v5 = 340 - v3;
      unint64_t v6 = &v2[-(v5 / 0x155)];
      *uint64_t result = v6;
      unint64_t v4 = *v6 + 12 * (341 * (v5 / 0x155) - v5) + 4080;
    }
    else
    {
      *uint64_t result = &v2[v3 / 0x155];
      unint64_t v4 = v2[v3 / 0x155] + 12 * (v3 % 0x155);
    }
    result[1] = v4;
  }
  return result;
}

__n128 sub_1011A3534@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    float v19 = a2;
    uint64_t v18 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
  }
  else
  {
    uint64_t v13 = a3 - 1;
    uint64_t v12 = *a3;
    BOOL v14 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_1011A3604(v12, v14, v15, v16, &v21);
      uint64_t v16 = (char *)v22.n128_u64[1];
      uint64_t v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      uint64_t v17 = *v13--;
      uint64_t v12 = v17;
      BOOL v14 = v17 + 4092;
    }
    uint64_t v18 = *a1 + 4092;
    float v19 = a2;
  }
  sub_1011A3604(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_1011A3604@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  unint64_t v6 = a3;
  if (a1 == a2)
  {
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = *a3;
    uint64_t v11 = a2;
    while (1)
    {
      int64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&a4[-v10] >> 2);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - a1) >> 2)) < v12) {
        int64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v11 - a1) >> 2);
      }
      v11 -= 12 * v12;
      a4 -= 12 * v12;
      if (v12) {
        __n128 result = memmove(a4, v11, 12 * v12);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v10 = v14;
      a4 = (char *)(v14 + 4092);
    }
    if ((char *)(*v6 + 4092) == a4)
    {
      uint64_t v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_1011A36E8(void *a1, unsigned char *a2, unsigned char **a3, unsigned char *a4, uint64_t a5)
{
  int v7 = *(void ***)a5;
  uint64_t v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (uint64_t i = (unsigned char *)(*a1 + 4092); ; uint64_t i = v12 + 4092)
    {
      sub_1011A377C(a2, v8, i, v7, &v14);
      uint64_t v8 = (char *)*((void *)&v15 + 1);
      int v7 = (void **)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v8;
      if (v10 == a3) {
        break;
      }
      int64_t v12 = (unsigned char *)*v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_1011A377C(a2, v8, a4, v7, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_1011A377C@<X0>(unsigned char *__src@<X1>, char *__dst@<X4>, unsigned char *a3@<X2>, void **a4@<X3>, void *a5@<X8>)
{
  unint64_t v6 = a4;
  int v7 = __src;
  if (__src == a3)
  {
    uint64_t v9 = __src;
  }
  else
  {
    uint64_t v9 = a3;
    unint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      int64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - __dst + 4092) >> 2);
      unint64_t v12 = (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v9 - v7) >> 2)) >= v11 ? v11 : 0xAAAAAAAAAAAAAAABLL * ((v9 - v7) >> 2);
      if (v12) {
        double result = memmove(__dst, v7, 12 * v12);
      }
      v7 += 12 * v12;
      if (v7 == v9) {
        break;
      }
      uint64_t v14 = (char *)*v6++;
      uint64_t v10 = v14;
      std::string __dst = v14;
    }
    __dst += 12 * v12;
    if ((char *)*(v6 - 1) + 4092 == __dst) {
      std::string __dst = (char *)*v6;
    }
    else {
      --v6;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

void *sub_1011A3868(void *a1, uint64_t *a2, long long *a3)
{
  unint64_t v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v6 = *a2;
  int v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_101195A28((uint64_t)a1, &v6, a3);
  if (v7) {
    sub_1000DB0A0(v7);
  }
  *a1 = &off_102316448;
  return a1;
}

void sub_1011A38E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1011A3904(uint64_t a1)
{
  sub_101195AE8(a1);

  operator delete();
}

uint64_t sub_1011A393C(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a1 + 100);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t, double))(*(void *)v5 + 48))(v5, a2, 450.0);
  uint64_t v12 = (uint64_t)&v12;
  uint64_t v13 = &v12;
  uint64_t v14 = 0;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, void, double))(*(void *)v5 + 64))(v5, &v12, a2, 0, 30.0);
  if (v6)
  {
    int v7 = v13;
    if (v13 == &v12) {
      goto LABEL_17;
    }
    double v8 = *(double *)(a2 + 104);
    uint64_t v9 = &v12;
    do
    {
      if (v8 == -1.0) {
        goto LABEL_11;
      }
      double v10 = vabdd_f64(v8, *((float *)v7 + 10));
      if (v10 > 180.0) {
        double v10 = 360.0 - v10;
      }
      if (v10 <= 15.0)
      {
LABEL_11:
        if (v9 == &v12 || *((float *)v7 + 8) < *((float *)v9 + 8)) {
          uint64_t v9 = v7;
        }
      }
      int v7 = (uint64_t *)v7[1];
    }
    while (v7 != &v12);
    if (v9 == &v12)
    {
LABEL_17:
      *(_OWORD *)(a2 + 152) = *(_OWORD *)(a2 + 56);
      *(void *)(a2 + 168) = *(void *)(a2 + 104);
      ++*(_DWORD *)(a1 + 104);
    }
    else
    {
      sub_1011884B4(a2, v9 + 2);
      *(_DWORD *)(a2 + 176) = *((_DWORD *)v9 + 8);
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
    ++*(_DWORD *)(a1 + 108);
  }
  sub_10017FF2C(&v12);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  return v6;
}

void sub_1011A3B28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10017FF2C((uint64_t *)va);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1011A3B54(uint64_t a1)
{
  *(_WORD *)a1 = 0;
  unint64_t v2 = (atomic_uchar *)(a1 + 1);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  sub_1011B8120(a1 + 80);
  sub_1011B8120(a1 + 3416);
  *(void *)(a1 + 6768) = 0;
  *(_OWORD *)(a1 + 6752) = 0u;
  sub_1011B8120(a1 + 6776);
  sub_1011B83D4(a1 + 10112);
  sub_1011B8718(a1 + 11544);
  sub_1011B8A70(a1 + 13272);
  sub_1011A3C3C(v2);
  sub_1011A3C74(a1, 1);
  atomic_store(0, (unsigned __int8 *)v2);
  return a1;
}

void sub_1011A3BFC(uint64_t a1)
{
  unint64_t v2 = (unsigned __int8 *)(a1 + 1);
  sub_1011A3C3C((atomic_uchar *)(a1 + 1));
  sub_1011A3C74(a1, 1);
  atomic_store(0, v2);
}

atomic_uchar *sub_1011A3C3C(atomic_uchar *result)
{
  uint64_t v1 = result;
  while ((atomic_exchange_explicit(v1, 1u, memory_order_acquire) & 1) != 0)
    double result = (atomic_uchar *)sched_yield();
  return result;
}

void sub_1011A3C74(uint64_t a1, int a2)
{
  unsigned __int8 v4 = atomic_exchange_explicit((atomic_uchar *volatile)(a1 + 1), 1u, memory_order_acquire);
  if ((v4 & 1) == 0)
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    uint64_t v5 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "CLVLF,reset,Called without locking vision buffers", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      uint64_t v43 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLVisionLocationFuser::reset(const BOOL)", "%s\n", v43);
      if (v43 != (char *)buf) {
        free(v43);
      }
    }
  }
  if (!a2)
  {
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v10 = a1 + 32;
    uint64_t v11 = *(void *)(a1 + 56);
    uint64_t v12 = *(void *)(a1 + 64);
    if (*(void *)(a1 + 32) == v9)
    {
      if (v11 == v12)
      {
        sub_1011A8168(a1, 2.4);
        goto LABEL_25;
      }
      sub_1011B19C0(a1, *(double *)(v12 - 1776));
    }
    else
    {
      if (v11 == v12)
      {
        sub_1011B19C0(a1, *(double *)(v9 - 3152));
        sub_1011B1DB0(v10, *(void *)(a1 + 32), *(void *)(a1 + 40) - 3160);
        goto LABEL_25;
      }
      uint64_t v13 = (double *)(v12 - 1776);
      double v14 = *v13;
      long long v15 = (double *)(v9 - 3152);
      if (*v15 < *v13) {
        double v14 = *v15;
      }
      sub_1011A8168(a1, v14);
      sub_1011B1DB0(v10, *(void *)(a1 + 32), *(void *)(a1 + 40) - 3160);
    }
    sub_1011B1DF8(a1 + 56, *(void *)(a1 + 56), *(void *)(a1 + 64) - 1792);
    goto LABEL_25;
  }
  uint64_t v6 = *(void **)(a1 + 8);
  if (v6)
  {
    *(void *)(a1 + 16) = v6;
    operator delete(v6);
  }
  int v7 = *(void **)(a1 + 32);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  if (v7)
  {
    *(void *)(a1 + 40) = v7;
    operator delete(v7);
  }
  double v8 = *(void **)(a1 + 56);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  if (v8)
  {
    *(void *)(a1 + 64) = v8;
    operator delete(v8);
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
LABEL_25:
  bzero(buf, 0xD08uLL);
  sub_1011B8120((uint64_t)buf);
  sub_1011AFD78(a1 + 80, (uint64_t)buf);
  bzero(buf, 0xD08uLL);
  sub_1011B8120((uint64_t)buf);
  sub_1011AFD78(a1 + 3416, (uint64_t)buf);
  uint64_t v16 = *(void **)(a1 + 6752);
  if (v16)
  {
    *(void *)(a1 + 6760) = v16;
    operator delete(v16);
  }
  *(void *)(a1 + 6752) = 0;
  *(void *)(a1 + 6760) = 0;
  *(void *)(a1 + 6768) = 0;
  bzero(buf, 0xD08uLL);
  sub_1011B8120((uint64_t)buf);
  sub_1011AFD78(a1 + 6776, (uint64_t)buf);
  bzero(buf, 0x598uLL);
  sub_1011B83D4((uint64_t)buf);
  long long v17 = v45;
  *(_OWORD *)(a1 + 10112) = *(_OWORD *)buf;
  *(_OWORD *)(a1 + 10128) = v17;
  *(_OWORD *)(a1 + 10144) = *(_OWORD *)v46;
  *(void *)(a1 + 10160) = *(void *)&v46[16];
  *(unsigned char *)(a1 + 10168) = v46[24];
  *(_OWORD *)(a1 + 10184) = *(_OWORD *)&v46[40];
  *(_OWORD *)(a1 + 10200) = *(_OWORD *)&v46[56];
  *(void *)(a1 + 10216) = *(void *)&v46[72];
  *(_OWORD *)(a1 + 10232) = *(_OWORD *)&v46[88];
  long long v18 = *(_OWORD *)&v46[104];
  long long v19 = *(_OWORD *)&v46[120];
  long long v20 = *(_OWORD *)&v46[136];
  *(_OWORD *)(a1 + 10296) = *(_OWORD *)&v46[152];
  *(_OWORD *)(a1 + 10280) = v20;
  *(_OWORD *)(a1 + 10264) = v19;
  *(_OWORD *)(a1 + 10248) = v18;
  long long v21 = *(_OWORD *)&v46[192];
  *(_OWORD *)(a1 + 10320) = *(_OWORD *)&v46[176];
  *(_OWORD *)(a1 + 10336) = v21;
  *(void *)(a1 + 10352) = *(void *)&v46[208];
  long long v22 = *(_OWORD *)&v46[240];
  *(_OWORD *)(a1 + 10368) = *(_OWORD *)&v46[224];
  *(_OWORD *)(a1 + 10384) = v22;
  memcpy((void *)(a1 + 10408), &v46[264], 0x128uLL);
  long long v23 = v49;
  *(_OWORD *)(a1 + 10720) = v48;
  *(_OWORD *)(a1 + 10736) = v23;
  long long v24 = v51;
  *(_OWORD *)(a1 + 10784) = v52;
  long long v25 = *(_OWORD *)v54;
  *(_OWORD *)(a1 + 10800) = v53;
  *(_OWORD *)(a1 + 10816) = v25;
  *(_OWORD *)(a1 + 10832) = *(_OWORD *)&v54[16];
  *(unsigned char *)(a1 + 10704) = v47;
  *(void *)(a1 + 10752) = v50;
  *(_OWORD *)(a1 + 10768) = v24;
  *(_OWORD *)(a1 + 10856) = v55;
  *(_OWORD *)(a1 + 10872) = v56;
  *(void *)(a1 + 10888) = v57;
  *(_OWORD *)(a1 + 10904) = *(_OWORD *)v58;
  *(_OWORD *)(a1 + 10920) = *(_OWORD *)&v58[16];
  memcpy((void *)(a1 + 10944), &v58[40], 0x128uLL);
  *(_OWORD *)(a1 + 11248) = v59;
  *(_OWORD *)(a1 + 11264) = *(_OWORD *)v60;
  *(_OWORD *)(a1 + 11304) = v62;
  *(_OWORD *)(a1 + 11320) = v63;
  *(_OWORD *)(a1 + 11336) = v64;
  *(_OWORD *)(a1 + 11352) = v65;
  *(_OWORD *)(a1 + 11288) = v61;
  *(unsigned char *)(a1 + 11368) = v66;
  long long v26 = v67;
  *(_OWORD *)(a1 + 11400) = v68;
  *(_OWORD *)(a1 + 11384) = v26;
  *(_OWORD *)(a1 + 11440) = *(_OWORD *)&v69[24];
  *(_OWORD *)(a1 + 11456) = v70;
  *(_OWORD *)(a1 + 11472) = v71;
  *(_OWORD *)(a1 + 11488) = v72;
  *(_OWORD *)(a1 + 11424) = *(_OWORD *)&v69[8];
  *(_OWORD *)(a1 + 11504) = v73;
  *(_OWORD *)(a1 + 11520) = v74;
  *(unsigned char *)(a1 + 11536) = v75;
  bzero(buf, 0x6C0uLL);
  sub_1011B8718((uint64_t)buf);
  *(_OWORD *)(a1 + 11544) = *(_OWORD *)buf;
  *(void *)(a1 + 11560) = v45;
  *(unsigned char *)(a1 + 11568) = BYTE8(v45);
  *(_OWORD *)(a1 + 11584) = *(_OWORD *)&v46[8];
  *(_OWORD *)(a1 + 11600) = *(_OWORD *)&v46[24];
  *(void *)(a1 + 11616) = *(void *)&v46[40];
  *(_OWORD *)(a1 + 11696) = *(_OWORD *)&v46[120];
  *(_OWORD *)(a1 + 11680) = *(_OWORD *)&v46[104];
  *(_OWORD *)(a1 + 11664) = *(_OWORD *)&v46[88];
  *(_OWORD *)(a1 + 11648) = *(_OWORD *)&v46[72];
  *(_OWORD *)(a1 + 11632) = *(_OWORD *)&v46[56];
  long long v27 = *(_OWORD *)&v46[160];
  *(_OWORD *)(a1 + 11720) = *(_OWORD *)&v46[144];
  *(_OWORD *)(a1 + 11736) = v27;
  *(void *)(a1 + 11752) = *(void *)&v46[176];
  long long v28 = *(_OWORD *)&v46[208];
  *(_OWORD *)(a1 + 11768) = *(_OWORD *)&v46[192];
  *(_OWORD *)(a1 + 11784) = v28;
  memcpy((void *)(a1 + 11808), &v46[232], 0x128uLL);
  *(unsigned char *)(a1 + 12104) = v46[528];
  long long v29 = v47;
  *(_OWORD *)(a1 + 12120) = *(_OWORD *)&v46[544];
  *(_OWORD *)(a1 + 12136) = v29;
  *(void *)(a1 + 12152) = v48;
  long long v30 = v52;
  *(_OWORD *)(a1 + 12200) = v51;
  *(_OWORD *)(a1 + 12216) = v30;
  *(_OWORD *)(a1 + 12232) = v53;
  long long v31 = v50;
  *(_OWORD *)(a1 + 12168) = v49;
  *(_OWORD *)(a1 + 12184) = v31;
  *(void *)(a1 + 12288) = v55;
  *(_OWORD *)(a1 + 12272) = *(_OWORD *)&v54[24];
  *(_OWORD *)(a1 + 12256) = *(_OWORD *)&v54[8];
  *(_OWORD *)(a1 + 12304) = v56;
  *(_OWORD *)(a1 + 12320) = v57;
  memcpy((void *)(a1 + 12344), &v58[8], 0x128uLL);
  *(_OWORD *)(a1 + 12648) = *(_OWORD *)&v58[312];
  *(_OWORD *)(a1 + 12664) = *(_OWORD *)&v58[328];
  *(_OWORD *)(a1 + 12704) = *(_OWORD *)&v60[8];
  *(_OWORD *)(a1 + 12720) = v61;
  long long v32 = v63;
  *(_OWORD *)(a1 + 12768) = v64;
  *(_OWORD *)(a1 + 12752) = v32;
  long long v33 = v66;
  *(_OWORD *)(a1 + 12816) = v67;
  long long v34 = *(_OWORD *)v69;
  *(_OWORD *)(a1 + 12832) = v68;
  *(void *)(a1 + 12680) = v59;
  *(unsigned char *)(a1 + 12688) = BYTE8(v59);
  *(unsigned char *)(a1 + 12736) = v62;
  *(void *)(a1 + 12784) = v65;
  *(_OWORD *)(a1 + 12848) = v34;
  *(_OWORD *)(a1 + 12864) = *(_OWORD *)&v69[16];
  *(_OWORD *)(a1 + 12800) = v33;
  *(_OWORD *)(a1 + 12888) = v70;
  *(_OWORD *)(a1 + 12904) = v71;
  *(void *)(a1 + 12920) = v72;
  *(_OWORD *)(a1 + 12952) = v74;
  *(_OWORD *)(a1 + 12936) = v73;
  memcpy((void *)(a1 + 12976), v76, 0x128uLL);
  memset(v46, 0, 328);
  *(_OWORD *)uint64_t buf = 0u;
  long long v45 = 0u;
  sub_1011B8A70((uint64_t)buf);
  long long v35 = v45;
  *(_OWORD *)(a1 + 13272) = *(_OWORD *)buf;
  *(_OWORD *)(a1 + 13288) = v35;
  *(_OWORD *)(a1 + 13312) = *(_OWORD *)&v46[8];
  *(_OWORD *)(a1 + 13328) = *(_OWORD *)&v46[24];
  long long v36 = *(_OWORD *)&v46[64];
  *(_OWORD *)(a1 + 13352) = *(_OWORD *)&v46[48];
  *(_OWORD *)(a1 + 13368) = v36;
  *(unsigned char *)(a1 + 13432) = v46[128];
  long long v37 = *(_OWORD *)&v46[112];
  long long v38 = *(_OWORD *)&v46[80];
  *(_OWORD *)(a1 + 13400) = *(_OWORD *)&v46[96];
  *(_OWORD *)(a1 + 13416) = v37;
  *(_OWORD *)(a1 + 13384) = v38;
  long long v39 = *(_OWORD *)&v46[160];
  *(_OWORD *)(a1 + 13448) = *(_OWORD *)&v46[144];
  *(_OWORD *)(a1 + 13464) = v39;
  *(_OWORD *)(a1 + 13488) = *(_OWORD *)&v46[184];
  *(_OWORD *)(a1 + 13504) = *(_OWORD *)&v46[200];
  long long v40 = *(_OWORD *)&v46[272];
  *(_OWORD *)(a1 + 13560) = *(_OWORD *)&v46[256];
  *(_OWORD *)(a1 + 13576) = v40;
  long long v41 = *(_OWORD *)&v46[240];
  *(_OWORD *)(a1 + 13528) = *(_OWORD *)&v46[224];
  *(_OWORD *)(a1 + 13544) = v41;
  *(void *)(a1 + 13624) = *(void *)&v46[320];
  long long v42 = *(_OWORD *)&v46[304];
  *(_OWORD *)(a1 + 13592) = *(_OWORD *)&v46[288];
  *(_OWORD *)(a1 + 13608) = v42;
  *(void *)(a1 + 13632) = 0;
  if ((v4 & 1) == 0) {
    atomic_store(0, (unsigned __int8 *)(a1 + 1));
  }
}

void sub_1011A4454(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_1011A4460(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)(a3 + 424) = 0;
  int v5 = *(_DWORD *)(a2 + 96);
  if (v5 != 1 && v5 != 11)
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    long long v27 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v28 = *(void *)(a3 + 32);
      int v29 = *(_DWORD *)(a2 + 96);
      *(_DWORD *)uint64_t buf = 134349313;
      *(void *)&uint8_t buf[4] = v28;
      *(_WORD *)&uint8_t buf[12] = 1025;
      *(_DWORD *)&unsigned char buf[14] = v29;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "CLVLF,getFusedLocation,Nonsupporting provider,machAbsTime,%{public}.3lf,locationType,%{private}d", buf, 0x12u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    uint64_t v103 = *(void *)(a3 + 32);
    int v104 = *(_DWORD *)(a2 + 96);
    *(_DWORD *)uint64_t v114 = 134349313;
    *(void *)&v114[4] = v103;
    *(_WORD *)&v114[12] = 1025;
    *(_DWORD *)&v114[14] = v104;
    long long v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "int CLVisionLocationFuser::getFusedLocation(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v19);
LABEL_157:
    if (v19 != buf) {
      free(v19);
    }
    return 0;
  }
  double v8 = *(double *)(a3 + 32);
  if (!*a1)
  {
    double v9 = *((double *)a1 + 1444);
    double v10 = vabdd_f64(v8, v9);
    if (v9 <= 0.0 || v10 > 24.0)
    {
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      uint64_t v12 = qword_102419428;
      if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
      {
        uint64_t v13 = *(void *)(a3 + 32);
        int v14 = *a1;
        uint64_t v15 = *((void *)a1 + 1444);
        *(_DWORD *)uint64_t buf = 134349568;
        *(void *)&uint8_t buf[4] = v13;
        *(_WORD *)&uint8_t buf[12] = 1026;
        *(_DWORD *)&unsigned char buf[14] = v14;
        *(_WORD *)&unsigned char buf[18] = 2050;
        *(void *)&uint8_t buf[20] = v15;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLVLF,getFusedLocation,Filter inactive,machAbsTime,%{public}.3lf,activated,%{public}d,lastValidVlf,%{public}.3lf", buf, 0x1Cu);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      uint64_t v16 = *(void *)(a3 + 32);
      int v17 = *a1;
      uint64_t v18 = *((void *)a1 + 1444);
      *(_DWORD *)uint64_t v114 = 134349568;
      *(void *)&v114[4] = v16;
      *(_WORD *)&v114[12] = 1026;
      *(_DWORD *)&v114[14] = v17;
      *(_WORD *)&v114[18] = 2050;
      *(void *)&v114[20] = v18;
      long long v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "int CLVisionLocationFuser::getFusedLocation(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v19);
      goto LABEL_157;
    }
  }
  long long v20 = a1 + 6776;
  if (!a1[6777] && !*v20)
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    long long v45 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v46 = *(void *)(a3 + 32);
      if (v20[1]) {
        int v47 = 1;
      }
      else {
        int v47 = *v20;
      }
      *(_DWORD *)uint64_t buf = 134349312;
      *(void *)&uint8_t buf[4] = v46;
      *(_WORD *)&uint8_t buf[12] = 1026;
      *(_DWORD *)&unsigned char buf[14] = v47;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "CLVLF,getFusedLocation,Filter not initialized,machAbsTime,%{public}.3lf,initialized,%{public}d", buf, 0x12u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    uint64_t v51 = *(void *)(a3 + 32);
    if (v20[1]) {
      int v52 = 1;
    }
    else {
      int v52 = *v20;
    }
    *(_DWORD *)uint64_t v114 = 134349312;
    *(void *)&v114[4] = v51;
    *(_WORD *)&v114[12] = 1026;
    *(_DWORD *)&v114[14] = v52;
    long long v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "int CLVisionLocationFuser::getFusedLocation(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v19);
    goto LABEL_157;
  }
  if (v8 != *((double *)a1 + 994))
  {
    long long v21 = (uint64_t *)(a1 + 7952);
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    long long v22 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v23 = *(void *)(a3 + 32);
      uint64_t v24 = *v21;
      *(_DWORD *)uint64_t buf = 134349312;
      *(void *)&uint8_t buf[4] = v23;
      *(_WORD *)&uint8_t buf[12] = 2050;
      *(void *)&unsigned char buf[14] = v24;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "CLVLF,getFusedLocation,Outdated state,machAbsTime,%{public}.3lf,stateMachAbsTime,%{public}.3lf", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    uint64_t v25 = *(void *)(a3 + 32);
    uint64_t v26 = *v21;
    *(_DWORD *)uint64_t v114 = 134349312;
    *(void *)&v114[4] = v25;
    *(_WORD *)&v114[12] = 2050;
    *(void *)&v114[14] = v26;
    long long v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "int CLVisionLocationFuser::getFusedLocation(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v19);
    goto LABEL_157;
  }
  double v32 = *((double *)a1 + 1444);
  BOOL v33 = vabdd_f64(v8, v32) <= 24.0 && v32 > 0.0;
  unsigned int v34 = *((_DWORD *)a1 + 2074);
  double v35 = -1.0;
  if ((v34 & 1) == 0 || (double v36 = *((double *)a1 + 1006), v37 = v36 > 0.0, v36 <= 0.0))
  {
    int v113 = 0;
    int v43 = 0;
    int v42 = 0;
    uint64_t v30 = 0;
    double v40 = -1.0;
    double v41 = -1.0;
    if ((v34 & 2) != 0) {
      goto LABEL_83;
    }
LABEL_45:
    BOOL v44 = 0;
    goto LABEL_110;
  }
  double v38 = *((double *)a1 + 998) * 57.2957795;
  *(double *)uint64_t buf = *((double *)a1 + 997) * 57.2957795;
  *(double *)&uint8_t buf[8] = v38;
  long long v39 = (_OWORD *)(a2 + 4);
  double v40 = sub_1000F1648(dbl_102485E78, *(double *)(a2 + 4), *(double *)(a2 + 12), *(double *)buf, v38, *(double *)(a2 + 28));
  int v113 = v37 & (v34 >> 2);
  if (*((double *)a1 + 1006) > 32.0) {
    goto LABEL_43;
  }
  if (v33)
  {
    *long long v39 = *(_OWORD *)buf;
    double v48 = *((double *)a1 + 1006) * 0.7;
    if (v48 < 1.6) {
      double v48 = 1.6;
    }
    *(double *)(a2 + 20) = v48;
    long long v49 = (void *)(a2 + 20);
    if (v113) {
      uint64_t v30 = 5;
    }
    else {
      uint64_t v30 = 1;
    }
    *(unsigned char *)(a3 + 424) = 1;
    BOOL v50 = *a1 != 0;
  }
  else
  {
    long long v49 = (void *)(a2 + 20);
    double v53 = *(double *)(a2 + 20);
    if (v53 > 0.0 && v40 > v53 * *(double *)&qword_102485EA0)
    {
LABEL_43:
      uint64_t v30 = 0;
      double v41 = -1.0;
      int v42 = 1;
      goto LABEL_82;
    }
    BOOL v50 = 0;
    *long long v39 = *(_OWORD *)buf;
    *long long v49 = *((void *)a1 + 1006);
    if (v113) {
      uint64_t v30 = 5;
    }
    else {
      uint64_t v30 = 1;
    }
    *(unsigned char *)(a3 + 424) = 1;
  }
  *(unsigned char *)(a3 + 425) = v50;
  *(_OWORD *)(a3 + 432) = *v39;
  *(void *)(a3 + 448) = *v49;
  *(void *)uint64_t v114 = 0;
  if (sub_10159B9A8(*(_DWORD *)(a3 + 312), (double *)buf, (double *)v114, *((double *)a1 + 999), *((double *)a1 + 1007), *(float *)(a3 + 316)))
  {
    uint64_t v54 = *(void *)v114;
    double v41 = vabdd_f64(*(double *)(a2 + 28), *(double *)v114);
    double v55 = *((double *)a1 + 1007);
    if (v55 > 8.0)
    {
LABEL_73:
      int v42 = 0;
      goto LABEL_82;
    }
    if (v33)
    {
      *(void *)(a2 + 28) = *(void *)v114;
      double v55 = v55 * 0.8;
      *(double *)(a2 + 36) = v55;
      if (v55 < 0.8)
      {
        *(void *)(a2 + 36) = 0x3FE999999999999ALL;
        double v55 = 0.8;
      }
    }
    else
    {
      double v56 = *(double *)(a2 + 36);
      if (v56 > 0.0 && v41 > v55 + v56 + v55 + v56) {
        goto LABEL_73;
      }
      *(void *)(a2 + 28) = *(void *)v114;
      *(double *)(a2 + 36) = v55;
    }
    int v42 = 0;
    *(void *)(a3 + 464) = v54;
    *(double *)(a3 + 472) = v55;
  }
  else
  {
    int v42 = 0;
    double v41 = -1.0;
  }
LABEL_82:
  int v43 = 1;
  if ((*((_DWORD *)a1 + 2074) & 2) == 0) {
    goto LABEL_45;
  }
LABEL_83:
  double v57 = *((double *)a1 + 1009);
  BOOL v44 = v57 > 0.0;
  if (v57 <= 0.0) {
    char v58 = 1;
  }
  else {
    char v58 = v42;
  }
  if ((v58 & 1) == 0)
  {
    double v59 = 1.57079633 - *((double *)a1 + 1008);
    if (v59 < 0.0 || v59 >= 6.28318531)
    {
      double v59 = fmod(v59, 6.28318531);
      if (v59 < 0.0 || v59 == 0.0 && (*(void *)&v59 & 0x8000000000000000) == 0) {
        double v59 = v59 + 6.28318531;
      }
    }
    double v60 = v57 * 57.2957795;
    if (v33)
    {
      double v60 = v60 * 0.4;
      if (v60 < 7.5) {
        double v60 = 7.5;
      }
      if (v60 > 180.0) {
        double v60 = 180.0;
      }
    }
    double v61 = v59 * 57.2957795;
    double v62 = *(double *)(a2 + 60);
    if (v62 < 0.0 || (long long v63 = (double *)(a2 + 68), v64 = *(double *)(a2 + 68), v64 <= 0.0))
    {
      *(double *)(a2 + 60) = v61;
      long long v63 = (double *)(a2 + 68);
      double v35 = -1.0;
    }
    else
    {
      double v65 = vabdd_f64(v61, v62);
      if (360.0 - v65 >= v65) {
        double v35 = v65;
      }
      else {
        double v35 = 360.0 - v65;
      }
      if (!v33)
      {
        double v66 = v60 + v64 + v60 + v64;
        if (v66 > 180.0) {
          double v66 = 180.0;
        }
        if (v35 > v66) {
          goto LABEL_110;
        }
      }
      *(double *)(a2 + 60) = v61;
    }
    *long long v63 = v60;
    uint64_t v30 = v30 | 2;
    *(double *)(a3 + 480) = v61;
    *(double *)(a3 + 488) = v60;
  }
LABEL_110:
  if (v42)
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    long long v67 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      uint64_t v68 = *(void *)(a3 + 32);
      uint64_t v69 = *((void *)a1 + 1006);
      uint64_t v70 = *(void *)(a2 + 20);
      uint64_t v71 = *((void *)a1 + 1007);
      uint64_t v72 = *(void *)(a2 + 36);
      double v73 = *((double *)a1 + 1009) * 57.2957795;
      uint64_t v74 = *(void *)(a2 + 68);
      *(_DWORD *)uint64_t buf = 134351361;
      *(void *)&uint8_t buf[4] = v68;
      *(_WORD *)&uint8_t buf[12] = 2049;
      *(void *)&unsigned char buf[14] = v69;
      *(_WORD *)&unsigned char buf[22] = 2049;
      *(void *)&uint8_t buf[24] = v70;
      *(_WORD *)&unsigned char buf[32] = 2049;
      *(double *)&buf[34] = v40;
      *(_WORD *)&buf[42] = 2049;
      *(void *)&buf[44] = v71;
      *(_WORD *)&buf[52] = 2049;
      *(void *)&buf[54] = v72;
      *(_WORD *)&buf[62] = 2049;
      *(double *)&buf[64] = v41;
      *(_WORD *)&buf[72] = 2049;
      *(double *)&buf[74] = v73;
      *(_WORD *)&buf[82] = 2049;
      *(void *)&buf[84] = v74;
      *(_WORD *)&buf[92] = 2049;
      *(double *)&buf[94] = v35;
      _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "CLVLF,getFusedLocation,Filter reset,diverged,machAbsTime,%{public}.3lf,fusedHorizontalAccuracy,%{private}.3lf,locationHorizontalAccuracy,%{private}.3lf,horzDistToRaw,%{private}.3lf,fusedVerticalAccuracy,%{private}.3lf,locationVerticalAccuracy,%{private}.3lf,vertDistToRaw,%{private}.3lf,fusedCourseAccuracy,%{private}.3lf,locationCourseAccuracy,%{private}.3lf,courseDiffToRaw,%{private}.3lf", buf, 0x66u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      uint64_t v105 = *(void *)(a3 + 32);
      uint64_t v106 = *((void *)a1 + 1006);
      uint64_t v107 = *(void *)(a2 + 20);
      uint64_t v108 = *((void *)a1 + 1007);
      uint64_t v109 = *(void *)(a2 + 36);
      double v110 = *((double *)a1 + 1009) * 57.2957795;
      uint64_t v111 = *(void *)(a2 + 68);
      *(_DWORD *)uint64_t v114 = 134351361;
      *(void *)&v114[4] = v105;
      *(_WORD *)&v114[12] = 2049;
      *(void *)&v114[14] = v106;
      *(_WORD *)&v114[22] = 2049;
      *(void *)&v114[24] = v107;
      *(_WORD *)&v114[32] = 2049;
      *(double *)&v114[34] = v40;
      *(_WORD *)&v114[42] = 2049;
      *(void *)&v114[44] = v108;
      *(_WORD *)&v114[52] = 2049;
      *(void *)&v114[54] = v109;
      *(_WORD *)&v114[62] = 2049;
      *(double *)&v114[64] = v41;
      *(_WORD *)&v114[72] = 2049;
      *(double *)&v114[74] = v110;
      *(_WORD *)&v114[82] = 2049;
      *(void *)&v114[84] = v111;
      *(_WORD *)&v114[92] = 2049;
      *(double *)&v114[94] = v35;
      long long v112 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "int CLVisionLocationFuser::getFusedLocation(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v112);
      if (v112 != buf) {
        free(v112);
      }
    }
    sub_1011A3C3C((atomic_uchar *)a1 + 1);
    sub_1011A3C74((uint64_t)a1, 0);
    uint64_t v30 = 0;
    atomic_store(0, a1 + 1);
  }
  else
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    char v75 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
    {
      int v76 = *(_DWORD *)(a2 + 96);
      uint64_t v77 = *(void *)(a2 + 76);
      uint64_t v78 = *(void *)(a3 + 32);
      uint64_t v79 = *(void *)(a3 + 344);
      double v80 = *(double *)(a2 + 4);
      double v81 = *(double *)(a2 + 12);
      double v82 = *(double *)(a2 + 20);
      double v83 = *(double *)(a2 + 28);
      double v84 = *(double *)(a2 + 36);
      double v85 = *(double *)(a2 + 60);
      BOOL v86 = v80 == *(double *)(a3 + 432);
      if (v81 != *(double *)(a3 + 440)) {
        BOOL v86 = 0;
      }
      if (v82 != *(double *)(a3 + 448)) {
        BOOL v86 = 0;
      }
      if (v83 != *(double *)(a3 + 464)) {
        BOOL v86 = 0;
      }
      if (v84 != *(double *)(a3 + 472)) {
        BOOL v86 = 0;
      }
      double v87 = *(double *)(a2 + 68);
      int v88 = *(unsigned __int8 *)(a3 + 424);
      if (v85 != *(double *)(a3 + 480)) {
        BOOL v86 = 0;
      }
      if (v87 != *(double *)(a3 + 488)) {
        BOOL v86 = 0;
      }
      if (*(_DWORD *)(a2 + 132) != *(_DWORD *)(a3 + 456)) {
        BOOL v86 = 0;
      }
      *(_DWORD *)uint64_t buf = 67179265;
      *(_DWORD *)&uint8_t buf[4] = v76;
      *(_WORD *)&uint8_t buf[8] = 2050;
      *(void *)&_OWORD buf[10] = v77;
      *(_WORD *)&unsigned char buf[18] = 2050;
      *(void *)&uint8_t buf[20] = v78;
      *(_WORD *)&unsigned char buf[28] = 2050;
      *(void *)&buf[30] = v79;
      *(_WORD *)&buf[38] = 2049;
      *(double *)&buf[40] = v80;
      *(_WORD *)&buf[48] = 2049;
      *(double *)&buf[50] = v81;
      *(_WORD *)&buf[58] = 2049;
      *(double *)&buf[60] = v82;
      *(_WORD *)&std::string buf[68] = 2049;
      *(double *)&buf[70] = v83;
      *(_WORD *)&buf[78] = 2049;
      *(double *)&buf[80] = v84;
      *(_WORD *)&buf[88] = 2049;
      *(double *)&buf[90] = v85;
      *(_WORD *)&buf[98] = 2049;
      *(double *)&buf[100] = v87;
      __int16 v132 = 1026;
      int v133 = v43;
      __int16 v134 = 1026;
      int v135 = v113;
      __int16 v136 = 2049;
      double v137 = v40;
      __int16 v138 = 2049;
      double v139 = v41;
      __int16 v140 = 1026;
      BOOL v141 = v44;
      __int16 v142 = 2049;
      double v143 = v35;
      __int16 v144 = 1026;
      int v145 = v88;
      __int16 v146 = 1026;
      BOOL v147 = v86;
      _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "CLVLF,getFusedLocation,Output,type,%{private}d,timestamp,%{public}.3lf,machtime,%{public}.3lf,machContinuousTime,%{public}.3lf,latitude,%{private}.8lf,longitude,%{private}.8lf,horizontalAccuracy,%{private}.3lf,altitude,%{private}.3lf,verticalAccuracy,%{private}.3lf,course,%{private}.3lf,courseAccuracy,%{private}.3lf,isLocationFused,%{public}d,isLocationPropagated,%{public}d,horzDistToOriginal,%{private}.3lf,vertDistToOriginal,%{private}.3lf,isCourseFused,%{public}d,courseDiffToOriginal,%{private}.3lf,isCoordinateFused,%{public}d,isCoordinateEqualToFusedCoordinate,%{public}d", buf, 0xA8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      int v89 = *(_DWORD *)(a2 + 96);
      uint64_t v90 = *(void *)(a2 + 76);
      uint64_t v91 = *(void *)(a3 + 32);
      uint64_t v92 = *(void *)(a3 + 344);
      double v93 = *(double *)(a2 + 4);
      double v94 = *(double *)(a2 + 12);
      double v95 = *(double *)(a2 + 20);
      double v96 = *(double *)(a2 + 28);
      double v97 = *(double *)(a2 + 36);
      double v98 = *(double *)(a2 + 60);
      BOOL v99 = v93 == *(double *)(a3 + 432);
      if (v94 != *(double *)(a3 + 440)) {
        BOOL v99 = 0;
      }
      if (v95 != *(double *)(a3 + 448)) {
        BOOL v99 = 0;
      }
      if (v96 != *(double *)(a3 + 464)) {
        BOOL v99 = 0;
      }
      if (v97 != *(double *)(a3 + 472)) {
        BOOL v99 = 0;
      }
      double v100 = *(double *)(a2 + 68);
      int v101 = *(unsigned __int8 *)(a3 + 424);
      if (v98 != *(double *)(a3 + 480)) {
        BOOL v99 = 0;
      }
      if (v100 != *(double *)(a3 + 488)) {
        BOOL v99 = 0;
      }
      if (*(_DWORD *)(a2 + 132) != *(_DWORD *)(a3 + 456)) {
        BOOL v99 = 0;
      }
      *(_DWORD *)uint64_t v114 = 67179265;
      *(_DWORD *)&v114[4] = v89;
      *(_WORD *)&v114[8] = 2050;
      *(void *)&v114[10] = v90;
      *(_WORD *)&v114[18] = 2050;
      *(void *)&v114[20] = v91;
      *(_WORD *)&v114[28] = 2050;
      *(void *)&v114[30] = v92;
      *(_WORD *)&v114[38] = 2049;
      *(double *)&v114[40] = v93;
      *(_WORD *)&v114[48] = 2049;
      *(double *)&v114[50] = v94;
      *(_WORD *)&v114[58] = 2049;
      *(double *)&v114[60] = v95;
      *(_WORD *)&v114[68] = 2049;
      *(double *)&v114[70] = v96;
      *(_WORD *)&v114[78] = 2049;
      *(double *)&v114[80] = v97;
      *(_WORD *)&v114[88] = 2049;
      *(double *)&v114[90] = v98;
      *(_WORD *)&v114[98] = 2049;
      *(double *)&v114[100] = v100;
      __int16 v115 = 1026;
      int v116 = v43;
      __int16 v117 = 1026;
      int v118 = v113;
      __int16 v119 = 2049;
      double v120 = v40;
      __int16 v121 = 2049;
      double v122 = v41;
      __int16 v123 = 1026;
      BOOL v124 = v44;
      __int16 v125 = 2049;
      double v126 = v35;
      __int16 v127 = 1026;
      int v128 = v101;
      __int16 v129 = 1026;
      BOOL v130 = v99;
      uint64_t v102 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "int CLVisionLocationFuser::getFusedLocation(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v102);
      if (v102 != buf) {
        free(v102);
      }
    }
  }
  return v30;
}

void sub_1011A5478(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_1011A5484(unsigned __int8 *a1, uint64_t a2)
{
  if (qword_102419420 != -1) {
    dispatch_once(&qword_102419420, &stru_1023166C8);
  }
  unsigned __int8 v4 = qword_102419428;
  if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    int v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLVLF,pushARSessionState,sessionState,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    double v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLVisionLocationFuser::pushARSessionState(const _CLARSessionState)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  if (a2 == 1)
  {
    if (a1[6777] || a1[6776])
    {
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      int v5 = qword_102419428;
      if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
      {
        int v6 = *a1;
        *(_DWORD *)uint64_t buf = 67240192;
        int v13 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLVLF,pushARSessionState,Filter reset,AR session started,activated,%{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419420 != -1) {
          dispatch_once(&qword_102419420, &stru_1023166C8);
        }
        double v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLVisionLocationFuser::pushARSessionState(const _CLARSessionState)", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
      sub_1011A3C3C((atomic_uchar *)a1 + 1);
      sub_1011A3C74((uint64_t)a1, 1);
      atomic_store(0, a1 + 1);
    }
    *a1 = 1;
    sub_1011A5980((uint64_t *)a1 + 1, 0x1EuLL);
    sub_1011A5AC0((uint64_t *)a1 + 4, 0x14uLL);
    sub_1011A5C08((uint64_t *)a1 + 7, 0xAuLL);
    sub_1011A5D48((uint64_t *)a1 + 844, 4uLL);
  }
  else
  {
    *a1 = 0;
    if (*((double *)a1 + 1444) <= 0.0)
    {
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      int v7 = qword_102419428;
      if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
      {
        int v8 = *a1;
        *(_DWORD *)uint64_t buf = 67240192;
        int v13 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLVLF,pushARSessionState,Filter reset,AR session closed,activated,%{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419420 != -1) {
          dispatch_once(&qword_102419420, &stru_1023166C8);
        }
        uint64_t v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLVisionLocationFuser::pushARSessionState(const _CLARSessionState)", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
      sub_1011A3C3C((atomic_uchar *)a1 + 1);
      sub_1011A3C74((uint64_t)a1, 1);
      atomic_store(0, a1 + 1);
    }
  }
}

void sub_1011A5974(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_1011A5980(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xED6866F8D962AE7BLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x2DC3EED6866F8ELL) {
      sub_1001D7FD4();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v11 = v3;
    std::string __p = sub_1011B95D8(v3, a2);
    int v8 = (char *)__p + v5;
    double v9 = (char *)__p + v5;
    double v10 = (char *)__p + 1432 * v6;
    sub_1011B9550(a1, &__p);
    if (v9 != v8) {
      double v9 = &v8[(v9 - v8 - 1432) % 0x598uLL];
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_1011A5A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1011A5AC0(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xEBE8AB1946A49E23 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x14BD3EDDA68FE1) {
      sub_1001D7FD4();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v11 = v3;
    std::string __p = sub_1011B969C(v3, a2);
    int v8 = (char *)__p + v5;
    double v9 = (char *)__p + v5;
    double v10 = (char *)__p + 3160 * v6;
    sub_1011B9624(a1, &__p);
    if (v9 != v8) {
      double v9 = &v8[(v9 - v8 - 3160) % 0xC58uLL];
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_1011A5BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1011A5C08(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 8) < a2)
  {
    if (a2 >= 0x24924924924925) {
      sub_1001D7FD4();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v11 = v3;
    std::string __p = sub_1011B97E0(v3, a2);
    int v8 = (char *)__p + v5;
    double v9 = (char *)__p + v5;
    double v10 = (char *)__p + 1792 * v6;
    sub_1011B9768(a1, &__p);
    if (v9 != v8) {
      v9 += -1792
    }
          - 1792 * ((((unint64_t)(v9 - v8 - 1792) >> 8) * (unsigned __int128)0x2492492492492493uLL) >> 64);
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_1011A5CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1011A5D48(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0x13A524387AC82261 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x13A524387AC823) {
      sub_1001D7FD4();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v11 = v3;
    std::string __p = sub_1011B9934(v3, a2);
    int v8 = (char *)__p + v5;
    double v9 = (char *)__p + v5;
    double v10 = (char *)__p + 3336 * v6;
    sub_1011B98AC(a1, &__p);
    if (v9 != v8) {
      double v9 = &v8[(v9 - v8 - 3336) % 0xD08uLL];
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_1011A5E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1011A5E88(unsigned __int8 *a1, void *a2)
{
  if (*a1)
  {
    char v46 = 1;
    sub_10159A1EC(a2, &v46, (char *)v57);
    if (v46)
    {
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      uint64_t v4 = qword_102419428;
      if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
      {
        [a2 timestamp];
        uint64_t v6 = v5;
        unsigned int v7 = [a2 trackingState];
        id v8 = [a2 inertialState];
        id v9 = [a2 inertialCovariance];
        *(_DWORD *)uint64_t buf = 134349825;
        *(void *)&uint8_t buf[4] = v6;
        __int16 v64 = 1026;
        *(_DWORD *)double v65 = v7;
        *(_WORD *)&v65[4] = 2049;
        *(void *)&v65[6] = v8;
        *(_WORD *)&v65[14] = 2049;
        *(void *)&v65[16] = v9;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLVLF,pushVIOEstimation,Unable to construct VioData,machAbsTime,%{public}.3lf,trackingState,%{public}d,inertialState,%{private}p,inertialCovariance,%{private}p", buf, 0x26u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419420 != -1) {
          dispatch_once(&qword_102419420, &stru_1023166C8);
        }
        [a2 timestamp];
        uint64_t v11 = v10;
        unsigned int v12 = [a2 trackingState];
        id v13 = [a2 inertialState];
        id v14 = [a2 inertialCovariance];
        int v53 = 134349825;
        *(void *)uint64_t v54 = v11;
        *(_WORD *)&v54[8] = 1026;
        *(_DWORD *)&v54[10] = v12;
        *(_WORD *)&v54[14] = 2049;
        *(void *)&v54[16] = v13;
        *(_WORD *)&v54[24] = 2049;
        *(void *)&v54[26] = v14;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLVisionLocationFuser::pushVIOEstimation(const _CLVIOEstimation *const)", "%s\n", v15);
LABEL_68:
        if (v15 != buf) {
          free(v15);
        }
      }
    }
    else if (sub_1011A67A0((uint64_t)a1, (uint64_t)v57))
    {
      LOBYTE(v53) = 1;
      *(int64x2_t *)&v54[4] = vdupq_n_s64(3uLL);
      *(_OWORD *)&v54[20] = xmmword_101D07BB0;
      double v55 = (double *)&v59;
      double v56 = &v60;
      sub_1011B9A58((uint64_t)&v53, &dbl_101DAB820);
      double v19 = *v55
          + v55[*(void *)&v54[28] + *(void *)&v54[20]]
          + v55[2 * *(void *)&v54[28] + 2 * *(void *)&v54[20]];
      double v20 = sqrt(v19);
      BOOL v22 = (v20 < 0.0 || ((*(void *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
         && (unint64_t)(*(void *)&v20 - 1) > 0xFFFFFFFFFFFFELL;
      if (!v22 && v20 < 0.041887902)
      {
        *(double *)uint64_t buf = 0.00175459634 / v19;
        sub_1011B9A58((uint64_t)&v53, (const double *)buf);
      }
      v41[0] = 1;
      int64x2_t v42 = vdupq_n_s64(3uLL);
      long long v43 = xmmword_101D07BB0;
      BOOL v44 = (double *)&v61;
      long long v45 = &v62;
      sub_1011B9A58((uint64_t)v41, &dbl_101DAB828);
      double v23 = *v44 + v44[*((void *)&v43 + 1) + (void)v43] + v44[2 * *((void *)&v43 + 1) + 2 * (void)v43];
      double v24 = sqrt(v23);
      if ((v24 >= 0.0 && ((*(void *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
         || (unint64_t)(*(void *)&v24 - 1) <= 0xFFFFFFFFFFFFELL)
        && v24 < 1.5)
      {
        *(double *)uint64_t buf = 2.25 / v23;
        sub_1011B9A58((uint64_t)v41, (const double *)buf);
      }
      sub_1011A3C3C((atomic_uchar *)a1 + 1);
      unint64_t v28 = *((void *)a1 + 1);
      uint64_t v29 = *((void *)a1 + 2);
      if (v28 != v29)
      {
        double v30 = *(double *)(v29 - 1392) - *(double *)(v28 + 40);
        unint64_t v28 = *((void *)a1 + 2);
        if (v30 >= 3.0)
        {
          if (qword_102419420 != -1) {
            dispatch_once(&qword_102419420, &stru_1023166C8);
          }
          long long v31 = qword_102419428;
          if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
          {
            double v32 = (double)(unint64_t)(*((void *)a1 + 2) - *((void *)a1 + 1)) * 0.000000953674316;
            *(_DWORD *)uint64_t buf = 134349569;
            *(void *)&uint8_t buf[4] = v58;
            __int16 v64 = 2050;
            *(double *)double v65 = v30;
            *(_WORD *)&v65[8] = 2049;
            *(double *)&v65[10] = v32;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "CLVLF,pushVIOEstimation,VIO buffer reached its maximum size,machAbsTime,%{public}.3lf,sizeInSec,%{public}.3lf,sizeInMB,%{private}.3lf", buf, 0x20u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419420 != -1) {
              dispatch_once(&qword_102419420, &stru_1023166C8);
            }
            double v39 = (double)(unint64_t)(*((void *)a1 + 2) - *((void *)a1 + 1)) * 0.000000953674316;
            int v47 = 134349569;
            uint64_t v48 = v58;
            __int16 v49 = 2050;
            double v50 = v30;
            __int16 v51 = 2049;
            double v52 = v39;
            double v40 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLVisionLocationFuser::pushVIOEstimation(const _CLVIOEstimation *const)", "%s\n", v40);
            if (v40 != buf) {
              free(v40);
            }
          }
          sub_1011A6818((uint64_t)a1, 0.3);
          unint64_t v28 = *((void *)a1 + 2);
        }
      }
      if (v28 >= *((void *)a1 + 3)) {
        uint64_t v33 = sub_1011B9BC8((uint64_t *)a1 + 1, v57);
      }
      else {
        uint64_t v33 = sub_1011B8DC4(v28, v57) + 1432;
      }
      *((void *)a1 + 2) = v33;
      atomic_store(0, a1 + 1);
    }
    else
    {
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      unsigned int v34 = qword_102419428;
      if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v35 = *((void *)a1 + 2);
        if (*((void *)a1 + 1) == v35) {
          unint64_t v36 = 0xBFF0000000000000;
        }
        else {
          unint64_t v36 = *(void *)(v35 - 1392);
        }
        *(_DWORD *)uint64_t buf = 134349312;
        *(void *)&uint8_t buf[4] = v58;
        __int16 v64 = 2050;
        *(void *)double v65 = v36;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "CLVLF,pushVIOEstimation,Invalid measurement,machAbsTime,%{public}.3lf,prevMachAbsTime,%{public}.3lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419420 != -1) {
          dispatch_once(&qword_102419420, &stru_1023166C8);
        }
        uint64_t v37 = *((void *)a1 + 2);
        if (*((void *)a1 + 1) == v37) {
          unint64_t v38 = 0xBFF0000000000000;
        }
        else {
          unint64_t v38 = *(void *)(v37 - 1392);
        }
        int v53 = 134349312;
        *(void *)uint64_t v54 = v58;
        *(_WORD *)&v54[8] = 2050;
        *(void *)&v54[10] = v38;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLVisionLocationFuser::pushVIOEstimation(const _CLVIOEstimation *const)", "%s\n", v15);
        goto LABEL_68;
      }
    }
  }
  else
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    uint64_t v16 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      int v17 = *a1;
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "CLVLF,pushVIOEstimation,activated,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      int v18 = *a1;
      LODWORD(v57[0]) = 67240192;
      DWORD1(v57[0]) = v18;
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLVisionLocationFuser::pushVIOEstimation(const _CLVIOEstimation *const)", "%s\n", v15);
      goto LABEL_68;
    }
  }
}

void sub_1011A6794(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

BOOL sub_1011A67A0(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a2 + 40);
  if (v2 <= 0.0) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (*(void *)(a1 + 8) != v4 && *(double *)(v4 - 1392) >= v2) {
    return 0;
  }
  if (!sub_1015986BC((unsigned char *)(a2 + 56))) {
    return 0;
  }

  return sub_1015986BC((unsigned char *)(a2 + 592));
}

void sub_1011A6818(uint64_t a1, double a2)
{
  unsigned __int8 v4 = atomic_exchange_explicit((atomic_uchar *volatile)(a1 + 1), 1u, memory_order_acquire);
  if ((v4 & 1) == 0)
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    uint64_t v5 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "CLVLF,removeAllVioDataForFirstNSeconds,Called without locking vision buffers", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      double v40 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLVisionLocationFuser::removeAllVioDataForFirstNSeconds(const CFTimeInterval)", "%s\n", v40);
      if (v40 != (char *)buf) {
        free(v40);
      }
    }
  }
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(long long **)(a1 + 16);
  if ((long long *)v7 != v6)
  {
    double v8 = *(double *)(v7 + 40) + a2;
    while (*(double *)(v7 + 40) >= v8)
    {
      v7 += 1432;
      if ((long long *)v7 == v6)
      {
        uint64_t v9 = *(void *)(a1 + 16);
        goto LABEL_20;
      }
    }
    if ((long long *)v7 == v6 || (long long *)(v7 + 1432) == v6)
    {
      uint64_t v9 = v7;
    }
    else
    {
      uint64_t v9 = v7;
      do
      {
        if (*(double *)(v7 + 1472) >= v8)
        {
          long long v10 = *(_OWORD *)(v7 + 1432);
          long long v11 = *(_OWORD *)(v7 + 1448);
          long long v12 = *(_OWORD *)(v7 + 1464);
          *(void *)(v9 + 48) = *(void *)(v7 + 1480);
          *(_OWORD *)(v9 + 16) = v11;
          *(_OWORD *)(v9 + 32) = v12;
          *(_OWORD *)uint64_t v9 = v10;
          *(unsigned char *)(v9 + 56) = *(unsigned char *)(v7 + 1488);
          long long v13 = *(_OWORD *)(v7 + 1504);
          long long v14 = *(_OWORD *)(v7 + 1520);
          *(void *)(v9 + 104) = *(void *)(v7 + 1536);
          *(_OWORD *)(v9 + 88) = v14;
          *(_OWORD *)(v9 + 72) = v13;
          long long v15 = *(_OWORD *)(v7 + 1584);
          long long v16 = *(_OWORD *)(v7 + 1600);
          long long v17 = *(_OWORD *)(v7 + 1616);
          *(_OWORD *)(v9 + 136) = *(_OWORD *)(v7 + 1568);
          *(_OWORD *)(v9 + 184) = v17;
          *(_OWORD *)(v9 + 168) = v16;
          *(_OWORD *)(v9 + 152) = v15;
          *(_OWORD *)(v9 + 120) = *(_OWORD *)(v7 + 1552);
          long long v18 = *(_OWORD *)(v7 + 1640);
          long long v19 = *(_OWORD *)(v7 + 1656);
          *(void *)(v9 + 240) = *(void *)(v7 + 1672);
          *(_OWORD *)(v9 + 208) = v18;
          *(_OWORD *)(v9 + 224) = v19;
          long long v20 = *(_OWORD *)(v7 + 1704);
          *(_OWORD *)(v9 + 256) = *(_OWORD *)(v7 + 1688);
          *(_OWORD *)(v9 + 272) = v20;
          memcpy((void *)(v9 + 296), (const void *)(v7 + 1728), 0x129uLL);
          long long v22 = *(_OWORD *)(v7 + 2040);
          long long v21 = *(_OWORD *)(v7 + 2056);
          *(void *)(v9 + 640) = *(void *)(v7 + 2072);
          *(_OWORD *)(v9 + 608) = v22;
          *(_OWORD *)(v9 + 624) = v21;
          long long v24 = *(_OWORD *)(v7 + 2104);
          long long v23 = *(_OWORD *)(v7 + 2120);
          long long v25 = *(_OWORD *)(v7 + 2152);
          *(_OWORD *)(v9 + 704) = *(_OWORD *)(v7 + 2136);
          *(_OWORD *)(v9 + 720) = v25;
          *(_OWORD *)(v9 + 672) = v24;
          *(_OWORD *)(v9 + 688) = v23;
          *(_OWORD *)(v9 + 656) = *(_OWORD *)(v7 + 2088);
          long long v26 = *(_OWORD *)(v7 + 2176);
          long long v27 = *(_OWORD *)(v7 + 2192);
          *(void *)(v9 + 776) = *(void *)(v7 + 2208);
          *(_OWORD *)(v9 + 760) = v27;
          *(_OWORD *)(v9 + 744) = v26;
          long long v28 = *(_OWORD *)(v7 + 2224);
          *(_OWORD *)(v9 + 808) = *(_OWORD *)(v7 + 2240);
          *(_OWORD *)(v9 + 792) = v28;
          memcpy((void *)(v9 + 832), (const void *)(v7 + 2264), 0x128uLL);
          long long v29 = *(_OWORD *)(v7 + 2568);
          *(_OWORD *)(v9 + 1152) = *(_OWORD *)(v7 + 2584);
          *(_OWORD *)(v9 + 1136) = v29;
          *(_OWORD *)(v9 + 1176) = *(_OWORD *)(v7 + 2608);
          long long v30 = *(_OWORD *)(v7 + 2640);
          long long v31 = *(_OWORD *)(v7 + 2656);
          long long v32 = *(_OWORD *)(v7 + 2672);
          *(_OWORD *)(v9 + 1192) = *(_OWORD *)(v7 + 2624);
          *(_OWORD *)(v9 + 1240) = v32;
          *(_OWORD *)(v9 + 1224) = v31;
          *(_OWORD *)(v9 + 1208) = v30;
          *(unsigned char *)(v9 + 1256) = *(unsigned char *)(v7 + 2688);
          long long v33 = *(_OWORD *)(v7 + 2704);
          *(_OWORD *)(v9 + 1288) = *(_OWORD *)(v7 + 2720);
          *(_OWORD *)(v9 + 1272) = v33;
          *(_OWORD *)(v9 + 1312) = *(_OWORD *)(v7 + 2744);
          long long v34 = *(_OWORD *)(v7 + 2792);
          long long v35 = *(_OWORD *)(v7 + 2808);
          long long v36 = *(_OWORD *)(v7 + 2776);
          *(_OWORD *)(v9 + 1328) = *(_OWORD *)(v7 + 2760);
          *(_OWORD *)(v9 + 1376) = v35;
          *(_OWORD *)(v9 + 1360) = v34;
          *(_OWORD *)(v9 + 1344) = v36;
          long long v37 = *(_OWORD *)(v7 + 2824);
          long long v38 = *(_OWORD *)(v7 + 2840);
          *(unsigned char *)(v9 + 1424) = *(unsigned char *)(v7 + 2856);
          *(_OWORD *)(v9 + 1408) = v38;
          *(_OWORD *)(v9 + 1392) = v37;
          v9 += 1432;
        }
        double v39 = (long long *)(v7 + 2864);
        v7 += 1432;
      }
      while (v39 != v6);
      uint64_t v6 = *(long long **)(a1 + 16);
    }
LABEL_20:
    sub_1011B7C38(a1 + 8, v9, v6);
  }
  if ((v4 & 1) == 0) {
    atomic_store(0, (unsigned __int8 *)(a1 + 1));
  }
}

void sub_1011A6C04(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_1011A6C10(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v3 = v1;
  if (!*v1)
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    long long v11 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      int v12 = *v3;
      LODWORD(v145) = 67240192;
      DWORD1(v145) = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "CLVLF,pushVLLocalizationResult,activated,%{public}d", (uint8_t *)&v145, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&v145, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      int v13 = *v3;
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v13;
      uint64_t v9 = (char *)&v145;
      long long v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLVisionLocationFuser::pushVLLocalizationResult(const _CLVLLocalizationResult *const)", "%s\n", v10);
      goto LABEL_108;
    }
    return;
  }
  unsigned __int8 v4 = v2;
  uint64_t v5 = *((void *)v1 + 1704);
  if (v5 != -1) {
    *((void *)v1 + 1704) = v5 + 1;
  }
  uint64_t v70 = (uint64_t)v1;
  char v81 = 1;
  sub_1011B8718((uint64_t)&v145);
  sub_1011B83D4((uint64_t)v198);
  sub_10159ACC8(v4, &v81, (uint64_t)buf);
  long long v145 = *(_OWORD *)buf;
  uint64_t v146 = *(void *)&buf[16];
  char v147 = LOBYTE(v95);
  long long v148 = v96;
  long long v149 = v97;
  long long v155 = v103;
  long long v154 = v102;
  long long v153 = v101;
  long long v152 = v100;
  long long v151 = v99;
  long long v156 = v104;
  long long v157 = v105;
  uint64_t v150 = v98;
  uint64_t v158 = v106;
  long long v159 = v107;
  long long v160 = v108;
  memcpy(v161, v109, sizeof(v161));
  char v162 = v109[296];
  long long v163 = v110;
  long long v164 = v111;
  uint64_t v165 = v112;
  long long v168 = v115;
  long long v169 = v116;
  long long v170 = v117;
  long long v166 = v113;
  long long v167 = v114;
  long long v171 = v118;
  long long v172 = v119;
  uint64_t v173 = v120;
  long long v174 = v121;
  long long v175 = v122;
  memcpy(v176, v123, 0x128uLL);
  long long v177 = v124;
  long long v178 = v125;
  double v179 = v126;
  char v180 = v127;
  long long v181 = v128;
  long long v182 = v129;
  char v183 = v130;
  long long v184 = v131;
  long long v185 = v132;
  uint64_t v186 = v133;
  long long v189 = v136;
  long long v190 = v137;
  long long v191 = v138;
  long long v187 = v134;
  long long v188 = v135;
  long long v192 = v139;
  long long v193 = v140;
  uint64_t v194 = v141;
  long long v196 = v143;
  long long v195 = v142;
  memcpy(v197, v144, sizeof(v197));
  if (!v81)
  {
    uint64_t v14 = v70;
    long long v15 = (unsigned __int8 *)(v70 + 1);
    sub_1011A3C3C((atomic_uchar *)(v70 + 1));
    if (sub_1011A7F00(v70, (uint64_t)&v145, (uint64_t)v198)) {
      sub_1011A8168(v70, 2.4);
    }
    atomic_store(0, v15);
    if (sub_1011A8564(v70, (uint64_t)&v145))
    {
      v76[0] = 1;
      int64x2_t v77 = vdupq_n_s64(3uLL);
      long long v78 = xmmword_101D07BB0;
      uint64_t v79 = (double *)v176;
      double v80 = &v176[120];
      sub_1011B9A58((uint64_t)v76, &dbl_101DAB830);
      double v16 = *v79 + v79[*((void *)&v78 + 1) + (void)v78] + v79[2 * *((void *)&v78 + 1) + 2 * (void)v78];
      double v17 = sqrt(v16);
      BOOL v19 = (v17 < 0.0 || ((*(void *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
         && (unint64_t)(*(void *)&v17 - 1) > 0xFFFFFFFFFFFFELL;
      if (!v19 && v17 < 0.0200712864)
      {
        *(double *)uint64_t buf = 0.000402856538 / v16;
        sub_1011B9A58((uint64_t)v76, (const double *)buf);
      }
      v71[0] = 1;
      int64x2_t v72 = vdupq_n_s64(3uLL);
      long long v73 = xmmword_101D07BB0;
      uint64_t v74 = (double *)&v176[168];
      char v75 = &v176[288];
      sub_1011B9A58((uint64_t)v71, &dbl_101DAB838);
      double v20 = *v74 + v74[*((void *)&v73 + 1) + (void)v73] + v74[2 * *((void *)&v73 + 1) + 2 * (void)v73];
      double v21 = sqrt(v20);
      BOOL v23 = (v21 < 0.0 || ((*(void *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
         && (unint64_t)(*(void *)&v21 - 1) > 0xFFFFFFFFFFFFELL;
      if (!v23 && v21 < 0.7)
      {
        *(double *)uint64_t buf = 0.49 / v20;
        sub_1011B9A58((uint64_t)v71, (const double *)buf);
      }
      sub_1011B8B90((uint64_t)buf, (long long *)(v70 + 11544));
      *(_OWORD *)(v70 + 11544) = v145;
      *(void *)(v70 + 11560) = v146;
      *(unsigned char *)(v70 + 11568) = v147;
      long long v24 = v149;
      *(_OWORD *)(v70 + 11584) = v148;
      *(_OWORD *)(v70 + 11600) = v24;
      *(void *)(v70 + 11616) = v150;
      *(_OWORD *)(v70 + 11696) = v155;
      long long v25 = v153;
      *(_OWORD *)(v70 + 11680) = v154;
      *(_OWORD *)(v70 + 11664) = v25;
      long long v26 = v151;
      *(_OWORD *)(v70 + 11648) = v152;
      *(_OWORD *)(v70 + 11632) = v26;
      long long v27 = v157;
      *(_OWORD *)(v70 + 11720) = v156;
      *(_OWORD *)(v70 + 11736) = v27;
      *(void *)(v70 + 11752) = v158;
      long long v28 = v160;
      *(_OWORD *)(v70 + 11768) = v159;
      *(_OWORD *)(v70 + 11784) = v28;
      memcpy((void *)(v70 + 11808), v161, 0x128uLL);
      long long v29 = v164;
      *(_OWORD *)(v70 + 12120) = v163;
      *(_OWORD *)(v70 + 12136) = v29;
      long long v30 = v169;
      *(_OWORD *)(v70 + 12200) = v168;
      *(_OWORD *)(v70 + 12216) = v30;
      *(_OWORD *)(v70 + 12232) = v170;
      long long v31 = v167;
      *(_OWORD *)(v70 + 12168) = v166;
      *(_OWORD *)(v70 + 12184) = v31;
      long long v32 = v171;
      *(_OWORD *)(v70 + 12272) = v172;
      *(_OWORD *)(v70 + 12256) = v32;
      long long v33 = v175;
      *(_OWORD *)(v70 + 12304) = v174;
      *(unsigned char *)(v70 + 12104) = v162;
      *(void *)(v70 + 12152) = v165;
      *(void *)(v70 + 12288) = v173;
      *(_OWORD *)(v70 + 12320) = v33;
      memcpy((void *)(v70 + 12344), v176, 0x128uLL);
      long long v34 = v178;
      *(_OWORD *)(v70 + 12648) = v177;
      *(_OWORD *)(v70 + 12664) = v34;
      long long v35 = v182;
      *(_OWORD *)(v70 + 12704) = v181;
      *(_OWORD *)(v70 + 12720) = v35;
      long long v36 = v184;
      *(_OWORD *)(v70 + 12768) = v185;
      *(_OWORD *)(v70 + 12752) = v36;
      long long v37 = v187;
      *(_OWORD *)(v70 + 12816) = v188;
      long long v38 = v190;
      *(_OWORD *)(v70 + 12832) = v189;
      *(double *)(v70 + 12680) = v179;
      *(unsigned char *)(v70 + 12688) = v180;
      *(unsigned char *)(v70 + 12736) = v183;
      *(void *)(v70 + 12784) = v186;
      *(_OWORD *)(v70 + 12848) = v38;
      *(_OWORD *)(v70 + 12864) = v191;
      *(_OWORD *)(v70 + 12800) = v37;
      long long v39 = v193;
      *(_OWORD *)(v70 + 12888) = v192;
      *(_OWORD *)(v70 + 12904) = v39;
      *(void *)(v70 + 12920) = v194;
      long long v40 = v195;
      *(_OWORD *)(v70 + 12952) = v196;
      *(_OWORD *)(v70 + 12936) = v40;
      memcpy((void *)(v70 + 12976), v197, 0x128uLL);
      if (*(double *)&buf[8] <= 0.0 || (sub_1011A8C0C(v70, (uint64_t)buf, (uint64_t)&v145) & 1) != 0)
      {
        sub_1011A3C3C((atomic_uchar *)v15);
        unint64_t v42 = *(void *)(v70 + 32);
        uint64_t v41 = *(void *)(v70 + 40);
        if (v42 != v41)
        {
          double v43 = *(double *)(v41 - 3152) - *(double *)(v42 + 8);
          unint64_t v42 = *(void *)(v70 + 40);
          if (v43 >= 10.0)
          {
            if (qword_102419420 != -1) {
              dispatch_once(&qword_102419420, &stru_1023166C8);
            }
            BOOL v44 = qword_102419428;
            if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
            {
              double v45 = (double)(0x80B70FBB5A19BE48 * ((uint64_t)(*(void *)(v70 + 16) - *(void *)(v70 + 8)) >> 3))
                  * 0.000000953674316;
              *(_DWORD *)int v88 = 134349569;
              uint64_t v89 = *((void *)&v145 + 1);
              __int16 v90 = 2050;
              double v91 = v43;
              __int16 v92 = 2049;
              double v93 = v45;
              _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "CLVLF,pushVLLocalizationResult,VL buffer reached its maximum size,machAbsTime,%{public}.3lf,sizeInSec,%{public}.3lf,sizeInMB,%{private}.3lf", v88, 0x20u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(v88, 0x65CuLL);
              if (qword_102419420 != -1) {
                dispatch_once(&qword_102419420, &stru_1023166C8);
              }
              double v66 = (double)(0x80B70FBB5A19BE48 * ((uint64_t)(*(void *)(v70 + 16) - *(void *)(v70 + 8)) >> 3))
                  * 0.000000953674316;
              int v82 = 134349569;
              uint64_t v83 = *((void *)&v145 + 1);
              __int16 v84 = 2050;
              double v85 = v43;
              __int16 v86 = 2049;
              double v87 = v66;
              long long v67 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLVisionLocationFuser::pushVLLocalizationResult(const _CLVLLocalizationResult *const)", "%s\n", v67);
              if (v67 != (char *)v88) {
                free(v67);
              }
              uint64_t v14 = v70;
            }
            sub_1011A8EAC(v14, 1.0);
            unint64_t v42 = *(void *)(v14 + 40);
          }
        }
        if (v42 >= *(void *)(v14 + 48))
        {
          uint64_t v49 = sub_1011B9D64((uint64_t *)(v70 + 32), &v145);
        }
        else
        {
          sub_1011B8B90(v42, &v145);
          sub_1011B8DC4(v42 + 1728, v198);
          uint64_t v49 = v42 + 3160;
        }
        *(void *)(v14 + 40) = v49;
        atomic_store(0, (unsigned __int8 *)(v14 + 1));
        if (qword_102419420 != -1) {
          dispatch_once(&qword_102419420, &stru_1023166C8);
        }
        double v50 = qword_102419428;
        if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
        {
          [v4 timestamp];
          *(_DWORD *)int v88 = 134349056;
          uint64_t v89 = v51;
          _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "CLVLF,pushVLLocalizationResult,VL added to queue,machAbsTime,%{public}.3lf", v88, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(v88, 0x65CuLL);
          if (qword_102419420 != -1) {
            dispatch_once(&qword_102419420, &stru_1023166C8);
          }
          [v4 timestamp];
          int v82 = 134349056;
          uint64_t v83 = v52;
          uint64_t v9 = (char *)v88;
          long long v10 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLVisionLocationFuser::pushVLLocalizationResult(const _CLVLLocalizationResult *const)", "%s\n", v10);
          goto LABEL_108;
        }
        return;
      }
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      int v53 = qword_102419428;
      if (!os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
      {
LABEL_84:
        if (!sub_10013D1A0(115, 0)) {
          return;
        }
        bzero(v88, 0x65CuLL);
        if (qword_102419420 != -1) {
          dispatch_once(&qword_102419420, &stru_1023166C8);
        }
        uint64_t v60 = *(void *)(v70 + 40);
        if (*(void *)(v70 + 32) == v60)
        {
          uint64_t v68 = *(void *)(v70 + 6760);
          if (*(void *)(v70 + 6752) == v68)
          {
            *(double *)&unint64_t v69 = -1.0;
            goto LABEL_107;
          }
          uint64_t v61 = (unint64_t *)(v68 - 2160);
        }
        else
        {
          uint64_t v61 = (unint64_t *)(v60 - 3152);
        }
        unint64_t v69 = *v61;
LABEL_107:
        int v82 = 134349568;
        uint64_t v83 = *((void *)&v145 + 1);
        __int16 v84 = 2050;
        double v85 = *(double *)&v69;
        __int16 v86 = 2050;
        double v87 = v179;
        uint64_t v9 = (char *)v88;
        long long v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLVisionLocationFuser::pushVLLocalizationResult(const _CLVLLocalizationResult *const)", "%s\n", v10);
LABEL_108:
        if (v10 != v9) {
          free(v10);
        }
        return;
      }
      uint64_t v54 = *(void *)(v70 + 40);
      if (*(void *)(v70 + 32) == v54)
      {
        uint64_t v58 = *(void *)(v70 + 6760);
        if (*(void *)(v70 + 6752) == v58)
        {
          *(double *)&unint64_t v59 = -1.0;
          goto LABEL_83;
        }
        double v55 = (unint64_t *)(v58 - 2160);
      }
      else
      {
        double v55 = (unint64_t *)(v54 - 3152);
      }
      unint64_t v59 = *v55;
LABEL_83:
      *(_DWORD *)int v88 = 134349568;
      uint64_t v89 = *((void *)&v145 + 1);
      __int16 v90 = 2050;
      double v91 = *(double *)&v59;
      __int16 v92 = 2050;
      double v93 = v179;
      _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "CLVLF,pushVLLocalizationResult,Invalid measurement,machAbsTime,%{public}.3lf,prevMachAbsTime,%{public}.3lf,confidence,%{public}.3lf,", v88, 0x20u);
      goto LABEL_84;
    }
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    char v46 = qword_102419428;
    if (!os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
LABEL_77:
      if (!sub_10013D1A0(115, 0)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      uint64_t v62 = *(void *)(v70 + 40);
      if (*(void *)(v70 + 32) == v62)
      {
        uint64_t v64 = *(void *)(v70 + 6760);
        if (*(void *)(v70 + 6752) == v64)
        {
          *(double *)&unint64_t v65 = -1.0;
          goto LABEL_97;
        }
        long long v63 = (unint64_t *)(v64 - 2160);
      }
      else
      {
        long long v63 = (unint64_t *)(v62 - 3152);
      }
      unint64_t v65 = *v63;
LABEL_97:
      *(_DWORD *)int v88 = 134349568;
      uint64_t v89 = *((void *)&v145 + 1);
      __int16 v90 = 2050;
      double v91 = *(double *)&v65;
      __int16 v92 = 2050;
      double v93 = v179;
      uint64_t v9 = buf;
      long long v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLVisionLocationFuser::pushVLLocalizationResult(const _CLVLLocalizationResult *const)", "%s\n", v10);
      goto LABEL_108;
    }
    uint64_t v47 = *(void *)(v70 + 40);
    if (*(void *)(v70 + 32) == v47)
    {
      uint64_t v56 = *(void *)(v70 + 6760);
      if (*(void *)(v70 + 6752) == v56)
      {
        unint64_t v57 = 0xBFF0000000000000;
        goto LABEL_76;
      }
      uint64_t v48 = (unint64_t *)(v56 - 2160);
    }
    else
    {
      uint64_t v48 = (unint64_t *)(v47 - 3152);
    }
    unint64_t v57 = *v48;
LABEL_76:
    *(_DWORD *)uint64_t buf = 134349568;
    *(void *)&uint8_t buf[4] = *((void *)&v145 + 1);
    *(_WORD *)&unsigned char buf[12] = 2050;
    *(void *)&unsigned char buf[14] = v57;
    *(_WORD *)&unsigned char buf[22] = 2050;
    double v95 = v179;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "CLVLF,pushVLLocalizationResult,Invalid measurement,machAbsTime,%{public}.3lf,prevMachAbsTime,%{public}.3lf,confidence,%{public}.3lf,", buf, 0x20u);
    goto LABEL_77;
  }
  if (qword_102419420 != -1) {
    dispatch_once(&qword_102419420, &stru_1023166C8);
  }
  uint64_t v6 = qword_102419428;
  if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
  {
    [v4 timestamp];
    *(_DWORD *)uint64_t buf = 134349056;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "CLVLF,pushVLLocalizationResult,Unable to construct VlfData,machAbsTime,%{public}.3lf", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    [v4 timestamp];
    *(_DWORD *)int v88 = 134349056;
    uint64_t v89 = v8;
    uint64_t v9 = buf;
    long long v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLVisionLocationFuser::pushVLLocalizationResult(const _CLVLLocalizationResult *const)", "%s\n", v10);
    goto LABEL_108;
  }
}

void sub_1011A7D34(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_1011A7D40(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  long long v5 = *(long long *)((char *)a2 + 40);
  long long v6 = *(long long *)((char *)a2 + 56);
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  *(_OWORD *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 40) = v5;
  long long v7 = *(long long *)((char *)a2 + 120);
  long long v8 = *(long long *)((char *)a2 + 136);
  long long v9 = *(long long *)((char *)a2 + 152);
  *(_OWORD *)(a1 + 104) = *(long long *)((char *)a2 + 104);
  *(_OWORD *)(a1 + 152) = v9;
  *(_OWORD *)(a1 + 136) = v8;
  *(_OWORD *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 88) = *(long long *)((char *)a2 + 88);
  long long v10 = a2[11];
  long long v11 = a2[12];
  *(void *)(a1 + 208) = *((void *)a2 + 26);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  long long v12 = a2[15];
  *(_OWORD *)(a1 + 224) = a2[14];
  *(_OWORD *)(a1 + 240) = v12;
  memcpy((void *)(a1 + 264), (char *)a2 + 264, 0x128uLL);
  *(unsigned char *)(a1 + 560) = *((unsigned char *)a2 + 560);
  long long v14 = a2[36];
  long long v13 = a2[37];
  *(void *)(a1 + 608) = *((void *)a2 + 76);
  *(_OWORD *)(a1 + 576) = v14;
  *(_OWORD *)(a1 + 592) = v13;
  long long v16 = a2[40];
  long long v15 = a2[41];
  long long v17 = a2[43];
  *(_OWORD *)(a1 + 672) = a2[42];
  *(_OWORD *)(a1 + 688) = v17;
  *(_OWORD *)(a1 + 640) = v16;
  *(_OWORD *)(a1 + 656) = v15;
  *(_OWORD *)(a1 + 624) = a2[39];
  long long v18 = *(long long *)((char *)a2 + 712);
  long long v19 = *(long long *)((char *)a2 + 728);
  *(void *)(a1 + 744) = *((void *)a2 + 93);
  *(_OWORD *)(a1 + 728) = v19;
  *(_OWORD *)(a1 + 712) = v18;
  long long v20 = *(long long *)((char *)a2 + 760);
  *(_OWORD *)(a1 + 776) = *(long long *)((char *)a2 + 776);
  *(_OWORD *)(a1 + 760) = v20;
  memcpy((void *)(a1 + 800), a2 + 50, 0x128uLL);
  long long v21 = a2[69];
  *(_OWORD *)(a1 + 1120) = a2[70];
  *(_OWORD *)(a1 + 1104) = v21;
  char v22 = *((unsigned char *)a2 + 1144);
  *(void *)(a1 + 1136) = *((void *)a2 + 142);
  *(unsigned char *)(a1 + 1144) = v22;
  long long v23 = *(long long *)((char *)a2 + 1176);
  *(_OWORD *)(a1 + 1160) = *(long long *)((char *)a2 + 1160);
  *(_OWORD *)(a1 + 1176) = v23;
  *(unsigned char *)(a1 + 1192) = *((unsigned char *)a2 + 1192);
  long long v25 = *(long long *)((char *)a2 + 1208);
  long long v24 = *(long long *)((char *)a2 + 1224);
  *(void *)(a1 + 1240) = *((void *)a2 + 155);
  *(_OWORD *)(a1 + 1208) = v25;
  *(_OWORD *)(a1 + 1224) = v24;
  long long v27 = *(long long *)((char *)a2 + 1272);
  long long v26 = *(long long *)((char *)a2 + 1288);
  long long v28 = *(long long *)((char *)a2 + 1320);
  *(_OWORD *)(a1 + 1304) = *(long long *)((char *)a2 + 1304);
  *(_OWORD *)(a1 + 1320) = v28;
  *(_OWORD *)(a1 + 1272) = v27;
  *(_OWORD *)(a1 + 1288) = v26;
  *(_OWORD *)(a1 + 1256) = *(long long *)((char *)a2 + 1256);
  long long v29 = a2[84];
  long long v30 = a2[85];
  *(void *)(a1 + 1376) = *((void *)a2 + 172);
  *(_OWORD *)(a1 + 1360) = v30;
  *(_OWORD *)(a1 + 1344) = v29;
  long long v31 = a2[87];
  *(_OWORD *)(a1 + 1408) = a2[88];
  *(_OWORD *)(a1 + 1392) = v31;
  memcpy((void *)(a1 + 1432), (char *)a2 + 1432, 0x128uLL);
  return a1;
}

BOOL sub_1011A7F00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6 = atomic_exchange_explicit((atomic_uchar *volatile)(a1 + 1), 1u, memory_order_acquire);
  if ((v6 & 1) == 0)
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    long long v7 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "CLVLF,synchronizeVioDataAt,Called without locking vision buffers", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      long long v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionLocationFuser::synchronizeVioDataAt(const CLVisionTime &, fusion::VioData &)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
  }
  long long v8 = *(_OWORD *)a2;
  *(void *)(a3 + 48) = *(void *)(a2 + 16);
  *(_OWORD *)(a3 + 32) = v8;
  *(unsigned char *)(a3 + 1424) = 0;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (0xED6866F8D962AE7BLL * ((v9 - v10) >> 3) <= 1) {
    goto LABEL_13;
  }
  double v11 = *(double *)(a2 + 8);
  if (*(double *)(v10 + 40) > v11) {
    goto LABEL_13;
  }
  double v12 = *(double *)(v9 - 1392);
  if (v12 >= v11)
  {
    BOOL result = sub_1011B5FA8(a1, a2, a3);
    goto LABEL_14;
  }
  if (v12 < v11 + -0.6) {
LABEL_13:
  }
    BOOL result = 0;
  else {
    BOOL result = sub_1011B6C1C(a1, (long long *)a2, a3);
  }
LABEL_14:
  if ((v6 & 1) == 0) {
    atomic_store(0, (unsigned __int8 *)(a1 + 1));
  }
  return result;
}

void sub_1011A815C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_1011A8168(uint64_t a1, double a2)
{
  unsigned __int8 v4 = atomic_exchange_explicit((atomic_uchar *volatile)(a1 + 1), 1u, memory_order_acquire);
  if ((v4 & 1) == 0)
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    long long v5 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "CLVLF,removeAllVioDataExceptLastNSeconds,Called without locking vision buffers", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      long long v40 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLVisionLocationFuser::removeAllVioDataExceptLastNSeconds(const CFTimeInterval)", "%s\n", v40);
      if (v40 != (char *)buf) {
        free(v40);
      }
    }
  }
  uint64_t v7 = *(void *)(a1 + 8);
  unsigned __int8 v6 = *(long long **)(a1 + 16);
  if ((long long *)v7 != v6)
  {
    double v8 = *((double *)v6 - 174) - a2;
    while (*(double *)(v7 + 40) >= v8)
    {
      v7 += 1432;
      if ((long long *)v7 == v6)
      {
        uint64_t v9 = *(void *)(a1 + 16);
        goto LABEL_20;
      }
    }
    if ((long long *)v7 == v6 || (long long *)(v7 + 1432) == v6)
    {
      uint64_t v9 = v7;
    }
    else
    {
      uint64_t v9 = v7;
      do
      {
        if (*(double *)(v7 + 1472) >= v8)
        {
          long long v10 = *(_OWORD *)(v7 + 1432);
          long long v11 = *(_OWORD *)(v7 + 1448);
          long long v12 = *(_OWORD *)(v7 + 1464);
          *(void *)(v9 + 48) = *(void *)(v7 + 1480);
          *(_OWORD *)(v9 + 16) = v11;
          *(_OWORD *)(v9 + 32) = v12;
          *(_OWORD *)uint64_t v9 = v10;
          *(unsigned char *)(v9 + 56) = *(unsigned char *)(v7 + 1488);
          long long v13 = *(_OWORD *)(v7 + 1504);
          long long v14 = *(_OWORD *)(v7 + 1520);
          *(void *)(v9 + 104) = *(void *)(v7 + 1536);
          *(_OWORD *)(v9 + 88) = v14;
          *(_OWORD *)(v9 + 72) = v13;
          long long v15 = *(_OWORD *)(v7 + 1584);
          long long v16 = *(_OWORD *)(v7 + 1600);
          long long v17 = *(_OWORD *)(v7 + 1616);
          *(_OWORD *)(v9 + 136) = *(_OWORD *)(v7 + 1568);
          *(_OWORD *)(v9 + 184) = v17;
          *(_OWORD *)(v9 + 168) = v16;
          *(_OWORD *)(v9 + 152) = v15;
          *(_OWORD *)(v9 + 120) = *(_OWORD *)(v7 + 1552);
          long long v18 = *(_OWORD *)(v7 + 1640);
          long long v19 = *(_OWORD *)(v7 + 1656);
          *(void *)(v9 + 240) = *(void *)(v7 + 1672);
          *(_OWORD *)(v9 + 208) = v18;
          *(_OWORD *)(v9 + 224) = v19;
          long long v20 = *(_OWORD *)(v7 + 1704);
          *(_OWORD *)(v9 + 256) = *(_OWORD *)(v7 + 1688);
          *(_OWORD *)(v9 + 272) = v20;
          memcpy((void *)(v9 + 296), (const void *)(v7 + 1728), 0x129uLL);
          long long v22 = *(_OWORD *)(v7 + 2040);
          long long v21 = *(_OWORD *)(v7 + 2056);
          *(void *)(v9 + 640) = *(void *)(v7 + 2072);
          *(_OWORD *)(v9 + 608) = v22;
          *(_OWORD *)(v9 + 624) = v21;
          long long v24 = *(_OWORD *)(v7 + 2104);
          long long v23 = *(_OWORD *)(v7 + 2120);
          long long v25 = *(_OWORD *)(v7 + 2152);
          *(_OWORD *)(v9 + 704) = *(_OWORD *)(v7 + 2136);
          *(_OWORD *)(v9 + 720) = v25;
          *(_OWORD *)(v9 + 672) = v24;
          *(_OWORD *)(v9 + 688) = v23;
          *(_OWORD *)(v9 + 656) = *(_OWORD *)(v7 + 2088);
          long long v26 = *(_OWORD *)(v7 + 2176);
          long long v27 = *(_OWORD *)(v7 + 2192);
          *(void *)(v9 + 776) = *(void *)(v7 + 2208);
          *(_OWORD *)(v9 + 760) = v27;
          *(_OWORD *)(v9 + 744) = v26;
          long long v28 = *(_OWORD *)(v7 + 2224);
          *(_OWORD *)(v9 + 808) = *(_OWORD *)(v7 + 2240);
          *(_OWORD *)(v9 + 792) = v28;
          memcpy((void *)(v9 + 832), (const void *)(v7 + 2264), 0x128uLL);
          long long v29 = *(_OWORD *)(v7 + 2568);
          *(_OWORD *)(v9 + 1152) = *(_OWORD *)(v7 + 2584);
          *(_OWORD *)(v9 + 1136) = v29;
          *(_OWORD *)(v9 + 1176) = *(_OWORD *)(v7 + 2608);
          long long v30 = *(_OWORD *)(v7 + 2640);
          long long v31 = *(_OWORD *)(v7 + 2656);
          long long v32 = *(_OWORD *)(v7 + 2672);
          *(_OWORD *)(v9 + 1192) = *(_OWORD *)(v7 + 2624);
          *(_OWORD *)(v9 + 1240) = v32;
          *(_OWORD *)(v9 + 1224) = v31;
          *(_OWORD *)(v9 + 1208) = v30;
          *(unsigned char *)(v9 + 1256) = *(unsigned char *)(v7 + 2688);
          long long v33 = *(_OWORD *)(v7 + 2704);
          *(_OWORD *)(v9 + 1288) = *(_OWORD *)(v7 + 2720);
          *(_OWORD *)(v9 + 1272) = v33;
          *(_OWORD *)(v9 + 1312) = *(_OWORD *)(v7 + 2744);
          long long v34 = *(_OWORD *)(v7 + 2792);
          long long v35 = *(_OWORD *)(v7 + 2808);
          long long v36 = *(_OWORD *)(v7 + 2776);
          *(_OWORD *)(v9 + 1328) = *(_OWORD *)(v7 + 2760);
          *(_OWORD *)(v9 + 1376) = v35;
          *(_OWORD *)(v9 + 1360) = v34;
          *(_OWORD *)(v9 + 1344) = v36;
          long long v37 = *(_OWORD *)(v7 + 2824);
          long long v38 = *(_OWORD *)(v7 + 2840);
          *(unsigned char *)(v9 + 1424) = *(unsigned char *)(v7 + 2856);
          *(_OWORD *)(v9 + 1408) = v38;
          *(_OWORD *)(v9 + 1392) = v37;
          v9 += 1432;
        }
        long long v39 = (long long *)(v7 + 2864);
        v7 += 1432;
      }
      while (v39 != v6);
      unsigned __int8 v6 = *(long long **)(a1 + 16);
    }
LABEL_20:
    sub_1011B7C38(a1 + 8, v9, v6);
  }
  if ((v4 & 1) == 0) {
    atomic_store(0, (unsigned __int8 *)(a1 + 1));
  }
}

void sub_1011A8558(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

BOOL sub_1011A8564(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a2 + 8);
  if (v2 <= 0.0) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32) != v5 && *(double *)(v5 - 3152) >= v2) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 6760);
  if (*(void *)(a1 + 6752) != v6 && *(double *)(v6 - 2160) >= v2 + 2.4) {
    return 0;
  }
  double v7 = *(double *)(a2 + 1136);
  if ((*(void *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
    return 0;
  }
  if (v7 < 0.6827 || v7 > 1.0) {
    return 0;
  }
  if (sub_1015986BC((unsigned char *)(a2 + 24)))
  {
    double v10 = *(double *)(a1 + 13288);
    if (v10 <= 0.0 || vabdd_f64(v10, *(double *)(a2 + 8)) > 6.0) {
      return 1;
    }
    sub_1011B8B90((uint64_t)buf, (long long *)a2);
    if (sub_10159A928((uint64_t)buf))
    {
      double v14 = hypot(__x, __y);
      if (*(double *)&qword_102485EA0 * *(double *)(a1 + 13384) >= 64.0) {
        double v15 = *(double *)&qword_102485EA0 * *(double *)(a1 + 13384);
      }
      else {
        double v15 = 64.0;
      }
      if (v14 <= v15)
      {
        double v18 = fabs(v28);
        if (*(double *)&qword_102485EA8 * *(double *)(a1 + 13392) >= 48.0) {
          double v19 = *(double *)&qword_102485EA8 * *(double *)(a1 + 13392);
        }
        else {
          double v19 = 48.0;
        }
        if (v18 <= v19) {
          return 1;
        }
        if (qword_102419420 != -1) {
          dispatch_once(&qword_102419420, &stru_1023166C8);
        }
        long long v20 = qword_102419428;
        if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long v21 = 134283777;
          double v22 = v18;
          __int16 v23 = 2049;
          double v24 = v19;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "CLVLF,isValid,Invalid VL,CL-VL vertical distance,%{private}.3lf,vertDistThres,%{private}.3lf", v21, 0x16u);
        }
        if (!sub_10013D1A0(115, 0)) {
          return 0;
        }
        bzero(v21, 0x65CuLL);
        if (qword_102419420 == -1) {
          goto LABEL_45;
        }
      }
      else
      {
        if (qword_102419420 != -1) {
          dispatch_once(&qword_102419420, &stru_1023166C8);
        }
        long long v16 = qword_102419428;
        if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long v21 = 134283777;
          double v22 = v14;
          __int16 v23 = 2049;
          double v24 = v15;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "CLVLF,isValid,Invalid VL,CL-VL horizontal distance,%{private}.3lf,horzDistThres,%{private}.3lf", v21, 0x16u);
        }
        if (!sub_10013D1A0(115, 0)) {
          return 0;
        }
        bzero(v21, 0x65CuLL);
        if (qword_102419420 == -1) {
          goto LABEL_45;
        }
      }
    }
    else
    {
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      long long v17 = qword_102419428;
      if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long v21 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "CLVLF,isValid,Invalid VL,Unable to compute ENU from ECEF", v21, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(v21, 0x65CuLL);
      if (qword_102419420 == -1) {
        goto LABEL_45;
      }
    }
    dispatch_once(&qword_102419420, &stru_1023166C8);
LABEL_45:
    long long v12 = v21;
    long long v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionLocationFuser::isValid(const fusion::VlfData &) const", "%s\n", v13);
LABEL_25:
    if (v13 != (char *)v12) {
      free(v13);
    }
    return 0;
  }
  if (qword_102419420 != -1) {
    dispatch_once(&qword_102419420, &stru_1023166C8);
  }
  long long v11 = qword_102419428;
  if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "CLVLF,isValid,Invalid VL,inf or nan value in estimates or covariance", buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    *(_WORD *)long long v21 = 0;
    long long v12 = buf;
    long long v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionLocationFuser::isValid(const fusion::VlfData &) const", "%s\n", v13);
    goto LABEL_25;
  }
  return result;
}

void sub_1011A8C00(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_1011A8C0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 6777) && !*(unsigned char *)(a1 + 6776)) {
    return 1;
  }
  uint64_t v3 = 0;
  double v4 = *(double *)(a3 + 8) - *(double *)(a2 + 8);
  long long v13 = off_102316AA0;
  long long v5 = *(_OWORD *)(a3 + 776);
  long long v14 = *(_OWORD *)(a3 + 760);
  long long v15 = v5;
  do
  {
    *(double *)&(&v13)[v3 + 1] = *(double *)&(&v13)[v3 + 1] - *(double *)(a2 + 760 + v3 * 8);
    ++v3;
  }
  while (v3 != 3);
  double v6 = fabs(v4);
  double v7 = *((double *)&v14 + 1) * *((double *)&v14 + 1)
     + *(double *)&v14 * *(double *)&v14
     + *(double *)&v15 * *(double *)&v15;
  double v8 = v6 * (v6 * 81.0);
  if (v7 <= 0.04 || v7 <= v8) {
    return 1;
  }
  if (qword_102419420 != -1) {
    dispatch_once(&qword_102419420, &stru_1023166C8);
  }
  long long v11 = qword_102419428;
  if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 134283777;
    double v21 = sqrt(v7);
    __int16 v22 = 2049;
    double v23 = sqrt(v8);
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "CLVLF,isValid,Invalid VL,VL-VL distance,%{private}.3lf,distThres,%{private}.3lf", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    int v16 = 134283777;
    double v17 = sqrt(v7);
    __int16 v18 = 2049;
    double v19 = sqrt(v8);
    long long v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionLocationFuser::isValid(const fusion::VlfData &, const fusion::VlfData &) const", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  return 0;
}

void sub_1011A8EA0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_1011A8EAC(uint64_t a1, double a2)
{
  unsigned __int8 v4 = atomic_exchange_explicit((atomic_uchar *volatile)(a1 + 1), 1u, memory_order_acquire);
  if ((v4 & 1) == 0)
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    long long v5 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "CLVLF,removeAllVlfDataForFirstNSeconds,Called without locking vision buffers", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      double v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLVisionLocationFuser::removeAllVlfDataForFirstNSeconds(const CFTimeInterval)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  if (v7 != v6)
  {
    double v8 = *(double *)(v7 + 8) + a2;
    while (*(double *)(v7 + 8) >= v8)
    {
      v7 += 3160;
      if (v7 == v6)
      {
        uint64_t v7 = *(void *)(a1 + 40);
        goto LABEL_18;
      }
    }
    if (v7 != v6)
    {
      uint64_t v9 = v7 + 3160;
      if (v7 + 3160 != v6)
      {
        do
        {
          if (*(double *)(v9 + 8) >= v8)
          {
            sub_1011BA11C(v7, v9);
            v7 += 3160;
          }
          v9 += 3160;
        }
        while (v9 != v6);
        uint64_t v6 = *(void *)(a1 + 40);
      }
    }
LABEL_18:
    sub_1011B1DB0(a1 + 32, v7, v6);
  }
  if ((v4 & 1) == 0) {
    atomic_store(0, (unsigned __int8 *)(a1 + 1));
  }
}

void sub_1011A90F8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_1011A9104(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (!*a1)
  {
    double v6 = *((double *)a1 + 1444);
    double v7 = vabdd_f64(*(double *)(a3 + 32), v6);
    if (v6 <= 0.0 || v7 > 24.0)
    {
      if (v6 > 0.0)
      {
        if (qword_102419420 != -1) {
          dispatch_once(&qword_102419420, &stru_1023166C8);
        }
        uint64_t v9 = qword_102419428;
        if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
        {
          uint64_t v10 = *(void *)(a3 + 32);
          int v11 = *a1;
          uint64_t v12 = *((void *)a1 + 1444);
          *(_DWORD *)uint64_t buf = 134349568;
          *(void *)&uint8_t buf[4] = v10;
          *(_WORD *)&unsigned char buf[12] = 1026;
          *(_DWORD *)&unsigned char buf[14] = v11;
          *(_WORD *)&unsigned char buf[18] = 2050;
          *(void *)&uint8_t buf[20] = v12;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "CLVLF,pushLocation,Filter reset,this should not happen,machAbsTime,%{public}.3lf,activated,%{public}d,lastValidVlf,%{public}.3lf", buf, 0x1Cu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419420 != -1) {
            dispatch_once(&qword_102419420, &stru_1023166C8);
          }
          uint64_t v42 = *(void *)(a3 + 32);
          int v43 = *a1;
          uint64_t v44 = *((void *)a1 + 1444);
          *(_DWORD *)unint64_t v57 = 134349568;
          *(void *)&v57[4] = v42;
          *(_WORD *)&v57[12] = 1026;
          *(_DWORD *)&v57[14] = v43;
          *(_WORD *)&v57[18] = 2050;
          *(void *)&v57[20] = v44;
          double v45 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLVisionLocationFuser::pushLocation(const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v45);
          if (v45 != buf) {
            free(v45);
          }
        }
        sub_1011A3C3C((atomic_uchar *)a1 + 1);
        sub_1011A3C74((uint64_t)a1, 1);
        atomic_store(0, a1 + 1);
      }
      return;
    }
  }
  char v50 = 1;
  sub_1011B8A70((uint64_t)buf);
  sub_1011B83D4((uint64_t)v97);
  sub_10159B18C(a2, a3, &v50, (uint64_t)v57);
  *(_OWORD *)uint64_t buf = *(_OWORD *)v57;
  *(_OWORD *)&uint8_t buf[16] = *(_OWORD *)&v57[16];
  long long v78 = v58;
  long long v79 = v59;
  long long v80 = v60;
  long long v81 = v61;
  unsigned __int8 v85 = v65;
  long long v84 = v64;
  long long v83 = v63;
  long long v82 = v62;
  long long v86 = v66;
  long long v87 = v67;
  long long v88 = v68;
  long long v89 = v69;
  long long v92 = v72;
  long long v93 = v73;
  long long v91 = v71;
  long long v90 = v70;
  uint64_t v96 = v76;
  long long v94 = v74;
  long long v95 = v75;
  if (!v50)
  {
    sub_1011A3C3C((atomic_uchar *)a1 + 1);
    if (sub_1011A7F00((uint64_t)a1, (uint64_t)&buf[8], (uint64_t)v97)) {
      sub_1011A8168((uint64_t)a1, 2.4);
    }
    atomic_store(0, a1 + 1);
    if (sub_1011A9AC4(a1, (uint64_t)buf))
    {
      if (((unint64_t)v82 & 0x7FFFFFFFFFFFFFFFLL) <= 0x7FEFFFFFFFFFFFFFLL
        && *(double *)&v82 > 0.0
        && *(double *)&v82 < 4.0)
      {
        *(void *)&long long v82 = 0x4010000000000000;
      }
      long long v17 = *(_OWORD *)&buf[16];
      *(_OWORD *)(a1 + 13272) = *(_OWORD *)buf;
      *(_OWORD *)(a1 + 13288) = v17;
      long long v18 = v79;
      *((_OWORD *)a1 + 832) = v78;
      *((_OWORD *)a1 + 833) = v18;
      long long v19 = v81;
      *(_OWORD *)(a1 + 13352) = v80;
      *(_OWORD *)(a1 + 13368) = v19;
      long long v20 = v82;
      long long v21 = v83;
      long long v22 = v84;
      a1[13432] = v85;
      *(_OWORD *)(a1 + 13400) = v21;
      *(_OWORD *)(a1 + 13416) = v22;
      *(_OWORD *)(a1 + 13384) = v20;
      long long v23 = v87;
      *(_OWORD *)(a1 + 13448) = v86;
      *(_OWORD *)(a1 + 13464) = v23;
      long long v24 = v88;
      *((_OWORD *)a1 + 844) = v89;
      *((_OWORD *)a1 + 843) = v24;
      long long v25 = v93;
      *(_OWORD *)(a1 + 13560) = v92;
      *(_OWORD *)(a1 + 13576) = v25;
      long long v26 = v94;
      long long v27 = v91;
      *(_OWORD *)(a1 + 13528) = v90;
      *(_OWORD *)(a1 + 13544) = v27;
      long long v28 = v95;
      *((void *)a1 + 1703) = v96;
      *(_OWORD *)(a1 + 13592) = v26;
      *(_OWORD *)(a1 + 13608) = v28;
      unint64_t v30 = *((void *)a1 + 7);
      uint64_t v29 = *((void *)a1 + 8);
      if (v30 != v29)
      {
        double v31 = *(double *)(v29 - 1776) - *(double *)(v30 + 16);
        unint64_t v30 = *((void *)a1 + 8);
        if (v31 >= 10.0)
        {
          if (qword_102419420 != -1) {
            dispatch_once(&qword_102419420, &stru_1023166C8);
          }
          long long v32 = qword_102419428;
          if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
          {
            double v33 = (double)(unint64_t)(*((void *)a1 + 8) - *((void *)a1 + 7)) * 0.000000953674316;
            *(_DWORD *)unint64_t v57 = 134349569;
            *(void *)&v57[4] = *(void *)&buf[16];
            *(_WORD *)&v57[12] = 2050;
            *(double *)&v57[14] = v31;
            *(_WORD *)&v57[22] = 2049;
            *(double *)&v57[24] = v33;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "CLVLF,pushLocation,LOC buffer reached its maximum size,machAbsTime,%{public}.3lf,sizeInSec,%{public}.3lf,sizeInMB,%{private}.3lf", v57, 0x20u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(v57, 0x65CuLL);
            if (qword_102419420 != -1) {
              dispatch_once(&qword_102419420, &stru_1023166C8);
            }
            double v48 = (double)(unint64_t)(*((void *)a1 + 8) - *((void *)a1 + 7)) * 0.000000953674316;
            int v51 = 134349569;
            uint64_t v52 = *(void *)&buf[16];
            __int16 v53 = 2050;
            double v54 = v31;
            __int16 v55 = 2049;
            double v56 = v48;
            uint64_t v49 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLVisionLocationFuser::pushLocation(const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v49);
            if (v49 != v57) {
              free(v49);
            }
          }
          sub_1011A9CCC((uint64_t)a1, 1.0);
          unint64_t v30 = *((void *)a1 + 8);
        }
      }
      if (v30 >= *((void *)a1 + 9))
      {
        uint64_t v34 = sub_1011B9F14((uint64_t *)a1 + 7, (uint64_t)buf);
      }
      else
      {
        sub_1011B8F30(v30, (uint64_t)buf);
        sub_1011B8DC4(v30 + 360, v97);
        uint64_t v34 = v30 + 1792;
      }
      *((void *)a1 + 8) = v34;
      sub_1011A9D90((uint64_t)a1);
      return;
    }
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    long long v35 = qword_102419428;
    if (!os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
LABEL_50:
      if (!sub_10013D1A0(115, 0)) {
        return;
      }
      bzero(v57, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      uint64_t v40 = *((void *)a1 + 8);
      if (*((void *)a1 + 7) == v40)
      {
        uint64_t v46 = *((void *)a1 + 845);
        if (*((void *)a1 + 844) == v46)
        {
          unint64_t v47 = 0xBFF0000000000000;
          goto LABEL_64;
        }
        uint64_t v41 = (unint64_t *)(v46 - 2160);
      }
      else
      {
        uint64_t v41 = (unint64_t *)(v40 - 1776);
      }
      unint64_t v47 = *v41;
LABEL_64:
      int v51 = 134349569;
      uint64_t v52 = *(void *)&buf[16];
      __int16 v53 = 2050;
      double v54 = *(double *)&v47;
      __int16 v55 = 1025;
      LODWORD(v56) = *(_DWORD *)buf;
      int v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLVisionLocationFuser::pushLocation(const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v16);
LABEL_65:
      if (v16 != v57) {
        free(v16);
      }
      return;
    }
    uint64_t v36 = *((void *)a1 + 8);
    if (*((void *)a1 + 7) == v36)
    {
      uint64_t v38 = *((void *)a1 + 845);
      if (*((void *)a1 + 844) == v38)
      {
        unint64_t v39 = 0xBFF0000000000000;
        goto LABEL_49;
      }
      long long v37 = (unint64_t *)(v38 - 2160);
    }
    else
    {
      long long v37 = (unint64_t *)(v36 - 1776);
    }
    unint64_t v39 = *v37;
LABEL_49:
    *(_DWORD *)unint64_t v57 = 134349569;
    *(void *)&v57[4] = *(void *)&buf[16];
    *(_WORD *)&v57[12] = 2050;
    *(void *)&v57[14] = v39;
    *(_WORD *)&v57[22] = 1025;
    *(_DWORD *)&v57[24] = *(_DWORD *)buf;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "CLVLF,pushLocation,Invalid measurement,machAbsTime,%{public}.3lf,prevMachAbsTime,%{public}.3lf,locationType,%{private}d", v57, 0x1Cu);
    goto LABEL_50;
  }
  if (qword_102419420 != -1) {
    dispatch_once(&qword_102419420, &stru_1023166C8);
  }
  long long v13 = qword_102419428;
  if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
  {
    uint64_t v14 = *(void *)(a3 + 32);
    *(_DWORD *)unint64_t v57 = 134349056;
    *(void *)&v57[4] = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "CLVLF,pushLocation,Unable to construct LocData,machAbsTime,%{public}.3lf", v57, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(v57, 0x65CuLL);
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    uint64_t v15 = *(void *)(a3 + 32);
    int v51 = 134349056;
    uint64_t v52 = v15;
    int v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLVisionLocationFuser::pushLocation(const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v16);
    goto LABEL_65;
  }
}

void sub_1011A9AB8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

BOOL sub_1011A9AC4(void *a1, uint64_t a2)
{
  if (*(_DWORD *)a2 != 11 && *(_DWORD *)a2 != 1) {
    return 0;
  }
  double v3 = *(double *)(a2 + 16);
  if (v3 <= 0.0)
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    double v7 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLVLF,isValid,Invalid CL,maybe a simulated location", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      double v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLVisionLocationFuser::isValid(const fusion::LocData &) const", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v4 = a1[8];
    if (a1[7] != v4 && *(double *)(v4 - 1776) >= v3) {
      return 0;
    }
    uint64_t v5 = a1[845];
    if (a1[844] != v5 && *(double *)(v5 - 2160) >= v3) {
      return 0;
    }
    return *(double *)(a2 + 120) > 0.0 || *(double *)(a2 + 112) > 0.0;
  }
  return result;
}

void sub_1011A9CC0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_1011A9CCC(uint64_t result, double a2)
{
  uint64_t v4 = *(void *)(result + 56);
  uint64_t v3 = *(void *)(result + 64);
  uint64_t v2 = result + 56;
  if (v4 != v3)
  {
    uint64_t v5 = result;
    double v6 = *(double *)(v4 + 16) + a2;
    while (*(double *)(v4 + 16) >= v6)
    {
      v4 += 1792;
      if (v4 == v3)
      {
        uint64_t v4 = *(void *)(result + 64);
        return sub_1011B1DF8(v2, v4, v3);
      }
    }
    if (v4 != v3)
    {
      uint64_t v7 = v4 + 1792;
      if (v4 + 1792 != v3)
      {
        do
        {
          if (*(double *)(v7 + 16) >= v6)
          {
            sub_1011B15C0(v4, v7);
            v4 += 1792;
          }
          v7 += 1792;
        }
        while (v7 != v3);
        uint64_t v3 = *(void *)(v5 + 64);
      }
    }
    return sub_1011B1DF8(v2, v4, v3);
  }
  return result;
}

void sub_1011A9D90(uint64_t a1)
{
  uint64_t v2 = (unsigned char *)(a1 + 6776);
  if (*(unsigned char *)(a1 + 6777))
  {
    if (!*(unsigned char *)(a1 + 6776)) {
      sub_1011A9ED8(a1);
    }
  }
  else if (!*(unsigned char *)(a1 + 6776))
  {
    sub_1011A9E6C(a1);
  }
  if (v2[1] || *v2)
  {
    if (*(unsigned char *)a1)
    {
      sub_1011AA1E8();
      sub_1011AB4A8();
    }
    else if (*(double *)(a1 + 11552) > 0.0)
    {
      sub_1011AC364(a1);
    }
  }
}

void sub_1011A9E6C(uint64_t a1)
{
  uint64_t v2 = (unsigned char *)(a1 + 6776);
  *(_WORD *)(a1 + 6776) = 0;
  sub_1011B1E40();
  if (!v2[1] && !*v2 && *(void *)(a1 + 13632) <= 1uLL)
  {
    sub_1011B32FC(a1);
  }
}

void sub_1011A9ED8(uint64_t a1)
{
  uint64_t v1 = (unsigned char *)(a1 + 6776);
  if (*(unsigned char *)(a1 + 6777))
  {
    if (!*v1)
    {
      uint64_t v3 = (unsigned __int8 *)(a1 + 1);
      sub_1011A3C3C((atomic_uchar *)(a1 + 1));
      uint64_t v4 = *(void *)(a1 + 32);
      uint64_t v5 = *(void *)(a1 + 40);
      atomic_store(0, v3);
      if (v4 != v5)
      {
        sub_1011B1E40();
        if (*v1)
        {
          v1[1] = 0;
          if (qword_102419420 != -1) {
            dispatch_once(&qword_102419420, &stru_1023166C8);
          }
          double v6 = qword_102419428;
          if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLVLF,reinitWithFrames,filter re-initialized with frames", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419420 == -1)
            {
LABEL_19:
              double v8 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLVisionLocationFuser::reinitWithFrames(const CLVisionTime &)", "%s\n", v8);
              if (v8 != (char *)buf) {
                free(v8);
              }
              return;
            }
LABEL_21:
            dispatch_once(&qword_102419420, &stru_1023166C8);
            goto LABEL_19;
          }
        }
        else
        {
          if (qword_102419420 != -1) {
            dispatch_once(&qword_102419420, &stru_1023166C8);
          }
          uint64_t v7 = qword_102419428;
          if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLVLF,reinitWithFrames,filter still with points init", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419420 == -1) {
              goto LABEL_19;
            }
            goto LABEL_21;
          }
        }
      }
    }
  }
}

void sub_1011AA1DC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_1011AA1E8()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v151 = v1;
  uint64_t v2 = v0;
  long long v114 = (unsigned char *)(v0 + 10704);
  long long v113 = (unsigned char *)(v0 + 10168);
  uint64_t v150 = (unsigned char *)(v0 + 9272);
  long long v149 = (unsigned char *)(v0 + 8736);
  long long v154 = (unsigned __int8 *)(v0 + 6776);
  uint64_t v112 = v0 + 10112;
  uint64_t v111 = v0 + 10184;
  long long v110 = (_OWORD *)(v0 + 10232);
  uint64_t v109 = v0 + 10320;
  long long v108 = (_OWORD *)(v0 + 10368);
  long long v107 = (void *)(v0 + 10408);
  uint64_t v106 = v0 + 10720;
  long long v105 = (_OWORD *)(v0 + 10768);
  uint64_t v104 = v0 + 10856;
  long long v103 = (_OWORD *)(v0 + 10904);
  long long v102 = (void *)(v0 + 10944);
  long long v101 = (_OWORD *)(v0 + 11248);
  long long v100 = (_OWORD *)(v0 + 11288);
  long long v99 = (_OWORD *)(v0 + 11384);
  uint64_t v98 = (_OWORD *)(v0 + 11424);
  uint64_t v97 = v0 + 11504;
  long long v148 = (long long *)(v0 + 13400);
  char v147 = (long long *)(v0 + 13416);
  long long v95 = (uint64_t *)(v0 + 6752);
  uint64_t v146 = (_OWORD *)(v0 + 7936);
  long long v145 = (_OWORD *)(v0 + 7976);
  __int16 v144 = (_OWORD *)(v0 + 8016);
  uint64_t v143 = v0 + 8048;
  long long v142 = (_OWORD *)(v0 + 8112);
  uint64_t v141 = (_OWORD *)(v0 + 8152);
  uint64_t v140 = v0 + 8272;
  long long v139 = (_OWORD *)(v0 + 8320);
  long long v138 = (_OWORD *)(v0 + 8360);
  long long v137 = (_OWORD *)(v0 + 8400);
  uint64_t v136 = v0 + 8432;
  long long v135 = (_OWORD *)(v0 + 8496);
  long long v134 = (_OWORD *)(v0 + 8536);
  uint64_t v133 = (_OWORD *)(v0 + 8576);
  uint64_t v132 = v0 + 8656;
  uint64_t v131 = v0 + 8680;
  uint64_t v130 = v0 + 8752;
  long long v129 = (_OWORD *)(v0 + 8800);
  uint64_t v128 = v0 + 8888;
  char v127 = (_OWORD *)(v0 + 8936);
  double v126 = (void *)(v0 + 8976);
  uint64_t v125 = v0 + 9288;
  long long v124 = (_OWORD *)(v0 + 9336);
  uint64_t v123 = v0 + 9424;
  long long v122 = (_OWORD *)(v0 + 9472);
  long long v121 = (void *)(v0 + 9512);
  uint64_t v120 = (_OWORD *)(v0 + 9816);
  long long v119 = (_OWORD *)(v0 + 9856);
  long long v118 = (_OWORD *)(v0 + 9952);
  long long v117 = (_OWORD *)(v0 + 9992);
  uint64_t v116 = v0 + 10072;
  long long v152 = (atomic_uchar *)(v0 + 1);
  uint64_t v96 = v0 + 3416;
  long long v115 = (_OWORD *)(v0 + 0x2000);
  while (1)
  {
    if (!v154[1] && !*v154) {
      return;
    }
    sub_1011A3C3C(v152);
    uint64_t v3 = *(void *)(v2 + 32);
    if (v3 == *(void *)(v2 + 40) || *(double *)(v3 + 8) > *(double *)(v151 + 8))
    {
      long long v83 = (unsigned __int8 *)v152;
      goto LABEL_70;
    }
    sub_1011B8B90((uint64_t)v177, *(long long **)(v2 + 32));
    sub_1011B8DC4((uint64_t)&v179, (long long *)(v3 + 1728));
    sub_1011BA0BC(*(void *)(v2 + 32) + 3160, *(void *)(v2 + 40), *(void *)(v2 + 32));
    *(void *)(v2 + 40) = v4;
    atomic_store(0, (unsigned __int8 *)(v2 + 1));
    double v5 = *(double *)(v2 + 2000);
    if (v5 > 0.0 && v230 != 0 && *(double *)&v180 != v5)
    {
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      long long v84 = qword_102419428;
      if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
      {
        uint64_t v85 = *(void *)(v2 + 2000);
        int v239 = 134349568;
        uint64_t v240 = *((void *)&v181 + 1);
        __int16 v241 = 2050;
        uint64_t v242 = v85;
        __int16 v243 = 2050;
        uint64_t v244 = v180;
        _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_ERROR, "CLVLF,fuseWithFrames,Filter reset,VIO session is re-initialized,machAbsTime,%{public}.3lf,prevOriginTimestamp,%{public}.3lf,currOriginTimestamp,%{public}.3lf", (uint8_t *)&v239, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_68;
      }
      bzero(&v239, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      uint64_t v86 = *(void *)(v2 + 2000);
      int v233 = 134349568;
      uint64_t v234 = *((void *)&v181 + 1);
      __int16 v235 = 2050;
      uint64_t v236 = v86;
      __int16 v237 = 2050;
      uint64_t v238 = v180;
      long long v87 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLVisionLocationFuser::fuseWithFrames(const CLVisionTime &)", "%s\n", v87);
LABEL_79:
      if (v87 != (char *)&v239) {
        free(v87);
      }
LABEL_68:
      sub_1011A3C3C(v152);
      uint64_t v81 = v2;
      int v82 = 1;
      goto LABEL_69;
    }
    double v8 = *(double *)(v2 + 10152);
    if (v8 > 0.0 && *((double *)&v181 + 1) >= v8 && *((double *)&v181 + 1) > v8 + 8.0)
    {
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      long long v91 = qword_102419428;
      if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
      {
        uint64_t v92 = *(void *)(v2 + 10152);
        int v239 = 134349568;
        uint64_t v240 = 0x4020000000000000;
        __int16 v241 = 2050;
        uint64_t v242 = *((void *)&v181 + 1);
        __int16 v243 = 2050;
        uint64_t v244 = v92;
        _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_ERROR, "CLVLF,fuseWithFrames,Filter reset,VIO measurements were unacceptable for %{public}.3lf sec,machAbsTime,%{public}.3lf,lastNominalVioMachAbsTime,%{public}.3lf", (uint8_t *)&v239, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_68;
      }
      bzero(&v239, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      uint64_t v94 = *(void *)(v2 + 10152);
      int v233 = 134349568;
      uint64_t v234 = 0x4020000000000000;
      __int16 v235 = 2050;
      uint64_t v236 = *((void *)&v181 + 1);
      __int16 v237 = 2050;
      uint64_t v238 = v94;
      long long v87 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLVisionLocationFuser::fuseWithFrames(const CLVisionTime &)", "%s\n", v87);
      goto LABEL_79;
    }
    if (*((double *)&v181 + 1) >= v8 && v230 && !v179)
    {
      long long v9 = v180;
      *(_OWORD *)uint64_t v112 = v179;
      *(_OWORD *)(v112 + 16) = v9;
      *(_OWORD *)(v112 + 32) = v181;
      *(void *)(v112 + 48) = v182;
      unsigned char *v113 = v183;
      long long v10 = v185;
      *(_OWORD *)uint64_t v111 = v184;
      *(_OWORD *)(v111 + 16) = v10;
      *(void *)(v111 + 32) = v186;
      long long v11 = v187;
      long long v12 = v188;
      long long v13 = v191;
      v110[3] = v190;
      v110[4] = v13;
      long long v14 = v189;
      v110[1] = v12;
      v110[2] = v14;
      *long long v110 = v11;
      long long v15 = v192;
      long long v16 = v193;
      *(void *)(v109 + 32) = v194;
      *(_OWORD *)uint64_t v109 = v15;
      *(_OWORD *)(v109 + 16) = v16;
      long long v17 = v196;
      *long long v108 = v195;
      v108[1] = v17;
      memcpy(v107, v197, 0x128uLL);
      *long long v114 = v198;
      long long v18 = v200;
      *(_OWORD *)uint64_t v106 = v199;
      *(_OWORD *)(v106 + 16) = v18;
      *(void *)(v106 + 32) = v201;
      long long v19 = v205;
      v105[2] = v204;
      v105[3] = v19;
      v105[4] = v206;
      long long v20 = v203;
      _OWORD *v105 = v202;
      v105[1] = v20;
      long long v21 = v208;
      *(_OWORD *)uint64_t v104 = v207;
      *(_OWORD *)(v104 + 16) = v21;
      *(void *)(v104 + 32) = v209;
      long long v22 = v211;
      *long long v103 = v210;
      v103[1] = v22;
      memcpy(v102, v212, 0x128uLL);
      long long v23 = v214;
      *long long v101 = v213;
      v101[1] = v23;
      long long v24 = v218;
      v100[2] = v217;
      v100[3] = v24;
      v100[4] = v219;
      long long v25 = v216;
      *long long v100 = v215;
      v100[1] = v25;
      v114[664] = v220;
      long long v26 = v222;
      *long long v99 = v221;
      v99[1] = v26;
      long long v27 = v226;
      v98[2] = v225;
      v98[3] = v27;
      v98[4] = v227;
      long long v28 = v224;
      *uint64_t v98 = v223;
      v98[1] = v28;
      long long v29 = v229;
      *(_OWORD *)uint64_t v97 = v228;
      *(_OWORD *)(v97 + 16) = v29;
      *(unsigned char *)(v97 + 32) = v230;
    }
    if (!sub_10159A928((uint64_t)v177)) {
      break;
    }
    char v176 = 1;
    sub_10159B84C((uint64_t)v177, &v176, (uint64_t)&v155);
    if (v176)
    {
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      long long v89 = qword_102419428;
      if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
      {
        int v239 = 134349056;
        uint64_t v240 = v178;
        _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_ERROR, "CLVLF,fuseWithFrames,Unable to convert VLF to LOC,machAbsTime,%{public}.3lf", (uint8_t *)&v239, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(&v239, 0x65CuLL);
        if (qword_102419420 != -1) {
          goto LABEL_81;
        }
        goto LABEL_61;
      }
      return;
    }
    LODWORD(v155) = *(_DWORD *)(v2 + 13272);
    long long v30 = *v147;
    long long v162 = *v148;
    long long v163 = v30;
    uint64_t v31 = *(void *)(v2 + 6752);
    sub_1011ACF20(v31 + 1544, (uint64_t)&v155, (uint64_t)&v155);
    for (uint64_t i = 0; i != 24; i += 8)
      *(double *)((char *)&v195 + i) = *(double *)((char *)&v195 + i) - *(double *)(v2 + i + 4544);
    sub_1011AD1FC(*(void *)(v2 + 6760) - 1432, (uint64_t)&v179, (uint64_t)&v179);
    sub_1011AD370(v31 + 1904, (uint64_t)&v179, (uint64_t)&v179);
    sub_1011B8120((uint64_t)&v239);
    sub_1011AD64C(v2, (uint64_t)&v155, (uint64_t)&v179, (uint64_t)&v239);
    int v153 = sub_1011AD978(v2, (uint64_t)v177, (uint64_t)&v239);
    long long v33 = v156;
    _OWORD *v146 = v155;
    v146[1] = v33;
    long long v34 = v158;
    *long long v145 = v157;
    v145[1] = v34;
    long long v35 = v160;
    *__int16 v144 = v159;
    v144[1] = v35;
    *(unsigned char *)(v143 + 48) = v164;
    long long v36 = v163;
    long long v37 = v161;
    *(_OWORD *)(v143 + 16) = v162;
    *(_OWORD *)(v143 + 32) = v36;
    *(_OWORD *)uint64_t v143 = v37;
    long long v38 = v166;
    *long long v142 = v165;
    v142[1] = v38;
    long long v39 = v168;
    *uint64_t v141 = v167;
    v141[1] = v39;
    long long v40 = v172;
    v115[2] = v171;
    v115[3] = v40;
    v115[4] = v173;
    long long v41 = v170;
    *long long v115 = v169;
    v115[1] = v41;
    *(void *)(v140 + 16) = v175;
    *(_OWORD *)uint64_t v140 = v174;
    *(_DWORD *)(v2 + 8296) = 0;
    sub_1011AE5B4((uint64_t)&v179, v154);
    sub_1011AE804((uint64_t)&v179, v154);
    sub_1011AEA90((uint64_t)v154, v42, v43, v44);
    sub_1011AEDC0(v2, (uint64_t)&v155);
    sub_1011AF8F0(v2, (uint64_t)&v179);
    long long v45 = v156;
    *long long v139 = v155;
    v139[1] = v45;
    long long v46 = v158;
    *long long v138 = v157;
    v138[1] = v46;
    long long v47 = v160;
    *long long v137 = v159;
    v137[1] = v47;
    *(unsigned char *)(v136 + 48) = v164;
    long long v48 = v163;
    long long v49 = v161;
    *(_OWORD *)(v136 + 16) = v162;
    *(_OWORD *)(v136 + 32) = v48;
    *(_OWORD *)uint64_t v136 = v49;
    long long v50 = v166;
    *long long v135 = v165;
    v135[1] = v50;
    long long v51 = v168;
    *long long v134 = v167;
    v134[1] = v51;
    long long v52 = v172;
    v133[2] = v171;
    v133[3] = v52;
    v133[4] = v173;
    long long v53 = v170;
    *uint64_t v133 = v169;
    v133[1] = v53;
    *(void *)(v132 + 16) = v175;
    *(_OWORD *)uint64_t v132 = v174;
    *(void *)(v131 + 48) = v182;
    long long v54 = v181;
    long long v55 = v179;
    *(_OWORD *)(v131 + 16) = v180;
    *(_OWORD *)(v131 + 32) = v54;
    *(_OWORD *)uint64_t v131 = v55;
    *long long v149 = v183;
    long long v56 = v185;
    *(_OWORD *)uint64_t v130 = v184;
    *(_OWORD *)(v130 + 16) = v56;
    *(void *)(v130 + 32) = v186;
    long long v57 = v187;
    long long v58 = v188;
    long long v59 = v191;
    v129[3] = v190;
    v129[4] = v59;
    long long v60 = v189;
    v129[1] = v58;
    v129[2] = v60;
    _OWORD *v129 = v57;
    long long v61 = v192;
    long long v62 = v193;
    *(void *)(v128 + 32) = v194;
    *(_OWORD *)uint64_t v128 = v61;
    *(_OWORD *)(v128 + 16) = v62;
    long long v63 = v196;
    *char v127 = v195;
    v127[1] = v63;
    memcpy(v126, v197, 0x128uLL);
    *uint64_t v150 = v198;
    long long v64 = v200;
    *(_OWORD *)uint64_t v125 = v199;
    *(_OWORD *)(v125 + 16) = v64;
    *(void *)(v125 + 32) = v201;
    long long v65 = v205;
    v124[2] = v204;
    v124[3] = v65;
    v124[4] = v206;
    long long v66 = v203;
    _OWORD *v124 = v202;
    v124[1] = v66;
    long long v67 = v208;
    *(_OWORD *)uint64_t v123 = v207;
    *(_OWORD *)(v123 + 16) = v67;
    *(void *)(v123 + 32) = v209;
    long long v68 = v211;
    *long long v122 = v210;
    v122[1] = v68;
    memcpy(v121, v212, 0x128uLL);
    long long v69 = v214;
    *uint64_t v120 = v213;
    v120[1] = v69;
    long long v70 = v218;
    v119[2] = v217;
    v119[3] = v70;
    v119[4] = v219;
    long long v71 = v216;
    _OWORD *v119 = v215;
    v119[1] = v71;
    v150[664] = v220;
    long long v72 = v222;
    _OWORD *v118 = v221;
    v118[1] = v72;
    long long v73 = v226;
    v117[2] = v225;
    v117[3] = v73;
    v117[4] = v227;
    long long v74 = v224;
    _OWORD *v117 = v223;
    v117[1] = v74;
    long long v75 = v229;
    *(_OWORD *)uint64_t v116 = v228;
    *(_OWORD *)(v116 + 16) = v75;
    *(unsigned char *)(v116 + 32) = v230;
    if (v153) {
      sub_1011AFD78(v96, (uint64_t)v154);
    }
    unint64_t v76 = *(void *)(v2 + 6760);
    uint64_t v77 = *(void *)(v2 + 6752);
    if ((unint64_t)(0x13A524387AC82261 * ((uint64_t)(v76 - v77) >> 3)) >= 4)
    {
      sub_1011BA318(v77 + 3336, *(void *)(v2 + 6760), v77);
      unint64_t v76 = v78;
      *(void *)(v2 + 6760) = v78;
    }
    if (v76 >= *(void *)(v2 + 6768))
    {
      uint64_t v79 = sub_1011BA378(v95, (uint64_t)v154);
    }
    else
    {
      sub_1011B9980(v76, (uint64_t)v154);
      uint64_t v79 = v76 + 3336;
    }
    *(void *)(v2 + 6760) = v79;
    if (!sub_1011AFF4C((void *)v2))
    {
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      long long v80 = qword_102419428;
      if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
      {
        int v233 = 134349056;
        uint64_t v234 = v178;
        _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_ERROR, "CLVLF,fuseWithFrames,Filter reset,unhealthy state,machAbsTime,%{public}.3lf", (uint8_t *)&v233, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(&v233, 0x65CuLL);
        if (qword_102419420 != -1) {
          dispatch_once(&qword_102419420, &stru_1023166C8);
        }
        int v231 = 134349056;
        uint64_t v232 = v178;
        long long v93 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLVisionLocationFuser::fuseWithFrames(const CLVisionTime &)", "%s\n", v93);
        if (v93 != (char *)&v233) {
          free(v93);
        }
      }
      sub_1011A3C3C(v152);
      uint64_t v81 = v2;
      int v82 = 0;
LABEL_69:
      sub_1011A3C74(v81, v82);
      long long v83 = (unsigned __int8 *)(v2 + 1);
LABEL_70:
      atomic_store(0, v83);
      return;
    }
  }
  if (qword_102419420 != -1) {
    dispatch_once(&qword_102419420, &stru_1023166C8);
  }
  long long v88 = qword_102419428;
  if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
  {
    int v239 = 134349056;
    uint64_t v240 = v178;
    _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_ERROR, "CLVLF,fuseWithFrames,Unable to compute VLF for ENU,machAbsTime,%{public}.3lf", (uint8_t *)&v239, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(&v239, 0x65CuLL);
    if (qword_102419420 == -1) {
      goto LABEL_61;
    }
LABEL_81:
    dispatch_once(&qword_102419420, &stru_1023166C8);
LABEL_61:
    int v233 = 134349056;
    uint64_t v234 = v178;
    long long v90 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLVisionLocationFuser::fuseWithFrames(const CLVisionTime &)", "%s\n", v90);
    if (v90 != (char *)&v239) {
      free(v90);
    }
  }
}

void sub_1011AB498(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1011AB4A8()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v1 = (unsigned __int8 *)(v0 + 6776);
  while (*(unsigned char *)(v0 + 6777) || *v1)
  {
    uint64_t v2 = *(void *)(v0 + 56);
    if (v2 == *(void *)(v0 + 64)) {
      break;
    }
    sub_1011B8F30((uint64_t)&v102, *(void *)(v0 + 56));
    sub_1011B8DC4((uint64_t)&v123, (long long *)(v2 + 360));
    sub_1011BA514(*(void *)(v0 + 56) + 1792, *(void *)(v0 + 64), *(void *)(v0 + 56));
    *(void *)(v0 + 64) = v3;
    double v4 = *(double *)(v0 + 2000);
    if (v4 > 0.0 && v172 != 0 && *(double *)&v124 != v4)
    {
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      long long v88 = qword_102419428;
      if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
      {
        uint64_t v89 = *(void *)(v0 + 2000);
        *(_DWORD *)__int16 v237 = 134349568;
        uint64_t v238 = *((void *)&v125 + 1);
        __int16 v239 = 2050;
        uint64_t v240 = v89;
        __int16 v241 = 2050;
        uint64_t v242 = v124;
        _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_ERROR, "CLVLF,fuseWithPoints,Filter reset,VIO session is re-initialized,machAbsTime,%{public}.3lf,prevOriginTimestamp,%{public}.3lf,currOriginTimestamp,%{public}.3lf", v237, 0x20u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(v237, 0x65CuLL);
        if (qword_102419420 != -1) {
          dispatch_once(&qword_102419420, &stru_1023166C8);
        }
        uint64_t v90 = *(void *)(v0 + 2000);
        *(_DWORD *)uint64_t buf = 134349568;
        uint64_t v208 = *((void *)&v125 + 1);
        __int16 v209 = 2050;
        *(void *)long long v210 = v90;
        *(_WORD *)&v210[8] = 2050;
        uint64_t v211 = v124;
        long long v91 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLVisionLocationFuser::fuseWithPoints()", "%s\n", v91);
        goto LABEL_90;
      }
      goto LABEL_80;
    }
    double v7 = *(double *)(v0 + 10152);
    if (v7 > 0.0 && *((double *)&v125 + 1) >= v7 && *((double *)&v125 + 1) > v7 + 8.0)
    {
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      uint64_t v97 = qword_102419428;
      if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
      {
        uint64_t v98 = *(void *)(v0 + 10152);
        *(_DWORD *)__int16 v237 = 134349568;
        uint64_t v238 = 0x4020000000000000;
        __int16 v239 = 2050;
        uint64_t v240 = *((void *)&v125 + 1);
        __int16 v241 = 2050;
        uint64_t v242 = v98;
        _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_ERROR, "CLVLF,fuseWithPoints,Filter reset,VIO measurements were unacceptable for %{public}.3lf sec,machAbsTime,%{public}.3lf,lastNominalVioMachAbsTime,%{public}.3lf", v237, 0x20u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(v237, 0x65CuLL);
        if (qword_102419420 != -1) {
          dispatch_once(&qword_102419420, &stru_1023166C8);
        }
        uint64_t v101 = *(void *)(v0 + 10152);
        *(_DWORD *)uint64_t buf = 134349568;
        uint64_t v208 = 0x4020000000000000;
        __int16 v209 = 2050;
        *(void *)long long v210 = *((void *)&v125 + 1);
        *(_WORD *)&v210[8] = 2050;
        uint64_t v211 = v101;
        long long v91 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLVisionLocationFuser::fuseWithPoints()", "%s\n", v91);
LABEL_90:
        if (v91 != (char *)v237) {
          free(v91);
        }
      }
LABEL_80:
      uint64_t v94 = (unsigned __int8 *)(v0 + 1);
      sub_1011A3C3C((atomic_uchar *)(v0 + 1));
      uint64_t v95 = v0;
      int v96 = 1;
LABEL_81:
      sub_1011A3C74(v95, v96);
      atomic_store(0, v94);
      return;
    }
    if (*((double *)&v125 + 1) >= v7 && v172 != 0 && v123 == 0)
    {
      long long v12 = v124;
      *(_OWORD *)(v0 + 10112) = v123;
      *(_OWORD *)(v0 + 10128) = v12;
      *(_OWORD *)(v0 + 10144) = v125;
      *(void *)(v0 + 10160) = v126;
      *(unsigned char *)(v0 + 10168) = v127;
      long long v13 = v129;
      *(_OWORD *)(v0 + 10184) = v128;
      *(_OWORD *)(v0 + 10200) = v13;
      *(void *)(v0 + 10216) = v130;
      long long v14 = v131;
      long long v15 = v132;
      long long v16 = v135;
      *(_OWORD *)(v0 + 10280) = v134;
      *(_OWORD *)(v0 + 10296) = v16;
      long long v17 = v133;
      *(_OWORD *)(v0 + 10248) = v15;
      *(_OWORD *)(v0 + 10264) = v17;
      *(_OWORD *)(v0 + 10232) = v14;
      long long v18 = v136;
      long long v19 = v137;
      *(void *)(v0 + 10352) = v138;
      *(_OWORD *)(v0 + 10320) = v18;
      *(_OWORD *)(v0 + 10336) = v19;
      long long v20 = v139[1];
      *(_OWORD *)(v0 + 10368) = v139[0];
      *(_OWORD *)(v0 + 10384) = v20;
      memcpy((void *)(v0 + 10408), v140, 0x128uLL);
      *(unsigned char *)(v0 + 10704) = v140[296];
      long long v21 = v142;
      *(_OWORD *)(v0 + 10720) = v141;
      *(_OWORD *)(v0 + 10736) = v21;
      *(void *)(v0 + 10752) = v143;
      long long v22 = v147;
      *(_OWORD *)(v0 + 10800) = v146;
      *(_OWORD *)(v0 + 10816) = v22;
      *(_OWORD *)(v0 + 10832) = v148;
      long long v23 = v145;
      *(_OWORD *)(v0 + 10768) = v144;
      *(_OWORD *)(v0 + 10784) = v23;
      long long v24 = v150;
      *(_OWORD *)(v0 + 10856) = v149;
      *(_OWORD *)(v0 + 10872) = v24;
      *(void *)(v0 + 10888) = v151;
      long long v25 = v153;
      *(_OWORD *)(v0 + 10904) = v152;
      *(_OWORD *)(v0 + 10920) = v25;
      memcpy((void *)(v0 + 10944), v154, 0x128uLL);
      long long v26 = v156;
      *(_OWORD *)(v0 + 11248) = v155;
      *(_OWORD *)(v0 + 11264) = v26;
      long long v27 = v160;
      *(_OWORD *)(v0 + 11320) = v159;
      *(_OWORD *)(v0 + 11336) = v27;
      *(_OWORD *)(v0 + 11352) = v161;
      long long v28 = v158;
      *(_OWORD *)(v0 + 11288) = v157;
      *(_OWORD *)(v0 + 11304) = v28;
      *(unsigned char *)(v0 + 11368) = v162;
      long long v29 = v164;
      *(_OWORD *)(v0 + 11384) = v163;
      *(_OWORD *)(v0 + 11400) = v29;
      long long v30 = v168;
      *(_OWORD *)(v0 + 11456) = v167;
      *(_OWORD *)(v0 + 11472) = v30;
      *(_OWORD *)(v0 + 11488) = v169;
      long long v31 = v166;
      *(_OWORD *)(v0 + 11424) = v165;
      *(_OWORD *)(v0 + 11440) = v31;
      long long v32 = v171;
      *(_OWORD *)(v0 + 11504) = v170;
      *(_OWORD *)(v0 + 11520) = v32;
      *(unsigned char *)(v0 + 11536) = v172;
    }
    uint64_t v33 = *(void *)(v0 + 6752);
    uint64_t v34 = *(void *)(v0 + 6760);
    sub_1011B03F8((uint64_t)v106, v34 - 1624, (uint64_t)&v102);
    sub_1011ACF20(v33 + 1544, (uint64_t)&v102, (uint64_t)&v102);
    for (uint64_t i = 0; i != 24; i += 8)
      *(double *)((char *)v139 + i) = *(double *)((char *)v139 + i) - *(double *)(v0 + i + 4544);
    sub_1011AD1FC(v34 - 1432, (uint64_t)&v123, (uint64_t)&v123);
    sub_1011AD370(v33 + 1904, (uint64_t)&v123, (uint64_t)&v123);
    sub_1011B8120((uint64_t)v237);
    sub_1011AD64C(v0, (uint64_t)&v102, (uint64_t)&v123, (uint64_t)v237);
    if (*(unsigned char *)(v0 + 6777) || *v1)
    {
      double v36 = *(double *)(v0 + 11552);
      BOOL v37 = v36 > 0.0;
    }
    else
    {
      BOOL v37 = 0;
      double v36 = *(double *)(v0 + 11552);
    }
    BOOL v38 = vabdd_f64(*(double *)&v103, v36) > 24.0 || v36 <= 0.0;
    BOOL v39 = sub_1011B073C((uint64_t)&v102);
    BOOL v40 = v39;
    if (v37 && !v38 || v39)
    {
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      double v42 = qword_102419428;
      if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v43 = *(void *)(v0 + 6936);
        uint64_t v44 = *(void *)(v0 + 6944);
        uint64_t v45 = *(void *)(v0 + 6952);
        double v46 = *(double *)(v0 + 6960) * 57.2957795;
        uint64_t v47 = *(void *)(v0 + 6984);
        uint64_t v48 = *(void *)(v0 + 6992);
        uint64_t v49 = *(void *)(v0 + 7000);
        uint64_t v50 = *(void *)(v0 + 7024);
        uint64_t v51 = *(void *)(v0 + 7080);
        uint64_t v52 = *(void *)(v0 + 7136);
        uint64_t v53 = *(void *)(v0 + 7192);
        uint64_t v54 = *(void *)(v0 + 7248);
        uint64_t v55 = *(void *)(v0 + 7304);
        *(_DWORD *)uint64_t buf = 134353153;
        uint64_t v208 = v103;
        __int16 v209 = 1026;
        *(_DWORD *)long long v210 = v37;
        *(_WORD *)&v210[4] = 1026;
        *(_DWORD *)&v210[6] = v38;
        LOWORD(v211) = 1026;
        *(_DWORD *)((char *)&v211 + 2) = v40;
        HIWORD(v211) = 2049;
        uint64_t v212 = v43;
        __int16 v213 = 2049;
        uint64_t v214 = v44;
        __int16 v215 = 2049;
        uint64_t v216 = v45;
        __int16 v217 = 2049;
        double v218 = v46;
        __int16 v219 = 2049;
        uint64_t v220 = v47;
        __int16 v221 = 2049;
        uint64_t v222 = v48;
        __int16 v223 = 2049;
        uint64_t v224 = v49;
        __int16 v225 = 2049;
        uint64_t v226 = v50;
        __int16 v227 = 2049;
        uint64_t v228 = v51;
        __int16 v229 = 2049;
        uint64_t v230 = v52;
        __int16 v231 = 2049;
        uint64_t v232 = v53;
        __int16 v233 = 2049;
        uint64_t v234 = v54;
        __int16 v235 = 2049;
        uint64_t v236 = v55;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "CLVLF,fuseWithPoints,Update skipped,machAbsTime,%{public}.3lf,hasVlfEngaged,%{public}d,hasVlfTimedOut,%{public}d,isDevicestatic,%{public}d,vio2enu,[%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf],vio2enu_cov_diag,[%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf]", buf, 0xA0u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419420 != -1) {
          dispatch_once(&qword_102419420, &stru_1023166C8);
        }
        uint64_t v74 = *(void *)(v0 + 6936);
        uint64_t v75 = *(void *)(v0 + 6944);
        uint64_t v76 = *(void *)(v0 + 6952);
        double v77 = *(double *)(v0 + 6960) * 57.2957795;
        uint64_t v78 = *(void *)(v0 + 6984);
        uint64_t v79 = *(void *)(v0 + 6992);
        uint64_t v80 = *(void *)(v0 + 7000);
        uint64_t v81 = *(void *)(v0 + 7024);
        uint64_t v82 = *(void *)(v0 + 7080);
        uint64_t v83 = *(void *)(v0 + 7136);
        uint64_t v84 = *(void *)(v0 + 7192);
        uint64_t v85 = *(void *)(v0 + 7248);
        uint64_t v86 = *(void *)(v0 + 7304);
        int v173 = 134353153;
        uint64_t v174 = v103;
        __int16 v175 = 1026;
        BOOL v176 = v37;
        __int16 v177 = 1026;
        BOOL v178 = v38;
        __int16 v179 = 1026;
        BOOL v180 = v40;
        __int16 v181 = 2049;
        uint64_t v182 = v74;
        __int16 v183 = 2049;
        uint64_t v184 = v75;
        __int16 v185 = 2049;
        uint64_t v186 = v76;
        __int16 v187 = 2049;
        double v188 = v77;
        __int16 v189 = 2049;
        uint64_t v190 = v78;
        __int16 v191 = 2049;
        uint64_t v192 = v79;
        __int16 v193 = 2049;
        uint64_t v194 = v80;
        __int16 v195 = 2049;
        uint64_t v196 = v81;
        __int16 v197 = 2049;
        uint64_t v198 = v82;
        __int16 v199 = 2049;
        uint64_t v200 = v83;
        __int16 v201 = 2049;
        uint64_t v202 = v84;
        __int16 v203 = 2049;
        uint64_t v204 = v85;
        __int16 v205 = 2049;
        uint64_t v206 = v86;
        long long v87 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLVisionLocationFuser::fuseWithPoints()", "%s\n", v87);
        if (v87 != (char *)buf) {
          free(v87);
        }
      }
      BOOL v41 = 0;
    }
    else
    {
      BOOL v41 = sub_1011B07D4(v0, (uint64_t)&v102, (uint64_t)v237);
    }
    long long v56 = v103;
    *(_OWORD *)(v0 + 7936) = v102;
    *(_OWORD *)(v0 + 7952) = v56;
    long long v57 = v105;
    *(_OWORD *)(v0 + 7976) = v104;
    *(_OWORD *)(v0 + 7992) = v57;
    long long v58 = v107;
    *(_OWORD *)(v0 + 8016) = *(_OWORD *)&v106[8];
    *(_OWORD *)(v0 + 8032) = v58;
    *(unsigned char *)(v0 + 8096) = v111;
    long long v59 = v110;
    long long v60 = v108;
    *(_OWORD *)(v0 + 8064) = v109;
    *(_OWORD *)(v0 + 8080) = v59;
    *(_OWORD *)(v0 + 8048) = v60;
    long long v61 = v113;
    *(_OWORD *)(v0 + 8112) = v112;
    *(_OWORD *)(v0 + 8128) = v61;
    long long v62 = v115;
    *(_OWORD *)(v0 + 8152) = v114;
    *(_OWORD *)(v0 + 8168) = v62;
    long long v63 = v120;
    long long v64 = v118;
    *(_OWORD *)(v0 + 8240) = v119;
    *(_OWORD *)(v0 + 8256) = v63;
    long long v65 = v117;
    *(_OWORD *)(v0 + 0x2000) = v116;
    *(_OWORD *)(v0 + 8208) = v65;
    *(_OWORD *)(v0 + 8224) = v64;
    long long v66 = v121;
    *(void *)(v0 + 8288) = v122;
    *(_OWORD *)(v0 + 8272) = v66;
    *(_DWORD *)(v0 + 8296) = 0;
    sub_1011AE5B4((uint64_t)&v123, v1);
    sub_1011AE804((uint64_t)&v123, v1);
    sub_1011AEA90((uint64_t)v1, v67, v68, v69);
    sub_1011AEDC0(v0, (uint64_t)&v102);
    sub_1011AF8F0(v0, (uint64_t)&v123);
    sub_1011B15C0(v0 + 8320, (uint64_t)&v102);
    if (v41) {
      sub_1011AFD78(v0 + 3416, (uint64_t)v1);
    }
    unint64_t v70 = *(void *)(v0 + 6760);
    uint64_t v71 = *(void *)(v0 + 6752);
    if ((unint64_t)(0x13A524387AC82261 * ((uint64_t)(v70 - v71) >> 3)) >= 4)
    {
      sub_1011BA318(v71 + 3336, *(void *)(v0 + 6760), v71);
      unint64_t v70 = v72;
      *(void *)(v0 + 6760) = v72;
    }
    if (v70 >= *(void *)(v0 + 6768))
    {
      uint64_t v73 = sub_1011BA378((uint64_t *)(v0 + 6752), (uint64_t)v1);
    }
    else
    {
      sub_1011B9980(v70, (uint64_t)v1);
      uint64_t v73 = v70 + 3336;
    }
    *(void *)(v0 + 6760) = v73;
    if (!sub_1011AFF4C((void *)v0))
    {
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      uint64_t v92 = qword_102419428;
      if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
      {
        uint64_t v93 = *(void *)(v0 + 8336);
        *(_DWORD *)uint64_t buf = 134349056;
        uint64_t v208 = v93;
        _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_ERROR, "CLVLF,fuseWithPoints,Filter reset,unhealthy state,machAbsTime,%{public}.3lf", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419420 != -1) {
          dispatch_once(&qword_102419420, &stru_1023166C8);
        }
        uint64_t v99 = *(void *)(v0 + 8336);
        int v173 = 134349056;
        uint64_t v174 = v99;
        long long v100 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLVisionLocationFuser::fuseWithPoints()", "%s\n", v100);
        if (v100 != (char *)buf) {
          free(v100);
        }
      }
      uint64_t v94 = (unsigned __int8 *)(v0 + 1);
      sub_1011A3C3C((atomic_uchar *)(v0 + 1));
      uint64_t v95 = v0;
      int v96 = 0;
      goto LABEL_81;
    }
  }
}

void sub_1011AC354(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1011AC364(uint64_t a1)
{
  uint64_t v2 = (unsigned char *)(a1 + 6776);
  uint64_t v51 = a1 + 7936;
  uint64_t v3 = a1 + 7944;
  uint64_t v54 = a1 + 7856;
  long long v56 = (_OWORD *)(a1 + 8152);
  uint64_t v4 = a1 + 0x2000;
  uint64_t v53 = a1 + 8232;
  uint64_t v55 = a1 + 8320;
  uint64_t v52 = (uint64_t *)(a1 + 6752);
  double v5 = &qword_102419000;
  while (v2[1] || *v2)
  {
    uint64_t v6 = *(void *)(a1 + 56);
    if (v6 == *(void *)(a1 + 64)) {
      break;
    }
    sub_1011B8F30((uint64_t)&v57, *(void *)(a1 + 56));
    sub_1011B8DC4((uint64_t)&v70, (long long *)(v6 + 360));
    sub_1011BA514(*(void *)(a1 + 56) + 1792, *(void *)(a1 + 64), *(void *)(a1 + 56));
    *(void *)(a1 + 64) = v7;
    if (!v2[1320])
    {
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      uint64_t v47 = v5[133];
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134349056;
        *(void *)&uint8_t buf[4] = *((void *)&v58 + 1);
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "CLVLF,propagateAfterSessionEnded,Filter reset,prev ENU invalid,machAbsTime,%{public}.3lf", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_90;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419420 == -1) {
        goto LABEL_77;
      }
      goto LABEL_97;
    }
    double v8 = vabdd_f64(*((double *)&v58 + 1), *(double *)(a1 + 7952));
    BOOL v9 = sub_1011B073C((uint64_t)&v57);
    *(_DWORD *)(a1 + 7936) = v57;
    *(_OWORD *)uint64_t v3 = v58;
    *(void *)(v3 + 16) = v59;
    v2[1496] = 0;
    *(_DWORD *)(a1 + 8296) = 0;
    if (v9)
    {
      *(double *)__B = *((double *)&v62 + 1) * (v8 * (v8 * 0.5) * *((double *)&v62 + 1));
      int v10 = 1;
      buf[0] = 1;
      *(_OWORD *)&uint8_t buf[8] = xmmword_101D8A880;
      long long v74 = xmmword_101DAB7C0;
      *(void *)&long long v75 = v4;
      *((void *)&v75 + 1) = v53;
      sub_1011BA574((uint64_t)buf, (const double *)__B);
      *(double *)(a1 + 8048) = sqrt(*(double *)(a1 + 0x2000) + *(double *)(a1 + 8224));
      long long v11 = v62;
      *(_OWORD *)(a1 + 8064) = v61;
      *(_OWORD *)(a1 + 8080) = v11;
      goto LABEL_45;
    }
    double v12 = *((double *)&v61 + 1);
    double v13 = *((double *)&v62 + 1);
    if (*((double *)&v61 + 1) > 0.0)
    {
      if (*((double *)&v62 + 1) > 0.0)
      {
        double v14 = *(double *)&v61;
        double v15 = *(double *)&v62;
        goto LABEL_19;
      }
      double v16 = *(double *)(a1 + 8088);
      if (v16 > 0.0)
      {
        double v14 = *(double *)&v61;
        double v15 = *(double *)(a1 + 8080);
LABEL_18:
        double v13 = v16;
        goto LABEL_19;
      }
    }
    if (*(double *)(a1 + 8072) <= 0.0) {
      goto LABEL_20;
    }
    if (*((double *)&v62 + 1) <= 0.0)
    {
      double v16 = *(double *)(a1 + 8088);
      if (v16 <= 0.0)
      {
LABEL_20:
        uint64_t v17 = v62;
        *(void *)(a1 + 8064) = v61;
        *(double *)(a1 + 8072) = v12;
        *(void *)(a1 + 8080) = v17;
        *(double *)(a1 + 8088) = v13;
        goto LABEL_21;
      }
      double v14 = *(double *)(a1 + 8064);
      double v15 = *(double *)(a1 + 8080);
      double v12 = *(double *)(a1 + 8072);
      goto LABEL_18;
    }
    double v14 = *(double *)(a1 + 8064);
    double v15 = *(double *)&v62;
    double v12 = *(double *)(a1 + 8072);
LABEL_19:
    sub_1011B17D8(v51, v14, v12, v15, v13, v8);
LABEL_21:
    if (sub_1011B03F8((uint64_t)v60, v54, (uint64_t)&v57))
    {
      double v18 = hypot(*(long double *)(a1 + 8048), *(long double *)(a1 + 8056));
      double v19 = hypot(v60[5], v60[6]);
      double v20 = v18 + v19;
      unint64_t v21 = (unint64_t)(COERCE__INT64(fabs(v18 + v19)) - 0x10000000000000) >> 53;
      if ((COERCE__INT64(v18 + v19) <= -1 || v21 >= 0x3FF)
        && (unint64_t)(COERCE__INT64(v18 + v19) - 1) >= 0xFFFFFFFFFFFFFLL)
      {
        if (qword_102419420 != -1) {
          dispatch_once(&qword_102419420, &stru_1023166C8);
        }
        uint64_t v50 = v5[133];
        if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t buf = 134349568;
          *(void *)&uint8_t buf[4] = *((void *)&v58 + 1);
          *(_WORD *)&unsigned char buf[12] = 2050;
          *(double *)&unsigned char buf[14] = v18;
          *(_WORD *)&unsigned char buf[22] = 2050;
          *(double *)&long long v74 = v19;
          _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, "CLVLF,propagateAfterSessionEnded,Filter reset,Invalid horzAcc,machAbsTime,%{public}.3lf,prevHorzAcc,%{public}.3lf,currHorzAcc,%{public}.3lf", buf, 0x20u);
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_90;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419420 != -1) {
          dispatch_once(&qword_102419420, &stru_1023166C8);
        }
        *(_DWORD *)__B = 134349568;
        *(void *)&__B[4] = *((void *)&v58 + 1);
        *(_WORD *)&__B[12] = 2050;
        *(double *)&__B[14] = v18;
        *(_WORD *)&__B[22] = 2050;
        v72[0] = v19;
        uint64_t v48 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLVisionLocationFuser::propagateAfterSessionEnded()", "%s\n", v48);
LABEL_95:
        if (v48 != buf) {
          free(v48);
        }
LABEL_90:
        sub_1011A3C3C((atomic_uchar *)(a1 + 1));
        sub_1011A3C74(a1, 1);
        atomic_store(0, (unsigned __int8 *)(a1 + 1));
        return;
      }
      *(void *)uint64_t buf = off_102316AA0;
      long long v24 = v56[1];
      *(_OWORD *)&uint8_t buf[8] = *v56;
      long long v74 = v24;
      uint64_t v25 = 8;
      double v26 = v19 / v20;
      do
      {
        *(double *)&buf[v25] = v26 * *(double *)&buf[v25];
        v25 += 8;
      }
      while (v25 != 32);
      *(void *)__B = off_102316AA0;
      *(_OWORD *)&__B[8] = v63;
      *(_OWORD *)unint64_t v72 = v64;
      uint64_t v27 = 8;
      double v28 = v18 / v20;
      do
      {
        *(double *)&__B[v27] = v28 * *(double *)&__B[v27];
        v27 += 8;
      }
      while (v27 != 32);
      for (uint64_t i = 8; i != 32; i += 8)
        *(double *)&buf[i] = *(double *)&buf[i] + *(double *)&__B[i];
      uint64_t v30 = 0;
      long long v31 = v74;
      *long long v56 = *(_OWORD *)&buf[8];
      v56[1] = v31;
      double v32 = v26 * v26;
      do
      {
        *(double *)(v4 + v30) = v32 * *(double *)(v4 + v30);
        v30 += 8;
      }
      while (v30 != 72);
      *(void *)uint64_t buf = off_102316730;
      long long v75 = v67;
      long long v76 = v68;
      long long v77 = v69;
      uint64_t v33 = 8;
      *(_OWORD *)&uint8_t buf[8] = v65;
      long long v74 = v66;
      do
      {
        *(double *)&buf[v33] = v28 * v28 * *(double *)&buf[v33];
        v33 += 8;
      }
      while (v33 != 80);
      for (uint64_t j = 0; j != 72; j += 8)
        *(double *)(v4 + j) = *(double *)(v4 + j) + *(double *)&buf[j + 8];
      *(double *)(a1 + 8048) = sqrt(*(double *)(a1 + 0x2000) + *(double *)(a1 + 8224));
      *(double *)(a1 + 8056) = sqrt(*(double *)(a1 + 8256));
    }
    if (cnnavigation::ENUToECEF() || cnnavigation::ECEFToLLA())
    {
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      uint64_t v49 = v5[133];
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134349056;
        *(void *)&uint8_t buf[4] = *((void *)&v58 + 1);
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "CLVLF,propagateAfterSessionEnded,Filter reset,Propagated LLA invalid,machAbsTime,%{public}.3lf", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_90;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419420 == -1)
      {
LABEL_77:
        *(_DWORD *)__B = 134349056;
        *(void *)&__B[4] = *((void *)&v58 + 1);
        uint64_t v48 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLVisionLocationFuser::propagateAfterSessionEnded()", "%s\n", v48);
        goto LABEL_95;
      }
LABEL_97:
      dispatch_once(&qword_102419420, &stru_1023166C8);
      goto LABEL_77;
    }
    int v10 = 5;
LABEL_45:
    *(_DWORD *)(a1 + 8296) = v10;
    sub_1011B15C0(v55, (uint64_t)&v57);
    unint64_t v35 = *(void *)(a1 + 6760);
    uint64_t v36 = *(void *)(a1 + 6752);
    if ((unint64_t)(0x13A524387AC82261 * ((uint64_t)(v35 - v36) >> 3)) >= 4)
    {
      sub_1011BA318(v36 + 3336, *(void *)(a1 + 6760), v36);
      unint64_t v35 = v37;
      *(void *)(a1 + 6760) = v37;
    }
    if (v35 >= *(void *)(a1 + 6768))
    {
      uint64_t v38 = sub_1011BA378(v52, (uint64_t)v2);
    }
    else
    {
      sub_1011B9980(v35, (uint64_t)v2);
      uint64_t v38 = v35 + 3336;
    }
    *(void *)(a1 + 6760) = v38;
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    BOOL v39 = v5[133];
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v40 = *(void *)(a1 + 8336);
      double v41 = 1.57079633 - *(double *)(a1 + 8064);
      if (v41 < 0.0 || v41 >= 6.28318531)
      {
        double v41 = fmod(v41, 6.28318531);
        if (v41 < 0.0 || v41 == 0.0 && (*(void *)&v41 & 0x8000000000000000) == 0) {
          double v41 = v41 + 6.28318531;
        }
      }
      uint64_t v42 = *(void *)(a1 + 8080);
      *(_DWORD *)uint64_t buf = 134349568;
      *(void *)&uint8_t buf[4] = v40;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(double *)&unsigned char buf[14] = v41 * 57.2957795;
      *(_WORD *)&unsigned char buf[22] = 2050;
      *(void *)&long long v74 = v42;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "CLVLF,propagateAfterSessionEnded,Location propagated,machAbsTime,%{public}.3lf,course,%{public}.3lf,speed,%{public}.3lf", buf, 0x20u);
      double v5 = &qword_102419000;
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      uint64_t v43 = *(void *)(a1 + 8336);
      double v44 = 1.57079633 - *(double *)(a1 + 8064);
      if (v44 < 0.0 || v44 >= 6.28318531)
      {
        double v44 = fmod(v44, 6.28318531);
        if (v44 < 0.0 || v44 == 0.0 && (*(void *)&v44 & 0x8000000000000000) == 0) {
          double v44 = v44 + 6.28318531;
        }
      }
      double v45 = *(double *)(a1 + 8080);
      *(_DWORD *)__B = 134349568;
      *(void *)&__B[4] = v43;
      *(_WORD *)&__B[12] = 2050;
      *(double *)&__B[14] = v44 * 57.2957795;
      *(_WORD *)&__B[22] = 2050;
      v72[0] = v45;
      double v46 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLVisionLocationFuser::propagateAfterSessionEnded()", "%s\n", v46);
      double v5 = &qword_102419000;
      if (v46 != buf) {
        free(v46);
      }
    }
  }
}

void sub_1011ACF10(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1011ACF20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3 = 0;
  *(unsigned char *)(a3 + 336) = 0;
  *(void *)(a3 + 352) = 0xBFF0000000000000;
  if (*(unsigned char *)(a1 + 160)) {
    BOOL v4 = *(unsigned char *)(a2 + 160) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v6 = 0;
    uint64_t v40 = off_102316AA0;
    long long v41 = *(_OWORD *)(a2 + 216);
    long long v42 = *(_OWORD *)(a2 + 232);
    do
    {
      *(double *)&(&v40)[v6 + 1] = *(double *)&(&v40)[v6 + 1] - *(double *)(a1 + 216 + v6 * 8);
      ++v6;
    }
    while (v6 != 3);
    double v7 = *((double *)&v41 + 1) * *((double *)&v41 + 1) + *(double *)&v41 * *(double *)&v41;
    if (v7 >= 1.44)
    {
      LOBYTE(v26) = 0;
      int64x2_t v27 = vdupq_n_s64(2uLL);
      int64x2_t v28 = (int64x2_t)xmmword_101DAB7D0;
      long long v29 = (double *)(a2 + 256);
      uint64_t v30 = (uint64_t *)(a2 + 296);
      double v8 = (const double *)(a1 + 256);
      long long v31 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      uint64_t v35 = 0;
      sub_1011B9358((uint64_t *)&v31, &v26);
      sub_1011BB098(*((const double **)&v32 + 1), 1, v32, v8, 1, 3, *((double **)&v32 + 1), v32, v31, *((uint64_t *)&v31 + 1));
      float64x2_t v37 = 0u;
      float64x2_t v38 = 0u;
      uint64_t v36 = off_102317338;
      uint64_t v39 = 0;
      BOOL v9 = (double *)*((void *)&v32 + 1);
      int v10 = (double *)v33;
      if (*((void *)&v32 + 1) != (void)v33)
      {
        long long v11 = &v37;
        do
        {
          float64_t v12 = *v9++;
          v11->f64[0] = v12;
          long long v11 = (float64x2_t *)((char *)v11 + 8);
        }
        while (v9 != v10);
      }
      sub_1011B9060(&v31);
      *(void *)&void v23[2] = off_1023174F0;
      v24[0] = -*((double *)&v41 + 1) / v7;
      v24[1] = *(double *)&v41 / v7;
      uint64_t v25 = 0;
      LOBYTE(v26) = 0;
      int64x2_t v27 = (int64x2_t)xmmword_101DAB7E0;
      int64x2_t v28 = vdupq_n_s64(1uLL);
      long long v29 = v24;
      uint64_t v30 = &v25;
      double v19 = off_1023174F0;
      uint64_t v21 = 0;
      float64x2_t v20 = vmlaq_n_f64(vmulq_n_f64(v38, *(double *)&v41 / v7), v37, v24[0]);
      sub_1011B7C8C((uint64_t)&v26, (uint64_t)&v19, (uint64_t *)&v31);
      v23[0] = 0.0;
      v23[1] = 0.0;
      long long v22 = off_102316E10;
      double v13 = (uint64_t *)*((void *)&v32 + 1);
      double v14 = (uint64_t *)v33;
      if (*((void *)&v32 + 1) != (void)v33)
      {
        double v15 = v23;
        do
        {
          uint64_t v16 = *v13++;
          *(void *)v15++ = v16;
        }
        while (v13 != v14);
      }
      sub_1011B9060(&v31);
      BOOL v3 = 0;
      double v17 = v23[0];
      if ((*(void *)&v23[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v23[0] >= 0.0)
      {
        *(long double *)(a3 + 344) = atan2(*((long double *)&v41 + 1), *(long double *)&v41);
        *(double *)(a3 + 352) = v17;
        BOOL v3 = sqrt(v17) <= 3.14159265;
        *(unsigned char *)(a3 + 336) = v3;
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t sub_1011AD1FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a3 + 1256) = 0;
  if (*(unsigned char *)(a1 + 1424)) {
    BOOL v3 = *(unsigned char *)(a2 + 1424) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  uint64_t v4 = !v3;
  if (!v3)
  {
    uint64_t v8 = 0;
    *(void *)&v21[0] = off_102316AA0;
    long long v9 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)((char *)v21 + 8) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)((char *)&v21[1] + 8) = v9;
    do
    {
      *(double *)((char *)v21 + v8 + 8) = *(double *)((char *)v21 + v8 + 8) - *(double *)(a1 + 256 + v8);
      v8 += 8;
    }
    while (v8 != 24);
    long long v10 = *(_OWORD *)((char *)&v21[1] + 8);
    *(_OWORD *)(a3 + 1272) = *(_OWORD *)((char *)v21 + 8);
    *(_OWORD *)(a3 + 1288) = v10;
    LOBYTE(v16) = 0;
    int64x2_t v17 = vdupq_n_s64(3uLL);
    long long v18 = xmmword_101D07BB0;
    uint64_t v19 = a2 + 464;
    uint64_t v20 = a2 + 584;
    memset(v21, 0, sizeof(v21));
    uint64_t v22 = 0;
    sub_1011B9358((uint64_t *)v21, &v16);
    sub_1011BB098(*((const double **)&v21[1] + 1), 1, *(uint64_t *)&v21[1], (const double *)(a1 + 464), 1, 6, *((double **)&v21[1] + 1), *(uint64_t *)&v21[1], *(vDSP_Length *)&v21[0], *((uint64_t *)&v21[0] + 1));
    float64_t v12 = *(uint64_t **)&v21[2];
    long long v11 = (uint64_t *)*((void *)&v21[1] + 1);
    if (*((void *)&v21[1] + 1) != *(void *)&v21[2])
    {
      double v13 = (void *)(a3 + 1312);
      do
      {
        uint64_t v14 = *v11++;
        *v13++ = v14;
      }
      while (v11 != v12);
    }
    sub_1011B9060(v21);
    *(double *)(a3 + 1392) = *(double *)(a2 + 40) - *(double *)(a1 + 40);
    *(unsigned char *)(a3 + 1256) = 1;
  }
  return v4;
}

BOOL sub_1011AD370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3 = 0;
  *(unsigned char *)(a3 + 1400) = 0;
  *(void *)(a3 + 1416) = 0xBFF0000000000000;
  if (*(unsigned char *)(a1 + 1424)) {
    BOOL v4 = *(unsigned char *)(a2 + 1424) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v6 = 0;
    long long v41 = off_102316AA0;
    long long v7 = *(_OWORD *)(a2 + 272);
    long long v42 = *(_OWORD *)(a2 + 256);
    long long v43 = v7;
    do
    {
      *(double *)&(&v41)[v6 + 1] = *(double *)&(&v41)[v6 + 1] - *(double *)(a1 + 256 + v6 * 8);
      ++v6;
    }
    while (v6 != 3);
    double v8 = *((double *)&v42 + 1) * *((double *)&v42 + 1) + *(double *)&v42 * *(double *)&v42;
    if (v8 >= 1.44)
    {
      LOBYTE(v27) = 0;
      int64x2_t v28 = vdupq_n_s64(2uLL);
      int64x2_t v29 = (int64x2_t)xmmword_101D07BB0;
      uint64_t v30 = (double *)(a2 + 464);
      long long v31 = (uint64_t *)(a2 + 528);
      long long v9 = (const double *)(a1 + 464);
      long long v32 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      uint64_t v36 = 0;
      sub_1011B9358((uint64_t *)&v32, &v27);
      sub_1011BB098(*((const double **)&v33 + 1), 1, v33, v9, 1, 6, *((double **)&v33 + 1), v33, v32, *((uint64_t *)&v32 + 1));
      float64x2_t v38 = 0u;
      float64x2_t v39 = 0u;
      float64x2_t v37 = off_102317338;
      uint64_t v40 = 0;
      long long v10 = (double *)*((void *)&v33 + 1);
      long long v11 = (double *)v34;
      if (*((void *)&v33 + 1) != (void)v34)
      {
        float64_t v12 = &v38;
        do
        {
          float64_t v13 = *v10++;
          v12->f64[0] = v13;
          float64_t v12 = (float64x2_t *)((char *)v12 + 8);
        }
        while (v10 != v11);
      }
      sub_1011B9060(&v32);
      *(void *)&double v24[2] = off_1023174F0;
      v25[0] = -*((double *)&v42 + 1) / v8;
      v25[1] = *(double *)&v42 / v8;
      uint64_t v26 = 0;
      LOBYTE(v27) = 0;
      int64x2_t v28 = (int64x2_t)xmmword_101DAB7E0;
      int64x2_t v29 = vdupq_n_s64(1uLL);
      uint64_t v30 = v25;
      long long v31 = &v26;
      uint64_t v20 = off_1023174F0;
      uint64_t v22 = 0;
      float64x2_t v21 = vmlaq_n_f64(vmulq_n_f64(v39, *(double *)&v42 / v8), v38, v25[0]);
      sub_1011B7C8C((uint64_t)&v27, (uint64_t)&v20, (uint64_t *)&v32);
      v24[0] = 0.0;
      v24[1] = 0.0;
      long long v23 = off_102316E10;
      uint64_t v14 = (uint64_t *)*((void *)&v33 + 1);
      double v15 = (uint64_t *)v34;
      if (*((void *)&v33 + 1) != (void)v34)
      {
        uint64_t v16 = v24;
        do
        {
          uint64_t v17 = *v14++;
          *(void *)v16++ = v17;
        }
        while (v14 != v15);
      }
      sub_1011B9060(&v32);
      BOOL v3 = 0;
      double v18 = v24[0];
      if ((*(void *)&v24[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v24[0] >= 0.0)
      {
        *(long double *)(a3 + 1408) = atan2(*((long double *)&v42 + 1), *(long double *)&v42);
        *(double *)(a3 + 1416) = v18;
        BOOL v3 = sqrt(v18) <= 3.14159265;
        *(unsigned char *)(a3 + 1400) = v3;
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t sub_1011AD64C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v8 = vabdd_f64(*(double *)(a2 + 16), *(double *)(*(void *)(a1 + 6760) - 1776));
  sub_1011AFD78(a4, a1 + 3416);
  *(_DWORD *)(a4 + 1520) = 0;
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a4 + 1160) = *(_OWORD *)a2;
  *(_OWORD *)(a4 + 1176) = v9;
  long long v10 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a4 + 1200) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a4 + 1216) = v10;
  long long v11 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a4 + 1240) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a4 + 1256) = v11;
  char v12 = *(unsigned char *)(a2 + 160);
  long long v14 = *(_OWORD *)(a2 + 128);
  long long v13 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a4 + 1272) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a4 + 1288) = v14;
  *(_OWORD *)(a4 + 1304) = v13;
  *(unsigned char *)(a4 + 1320) = v12;
  long long v15 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a4 + 1336) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a4 + 1352) = v15;
  long long v16 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a4 + 1376) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a4 + 1392) = v16;
  *(_OWORD *)(a4 + 1416) = *(_OWORD *)(a2 + 256);
  long long v17 = *(_OWORD *)(a2 + 320);
  long long v19 = *(_OWORD *)(a2 + 272);
  long long v18 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a4 + 1464) = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a4 + 1480) = v17;
  *(_OWORD *)(a4 + 1432) = v19;
  *(_OWORD *)(a4 + 1448) = v18;
  long long v20 = *(_OWORD *)(a2 + 336);
  *(void *)(a4 + 1512) = *(void *)(a2 + 352);
  *(_OWORD *)(a4 + 1496) = v20;
  sub_1011AE5B4(a3, (unsigned __int8 *)a4);
  double v21 = v8 * 0.00523598776;
  *(double *)(a1 + 7024) = v8 * 0.00523598776 * (v8 * 0.00523598776) + *(double *)(a1 + 7024);
  *(double *)(a1 + 7080) = v8 * 0.00523598776 * (v8 * 0.00523598776) + *(double *)(a1 + 7080);
  *(double *)(a1 + 7136) = v8 * 0.00523598776 * (v8 * 0.00523598776) + *(double *)(a1 + 7136);
  double v22 = v8 * 0.3;
  *(double *)(a1 + 7192) = v22 * v22 + *(double *)(a1 + 7192);
  *(double *)(a1 + 7248) = v22 * v22 + *(double *)(a1 + 7248);
  *(double *)(a1 + 7304) = v22 * v22 + *(double *)(a1 + 7304);
  if (qword_102419420 != -1) {
    dispatch_once(&qword_102419420, &stru_1023166C8);
  }
  long long v23 = qword_102419428;
  if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v24 = *(void *)(a2 + 16);
    *(_DWORD *)uint64_t buf = 134349568;
    uint64_t v28 = v24;
    __int16 v29 = 2050;
    double v30 = v21 * 57.2957795;
    __int16 v31 = 2050;
    double v32 = v22;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CLVLF,propagate,Filter propagated,machAbsTime,%{public}.3lf,rotProcNoiseStd,%{public}.3lf,posProcNoiseStd,%{public}.3lf", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    uint64_t v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLVisionLocationFuser::propagate(const fusion::LocData &, const fusion::VioData &, fusion::LocationFuserState &)", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
  return 1;
}

void sub_1011AD96C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_1011AD978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v69 = sub_1011B5654(a1 + 4960, a2, a3);
  uint64_t v7 = 0;
  long long v125 = off_102316AA0;
  long long v126 = *(_OWORD *)(a2 + 1392);
  long long v127 = *(_OWORD *)(a2 + 1408);
  do
  {
    *(double *)&(&v125)[v7 + 1] = *(double *)&(&v125)[v7 + 1] - *(double *)(a3 + 744 + v7 * 8);
    ++v7;
  }
  while (v7 != 3);
  long long v118 = 0u;
  uint64_t v119 = 0;
  long long v121 = 0u;
  uint64_t v68 = a1 + 6784;
  uint64_t v122 = 0;
  long long v114 = off_102316FC8;
  uint64_t v124 = 0;
  sub_101599690((double *)(a1 + 6840), a1 + 6928, (double *)(a2 + 1976), (uint64_t)buf, (int8x16_t)0, v6);
  v115[0] = *(_OWORD *)&buf[8];
  v115[1] = *(_OWORD *)&buf[24];
  v115[2] = *(_OWORD *)&buf[40];
  v115[3] = *(_OWORD *)&buf[56];
  uint64_t v116 = *(void *)v153;
  uint64_t v123 = 0x3FF0000000000000;
  uint64_t v120 = 0x3FF0000000000000;
  uint64_t v117 = 0x3FF0000000000000;
  LOBYTE(__p[0]) = 0;
  *(int64x2_t *)&__p[1] = vdupq_n_s64(3uLL);
  int64x2_t v148 = (int64x2_t)xmmword_101D07BB0;
  long long v149 = (long long *)(a2 + 2192);
  long long v150 = (char *)(a2 + 2312);
  sub_1011B5780(a1 + 6840, (uint64_t *)__p, (uint64_t *)buf);
  long long v108 = off_102316730;
  long long v109 = 0u;
  long long v110 = 0u;
  long long v111 = 0u;
  long long v112 = 0u;
  long long v113 = 0u;
  double v8 = *(uint64_t **)&buf[24];
  long long v9 = *(uint64_t **)&buf[32];
  if (*(void *)&buf[24] != *(void *)&buf[32])
  {
    long long v10 = &v109;
    do
    {
      uint64_t v11 = *v8++;
      *(void *)long long v10 = v11;
      long long v10 = (long long *)((char *)v10 + 8);
    }
    while (v8 != v9);
  }
  sub_1011B9060(buf);
  buf[0] = 0;
  int64x2_t v70 = vdupq_n_s64(3uLL);
  *(int64x2_t *)&uint8_t buf[8] = v70;
  *(_OWORD *)&unsigned char buf[24] = xmmword_101DAB7F0;
  *(void *)&buf[40] = a1 + 6848;
  *(void *)&buf[48] = a1 + 6920;
  sub_1011BA96C((double *)&v108, buf);
  buf[0] = 0;
  *(int64x2_t *)&uint8_t buf[8] = v70;
  *(_OWORD *)&unsigned char buf[24] = xmmword_101D07BB0;
  *(void *)&buf[40] = a2 + 1600;
  *(void *)&buf[48] = a2 + 1720;
  sub_1011B5858((double *)&v108, buf);
  sub_1011B59D8((uint64_t)&v114, a1 + 7016, (uint64_t)buf);
  LOBYTE(v82) = 1;
  float64x2_t v83 = (float64x2_t)xmmword_101DAB800;
  long long v84 = xmmword_101DAB7F0;
  *(void *)&long long v85 = v115;
  *((void *)&v85 + 1) = &v124;
  sub_1011B5900((uint64_t)buf, (uint64_t *)&v82, (uint64_t *)__p);
  uint64_t v12 = 0;
  long long v104 = v110;
  long long v105 = v111;
  long long v106 = v112;
  long long v107 = v113;
  long long v102 = off_102316730;
  long long v103 = v109;
  uint64_t v13 = v148.i64[0];
  do
  {
    *(double *)&(&v102)[v12 + 1] = *(double *)&(&v102)[v12 + 1] + *(double *)(v13 + v12 * 8);
    ++v12;
  }
  while (v12 != 9);
  sub_1011B9060(__p);
  memset(buf, 0, 24);
  memset(__p, 0, sizeof(__p));
  sub_1011B5A88((uint64_t)&v102, (uint64_t)v95);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (*(void *)buf)
  {
    *(void *)&uint8_t buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
  LOBYTE(__p[0]) = 0;
  *(_OWORD *)&__p[1] = xmmword_101DAB7D0;
  int64x2_t v148 = vdupq_n_s64(1uLL);
  long long v149 = &v126;
  long long v150 = (char *)&v127 + 8;
  uint64_t v82 = off_102316AA0;
  *((void *)&v84 + 1) = 0;
  float64x2_t v83 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v98, *((double *)&v126 + 1)), v96, *(double *)&v126), v100, *(double *)&v127);
  *(double *)&long long v84 = *((double *)&v126 + 1) * v99 + v97 * *(double *)&v126 + v101 * *(double *)&v127;
  sub_1011B5B70((uint64_t)__p, (uint64_t)&v82, (uint64_t *)buf);
  v94[0] = 0.0;
  v94[1] = 0.0;
  uint64_t v93 = off_102316E10;
  long long v14 = *(uint64_t **)&buf[24];
  long long v15 = *(uint64_t **)&buf[32];
  if (*(void *)&buf[24] != *(void *)&buf[32])
  {
    long long v16 = v94;
    do
    {
      uint64_t v17 = *v14++;
      *(void *)v16++ = v17;
    }
    while (v14 != v15);
  }
  sub_1011B9060(buf);
  if (v94[0] > 8.02488176)
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    long long v18 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v19 = *(void *)(a2 + 8);
      *(_DWORD *)uint64_t buf = 134349312;
      *(void *)&uint8_t buf[4] = v19;
      *(_WORD *)&unsigned char buf[12] = 1026;
      *(_DWORD *)&unsigned char buf[14] = v69;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLVLF,updateWithVLPoints,Mahalanobis test failed,machAbsTime,%{public}.3lf,forceUpdateNeeded,%{public}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1023166C8);
      }
      long long v66 = *(void **)(a2 + 8);
      LODWORD(__p[0]) = 134349312;
      *(void **)((char *)__p + 4) = v66;
      WORD2(__p[1]) = 1026;
      *(_DWORD *)((char *)&__p[1] + 6) = v69;
      long long v67 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLVisionLocationFuser::updateWithPoints(const fusion::LocationFuserMeasurement<fusion::VlfData> &, const fusion::LocationFuserState &)", "%s\n", v67);
      if (v67 != (char *)buf) {
        free(v67);
      }
    }
    if (!v69) {
      return 0;
    }
  }
  sub_1011B59D8((uint64_t)&v114, a1 + 7016, (uint64_t)__p);
  LOBYTE(v128) = 0;
  *(_OWORD *)&v129[4] = xmmword_101DAB800;
  *(_OWORD *)uint64_t v130 = xmmword_101DAB7F0;
  *(void *)&v130[16] = &__p[1];
  *(void *)&v130[24] = &v151;
  sub_1011B5C04((uint64_t)&v128, (uint64_t)v95, (uint64_t *)buf);
  uint64_t v82 = off_102317180;
  float64x2_t v83 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  uint64_t v92 = 0;
  long long v20 = *(double **)&buf[24];
  double v21 = *(double **)&buf[32];
  if (*(void *)&buf[24] != *(void *)&buf[32])
  {
    double v22 = &v83;
    do
    {
      float64_t v23 = *v20++;
      v22->f64[0] = v23;
      double v22 = (float64x2_t *)((char *)v22 + 8);
    }
    while (v20 != v21);
  }
  sub_1011B9060(buf);
  sub_1011B5CA8((uint64_t)&v82, (uint64_t)&v125, (uint64_t)v77);
  *(float64x2_t *)(a1 + 6984) = vaddq_f64(v80, *(float64x2_t *)(a1 + 6984));
  *(double *)(a1 + 7000) = v81 + *(double *)(a1 + 7000);
  sub_1011B5D30((uint64_t)&v82, (uint64_t)__p, (uint64_t)buf);
  sub_1011BA934(a1 + 7016, (uint64_t)buf);
  if (sqrt(v78.f64[1] * v78.f64[1] + v78.f64[0] * v78.f64[0] + v79 * v79) != 0.0)
  {
    LOBYTE(v128) = 0;
    *(_OWORD *)&v129[4] = xmmword_101DAB7F0;
    *(int64x2_t *)uint64_t v130 = vdupq_n_s64(1uLL);
    *(void *)&v130[16] = a1 + 6936;
    *(void *)&v130[24] = a1 + 6960;
    memset(buf, 0, sizeof(buf));
    sub_1011B9358((uint64_t *)buf, &v128);
    sub_1011BA6E4((uint64_t)buf, (const double *)(a1 + 6960));
    float64x2_t v75 = 0u;
    long long v76 = 0u;
    uint64_t v24 = *(double **)&buf[24];
    uint64_t v25 = *(double **)&buf[32];
    if (*(void *)&buf[24] != *(void *)&buf[32])
    {
      uint64_t v26 = &v75;
      do
      {
        float64_t v27 = *v24++;
        v26->f64[0] = v27;
        uint64_t v26 = (float64x2_t *)((char *)v26 + 8);
      }
      while (v24 != v25);
    }
    sub_1011B9060(buf);
    float64x2_t v28 = vaddq_f64(v78, v75);
    float64x2_t v75 = v28;
    double v29 = v79 + *(double *)&v76;
    *(double *)&long long v76 = v29;
    int8x16_t v30 = (int8x16_t)vmulq_f64(v28, v28);
    *(double *)v30.i64 = sqrt(vmlad_n_f64(*(double *)&v30.i64[1], v28.f64[0], v28.f64[0]) + v29 * v29);
    if (*(double *)v30.i64 == 0.0)
    {
      memset(&buf[8], 0, 40);
      *(void *)uint64_t buf = off_102316520;
      sub_10159843C(v68, (uint64_t)buf, (int8x16_t)0, v29, (int8x16_t)v28);
    }
    else
    {
      float64x2_t v32 = (float64x2_t)vdupq_lane_s64(v30.i64[0], 0);
      int8x16_t v31 = (int8x16_t)vdivq_f64(v28, v32);
      v32.f64[0] = 3.14159265;
      double v33 = v29 / *(double *)v30.i64;
      if (*(double *)v30.i64 > 3.14159265)
      {
        v34.f64[0] = NAN;
        v34.f64[1] = NAN;
        int8x16_t v72 = (int8x16_t)vnegq_f64(v34);
        double v73 = *(double *)vbslq_s8(v72, (int8x16_t)v32, v30).i64;
        int8x16_t v74 = v31;
        int8x16_t v71 = (int8x16_t)v32;
        *(double *)v30.i64 = fmod(*(double *)v30.i64 + v73, 6.28318531);
        *(void *)&double v29 = vbslq_s8(v72, v71, v30).u64[0];
        if (*(double *)v30.i64 == 0.0) {
          *(double *)v30.i64 = v29;
        }
        else {
          *(double *)v30.i64 = *(double *)v30.i64 - v73;
        }
        int8x16_t v31 = v74;
      }
      *(void *)uint64_t buf = off_102316520;
      *(int8x16_t *)&uint8_t buf[8] = v31;
      *(double *)&unsigned char buf[24] = v33;
      *(_OWORD *)&unsigned char buf[32] = v30.u64[0];
      sub_10159843C(v68, (uint64_t)buf, v30, v29, v31);
    }
  }
  sub_101598BE8(v68);
  if (qword_102419420 != -1) {
    dispatch_once(&qword_102419420, &stru_1023166C8);
  }
  uint64_t v36 = qword_102419428;
  if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v37 = *(void *)(a2 + 8);
    uint64_t v38 = *(void *)(a1 + 6936);
    uint64_t v39 = *(void *)(a1 + 6944);
    uint64_t v40 = *(void *)(a1 + 6952);
    double v41 = *(double *)(a1 + 6960) * 57.2957795;
    uint64_t v42 = *(void *)(a1 + 6984);
    uint64_t v43 = *(void *)(a1 + 6992);
    uint64_t v44 = *(void *)(a1 + 7000);
    uint64_t v45 = *(void *)(a1 + 7024);
    uint64_t v46 = *(void *)(a1 + 7080);
    uint64_t v47 = *(void *)(a1 + 7136);
    uint64_t v48 = *(void *)(a1 + 7192);
    uint64_t v49 = *(void *)(a1 + 7248);
    uint64_t v50 = *(void *)(a1 + 7304);
    *(_DWORD *)uint64_t buf = 134352385;
    *(void *)&uint8_t buf[4] = v37;
    *(_WORD *)&unsigned char buf[12] = 2049;
    *(void *)&unsigned char buf[14] = v38;
    *(_WORD *)&unsigned char buf[22] = 2049;
    *(void *)&unsigned char buf[24] = v39;
    *(_WORD *)&unsigned char buf[32] = 2049;
    *(void *)&buf[34] = v40;
    *(_WORD *)&buf[42] = 2049;
    *(double *)&buf[44] = v41;
    *(_WORD *)&buf[52] = 2049;
    *(void *)&buf[54] = v42;
    *(_WORD *)&buf[62] = 2049;
    *(void *)&buf[64] = v43;
    *(_WORD *)long long v153 = 2049;
    *(void *)&v153[2] = v44;
    __int16 v154 = 2049;
    uint64_t v155 = v45;
    __int16 v156 = 2049;
    uint64_t v157 = v46;
    __int16 v158 = 2049;
    uint64_t v159 = v47;
    __int16 v160 = 2049;
    uint64_t v161 = v48;
    __int16 v162 = 2049;
    uint64_t v163 = v49;
    __int16 v164 = 2049;
    uint64_t v165 = v50;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "CLVLF,updateWithVLPoints,Filter updated,machAbsTime,%{public}.3lf,vio2enu,[%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf,%{private}.3lf],vio2enu_cov_diag,[%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf,%{private}.6lf]", buf, 0x8Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1023166C8);
    }
    uint64_t v51 = *(void *)(a2 + 8);
    uint64_t v52 = *(void *)(a1 + 6936);
    uint64_t v53 = *(void *)(a1 + 6944);
    uint64_t v54 = *(void *)(a1 + 6952);
    double v55 = *(double *)(a1 + 6960) * 57.2957795;
    uint64_t v56 = *(void *)(a1 + 6984);
    uint64_t v57 = *(void *)(a1 + 6992);
    uint64_t v58 = *(void *)(a1 + 7000);
    uint64_t v59 = *(void *)(a1 + 7024);
    uint64_t v60 = *(void *)(a1 + 7080);
    uint64_t v61 = *(void *)(a1 + 7136);
    uint64_t v62 = *(void *)(a1 + 7192);
    uint64_t v63 = *(void *)(a1 + 7248);
    uint64_t v64 = *(void *)(a1 + 7304);
    int v128 = 134352385;
    *(void *)long long v129 = v51;
    *(_WORD *)&v129[8] = 2049;
    *(void *)&v129[10] = v52;
    *(_WORD *)&v129[18] = 2049;
    *(void *)uint64_t v130 = v53;
    *(_WORD *)&v130[8] = 2049;
    *(void *)&v130[10] = v54;
    *(_WORD *)&v130[18] = 2049;
    *(double *)&v130[20] = v55;
    *(_WORD *)&v130[28] = 2049;
    *(void *)&v130[30] = v56;
    __int16 v131 = 2049;
    uint64_t v132 = v57;
    __int16 v133 = 2049;
    uint64_t v134 = v58;
    __int16 v135 = 2049;
    uint64_t v136 = v59;
    __int16 v137 = 2049;
    uint64_t v138 = v60;
    __int16 v139 = 2049;
    uint64_t v140 = v61;
    __int16 v141 = 2049;
    uint64_t v142 = v62;
    __int16 v143 = 2049;
    uint64_t v144 = v63;
    __int16 v145 = 2049;
    uint64_t v146 = v64;
    long long v65 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLVisionLocationFuser::updateWithPoints(const fusion::LocationFuserMeasurement<fusion::VlfData> &, const fusion::LocationFuserState &)", "%s\n", v65);
    if (v65 != (char *)buf) {
      free(v65);
    }
  }
  return 1;
}