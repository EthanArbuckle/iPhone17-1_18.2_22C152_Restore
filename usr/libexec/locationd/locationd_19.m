void sub_100CCEA3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Block_object_dispose(&a30, 8);
  sub_1001687EC(&a42);
  _Unwind_Resume(a1);
}

void sub_100CCEAD8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  sub_100CEE514(a3);
  sub_100103240();
  *(_DWORD *)buf = sub_1000B5AD4();
  uint64_t v6 = sub_10015F760();
  *(_WORD *)a3 = sub_100CD11AC(v6, (int *)buf, v6);
  sub_100103240();
  *(unsigned char *)(a3 + 2) = sub_10073E30C();
  sub_100103240();
  sub_10073B95C((uint64_t)buf);
  v7 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0) {
    operator delete(*v7);
  }
  *(_OWORD *)v7 = *(_OWORD *)buf;
  *(void *)(a3 + 24) = v17;
  sub_100103240();
  sub_10073ADA8((uint64_t)buf);
  v8 = (void **)(a3 + 32);
  if (*(char *)(a3 + 55) < 0) {
    operator delete(*v8);
  }
  *(_OWORD *)v8 = *(_OWORD *)buf;
  *(void *)(a3 + 48) = v17;
  if (sub_10010145C())
  {
    int v9 = 3;
LABEL_11:
    *(_DWORD *)(a3 + 56) = v9;
    goto LABEL_12;
  }
  if (sub_10016CCBC())
  {
    int v9 = 1;
    goto LABEL_11;
  }
  if (sub_1001B7C64())
  {
    int v9 = 2;
    goto LABEL_11;
  }
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  v13 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Raven: platform info creation on unknown category", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "raven::RavenPlatformInfo CLRavenController::CreateAndLogRavenPlatformInfo(CLP::LogEntry::LogEntry &)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
LABEL_12:
  if (sub_10073FAFC()) {
    int v10 = 2;
  }
  else {
    int v10 = 1;
  }
  *(_DWORD *)(a3 + 60) = v10;
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  v11 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a3 + 55) >= 0) {
      uint64_t v12 = a3 + 32;
    }
    else {
      uint64_t v12 = *(void *)(a3 + 32);
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Raven: system version, %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "raven::RavenPlatformInfo CLRavenController::CreateAndLogRavenPlatformInfo(CLP::LogEntry::LogEntry &)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  sub_100CD19DC(a1, (unsigned __int16 *)a3, a2);
}

void sub_100CCEED8(_Unwind_Exception *a1)
{
  sub_100703F54(v1);
  _Unwind_Resume(a1);
}

void sub_100CCEF00(uint64_t a1, int a2)
{
  double v4 = sub_10016C458();
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  v5 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    double v6 = (v4 - *(double *)(a1 + 40)) * 1000.0;
    *(_DWORD *)buf = 67240448;
    int v11 = a2;
    __int16 v12 = 2050;
    double v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLGLS,Raven,RavenControllerBestEffortState,configureInitializeAndStartRavenSupervisorWithPlatformInfo,success,%{public}d,time,%{public}.1lfms", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLRavenController::RavenControllerBestEffortState::HandleStateEntry()_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if ((a2 & 1) == 0)
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    v7 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "CLGLS,Raven,Failed to configure, initialize, and start raven supervisor", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLRavenController::RavenControllerBestEffortState::HandleStateEntry()_block_invoke", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
}

void sub_100CCF240(uint64_t a1)
{
  uint64_t v1 = (unsigned char *)(a1 + 4632);
  if (!*(unsigned char *)(a1 + 4632))
  {
    uint64_t v3 = sub_1009EC0A8();
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 24);
      if (v4) {
        sub_1009D1EC4(v3, 0, v4, 0.01);
      }
    }
    *uint64_t v1 = 1;
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    v5 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Raven: registering for accelerometer notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      double v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::RegisterForAccelerometerNotifications()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_100CCF404(uint64_t a1)
{
  uint64_t v1 = (unsigned char *)(a1 + 4634);
  if (!*(unsigned char *)(a1 + 4634))
  {
    uint64_t v3 = sub_100862C50();
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 40);
      if (v4) {
        sub_1009D1EC4(v3, 0, v4, 0.04);
      }
    }
    *uint64_t v1 = 1;
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    v5 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Raven: registering for barometer notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      double v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::RegisterForBarometerNotifications()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_100CCF5C8(uint64_t a1)
{
  uint64_t v1 = (unsigned char *)(a1 + 4636);
  if (*(unsigned char *)(a1 + 4636) || !*(unsigned char *)(a1 + 4658)) {
    return;
  }
  uint64_t v3 = sub_10125D0BC();
  if (v3 && *(void *)(a1 + 64))
  {
    uint64_t v4 = v3;
    if ((sub_1000A16E8() & 0x10) != 0)
    {
      int v5 = 4;
      goto LABEL_9;
    }
    if ((sub_1000A16E8() & 8) != 0)
    {
      int v5 = 1;
LABEL_9:
      sub_1009D1EC4(v4, v5, *(void *)(a1 + 64), 0.01);
    }
  }
  *uint64_t v1 = 1;
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  double v6 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Raven: registering for device motion notifications", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::RegisterForDeviceMotionNotifications()", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
}

void sub_100CCF7B8(uint64_t a1)
{
  uint64_t v1 = (unsigned char *)(a1 + 4639);
  if (!*(unsigned char *)(a1 + 4639) && *(unsigned char *)(a1 + 4659))
  {
    uint64_t v3 = sub_100B0AEC4();
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 152);
      if (v4) {
        sub_1009D1EC4(v3, 0, v4, 0.01);
      }
    }
    *uint64_t v1 = 1;
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    int v5 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Raven: registering for magnetometer notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      double v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::RegisterForMagnetometerNotifications()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_100CCF984(uint64_t a1)
{
  uint64_t v1 = (unsigned char *)(a1 + 4647);
  if (!*(unsigned char *)(a1 + 4647))
  {
    uint64_t v3 = sub_100A08A84();
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 208);
      if (v4) {
        sub_1009D1EC4(v3, 0, v4, 0.01);
      }
    }
    *uint64_t v1 = 1;
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    int v5 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Raven: registering for rate gyro notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      double v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::RegisterForRateGyroNotifications()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_100CCFB48(uint64_t a1)
{
  uint64_t v1 = (unsigned char *)(a1 + 4633);
  if (!*(unsigned char *)(a1 + 4633))
  {
    uint64_t v2 = *(void *)(a1 + 168);
    if (v2) {
      [*(id *)(v2 + 16) register:*(void *)(v2 + 8) forNotification:2 registrationInfo:0];
    }
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v3 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Raven: registering for Accessory Vehicle Speed notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::RegisterForAccessoryVehicleSpeedNotifications()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    *uint64_t v1 = 1;
  }
}

void sub_100CCFD08(uint64_t a1)
{
  uint64_t v1 = (unsigned char *)(a1 + 4635);
  if (!*(unsigned char *)(a1 + 4635))
  {
    uint64_t v3 = *(void *)(a1 + 56);
    if (v3)
    {
      [*(id *)(v3 + 16) register:*(void *)(v3 + 8) forNotification:7 registrationInfo:0];
      [*(id *)(*(void *)(a1 + 56) + 16) register:*(void *)(*(void *)(a1 + 56) + 8) forNotification:15 registrationInfo:0];
      [*(id *)(*(void *)(a1 + 56) + 16) register:*(void *)(*(void *)(a1 + 56) + 8) forNotification:13 registrationInfo:0];
    }
    *uint64_t v1 = 1;
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v4 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Raven: registering for Daemon status notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      int v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::RegisterForDaemonStatusNotifications()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
}

void sub_100CCFEEC(uint64_t a1)
{
  uint64_t v1 = (unsigned char *)(a1 + 4640);
  if (!*(unsigned char *)(a1 + 4640))
  {
    sub_10009AFB0(buf, (void *)a1);
    uint64_t v4 = *(void *)buf;
    uint64_t v3 = v12;
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_1000DB0A0(v3);
    }
    uint64_t v5 = sub_1008B6998();
    if (byte_102480FAF < 0)
    {
      sub_1000DC48C(__p, (void *)xmmword_102480F98, *((unint64_t *)&xmmword_102480F98 + 1));
    }
    else
    {
      *(_OWORD *)__p = xmmword_102480F98;
      uint64_t v10 = unk_102480FA8;
    }
    id v6 = [[objc_msgSend(*(id *)(a1 + 16), "silo") queue];
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    v13[0] = off_1022F1DC8;
    v13[1] = v4;
    v13[2] = v3;
    v13[3] = v13;
    sub_1008B6CBC(v5, (uint64_t)__p, (uint64_t)v6, (uint64_t)v13);
    sub_1006821B0(v13);
    if (SHIBYTE(v10) < 0) {
      operator delete(__p[0]);
    }
    *uint64_t v1 = 1;
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    v7 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Raven:RouteHints,RegisterForMapRouteHintNotifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::RegisterForMapRouteHintNotifications()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100CD017C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CD01C8(uint64_t a1)
{
  uint64_t v1 = (unsigned char *)(a1 + 4646);
  if (!*(unsigned char *)(a1 + 4646) && *(unsigned char *)(a1 + 4660))
  {
    if (*(void *)(a1 + 232) && (uint64_t v3 = *(void **)(a1 + 240)) != 0)
    {
      [v3 registerForUpdates:];
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      uint64_t v4 = qword_102419408;
      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Raven: registering for outdoor service notifications", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        int v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::RegisterForOutdoorServiceNotifications()", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      *uint64_t v1 = 1;
    }
    else
    {
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      uint64_t v5 = qword_102419408;
      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_INFO))
      {
        BOOL v6 = *(void *)(a1 + 232) == 0;
        BOOL v7 = *(void *)(a1 + 240) == 0;
        *(_DWORD *)buf = 67109376;
        BOOL v11 = v6;
        __int16 v12 = 1024;
        BOOL v13 = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Raven: Failed to register for outdoor service notifications,fAdapterOutdoorUpdateIsNil,%d,fOutdoorServiceProxyIsNil,%d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::RegisterForOutdoorServiceNotifications()", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
      }
    }
  }
}

void sub_100CD051C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  if (v2)
  {
    if (sub_100E72BB4(v2))
    {
      if (!*(unsigned char *)(a1 + 4648))
      {
        uint64_t v3 = *(void *)(a1 + 304);
        if (v3)
        {
          [*(id *)(v3 + 16) register:*(void *)(v3 + 8) forNotification:0 registrationInfo:0];
          *(unsigned char *)(a1 + 4648) = 1;
          if (qword_102419400 != -1) {
            dispatch_once(&qword_102419400, &stru_1022F1A68);
          }
          uint64_t v4 = qword_102419408;
          if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Raven: registering for RayTracing tile notifications", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419400 != -1) {
              dispatch_once(&qword_102419400, &stru_1022F1A68);
            }
            uint64_t v5 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::RegisterForRayTracingTileNotifications()", "%s\n", v5);
            if (v5 != (char *)buf) {
              free(v5);
            }
          }
        }
      }
    }
  }
}

void sub_100CD06E8(uint64_t a1)
{
  uint64_t v1 = (unsigned char *)(a1 + 4652);
  if (!*(unsigned char *)(a1 + 4652))
  {
    uint64_t v2 = *(void *)(a1 + 168);
    if (v2) {
      [*(id *)(v2 + 16) register:*(void *)(v2 + 8) forNotification:4 registrationInfo:0];
    }
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v3 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Raven: registering for tunnel bridge assistance (TBA) notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::RegisterForTunnelBridgeAssistanceNotifications()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    *uint64_t v1 = 1;
  }
}

void sub_100CD08A8(uint64_t a1)
{
  uint64_t v1 = (unsigned char *)(a1 + 4653);
  if (!*(unsigned char *)(a1 + 4653))
  {
    uint64_t v2 = *(void *)(a1 + 168);
    if (v2) {
      [*(id *)(v2 + 16) register:*(void *)(v2 + 8) forNotification:5 registrationInfo:0];
    }
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v3 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Raven: registering for tunnel end point assistance (TEPA) notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::RegisterForTunnelEndPointAssistanceNotifications()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    *uint64_t v1 = 1;
  }
}

void sub_100CD0A68(uint64_t a1)
{
  uint64_t v1 = (unsigned char *)(a1 + 4655);
  if (!*(unsigned char *)(a1 + 4655) && *(unsigned char *)(a1 + 4661))
  {
    if (*(void *)(a1 + 280))
    {
      uint64_t v2 = *(void **)(a1 + 288);
      if (v2) {
        [v2 registerForVisionNotifications];
      }
    }
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v3 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Raven: registering for vision notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::RegisterForVisionNotifications()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    *uint64_t v1 = 1;
  }
}

void sub_100CD0C2C(uint64_t a1)
{
  uint64_t v1 = (unsigned char *)(a1 + 4656);
  if (!*(unsigned char *)(a1 + 4656) && *(unsigned char *)(a1 + 4662))
  {
    uint64_t v3 = *(void *)(a1 + 296);
    if (v3)
    {
      [*(id *)(v3 + 16) register:*(void *)(v3 + 8) forNotification:0 registrationInfo:0];
      [*(id *)(*(void *)(a1 + 296) + 16) register:*(void *)(*(void *)(a1 + 296) + 8) forNotification:1 registrationInfo:0];
      [*(id *)(*(void *)(a1 + 296) + 16) register:*(void *)(*(void *)(a1 + 296) + 8) forNotification:2 registrationInfo:0];
      [*(id *)(*(void *)(a1 + 296) + 16) register:*(void *)(*(void *)(a1 + 296) + 8) forNotification:3 registrationInfo:0];
      [*(id *)(*(void *)(a1 + 296) + 16) register:*(void *)(*(void *)(a1 + 296) + 8) forNotification:4 registrationInfo:0];
      [*(id *)(*(void *)(a1 + 296) + 16) register:*(void *)(*(void *)(a1 + 296) + 8) forNotification:5 registrationInfo:0];
      [*(id *)(*(void *)(a1 + 296) + 16) register:*(void *)(*(void *)(a1 + 296) + 8) forNotification:6 registrationInfo:0];
      [*(id *)(*(void *)(a1 + 296) + 16) register:*(void *)(*(void *)(a1 + 296) + 8) forNotification:7 registrationInfo:0];
      [*(id *)(*(void *)(a1 + 296) + 16) register:*(void *)(*(void *)(a1 + 296) + 8) forNotification:12 registrationInfo:0];
    }
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v4 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Raven: registering for wifi notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::RegisterForWifiNotifications()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    *uint64_t v1 = 1;
  }
}

BOOL sub_100CD0E98(uint64_t a1)
{
  return *(unsigned char *)(a1 + 26)
      || sub_10016C458() - *(double *)(a1 + 16) >= 180.0 && *(unsigned char *)(a1 + 24)
      || *(unsigned char *)(a1 + 25) != 0;
}

uint64_t sub_100CD0EF8(uint64_t a1, CLMotionActivity *this)
{
  *(unsigned char *)(a1 + 24) |= CLMotionActivity::isMoving(this);
  uint64_t result = CLMotionActivity::isMoving(this);
  if (result)
  {
    uint64_t result = CLMotionActivity::isUnclassifiedMoving(this);
    char v5 = result ^ 1;
  }
  else
  {
    char v5 = 0;
  }
  *(unsigned char *)(a1 + 25) |= v5;
  return result;
}

uint64_t sub_100CD0F5C(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = sub_1009EC0A8();
    if (v2) {
      sub_1009D26C4(v2, 0, v1);
    }
    uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);
    return v3(v1);
  }
  return result;
}

uint64_t sub_100CD0FCC(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = sub_100862C50();
    if (v2) {
      sub_1009D26C4(v2, 0, v1);
    }
    uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);
    return v3(v1);
  }
  return result;
}

uint64_t sub_100CD103C(uint64_t result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  uint64_t v2 = sub_10125D0BC();
  if (v2)
  {
    uint64_t v3 = v2;
    if ((sub_1000A16E8() & 0x10) != 0)
    {
      int v4 = 4;
      goto LABEL_8;
    }
    if ((sub_1000A16E8() & 8) != 0)
    {
      int v4 = 1;
LABEL_8:
      sub_1009D26C4(v3, v4, v1);
    }
  }
  char v5 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v5(v1);
}

uint64_t sub_100CD10CC(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = sub_100B0AEC4();
    if (v2) {
      sub_1009D26C4(v2, 0, v1);
    }
    uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);
    return v3(v1);
  }
  return result;
}

uint64_t sub_100CD113C(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = sub_100A08A84();
    if (v2) {
      sub_1009D26C4(v2, 0, v1);
    }
    uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);
    return v3(v1);
  }
  return result;
}

uint64_t sub_100CD11AC(uint64_t a1, int *a2, char a3)
{
  if (a3)
  {
    uint64_t result = 2;
    switch(*a2)
    {
      case 78:
        return result;
      case 79:
        uint64_t result = 3;
        break;
      case 80:
        uint64_t result = 4;
        break;
      case 82:
        uint64_t result = 15;
        break;
      case 84:
        uint64_t result = 16;
        break;
      case 86:
        uint64_t result = 17;
        break;
      case 88:
        uint64_t result = 18;
        break;
      case 89:
        uint64_t result = 19;
        break;
      case 90:
        uint64_t result = 20;
        break;
      case 91:
        uint64_t result = 21;
        break;
      case 92:
        uint64_t result = 22;
        break;
      case 95:
        uint64_t result = 23;
        break;
      case 96:
        uint64_t result = 24;
        break;
      case 97:
        uint64_t result = 25;
        break;
      case 98:
        uint64_t result = 26;
        break;
      case 99:
        uint64_t result = 27;
        break;
      case 100:
        uint64_t result = 28;
        break;
      case 101:
        uint64_t result = 29;
        break;
      case 102:
        uint64_t result = 30;
        break;
      case 103:
        uint64_t result = 31;
        break;
      case 104:
        uint64_t result = 32;
        break;
      case 105:
        uint64_t result = 33;
        break;
      case 106:
        uint64_t result = 34;
        break;
      case 107:
      case 108:
        uint64_t result = 60;
        break;
      case 109:
      case 110:
        uint64_t result = 61;
        break;
      case 111:
      case 112:
        uint64_t result = 62;
        break;
      case 113:
      case 114:
        uint64_t result = 63;
        break;
      case 115:
        uint64_t result = 64;
        break;
      case 116:
      case 117:
        uint64_t result = 67;
        break;
      case 118:
      case 119:
        uint64_t result = 68;
        break;
      case 120:
      case 121:
        uint64_t result = 72;
        break;
      case 122:
      case 123:
        uint64_t result = 73;
        break;
      case 124:
        uint64_t result = 69;
        break;
      case 125:
        uint64_t result = 74;
        break;
      case 139:
        uint64_t result = 5;
        break;
      case 141:
        uint64_t result = 6;
        break;
      case 142:
        uint64_t result = 8;
        break;
      case 143:
        uint64_t result = 7;
        break;
      case 168:
        uint64_t result = 9;
        break;
      case 169:
        uint64_t result = 10;
        break;
      case 170:
        uint64_t result = 12;
        break;
      case 171:
        uint64_t result = 11;
        break;
      case 172:
        uint64_t result = 37;
        break;
      case 173:
        uint64_t result = 38;
        break;
      case 174:
      case 175:
        uint64_t result = 75;
        break;
      case 176:
        uint64_t result = 35;
        break;
      case 177:
        uint64_t result = 36;
        break;
      case 178:
        uint64_t result = 58;
        break;
      case 179:
        uint64_t result = 59;
        break;
      case 180:
        uint64_t result = 65;
        break;
      case 181:
        uint64_t result = 66;
        break;
      case 182:
        uint64_t result = 70;
        break;
      case 183:
        uint64_t result = 71;
        break;
      case 189:
        uint64_t result = 39;
        break;
      case 198:
        uint64_t result = 13;
        break;
      case 200:
        uint64_t result = 14;
        break;
      case 206:
        uint64_t result = 41;
        break;
      case 210:
        uint64_t result = 40;
        break;
      case 214:
        uint64_t result = 54;
        break;
      case 216:
        uint64_t result = 55;
        break;
      case 219:
        uint64_t result = 42;
        break;
      case 220:
        uint64_t result = 43;
        break;
      case 221:
        uint64_t result = 44;
        break;
      case 222:
        uint64_t result = 50;
        break;
      case 223:
        uint64_t result = 51;
        break;
      case 224:
        uint64_t result = 56;
        break;
      case 225:
        uint64_t result = 57;
        break;
      case 228:
        uint64_t result = 45;
        break;
      case 230:
        uint64_t result = 46;
        break;
      case 232:
        uint64_t result = 52;
        break;
      case 234:
        uint64_t result = 53;
        break;
      case 240:
        uint64_t result = 48;
        break;
      case 241:
        uint64_t result = 49;
        break;
      case 243:
        uint64_t result = 47;
        break;
      default:
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        v8 = qword_102419408;
        if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
        {
          int v9 = *a2;
          *(_DWORD *)buf = 67109120;
          int v13 = v9;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Raven: Supported hardware detected but not mapped to explicit HW type: %d", buf, 8u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419400 != -1) {
            dispatch_once(&qword_102419400, &stru_1022F1A68);
          }
          BOOL v11 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "raven::RavenPlatformInfo::Hardware CLRavenController::ConvertCLPlatformInfoHardwareToRavenPlatformInfoHardware(const CLPlatformInfo::Hardware &, const BOOL) const", "%s\n", v11);
          if (v11 != (char *)buf) {
            free(v11);
          }
        }
        uint64_t result = 1;
        break;
    }
  }
  else
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    char v5 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
    {
      int v6 = *a2;
      *(_DWORD *)buf = 67109120;
      int v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Raven: Unsupported hardware detected, type: %d", buf, 8u);
    }
    BOOL v7 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v7)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "raven::RavenPlatformInfo::Hardware CLRavenController::ConvertCLPlatformInfoHardwareToRavenPlatformInfoHardware(const CLPlatformInfo::Hardware &, const BOOL) const", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
      return 0;
    }
  }
  return result;
}

void sub_100CD19DC(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  sub_10016BC44((uint64_t)v7);
  sub_100CEA6B4(v6, v7, a2, a3);
  if (*(void *)(a1 + 4680)) {
    sub_100CCB93C(a1, a3, 1);
  }
}

void sub_100CD1A44(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v3 = v2;
  *(void *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  *(void *)(v2 + 16) = v4;
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = nullsub_1100;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = nullsub_1101;
  *(void *)(v2 + 56) = 0;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 72) = nullsub_1102;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(unsigned char *)(v2 + 128) = 0;
  *(_OWORD *)(v2 + 80) = 0u;
  *(void *)(v2 + 144) = 0;
  *(void *)(v2 + 152) = 0;
  *(void *)(v2 + 136) = 0;
  *(_OWORD *)(v2 + 224) = 0u;
  uint64_t v5 = v2 + 224;
  *(_OWORD *)(v2 + 168) = 0u;
  *(void *)(v2 + 160) = nullsub_1103;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(void *)(v2 + 216) = nullsub_1104;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 272) = 0u;
  *(_OWORD *)(v2 + 288) = 0u;
  *(_OWORD *)(v2 + 304) = 0u;
  v91 = (std::timed_mutex *)(v2 + 320);
  std::timed_mutex::timed_mutex((std::timed_mutex *)(v2 + 320));
  sub_100CEE5A0(v3 + 440);
  uint64_t v6 = (unsigned char *)(v5 + 4240);
  sub_1000DB3D4(v3 + 2872);
  uint64_t v7 = 0;
  *(void *)(v3 + 4400) = 850045863;
  *(_OWORD *)(v3 + 4520) = 0u;
  *(_OWORD *)(v3 + 4408) = 0u;
  *(_OWORD *)(v3 + 4424) = 0u;
  *(_OWORD *)(v3 + 4440) = 0u;
  *(_OWORD *)(v3 + 4449) = 0u;
  *(_OWORD *)(v3 + 4472) = 0u;
  *(_OWORD *)(v3 + 4488) = 0u;
  *(_OWORD *)(v3 + 4497) = 0u;
  *(_OWORD *)(v3 + 4536) = 0u;
  *(void *)(v3 + 4552) = 0;
  do
  {
    uint64_t v8 = v3 + v7;
    *(_DWORD *)(v8 + 4560) = 0;
    *(_OWORD *)(v3 + 4568 + v7) = xmmword_101D2A460;
    *(void *)(v8 + 4584) = 0xBFF0000000000000;
    v7 += 32;
  }
  while (v7 != 64);
  *(void *)(v3 + 4656) = 0;
  *(_OWORD *)(v3 + 4640) = 0u;
  *(_OWORD *)(v3 + 4624) = 0u;
  *(unsigned char *)(v5 + 4440) = 1;
  *(_OWORD *)(v3 + 4672) = 0u;
  *(void *)(v3 + 4696) = v3;
  *(void *)(v3 + 4688) = off_1022F1948;
  *(void *)(v3 + 4712) = v3;
  *(void *)(v3 + 4704) = off_1022F19B0;
  *(void *)(v3 + 4720) = 0xBFF0000000000000;
  *(_WORD *)(v5 + 4504) = 0;
  *(unsigned char *)(v5 + 4506) = 0;
  *(void *)(v3 + 4736) = 0;
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  int v9 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v104[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Raven: constructing CLRavenController", (uint8_t *)v104, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(v104, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    *(_WORD *)buf = 0;
    LODWORD(v88) = 2;
    uint64_t v1 = v104;
    v70 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLRavenController::CLRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)", "%s\n", v70);
    if (v70 != (char *)v104) {
      free(v70);
    }
  }
  if (!*(void *)(v3 + 16))
  {
    sub_101A89E94();
    uint64_t v88 = 1022;
    v89 = "CLRavenController";
    v87 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Raven/CLRavenController.mm";
    abort_report_np();
    __break(1u);
    goto LABEL_227;
  }
  int v10 = sub_100CD4E10();
  *(unsigned char *)(v5 + 4439) = v10;
  if (v10)
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    BOOL v11 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v104[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Raven: Raven estimator enabled", (uint8_t *)v104, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(v104, 0x65CuLL);
      if (qword_102419400 == -1)
      {
LABEL_236:
        *(_WORD *)buf = 0;
        LODWORD(v88) = 2;
        v74 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLRavenController::CLRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)", "%s\n", v74);
        if (v74 != (char *)v104) {
          free(v74);
        }
        goto LABEL_22;
      }
LABEL_280:
      dispatch_once(&qword_102419400, &stru_1022F1A68);
      goto LABEL_236;
    }
  }
  else
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    __int16 v12 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v104[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Raven: Raven estimator disabled", (uint8_t *)v104, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(v104, 0x65CuLL);
      if (qword_102419400 == -1) {
        goto LABEL_236;
      }
      goto LABEL_280;
    }
  }
LABEL_22:
  sub_1000C7F88(v104);
  uint64_t v13 = *(void *)&v104[0];
  int v14 = sub_100E066F0();
  buf[0] = 0;
  if (sub_1000D2988(v13, "EnableRavenRecorder", (BOOL *)buf)) {
    LODWORD(v1) = buf[0] != 0;
  }
  else {
    LODWORD(v1) = v14;
  }
  if (*((void *)&v104[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v104[0] + 1));
  }
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  v15 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v104[0]) = 67240192;
    DWORD1(v104[0]) = v1;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Raven: EnableRavenRecorder,%{public}d", (uint8_t *)v104, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(v104, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)v100 = v1;
    LODWORD(v88) = 8;
    v71 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLRavenController::CLRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)", "%s\n", v71);
    if (v71 != (char *)v104) {
      free(v71);
    }
  }
  if (v1) {
    operator new();
  }
  sub_1000C7F88(v104);
  uint8_t v16 = *(unsigned char *)(v5 + 4440);
  buf[0] = 0;
  int v17 = sub_1000D2988(*(uint64_t *)&v104[0], "EnableGNSSLocationService", (BOOL *)buf);
  uint8_t v18 = buf[0];
  if (!v17) {
    uint8_t v18 = v16;
  }
  *(unsigned char *)(v5 + 4440) = v18;
  if (*((void *)&v104[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v104[0] + 1));
  }
  if (!*(unsigned char *)(v5 + 4439))
  {
LABEL_58:
    if (*(unsigned char *)(v5 + 4439)) {
      int v24 = 1;
    }
    else {
      int v24 = (int)v1;
    }
    if (v24 == 1)
    {
      if (*(unsigned char *)(v5 + 4433))
      {
        int v25 = sub_100119964();
        if (v25) {
          LOBYTE(v25) = sub_10073FAFC();
        }
      }
      else
      {
        LOBYTE(v25) = 0;
      }
      *(unsigned char *)(v5 + 4433) = v25;
      sub_1000C7F88(v104);
      uint8_t v26 = *(unsigned char *)(v5 + 4433);
      buf[0] = 0;
      int v27 = sub_1000D2988(*(uint64_t *)&v104[0], "EnableRavenBuildingDataQuery", (BOOL *)buf);
      uint8_t v28 = buf[0];
      if (!v27) {
        uint8_t v28 = v26;
      }
      *(unsigned char *)(v5 + 4433) = v28;
      if (*((void *)&v104[0] + 1)) {
        sub_1000DB0A0(*((std::__shared_weak_count **)&v104[0] + 1));
      }
      sub_1000C7F88(v104);
      uint8_t v29 = *(unsigned char *)(v3 + 128);
      buf[0] = 0;
      int v30 = sub_1000D2988(*(uint64_t *)&v104[0], "ForceRayTracingOutsideSupportedRegion", (BOOL *)buf);
      uint8_t v31 = buf[0];
      if (!v30) {
        uint8_t v31 = v29;
      }
      *(unsigned char *)(v3 + 128) = v31;
      if (*((void *)&v104[0] + 1)) {
        sub_1000DB0A0(*((std::__shared_weak_count **)&v104[0] + 1));
      }
      sub_1000C7F88(v104);
      buf[0] = 0;
      int v32 = sub_1000D2988(*(uint64_t *)&v104[0], "EnableRavenDeviceMotionNotifications", (BOOL *)buf);
      if (buf[0]) {
        int v33 = v32;
      }
      else {
        int v33 = 0;
      }
      *(unsigned char *)(v5 + 4434) = v33;
      if (*((void *)&v104[0] + 1))
      {
        sub_1000DB0A0(*((std::__shared_weak_count **)&v104[0] + 1));
        int v33 = *(unsigned __int8 *)(v5 + 4434);
      }
      if (v33)
      {
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        v34 = qword_102419408;
        if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v104[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "Raven: device motion notifications allowed", (uint8_t *)v104, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(v104, 0x65CuLL);
          if (qword_102419400 != -1) {
            dispatch_once(&qword_102419400, &stru_1022F1A68);
          }
          *(_WORD *)buf = 0;
          LODWORD(v88) = 2;
          v76 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLRavenController::CLRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)", "%s\n", v76);
          if (v76 != (char *)v104) {
            free(v76);
          }
        }
      }
      sub_1000C7F88(v104);
      buf[0] = 0;
      int v35 = sub_1000D2988(*(uint64_t *)&v104[0], "EnableRavenMagnetometerNotifications", (BOOL *)buf);
      if (buf[0]) {
        int v36 = v35;
      }
      else {
        int v36 = 0;
      }
      *(unsigned char *)(v5 + 4435) = v36;
      if (*((void *)&v104[0] + 1))
      {
        sub_1000DB0A0(*((std::__shared_weak_count **)&v104[0] + 1));
        int v36 = *(unsigned __int8 *)(v5 + 4435);
      }
      if (v36)
      {
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        v37 = qword_102419408;
        if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v104[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "Raven: magnetometer notifications allowed", (uint8_t *)v104, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(v104, 0x65CuLL);
          if (qword_102419400 != -1) {
            dispatch_once(&qword_102419400, &stru_1022F1A68);
          }
          *(_WORD *)buf = 0;
          LODWORD(v88) = 2;
          v77 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLRavenController::CLRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)", "%s\n", v77);
          if (v77 != (char *)v104) {
            free(v77);
          }
        }
      }
      sub_1000C7F88(v104);
      buf[0] = 0;
      int v38 = sub_1000D2988(*(uint64_t *)&v104[0], "EnableRavenVisionNotifications", (BOOL *)buf) ^ 1;
      if (buf[0]) {
        int v38 = 1;
      }
      *(unsigned char *)(v5 + 4437) = v38;
      if (*((void *)&v104[0] + 1))
      {
        sub_1000DB0A0(*((std::__shared_weak_count **)&v104[0] + 1));
        int v38 = *(unsigned __int8 *)(v5 + 4437);
      }
      if (v38)
      {
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        v39 = qword_102419408;
        if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v104[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "Raven: vision notifications allowed", (uint8_t *)v104, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(v104, 0x65CuLL);
          if (qword_102419400 != -1) {
            dispatch_once(&qword_102419400, &stru_1022F1A68);
          }
          *(_WORD *)buf = 0;
          LODWORD(v88) = 2;
          v78 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLRavenController::CLRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)", "%s\n", v78);
          if (v78 != (char *)v104) {
            free(v78);
          }
        }
      }
      sub_1000C7F88(v104);
      buf[0] = 0;
      int v40 = sub_1000D2988(*(uint64_t *)&v104[0], "EnableRavenOutdoorServiceNotifications", (BOOL *)buf) ^ 1;
      if (buf[0]) {
        int v40 = 1;
      }
      *(unsigned char *)(v5 + 4436) = v40;
      if (*((void *)&v104[0] + 1))
      {
        sub_1000DB0A0(*((std::__shared_weak_count **)&v104[0] + 1));
        int v40 = *(unsigned __int8 *)(v5 + 4436);
      }
      if (v40)
      {
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        v41 = qword_102419408;
        if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v104[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "Raven: outdoor service notifications allowed", (uint8_t *)v104, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(v104, 0x65CuLL);
          if (qword_102419400 != -1) {
            dispatch_once(&qword_102419400, &stru_1022F1A68);
          }
          *(_WORD *)buf = 0;
          LODWORD(v88) = 2;
          v79 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLRavenController::CLRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)", "%s\n", v79);
          if (v79 != (char *)v104) {
            free(v79);
          }
        }
      }
      sub_1000C7F88(v104);
      buf[0] = 0;
      int v42 = sub_1000D2988(*(uint64_t *)&v104[0], "EnableRavenWifiNotifications", (BOOL *)buf);
      if (buf[0]) {
        int v43 = v42;
      }
      else {
        int v43 = 0;
      }
      *(unsigned char *)(v5 + 4438) = v43;
      uint64_t v44 = *((void *)&v104[0] + 1);
      if (*((void *)&v104[0] + 1))
      {
        sub_1000DB0A0(*((std::__shared_weak_count **)&v104[0] + 1));
        int v43 = *(unsigned __int8 *)(v5 + 4438);
      }
      if (v43)
      {
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        v45 = qword_102419408;
        if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v104[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "Raven: wifi notifications allowed", (uint8_t *)v104, 2u);
        }
        uint64_t v44 = sub_10013D1A0(115, 2);
        if (v44)
        {
          bzero(v104, 0x65CuLL);
          if (qword_102419400 != -1) {
            dispatch_once(&qword_102419400, &stru_1022F1A68);
          }
          *(_WORD *)buf = 0;
          LODWORD(v88) = 2;
          v80 = (char *)_os_log_send_and_compose_impl();
          uint64_t v44 = sub_1004BA5E4("Generic", 1, 0, 2, "CLRavenController::CLRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)", "%s\n", v80);
          if (v80 != (char *)v104) {
            free(v80);
          }
        }
      }
      if (*(unsigned char *)(v5 + 4439) && (*(unsigned char *)(v5 + 4440) || *(void *)(v3 + 312)))
      {
        cnprint::CNPrinter::GetCNPrinter((cnprint::CNPrinter *)v44);
        *(void *)&v104[0] = 0;
        cnprint::CNPrinter::EnableLogStream();
        sub_100168850(v95);
        sub_100CCEAD8(v3, (uint64_t)v95, (uint64_t)buf);
        raven::RavenParameters::RavenParameters();
        if (v103 < 0) {
          operator delete(__p);
        }
        if (v101 < 0) {
          operator delete(*(void **)&v100[4]);
        }
        sub_100CCDCF8(&v94);
        std::string::size_type size = HIBYTE(v94.__r_.__value_.__r.__words[2]);
        if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v94.__r_.__value_.__l.__size_;
        }
        if (size && !*(unsigned char *)(v5 + 4440))
        {
          if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v47 = &v94;
          }
          else {
            v47 = (std::string *)v94.__r_.__value_.__r.__words[0];
          }
          int ConfigurationString = raven::RavenParameters::LoadConfigurationString((raven::RavenParameters *)v104, (const char *)v47, 0);
          if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
            sub_1000DC48C(__dst, v94.__r_.__value_.__l.__data_, v94.__r_.__value_.__l.__size_);
          }
          else {
            __dst[0] = v94;
          }
          std::string::size_type v49 = HIBYTE(__dst[0].__r_.__value_.__r.__words[2]);
          v50 = __dst;
          if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          {
            std::string::size_type v49 = __dst[0].__r_.__value_.__l.__size_;
            v50 = (std::string *)__dst[0].__r_.__value_.__r.__words[0];
          }
          for (; v49; --v49)
          {
            if (v50->__r_.__value_.__s.__data_[0] == 10) {
              v50->__r_.__value_.__s.__data_[0] = 44;
            }
            v50 = (std::string *)((char *)v50 + 1);
          }
          if (qword_102419400 != -1) {
            dispatch_once(&qword_102419400, &stru_1022F1A68);
          }
          v51 = qword_102419408;
          if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
          {
            v52 = __dst;
            if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              v52 = (std::string *)__dst[0].__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)buf = 67174915;
            *(_DWORD *)v100 = ConfigurationString;
            *(_WORD *)&v100[4] = 2081;
            *(void *)&v100[6] = v52;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "Raven: overriding raven parameters,success,%{private}d,%{private}s", buf, 0x12u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419400 != -1) {
              dispatch_once(&qword_102419400, &stru_1022F1A68);
            }
            v83 = __dst;
            if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              v83 = (std::string *)__dst[0].__r_.__value_.__r.__words[0];
            }
            LODWORD(v96) = 67174915;
            HIDWORD(v96) = ConfigurationString;
            LOWORD(v97) = 2081;
            *(void *)((char *)&v97 + 2) = v83;
            LODWORD(v88) = 18;
            v84 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "CLRavenController::CLRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)", "%s\n", v84);
            if (v84 != (char *)buf) {
              free(v84);
            }
          }
          if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst[0].__r_.__value_.__l.__data_);
          }
        }
        if (raven::RavenParameters::IsInitialized((raven::RavenParameters *)v104))
        {
          sub_100CEEAAC((uint64_t)buf);
          sub_100CD4EB0((uint64_t)buf, (uint64_t)v104);
          std::timed_mutex::lock(v91);
          if (*(unsigned char *)(v5 + 4440))
          {
            int v53 = SHIBYTE(v94.__r_.__value_.__r.__words[2]);
            std::string::size_type v54 = v94.__r_.__value_.__r.__words[0];
            NSStringEncoding v55 = +[NSString defaultCStringEncoding];
            if (v53 >= 0) {
              v56 = &v94;
            }
            else {
              v56 = (std::string *)v54;
            }
            v57 = +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", v56, v55, v87, v88, v89);
            v96 = 0;
            long long v97 = 0uLL;
            if (wireless_diagnostics::google::protobuf::MessageLite::SerializeToString())
            {
              if (v97 >= 0) {
                v58 = &v96;
              }
              else {
                v58 = v96;
              }
              if (v97 >= 0) {
                uint64_t v59 = HIBYTE(v97);
              }
              else {
                uint64_t v59 = v97;
              }
              v60 = +[NSData dataWithBytes:v58 length:v59];
              double v61 = sub_10016C458();
              v62 = *(CLGnssLocationXPCServiceManager **)(v3 + 4672);
              if (!v62)
              {
                v62 = objc_alloc_init(CLGnssLocationXPCServiceManager);
                *(void *)(v3 + 4672) = v62;
              }
              v92[0] = _NSConcreteStackBlock;
              v92[1] = 3221225472;
              v92[2] = sub_100CD4FB8;
              v92[3] = &unk_1022F19E0;
              v92[4] = v3;
              *(double *)&v92[5] = v61;
              [(CLGnssLocationXPCServiceManager *)v62 configureInitializeAndStartRavenSupervisorWithPlatformInfo:v60 withParametersOverrideString:v57 withCompletion:v92];
            }
            else
            {
              if (qword_102419400 != -1) {
                dispatch_once(&qword_102419400, &stru_1022F1A68);
              }
              v66 = qword_102419408;
              if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
              {
                LOWORD(__dst[0].__r_.__value_.__l.__data_) = 0;
                _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_ERROR, "Raven: Could not serialize protobuf message, estimator disabled", (uint8_t *)__dst, 2u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__dst, 0x65CuLL);
                if (qword_102419400 != -1) {
                  dispatch_once(&qword_102419400, &stru_1022F1A68);
                }
                __int16 v93 = 0;
                v85 = (std::string *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "CLRavenController::CLRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)", "%s\n", (const char *)v85);
                if (v85 != __dst) {
                  free(v85);
                }
              }
              *(unsigned char *)(v5 + 4439) = 0;
            }
            if (SHIBYTE(v97) < 0) {
              operator delete(v96);
            }
          }
          else
          {
            if ((raven::RavenSupervisor::Configure() & 1) == 0)
            {
              *(unsigned char *)(v5 + 4439) = 0;
              if (qword_102419400 != -1) {
                dispatch_once(&qword_102419400, &stru_1022F1A68);
              }
              v65 = qword_102419408;
              if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_FAULT))
              {
                LOWORD(__dst[0].__r_.__value_.__l.__data_) = 0;
                _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_FAULT, "Raven: could not configure Raven supervisor; estimator disabled",
                  (uint8_t *)__dst,
                  2u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__dst, 0x65CuLL);
                if (qword_102419400 != -1) {
                  dispatch_once(&qword_102419400, &stru_1022F1A68);
                }
                LOWORD(v96) = 0;
                v86 = (std::string *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "CLRavenController::CLRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)", "%s\n", (const char *)v86);
                if (v86 != __dst) {
                  free(v86);
                }
              }
            }
            (*(void (**)(void))(**(void **)(v3 + 312) + 64))(*(void *)(v3 + 312));
          }
          *uint64_t v6 = 1;
          LOBYTE(v93) = 0;
          sub_1000C7F88(__dst);
          int v67 = sub_1000D2988((uint64_t)__dst[0].__r_.__value_.__l.__data_, "RunRavenInWorkerThread", (BOOL *)&v93);
          if (__dst[0].__r_.__value_.__l.__size_) {
            sub_1000DB0A0((std::__shared_weak_count *)__dst[0].__r_.__value_.__l.__size_);
          }
          if (v67) {
            *uint64_t v6 = v93;
          }
          if (qword_102419400 != -1) {
            dispatch_once(&qword_102419400, &stru_1022F1A68);
          }
          v68 = qword_102419408;
          if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
          {
            int v69 = *v6;
            LODWORD(__dst[0].__r_.__value_.__l.__data_) = 67240448;
            HIDWORD(__dst[0].__r_.__value_.__r.__words[0]) = v69;
            LOWORD(__dst[0].__r_.__value_.__r.__words[1]) = 1026;
            *(_DWORD *)((char *)&__dst[0].__r_.__value_.__r.__words[1] + 2) = v93;
            _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "Raven: rct,RunInWorkerThread,%{public}d,set,%{public}d", (uint8_t *)__dst, 0xEu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(__dst, 0x65CuLL);
            if (qword_102419400 != -1) {
              dispatch_once(&qword_102419400, &stru_1022F1A68);
            }
            int v81 = *v6;
            LODWORD(v96) = 67240448;
            HIDWORD(v96) = v81;
            LOWORD(v97) = 1026;
            *(_DWORD *)((char *)&v97 + 2) = v93;
            v82 = (std::string *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "CLRavenController::CLRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)", "%s\n", (const char *)v82);
            if (v82 != __dst) {
              free(v82);
            }
          }
          std::timed_mutex::unlock(v91);
          sub_100CEFA98((uint64_t)buf);
        }
        else
        {
          *(unsigned char *)(v5 + 4439) = 0;
          if (qword_102419400 != -1) {
            dispatch_once(&qword_102419400, &stru_1022F1A68);
          }
          v63 = qword_102419408;
          if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_FAULT, "Raven: could not load Raven parameters; estimator disabled",
              buf,
              2u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419400 != -1) {
              dispatch_once(&qword_102419400, &stru_1022F1A68);
            }
            LOWORD(__dst[0].__r_.__value_.__l.__data_) = 0;
            v64 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "CLRavenController::CLRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)", "%s\n", v64);
            if (v64 != (char *)buf) {
              free(v64);
            }
          }
        }
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v94.__r_.__value_.__l.__data_);
        }
        sub_100CEFA98((uint64_t)v104);
        sub_1001687EC(v95);
      }
    }
    if (sub_1009EC0A8()) {
      operator new();
    }
    if (sub_100862C50()) {
      operator new();
    }
    sub_10060F068();
  }
  if (qword_102419400 == -1)
  {
LABEL_40:
    v19 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(v5 + 4440)) {
        v20 = "enabled";
      }
      else {
        v20 = "disabled";
      }
      LODWORD(v104[0]) = 136446210;
      *(void *)((char *)v104 + 4) = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Raven: CLGLS,Raven XPC service status, %{public}s", (uint8_t *)v104, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(v104, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      if (*(unsigned char *)(v5 + 4440)) {
        v72 = "enabled";
      }
      else {
        v72 = "disabled";
      }
      *(_DWORD *)buf = 136446210;
      *(void *)v100 = v72;
      LODWORD(v88) = 12;
      v73 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLRavenController::CLRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)", "%s\n", v73);
      if (v73 != (char *)v104) {
        free(v73);
      }
    }
    if (!*(unsigned char *)(v5 + 4440)) {
      operator new();
    }
    sub_1000C7F88(v104);
    buf[0] = 0;
    int v21 = sub_1000D2988(*(uint64_t *)&v104[0], "EnableRavenRegisteringForSensorNotificationsImmediately", (BOOL *)buf);
    if (buf[0]) {
      int v22 = v21;
    }
    else {
      int v22 = 0;
    }
    if (*((void *)&v104[0] + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v104[0] + 1));
    }
    *(unsigned char *)(v5 + 4506) = v22;
    if (v22)
    {
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      v23 = qword_102419408;
      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v104[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Raven: registering for sensor notifications immediately after startup", (uint8_t *)v104, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(v104, 0x65CuLL);
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        *(_WORD *)buf = 0;
        LODWORD(v88) = 2;
        v75 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLRavenController::CLRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)", "%s\n", v75);
        if (v75 != (char *)v104) {
          free(v75);
        }
      }
    }
    goto LABEL_58;
  }
LABEL_227:
  dispatch_once(&qword_102419400, &stru_1022F1A68);
  goto LABEL_40;
}

void sub_100CD4708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t *a16, uint64_t a17, raven::RavenSolutionEvent *a18, std::timed_mutex *a19, uint64_t *a20,uint64_t a21,uint64_t *a22,uint64_t *a23,uint64_t *a24,uint64_t *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45)
{
  std::timed_mutex::unlock(a19);
  sub_100CEFA98((uint64_t)&STACK[0x7C0]);
  if (a44 < 0) {
    operator delete(__p);
  }
  sub_100CEFA98((uint64_t)&STACK[0x16C0]);
  sub_1001687EC(&a45);
  *(void *)(v45 + 4704) = off_1022F1908;
  *(void *)(v45 + 4688) = off_1022F1908;
  uint64_t v48 = *(void *)(v45 + 4680);
  *(void *)(v45 + 4680) = 0;
  if (v48) {
    (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
  }
  uint64_t v49 = *(void *)(v45 + 4552);
  *(void *)(v45 + 4552) = 0;
  if (v49) {
    operator delete();
  }
  v50 = *a15;
  if (*a15)
  {
    *(void *)(v45 + 4528) = v50;
    operator delete(v50);
  }
  sub_100CDBA44(a16, 0);
  std::mutex::~mutex(v46);
  sub_100458658(a17);
  raven::RavenSolutionEvent::~RavenSolutionEvent(a18);
  std::timed_mutex::~timed_mutex(a19);
  uint64_t v51 = *(void *)(v45 + 312);
  *(void *)(v45 + 312) = 0;
  if (v51) {
    (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
  }
  uint64_t v52 = *(void *)(v45 + 304);
  *(void *)(v45 + 304) = 0;
  if (v52) {
    (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
  }
  uint64_t v53 = *(void *)(v45 + 296);
  *(void *)(v45 + 296) = 0;
  if (v53) {
    (*(void (**)(uint64_t))(*(void *)v53 + 8))(v53);
  }
  uint64_t v54 = *(void *)(v45 + 272);
  *(void *)(v45 + 272) = 0;
  if (v54) {
    (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
  }
  uint64_t v55 = *(void *)(v45 + 256);
  *(void *)(v45 + 256) = 0;
  if (v55) {
    (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
  }
  uint64_t v56 = *(void *)(v45 + 248);
  *(void *)(v45 + 248) = 0;
  if (v56) {
    (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
  }
  uint64_t v57 = *(void *)(v45 + 208);
  *(void *)(v45 + 208) = 0;
  if (v57) {
    (*(void (**)(void))(v45 + 216))();
  }
  uint64_t v58 = *(void *)(v45 + 200);
  *(void *)(v45 + 200) = 0;
  if (v58) {
    (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
  }
  uint64_t v59 = *(void *)(v45 + 192);
  *(void *)(v45 + 192) = 0;
  if (v59) {
    (*(void (**)(uint64_t))(*(void *)v59 + 8))(v59);
  }
  uint64_t v60 = *(void *)(v45 + 184);
  *(void *)(v45 + 184) = 0;
  if (v60) {
    (*(void (**)(uint64_t))(*(void *)v60 + 8))(v60);
  }
  uint64_t v61 = *(void *)(v45 + 176);
  *(void *)(v45 + 176) = 0;
  if (v61) {
    (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
  }
  uint64_t v62 = *a24;
  *a24 = 0;
  if (v62) {
    (*(void (**)(uint64_t))(*(void *)v62 + 8))(v62);
  }
  uint64_t v63 = *(void *)(v45 + 152);
  *(void *)(v45 + 152) = 0;
  if (v63) {
    (*(void (**)(void))(v45 + 160))();
  }
  uint64_t v64 = *(void *)(v45 + 144);
  *(void *)(v45 + 144) = 0;
  if (v64) {
    (*(void (**)(uint64_t))(*(void *)v64 + 8))(v64);
  }
  uint64_t v65 = *a23;
  *a23 = 0;
  if (v65) {
    (*(void (**)(uint64_t))(*(void *)v65 + 8))(v65);
  }
  sub_100CF0C94(a25, 0);
  sub_100CDB9F4(a20, 0);
  uint64_t v66 = *(void *)(v45 + 64);
  *(void *)(v45 + 64) = 0;
  if (v66) {
    (*(void (**)(void))(v45 + 72))();
  }
  uint64_t v67 = *a22;
  *a22 = 0;
  if (v67) {
    (*(void (**)(uint64_t))(*(void *)v67 + 8))(v67);
  }
  uint64_t v68 = *(void *)(v45 + 40);
  *(void *)(v45 + 40) = 0;
  if (v68) {
    (*(void (**)(void))(v45 + 48))();
  }
  uint64_t v69 = *(void *)(v45 + 24);
  *(void *)(v45 + 24) = 0;
  if (v69) {
    (*(void (**)(void))(v45 + 32))();
  }
  v70 = *(std::__shared_weak_count **)(v45 + 8);
  if (v70) {
    std::__shared_weak_count::__release_weak(v70);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100CD4E10()
{
  int v0 = sub_10073DD54();
  int v5 = 0;
  sub_1000C7F88(&v3);
  int v1 = sub_10006EF84(v3, "EnableRavenEstimator", &v5);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  if (v1)
  {
    if (v5 == 1) {
      int v0 = sub_10015F760();
    }
    else {
      int v0 = 0;
    }
  }
  return sub_100CDC1D0() & v0;
}

void sub_100CD4E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CD4EB0(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  if (a1 != a2) {
    sub_1019EF7A8(a1 + 40, *(std::string **)(a2 + 40), *(long long **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3));
  }
  memcpy((void *)(a1 + 64), (const void *)(a2 + 64), 0x8C0uLL);
  sub_100CEFA3C(a1 + 2304, a2 + 2304);
  memcpy((void *)(a1 + 2352), (const void *)(a2 + 2352), 0x519uLL);
  std::string::operator=((std::string *)(a1 + 3664), (const std::string *)(a2 + 3664));
  __int16 v4 = *(_WORD *)(a2 + 3692);
  *(_DWORD *)(a1 + 3688) = *(_DWORD *)(a2 + 3688);
  *(_WORD *)(a1 + 3692) = v4;
  std::string::operator=((std::string *)(a1 + 3696), (const std::string *)(a2 + 3696));
  char v5 = *(unsigned char *)(a2 + 3722);
  *(_WORD *)(a1 + 3720) = *(_WORD *)(a2 + 3720);
  *(unsigned char *)(a1 + 3722) = v5;
  std::string::operator=((std::string *)(a1 + 3728), (const std::string *)(a2 + 3728));
  char v6 = *(unsigned char *)(a2 + 3754);
  *(_WORD *)(a1 + 3752) = *(_WORD *)(a2 + 3752);
  *(unsigned char *)(a1 + 3754) = v6;
  std::string::operator=((std::string *)(a1 + 3760), (const std::string *)(a2 + 3760));
  long long v7 = *(_OWORD *)(a2 + 3813);
  long long v8 = *(_OWORD *)(a2 + 3800);
  *(_OWORD *)(a1 + 3784) = *(_OWORD *)(a2 + 3784);
  *(_OWORD *)(a1 + 3800) = v8;
  *(_OWORD *)(a1 + 3813) = v7;
  return a1;
}

void sub_100CD4FB8(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  double v5 = sub_10016C458();
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  char v6 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    double v7 = (v5 - *(double *)(a1 + 40)) * 1000.0;
    *(_DWORD *)buf = 67240448;
    int v12 = a2;
    __int16 v13 = 2050;
    double v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLGLS,CLRavenController,configureInitializeAndStartRavenSupervisor,success,%{public}d,time,%{public}.1lfms", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLRavenController::CLRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)_block_invoke", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  if ((a2 & 1) == 0)
  {
    *(unsigned char *)(v4 + 4663) = 0;
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    long long v8 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "CLGLS,Raven,Could not configure Raven supervisor,estimator disabled", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLRavenController::CLRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)_block_invoke", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

void sub_100CD52F8(float32x2_t *a1, unsigned int a2, uint64_t *a3)
{
  CLProfilingIdentify();
  if (a3)
  {
    char v6 = (std::__shared_weak_count *)a3[1];
    if (v6)
    {
      uint64_t v7 = *a3;
      atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      long long v8 = std::__shared_weak_count::lock(v6);
      if (v8 && v7)
      {
        [objc_msgSend(*(id *)(v7 + 16), "silo") assertInside];
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022F1AD0);
        }
        if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
        {
          char v16 = 1;
          int v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRavenController::HandleAccelerometerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
          os_activity_scope_enter(v9, &state);

          if (qword_102419580 != -1) {
            dispatch_once(&qword_102419580, &stru_1022F1AD0);
          }
          int v10 = qword_102419588;
          if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 68289538;
            int v18 = 0;
            __int16 v19 = 2082;
            v20 = "";
            __int16 v21 = 2082;
            int v22 = "activity";
            __int16 v23 = 2050;
            uint64_t v24 = v7;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRavenController::HandleAccelerometerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
          }
        }
        else
        {
          char v16 = 0;
        }
        sub_100CDDE04(v7, a1, a2);
        if (v16) {
          os_activity_scope_leave(&state);
        }
        goto LABEL_34;
      }
    }
    else
    {
      long long v8 = 0;
    }
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    __int16 v13 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called after controller deletion", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      LOWORD(state.opaque[0]) = 0;
      double v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRavenController::HandleAccelerometerNotification_bounce(const CLAccelerometer::Sample *, unsigned int, void *)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    if (!v8)
    {
      if (!v6) {
        return;
      }
      goto LABEL_29;
    }
LABEL_34:
    sub_1000DB0A0(v8);
    if (!v6) {
      return;
    }
LABEL_29:
    std::__shared_weak_count::__release_weak(v6);
    return;
  }
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  BOOL v11 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called with null ctxExpr", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    LOWORD(state.opaque[0]) = 0;
    int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRavenController::HandleAccelerometerNotification_bounce(const CLAccelerometer::Sample *, unsigned int, void *)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
}

void sub_100CD5778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, char a12)
{
  if (v13) {
    sub_1000DB0A0(v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CD57C4(double *a1, unsigned int a2, uint64_t *a3)
{
  CLProfilingIdentify();
  if (a3)
  {
    char v6 = (std::__shared_weak_count *)a3[1];
    if (v6)
    {
      uint64_t v7 = *a3;
      atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      long long v8 = std::__shared_weak_count::lock(v6);
      if (v8 && v7)
      {
        [objc_msgSend(*(id *)(v7 + 16), "silo") assertInside];
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022F1AD0);
        }
        if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
        {
          char v16 = 1;
          int v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRavenController::HandleBarometerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
          os_activity_scope_enter(v9, &state);

          if (qword_102419580 != -1) {
            dispatch_once(&qword_102419580, &stru_1022F1AD0);
          }
          int v10 = qword_102419588;
          if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 68289538;
            int v18 = 0;
            __int16 v19 = 2082;
            v20 = "";
            __int16 v21 = 2082;
            int v22 = "activity";
            __int16 v23 = 2050;
            uint64_t v24 = v7;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRavenController::HandleBarometerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
          }
        }
        else
        {
          char v16 = 0;
        }
        sub_100CDE660(v7, a1, a2);
        if (v16) {
          os_activity_scope_leave(&state);
        }
        goto LABEL_34;
      }
    }
    else
    {
      long long v8 = 0;
    }
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    __int16 v13 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called after controller deletion", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      LOWORD(state.opaque[0]) = 0;
      double v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRavenController::HandleBarometerNotification_bounce(const CLPressure::Sample *, unsigned int, void *)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    if (!v8)
    {
      if (!v6) {
        return;
      }
      goto LABEL_29;
    }
LABEL_34:
    sub_1000DB0A0(v8);
    if (!v6) {
      return;
    }
LABEL_29:
    std::__shared_weak_count::__release_weak(v6);
    return;
  }
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  BOOL v11 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called with null ctxExpr", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    LOWORD(state.opaque[0]) = 0;
    int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRavenController::HandleBarometerNotification_bounce(const CLPressure::Sample *, unsigned int, void *)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
}

void sub_100CD5C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, char a12)
{
  if (v13) {
    sub_1000DB0A0(v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CD5C90(uint64_t a1, int *a2, char *a3, uint64_t *a4)
{
  CLProfilingIdentify();
  if (a4)
  {
    uint64_t v7 = (std::__shared_weak_count *)a4[1];
    if (v7)
    {
      uint64_t v8 = *a4;
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      int v9 = std::__shared_weak_count::lock(v7);
      if (v9 && v8)
      {
        [objc_msgSend(*(id *)(v8 + 16), "silo") assertInside];
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022F1AD0);
        }
        if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
        {
          char v18 = 1;
          int v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRavenController::HandleDaemonStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
          os_activity_scope_enter(v10, &state);

          if (qword_102419580 != -1) {
            dispatch_once(&qword_102419580, &stru_1022F1AD0);
          }
          BOOL v11 = qword_102419588;
          if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 68289538;
            int v20 = 0;
            __int16 v21 = 2082;
            int v22 = "";
            __int16 v23 = 2082;
            uint64_t v24 = "activity";
            __int16 v25 = 2050;
            uint64_t v26 = v8;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRavenController::HandleDaemonStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
          }
        }
        else
        {
          char v18 = 0;
        }
        uint64_t v15 = *(void *)(v8 + 80);
        if (v15) {
          sub_1008C1888(v15, a2, a3);
        }
        if (v18) {
          os_activity_scope_leave(&state);
        }
        goto LABEL_36;
      }
    }
    else
    {
      int v9 = 0;
    }
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    double v14 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called after controller deletion", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      LOWORD(state.opaque[0]) = 0;
      char v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRavenController::HandleDaemonStatusNotification_bounce(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &, void *)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    if (!v9)
    {
      if (!v7) {
        return;
      }
      goto LABEL_29;
    }
LABEL_36:
    sub_1000DB0A0(v9);
    if (!v7) {
      return;
    }
LABEL_29:
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  int v12 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called with null ctxExpr", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    LOWORD(state.opaque[0]) = 0;
    __int16 v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRavenController::HandleDaemonStatusNotification_bounce(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &, void *)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
}

void sub_100CD6114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, char a12)
{
  if (v13) {
    sub_1000DB0A0(v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CD6160(double *a1, unsigned int a2, uint64_t *a3)
{
  CLProfilingIdentify();
  if (a3)
  {
    char v6 = (std::__shared_weak_count *)a3[1];
    if (v6)
    {
      uint64_t v7 = *a3;
      atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v8 = std::__shared_weak_count::lock(v6);
      if (v8 && v7)
      {
        [objc_msgSend(*(id *)(v7 + 16), "silo") assertInside];
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022F1AD0);
        }
        if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
        {
          char v16 = 1;
          int v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRavenController::HandleDeviceMotionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
          os_activity_scope_enter(v9, &state);

          if (qword_102419580 != -1) {
            dispatch_once(&qword_102419580, &stru_1022F1AD0);
          }
          int v10 = qword_102419588;
          if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 68289538;
            int v18 = 0;
            __int16 v19 = 2082;
            int v20 = "";
            __int16 v21 = 2082;
            int v22 = "activity";
            __int16 v23 = 2050;
            uint64_t v24 = v7;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRavenController::HandleDeviceMotionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
          }
        }
        else
        {
          char v16 = 0;
        }
        sub_100CDFA98(v7, a1, a2);
        if (v16) {
          os_activity_scope_leave(&state);
        }
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    __int16 v13 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called after controller deletion", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      LOWORD(state.opaque[0]) = 0;
      double v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRavenController::HandleDeviceMotionNotification_bounce(const CLDeviceMotion::Sample *, unsigned int, void *)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    if (!v8)
    {
      if (!v6) {
        return;
      }
      goto LABEL_29;
    }
LABEL_34:
    sub_1000DB0A0(v8);
    if (!v6) {
      return;
    }
LABEL_29:
    std::__shared_weak_count::__release_weak(v6);
    return;
  }
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  BOOL v11 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called with null ctxExpr", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    LOWORD(state.opaque[0]) = 0;
    int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRavenController::HandleDeviceMotionNotification_bounce(const CLDeviceMotion::Sample *, unsigned int, void *)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
}

void sub_100CD65E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, char a12)
{
  if (v13) {
    sub_1000DB0A0(v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CD662C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t *a4)
{
  CLProfilingIdentify();
  if (a4)
  {
    uint64_t v7 = (std::__shared_weak_count *)a4[1];
    if (v7)
    {
      uint64_t v8 = *a4;
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      int v9 = std::__shared_weak_count::lock(v7);
      if (v9 && v8)
      {
        [objc_msgSend(*(id *)(v8 + 16), "silo") assertInside];
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022F1AD0);
        }
        if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
        {
          char v18 = 1;
          BOOL v11 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRavenController::HandleGnssAvailabilityPredictorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
          os_activity_scope_enter(v11, &state);

          if (qword_102419580 != -1) {
            dispatch_once(&qword_102419580, &stru_1022F1AD0);
          }
          int v12 = qword_102419588;
          if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 68289538;
            int v20 = 0;
            __int16 v21 = 2082;
            int v22 = "";
            __int16 v23 = 2082;
            uint64_t v24 = "activity";
            __int16 v25 = 2050;
            uint64_t v26 = v8;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRavenController::HandleGnssAvailabilityPredictorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
          }
        }
        else
        {
          char v18 = 0;
        }
        sub_100CE00C4(v8, v10, a2, a3);
        if (v18) {
          os_activity_scope_leave(&state);
        }
        goto LABEL_34;
      }
    }
    else
    {
      int v9 = 0;
    }
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v15 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called after controller deletion", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      LOWORD(state.opaque[0]) = 0;
      char v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRavenController::HandleGnssAvailabilityPredictorNotification_bounce(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void *)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    if (!v9)
    {
      if (!v7) {
        return;
      }
      goto LABEL_29;
    }
LABEL_34:
    sub_1000DB0A0(v9);
    if (!v7) {
      return;
    }
LABEL_29:
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  __int16 v13 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called with null ctxExpr", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    LOWORD(state.opaque[0]) = 0;
    double v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRavenController::HandleGnssAvailabilityPredictorNotification_bounce(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void *)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
}

void sub_100CD6AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, char a12)
{
  if (v13) {
    sub_1000DB0A0(v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CD6AF8(int a1, _DWORD *a2, uint64_t a3, uint64_t *a4)
{
  CLProfilingIdentify();
  if (a4)
  {
    uint64_t v8 = (std::__shared_weak_count *)a4[1];
    if (v8)
    {
      uint64_t v9 = *a4;
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v10 = std::__shared_weak_count::lock(v8);
      if (v10 && v9)
      {
        [objc_msgSend(*(id *)(v9 + 16), "silo") assertInside];
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022F1AD0);
        }
        if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
        {
          char v18 = 1;
          BOOL v11 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRavenController::HandleLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
          os_activity_scope_enter(v11, &state);

          if (qword_102419580 != -1) {
            dispatch_once(&qword_102419580, &stru_1022F1AD0);
          }
          int v12 = qword_102419588;
          if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 68289538;
            int v20 = 0;
            __int16 v21 = 2082;
            int v22 = "";
            __int16 v23 = 2082;
            uint64_t v24 = "activity";
            __int16 v25 = 2050;
            uint64_t v26 = v9;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRavenController::HandleLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
          }
        }
        else
        {
          char v18 = 0;
        }
        sub_100CE0450(v9, a1, a2, a3);
        if (v18) {
          os_activity_scope_leave(&state);
        }
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v15 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called after controller deletion", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      LOWORD(state.opaque[0]) = 0;
      char v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRavenController::HandleLocationNotification_bounce(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void *)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    if (!v10)
    {
      if (!v8) {
        return;
      }
      goto LABEL_29;
    }
LABEL_34:
    sub_1000DB0A0(v10);
    if (!v8) {
      return;
    }
LABEL_29:
    std::__shared_weak_count::__release_weak(v8);
    return;
  }
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  __int16 v13 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called with null ctxExpr", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    LOWORD(state.opaque[0]) = 0;
    double v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRavenController::HandleLocationNotification_bounce(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void *)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
}

void sub_100CD6F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, char a12)
{
  if (v13) {
    sub_1000DB0A0(v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CD6FCC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t *a4)
{
  CLProfilingIdentify();
  if (a4)
  {
    uint64_t v7 = (std::__shared_weak_count *)a4[1];
    if (v7)
    {
      uint64_t v8 = *a4;
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v9 = std::__shared_weak_count::lock(v7);
      if (v9 && v8)
      {
        [objc_msgSend(*(id *)(v8 + 16), "silo") assertInside];
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022F1AD0);
        }
        if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
        {
          char v18 = 1;
          BOOL v11 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRavenController::HandleMeasurementNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
          os_activity_scope_enter(v11, &state);

          if (qword_102419580 != -1) {
            dispatch_once(&qword_102419580, &stru_1022F1AD0);
          }
          int v12 = qword_102419588;
          if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 68289538;
            int v20 = 0;
            __int16 v21 = 2082;
            int v22 = "";
            __int16 v23 = 2082;
            uint64_t v24 = "activity";
            __int16 v25 = 2050;
            uint64_t v26 = v8;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRavenController::HandleMeasurementNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
          }
        }
        else
        {
          char v18 = 0;
        }
        sub_100CE281C(v8, v10, a2, a3);
        if (v18) {
          os_activity_scope_leave(&state);
        }
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v15 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called after controller deletion", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      LOWORD(state.opaque[0]) = 0;
      char v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRavenController::HandleMeasurementNotification_bounce(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void *)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    if (!v9)
    {
      if (!v7) {
        return;
      }
      goto LABEL_29;
    }
LABEL_34:
    sub_1000DB0A0(v9);
    if (!v7) {
      return;
    }
LABEL_29:
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  __int16 v13 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called with null ctxExpr", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    LOWORD(state.opaque[0]) = 0;
    double v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRavenController::HandleMeasurementNotification_bounce(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void *)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
}

void sub_100CD744C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, char a12)
{
  if (v13) {
    sub_1000DB0A0(v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CD7498(double *a1, unsigned int a2, uint64_t *a3)
{
  CLProfilingIdentify();
  if (a3)
  {
    char v6 = (std::__shared_weak_count *)a3[1];
    if (v6)
    {
      uint64_t v7 = *a3;
      atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v8 = std::__shared_weak_count::lock(v6);
      if (v8 && v7)
      {
        [objc_msgSend(*(id *)(v7 + 16), "silo") assertInside];
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022F1AD0);
        }
        if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
        {
          char v16 = 1;
          uint64_t v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRavenController::HandleMagnetometerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
          os_activity_scope_enter(v9, &state);

          if (qword_102419580 != -1) {
            dispatch_once(&qword_102419580, &stru_1022F1AD0);
          }
          uint64_t v10 = qword_102419588;
          if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 68289538;
            int v18 = 0;
            __int16 v19 = 2082;
            int v20 = "";
            __int16 v21 = 2082;
            int v22 = "activity";
            __int16 v23 = 2050;
            uint64_t v24 = v7;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRavenController::HandleMagnetometerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
          }
        }
        else
        {
          char v16 = 0;
        }
        sub_100CE0ECC(v7, a1, a2);
        if (v16) {
          os_activity_scope_leave(&state);
        }
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    __int16 v13 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called after controller deletion", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      LOWORD(state.opaque[0]) = 0;
      double v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRavenController::HandleMagnetometerNotification_bounce(const CLMagnetometer::Sample *, unsigned int, void *)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    if (!v8)
    {
      if (!v6) {
        return;
      }
      goto LABEL_29;
    }
LABEL_34:
    sub_1000DB0A0(v8);
    if (!v6) {
      return;
    }
LABEL_29:
    std::__shared_weak_count::__release_weak(v6);
    return;
  }
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  BOOL v11 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called with null ctxExpr", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    LOWORD(state.opaque[0]) = 0;
    int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRavenController::HandleMagnetometerNotification_bounce(const CLMagnetometer::Sample *, unsigned int, void *)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
}

void sub_100CD7918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, char a12)
{
  if (v13) {
    sub_1000DB0A0(v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CD7964(int a1, _DWORD *a2, uint64_t a3, uint64_t *a4)
{
  CLProfilingIdentify();
  if (a4)
  {
    uint64_t v8 = (std::__shared_weak_count *)a4[1];
    if (v8)
    {
      uint64_t v9 = *a4;
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v10 = std::__shared_weak_count::lock(v8);
      if (v10 && v9)
      {
        [objc_msgSend(*(id *)(v9 + 16), "silo") assertInside];
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022F1AD0);
        }
        if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
        {
          char v18 = 1;
          BOOL v11 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRavenController::HandleGpsAssistantNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
          os_activity_scope_enter(v11, &state);

          if (qword_102419580 != -1) {
            dispatch_once(&qword_102419580, &stru_1022F1AD0);
          }
          int v12 = qword_102419588;
          if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 68289538;
            int v20 = 0;
            __int16 v21 = 2082;
            int v22 = "";
            __int16 v23 = 2082;
            uint64_t v24 = "activity";
            __int16 v25 = 2050;
            uint64_t v26 = v9;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRavenController::HandleGpsAssistantNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
          }
        }
        else
        {
          char v18 = 0;
        }
        sub_100CE16EC(v9, a1, a2, a3);
        if (v18) {
          os_activity_scope_leave(&state);
        }
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v15 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called after controller deletion", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      LOWORD(state.opaque[0]) = 0;
      char v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRavenController::HandleGpsAssistantNotification_bounce(int, const CLGpsAssistant_Type::Notification &, const CLGpsAssistant_Type::NotificationData &, void *)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    if (!v10)
    {
      if (!v8) {
        return;
      }
      goto LABEL_29;
    }
LABEL_34:
    sub_1000DB0A0(v10);
    if (!v8) {
      return;
    }
LABEL_29:
    std::__shared_weak_count::__release_weak(v8);
    return;
  }
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  __int16 v13 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called with null ctxExpr", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    LOWORD(state.opaque[0]) = 0;
    double v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRavenController::HandleGpsAssistantNotification_bounce(int, const CLGpsAssistant_Type::Notification &, const CLGpsAssistant_Type::NotificationData &, void *)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
}

void sub_100CD7DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, char a12)
{
  if (v13) {
    sub_1000DB0A0(v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CD7E38(int a1, _DWORD *a2, CLMotionActivity *a3, uint64_t *a4)
{
  CLProfilingIdentify();
  if (a4)
  {
    uint64_t v8 = (std::__shared_weak_count *)a4[1];
    if (v8)
    {
      uint64_t v9 = *a4;
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v10 = std::__shared_weak_count::lock(v8);
      if (v10 && v9)
      {
        [objc_msgSend(*(id *)(v9 + 16), "silo") assertInside];
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022F1AD0);
        }
        if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
        {
          char v18 = 1;
          BOOL v11 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRavenController::HandleMotionStateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
          os_activity_scope_enter(v11, &state);

          if (qword_102419580 != -1) {
            dispatch_once(&qword_102419580, &stru_1022F1AD0);
          }
          int v12 = qword_102419588;
          if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 68289538;
            int v20 = 0;
            __int16 v21 = 2082;
            int v22 = "";
            __int16 v23 = 2082;
            uint64_t v24 = "activity";
            __int16 v25 = 2050;
            uint64_t v26 = v9;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRavenController::HandleMotionStateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
          }
        }
        else
        {
          char v18 = 0;
        }
        sub_100CE2B84(v9, a1, a2, a3);
        if (v18) {
          os_activity_scope_leave(&state);
        }
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v15 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called after controller deletion", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      LOWORD(state.opaque[0]) = 0;
      char v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRavenController::HandleMotionStateNotification_bounce(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &, void *)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    if (!v10)
    {
      if (!v8) {
        return;
      }
      goto LABEL_29;
    }
LABEL_34:
    sub_1000DB0A0(v10);
    if (!v8) {
      return;
    }
LABEL_29:
    std::__shared_weak_count::__release_weak(v8);
    return;
  }
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  __int16 v13 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called with null ctxExpr", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    LOWORD(state.opaque[0]) = 0;
    double v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRavenController::HandleMotionStateNotification_bounce(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &, void *)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
}

void sub_100CD82C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, char a12)
{
  if (v13) {
    sub_1000DB0A0(v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CD830C(int a1, _DWORD *a2, uint64_t a3, uint64_t *a4)
{
  CLProfilingIdentify();
  if (a4)
  {
    uint64_t v8 = (std::__shared_weak_count *)a4[1];
    if (v8)
    {
      uint64_t v9 = *a4;
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v10 = std::__shared_weak_count::lock(v8);
      if (v10 && v9)
      {
        [objc_msgSend(*(id *)(v9 + 16), "silo") assertInside];
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022F1AD0);
        }
        if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
        {
          char v18 = 1;
          BOOL v11 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRavenController::HandleMotionStateObserverNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
          os_activity_scope_enter(v11, &state);

          if (qword_102419580 != -1) {
            dispatch_once(&qword_102419580, &stru_1022F1AD0);
          }
          int v12 = qword_102419588;
          if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 68289538;
            int v20 = 0;
            __int16 v21 = 2082;
            int v22 = "";
            __int16 v23 = 2082;
            uint64_t v24 = "activity";
            __int16 v25 = 2050;
            uint64_t v26 = v9;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRavenController::HandleMotionStateObserverNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
          }
        }
        else
        {
          char v18 = 0;
        }
        sub_100CE3004(v9, a1, a2, a3);
        if (v18) {
          os_activity_scope_leave(&state);
        }
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v15 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called after controller deletion", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      LOWORD(state.opaque[0]) = 0;
      char v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRavenController::HandleMotionStateObserverNotification_bounce(int, const CLMotionStateObserver_Type::Notification &, const CLMotionStateObserver_Type::NotificationData &, void *)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    if (!v10)
    {
      if (!v8) {
        return;
      }
      goto LABEL_29;
    }
LABEL_34:
    sub_1000DB0A0(v10);
    if (!v8) {
      return;
    }
LABEL_29:
    std::__shared_weak_count::__release_weak(v8);
    return;
  }
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  __int16 v13 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called with null ctxExpr", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    LOWORD(state.opaque[0]) = 0;
    double v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRavenController::HandleMotionStateObserverNotification_bounce(int, const CLMotionStateObserver_Type::Notification &, const CLMotionStateObserver_Type::NotificationData &, void *)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
}

void sub_100CD8794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, char a12)
{
  if (v13) {
    sub_1000DB0A0(v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CD87E0(int a1, _DWORD *a2, uint64_t a3, uint64_t *a4)
{
  CLProfilingIdentify();
  if (a4)
  {
    uint64_t v8 = (std::__shared_weak_count *)a4[1];
    if (v8)
    {
      uint64_t v9 = *a4;
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v10 = std::__shared_weak_count::lock(v8);
      if (v10 && v9)
      {
        [objc_msgSend(*(id *)(v9 + 16), "silo") assertInside];
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022F1AD0);
        }
        if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
        {
          char v18 = 1;
          BOOL v11 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRavenController::HandleNatalimetryNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
          os_activity_scope_enter(v11, &state);

          if (qword_102419580 != -1) {
            dispatch_once(&qword_102419580, &stru_1022F1AD0);
          }
          int v12 = qword_102419588;
          if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 68289538;
            int v20 = 0;
            __int16 v21 = 2082;
            int v22 = "";
            __int16 v23 = 2082;
            uint64_t v24 = "activity";
            __int16 v25 = 2050;
            uint64_t v26 = v9;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRavenController::HandleNatalimetryNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
          }
        }
        else
        {
          char v18 = 0;
        }
        sub_100CE33CC(v9, a1, a2, a3);
        if (v18) {
          os_activity_scope_leave(&state);
        }
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v15 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called after controller deletion", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      LOWORD(state.opaque[0]) = 0;
      char v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRavenController::HandleNatalimetryNotification_bounce(int, const CLNatalimetryNotifier_Type::Notification &, const CLNatalimetryNotifier_Type::NotificationData &, void *)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    if (!v10)
    {
      if (!v8) {
        return;
      }
      goto LABEL_29;
    }
LABEL_34:
    sub_1000DB0A0(v10);
    if (!v8) {
      return;
    }
LABEL_29:
    std::__shared_weak_count::__release_weak(v8);
    return;
  }
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  __int16 v13 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called with null ctxExpr", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    LOWORD(state.opaque[0]) = 0;
    double v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRavenController::HandleNatalimetryNotification_bounce(int, const CLNatalimetryNotifier_Type::Notification &, const CLNatalimetryNotifier_Type::NotificationData &, void *)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
}

void sub_100CD8C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, char a12)
{
  if (v13) {
    sub_1000DB0A0(v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CD8CB4(float32x2_t *a1, unsigned int a2, uint64_t *a3)
{
  CLProfilingIdentify();
  if (a3)
  {
    char v6 = (std::__shared_weak_count *)a3[1];
    if (v6)
    {
      uint64_t v7 = *a3;
      atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v8 = std::__shared_weak_count::lock(v6);
      if (v8 && v7)
      {
        [objc_msgSend(*(id *)(v7 + 16), "silo") assertInside];
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022F1AD0);
        }
        if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
        {
          char v16 = 1;
          uint64_t v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRavenController::HandleRateGyroNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
          os_activity_scope_enter(v9, &state);

          if (qword_102419580 != -1) {
            dispatch_once(&qword_102419580, &stru_1022F1AD0);
          }
          uint64_t v10 = qword_102419588;
          if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 68289538;
            int v18 = 0;
            __int16 v19 = 2082;
            int v20 = "";
            __int16 v21 = 2082;
            int v22 = "activity";
            __int16 v23 = 2050;
            uint64_t v24 = v7;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRavenController::HandleRateGyroNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
          }
        }
        else
        {
          char v16 = 0;
        }
        sub_100CE38B4(v7, a1, a2);
        if (v16) {
          os_activity_scope_leave(&state);
        }
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    __int16 v13 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called after controller deletion", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      LOWORD(state.opaque[0]) = 0;
      double v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRavenController::HandleRateGyroNotification_bounce(const CLGyro::Sample *, unsigned int, void *)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    if (!v8)
    {
      if (!v6) {
        return;
      }
      goto LABEL_29;
    }
LABEL_34:
    sub_1000DB0A0(v8);
    if (!v6) {
      return;
    }
LABEL_29:
    std::__shared_weak_count::__release_weak(v6);
    return;
  }
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  BOOL v11 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called with null ctxExpr", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    LOWORD(state.opaque[0]) = 0;
    int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRavenController::HandleRateGyroNotification_bounce(const CLGyro::Sample *, unsigned int, void *)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
}

void sub_100CD9134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, char a12)
{
  if (v13) {
    sub_1000DB0A0(v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CD9180(int a1, _DWORD *a2, int *a3, uint64_t *a4)
{
  CLProfilingIdentify();
  if (a4)
  {
    uint64_t v8 = (std::__shared_weak_count *)a4[1];
    if (v8)
    {
      uint64_t v9 = *a4;
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v10 = std::__shared_weak_count::lock(v8);
      if (v10 && v9)
      {
        [objc_msgSend(*(id *)(v9 + 16), "silo") assertInside];
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022F1AD0);
        }
        if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
        {
          char v18 = 1;
          BOOL v11 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRavenController::HandleSignalEnvironmentNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
          os_activity_scope_enter(v11, &state);

          if (qword_102419580 != -1) {
            dispatch_once(&qword_102419580, &stru_1022F1AD0);
          }
          int v12 = qword_102419588;
          if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 68289538;
            int v20 = 0;
            __int16 v21 = 2082;
            int v22 = "";
            __int16 v23 = 2082;
            uint64_t v24 = "activity";
            __int16 v25 = 2050;
            uint64_t v26 = v9;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRavenController::HandleSignalEnvironmentNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
          }
        }
        else
        {
          char v18 = 0;
        }
        sub_100CE410C(v9, a1, a2, a3);
        if (v18) {
          os_activity_scope_leave(&state);
        }
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v15 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called after controller deletion", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      LOWORD(state.opaque[0]) = 0;
      char v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRavenController::HandleSignalEnvironmentNotification_bounce(int, const CLSignalEnvironmentProvider_Type::Notification &, const CLSignalEnvironmentProvider_Type::NotificationData &, void *)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    if (!v10)
    {
      if (!v8) {
        return;
      }
      goto LABEL_29;
    }
LABEL_34:
    sub_1000DB0A0(v10);
    if (!v8) {
      return;
    }
LABEL_29:
    std::__shared_weak_count::__release_weak(v8);
    return;
  }
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  __int16 v13 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called with null ctxExpr", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    LOWORD(state.opaque[0]) = 0;
    double v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRavenController::HandleSignalEnvironmentNotification_bounce(int, const CLSignalEnvironmentProvider_Type::Notification &, const CLSignalEnvironmentProvider_Type::NotificationData &, void *)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
}

void sub_100CD9608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, char a12)
{
  if (v13) {
    sub_1000DB0A0(v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CD9654(int a1, _DWORD *a2, uint64_t a3, uint64_t *a4)
{
  CLProfilingIdentify();
  if (a4)
  {
    uint64_t v8 = (std::__shared_weak_count *)a4[1];
    if (v8)
    {
      uint64_t v9 = *a4;
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v10 = std::__shared_weak_count::lock(v8);
      if (v10 && v9)
      {
        [objc_msgSend(*(id *)(v9 + 16), "silo") assertInside];
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022F1AD0);
        }
        if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
        {
          char v18 = 1;
          BOOL v11 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRavenController::HandleStepCountNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
          os_activity_scope_enter(v11, &state);

          if (qword_102419580 != -1) {
            dispatch_once(&qword_102419580, &stru_1022F1AD0);
          }
          int v12 = qword_102419588;
          if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 68289538;
            int v20 = 0;
            __int16 v21 = 2082;
            int v22 = "";
            __int16 v23 = 2082;
            uint64_t v24 = "activity";
            __int16 v25 = 2050;
            uint64_t v26 = v9;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRavenController::HandleStepCountNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
          }
        }
        else
        {
          char v18 = 0;
        }
        sub_100CE44BC(v9, a1, a2, a3);
        if (v18) {
          os_activity_scope_leave(&state);
        }
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v15 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called after controller deletion", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      LOWORD(state.opaque[0]) = 0;
      char v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRavenController::HandleStepCountNotification_bounce(int, const CLStepCountNotifier_Type::Notification &, const CLStepCountNotifier_Type::NotificationData &, void *)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    if (!v10)
    {
      if (!v8) {
        return;
      }
      goto LABEL_29;
    }
LABEL_34:
    sub_1000DB0A0(v10);
    if (!v8) {
      return;
    }
LABEL_29:
    std::__shared_weak_count::__release_weak(v8);
    return;
  }
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  __int16 v13 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called with null ctxExpr", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    LOWORD(state.opaque[0]) = 0;
    double v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRavenController::HandleStepCountNotification_bounce(int, const CLStepCountNotifier_Type::Notification &, const CLStepCountNotifier_Type::NotificationData &, void *)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
}

void sub_100CD9ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, char a12)
{
  if (v13) {
    sub_1000DB0A0(v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CD9B28(uint64_t a1)
{
}

void sub_100CD9B30(uint64_t a1)
{
  sub_10016BC44((uint64_t)v5);
  uint64_t v2 = *(void *)(a1 + 4736);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 40))(v2))
  {
    sub_100CCF240(a1);
    sub_100CCF404(a1);
    sub_100CCF5C8(a1);
    sub_100CCF7B8(a1);
    sub_100CCF984(a1);
  }
  if (*(unsigned char *)(a1 + 4663) || *(void *)(a1 + 4680))
  {
    uint64_t v3 = sub_100168850(v4);
    sub_100CE4884(v3, v5, (uint64_t)v4);
    sub_100CCB93C(a1, (uint64_t)v4, 0);
    sub_1001687EC(v4);
  }
}

void sub_100CD9BF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

void sub_100CD9C0C(int a1, _DWORD *a2, uint64_t a3, uint64_t *a4)
{
  CLProfilingIdentify();
  if (a4)
  {
    uint64_t v8 = (std::__shared_weak_count *)a4[1];
    if (v8)
    {
      uint64_t v9 = *a4;
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v10 = std::__shared_weak_count::lock(v8);
      if (v10 && v9)
      {
        [objc_msgSend(*(id *)(v9 + 16), "silo") assertInside];
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022F1AD0);
        }
        if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
        {
          char v18 = 1;
          BOOL v11 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRavenController::HandleVendorLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
          os_activity_scope_enter(v11, &state);

          if (qword_102419580 != -1) {
            dispatch_once(&qword_102419580, &stru_1022F1AD0);
          }
          int v12 = qword_102419588;
          if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 68289538;
            int v20 = 0;
            __int16 v21 = 2082;
            int v22 = "";
            __int16 v23 = 2082;
            uint64_t v24 = "activity";
            __int16 v25 = 2050;
            uint64_t v26 = v9;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRavenController::HandleVendorLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
          }
        }
        else
        {
          char v18 = 0;
        }
        sub_100CE4B3C(v9, a1, a2, a3);
        if (v18) {
          os_activity_scope_leave(&state);
        }
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v15 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called after controller deletion", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      LOWORD(state.opaque[0]) = 0;
      char v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRavenController::HandleVendorLocationNotification_bounce(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void *)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    if (!v10)
    {
      if (!v8) {
        return;
      }
      goto LABEL_29;
    }
LABEL_34:
    sub_1000DB0A0(v10);
    if (!v8) {
      return;
    }
LABEL_29:
    std::__shared_weak_count::__release_weak(v8);
    return;
  }
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  __int16 v13 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called with null ctxExpr", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    LOWORD(state.opaque[0]) = 0;
    double v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRavenController::HandleVendorLocationNotification_bounce(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void *)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
}

void sub_100CDA094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, char a12)
{
  if (v13) {
    sub_1000DB0A0(v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CDA0E0(int a1, int *a2, char *a3, uint64_t *a4)
{
  CLProfilingIdentify();
  if (a4)
  {
    uint64_t v8 = (std::__shared_weak_count *)a4[1];
    if (v8)
    {
      uint64_t v9 = *a4;
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v10 = std::__shared_weak_count::lock(v8);
      if (v10 && v9)
      {
        [objc_msgSend(*(id *)(v9 + 16), "silo") assertInside];
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022F1AD0);
        }
        if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
        {
          char v18 = 1;
          BOOL v11 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRavenController::HandleWifiNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
          os_activity_scope_enter(v11, &state);

          if (qword_102419580 != -1) {
            dispatch_once(&qword_102419580, &stru_1022F1AD0);
          }
          int v12 = qword_102419588;
          if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 68289538;
            int v20 = 0;
            __int16 v21 = 2082;
            int v22 = "";
            __int16 v23 = 2082;
            uint64_t v24 = "activity";
            __int16 v25 = 2050;
            uint64_t v26 = v9;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRavenController::HandleWifiNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
          }
        }
        else
        {
          char v18 = 0;
        }
        sub_100CE5144(v9, a1, a2, a3);
        if (v18) {
          os_activity_scope_leave(&state);
        }
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v15 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called after controller deletion", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      LOWORD(state.opaque[0]) = 0;
      char v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRavenController::HandleWifiNotification_bounce(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &, void *)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    if (!v10)
    {
      if (!v8) {
        return;
      }
      goto LABEL_29;
    }
LABEL_34:
    sub_1000DB0A0(v10);
    if (!v8) {
      return;
    }
LABEL_29:
    std::__shared_weak_count::__release_weak(v8);
    return;
  }
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  __int16 v13 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called with null ctxExpr", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    LOWORD(state.opaque[0]) = 0;
    double v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRavenController::HandleWifiNotification_bounce(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &, void *)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
}

void sub_100CDA568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, char a12)
{
  if (v13) {
    sub_1000DB0A0(v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CDA5B4(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    sub_101A8A2CC();
  }
  uint64_t v4 = *(void *)(a1 + 4736);
  if (v4 && ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 32))(v4) & 1) == 0)
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    __int16 v13 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 16))(__p, a2);
      double v14 = v26 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning Raven: could not handle exiting %{public}s", buf, 0xCu);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a2 + 16))(buf, a2);
      if (v22 >= 0) {
        __int16 v19 = buf;
      }
      else {
        __int16 v19 = *(unsigned char **)buf;
      }
      int v23 = 136446210;
      uint64_t v24 = v19;
      int v20 = (char *)_os_log_send_and_compose_impl();
      if (v22 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::ChangeState(RavenControllerState *const)", "%s\n", v20);
      if (v20 != (char *)__p) {
        free(v20);
      }
    }
    sub_100CDBA94(a1);
  }
  else
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    double v5 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 16))(__p, a2);
      char v6 = v26 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Raven: entering %{public}s", buf, 0xCu);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a2 + 16))(buf, a2);
      if (v22 >= 0) {
        uint64_t v15 = buf;
      }
      else {
        uint64_t v15 = *(unsigned char **)buf;
      }
      int v23 = 136446210;
      uint64_t v24 = v15;
      char v16 = (char *)_os_log_send_and_compose_impl();
      if (v22 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::ChangeState(RavenControllerState *const)", "%s\n", v16);
      if (v16 != (char *)__p) {
        free(v16);
      }
    }
    *(void *)(a1 + 4736) = a2;
    if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2))
    {
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      uint64_t v7 = qword_102419408;
      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 16))(__p, a2);
        uint64_t v8 = v26 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Raven: successfully entered %{public}s", buf, 0xCu);
        if (v26 < 0) {
          operator delete(__p[0]);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a2 + 16))(buf, a2);
        if (v22 >= 0) {
          uint64_t v9 = buf;
        }
        else {
          uint64_t v9 = *(unsigned char **)buf;
        }
        int v23 = 136446210;
        uint64_t v24 = v9;
        uint64_t v10 = (char *)_os_log_send_and_compose_impl();
        if (v22 < 0) {
          operator delete(*(void **)buf);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::ChangeState(RavenControllerState *const)", "%s\n", v10);
        if (v10 != (char *)__p) {
          free(v10);
        }
      }
    }
    else
    {
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      BOOL v11 = qword_102419408;
      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
      {
        (*(void (**)(void **__return_ptr))(**(void **)(a1 + 4736) + 16))(__p);
        int v12 = v26 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Raven: could not handle entering %{public}s", buf, 0xCu);
        if (v26 < 0) {
          operator delete(__p[0]);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 4736) + 16))(buf);
        if (v22 >= 0) {
          int v17 = buf;
        }
        else {
          int v17 = *(unsigned char **)buf;
        }
        int v23 = 136446210;
        uint64_t v24 = v17;
        char v18 = (char *)_os_log_send_and_compose_impl();
        if (v22 < 0) {
          operator delete(*(void **)buf);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::ChangeState(RavenControllerState *const)", "%s\n", v18);
        if (v18 != (char *)__p) {
          free(v18);
        }
      }
      sub_100CDBA94(a1);
    }
  }
}

void sub_100CDAE38(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t *a4)
{
  CLProfilingIdentify();
  if (a4)
  {
    uint64_t v7 = (std::__shared_weak_count *)a4[1];
    if (v7)
    {
      uint64_t v8 = *a4;
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v9 = std::__shared_weak_count::lock(v7);
      if (v9 && v8)
      {
        [objc_msgSend(*(id *)(v8 + 16), "silo") assertInside];
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022F1AD0);
        }
        if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
        {
          char v18 = 1;
          BOOL v11 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRavenController::HandleRayTracingTileNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
          os_activity_scope_enter(v11, &state);

          if (qword_102419580 != -1) {
            dispatch_once(&qword_102419580, &stru_1022F1AD0);
          }
          int v12 = qword_102419588;
          if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 68289538;
            int v20 = 0;
            __int16 v21 = 2082;
            char v22 = "";
            __int16 v23 = 2082;
            uint64_t v24 = "activity";
            __int16 v25 = 2050;
            uint64_t v26 = v8;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRavenController::HandleRayTracingTileNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
          }
        }
        else
        {
          char v18 = 0;
        }
        sub_100CE5378(v8, v10, a2, a3);
        if (v18) {
          os_activity_scope_leave(&state);
        }
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v15 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called after controller deletion", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      LOWORD(state.opaque[0]) = 0;
      char v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRavenController::HandleRayTracingTileNotification_bounce(int, const CLRayTracingTileManager_Type::Notification &, const CLRayTracingTileManager_Type::NotificationData &, void *)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    if (!v9)
    {
      if (!v7) {
        return;
      }
      goto LABEL_29;
    }
LABEL_34:
    sub_1000DB0A0(v9);
    if (!v7) {
      return;
    }
LABEL_29:
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  __int16 v13 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called with null ctxExpr", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    LOWORD(state.opaque[0]) = 0;
    double v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRavenController::HandleRayTracingTileNotification_bounce(int, const CLRayTracingTileManager_Type::Notification &, const CLRayTracingTileManager_Type::NotificationData &, void *)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
}

void sub_100CDB2B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, char a12)
{
  if (v13) {
    sub_1000DB0A0(v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100CDB304(void *result)
{
  *uint64_t result = off_1022F1908;
  return result;
}

uint64_t sub_100CDB324(uint64_t a1)
{
  sub_100CDA5B4(a1, a1 + 4688);
  sub_100CDB9F4((uint64_t *)(a1 + 80), 0);
  [*(id *)(a1 + 264) invalidate];

  *(void *)(a1 + 224) = 0;
  uint64_t v2 = *(void **)(a1 + 240);
  if (v2)
  {

    *(void *)(a1 + 240) = 0;
  }
  uint64_t v3 = *(void **)(a1 + 232);
  if (v3)
  {
    [v3 invalidate];

    *(void *)(a1 + 232) = 0;
  }

  *(void *)(a1 + 288) = 0;
  [*(id *)(a1 + 280) invalidate];

  *(void *)(a1 + 280) = 0;
  sub_100CDBA44((uint64_t *)(a1 + 4472), 0);
  std::timed_mutex::lock((std::timed_mutex *)(a1 + 320));
  uint64_t v4 = *(void **)(a1 + 4672);
  if (v4)
  {
    [v4 shutdown];

    *(void *)(a1 + 4672) = 0;
  }
  std::timed_mutex::unlock((std::timed_mutex *)(a1 + 320));
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  double v5 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Raven: destructing CLRavenController", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    int v33 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLRavenController::~CLRavenController()", "%s\n", v33);
    if (v33 != (char *)buf) {
      free(v33);
    }
  }
  *(void *)(a1 + 4704) = off_1022F1908;
  *(void *)(a1 + 4688) = off_1022F1908;
  uint64_t v6 = *(void *)(a1 + 4680);
  *(void *)(a1 + 4680) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 4552);
  *(void *)(a1 + 4552) = 0;
  if (v7) {
    operator delete();
  }
  uint64_t v8 = *(void **)(a1 + 4520);
  if (v8)
  {
    *(void *)(a1 + 4528) = v8;
    operator delete(v8);
  }
  sub_100CDBA44((uint64_t *)(a1 + 4472), 0);
  std::mutex::~mutex((std::mutex *)(a1 + 4400));

  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 4040);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (*(char *)(a1 + 3799) < 0) {
    operator delete(*(void **)(a1 + 3776));
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 3680);
  if (v10) {
    sub_1000DB0A0(v10);
  }
  BOOL v11 = *(std::__shared_weak_count **)(a1 + 3560);
  if (v11) {
    sub_1000DB0A0(v11);
  }
  raven::RavenSolutionEvent::~RavenSolutionEvent((raven::RavenSolutionEvent *)(a1 + 440));
  std::timed_mutex::~timed_mutex((std::timed_mutex *)(a1 + 320));
  uint64_t v12 = *(void *)(a1 + 312);
  *(void *)(a1 + 312) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *(void *)(a1 + 304);
  *(void *)(a1 + 304) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *(void *)(a1 + 296);
  *(void *)(a1 + 296) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = *(void *)(a1 + 272);
  *(void *)(a1 + 272) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = *(void *)(a1 + 256);
  *(void *)(a1 + 256) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = *(void *)(a1 + 248);
  *(void *)(a1 + 248) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = 0;
  if (v18) {
    (*(void (**)(void))(a1 + 216))();
  }
  uint64_t v19 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  uint64_t v22 = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  uint64_t v23 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = 0;
  if (v24) {
    (*(void (**)(void))(a1 + 160))();
  }
  uint64_t v25 = *(void *)(a1 + 144);
  *(void *)(a1 + 144) = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  sub_100CF0C94((uint64_t *)(a1 + 88), 0);
  sub_100CDB9F4((uint64_t *)(a1 + 80), 0);
  uint64_t v27 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v27) {
    (*(void (**)(void))(a1 + 72))();
  }
  uint64_t v28 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  uint64_t v29 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v29) {
    (*(void (**)(void))(a1 + 48))();
  }
  uint64_t v30 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v30) {
    (*(void (**)(void))(a1 + 32))();
  }
  uint8_t v31 = *(std::__shared_weak_count **)(a1 + 8);
  if (v31) {
    std::__shared_weak_count::__release_weak(v31);
  }
  return a1;
}

void sub_100CDB9BC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100CDB9F4(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1008C062C();
    operator delete();
  }
  return result;
}

uint64_t sub_100CDBA44(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100CCCE3C(result);
    operator delete();
  }
  return result;
}

void sub_100CDBA94(uint64_t a1)
{
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  uint64_t v2 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Raven: resetting CLRavenController", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    *(_WORD *)uint64_t v13 = 0;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::Reset()", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  sub_100CCD764(a1);
  *(void *)(a1 + 4736) = a1 + 4688;
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  uint64_t v3 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 4736) + 16))(buf);
    uint64_t v4 = v18 >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)uint64_t v13 = 136446210;
    *(void *)&void v13[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Raven: entering %{public}s", v13, 0xCu);
    if (v18 < 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 4736) + 16))(v13);
    if (v14 >= 0) {
      uint64_t v10 = v13;
    }
    else {
      uint64_t v10 = *(unsigned char **)v13;
    }
    int v15 = 136446210;
    uint64_t v16 = v10;
    BOOL v11 = (char *)_os_log_send_and_compose_impl();
    if (v14 < 0) {
      operator delete(*(void **)v13);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::Reset()", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  uint64_t v5 = *(void *)(a1 + 80);
  if (v5) {
    sub_1008C17E8(v5);
  }
  if (*(unsigned char *)(a1 + 4664))
  {
    double v6 = sub_10016C458();
    uint64_t v7 = (std::timed_mutex *)(a1 + 320);
    std::timed_mutex::lock((std::timed_mutex *)(a1 + 320));
    uint64_t v8 = *(void **)(a1 + 4672);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100CEA044;
    v12[3] = &unk_1022BDE58;
    *(double *)&v12[4] = v6;
    [v8 pauseResetAndFreeRavenSupervisorWithCompletion:v12];
  }
  else
  {
    if (!*(void *)(a1 + 312)) {
      return;
    }
    uint64_t v7 = (std::timed_mutex *)(a1 + 320);
    std::timed_mutex::lock((std::timed_mutex *)(a1 + 320));
    cnframework::Supervisor::Reset(*(cnframework::Supervisor **)(a1 + 312));
  }
  std::timed_mutex::unlock(v7);
}

void sub_100CDBED0(_Unwind_Exception *a1)
{
  std::timed_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100CDBEF0(void *a1@<X8>)
{
  if (sub_100CDC1D0())
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v2 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Raven: feature enabled", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static std::shared_ptr<CLRavenController> CLRavenController::CreateRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    sub_100CF196C();
  }
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  uint64_t v3 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Raven: feature disabled", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static std::shared_ptr<CLRavenController> CLRavenController::CreateRavenController(id<CLIntersiloUniverse>, std::weak_ptr<CLRavenController> *)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  *a1 = 0;
  a1[1] = 0;
}

uint64_t sub_100CDC1D0()
{
  uint64_t v0 = sub_10073DD54();
  int v5 = 0;
  sub_1000C7F88(&v3);
  int v1 = sub_10006EF84(v3, "EnableRaven", &v5);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  if (v1)
  {
    if (v5 == 1) {
      return sub_10015F760();
    }
    else {
      return 0;
    }
  }
  return v0;
}

void sub_100CDC254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CDC26C(uint64_t a1)
{
  int v1 = (unsigned char *)(a1 + 4632);
  if (*(unsigned char *)(a1 + 4632))
  {
    uint64_t v3 = sub_1009EC0A8();
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 24);
      if (v4) {
        sub_1009D26C4(v3, 0, v4);
      }
    }
    *int v1 = 0;
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    int v5 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Raven: deregistering for accelerometer notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      double v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::DeregisterForAccelerometerNotifications()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_100CDC424(uint64_t a1)
{
  int v1 = (unsigned char *)(a1 + 4634);
  if (*(unsigned char *)(a1 + 4634))
  {
    uint64_t v3 = sub_100862C50();
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 40);
      if (v4) {
        sub_1009D26C4(v3, 0, v4);
      }
    }
    *int v1 = 0;
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    int v5 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Raven: deregistering for barometer notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      double v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::DeregisterForBarometerNotifications()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_100CDC5DC(uint64_t a1)
{
  int v1 = (unsigned char *)(a1 + 4635);
  if (*(unsigned char *)(a1 + 4635))
  {
    uint64_t v3 = *(void *)(a1 + 56);
    if (v3)
    {
      [*(id *)(v3 + 16) unregister:*(void *)(v3 + 8) forNotification:7];
      [*(id *)(*(void *)(a1 + 56) + 16) unregister:*(void *)(*(void *)(a1 + 56) + 8) forNotification:15];
      [*(id *)(*(void *)(a1 + 56) + 16) unregister:*(void *)(*(void *)(a1 + 56) + 8) forNotification:13];
    }
    *int v1 = 0;
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v4 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Raven: deregistering for Daemon status notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      int v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::DeregisterForDaemonStatusNotifications()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
}

void sub_100CDC7B0(uint64_t a1)
{
  int v1 = (unsigned char *)(a1 + 4636);
  if (*(unsigned char *)(a1 + 4636))
  {
    uint64_t v3 = sub_10125D0BC();
    if (!v3 || !*(void *)(a1 + 64)) {
      goto LABEL_9;
    }
    uint64_t v4 = v3;
    if ((sub_1000A16E8() & 0x10) != 0)
    {
      int v5 = 4;
    }
    else
    {
      if ((sub_1000A16E8() & 8) == 0)
      {
LABEL_9:
        *int v1 = 0;
        return;
      }
      int v5 = 1;
    }
    sub_1009D26C4(v4, v5, *(void *)(a1 + 64));
    goto LABEL_9;
  }
}

void sub_100CDC828(uint64_t a1)
{
  int v1 = (unsigned char *)(a1 + 4639);
  if (*(unsigned char *)(a1 + 4639))
  {
    uint64_t v3 = sub_100B0AEC4();
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 152);
      if (v4) {
        sub_1009D26C4(v3, 0, v4);
      }
    }
    *int v1 = 0;
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    int v5 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Raven: deregistering for magnetometer notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      double v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::DeregisterForMagnetometerNotifications()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_100CDC9E0(uint64_t a1)
{
  int v1 = (unsigned char *)(a1 + 4640);
  if (*(unsigned char *)(a1 + 4640))
  {
    uint64_t v2 = sub_1008B6998();
    if (byte_102480FAF < 0)
    {
      sub_1000DC48C(__p, (void *)xmmword_102480F98, *((unint64_t *)&xmmword_102480F98 + 1));
    }
    else
    {
      *(_OWORD *)__p = xmmword_102480F98;
      uint64_t v6 = unk_102480FA8;
    }
    sub_1008B7000(v2, (uint64_t *)__p);
    if (SHIBYTE(v6) < 0) {
      operator delete(__p[0]);
    }
    *int v1 = 0;
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v3 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Raven:RouteHints,DeregisterForMapRouteHintNotifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::DeregisterForMapRouteHintNotifications()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_100CDCBDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CDCC00(uint64_t a1)
{
  int v1 = (unsigned char *)(a1 + 4647);
  if (*(unsigned char *)(a1 + 4647))
  {
    uint64_t v3 = sub_100A08A84();
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 208);
      if (v4) {
        sub_1009D26C4(v3, 0, v4);
      }
    }
    *int v1 = 0;
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    int v5 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Raven: deregistering for rate gyro notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::DeregisterForRateGyroNotifications()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_100CDCDB8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  if (v2)
  {
    if (sub_100E72BB4(v2))
    {
      if (*(unsigned char *)(a1 + 4648))
      {
        uint64_t v3 = *(void *)(a1 + 304);
        if (v3)
        {
          [*(id *)(v3 + 16) unregister:*(void *)(v3 + 8) forNotification:0];
          *(unsigned char *)(a1 + 4648) = 0;
          if (qword_102419400 != -1) {
            dispatch_once(&qword_102419400, &stru_1022F1A68);
          }
          uint64_t v4 = qword_102419408;
          if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Raven: deregistering for RayTracing tile notifications", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419400 != -1) {
              dispatch_once(&qword_102419400, &stru_1022F1A68);
            }
            int v5 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::DeregisterForRayTracingTileNotifications()", "%s\n", v5);
            if (v5 != (char *)buf) {
              free(v5);
            }
          }
        }
      }
    }
  }
}

void sub_100CDCF7C(uint64_t a1)
{
  int v1 = (unsigned char *)(a1 + 4652);
  if (*(unsigned char *)(a1 + 4652))
  {
    uint64_t v2 = *(void *)(a1 + 168);
    if (v2) {
      [*(id *)(v2 + 16) unregister:*(void *)(v2 + 8) forNotification:4];
    }
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v3 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Raven: deregistering for tunnel bridge assistance (TBA) notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::DeregisterForTunnelBridgeAssistanceNotifications()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    *int v1 = 0;
  }
}

void sub_100CDD134(uint64_t a1)
{
  int v1 = (unsigned char *)(a1 + 4653);
  if (*(unsigned char *)(a1 + 4653))
  {
    uint64_t v2 = *(void *)(a1 + 168);
    if (v2) {
      [*(id *)(v2 + 16) unregister:*(void *)(v2 + 8) forNotification:5];
    }
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v3 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Raven: deregistering for tunnel end point assistance (TEPA) notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::DeregisterForTunnelEndPointAssistanceNotifications()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    *int v1 = 0;
  }
}

char *sub_100CDD2EC(char *result)
{
  int v1 = result + 4656;
  if (result[4656])
  {
    uint64_t v2 = result;
    uint64_t v3 = *((void *)result + 37);
    if (v3)
    {
      [*(id *)(v3 + 16) unregister:*(void *)(v3 + 8) forNotification:0];
      [*(id *)(*((void *)v2 + 37) + 16) unregister:*(void *)(*((void *)v2 + 37) + 8) forNotification:1];
      [*(id *)(*((void *)v2 + 37) + 16) unregister:*(void *)(*((void *)v2 + 37) + 8) forNotification:2];
      [*(id *)(*((void *)v2 + 37) + 16) unregister:*(void *)(*((void *)v2 + 37) + 8) forNotification:3];
      [*(id *)(*((void *)v2 + 37) + 16) unregister:*(void *)(*((void *)v2 + 37) + 8) forNotification:4];
      [*(id *)(*((void *)v2 + 37) + 16) unregister:*(void *)(*((void *)v2 + 37) + 8) forNotification:5];
      [*(id *)(*((void *)v2 + 37) + 16) unregister:*(void *)(*((void *)v2 + 37) + 8) forNotification:6];
      [*(id *)(*((void *)v2 + 37) + 16) unregister:*(void *)(*((void *)v2 + 37) + 8) forNotification:7];
      uint64_t result = (char *)[*(id *)(*((void *)v2 + 37) + 16) unregister:*(void *)(*((void *)v2 + 37) + 8) forNotification:12];
    }
    *int v1 = 0;
  }
  return result;
}

void sub_100CDD3B4(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 4736) + 16))(&__s1);
  sub_100134750(__p, "RavenControllerDisabledState");
  unsigned __int8 v2 = v22;
  if ((v22 & 0x80u) == 0) {
    size_t v3 = v22;
  }
  else {
    size_t v3 = __n;
  }
  unint64_t v4 = v19;
  int v5 = (char)v19;
  if ((v19 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)__p[1];
  }
  if (v3 != v4)
  {
    BOOL v15 = 0;
    if (((char)v19 & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_27;
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((char)v22 < 0)
  {
    BOOL v15 = memcmp(__s1, v6, __n) == 0;
    goto LABEL_22;
  }
  if (v22)
  {
    uint64_t v7 = v22 - 1;
    p_s1 = &__s1;
    do
    {
      int v10 = *(unsigned __int8 *)p_s1;
      p_s1 = (void **)((char *)p_s1 + 1);
      int v9 = v10;
      int v12 = *(unsigned __int8 *)v6;
      uint64_t v6 = (void **)((char *)v6 + 1);
      int v11 = v12;
      BOOL v14 = v7-- != 0;
      BOOL v15 = v9 == v11;
    }
    while (v9 == v11 && v14);
LABEL_22:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_27;
  }
  BOOL v15 = 1;
  if (((char)v19 & 0x80000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x80) == 0) {
      goto LABEL_24;
    }
LABEL_28:
    operator delete(__s1);
    if (v15) {
      return;
    }
    goto LABEL_29;
  }
LABEL_27:
  operator delete(__p[0]);
  if ((v22 & 0x80) != 0) {
    goto LABEL_28;
  }
LABEL_24:
  if (v15) {
    return;
  }
LABEL_29:
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  uint64_t v16 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(__s1) = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Raven: received external disable command", (uint8_t *)&__s1, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&__s1, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    LOWORD(__p[0]) = 0;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::DisableRaven()", "%s\n", v17);
    if (v17 != (char *)&__s1) {
      free(v17);
    }
  }
  sub_100CDA5B4(a1, a1 + 4688);
}

void sub_100CDD658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CDD67C(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 4736) + 16))(&__s1);
  sub_100134750(&v25, "RavenControllerBestEffortState");
  unsigned __int8 v2 = v24;
  if ((v24 & 0x80u) == 0) {
    uint64_t v3 = v24;
  }
  else {
    uint64_t v3 = *((void *)&__s1 + 1);
  }
  uint64_t v4 = v26;
  int v5 = (char)v26;
  if ((v26 & 0x80u) != 0) {
    uint64_t v4 = *((void *)&v25 + 1);
  }
  if (v3 != v4)
  {
    BOOL v15 = 0;
    if (((char)v26 & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_27;
  }
  if ((v26 & 0x80u) == 0) {
    uint64_t v6 = (unsigned __int8 *)&v25;
  }
  else {
    uint64_t v6 = (unsigned __int8 *)v25;
  }
  if ((char)v24 < 0)
  {
    BOOL v15 = memcmp((const void *)__s1, v6, *((size_t *)&__s1 + 1)) == 0;
    goto LABEL_22;
  }
  if (v24)
  {
    uint64_t v7 = v24 - 1;
    p_s1 = (unsigned __int8 *)&__s1;
    do
    {
      int v10 = *p_s1++;
      int v9 = v10;
      int v12 = *v6++;
      int v11 = v12;
      BOOL v14 = v7-- != 0;
      BOOL v15 = v9 == v11;
    }
    while (v9 == v11 && v14);
LABEL_22:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_27;
  }
  BOOL v15 = 1;
  if (((char)v26 & 0x80000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x80) == 0) {
      goto LABEL_24;
    }
LABEL_28:
    operator delete((void *)__s1);
    if (v15) {
      return;
    }
    goto LABEL_29;
  }
LABEL_27:
  operator delete((void *)v25);
  if ((v24 & 0x80) != 0) {
    goto LABEL_28;
  }
LABEL_24:
  if (v15) {
    return;
  }
LABEL_29:
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  uint64_t v16 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(__s1) = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Raven: received external enable best effort command", (uint8_t *)&__s1, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&__s1, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    LOWORD(v25) = 0;
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::EnableRavenBestEffort()", "%s\n", v20);
    if (v20 != (char *)&__s1) {
      free(v20);
    }
  }
  sub_100CDDDB0(a1 + 4560);
  if (*(unsigned char *)(a1 + 4464))
  {
    uint64_t v17 = (uint64_t *)(a1 + 4472);
    if (*(void *)(a1 + 4472))
    {
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      char v18 = qword_102419408;
      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
      {
        uint64_t v19 = *v17;
        LODWORD(__s1) = 134349056;
        *(void *)((char *)&__s1 + 4) = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Raven: #warning,rct,threadExists,%{public}p", (uint8_t *)&__s1, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(&__s1, 0x65CuLL);
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        uint64_t v21 = *v17;
        LODWORD(v25) = 134349056;
        *(void *)((char *)&v25 + 4) = v21;
        unsigned __int8 v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLRavenController::EnableRavenBestEffort()", "%s\n", v22);
        if (v22 != (char *)&__s1) {
          free(v22);
        }
      }
      sub_100CDBA44((uint64_t *)(a1 + 4472), 0);
    }
    operator new();
  }
  sub_100CDA5B4(a1, a1 + 4704);
}

void sub_100CDDD6C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

void sub_100CDDDB0(uint64_t a1)
{
  double v2 = sub_10016C458();
  uint64_t v3 = 0;
  *(double *)(a1 + 64) = v2;
  do
  {
    uint64_t v4 = a1 + v3;
    *(_DWORD *)uint64_t v4 = 0;
    *(_OWORD *)(v4 + 8) = xmmword_101D2A460;
    *(void *)(v4 + 24) = 0xBFF0000000000000;
    v3 += 32;
  }
  while (v3 != 64);
}

void sub_100CDDE04(uint64_t a1, float32x2_t *a2, unsigned int a3)
{
  if (a2 && a3)
  {
    if (a3 < 0xB)
    {
      if (*(unsigned char *)(a1 + 4663) || *(void *)(a1 + 4680))
      {
        if (sub_100B00DC0(a1 + 4480, (double *)a2))
        {
          sub_100168850(buf);
          sub_10016BC44((uint64_t)&v12);
          sub_100CDE2B4(a1, (uint64_t)&v12, a2, a3, (uint64_t)buf);
          sub_100CCB93C(a1, (uint64_t)buf, 0);
          sub_1001687EC(buf);
          return;
        }
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        int v9 = qword_102419408;
        if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
        {
          float32x2_t v10 = *a2;
          *(_DWORD *)buf = 134349056;
          float32x2_t v15 = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning,accel sample is before sleep,%{public}.3f", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419400 != -1) {
            dispatch_once(&qword_102419400, &stru_1022F1A68);
          }
          float32x2_t v11 = *a2;
          int v12 = 134349056;
          float32x2_t v13 = v11;
          int v5 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::HandleAccelerometerNotification(const CLAccelerometer::Sample *, unsigned int)", "%s\n", v5);
          goto LABEL_33;
        }
      }
    }
    else
    {
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      uint64_t v4 = qword_102419408;
      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        v15.i32[0] = a3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning Raven: encountered unexpected accelerometer batch size of %u", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        int v12 = 67109120;
        v13.i32[0] = a3;
        int v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::HandleAccelerometerNotification(const CLAccelerometer::Sample *, unsigned int)", "%s\n", v5);
LABEL_33:
        if (v5 != (char *)buf) {
          free(v5);
        }
      }
    }
  }
  else
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v6 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Raven: encountered empty accelerometer notification", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      LOWORD(v12) = 0;
      int v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::HandleAccelerometerNotification(const CLAccelerometer::Sample *, unsigned int)", "%s\n", v5);
      goto LABEL_33;
    }
  }
}

void sub_100CDE294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

void sub_100CDE2B4(uint64_t a1, uint64_t a2, float32x2_t *a3, int a4, uint64_t a5)
{
  LODWORD(v5) = a4;
  *(_DWORD *)(a5 + 52) |= 2u;
  uint64_t v9 = *(void *)(a5 + 40);
  if (!v9) {
    operator new();
  }
  *(_DWORD *)(v9 + 488) |= 1u;
  uint64_t v10 = *(void *)(v9 + 8);
  if (!v10) {
    operator new();
  }
  sub_100CE6FC4(a2, a5);
  *(_DWORD *)(v10 + 44) |= 1u;
  uint64_t v11 = *(void *)(v10 + 8);
  if (!v11) {
    operator new();
  }
  if ((sub_101457C60((uint64_t *)a2, v11) & 1) == 0)
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    int v12 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Error: Failed to convert accelerometer notification receipt time to protobuf", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      char v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::SerializeAccelerometerNotification(const CLUtils::Timestamp &, const CLAccelerometer::Sample *, const unsigned int, CLP::LogEntry::LogEntry &)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
  }
  if (v5)
  {
    uint64_t v5 = v5;
    do
    {
      float32x2_t v13 = *a3;
      double v14 = *(double *)a3 - *(double *)(a2 + 8);
      *(double *)buf = v14 + *(double *)a2;
      float32x2_t v20 = v13;
      double v21 = v14 + *(double *)(a2 + 16);
      char v22 = *(unsigned char *)(a2 + 24);
      int v15 = *(_DWORD *)(v10 + 28);
      uint64_t v16 = *(int *)(v10 + 24);
      if ((int)v16 >= v15)
      {
        if (v15 == *(_DWORD *)(v10 + 32))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v10 + 16), v15 + 1);
          int v15 = *(_DWORD *)(v10 + 28);
        }
        *(_DWORD *)(v10 + 28) = v15 + 1;
        sub_100CEFD3C();
      }
      uint64_t v17 = *(void *)(v10 + 16);
      *(_DWORD *)(v10 + 24) = v16 + 1;
      sub_1014579FC(a3, *(float32x2_t **)(v17 + 8 * v16), (uint64_t *)buf);
      a3 += 3;
      --v5;
    }
    while (v5);
  }
  else
  {
    double v14 = 0.0;
  }
  sub_100CEA370(a1 + 4560, 0, *(double *)a2, -v14);
}

void sub_100CDE604()
{
}

void sub_100CDE660(uint64_t a1, double *a2, unsigned int a3)
{
  if (a2 && a3)
  {
    if (a3 < 6)
    {
      if (*(unsigned char *)(a1 + 4663) || *(void *)(a1 + 4680))
      {
        if (sub_100B00DC0(a1 + 4480, a2))
        {
          sub_100168850(buf);
          sub_10016BC44((uint64_t)&v13);
          sub_100CDEB0C(v9, (uint64_t)&v13, a2, a3, (uint64_t)buf);
          sub_100CCB93C(a1, (uint64_t)buf, 0);
          sub_1001687EC(buf);
          return;
        }
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        uint64_t v10 = qword_102419408;
        if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
        {
          double v11 = *a2;
          *(_DWORD *)buf = 134349056;
          double v16 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning,baro sample is before sleep,%{public}.3f", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419400 != -1) {
            dispatch_once(&qword_102419400, &stru_1022F1A68);
          }
          double v12 = *a2;
          int v13 = 134349056;
          double v14 = v12;
          uint64_t v5 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::HandleBarometerNotification(const CLPressure::Sample *, unsigned int)", "%s\n", v5);
          goto LABEL_33;
        }
      }
    }
    else
    {
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      uint64_t v4 = qword_102419408;
      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v16) = a3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning Raven: encountered unexpected barometer batch size of %u", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        int v13 = 67109120;
        LODWORD(v14) = a3;
        uint64_t v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::HandleBarometerNotification(const CLPressure::Sample *, unsigned int)", "%s\n", v5);
LABEL_33:
        if (v5 != (char *)buf) {
          free(v5);
        }
      }
    }
  }
  else
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v6 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Raven: encountered empty barometer notification", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      LOWORD(v13) = 0;
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::HandleBarometerNotification(const CLPressure::Sample *, unsigned int)", "%s\n", v5);
      goto LABEL_33;
    }
  }
}

void sub_100CDEAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

void sub_100CDEB0C(uint64_t a1, uint64_t a2, double *a3, int a4, uint64_t a5)
{
  LODWORD(v5) = a4;
  *(_DWORD *)(a5 + 52) |= 2u;
  uint64_t v8 = *(void *)(a5 + 40);
  if (!v8) {
    operator new();
  }
  *(_DWORD *)(v8 + 488) |= 4u;
  uint64_t v9 = *(void *)(v8 + 24);
  if (!v9) {
    operator new();
  }
  sub_100CE6FC4(a2, a5);
  *(_DWORD *)(v9 + 44) |= 1u;
  uint64_t v10 = *(void *)(v9 + 8);
  if (!v10) {
    operator new();
  }
  if ((sub_101457C60((uint64_t *)a2, v10) & 1) == 0)
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    double v11 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Error: Failed to convert barometer notification receipt time to protobuf", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::SerializeBarometerNotification(const CLUtils::Timestamp &, const CLPressure::Sample *, const unsigned int, CLP::LogEntry::LogEntry &)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
  }
  if (v5)
  {
    uint64_t v5 = v5;
    do
    {
      double v12 = *a3;
      double v13 = *a3 - *(double *)(a2 + 8);
      *(double *)buf = v13 + *(double *)a2;
      double v19 = v12;
      double v20 = v13 + *(double *)(a2 + 16);
      char v21 = *(unsigned char *)(a2 + 24);
      int v14 = *(_DWORD *)(v9 + 28);
      uint64_t v15 = *(int *)(v9 + 24);
      if ((int)v15 >= v14)
      {
        if (v14 == *(_DWORD *)(v9 + 32))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v9 + 16), v14 + 1);
          int v14 = *(_DWORD *)(v9 + 28);
        }
        *(_DWORD *)(v9 + 28) = v14 + 1;
        sub_100CEFDA0();
      }
      uint64_t v16 = *(void *)(v9 + 16);
      *(_DWORD *)(v9 + 24) = v15 + 1;
      sub_10145FF50((uint64_t)a3, *(void *)(v16 + 8 * v15), (uint64_t *)buf);
      a3 += 2;
      --v5;
    }
    while (v5);
  }
}

void sub_100CDEE28()
{
}

uint64_t sub_100CDEE84(uint64_t a1, void *a2, double *a3, double *a4)
{
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  uint64_t v8 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "clrgmd,Entering HandleBuildingDataAndQueryCompletion()", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    LOWORD(v29) = 0;
    long long v25 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::HandleBuildingDataAndQueryCompletion(const NSMutableArray *, const CLClientLocationCoordinate &, const CFTimeInterval &)", "%s\n", v25);
    if (v25 != (char *)buf) {
      free(v25);
    }
  }
  double v9 = COERCE_DOUBLE(sub_1007613DC(*(void *)(a1 + 80)));
  if (v10) {
    double v11 = v9;
  }
  else {
    double v11 = NAN;
  }
  double v12 = (sub_10016C458() - *a4) * 1000.0;
  if (!*(unsigned char *)(a1 + 4663) && !*(void *)(a1 + 4680))
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v23 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      id v24 = [a2 count];
      *(_DWORD *)buf = 134349568;
      *(void *)int v38 = v24;
      *(_WORD *)&v38[8] = 2050;
      *(double *)&v38[10] = v11;
      *(_WORD *)&v38[18] = 2050;
      *(double *)&v38[20] = v12;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "clrgmd,No serialization per configuration,%{public}lu,buildings received during query after distance of,%{public}.1lf,m,queryDuration,%{public}.1lf,ms", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      int v29 = 134349568;
      id v30 = [a2 count];
      __int16 v31 = 2050;
      double v32 = v11;
      __int16 v33 = 2050;
      double v34 = v12;
      uint64_t v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::HandleBuildingDataAndQueryCompletion(const NSMutableArray *, const CLClientLocationCoordinate &, const CFTimeInterval &)", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
    return sub_1007630B4(*(void *)(a1 + 80), a3);
  }
  uint64_t v13 = sub_100168850(&v29);
  if (sub_100CDF600(v13, a2, a3, (void *)(*(void *)(a1 + 80) + 320), (uint64_t)&v29))
  {
    int v14 = (char *)[a2 count];
    uint64_t v15 = *(void *)(*(void *)(a1 + 80) + 336);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v16 = &v14[-v15];
    uint64_t v17 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      v36 |= 2u;
      if (!v35) {
        operator new();
      }
      uint64_t v18 = *(void *)(v35 + 232);
      if (!v18) {
        uint64_t v18 = *(void *)(qword_10248A400 + 232);
      }
      int v19 = *(_DWORD *)(v18 + 24);
      id v20 = [a2 count];
      *(_DWORD *)buf = 67241216;
      *(_DWORD *)int v38 = v19;
      *(_WORD *)&v38[4] = 2050;
      *(void *)&v38[6] = v20;
      *(_WORD *)&v38[14] = 2050;
      *(double *)&v38[16] = v11;
      *(_WORD *)&v38[24] = 2050;
      *(double *)&v38[26] = v12;
      __int16 v39 = 2050;
      int v40 = v16;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "clrgmd,serializing,%{public}d, out of,%{public}lu,buildings received after distance of,%{public}.1lf,m,queryDuration,%{public}.1lf,ms,numrepeatedBldg,%{public}lu", buf, 0x30u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      sub_100CDFA18((uint64_t)&v29);
      [a2 count];
      uint64_t v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::HandleBuildingDataAndQueryCompletion(const NSMutableArray *, const CLClientLocationCoordinate &, const CFTimeInterval &)", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
    sub_100CCB93C(a1, (uint64_t)&v29, 0);
    sub_1001687EC(&v29);
    return sub_1007630B4(*(void *)(a1 + 80), a3);
  }
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  char v21 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "clrgmd,SerializeBuildingData failed, no data sent downstream", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    unsigned __int8 v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLRavenController::HandleBuildingDataAndQueryCompletion(const NSMutableArray *, const CLClientLocationCoordinate &, const CFTimeInterval &)", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
  return sub_1001687EC(&v29);
}

void sub_100CDF5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100CDF600(uint64_t a1, void *a2, double *a3, void *a4, uint64_t a5)
{
  *(_DWORD *)(a5 + 52) |= 2u;
  uint64_t v9 = *(void *)(a5 + 40);
  if (!v9) {
    operator new();
  }
  *(_DWORD *)(v9 + 488) |= 0x10000000u;
  uint64_t v10 = *(void *)(v9 + 232);
  if (!v10) {
    operator new();
  }
  sub_10016BC44((uint64_t)v17);
  sub_100CE6FC4((uint64_t)v17, a5);
  *(_DWORD *)(v10 + 68) |= 1u;
  uint64_t v11 = *(void *)(v10 + 8);
  if (!v11) {
    operator new();
  }
  if (sub_101457C60(v17, v11))
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    double v12 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "clrgmd,Calling functionality to convert building data to protobuf", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRavenController::SerializeBuildingData(const NSMutableArray *, const CLClientLocationCoordinate &, std::set<uint64_t> &, CLP::LogEntry::LogEntry &) const", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    return sub_10145959C(a2, a3, a4, v10);
  }
  else
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    int v14 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Failed to convert building data receipt time to protobuf", buf, 2u);
    }
    uint64_t result = sub_10013D1A0(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLRavenController::SerializeBuildingData(const NSMutableArray *, const CLClientLocationCoordinate &, std::set<uint64_t> &, CLP::LogEntry::LogEntry &) const", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
      return 0;
    }
  }
  return result;
}

void sub_100CDF9B4()
{
}

uint64_t sub_100CDFA18(uint64_t a1)
{
  *(_DWORD *)(a1 + 52) |= 2u;
  if (!*(void *)(a1 + 40)) {
    operator new();
  }
  return *(void *)(a1 + 40);
}

void sub_100CDFA74()
{
}

void sub_100CDFA98(uint64_t a1, double *a2, unsigned int a3)
{
  if (!a2 || !a3)
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v8 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning Raven: encountered empty device motion notification", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    LOWORD(v14) = 0;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::HandleDeviceMotionNotification(const CLDeviceMotion::Sample *, unsigned int)", "%s\n", v9);
LABEL_33:
    if (v9 != (char *)buf) {
      free(v9);
    }
    return;
  }
  if (a3 >= 0xB)
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v6 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v17) = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Raven: encountered unexpected device motion batch size of %u", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      int v14 = 67109120;
      LODWORD(v15) = a3;
      double v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::HandleDeviceMotionNotification(const CLDeviceMotion::Sample *, unsigned int)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  if (*(void *)(a1 + 4680))
  {
    if (sub_100B00DC0(a1 + 4480, a2))
    {
      sub_100168850(buf);
      sub_10016BC44((uint64_t)&v14);
      sub_100CDFF50(v7, (uint64_t)&v14, (uint64_t)a2, a3, (uint64_t)buf);
      sub_100CCB93C(a1, (uint64_t)buf, 1);
      sub_1001687EC(buf);
      return;
    }
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v10 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
    {
      double v11 = *a2;
      *(_DWORD *)buf = 134349056;
      double v17 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning,device motion sample is before sleep,%{public}.3f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      double v13 = *a2;
      int v14 = 134349056;
      double v15 = v13;
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::HandleDeviceMotionNotification(const CLDeviceMotion::Sample *, unsigned int)", "%s\n", v9);
      goto LABEL_33;
    }
  }
}

void sub_100CDFF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

void sub_100CDFF50(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  LODWORD(v5) = a4;
  *(_DWORD *)(a5 + 52) |= 2u;
  uint64_t v7 = *(void *)(a5 + 40);
  if (!v7) {
    operator new();
  }
  *(_DWORD *)(v7 + 488) |= 0x4000000u;
  uint64_t v8 = *(int **)(v7 + 216);
  if (!v8) {
    operator new();
  }
  sub_100CE6FC4(a2, a5);
  if (v5)
  {
    uint64_t v5 = v5;
    do
    {
      int v9 = v8[7];
      uint64_t v10 = v8[6];
      if ((int)v10 >= v9)
      {
        if (v9 == v8[8])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v8 + 4), v9 + 1);
          int v9 = v8[7];
        }
        v8[7] = v9 + 1;
        sub_100969EDC();
      }
      uint64_t v11 = *((void *)v8 + 2);
      v8[6] = v10 + 1;
      sub_10145A8C0(a3, *(void *)(v11 + 8 * v10));
      a3 += 120;
      --v5;
    }
    while (v5);
  }
}

void sub_100CE008C()
{
}

uint64_t sub_100CE00C4(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 36)
  {
    uint64_t v5 = result;
    if (*(unsigned char *)(result + 4663) || *(void *)(result + 4680))
    {
      sub_100168850(v9);
      sub_10016BC44((uint64_t)v8);
      sub_100CE0160(v6, (uint64_t)v8, v7, a4, (uint64_t)v9);
      sub_100CCB93C(v5, (uint64_t)v9, 0);
      return sub_1001687EC(v9);
    }
  }
  return result;
}

void sub_100CE0148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

BOOL sub_100CE0160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)(a5 + 52) |= 2u;
  uint64_t v7 = *(void *)(a5 + 40);
  if (!v7) {
    operator new();
  }
  *(_DWORD *)(v7 + 488) |= 0x8000000u;
  uint64_t v8 = *(void *)(v7 + 224);
  if (!v8) {
    operator new();
  }
  sub_100CE6FC4(a2, a5);
  *(double *)&uint64_t v9 = *(double *)(a4 + 1344) - *(double *)a2;
  uint64_t v14 = *(void *)(a4 + 1344);
  float64x2_t v15 = vaddq_f64((float64x2_t)vdupq_lane_s64(v9, 0), *(float64x2_t *)(a2 + 8));
  char v16 = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(v8 + 36) |= 1u;
  uint64_t v10 = *(void *)(v8 + 8);
  if (!v10) {
    operator new();
  }
  if ((sub_101457C60(&v14, v10) & 1) == 0)
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v11 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "SerializeGnssAvailabilityPredictorNotification,failed to convert applicable time to protobuf", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      double v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLRavenController::SerializeGnssAvailabilityPredictorNotification(const CLUtils::Timestamp &, const int &, const CLLocationProvider_Type::NotificationData &, CLP::LogEntry::LogEntry &) const", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  return sub_10145B688(a4, v8);
}

void sub_100CE03F4()
{
}

uint64_t sub_100CE0450(uint64_t result, int a2, _DWORD *a3, uint64_t a4)
{
  int v20 = a2;
  if (*a3 == 10)
  {
    uint64_t v5 = result;
    if (*(unsigned char *)(result + 4663) || *(void *)(result + 4680))
    {
      sub_10016BC44((uint64_t)v19);
      if ((*(_DWORD *)(a4 + 96) & 0xFFFFFFF7) == 1)
      {
        sub_100168850(v18);
        if (sub_100CE063C(v5, v19, &v20, a4, (uint64_t)v18)) {
          sub_100CCB93C(v5, (uint64_t)v18, 0);
        }
        if (*(void *)(v5 + 80)
          && (*(unsigned char *)(v5 + 128)
           || sub_100CE0B8C((double *)(v5 + 96), *(double *)(a4 + 4), *(double *)(a4 + 12))))
        {
          sub_10009AFB0(&v16, (void *)v5);
          uint64_t v7 = v16;
          uint64_t v6 = v17;
          if (v17)
          {
            atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            sub_1000DB0A0(v6);
            uint64_t v8 = *(void *)(v5 + 80);
            uint64_t v14 = v7;
            float64x2_t v15 = v6;
            atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          else
          {
            uint64_t v8 = *(void *)(v5 + 80);
            uint64_t v14 = v16;
            float64x2_t v15 = 0;
          }
          uint64_t v10 = (double *)(a4 + 4);
          sub_1008C0874(v8, v10, &v14);
          if (v15) {
            std::__shared_weak_count::__release_weak(v15);
          }
          uint64_t v11 = *(void *)(v5 + 88);
          if (v11)
          {
            uint64_t v12 = v7;
            double v13 = v6;
            if (v6) {
              atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            sub_100E70960(v11, v10, &v12);
            if (v13) {
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          if (v6) {
            std::__shared_weak_count::__release_weak(v6);
          }
        }
      }
      else
      {
        uint64_t v9 = sub_100168850(v18);
        sub_100CE0BE4(v9, v19, &v20, a4, (uint64_t)v18);
        sub_100CCB93C(v5, (uint64_t)v18, 0);
      }
      return sub_1001687EC(v18);
    }
  }
  return result;
}

void sub_100CE05F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  sub_1001687EC(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100CE063C(uint64_t a1, uint64_t *a2, int *a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)int v36 = 0xFFFF;
  *(_OWORD *)&v36[4] = 0uLL;
  *(_OWORD *)&v36[20] = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&v36[36] = _Q0;
  *(_OWORD *)&v36[52] = _Q0;
  *(_OWORD *)&v36[68] = _Q0;
  *(_DWORD *)&v36[84] = 0;
  long long v37 = 0uLL;
  *(void *)&v36[88] = 0xBFF0000000000000;
  *(void *)((char *)&v38 + 4) = 0xBFF0000000000000;
  LODWORD(v38) = 0;
  HIDWORD(v38) = 0x7FFFFFFF;
  memset(v39, 0, 25);
  sub_1000DBC34(v40);
  long long v15 = *(_OWORD *)(a4 + 112);
  long long v37 = *(_OWORD *)(a4 + 96);
  long long v38 = v15;
  *(_OWORD *)__int16 v39 = *(_OWORD *)(a4 + 128);
  *(_OWORD *)&v39[12] = *(_OWORD *)(a4 + 140);
  long long v16 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)&v36[32] = *(_OWORD *)(a4 + 32);
  *(_OWORD *)&v36[48] = v16;
  long long v17 = *(_OWORD *)(a4 + 80);
  *(_OWORD *)&v36[64] = *(_OWORD *)(a4 + 64);
  *(_OWORD *)&v36[80] = v17;
  long long v18 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)int v36 = *(_OWORD *)a4;
  *(_OWORD *)&v36[16] = v18;
  int v35 = 0;
  double v34 = 0.0;
  unsigned int v19 = [*(id *)(a1 + 224) syncgetAltitude:v36 rel:&v35 undulation:&v34];
  if (v40[48] >= 0.0) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  if (v20)
  {
    *(_DWORD *)(a5 + 52) |= 2u;
    uint64_t v21 = *(void *)(a5 + 40);
    if (!v21) {
      operator new();
    }
    *(_DWORD *)(v21 + 488) |= 0x100u;
    uint64_t v22 = *(void *)(v21 + 72);
    if (!v22) {
      operator new();
    }
    sub_100CE6FC4((uint64_t)a2, a5);
    *(_DWORD *)(v22 + 52) |= 1u;
    uint64_t v23 = *(void *)(v22 + 8);
    if (!v23) {
      operator new();
    }
    if ((sub_101457C60(a2, v23) & 1) == 0)
    {
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      id v24 = qword_102419408;
      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Error: Failed to convert DEM update receipt time to protobuf", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        LOWORD(v42) = 0;
        __int16 v33 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRavenController::SerializeDEMUpdate(const CLUtils::Timestamp &, const int &, const CLDaemonLocation &, CLP::LogEntry::LogEntry &) const", "%s\n", v33);
        if (v33 != (char *)buf) {
          free(v33);
        }
      }
    }
    sub_1014591E8((uint64_t)v36, &v34, v22);
    int v25 = *a3;
    *(_DWORD *)(v22 + 52) |= 0x40u;
    *(_DWORD *)(v22 + 44) = v25;
  }
  else
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    unsigned __int8 v26 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v27 = *(void *)(a4 + 4);
      uint64_t v28 = *(void *)(a4 + 12);
      *(_DWORD *)buf = 134283777;
      uint64_t v47 = v27;
      __int16 v48 = 2049;
      uint64_t v49 = v28;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "Raven: Dem unavailable at,lat,%{private}.8lf,lon,%{private}.8lf", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      uint64_t v30 = *(void *)(a4 + 4);
      uint64_t v31 = *(void *)(a4 + 12);
      int v42 = 134283777;
      uint64_t v43 = v30;
      __int16 v44 = 2049;
      uint64_t v45 = v31;
      double v32 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRavenController::SerializeDEMUpdate(const CLUtils::Timestamp &, const int &, const CLDaemonLocation &, CLP::LogEntry::LogEntry &) const", "%s\n", v32);
      if (v32 != (char *)buf) {
        free(v32);
      }
    }
  }
  if (v41) {
    sub_1000DB0A0(v41);
  }
  return v20;
}

void sub_100CE0B18(_Unwind_Exception *a1)
{
  if (STACK[0x2D0]) {
    sub_1000DB0A0((std::__shared_weak_count *)STACK[0x2D0]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100CE0B8C(double *a1, double a2, double a3)
{
  if (*a1 <= a2 && a1[2] >= a2)
  {
    double v3 = a1[3];
    double v4 = a1[1];
    if (v3 <= v4)
    {
      if (v3 < v4 && (v3 > a3 || v4 < a3)) {
        return 1;
      }
    }
    else if (v3 >= a3 && v4 <= a3)
    {
      return 1;
    }
  }
  return 0;
}

void sub_100CE0BE4(uint64_t a1, uint64_t *a2, int *a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)(a5 + 52) |= 2u;
  uint64_t v8 = *(void *)(a5 + 40);
  if (!v8) {
    operator new();
  }
  *(_DWORD *)(v8 + 488) |= 8u;
  uint64_t v9 = *(void *)(v8 + 32);
  if (!v9) {
    operator new();
  }
  sub_100CE6FC4((uint64_t)a2, a5);
  *(_DWORD *)(v9 + 100) |= 1u;
  uint64_t v10 = *(void *)(v9 + 8);
  if (!v10) {
    operator new();
  }
  if ((sub_101457C60(a2, v10) & 1) == 0)
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v11 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Error: Failed to convert location notification receipt time to protobuf", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      double v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::SerializeLocationNotification(const CLUtils::Timestamp &, const int &, const CLLocationProvider_Type::NotificationData &, CLP::LogEntry::LogEntry &)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  int v12 = *a3;
  *(_DWORD *)(v9 + 100) |= 2u;
  *(_DWORD *)(v9 + 32) = v12;
  sub_10145EEE0(a4, v9);
}

void sub_100CE0E70()
{
}

void sub_100CE0ECC(uint64_t a1, double *a2, unsigned int a3)
{
  if (a2 && a3)
  {
    if (a3 < 0xB)
    {
      if (*(unsigned char *)(a1 + 4663) || *(void *)(a1 + 4680))
      {
        sub_10016BC44((uint64_t)v12);
        if (sub_100B00DC0(a1 + 4480, a2))
        {
          uint64_t v9 = sub_100168850(buf);
          sub_100CE1374(v9, (uint64_t)v12, a2, a3, (uint64_t)buf);
          sub_100CCB93C(a1, (uint64_t)buf, 0);
          sub_1001687EC(buf);
          return;
        }
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        uint64_t v10 = qword_102419408;
        if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
        {
          double v11 = *a2;
          *(_DWORD *)buf = 134349056;
          double v14 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning,mag sample is before sleep,%{public}.3f", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419400 != -1) {
            dispatch_once(&qword_102419400, &stru_1022F1A68);
          }
          uint64_t v5 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::HandleMagnetometerNotification(const CLMagnetometer::Sample *, unsigned int)", "%s\n", v5);
          goto LABEL_33;
        }
      }
    }
    else
    {
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      double v4 = qword_102419408;
      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v14) = a3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning Raven: encountered unexpected magnetometer batch size of %u", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        v12[0] = 67109120;
        v12[1] = a3;
        uint64_t v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::HandleMagnetometerNotification(const CLMagnetometer::Sample *, unsigned int)", "%s\n", v5);
LABEL_33:
        if (v5 != (char *)buf) {
          free(v5);
        }
      }
    }
  }
  else
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v6 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Raven: encountered empty magnetometer notification", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      LOWORD(v12[0]) = 0;
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::HandleMagnetometerNotification(const CLMagnetometer::Sample *, unsigned int)", "%s\n", v5);
      goto LABEL_33;
    }
  }
}

void sub_100CE1358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

void sub_100CE1374(uint64_t a1, uint64_t a2, double *a3, int a4, uint64_t a5)
{
  LODWORD(v5) = a4;
  *(_DWORD *)(a5 + 52) |= 2u;
  uint64_t v8 = *(void *)(a5 + 40);
  if (!v8) {
    operator new();
  }
  *(_DWORD *)(v8 + 488) |= 0x2000u;
  uint64_t v9 = *(void *)(v8 + 112);
  if (!v9) {
    operator new();
  }
  sub_100CE6FC4(a2, a5);
  *(_DWORD *)(v9 + 44) |= 1u;
  uint64_t v10 = *(void *)(v9 + 8);
  if (!v10) {
    operator new();
  }
  if ((sub_101457C60((uint64_t *)a2, v10) & 1) == 0)
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    double v11 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Error: Failed to convert magnetometer notification receipt time to protobuf", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      long long v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::SerializeMagnetometerNotification(const CLUtils::Timestamp &, const CLMagnetometer::Sample *, const unsigned int, CLP::LogEntry::LogEntry &)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
  }
  if (v5)
  {
    uint64_t v5 = v5;
    do
    {
      double v12 = *a3;
      double v13 = *a3 - *(double *)(a2 + 8);
      *(double *)buf = v13 + *(double *)a2;
      double v19 = v12;
      double v20 = v13 + *(double *)(a2 + 16);
      char v21 = *(unsigned char *)(a2 + 24);
      int v14 = *(_DWORD *)(v9 + 28);
      uint64_t v15 = *(int *)(v9 + 24);
      if ((int)v15 >= v14)
      {
        if (v14 == *(_DWORD *)(v9 + 32))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v9 + 16), v14 + 1);
          int v14 = *(_DWORD *)(v9 + 28);
        }
        *(_DWORD *)(v9 + 28) = v14 + 1;
        sub_100CEFE04();
      }
      uint64_t v16 = *(void *)(v9 + 16);
      *(_DWORD *)(v9 + 24) = v15 + 1;
      sub_10145F3BC((uint64_t)a3, *(void *)(v16 + 8 * v15), (uint64_t *)buf);
      a3 += 3;
      --v5;
    }
    while (v5);
  }
}

void sub_100CE1690()
{
}

void sub_100CE16EC(uint64_t a1, int a2, _DWORD *a3, uint64_t a4)
{
  int v29 = a2;
  if (*(unsigned char *)(a1 + 4663) || *(void *)(a1 + 4680))
  {
    sub_10016BC44((uint64_t)v28);
    switch(*a3)
    {
      case 0:
        uint64_t v7 = sub_100168850(buf);
        sub_100CE1D00(v7, v28, &v29, a4, (uint64_t)buf);
        sub_100CCB93C(a1, (uint64_t)buf, 0);
        goto LABEL_21;
      case 2:
        uint64_t v8 = sub_100168850(buf);
        sub_100CE2330(v8, v28, &v29, a4, (uint64_t)buf);
        sub_100CCB93C(a1, (uint64_t)buf, 0);
        goto LABEL_21;
      case 4:
        uint64_t v9 = sub_100168850(buf);
        sub_100CE2028(v9, v28, &v29, a4, (uint64_t)buf);
        sub_100CCB93C(a1, (uint64_t)buf, 0);
        goto LABEL_21;
      case 5:
        double v27 = 0.0;
        int v26 = -1;
        sub_1001862F4(*(void *)(a1 + 4552), &v27, &v26, *(double *)a4);
        if (v26 != -1) {
          goto LABEL_15;
        }
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        uint64_t v10 = qword_102419408;
        if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
        {
          double v11 = *(double *)a4;
          *(_DWORD *)buf = 134217984;
          double v35 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Could not get undulation from CLGnssUndulation to convert TEPA MSL altitude to reference ellipsoid altitude at iOSTime,%.3lf", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419400 != -1) {
            dispatch_once(&qword_102419400, &stru_1022F1A68);
          }
          double v23 = *(double *)a4;
          int v30 = 134217984;
          double v31 = v23;
          id v24 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::HandleGpsAssistantNotification(int, const CLGpsAssistant_Type::Notification &, const CLGpsAssistant_Type::NotificationData &)", "%s\n", v24);
          if (v24 != (char *)buf) {
            free(v24);
          }
        }
        float v25 = 0.0;
        if (sub_10014933C(&v25, *(double *)(a4 + 8), *(double *)(a4 + 16)))
        {
          double v27 = v25;
LABEL_15:
          if (qword_102419400 != -1) {
            dispatch_once(&qword_102419400, &stru_1022F1A68);
          }
          double v12 = qword_102419408;
          if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
          {
            double v13 = *(double *)a4;
            uint64_t v14 = *(void *)(a4 + 48);
            *(_DWORD *)buf = 134218240;
            double v35 = v13;
            __int16 v36 = 2048;
            uint64_t v37 = v14;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Inject TEPA to raven at ios_t,%.3lf,altitude,%.3lf", buf, 0x16u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419400 != -1) {
              dispatch_once(&qword_102419400, &stru_1022F1A68);
            }
            double v20 = *(double *)a4;
            uint64_t v21 = *(void *)(a4 + 48);
            int v30 = 134218240;
            double v31 = v20;
            __int16 v32 = 2048;
            uint64_t v33 = v21;
            uint64_t v22 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::HandleGpsAssistantNotification(int, const CLGpsAssistant_Type::Notification &, const CLGpsAssistant_Type::NotificationData &)", "%s\n", v22);
            if (v22 != (char *)buf) {
              free(v22);
            }
          }
          uint64_t v15 = sub_100168850(buf);
          sub_100CE21A4(v15, v28, &v29, a4, &v27, (uint64_t)buf);
          sub_100CCB93C(a1, (uint64_t)buf, 0);
LABEL_21:
          sub_1001687EC(buf);
        }
        else
        {
          if (qword_102419400 != -1) {
            dispatch_once(&qword_102419400, &stru_1022F1A68);
          }
          uint64_t v16 = qword_102419408;
          if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
          {
            double v17 = *(double *)a4;
            *(_DWORD *)buf = 134217984;
            double v35 = v17;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Could not get undulation from CLGeoidModel to convert TEPA MSL altitude to reference ellipsoid altitude at iOSTime,%.3lf", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419400 != -1) {
              dispatch_once(&qword_102419400, &stru_1022F1A68);
            }
            double v18 = *(double *)a4;
            int v30 = 134217984;
            double v31 = v18;
            double v19 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLRavenController::HandleGpsAssistantNotification(int, const CLGpsAssistant_Type::Notification &, const CLGpsAssistant_Type::NotificationData &)", "%s\n", v19);
            if (v19 != (char *)buf) {
              free(v19);
            }
          }
        }
        break;
      default:
        return;
    }
  }
}

void sub_100CE1CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

void sub_100CE1D00(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)(a5 + 52) |= 2u;
  uint64_t v8 = *(void *)(a5 + 40);
  if (!v8) {
    operator new();
  }
  *(_DWORD *)(v8 + 488) |= 0x200u;
  uint64_t v9 = *(void *)(v8 + 80);
  if (!v9) {
    operator new();
  }
  sub_100CE6FC4((uint64_t)a2, a5);
  *(_DWORD *)(v9 + 32) |= 1u;
  uint64_t v10 = *(void *)(v9 + 8);
  if (!v10) {
    operator new();
  }
  if ((sub_101457C60(a2, v10) & 1) == 0)
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    double v11 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Error: Failed to convert map vector notification receipt time to protobuf", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::SerializeMapVectorDirectionOfTravelNotification(const CLUtils::Timestamp &, const int &, const CLGpsAssistant_Type::NotificationData &, CLP::LogEntry::LogEntry &)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
  }
  int v12 = *(_DWORD *)(v9 + 32);
  *(_DWORD *)(v9 + 24) = *a3;
  *(_DWORD *)(v9 + 32) = v12 | 6;
  uint64_t v13 = *(void *)(v9 + 16);
  if (!v13) {
    operator new();
  }
  sub_101458E1C(a4, v13);
}

void sub_100CE1FB8()
{
}

void sub_100CE2028(uint64_t a1, uint64_t *a2, int *a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)(a5 + 52) |= 2u;
  uint64_t v8 = *(void *)(a5 + 40);
  if (!v8) {
    operator new();
  }
  *(_DWORD *)(v8 + 488) |= 0x100000u;
  uint64_t v9 = *(void *)(v8 + 168);
  if (!v9) {
    operator new();
  }
  sub_100CE6FC4((uint64_t)a2, a5);
  *(_DWORD *)(v9 + 32) |= 1u;
  uint64_t v10 = *(void *)(v9 + 8);
  if (!v10) {
    operator new();
  }
  sub_101457C60(a2, v10);
  int v11 = *a3;
  *(_DWORD *)(v9 + 32) |= 2u;
  *(_DWORD *)(v9 + 24) = v11;

  sub_1014614C8(a4, v9);
}

void sub_100CE2150()
{
}

void sub_100CE21A4(uint64_t a1, uint64_t *a2, int *a3, uint64_t a4, double *a5, uint64_t a6)
{
  *(_DWORD *)(a6 + 52) |= 2u;
  uint64_t v10 = *(void *)(a6 + 40);
  if (!v10) {
    operator new();
  }
  *(_DWORD *)(v10 + 488) |= 0x400000u;
  uint64_t v11 = *(void *)(v10 + 184);
  if (!v11) {
    operator new();
  }
  sub_100CE6FC4((uint64_t)a2, a6);
  *(_DWORD *)(v11 + 32) |= 1u;
  uint64_t v12 = *(void *)(v11 + 8);
  if (!v12) {
    operator new();
  }
  sub_101457C60(a2, v12);
  int v13 = *a3;
  *(_DWORD *)(v11 + 32) |= 2u;
  *(_DWORD *)(v11 + 24) = v13;
  double v14 = *a5;

  sub_1014618B8(a4, v11, v14);
}

void sub_100CE22DC()
{
}

void sub_100CE2330(uint64_t a1, uint64_t *a2, int *a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)(a5 + 52) |= 2u;
  uint64_t v8 = *(void *)(a5 + 40);
  if (!v8) {
    operator new();
  }
  *(_DWORD *)(v8 + 488) |= 0x800000u;
  uint64_t v9 = *(void *)(v8 + 192);
  if (!v9) {
    operator new();
  }
  sub_100CE6FC4((uint64_t)a2, a5);
  *(_DWORD *)(v9 + 80) |= 1u;
  uint64_t v10 = *(void *)(v9 + 8);
  if (!v10) {
    operator new();
  }
  sub_101457C60(a2, v10);
  int v11 = *a3;
  *(_DWORD *)(v9 + 80) |= 4u;
  *(_DWORD *)(v9 + 24) = v11;

  sub_101457E24(a4, v9);
}

void sub_100CE2458()
{
}

uint64_t sub_100CE24AC(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(unsigned char *)(result + 4663) || *(void *)(result + 4680))
  {
    sub_100168850(v6);
    sub_10016BC44((uint64_t)v5);
    sub_100CE253C(v4, v5, a2, (uint64_t)v6);
    sub_100CCB93C(v3, (uint64_t)v6, 0);
    return sub_1001687EC(v6);
  }
  return result;
}

void sub_100CE2524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

double sub_100CE253C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)(a4 + 52) |= 2u;
  uint64_t v6 = *(void *)(a4 + 40);
  if (!v6) {
    operator new();
  }
  *(_DWORD *)(v6 + 488) |= 0x1000000u;
  uint64_t v7 = *(void *)(v6 + 200);
  if (!v7) {
    operator new();
  }
  sub_100CE6FC4((uint64_t)a2, a4);
  *(_DWORD *)(v7 + 60) |= 1u;
  uint64_t v8 = *(void *)(v7 + 8);
  if (!v8) {
    operator new();
  }
  if ((sub_101457C60(a2, v8) & 1) == 0)
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v9 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Error: Failed to convert MapMatchingRouteHint notification receipt time to protobuf", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      LOWORD(v12[0]) = 0;
      int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::SerializeMapMatchingRouteHint(const CLUtils::Timestamp &, const CLMapsRouteHintData &, CLP::LogEntry::LogEntry &)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  *(void *)buf = CFAbsoluteTimeGetCurrent();
  v12[0] = sub_10016C458();
  *(void *)&double result = sub_10145F5EC(a3, v7, (uint64_t *)buf, v12).n128_u64[0];
  return result;
}

void sub_100CE27C0()
{
}

uint64_t sub_100CE281C(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 25)
  {
    uint64_t v5 = result;
    if (*(unsigned char *)(result + 4663) || *(void *)(result + 4680))
    {
      uint64_t v6 = *(void **)(a4 + 1160);
      if (v6) {
        char v7 = sub_100D68DFC(v6, 1) ^ 1;
      }
      else {
        char v7 = 1;
      }
      sub_100168850(v11);
      sub_10016BC44((uint64_t)v10);
      sub_100CE28DC(v8, (uint64_t)v10, v9, a4, (uint64_t)v11);
      sub_100CCB93C(v5, (uint64_t)v11, v7);
      return sub_1001687EC(v11);
    }
  }
  return result;
}

void sub_100CE28C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

void sub_100CE28DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)(a5 + 52) |= 2u;
  uint64_t v6 = *(void *)(a5 + 40);
  if (!v6) {
    operator new();
  }
  *(_DWORD *)(v6 + 488) |= 0x1000u;
  uint64_t v7 = *(void *)(v6 + 104);
  if (!v7) {
    operator new();
  }
  if (*(void *)(a4 + 1160))
  {
    sub_100CE6FC4(a2, a5);
    uint64_t v8 = *(void *)(a4 + 1160);
    sub_10145B70C(v8, v7);
  }
  else
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v9 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Raven: missing gnss meas data", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLRavenController::SerializeMeasurementNotification(const CLUtils::Timestamp &, const int &, const CLLocationProvider_Type::NotificationData &, CLP::LogEntry::LogEntry &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

void sub_100CE2B44(_Unwind_Exception *exception_object)
{
}

void sub_100CE2B84(uint64_t a1, int a2, _DWORD *a3, CLMotionActivity *a4)
{
  int v12 = a2;
  if (*a3 == 1)
  {
    sub_10016BC44((uint64_t)v11);
    if (*a3 == 1)
    {
      uint64_t v7 = *(void *)(a1 + 88);
      if (v7) {
        sub_100E71FA8(v7, (uint64_t)a4);
      }
      uint64_t v8 = *(void *)(a1 + 80);
      if (v8) {
        sub_1008C1840(v8, (uint64_t)a4);
      }
      sub_100CD0EF8(a1 + 4704, a4);
    }
    if (*(unsigned char *)(a1 + 4663) || *(void *)(a1 + 4680))
    {
      uint64_t v9 = sub_100168850(v10);
      sub_100CE2C6C(v9, v11, &v12, (uint64_t)a4, (uint64_t)v10);
      sub_100CCB93C(a1, (uint64_t)v10, 0);
      sub_1001687EC(v10);
    }
  }
}

void sub_100CE2C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100CE2C6C(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)(a5 + 52) |= 2u;
  uint64_t v8 = *(void *)(a5 + 40);
  if (!v8) {
    operator new();
  }
  *(_DWORD *)(v8 + 488) |= 0x10u;
  uint64_t v9 = *(void *)(v8 + 40);
  if (!v9) {
    operator new();
  }
  sub_100CE6FC4((uint64_t)a2, a5);
  *(_DWORD *)(v9 + 32) |= 1u;
  uint64_t v10 = *(void *)(v9 + 8);
  if (!v10) {
    operator new();
  }
  if ((sub_101457C60(a2, v10) & 1) == 0)
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    int v11 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Error: Failed to convert motion state notification receipt time to protobuf", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::SerializeMotionStateNotification(const CLUtils::Timestamp &, const int &, const CLMotionState_Type::NotificationData &, CLP::LogEntry::LogEntry &)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    *(_DWORD *)(v9 + 32) |= 1u;
    uint64_t v12 = *(void *)(v9 + 8);
    if (!v12) {
      operator new();
    }
    (*(void (**)(uint64_t))(*(void *)v12 + 32))(v12);
  }
  int v13 = *(_DWORD *)(v9 + 32);
  *(_DWORD *)(v9 + 24) = *a3;
  *(_DWORD *)(v9 + 32) = v13 | 6;
  uint64_t v14 = *(void *)(v9 + 16);
  if (!v14) {
    operator new();
  }
  sub_100163CA8(a4, v14, 0);
}

void sub_100CE2F88()
{
}

uint64_t sub_100CE3004(uint64_t result, int a2, _DWORD *a3, uint64_t a4)
{
  int v9 = a2;
  if (!*a3)
  {
    uint64_t v5 = result;
    if (*(unsigned char *)(result + 4663) || *(void *)(result + 4680))
    {
      sub_100168850(v8);
      sub_10016BC44((uint64_t)v7);
      sub_100CE30A4(v6, v7, &v9, a4, (uint64_t)v8);
      sub_100CCB93C(v5, (uint64_t)v8, 0);
      return sub_1001687EC(v8);
    }
  }
  return result;
}

void sub_100CE308C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

void sub_100CE30A4(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)(a5 + 52) |= 2u;
  uint64_t v8 = *(void *)(a5 + 40);
  if (!v8) {
    operator new();
  }
  *(_DWORD *)(v8 + 488) |= 0x20u;
  uint64_t v9 = *(void *)(v8 + 48);
  if (!v9) {
    operator new();
  }
  sub_100CE6FC4((uint64_t)a2, a5);
  *(_DWORD *)(v9 + 32) |= 1u;
  uint64_t v10 = *(void *)(v9 + 8);
  if (!v10) {
    operator new();
  }
  if ((sub_101457C60(a2, v10) & 1) == 0)
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    int v11 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Error: Failed to convert motion state observer notification receipt time to protobuf", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::SerializeMotionStateObserverNotification(const CLUtils::Timestamp &, const int &, const CLMotionStateObserver_Type::NotificationData &, CLP::LogEntry::LogEntry &)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
  }
  int v12 = *(_DWORD *)(v9 + 32);
  *(_DWORD *)(v9 + 24) = *a3;
  *(_DWORD *)(v9 + 32) = v12 | 6;
  uint64_t v13 = *(void *)(v9 + 16);
  if (!v13) {
    operator new();
  }
  sub_101467134(a4, v13);
}

void sub_100CE335C()
{
}

uint64_t sub_100CE33CC(uint64_t result, int a2, _DWORD *a3, uint64_t a4)
{
  int v9 = a2;
  if (*a3 == 2)
  {
    uint64_t v5 = result;
    if (*(unsigned char *)(result + 4663) || *(void *)(result + 4680))
    {
      sub_100168850(v8);
      sub_10016BC44((uint64_t)v7);
      sub_100CE3470(v6, v7, &v9, a4, (uint64_t)v8);
      sub_100CCB93C(v5, (uint64_t)v8, 0);
      return sub_1001687EC(v8);
    }
  }
  return result;
}

void sub_100CE3458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

void sub_100CE3470(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)(a5 + 52) |= 2u;
  uint64_t v8 = *(void *)(a5 + 40);
  if (!v8) {
    operator new();
  }
  *(_DWORD *)(v8 + 488) |= 0x40u;
  uint64_t v9 = *(void *)(v8 + 56);
  if (!v9) {
    operator new();
  }
  sub_100CE6FC4((uint64_t)a2, a5);
  *(_DWORD *)(v9 + 32) |= 1u;
  uint64_t v10 = *(void *)(v9 + 8);
  if (!v10) {
    operator new();
  }
  if ((sub_101457C60(a2, v10) & 1) == 0)
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    int v11 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Error: Failed to convert natalimetry notification receipt time to protobuf", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::SerializeNatalimetryNotification(const CLUtils::Timestamp &, const int &, const CLNatalimetryNotifier_Type::NotificationData &, CLP::LogEntry::LogEntry &)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
  }
  int v12 = *(_DWORD *)(v9 + 32);
  *(_DWORD *)(v9 + 24) = *a3;
  *(_DWORD *)(v9 + 32) = v12 | 6;
  uint64_t v13 = *(void *)(v9 + 16);
  if (!v13) {
    operator new();
  }
  sub_1014587E8(a4, v13);
}

void sub_100CE3728()
{
}

void sub_100CE3798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100CE6FC4(a2, a4);
  *(_DWORD *)(a4 + 52) |= 2u;
  uint64_t v7 = *(void *)(a4 + 40);
  if (!v7) {
    operator new();
  }
  *(_DWORD *)(v7 + 492) |= 4u;
  uint64_t v8 = *(void *)(v7 + 280);
  if (!v8) {
    operator new();
  }
  sub_100031160(a3, v8);

  sub_100CCB93C(a1, a4, 0);
}

void sub_100CE3874()
{
}

void sub_100CE38B4(uint64_t a1, float32x2_t *a2, unsigned int a3)
{
  if (a2 && a3)
  {
    if (a3 < 0xB)
    {
      if (*(unsigned char *)(a1 + 4663) || *(void *)(a1 + 4680))
      {
        sub_10016BC44((uint64_t)v11);
        if (sub_100B00DC0(a1 + 4480, (double *)a2))
        {
          sub_100168850(buf);
          sub_100CE3D60(a1, (uint64_t)v11, a2, a3, (uint64_t)buf);
          sub_100CCB93C(a1, (uint64_t)buf, 0);
          sub_1001687EC(buf);
          return;
        }
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        uint64_t v9 = qword_102419408;
        if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
        {
          float32x2_t v10 = *a2;
          *(_DWORD *)buf = 134349056;
          float32x2_t v13 = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning,gyro sample is before sleep,%{public}.3f", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419400 != -1) {
            dispatch_once(&qword_102419400, &stru_1022F1A68);
          }
          uint64_t v5 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::HandleRateGyroNotification(const CLGyro::Sample *, unsigned int)", "%s\n", v5);
          goto LABEL_33;
        }
      }
    }
    else
    {
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      uint64_t v4 = qword_102419408;
      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        v13.i32[0] = a3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning Raven: encountered unexpected rate gyro batch size of %u", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        v11[0] = 67109120;
        v11[1] = a3;
        uint64_t v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::HandleRateGyroNotification(const CLGyro::Sample *, unsigned int)", "%s\n", v5);
LABEL_33:
        if (v5 != (char *)buf) {
          free(v5);
        }
      }
    }
  }
  else
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v6 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Raven: encountered empty rate gyro notification", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      LOWORD(v11[0]) = 0;
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::HandleRateGyroNotification(const CLGyro::Sample *, unsigned int)", "%s\n", v5);
      goto LABEL_33;
    }
  }
}

void sub_100CE3D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

void sub_100CE3D60(uint64_t a1, uint64_t a2, float32x2_t *a3, int a4, uint64_t a5)
{
  LODWORD(v5) = a4;
  *(_DWORD *)(a5 + 52) |= 2u;
  uint64_t v9 = *(void *)(a5 + 40);
  if (!v9) {
    operator new();
  }
  *(_DWORD *)(v9 + 488) |= 2u;
  uint64_t v10 = *(void *)(v9 + 16);
  if (!v10) {
    operator new();
  }
  sub_100CE6FC4(a2, a5);
  *(_DWORD *)(v10 + 44) |= 1u;
  uint64_t v11 = *(void *)(v10 + 8);
  if (!v11) {
    operator new();
  }
  if ((sub_101457C60((uint64_t *)a2, v11) & 1) == 0)
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    int v12 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Error: Failed to convert gyro notification receipt time to protobuf", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      double v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::SerializeRateGyroNotification(const CLUtils::Timestamp &, const CLGyro::Sample *, const unsigned int, CLP::LogEntry::LogEntry &)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
  }
  if (v5)
  {
    uint64_t v5 = v5;
    do
    {
      float32x2_t v13 = *a3;
      double v14 = *(double *)a3 - *(double *)(a2 + 8);
      *(double *)buf = v14 + *(double *)a2;
      float32x2_t v20 = v13;
      double v21 = v14 + *(double *)(a2 + 16);
      char v22 = *(unsigned char *)(a2 + 24);
      int v15 = *(_DWORD *)(v10 + 28);
      uint64_t v16 = *(int *)(v10 + 24);
      if ((int)v16 >= v15)
      {
        if (v15 == *(_DWORD *)(v10 + 32))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v10 + 16), v15 + 1);
          int v15 = *(_DWORD *)(v10 + 28);
        }
        *(_DWORD *)(v10 + 28) = v15 + 1;
        sub_100CEFE68();
      }
      uint64_t v17 = *(void *)(v10 + 16);
      *(_DWORD *)(v10 + 24) = v16 + 1;
      sub_10145EC7C(a3, *(float32x2_t **)(v17 + 8 * v16), (uint64_t *)buf);
      a3 += 3;
      --v5;
    }
    while (v5);
  }
  else
  {
    double v14 = 0.0;
  }
  sub_100CEA370(a1 + 4560, 1u, *(double *)a2, -v14);
}

void sub_100CE40B0()
{
}

uint64_t sub_100CE410C(uint64_t result, int a2, _DWORD *a3, int *a4)
{
  int v8 = a2;
  if (!*a3)
  {
    uint64_t v5 = result;
    if (*(unsigned char *)(result + 4663) || *(void *)(result + 4680))
    {
      sub_100168850(v7);
      sub_10016BC44((uint64_t)v6);
      sub_100CE41B0(v5, v6, &v8, a4, (uint64_t)v7);
      sub_100CCB93C(v5, (uint64_t)v7, 0);
      return sub_1001687EC(v7);
    }
  }
  return result;
}

void sub_100CE4198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

void sub_100CE41B0(uint64_t a1, uint64_t *a2, int *a3, int *a4, uint64_t a5)
{
  *(_DWORD *)(a5 + 52) |= 2u;
  uint64_t v9 = *(void *)(a5 + 40);
  if (!v9) {
    operator new();
  }
  *(_DWORD *)(v9 + 488) |= 0x800u;
  uint64_t v10 = *(void *)(v9 + 96);
  if (!v10) {
    operator new();
  }
  sub_100CE6FC4((uint64_t)a2, a5);
  *(_DWORD *)(v10 + 32) |= 1u;
  uint64_t v11 = *(void *)(v10 + 8);
  if (!v11) {
    operator new();
  }
  if ((sub_101457C60(a2, v11) & 1) == 0)
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    int v12 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Error: Failed to convert signal environment notification receipt time to protobuf", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::SerializeSignalEnvironmentNotification(const CLUtils::Timestamp &, const int &, const CLSignalEnvironmentProvider_Type::NotificationData &, CLP::LogEntry::LogEntry &)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
  }
  int v13 = *a3;
  *(_DWORD *)(v10 + 32) |= 8u;
  *(_DWORD *)(v10 + 24) = v13;
  uint64_t v14 = *(void *)(a1 + 80);
  if (v14) {
    sub_1008C1880(v14, *a4);
  }
  uint64_t v15 = *(void *)(a1 + 88);
  if (v15) {
    sub_100E71FDC(v15, *a4);
  }
  sub_101460178(a4, (_DWORD *)v10);
}

void sub_100CE4460()
{
}

uint64_t sub_100CE44BC(uint64_t result, int a2, _DWORD *a3, uint64_t a4)
{
  int v9 = a2;
  if (!*a3)
  {
    uint64_t v5 = result;
    if (*(unsigned char *)(result + 4663) || *(void *)(result + 4680))
    {
      sub_100168850(v8);
      sub_10016BC44((uint64_t)v7);
      sub_100CE455C(v6, v7, &v9, a4, (uint64_t)v8);
      sub_100CCB93C(v5, (uint64_t)v8, 0);
      return sub_1001687EC(v8);
    }
  }
  return result;
}

void sub_100CE4544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

BOOL sub_100CE455C(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)(a5 + 52) |= 2u;
  uint64_t v8 = *(void *)(a5 + 40);
  if (!v8) {
    operator new();
  }
  *(_DWORD *)(v8 + 488) |= 0x8000u;
  uint64_t v9 = *(void *)(v8 + 128);
  if (!v9) {
    operator new();
  }
  sub_100CE6FC4((uint64_t)a2, a5);
  *(_DWORD *)(v9 + 32) |= 1u;
  uint64_t v10 = *(void *)(v9 + 8);
  if (!v10) {
    operator new();
  }
  if ((sub_101457C60(a2, v10) & 1) == 0)
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v11 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Error: Failed to convert step count notification receipt time to protobuf", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::SerializeStepCountNotification(const CLUtils::Timestamp &, const int &, const CLStepCountNotifier_Type::NotificationData &, CLP::LogEntry::LogEntry &)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  int v12 = *(_DWORD *)(v9 + 32);
  *(_DWORD *)(v9 + 24) = *a3;
  *(_DWORD *)(v9 + 32) = v12 | 6;
  uint64_t v13 = *(void *)(v9 + 16);
  if (!v13) {
    operator new();
  }
  return sub_1014604BC(a4, v13);
}

void sub_100CE4814()
{
}

void sub_100CE4884(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 52) |= 2u;
  uint64_t v4 = *(void *)(a3 + 40);
  if (!v4) {
    operator new();
  }
  *(_DWORD *)(v4 + 488) |= 0x80u;
  uint64_t v5 = *(void *)(v4 + 64);
  if (!v5) {
    operator new();
  }
  sub_100CE6FC4((uint64_t)a2, a3);
  *(_DWORD *)(v5 + 20) |= 1u;
  uint64_t v6 = *(void *)(v5 + 8);
  if (!v6) {
    operator new();
  }
  if ((sub_101457C60(a2, v6) & 1) == 0)
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v7 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Error: Failed to convert timer notification receipt time to protobuf", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::SerializeTimerNotification(const CLUtils::Timestamp &, CLP::LogEntry::LogEntry &)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

void sub_100CE4AE0()
{
}

void sub_100CE4B3C(uint64_t a1, int a2, _DWORD *a3, uint64_t a4)
{
  int v11 = a2;
  if (*a3 == 30)
  {
    if ((*(_DWORD *)(a4 + 96) & 0xFFFFFFF7) == 1)
    {
      if (*(unsigned char *)(a1 + 4663) || *(void *)(a1 + 4680))
      {
        sub_100168850(buf);
        sub_10016BC44((uint64_t)v12);
        sub_100CE0BE4(v6, v12, &v11, a4, (uint64_t)buf);
        sub_100CCB93C(a1, (uint64_t)buf, 0);
        sub_1001687EC(buf);
      }
    }
    else
    {
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      uint64_t v7 = qword_102419408;
      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
      {
        int v8 = *(_DWORD *)(a4 + 96);
        *(_DWORD *)buf = 67109120;
        int v14 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "HandleVendorLocationNotification received non-GNSS location,type,%d", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        int v9 = *(_DWORD *)(a4 + 96);
        LODWORD(v12[0]) = 67109120;
        HIDWORD(v12[0]) = v9;
        uint64_t v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLRavenController::HandleVendorLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
    }
  }
}

void sub_100CE4D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

BOOL sub_100CE4D88(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  int v11 = 0;
  sub_100CE6FC4(a2, a5);
  sub_100864B20(*a3, &v11);
  *(_DWORD *)(a5 + 52) |= 2u;
  uint64_t v7 = *(void *)(a5 + 40);
  if (!v7) {
    operator new();
  }
  *(_DWORD *)(v7 + 492) |= 0x20u;
  uint64_t v8 = *(void *)(v7 + 304);
  if (!v8) {
    operator new();
  }
  int v9 = v11;
  BOOL result = sub_10016E674(v11);
  if (!result) {
    sub_101A87444();
  }
  *(_DWORD *)(v8 + 40) |= 1u;
  *(_DWORD *)(v8 + 32) = v9;
  return result;
}

void sub_100CE4E6C()
{
}

uint64_t sub_100CE4EA4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)(a5 + 52) |= 2u;
  uint64_t v6 = *(void *)(a5 + 40);
  if (!v6) {
    operator new();
  }
  *(_DWORD *)(v6 + 492) |= 0x20u;
  uint64_t v7 = *(void *)(v6 + 304);
  if (!v7) {
    operator new();
  }
  *(_DWORD *)(v7 + 40) |= 2u;
  uint64_t v8 = *(void *)(v7 + 8);
  if (!v8) {
    operator new();
  }
  sub_100CE6FC4(a2, a5);

  return sub_100864CF0(a3, v8);
}

void sub_100CE4FA8()
{
}

uint64_t sub_100CE4FF4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)(a5 + 52) |= 2u;
  uint64_t v6 = *(void *)(a5 + 40);
  if (!v6) {
    operator new();
  }
  *(_DWORD *)(v6 + 492) |= 0x20u;
  uint64_t v7 = *(void *)(v6 + 304);
  if (!v7) {
    operator new();
  }
  *(_DWORD *)(v7 + 40) |= 8u;
  uint64_t v8 = *(void *)(v7 + 24);
  if (!v8) {
    operator new();
  }
  sub_100CE6FC4(a2, a5);

  return sub_10086646C(a3, v8);
}

void sub_100CE50F8()
{
}

uint64_t sub_100CE5144(uint64_t result, int a2, int *a3, char *a4)
{
  uint64_t v6 = result;
  int v10 = a2;
  if (*(unsigned char *)(result + 4663) || *(void *)(result + 4680))
  {
    sub_100168850(v9);
    sub_10016BC44((uint64_t)v8);
    sub_100CE51EC(v7, v8, &v10, a3, a4, (uint64_t)v9);
    sub_100CCB93C(v6, (uint64_t)v9, 1);
    return sub_1001687EC(v9);
  }
  return result;
}

void sub_100CE51D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

void sub_100CE51EC(uint64_t a1, uint64_t *a2, int *a3, int *a4, char *a5, uint64_t a6)
{
  *(_DWORD *)(a6 + 52) |= 2u;
  uint64_t v10 = *(void *)(a6 + 40);
  if (!v10) {
    operator new();
  }
  *(_DWORD *)(v10 + 488) |= 0x200000u;
  uint64_t v11 = *(void *)(v10 + 176);
  if (!v11) {
    operator new();
  }
  sub_100CE6FC4((uint64_t)a2, a6);
  *(_DWORD *)(v11 + 56) |= 1u;
  uint64_t v12 = *(void *)(v11 + 8);
  if (!v12) {
    operator new();
  }
  sub_101457C60(a2, v12);
  int v13 = *a3;
  *(_DWORD *)(v11 + 56) |= 2u;
  *(_DWORD *)(v11 + 16) = v13;

  sub_1014652F4(a4, a5, v11);
}

void sub_100CE5324()
{
}

void sub_100CE5378(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t *a4)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5 || (sub_100E72BB4(v5) & 1) == 0)
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v12 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)double v31 = 0;
      *(_WORD *)&v31[4] = 2082;
      *(void *)&v31[6] = "";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRavenController,HandleRayTracingTileNotification,unexpected\"}", buf, 0x12u);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
    }
    int v9 = qword_102419408;
    if (!os_signpost_enabled((os_log_t)qword_102419408)) {
      return;
    }
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)double v31 = 0;
    *(_WORD *)&v31[4] = 2082;
    *(void *)&v31[6] = "";
    uint64_t v10 = "CLRavenController,HandleRayTracingTileNotification,unexpected";
    uint64_t v11 = "{\"msg%{public}.0s\":\"CLRavenController,HandleRayTracingTileNotification,unexpected\"}";
LABEL_18:
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v10, v11, buf, 0x12u);
    return;
  }
  if (*a3 || !*(void *)(a1 + 88))
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v8 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)double v31 = 0;
      *(_WORD *)&v31[4] = 2082;
      *(void *)&v31[6] = "";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRavenController,HandleRayTracingTileNotification,parameter error\"}", buf, 0x12u);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
    }
    int v9 = qword_102419408;
    if (!os_signpost_enabled((os_log_t)qword_102419408)) {
      return;
    }
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)double v31 = 0;
    *(_WORD *)&v31[4] = 2082;
    *(void *)&v31[6] = "";
    uint64_t v10 = "CLRavenController,HandleRayTracingTileNotification,parameter error";
    uint64_t v11 = "{\"msg%{public}.0s\":\"CLRavenController,HandleRayTracingTileNotification,parameter error\"}";
    goto LABEL_18;
  }
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  int v13 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = *((unsigned __int8 *)a4 + 20);
    uint64_t v15 = *a4;
    uint64_t v16 = a4[1];
    int v17 = *((_DWORD *)a4 + 4);
    if (*((char *)a4 + 47) >= 0) {
      double v18 = a4 + 3;
    }
    else {
      double v18 = (uint64_t *)a4[3];
    }
    int v19 = *((unsigned __int8 *)a4 + 72);
    *(_DWORD *)buf = 68290562;
    *(_DWORD *)double v31 = 0;
    *(_WORD *)&v31[4] = 2082;
    *(void *)&v31[6] = "";
    __int16 v32 = 1026;
    int v33 = v14;
    __int16 v34 = 2050;
    uint64_t v35 = v15;
    __int16 v36 = 2050;
    uint64_t v37 = v16;
    __int16 v38 = 1026;
    int v39 = v17;
    __int16 v40 = 2082;
    v41 = v18;
    __int16 v42 = 1026;
    int v43 = v19;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenController,HandleRayTracingTileNotification\", \"responseCode\":%{public}u, \"requestedLatitude\":\"%{public}f\", \"requestedLongitude\":\"%{public}f\", \"tileBoundarySize\":%{public}d, \"dir\":%{public, location:escape_only}s, \"complete\":%{public}hhd}", buf, 0x42u);
  }
  if (*((unsigned char *)a4 + 72)) {
    sub_100E70958(*(void *)(a1 + 88));
  }
  if (*((unsigned char *)a4 + 20))
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    float32x2_t v20 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "CLRavenController,HandleRayTracingTileNotification,failure response code", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 == -1) {
        goto LABEL_37;
      }
      goto LABEL_73;
    }
  }
  else if (a4[6] == a4[7])
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v28 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "CLRavenController,HandleRayTracingTileNotification,NO tile files are provided", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 == -1)
      {
LABEL_37:
        double v21 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::HandleRayTracingTileNotification(int, const CLRayTracingTileManager_Type::Notification &, const CLRayTracingTileManager_Type::NotificationData &)", "%s\n", v21);
        if (v21 != (char *)buf) {
          free(v21);
        }
        return;
      }
LABEL_73:
      dispatch_once(&qword_102419400, &stru_1022F1A68);
      goto LABEL_37;
    }
  }
  else
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    char v22 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "CLRavenController,HandleRayTracingTileNotification,List of downloaded tile files:", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      int v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::HandleRayTracingTileNotification(int, const CLRayTracingTileManager_Type::Notification &, const CLRayTracingTileManager_Type::NotificationData &)", "%s\n", v29);
      if (v29 != (char *)buf) {
        free(v29);
      }
    }
    id v24 = (uint64_t *)a4[6];
    for (i = (uint64_t *)a4[7]; v24 != i; v24 += 3)
    {
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      float v25 = qword_102419408;
      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
      {
        int v26 = v24;
        if (*((char *)v24 + 23) < 0) {
          int v26 = (uint64_t *)*v24;
        }
        *(_DWORD *)buf = 136315138;
        *(void *)double v31 = v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "CLRavenController,HandleRayTracingTileNotification,tileFile:%s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        double v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::HandleRayTracingTileNotification(int, const CLRayTracingTileManager_Type::Notification &, const CLRayTracingTileManager_Type::NotificationData &)", "%s\n", v27);
        if (v27 != (char *)buf) {
          free(v27);
        }
      }
    }
    if (*(unsigned char *)(a1 + 4663) || *(void *)(a1 + 4680))
    {
      sub_100E72438(*(void *)(a1 + 88), (uint64_t)(a4 + 6), (uint64_t)(a4 + 3));
      sub_100CE5C00(a1);
    }
  }
}

void sub_100CE5C00(uint64_t a1)
{
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  double v2 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 68289026;
    int v20 = 0;
    __int16 v21 = 2082;
    char v22 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLRavenController,HandleRayTracingSerializeAndSend\"}", buf, 0x12u);
  }
  if (*(unsigned char *)(a1 + 4663) || *(void *)(a1 + 4680))
  {
    uint64_t v3 = *(void *)(a1 + 88);
    if (v3)
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v14 = 0;
      uint64_t v12 = 0;
      if (sub_100E72BB4(v3) && (sub_100E720E0(*(void *)(a1 + 88), (uint64_t)__p) & 1) == 0)
      {
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        uint64_t v7 = qword_102419408;
        if (!os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_43;
        }
      }
      else
      {
        if (sub_100E72BB4(*(void *)(a1 + 88)) & 1) != 0 || (sub_100E72314(*(void **)(a1 + 88), &v12))
        {
          uint64_t v4 = [[CLOSTransaction alloc] initWithDescription:"HandleRayTracingSerializeAndSend"];
          if (!v4)
          {
            if (qword_102419400 != -1) {
              dispatch_once(&qword_102419400, &stru_1022F1A68);
            }
            uint64_t v8 = qword_102419408;
            if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 68289026;
              int v20 = 0;
              __int16 v21 = 2082;
              char v22 = "";
              _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRavenController,HandleRayTracingSerializeAndSend,os_transaction,failed\"}", buf, 0x12u);
              if (qword_102419400 != -1) {
                dispatch_once(&qword_102419400, &stru_1022F1A68);
              }
            }
            int v9 = qword_102419408;
            if (os_signpost_enabled((os_log_t)qword_102419408))
            {
              *(_DWORD *)buf = 68289026;
              int v20 = 0;
              __int16 v21 = 2082;
              char v22 = "";
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLRavenController,HandleRayTracingSerializeAndSend,os_transaction,failed", "{\"msg%{public}.0s\":\"CLRavenController,HandleRayTracingSerializeAndSend,os_transaction,failed\"}", buf, 0x12u);
            }
            goto LABEL_43;
          }
          sub_100168850(buf);
          if (sub_100E72BB4(*(void *)(a1 + 88)))
          {
            sub_10016BC44((uint64_t)v15);
            if ((sub_100CE6144(v5, (uint64_t)v15, (const char *)__p, (uint64_t)buf) & 1) == 0) {
              goto LABEL_40;
            }
          }
          else
          {
            sub_10016BC44((uint64_t)v15);
            if (!sub_100CE6898(v10, (uint64_t)v15, v12, (uint64_t)buf))
            {
LABEL_40:
              if (v12)
              {
                sub_100E72A04(*(void *)(a1 + 88), (uint64_t)v12);
                uint64_t v12 = 0;
              }

              sub_100E72710(*(void *)(a1 + 88));
              sub_1001687EC(buf);
              goto LABEL_43;
            }
          }
          sub_100CCB93C(a1, (uint64_t)buf, 0);
          if (qword_102419400 != -1) {
            dispatch_once(&qword_102419400, &stru_1022F1A68);
          }
          uint64_t v11 = qword_102419408;
          if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)uint64_t v15 = 68289026;
            int v16 = 0;
            __int16 v17 = 2082;
            double v18 = "";
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRavenController,HandleRayTracingSerializeAndSend,After Send\"}", v15, 0x12u);
          }
          goto LABEL_40;
        }
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        uint64_t v7 = qword_102419408;
        if (!os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_43;
        }
      }
      *(_DWORD *)buf = 68289026;
      int v20 = 0;
      __int16 v21 = 2082;
      char v22 = "";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenController,HandleRayTracingSerializeAndSend,GetNextTile,FALSE\"}", buf, 0x12u);
LABEL_43:
      if (SHIBYTE(v14) < 0) {
        operator delete(__p[0]);
      }
      return;
    }
  }
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  uint64_t v6 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    int v20 = 0;
    __int16 v21 = 2082;
    char v22 = "";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenController,HandleRayTracingSerializeAndSend,parameter error\"}", buf, 0x12u);
  }
}

void sub_100CE6104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100CE6144(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4)
{
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  uint64_t v7 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_INFO))
  {
    buf.st_dev = 68289026;
    *(_DWORD *)&buf.st_mode = 0;
    LOWORD(buf.st_ino) = 2082;
    *(__darwin_ino64_t *)((char *)&buf.st_ino + 2) = (__darwin_ino64_t)"";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLRavenController,SerializeRayTracingTileData\"}", (uint8_t *)&buf, 0x12u);
  }
  if (a3[23] >= 0) {
    uint64_t v8 = a3;
  }
  else {
    uint64_t v8 = *(const char **)a3;
  }
  int v9 = open(v8, 0);
  int v10 = v9;
  if (v9 != -1)
  {
    if (fstat(v9, &buf) == -1)
    {
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      char v22 = qword_102419408;
      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
      {
        double v23 = a3[23] >= 0 ? (uint64_t *)a3 : *(uint64_t **)a3;
        int v36 = 68289282;
        int v37 = 0;
        __int16 v38 = 2082;
        int v39 = "";
        __int16 v40 = 2082;
        v41 = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRavenController,SerializeRayTracingTileData\", \"statFailedFor\":%{public, location:escape_only}s}", (uint8_t *)&v36, 0x1Cu);
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
      }
      uint64_t v24 = qword_102419408;
      if (!os_signpost_enabled((os_log_t)qword_102419408)) {
        goto LABEL_68;
      }
      if (a3[23] >= 0) {
        float v25 = a3;
      }
      else {
        float v25 = *(const char **)a3;
      }
      int v36 = 68289282;
      int v37 = 0;
      __int16 v38 = 2082;
      int v39 = "";
      __int16 v40 = 2082;
      v41 = (uint64_t *)v25;
      int v26 = "CLRavenController,SerializeRayTracingTileData";
      double v27 = "{\"msg%{public}.0s\":\"CLRavenController,SerializeRayTracingTileData\", \"statFailedFor\":%{public, location:escape_only}s}";
    }
    else
    {
      st_std::string::size_type size = buf.st_size;
      if (buf.st_size <= 0)
      {
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        uint64_t v28 = qword_102419408;
        if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
        {
          int v36 = 68289026;
          int v37 = 0;
          __int16 v38 = 2082;
          int v39 = "";
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRavenController,SerializeRayTracingTileData,0 fileSize\"}", (uint8_t *)&v36, 0x12u);
          if (qword_102419400 != -1) {
            dispatch_once(&qword_102419400, &stru_1022F1A68);
          }
        }
        uint64_t v29 = qword_102419408;
        if (!os_signpost_enabled((os_log_t)qword_102419408)) {
          goto LABEL_68;
        }
        int v36 = 68289026;
        int v37 = 0;
        __int16 v38 = 2082;
        int v39 = "";
        int v26 = "CLRavenController,SerializeRayTracingTileData,0 fileSize";
        double v27 = "{\"msg%{public}.0s\":\"CLRavenController,SerializeRayTracingTileData,0 fileSize\"}";
        int v30 = v29;
        uint32_t v31 = 18;
        goto LABEL_67;
      }
      uint64_t v12 = (std::string::value_type *)mmap(0, buf.st_size, 1, 2, v10, 0);
      if (v12 != (std::string::value_type *)-1)
      {
        *(_DWORD *)(a4 + 52) |= 2u;
        uint64_t v13 = *(void *)(a4 + 40);
        if (!v13) {
          operator new();
        }
        *(_DWORD *)(v13 + 492) |= 0x400u;
        uint64_t v14 = *(void *)(v13 + 344);
        if (!v14) {
          operator new();
        }
        sub_100CE6FC4(a2, a4);
        off_t v15 = buf.st_size;
        *(_DWORD *)(v14 + 36) |= 4u;
        int v16 = *(std::string **)(v14 + 24);
        if (v16 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        std::string::assign(v16, v12, v15);
        munmap(v12, st_size);
        uint64_t v17 = 1;
        goto LABEL_69;
      }
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      __int16 v32 = qword_102419408;
      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
      {
        int v33 = a3[23] >= 0 ? (uint64_t *)a3 : *(uint64_t **)a3;
        int v36 = 68289282;
        int v37 = 0;
        __int16 v38 = 2082;
        int v39 = "";
        __int16 v40 = 2082;
        v41 = v33;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRavenController,SerializeRayTracingTileData\", \"mmapFailedFor\":%{public, location:escape_only}s}", (uint8_t *)&v36, 0x1Cu);
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
      }
      uint64_t v24 = qword_102419408;
      if (!os_signpost_enabled((os_log_t)qword_102419408))
      {
LABEL_68:
        uint64_t v17 = 0;
LABEL_69:
        close(v10);
        return v17;
      }
      if (a3[23] >= 0) {
        __int16 v34 = a3;
      }
      else {
        __int16 v34 = *(const char **)a3;
      }
      int v36 = 68289282;
      int v37 = 0;
      __int16 v38 = 2082;
      int v39 = "";
      __int16 v40 = 2082;
      v41 = (uint64_t *)v34;
      int v26 = "CLRavenController,SerializeRayTracingTileData";
      double v27 = "{\"msg%{public}.0s\":\"CLRavenController,SerializeRayTracingTileData\", \"mmapFailedFor\":%{public, location:escape_only}s}";
    }
    int v30 = v24;
    uint32_t v31 = 28;
LABEL_67:
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v30, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v26, v27, (uint8_t *)&v36, v31);
    goto LABEL_68;
  }
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  double v18 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
  {
    uint64_t v19 = a3[23] >= 0 ? (uint64_t)a3 : *(void *)a3;
    buf.st_dev = 68289282;
    *(_DWORD *)&buf.st_mode = 0;
    LOWORD(buf.st_ino) = 2082;
    *(__darwin_ino64_t *)((char *)&buf.st_ino + 2) = (__darwin_ino64_t)"";
    HIWORD(buf.st_uid) = 2082;
    *(void *)&buf.st_gid = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRavenController,SerializeRayTracingTileData\", \"FailedToOpenFile\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
  }
  int v20 = qword_102419408;
  if (os_signpost_enabled((os_log_t)qword_102419408))
  {
    if (a3[23] >= 0) {
      __int16 v21 = a3;
    }
    else {
      __int16 v21 = *(const char **)a3;
    }
    buf.st_dev = 68289282;
    *(_DWORD *)&buf.st_mode = 0;
    LOWORD(buf.st_ino) = 2082;
    *(__darwin_ino64_t *)((char *)&buf.st_ino + 2) = (__darwin_ino64_t)"";
    HIWORD(buf.st_uid) = 2082;
    *(void *)&buf.st_gid = v21;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLRavenController,SerializeRayTracingTileData", "{\"msg%{public}.0s\":\"CLRavenController,SerializeRayTracingTileData\", \"FailedToOpenFile\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
  }
  return 0;
}

void sub_100CE6858()
{
}

BOOL sub_100CE6898(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  uint64_t v8 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 68289026;
    int v38 = 0;
    __int16 v39 = 2082;
    __int16 v40 = "";
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenController,SerializeRayTracingTileData\"}", buf, 0x12u);
  }
  if (!a3)
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    double v18 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 68289026;
      int v38 = 0;
      __int16 v39 = 2082;
      __int16 v40 = "";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRavenController,SerializeRayTracingTileData,null geoRayTracingTile\"}", buf, 0x12u);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
    }
    uint64_t v19 = qword_102419408;
    if (!os_signpost_enabled((os_log_t)qword_102419408)) {
      goto LABEL_46;
    }
    *(_DWORD *)stat buf = 68289026;
    int v38 = 0;
    __int16 v39 = 2082;
    __int16 v40 = "";
    int v20 = "CLRavenController,SerializeRayTracingTileData,null geoRayTracingTile";
    __int16 v21 = "{\"msg%{public}.0s\":\"CLRavenController,SerializeRayTracingTileData,null geoRayTracingTile\"}";
LABEL_44:
    __int16 v32 = v19;
    uint32_t v33 = 18;
LABEL_45:
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v32, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v20, v21, buf, v33);
LABEL_46:
    int v17 = 1;
    goto LABEL_47;
  }
  id v36 = 0;
  id v9 = [a3 readDataWithOptions:1 error:&v36];
  int v10 = v9;
  if (!v9)
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    char v22 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 68289026;
      int v38 = 0;
      __int16 v39 = 2082;
      __int16 v40 = "";
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRavenController,SerializeRayTracingTileData,readDataWithOptions returned null\"}", buf, 0x12u);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
    }
    double v23 = qword_102419408;
    if (os_signpost_enabled((os_log_t)qword_102419408))
    {
      *(_DWORD *)stat buf = 68289026;
      int v38 = 0;
      __int16 v39 = 2082;
      __int16 v40 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v23, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLRavenController,SerializeRayTracingTileData,readDataWithOptions returned null", "{\"msg%{public}.0s\":\"CLRavenController,SerializeRayTracingTileData,readDataWithOptions returned null\"}", buf, 0x12u);
    }
    if (!v36) {
      goto LABEL_46;
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022F1AF0);
    }
    uint64_t v24 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      id v25 = [v36 code];
      id v26 = [[objc_msgSend(v36, "domain") UTF8String];
      id v27 = [[objc_msgSend(v36, "localizedDescription") UTF8String];
      *(_DWORD *)stat buf = 68289795;
      int v38 = 0;
      __int16 v39 = 2082;
      __int16 v40 = "";
      __int16 v41 = 2050;
      id v42 = v25;
      __int16 v43 = 2082;
      id v44 = v26;
      __int16 v45 = 2081;
      id v46 = v27;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRavenController,readDataWithOptions error\", \"error\":%{public}lld, \"domain\":%{public, location:escape_only}s, \"description\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022F1AF0);
      }
    }
    uint64_t v28 = qword_102419388;
    if (!os_signpost_enabled((os_log_t)qword_102419388)) {
      goto LABEL_46;
    }
    id v29 = [v36 code];
    id v30 = [[objc_msgSend(v36, "domain") UTF8String];
    id v31 = [[objc_msgSend(v36, "localizedDescription") UTF8String];
    *(_DWORD *)stat buf = 68289795;
    int v38 = 0;
    __int16 v39 = 2082;
    __int16 v40 = "";
    __int16 v41 = 2050;
    id v42 = v29;
    __int16 v43 = 2082;
    id v44 = v30;
    __int16 v45 = 2081;
    id v46 = v31;
    int v20 = "CLRavenController,readDataWithOptions error";
    __int16 v21 = "{\"msg%{public}.0s\":\"CLRavenController,readDataWithOptions error\", \"error\":%{public}lld, \"domain\":%{pub"
          "lic, location:escape_only}s, \"description\":%{private, location:escape_only}s}";
    __int16 v32 = v28;
    uint32_t v33 = 48;
    goto LABEL_45;
  }
  id v11 = [v9 length];
  uint64_t v12 = (const std::string::value_type *)[v10 bytes];
  if (!v11)
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    __int16 v34 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 68289026;
      int v38 = 0;
      __int16 v39 = 2082;
      __int16 v40 = "";
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRavenController,SerializeRayTracingTileData,invalid tileSize\"}", buf, 0x12u);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
    }
    uint64_t v19 = qword_102419408;
    if (!os_signpost_enabled((os_log_t)qword_102419408)) {
      goto LABEL_46;
    }
    *(_DWORD *)stat buf = 68289026;
    int v38 = 0;
    __int16 v39 = 2082;
    __int16 v40 = "";
    int v20 = "CLRavenController,SerializeRayTracingTileData,invalid tileSize";
    __int16 v21 = "{\"msg%{public}.0s\":\"CLRavenController,SerializeRayTracingTileData,invalid tileSize\"}";
    goto LABEL_44;
  }
  uint64_t v13 = v12;
  *(_DWORD *)(a4 + 52) |= 2u;
  uint64_t v14 = *(void *)(a4 + 40);
  if (!v14) {
    operator new();
  }
  *(_DWORD *)(v14 + 492) |= 0x400u;
  uint64_t v15 = *(void *)(v14 + 344);
  if (!v15) {
    operator new();
  }
  sub_100CE6FC4(a2, a4);
  *(_DWORD *)(v15 + 36) |= 4u;
  int v16 = *(std::string **)(v15 + 24);
  if (v16 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::assign(v16, v13, (std::string::size_type)v11);
  int v17 = 0;
LABEL_47:
  return v17 == 0;
}

void sub_100CE6F84()
{
}

double sub_100CE6FC4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 52) |= 1u;
  uint64_t v2 = *(void *)(a2 + 32);
  if (!v2) {
    operator new();
  }
  int v3 = *(_DWORD *)(v2 + 44);
  *(int8x16_t *)(v2 + 8) = vextq_s8(*(int8x16_t *)(a1 + 8), *(int8x16_t *)(a1 + 8), 8uLL);
  double result = *(double *)a1;
  *(_DWORD *)(v2 + 44) = v3 | 7;
  *(double *)(v2 + 24) = result;
  return result;
}

void sub_100CE7048()
{
}

uint64_t sub_100CE706C(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 4663) || *(void *)(result + 4680))
  {
    sub_100168850(v5);
    sub_10016BC44((uint64_t)buf);
    sub_100CE6FC4((uint64_t)buf, (uint64_t)v5);
    v7 |= 2u;
    uint64_t v2 = v6;
    if (!v6) {
      operator new();
    }
    *(_DWORD *)(v6 + 492) |= 2u;
    if (!*(void *)(v2 + 272)) {
      operator new();
    }
    if (wireless_diagnostics::google::protobuf::MessageLite::ParseFromString())
    {
      sub_100CCB93C(v1, (uint64_t)v5, 0);
    }
    else
    {
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      int v3 = qword_102419408;
      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)stat buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#rof,failed to parse wire format", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        uint64_t v4 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLRavenController::HandleRavenOrbitFile(const std::string &)", "%s\n", v4);
        if (v4 != (char *)buf) {
          free(v4);
        }
      }
    }
    return sub_1001687EC(v5);
  }
  return result;
}

void sub_100CE72D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

BOOL sub_100CE7328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 1264))
  {
    sub_10016BC44((uint64_t)v144);
    if (v145) {
      double Current = v144[2] + *(double *)(a2 + 1176) + (double)*(uint64_t *)(a2 + 1168) - v144[0];
    }
    else {
      double Current = CFAbsoluteTimeGetCurrent();
    }
    char v138 = 0;
    uint64_t v141 = 0x300000003;
    long long v140 = xmmword_101D71150;
    v139 = off_1022DC578;
    v142 = &v143;
    *(_OWORD *)v148 = *(_OWORD *)(a2 + 1272);
    *(void *)&v148[16] = *(void *)(a2 + 1288);
    if (cnnavigation::ECEFToLLA())
    {
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      id v9 = qword_102419408;
      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)stat buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Raven: Conversion to client location failed in ECEF to LLA conversion.", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_17;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      goto LABEL_198;
    }
    double v11 = *(double *)&v162;
    long long v12 = v163;
    sub_100CEFBC8((uint64_t)buf);
    char v138 = buf[8];
    sub_100063168((uint64_t)&v139, (uint64_t)&buf[16]);
    cnnavigation::ECEFToENUJacobian::~ECEFToENUJacobian((cnnavigation::ECEFToENUJacobian *)buf);
    if (!v138)
    {
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      id v36 = qword_102419408;
      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)stat buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "Raven: Conversion to client location failed: ENU Jacobian.", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_17;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
LABEL_198:
      *(_WORD *)v119 = 0;
      uint64_t v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRavenController::ConvertRavenSolutionToClientLocation(const raven::RavenSolutionEvent &, CLLocationProvider_Type::NotificationData &) const", "%s\n", v35);
      goto LABEL_199;
    }
    *(void *)&v119[24] = 0x300000003;
    *(_OWORD *)&v119[8] = xmmword_101D71150;
    *(void *)v119 = off_1022DC578;
    *(void *)&v119[32] = &v119[40];
    if (!sub_100CE95C4(a2 + 1168, v119))
    {
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      int v37 = qword_102419408;
      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)stat buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "Raven: Conversion to client location failed: Get user ECEF position covariance.", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_17;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      *(_WORD *)v158 = 0;
      uint64_t v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRavenController::ConvertRavenSolutionToClientLocation(const raven::RavenSolutionEvent &, CLLocationProvider_Type::NotificationData &) const", "%s\n", v35);
      goto LABEL_199;
    }
    uint64_t v159 = 0x300000003;
    *(_OWORD *)&v158[8] = xmmword_101D71150;
    *(void *)v158 = off_1022DC578;
    v160 = &v161;
    if (!sub_100CE96F0((uint64_t)&v137, (uint64_t)v119, (uint64_t)v158))
    {
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      int v38 = qword_102419408;
      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)stat buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "Raven: Conversion to client location failed: rotate variance.", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_17;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      LOWORD(v152) = 0;
      uint64_t v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRavenController::ConvertRavenSolutionToClientLocation(const raven::RavenSolutionEvent &, CLLocationProvider_Type::NotificationData &) const", "%s\n", v35);
      goto LABEL_199;
    }
    double v13 = *(double *)sub_10004DF44((uint64_t)v158, 0, 0);
    double v14 = sqrt(v13 + *(double *)sub_10004DF44((uint64_t)v158, 1, 1));
    double v15 = sqrt(*(double *)sub_10004DF44((uint64_t)v158, 2, 2));
    _ZF = *(uint64_t *)&v14 > -1 && ((*(void *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
       || (unint64_t)(*(void *)&v14 - 1) < 0xFFFFFFFFFFFFFLL
       || (*(void *)&v14 & 0x7FFFFFFFFFFFFFFFLL) == 0;
    if (!_ZF || v15 <= 0.0 || v15 == INFINITY || v14 <= 0.0)
    {
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      __int16 v39 = qword_102419408;
      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)stat buf = 134349312;
        *(double *)&uint8_t buf[4] = v14;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(double *)&buf[14] = v15;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "Raven: Conversion to client location failed: Invalid accuracy: horizontalAccuracy %{public}.4f, verticalAccuracy %{public}.4f", buf, 0x16u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_17;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      int v152 = 134349312;
      double v153 = v14;
      __int16 v154 = 2050;
      double v155 = v15;
      uint64_t v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRavenController::ConvertRavenSolutionToClientLocation(const raven::RavenSolutionEvent &, CLLocationProvider_Type::NotificationData &) const", "%s\n", v35);
      goto LABEL_199;
    }
    double v106 = v15;
    double v19 = *(double *)sub_10004DF44((uint64_t)v158, 0, 0);
    double v20 = *(double *)sub_10004DF44((uint64_t)v158, 0, 1);
    double v21 = *(double *)sub_10004DF44((uint64_t)v158, 1, 1);
    double v22 = v19 + v21;
    double v23 = (v20 * v20 - v19 * v21) * 4.0 + v22 * v22;
    double v24 = fabs(v23);
    double v25 = sqrt(v23);
    if (v24 <= 0.0000001) {
      double v25 = 0.0;
    }
    v26.f64[0] = v22 + v25;
    v26.f64[1] = v22 - v25;
    __asm { FMOV            V0.2D, #0.5 }
    float64x2_t v30 = vmulq_f64(v26, _Q0);
    BOOL v32 = (*(uint64_t *)&v30.f64[0] <= -1
        || ((*(void *)&v30.f64[0] & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
       && (unint64_t)(*(void *)&v30.f64[0] - 1) >= 0xFFFFFFFFFFFFFLL;
    float64x2_t v107 = v30;
    BOOL v33 = !v32 && (*(void *)&v30.f64[1] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
    if (!v33 || v30.f64[1] <= 0.0)
    {
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      __int16 v34 = qword_102419408;
      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)stat buf = 134349568;
        *(double *)&uint8_t buf[4] = v19;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(double *)&buf[14] = v20;
        *(_WORD *)&buf[22] = 2050;
        uint64_t v168 = *(void *)&v21;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "Raven: Conversion to client location failed in computing error ellipse: a, %{public}.4f, b, %{public}.4f, c, %{public}.4f.", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_17;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      int v152 = 134349568;
      double v153 = v19;
      __int16 v154 = 2050;
      double v155 = v20;
      __int16 v156 = 2050;
      double v157 = v21;
      uint64_t v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRavenController::ConvertRavenSolutionToClientLocation(const raven::RavenSolutionEvent &, CLLocationProvider_Type::NotificationData &) const", "%s\n", v35);
      goto LABEL_199;
    }
    double v40 = v11 * 57.2957795;
    double v41 = *(double *)&v12 * 57.2957795;
    if (fabs(v20) <= 0.0000001)
    {
      if (v21 >= v19 + -0.0000001) {
        double v42 = 0.0;
      }
      else {
        double v42 = 90.0;
      }
    }
    else
    {
      double v42 = atan((v30.f64[0] - v21) / v20) * 57.2957795;
    }
    double v136 = 0.0;
    int v135 = -1;
    *(void *)&v119[12] = 0;
    *(void *)&v119[4] = 0;
    *(_OWORD *)&v119[20] = xmmword_101D1C320;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&v119[36] = _Q0;
    long long v120 = _Q0;
    long long v121 = _Q0;
    *(_DWORD *)v119 = 0xFFFF;
    int v122 = 0;
    uint64_t v124 = 0;
    uint64_t v125 = 0;
    unint64_t v123 = 0xBFF0000000000000;
    unint64_t v127 = 0xBFF0000000000000;
    int v126 = 0;
    int v128 = 0x7FFFFFFF;
    uint64_t v130 = 0;
    uint64_t v131 = 0;
    uint64_t v129 = 0;
    char v132 = 0;
    *(void *)&double v44 = sub_1000DBC34(&v133).n128_u64[0];
    *(double *)&v119[4] = v40;
    *(double *)&v119[12] = *(double *)&v12 * 57.2957795;
    *((double *)&v121 + 1) = Current;
    if (*(unsigned char *)(a2 + 1344))
    {
      double v44 = *(double *)(a2 + 1352);
      *(double *)&v119[44] = v44;
    }
    int v152 = 0;
    __int16 v45 = *(void **)(a1 + 224);
    if (v45 && objc_msgSend(v45, "syncgetAltitude:rel:undulation:", v119, &v152, &v136, v44))
    {
      sub_1001B1A40(*(void *)(a1 + 4552), 2, v136, Current);
      sub_1001862F4(*(void *)(a1 + 4552), &v136, &v135, Current);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      id v46 = qword_102419408;
      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)stat buf = 134283777;
        *(double *)&uint8_t buf[4] = v136;
        *(_WORD *)&unsigned char buf[12] = 1026;
        *(_DWORD *)&buf[14] = v135;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "Raven: DEM,EGM08,undulation,%{private}.2lf,undulationModel,%{public}d", buf, 0x12u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_116;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419400 == -1) {
        goto LABEL_240;
      }
    }
    else
    {
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      uint64_t v47 = qword_102419408;
      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)stat buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_INFO, "Raven: DEM unavailable. Using DMA instead.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        *(_WORD *)v158 = 0;
        v92 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRavenController::ConvertRavenSolutionToClientLocation(const raven::RavenSolutionEvent &, CLLocationProvider_Type::NotificationData &) const", "%s\n", v92);
        if (v92 != buf) {
          free(v92);
        }
      }
      *(_DWORD *)v148 = 0;
      if (!sub_10014933C((float *)v148, v40, v41))
      {
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        uint64_t v51 = qword_102419408;
        if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)stat buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_INFO, "Raven: Conversion to client location failed in computing undulation.", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419400 != -1) {
            dispatch_once(&qword_102419400, &stru_1022F1A68);
          }
          *(_WORD *)v158 = 0;
          __int16 v93 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRavenController::ConvertRavenSolutionToClientLocation(const raven::RavenSolutionEvent &, CLLocationProvider_Type::NotificationData &) const", "%s\n", v93);
          if (v93 != buf) {
            free(v93);
          }
        }
        int v50 = 0;
        double v49 = -1.0;
LABEL_123:
        if (v134) {
          sub_1000DB0A0(v134);
        }
        if (!v50) {
          goto LABEL_17;
        }
        double v103 = -1.0;
        double v100 = v40;
        if (*(unsigned char *)(a2 + 1344))
        {
          double v101 = sqrt(*(double *)(a2 + 1384));
          double v102 = *(double *)(a2 + 1352);
          if (*(unsigned char *)(a2 + 1345))
          {
            long long v117 = *(_OWORD *)(a2 + 1360);
            uint64_t v118 = *(void *)(a2 + 1376);
            uint64_t v164 = 0x300000003;
            long long v163 = xmmword_101D71150;
            *(double *)&v162 = COERCE_DOUBLE(off_1022DC578);
            v165 = &v166;
            *(void *)&v119[24] = 0x400000004;
            *(_OWORD *)&v119[8] = xmmword_101D8AFF0;
            *(void *)v119 = off_1022F1B68;
            *(void *)&v119[32] = &v119[40];
            BOOL v52 = sub_100CE97FC((uint64_t)&v137, (double *)&v117, &v114);
            BOOL v53 = v138 && v52;
            double v103 = -1.0;
            if (v53)
            {
              sub_100063168((uint64_t)&v162, (uint64_t)&v139);
              if (sub_100CE9934(a2 + 1168, v119))
              {
                double v98 = v115;
                double v99 = v114;
                double v54 = sqrt(v98 * v98 + v99 * v99);
                double v55 = -1.0;
                if (v54 != INFINITY)
                {
                  double v56 = v54;
                  if (fabs(v54) > 0.0000001 && fabs(v116) <= 0.866025404)
                  {
                    double v104 = v49;
                    double v108 = v42;
                    sub_100CE9B74(1, 3, (uint64_t)buf);
                    sub_100CE9B18((uint64_t)buf, v113);
                    sub_100CE9BF8(4u, 4u, v158);
                    *(void *)sub_10004DF44((uint64_t)v158, 0, 0) = 0x3FF0000000000000;
                    sub_100CF1BFC((uint64_t)buf, (uint64_t)v158, (uint64_t)v113, (uint64_t)v113);
                    sub_100CE9CD0((uint64_t)buf, (uint64_t)&v162);
                    sub_100CE9E0C((uint64_t)v158, (uint64_t)v119, (uint64_t)buf);
                    sub_100CE9E8C((uint64_t)v158, v148);
                    sub_100CE9E0C((uint64_t)buf, (uint64_t)v148, (uint64_t)&v152);
                    double v57 = 1.0 / v56;
                    double v58 = *(double *)(a2 + 1352);
                    double v59 = v56 * v58;
                    double v60 = fabs(v56 * v58);
                    if (COERCE__INT64(v56 * v58) > -1
                      && (unint64_t)(*(void *)&v60 - 0x10000000000000) >> 53 < 0x3FF
                      || (unint64_t)(COERCE__INT64(v56 * v58) - 1) < 0xFFFFFFFFFFFFFLL
                      || *(void *)&v60 == 0)
                    {
                      uint64_t v149 = 0x400000001;
                      *(_OWORD *)&v148[8] = xmmword_101D8B000;
                      *(void *)v148 = off_1022F1D80;
                      v150 = &v151;
                      *(double *)sub_10004DF44((uint64_t)v148, 0, 0) = v56;
                      *(double *)sub_10004DF44((uint64_t)v148, 0, 1) = v57 * (v99 * v58);
                      *(double *)sub_10004DF44((uint64_t)v148, 0, 2) = v57 * (v98 * v58);
                      *(void *)sub_10004DF44((uint64_t)v148, 0, 3) = 0;
                      sub_100CE9F64((uint64_t)v148, (uint64_t)&v152, (uint64_t)buf);
                      sub_100CE9FE8((uint64_t)v148, &v146);
                      sub_100CE9EE8((uint64_t)buf, (uint64_t)&v146, (uint64_t)v110);
                      if (v111 != 1) {
                        __assert_rtn("operator double", "cnmatrixbase.h", 979, "num_elements_ == 1");
                      }
                      double v64 = *v112;
                      if ((*(void *)v112 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v64 <= 0.0)
                      {
                        if (qword_102419400 != -1) {
                          dispatch_once(&qword_102419400, &stru_1022F1A68);
                        }
                        uint64_t v65 = qword_102419408;
                        if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)stat buf = 134349056;
                          *(double *)&uint8_t buf[4] = v64;
                          _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "Raven: using simplified speed uncertainty formulation,speedVar,%{public}.2lf", buf, 0xCu);
                        }
                        if (sub_10013D1A0(115, 2))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_102419400 != -1) {
                            dispatch_once(&qword_102419400, &stru_1022F1A68);
                          }
                          int v146 = 134349056;
                          double v147 = v64;
                          v96 = (char *)_os_log_send_and_compose_impl();
                          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRavenController::ConvertRavenSolutionToClientLocation(const raven::RavenSolutionEvent &, CLLocationProvider_Type::NotificationData &) const", "%s\n", v96);
                          if (v96 != buf) {
                            free(v96);
                          }
                        }
                        double v64 = v56 * (v56 * *(double *)sub_10004DF44((uint64_t)&v152, 0, 0));
                      }
                      if ((*(uint64_t *)&v64 <= -1
                         || ((*(void *)&v64 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
                        && (unint64_t)(*(void *)&v64 - 1) >= 0xFFFFFFFFFFFFFLL)
                      {
                        if (qword_102419400 != -1) {
                          dispatch_once(&qword_102419400, &stru_1022F1A68);
                        }
                        uint64_t v88 = qword_102419408;
                        if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)stat buf = 134349056;
                          *(double *)&uint8_t buf[4] = v64;
                          _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_ERROR, "Raven: client speed uncertainty invalid,speedVar,%{public}.2lf", buf, 0xCu);
                        }
                        if (sub_10013D1A0(115, 0))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_102419400 != -1) {
                            dispatch_once(&qword_102419400, &stru_1022F1A68);
                          }
                          int v146 = 134349056;
                          double v147 = v64;
                          long long v97 = (char *)_os_log_send_and_compose_impl();
                          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLRavenController::ConvertRavenSolutionToClientLocation(const raven::RavenSolutionEvent &, CLLocationProvider_Type::NotificationData &) const", "%s\n", v97);
                          if (v97 != buf) {
                            free(v97);
                          }
                        }
                        double v68 = -1.0;
                        double v102 = -1.0;
                      }
                      else
                      {
                        double v102 = v59;
                        double v68 = sqrt(v64);
                      }
                    }
                    else
                    {
                      if (qword_102419400 != -1) {
                        dispatch_once(&qword_102419400, &stru_1022F1A68);
                      }
                      v85 = qword_102419408;
                      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)stat buf = 134283521;
                        *(double *)&uint8_t buf[4] = v56 * v58;
                        _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_ERROR, "Raven: client speed invalid,speed,%{private}.2lf", buf, 0xCu);
                      }
                      BOOL v86 = sub_10013D1A0(115, 0);
                      double v68 = -1.0;
                      double v102 = -1.0;
                      if (v86)
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_102419400 != -1) {
                          dispatch_once(&qword_102419400, &stru_1022F1A68);
                        }
                        *(_DWORD *)v148 = 134283521;
                        *(double *)&v148[4] = v56 * v58;
                        v87 = (char *)_os_log_send_and_compose_impl();
                        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLRavenController::ConvertRavenSolutionToClientLocation(const raven::RavenSolutionEvent &, CLLocationProvider_Type::NotificationData &) const", "%s\n", v87);
                        if (v87 != buf) {
                          free(v87);
                        }
                        double v68 = -1.0;
                      }
                    }
                    double v101 = v68;
                    double v89 = atan2(v114, v115) * 57.2957795;
                    if (v89 >= 0.0) {
                      double v90 = v89;
                    }
                    else {
                      double v90 = v89 + 360.0;
                    }
                    double v103 = -1.0;
                    if ((*(void *)&v90 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
                      goto LABEL_229;
                    }
                    uint64_t v168 = 0x400000001;
                    *(_OWORD *)&uint8_t buf[8] = xmmword_101D8B000;
                    *(void *)stat buf = off_1022F1D80;
                    v169 = &v170;
                    *(void *)sub_10004DF44((uint64_t)buf, 0, 0) = 0;
                    *(double *)sub_10004DF44((uint64_t)buf, 0, 1) = v98 * v57;
                    *(double *)sub_10004DF44((uint64_t)buf, 0, 2) = -(v99 * v57);
                    *(void *)sub_10004DF44((uint64_t)buf, 0, 3) = 0;
                    sub_100CE9F64((uint64_t)buf, (uint64_t)&v152, (uint64_t)v148);
                    sub_100CE9FE8((uint64_t)buf, &v146);
                    sub_100CE9EE8((uint64_t)v148, (uint64_t)&v146, (uint64_t)v110);
                    if (v111 != 1) {
                      __assert_rtn("operator double", "cnmatrixbase.h", 979, "num_elements_ == 1");
                    }
                    double v91 = *v112;
                    if ((*(void *)v112 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v91 <= 0.0)
                    {
LABEL_229:
                      double v55 = -1.0;
                    }
                    else
                    {
                      double v55 = fmin(sqrt(v91) * 57.2957795, 180.0);
                      double v103 = v90;
                    }
                    double v41 = *(double *)&v12 * 57.2957795;
                    double v42 = v108;
                    double v49 = v104;
                  }
                }
                goto LABEL_166;
              }
            }
          }
        }
        else
        {
          double v101 = -1.0;
          double v102 = -1.0;
        }
        double v55 = -1.0;
LABEL_166:
        int v69 = vcvtmd_s64_f64(*(double *)(a2 + 216) * 100.0);
        if (v69 >= 95) {
          int v70 = 95;
        }
        else {
          int v70 = v69;
        }
        if (*(unsigned char *)(a2 + 1184))
        {
          uint64_t v71 = *(void *)(a2 + 1192);
          double v72 = *(double *)(a2 + 1200);
          *(void *)v119 = *(void *)(a3 + 192);
          *(double *)stat buf = *(double *)(a2 + 1176) + (double)*(uint64_t *)(a2 + 1168);
          BOOL v8 = sub_100B01594(a1 + 4480, (double *)buf, (double *)v119);
          if (v8)
          {
            double v109 = v42;
            uint64_t v73 = *(void *)(a2 + 1168);
            double v105 = *(double *)(a2 + 1176);
            unsigned int v74 = *(unsigned __int8 *)(a2 + 2400);
            if (v74 >= 3)
            {
              if (qword_102419400 != -1) {
                dispatch_once(&qword_102419400, &stru_1022F1A68);
              }
              v75 = qword_102419408;
              if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)stat buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_ERROR, "Raven: Received unhandled position context state type", buf, 2u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419400 != -1) {
                  dispatch_once(&qword_102419400, &stru_1022F1A68);
                }
                *(_WORD *)v158 = 0;
                v95 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLRavenController::ConvertRavenSolutionToClientLocation(const raven::RavenSolutionEvent &, CLLocationProvider_Type::NotificationData &) const", "%s\n", v95);
                if (v95 != buf) {
                  free(v95);
                }
              }
              LOBYTE(v74) = 0;
            }
            uint64_t v76 = *(void *)(a2 + 2408);
            uint64_t v77 = *(void *)(a2 + 2416);
            *(_DWORD *)a3 = 0xFFFF;
            *(double *)(a3 + 4) = v100;
            *(double *)(a3 + 12) = v41;
            *(double *)(a3 + 20) = v14;
            *(double *)(a3 + 28) = v49;
            *(double *)(a3 + 36) = v106;
            *(double *)(a3 + 44) = v102;
            *(double *)(a3 + 52) = v101;
            *(double *)(a3 + 60) = v103;
            *(double *)(a3 + 68) = v55;
            *(double *)(a3 + 76) = Current;
            *(_DWORD *)(a3 + 84) = v70 & ~(v70 >> 31);
            *(void *)(a3 + 88) = 0x4024000000000000;
            *(_DWORD *)(a3 + 96) = 1;
            *(double *)(a3 + 100) = v100;
            *(double *)(a3 + 108) = v41;
            *(double *)(a3 + 116) = v103;
            *(void *)(a3 + 128) = 0x100000032;
            *(_DWORD *)(a3 + 136) = 1;
            uint64_t v78 = *(void *)v119;
            *(double *)(a3 + 184) = v72 + (double)v71;
            *(void *)(a3 + 192) = v78;
            *(float32x2_t *)(a3 + 200) = vcvt_f32_f64(vmulq_f64(vsqrtq_f64(v107), (float64x2_t)vdupq_n_s64(0x400394FC4A554B4FuLL)));
            float v79 = v109;
            *(float *)(a3 + 208) = v79;
            *(_DWORD *)(a3 + 472) = v135;
            float v80 = v136;
            *(float *)(a3 + 476) = v80;
            *(double *)(a3 + 504) = v105 + (double)v73;
            *(unsigned char *)(a3 + 736) = v74;
            *(void *)(a3 + 744) = v76;
            *(void *)(a3 + 752) = v77;
            *(unsigned char *)(a3 + 796) = 1;
          }
          else
          {
            if (qword_102419400 != -1) {
              dispatch_once(&qword_102419400, &stru_1022F1A68);
            }
            v82 = qword_102419408;
            if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)stat buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_INFO, "Raven: Conversion to client location failed in mach time conversion.", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419400 != -1) {
                dispatch_once(&qword_102419400, &stru_1022F1A68);
              }
              *(_WORD *)v158 = 0;
              v83 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRavenController::ConvertRavenSolutionToClientLocation(const raven::RavenSolutionEvent &, CLLocationProvider_Type::NotificationData &) const", "%s\n", v83);
              if (v83 != buf) {
                free(v83);
              }
            }
          }
          goto LABEL_18;
        }
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        int v81 = qword_102419408;
        if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)stat buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_INFO, "Raven: Conversion to client location failed: iOS time not valid", buf, 2u);
        }
        if (!sub_10013D1A0(115, 2))
        {
LABEL_17:
          BOOL v8 = 0;
LABEL_18:
          cnnavigation::ECEFToENUJacobian::~ECEFToENUJacobian((cnnavigation::ECEFToENUJacobian *)&v137);
          return v8;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        *(_WORD *)v119 = 0;
        uint64_t v35 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRavenController::ConvertRavenSolutionToClientLocation(const raven::RavenSolutionEvent &, CLLocationProvider_Type::NotificationData &) const", "%s\n", v35);
LABEL_199:
        if (v35 != buf) {
          free(v35);
        }
        goto LABEL_17;
      }
      double v136 = *(float *)v148;
      sub_1001B1A40(*(void *)(a1 + 4552), 1, *(float *)v148, Current);
      sub_1001862F4(*(void *)(a1 + 4552), &v136, &v135, Current);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      __int16 v48 = qword_102419408;
      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)stat buf = 134283777;
        *(double *)&uint8_t buf[4] = v136;
        *(_WORD *)&unsigned char buf[12] = 1026;
        *(_DWORD *)&buf[14] = v135;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "Raven: DEM,DMA,undulation,%{private}.2lf,undulationModel,%{public}d", buf, 0x12u);
      }
      if (!sub_10013D1A0(115, 2))
      {
LABEL_116:
        double v49 = *((double *)&v12 + 1) - v136;
        int v50 = 1;
        goto LABEL_123;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419400 == -1)
      {
LABEL_240:
        *(_DWORD *)v158 = 134283777;
        *(double *)&v158[4] = v136;
        *(_WORD *)&v158[12] = 1026;
        *(_DWORD *)&v158[14] = v135;
        std::string v94 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRavenController::ConvertRavenSolutionToClientLocation(const raven::RavenSolutionEvent &, CLLocationProvider_Type::NotificationData &) const", "%s\n", v94);
        if (v94 != buf) {
          free(v94);
        }
        goto LABEL_116;
      }
    }
    dispatch_once(&qword_102419400, &stru_1022F1A68);
    goto LABEL_240;
  }
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  int v7 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)stat buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Raven: Conversion to client location failed due to invalid user position.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    *(_WORD *)v119 = 0;
    v84 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRavenController::ConvertRavenSolutionToClientLocation(const raven::RavenSolutionEvent &, CLLocationProvider_Type::NotificationData &) const", "%s\n", v84);
    if (v84 != buf) {
      free(v84);
    }
  }
  return 0;
}

void sub_100CE94BC(_Unwind_Exception *a1)
{
}

BOOL sub_100CE95C4(uint64_t a1, _DWORD *a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 96);
  if (*(unsigned char *)(a1 + 96))
  {
    sub_100062B3C(a2, 3, 3);
    uint64_t v5 = *(void *)(a1 + 128);
    *(void *)sub_10004DF44((uint64_t)a2, 0, 0) = v5;
    uint64_t v6 = *(void *)(a1 + 136);
    *(void *)sub_10004DF44((uint64_t)a2, 0, 1) = v6;
    uint64_t v7 = *(void *)(a1 + 144);
    *(void *)sub_10004DF44((uint64_t)a2, 0, 2) = v7;
    uint64_t v8 = *(void *)(a1 + 136);
    *(void *)sub_10004DF44((uint64_t)a2, 1, 0) = v8;
    uint64_t v9 = *(void *)(a1 + 152);
    *(void *)sub_10004DF44((uint64_t)a2, 1, 1) = v9;
    uint64_t v10 = *(void *)(a1 + 160);
    *(void *)sub_10004DF44((uint64_t)a2, 1, 2) = v10;
    uint64_t v11 = *(void *)(a1 + 144);
    *(void *)sub_10004DF44((uint64_t)a2, 2, 0) = v11;
    uint64_t v12 = *(void *)(a1 + 160);
    *(void *)sub_10004DF44((uint64_t)a2, 2, 1) = v12;
    uint64_t v13 = *(void *)(a1 + 168);
    *(void *)sub_10004DF44((uint64_t)a2, 2, 2) = v13;
  }
  return v2 != 0;
}

BOOL sub_100CE96F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 8);
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v6 = a1 + 16;
    uint64_t v11 = 0x300000003;
    uint64_t v9 = off_1022DC578;
    long long v10 = xmmword_101D71150;
    uint64_t v12 = &v13;
    sub_1001881E8(a1 + 16, a2, (uint64_t)&v9);
    sub_100CEFC74((uint64_t)v8, *(_DWORD *)(a1 + 28), *(_DWORD *)(a1 + 24));
    sub_100ACB2A4(v6, v8);
    uint64_t v16 = 0x300000003;
    double v14 = off_1022DC578;
    long long v15 = xmmword_101D71150;
    int v17 = &v18;
    sub_1001881E8((uint64_t)&v9, (uint64_t)v8, (uint64_t)&v14);
    sub_100063168(a3, (uint64_t)&v14);
  }
  return v3 != 0;
}

BOOL sub_100CE97FC(uint64_t a1, double *a2, double *a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 8);
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v6 = a1 + 16;
    double v7 = sub_1001733F4(a1 + 16, 0, 0);
    double v8 = *a2;
    double v9 = sub_1001733F4(v6, 0, 1) * a2[1] + v7 * v8;
    *a3 = v9 + sub_1001733F4(v6, 0, 2) * a2[2];
    double v10 = sub_1001733F4(v6, 1, 0);
    double v11 = *a2;
    double v12 = sub_1001733F4(v6, 1, 1) * a2[1] + v10 * v11;
    a3[1] = v12 + sub_1001733F4(v6, 1, 2) * a2[2];
    double v13 = sub_1001733F4(v6, 2, 0);
    double v14 = *a2;
    double v15 = sub_1001733F4(v6, 2, 1) * a2[1] + v13 * v14;
    a3[2] = v15 + sub_1001733F4(v6, 2, 2) * a2[2];
  }
  return v3 != 0;
}

uint64_t sub_100CE9934(uint64_t a1, _DWORD *a2)
{
  if (!*(unsigned char *)(a1 + 176) || !*(unsigned char *)(a1 + 177)) {
    return 0;
  }
  sub_100062B3C(a2, 4, 4);
  uint64_t v4 = *(void *)(a1 + 216);
  *(void *)sub_10004DF44((uint64_t)a2, 0, 0) = v4;
  uint64_t v5 = *(void *)(a1 + 224);
  uint64_t v6 = 1;
  *(void *)sub_10004DF44((uint64_t)a2, 0, 1) = v5;
  uint64_t v7 = *(void *)(a1 + 232);
  *(void *)sub_10004DF44((uint64_t)a2, 0, 2) = v7;
  uint64_t v8 = *(void *)(a1 + 240);
  *(void *)sub_10004DF44((uint64_t)a2, 0, 3) = v8;
  uint64_t v9 = *(void *)(a1 + 224);
  *(void *)sub_10004DF44((uint64_t)a2, 1, 0) = v9;
  uint64_t v10 = *(void *)(a1 + 248);
  *(void *)sub_10004DF44((uint64_t)a2, 1, 1) = v10;
  uint64_t v11 = *(void *)(a1 + 256);
  *(void *)sub_10004DF44((uint64_t)a2, 1, 2) = v11;
  uint64_t v12 = *(void *)(a1 + 264);
  *(void *)sub_10004DF44((uint64_t)a2, 1, 3) = v12;
  uint64_t v13 = *(void *)(a1 + 232);
  *(void *)sub_10004DF44((uint64_t)a2, 2, 0) = v13;
  uint64_t v14 = *(void *)(a1 + 256);
  *(void *)sub_10004DF44((uint64_t)a2, 2, 1) = v14;
  uint64_t v15 = *(void *)(a1 + 272);
  *(void *)sub_10004DF44((uint64_t)a2, 2, 2) = v15;
  uint64_t v16 = *(void *)(a1 + 280);
  *(void *)sub_10004DF44((uint64_t)a2, 2, 3) = v16;
  uint64_t v17 = *(void *)(a1 + 240);
  *(void *)sub_10004DF44((uint64_t)a2, 3, 0) = v17;
  uint64_t v18 = *(void *)(a1 + 264);
  *(void *)sub_10004DF44((uint64_t)a2, 3, 1) = v18;
  uint64_t v19 = *(void *)(a1 + 280);
  *(void *)sub_10004DF44((uint64_t)a2, 3, 2) = v19;
  uint64_t v20 = *(void *)(a1 + 288);
  *(void *)sub_10004DF44((uint64_t)a2, 3, 3) = v20;
  return v6;
}

_DWORD *sub_100CE9B18@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_100CF0090(a1, a2);
}

void sub_100CE9B54(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_1022DC6A8;
  _Unwind_Resume(a1);
}

_DWORD *sub_100CE9B74@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = 0x300000001;
  *(void *)a3 = off_1022F1BB0;
  *(_OWORD *)(a3 + 8) = xmmword_101D71140;
  *(void *)(a3 + 32) = a3 + 40;
  return sub_100CEFFA0(a1, a2, (_DWORD *)a3);
}

void sub_100CE9BD8(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_1022DC6A8;
  _Unwind_Resume(a1);
}

uint64_t sub_100CE9BF8@<X0>(unsigned int a1@<W0>, unsigned int a2@<W1>, _DWORD *a3@<X8>)
{
  if ((a1 & 0x80000000) != 0) {
    sub_101A8A450();
  }
  if ((a2 & 0x80000000) != 0) {
    sub_101A8A47C();
  }
  sub_100CF1ACC((uint64_t)a3, a1, a2);
  if (a3[6] < a1)
  {
    uint64_t v7 = "nr <= Z.MaxNumRows()";
    int v8 = 3363;
    goto LABEL_10;
  }
  if (a3[7] < a2)
  {
    uint64_t v7 = "nc <= Z.MaxNumCols()";
    int v8 = 3364;
LABEL_10:
    __assert_rtn("Zeros", "cnmatrixbase.h", v8, v7);
  }
  sub_100062B3C(a3, a1, a2);
  return sub_100CF1B94((uint64_t)a3, 0.0);
}

void sub_100CE9CB0(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_1022CAFC0;
  _Unwind_Resume(a1);
}

uint64_t sub_100CE9CD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != *(_DWORD *)(a2 + 8)) {
    sub_101A7DBDC();
  }
  uint64_t v5 = *(unsigned int *)(a1 + 12);
  if (v5 != *(_DWORD *)(a2 + 12)) {
    sub_101A7DBB0();
  }
  if (v5)
  {
    int v6 = 0;
    for (uint64_t i = 0; i != v5; ++i)
    {
      if (v2)
      {
        for (uint64_t j = 0; j != v2; ++j)
        {
          uint64_t v9 = *(void *)(*(void *)(a2 + 32) + 8 * (v6 + j));
          *(void *)sub_100AC99CC(*(void *)(a1 + 112), *(_DWORD *)(*(void *)(a1 + 152) + 4 * j), *(_DWORD *)(*(void *)(a1 + 208) + 4 * i)) = v9;
          *(void *)sub_10004DF44(a1, j, i) = v9;
        }
      }
      v6 += v2;
    }
  }
  return a1;
}

void *sub_100CE9DAC(void *result)
{
  result[22] = off_1022DC6A8;
  result[15] = off_1022DC6A8;
  *double result = off_1022CAFC0;
  return result;
}

void sub_100CE9E0C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = 0x400000004;
  *(void *)a3 = off_1022F1B68;
  *(_OWORD *)(a3 + 8) = xmmword_101D8AFF0;
  *(void *)(a3 + 32) = a3 + 40;
  sub_1001881E8(a1, a2, a3);
}

void sub_100CE9E6C(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_1022CAFC0;
  _Unwind_Resume(a1);
}

double *sub_100CE9E8C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_100ACB2A4(a1, a2);
}

void sub_100CE9EC8(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_1022CAFC0;
  _Unwind_Resume(a1);
}

__n128 sub_100CE9EE8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = 0x100000001;
  *(void *)a3 = off_1022DC840;
  *(void *)&long long v3 = 0x100000001;
  *((void *)&v3 + 1) = 0x100000001;
  *(_OWORD *)(a3 + 8) = v3;
  *(void *)(a3 + 32) = a3 + 40;
  sub_1001881E8(a1, a2, a3);
  return result;
}

void sub_100CE9F44(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_1022CAFC0;
  _Unwind_Resume(a1);
}

void sub_100CE9F64(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = 0x400000001;
  *(void *)a3 = off_1022F1D80;
  *(_OWORD *)(a3 + 8) = xmmword_101D8B000;
  *(void *)(a3 + 32) = a3 + 40;
  sub_1001881E8(a1, a2, a3);
}

void sub_100CE9FC8(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_1022CAFC0;
  _Unwind_Resume(a1);
}

double *sub_100CE9FE8@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_100ACB2A4(a1, a2);
}

void sub_100CEA024(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_1022CAFC0;
  _Unwind_Resume(a1);
}

void sub_100CEA044(uint64_t a1, int a2)
{
  double v4 = sub_10016C458();
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  uint64_t v5 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    double v6 = (v4 - *(double *)(a1 + 32)) * 1000.0;
    *(_DWORD *)stat buf = 67240448;
    int v11 = a2;
    __int16 v12 = 2050;
    double v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLGLS,Raven,CLRavenController,Reset,pauseResetAndFreeRavenSupervisorWithCompletion,success,%{public}d,time,%{public}.1lfms", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::Reset()_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if ((a2 & 1) == 0)
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v7 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "CLGLS,Raven,Failed to pause, reset, and free raven supervisor", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLRavenController::Reset()_block_invoke", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
}

void sub_100CEA370(uint64_t a1, unsigned int a2, double a3, double a4)
{
  if (a2 <= 1)
  {
    uint64_t v5 = a1 + 32 * a2;
    ++*(_DWORD *)v5;
    double v6 = *(double *)(v5 + 16);
    if (v6 >= a4) {
      double v6 = a4;
    }
    *(double *)(v5 + 8) = *(double *)(v5 + 8) + a4;
    *(double *)(v5 + 16) = v6;
    if (*(double *)(v5 + 24) > a4) {
      a4 = *(double *)(v5 + 24);
    }
    *(double *)(v5 + 24) = a4;
    if (a3 - *(double *)(a1 + 64) > 30.0)
    {
      uint64_t v7 = 0;
      char v8 = 1;
      *(double *)(a1 + 64) = a3;
      uint64_t v9 = "unk";
      do
      {
        char v10 = v8;
        if (v8) {
          int v11 = "accel";
        }
        else {
          int v11 = v9;
        }
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        __int16 v12 = (int *)(a1 + 32 * v7);
        double v13 = qword_102419408;
        if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_INFO))
        {
          int v14 = *v12;
          uint64_t v15 = (double *)(a1 + 32 * v7);
          if (*v12) {
            double v16 = v15[1] * 1000.0 / (double)v14;
          }
          else {
            double v16 = 0.0;
          }
          double v17 = v15[2] * 1000.0;
          double v18 = v15[3] * 1000.0;
          *(_DWORD *)stat buf = 136447234;
          double v22 = v11;
          __int16 v23 = 1026;
          int v24 = v14;
          __int16 v25 = 2050;
          double v26 = v17;
          __int16 v27 = 2050;
          double v28 = v16;
          __int16 v29 = 2050;
          double v30 = v18;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "IfcTelem,%{public}s,count,%{public}d,minAgeMs,%{public}.1f,meanAgeMs,%{public}.1f,maxAgeMs,%{public}.1f", buf, 0x30u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419400 != -1) {
            dispatch_once(&qword_102419400, &stru_1022F1A68);
          }
          uint64_t v20 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::InterfaceTelemeter::tick(CLRavenController::InterfaceTelemeter::MessageType, double, double)", "%s\n", v20);
          if (v20 != (char *)buf) {
            free(v20);
          }
        }
        char v8 = 0;
        *__int16 v12 = 0;
        uint64_t v19 = a1 + 32 * v7;
        *(_OWORD *)(v19 + 8) = xmmword_101D2A460;
        *(void *)(v19 + 24) = 0xBFF0000000000000;
        uint64_t v9 = "gyro";
        uint64_t v7 = 1;
      }
      while ((v10 & 1) != 0);
    }
  }
}

std::string *sub_100CEA6B4(uint64_t a1, uint64_t *a2, unsigned __int16 *a3, uint64_t a4)
{
  *(_DWORD *)(a4 + 52) |= 2u;
  uint64_t v6 = *(void *)(a4 + 40);
  if (!v6) {
    operator new();
  }
  *(_DWORD *)(v6 + 492) |= 0x10u;
  uint64_t v7 = *(void *)(v6 + 296);
  if (!v7) {
    operator new();
  }
  *(_DWORD *)(v7 + 28) |= 2u;
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8) {
    operator new();
  }
  sub_100CE6FC4((uint64_t)a2, a4);
  *(_DWORD *)(v8 + 52) |= 1u;
  uint64_t v9 = *(void *)(v8 + 8);
  if (!v9) {
    operator new();
  }
  if (!sub_101460F00(a2, v9))
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    char v10 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Error: Failed to convert raven platform info receipt time to protobuf", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      __int16 v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::SerializeRavenPlatformInfo(const CLUtils::Timestamp &, const raven::RavenPlatformInfo &, CLP::LogEntry::LogEntry &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  return sub_1014674FC(a3, v8);
}

void sub_100CEA958()
{
}

BOOL sub_100CEA9C8(uint64_t a1)
{
  return *(unsigned char *)(a1 + 4663)
      && (*(unsigned char *)(a1 + 4664) || *(void *)(a1 + 312))
      && *(void *)(a1 + 4736) != a1 + 4688;
}

uint64_t sub_100CEAA08(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v4 = v3;
  uint64_t v5 = (_OWORD *)(v3 + 680);
  uint64_t v6 = v1 + 4663;
  if (*(unsigned char *)(v1 + 4663))
  {
    uint64_t v7 = v2;
    uint64_t v8 = v1;
    if ((*(unsigned char *)(v1 + 4664) || *(void *)(v1 + 312)) && *(void *)(v1 + 4736) != v1 + 4688)
    {
      sub_100CEE5A0((uint64_t)v187);
      if (*(unsigned char *)(v6 + 1))
      {
        if (!sub_100CEBC78(v8, (uint64_t)v187, 0, 0))
        {
          if (qword_102419400 != -1) {
            dispatch_once(&qword_102419400, &stru_1022F1A68);
          }
          uint64_t v9 = qword_102419408;
          if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)stat buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "CLGAS,Raven,GetRavenSolutionFromService,could not retrieve latest Raven solution", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419400 != -1) {
              dispatch_once(&qword_102419400, &stru_1022F1A68);
            }
            long long v120 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRavenController::GetLocation(CLLocationProvider_Type::NotificationData &, const GNSS::DaemonLocation &) const", "%s\n", v120);
            if (v120 != buf) {
              free(v120);
            }
          }
          sub_1000DB3D4((uint64_t)buf);
          long long v10 = v129;
          *(_OWORD *)(v4 + 96) = v128;
          *(_OWORD *)(v4 + 112) = v10;
          *(_OWORD *)(v4 + 128) = v130[0];
          *(_OWORD *)(v4 + 140) = *(_OWORD *)((char *)v130 + 12);
          long long v11 = v125;
          *(_OWORD *)(v4 + 32) = v124;
          *(_OWORD *)(v4 + 48) = v11;
          long long v12 = v127;
          *(_OWORD *)(v4 + 64) = v126;
          *(_OWORD *)(v4 + 80) = v12;
          long long v13 = *(_OWORD *)&buf[16];
          *(_OWORD *)uint64_t v4 = *(_OWORD *)buf;
          *(_OWORD *)(v4 + 16) = v13;
          memcpy((void *)(v4 + 160), v131, 0x201uLL);
          long long v14 = v132;
          long long v132 = 0uLL;
          uint64_t v15 = *(std::__shared_weak_count **)(v4 + 688);
          _OWORD *v5 = v14;
          if (v15) {
            sub_1000DB0A0(v15);
          }
          long long v16 = *(_OWORD *)v138;
          *(_OWORD *)(v4 + 760) = v137;
          *(_OWORD *)(v4 + 776) = v16;
          *(void *)(v4 + 789) = *(void *)&v138[13];
          long long v17 = v134;
          *(_OWORD *)(v4 + 696) = v133;
          *(_OWORD *)(v4 + 712) = v17;
          long long v18 = v136;
          *(_OWORD *)(v4 + 728) = v135;
          *(_OWORD *)(v4 + 744) = v18;
          long long v19 = v139;
          long long v139 = 0u;
          uint64_t v20 = *(std::__shared_weak_count **)(v4 + 808);
          *(_OWORD *)(v4 + 800) = v19;
          if (v20) {
            sub_1000DB0A0(v20);
          }
          long long v21 = v143;
          *(_OWORD *)(v4 + 848) = v142;
          *(_OWORD *)(v4 + 864) = v21;
          *(_OWORD *)(v4 + 880) = v144;
          long long v22 = v141;
          *(_OWORD *)(v4 + 816) = v140;
          *(_OWORD *)(v4 + 832) = v22;
          *(void *)(v4 + 896) = v145;
          __int16 v23 = (void **)(v4 + 904);
          if (*(char *)(v4 + 927) < 0) {
            operator delete(*v23);
          }
          *(void *)(v4 + 920) = v147;
          *(_OWORD *)__int16 v23 = v146;
          HIBYTE(v147) = 0;
          LOBYTE(v146) = 0;
          *(_OWORD *)(v4 + 1104) = v159;
          *(_OWORD *)(v4 + 1120) = v160;
          *(_OWORD *)(v4 + 1136) = v161;
          *(void *)(v4 + 1152) = v162;
          *(_OWORD *)(v4 + 1040) = v155;
          *(_OWORD *)(v4 + 1056) = v156;
          *(_OWORD *)(v4 + 1072) = v157;
          *(_OWORD *)(v4 + 1088) = v158;
          long long v24 = v153;
          *(_OWORD *)(v4 + 992) = v152;
          *(_OWORD *)(v4 + 1008) = v24;
          *(_OWORD *)(v4 + 1024) = v154;
          long long v25 = v149;
          *(_OWORD *)(v4 + 928) = v148;
          *(_OWORD *)(v4 + 944) = v25;
          long long v26 = v151;
          *(_OWORD *)(v4 + 960) = v150;
          *(_OWORD *)(v4 + 976) = v26;
          long long v27 = v163;
          long long v163 = 0uLL;
          double v28 = *(std::__shared_weak_count **)(v4 + 1168);
          v5[30] = v27;
          if (v28) {
            sub_1000DB0A0(v28);
          }
          goto LABEL_82;
        }
      }
      else
      {
        std::timed_mutex::lock((std::timed_mutex *)(v8 + 320));
        int RavenSolution = raven::RavenSupervisor::GetRavenSolution(*(raven::RavenSupervisor **)(v8 + 312), (raven::RavenSolutionEvent *)v187);
        std::timed_mutex::unlock((std::timed_mutex *)(v8 + 320));
        if (RavenSolution)
        {
          if (qword_102419400 != -1) {
            dispatch_once(&qword_102419400, &stru_1022F1A68);
          }
          double v56 = qword_102419408;
          if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)stat buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_INFO, "Raven: could not retrieve latest Raven solution", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419400 != -1) {
              dispatch_once(&qword_102419400, &stru_1022F1A68);
            }
            long long v121 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRavenController::GetLocation(CLLocationProvider_Type::NotificationData &, const GNSS::DaemonLocation &) const", "%s\n", v121);
            if (v121 != buf) {
              free(v121);
            }
          }
          sub_1000DB3D4((uint64_t)buf);
          long long v57 = v129;
          *(_OWORD *)(v4 + 96) = v128;
          *(_OWORD *)(v4 + 112) = v57;
          *(_OWORD *)(v4 + 128) = v130[0];
          *(_OWORD *)(v4 + 140) = *(_OWORD *)((char *)v130 + 12);
          long long v58 = v125;
          *(_OWORD *)(v4 + 32) = v124;
          *(_OWORD *)(v4 + 48) = v58;
          long long v59 = v127;
          *(_OWORD *)(v4 + 64) = v126;
          *(_OWORD *)(v4 + 80) = v59;
          long long v60 = *(_OWORD *)&buf[16];
          *(_OWORD *)uint64_t v4 = *(_OWORD *)buf;
          *(_OWORD *)(v4 + 16) = v60;
          memcpy((void *)(v4 + 160), v131, 0x201uLL);
          long long v61 = v132;
          long long v132 = 0uLL;
          uint64_t v62 = *(std::__shared_weak_count **)(v4 + 688);
          _OWORD *v5 = v61;
          if (v62) {
            sub_1000DB0A0(v62);
          }
          long long v63 = *(_OWORD *)v138;
          *(_OWORD *)(v4 + 760) = v137;
          *(_OWORD *)(v4 + 776) = v63;
          *(void *)(v4 + 789) = *(void *)&v138[13];
          long long v64 = v134;
          *(_OWORD *)(v4 + 696) = v133;
          *(_OWORD *)(v4 + 712) = v64;
          long long v65 = v136;
          *(_OWORD *)(v4 + 728) = v135;
          *(_OWORD *)(v4 + 744) = v65;
          long long v66 = v139;
          long long v139 = 0u;
          uint64_t v67 = *(std::__shared_weak_count **)(v4 + 808);
          *(_OWORD *)(v4 + 800) = v66;
          if (v67) {
            sub_1000DB0A0(v67);
          }
          long long v68 = v143;
          *(_OWORD *)(v4 + 848) = v142;
          *(_OWORD *)(v4 + 864) = v68;
          *(_OWORD *)(v4 + 880) = v144;
          long long v69 = v141;
          *(_OWORD *)(v4 + 816) = v140;
          *(_OWORD *)(v4 + 832) = v69;
          *(void *)(v4 + 896) = v145;
          int v70 = (void **)(v4 + 904);
          if (*(char *)(v4 + 927) < 0) {
            operator delete(*v70);
          }
          *(void *)(v4 + 920) = v147;
          *(_OWORD *)int v70 = v146;
          HIBYTE(v147) = 0;
          LOBYTE(v146) = 0;
          *(_OWORD *)(v4 + 1104) = v159;
          *(_OWORD *)(v4 + 1120) = v160;
          *(_OWORD *)(v4 + 1136) = v161;
          *(void *)(v4 + 1152) = v162;
          *(_OWORD *)(v4 + 1040) = v155;
          *(_OWORD *)(v4 + 1056) = v156;
          *(_OWORD *)(v4 + 1072) = v157;
          *(_OWORD *)(v4 + 1088) = v158;
          long long v71 = v153;
          *(_OWORD *)(v4 + 992) = v152;
          *(_OWORD *)(v4 + 1008) = v71;
          *(_OWORD *)(v4 + 1024) = v154;
          long long v72 = v149;
          *(_OWORD *)(v4 + 928) = v148;
          *(_OWORD *)(v4 + 944) = v72;
          long long v73 = v151;
          *(_OWORD *)(v4 + 960) = v150;
          *(_OWORD *)(v4 + 976) = v73;
          long long v74 = v163;
          long long v163 = 0uLL;
          v75 = *(std::__shared_weak_count **)(v4 + 1168);
          v5[30] = v74;
          if (v75) {
            sub_1000DB0A0(v75);
          }
          goto LABEL_82;
        }
      }
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      uint64_t v76 = qword_102419408;
      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)stat buf = 134349568;
        *(double *)&uint8_t buf[4] = *((double *)&v187[73] + 1) + (double)*(uint64_t *)&v187[73];
        *(_WORD *)&unsigned char buf[12] = 1026;
        *(_DWORD *)&buf[14] = BYTE1(v187[13]);
        *(_WORD *)&buf[18] = 1026;
        *(_DWORD *)&buf[20] = LOBYTE(v187[13]);
        _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_INFO, "Raven: obtained latest Raven solution with time %{public}.3lf and health %{public}d from estimator %{public}d", buf, 0x18u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        v119 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRavenController::GetLocation(CLLocationProvider_Type::NotificationData &, const GNSS::DaemonLocation &) const", "%s\n", v119);
        if (v119 != buf) {
          free(v119);
        }
      }
      long long v77 = *(_OWORD *)(v7 + 16);
      *(_OWORD *)uint64_t v4 = *(_OWORD *)v7;
      *(_OWORD *)(v4 + 16) = v77;
      long long v78 = *(_OWORD *)(v7 + 32);
      long long v79 = *(_OWORD *)(v7 + 48);
      long long v80 = *(_OWORD *)(v7 + 80);
      *(_OWORD *)(v4 + 64) = *(_OWORD *)(v7 + 64);
      *(_OWORD *)(v4 + 80) = v80;
      *(_OWORD *)(v4 + 32) = v78;
      *(_OWORD *)(v4 + 48) = v79;
      long long v81 = *(_OWORD *)(v7 + 96);
      long long v82 = *(_OWORD *)(v7 + 112);
      long long v83 = *(_OWORD *)(v7 + 128);
      *(_OWORD *)(v4 + 140) = *(_OWORD *)(v7 + 140);
      *(_OWORD *)(v4 + 112) = v82;
      *(_OWORD *)(v4 + 128) = v83;
      *(_OWORD *)(v4 + 96) = v81;
      memcpy((void *)(v4 + 160), (const void *)(v7 + 160), 0x201uLL);
      uint64_t v84 = *(void *)(v7 + 680);
      uint64_t v85 = *(void *)(v7 + 688);
      if (v85) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v85 + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)(v4 + 680) = v84;
      BOOL v86 = *(std::__shared_weak_count **)(v4 + 688);
      *(void *)(v4 + 688) = v85;
      if (v86) {
        sub_1000DB0A0(v86);
      }
      long long v87 = *(_OWORD *)(v7 + 696);
      long long v88 = *(_OWORD *)(v7 + 728);
      *(_OWORD *)(v4 + 712) = *(_OWORD *)(v7 + 712);
      *(_OWORD *)(v4 + 728) = v88;
      *(_OWORD *)(v4 + 696) = v87;
      long long v89 = *(_OWORD *)(v7 + 744);
      long long v90 = *(_OWORD *)(v7 + 760);
      long long v91 = *(_OWORD *)(v7 + 776);
      *(void *)(v4 + 789) = *(void *)(v7 + 789);
      *(_OWORD *)(v4 + 760) = v90;
      *(_OWORD *)(v4 + 776) = v91;
      *(_OWORD *)(v4 + 744) = v89;
      if (sub_100CE7328(v8, (uint64_t)v187, v4))
      {
        std::mutex::lock((std::mutex *)(v8 + 4400));
        memcpy((void *)(v8 + 448), (char *)v187 + 8, 0x971uLL);
        sub_1000B0168(v8 + 2872, v4);
        std::mutex::unlock((std::mutex *)(v8 + 4400));
        uint64_t v54 = 1;
LABEL_91:
        raven::RavenSolutionEvent::~RavenSolutionEvent((raven::RavenSolutionEvent *)v187);
        return v54;
      }
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      v92 = qword_102419408;
      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)stat buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_INFO, "Raven: could not convert latest Raven solution to client location", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        int v122 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRavenController::GetLocation(CLLocationProvider_Type::NotificationData &, const GNSS::DaemonLocation &) const", "%s\n", v122);
        if (v122 != buf) {
          free(v122);
        }
      }
      sub_1000DB3D4((uint64_t)buf);
      long long v93 = v129;
      *(_OWORD *)(v4 + 96) = v128;
      *(_OWORD *)(v4 + 112) = v93;
      *(_OWORD *)(v4 + 128) = v130[0];
      *(_OWORD *)(v4 + 140) = *(_OWORD *)((char *)v130 + 12);
      long long v94 = v125;
      *(_OWORD *)(v4 + 32) = v124;
      *(_OWORD *)(v4 + 48) = v94;
      long long v95 = v127;
      *(_OWORD *)(v4 + 64) = v126;
      *(_OWORD *)(v4 + 80) = v95;
      long long v96 = *(_OWORD *)&buf[16];
      *(_OWORD *)uint64_t v4 = *(_OWORD *)buf;
      *(_OWORD *)(v4 + 16) = v96;
      memcpy((void *)(v4 + 160), v131, 0x201uLL);
      long long v97 = v132;
      long long v132 = 0uLL;
      double v98 = *(std::__shared_weak_count **)(v4 + 688);
      _OWORD *v5 = v97;
      if (v98) {
        sub_1000DB0A0(v98);
      }
      long long v99 = *(_OWORD *)v138;
      *(_OWORD *)(v4 + 760) = v137;
      *(_OWORD *)(v4 + 776) = v99;
      *(void *)(v4 + 789) = *(void *)&v138[13];
      long long v100 = v134;
      *(_OWORD *)(v4 + 696) = v133;
      *(_OWORD *)(v4 + 712) = v100;
      long long v101 = v136;
      *(_OWORD *)(v4 + 728) = v135;
      *(_OWORD *)(v4 + 744) = v101;
      long long v102 = v139;
      long long v139 = 0u;
      double v103 = *(std::__shared_weak_count **)(v4 + 808);
      *(_OWORD *)(v4 + 800) = v102;
      if (v103) {
        sub_1000DB0A0(v103);
      }
      long long v104 = v143;
      *(_OWORD *)(v4 + 848) = v142;
      *(_OWORD *)(v4 + 864) = v104;
      *(_OWORD *)(v4 + 880) = v144;
      long long v105 = v141;
      *(_OWORD *)(v4 + 816) = v140;
      *(_OWORD *)(v4 + 832) = v105;
      *(void *)(v4 + 896) = v145;
      double v106 = (void **)(v4 + 904);
      if (*(char *)(v4 + 927) < 0) {
        operator delete(*v106);
      }
      *(void *)(v4 + 920) = v147;
      *(_OWORD *)double v106 = v146;
      HIBYTE(v147) = 0;
      LOBYTE(v146) = 0;
      *(_OWORD *)(v4 + 1104) = v159;
      *(_OWORD *)(v4 + 1120) = v160;
      *(_OWORD *)(v4 + 1136) = v161;
      *(void *)(v4 + 1152) = v162;
      *(_OWORD *)(v4 + 1040) = v155;
      *(_OWORD *)(v4 + 1056) = v156;
      *(_OWORD *)(v4 + 1072) = v157;
      *(_OWORD *)(v4 + 1088) = v158;
      long long v107 = v153;
      *(_OWORD *)(v4 + 992) = v152;
      *(_OWORD *)(v4 + 1008) = v107;
      *(_OWORD *)(v4 + 1024) = v154;
      long long v108 = v149;
      *(_OWORD *)(v4 + 928) = v148;
      *(_OWORD *)(v4 + 944) = v108;
      long long v109 = v151;
      *(_OWORD *)(v4 + 960) = v150;
      *(_OWORD *)(v4 + 976) = v109;
      long long v110 = v163;
      long long v163 = 0uLL;
      int v111 = *(std::__shared_weak_count **)(v4 + 1168);
      v5[30] = v110;
      if (v111) {
        sub_1000DB0A0(v111);
      }
LABEL_82:
      long long v112 = v171;
      *(_OWORD *)(v4 + 1272) = v170;
      *(_OWORD *)(v4 + 1288) = v112;
      *(_OWORD *)(v4 + 1304) = v172;
      long long v113 = v167;
      *(_OWORD *)(v4 + 1208) = v166;
      *(_OWORD *)(v4 + 1224) = v113;
      long long v114 = v169;
      *(_OWORD *)(v4 + 1240) = v168;
      *(_OWORD *)(v4 + 1256) = v114;
      long long v115 = v165;
      *(_OWORD *)(v4 + 1176) = v164;
      *(_OWORD *)(v4 + 1192) = v115;
      double v116 = *(void **)(v4 + 1320);
      *(void *)(v4 + 1320) = v173;
      id v173 = 0;

      *(_OWORD *)(v4 + 1472) = v183;
      *(_OWORD *)(v4 + 1488) = v184;
      *(_OWORD *)(v4 + 1504) = v185;
      *(void *)(v4 + 1520) = v186;
      *(_OWORD *)(v4 + 1408) = v179;
      *(_OWORD *)(v4 + 1424) = v180;
      *(_OWORD *)(v4 + 1440) = v181;
      *(_OWORD *)(v4 + 1456) = v182;
      *(_OWORD *)(v4 + 1344) = v175;
      *(_OWORD *)(v4 + 1360) = v176;
      *(_OWORD *)(v4 + 1376) = v177;
      *(_OWORD *)(v4 + 1392) = v178;
      *(_OWORD *)(v4 + 1328) = v174;

      if (*((void *)&v163 + 1)) {
        sub_1000DB0A0(*((std::__shared_weak_count **)&v163 + 1));
      }
      if (SHIBYTE(v147) < 0) {
        operator delete((void *)v146);
      }
      if (*((void *)&v139 + 1)) {
        sub_1000DB0A0(*((std::__shared_weak_count **)&v139 + 1));
      }
      if (*((void *)&v132 + 1)) {
        sub_1000DB0A0(*((std::__shared_weak_count **)&v132 + 1));
      }
      uint64_t v54 = 0;
      goto LABEL_91;
    }
  }
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  __int16 v29 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_INFO))
  {
    LOWORD(v187[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "Raven: location requested when estimator not enabled", (uint8_t *)v187, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(v187, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    *(_WORD *)stat buf = 0;
    uint64_t v118 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRavenController::GetLocation(CLLocationProvider_Type::NotificationData &, const GNSS::DaemonLocation &) const", "%s\n", v118);
    if (v118 != (char *)v187) {
      free(v118);
    }
  }
  sub_1000DB3D4((uint64_t)v187);
  long long v30 = v187[7];
  *(_OWORD *)(v4 + 96) = v187[6];
  *(_OWORD *)(v4 + 112) = v30;
  *(_OWORD *)(v4 + 128) = v187[8];
  *(_OWORD *)(v4 + 140) = *(_OWORD *)((char *)&v187[8] + 12);
  long long v31 = v187[3];
  *(_OWORD *)(v4 + 32) = v187[2];
  *(_OWORD *)(v4 + 48) = v31;
  long long v32 = v187[5];
  *(_OWORD *)(v4 + 64) = v187[4];
  *(_OWORD *)(v4 + 80) = v32;
  long long v33 = v187[1];
  *(_OWORD *)uint64_t v4 = v187[0];
  *(_OWORD *)(v4 + 16) = v33;
  memcpy((void *)(v4 + 160), &v187[10], 0x201uLL);
  long long v34 = *(_OWORD *)((char *)&v187[42] + 8);
  *((void *)&v187[42] + 1) = 0;
  *(void *)&v187[43] = 0;
  uint64_t v35 = *(std::__shared_weak_count **)(v4 + 688);
  _OWORD *v5 = v34;
  if (v35) {
    sub_1000DB0A0(v35);
  }
  long long v36 = *(_OWORD *)((char *)&v187[48] + 8);
  *(_OWORD *)(v4 + 760) = *(_OWORD *)((char *)&v187[47] + 8);
  *(_OWORD *)(v4 + 776) = v36;
  *(void *)(v4 + 789) = *(void *)((char *)&v187[49] + 5);
  long long v37 = *(_OWORD *)((char *)&v187[44] + 8);
  *(_OWORD *)(v4 + 696) = *(_OWORD *)((char *)&v187[43] + 8);
  *(_OWORD *)(v4 + 712) = v37;
  long long v38 = *(_OWORD *)((char *)&v187[46] + 8);
  *(_OWORD *)(v4 + 728) = *(_OWORD *)((char *)&v187[45] + 8);
  *(_OWORD *)(v4 + 744) = v38;
  long long v39 = v187[50];
  v187[50] = 0u;
  double v40 = *(std::__shared_weak_count **)(v4 + 808);
  *(_OWORD *)(v4 + 800) = v39;
  if (v40) {
    sub_1000DB0A0(v40);
  }
  long long v41 = v187[54];
  *(_OWORD *)(v4 + 848) = v187[53];
  *(_OWORD *)(v4 + 864) = v41;
  *(_OWORD *)(v4 + 880) = v187[55];
  long long v42 = v187[52];
  *(_OWORD *)(v4 + 816) = v187[51];
  *(_OWORD *)(v4 + 832) = v42;
  *(void *)(v4 + 896) = *(void *)&v187[56];
  __int16 v43 = (void **)(v4 + 904);
  if (*(char *)(v4 + 927) < 0) {
    operator delete(*v43);
  }
  *(void *)(v4 + 920) = *((void *)&v187[57] + 1);
  *(_OWORD *)__int16 v43 = *(_OWORD *)((char *)&v187[56] + 8);
  HIBYTE(v187[57]) = 0;
  BYTE8(v187[56]) = 0;
  *(_OWORD *)(v4 + 1104) = v187[69];
  *(_OWORD *)(v4 + 1120) = v187[70];
  *(_OWORD *)(v4 + 1136) = v187[71];
  *(void *)(v4 + 1152) = *(void *)&v187[72];
  *(_OWORD *)(v4 + 1040) = v187[65];
  *(_OWORD *)(v4 + 1056) = v187[66];
  *(_OWORD *)(v4 + 1072) = v187[67];
  *(_OWORD *)(v4 + 1088) = v187[68];
  long long v44 = v187[63];
  *(_OWORD *)(v4 + 992) = v187[62];
  *(_OWORD *)(v4 + 1008) = v44;
  *(_OWORD *)(v4 + 1024) = v187[64];
  long long v45 = v187[59];
  *(_OWORD *)(v4 + 928) = v187[58];
  *(_OWORD *)(v4 + 944) = v45;
  long long v46 = v187[61];
  *(_OWORD *)(v4 + 960) = v187[60];
  *(_OWORD *)(v4 + 976) = v46;
  long long v47 = *(_OWORD *)((char *)&v187[72] + 8);
  *((void *)&v187[72] + 1) = 0;
  *(void *)&v187[73] = 0;
  __int16 v48 = *(std::__shared_weak_count **)(v4 + 1168);
  v5[30] = v47;
  if (v48) {
    sub_1000DB0A0(v48);
  }
  long long v49 = *(_OWORD *)((char *)&v187[80] + 8);
  *(_OWORD *)(v4 + 1272) = *(_OWORD *)((char *)&v187[79] + 8);
  *(_OWORD *)(v4 + 1288) = v49;
  *(_OWORD *)(v4 + 1304) = *(_OWORD *)((char *)&v187[81] + 8);
  long long v50 = *(_OWORD *)((char *)&v187[76] + 8);
  *(_OWORD *)(v4 + 1208) = *(_OWORD *)((char *)&v187[75] + 8);
  *(_OWORD *)(v4 + 1224) = v50;
  long long v51 = *(_OWORD *)((char *)&v187[78] + 8);
  *(_OWORD *)(v4 + 1240) = *(_OWORD *)((char *)&v187[77] + 8);
  *(_OWORD *)(v4 + 1256) = v51;
  long long v52 = *(_OWORD *)((char *)&v187[74] + 8);
  *(_OWORD *)(v4 + 1176) = *(_OWORD *)((char *)&v187[73] + 8);
  *(_OWORD *)(v4 + 1192) = v52;
  BOOL v53 = *(void **)(v4 + 1320);
  *(void *)(v4 + 1320) = *((void *)&v187[82] + 1);
  *((void *)&v187[82] + 1) = 0;

  *(_OWORD *)(v4 + 1472) = v187[92];
  *(_OWORD *)(v4 + 1488) = v187[93];
  *(_OWORD *)(v4 + 1504) = v187[94];
  *(void *)(v4 + 1520) = *(void *)&v187[95];
  *(_OWORD *)(v4 + 1408) = v187[88];
  *(_OWORD *)(v4 + 1424) = v187[89];
  *(_OWORD *)(v4 + 1440) = v187[90];
  *(_OWORD *)(v4 + 1456) = v187[91];
  *(_OWORD *)(v4 + 1344) = v187[84];
  *(_OWORD *)(v4 + 1360) = v187[85];
  *(_OWORD *)(v4 + 1376) = v187[86];
  *(_OWORD *)(v4 + 1392) = v187[87];
  *(_OWORD *)(v4 + 1328) = v187[83];

  if (*(void *)&v187[73]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&v187[73]);
  }
  if (SHIBYTE(v187[57]) < 0) {
    operator delete(*((void **)&v187[56] + 1));
  }
  if (*((void *)&v187[50] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v187[50] + 1));
  }
  if (*(void *)&v187[43]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&v187[43]);
  }
  return 0;
}

void sub_100CEBBDC(_Unwind_Exception *a1)
{
}

BOOL sub_100CEBC78(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (*(unsigned char *)(a1 + 4664))
  {
    *(void *)stat buf = 0;
    long long v16 = buf;
    uint64_t v17 = 0x2020000000;
    char v18 = 1;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100CEBF54;
    v13[3] = &unk_1022F1A08;
    v13[5] = sub_10016C458();
    void v13[4] = buf;
    v13[6] = a2;
    std::timed_mutex::lock((std::timed_mutex *)(a1 + 320));
    if (a4) {
      [*(id *)(a1 + 4672) getRavenSolutionAtMCTime:v13 WithReply:*(double *)&a3];
    }
    else {
      [*(id *)(a1 + 4672) getRavenSolutionWithReply:v13];
    }
    std::timed_mutex::unlock((std::timed_mutex *)(a1 + 320));
    BOOL v10 = v16[24] != 0;
    _Block_object_dispose(buf, 8);
  }
  else
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v9 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "CLGLS,Raven Location XPC Service not enabled. Cannot get a solution", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      __int16 v14 = 0;
      long long v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLRavenController::GetRavenSolutionFromService(raven::RavenSolutionEvent &, const std::optional<CFTimeInterval>) const", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    return 0;
  }
  return v10;
}

void sub_100CEBF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  std::timed_mutex::unlock(v21);
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void sub_100CEBF54(uint64_t a1, void *a2)
{
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  uint64_t v4 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    double v5 = (sub_10016C458() - *(double *)(a1 + 40)) * 1000.0;
    *(_DWORD *)stat buf = 134349056;
    double v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLGLS,CLRavenController,GetRavenSolutionFromService,responseTimeMs,%{public}.1lf", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    double v10 = (sub_10016C458() - *(double *)(a1 + 40)) * 1000.0;
    int v16 = 134349056;
    double v17 = v10;
    long long v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRavenController::GetRavenSolutionFromService(raven::RavenSolutionEvent &, const std::optional<CFTimeInterval>) const_block_invoke", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  if (!a2)
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v6 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "CLGLS,CLRavenController,GetRavenSolutionFromService,Could not get a solution", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      LOWORD(v16) = 0;
      long long v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLRavenController::GetRavenSolutionFromService(raven::RavenSolutionEvent &, const std::optional<CFTimeInterval>) const_block_invoke", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  sub_1002E9328(&__p, [a2 bytes], (size_t)[a2 length]);
  CoreNavigation::CLP::LogEntry::LogEntry::LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)&v16);
  if ((wireless_diagnostics::google::protobuf::MessageLite::ParseFromString() & 1) == 0)
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v7 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "CLGLS,Could not parse raven solution protobuf message from serialized byte array", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      long long v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLRavenController::GetRavenSolutionFromService(raven::RavenSolutionEvent &, const std::optional<CFTimeInterval>) const_block_invoke", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  if ((v19 & 2) != 0)
  {
    if (v18)
    {
      uint64_t v8 = v18;
      if ((*(unsigned char *)(v18 + 320) & 2) == 0) {
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v8 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
      if ((*(unsigned char *)(v8 + 320) & 2) == 0) {
        goto LABEL_29;
      }
    }
    uint64_t v9 = *(void *)(v8 + 272);
    if (!v9) {
      uint64_t v9 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 272);
    }
    if (*(unsigned char *)(v9 + 28)) {
      raven::ConvertProtobufToRavenSolutionEvent();
    }
  }
LABEL_29:
  CoreNavigation::CLP::LogEntry::LogEntry::~LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)&v16);
  if (v15 < 0) {
    operator delete(__p);
  }
}

void sub_100CEC4A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100CEC4DC(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v5 = v4;
  uint64_t v6 = v2;
  uint64_t v7 = (_OWORD *)(v4 + 680);
  if ((*v2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *(double *)v2 < 0.0)
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    long long v32 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = *v6;
      LODWORD(v218[0]) = 134349056;
      *(void *)((char *)v218 + 4) = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "Raven: solution requested at invalid time: %{public}.3lf", (uint8_t *)v218, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(v218, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      uint64_t v144 = *v6;
      *(_DWORD *)stat buf = 134349056;
      *(void *)&uint8_t buf[4] = v144;
      uint64_t v145 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLRavenController::GetLocation(const CFTimeInterval &, CLLocationProvider_Type::NotificationData &, const GNSS::DaemonLocation &) const", "%s\n", v145);
      if (v145 != (char *)v218) {
        free(v145);
      }
    }
    sub_1000DB3D4((uint64_t)v218);
    long long v34 = v218[7];
    *(_OWORD *)(v5 + 96) = v218[6];
    *(_OWORD *)(v5 + 112) = v34;
    *(_OWORD *)(v5 + 128) = v218[8];
    *(_OWORD *)(v5 + 140) = *(_OWORD *)((char *)&v218[8] + 12);
    long long v35 = v218[3];
    *(_OWORD *)(v5 + 32) = v218[2];
    *(_OWORD *)(v5 + 48) = v35;
    long long v36 = v218[5];
    *(_OWORD *)(v5 + 64) = v218[4];
    *(_OWORD *)(v5 + 80) = v36;
    long long v37 = v218[1];
    *(_OWORD *)uint64_t v5 = v218[0];
    *(_OWORD *)(v5 + 16) = v37;
    memcpy((void *)(v5 + 160), &v218[10], 0x201uLL);
    long long v38 = *(_OWORD *)((char *)&v218[42] + 8);
    *((void *)&v218[42] + 1) = 0;
    *(void *)&v218[43] = 0;
    long long v39 = *(std::__shared_weak_count **)(v5 + 688);
    _OWORD *v7 = v38;
    if (v39) {
      sub_1000DB0A0(v39);
    }
    long long v40 = *(_OWORD *)((char *)&v218[48] + 8);
    *(_OWORD *)(v5 + 760) = *(_OWORD *)((char *)&v218[47] + 8);
    *(_OWORD *)(v5 + 776) = v40;
    *(void *)(v5 + 789) = *(void *)((char *)&v218[49] + 5);
    long long v41 = *(_OWORD *)((char *)&v218[44] + 8);
    *(_OWORD *)(v5 + 696) = *(_OWORD *)((char *)&v218[43] + 8);
    *(_OWORD *)(v5 + 712) = v41;
    long long v42 = *(_OWORD *)((char *)&v218[46] + 8);
    *(_OWORD *)(v5 + 728) = *(_OWORD *)((char *)&v218[45] + 8);
    *(_OWORD *)(v5 + 744) = v42;
    long long v43 = v218[50];
    v218[50] = 0u;
    long long v44 = *(std::__shared_weak_count **)(v5 + 808);
    *(_OWORD *)(v5 + 800) = v43;
    if (v44) {
      sub_1000DB0A0(v44);
    }
    long long v45 = v218[54];
    *(_OWORD *)(v5 + 848) = v218[53];
    *(_OWORD *)(v5 + 864) = v45;
    *(_OWORD *)(v5 + 880) = v218[55];
    long long v46 = v218[52];
    *(_OWORD *)(v5 + 816) = v218[51];
    *(_OWORD *)(v5 + 832) = v46;
    *(void *)(v5 + 896) = *(void *)&v218[56];
    long long v47 = (void **)(v5 + 904);
    if (*(char *)(v5 + 927) < 0) {
      operator delete(*v47);
    }
    *(void *)(v5 + 920) = *((void *)&v218[57] + 1);
    *(_OWORD *)long long v47 = *(_OWORD *)((char *)&v218[56] + 8);
    HIBYTE(v218[57]) = 0;
    BYTE8(v218[56]) = 0;
    *(_OWORD *)(v5 + 1104) = v218[69];
    *(_OWORD *)(v5 + 1120) = v218[70];
    *(_OWORD *)(v5 + 1136) = v218[71];
    *(void *)(v5 + 1152) = *(void *)&v218[72];
    *(_OWORD *)(v5 + 1040) = v218[65];
    *(_OWORD *)(v5 + 1056) = v218[66];
    *(_OWORD *)(v5 + 1072) = v218[67];
    *(_OWORD *)(v5 + 1088) = v218[68];
    long long v48 = v218[63];
    *(_OWORD *)(v5 + 992) = v218[62];
    *(_OWORD *)(v5 + 1008) = v48;
    *(_OWORD *)(v5 + 1024) = v218[64];
    long long v49 = v218[59];
    *(_OWORD *)(v5 + 928) = v218[58];
    *(_OWORD *)(v5 + 944) = v49;
    long long v50 = v218[61];
    *(_OWORD *)(v5 + 960) = v218[60];
    *(_OWORD *)(v5 + 976) = v50;
    long long v51 = *(_OWORD *)((char *)&v218[72] + 8);
    *((void *)&v218[72] + 1) = 0;
    *(void *)&v218[73] = 0;
    long long v52 = *(std::__shared_weak_count **)(v5 + 1168);
    v7[30] = v51;
    if (v52) {
      sub_1000DB0A0(v52);
    }
  }
  else
  {
    uint64_t v8 = v1;
    uint64_t v9 = v1 + 4663;
    if (*(unsigned char *)(v1 + 4663))
    {
      uint64_t v10 = v3;
      if ((*(unsigned char *)(v1 + 4664) || *(void *)(v1 + 312)) && *(void *)(v1 + 4736) != v1 + 4688)
      {
        sub_100CEE5A0((uint64_t)v218);
        if (*(unsigned char *)(v9 + 1))
        {
          if (!sub_100CEBC78(v8, (uint64_t)v218, *v6, 1))
          {
            if (qword_102419400 != -1) {
              dispatch_once(&qword_102419400, &stru_1022F1A68);
            }
            long long v11 = qword_102419408;
            if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_INFO))
            {
              uint64_t v12 = *v6;
              *(_DWORD *)stat buf = 134349056;
              *(void *)&uint8_t buf[4] = v12;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Raven: could not retrieve Raven solution at time %{public}.3lf", buf, 0xCu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419400 != -1) {
                dispatch_once(&qword_102419400, &stru_1022F1A68);
              }
              uint64_t v147 = *v6;
              LODWORD(v217) = 134349056;
              *(void *)((char *)&v217 + 4) = v147;
              long long v148 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRavenController::GetLocation(const CFTimeInterval &, CLLocationProvider_Type::NotificationData &, const GNSS::DaemonLocation &) const", "%s\n", v148);
              if (v148 != (char *)buf) {
                free(v148);
              }
            }
            sub_1000DB3D4((uint64_t)buf);
            long long v13 = v159;
            *(_OWORD *)(v5 + 96) = v158;
            *(_OWORD *)(v5 + 112) = v13;
            *(_OWORD *)(v5 + 128) = v160[0];
            *(_OWORD *)(v5 + 140) = *(_OWORD *)((char *)v160 + 12);
            long long v14 = v155;
            *(_OWORD *)(v5 + 32) = v154;
            *(_OWORD *)(v5 + 48) = v14;
            long long v15 = v157;
            *(_OWORD *)(v5 + 64) = v156;
            *(_OWORD *)(v5 + 80) = v15;
            long long v16 = v153;
            *(_OWORD *)uint64_t v5 = *(_OWORD *)buf;
            *(_OWORD *)(v5 + 16) = v16;
            memcpy((void *)(v5 + 160), v161, 0x201uLL);
            long long v17 = v162;
            long long v162 = 0uLL;
            uint64_t v18 = *(std::__shared_weak_count **)(v5 + 688);
            _OWORD *v7 = v17;
            if (v18) {
              sub_1000DB0A0(v18);
            }
            long long v19 = *(_OWORD *)v168;
            *(_OWORD *)(v5 + 760) = v167;
            *(_OWORD *)(v5 + 776) = v19;
            *(void *)(v5 + 789) = *(void *)&v168[13];
            long long v20 = v164;
            *(_OWORD *)(v5 + 696) = v163;
            *(_OWORD *)(v5 + 712) = v20;
            long long v21 = v166;
            *(_OWORD *)(v5 + 728) = v165;
            *(_OWORD *)(v5 + 744) = v21;
            long long v22 = v169;
            long long v169 = 0u;
            __int16 v23 = *(std::__shared_weak_count **)(v5 + 808);
            *(_OWORD *)(v5 + 800) = v22;
            if (v23) {
              sub_1000DB0A0(v23);
            }
            long long v24 = v173;
            *(_OWORD *)(v5 + 848) = v172;
            *(_OWORD *)(v5 + 864) = v24;
            *(_OWORD *)(v5 + 880) = v174;
            long long v25 = v171;
            *(_OWORD *)(v5 + 816) = v170;
            *(_OWORD *)(v5 + 832) = v25;
            *(void *)(v5 + 896) = v175;
            long long v26 = (void **)(v5 + 904);
            if (*(char *)(v5 + 927) < 0) {
              operator delete(*v26);
            }
            *(void *)(v5 + 920) = v177;
            *(_OWORD *)long long v26 = v176;
            HIBYTE(v177) = 0;
            LOBYTE(v176) = 0;
            *(_OWORD *)(v5 + 1104) = v189;
            *(_OWORD *)(v5 + 1120) = v190;
            *(_OWORD *)(v5 + 1136) = v191;
            *(void *)(v5 + 1152) = v192;
            *(_OWORD *)(v5 + 1040) = v185;
            *(_OWORD *)(v5 + 1056) = v186;
            *(_OWORD *)(v5 + 1072) = v187;
            *(_OWORD *)(v5 + 1088) = v188;
            long long v27 = v183;
            *(_OWORD *)(v5 + 992) = v182;
            *(_OWORD *)(v5 + 1008) = v27;
            *(_OWORD *)(v5 + 1024) = v184;
            long long v28 = v179;
            *(_OWORD *)(v5 + 928) = v178;
            *(_OWORD *)(v5 + 944) = v28;
            long long v29 = v181;
            *(_OWORD *)(v5 + 960) = v180;
            *(_OWORD *)(v5 + 976) = v29;
            long long v30 = v193;
            long long v193 = 0uLL;
            long long v31 = *(std::__shared_weak_count **)(v5 + 1168);
            v7[30] = v30;
            if (v31) {
              sub_1000DB0A0(v31);
            }
            goto LABEL_94;
          }
        }
        else
        {
          uint64_t v80 = *v6;
          memset(buf, 0, sizeof(buf));
          CNTimeSpan::SetTimeSpan((CNTimeSpan *)buf, 0, *(double *)&v80);
          long long v217 = *(_OWORD *)buf;
          std::timed_mutex::lock((std::timed_mutex *)(v8 + 320));
          int RavenSolution = raven::RavenSupervisor::GetRavenSolution();
          std::timed_mutex::unlock((std::timed_mutex *)(v8 + 320));
          if (RavenSolution)
          {
            if (qword_102419400 != -1) {
              dispatch_once(&qword_102419400, &stru_1022F1A68);
            }
            long long v82 = qword_102419408;
            if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_INFO))
            {
              uint64_t v83 = *v6;
              *(_DWORD *)stat buf = 134349056;
              *(void *)&uint8_t buf[4] = v83;
              _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_INFO, "Raven: could not retrieve Raven solution at time %{public}.3lf", buf, 0xCu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419400 != -1) {
                dispatch_once(&qword_102419400, &stru_1022F1A68);
              }
              long long v149 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRavenController::GetLocation(const CFTimeInterval &, CLLocationProvider_Type::NotificationData &, const GNSS::DaemonLocation &) const", "%s\n", v149);
              if (v149 != (char *)buf) {
                free(v149);
              }
            }
            sub_1000DB3D4((uint64_t)buf);
            long long v84 = v159;
            *(_OWORD *)(v5 + 96) = v158;
            *(_OWORD *)(v5 + 112) = v84;
            *(_OWORD *)(v5 + 128) = v160[0];
            *(_OWORD *)(v5 + 140) = *(_OWORD *)((char *)v160 + 12);
            long long v85 = v155;
            *(_OWORD *)(v5 + 32) = v154;
            *(_OWORD *)(v5 + 48) = v85;
            long long v86 = v157;
            *(_OWORD *)(v5 + 64) = v156;
            *(_OWORD *)(v5 + 80) = v86;
            long long v87 = v153;
            *(_OWORD *)uint64_t v5 = *(_OWORD *)buf;
            *(_OWORD *)(v5 + 16) = v87;
            memcpy((void *)(v5 + 160), v161, 0x201uLL);
            long long v88 = v162;
            long long v162 = 0uLL;
            long long v89 = *(std::__shared_weak_count **)(v5 + 688);
            _OWORD *v7 = v88;
            if (v89) {
              sub_1000DB0A0(v89);
            }
            long long v90 = *(_OWORD *)v168;
            *(_OWORD *)(v5 + 760) = v167;
            *(_OWORD *)(v5 + 776) = v90;
            *(void *)(v5 + 789) = *(void *)&v168[13];
            long long v91 = v164;
            *(_OWORD *)(v5 + 696) = v163;
            *(_OWORD *)(v5 + 712) = v91;
            long long v92 = v166;
            *(_OWORD *)(v5 + 728) = v165;
            *(_OWORD *)(v5 + 744) = v92;
            long long v93 = v169;
            long long v169 = 0u;
            long long v94 = *(std::__shared_weak_count **)(v5 + 808);
            *(_OWORD *)(v5 + 800) = v93;
            if (v94) {
              sub_1000DB0A0(v94);
            }
            long long v95 = v173;
            *(_OWORD *)(v5 + 848) = v172;
            *(_OWORD *)(v5 + 864) = v95;
            *(_OWORD *)(v5 + 880) = v174;
            long long v96 = v171;
            *(_OWORD *)(v5 + 816) = v170;
            *(_OWORD *)(v5 + 832) = v96;
            *(void *)(v5 + 896) = v175;
            long long v97 = (void **)(v5 + 904);
            if (*(char *)(v5 + 927) < 0) {
              operator delete(*v97);
            }
            *(void *)(v5 + 920) = v177;
            *(_OWORD *)long long v97 = v176;
            HIBYTE(v177) = 0;
            LOBYTE(v176) = 0;
            *(_OWORD *)(v5 + 1104) = v189;
            *(_OWORD *)(v5 + 1120) = v190;
            *(_OWORD *)(v5 + 1136) = v191;
            *(void *)(v5 + 1152) = v192;
            *(_OWORD *)(v5 + 1040) = v185;
            *(_OWORD *)(v5 + 1056) = v186;
            *(_OWORD *)(v5 + 1072) = v187;
            *(_OWORD *)(v5 + 1088) = v188;
            long long v98 = v183;
            *(_OWORD *)(v5 + 992) = v182;
            *(_OWORD *)(v5 + 1008) = v98;
            *(_OWORD *)(v5 + 1024) = v184;
            long long v99 = v179;
            *(_OWORD *)(v5 + 928) = v178;
            *(_OWORD *)(v5 + 944) = v99;
            long long v100 = v181;
            *(_OWORD *)(v5 + 960) = v180;
            *(_OWORD *)(v5 + 976) = v100;
            long long v101 = v193;
            long long v193 = 0uLL;
            long long v102 = *(std::__shared_weak_count **)(v5 + 1168);
            v7[30] = v101;
            if (v102) {
              sub_1000DB0A0(v102);
            }
            goto LABEL_94;
          }
        }
        long long v103 = *(_OWORD *)(v10 + 16);
        *(_OWORD *)uint64_t v5 = *(_OWORD *)v10;
        *(_OWORD *)(v5 + 16) = v103;
        long long v104 = *(_OWORD *)(v10 + 32);
        long long v105 = *(_OWORD *)(v10 + 48);
        long long v106 = *(_OWORD *)(v10 + 80);
        *(_OWORD *)(v5 + 64) = *(_OWORD *)(v10 + 64);
        *(_OWORD *)(v5 + 80) = v106;
        *(_OWORD *)(v5 + 32) = v104;
        *(_OWORD *)(v5 + 48) = v105;
        long long v107 = *(_OWORD *)(v10 + 96);
        long long v108 = *(_OWORD *)(v10 + 112);
        long long v109 = *(_OWORD *)(v10 + 128);
        *(_OWORD *)(v5 + 140) = *(_OWORD *)(v10 + 140);
        *(_OWORD *)(v5 + 112) = v108;
        *(_OWORD *)(v5 + 128) = v109;
        *(_OWORD *)(v5 + 96) = v107;
        memcpy((void *)(v5 + 160), (const void *)(v10 + 160), 0x201uLL);
        uint64_t v110 = *(void *)(v10 + 680);
        uint64_t v111 = *(void *)(v10 + 688);
        if (v111) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v111 + 8), 1uLL, memory_order_relaxed);
        }
        *(void *)(v5 + 680) = v110;
        long long v112 = *(std::__shared_weak_count **)(v5 + 688);
        *(void *)(v5 + 688) = v111;
        if (v112) {
          sub_1000DB0A0(v112);
        }
        long long v113 = *(_OWORD *)(v10 + 696);
        long long v114 = *(_OWORD *)(v10 + 728);
        *(_OWORD *)(v5 + 712) = *(_OWORD *)(v10 + 712);
        *(_OWORD *)(v5 + 728) = v114;
        *(_OWORD *)(v5 + 696) = v113;
        long long v115 = *(_OWORD *)(v10 + 744);
        long long v116 = *(_OWORD *)(v10 + 760);
        long long v117 = *(_OWORD *)(v10 + 776);
        *(void *)(v5 + 789) = *(void *)(v10 + 789);
        *(_OWORD *)(v5 + 760) = v116;
        *(_OWORD *)(v5 + 776) = v117;
        *(_OWORD *)(v5 + 744) = v115;
        if (sub_100CE7328(v8, (uint64_t)v218, v5))
        {
          std::mutex::lock((std::mutex *)(v8 + 4400));
          memcpy((void *)(v8 + 448), (char *)v218 + 8, 0x971uLL);
          sub_1000B0168(v8 + 2872, v5);
          std::mutex::unlock((std::mutex *)(v8 + 4400));
          uint64_t v78 = 1;
LABEL_103:
          raven::RavenSolutionEvent::~RavenSolutionEvent((raven::RavenSolutionEvent *)v218);
          return v78;
        }
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        uint64_t v118 = qword_102419408;
        if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_INFO))
        {
          uint64_t v119 = *v6;
          *(_DWORD *)stat buf = 134349056;
          *(void *)&uint8_t buf[4] = v119;
          _os_log_impl((void *)&_mh_execute_header, v118, OS_LOG_TYPE_INFO, "Raven: could not convert Raven solution to client location at time %{public}.3lf", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419400 != -1) {
            dispatch_once(&qword_102419400, &stru_1022F1A68);
          }
          uint64_t v150 = *v6;
          LODWORD(v217) = 134349056;
          *(void *)((char *)&v217 + 4) = v150;
          long long v151 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRavenController::GetLocation(const CFTimeInterval &, CLLocationProvider_Type::NotificationData &, const GNSS::DaemonLocation &) const", "%s\n", v151);
          if (v151 != (char *)buf) {
            free(v151);
          }
        }
        sub_1000DB3D4((uint64_t)buf);
        long long v120 = v159;
        *(_OWORD *)(v5 + 96) = v158;
        *(_OWORD *)(v5 + 112) = v120;
        *(_OWORD *)(v5 + 128) = v160[0];
        *(_OWORD *)(v5 + 140) = *(_OWORD *)((char *)v160 + 12);
        long long v121 = v155;
        *(_OWORD *)(v5 + 32) = v154;
        *(_OWORD *)(v5 + 48) = v121;
        long long v122 = v157;
        *(_OWORD *)(v5 + 64) = v156;
        *(_OWORD *)(v5 + 80) = v122;
        long long v123 = v153;
        *(_OWORD *)uint64_t v5 = *(_OWORD *)buf;
        *(_OWORD *)(v5 + 16) = v123;
        memcpy((void *)(v5 + 160), v161, 0x201uLL);
        long long v124 = v162;
        long long v162 = 0uLL;
        long long v125 = *(std::__shared_weak_count **)(v5 + 688);
        _OWORD *v7 = v124;
        if (v125) {
          sub_1000DB0A0(v125);
        }
        long long v126 = *(_OWORD *)v168;
        *(_OWORD *)(v5 + 760) = v167;
        *(_OWORD *)(v5 + 776) = v126;
        *(void *)(v5 + 789) = *(void *)&v168[13];
        long long v127 = v164;
        *(_OWORD *)(v5 + 696) = v163;
        *(_OWORD *)(v5 + 712) = v127;
        long long v128 = v166;
        *(_OWORD *)(v5 + 728) = v165;
        *(_OWORD *)(v5 + 744) = v128;
        long long v129 = v169;
        long long v169 = 0u;
        uint64_t v130 = *(std::__shared_weak_count **)(v5 + 808);
        *(_OWORD *)(v5 + 800) = v129;
        if (v130) {
          sub_1000DB0A0(v130);
        }
        long long v131 = v173;
        *(_OWORD *)(v5 + 848) = v172;
        *(_OWORD *)(v5 + 864) = v131;
        *(_OWORD *)(v5 + 880) = v174;
        long long v132 = v171;
        *(_OWORD *)(v5 + 816) = v170;
        *(_OWORD *)(v5 + 832) = v132;
        *(void *)(v5 + 896) = v175;
        long long v133 = (void **)(v5 + 904);
        if (*(char *)(v5 + 927) < 0) {
          operator delete(*v133);
        }
        *(void *)(v5 + 920) = v177;
        *(_OWORD *)long long v133 = v176;
        HIBYTE(v177) = 0;
        LOBYTE(v176) = 0;
        *(_OWORD *)(v5 + 1104) = v189;
        *(_OWORD *)(v5 + 1120) = v190;
        *(_OWORD *)(v5 + 1136) = v191;
        *(void *)(v5 + 1152) = v192;
        *(_OWORD *)(v5 + 1040) = v185;
        *(_OWORD *)(v5 + 1056) = v186;
        *(_OWORD *)(v5 + 1072) = v187;
        *(_OWORD *)(v5 + 1088) = v188;
        long long v134 = v183;
        *(_OWORD *)(v5 + 992) = v182;
        *(_OWORD *)(v5 + 1008) = v134;
        *(_OWORD *)(v5 + 1024) = v184;
        long long v135 = v179;
        *(_OWORD *)(v5 + 928) = v178;
        *(_OWORD *)(v5 + 944) = v135;
        long long v136 = v181;
        *(_OWORD *)(v5 + 960) = v180;
        *(_OWORD *)(v5 + 976) = v136;
        long long v137 = v193;
        long long v193 = 0uLL;
        char v138 = *(std::__shared_weak_count **)(v5 + 1168);
        v7[30] = v137;
        if (v138) {
          sub_1000DB0A0(v138);
        }
LABEL_94:
        long long v139 = v201;
        *(_OWORD *)(v5 + 1272) = v200;
        *(_OWORD *)(v5 + 1288) = v139;
        *(_OWORD *)(v5 + 1304) = v202;
        long long v140 = v197;
        *(_OWORD *)(v5 + 1208) = v196;
        *(_OWORD *)(v5 + 1224) = v140;
        long long v141 = v199;
        *(_OWORD *)(v5 + 1240) = v198;
        *(_OWORD *)(v5 + 1256) = v141;
        long long v142 = v195;
        *(_OWORD *)(v5 + 1176) = v194;
        *(_OWORD *)(v5 + 1192) = v142;
        long long v143 = *(void **)(v5 + 1320);
        *(void *)(v5 + 1320) = v203;
        id v203 = 0;

        *(_OWORD *)(v5 + 1472) = v213;
        *(_OWORD *)(v5 + 1488) = v214;
        *(_OWORD *)(v5 + 1504) = v215;
        *(void *)(v5 + 1520) = v216;
        *(_OWORD *)(v5 + 1408) = v209;
        *(_OWORD *)(v5 + 1424) = v210;
        *(_OWORD *)(v5 + 1440) = v211;
        *(_OWORD *)(v5 + 1456) = v212;
        *(_OWORD *)(v5 + 1344) = v205;
        *(_OWORD *)(v5 + 1360) = v206;
        *(_OWORD *)(v5 + 1376) = v207;
        *(_OWORD *)(v5 + 1392) = v208;
        *(_OWORD *)(v5 + 1328) = v204;

        if (*((void *)&v193 + 1)) {
          sub_1000DB0A0(*((std::__shared_weak_count **)&v193 + 1));
        }
        if (SHIBYTE(v177) < 0) {
          operator delete((void *)v176);
        }
        if (*((void *)&v169 + 1)) {
          sub_1000DB0A0(*((std::__shared_weak_count **)&v169 + 1));
        }
        if (*((void *)&v162 + 1)) {
          sub_1000DB0A0(*((std::__shared_weak_count **)&v162 + 1));
        }
        uint64_t v78 = 0;
        goto LABEL_103;
      }
    }
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    BOOL v53 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_INFO))
    {
      LOWORD(v218[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_INFO, "Raven: location requested with estimator not enabled", (uint8_t *)v218, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(v218, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      *(_WORD *)stat buf = 0;
      long long v146 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRavenController::GetLocation(const CFTimeInterval &, CLLocationProvider_Type::NotificationData &, const GNSS::DaemonLocation &) const", "%s\n", v146);
      if (v146 != (char *)v218) {
        free(v146);
      }
    }
    sub_1000DB3D4((uint64_t)v218);
    long long v54 = v218[7];
    *(_OWORD *)(v5 + 96) = v218[6];
    *(_OWORD *)(v5 + 112) = v54;
    *(_OWORD *)(v5 + 128) = v218[8];
    *(_OWORD *)(v5 + 140) = *(_OWORD *)((char *)&v218[8] + 12);
    long long v55 = v218[3];
    *(_OWORD *)(v5 + 32) = v218[2];
    *(_OWORD *)(v5 + 48) = v55;
    long long v56 = v218[5];
    *(_OWORD *)(v5 + 64) = v218[4];
    *(_OWORD *)(v5 + 80) = v56;
    long long v57 = v218[1];
    *(_OWORD *)uint64_t v5 = v218[0];
    *(_OWORD *)(v5 + 16) = v57;
    memcpy((void *)(v5 + 160), &v218[10], 0x201uLL);
    long long v58 = *(_OWORD *)((char *)&v218[42] + 8);
    *((void *)&v218[42] + 1) = 0;
    *(void *)&v218[43] = 0;
    long long v59 = *(std::__shared_weak_count **)(v5 + 688);
    _OWORD *v7 = v58;
    if (v59) {
      sub_1000DB0A0(v59);
    }
    long long v60 = *(_OWORD *)((char *)&v218[48] + 8);
    *(_OWORD *)(v5 + 760) = *(_OWORD *)((char *)&v218[47] + 8);
    *(_OWORD *)(v5 + 776) = v60;
    *(void *)(v5 + 789) = *(void *)((char *)&v218[49] + 5);
    long long v61 = *(_OWORD *)((char *)&v218[44] + 8);
    *(_OWORD *)(v5 + 696) = *(_OWORD *)((char *)&v218[43] + 8);
    *(_OWORD *)(v5 + 712) = v61;
    long long v62 = *(_OWORD *)((char *)&v218[46] + 8);
    *(_OWORD *)(v5 + 728) = *(_OWORD *)((char *)&v218[45] + 8);
    *(_OWORD *)(v5 + 744) = v62;
    long long v63 = v218[50];
    v218[50] = 0u;
    long long v64 = *(std::__shared_weak_count **)(v5 + 808);
    *(_OWORD *)(v5 + 800) = v63;
    if (v64) {
      sub_1000DB0A0(v64);
    }
    long long v65 = v218[54];
    *(_OWORD *)(v5 + 848) = v218[53];
    *(_OWORD *)(v5 + 864) = v65;
    *(_OWORD *)(v5 + 880) = v218[55];
    long long v66 = v218[52];
    *(_OWORD *)(v5 + 816) = v218[51];
    *(_OWORD *)(v5 + 832) = v66;
    *(void *)(v5 + 896) = *(void *)&v218[56];
    uint64_t v67 = (void **)(v5 + 904);
    if (*(char *)(v5 + 927) < 0) {
      operator delete(*v67);
    }
    *(void *)(v5 + 920) = *((void *)&v218[57] + 1);
    *(_OWORD *)uint64_t v67 = *(_OWORD *)((char *)&v218[56] + 8);
    HIBYTE(v218[57]) = 0;
    BYTE8(v218[56]) = 0;
    *(_OWORD *)(v5 + 1104) = v218[69];
    *(_OWORD *)(v5 + 1120) = v218[70];
    *(_OWORD *)(v5 + 1136) = v218[71];
    *(void *)(v5 + 1152) = *(void *)&v218[72];
    *(_OWORD *)(v5 + 1040) = v218[65];
    *(_OWORD *)(v5 + 1056) = v218[66];
    *(_OWORD *)(v5 + 1072) = v218[67];
    *(_OWORD *)(v5 + 1088) = v218[68];
    long long v68 = v218[63];
    *(_OWORD *)(v5 + 992) = v218[62];
    *(_OWORD *)(v5 + 1008) = v68;
    *(_OWORD *)(v5 + 1024) = v218[64];
    long long v69 = v218[59];
    *(_OWORD *)(v5 + 928) = v218[58];
    *(_OWORD *)(v5 + 944) = v69;
    long long v70 = v218[61];
    *(_OWORD *)(v5 + 960) = v218[60];
    *(_OWORD *)(v5 + 976) = v70;
    long long v71 = *(_OWORD *)((char *)&v218[72] + 8);
    *((void *)&v218[72] + 1) = 0;
    *(void *)&v218[73] = 0;
    long long v72 = *(std::__shared_weak_count **)(v5 + 1168);
    v7[30] = v71;
    if (v72) {
      sub_1000DB0A0(v72);
    }
  }
  long long v73 = *(_OWORD *)((char *)&v218[80] + 8);
  *(_OWORD *)(v5 + 1272) = *(_OWORD *)((char *)&v218[79] + 8);
  *(_OWORD *)(v5 + 1288) = v73;
  *(_OWORD *)(v5 + 1304) = *(_OWORD *)((char *)&v218[81] + 8);
  long long v74 = *(_OWORD *)((char *)&v218[76] + 8);
  *(_OWORD *)(v5 + 1208) = *(_OWORD *)((char *)&v218[75] + 8);
  *(_OWORD *)(v5 + 1224) = v74;
  long long v75 = *(_OWORD *)((char *)&v218[78] + 8);
  *(_OWORD *)(v5 + 1240) = *(_OWORD *)((char *)&v218[77] + 8);
  *(_OWORD *)(v5 + 1256) = v75;
  long long v76 = *(_OWORD *)((char *)&v218[74] + 8);
  *(_OWORD *)(v5 + 1176) = *(_OWORD *)((char *)&v218[73] + 8);
  *(_OWORD *)(v5 + 1192) = v76;
  long long v77 = *(void **)(v5 + 1320);
  *(void *)(v5 + 1320) = *((void *)&v218[82] + 1);
  *((void *)&v218[82] + 1) = 0;

  *(_OWORD *)(v5 + 1472) = v218[92];
  *(_OWORD *)(v5 + 1488) = v218[93];
  *(_OWORD *)(v5 + 1504) = v218[94];
  *(void *)(v5 + 1520) = *(void *)&v218[95];
  *(_OWORD *)(v5 + 1408) = v218[88];
  *(_OWORD *)(v5 + 1424) = v218[89];
  *(_OWORD *)(v5 + 1440) = v218[90];
  *(_OWORD *)(v5 + 1456) = v218[91];
  *(_OWORD *)(v5 + 1344) = v218[84];
  *(_OWORD *)(v5 + 1360) = v218[85];
  *(_OWORD *)(v5 + 1376) = v218[86];
  *(_OWORD *)(v5 + 1392) = v218[87];
  *(_OWORD *)(v5 + 1328) = v218[83];

  if (*(void *)&v218[73]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&v218[73]);
  }
  if (SHIBYTE(v218[57]) < 0) {
    operator delete(*((void **)&v218[56] + 1));
  }
  if (*((void *)&v218[50] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v218[50] + 1));
  }
  if (*(void *)&v218[43]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&v218[43]);
  }
  return 0;
}

void sub_100CED968(_Unwind_Exception *a1)
{
}

void sub_100CEDA0C(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 4400);
  std::mutex::lock((std::mutex *)(a1 + 4400));
  uint64_t v46 = 0;
  sub_1004BD8CC((int *)&v46 + 1, &v46, *(double *)(a1 + 3056));
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  uint64_t v3 = (uint64_t *)(a1 + 2876);
  uint64_t v4 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a1 + 648);
    uint64_t v6 = *v3;
    uint64_t v7 = *(void *)(a1 + 2884);
    uint64_t v8 = *(void *)(a1 + 2892);
    uint64_t v9 = *(void *)(a1 + 2900);
    uint64_t v10 = *(void *)(a1 + 2908);
    uint64_t v11 = *(void *)(a1 + 2916);
    uint64_t v12 = *(void *)(a1 + 2924);
    uint64_t v13 = *(void *)(a1 + 2932);
    uint64_t v14 = *(void *)(a1 + 2940);
    double v15 = *(double *)(a1 + 1616) + (double)*(uint64_t *)(a1 + 1608);
    double v16 = *(float *)(a1 + 3072);
    double v17 = *(float *)(a1 + 3076);
    double v18 = *(float *)(a1 + 3080);
    uint64_t v19 = *(void *)(a1 + 1584);
    uint64_t v20 = *(void *)(a1 + 1592);
    uint64_t v21 = *(void *)(a1 + 1600);
    double v22 = *(double *)(a1 + 2440) * 1000000000.0;
    double v23 = sqrt(*(double *)(a1 + 2464)) * 1000000000.0;
    if (*(unsigned char *)(a1 + 4664)) {
      long long v24 = "GNSSLocationService";
    }
    else {
      long long v24 = "locationd";
    }
    *(_DWORD *)stat buf = 67245571;
    int v92 = v5;
    __int16 v93 = 2049;
    uint64_t v94 = v6;
    __int16 v95 = 2049;
    uint64_t v96 = v7;
    __int16 v97 = 2050;
    uint64_t v98 = v8;
    __int16 v99 = 2049;
    uint64_t v100 = v9;
    __int16 v101 = 2050;
    uint64_t v102 = v10;
    __int16 v103 = 2049;
    uint64_t v104 = v11;
    __int16 v105 = 2050;
    uint64_t v106 = v12;
    __int16 v107 = 2049;
    uint64_t v108 = v13;
    __int16 v109 = 2050;
    uint64_t v110 = v14;
    __int16 v111 = 1026;
    int v112 = HIDWORD(v46);
    __int16 v113 = 1026;
    int v114 = v46;
    __int16 v115 = 2050;
    double v116 = v15;
    __int16 v117 = 2050;
    double v118 = v16;
    __int16 v119 = 2050;
    double v120 = v17;
    __int16 v121 = 2050;
    double v122 = v18;
    __int16 v123 = 2050;
    uint64_t v124 = v19;
    __int16 v125 = 2050;
    uint64_t v126 = v20;
    __int16 v127 = 2050;
    uint64_t v128 = v21;
    __int16 v129 = 2050;
    double v130 = v22;
    __int16 v131 = 2050;
    double v132 = v23;
    __int16 v133 = 2082;
    long long v134 = v24;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Raven,Fix,1,solution_type,%{public}d,lat,%{private}.8f,lon,%{private}.8f,hunc,%{public}.1f,alt,%{private}.2f,alt_unc,%{public}.1f,speed,%{private}.2f,speed_unc,%{public}.1f,course,%{private}.1f,course_unc,%{public}.1f,gps_week,%{public}d,gps_tow_ms,%{public}d,raven_time,%{public}.3f,err_elp_A,%{public}.1f,err_elp_B,%{public}.1f,err_elp_AZ,%{public}.1f,weight_PT,%{public}.1f,weight_CE,%{public}.1f,weight_PNT,%{public}.1f,clkD,%{public}.1f,clkD_unc,%{public}.1f,generatingProcess,%{public}s", buf, 0xD2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    int v25 = *(unsigned __int8 *)(a1 + 648);
    uint64_t v26 = *v3;
    uint64_t v27 = *(void *)(a1 + 2884);
    uint64_t v28 = *(void *)(a1 + 2892);
    uint64_t v29 = *(void *)(a1 + 2900);
    uint64_t v30 = *(void *)(a1 + 2908);
    uint64_t v31 = *(void *)(a1 + 2916);
    uint64_t v32 = *(void *)(a1 + 2924);
    uint64_t v33 = *(void *)(a1 + 2932);
    uint64_t v34 = *(void *)(a1 + 2940);
    double v35 = *(double *)(a1 + 1616) + (double)*(uint64_t *)(a1 + 1608);
    double v36 = *(float *)(a1 + 3072);
    double v37 = *(float *)(a1 + 3076);
    double v38 = *(float *)(a1 + 3080);
    uint64_t v39 = *(void *)(a1 + 1584);
    uint64_t v40 = *(void *)(a1 + 1592);
    uint64_t v41 = *(void *)(a1 + 1600);
    double v42 = *(double *)(a1 + 2440) * 1000000000.0;
    double v43 = sqrt(*(double *)(a1 + 2464)) * 1000000000.0;
    if (*(unsigned char *)(a1 + 4664)) {
      long long v44 = "GNSSLocationService";
    }
    else {
      long long v44 = "locationd";
    }
    int v47 = 67245571;
    int v48 = v25;
    __int16 v49 = 2049;
    uint64_t v50 = v26;
    __int16 v51 = 2049;
    uint64_t v52 = v27;
    __int16 v53 = 2050;
    uint64_t v54 = v28;
    __int16 v55 = 2049;
    uint64_t v56 = v29;
    __int16 v57 = 2050;
    uint64_t v58 = v30;
    __int16 v59 = 2049;
    uint64_t v60 = v31;
    __int16 v61 = 2050;
    uint64_t v62 = v32;
    __int16 v63 = 2049;
    uint64_t v64 = v33;
    __int16 v65 = 2050;
    uint64_t v66 = v34;
    __int16 v67 = 1026;
    int v68 = HIDWORD(v46);
    __int16 v69 = 1026;
    int v70 = v46;
    __int16 v71 = 2050;
    double v72 = v35;
    __int16 v73 = 2050;
    double v74 = v36;
    __int16 v75 = 2050;
    double v76 = v37;
    __int16 v77 = 2050;
    double v78 = v38;
    __int16 v79 = 2050;
    uint64_t v80 = v39;
    __int16 v81 = 2050;
    uint64_t v82 = v40;
    __int16 v83 = 2050;
    uint64_t v84 = v41;
    __int16 v85 = 2050;
    double v86 = v42;
    __int16 v87 = 2050;
    double v88 = v43;
    __int16 v89 = 2082;
    long long v90 = v44;
    long long v45 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenController::LogMostRecentRavenSolution() const", "%s\n", v45);
    if (v45 != (char *)buf) {
      free(v45);
    }
  }
  std::mutex::unlock(v2);
}

void sub_100CEDE80(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100CEDE98(uint64_t a1)
{
  if (*(void *)(a1 + 4680))
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v4 = 0;
    uint64_t v2 = (std::mutex *)(a1 + 4400);
    std::mutex::lock((std::mutex *)(a1 + 4400));
    raven::ConvertRavenSolutionEventToSerializedProtobufLogEntry();
    std::mutex::unlock(v2);
    sub_100168EAC(*(void *)(a1 + 4680), (uint64_t)__p);
    if (SHIBYTE(v4) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_100CEDF10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100CEDF40(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 4663) || *(unsigned char *)(a1 + 4664) || !*(void *)(a1 + 312) || *(void *)(a1 + 4736) == a1 + 4688)
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v3 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Raven: Ionosphere coefficients requested when estimator not enabled", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRavenController::GetIonosphereParameters(cnnavigation::ThinShellIonosphereParameters &) const", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    int64x2_t v24 = 0u;
    int64x2_t v25 = 0u;
    int64x2_t v22 = 0u;
    int64x2_t v23 = 0u;
    int64x2_t v20 = 0u;
    int64x2_t v21 = 0u;
    unsigned long long v18 = 0u;
    int64x2_t v19 = 0u;
    memset(v17, 0, sizeof(v17));
    *(_OWORD *)stat buf = 0u;
    CNTimeSpan::SetTimeSpan((CNTimeSpan *)&buf[8], 0, 0.0);
    int64x2_t v15 = vdupq_n_s64(0x7FF8000000000000uLL);
    *(int64x2_t *)((char *)v17 + 8) = v15;
    unsigned long long v18 = 0uLL;
    *((void *)&v17[1] + 1) = 0x7FF8000000000000;
    CNTimeSpan::SetTimeSpan((CNTimeSpan *)&v18, 0, 0.0);
    BOOL result = 0;
    int64x2_t v19 = v15;
    int64x2_t v20 = v15;
    int64x2_t v21 = v15;
    int64x2_t v22 = v15;
    int64x2_t v23 = v15;
    int64x2_t v24 = v15;
    int64x2_t v25 = v15;
    long long v5 = v17[0];
    *(_OWORD *)a2 = *(_OWORD *)buf;
    *(_OWORD *)(a2 + 16) = v5;
    CNTimeSpan v6 = (CNTimeSpan)v18;
    *(_OWORD *)(a2 + 32) = v17[1];
    *(CNTimeSpan *)(a2 + 48) = v6;
    int64x2_t v7 = v24;
    *(int64x2_t *)(a2 + 128) = v23;
    *(int64x2_t *)(a2 + 144) = v7;
    *(int64x2_t *)(a2 + 160) = v25;
    int64x2_t v8 = v20;
    *(int64x2_t *)(a2 + 64) = v19;
    *(int64x2_t *)(a2 + 80) = v8;
    int64x2_t v9 = v22;
    *(int64x2_t *)(a2 + 96) = v21;
    *(int64x2_t *)(a2 + 112) = v9;
  }
  else
  {
    std::timed_mutex::lock((std::timed_mutex *)(a1 + 320));
    int RavenIonosphereParameters = raven::RavenSupervisor::GetRavenIonosphereParameters(*(raven::RavenSupervisor **)(a1 + 312), (ThinShellIonosphereParameters *)a2);
    std::timed_mutex::unlock((std::timed_mutex *)(a1 + 320));
    if (RavenIonosphereParameters)
    {
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022F1A68);
      }
      uint64_t v12 = qword_102419408;
      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)stat buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Raven: could not retrieve Ionosphere parameters", buf, 2u);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022F1A68);
        }
        uint64_t v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRavenController::GetIonosphereParameters(cnnavigation::ThinShellIonosphereParameters &) const", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
        return 0;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void sub_100CEE310(_Unwind_Exception *a1)
{
  std::timed_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100CEE32C(void *a1)
{
  *a1 = off_1022F1908;
  operator delete();
}

void sub_100CEE35C(void *a1)
{
  *a1 = off_1022F1908;
  operator delete();
}

void sub_100CEE38C(id a1)
{
  qword_102419408 = (uint64_t)os_log_create("com.apple.locationd.Position", "Raven");
}

uint64_t sub_100CEE3BC(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    uint64_t v4 = a1 + 5;
    uint64_t v3 = (void **)a1[1];
  }
  else
  {
    uint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    CNTimeSpan v6 = &v2[v5 / 0xAA];
    unint64_t v7 = (unint64_t)*v6;
    unint64_t v8 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    unint64_t v9 = (unint64_t)v2[(a1[5] + v5) / 0xAA] + 24 * ((a1[5] + v5) % 0xAA);
    if (v8 != v9)
    {
      do
      {
        if (*(char *)(v8 + 23) < 0)
        {
          operator delete(*(void **)v8);
          unint64_t v7 = (unint64_t)*v6;
        }
        v8 += 24;
        if (v8 - v7 == 4080)
        {
          unint64_t v10 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v10;
          unint64_t v8 = v10;
        }
      }
      while (v8 != v9);
      uint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }
  *uint64_t v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 85;
  }
  else
  {
    if (v12 != 2) {
      goto LABEL_18;
    }
    uint64_t v13 = 170;
  }
  a1[4] = v13;
LABEL_18:
  while (v2 != v3)
  {
    uint64_t v14 = *v2++;
    operator delete(v14);
  }

  return sub_1000D7EB4((uint64_t)a1);
}

uint64_t sub_100CEE514(uint64_t a1)
{
  *(_WORD *)a1 = 0;
  *(unsigned char *)(a1 + 2) = 0;
  sub_100134750((void *)(a1 + 8), "");
  sub_100134750((void *)(a1 + 32), "");
  *(void *)(a1 + 56) = 0;
  return a1;
}

void sub_100CEE570(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CEE5A0(uint64_t a1)
{
  return a1;
}

void sub_100CEE604(_Unwind_Exception *a1)
{
  cnframework::TimestampedEvent::~TimestampedEvent(v1);
  _Unwind_Resume(a1);
}

double sub_100CEE618(uint64_t a1)
{
  memset(v6, 0, 96);
  sub_100CEE6BC((uint64_t)v6);
  long long v2 = v6[3];
  *(_OWORD *)(a1 + 40) = v6[2];
  *(_OWORD *)(a1 + 56) = v2;
  long long v3 = v6[5];
  *(_OWORD *)(a1 + 72) = v6[4];
  *(_OWORD *)(a1 + 88) = v3;
  long long v4 = v6[1];
  *(_OWORD *)(a1 + 8) = v6[0];
  *(_OWORD *)(a1 + 24) = v4;
  sub_100CEE7A0(a1 + 104);
  bzero(v6, 0x360uLL);
  sub_100CEE870(v6);
  memcpy((void *)(a1 + 1168), v6, 0x360uLL);
  return sub_100CEE9C8(a1 + 2032);
}

uint64_t sub_100CEE6BC(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)a1, 0, 0.0);
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 24) = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)(a1 + 24), 0, 0.0);
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 48) = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)(a1 + 48), 0, 0.0);
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 72) = 0;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)(a1 + 72), 0, 0.0);
  *(void *)(a1 + 88) = 0x7FF8000000000000;
  return a1;
}

int64x2_t *sub_100CEE74C(int64x2_t *a1)
{
  a1->i8[0] = 0;
  sub_100CEE6BC((uint64_t)&a1->i64[1]);
  a1[6].i16[4] = 0;
  a1[7].i64[1] = 0;
  a1[8].i64[0] = 0;
  a1[60] = vdupq_n_s64(0x7FF8000000000000uLL);
  a1[61].i64[0] = 0;
  a1[61].i64[1] = 0x7FF8000000000000;
  sub_100CEE7A0((uint64_t)a1);
  return a1;
}

void sub_100CEE7A0(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  unsigned long long v5 = 0u;
  long long v6 = 0u;
  sub_100CEE6BC((uint64_t)&v5);
  long long v2 = v8;
  *(_OWORD *)(a1 + 40) = v7;
  *(_OWORD *)(a1 + 56) = v2;
  long long v3 = v10;
  *(_OWORD *)(a1 + 72) = v9;
  *(_OWORD *)(a1 + 88) = v3;
  long long v4 = v6;
  *(_OWORD *)(a1 + 8) = v5;
  *(_OWORD *)(a1 + 24) = v4;
  *(_WORD *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  unsigned long long v5 = 0uLL;
  CNTimeSpan::SetTimeSpan((CNTimeSpan *)&v5, 0, 0.0);
  *(_OWORD *)(a1 + 120) = v5;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(_WORD *)(a1 + 160) = 0;
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(void *)(a1 + 1056) = 0;
  *(int64x2_t *)(a1 + 960) = vdupq_n_s64(0x7FF8000000000000uLL);
  *(void *)(a1 + 976) = 0;
  *(void *)(a1 + 984) = 0x7FF8000000000000;
  bzero((void *)(a1 + 164), 0x318uLL);
}

int64x2_t sub_100CEE870(_OWORD *a1)
{
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  uint64_t v1 = sub_100CEE6BC((uint64_t)a1);
  *(unsigned char *)(v1 + 96) = 0;
  int64x2_t result = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v1 + 104) = result;
  *(int64x2_t *)(v1 + 120) = result;
  *(int64x2_t *)(v1 + 136) = result;
  *(int64x2_t *)(v1 + 152) = result;
  *(void *)(v1 + 168) = 0x7FF8000000000000;
  *(_WORD *)(v1 + 176) = 0;
  *(int64x2_t *)(v1 + 184) = result;
  *(int64x2_t *)(v1 + 200) = result;
  *(int64x2_t *)(v1 + 216) = result;
  *(int64x2_t *)(v1 + 232) = result;
  *(int64x2_t *)(v1 + 248) = result;
  *(void *)(v1 + 264) = 0x7FF8000000000000;
  *(int64x2_t *)(v1 + 272) = result;
  *(void *)(v1 + 288) = 0x7FF8000000000000;
  *(unsigned char *)(v1 + 296) = 0;
  *(int64x2_t *)(v1 + 304) = result;
  *(int64x2_t *)(v1 + 320) = result;
  *(int64x2_t *)(v1 + 336) = result;
  *(int64x2_t *)(v1 + 352) = result;
  *(void *)(v1 + 368) = 0x7FF8000000000000;
  *(unsigned char *)(v1 + 376) = 0;
  *(int64x2_t *)(v1 + 384) = result;
  *(int64x2_t *)(v1 + 400) = result;
  *(int64x2_t *)(v1 + 416) = result;
  *(int64x2_t *)(v1 + 432) = result;
  *(void *)(v1 + 448) = 0x7FF8000000000000;
  *(unsigned char *)(v1 + 456) = 0;
  *(int64x2_t *)(v1 + 464) = result;
  *(int64x2_t *)(v1 + 480) = result;
  *(int64x2_t *)(v1 + 496) = result;
  *(int64x2_t *)(v1 + 512) = result;
  *(int64x2_t *)(v1 + 528) = result;
  *(int64x2_t *)(v1 + 544) = result;
  *(int64x2_t *)(v1 + 560) = result;
  *(unsigned char *)(v1 + 576) = 0;
  *(void *)(v1 + 584) = 0x7FF8000000000000;
  *(int64x2_t *)(v1 + 592) = result;
  *(int64x2_t *)(v1 + 608) = result;
  *(int64x2_t *)(v1 + 624) = result;
  *(int64x2_t *)(v1 + 640) = result;
  *(unsigned char *)(v1 + 656) = 0;
  *(void *)(v1 + 664) = 0x7FF8000000000000;
  *(int64x2_t *)(v1 + 672) = result;
  *(int64x2_t *)(v1 + 688) = result;
  *(int64x2_t *)(v1 + 704) = result;
  *(int64x2_t *)(v1 + 720) = result;
  *(unsigned char *)(v1 + 736) = 0;
  *(void *)(v1 + 744) = 0x7FF8000000000000;
  *(int64x2_t *)(v1 + 752) = result;
  *(int64x2_t *)(v1 + 768) = result;
  *(int64x2_t *)(v1 + 784) = result;
  *(int64x2_t *)(v1 + 800) = result;
  *(unsigned char *)(v1 + 816) = 0;
  *(void *)(v1 + 824) = 0x7FF8000000000000;
  *(int64x2_t *)(v1 + 832) = result;
  *(int64x2_t *)(v1 + 848) = result;
  return result;
}

uint64_t sub_100CEE94C(uint64_t a1)
{
  uint64_t v2 = sub_100CEE6BC(a1);
  *(unsigned char *)(v2 + 96) = 0;
  *(void *)(v2 + 104) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 169) = 0u;
  sub_100CEE6BC(v2 + 192);
  *(unsigned char *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0x3FF0000000000000;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(unsigned char *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0x3FF0000000000000;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(unsigned char *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0x3FE0000000000000;
  *(void *)(a1 + 384) = 0x3FE0000000000000;
  *(unsigned char *)(a1 + 392) = 0;
  sub_100CEE9C8(a1);
  return a1;
}

double sub_100CEE9C8(uint64_t a1)
{
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  sub_100CEE6BC((uint64_t)&v10);
  long long v2 = v13;
  *(_OWORD *)(a1 + 32) = v12;
  *(_OWORD *)(a1 + 48) = v2;
  long long v3 = v15;
  *(_OWORD *)(a1 + 64) = v14;
  *(_OWORD *)(a1 + 80) = v3;
  long long v4 = v11;
  *(_OWORD *)a1 = v10;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0;
  uint64_t v16 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  sub_100CEE6BC((uint64_t)&v10 + 8);
  long long v5 = v12;
  *(_OWORD *)(a1 + 232) = v13;
  long long v6 = v15;
  *(_OWORD *)(a1 + 248) = v14;
  *(_OWORD *)(a1 + 264) = v6;
  double result = *(double *)&v10;
  long long v8 = v11;
  *(_OWORD *)(a1 + 184) = v10;
  *(_OWORD *)(a1 + 200) = v8;
  uint64_t v9 = v16;
  *(_OWORD *)(a1 + 216) = v5;
  *(void *)(a1 + 280) = v9;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0x3FF0000000000000;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0x3FF0000000000000;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0x3FE0000000000000;
  *(void *)(a1 + 384) = 0x3FE0000000000000;
  *(unsigned char *)(a1 + 392) = 0;
  return result;
}

uint64_t sub_100CEEAAC(uint64_t a1)
{
  uint64_t v2 = a1 + 547;
  *(void *)a1 = off_1022F1A98;
  sub_100134750((void *)(a1 + 8), "");
  *(unsigned char *)(a1 + 33) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = xmmword_101D1C450;
  *(_OWORD *)(a1 + 88) = xmmword_101D8B010;
  *(_OWORD *)(a1 + 104) = xmmword_101D8B020;
  *(int64x2_t *)(a1 + 120) = vdupq_n_s64(0x3EE4F8B588E368F1uLL);
  *(_OWORD *)(a1 + 136) = xmmword_101D8B020;
  *(_OWORD *)(a1 + 152) = xmmword_101D8B010;
  *(_OWORD *)(a1 + 168) = xmmword_101D8B020;
  *(int64x2_t *)(a1 + 184) = vdupq_n_s64(0x3F9B573EAB367A10uLL);
  *(_OWORD *)(a1 + 200) = xmmword_101D8B020;
  *(_OWORD *)(a1 + 216) = xmmword_101D8B010;
  *(_OWORD *)(a1 + 232) = xmmword_101D8B020;
  *(_OWORD *)(a1 + 248) = xmmword_101D8B030;
  *(void *)(a1 + 264) = 0x3FF0000000000000;
  __asm { FMOV            V2.2D, #1.0 }
  *(_OWORD *)(a1 + 272) = _Q2;
  *(_OWORD *)(a1 + 288) = xmmword_101D8B040;
  *(_OWORD *)(a1 + 304) = xmmword_101D8B050;
  *(_OWORD *)(a1 + 320) = xmmword_101D8B060;
  *(_OWORD *)(a1 + 336) = xmmword_101D8B070;
  *(_OWORD *)(a1 + 352) = xmmword_101D8B080;
  *(_OWORD *)(a1 + 368) = xmmword_101D8B090;
  *(_OWORD *)(a1 + 384) = xmmword_101D8B0A0;
  *(_OWORD *)(a1 + 400) = xmmword_101D8B0B0;
  *(void *)(a1 + 416) = 0x3F847AE147AE147BLL;
  *(_DWORD *)(a1 + 424) = 2;
  *(_OWORD *)(a1 + 432) = xmmword_101D8B0C0;
  *(_OWORD *)(a1 + 448) = xmmword_101D8B0D0;
  *(_OWORD *)(a1 + 464) = xmmword_101D8B0E0;
  *(_OWORD *)(a1 + 480) = xmmword_101D8B0F0;
  *(_OWORD *)(a1 + 496) = xmmword_101D8B100;
  *(_OWORD *)(a1 + 512) = xmmword_101D8B110;
  *(_OWORD *)(a1 + 528) = xmmword_101D8B120;
  *(_WORD *)(a1 + 544) = 257;
  *(unsigned char *)(a1 + 546) = 1;
  *(_DWORD *)uint64_t v2 = 0;
  *(unsigned char *)(a1 + 551) = 1;
  *(_DWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 560) = xmmword_101D8B130;
  *(_DWORD *)(a1 + 576) = 0x1000000;
  *(unsigned char *)(a1 + 580) = 0;
  *(_DWORD *)(a1 + 584) = 0;
  *(unsigned char *)(a1 + 588) = 0;
  *(void *)(v2 + 42) = 0x101010101010101;
  *(unsigned char *)(a1 + 597) = 0;
  *(void *)(a1 + 603) = 0x101010101010101;
  *(void *)(a1 + 598) = 0x101010101010101;
  *(_DWORD *)(a1 + 612) = 1096810496;
  *(void *)(a1 + 616) = 0x3FE0000000000000;
  *(_OWORD *)(a1 + 624) = xmmword_101D8B140;
  *(_WORD *)(a1 + 640) = 0;
  *(void *)(a1 + 648) = 0x3F847AE147AE147BLL;
  *(_OWORD *)(a1 + 656) = xmmword_101D8B150;
  *(_OWORD *)(a1 + 672) = xmmword_101D8B160;
  *(_OWORD *)(a1 + 688) = xmmword_101D8B170;
  *(_OWORD *)(a1 + 704) = xmmword_101D8B180;
  *(_OWORD *)(a1 + 720) = xmmword_101D8B190;
  *(_OWORD *)(a1 + 736) = xmmword_101D8B1A0;
  *(_OWORD *)(a1 + 752) = xmmword_101D8B1B0;
  *(_OWORD *)(a1 + 768) = xmmword_101D8B1C0;
  *(_OWORD *)(a1 + 784) = xmmword_101D8B1D0;
  *(_OWORD *)(a1 + 800) = xmmword_101D8B1E0;
  *(void *)(a1 + 816) = 0x3DB5FD7FE1796495;
  *(_DWORD *)(a1 + 824) = 2;
  *(void *)(a1 + 832) = 0x3FE0000000000000;
  *(_WORD *)(a1 + 840) = 256;
  *(_OWORD *)(a1 + 848) = xmmword_101D8B1F0;
  *(_OWORD *)(a1 + 864) = xmmword_101D8B200;
  *(_OWORD *)(a1 + 880) = xmmword_101D8B210;
  *(_OWORD *)(a1 + 896) = xmmword_101D8B220;
  *(_OWORD *)(a1 + 912) = xmmword_101D8B230;
  *(_OWORD *)(a1 + 928) = xmmword_101D8B240;
  *(_OWORD *)(a1 + 944) = xmmword_101D8B250;
  *(_OWORD *)(a1 + 960) = xmmword_101D47540;
  *(void *)(a1 + 976) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 984) = 350;
  *(_OWORD *)(a1 + 992) = xmmword_101D8B260;
  *(_OWORD *)(a1 + 1008) = xmmword_101D8B270;
  *(void *)(a1 + 1024) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 1032) = 3;
  *(_OWORD *)(a1 + 1040) = xmmword_101D8B280;
  *(_OWORD *)(a1 + 1056) = xmmword_101D8B290;
  *(_OWORD *)(a1 + 1072) = xmmword_101D8B2A0;
  *(_OWORD *)(a1 + 1088) = _Q2;
  *(_OWORD *)(a1 + 1104) = xmmword_101D8B2B0;
  *(_OWORD *)(a1 + 1120) = xmmword_101D8B2C0;
  *(_OWORD *)(a1 + 1136) = xmmword_101D8B2D0;
  *(_OWORD *)(a1 + 1152) = xmmword_101D8B2E0;
  *(_OWORD *)(a1 + 1168) = xmmword_101D8B2F0;
  *(void *)(a1 + 1184) = 0x4018000000000000;
  *(_DWORD *)(a1 + 1192) = 3;
  *(_OWORD *)(a1 + 1200) = xmmword_101D8B300;
  *(_OWORD *)(a1 + 1216) = xmmword_101D81980;
  *(_OWORD *)(a1 + 1232) = xmmword_101D8B310;
  *(_OWORD *)(a1 + 1248) = xmmword_101D8B320;
  *(_OWORD *)(a1 + 1264) = xmmword_101D8B300;
  *(_DWORD *)(a1 + 1280) = 6;
  *(void *)(a1 + 1288) = 0x4000000000000000;
  *(_DWORD *)(a1 + 1296) = 6;
  *(void *)(a1 + 1304) = 0x4000000000000000;
  *(_DWORD *)(a1 + 1312) = 2;
  *(void *)(a1 + 1320) = 0x4000000000000000;
  *(_OWORD *)(a1 + 1328) = xmmword_101D8B330;
  *(_OWORD *)(a1 + 1344) = xmmword_101D8B340;
  *(_OWORD *)(a1 + 1360) = xmmword_101D8B350;
  *(_OWORD *)(a1 + 1376) = xmmword_101D8B360;
  __asm { FMOV            V2.2D, #6.0 }
  *(_OWORD *)(a1 + 1392) = _Q2;
  *(_OWORD *)(a1 + 1408) = xmmword_101D8B370;
  __asm { FMOV            V2.2D, #3.0 }
  *(_OWORD *)(a1 + 1424) = _Q2;
  *(_OWORD *)(a1 + 1440) = _Q2;
  *(_OWORD *)(a1 + 1456) = xmmword_101D8B380;
  *(_DWORD *)(a1 + 1472) = 2;
  *(void *)(a1 + 1480) = 0x4024000000000000;
  *(int64x2_t *)(a1 + 1488) = vdupq_n_s64(0x3FE0CCCCCCCCCCCDuLL);
  *(_OWORD *)(a1 + 1504) = xmmword_101D8B390;
  *(_OWORD *)(a1 + 1520) = xmmword_101D8B3A0;
  *(_OWORD *)(a1 + 1536) = xmmword_101D8B3B0;
  *(int64x2_t *)(a1 + 1552) = vdupq_n_s64(0x4066800000000000uLL);
  *(_OWORD *)(a1 + 1568) = xmmword_101D8B3C0;
  *(_OWORD *)(a1 + 1584) = xmmword_101D8B3D0;
  *(_OWORD *)(a1 + 1600) = xmmword_101D8B3E0;
  *(_OWORD *)(a1 + 1616) = xmmword_101D8B3F0;
  *(_OWORD *)(a1 + 1632) = xmmword_101D8B400;
  *(void *)(a1 + 1648) = 0;
  *(_OWORD *)(a1 + 1656) = xmmword_101D8B790;
  *(_OWORD *)(a1 + 1672) = unk_101D8B7A0;
  *(_OWORD *)(a1 + 1688) = xmmword_101D8B790;
  *(_OWORD *)(a1 + 1704) = unk_101D8B7A0;
  *(_OWORD *)(a1 + 1720) = xmmword_101D8B790;
  *(_OWORD *)(a1 + 1736) = unk_101D8B7A0;
  *(_OWORD *)(a1 + 1752) = xmmword_101D8B790;
  *(_OWORD *)(a1 + 1768) = unk_101D8B7A0;
  *(_OWORD *)(a1 + 1784) = xmmword_101D8B790;
  *(_OWORD *)(a1 + 1800) = unk_101D8B7A0;
  *(_OWORD *)(a1 + 1816) = xmmword_101D8B790;
  *(_OWORD *)(a1 + 1832) = unk_101D8B7A0;
  *(_OWORD *)(a1 + 1848) = xmmword_101D8B750;
  *(_OWORD *)(a1 + 1864) = unk_101D8B760;
  *(_OWORD *)(a1 + 1880) = xmmword_101D8B730;
  *(_OWORD *)(a1 + 1896) = unk_101D8B740;
  *(_OWORD *)(a1 + 1912) = xmmword_101D8B750;
  *(_OWORD *)(a1 + 1928) = unk_101D8B760;
  *(_OWORD *)(a1 + 1944) = xmmword_101D8B770;
  *(_OWORD *)(a1 + 1960) = unk_101D8B780;
  *(_OWORD *)(a1 + 1976) = xmmword_101D8B790;
  *(_OWORD *)(a1 + 1992) = unk_101D8B7A0;
  *(_OWORD *)(a1 + 2008) = xmmword_101D8B790;
  *(_OWORD *)(a1 + 2024) = unk_101D8B7A0;
  *(_OWORD *)(a1 + 2040) = xmmword_101D8B790;
  *(_OWORD *)(a1 + 2056) = unk_101D8B7A0;
  *(_OWORD *)(a1 + 2072) = xmmword_101D8B790;
  *(_OWORD *)(a1 + 2088) = unk_101D8B7A0;
  *(unsigned char *)(a1 + 2104) = 0;
  *(_OWORD *)(a1 + 2112) = xmmword_101D8B410;
  *(_OWORD *)(a1 + 2128) = xmmword_101D8B420;
  *(_OWORD *)(a1 + 2144) = xmmword_101D8B380;
  *(_OWORD *)(a1 + 2160) = xmmword_101D8B430;
  *(_OWORD *)(a1 + 2176) = xmmword_101D8B440;
  *(_WORD *)(a1 + 2192) = 0;
  *(void *)(a1 + 2200) = 0x4034000000000000;
  *(_DWORD *)(a1 + 2208) = 0;
  *(void *)(a1 + 2216) = 0x404E000000000000;
  *(_OWORD *)(a1 + 2224) = xmmword_101D8B450;
  *(_OWORD *)(a1 + 2240) = xmmword_101D8B460;
  *(_OWORD *)(a1 + 2256) = xmmword_101D8B470;
  *(void *)(a1 + 2272) = 0x3FE3333333333333;
  *(_DWORD *)(a1 + 2280) = 1;
  *(int64x2_t *)(a1 + 2288) = vdupq_n_s64(0x3FE3333333333333uLL);
  *(_WORD *)(a1 + 2304) = 0;
  *(void *)(a1 + 2344) = 0;
  *(_OWORD *)(a1 + 2328) = 0u;
  *(_OWORD *)(a1 + 2312) = 0u;
  *(void *)(a1 + 2352) = 0x3FD51EB851EB851FLL;
  *(_OWORD *)(a1 + 2360) = xmmword_101D8B7B0;
  *(_OWORD *)(a1 + 2376) = unk_101D8B7C0;
  *(_WORD *)(a1 + 2392) = 257;
  *(unsigned char *)(a1 + 2394) = 1;
  *(_OWORD *)(a1 + 2400) = xmmword_101D8B7D0;
  *(_OWORD *)(a1 + 2416) = unk_101D8B7E0;
  *(_OWORD *)(a1 + 2432) = xmmword_101D8B480;
  *(_OWORD *)(a1 + 2448) = xmmword_101D8B490;
  *(_OWORD *)(a1 + 2464) = xmmword_101D8B4A0;
  __asm { FMOV            V1.2D, #0.5 }
  *(_OWORD *)(a1 + 2480) = _Q1;
  *(int64x2_t *)(a1 + 2496) = vdupq_n_s64(0x3FEE666666666666uLL);
  *(_OWORD *)(a1 + 2512) = xmmword_101D534A0;
  *(_OWORD *)(a1 + 2528) = xmmword_101D8B4B0;
  *(unsigned char *)(a1 + 2544) = 1;
  *(void *)(a1 + 2552) = 0x40BC200000000000;
  *(_WORD *)(a1 + 2560) = 1;
  *(unsigned char *)(a1 + 2562) = 0;
  *(void *)(a1 + 2568) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 2576) = xmmword_101D8B8E0;
  *(_OWORD *)(a1 + 2640) = xmmword_101D8B920;
  *(_OWORD *)(a1 + 2656) = xmmword_101D8B7F0;
  *(_OWORD *)(a1 + 2720) = xmmword_101D8B830;
  *(_OWORD *)(a1 + 2704) = unk_101D8B820;
  *(_OWORD *)(a1 + 2624) = unk_101D8B910;
  *(_OWORD *)(a1 + 2608) = xmmword_101D8B900;
  *(_OWORD *)(a1 + 2592) = *(_OWORD *)algn_101D8B8F0;
  *(_OWORD *)(a1 + 2688) = xmmword_101D8B810;
  *(_OWORD *)(a1 + 2672) = unk_101D8B800;
  *(unsigned char *)(a1 + 2736) = 0;
  *(_OWORD *)(a1 + 2808) = xmmword_101D8B880;
  *(_OWORD *)(a1 + 2776) = xmmword_101D8B860;
  *(_OWORD *)(a1 + 2792) = unk_101D8B870;
  *(_OWORD *)(a1 + 2744) = xmmword_101D8B840;
  *(_OWORD *)(a1 + 2760) = unk_101D8B850;
  *(_OWORD *)(a1 + 2888) = xmmword_101D8B8D0;
  *(_OWORD *)(a1 + 2856) = xmmword_101D8B8B0;
  *(_OWORD *)(a1 + 2872) = unk_101D8B8C0;
  *(_OWORD *)(a1 + 2824) = xmmword_101D8B890;
  *(_OWORD *)(a1 + 2840) = unk_101D8B8A0;
  *(_OWORD *)(a1 + 2952) = unk_101D8B910;
  *(_OWORD *)(a1 + 2968) = xmmword_101D8B920;
  *(_OWORD *)(a1 + 2920) = *(_OWORD *)algn_101D8B8F0;
  *(_OWORD *)(a1 + 2936) = xmmword_101D8B900;
  *(_OWORD *)(a1 + 2904) = xmmword_101D8B8E0;
  *(_OWORD *)(a1 + 3032) = unk_101D8B960;
  *(_OWORD *)(a1 + 3048) = xmmword_101D8B970;
  *(_OWORD *)(a1 + 3000) = unk_101D8B940;
  *(_OWORD *)(a1 + 3016) = xmmword_101D8B950;
  *(_OWORD *)(a1 + 2984) = xmmword_101D8B930;
  *(void *)(a1 + 3064) = 0x3FEE666666666666;
  *(_OWORD *)(a1 + 3072) = xmmword_101D8B4C0;
  *(_OWORD *)(a1 + 3088) = xmmword_101D8B4D0;
  *(_OWORD *)(a1 + 3104) = xmmword_101D8B4E0;
  *(_OWORD *)(a1 + 3120) = xmmword_101D8B4F0;
  *(_OWORD *)(a1 + 3136) = xmmword_101D8B500;
  *(_OWORD *)(a1 + 3152) = xmmword_101D8B510;
  *(_OWORD *)(a1 + 3168) = xmmword_101D8B520;
  *(_OWORD *)(a1 + 3184) = xmmword_101D8B530;
  *(_OWORD *)(a1 + 3200) = xmmword_101D8B540;
  *(_OWORD *)(a1 + 3216) = xmmword_101D8B550;
  *(_OWORD *)(a1 + 3232) = xmmword_101D8B100;
  *(_OWORD *)(a1 + 3248) = xmmword_101D8B560;
  *(_OWORD *)(a1 + 3264) = xmmword_101D8B570;
  *(_OWORD *)(a1 + 3280) = xmmword_101D8B580;
  *(_OWORD *)(a1 + 3296) = xmmword_101D8B590;
  __asm { FMOV            V0.2D, #5.0 }
  *(_OWORD *)(a1 + 3312) = _Q0;
  *(_OWORD *)(a1 + 3328) = xmmword_101D8B5A0;
  *(void *)(a1 + 3344) = 0x3FE999999999999ALL;
  *(unsigned char *)(a1 + 3352) = 1;
  *(_OWORD *)(a1 + 3360) = xmmword_101D8B5B0;
  *(void *)(a1 + 3376) = 0x3FE0000000000000;
  *(void *)(a1 + 3384) = 0x400000005;
  *(_OWORD *)(a1 + 3392) = xmmword_101D8B5C0;
  *(_OWORD *)(a1 + 3408) = xmmword_101D8B5D0;
  *(_OWORD *)(a1 + 3424) = xmmword_101D8B5E0;
  *(int64x2_t *)(a1 + 3440) = vdupq_n_s64(0x4014880F19EA2B99uLL);
  *(_OWORD *)(a1 + 3456) = xmmword_101D8B5F0;
  *(_OWORD *)(a1 + 3472) = xmmword_101D8B600;
  *(void *)(a1 + 3488) = 0x4022000000000000;
  *(unsigned char *)(a1 + 3496) = 0;
  *(_OWORD *)(a1 + 3504) = xmmword_101D8B610;
  *(_WORD *)(a1 + 3520) = 257;
  *(void *)(a1 + 3528) = 0x4072C00000000000;
  *(void *)(a1 + 3536) = 0x412E848000000000;
  *(void *)(a1 + 3544) = 2;
  *(unsigned char *)(a1 + 3552) = 1;
  *(void *)(a1 + 3560) = 0x4014000000000000;
  *(void *)(a1 + 3568) = 0x3F847AE147AE147BLL;
  *(_DWORD *)(a1 + 3576) = 5;
  *(unsigned char *)(a1 + 3580) = 1;
  *(_OWORD *)(a1 + 3584) = xmmword_101D8B620;
  *(void *)(a1 + 3600) = 0x4014000000000000;
  *(void *)(a1 + 3608) = 100;
  *(_OWORD *)(a1 + 3616) = xmmword_101D8B630;
  *(void *)(a1 + 3632) = 0x3FD3333333333333;
  *(void *)(a1 + 3640) = 3;
  *(unsigned char *)(a1 + 3648) = 0;
  *(_DWORD *)(a1 + 3652) = 0;
  *(unsigned char *)(a1 + 3656) = 0;
  sub_100134750((void *)(a1 + 3664), "");
  *(_DWORD *)(a1 + 3688) = 10;
  *(_WORD *)(a1 + 3692) = 0;
  sub_100134750((void *)(a1 + 3696), "raven_output.bin");
  *(_WORD *)(a1 + 3720) = 256;
  *(unsigned char *)(a1 + 3722) = 0;
  sub_100134750((void *)(a1 + 3728), "raven_debug.txt");
  *(_WORD *)(a1 + 3752) = 0;
  *(unsigned char *)(a1 + 3754) = 0;
  sub_100134750((void *)(a1 + 3760), "raven_msr.txt");
  *(unsigned char *)(a1 + 3788) = 1;
  *(_DWORD *)(a1 + 3784) = 16843009;
  *(_WORD *)(a1 + 3789) = 0;
  *(void *)(v2 + 3244) = 0x101010101010101;
  *(unsigned char *)(a1 + 3799) = 0;
  *(_DWORD *)(a1 + 3800) = 16843009;
  *(unsigned char *)(a1 + 3804) = 0;
  *(_DWORD *)(a1 + 3808) = 16843009;
  *(_DWORD *)(a1 + 3805) = 16843009;
  *(unsigned char *)(a1 + 3812) = 0;
  *(unsigned char *)(a1 + 3817) = 1;
  *(_DWORD *)(a1 + 3813) = 16843009;
  *(_WORD *)(a1 + 3818) = 256;
  *(unsigned char *)(a1 + 3820) = 1;
  *(_DWORD *)(a1 + 3824) = 0;
  *(unsigned char *)(a1 + 3828) = 0;
  return a1;
}

void sub_100CEF538(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 3751) < 0) {
    operator delete(*v7);
  }
  if (*(char *)(v2 + 3719) < 0) {
    operator delete(*v6);
  }
  if (*(char *)(v2 + 3687) < 0) {
    operator delete(*v5);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(v2 + 2328);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  sub_1000A7B4C((void ***)va);
  *(void *)uint64_t v2 = v4;
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v3);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100CEF5B8(uint64_t a1, uint64_t a2, char a3)
{
  *(unsigned char *)(a1 + 32) = a3;
  sub_100826DE8(v24);
  if ((*((unsigned char *)&v24[4] + (unint64_t)*(v24[0] - 3)) & 5) != 0)
  {
    LOWORD(__str.__r_.__value_.__l.__data_) = 0;
    v21.__r_.__value_.__s.__data_[0] = 2;
    cnprint::CNPrinter::Print();
  }
  else
  {
    std::string::assign((std::string *)(a1 + 8), "");
    memset(&__str, 0, sizeof(__str));
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v24 + (unint64_t)*(v24[0] - 3)));
      uint64_t v4 = std::locale::use_facet((const std::locale *)&v21, &std::ctype<char>::id);
      unsigned __int8 v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
      std::locale::~locale((std::locale *)&v21);
      long long v6 = sub_10044F5DC(v24, (uint64_t)&__str, v5);
      std::string::size_type v7 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      LOBYTE(v8) = *((unsigned char *)&__str.__r_.__value_.__s + 23);
      if ((*((unsigned char *)v6 + *(void *)(*v6 - 24) + 32) & 5) != 0) {
        break;
      }
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int64_t v10 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      else {
        int64_t v10 = __str.__r_.__value_.__l.__size_;
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_str = &__str;
      }
      else {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if (v10 >= 1)
      {
        long long v12 = (char *)p_str + v10;
        long long v13 = p_str;
        do
        {
          long long v14 = memchr(v13, 35, v10);
          if (!v14) {
            break;
          }
          if (*v14 == 35)
          {
            if (v14 != v12 && v14 - (unsigned char *)p_str != -1)
            {
              std::string::basic_string(&v21, &__str, 0, v14 - (unsigned char *)p_str, (std::allocator<char> *)&v23);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              std::string __str = v21;
              std::string::size_type v7 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
              std::string::size_type size = v21.__r_.__value_.__l.__size_;
              std::string::size_type v8 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
            }
            break;
          }
          long long v13 = (std::string *)(v14 + 1);
          int64_t v10 = v12 - (unsigned char *)v13;
        }
        while (v12 - (unsigned char *)v13 >= 1);
      }
      if ((v8 & 0x80u) != 0) {
        std::string::size_type v7 = size;
      }
      sub_1001110E4((uint64_t)&v21, v7 + 1);
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v15 = &v21;
      }
      else {
        long long v15 = (std::string *)v21.__r_.__value_.__r.__words[0];
      }
      if (v7)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v16 = &__str;
        }
        else {
          uint64_t v16 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        memmove(v15, v16, v7);
      }
      *(_WORD *)((char *)&v15->__r_.__value_.__l.__data_ + v7) = 10;
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        double v17 = &v21;
      }
      else {
        double v17 = (std::string *)v21.__r_.__value_.__r.__words[0];
      }
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v18 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v18 = v21.__r_.__value_.__l.__size_;
      }
      std::string::append((std::string *)(a1 + 8), (const std::string::value_type *)v17, v18);
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  std::filebuf::~filebuf();
  std::istream::~istream();
  std::ios::~ios();
  return v19;
}

void sub_100CEF974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23)
{
}

uint64_t sub_100CEF9DC(uint64_t a1, const std::string::value_type *a2, char a3)
{
  *(unsigned char *)(a1 + 32) = a3;
  std::string::assign((std::string *)(a1 + 8), a2);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 32);

  return v4(a1);
}

uint64_t sub_100CEFA3C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  long long v6 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v4;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return a1;
}

uint64_t sub_100CEFA98(uint64_t a1)
{
  if (*(char *)(a1 + 3783) < 0) {
    operator delete(*(void **)(a1 + 3760));
  }
  if (*(char *)(a1 + 3751) < 0) {
    operator delete(*(void **)(a1 + 3728));
  }
  if (*(char *)(a1 + 3719) < 0) {
    operator delete(*(void **)(a1 + 3696));
  }
  if (*(char *)(a1 + 3687) < 0) {
    operator delete(*(void **)(a1 + 3664));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 2328);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  uint64_t v4 = (void **)(a1 + 40);
  sub_1000A7B4C(&v4);
  *(void *)a1 = off_1022F1A98;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_100CEFB68(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100CEFB98(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_100CEFBC8(uint64_t a1)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = 0x300000003;
  *(void *)(a1 + 16) = off_1022DC578;
  *(_OWORD *)(a1 + 24) = xmmword_101D71150;
  *(void *)(a1 + 48) = a1 + 56;
  return a1;
}

void sub_100CEFC60(_Unwind_Exception *a1)
{
  cnnavigation::details::JacobianBase::~JacobianBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100CEFC74(uint64_t result, unsigned int a2, unsigned int a3)
{
  *(void *)(result + 24) = 0x300000003;
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = off_1022DC578;
  if (a2 > 3)
  {
    long long v3 = "this->max_num_rows_ >= num_rows";
    int v4 = 422;
    goto LABEL_6;
  }
  if (a3 >= 4)
  {
    long long v3 = "this->max_num_cols_ >= num_cols";
    int v4 = 423;
LABEL_6:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v4, v3);
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100CEFD1C(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_1022CAFC0;
  _Unwind_Resume(a1);
}

void sub_100CEFD3C()
{
}

void sub_100CEFD7C()
{
}

void sub_100CEFDA0()
{
}

void sub_100CEFDE0()
{
}

void sub_100CEFE04()
{
}

void sub_100CEFE44()
{
}

void sub_100CEFE68()
{
}

void sub_100CEFEA8()
{
}

void sub_100CEFECC(void *a1)
{
  *a1 = off_1022CAFC0;
  operator delete();
}

void sub_100CEFEFC(uint64_t a1)
{
  sub_10082938C(a1, v1);
}

void sub_100CEFF20(void *a1)
{
  *a1 = off_1022CAFC0;
  operator delete();
}

void sub_100CEFF50(uint64_t a1)
{
  sub_10082938C(a1, v1);
}

_DWORD *sub_100CEFFA0(int a1, int a2, _DWORD *a3)
{
  if (!a3[6]) {
    sub_101A8A52C();
  }
  int v4 = a3[7];
  if (!v4) {
    sub_101A8A558();
  }
  int v6 = a2 - a1;
  if (a2 == a1)
  {
    sub_100062B3C(a3, 1, 1);
    double result = (_DWORD *)sub_100ACB58C((uint64_t)a3, 0);
    *double result = a1;
  }
  else if (a2 - a1 < 0)
  {
    return sub_100062B3C(a3, 0, 0);
  }
  else
  {
    if (v4 <= v6) {
      sub_101A8A584();
    }
    int v8 = v6 + 1;
    sub_100062B3C(a3, 1, v6 + 1);
    unsigned int v9 = 0;
    do
    {
      double result = (_DWORD *)sub_100ACB58C((uint64_t)a3, v9);
      *double result = a1 + v9++;
    }
    while (v8 != v9);
  }
  return result;
}

_DWORD *sub_100CF0090(uint64_t a1, _DWORD *a2)
{
  if ((_DWORD *)a1 == a2) {
    sub_101A7E8C0();
  }
  double result = sub_100062B3C(a2, *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 8));
  int v5 = a2[2];
  if (v5)
  {
    int v6 = 0;
    int v7 = a2[3];
    do
    {
      if (v7)
      {
        for (int i = 0; i != v7; ++i)
        {
          int v9 = sub_100CF0208(a1, i, v6);
          double result = (_DWORD *)sub_100CF024C((uint64_t)a2, v6, i);
          *double result = v9;
        }
      }
      ++v6;
    }
    while (v6 != v5);
  }
  return result;
}

uint64_t sub_100CF013C(uint64_t result, unsigned int a2, unsigned int a3)
{
  *(void *)(result + 24) = 0x100000003;
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = off_1022DC6D8;
  if (a2 > 3)
  {
    long long v3 = "this->max_num_rows_ >= num_rows";
    int v4 = 422;
    goto LABEL_6;
  }
  if (a3 >= 2)
  {
    long long v3 = "this->max_num_cols_ >= num_cols";
    int v4 = 423;
LABEL_6:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v4, v3);
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100CF01E8(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_1022DC6A8;
  _Unwind_Resume(a1);
}

uint64_t sub_100CF0208(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (!v3) {
    sub_101A7E8EC();
  }
  unsigned int v4 = a2 + *(_DWORD *)(a1 + 20) * a3;
  if ((v4 & 0x80000000) != 0) {
    sub_101A7E918();
  }
  if ((signed int)v4 >= *(_DWORD *)(a1 + 16)) {
    sub_101A7E944();
  }
  return *(unsigned int *)(v3 + 4 * v4);
}

uint64_t sub_100CF024C(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (!v3) {
    sub_101A7D9A0();
  }
  unsigned int v4 = a2 + *(_DWORD *)(a1 + 20) * a3;
  if ((v4 & 0x80000000) != 0) {
    sub_101A7D9CC();
  }
  if ((signed int)v4 >= *(_DWORD *)(a1 + 16)) {
    sub_101A7D9F8();
  }
  return v3 + 4 * v4;
}

void sub_100CF0290(void *a1)
{
  a1[22] = off_1022DC6A8;
  a1[15] = off_1022DC6A8;
  *a1 = off_1022CAFC0;
  operator delete();
}

uint64_t sub_100CF0300(uint64_t a1, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *a2)
{
  v11.__m_ = (std::unique_lock<std::mutex>::mutex_type *)a1;
  v11.__owns_ = 1;
  std::mutex::lock((std::mutex *)a1);
  if (std::chrono::steady_clock::now().__d_.__rep_ < *a2)
  {
    while (1)
    {
      if (!*(unsigned char *)(a1 + 112)) {
        goto LABEL_20;
      }
      if (std::chrono::steady_clock::now().__d_.__rep_ >= *a2) {
        goto LABEL_18;
      }
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v4 = *a2;
      v5.__d_.__rep_ = v4 - std::chrono::steady_clock::now().__d_.__rep_;
      if (v5.__d_.__rep_ >= 1) {
        break;
      }
LABEL_17:
      if (std::chrono::steady_clock::now().__d_.__rep_ >= *a2) {
        goto LABEL_18;
      }
    }
    std::chrono::steady_clock::now();
    v6.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (v6.__d_.__rep_)
    {
      if (v6.__d_.__rep_ < 1)
      {
        if ((unint64_t)v6.__d_.__rep_ < 0xFFDF3B645A1CAC09)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v7 = 0x8000000000000000;
          goto LABEL_15;
        }
      }
      else if ((unint64_t)v6.__d_.__rep_ > 0x20C49BA5E353F7)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v7 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_13;
      }
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v7 = 1000 * v6.__d_.__rep_;
    }
    else
    {
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v7 = 0;
    }
LABEL_13:
    if (v7 > (v5.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
    {
      v8.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_16:
      std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 64), &v11, v8);
      std::chrono::steady_clock::now();
      goto LABEL_17;
    }
LABEL_15:
    v8.__d_.__rep_ = v7 + v5.__d_.__rep_;
    goto LABEL_16;
  }
LABEL_18:
  if (*(unsigned char *)(a1 + 112))
  {
    uint64_t v9 = 0;
  }
  else
  {
LABEL_20:
    uint64_t v9 = 1;
    *(unsigned char *)(a1 + 112) = 1;
  }
  if (v11.__owns_) {
    std::mutex::unlock(v11.__m_);
  }
  return v9;
}

void *sub_100CF0458(void *a1, long long *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = 170 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[5] + a1[4])
  {
    sub_100CF0524(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }
  if (v5 == v4)
  {
    double result = 0;
  }
  else
  {
    unint64_t v7 = a1[5] + a1[4];
    double result = (void *)(*(void *)(v4 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  }
  if (*((char *)a2 + 23) < 0)
  {
    double result = sub_1000DC48C(result, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v9 = *a2;
    result[2] = *((void *)a2 + 2);
    *(_OWORD *)double result = v9;
  }
  ++a1[5];
  return result;
}

void sub_100CF0524(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    long long v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      double v37 = &v34[8 * v36];
      double v38 = (uint64_t *)a1[1];
      std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      long long v9 = (char *)a1[1];
    }
    std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    long long v44 = (void *)a1[1];
    std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    long long v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      double v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        __int16 v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)__int16 v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      double v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  __int16 v53 = operator new(0xFF0uLL);
  sub_1000DA434(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100CF07F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100CF083C(void *a1)
{
  unint64_t v2 = a1[4];
  unint64_t v3 = *(void *)(a1[1] + 8 * (v2 / 0xAA)) + 24 * (v2 % 0xAA);
  if (*(char *)(v3 + 23) < 0)
  {
    operator delete(*(void **)v3);
    unint64_t v2 = a1[4];
  }
  uint64_t v4 = a1[5] - 1;
  a1[4] = v2 + 1;
  a1[5] = v4;

  return sub_10041FD7C((uint64_t)a1, 1);
}

void sub_100CF08C4()
{
}

void sub_100CF0998(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100CF0ADC((std::__thread_struct **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_100CF09E4(std::__thread_struct **a1)
{
  unint64_t v7 = a1;
  uint64_t v1 = std::__thread_local_data();
  unint64_t v2 = *v7;
  void *v7 = 0;
  pthread_setspecific(v1->__key_, v2);
  unint64_t v3 = v7[1];
  uint64_t v4 = (uint64_t)v7[2];
  uint64_t v5 = (std::__thread_struct_imp **)((char *)&v7[3]->__p_ + (v4 >> 1));
  if (v4) {
    unint64_t v3 = *(std::__thread_struct **)(*v5 + v3);
  }
  ((void (*)(void *))v3)(v5);
  sub_100CF0A78(&v7, 0);
  return 0;
}

void sub_100CF0A60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100CF0A78((std::__thread_struct ***)va, 0);
  _Unwind_Resume(a1);
}

std::__thread_struct ***sub_100CF0A78(std::__thread_struct ***result, std::__thread_struct **a2)
{
  unint64_t v2 = *result;
  *double result = a2;
  if (v2)
  {
    sub_100CF0ADC(v2, 0);
    operator delete();
  }
  return result;
}

std::__thread_struct *sub_100CF0ADC(std::__thread_struct **a1, std::__thread_struct *a2)
{
  double result = *a1;
  *a1 = a2;
  if (result)
  {
    std::__thread_struct::~__thread_struct(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100CF0B2C(uint64_t a1, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *a2)
{
  v13.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  v13.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  unsigned int v4 = *(_DWORD *)(a1 + 136);
  if ((v4 & 8) != 0)
  {
    uint64_t v11 = 2;
    goto LABEL_25;
  }
  if ((v4 & 4) != 0)
  {
    uint64_t v11 = ((v4 >> 2) & 1) == 0;
    goto LABEL_25;
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < *a2)
  {
    if (std::chrono::steady_clock::now().__d_.__rep_ < *a2)
    {
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v5 = *a2;
      v6.__d_.__rep_ = v5 - std::chrono::steady_clock::now().__d_.__rep_;
      if (v6.__d_.__rep_ >= 1)
      {
        std::chrono::steady_clock::now();
        v7.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v7.__d_.__rep_)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v8 = 0;
          goto LABEL_14;
        }
        if (v7.__d_.__rep_ < 1)
        {
          if ((unint64_t)v7.__d_.__rep_ >= 0xFFDF3B645A1CAC09) {
            goto LABEL_13;
          }
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v8 = 0x8000000000000000;
        }
        else
        {
          if ((unint64_t)v7.__d_.__rep_ > 0x20C49BA5E353F7)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v8 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_14;
          }
LABEL_13:
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v8 = 1000 * v7.__d_.__rep_;
LABEL_14:
          if (v8 > (v6.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v9.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_17;
          }
        }
        v9.__d_.__rep_ = v8 + v6.__d_.__rep_;
LABEL_17:
        std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 88), &v13, v9);
        std::chrono::steady_clock::now();
      }
      std::chrono::steady_clock::now();
    }
    unsigned int v10 = *(_DWORD *)(a1 + 136);
    if ((v10 & 4) != 0) {
      goto LABEL_24;
    }
  }
  unsigned int v10 = *(_DWORD *)(a1 + 136);
LABEL_24:
  uint64_t v11 = ((v10 >> 2) & 1) == 0;
  if (v13.__owns_) {
LABEL_25:
  }
    std::mutex::unlock(v13.__m_);
  return v11;
}

uint64_t sub_100CF0C94(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100E70430();
    operator delete();
  }
  return result;
}

void sub_100CF0CE4(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = off_10234BF80;
  *a1 = off_1022F1C40;
  a1[1] = 0;
  id v8 = a2;
  a1[5] = 0;
  a1[2] = v8;
  a1[3] = a3;
  a1[4] = a5;
  a1[6] = 0;
  operator new[]();
}

void sub_100CF0E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  sub_1019D78CC(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_100CF0E98(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_100CF0EAC(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

void sub_100CF0EC8(uint64_t a1)
{
  sub_100CF0FD4(a1);

  operator delete();
}

__n128 sub_100CF0F00(uint64_t a1, uint64_t a2, __n128 *a3)
{
  __n128 result = *a3;
  *(__n128 *)(*(void *)(a1 + 56) + 16 * *(unsigned int *)(a1 + 64)) = *a3;
  unsigned int v4 = *(_DWORD *)(a1 + 68);
  unsigned int v5 = *(_DWORD *)(a1 + 64) + 1;
  *(_DWORD *)(a1 + 64) = v5;
  if (v5 >= v4)
  {
    uint64_t v7 = *(void *)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 48);
    uint64_t v9 = *(void *)(a1 + 56);
    unsigned int v10 = *(void **)(a1 + 16);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100CF106C;
    v11[3] = &unk_1022CCC40;
    uint64_t v11[4] = v8;
    v11[5] = v7;
    unsigned int v12 = v5;
    v11[6] = v9;
    v11[7] = v6;
    [v10 async:v11];
    operator new[]();
  }
  return result;
}

uint64_t sub_100CF0FD4(uint64_t a1)
{
  *(void *)a1 = off_1022F1C40;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  if (*(void *)(a1 + 56)) {
    operator delete[]();
  }

  return sub_1019D78CC(a1);
}

uint64_t sub_100CF106C(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 32) + 16))()) {
    (*(void (**)(void, void, void))(a1 + 40))(*(void *)(a1 + 48), *(unsigned int *)(a1 + 64), *(void *)(a1 + 56));
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    operator delete[]();
  }
  return result;
}

void sub_100CF10E4(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = off_10234BF80;
  *a1 = off_1022F1C90;
  a1[1] = 0;
  id v8 = a2;
  a1[5] = 0;
  a1[2] = v8;
  a1[3] = a3;
  a1[4] = a5;
  a1[6] = 0;
  operator new[]();
}

void sub_100CF1294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  sub_1019D78CC(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_100CF12BC(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_100CF12D0(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

void sub_100CF12EC(uint64_t a1)
{
  sub_100CF1444(a1);

  operator delete();
}

__n128 sub_100CF1324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 56) + 120 * *(unsigned int *)(a1 + 64);
  long long v5 = *(_OWORD *)(a3 + 80);
  long long v4 = *(_OWORD *)(a3 + 96);
  long long v6 = *(_OWORD *)(a3 + 64);
  *(void *)(v3 + 112) = *(void *)(a3 + 112);
  *(_OWORD *)(v3 + 80) = v5;
  *(_OWORD *)(v3 + 96) = v4;
  *(_OWORD *)(v3 + 64) = v6;
  __n128 result = *(__n128 *)a3;
  long long v8 = *(_OWORD *)(a3 + 16);
  long long v9 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v3 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v3 + 48) = v9;
  *(__n128 *)uint64_t v3 = result;
  *(_OWORD *)(v3 + 16) = v8;
  unsigned int v10 = *(_DWORD *)(a1 + 68);
  unsigned int v11 = *(_DWORD *)(a1 + 64) + 1;
  *(_DWORD *)(a1 + 64) = v11;
  if (v11 >= v10)
  {
    uint64_t v13 = *(void *)(a1 + 24);
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v14 = *(void *)(a1 + 48);
    uint64_t v15 = *(void *)(a1 + 56);
    uint64_t v16 = *(void **)(a1 + 16);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    _OWORD v17[2] = sub_100CF14DC;
    v17[3] = &unk_1022CCC40;
    uint64_t v17[4] = v14;
    v17[5] = v13;
    unsigned int v18 = v11;
    v17[6] = v15;
    v17[7] = v12;
    [v16 async:v17];
    operator new[]();
  }
  return result;
}

uint64_t sub_100CF1444(uint64_t a1)
{
  *(void *)a1 = off_1022F1C90;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  if (*(void *)(a1 + 56)) {
    operator delete[]();
  }

  return sub_1019D78CC(a1);
}

uint64_t sub_100CF14DC(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 32) + 16))()) {
    (*(void (**)(void, void, void))(a1 + 40))(*(void *)(a1 + 48), *(unsigned int *)(a1 + 64), *(void *)(a1 + 56));
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    operator delete[]();
  }
  return result;
}

void sub_100CF1554(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = off_10234BF80;
  *a1 = off_1022F1CE0;
  a1[1] = 0;
  id v8 = a2;
  a1[5] = 0;
  a1[2] = v8;
  a1[3] = a3;
  a1[4] = a5;
  a1[6] = 0;
  operator new[]();
}

void sub_100CF16E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  sub_1019D78CC(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_100CF170C(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_100CF1720(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

void sub_100CF173C(uint64_t a1)
{
  sub_100CF185C(a1);

  operator delete();
}

__n128 sub_100CF1774(uint64_t a1, uint64_t a2, __n128 *a3)
{
  uint64_t v3 = (__n128 *)(*(void *)(a1 + 56) + 24 * *(unsigned int *)(a1 + 64));
  __n128 result = *a3;
  v3[1].n128_u64[0] = a3[1].n128_u64[0];
  *uint64_t v3 = result;
  unsigned int v5 = *(_DWORD *)(a1 + 68);
  unsigned int v6 = *(_DWORD *)(a1 + 64) + 1;
  *(_DWORD *)(a1 + 64) = v6;
  if (v6 >= v5)
  {
    uint64_t v8 = *(void *)(a1 + 24);
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 56);
    uint64_t v11 = *(void **)(a1 + 16);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    double v12[2] = sub_100CF18F4;
    v12[3] = &unk_1022CCC40;
    uint64_t v12[4] = v9;
    void v12[5] = v8;
    unsigned int v13 = v6;
    v12[6] = v10;
    v12[7] = v7;
    [v11 async:v12];
    operator new[]();
  }
  return result;
}

uint64_t sub_100CF185C(uint64_t a1)
{
  *(void *)a1 = off_1022F1CE0;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  if (*(void *)(a1 + 56)) {
    operator delete[]();
  }

  return sub_1019D78CC(a1);
}

uint64_t sub_100CF18F4(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 32) + 16))()) {
    (*(void (**)(void, void, void))(a1 + 40))(*(void *)(a1 + 48), *(unsigned int *)(a1 + 64), *(void *)(a1 + 56));
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    operator delete[]();
  }
  return result;
}

void sub_100CF196C()
{
  uint64_t v0 = operator new(0x12A0uLL);
  sub_100CF19E8(v0);
}

void sub_100CF19D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100CF19E8(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022F1D30;
  sub_100CD1A44((uint64_t)(a1 + 3));
}

void sub_100CF1A38(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100CF1A4C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022F1D30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100CF1A6C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022F1D30;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100CF1AC0(uint64_t a1)
{
  return sub_100CDB324(a1 + 24);
}

uint64_t sub_100CF1ACC(uint64_t result, unsigned int a2, unsigned int a3)
{
  *(void *)(result + 24) = 0x400000004;
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = off_1022F1B68;
  if (a2 > 4)
  {
    uint64_t v3 = "this->max_num_rows_ >= num_rows";
    int v4 = 422;
    goto LABEL_6;
  }
  if (a3 >= 5)
  {
    uint64_t v3 = "this->max_num_cols_ >= num_cols";
    int v4 = 423;
LABEL_6:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v4, v3);
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100CF1B74(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_1022CAFC0;
  _Unwind_Resume(a1);
}

uint64_t sub_100CF1B94(uint64_t result, double a2)
{
  unint64_t v2 = *(int64x2_t **)(result + 32);
  if (!v2) {
    sub_101A8A5B0();
  }
  uint64_t v3 = *(unsigned int *)(result + 16);
  if ((int)v3 > 3)
  {
    int v4 = (int64x2_t *)((char *)v2 + 8 * (v3 - 2));
    uint64_t v5 = (v3 - 1) >> 1;
    int64x2_t v6 = vdupq_lane_s64(*(uint64_t *)&a2, 0);
    do
    {
      *v2++ = v6;
      --v5;
    }
    while (v5);
    *int v4 = v6;
  }
  else if ((int)v3 >= 1)
  {
    do
    {
      *(double *)v2->i64 = a2;
      unint64_t v2 = (int64x2_t *)((char *)v2 + 8);
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_100CF1BFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0x300000003;
  *(_OWORD *)(a1 + 8) = xmmword_101D71150;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = off_1022F1BF8;
  *(void *)(a1 + 144) = 0x100000003;
  *(void *)(a1 + 112) = a2;
  *(void *)(a1 + 120) = off_1022DC6D8;
  *(_OWORD *)(a1 + 128) = xmmword_101D71190;
  *(void *)(a1 + 152) = a1 + 160;
  uint64_t v7 = a1 + 176;
  *(void *)(a1 + 200) = 0x100000003;
  *(void *)(a1 + 176) = off_1022DC6D8;
  *(_OWORD *)(a1 + 184) = xmmword_101D71190;
  *(void *)(a1 + 208) = a1 + 216;
  sub_100AC9A80(a1 + 120, a3);
  sub_100AC9A80(v7, a4);
  uint64_t v8 = *(unsigned int *)(a1 + 136);
  if (*(_DWORD *)(a1 + 24) < v8)
  {
    uint64_t v14 = "this->max_num_rows_ >= num_rows";
    int v15 = 422;
    goto LABEL_12;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 192);
  if (*(_DWORD *)(a1 + 28) < v9)
  {
    uint64_t v14 = "this->max_num_cols_ >= num_cols";
    int v15 = 423;
LABEL_12:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v15, v14);
  }
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if (v9)
  {
    int v10 = 0;
    for (uint64_t i = 0; i != v9; ++i)
    {
      if (v8)
      {
        for (uint64_t j = 0; j != v8; ++j)
          *(void *)(*(void *)(a1 + 32) + 8 * (v10 + j)) = *(void *)sub_100AC99CC(a2, *(_DWORD *)(*(void *)(a1 + 152) + 4 * j), *(_DWORD *)(*(void *)(a1 + 208) + 4 * i));
      }
      v10 += v8;
    }
  }
  return a1;
}

void sub_100CF1DC0(_Unwind_Exception *a1)
{
  v1[22] = off_1022DC6A8;
  v1[15] = off_1022DC6A8;
  *uint64_t v1 = off_1022CAFC0;
  _Unwind_Resume(a1);
}

uint64_t sub_100CF1E1C(uint64_t result, unsigned int a2, unsigned int a3)
{
  *(void *)(result + 24) = 0x100000004;
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = off_1022F1B20;
  if (a2 > 4)
  {
    uint64_t v3 = "this->max_num_rows_ >= num_rows";
    int v4 = 422;
    goto LABEL_6;
  }
  if (a3 >= 2)
  {
    uint64_t v3 = "this->max_num_cols_ >= num_cols";
    int v4 = 423;
LABEL_6:
    __assert_rtn("SetMatrixSize", "cnmatrixbase.h", v4, v3);
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100CF1EC8(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_1022CAFC0;
  _Unwind_Resume(a1);
}

void *sub_100CF1EE8(void *a1)
{
  *a1 = off_1022F1DC8;
  unint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_100CF1F34(void *a1)
{
  *a1 = off_1022F1DC8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

void *sub_100CF1FA0(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = off_1022F1DC8;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100CF1FFC(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = off_1022F1DC8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100CF2034(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_100CF2044(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void sub_100CF2084(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      if (v6)
      {
        sub_100CE24AC(v6, a2);
LABEL_12:
        sub_1000DB0A0(v5);
        return;
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022F1A68);
  }
  uint64_t v7 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)stat buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Raven: RouteHints CB called after controller deletion", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022F1A68);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLRavenController::RegisterForMapRouteHintNotifications()::(anonymous class)::operator()(const CLMapsRouteHintData &) const", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if (v5) {
    goto LABEL_12;
  }
}

void sub_100CF2254(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CF2270(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100CF22B0()
{
}

BOOL sub_100CF22BC()
{
  uint64_t v1 = qword_102419408;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

BOOL sub_100CF22DC()
{
  uint64_t v2 = *(NSObject **)(v0 + 1032);
  return os_log_type_enabled(v2, OS_LOG_TYPE_INFO);
}

BOOL sub_100CF230C()
{
  uint64_t v2 = *(NSObject **)(v0 + 1032);
  return os_signpost_enabled(v2);
}

void sub_100CF2324()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_100CF23A4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_100CF2434(_Unwind_Exception *a1)
{
}

void sub_100CF244C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D8B660;
      v0[3] = unk_101D8B670;
      v0[4] = xmmword_101D8B680;
      v0[0] = xmmword_101D8B640;
      v0[1] = unk_101D8B650;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_100CF252C(_Unwind_Exception *a1)
{
}

uint64_t sub_100CF2544()
{
  sub_100134750(qword_102480F80, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102480F80, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_102480F98, "CLRavenController");

  return __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102480F98, (void *)&_mh_execute_header);
}

BOOL sub_100CF25DC(unsigned int a1, unsigned int *a2)
{
  if (a1 <= 2) {
    *a2 = a1;
  }
  return a1 < 3;
}

void sub_100CF26A4(id a1)
{
  qword_102480FC8 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLSignificantChangeManagerSilo"];
}

void sub_100CF2764()
{
}

void sub_100CF27AC()
{
}

void sub_100CF2928(uint64_t a1, void *a2)
{
  if (qword_1024195A0 != -1) {
    dispatch_once(&qword_1024195A0, &stru_1022F2058);
  }
  uint64_t v4 = qword_1024195A8;
  if (os_log_type_enabled((os_log_t)qword_1024195A8, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)&v11[0] = 68289026;
    WORD4(v11[0]) = 2082;
    *(void *)((char *)v11 + 10) = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"SLC simulation request received by CLSignificantChangeManager\"}", (uint8_t *)v11, 0x12u);
  }
  *(void *)(a1 + 184) = 0;
  [objc_msgSend(a2, "timestamp") timeIntervalSinceReferenceDate];
  *(double *)(a1 + 192) = v5 - *(double *)(a1 + 276);
  long long v17 = 0u;
  memset(v18, 0, 28);
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v12 = 0u;
  memset(v11, 0, sizeof(v11));
  if (a2) {
    [a2 clientLocation];
  }
  long long v6 = v13;
  *(_OWORD *)(a1 + 232) = v12;
  *(_OWORD *)(a1 + 248) = v6;
  long long v7 = v11[1];
  *(_OWORD *)(a1 + 200) = v11[0];
  *(_OWORD *)(a1 + 216) = v7;
  long long v8 = v17;
  *(_OWORD *)(a1 + 296) = v16;
  *(_OWORD *)(a1 + 312) = v8;
  *(_OWORD *)(a1 + 328) = v18[0];
  *(_OWORD *)(a1 + 340) = *(_OWORD *)((char *)v18 + 12);
  long long v9 = v15;
  *(_OWORD *)(a1 + 264) = v14;
  *(_OWORD *)(a1 + 280) = v9;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  *(CFAbsoluteTime *)(a1 + 276) = Current;
  *(CFAbsoluteTime *)(a1 + 408) = Current;
  sub_100CF4544(a1);
}

void sub_100CF2AB0(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)sub_1006B766C(a1, "FenceManager", a2);
  *uint64_t v3 = off_1022F1E68;
  sub_101171D90((uint64_t)(v3 + 15));
  *(unsigned char *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = [objc_alloc((Class)CLSettingsMirror) initInUniverse:*(void *)(a1 + 32)];
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 184) = _Q0;
  *(_DWORD *)(a1 + 200) = 0xFFFF;
  *(void *)(a1 + 212) = 0;
  *(void *)(a1 + 204) = 0;
  *(_OWORD *)(a1 + 220) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 236) = _Q0;
  *(_OWORD *)(a1 + 252) = _Q0;
  *(_OWORD *)(a1 + 268) = _Q0;
  *(_DWORD *)(a1 + 284) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 288) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 312) = 0;
  *(void *)(a1 + 316) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 324) = 0x7FFFFFFF;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 328) = 0;
  *(unsigned char *)(a1 + 352) = 0;
  *(_WORD *)(a1 + 356) = 0;
  int64x2_t v9 = vdupq_n_s64(0x7FF0000000000000uLL);
  *(int64x2_t *)(a1 + 360) = v9;
  *(unsigned char *)(a1 + 376) = 0;
  *(int64x2_t *)(a1 + 384) = v9;
  *(unsigned char *)(a1 + 400) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 408) = 0;
  *(unsigned char *)(a1 + 432) = 1;
  *(void *)(a1 + 440) = 0x4000000000000000;
  *(void *)(a1 + 448) = 0;
  *(unsigned char *)(a1 + 456) = 0;
  *(void *)(a1 + 464) = [objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLClientAuthorizationCache" forClient:@"CLSignificantChangeManager"];
  sub_1006B8DA8(a1, 0);
  sub_1007E0344();
}

void sub_100CF34F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  uint64_t v33 = *(void *)(v31 + 424);
  *(void *)(v31 + 424) = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  uint64_t v34 = *(void *)(v31 + 416);
  *(void *)(v31 + 416) = 0;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  }
  sub_1006B7BEC(v31);
  _Unwind_Resume(a1);
}

void sub_100CF35B4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F1FF8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    long long v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSignificantChangeManager::onClientNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F1FF8);
    }
    int64x2_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)stat buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      long long v15 = "";
      __int16 v16 = 2082;
      long long v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSignificantChangeManager::onClientNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100CF4E44(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100CF3770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CF3790(uint64_t a1)
{
}

void sub_100CF3798(uint64_t a1)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022F2018);
  }
  uint64_t v2 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)stat buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#SLC onSettingsNotification", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022F2018);
    }
    __int16 v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSignificantChangeManager::refreshSettings()", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  id v3 = [*(id *)(a1 + 176) dictionaryForKey:@"SpoofSignificantLocationChange" defaultValue:0];
  if ([v3 hasValueForKey:@"Latitude"]
    && [v3 hasValueForKey:@"Longitude"])
  {
    long long v23 = *(_OWORD *)(a1 + 232);
    long long v24 = *(_OWORD *)(a1 + 248);
    long long v21 = *(_OWORD *)(a1 + 200);
    long long v22 = *(_OWORD *)(a1 + 216);
    long long v27 = *(_OWORD *)(a1 + 296);
    long long v28 = *(_OWORD *)(a1 + 312);
    *(_OWORD *)uint64_t v29 = *(_OWORD *)(a1 + 328);
    *(_OWORD *)&v29[12] = *(_OWORD *)(a1 + 340);
    long long v25 = *(_OWORD *)(a1 + 264);
    long long v26 = *(_OWORD *)(a1 + 280);
    [v3 doubleForKey:@"Latitude" defaultValue:0.0];
    uint64_t v5 = v4;
    [v3 doubleForKey:@"Longitude" defaultValue:0.0];
    uint64_t v7 = v6;
    [*(id *)(a1 + 176) doubleForKey:@"Timestamp" defaultValue:CFAbsoluteTimeGetCurrent()];
    uint64_t v9 = v8;
    [*(id *)(a1 + 176) doubleForKey:@"HorizontalAccuracy" defaultValue:1.0];
    *(_DWORD *)(a1 + 200) = 0xFFFF;
    *(void *)(a1 + 204) = v5;
    *(void *)(a1 + 212) = v7;
    *(void *)(a1 + 220) = v10;
    *(_OWORD *)(a1 + 228) = xmmword_101D1C570;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(a1 + 244) = _Q0;
    *(_OWORD *)(a1 + 260) = _Q0;
    *(void *)(a1 + 276) = v9;
    *(_DWORD *)(a1 + 284) = 0;
    *(void *)(a1 + 296) = 0;
    *(void *)(a1 + 304) = 0;
    *(void *)(a1 + 288) = 0xBFF0000000000000;
    *(_DWORD *)(a1 + 312) = 0;
    *(void *)(a1 + 316) = 0xBFF0000000000000;
    *(_DWORD *)(a1 + 324) = 0x7FFFFFFF;
    *(void *)(a1 + 328) = &_mh_execute_header;
    *(void *)(a1 + 336) = 0;
    *(void *)(a1 + 344) = 0;
    *(unsigned char *)(a1 + 352) = 0;
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022F2018);
    }
    __int16 v16 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      sub_1000AB340(a1 + 200);
      long long v17 = v35 >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)long long v30 = 136315138;
      *(void *)&v30[4] = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#SLC Spoofing a Significant Location Change: %s", v30, 0xCu);
      if (v35 < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022F2018);
      }
      sub_1000AB340(a1 + 200);
      if (v31 >= 0) {
        uint64_t v19 = v30;
      }
      else {
        uint64_t v19 = *(unsigned char **)v30;
      }
      int v32 = 136315138;
      uint64_t v33 = v19;
      int64_t v20 = (char *)_os_log_send_and_compose_impl();
      if (v31 < 0) {
        operator delete(*(void **)v30);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSignificantChangeManager::refreshSettings()", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    sub_100CF4544(a1);
    *(_OWORD *)(a1 + 296) = v27;
    *(_OWORD *)(a1 + 312) = v28;
    *(_OWORD *)(a1 + 328) = *(_OWORD *)v29;
    *(_OWORD *)(a1 + 340) = *(_OWORD *)&v29[12];
    *(_OWORD *)(a1 + 232) = v23;
    *(_OWORD *)(a1 + 248) = v24;
    *(_OWORD *)(a1 + 264) = v25;
    *(_OWORD *)(a1 + 280) = v26;
    *(_OWORD *)(a1 + 200) = v21;
    *(_OWORD *)(a1 + 216) = v22;
    *(unsigned char *)(a1 + 357) = 1;
  }
  else if (*(unsigned char *)(a1 + 357))
  {
    *(unsigned char *)(a1 + 357) = 0;
  }
}

void sub_100CF3C84(uint64_t a1)
{
}

void sub_100CF3C8C(uint64_t a1)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022F2018);
  }
  uint64_t v2 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)stat buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#SLC Booting up", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022F2018);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSignificantChangeManager::onStartSLC(CLPersistentTimer *)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  uint64_t v3 = *(void *)(a1 + 168);
  if (v3) {
    sub_1001165F8(v3, 1.79769313e308);
  }
  *(unsigned char *)(a1 + 160) = 1;
  sub_100199CC8((unsigned char *)a1);
}

void sub_100CF3E44(uint64_t a1)
{
}

void sub_100CF3E4C(uint64_t a1)
{
  if (*(void *)(a1 + 448))
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022F2018);
    }
    uint64_t v2 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#SLC onConsolidatedTrigger, calling requestLocationUpdate", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022F2018);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSignificantChangeManager::onConsolidatedTrigger()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    sub_100CF4BB8(a1);
    [*(id *)(a1 + 448) setNextFireDelay:1.79769313e308];
    *(unsigned char *)(a1 + 456) = 0;
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022F2018);
    }
    uint64_t v3 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#SLC ignore, onConsolidatedTrigger, shutdown?", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022F2018);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSignificantChangeManager::onConsolidatedTrigger()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
}

uint64_t sub_100CF4130(void *a1)
{
  *a1 = off_1022F1E68;
  sub_100CF4224((uint64_t)a1);
  uint64_t v2 = a1[53];
  a1[53] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[52];
  a1[52] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return sub_1006B7BEC(a1);
}

void sub_100CF41EC(void *a1)
{
  sub_100CF4130(a1);

  operator delete();
}

void sub_100CF4224(uint64_t a1)
{
  *(void *)(a1 + 464) = 0;
  [*(id *)(a1 + 448) invalidate];

  *(void *)(a1 + 448) = 0;
  uint64_t v2 = *(void *)(a1 + 424);
  *(void *)(a1 + 424) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 416);
  *(void *)(a1 + 416) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 168);
  if (v4)
  {
    sub_100998C38(v4);
    operator delete();
  }
  [*(id *)(a1 + 176) invalidate];
  uint64_t v5 = *(void **)(a1 + 176);
}

void sub_100CF4304(double a1, uint64_t a2, uint64_t a3)
{
  if (dword_102480FD8)
  {
    uint64_t v5 = +[NSDate date];
    uint64_t v6 = [+[NSCalendar currentCalendar] components:252 fromDate:v5];
    if (sub_1004BA5BC())
    {
      uint64_t v8 = sub_10003E9A4(*(_DWORD *)(a3 + 96));
      long long v17 = *(_OWORD *)(a3 + 4);
      uint64_t v9 = *(void *)(a3 + 20);
      id v10 = [(NSDateComponents *)v6 month];
      id v11 = [(NSDateComponents *)v6 day];
      id v12 = [(NSDateComponents *)v6 hour];
      id v13 = [(NSDateComponents *)v6 minute];
      id v14 = [(NSDateComponents *)v6 second];
      [(NSDate *)v5 timeIntervalSinceReferenceDate];
      CFStringRef v16 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"location: %s\n %+.8lf, %+.8lf\n acc:±%.2lfm\n distance:±%.2lfm\n date: %ld/%ld, %ld:%ld:%ld\n time: %.2lf", v8, v17, v9, *(void *)&a1, v10, v11, v12, v13, v14, v15);
      sub_100DE3130(@"SLC", 0, v16);
      CFRelease(v16);
    }
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022F2018);
  }
  uint64_t v7 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 68290051;
    int v19 = 0;
    __int16 v20 = 2082;
    long long v21 = "";
    __int16 v22 = 2050;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    __int16 v24 = 1040;
    int v25 = 156;
    __int16 v26 = 2097;
    uint64_t v27 = a3;
    __int16 v28 = 2049;
    double v29 = a1;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SLC location changed\", \"now_s\":\"%{public}.09f\", \"location\":%{private, location:CLClientLocation}.*P, \"distance\":\"%{private}f\"}", buf, 0x36u);
  }
}

void sub_100CF4544(uint64_t a1)
{
  sub_1000DB3D4((uint64_t)v8);
  long long v2 = *(_OWORD *)(a1 + 312);
  v8[6] = *(_OWORD *)(a1 + 296);
  v8[7] = v2;
  v9[0] = *(_OWORD *)(a1 + 328);
  *(_OWORD *)((char *)v9 + 12) = *(_OWORD *)(a1 + 340);
  long long v3 = *(_OWORD *)(a1 + 248);
  v8[2] = *(_OWORD *)(a1 + 232);
  v8[3] = v3;
  long long v4 = *(_OWORD *)(a1 + 280);
  uint64_t v8[4] = *(_OWORD *)(a1 + 264);
  v8[5] = v4;
  long long v5 = *(_OWORD *)(a1 + 216);
  v8[0] = *(_OWORD *)(a1 + 200);
  v8[1] = v5;
  int v7 = 0;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, int *, _OWORD *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v7, v8, 1, 0xFFFFFFFFLL, 0);
  sub_100CF4304(*(double *)(a1 + 184), v6, a1 + 200);

  if (v14) {
    sub_1000DB0A0(v14);
  }
  if (v13 < 0) {
    operator delete(v12);
  }
  if (v11) {
    sub_1000DB0A0(v11);
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
}

void sub_100CF4648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100458658((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_100CF4660(unsigned char *result)
{
  if (result[356])
  {
    uint64_t v1 = result;
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022F2018);
    }
    long long v2 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      v3[0] = 68289026;
      v3[1] = 0;
      __int16 v4 = 2082;
      long long v5 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SLC Stopping\"}", (uint8_t *)v3, 0x12u);
    }
    uint64_t result = [*(id *)(*((void *)v1 + 52) + 16) unregister:*(void *)(*((void *)v1 + 52) + 8) forNotification:0];
    *((void *)v1 + 51) = 0;
    v1[356] = 0;
  }
  return result;
}

void sub_100CF475C(uint64_t a1)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022F2018);
  }
  long long v2 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    __int16 v4 = 2082;
    long long v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SLC Starting\"}", (uint8_t *)v3, 0x12u);
  }
  *(unsigned char *)(a1 + 356) = 1;
  *(void *)(a1 + 408) = 0;
  sub_100CF539C();
}

void sub_100CF4868(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 356))
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022F2018);
    }
    long long v2 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      int v3 = *(unsigned __int8 *)(a1 + 456);
      uint64_t v5 = *(void *)(a1 + 440);
      uint64_t v4 = *(void *)(a1 + 448);
      *(_DWORD *)stat buf = 134218496;
      uint64_t v11 = v4;
      __int16 v12 = 1024;
      int v13 = v3;
      __int16 v14 = 2048;
      uint64_t v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#SLC slcConsolidate, schedule a consolidated scan, %p, fIsConsolidatedTriggerPending, %d, fConsolidatedTriggersTimeInterval, %.2lf", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022F2018);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSignificantChangeManager::enableBackgroundWakeServices_nl()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    if (*(unsigned char *)(a1 + 432) && (uint64_t v6 = *(void **)(a1 + 448)) != 0)
    {
      if (!*(unsigned char *)(a1 + 456))
      {
        [v6 setNextFireDelay:*(double *)(a1 + 440)];
        *(unsigned char *)(a1 + 456) = 1;
      }
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022F2018);
      }
      int v7 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)stat buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#SLC enableBackgroundWakeServices_nl, calling requestLocationUpdate", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022F2018);
        }
        uint64_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLSignificantChangeManager::enableBackgroundWakeServices_nl()", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      sub_100CF4BB8(a1);
    }
  }
}

void sub_100CF4BB8(uint64_t a1)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022F2018);
  }
  long long v2 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)stat buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v18 = 2082;
    *(void *)int v19 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#SLC Request location update\"}", buf, 0x12u);
  }
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100134750(__p, "slc");
  sub_1006D30DC(buf, 4, 1, __p, Current);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  id v4 = [[[*(id *)(a1 + 32) vendor] proxyForService:@"CLWifiLocationProvider"];
  uint64_t v5 = *(void *)buf;
  char v6 = v18;
  if (SHIBYTE(v20) < 0)
  {
    sub_1000DC48C(&v7, *(void **)&v19[6], *(unint64_t *)&v19[14]);
  }
  else
  {
    long long v7 = *(_OWORD *)&v19[6];
    uint64_t v8 = v20;
  }
  long long v10 = v22;
  long long v11 = v23;
  v12[0] = v24[0];
  *(_OWORD *)((char *)v12 + 12) = *(_OWORD *)((char *)v24 + 12);
  long long v9 = v21;
  if (SHIBYTE(v26) < 0)
  {
    sub_1000DC48C(&v13, (void *)v25, *((unint64_t *)&v25 + 1));
  }
  else
  {
    long long v13 = v25;
    uint64_t v14 = v26;
  }
  [v4 requestLocationUpdateWithParameters:sub_1005DD244((uint64_t)&v5)];
  if (SHIBYTE(v14) < 0) {
    operator delete((void *)v13);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete((void *)v7);
  }
  if (SHIBYTE(v26) < 0) {
    operator delete((void *)v25);
  }
  if (SHIBYTE(v20) < 0) {
    operator delete(*(void **)&v19[6]);
  }
}

void sub_100CF4DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_10050EC2C((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_100CF4E44(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v5 = a1 + 268;
  if (*a3 == 4)
  {
    if (*(_DWORD *)(a4 + 188) != 1)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022F2018);
      }
      uint64_t v14 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        int v21 = 68289026;
        int v22 = 0;
        __int16 v23 = 2082;
        __int16 v24 = "";
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SLC Location services is now disabled; Clearing cached location\"}",
          (uint8_t *)&v21,
          0x12u);
      }
      *(_DWORD *)(a1 + 200) = 0xFFFF;
      *(void *)(a1 + 212) = 0;
      *(void *)(a1 + 204) = 0;
      *(_OWORD *)(a1 + 220) = xmmword_101D1C320;
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)(a1 + 236) = _Q0;
      *(_OWORD *)(a1 + 252) = _Q0;
      *(_OWORD *)uint64_t v5 = _Q0;
      *(_DWORD *)(a1 + 284) = 0;
      *(void *)(a1 + 296) = 0;
      *(void *)(a1 + 304) = 0;
      *(void *)(a1 + 288) = 0xBFF0000000000000;
      *(_DWORD *)(a1 + 312) = 0;
      *(void *)(v5 + 48) = 0xBFF0000000000000;
      *(_DWORD *)(a1 + 324) = 0x7FFFFFFF;
      *(void *)(a1 + 336) = 0;
      *(void *)(a1 + 344) = 0;
      *(void *)(a1 + 328) = 0;
      *(unsigned char *)(a1 + 352) = 0;
      int v21 = 0;
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v21);
    }
  }
  else if (*a3)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022F2018);
    }
    long long v17 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      int v18 = *a3;
      int v21 = 68289282;
      int v22 = 0;
      __int16 v23 = 2082;
      __int16 v24 = "";
      __int16 v25 = 1026;
      int v26 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#SLC Got unknown client notification\", \"notification\":%{public}d}", (uint8_t *)&v21, 0x18u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022F2018);
      }
    }
    int v19 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      int v20 = *a3;
      int v21 = 68289282;
      int v22 = 0;
      __int16 v23 = 2082;
      __int16 v24 = "";
      __int16 v25 = 1026;
      int v26 = v20;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#SLC Got unknown client notification", "{\"msg%{public}.0s\":\"#SLC Got unknown client notification\", \"notification\":%{public}d}", (uint8_t *)&v21, 0x18u);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 200) = 0xFFFF;
    *(void *)(a1 + 212) = 0;
    *(void *)(a1 + 204) = 0;
    *(_OWORD *)(a1 + 220) = xmmword_101D1C320;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(a1 + 236) = _Q0;
    *(_OWORD *)(a1 + 252) = _Q0;
    *(_OWORD *)uint64_t v5 = _Q0;
    *(_DWORD *)(a1 + 284) = 0;
    *(void *)(a1 + 296) = 0;
    *(void *)(a1 + 304) = 0;
    *(void *)(a1 + 288) = 0xBFF0000000000000;
    *(_DWORD *)(a1 + 312) = 0;
    *(void *)(a1 + 316) = 0xBFF0000000000000;
    *(_DWORD *)(a1 + 324) = 0x7FFFFFFF;
    *(void *)(a1 + 336) = 0;
    *(void *)(a1 + 344) = 0;
    *(void *)(a1 + 328) = 0;
    *(unsigned char *)(a1 + 352) = 0;
    id v11 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLClientManager"];
    if (byte_102480FC7 >= 0) {
      __int16 v12 = &qword_102480FB0;
    }
    else {
      __int16 v12 = (uint64_t *)qword_102480FB0;
    }
    long long v13 = +[NSString stringWithUTF8String:v12];
    [v11 resetNotificationConsumedForIdentifier:v13];
  }
}

void sub_100CF51E8()
{
}

void sub_100CF52A0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_100CF52DC(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100CF530C(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100CF533C(id a1)
{
  qword_102419658 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Location_deprecated");
}

void sub_100CF536C(id a1)
{
  qword_1024195A8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Simulation");
}

void sub_100CF539C()
{
}

uint64_t sub_100CF5450(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

void sub_100CF5470()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D8BC88;
      v0[3] = unk_101D8BC98;
      v0[4] = xmmword_101D8BCA8;
      v0[0] = xmmword_101D8BC68;
      v0[1] = unk_101D8BC78;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_100CF5550(_Unwind_Exception *a1)
{
}

void sub_100CF5568()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_100CF55E8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_100CF5678(_Unwind_Exception *a1)
{
}

void sub_100CF5690()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_100CF5748(_Unwind_Exception *a1)
{
}

void sub_100CF5760()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    *uint64_t v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_100CF5808(_Unwind_Exception *a1)
{
}

uint64_t sub_100CF5820()
{
  sub_100134750(&qword_102480FB0, "SignificantChangeManager");

  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102480FB0, (void *)&_mh_execute_header);
}

uint64_t sub_100CF5884(uint64_t a1)
{
  *(_WORD *)a1 = 0;
  *(unsigned char *)(a1 + 2) = 0;
  *(void *)(a1 + 4) = 0;
  *(void *)(a1 + 20) = 0;
  *(void *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 28) = 1065353216;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 104) = 0x800000000;
  *(void *)(a1 + 208) = 0x800000000;
  *(_OWORD *)(a1 + 312) = xmmword_101D8BD20;
  *(_OWORD *)(a1 + 328) = xmmword_101D8BD30;
  *(_WORD *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 364) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 348) = 0;
  *(void *)(a1 + 353) = 0;
  *(_OWORD *)(a1 + 376) = xmmword_101D8BD74;
  *(_OWORD *)(a1 + 392) = unk_101D8BD84;
  *(_OWORD *)(a1 + 408) = xmmword_101D8BD94;
  *(_DWORD *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0;
  *(_DWORD *)(a1 + 448) = 1065353216;
  *(void *)(a1 + 456) = 0;
  *(unsigned char *)(a1 + 464) = 0;
  *(unsigned char *)(a1 + 468) = 1;
  *(_DWORD *)(a1 + 488) = 8;
  *(void *)(a1 + 480) = 1031798784;
  *(_OWORD *)&v3[8] = 0uLL;
  *(_OWORD *)(a1 + 528) = *(_OWORD *)v3;
  *(_DWORD *)&v3[24] = 0;
  *(_OWORD *)(a1 + 540) = *(_OWORD *)&v3[12];
  int v4 = 973279855;
  *(_OWORD *)int v3 = xmmword_101D8BD50;
  *(_OWORD *)&v3[16] = unk_101D8BD60;
  sub_100CF5F14(a1 + 32, (uint64_t)v3);
  *(int32x2_t *)(a1 + 56) = vdup_n_s32(0x3A03126Fu);
  *(_DWORD *)(a1 + 64) = 973279855;
  return a1;
}

uint64_t sub_100CF59A8(uint64_t result)
{
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

double sub_100CF59B8(uint64_t a1)
{
  long long v2 = (_OWORD *)(a1 + 312);
  *(_WORD *)a1 = 0;
  *(unsigned char *)(a1 + 2) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 4) = 0;
  *(void *)(a1 + 20) = 0;
  *(void *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 28) = 1065353216;
  *(_OWORD *)int v4 = xmmword_101D8BD50;
  *(_OWORD *)&v4[16] = unk_101D8BD60;
  int v5 = 973279855;
  sub_100CF5F14(a1 + 32, (uint64_t)v4);
  *(int32x2_t *)(a1 + 56) = vdup_n_s32(0x3A03126Fu);
  *(_DWORD *)(a1 + 64) = 973279855;
  *(_DWORD *)(a1 + 208) = 0;
  *(void *)(a1 + 456) = 0;
  *(unsigned char *)(a1 + 464) = 0;
  *(_DWORD *)(a1 + 484) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0;
  *(_DWORD *)(a1 + 448) = 1065353216;
  *(void *)&v4[7] = 0;
  *(void *)&v4[2] = 0;
  *long long v2 = xmmword_101D8BD20;
  v2[1] = xmmword_101D8BD30;
  *(_WORD *)(a1 + 344) = 0;
  *(void *)(a1 + 346) = *(void *)v4;
  *(void *)(a1 + 353) = *(void *)&v4[7];
  *(_DWORD *)(a1 + 364) = 0;
  *(void *)(a1 + 368) = 0;
  v2[4] = xmmword_101D8BD74;
  v2[5] = unk_101D8BD84;
  v2[6] = xmmword_101D8BD94;
  *(_DWORD *)(a1 + 424) = 0;
  *(_DWORD *)&v4[24] = 0;
  *(_DWORD *)&v4[12] = 0;
  *(void *)&v4[16] = 0;
  *(_OWORD *)(a1 + 528) = *(unint64_t *)v4;
  double result = *(double *)&v4[12];
  *(_OWORD *)(a1 + 540) = *(_OWORD *)&v4[12];
  return result;
}

BOOL sub_100CF5B04(float32x4_t *a1, float *a2, uint64_t a3, float a4)
{
  float v14 = sub_100659AB4(&a1[6].u16[4], 0, a1[6].u16[5]);
  float v18 = v17;
  uint64_t v19 = 0;
  *(float *)int v32 = v14;
  *(float *)&v32[1] = v17;
  *(float *)&v32[2] = v13;
  float v20 = 0.0;
  do
  {
    float v20 = v20 + (float)(*(float *)&v32[v19] * *(float *)&v32[v19]);
    ++v19;
  }
  while (v19 != 3);
  float v21 = sqrtf(v20);
  if (v21 <= 0.0) {
    return 0;
  }
  float v22 = fabsf(v21 + -1.0) / v21;
  if (v22 > 0.40825) {
    return 0;
  }
  v36[0] = 1.0 / a4;
  v36[1] = 1.0 / (float)((float)(0.001 / (float)(v21 * v21)) + (float)((float)(v22 * 6.0) * v22));
  v30.i64[0] = 0;
  v30.i64[1] = 0x3F80000000000000;
  LODWORD(v15) = *(_DWORD *)(a3 + 8);
  BOOL v23 = sub_100B9BF10(v36, &v30, (uint64_t)v31, *a2, a2[1], a2[2], v14, v18, v13, v15, v16, v8, v9, v10, v11, v12, *(void *)a3, *(float *)&v15);
  if (v23)
  {
    if (&a1[1] != &v30) {
      a1[1] = v30;
    }
    uint64_t v25 = (uint64_t)&a1[2];
    if (!sub_100CF5F14(v25, (uint64_t)v31))
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022F2098);
      }
      int v26 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)stat buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "invalid initializeDown covariance !(P > 0), reseting", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022F2098);
        }
        double v29 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CMSensorFusionSwimMekf::initializeAttitude(const CMVector3d &, const CMVector3d &, float)", "%s\n", v29);
        if (v29 != (char *)buf) {
          free(v29);
        }
      }
      int v35 = 973279855;
      *(_OWORD *)stat buf = xmmword_101D8BD50;
      long long v34 = unk_101D8BD60;
      sub_100CF5F14(v25, (uint64_t)buf);
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F2098);
    }
    uint64_t v27 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "northAndGravity failed", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022F2098);
      }
      __int16 v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CMSensorFusionSwimMekf::initializeAttitude(const CMVector3d &, const CMVector3d &, float)", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
  }
  return v23;
}

BOOL sub_100CF5F14(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_100CF76F4(a2);
  if (result)
  {
    unint64_t v5 = 3;
    unint64_t v6 = 2;
    while (1)
    {
      unint64_t v7 = v6;
      float v8 = sub_1004E4240(a2, v6, v6);
      unint64_t v9 = v5;
      unint64_t v10 = v5 - 2;
      if (v5 <= 2)
      {
        do
        {
          float v11 = *(float *)sub_100CF7798(a1 + 12, v7, v9);
          float v12 = *(float *)sub_100CF7798(a1 + 12, v7, v9);
          float v8 = v8 + (float)((float)-(float)(v11 * v12) * *(float *)sub_100CF7AF4(a1, v9++));
        }
        while (v9 != 3);
      }
      *(float *)sub_100CF7AF4(a1, v7) = v8;
      if (*(float *)sub_100CF7AF4(a1, v7) <= 0.0) {
        break;
      }
      if (v7)
      {
        do
        {
          unint64_t v13 = v10;
          float v14 = sub_1004E4240(a2, v10, v7);
          unint64_t v15 = v5;
          if (v5 <= 2)
          {
            do
            {
              float v16 = *(float *)sub_100CF7798(a1 + 12, v13, v15);
              float v17 = *(float *)sub_100CF7798(a1 + 12, v7, v15);
              float v14 = v14 + (float)((float)-(float)(v16 * v17) * *(float *)sub_100CF7AF4(a1, v15++));
            }
            while (v15 != 3);
          }
          float v18 = v14 / *(float *)sub_100CF7AF4(a1, v7);
          *(float *)sub_100CF7798(a1 + 12, v13, v7) = v18;
          unint64_t v10 = v13 - 1;
        }
        while (v13);
      }
      unint64_t v6 = v7 - 1;
      unint64_t v5 = v7;
      if (!v7) {
        return 1;
      }
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F2098);
    }
    uint64_t v19 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)stat buf = 134217984;
      unint64_t v22 = v7;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "D(%zu) <= 0 non-positive definite matrix!", buf, 0xCu);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022F2098);
      }
      float v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CMFactoredMatrix<float, 3>::factor(const CMMatrix<T, N, N> &) [T = float, N = 3]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
      return 0;
    }
  }
  return result;
}

void sub_100CF6248(uint64_t a1)
{
  if (*(_WORD *)(a1 + 106))
  {
    sub_100CF62B8((unsigned __int16 *)(a1 + 104));
    sub_100B9BC00((float *)(a1 + 16));
  }
}

float sub_100CF62B8(unsigned __int16 *a1)
{
  if (!a1[1])
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F2098);
    }
    int v3 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Assertion failed: !empty(), file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMVectorBuffer.h, line 145,back() on empty buffer.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022F2098);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "Element CMVectorBufferBase<float, 3>::back() const [T = float, N = 3]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  return *(float *)sub_100659D10(a1, a1[1] - 1);
}

float sub_100CF646C(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(unsigned char *)a1 = 1;
  *(_DWORD *)(a1 + 4) = *a2;
  *(_DWORD *)(a1 + 8) = a2[1];
  *(_DWORD *)(a1 + 12) = a2[2];
  *(_DWORD *)(a1 + 56) = *(_DWORD *)a3;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a3 + 4);
  float result = *(float *)(a3 + 8);
  *(float *)(a1 + 64) = result;
  return result;
}

float sub_100CF64A8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(unsigned char *)a1 && *(unsigned char *)(a1 + 1))
  {
    float v5 = *(float *)(a1 + 88) - *(float *)(a1 + 12);
    *(float32x2_t *)(a1 + 92) = vsub_f32(*(float32x2_t *)(a1 + 80), *(float32x2_t *)(a1 + 4));
    *(float *)(a1 + 100) = v5;
    sub_100CF6520(a1, a3);
  }
  *(_DWORD *)(a1 + 80) = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 4);
  float result = *(float *)(a2 + 8);
  *(float *)(a1 + 88) = result;
  return result;
}

void sub_100CF6520(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 72);
  if (v3)
  {
    unint64_t v4 = a2 - v3;
    if (a2 > v3)
    {
      uint64_t v5 = 0;
      float v6 = (float)v4 * 0.000001;
      *(void *)(a1 + 72) = a2;
      float v7 = v6 * *(float *)(a1 + 100);
      float v13 = v6;
      float32x2_t v20 = vmul_n_f32(*(float32x2_t *)(a1 + 92), v6);
      float v21 = v7;
      uint64_t v18 = (uint64_t)v20;
      __int32 v19 = LODWORD(v7);
      do
      {
        *(float *)((char *)&v18 + v5) = -*(float *)((char *)&v18 + v5);
        v5 += 4;
      }
      while (v5 != 12);
      v15.i64[0] = v18;
      v15.i32[2] = v19;
      sub_100B5CE48(v15.f32, (uint64_t)&v18);
      float v8 = v13 * *(float *)(a1 + 64);
      *(float *)v9.i32 = v13 * 0.00032;
      float32x2_t v16 = vadd_f32((float32x2_t)vdup_lane_s32(v9, 0), vmul_n_f32(*(float32x2_t *)(a1 + 56), v13));
      float v17 = (float)(v13 * 0.00032) + v8;
      sub_100CF6680(a1 + 32, (uint64_t)&v18, (uint64_t)&v16);
      *(float *)v10.i32 = v13 * 0.00000005;
      *(float32x2_t *)(a1 + 56) = vadd_f32((float32x2_t)vdup_lane_s32(v10, 0), *(float32x2_t *)(a1 + 56));
      *(float *)(a1 + 64) = (float)(v13 * 0.00000005) + *(float *)(a1 + 64);
      *(double *)v11.i64 = sub_100B9BDF4(&v15, (float *)&v20);
      float v12 = (float32x4_t *)(a1 + 16);
      sub_100B9BB80((uint64_t)&v15, v12->f32, &v14, v11);
      if (v12 != &v14) {
        *float v12 = v14;
      }
    }
  }
  else
  {
    *(void *)(a1 + 72) = a2;
  }
}

void sub_100CF6680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = 0;
  uint64_t v7 = a1 + 12;
  do
  {
    uint64_t v8 = 2;
    while (1)
    {
      unint64_t v9 = v8;
      if (!v8) {
        break;
      }
      unint64_t v10 = 0;
      do
      {
        float v11 = *(float *)sub_1004E45A0(a2, v6, v10);
        float v12 = *(float *)sub_100CF7798(v7, v10, v9);
        float v13 = (float *)sub_1004E45A0(a2, v6, v9);
        float *v13 = *v13 + (float)(v11 * v12);
        ++v10;
      }
      while (v9 != v10);
      *(_DWORD *)sub_1004E45A0((uint64_t)v42, v6, v9) = 0;
      uint64_t v8 = v9 - 1;
      if (!v9) {
        goto LABEL_9;
      }
    }
    *(_DWORD *)sub_1004E45A0((uint64_t)v42, v6, 0) = 0;
LABEL_9:
    *(_DWORD *)sub_1004E45A0((uint64_t)v42, v6, v6) = 1065353216;
    ++v6;
  }
  while (v6 != 3);
  for (uint64_t i = 2; ; uint64_t i = v16 - 1)
  {
    unint64_t v15 = 0;
    unint64_t v16 = i;
    v47[i] = 0.0;
    float v17 = 0.0;
    do
    {
      float v18 = *(float *)sub_1004E45A0(a2, v16, v15);
      float v19 = v18 * *(float *)sub_1004E45A0(a2, v16, v15);
      float v20 = v17 + (float)(v19 * *(float *)sub_100CF7AF4(a1, v15));
      float v21 = *(float *)sub_1004E45A0((uint64_t)v42, v16, v15);
      float v22 = v21 * *(float *)sub_1004E45A0((uint64_t)v42, v16, v15);
      float v17 = v20 + (float)(v22 * sub_1004E30E4(a3, v15));
      v47[v16] = v17;
      ++v15;
    }
    while (v15 != 3);
    if (v17 <= 0.0) {
      break;
    }
    if (!v16)
    {
      for (unint64_t j = 0; j != 3; ++j)
      {
        float v39 = v47[j];
        *(float *)sub_100CF7AF4(a1, j) = v39;
      }
      return;
    }
    for (unint64_t k = 0; k != v16; ++k)
    {
      unint64_t v24 = 0;
      float v25 = 0.0;
      do
      {
        float v26 = *(float *)sub_1004E45A0(a2, k, v24);
        float v27 = v26 * *(float *)sub_100CF7AF4(a1, v24);
        float v28 = v25 + (float)(v27 * *(float *)sub_1004E45A0(a2, v16, v24));
        float v29 = *(float *)sub_1004E45A0((uint64_t)v42, k, v24);
        float v30 = v29 * sub_1004E30E4(a3, v24);
        float v25 = v28 + (float)(v30 * *(float *)sub_1004E45A0((uint64_t)v42, v16, v24++));
      }
      while (v24 != 3);
      unint64_t v31 = 0;
      *(float *)sub_100CF7798(v7, k, v16) = v25 / v17;
      do
      {
        float v32 = *(float *)sub_100CF7798(v7, k, v16);
        float v33 = *(float *)sub_1004E45A0(a2, v16, v31);
        long long v34 = (float *)sub_1004E45A0(a2, k, v31);
        float *v34 = *v34 - (float)(v32 * v33);
        float v35 = *(float *)sub_100CF7798(v7, k, v16);
        float v36 = *(float *)sub_1004E45A0((uint64_t)v42, v16, v31);
        double v37 = (float *)sub_1004E45A0((uint64_t)v42, k, v31);
        float *v37 = *v37 - (float)(v35 * v36);
        ++v31;
      }
      while (v31 != 3);
    }
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022F2098);
  }
  uint64_t v40 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)stat buf = 134217984;
    unint64_t v46 = v16;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "D[%zu] <= 0, matrix ! positive definite", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F2098);
    }
    int v43 = 134217984;
    unint64_t v44 = v16;
    uint64_t v41 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CMFactoredMatrix<float, 3>::thorntonTemporalUpdate(CMMatrix<T, N, N> &, const CMVector<T, N> &) [T = float, N = 3]", "%s\n", v41);
    if (v41 != (char *)buf) {
      free(v41);
    }
  }
}

void sub_100CF6B48(float32x4_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = &a1[6].u16[4];
  sub_100659A48(&a1[6].u16[4], a2);
  float v6 = sub_100659AB4(v5, 0, a1[6].u16[5]);
  uint64_t v9 = 0;
  float v23 = v6;
  float v24 = v7;
  float v25 = v8;
  float v10 = 0.0;
  do
  {
    float v10 = v10 + (float)(*(float *)((char *)&v23 + v9) * *(float *)((char *)&v23 + v9));
    v9 += 4;
  }
  while (v9 != 12);
  float v11 = sqrtf(v10);
  float v12 = 1.0;
  if (v11 > 0.0) {
    float v12 = fabsf(v11 + -1.0) / v11;
  }
  float v13 = v6 / v11;
  float v14 = v7 / v11;
  float v23 = v13;
  float v24 = v7 / v11;
  float v25 = v8 / v11;
  if (a1->i8[1] || a1[6].i32[3] != a1[6].u16[5])
  {
    if (v12 <= 0.40825)
    {
      float v15 = 1.0;
      float v16 = fabsf(v11 + -1.0) / v11;
      if (v11 > 0.0) {
        float v15 = v16;
      }
      sub_100CF6D50(a1, &v23, (float)(0.001 / (float)(v11 * v11)) + (float)((float)(v15 * 6.0) * v15));
      if (v11 > 0.9 && v11 < 1.1)
      {
        unint64_t v17 = a1[33].u64[1];
        if (v17)
        {
          uint64_t v18 = v17 + 1;
          unint64_t v19 = a1[34].i64[0] + a3 - a1[33].i64[0];
          a1[34].i64[0] = v19;
          a1[34].f32[2] = (float)((float)v19 / (float)v17) / 1000.0;
        }
        else
        {
          uint64_t v18 = 1;
        }
        a1[33].i64[0] = a3;
        a1[33].i64[1] = v18;
      }
    }
  }
  else
  {
    *(void *)float v22 = 0x3F80000000000000;
    *(_DWORD *)&v22[8] = 0;
    if (v14 != 0.0 && fabsf((float)(fabsf(v14) + -1.0) / v14) < 0.1) {
      *(void *)&v22[4] = 0xBF80000000000000;
    }
    uint64_t v20 = 1065353216;
    int v21 = 0;
    a1->i8[1] = sub_100CF5B04(a1, (float *)v22, (uint64_t)&v20, 1.0);
  }
}

void sub_100CF6D50(float32x4_t *a1, float *a2, float a3)
{
  float v6 = a1 + 1;
  float v7 = sub_100B9BC00(a1[1].f32);
  float v9 = v8;
  float v11 = v10;
  float v12 = *a2 - v7;
  float v13 = a2[1] - v8;
  float v14 = a2[2] - v10;
  *(float *)&uint64_t v37 = v12;
  *((float *)&v37 + 1) = v13;
  float v38 = v14;
  LODWORD(v34) = 0;
  *((float *)&v34 + 1) = v10;
  *((float *)&v34 + 2) = -v8;
  *((float *)&v34 + 3) = -v10;
  LODWORD(v35) = 0;
  *(void *)((char *)&v35 + 4) = __PAIR64__(LODWORD(v8), LODWORD(v7));
  *((float *)&v35 + 3) = -v7;
  int v36 = 0;
  *(float *)float v33 = a3;
  *(float *)&v33[1] = a3;
  *(float *)&v33[2] = a3;
  uint64_t v16 = a1[2].i64[0];
  float v15 = a1 + 2;
  int v28 = 0;
  v27[0] = v34;
  v27[1] = v35;
  uint64_t v29 = v16;
  __int32 v30 = v15->i32[2];
  uint64_t v31 = *(uint64_t *)((char *)&v15->i64[1] + 4);
  __int32 v32 = v15[1].i32[1];
  sub_100CF6680((uint64_t)&v29, (uint64_t)v27, (uint64_t)v33);
  uint64_t v25 = v37;
  float v26 = v38;
  if (sub_100CF6F04((uint64_t)&v29, (uint64_t)&v25)
    && (float)((float)((float)(v14 * v26) + (float)(v13 * *((float *)&v25 + 1))) + (float)(v12 * *(float *)&v25)) <= 6.75)
  {
    sub_100CF7214(v15->f32, (uint64_t)&v34, (uint64_t)v33, (uint64_t)&v37);
    float v20 = (float)((float)(v11 * v17) + (float)(v18 * v9)) + (float)(v19 * v7);
    v24[0] = v19 - (float)(v7 * v20);
    v24[1] = v18 - (float)(v9 * v20);
    _OWORD v24[2] = v17 - (float)(v11 * v20);
    *(double *)v21.i64 = sub_100B9BDF4(&v23, v24);
    sub_100B9BB80((uint64_t)&v23, v6->f32, &v22, v21);
    if (v6 != &v22) {
      *float v6 = v22;
    }
  }
}

uint64_t sub_100CF6F04(uint64_t a1, uint64_t a2)
{
  if (sub_100CF802C(a1, 0) == 0.0)
  {
    BOOL v4 = 0;
    uint64_t v5 = 0;
LABEL_7:
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F2098);
    }
    float v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)stat buf = 134217984;
      uint64_t v25 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "D[%zu] == 0, semidefinite matrix!", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022F2098);
      }
      float32x4_t v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CMFactoredMatrix<float, 3>::solve(CMVector<T, N> &) const [T = float, N = 3]", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
    while (v5 != 2)
    {
      if (sub_100CF802C(a1, ++v5) == 0.0)
      {
        BOOL v4 = (unint64_t)(v5 - 1) > 1;
        goto LABEL_7;
      }
    }
    uint64_t v8 = a1 + 12;
    unint64_t v9 = 2;
    uint64_t v10 = 1;
    do
    {
      unint64_t v11 = v9;
      unint64_t v9 = v10;
      do
      {
        float v12 = *(float *)sub_1004E4930(a2, v11);
        float v13 = sub_100CF7CD0(a1 + 12, v9, v11);
        float v14 = (float *)sub_1004E4930(a2, v9);
        float *v14 = *v14 - (float)(v12 * v13);
        ++v11;
      }
      while (v11 != 3);
      uint64_t v10 = v9 - 1;
    }
    while (v9);
    do
    {
      float v15 = sub_100CF802C(a1, v9);
      uint64_t v16 = (float *)sub_1004E4930(a2, v9);
      *uint64_t v16 = *v16 / v15;
      ++v9;
    }
    while (v9 != 3);
    unint64_t v17 = 0;
    do
    {
      unint64_t v18 = v17++;
      if (v18 <= 1)
      {
        unint64_t v19 = v17;
        do
        {
          float v20 = *(float *)sub_1004E4930(a2, v18);
          float v21 = sub_100CF7CD0(v8, v18, v19);
          float32x4_t v22 = (float *)sub_1004E4930(a2, v19);
          *float32x4_t v22 = *v22 - (float)(v20 * v21);
          ++v19;
        }
        while (v19 != 3);
      }
    }
    while (v17 != 3);
    return 1;
  }
  return v4;
}

void sub_100CF7214(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = 0;
  uint64_t v35 = 0;
  int v36 = 0;
  uint64_t v8 = (uint64_t)(a1 + 3);
LABEL_2:
  unint64_t v9 = 0;
  uint64_t v10 = -1;
  do
  {
    float v11 = sub_1004E4240(a2, v7, v9);
    unint64_t v12 = v10;
    if (v9)
    {
      do
      {
        float v13 = sub_1004E4240(a2, v7, v12);
        float v11 = v11 + (float)(v13 * *(float *)sub_100CF7798(v8, v12--, v9));
      }
      while (v12 != -1);
    }
    v42[v9] = v11;
    v41[v9] = v11 * *(float *)sub_100CF7AF4((uint64_t)a1, v9);
    ++v9;
    ++v10;
  }
  while (v9 != 3);
  float v14 = sub_1004E30E4(a3, v7);
  float v15 = v14 + (float)(v42[0] * v41[0]);
  if (v15 <= 0.0)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F2098);
    }
    __int32 v32 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)stat buf = 134217984;
      unint64_t v40 = v7;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "%zu: alpha <= 0, matrix ! positive definite", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022F2098);
      }
      int v37 = 134217984;
      unint64_t v38 = v7;
LABEL_33:
      float v33 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CMVector<T, N> CMFactoredMatrix<float, 3>::biermanObservationalUpdate(const CMMatrix<T, P, N> &, const CMVector<T, P> &, const CMVector<T, P> &) [T = float, N = 3, P = 3UL]", "%s\n", v33);
      if (v33 != (char *)buf) {
        free(v33);
      }
    }
  }
  else
  {
    float v16 = 1.0 / v15;
    *a1 = *a1 * (float)((float)(1.0 / v15) * sub_1004E30E4(a3, v7));
    unint64_t v17 = 1;
    while (1)
    {
      float v18 = v42[v17];
      float v19 = v15 + (float)(v18 * v41[v17]);
      if (v19 <= 0.0) {
        break;
      }
      float v20 = -(float)(v18 * v16);
      float v16 = 1.0 / v19;
      float v21 = (float *)sub_100CF7AF4((uint64_t)a1, v17);
      unint64_t v22 = 0;
      *float v21 = (float)(v15 * (float)(1.0 / v19)) * *v21;
      do
      {
        float v23 = *(float *)sub_100CF7798(v8, v22, v17);
        float v24 = v41[v22];
        uint64_t v25 = (float *)sub_100CF7798(v8, v22, v17);
        float v26 = v41[v17];
        *uint64_t v25 = v23 + (float)(v24 * v20);
        v41[v22++] = v24 + (float)(v26 * v23);
      }
      while (v17 != v22);
      ++v17;
      float v15 = v19;
      if (v17 == 3)
      {
        unint64_t v27 = 0;
        float v28 = v16 * sub_1004E30E4(a4, v7);
        do
        {
          float v29 = v41[v27];
          __int32 v30 = (float *)sub_1004E4930((uint64_t)&v35, v27);
          *__int32 v30 = *v30 + (float)(v28 * v29);
          ++v27;
        }
        while (v27 != 3);
        if (++v7 != 3) {
          goto LABEL_2;
        }
        return;
      }
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F2098);
    }
    uint64_t v31 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)stat buf = 134217984;
      unint64_t v40 = v7;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "%zu: alpha <= 0, matrix ! positive definite", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022F2098);
      }
      int v37 = 134217984;
      unint64_t v38 = v7;
      goto LABEL_33;
    }
  }
}

void sub_100CF76C4(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

BOOL sub_100CF76F4(uint64_t a1)
{
  unint64_t v2 = 0;
  char v3 = 1;
LABEL_2:
  char v4 = v3;
  unint64_t v5 = v2 + 1;
  while (1)
  {
    float v6 = sub_1004E4240(a1, v2, v5);
    float v7 = v6 - sub_1004E4240(a1, v5, v2);
    if (v7 <= 0.0) {
      float v7 = -v7;
    }
    if (v7 > 1.0e-16) {
      return v7 <= 1.0e-16;
    }
    if (++v5 == 3)
    {
      char v3 = 0;
      unint64_t v2 = 1;
      if (v4) {
        goto LABEL_2;
      }
      return v7 <= 1.0e-16;
    }
  }
}

uint64_t sub_100CF7798(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a3 >= 3)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F2098);
    }
    float v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)stat buf = 134218240;
      unint64_t v12 = a3;
      __int16 v13 = 2048;
      uint64_t v14 = 3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 237,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022F2098);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "T &CMFactoredMatrix<float, 3>::UnitaryUpperTriangularMatrix::operator()(size_t, size_t) [T = float, N = 3]", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  if (a3 <= a2)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F2098);
    }
    unint64_t v9 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)stat buf = 134218240;
      unint64_t v12 = a3;
      __int16 v13 = 2048;
      uint64_t v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Assertion failed: col > row, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 238,invalid element %zu <= %zu.", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022F2098);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "T &CMFactoredMatrix<float, 3>::UnitaryUpperTriangularMatrix::operator()(size_t, size_t) [T = float, N = 3]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  return a1 + 4 * (a2 + (((a3 - 1) * a3) >> 1));
}

uint64_t sub_100CF7AF4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 3)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F2098);
    }
    unint64_t v5 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)stat buf = 134218240;
      unint64_t v8 = a2;
      __int16 v9 = 2048;
      uint64_t v10 = 3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Assertion failed: row < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 191,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022F2098);
      }
      float v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "T &CMFactoredMatrix<float, 3>::DiagonalMatrix::operator()(size_t) [T = float, N = 3]", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return a1 + 4 * a2;
}

float sub_100CF7CD0(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a3 >= 3)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F2098);
    }
    float v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)stat buf = 134218240;
      unint64_t v12 = a3;
      __int16 v13 = 2048;
      uint64_t v14 = 3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 231,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022F2098);
      }
      unint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "T CMFactoredMatrix<float, 3>::UnitaryUpperTriangularMatrix::operator()(size_t, size_t) const [T = float, N = 3]", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  if (a3 <= a2)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F2098);
    }
    __int16 v9 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)stat buf = 134218240;
      unint64_t v12 = a3;
      __int16 v13 = 2048;
      uint64_t v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Assertion failed: col > row, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 232,invalid element %zu <= %zu.", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022F2098);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "T CMFactoredMatrix<float, 3>::UnitaryUpperTriangularMatrix::operator()(size_t, size_t) const [T = float, N = 3]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  return *(float *)(a1 + 4 * (a2 + (((a3 - 1) * a3) >> 1)));
}

float sub_100CF802C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 3)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F2098);
    }
    unint64_t v5 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)stat buf = 134218240;
      unint64_t v8 = a2;
      __int16 v9 = 2048;
      uint64_t v10 = 3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Assertion failed: row < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMFactoredMatrix.h, line 186,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022F2098);
      }
      float v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "T CMFactoredMatrix<float, 3>::DiagonalMatrix::operator()(size_t) const [T = float, N = 3]", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return *(float *)(a1 + 4 * a2);
}

BOOL sub_100CF8208(float a1, float a2)
{
  return a2 < a1;
}

void sub_100CF82C8(id a1)
{
  qword_102481020 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLApplicationLifecycleManagerSilo"];
}

void sub_100CF8348(id a1)
{
  if (!objc_opt_class())
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F21C0);
    }
    unint64_t v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "ALM: not supported on this platform because FrontBoardServices.framework is not present", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_15;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419520 == -1) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  if (objc_opt_class()) {
    return;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022F21C0);
  }
  uint64_t v1 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)stat buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "ALM: not supported on this platform because AssertionServices.framework is not present", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419520 == -1)
    {
LABEL_18:
      char v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "+[CLApplicationLifecycleManagerAdapter isSupported]_block_invoke", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
      goto LABEL_15;
    }
LABEL_20:
    dispatch_once(&qword_102419520, &stru_1022F21C0);
    goto LABEL_18;
  }
LABEL_15:
  byte_102481030 = 1;
}

void sub_100CF8674()
{
}

void sub_100CF8780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CF87BC(uint64_t a1, void *a2)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a1 + 24;
  *(void *)(a1 + 32) = a1 + 24;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = off_1022B6DB8;
  char v4 = operator new(0x20uLL);
  v4[1] = 0;
  v4[2] = 0;
  *char v4 = off_1022B6DF0;
  *((_DWORD *)v4 + 6) = 31337;
  *(void *)(a1 + 64) = v4 + 3;
  *(void *)(a1 + 72) = v4;
  [a2 silo];
  sub_10120A518();
}

void sub_100CF8A10(_Unwind_Exception *a1)
{
  sub_10012E38C(v3);
  sub_100CF95A0(v2);
  uint64_t v6 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *v4;
  *char v4 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  _Unwind_Resume(a1);
}

void sub_100CF8AB0()
{
}

void sub_100CF8AB8(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F21E0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLApplicationLifecycleManager::onDataProtectionManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F21E0);
    }
    __int16 v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)stat buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      float v15 = "";
      __int16 v16 = 2082;
      unint64_t v17 = "activity";
      __int16 v18 = 2050;
      float v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLApplicationLifecycleManager::onDataProtectionManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100CF92E4((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100CF8C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CF8C94(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  sub_10012E38C((void *)(a1 + 56));
  sub_100CF95A0((void *)(a1 + 24));
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

void sub_100CF8D94(id *a1, unsigned int *a2, const void **a3, int a4)
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022F21C0);
  }
  unint64_t v8 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v9 = *a2;
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = (void *)*a3;
    }
    *(_DWORD *)stat buf = 68289795;
    int v32 = 0;
    __int16 v33 = 2082;
    long long v34 = "";
    __int16 v35 = 1026;
    unsigned int v36 = v9;
    __int16 v37 = 1026;
    *(_DWORD *)unint64_t v38 = a4;
    *(_WORD *)&v38[4] = 2081;
    *(void *)&v38[6] = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"@ALM: Taking process assertion for process\", \"processId\":%{public}u, \"justLaunched\":%{public}hhd, \"clientKey\":%{private, location:escape_only}s}", buf, 0x28u);
  }
  uint64_t v11 = *((unsigned __int8 *)a3 + 23);
  if ((v11 & 0x80u) == 0) {
    unint64_t v12 = (const void *)*((unsigned __int8 *)a3 + 23);
  }
  else {
    unint64_t v12 = a3[1];
  }
  uint64_t v13 = qword_102481010;
  if (byte_10248101F >= 0) {
    uint64_t v13 = byte_10248101F;
  }
  if (v12 != (const void *)v13) {
    goto LABEL_24;
  }
  if (byte_10248101F >= 0) {
    __int16 v14 = &qword_102481008;
  }
  else {
    __int16 v14 = (uint64_t *)qword_102481008;
  }
  if ((v11 & 0x80) != 0)
  {
    if (!memcmp(*a3, v14, (size_t)a3[1])) {
      goto LABEL_25;
    }
LABEL_24:
    float v39 = +[RBSDomainAttribute attributeWithDomain:@"com.apple.locationd" name:@"FenceEvent"];
    CFStringRef v16 = @"locationd.fence";
    unint64_t v17 = &v39;
    goto LABEL_26;
  }
  if (*((unsigned char *)a3 + 23))
  {
    float v15 = a3;
    while (*(unsigned __int8 *)v15 == *(unsigned __int8 *)v14)
    {
      float v15 = (const void **)((char *)v15 + 1);
      __int16 v14 = (uint64_t *)((char *)v14 + 1);
      if (!--v11) {
        goto LABEL_25;
      }
    }
    goto LABEL_24;
  }
LABEL_25:
  unint64_t v40 = +[RBSDomainAttribute attributeWithDomain:@"com.apple.locationd" name:@"ShowAlert"];
  CFStringRef v16 = @"locationd.fence.elevatedPriority";
  unint64_t v17 = &v40;
LABEL_26:
  id v18 = [objc_alloc((Class)RBSAssertion) initWithExplanation:v16 target:[+[RBSTarget targetWithPid:](RBSTarget, "targetWithPid:", *a2) attributes:[+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v17, 1)]];
  id v19 = [[objc_msgSend(*a1, "vendor") proxyForService:@"CLClientManager"];
  if (*((char *)a3 + 23) >= 0) {
    float v20 = a3;
  }
  else {
    float v20 = *a3;
  }
  [v19 appLaunchedByAppLifecycleManager:[NSString stringWithUTF8String:v20]];
  uint64_t v30 = 0;
  if ([v18 acquireWithError:&v30])
  {
    unsigned int v21 = *a2;
    if (*((char *)a3 + 23) >= 0) {
      unint64_t v22 = a3;
    }
    else {
      unint64_t v22 = *a3;
    }
    float v23 = +[NSString stringWithUTF8String:v22];
    id v24 = [*a1 silo];
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    v28[2] = sub_100CF9194;
    v28[3] = &unk_1022F2100;
    unsigned int v29 = v21;
    uint64_t v28[4] = v23;
    v28[5] = v18;
    [v24 afterInterval:v28 async:10.0];
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F21C0);
    }
    uint64_t v25 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v26 = *a2;
      if (*((char *)a3 + 23) >= 0) {
        unint64_t v27 = a3;
      }
      else {
        unint64_t v27 = (void *)*a3;
      }
      *(_DWORD *)stat buf = 68289794;
      int v32 = 0;
      __int16 v33 = 2082;
      long long v34 = "";
      __int16 v35 = 1026;
      unsigned int v36 = v26;
      __int16 v37 = 2082;
      *(void *)unint64_t v38 = v27;
      *(_WORD *)&v38[8] = 2114;
      *(void *)&v38[10] = v30;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning ALM: Couldn't create assertion for process\", \"processId\":%{public}u, \"client\":%{public, location:escape_only}s, \"error\":%{public, location:escape_only}@}", buf, 0x2Cu);
    }
    [v18 invalidate];
  }
}

void sub_100CF9194(uint64_t a1)
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022F21C0);
  }
  uint64_t v2 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 32);
    v5[0] = 68289538;
    v5[1] = 0;
    __int16 v6 = 2082;
    uint64_t v7 = "";
    __int16 v8 = 1026;
    int v9 = v3;
    __int16 v10 = 2114;
    uint64_t v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"@ALM: Releasing process assertion for process\", \"processId\":%{public}u, \"client\":%{public, location:escape_only}@}", (uint8_t *)v5, 0x22u);
  }
  [*(id *)(a1 + 40) invalidate];
}

void *sub_100CF92A0(uint64_t a1, uint64_t a2)
{
  float result = (void *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0) {
    return sub_1000DC48C(result, *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  long long v3 = *(_OWORD *)(a2 + 56);
  result[2] = *(void *)(a2 + 72);
  *(_OWORD *)float result = v3;
  return result;
}

void sub_100CF92D0(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
}

void sub_100CF92E4(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  [*(id *)a1 silo];
  if (*a3 == 1)
  {
    int v7 = *(unsigned __int8 *)(a4 + 4);
    *(unsigned char *)(a1 + 48) = v7;
    if (v7) {
      [*(id *)(*(void *)(a1 + 16) + 16) unregister:*(void *)(*(void *)(a1 + 16) + 8) forNotification:1];
    }
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022F21C0);
    }
    __int16 v8 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      if (*(unsigned char *)(a1 + 48)) {
        int v9 = "YES";
      }
      else {
        int v9 = "NO";
      }
      __int16 v10 = "en";
      if (!*(unsigned char *)(a1 + 48)) {
        __int16 v10 = "dis";
      }
      *(_DWORD *)stat buf = 136380931;
      uint64_t v13 = v9;
      __int16 v14 = 2081;
      float v15 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "ALM: device unlocked since boot, %{private}s, application launch capability, %{private}sabled", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022F21C0);
      }
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLApplicationLifecycleManager::onDataProtectionManagerNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
}

void sub_100CF9540(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_100CF9570(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100CF95A0(void *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    uint64_t v2 = a1[1];
    uint64_t v4 = *(void **)v2;
    v4[1] = *(void *)(*a1 + 8);
    **(void **)(v3 + 8) = v4;
    a1[2] = 0;
    while ((void *)v2 != a1)
    {
      uint64_t v5 = *(void *)(v2 + 8);
      sub_10017FDF0((int)a1, (void **)v2);
      uint64_t v2 = v5;
    }
  }
}

void sub_100CF9604(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100CF9634()
{
  xmmword_102480FE0 = 0u;
  *(_OWORD *)algn_102480FF0 = 0u;
  dword_102481000 = 1065353216;
  __cxa_atexit((void (*)(void *))sub_100CF8214, &xmmword_102480FE0, (void *)&_mh_execute_header);
  sub_100134750(&qword_102481008, "com.apple.NanoCompass.watchkitapp");

  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102481008, (void *)&_mh_execute_header);
}

void sub_100CF9910(uint64_t a1, void *a2)
{
  [+[NSDate date] timeIntervalSince1970];
  double v5 = v4;
  [a2 bleAdvertisementTimestamp];
  double v7 = v6;
  id v8 = [a2 contactID];
  unsigned __int8 v9 = [a2 nearbyInfoV2DecryptedFlags];
  if (!v8 || (v9 & 2) != 0)
  {
    if (v7 > 0.0) {
      double v5 = v7 + kCFAbsoluteTimeIntervalSince1970;
    }
    id v12 = [objc_alloc((Class)CLGatheringBleAdvertisement) initWithAddress:objc_msgSend(a2, "btAddressData") contactId:objc_msgSend(a2, "contactID") flags:objc_msgSend(a2, "nearbyInfoV2Flags") eFlags:objc_msgSend(a2, "nearbyInfoV2DecryptedFlags") authTag:objc_msgSend(a2, "nearbyInfoV2AuthTagData") iTag:objc_msgSend(a2, "nearbyInfoV2AuthIntegrityTagData") rssi:v5 count:1];
    [objc_msgSend(*(id *)(a1 + 32), "delegate") didReceiveAdvertisement:v12];
  }
  else
  {
    if (qword_1024194B0 != -1) {
      dispatch_once(&qword_1024194B0, &stru_1022F2270);
    }
    __int16 v10 = qword_1024194B8;
    if (os_log_type_enabled((os_log_t)qword_1024194B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 138412546;
      id v14 = [a2 contactID];
      __int16 v15 = 1024;
      unsigned int v16 = [a2 nearbyInfoV2DecryptedFlags];
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "ContactID %@ opted out, niv2df %x", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194B0 != -1) {
        dispatch_once(&qword_1024194B0, &stru_1022F2270);
      }
      [a2 contactID];
      [a2 nearbyInfoV2DecryptedFlags];
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLGatheringBluetoothScanner initWithQueue:withSettings:withPolicy:]_block_invoke", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
}

void sub_100CF9C64(uint64_t a1, void *a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  id v5 = [[objc_msgSend(*(id *)(a1 + 32), "settings") loggingVolatileMaxAge];
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v6 = [a2 countByEnumeratingWithState:&v25 objects:v45 count:16];
  if (v6)
  {
    id v7 = v6;
    int v8 = 0;
    int v9 = 0;
    double v10 = Current - (double)(uint64_t)v5;
    uint64_t v11 = *(void *)v26;
    do
    {
      for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v26 != v11) {
          objc_enumerationMutation(a2);
        }
        uint64_t v13 = *(void **)(*((void *)&v25 + 1) + 8 * i);
        [v13 bleAdvertisementTimestamp];
        if (v15 >= *(double *)(*(void *)(a1 + 32) + 8))
        {
          [v13 bleAdvertisementTimestamp];
          if (v16 >= v10)
          {
            (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
            [v13 bleAdvertisementTimestamp];
            *(void *)(*(void *)(a1 + 32) + 8) = v17;
          }
          else
          {
            ++v8;
          }
        }
        else
        {
          ++v9;
        }
      }
      id v7 = [a2 countByEnumeratingWithState:&v25 objects:v45 count:16];
    }
    while (v7);
  }
  else
  {
    int v8 = 0;
    int v9 = 0;
  }
  if (qword_1024194B0 != -1) {
    dispatch_once(&qword_1024194B0, &stru_1022F2270);
  }
  id v18 = qword_1024194B8;
  if (os_log_type_enabled((os_log_t)qword_1024194B8, OS_LOG_TYPE_DEFAULT))
  {
    id v19 = [a2 count];
    uint64_t v20 = *(void *)(*(void *)(a1 + 32) + 8);
    *(_DWORD *)stat buf = 134218752;
    id v38 = v19;
    __int16 v39 = 1024;
    int v40 = v9;
    __int16 v41 = 1024;
    int v42 = v8;
    __int16 v43 = 2048;
    uint64_t v44 = v20;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Received %zu buffered devices, seenBefore %d, tooOld %d, last timestamp %.3lf", buf, 0x22u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194B0 != -1) {
      dispatch_once(&qword_1024194B0, &stru_1022F2270);
    }
    id v22 = [a2 count];
    uint64_t v23 = *(void *)(*(void *)(a1 + 32) + 8);
    int v29 = 134218752;
    id v30 = v22;
    __int16 v31 = 1024;
    int v32 = v9;
    __int16 v33 = 1024;
    int v34 = v8;
    __int16 v35 = 2048;
    uint64_t v36 = v23;
    id v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLGatheringBluetoothScanner initWithQueue:withSettings:withPolicy:]_block_invoke", "%s\n", v24);
    if (v24 != (char *)buf) {
      free(v24);
    }
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CLLocationManagerGatheringBufferedDevicesReceived, 0, 0, 0);
}

void sub_100CF9FCC(uint64_t a1, void *a2)
{
  if (a2)
  {
    if (qword_1024194B0 != -1) {
      dispatch_once(&qword_1024194B0, &stru_1022F2270);
    }
    double v4 = qword_1024194B8;
    if (os_log_type_enabled((os_log_t)qword_1024194B8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 138412290;
      id v7 = [a2 localizedDescription];
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194B0 != -1) {
        dispatch_once(&qword_1024194B0, &stru_1022F2270);
      }
      [a2 localizedDescription];
      id v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLGatheringBluetoothScanner initWithQueue:withSettings:withPolicy:]_block_invoke", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    [*(id *)(*(void *)(a1 + 32) + 16) invalidate];

    *(void *)(*(void *)(a1 + 32) + 16) = 0;
  }
}

void sub_100CFA1B4(uint64_t a1, void *a2)
{
  if (a2)
  {
    if (qword_1024194B0 != -1) {
      dispatch_once(&qword_1024194B0, &stru_1022F2270);
    }
    double v4 = qword_1024194B8;
    if (os_log_type_enabled((os_log_t)qword_1024194B8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 138412290;
      id v7 = [a2 localizedDescription];
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194B0 != -1) {
        dispatch_once(&qword_1024194B0, &stru_1022F2270);
      }
      [a2 localizedDescription];
      id v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLGatheringBluetoothScanner initWithQueue:withSettings:withPolicy:]_block_invoke", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    [*(id *)(*(void *)(a1 + 32) + 24) invalidate];

    *(void *)(*(void *)(a1 + 32) + 24) = 0;
  }
}

void sub_100CFAA54(id a1)
{
  qword_1024194B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gathering");
}

void sub_100CFAC08(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  double v10 = (std::__shared_weak_count *)a4[1];
  uint64_t v24 = *a4;
  long long v25 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = (std::__shared_weak_count *)a5[1];
  uint64_t v22 = *a5;
  uint64_t v23 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v12 = (std::__shared_weak_count *)a6[1];
  uint64_t v20 = *a6;
  unsigned int v21 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v19[0] = xmmword_102481058;
  v19[1] = unk_102481068;
  v19[2] = xmmword_102481078;
  sub_100D6AEB4(a1, a2, 11, &v24, &v22, &v20, a8, a7, v19);
  if (v21) {
    sub_1000DB0A0(v21);
  }
  if (v23) {
    sub_1000DB0A0(v23);
  }
  if (v25) {
    sub_1000DB0A0(v25);
  }
  *(void *)a1 = off_1022F22A0;
  *(void *)(a1 + 352) = &off_1022F23C8;
  *(void *)(a1 + 360) = off_10231B370;
  *(_OWORD *)(a1 + 368) = xmmword_101D8ACB0;
  *(_OWORD *)(a1 + 384) = xmmword_101D8ACC0;
  *(void *)(a1 + 400) = 0x12000001F4;
  *(_DWORD *)(a1 + 408) = 72;
  *(void *)(a1 + 416) = 0x40CC200000000000;
  *(unsigned char *)(a1 + 424) = 1;
  *(_DWORD *)(a1 + 428) = 1;
  *(_OWORD *)(a1 + 432) = xmmword_101D8ACD0;
  *(_OWORD *)(a1 + 448) = xmmword_101D8ACE0;
  *(void *)(a1 + 464) = 0x40B2C00000000000;
  *(unsigned char *)(a1 + 472) = 0;
  *(_OWORD *)(a1 + 480) = xmmword_101D8ACF0;
  *(_DWORD *)(a1 + 496) = 1;
  *(void *)(a1 + 504) = 0x4122750000000000;
  *(_OWORD *)(a1 + 512) = xmmword_101D8BDB0;
  *(_OWORD *)(a1 + 528) = xmmword_101D8BDC0;
  *(_OWORD *)(a1 + 544) = xmmword_101D8BDD0;
  *(_OWORD *)(a1 + 560) = xmmword_101D8BDE0;
  *(void *)(a1 + 576) = 0x3F847AE147AE147BLL;
  *(_DWORD *)(a1 + 584) = 4;
  *(_OWORD *)(a1 + 592) = xmmword_101D8AD00;
  *(void *)(a1 + 608) = 0x405E000000000000;
  *(void *)(a1 + 616) = *a3;
  uint64_t v13 = a3[1];
  *(void *)(a1 + 624) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 640) = 0;
  *(unsigned char *)(a1 + 796) = 0;
  *(unsigned char *)(a1 + 800) = 0;
  *(unsigned char *)(a1 + 1440) = 0;
  *(_DWORD *)(a1 + 1448) = 0;
  *(void *)(a1 + 1456) = objc_alloc_init((Class)SPFinderInterface);
  *(void *)(a1 + 1464) = objc_alloc_init((Class)NSMutableArray);
  *(void *)(a1 + 1472) = objc_alloc_init((Class)NSMutableArray);
  *(void *)(a1 + 1480) = objc_alloc_init(CLAvengerBeaconPayloadDedupingCache);
  *(unsigned char *)(a1 + 1488) = 0;
  *(unsigned char *)(a1 + 1492) = 0;
  *(unsigned char *)(a1 + 1496) = 0;
  *(unsigned char *)(a1 + 1632) = 0;
  *(_WORD *)(a1 + 1640) = 0;
  *(void *)(a1 + 1648) = [objc_msgSend(*(id *)(a1 + 8), "silo") newTimer];
  *(unsigned char *)(a1 + 1664) = 0;
  *(void *)(a1 + 1672) = [objc_msgSend(*(id *)(a1 + 8), "silo") newTimer];
  *(_WORD *)(a1 + 1696) = 0;
  *(unsigned char *)(a1 + 1712) = 0;
  *(_DWORD *)(a1 + 1784) = 0;
  *(_OWORD *)(a1 + 1720) = 0u;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(_OWORD *)(a1 + 1752) = 0u;
  *(_OWORD *)(a1 + 1768) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 1792) = _Q0;
  *(void *)(a1 + 1808) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 1816) = 0;
  *(void *)(a1 + 1832) = 0;
  *(void *)(a1 + 1824) = 0;
  *(_DWORD *)(a1 + 1840) = 0;
  *(void *)(a1 + 1856) = 0;
  *(void *)(a1 + 1848) = 0;
  *(_DWORD *)(a1 + 1864) = 0;
  *(void *)(a1 + 1901) = 0;
  *(void *)(a1 + 1896) = 0;
  *(_WORD *)(a1 + 1920) = 0;
  *(unsigned char *)(a1 + 1922) = 0;
  *(void *)(a1 + 1872) = 0;
  *(void *)(a1 + 1880) = 0;
  *(_WORD *)(a1 + 1888) = 0;
  sub_100103240();
  *(unsigned char *)(a1 + 1923) = sub_1007412E4();
  *(unsigned char *)(a1 + 1924) = 0;
  *(_WORD *)(a1 + 1976) = 0;
  *(_OWORD *)(a1 + 1984) = 0u;
  *(_OWORD *)(a1 + 2000) = 0u;
  *(_OWORD *)(a1 + 2016) = 0u;
  *(_OWORD *)(a1 + 2032) = 0u;
  *(_OWORD *)(a1 + 2048) = 0u;
  *(_OWORD *)(a1 + 2064) = 0u;
  *(_DWORD *)(a1 + 2079) = 0;
  *(_OWORD *)(a1 + 2088) = 0u;
  *(_OWORD *)(a1 + 2104) = 0u;
  *(_OWORD *)(a1 + 2120) = 0u;
  *(_OWORD *)(a1 + 2136) = 0u;
  *(_OWORD *)(a1 + 2147) = 0u;
  *(unsigned char *)(a1 + 2168) = 0;
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 616) + 32))(*(void *)(a1 + 616), a1 + 360);
  *(void *)(a1 + 1688) = *(void *)(a1 + 368);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 616) + 16))(*(void *)(a1 + 616), a1 + 352);
  operator new();
}

void sub_100CFB950(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x427]) < 0) {
    operator delete((void *)STACK[0x410]);
  }
  sub_1000064D0(v2);
  if (*(unsigned char *)(v1 + 1440))
  {
    double v4 = *(std::__shared_weak_count **)(v1 + 1328);
    if (v4) {
      sub_1000DB0A0(v4);
    }
  }
  id v5 = *(std::__shared_weak_count **)(v1 + 624);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  sub_1003C0998(v1);
  _Unwind_Resume(a1);
}

void sub_100CFBAE8(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F24F8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    double v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSubHarvesterAvenger::onPerformanceAnalyticsTimerFired", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F24F8);
    }
    id v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)stat buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 2082;
      uint64_t v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSubHarvesterAvenger::onPerformanceAnalyticsTimerFired\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  sub_100D01E88(a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_100CFBC9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CFBCBC(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F24F8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    double v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSubHarvesterAvenger::onEnabledAnalyticsTimerFired", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F24F8);
    }
    id v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)stat buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 2082;
      uint64_t v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSubHarvesterAvenger::onEnabledAnalyticsTimerFired\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  sub_100D025E4(a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_100CFBE70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CFBE90(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F24F8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    double v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSubHarvesterAvenger::onDeferredSaveBeaconPayloadTimerFired", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F24F8);
    }
    id v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)stat buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 2082;
      uint64_t v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSubHarvesterAvenger::onDeferredSaveBeaconPayloadTimerFired\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  sub_100D03578(a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_100CFC044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100CFC064(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
}

uint64_t sub_100CFC070(uint64_t a1)
{
  *(void *)a1 = off_1022F22A0;
  *(void *)(a1 + 352) = &off_1022F23C8;

  uint64_t v2 = *(void *)(a1 + 1720);
  if (v2)
  {
    sub_100998C38(v2);
    operator delete();
  }
  uint64_t v3 = *(void *)(a1 + 1728);
  if (v3)
  {
    sub_100998C38(v3);
    operator delete();
  }
  uint64_t v4 = *(void *)(a1 + 1680);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 1656);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 1928);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }

  uint64_t v7 = *(void *)(a1 + 1968);
  if (v7)
  {
    sub_100998C38(v7);
    operator delete();
  }
  sub_1000064D0(a1 + 1984);
  if (*(unsigned char *)(a1 + 1440))
  {
    int v8 = *(std::__shared_weak_count **)(a1 + 1328);
    if (v8) {
      sub_1000DB0A0(v8);
    }
  }
  int v9 = *(std::__shared_weak_count **)(a1 + 624);
  if (v9) {
    sub_1000DB0A0(v9);
  }

  return sub_1003C0998(a1);
}

uint64_t sub_100CFC23C(uint64_t a1)
{
  return sub_100CFC070(a1 - 352);
}

void sub_100CFC244(uint64_t a1)
{
  sub_100CFC070(a1);

  operator delete();
}

void sub_100CFC27C(uint64_t a1)
{
  sub_100CFC070(a1 - 352);

  operator delete();
}

uint64_t sub_100CFC2B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 616) + 200))();
}

uint64_t sub_100CFC2E0(uint64_t a1, uint64_t a2)
{
  sub_1000E9354(v16);
  long long v4 = unk_102481068;
  *(_OWORD *)(a1 + 280) = xmmword_102481058;
  *(_OWORD *)(a1 + 296) = v4;
  *(_OWORD *)(a1 + 305) = unk_102481071;
  if (sub_100012960(a2, "Avenger", v16))
  {
    sub_1012B77D8(a1 + 280, (uint64_t)v16);
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F2518);
    }
    uint64_t v5 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      sub_10012FD50(a1);
      unsigned int v6 = sub_10012FD50(a1);
      sub_1012B7520();
      uint64_t v7 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__p
         : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)stat buf = 68289539;
      int v18 = 0;
      __int16 v19 = 2082;
      uint64_t v20 = "";
      __int16 v21 = 2050;
      uint64_t v22 = v6;
      __int16 v23 = 2081;
      uint64_t v24 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"harvest-apply-rules\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"rules\":%{private, location:escape_only}s}", buf, 0x26u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    sub_1000E9354(v14);
    if (sub_100012960((uint64_t)v16, "Settings", v14))
    {
      sub_10128C124(a1 + 360, (uint64_t)v14);
      memset(&__p, 0, sizeof(__p));
      sub_1004D6B10((uint64_t)v14, &__p);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022F2518);
      }
      int v8 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        sub_10012FD50(a1);
        unsigned int v9 = sub_10012FD50(a1);
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)stat buf = 68289539;
        int v18 = 0;
        __int16 v19 = 2082;
        uint64_t v20 = "";
        __int16 v21 = 2050;
        uint64_t v22 = v9;
        __int16 v23 = 2081;
        uint64_t v24 = p_p;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"harvest-apply-settings\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"settings\":%{private, location:escape_only}s}", buf, 0x26u);
      }
      uint64_t v11 = *(void *)(a1 + 1680);
      if (v11) {
        sub_10131AE34(v11, *(_DWORD *)(a1 + 404));
      }
      uint64_t v12 = *(void *)(a1 + 1656);
      if (v12) {
        sub_10131AE34(v12, *(_DWORD *)(a1 + 408));
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    sub_10013F3C4(v14);
  }
  return sub_10013F3C4(v16);
}

void sub_100CFC5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_10013F3C4(&a10);
  sub_10013F3C4(&a18);
  _Unwind_Resume(a1);
}

id sub_100CFC61C(uint64_t a1)
{
  return [*(id *)(a1 + 1464) count];
}

uint64_t sub_100CFC628()
{
  return 0;
}

uint64_t sub_100CFC630(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1921))
  {
    uint64_t v2 = *(void *)(a1 + 616);
    int v7 = 12;
    (*(void (**)(uint64_t, int *))(*(void *)v2 + 96))(v2, &v7);
    *(unsigned char *)(a1 + 1921) = 0;
  }
  int v7 = 3600;
  char v8 = 0;
  uint64_t v3 = *(void *)(a1 + 1912);
  if (v3 == 2 || v3 == 1 && !*(unsigned char *)(a1 + 1920)) {
    char v8 = 1;
  }
  __int16 v10 = "avengers";
  char v9 = 0;
  uint64_t v4 = *(void *)(a1 + 616);
  int v6 = 12;
  uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v4 + 80))(v4, &v6, &v7);
  *(unsigned char *)(a1 + 1921) = 1;
  return result;
}

uint64_t sub_100CFC718(uint64_t a1)
{
  [*(id *)(a1 + 1464) removeAllObjects];
  [*(id *)(a1 + 1472) removeAllObjects];
  [*(id *)(a1 + 1480) removeAllObjects];
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022F2518);
  }
  uint64_t v2 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 1697);
    v27[0] = 68289538;
    v27[1] = 0;
    __int16 v28 = 2082;
    int v29 = "";
    __int16 v30 = 1026;
    int v31 = v3;
    __int16 v32 = 2050;
    uint64_t v33 = 11;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"avenger: derivedEnableHarvesting\", \"optInScreenOffScan\":%{public}hhd, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v27, 0x22u);
  }
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = sub_10012FD50(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 24))(v4, v5, 1);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = sub_10012FD50(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 24))(v6, v7, 3);
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = sub_10012FD50(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 24))(v8, v9, 7);
  uint64_t v10 = *(void *)(a1 + 616);
  v27[0] = 22;
  (*(void (**)(uint64_t, _DWORD *))(*(void *)v10 + 48))(v10, v27);
  uint64_t v11 = *(void *)(a1 + 616);
  v27[0] = 0;
  (*(void (**)(uint64_t, _DWORD *))(*(void *)v11 + 64))(v11, v27);
  uint64_t v12 = *(void *)(a1 + 616);
  v27[0] = 0;
  (*(void (**)(uint64_t, _DWORD *))(*(void *)v12 + 104))(v12, v27);
  uint64_t v13 = *(void *)(a1 + 616);
  v27[0] = 6;
  (*(void (**)(uint64_t, _DWORD *))(*(void *)v13 + 88))(v13, v27);
  uint64_t v14 = *(void *)(a1 + 616);
  v27[0] = 7;
  (*(void (**)(uint64_t, _DWORD *))(*(void *)v14 + 88))(v14, v27);
  sub_100CFC630(a1);
  (*(void (**)(void, void))(**(void **)(a1 + 616) + 144))(*(void *)(a1 + 616), *(unsigned __int8 *)(a1 + 1697));
  (*(void (**)(void))(**(void **)(a1 + 616) + 192))(*(void *)(a1 + 616));
  uint64_t v15 = *(void *)(a1 + 616);
  v27[0] = 4;
  (*(void (**)(uint64_t, _DWORD *))(*(void *)v15 + 120))(v15, v27);
  uint64_t v16 = *(void *)(a1 + 616);
  v27[0] = 3;
  (*(void (**)(uint64_t, _DWORD *))(*(void *)v16 + 120))(v16, v27);
  uint64_t v17 = *(void *)(a1 + 616);
  v27[0] = 2;
  (*(void (**)(uint64_t, _DWORD *))(*(void *)v17 + 120))(v17, v27);
  uint64_t v18 = *(void *)(a1 + 616);
  v27[0] = 1;
  (*(void (**)(uint64_t, _DWORD *))(*(void *)v18 + 120))(v18, v27);
  uint64_t v19 = *(void *)(a1 + 1720);
  if (v19)
  {
    *(_DWORD *)(a1 + 1784) = 0;
    *(_OWORD *)(a1 + 1752) = 0u;
    *(_OWORD *)(a1 + 1768) = 0u;
    *(_OWORD *)(a1 + 1736) = 0u;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(a1 + 1792) = _Q0;
    *(void *)(a1 + 1808) = 0xBFF0000000000000;
    *(_DWORD *)(a1 + 1816) = 0;
    *(void *)(a1 + 1880) = 0;
    *(void *)(a1 + 1872) = 0;
    *(void *)(a1 + 1832) = 0;
    *(void *)(a1 + 1824) = 0;
    *(_DWORD *)(a1 + 1840) = 0;
    *(void *)(a1 + 1856) = 0;
    *(void *)(a1 + 1848) = 0;
    *(_DWORD *)(a1 + 1864) = 0;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    sub_1001165F8(v19, Current + *(double *)(a1 + 416));
  }
  return 1;
}

id sub_100CFCB80(uint64_t a1)
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022F2518);
  }
  uint64_t v2 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 68289282;
    int v30 = 0;
    __int16 v31 = 2082;
    __int16 v32 = "";
    __int16 v33 = 2050;
    uint64_t v34 = 11;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"avenger: derivedDisableHarvesting\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
  }
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = sub_10012FD50(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3 + 32))(v3, v4, 1);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = sub_10012FD50(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, v6, 3);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = sub_10012FD50(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 32))(v7, v8, 7);
  uint64_t v9 = *(void *)(a1 + 616);
  *(_DWORD *)stat buf = 22;
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v9 + 56))(v9, buf);
  uint64_t v10 = *(void *)(a1 + 616);
  *(_DWORD *)stat buf = 0;
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v10 + 72))(v10, buf);
  uint64_t v11 = *(void *)(a1 + 616);
  *(_DWORD *)stat buf = 12;
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v11 + 96))(v11, buf);
  *(unsigned char *)(a1 + 1921) = 0;
  uint64_t v12 = *(void *)(a1 + 616);
  *(_DWORD *)stat buf = 6;
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v12 + 96))(v12, buf);
  uint64_t v13 = *(void *)(a1 + 616);
  *(_DWORD *)stat buf = 7;
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v13 + 96))(v13, buf);
  uint64_t v14 = *(void *)(a1 + 616);
  *(_DWORD *)stat buf = 0;
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v14 + 112))(v14, buf);
  uint64_t v15 = *(void *)(a1 + 616);
  *(_DWORD *)stat buf = 4;
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v15 + 128))(v15, buf);
  uint64_t v16 = *(void *)(a1 + 616);
  *(_DWORD *)stat buf = 3;
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v16 + 128))(v16, buf);
  uint64_t v17 = *(void *)(a1 + 616);
  *(_DWORD *)stat buf = 2;
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v17 + 128))(v17, buf);
  uint64_t v18 = *(void *)(a1 + 616);
  *(_DWORD *)stat buf = 1;
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v18 + 128))(v18, buf);
  if (*(unsigned char *)(a1 + 1664))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022F2538);
    }
    uint64_t v19 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#wigo,off,BlueAvengerHarvest", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022F2538);
      }
      __int16 v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSubHarvesterAvenger::derivedDisableHarvesting()", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
    AnalyticsSendEventLazy();
    uint64_t v20 = *(void *)(a1 + 616);
    *(_DWORD *)stat buf = 0;
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v20 + 56))(v20, buf);
  }
  if (*(unsigned char *)(a1 + 1641))
  {
    uint64_t v21 = *(void *)(a1 + 616);
    *(_DWORD *)stat buf = 1;
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v21 + 56))(v21, buf);
  }
  (*(void (**)(void))(**(void **)(a1 + 616) + 152))(*(void *)(a1 + 616));
  [*(id *)(a1 + 1464) removeAllObjects];
  [*(id *)(a1 + 1472) removeAllObjects];
  [*(id *)(a1 + 1480) removeAllObjects];
  id result = *(id *)(a1 + 1720);
  if (result)
  {
    *(_DWORD *)(a1 + 1784) = 0;
    *(_OWORD *)(a1 + 1752) = 0u;
    *(_OWORD *)(a1 + 1768) = 0u;
    *(_OWORD *)(a1 + 1736) = 0u;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(a1 + 1792) = _Q0;
    *(void *)(a1 + 1808) = 0xBFF0000000000000;
    *(_DWORD *)(a1 + 1816) = 0;
    *(void *)(a1 + 1880) = 0;
    *(void *)(a1 + 1872) = 0;
    *(void *)(a1 + 1832) = 0;
    *(void *)(a1 + 1824) = 0;
    *(_DWORD *)(a1 + 1840) = 0;
    *(void *)(a1 + 1856) = 0;
    *(void *)(a1 + 1848) = 0;
    *(_DWORD *)(a1 + 1864) = 0;
    return sub_1001B0AE4((uint64_t)result);
  }
  return result;
}

NSDictionary *__cdecl sub_100CFD180(id a1)
{
  return (NSDictionary *)&off_1023976A8;
}

id sub_100CFD18C(uint64_t a1)
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022F2518);
  }
  uint64_t v2 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 1464) count];
    id v4 = [*(id *)(a1 + 1472) count];
    v7[0] = 68289794;
    v7[1] = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    __int16 v10 = 2050;
    id v11 = v3;
    __int16 v12 = 2050;
    id v13 = v4;
    __int16 v14 = 2050;
    uint64_t v15 = 11;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"derivedPruneHarvest\", \"cacheSize\":%{public}lu, \"beaconPayloadCacheSize\":%{public}lu, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v7, 0x30u);
  }
  while ((unint64_t)[*(id *)(a1 + 1464) count] > *(int *)(a1 + 400))
  {
    id v5 = [[objc_msgSend(*(id *)(a1 + 1464), "objectAtIndexedSubscript:", 0) advertisement];
    if (sub_100CFD338((uint64_t)v5, v5)) {
      ++*(_DWORD *)(a1 + 1768);
    }
    else {
      ++*(_DWORD *)(a1 + 1764);
    }
    [*(id *)(a1 + 1464) removeObjectAtIndex:0];
    ++*(_DWORD *)(a1 + 1760);
  }
  while ((unint64_t)[*(id *)(a1 + 1472) count] > *(int *)(a1 + 400))
    [*(id *)(a1 + 1472) removeObjectAtIndex:0];
  return [*(id *)(a1 + 1480) pruneCacheWithSize:];
}

id sub_100CFD338(uint64_t a1, void *a2)
{
  if (a2)
  {
    return [a2 isPosh];
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F2518);
    }
    id v3 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_ERROR))
    {
      int v5 = 68289282;
      int v6 = 0;
      __int16 v7 = 2082;
      __int16 v8 = "";
      __int16 v9 = 2050;
      uint64_t v10 = 11;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"processAdvertisementCache missing advertisement\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v5, 0x1Cu);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022F2518);
      }
    }
    id v4 = qword_102419568;
    if (os_signpost_enabled((os_log_t)qword_102419568))
    {
      int v5 = 68289282;
      int v6 = 0;
      __int16 v7 = 2082;
      __int16 v8 = "";
      __int16 v9 = 2050;
      uint64_t v10 = 11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "processAdvertisementCache missing advertisement", "{\"msg%{public}.0s\":\"processAdvertisementCache missing advertisement\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v5, 0x1Cu);
    }
    return 0;
  }
}

id sub_100CFD510(uint64_t a1)
{
  return [*(id *)(a1 + 72) clearDataForHarvester:11];
}

void sub_100CFD51C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022F2518);
  }
  int v6 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 68289282;
    v7[1] = 0;
    __int16 v8 = 2082;
    __int16 v9 = "";
    __int16 v10 = 2050;
    uint64_t v11 = 11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"got location notification\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v7, 0x1Cu);
  }
  sub_100CFD624(a1, a4, a4 + 160);
}

void sub_100CFD624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 1923))
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F2518);
    }
    uint64_t v3 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      uint64_t buf = 68289282;
      __int16 v62 = 2082;
      __int16 v63 = "";
      __int16 v64 = 2050;
      *(void *)__int16 v65 = 11;
      id v4 = "{\"msg%{public}.0s\":\"device SKU is restricted; discarding location\", \"subHarvester\":%{public, location:C"
           "LSubHarvesterIdentifier}lld}";
LABEL_11:
      int v6 = v3;
      uint32_t v7 = 28;
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, v4, (uint8_t *)&buf, v7);
      return;
    }
    return;
  }
  if (!*(unsigned char *)(a1 + 1922))
  {
    uint64_t v10 = *(void *)(a1 + 1928);
    LOBYTE(buf) = 0;
    if (sub_1001A5C3C(v10, (double *)(a2 + 4), (double *)(a2 + 12), (double *)(a2 + 20), &buf))
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022F2518);
      }
      uint64_t v11 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        uint64_t buf = 68289282;
        __int16 v62 = 2082;
        __int16 v63 = "";
        __int16 v64 = 2050;
        *(void *)__int16 v65 = 11;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"location inside excluded zone; discarding\", \"subHarvester\":%{public, location:CLSubH"
          "arvesterIdentifier}lld}",
          (uint8_t *)&buf,
          0x1Cu);
      }
      *(unsigned char *)(a1 + 1924) = 1;
      return;
    }
    if (((*(uint64_t (**)(void))(**(void **)(a1 + 56) + 176))(*(void *)(a1 + 56)) & 1) == 0)
    {
      __int16 v12 = *(void **)(a1 + 1952);
      long long v13 = *(_OWORD *)(a2 + 112);
      v59[6] = *(_OWORD *)(a2 + 96);
      v59[7] = v13;
      v60[0] = *(_OWORD *)(a2 + 128);
      *(_OWORD *)((char *)v60 + 12) = *(_OWORD *)(a2 + 140);
      long long v14 = *(_OWORD *)(a2 + 48);
      v59[2] = *(_OWORD *)(a2 + 32);
      v59[3] = v14;
      long long v15 = *(_OWORD *)(a2 + 80);
      v59[4] = *(_OWORD *)(a2 + 64);
      v59[5] = v15;
      long long v16 = *(_OWORD *)(a2 + 16);
      v59[0] = *(_OWORD *)a2;
      v59[1] = v16;
      [v12 receiveLocation:v59];
    }
    if (!sub_100D01870(a1, a2))
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022F2518);
      }
      uint64_t v24 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        int v25 = (int)*(double *)(a2 + 4);
        int v26 = (int)*(double *)(a2 + 12);
        int v27 = (int)*(double *)(a2 + 20);
        int v28 = (int)*(double *)(a2 + 76);
        int v29 = *(unsigned __int8 *)(a1 + 796);
        if (*(unsigned char *)(a1 + 796))
        {
          int v30 = (int)*(double *)(a1 + 644);
          int v31 = (int)*(double *)(a1 + 652);
          int v29 = (int)*(double *)(a1 + 660);
          int v32 = (int)*(double *)(a1 + 716);
        }
        else
        {
          int v30 = 0;
          int v31 = 0;
          int v32 = 0;
        }
        uint64_t buf = 68291331;
        __int16 v62 = 2082;
        __int16 v63 = "";
        __int16 v64 = 1025;
        *(_DWORD *)__int16 v65 = v25;
        *(_WORD *)&v65[4] = 1025;
        *(_DWORD *)&v65[6] = v26;
        __int16 v66 = 1025;
        int v67 = v27;
        __int16 v68 = 1025;
        int v69 = v28;
        __int16 v70 = 1025;
        *(_DWORD *)__int16 v71 = v30;
        *(_WORD *)&v71[4] = 1025;
        *(_DWORD *)&v71[6] = v31;
        __int16 v72 = 1025;
        int v73 = v29;
        __int16 v74 = 1025;
        int v75 = v32;
        __int16 v76 = 2050;
        uint64_t v77 = 11;
        id v4 = "{\"msg%{public}.0s\":\"location is filtered due to lack of additional information\", \"lat\":%{private}d, \""
             "lng\":%{private}d, \"ucc\":%{private}d, \"timestamp\":%{private}d, \"last.lat\":%{private}d, \"last.lng\":%"
             "{private}d, \"last.ucc\":%{private}d, \"last.timestamp\":%{private}d, \"subHarvester\":%{public, location:C"
             "LSubHarvesterIdentifier}lld}";
        int v6 = v24;
        uint32_t v7 = 76;
        goto LABEL_12;
      }
      return;
    }
    uint64_t v17 = *(void **)(a1 + 1944);
    long long v18 = *(_OWORD *)(a2 + 112);
    v57[6] = *(_OWORD *)(a2 + 96);
    v57[7] = v18;
    v58[0] = *(_OWORD *)(a2 + 128);
    *(_OWORD *)((char *)v58 + 12) = *(_OWORD *)(a2 + 140);
    long long v19 = *(_OWORD *)(a2 + 48);
    v57[2] = *(_OWORD *)(a2 + 32);
    v57[3] = v19;
    long long v20 = *(_OWORD *)(a2 + 80);
    v57[4] = *(_OWORD *)(a2 + 64);
    v57[5] = v20;
    long long v21 = *(_OWORD *)(a2 + 16);
    v57[0] = *(_OWORD *)a2;
    v57[1] = v21;
    [v17 receiveLocation:v57];
    if (*(unsigned char *)(a1 + 1664) && (unsigned int v22 = *(_DWORD *)(a2 + 96), v22 <= 0xB) && ((1 << v22) & 0xC02) != 0)
    {
      int v23 = 2;
    }
    else if (*(unsigned char *)(a1 + 1641))
    {
      int v33 = *(_DWORD *)(a2 + 96);
      if (v33 == 4 || v33 == 13) {
        int v23 = 3;
      }
      else {
        int v23 = 1;
      }
    }
    else
    {
      int v23 = 1;
    }
    *(_DWORD *)(a1 + 1448) = v23;
    __int16 v35 = (_OWORD *)(a1 + 640);
    if (*(unsigned char *)(a1 + 796))
    {
      if (*(double *)(a1 + 716) >= *(double *)(a2 + 76))
      {
LABEL_48:
        if (*(unsigned char *)(a1 + 796))
        {
          if (((*(uint64_t (**)(void))(**(void **)(a1 + 56) + 176))(*(void *)(a1 + 56)) & 1) == 0)
          {
            double v55 = *(double *)(a1 + 1792);
            if (v55 > 0.0)
            {
              double v56 = *(double *)(a1 + 716) - v55;
              if (v56 > 0.0)
              {
                ++*(_DWORD *)(a1 + 1864);
                *(double *)(a1 + 1872) = v56 + *(double *)(a1 + 1872);
                *(double *)(a1 + 1880) = *(double *)(a1 + 1880) + v56 * v56;
              }
            }
          }
        }
        if ([*(id *)(a1 + 1464) count]) {
          sub_100D007C4(a1);
        }
        sub_100CFFA50((unsigned char *)a1, 0);
        sub_100CFE714((void *)a1, 0);
        return;
      }
      long long v36 = *(_OWORD *)(a2 + 16);
      *__int16 v35 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 656) = v36;
      long long v37 = *(_OWORD *)(a2 + 32);
      long long v38 = *(_OWORD *)(a2 + 48);
      long long v39 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 720) = v39;
      *(_OWORD *)(a1 + 672) = v37;
      *(_OWORD *)(a1 + 688) = v38;
      long long v40 = *(_OWORD *)(a2 + 96);
      long long v41 = *(_OWORD *)(a2 + 112);
      long long v42 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 780) = *(_OWORD *)(a2 + 140);
      *(_OWORD *)(a1 + 752) = v41;
      *(_OWORD *)(a1 + 768) = v42;
      *(_OWORD *)(a1 + 736) = v40;
    }
    else
    {
      long long v43 = *(_OWORD *)(a2 + 16);
      *__int16 v35 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 656) = v43;
      long long v44 = *(_OWORD *)(a2 + 32);
      long long v45 = *(_OWORD *)(a2 + 48);
      long long v46 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 720) = v46;
      *(_OWORD *)(a1 + 672) = v44;
      *(_OWORD *)(a1 + 688) = v45;
      long long v47 = *(_OWORD *)(a2 + 96);
      long long v48 = *(_OWORD *)(a2 + 112);
      long long v49 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 780) = *(_OWORD *)(a2 + 140);
      *(_OWORD *)(a1 + 752) = v48;
      *(_OWORD *)(a1 + 768) = v49;
      *(_OWORD *)(a1 + 736) = v47;
      *(unsigned char *)(a1 + 796) = 1;
    }
    sub_100D01938(a1 + 800, a3);
    *(unsigned char *)(a1 + 1712) = 0;
    *(double *)(a1 + 1936) = sub_100CFE128((void *)a1, a1 + 1496);
    sub_100CFE220(a1);
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F2518);
    }
    uint64_t v50 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      int v51 = (int)*(double *)(a2 + 4);
      int v52 = (int)*(double *)(a2 + 12);
      int v53 = (int)*(double *)(a2 + 20);
      int v54 = (int)*(double *)(a2 + 76);
      uint64_t buf = 68290307;
      __int16 v62 = 2082;
      __int16 v63 = "";
      __int16 v64 = 1025;
      *(_DWORD *)__int16 v65 = v51;
      *(_WORD *)&v65[4] = 1025;
      *(_DWORD *)&v65[6] = v52;
      __int16 v66 = 1025;
      int v67 = v53;
      __int16 v68 = 1025;
      int v69 = v54;
      __int16 v70 = 2050;
      *(void *)__int16 v71 = 11;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"location is set\", \"lat\":%{private}d, \"lng\":%{private}d, \"ucc\":%{private}d, \"timestamp\":%{private}d, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&buf, 0x34u);
    }
    goto LABEL_48;
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022F2518);
  }
  uint64_t v3 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    uint64_t buf = 68289282;
    __int16 v62 = 2082;
    __int16 v63 = "";
    __int16 v64 = 2050;
    *(void *)__int16 v65 = 11;
    id v4 = "{\"msg%{public}.0s\":\"the country code is restricted; discarding location\", \"subHarvester\":%{public, locati"
         "on:CLSubHarvesterIdentifier}lld}";
    goto LABEL_11;
  }
}

void sub_100CFDCF8(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v6 = *(void **)(a1 + 1944);
  long long v7 = *((_OWORD *)a4 + 7);
  v54[6] = *((_OWORD *)a4 + 6);
  v54[7] = v7;
  uint64_t v55 = *((void *)a4 + 16);
  long long v8 = *((_OWORD *)a4 + 3);
  v54[2] = *((_OWORD *)a4 + 2);
  v54[3] = v8;
  long long v9 = *((_OWORD *)a4 + 5);
  v54[4] = *((_OWORD *)a4 + 4);
  v54[5] = v9;
  long long v10 = *((_OWORD *)a4 + 1);
  v54[0] = *(_OWORD *)a4;
  v54[1] = v10;
  [v6 receiveMotionActivity:v54];
  uint64_t v11 = *(void **)(a1 + 1952);
  long long v12 = *((_OWORD *)a4 + 7);
  v52[6] = *((_OWORD *)a4 + 6);
  v52[7] = v12;
  uint64_t v53 = *((void *)a4 + 16);
  long long v13 = *((_OWORD *)a4 + 3);
  v52[2] = *((_OWORD *)a4 + 2);
  v52[3] = v13;
  long long v14 = *((_OWORD *)a4 + 5);
  v52[4] = *((_OWORD *)a4 + 4);
  v52[5] = v14;
  long long v15 = *((_OWORD *)a4 + 1);
  v52[0] = *(_OWORD *)a4;
  v52[1] = v15;
  [v11 receiveMotionActivity:v52];
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022F2518);
  }
  long long v16 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)uint64_t buf = 68289282;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2050;
    *(void *)&buf[20] = 11;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"got motion state notification\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
  }
  long long v18 = (int *)(a1 + 1496);
  if (!*(unsigned char *)(a1 + 1632)
    || (CLMotionActivity::isSimilar((CLMotionActivity *)(a1 + 1496), (const CLMotionActivity *)a4, v17) & 1) == 0)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F2518);
    }
    long long v19 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = *(unsigned __int8 *)(a1 + 1632);
      if (*(unsigned char *)(a1 + 1632)) {
        int v20 = *v18;
      }
      int v21 = *a4;
      *(void *)uint64_t buf = 68289794;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = v20;
      *(_WORD *)&unsigned char buf[24] = 1026;
      *(_DWORD *)&buf[26] = v21;
      *(_WORD *)&buf[30] = 2050;
      *(void *)&long long v58 = 11;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"updated avenger harvester motion activity state\", \"fLastMotionActivity\":%{public}d, \"nextMotionActivity\":%{public}d, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x28u);
    }
    if ((!*(unsigned char *)(a1 + 1632) || CLMotionActivity::isMoving((CLMotionActivity *)(a1 + 1496)))
      && (CLMotionActivity::isMoving((CLMotionActivity *)a4) & 1) == 0)
    {
      *(unsigned char *)(a1 + 1712) = 1;
    }
    int v22 = *(unsigned __int8 *)(a1 + 1632);
    if (*(unsigned char *)(a1 + 1632) && *v18 <= 0x38 && ((1 << *v18) & 0x110000000000C20) != 0)
    {
      *(_OWORD *)long long v18 = *(_OWORD *)a4;
      long long v23 = *((_OWORD *)a4 + 1);
      long long v24 = *((_OWORD *)a4 + 2);
      long long v25 = *((_OWORD *)a4 + 4);
      *(_OWORD *)(a1 + 1544) = *((_OWORD *)a4 + 3);
      *(_OWORD *)(a1 + 1560) = v25;
      *(_OWORD *)(a1 + 1512) = v23;
      *(_OWORD *)(a1 + 1528) = v24;
      long long v26 = *((_OWORD *)a4 + 5);
      long long v27 = *((_OWORD *)a4 + 6);
      long long v28 = *((_OWORD *)a4 + 7);
      *(void *)(a1 + 1624) = *((void *)a4 + 16);
      *(_OWORD *)(a1 + 1592) = v27;
      *(_OWORD *)(a1 + 1608) = v28;
      *(_OWORD *)(a1 + 1576) = v26;
    }
    else
    {
      if (*a4 <= 0x38 && ((1 << *a4) & 0x110000000000C20) != 0)
      {
        [*(id *)(a1 + 1960) regeotagBeaconPayloads];
        int v22 = *(unsigned __int8 *)(a1 + 1632);
      }
      *(_OWORD *)long long v18 = *(_OWORD *)a4;
      long long v29 = *((_OWORD *)a4 + 1);
      long long v30 = *((_OWORD *)a4 + 2);
      long long v31 = *((_OWORD *)a4 + 4);
      *(_OWORD *)(a1 + 1544) = *((_OWORD *)a4 + 3);
      *(_OWORD *)(a1 + 1560) = v31;
      *(_OWORD *)(a1 + 1512) = v29;
      *(_OWORD *)(a1 + 1528) = v30;
      long long v32 = *((_OWORD *)a4 + 5);
      long long v33 = *((_OWORD *)a4 + 6);
      long long v34 = *((_OWORD *)a4 + 7);
      *(void *)(a1 + 1624) = *((void *)a4 + 16);
      *(_OWORD *)(a1 + 1592) = v33;
      *(_OWORD *)(a1 + 1608) = v34;
      *(_OWORD *)(a1 + 1576) = v32;
      if (!v22) {
        *(unsigned char *)(a1 + 1632) = 1;
      }
    }
    long long v35 = *((_OWORD *)a4 + 7);
    long long v62 = *((_OWORD *)a4 + 6);
    long long v63 = v35;
    uint64_t v64 = *((void *)a4 + 16);
    long long v36 = *((_OWORD *)a4 + 3);
    long long v58 = *((_OWORD *)a4 + 2);
    long long v59 = v36;
    long long v37 = *((_OWORD *)a4 + 5);
    long long v60 = *((_OWORD *)a4 + 4);
    long long v61 = v37;
    long long v38 = *((_OWORD *)a4 + 1);
    *(_OWORD *)uint64_t buf = *(_OWORD *)a4;
    *(_OWORD *)&uint8_t buf[16] = v38;
    char v65 = 1;
    double v39 = sub_100CFE128((void *)a1, (uint64_t)buf);
    double v40 = *(double *)(a1 + 1936);
    if (v40 < v39) {
      double v40 = v39;
    }
    *(double *)(a1 + 1936) = v40;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v41 = *(void **)(a1 + 1464);
    id v42 = [v41 countByEnumeratingWithState:&v48 objects:v56 count:16];
    if (v42)
    {
      id v43 = v42;
      uint64_t v44 = *(void *)v49;
      do
      {
        for (uint64_t i = 0; i != v43; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v49 != v44) {
            objc_enumerationMutation(v41);
          }
          long long v46 = *(void **)(*((void *)&v48 + 1) + 8 * i);
          [v46 maxActivityBasedSpeedSinceAdvertisement];
          if (v47 < v39) {
            double v47 = v39;
          }
          [v46 setMaxActivityBasedSpeedSinceAdvertisement:v47];
        }
        id v43 = [v41 countByEnumeratingWithState:&v48 objects:v56 count:16];
      }
      while (v43);
    }
    sub_100CFE220(a1);
  }
}

double sub_100CFE128(void *a1, uint64_t a2)
{
  sub_100103240();
  double v4 = 0.0;
  if (sub_1000F08D4()) {
    return v4;
  }
  if (!*(unsigned char *)(a2 + 136)) {
    goto LABEL_9;
  }
  int v5 = *(_DWORD *)a2;
  if (*(int *)a2 > 51)
  {
    if (v5 > 99)
    {
      if (v5 == 100 || v5 == 19150)
      {
LABEL_14:
        int v6 = a1 + 67;
        return *(double *)v6;
      }
    }
    else if (v5 == 52 || v5 == 56)
    {
LABEL_9:
      int v6 = a1 + 66;
      return *(double *)v6;
    }
LABEL_15:
    int v6 = a1 + 69;
    return *(double *)v6;
  }
  switch(v5)
  {
    case 1:
    case 2:
      return v4;
    case 5:
    case 10:
    case 11:
      goto LABEL_9;
    case 6:
      goto LABEL_14;
    case 8:
      int v6 = a1 + 68;
      return *(double *)v6;
    default:
      goto LABEL_15;
  }
  return v4;
}

void sub_100CFE220(uint64_t a1)
{
  int v2 = sub_100D00190(a1);
  uint64_t v3 = 376;
  if (v2) {
    uint64_t v3 = 368;
  }
  *(void *)(a1 + 1688) = *(void *)(a1 + v3);
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022F2518);
  }
  double v4 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 1688);
    v6[0] = 68289538;
    v6[1] = 0;
    __int16 v7 = 2082;
    long long v8 = "";
    __int16 v9 = 2050;
    uint64_t v10 = v5;
    __int16 v11 = 2050;
    uint64_t v12 = 11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"updateOperationalModeIfNecessary\", \"fCurrentTimeOffsetThreshold\":\"%{public}f\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v6, 0x26u);
  }
}

void sub_100CFE334()
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022F2518);
  }
  uint64_t v0 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    v1[0] = 68289282;
    v1[1] = 0;
    __int16 v2 = 2082;
    uint64_t v3 = "";
    __int16 v4 = 2050;
    uint64_t v5 = 11;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"got step count notification\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v1, 0x1Cu);
  }
}

void *sub_100CFE420(void *a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (*a3 == 22)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F2518);
    }
    int v6 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = sub_1010FB9FC(*(int **)(a4 + 800));
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(void *)&buf[20] = v7;
      *(_WORD *)&buf[28] = 2050;
      *(void *)&buf[30] = 11;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"got batched wifi provider location\", \"batchSize\":%{public}lu, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x26u);
    }
    if (sub_1010FB9FC(*(int **)(a4 + 800)))
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      do
      {
        uint64_t v10 = sub_1002D4CD0(*(void *)(a4 + 800));
        long long v11 = *(_OWORD *)(v10 + v8 + 16);
        *(_OWORD *)uint64_t buf = *(_OWORD *)(v10 + v8);
        *(_OWORD *)&uint8_t buf[16] = v11;
        long long v12 = *(_OWORD *)(v10 + v8 + 80);
        long long v14 = *(_OWORD *)(v10 + v8 + 32);
        long long v13 = *(_OWORD *)(v10 + v8 + 48);
        long long v25 = *(_OWORD *)(v10 + v8 + 64);
        long long v26 = v12;
        *(_OWORD *)&unsigned char buf[32] = v14;
        long long v24 = v13;
        long long v16 = *(_OWORD *)(v10 + v8 + 112);
        long long v15 = *(_OWORD *)(v10 + v8 + 128);
        long long v17 = *(_OWORD *)(v10 + v8 + 96);
        *(_OWORD *)&v29[12] = *(_OWORD *)(v10 + v8 + 140);
        long long v28 = v16;
        *(_OWORD *)long long v29 = v15;
        long long v27 = v17;
        sub_100CFD624((uint64_t)a1, (uint64_t)buf, a4 + 160);
        ++v9;
        v8 += 156;
      }
      while (v9 < sub_1010FB9FC(*(int **)(a4 + 800)));
    }
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F2518);
    }
    long long v19 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_FAULT))
    {
      int v20 = *a3;
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "received unhandled notification %{public, location:CLLocationProvider_Type::Notification}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022F2518);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLSubHarvesterAvenger::onBatchedLocationReceived(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v22);
      if (v22 != buf) {
        free(v22);
      }
    }
  }
  return sub_100CFE714(a1, 0);
}

void *sub_100CFE714(void *result, int a2)
{
  if (*((unsigned char *)result + 1641))
  {
    uint64_t v3 = result;
    uint64_t v4 = result[77];
    v8[0] = 1;
    (*(void (**)(uint64_t, _DWORD *))(*(void *)v4 + 56))(v4, v8);
    *((unsigned char *)v3 + 1641) = 0;
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F2518);
    }
    uint64_t v5 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      double v6 = *((double *)v3 + 49);
      if ((a2 & 1) == 0)
      {
        [(id)v3[206] nextFireDelay];
        double v6 = v6 - v7;
      }
      v8[0] = 68289794;
      v8[1] = 0;
      __int16 v9 = 2082;
      uint64_t v10 = "";
      __int16 v11 = 1026;
      int v12 = a2;
      __int16 v13 = 2050;
      double v14 = v6;
      __int16 v15 = 2050;
      uint64_t v16 = 11;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"BlueAvengerKPI: terminate active fine location request\", \"didTimeout\":%{public}hhd, \"runtime\":\"%{public}f\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v8, 0x2Cu);
    }
    return [(id)v3[206] invalidate];
  }
  return result;
}

void *sub_100CFE884(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  return sub_100CFE420((void *)(a1 - 352), a2, a3, a4);
}

void sub_100CFE88C(uint64_t a1, void *a2)
{
  unsigned int v4 = [a2 isEqualToString:@"KR"];
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022F2518);
  }
  uint64_t v5 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    id v6 = [a2 UTF8String];
    int v7 = *(unsigned __int8 *)(a1 + 1922);
    v8[0] = 68290051;
    v8[1] = 0;
    __int16 v9 = 2082;
    uint64_t v10 = "";
    __int16 v11 = 2081;
    id v12 = v6;
    __int16 v13 = 1025;
    int v14 = v7;
    __int16 v15 = 1025;
    unsigned int v16 = v4;
    __int16 v17 = 2050;
    uint64_t v18 = 11;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onGeoCountryConfigurationChanged\", \"countryCode\":%{private, location:escape_only}s, \"fIsRestrictedCountryCode\":%{private}hhd, \"updatedIsRestrictedCountryCode\":%{private}hhd, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v8, 0x32u);
  }
  if (*(unsigned __int8 *)(a1 + 1922) != v4) {
    *(unsigned char *)(a1 + 1922) = v4;
  }
}

void sub_100CFE9D8(uint64_t a1, void *a2)
{
}

id sub_100CFE9E0(uint64_t a1, void *a2)
{
  long long v83 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  id result = [a2 countByEnumeratingWithState:&v83 objects:v119 count:16];
  id v59 = result;
  if (result)
  {
    long long v62 = (double *)(a1 + 644);
    uint64_t v58 = *(void *)v84;
    long long v50 = (long long *)(a1 + 1984);
    do
    {
      uint64_t v3 = 0;
      do
      {
        if (*(void *)v84 != v58)
        {
          uint64_t v4 = v3;
          objc_enumerationMutation(a2);
          uint64_t v3 = v4;
        }
        uint64_t v61 = v3;
        uint64_t v64 = *(void **)(*((void *)&v83 + 1) + 8 * v3);
        id v65 = [v64 advertisement];
        id v63 = [[objc_msgSend(v65, "address") mutableCopy];
        [v63 appendData:[v65 advertisementData]];
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_1022F2518);
        }
        uint64_t v5 = (unsigned char *)a1;
        id v6 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
        {
          id v7 = [[[v63 cl_hexadecimalString] lowercaseString] UTF8String];
          *(_DWORD *)uint64_t buf = 68289538;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)double v88 = 2082;
          *(void *)&v88[2] = "";
          *(_WORD *)&v88[10] = 2082;
          *(void *)&v88[12] = v7;
          *(_WORD *)&v88[20] = 2050;
          *(void *)&v88[22] = 11;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"prepareAdvertisementsForSPFinder\", \"avengerPublicKey\":%{public, location:escape_only}s, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x26u);
          uint64_t v5 = (unsigned char *)a1;
        }
        if (v5[796])
        {
          double v8 = *(double *)(a1 + 716);
          [objc_msgSend(v65, "scanDate") timeIntervalSinceReferenceDate];
          double v10 = v9;
          [v64 maxActivityBasedSpeedSinceAdvertisement];
          if (*(double *)(a1 + 1936) >= v11) {
            double v11 = *(double *)(a1 + 1936);
          }
          double v12 = fmax(*(double *)(a1 + 684), 0.0);
          if (!*(unsigned char *)(a1 + 1632)
            || (unsigned int v13 = *(_DWORD *)(a1 + 1496), v13 <= 0x38) && ((1 << v13) & 0x110000000000CA8) != 0)
          {
            double v12 = v12 + fmax(*(double *)(a1 + 692), 0.0);
          }
          if (v11 < v12) {
            double v11 = v12;
          }
          double v14 = (v8 - v10) * v11 * ((v8 - v10) * v11) + *(double *)(a1 + 660) * *(double *)(a1 + 660);
          *(void *)uint64_t buf = _NSConcreteStackBlock;
          *(void *)double v88 = 3221225472;
          *(void *)&v88[8] = sub_100D02C1C;
          *(void *)&v88[16] = &unk_1022F2490;
          id v89 = (id)a1;
          *(void *)&v88[24] = v64;
          *(_WORD *)&v90[16] = 256;
          *(double *)long long v90 = v11;
          double v60 = sqrt(v14);
          *(double *)&v90[8] = v60;
          AnalyticsSendEventLazy();
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_1022F2518);
          }
          uint64_t v15 = a1;
          uint64_t v16 = qword_102419568;
          if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
          {
            log = v16;
            id v56 = [[[v63 cl_hexadecimalString] lowercaseString] UTF8String];
            uint64_t v55 = *(void *)(a1 + 716);
            id v17 = [[[objc_msgSend(objc_msgSend(objc_msgSend(v64, "advertisement"), "scanDate"), "description") UTF8String];
            double v18 = *v62;
            uint64_t v19 = *(void *)(a1 + 652);
            uint64_t v21 = *(void *)(a1 + 660);
            uint64_t v20 = *(void *)(a1 + 668);
            uint64_t v22 = *(void *)(a1 + 676);
            uint64_t v23 = *(void *)(a1 + 684);
            uint64_t v24 = *(void *)(a1 + 692);
            uint64_t v25 = *(void *)(a1 + 700);
            uint64_t v26 = *(void *)(a1 + 708);
            uint64_t v51 = *(unsigned int *)(a1 + 736);
            uint64_t v52 = *(unsigned int *)(a1 + 768);
            uint64_t v53 = *(int *)(a1 + 764);
            uint64_t v54 = *(void *)(a1 + 1936);
            [v64 maxActivityBasedSpeedSinceAdvertisement];
            *(_DWORD *)uint64_t buf = 68293891;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)double v88 = 2082;
            *(void *)&v88[2] = "";
            *(_WORD *)&v88[10] = 2082;
            *(void *)&v88[12] = v56;
            *(_WORD *)&v88[20] = 2049;
            *(void *)&v88[22] = v55;
            *(_WORD *)&v88[30] = 2081;
            id v89 = v17;
            *(_WORD *)long long v90 = 2049;
            *(double *)&v90[2] = v18;
            *(_WORD *)&v90[10] = 2049;
            *(void *)&v90[12] = v19;
            __int16 v91 = 2049;
            uint64_t v92 = v20;
            __int16 v93 = 2049;
            uint64_t v94 = v21;
            __int16 v95 = 2049;
            double v96 = v60;
            __int16 v97 = 2049;
            uint64_t v98 = v22;
            __int16 v99 = 2049;
            uint64_t v100 = v23;
            __int16 v101 = 2049;
            uint64_t v102 = v24;
            __int16 v103 = 2049;
            uint64_t v104 = v25;
            __int16 v105 = 2049;
            uint64_t v106 = v26;
            __int16 v107 = 2049;
            uint64_t v108 = v51;
            __int16 v109 = 2049;
            uint64_t v110 = v52;
            __int16 v111 = 2049;
            uint64_t v112 = v53;
            __int16 v113 = 2049;
            uint64_t v114 = v54;
            __int16 v115 = 2049;
            uint64_t v116 = v27;
            __int16 v117 = 2050;
            uint64_t v118 = 11;
            _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"prepareAdvertisementsForSPFinder\", \"avengerPublicKey\":%{public, location:escape_only}s, \"timestamp\":\"%{private}f\", \"scantime\":%{private, location:escape_only}s, \"latitude\":\"%{private}f\", \"longitude\":\"%{private}f\", \"altitude\":\"%{private}f\", \"rawHorizontalAccuracy\":\"%{private}f\", \"horizontalAccuracy\":\"%{private}f\", \"verticalAccuracy\":\"%{private}f\", \"speed\":\"%{private}f\", \"speedAccuracy\":\"%{private}f\", \"course\":\"%{private}f\", \"courseAccuracy\":\"%{private}f\", \"type\":%{private}lu, \"integrity\":%{private}lu, \"floor\":%{private}lu, \"maxActivityBasedSpeedSinceLastLocation\":\"%{private}f\", \"maxActivityBasedSpeedSinceAdvertisement\":\"%{private}f\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0xD0u);
            uint64_t v15 = a1;
          }
          if (*(void *)(v15 + 632))
          {
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022F2558);
            }
            long long v28 = qword_102419538;
            if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
            {
              sub_1000A7FBC((uint64_t)v50, (uint64_t)__p);
              long long v29 = __p;
              if (v82 < 0) {
                long long v29 = (void **)__p[0];
              }
              *(_DWORD *)uint64_t buf = 68289282;
              *(_DWORD *)&uint8_t buf[4] = 0;
              *(_WORD *)double v88 = 2082;
              *(void *)&v88[2] = "";
              *(_WORD *)&v88[10] = 2082;
              *(void *)&v88[12] = v29;
              _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"markReceivingLocationInformation\", \"Client\":%{public, location:escape_only}s}", buf, 0x1Cu);
              if (v82 < 0) {
                operator delete(__p[0]);
              }
              uint64_t v15 = a1;
            }
            long long v30 = *(void **)(v15 + 632);
            sub_100089AE0((char *)__dst, v50);
            [v30 markReceivingLocationInformation:sub_1000376D4((long long *)__dst)];
            if (v80 < 0) {
              operator delete(v79);
            }
            if (v78 < 0) {
              operator delete(v77);
            }
            if (v76 < 0) {
              operator delete(v75);
            }
            if (v74 < 0) {
              operator delete(v73);
            }
            if (v72 < 0) {
              operator delete(v71);
            }
            if (v70 < 0) {
              operator delete(v69);
            }
            if (v68 < 0) {
              operator delete(__dst[0]);
            }
          }
          id v31 = objc_alloc((Class)SPEstimatedLocation);
          id v32 = [objc_msgSend(v64, "advertisement") scanDate];
          double v33 = *v62;
          double v34 = *(double *)(a1 + 652);
          double v35 = *(double *)(a1 + 668);
          double v36 = *(double *)(a1 + 676);
          double v37 = *(double *)(a1 + 684);
          double v38 = *(double *)(a1 + 692);
          double v40 = *(double *)(a1 + 700);
          uint64_t v39 = *(void *)(a1 + 708);
          if (*(_DWORD *)(a1 + 736) == 10) {
            long long v41 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 764)];
          }
          else {
            long long v41 = 0;
          }
          id v42 = [v31 initWithTimestamp:v32 latitude:v41 longitude:v33 horizontalAccuracy:v34 altitude:v60 verticalAccuracy:v35 speed:v36 speedAccuracy:v37 course:v38 courseAccuracy:v40 floorLevel:v39];
        }
        else
        {
          *(void *)uint64_t buf = _NSConcreteStackBlock;
          *(void *)double v88 = 3221225472;
          *(void *)&v88[8] = sub_100D02C1C;
          *(void *)&v88[16] = &unk_1022F2490;
          id v89 = v5;
          *(void *)&v88[24] = v64;
          memset(v90, 0, 18);
          AnalyticsSendEventLazy();
          id v42 = 0;
        }
        id v43 = [objc_alloc((Class)SPBeaconPayload) initWithAdvertisement:v65 location:v42];
        uint64_t v44 = v43;
        if (v42)
        {
          uint64_t v45 = *(int *)(a1 + 1448);
          if (v45 <= 3) {
            [v43 setObservationValue:qword_101D8BE30[v45]];
          }
        }
        [v44 setRefreshGeotag:0];
        if ([*(id *)(a1 + 1480) isNewPayload:v44])
        {
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_1022F2518);
          }
          long long v46 = qword_102419568;
          if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint64_t buf = 68289282;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)double v88 = 2082;
            *(void *)&v88[2] = "";
            *(_WORD *)&v88[10] = 2050;
            *(void *)&v88[12] = 11;
            _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"prepareAdvertisementsForSPFinder: added beacon payload to fBeaconPayloadCache\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
          }
          if (!((v42 == 0) | [v64 fromOwnerDevice] & 1))
          {
            if (qword_102419560 != -1) {
              dispatch_once(&qword_102419560, &stru_1022F2518);
            }
            double v47 = qword_102419568;
            if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)uint64_t buf = 68289282;
              *(_DWORD *)&uint8_t buf[4] = 0;
              *(_WORD *)double v88 = 2082;
              *(void *)&v88[2] = "";
              *(_WORD *)&v88[10] = 2050;
              *(void *)&v88[12] = 11;
              _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"prepareAdvertisementsForSPFinder: added beacon payload to ActivityBasedBeaconPayloadCache for second geotagging\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
            }
            [*(id *)(a1 + 1960) receiveBeaconPayload:v44];
          }
          [*(id *)(a1 + 1472) addObject:v44];
          [*(id *)(a1 + 1952) receiveBeaconPayload:v44];
        }
        else
        {
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_1022F2518);
          }
          long long v48 = qword_102419568;
          if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint64_t buf = 68289282;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)double v88 = 2082;
            *(void *)&v88[2] = "";
            *(_WORD *)&v88[10] = 2050;
            *(void *)&v88[12] = 11;
            _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"prepareAdvertisementsForSPFinder: beacon payload is redundant, skipped\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
          }
        }

        uint64_t v3 = v61 + 1;
      }
      while (v59 != (id)(v61 + 1));
      id result = [a2 countByEnumeratingWithState:&v83 objects:v119 count:16];
      id v59 = result;
    }
    while (result);
  }
  return result;
}

void sub_100CFF41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void sub_100CFF438(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 1680);
  if (v2 && *(void *)(a1 + 1656))
  {
    if (!*(unsigned char *)(a1 + 1640))
    {
      int v3 = 1;
      goto LABEL_9;
    }
    if (!*(unsigned char *)(a1 + 1664))
    {
      sub_10131AE3C(v2);
      if (sub_10131AD84(*(void *)(a1 + 1680)))
      {
        uint64_t v4 = *(void **)(a1 + 1672);
        v18[0] = _NSConcreteStackBlock;
        v18[1] = 3221225472;
        _OWORD v18[2] = sub_100CFFA44;
        v18[3] = &unk_1022A3020;
        v18[4] = a1;
        [v4 setHandler:v18];
        [*(id *)(a1 + 1672) setNextFireDelay:*(double *)(a1 + 384)];
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_1022F2518);
        }
        uint64_t v5 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v6 = *(void *)(a1 + 384);
          *(_DWORD *)uint64_t buf = 68289538;
          int v20 = 0;
          __int16 v21 = 2082;
          uint64_t v22 = "";
          __int16 v23 = 2050;
          uint64_t v24 = v6;
          __int16 v25 = 2050;
          uint64_t v26 = 11;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"BlueAvengerKPI: actively requesting best location\", \"timeout\":\"%{public}f\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x26u);
        }
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022F2538);
        }
        id v7 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#wigo,on,BlueAvengerHarvest", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022F2538);
          }
          __int16 v17 = 0;
          uint64_t v15 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLSubHarvesterAvenger::startProactiveLocationRequestIfNecessaryAndAllowed()", "%s\n", v15);
          if (v15 != (char *)buf) {
            free(v15);
          }
        }
        AnalyticsSendEventLazy();
        uint64_t v8 = *(void *)(a1 + 616);
        *(_DWORD *)uint64_t buf = 0;
        (*(void (**)(uint64_t, uint8_t *))(*(void *)v8 + 48))(v8, buf);
        int v3 = 0;
        *(unsigned char *)(a1 + 1664) = 1;
        ++*(_DWORD *)(a1 + 1772);
LABEL_6:
        if (*(unsigned char *)(a1 + 1640)) {
          goto LABEL_10;
        }
LABEL_9:
        if (*(unsigned char *)(a1 + 1641)) {
          goto LABEL_10;
        }
        sub_10131AE3C(*(void *)(a1 + 1656));
        if (sub_10131AD84(*(void *)(a1 + 1656)))
        {
          double v9 = *(void **)(a1 + 1648);
          v16[0] = _NSConcreteStackBlock;
          v16[1] = 3221225472;
          void v16[2] = sub_100CFFD14;
          v16[3] = &unk_1022A3020;
          v16[4] = a1;
          [v9 setHandler:v16];
          [*(id *)(a1 + 1648) setNextFireDelay:*(double *)(a1 + 392)];
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_1022F2518);
          }
          double v10 = qword_102419568;
          if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v11 = *(void *)(a1 + 392);
            *(_DWORD *)uint64_t buf = 68289538;
            int v20 = 0;
            __int16 v21 = 2082;
            uint64_t v22 = "";
            __int16 v23 = 2050;
            uint64_t v24 = v11;
            __int16 v25 = 2050;
            uint64_t v26 = 11;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"BlueAvengerKPI: actively requesting fine location\", \"timeout\":\"%{public}f\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x26u);
          }
          uint64_t v12 = *(void *)(a1 + 616);
          *(_DWORD *)uint64_t buf = 1;
          (*(void (**)(uint64_t, uint8_t *))(*(void *)v12 + 48))(v12, buf);
          *(unsigned char *)(a1 + 1641) = 1;
          ++*(_DWORD *)(a1 + 1776);
        }
        else
        {
          ++*(_DWORD *)(a1 + 1784);
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_1022F2518);
          }
          double v14 = qword_102419568;
          if (!os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
          {
LABEL_10:
            if (v3)
            {
LABEL_11:
              *(CFAbsoluteTime *)(a1 + 1808) = CFAbsoluteTimeGetCurrent();
              return;
            }
            goto LABEL_29;
          }
          *(_DWORD *)uint64_t buf = 68289282;
          int v20 = 0;
          __int16 v21 = 2082;
          uint64_t v22 = "";
          __int16 v23 = 2050;
          uint64_t v24 = 11;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"BlueAvengerKPI: rejected proactive fine location request\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
          if (v3) {
            goto LABEL_11;
          }
        }
LABEL_29:
        *(void *)(a1 + 1800) = *(void *)(a1 + 1792);
        *(CFAbsoluteTime *)(a1 + 1792) = CFAbsoluteTimeGetCurrent();
        return;
      }
      ++*(_DWORD *)(a1 + 1780);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022F2518);
      }
      unsigned int v13 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 68289282;
        int v20 = 0;
        __int16 v21 = 2082;
        uint64_t v22 = "";
        __int16 v23 = 2050;
        uint64_t v24 = 11;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"BlueAvengerKPI: rejected proactive best location request\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
      }
    }
    int v3 = 1;
    goto LABEL_6;
  }
}

unsigned char *sub_100CFFA44(uint64_t a1)
{
  return sub_100CFFA50(*(unsigned char **)(a1 + 32), 1);
}

unsigned char *sub_100CFFA50(unsigned char *result, int a2)
{
  if (result[1664])
  {
    int v3 = result;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022F2538);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#wigo,off,BlueAvengerHarvest", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022F2538);
      }
      double v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSubHarvesterAvenger::unregisterForBestLocationNotificationIfNecessary(BOOL)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    AnalyticsSendEventLazy();
    uint64_t v5 = *((void *)v3 + 77);
    *(_DWORD *)uint64_t buf = 0;
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v5 + 56))(v5, buf);
    v3[1664] = 0;
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F2518);
    }
    uint64_t v6 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      double v7 = *((double *)v3 + 48);
      if ((a2 & 1) == 0)
      {
        [*((id *)v3 + 209) nextFireDelay];
        double v7 = v7 - v8;
      }
      *(_DWORD *)uint64_t buf = 68289794;
      int v11 = 0;
      __int16 v12 = 2082;
      unsigned int v13 = "";
      __int16 v14 = 1026;
      int v15 = a2;
      __int16 v16 = 2050;
      double v17 = v7;
      __int16 v18 = 2050;
      uint64_t v19 = 11;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"BlueAvengerKPI: terminate active best location request\", \"didTimeout\":%{public}hhd, \"runtime\":\"%{public}f\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x2Cu);
    }
    return [*((id *)v3 + 209) invalidate];
  }
  return result;
}

NSDictionary *__cdecl sub_100CFFD08(id a1)
{
  return (NSDictionary *)&off_1023976D0;
}

void *sub_100CFFD14(uint64_t a1)
{
  return sub_100CFE714(*(void **)(a1 + 32), 1);
}

BOOL sub_100CFFD20(int a1, char a2, char a3, int a4)
{
  if ((a2 & 1) != 0 || (a3 & 1) != 0 || a1)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F2518);
    }
    uint64_t v4 = qword_102419568;
    BOOL result = os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG);
    if (result)
    {
      int v7 = 68289282;
      int v8 = 0;
      __int16 v9 = 2082;
      double v10 = "";
      __int16 v11 = 2050;
      uint64_t v12 = 11;
      uint64_t v6 = "{\"msg%{public}.0s\":\"Device is inside Korea; location is not needed\", \"subHarvester\":%{public, location:"
           "CLSubHarvesterIdentifier}lld}";
      goto LABEL_13;
    }
  }
  else if (a4)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F2518);
    }
    uint64_t v4 = qword_102419568;
    BOOL result = os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG);
    if (result)
    {
      int v7 = 68289282;
      int v8 = 0;
      __int16 v9 = 2082;
      double v10 = "";
      __int16 v11 = 2050;
      uint64_t v12 = 11;
      uint64_t v6 = "{\"msg%{public}.0s\":\"Location is simulated\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}";
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, v6, (uint8_t *)&v7, 0x1Cu);
      return 0;
    }
  }
  else
  {
    return 1;
  }
  return result;
}

uint64_t sub_100CFFEAC(double a1, double a2)
{
  if (a1 <= a2)
  {
    if (fabs(a1) <= a2)
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022F2518);
      }
      int v7 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = 68289794;
        int v9 = 0;
        __int16 v10 = 2082;
        __int16 v11 = "";
        __int16 v12 = 2050;
        double v13 = a1;
        __int16 v14 = 2050;
        double v15 = a2;
        __int16 v16 = 2050;
        uint64_t v17 = 11;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"geotagSingleAdvertisement: advertisement within valid time window for location\", \"timeOffset\":\"%{public}f\", \"fCurrentTimeOffsetThreshold\":\"%{public}f\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v8, 0x30u);
      }
      return 1;
    }
    else
    {
      return 2;
    }
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F2518);
    }
    uint64_t v4 = qword_102419568;
    BOOL v5 = os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v5)
    {
      int v8 = 68289794;
      int v9 = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2050;
      double v13 = a1;
      __int16 v14 = 2050;
      double v15 = a2;
      __int16 v16 = 2050;
      uint64_t v17 = 11;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"geotagSingleAdvertisement: dropping avenger advertisement, too old\", \"timeOffset\":\"%{public}f\", \"fCurrentTimeOffsetThreshold\":\"%{public}f\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v8, 0x30u);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100D0008C(uint64_t a1, void *a2, double a3)
{
  *(_DWORD *)(a1 + 1904) = 0;
  *(unsigned char *)(a1 + 1908) = 0;
  *(_WORD *)(a1 + 1888) = 1;
  *(double *)(a1 + 1896) = a3;
  if (sub_100D00190(a1))
  {
    *(unsigned char *)(a1 + 1904) = 1;
    if (*(double *)(a1 + 376) > a3) {
      *(unsigned char *)(a1 + 1905) = 1;
    }
  }
  double v6 = *(double *)(a1 + 1808);
  if (v6 > *(double *)(a1 + 1800) && v6 < *(double *)(a1 + 1792))
  {
    *(unsigned char *)(a1 + 1906) = 1;
    unsigned int v7 = *(_DWORD *)(a1 + 1864);
    double v8 = v7 ? *(double *)(a1 + 1872) / (double)v7 : INFINITY;
    double v9 = v6 + v8;
    [objc_msgSend(objc_msgSend(objc_msgSend(a2, "advertisement"), "scanDate"), "timeIntervalSinceReferenceDate"]
    if (vabdd_f64(v9, v10) < *(double *)(a1 + 1688)) {
      *(unsigned char *)(a1 + 1907) = 1;
    }
  }
  id v11 = [a2 advertisement];
  *(unsigned char *)(a1 + 1908) = sub_100CFD338((uint64_t)v11, v11);

  return sub_100D001D8(a1);
}

uint64_t sub_100D00190(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1632) && (*(_DWORD *)(a1 + 1496) - 1) <= 1 && !*(unsigned char *)(a1 + 1712)) {
    return 0;
  }
  sub_100103240();
  return sub_1000F08D4() ^ 1;
}

uint64_t sub_100D001D8(uint64_t a1)
{
  v3[0] = @"isLocationUnusable";
  v4[0] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 1888)];
  v3[1] = @"isLocationStale";
  v4[1] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 1889)];
  _DWORD v3[2] = @"locationTimeOffset";
  v4[2] = +[NSNumber numberWithDouble:*(double *)(a1 + 1896)];
  v3[3] = @"isInMotion";
  v4[3] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 1904)];
  v3[4] = @"wouldSucceedIfInStatic";
  v4[4] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 1905)];
  v3[5] = @"hasRejectedProactiveRequest";
  v4[5] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 1906)];
  v3[6] = @"wouldSucceedIfProactiveRequestNotRejected";
  v4[6] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 1907)];
  v3[7] = @"isPosh";
  v4[7] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 1908)];
  +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:8]);
  uint64_t result = AnalyticsSendEventLazy();
  *(_WORD *)(a1 + 1888) = 0;
  *(void *)(a1 + 1896) = 0;
  *(void *)(a1 + 1901) = 0;
  return result;
}

uint64_t sub_100D003AC(uint64_t result, void *a2, int a3, double a4)
{
  uint64_t v5 = result;
  ++*(_DWORD *)(result + 1816);
  *(double *)(result + 1824) = *(double *)(result + 1824) + a4;
  *(double *)(result + 1832) = *(double *)(result + 1832) + a4 * a4;
  if (a3 == 1)
  {
    ++*(_DWORD *)(result + 1840);
    *(double *)(result + 1848) = *(double *)(result + 1848) + a4;
    *(double *)(result + 1856) = *(double *)(result + 1856) + a4 * a4;
  }
  else if (!a3)
  {
    AnalyticsSendEventLazy();
    return sub_100D0008C(v5, a2, a4);
  }
  return result;
}

NSArray *sub_100D004B0(uint64_t a1, void *a2, double a3, double a4)
{
  id v8 = objc_alloc_init((Class)NSMutableArray);
  id v9 = objc_alloc_init((Class)NSMutableArray);
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id v10 = [a2 countByEnumeratingWithState:&v27 objects:v43 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = *(void *)v28;
    do
    {
      for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v28 != v12) {
          objc_enumerationMutation(a2);
        }
        __int16 v14 = *(void **)(*((void *)&v27 + 1) + 8 * i);
        id v15 = [v14 advertisement];
        unsigned int v16 = sub_100CFD338((uint64_t)v15, v15);
        [objc_msgSend(objc_msgSend(objc_msgSend(v14, "advertisement"), "scanDate"), "timeIntervalSinceReferenceDate");
        double v18 = a4 - v17;
        int v19 = sub_100CFFEAC(a4 - v17, a3);
        int v20 = v19;
        if (v19 == 1)
        {
          [v9 addObject:v14];
          ++*(_DWORD *)(a1 + 1748);
          if (v16) {
            ++*(_DWORD *)(a1 + 1756);
          }
          else {
            ++*(_DWORD *)(a1 + 1752);
          }
        }
        else if (!v19)
        {
          [v8 addObject:v14];
          ++*(_DWORD *)(a1 + 1760);
          if (v16) {
            ++*(_DWORD *)(a1 + 1768);
          }
          else {
            ++*(_DWORD *)(a1 + 1764);
          }
        }
        sub_100D003AC(a1, v14, v20, v18);
      }
      id v11 = [a2 countByEnumeratingWithState:&v27 objects:v43 count:16];
    }
    while (v11);
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022F2518);
  }
  __int16 v21 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
  {
    id v22 = [*(id *)(a1 + 1464) count];
    id v23 = [v9 count];
    id v24 = [v8 count];
    *(_DWORD *)uint64_t buf = 68290050;
    __int16 v33 = 2082;
    int v32 = 0;
    double v34 = "";
    __int16 v35 = 2050;
    id v36 = v22;
    __int16 v37 = 2050;
    id v38 = v23;
    __int16 v39 = 2050;
    id v40 = v24;
    __int16 v41 = 2050;
    uint64_t v42 = 11;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"geotagAdvertisements: completed process\", \"fAdvertisementCache.count\":%{public}lu, \"saveableAdvertisements.count\":%{public}lu, \"purgeableAdvertisements.count\":%{public}lu, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x3Au);
  }
  sub_100CFE9E0(a1, v9);
  [v8 addObjectsFromArray:v9];
  __int16 v25 = +[NSArray array];
  if ([v8 count]) {
    __int16 v25 = +[NSArray arrayWithArray:v8];
  }

  return v25;
}

void sub_100D007C4(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 1923);
  char v3 = *(unsigned char *)(a1 + 1922);
  char v4 = *(unsigned char *)(a1 + 1924);
  int v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 176))(*(void *)(a1 + 56));
  if (sub_100CFFD20(v2, v3, v4, v5))
  {
    if (!*(unsigned char *)(a1 + 796))
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022F2518);
      }
      uint64_t v24 = qword_102419568;
      if (!os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_40;
      }
      uint64_t buf = 68289282;
      __int16 v31 = 2082;
      int v32 = "";
      __int16 v33 = 2050;
      *(void *)double v34 = 11;
      __int16 v21 = "{\"msg%{public}.0s\":\"WARN: processAdvertisementCache no last location\", \"subHarvester\":%{public, locati"
            "on:CLSubHarvesterIdentifier}lld}";
      id v22 = v24;
      uint32_t v23 = 28;
      goto LABEL_39;
    }
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F2518);
    }
    double v6 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      uint64_t buf = 68289282;
      __int16 v31 = 2082;
      int v32 = "";
      __int16 v33 = 2050;
      *(void *)double v34 = 11;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"processAdvertisementCache with last location\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&buf, 0x1Cu);
    }
    id v7 = [*(id *)(a1 + 1464) copy];
    [*(id *)(a1 + 1464) removeObjectsInArray:sub_100D004B0(a1, v7, *(double *)(a1 + 1688), *(double *)(a1 + 716))];

    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F2518);
    }
    id v8 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = [*(id *)(a1 + 1464) count];
      id v10 = [*(id *)(a1 + 1472) count];
      uint64_t buf = 68289794;
      __int16 v31 = 2082;
      int v32 = "";
      __int16 v33 = 2050;
      *(void *)double v34 = v9;
      *(_WORD *)&v34[8] = 2050;
      *(void *)&v34[10] = v10;
      *(_WORD *)&v34[18] = 2050;
      *(void *)&v34[20] = 11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"processAdvertisementCache: completed process\", \"Remaining fAdvertisementCache.count\":%{public}lu, \"fBeaconPayloadCache.count\":%{public}lu, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&buf, 0x30u);
    }
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F2518);
    }
    id v11 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      uint64_t buf = 68289282;
      __int16 v31 = 2082;
      int v32 = "";
      __int16 v33 = 2050;
      *(void *)double v34 = 11;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"processAdvertisementCache: drop advertisements since geotagging is not allowed\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&buf, 0x1Cu);
    }
    *(_DWORD *)(a1 + 1760) += [*(id *)(a1 + 1464) count];
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    uint64_t v12 = *(void **)(a1 + 1464);
    id v13 = [v12 countByEnumeratingWithState:&v25 objects:v29 count:16];
    if (v13)
    {
      id v14 = v13;
      uint64_t v15 = *(void *)v26;
      do
      {
        for (uint64_t i = 0; i != v14; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v26 != v15) {
            objc_enumerationMutation(v12);
          }
          id v17 = [*(id *)(*((void *)&v25 + 1) + 8 * i) advertisement];
          if (sub_100CFD338((uint64_t)v17, v17)) {
            ++*(_DWORD *)(a1 + 1768);
          }
          else {
            ++*(_DWORD *)(a1 + 1764);
          }
        }
        id v14 = [v12 countByEnumeratingWithState:&v25 objects:v29 count:16];
      }
      while (v14);
    }
    [*(id *)(a1 + 1464) removeAllObjects];
  }
  if ([*(id *)(a1 + 1472) count])
  {
    if (*(double *)(a1 + 560) <= 0.0) {
      sub_100D00E24(a1);
    }
    else {
      sub_100D00CE8(a1, 0);
    }
  }
  if ([*(id *)(a1 + 1464) count])
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F2518);
    }
    uint64_t v18 = qword_102419568;
    if (!os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_40;
    }
    int v19 = (int)*(double *)(a1 + 716);
    uint64_t v20 = *(void *)(a1 + 1688);
    uint64_t buf = 68289794;
    __int16 v31 = 2082;
    int v32 = "";
    __int16 v33 = 1026;
    *(_DWORD *)double v34 = v19;
    *(_WORD *)&v34[4] = 2050;
    *(void *)&v34[6] = v20;
    *(_WORD *)&v34[14] = 2050;
    *(void *)&v34[16] = 11;
    __int16 v21 = "{\"msg%{public}.0s\":\"processAdvertisementCache: have last location, but it is stale\", \"lastLocation.timest"
          "amp\":%{public}d, \"fCurrentTimeOffsetThreshold\":\"%{public}f\", \"subHarvester\":%{public, location:CLSubHar"
          "vesterIdentifier}lld}";
    id v22 = v18;
    uint32_t v23 = 44;
LABEL_39:
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, v21, (uint8_t *)&buf, v23);
LABEL_40:
    sub_100CFF438(a1);
  }
}

void sub_100D00CE8(uint64_t a1, int a2)
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022F2518);
  }
  char v4 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
  {
    int v5 = *(unsigned __int8 *)(a1 + 1976);
    v8[0] = 68289795;
    v8[1] = 0;
    __int16 v9 = 2082;
    id v10 = "";
    __int16 v11 = 1025;
    int v12 = v5;
    __int16 v13 = 1025;
    int v14 = a2;
    __int16 v15 = 2050;
    uint64_t v16 = 11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"requestDeferredSaveBeaconPayloadCache\", \"fPendingSaveBeaconPayloadRequest\":%{private}hhd, \"forceScheduleNextFireData\":%{private}hhd, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v8, 0x28u);
  }
  if (!*(unsigned char *)(a1 + 1976) || a2)
  {
    uint64_t v6 = *(void *)(a1 + 1968);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    sub_1001165F8(v6, Current + *(double *)(a1 + 560));
    *(unsigned char *)(a1 + 1976) = 1;
  }
}

void sub_100D00E24(uint64_t a1)
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022F2518);
  }
  int v2 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
  {
    id v3 = [*(id *)(a1 + 1472) count];
    int v4 = *(unsigned __int8 *)(a1 + 1977);
    *(_DWORD *)uint64_t buf = 68289795;
    __int16 v10 = 2082;
    int v9 = 0;
    __int16 v11 = "";
    __int16 v12 = 2049;
    id v13 = v3;
    __int16 v14 = 1025;
    int v15 = v4;
    __int16 v16 = 2050;
    uint64_t v17 = 11;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"saveBeaconPayloadCacheToSPFinder\", \"fBeaconPayloadCache.count\":%{private}lu, \"fIsCameraAppRunning\":%{private}hhd, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x2Cu);
  }
  if ([*(id *)(a1 + 1472) count])
  {
    if (!*(unsigned char *)(a1 + 1977))
    {
      id v5 = [*(id *)(a1 + 1472) copy];
      [*(id *)(a1 + 1472) removeAllObjects];
      id v6 = [*(id *)(a1 + 1456) beaconPayloadCache];
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      _DWORD v7[2] = sub_100D03758;
      v7[3] = &unk_1022A5348;
      uint64_t v7[4] = a1;
      [v6 saveBeaconPayloads:v5 completion:v7];
    }
  }
}

void sub_100D00FBC(uint64_t a1, void *a2, void *a3)
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022F2518);
  }
  id v5 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    int v30 = 0;
    __int16 v31 = 2082;
    int v32 = "";
    __int16 v33 = 2050;
    uint64_t v34 = 11;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"onAvengerAdvertisementDetected: got avenger advertisement\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F2518);
    }
  }
  id v6 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = [[[objc_msgSend(objc_msgSend(objc_msgSend(a2, "address"), "cl_hexadecimalString"), "lowercaseString") UTF8String];
    id v8 = [[[objc_msgSend(objc_msgSend(objc_msgSend(a2, "advertisementData"), "cl_hexadecimalString"), "lowercaseString") UTF8String];
    id v9 = [a2 scanDate];
    id v10 = [a2 rssi];
    unsigned int v11 = [a2 status];
    id v12 = [[[[[a2 reserved] cl_hexadecimalString] lowercaseString] UTF8String];
    *(_DWORD *)uint64_t buf = 68290819;
    int v30 = 0;
    __int16 v31 = 2082;
    int v32 = "";
    __int16 v33 = 2081;
    uint64_t v34 = (uint64_t)v7;
    __int16 v35 = 2081;
    id v36 = v8;
    __int16 v37 = 2113;
    id v38 = v9;
    __int16 v39 = 2049;
    id v40 = v10;
    __int16 v41 = 1025;
    unsigned int v42 = v11;
    __int16 v43 = 2081;
    id v44 = v12;
    __int16 v45 = 2050;
    uint64_t v46 = 11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"convertToSPAdvertisement\", \"address\":%{private, location:escape_only}s, \"data\":%{private, location:escape_only}s, \"date\":%{private, location:escape_only}@, \"rssi\":%{private}lu, \"status\":%{private}u, \"reserved\":%{private, location:escape_only}s, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x54u);
  }
  if (_os_feature_enabled_impl() && ([a2 isApple] & 1) == 0)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F2518);
    }
    long long v25 = qword_102419568;
    if (!os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)uint64_t buf = 68289282;
    int v30 = 0;
    __int16 v31 = 2082;
    int v32 = "";
    __int16 v33 = 2050;
    uint64_t v34 = 11;
    long long v26 = "{\"msg%{public}.0s\":\"onAvengerAdvertisementDetected: dropping non-Apple advertisement\", \"subHarvester\":%{"
          "public, location:CLSubHarvesterIdentifier}lld}";
LABEL_32:
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, v26, buf, 0x1Cu);
    return;
  }
  unsigned int v13 = +[SPAdvertisement instancesRespondToSelector:NSSelectorFromString(@"initWithAddress:advertisementData:status:reserved:rssi:scanDate:isPosh:")];
  id v14 = objc_alloc((Class)SPAdvertisement);
  id v15 = [a2 address];
  id v16 = [a2 advertisementData];
  id v17 = [a2 status];
  id v18 = [a2 reserved];
  id v19 = [a2 rssi];
  id v20 = [a2 scanDate];
  if (v13)
  {
    LOBYTE(v27) = [a2 isPosh];
    id v21 = [v14 initWithAddress:v15 advertisementData:v16 status:v17 reserved:v18 rssi:v19 scanDate:v20 isPosh:v27];
  }
  else
  {
    id v21 = [v14 initWithAddress:v15 advertisementData:v16 status:v17 reserved:v18 rssi:v19 scanDate:v20];
  }
  id v22 = v21;
  if (!v22)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F2518);
    }
    long long v25 = qword_102419568;
    if (!os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)uint64_t buf = 68289282;
    int v30 = 0;
    __int16 v31 = 2082;
    int v32 = "";
    __int16 v33 = 2050;
    uint64_t v34 = 11;
    long long v26 = "{\"msg%{public}.0s\":\"onAvengerAdvertisementDetected: could not convert advertisement into SPAdvertisement\","
          " \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}";
    goto LABEL_32;
  }
  id v23 = v22;
  uint64_t v24 = [[CLSubHarvesterAvengerAdvertisement alloc] initWithAdvertisement:v22 maxActivityBasedSpeedSinceAdvertisement:sub_100CFE128((void *)a1, a1 + 1496)];
  -[CLSubHarvesterAvengerAdvertisement setFromOwnerDevice:](v24, "setFromOwnerDevice:", [a3 type] == (id)1);
  if ([(CLSubHarvesterAvengerAdvertisement *)v24 type]
    || [(CLSubHarvesterAvengerAdvertisement *)v24 fromOwnerDevice])
  {
    ++*(_DWORD *)(a1 + 1736);
    if ([a2 isPosh]) {
      ++*(_DWORD *)(a1 + 1744);
    }
    else {
      ++*(_DWORD *)(a1 + 1740);
    }
    [*(id *)(a1 + 1952) receiveAdvertisement:v23];
    [*(id *)(a1 + 1464) addObject:v24];
    (*(void (**)(uint64_t))(*(void *)a1 + 168))(a1);
    sub_100D007C4(a1);
    return;
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022F2518);
  }
  long long v25 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    int v30 = 0;
    __int16 v31 = 2082;
    int v32 = "";
    __int16 v33 = 2050;
    uint64_t v34 = 11;
    long long v26 = "{\"msg%{public}.0s\":\"onAvengerAdvertisementDetected: advertisement is near-owner from other people and do no"
          "t process it\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}";
    goto LABEL_32;
  }
}

void sub_100D01580(uint64_t a1, void *a2, void *a3)
{
}

uint64_t sub_100D01588(uint64_t result)
{
  *(unsigned char *)(result + 2168) = 1;
  return result;
}

uint64_t sub_100D01594(uint64_t result)
{
  *(unsigned char *)(result + 1816) = 1;
  return result;
}

uint64_t sub_100D015A0(uint64_t result)
{
  *(unsigned char *)(result + 2168) = 0;
  return result;
}

uint64_t sub_100D015A8(uint64_t result)
{
  *(unsigned char *)(result + 1816) = 0;
  return result;
}

id sub_100D015B0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022F2518);
  }
  id v6 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = 68289282;
    int v16 = 0;
    __int16 v17 = 2082;
    id v18 = "";
    __int16 v19 = 2050;
    *(void *)id v20 = 11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"got signal environment provider notification\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v15, 0x1Cu);
  }
  if (!*(unsigned char *)(a1 + 1492) || *(_DWORD *)(a1 + 1488) != *a4)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F2518);
    }
    id v7 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *(unsigned __int8 *)(a1 + 1492);
      if (*(unsigned char *)(a1 + 1492)) {
        int v8 = *(_DWORD *)(a1 + 1488);
      }
      unsigned int v9 = *a4;
      int v15 = 68289794;
      int v16 = 0;
      __int16 v17 = 2082;
      id v18 = "";
      __int16 v19 = 1026;
      *(_DWORD *)id v20 = v8;
      *(_WORD *)&v20[4] = 1026;
      *(_DWORD *)&v20[6] = v9;
      *(_WORD *)&v20[10] = 2050;
      *(void *)&v20[12] = 11;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"updated avenger harvester signal environment\", \"fLastSignalEnvironment\":%{public}d, \"nextSignalEnvironment\":%{public}d, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v15, 0x28u);
    }
    LOBYTE(v10) = 0;
    *(_DWORD *)(a1 + 1488) = *a4;
    *(unsigned char *)(a1 + 1492) = 1;
    uint64_t v11 = *(void *)(a1 + 1488);
    if ((v11 & 0xFF00000000) != 0 && v11 <= 6) {
      unsigned int v10 = (0x42u >> v11) & 1;
    }
    *(unsigned char *)(a1 + 1640) = v10;
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F2518);
    }
    id v12 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = *(unsigned __int8 *)(a1 + 1640);
      int v15 = 68289538;
      int v16 = 0;
      __int16 v17 = 2082;
      id v18 = "";
      __int16 v19 = 1026;
      *(_DWORD *)id v20 = v13;
      *(_WORD *)&v20[4] = 2050;
      *(void *)&v20[6] = 11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"update isAllowedToUseBest for location request\", \"fIsAllowedToUseBest\":%{public}hhd, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v15, 0x22u);
    }
  }
  [*(id *)(a1 + 1944) receiveSignalEnvironment:*a4];
  [*(id *)(a1 + 1952) receiveSignalEnvironment:*a4];
  return [*(id *)(a1 + 1960) receiveSignalEnvironment:*a4];
}

id sub_100D01868(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  return sub_100D015B0(a1 - 352, a2, a3, a4);
}

BOOL sub_100D01870(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 796)) {
    return 1;
  }
  int v4 = (double *)(a1 + 644);
  if ((*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56)) - *(double *)(a1 + 716) >= *(double *)(a1 + 1688)
    || *(double *)(a2 + 20) <= 250.0)
  {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 796)) {
    sub_10020D700();
  }
  return sub_1000A3D9C(*(double *)(a2 + 4), *(double *)(a2 + 12), *v4, v4[1]) - *(double *)(a2 + 20) - v4[2] > 0.0;
}

uint64_t sub_100D01938(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 640);
  memcpy((void *)a1, (const void *)a2, 0x201uLL);
  uint64_t v5 = *(void *)(a2 + 520);
  if (v4)
  {
    uint64_t v6 = *(void *)(a2 + 528);
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(a1 + 520) = v5;
    id v7 = *(std::__shared_weak_count **)(a1 + 528);
    *(void *)(a1 + 528) = v6;
    if (v7) {
      sub_1000DB0A0(v7);
    }
    long long v8 = *(_OWORD *)(a2 + 536);
    long long v9 = *(_OWORD *)(a2 + 568);
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
    *(_OWORD *)(a1 + 568) = v9;
    *(_OWORD *)(a1 + 536) = v8;
    long long v10 = *(_OWORD *)(a2 + 584);
    long long v11 = *(_OWORD *)(a2 + 600);
    long long v12 = *(_OWORD *)(a2 + 616);
    *(void *)(a1 + 629) = *(void *)(a2 + 629);
    *(_OWORD *)(a1 + 600) = v11;
    *(_OWORD *)(a1 + 616) = v12;
    *(_OWORD *)(a1 + 584) = v10;
  }
  else
  {
    *(void *)(a1 + 520) = v5;
    uint64_t v13 = *(void *)(a2 + 528);
    *(void *)(a1 + 528) = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    long long v14 = *(_OWORD *)(a2 + 536);
    long long v15 = *(_OWORD *)(a2 + 568);
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
    *(_OWORD *)(a1 + 568) = v15;
    *(_OWORD *)(a1 + 536) = v14;
    long long v16 = *(_OWORD *)(a2 + 584);
    long long v17 = *(_OWORD *)(a2 + 600);
    long long v18 = *(_OWORD *)(a2 + 616);
    *(void *)(a1 + 629) = *(void *)(a2 + 629);
    *(_OWORD *)(a1 + 600) = v17;
    *(_OWORD *)(a1 + 616) = v18;
    *(_OWORD *)(a1 + 584) = v16;
    *(unsigned char *)(a1 + 640) = 1;
  }
  return a1;
}

void sub_100D01A2C(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if ((*a3 & 0xFFFFFFFE) == 6)
  {
    if (*(unsigned char *)(a4 + 96)) {
      BOOL v5 = *(_DWORD *)(a4 + 48) <= 0;
    }
    else {
      BOOL v5 = 1;
    }
    int v6 = !v5;
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F2518);
    }
    id v7 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *(unsigned __int8 *)(a1 + 1920);
      v9[0] = 68289795;
      v9[1] = 0;
      __int16 v10 = 2082;
      long long v11 = "";
      __int16 v12 = 1025;
      int v13 = v8;
      __int16 v14 = 1025;
      int v15 = v6;
      __int16 v16 = 2050;
      uint64_t v17 = 11;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"onWifiServiceNotification::kNotificationLinkStatus\", \"previousIsWifiAssociated\":%{private}hhd, \"updatedIsWifiAssociated\":%{private}hhd, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v9, 0x28u);
    }
    if (*(unsigned __int8 *)(a1 + 1920) != v6)
    {
      *(unsigned char *)(a1 + 1920) = v6;
      sub_100CFC630(a1);
    }
  }
}

void sub_100D01B74(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
}

NSDictionary *__cdecl sub_100D01B7C(id a1)
{
  return (NSDictionary *)&off_1023976F8;
}

void sub_100D01B88(uint64_t a1, void *a2)
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022F2518);
  }
  int v4 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a1 + 1696);
    unsigned int v6 = [a2 state];
    int v7 = *(unsigned __int8 *)(a1 + 1697);
    v19[0] = 68290306;
    v19[1] = 0;
    __int16 v20 = 2082;
    id v21 = "";
    __int16 v22 = 1026;
    int v23 = v5;
    __int16 v24 = 1026;
    unsigned int v25 = v6;
    __int16 v26 = 1026;
    int v27 = v7;
    __int16 v28 = 1026;
    unsigned int v29 = [a2 optInScreenOffScan];
    __int16 v30 = 2050;
    uint64_t v31 = 11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"onFinderStateChangeReceived\", \"previousFinderState\":%{public}hhd, \"updatedFinderState\":%{public}hhd, \"previousOptInScreenOffScane\":%{public}hhd, \"optInScreenOffScan\":%{public}hhd, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v19, 0x34u);
  }
  *(unsigned char *)(a1 + 1696) = [a2 state];
  int v8 = *(unsigned __int8 *)(a1 + 1697);
  unsigned int v9 = [a2 optInScreenOffScan];
  *(unsigned char *)(a1 + 1697) = [a2 optInScreenOffScan];
  id v10 = [a2 disabledReasons];
  *(unsigned char *)(a1 + 1698) = [v10 containsObject:SPFinderDisabledReasoniCloudSignedOut];
  id v11 = [a2 disabledReasons];
  *(unsigned char *)(a1 + 1699) = [v11 containsObject:SPFinderDisabledReasonLowAccountSecurity];
  id v12 = [a2 disabledReasons];
  *(unsigned char *)(a1 + 1700) = [v12 containsObject:SPFinderDisabledReasonUserOptOut];
  id v13 = [a2 disabledReasons];
  *(unsigned char *)(a1 + 1701) = [v13 containsObject:SPFinderDisabledReasonFindMyiPhoneOff];
  id v14 = [a2 disabledReasons];
  *(unsigned char *)(a1 + 1702) = [v14 containsObject:SPFinderDisabledReasonServiceDisabled];
  id v15 = [a2 disabledReasons];
  *(unsigned char *)(a1 + 1703) = [v15 containsObject:SPFinderDisabledReasonLocationServices];
  id v16 = [a2 disabledReasons];
  *(unsigned char *)(a1 + 1704) = [v16 containsObject:SPFinderDisabledReasonLocationServicesFindMyFramework];
  id v17 = [a2 disabledReasons];
  *(unsigned char *)(a1 + 1705) = [v17 containsObject:SPFinderDisabledReasonCannotPublishAnonymously];
  id v18 = [a2 disabledReasons];
  *(unsigned char *)(a1 + 1706) = [v18 containsObject:SPFinderDisabledReasonNone];
  *(_DWORD *)(a1 + 1708) = [objc_msgSend(objc_msgSend(a2, "disabledReasons"), "count");
  if (*(unsigned char *)(a1 + 1696)
    && (*(unsigned int (**)(void))(**(void **)(a1 + 56) + 160))(*(void *)(a1 + 56)))
  {
    sub_1001300DC(a1);
    if (v8 != v9)
    {
      if (*(unsigned char *)(a1 + 88)) {
        (*(void (**)(void, void))(**(void **)(a1 + 616) + 144))(*(void *)(a1 + 616), *(unsigned __int8 *)(a1 + 1697));
      }
    }
  }
  else
  {
    sub_1001303EC(a1);
  }
}

void sub_100D01E80(uint64_t a1, void *a2)
{
}

void sub_100D01E88(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 1720) != a2) {
    return;
  }
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  sub_1001165F8(a2, Current + *(double *)(a1 + 416));
  if (*(_DWORD *)(a1 + 1736) != *(_DWORD *)(a1 + 1740) + *(_DWORD *)(a1 + 1744))
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F2518);
    }
    id v14 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "CLSubHarvesterAvenger submitting invalid receivedBeacons in daily metrics, aborting", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419560 == -1)
    {
LABEL_38:
      id v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLSubHarvesterAvenger::onPerformanceAnalyticsTimerFired(CLPersistentTimer *)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
      return;
    }
LABEL_40:
    dispatch_once(&qword_102419560, &stru_1022F2518);
    goto LABEL_38;
  }
  if (*(_DWORD *)(a1 + 1748) != *(_DWORD *)(a1 + 1752) + *(_DWORD *)(a1 + 1756))
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F2518);
    }
    id v15 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "CLSubHarvesterAvenger submitting invalid savedBeacons in daily metrics, aborting", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419560 == -1) {
      goto LABEL_38;
    }
    goto LABEL_40;
  }
  if (*(_DWORD *)(a1 + 1760) == *(_DWORD *)(a1 + 1764) + *(_DWORD *)(a1 + 1768))
  {
    v18[0] = @"received";
    v19[0] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:");
    v18[1] = @"receivedPosh";
    v19[1] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 1744)];
    _OWORD v18[2] = @"receivedType18";
    _DWORD v19[2] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 1740)];
    v18[3] = @"saved";
    long long v19[3] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 1748)];
    v18[4] = @"savedPosh";
    uint64_t v19[4] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 1756)];
    void v18[5] = @"savedType18";
    v19[5] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 1752)];
    v18[6] = @"purged";
    v19[6] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 1760)];
    v18[7] = @"purgedPosh";
    v19[7] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 1768)];
    v18[8] = @"purgedType18";
    v19[8] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 1764)];
    v18[9] = @"proactiveLocationGPSRequest";
    v19[9] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 1772)];
    v18[10] = @"proactiveLocationWifiRequests";
    v19[10] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 1776)];
    v18[11] = @"rejectedProactiveGPSRequests";
    v19[11] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 1780)];
    v18[12] = @"rejectedProactiveWifiRequests";
    v19[12] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 1784)];
    int v5 = +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", +[NSDictionary dictionaryWithObjects:v19 forKeys:v18 count:13]);
    unsigned int v6 = *(_DWORD *)(a1 + 1816);
    if (v6 && *(double *)(a1 + 1824) / (double)v6 != INFINITY) {
      [(NSMutableDictionary *)v5 setObject:+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:") forKey:@"beaconTagTimeOffsetToLocationTimestamp"];
    }
    unsigned int v7 = *(_DWORD *)(a1 + 1840);
    if (v7 && *(double *)(a1 + 1848) / (double)v7 != INFINITY) {
      [(NSMutableDictionary *)v5 setObject:+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:") forKey:@"payloadTimeOffset"];
    }
    unsigned int v8 = *(_DWORD *)(a1 + 1864);
    if (v8)
    {
      if (*(double *)(a1 + 1872) / (double)v8 == INFINITY
        || ([(NSMutableDictionary *)v5 setObject:+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:") forKey:@"locationUpdateDelayMean"], (unsigned int v8 = *(_DWORD *)(a1 + 1864)) != 0))
      {
        if (sqrt(*(double *)(a1 + 1880) / (double)v8- *(double *)(a1 + 1872) / (double)v8 * (*(double *)(a1 + 1872) / (double)v8)) != INFINITY)[(NSMutableDictionary *)v5 setObject:+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:") forKey:@"locationUpdateDelayStd"]; {
      }
        }
    }
    [(NSMutableDictionary *)v5 setObject:+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [(NSDateComponents *)[+[NSCalendar currentCalendar](NSCalendar, "currentCalendar") components:32 fromDate:+[NSDate now]] hour]) forKey:@"timeOfDay"];
    AnalyticsSendEventLazy();
    *(_OWORD *)(a1 + 1736) = 0u;
    *(_OWORD *)(a1 + 1752) = 0u;
    *(_OWORD *)(a1 + 1768) = 0u;
    *(_DWORD *)(a1 + 1784) = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(a1 + 1792) = _Q0;
    *(void *)(a1 + 1808) = 0xBFF0000000000000;
    *(_DWORD *)(a1 + 1816) = 0;
    *(void *)(a1 + 1880) = 0;
    *(void *)(a1 + 1872) = 0;
    *(void *)(a1 + 1832) = 0;
    *(void *)(a1 + 1824) = 0;
    *(_DWORD *)(a1 + 1840) = 0;
    *(void *)(a1 + 1856) = 0;
    *(void *)(a1 + 1848) = 0;
    *(_DWORD *)(a1 + 1864) = 0;
    return;
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022F2518);
  }
  id v16 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "CLSubHarvesterAvenger submitting invalid purgedBeacons in daily metrics, aborting", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419560 == -1) {
      goto LABEL_38;
    }
    goto LABEL_40;
  }
}

uint64_t sub_100D025D4(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_100D025DC(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_100D025E4(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 1728) == a2)
  {
    uint64_t v3 = result;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    sub_1001165F8(a2, Current + *(double *)(v3 + 488));
    uint64_t v5 = *(unsigned __int8 *)(v3 + 88);
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 112))(v3);
    unsigned int v15 = *(unsigned __int8 *)(v3 + 280);
    unsigned int v14 = (*(uint64_t (**)(void))(**(void **)(v3 + 56) + 248))(*(void *)(v3 + 56));
    uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(v3 + 56) + 160))(*(void *)(v3 + 56));
    uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(v3 + 56) + 256))();
    uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(v3 + 56) + 264))();
    uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(v3 + 56) + 272))();
    uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(v3 + 56) + 280))();
    uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(v3 + 56) + 288))();
    uint64_t v13 = *(unsigned __int8 *)(v3 + 1696);
    unsigned int v16 = *(unsigned __int8 *)(v3 + 1922);
    unsigned int v17 = *(unsigned __int8 *)(v3 + 1923);
    unsigned int v19 = *(unsigned __int8 *)(v3 + 1924);
    unsigned int v18 = (*(uint64_t (**)(void))(**(void **)(v3 + 616) + 184))(*(void *)(v3 + 616));
    unsigned int v20 = *(unsigned __int8 *)(v3 + 1698);
    unsigned int v21 = *(unsigned __int8 *)(v3 + 1699);
    unsigned int v22 = *(unsigned __int8 *)(v3 + 1700);
    unsigned int v23 = *(unsigned __int8 *)(v3 + 1701);
    unsigned int v24 = *(unsigned __int8 *)(v3 + 1702);
    unsigned int v25 = *(unsigned __int8 *)(v3 + 1703);
    unsigned int v26 = *(unsigned __int8 *)(v3 + 1704);
    unsigned int v27 = *(unsigned __int8 *)(v3 + 1705);
    unsigned int v28 = *(unsigned __int8 *)(v3 + 1706);
    unsigned int v29 = *(_DWORD *)(v3 + 1708);
    v30[0] = @"isHarvesting";
    v31[0] = +[NSNumber numberWithBool:v5];
    v30[1] = @"isSupported";
    v31[1] = +[NSNumber numberWithBool:v6];
    v30[2] = @"isEnabledByRule";
    v31[2] = +[NSNumber numberWithBool:v15];
    v30[3] = @"isHarvestingEnabled";
    v31[3] = +[NSNumber numberWithBool:v14];
    v30[4] = @"isHarvestingAllowed";
    v31[4] = +[NSNumber numberWithBool:v7];
    v30[5] = @"isLocationServicesEnabled";
    v31[5] = +[NSNumber numberWithBool:v8];
    v30[6] = @"isThermalLevelAcceptableLowCpu";
    v31[6] = +[NSNumber numberWithBool:v9];
    v30[7] = @"isInPrivateMode";
    v31[7] = +[NSNumber numberWithBool:v10];
    v30[8] = @"isBatterySaverModeEnabled";
    v31[8] = +[NSNumber numberWithBool:v11];
    v30[9] = @"hasAuthorizedClients";
    v31[9] = +[NSNumber numberWithBool:v12];
    v30[10] = @"isFinderStateManagerEnabled";
    v31[10] = +[NSNumber numberWithBool:v13];
    v30[11] = @"isRestrictedCountryCode";
    v31[11] = +[NSNumber numberWithBool:v16];
    unsigned char v30[12] = @"isRestrictedSKU";
    v31[12] = +[NSNumber numberWithBool:v17];
    v30[13] = @"isLastLocationInRestrictedZone";
    v31[13] = +[NSNumber numberWithBool:v19];
    v30[14] = @"isScanning";
    unsigned char v31[14] = +[NSNumber numberWithBool:v18];
    v30[15] = @"isICloudSingedOut";
    v31[15] = +[NSNumber numberWithBool:v20];
    v30[16] = @"isLowAccountSecurity";
    v31[16] = +[NSNumber numberWithBool:v21];
    v30[17] = @"isUserOptOut";
    v31[17] = +[NSNumber numberWithBool:v22];
    v30[18] = @"isFindMyiPhoneOff";
    v31[18] = +[NSNumber numberWithBool:v23];
    v30[19] = @"isServiceDisabled";
    v31[19] = +[NSNumber numberWithBool:v24];
    v30[20] = @"isLocationServiceDisabled";
    v31[20] = +[NSNumber numberWithBool:v25];
    v30[21] = @"isFmpLocationServicesDisabled";
    v31[21] = +[NSNumber numberWithBool:v26];
    v30[22] = @"isPublishAnonymouslyDisallowed";
    v31[22] = +[NSNumber numberWithBool:v27];
    v30[23] = @"isNoReason";
    v31[23] = +[NSNumber numberWithBool:v28];
    v30[24] = @"reasonCount";
    v31[24] = +[NSNumber numberWithUnsignedInt:v29];
    +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", +[NSDictionary dictionaryWithObjects:v31 forKeys:v30 count:25]);
    return AnalyticsSendEventLazy();
  }
  return result;
}

uint64_t sub_100D02C14(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

id sub_100D02C1C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = +[NSMutableDictionary dictionary];
  [v3 setObject:[+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", -[NSDateComponents hour](-[NSCalendar components:fromDate:](+[NSCalendar currentCalendar](NSCalendar, "currentCalendar"), "components:fromDate:", 32, +[NSDate now](NSDate, "now")), "hour")) forKeyedSubscript:@"timeOfDay"];
  [v3 setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(*(id *)(a1 + 32), "type")) forKeyedSubscript:@"advType"];
  id v4 = [*(id *)(a1 + 32) advertisement];
  [v3 setObject:+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100CFD338((uint64_t)v4, v4)) forKeyedSubscript:@"isPoshAdv"];
  [v3 setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(double *)(v2 + 1688)) forKeyedSubscript:@"timeThreshold"];
  if (*(unsigned char *)(v2 + 1492)) {
    [v3 setObject:[+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v2 + 1488))] forKeyedSubscript:@"sigEnv"];
  }
  if (*(unsigned char *)(v2 + 1632))
  {
    unsigned int v5 = *(_DWORD *)(v2 + 1496);
    if (v5 == 19150 || v5 <= 0x7D0) {
      uint64_t v6 = (const char *)CLMotionActivity::activityTypeToString();
    }
    else {
      uint64_t v6 = "workoutSub";
    }
    [v3 setObject:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6) forKeyedSubscript:@"motionActivity"];
  }
  uint64_t v7 = (double *)(v2 + 660);
  if (*(unsigned char *)(v2 + 796))
  {
    double v8 = *(double *)(v2 + 716);
    [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "advertisement"), "scanDate"), "timeIntervalSinceReferenceDate"]
    [v3 setObject:+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v8 - v9) forKeyedSubscript:@"timeOffsetToLocation"];
    if (!*(unsigned char *)(v2 + 796)) {
      sub_10020D700();
    }
    double v10 = *(double *)(v2 + 716);
    [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "advertisement"), "scanDate"), "timeIntervalSinceReferenceDate"]
    [v3 setObject:+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100D030E4(v10 - v11)) forKeyedSubscript:@"timeOffsetToLocationBounded"];
    [v3 setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v2 + 736)) forKeyedSubscript:@"geotagLocationType"];
  }
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v12 = (NSNumber *)@"DropAdv";
LABEL_14:
    CFStringRef v13 = @"geotagResult";
    goto LABEL_23;
  }
  if (!*(unsigned char *)(a1 + 65))
  {
    uint64_t v12 = (NSNumber *)@"GeotagWithNil";
    goto LABEL_14;
  }
  [v3 setObject:@"GeotagWithLocation" forKeyedSubscript:@"geotagResult"];
  [*(id *)(a1 + 32) maxActivityBasedSpeedSinceAdvertisement];
  [v3 setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v14) forKeyedSubscript:@"activityBasedSpeed"];
  [v3 setObject:[NSNumber numberWithUnsignedInt:*((double *)(v2 + 1936))] forKeyedSubscript:@"activityBasedSpeedLastLocation"];
  double v15 = *(double *)(v2 + 684);
  if (v15 >= 0.0)
  {
    if (!*(unsigned char *)(v2 + 1632)
      || (unsigned int v16 = *(_DWORD *)(v2 + 1496), v16 <= 0x38) && ((1 << v16) & 0x110000000000CA8) != 0)
    {
      double v15 = v15 + fmax(*(double *)(v2 + 692), 0.0);
    }
    [v3 setObject:+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v15) forKeyedSubscript:@"locationBasedSpeed"];
    [v3 setObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100D03290(v15))] forKeyedSubscript:@"locationBasedSpeedBounded"];
  }
  [v3 setObject:[+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 48))] forKeyedSubscript:@"finalSpeed"];
  [v3 setObject:[NSNumber numberWithInt:sub_100D03290(*(double *)(a1 + 48))] forKeyedSubscript:@"finalSpeedBounded"];
  [v3 setObject:+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *v7) forKeyedSubscript:@"originalHAC"];
  [v3 setObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100D033CC(*v7))] forKeyedSubscript:@"originalHACBounded"];
  [v3 setObject:[NSNumber numberWithDouble:*((double *)(a1 + 56))] forKeyedSubscript:@"inflatedHAC"];
  [v3 setObject:[NSNumber numberWithInt:sub_100D033CC(*(double *)(a1 + 56))] forKeyedSubscript:@"inflatedHACBounded"];
  [v3 setObject:[NSNumber numberWithDouble:*[*(double *)(a1 + 56) - *v7]] forKeyedSubscript:@"HACdelta"];
  uint64_t v12 = +[NSNumber numberWithInt:sub_100D033CC(*(double *)(a1 + 56) - *v7)];
  CFStringRef v13 = @"HACdeltaBounded";
LABEL_23:
  [v3 setObject:v12 forKeyedSubscript:v13];
  return v3;
}

uint64_t sub_100D030E4(double a1)
{
  if (a1 <= -600.0) {
    return 4294966696;
  }
  if (a1 <= -480.0) {
    return 4294966816;
  }
  if (a1 <= -360.0) {
    return 4294966936;
  }
  if (a1 <= -120.0) {
    return 4294967176;
  }
  if (a1 <= -60.0) {
    return 4294967236;
  }
  if (a1 <= -45.0) {
    return 4294967251;
  }
  if (a1 <= -25.0) {
    return 4294967271;
  }
  if (a1 <= -15.0) {
    return 4294967281;
  }
  if (a1 <= -10.0) {
    return 4294967286;
  }
  if (a1 <= 0.0) {
    return 0;
  }
  if (a1 <= 10.0) {
    return 10;
  }
  if (a1 <= 15.0) {
    return 15;
  }
  if (a1 <= 25.0) {
    return 25;
  }
  if (a1 <= 45.0) {
    return 45;
  }
  if (a1 <= 60.0) {
    return 60;
  }
  if (a1 <= 120.0) {
    return 120;
  }
  if (a1 <= 360.0) {
    return 360;
  }
  if (a1 <= 480.0) {
    return 480;
  }
  if (a1 <= 600.0) {
    return 600;
  }
  return 700;
}

uint64_t sub_100D03290(double a1)
{
  if (a1 <= 0.0) {
    return 0;
  }
  if (a1 <= 1.0) {
    return 1;
  }
  if (a1 <= 2.0) {
    return 2;
  }
  if (a1 <= 3.0) {
    return 3;
  }
  if (a1 <= 5.0) {
    return 5;
  }
  if (a1 <= 7.0) {
    return 7;
  }
  if (a1 <= 10.0) {
    return 10;
  }
  if (a1 <= 15.0) {
    return 15;
  }
  if (a1 <= 20.0) {
    return 20;
  }
  if (a1 <= 25.0) {
    return 25;
  }
  if (a1 <= 30.0) {
    return 30;
  }
  if (a1 <= 35.0) {
    return 35;
  }
  if (a1 <= 40.0) {
    return 40;
  }
  if (a1 <= 45.0) {
    return 45;
  }
  if (a1 <= 50.0) {
    return 50;
  }
  return 60;
}

uint64_t sub_100D033CC(double a1)
{
  if (a1 <= 0.0) {
    return 0;
  }
  if (a1 <= 5.0) {
    return 5;
  }
  if (a1 <= 10.0) {
    return 10;
  }
  if (a1 <= 15.0) {
    return 15;
  }
  if (a1 <= 25.0) {
    return 25;
  }
  if (a1 <= 50.0) {
    return 50;
  }
  if (a1 <= 75.0) {
    return 75;
  }
  if (a1 <= 100.0) {
    return 100;
  }
  if (a1 <= 125.0) {
    return 125;
  }
  if (a1 <= 250.0) {
    return 250;
  }
  if (a1 <= 500.0) {
    return 500;
  }
  if (a1 <= 750.0) {
    return 750;
  }
  if (a1 <= 1000.0) {
    return 1000;
  }
  if (a1 <= 5000.0) {
    return 5000;
  }
  if (a1 <= 10000.0) {
    return 10000;
  }
  return 20000;
}

id sub_100D03520(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a3 || (id result = [a3 type]) != 0)
  {
    uint64_t v6 = *(void **)(a1 + 1944);
    return _[v6 receiveCLVisit:a2];
  }
  return result;
}

void sub_100D03578(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 1968) == a2 && [*(id *)(a1 + 1472) count])
  {
    if (*(unsigned char *)(a1 + 1977))
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022F2518);
      }
      id v3 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
      {
        id v4 = [*(id *)(a1 + 1472) count];
        int v7 = 68289539;
        int v8 = 0;
        __int16 v9 = 2082;
        double v10 = "";
        __int16 v11 = 2049;
        id v12 = v4;
        __int16 v13 = 2050;
        uint64_t v14 = 11;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"onDeferredSaveBeaconPayloadTimerFired, camera running, re-arming timer\", \"fBeaconPayloadCache.count\":%{private}lu, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v7, 0x26u);
      }
      sub_100D00CE8(a1, 1);
    }
    else
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022F2518);
      }
      unsigned int v5 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
      {
        id v6 = [*(id *)(a1 + 1472) count];
        int v7 = 68289539;
        int v8 = 0;
        __int16 v9 = 2082;
        double v10 = "";
        __int16 v11 = 2049;
        id v12 = v6;
        __int16 v13 = 2050;
        uint64_t v14 = 11;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"onDeferredSaveBeaconPayloadTimerFired\", \"fBeaconPayloadCache.count\":%{private}lu, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v7, 0x26u);
      }
      sub_100D00E24(a1);
      *(unsigned char *)(a1 + 1976) = 0;
    }
  }
}

id sub_100D03758(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(*(void *)(a1 + 32) + 8) silo];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100D037DC;
  v5[3] = &unk_10229FED8;
  uint64_t v5[4] = a2;
  return [v3 async:v5];
}

void sub_100D037DC(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F2518);
    }
    uint64_t v2 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_ERROR))
    {
      id v3 = [[objc_msgSend(*(id *)(a1 + 32), "description") UTF8String];
      int v6 = 68289538;
      int v7 = 0;
      __int16 v8 = 2082;
      __int16 v9 = "";
      __int16 v10 = 2082;
      id v11 = v3;
      __int16 v12 = 2050;
      uint64_t v13 = 11;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"WARN: onAvengerAdvertisementDetected: saveBeaconPayloads error received\", \"error\":%{public, location:escape_only}s, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v6, 0x26u);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022F2518);
      }
    }
    id v4 = qword_102419568;
    if (os_signpost_enabled((os_log_t)qword_102419568))
    {
      id v5 = [[objc_msgSend(*(id *)(a1 + 32), "description") UTF8String];
      int v6 = 68289538;
      int v7 = 0;
      __int16 v8 = 2082;
      __int16 v9 = "";
      __int16 v10 = 2082;
      id v11 = v5;
      __int16 v12 = 2050;
      uint64_t v13 = 11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "WARN: onAvengerAdvertisementDetected: saveBeaconPayloads error received", "{\"msg%{public}.0s\":\"WARN: onAvengerAdvertisementDetected: saveBeaconPayloads error received\", \"error\":%{public, location:escape_only}s, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v6, 0x26u);
    }
  }
}

void sub_100D0399C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022F2518);
  }
  int v7 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    __int16 v8 = sub_1000A7F94(a3);
    uint64_t v9 = a4 + 8;
    if (*(char *)(a4 + 31) < 0) {
      uint64_t v9 = *(void *)(a4 + 8);
    }
    int v24 = 68289795;
    int v25 = 0;
    __int16 v26 = 2082;
    unsigned int v27 = "";
    __int16 v28 = 2081;
    unsigned int v29 = v8;
    __int16 v30 = 2081;
    uint64_t v31 = v9;
    __int16 v32 = 2050;
    v33[0] = 11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onAppMonitorNotification\", \"notification\":%{private, location:escape_only}s, \"bundleId\":%{private, location:escape_only}s, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v24, 0x30u);
  }
  uint64_t v10 = *(unsigned __int8 *)(a4 + 31);
  if ((v10 & 0x80u) == 0) {
    uint64_t v11 = *(unsigned __int8 *)(a4 + 31);
  }
  else {
    uint64_t v11 = *(void *)(a4 + 16);
  }
  uint64_t v12 = qword_102481048;
  if (byte_102481057 >= 0) {
    uint64_t v12 = byte_102481057;
  }
  if (v11 != v12) {
    return;
  }
  if (byte_102481057 >= 0) {
    uint64_t v13 = &qword_102481040;
  }
  else {
    uint64_t v13 = (uint64_t *)qword_102481040;
  }
  if ((v10 & 0x80) != 0)
  {
    if (memcmp(*(const void **)(a4 + 8), v13, *(void *)(a4 + 16))) {
      return;
    }
    goto LABEL_23;
  }
  if (!*(unsigned char *)(a4 + 31))
  {
LABEL_23:
    if (*a3 <= 0xC)
    {
      int v15 = 1 << *a3;
      if ((v15 & 0x1DA1) != 0)
      {
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_1022F2518);
        }
        unsigned int v16 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_ERROR))
        {
          unsigned int v17 = sub_1000A7F94(a3);
          int v24 = 68289539;
          int v25 = 0;
          __int16 v26 = 2082;
          unsigned int v27 = "";
          __int16 v28 = 2081;
          unsigned int v29 = v17;
          __int16 v30 = 2050;
          uint64_t v31 = 11;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"WARN, Received expected CLAppMonitor notification type for camera bundle ID\", \"notification\":%{private, location:escape_only}s, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v24, 0x26u);
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_1022F2518);
          }
        }
        unsigned int v18 = qword_102419568;
        if (os_signpost_enabled((os_log_t)qword_102419568))
        {
          unsigned int v19 = sub_1000A7F94(a3);
          int v24 = 68289539;
          int v25 = 0;
          __int16 v26 = 2082;
          unsigned int v27 = "";
          __int16 v28 = 2081;
          unsigned int v29 = v19;
          __int16 v30 = 2050;
          uint64_t v31 = 11;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "WARN, Received expected CLAppMonitor notification type for camera bundle ID", "{\"msg%{public}.0s\":\"WARN, Received expected CLAppMonitor notification type for camera bundle ID\", \"notification\":%{private, location:escape_only}s, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v24, 0x26u);
        }
      }
      else if ((v15 & 0x258) != 0)
      {
        *(unsigned char *)(a1 + 1977) = 1;
      }
      else
      {
        *(unsigned char *)(a1 + 1977) = 0;
        if (!*(unsigned char *)(a1 + 1976)) {
          sub_100D00E24(a1);
        }
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_1022F2518);
        }
        unsigned int v20 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
        {
          unsigned int v21 = sub_1000A7F94(a3);
          if (*(char *)(a4 + 31) >= 0) {
            uint64_t v22 = a4 + 8;
          }
          else {
            uint64_t v22 = *(void *)(a4 + 8);
          }
          int v23 = *(unsigned __int8 *)(a1 + 1977);
          int v24 = 68290051;
          int v25 = 0;
          __int16 v26 = 2082;
          unsigned int v27 = "";
          __int16 v28 = 2081;
          unsigned int v29 = v21;
          __int16 v30 = 2081;
          uint64_t v31 = v22;
          __int16 v32 = 1025;
          LODWORD(v33[0]) = v23;
          WORD2(v33[0]) = 2050;
          *(void *)((char *)v33 + 6) = 11;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onAppMonitorNotification:receivedCameraBundleId-setting fIsCameraAppRunning false\", \"notification\":%{private, location:escape_only}s, \"bundleId\":%{private, location:escape_only}s, \"fIsCameraAppRunning\":%{private}hhd, \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v24, 0x36u);
        }
      }
    }
    [*(id *)(a1 + 1960) updateCameraRunning:*(unsigned __int8 *)(a1 + 1977)];
    return;
  }
  uint64_t v14 = (unsigned __int8 *)(a4 + 8);
  while (*v14 == *(unsigned __int8 *)v13)
  {
    ++v14;
    uint64_t v13 = (uint64_t *)((char *)v13 + 1);
    if (!--v10) {
      goto LABEL_23;
    }
  }
}

void sub_100D03DE0(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
}

void sub_100D03DE8(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100D03E18(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_100D03E48(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_100D03E78(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

uint64_t sub_100D03EA8()
{
  return sub_1012B748C((uint64_t)&xmmword_102481058, 1, 2, 2, 1, -1.0, 43200.0, 43200.0);
}

void sub_100D03F28()
{
}

void sub_100D03F6C()
{
}

uint64_t sub_100D03F90()
{
  if (qword_102481088 != -1) {
    dispatch_once(&qword_102481088, &stru_1022F2578);
  }
  return qword_10248AAE8;
}

void sub_100D03FD8(uint64_t a1)
{
}

void sub_100D04274(_Unwind_Exception *a1)
{
  sub_100D049A0(v2, 0);
  sub_1009D1DE4(v1);
  _Unwind_Resume(a1);
}

void *sub_100D042B8(void *a1)
{
  *a1 = off_1022F25A8;
  sub_100D0431C((uint64_t)a1);
  sub_100D049A0(a1 + 4, 0);

  return sub_1009D1DE4(a1);
}

void sub_100D0431C(uint64_t a1)
{
  if (sub_1009EC0A8())
  {
    if (*(unsigned char *)(a1 + 64))
    {
      if (!*(void *)(a1 + 56)) {
        return;
      }
      uint64_t v2 = (uint64_t *)(a1 + 48);
      if (!*(void *)(a1 + 48)) {
        return;
      }
      uint64_t v3 = sub_100DF80C0();
      sub_1009D26C4(v3, 0, *(void *)(a1 + 56));
      uint64_t v4 = *(void *)(a1 + 56);
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
      *(void *)(a1 + 56) = 0;
    }
    else
    {
      uint64_t v8 = *(void *)(a1 + 48);
      int v7 = (uint64_t *)(a1 + 48);
      if (!v8) {
        return;
      }
      uint64_t v2 = v7;
    }
    uint64_t v9 = sub_1009EC0A8();
    sub_1009D26C4(v9, 0, *v2);
    if (*v2) {
      (*(void (**)(uint64_t))(*(void *)*v2 + 8))(*v2);
    }
    *uint64_t v2 = 0;
  }
  else
  {
    if (qword_102419050 != -1) {
      dispatch_once(&qword_102419050, &stru_1022F25F0);
    }
    id v5 = qword_102419058;
    if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "No accelerometer; not detecting gestures",
        buf,
        2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419050 != -1) {
        dispatch_once(&qword_102419050, &stru_1022F25F0);
      }
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGestureNotifier::stopDetectingGestures()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_100D04560(void *a1)
{
  sub_100D042B8(a1);

  operator delete();
}

void sub_100D04598(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000D3E78();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100D04618;
  v5[3] = &unk_1022B8660;
  uint64_t v5[4] = a1;
  void v5[5] = a2;
  sub_1009E8E94(v4, (uint64_t)v5);
}

void sub_100D04618()
{
}

void sub_100D04914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
}

uint64_t sub_100D049A0(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100D1C87C();
    operator delete();
  }
  return result;
}

void sub_100D049F0(uint64_t a1)
{
  if (*(double *)(a1 + 40) >= 0.0)
  {
    if (sub_1009EC0A8())
    {
      if (!*(void *)(a1 + 32))
      {
        sub_100134750(buf, "EarGesture_Prototypes_Siri_1");
        sub_100D04598(a1, (uint64_t)buf);
        if (v8 < 0) {
          operator delete(*(void **)buf);
        }
        if (qword_102419050 != -1) {
          dispatch_once(&qword_102419050, &stru_1022F25F0);
        }
        uint64_t v4 = qword_102419058;
        if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Gesture prototype was not setup. Using default prototype", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419050 != -1) {
            dispatch_once(&qword_102419050, &stru_1022F25F0);
          }
          int v6 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLGestureNotifier::startDetectingGestures()", "%s\n", v6);
          if (v6 != (char *)buf) {
            free(v6);
          }
        }
      }
      if ((!*(unsigned char *)(a1 + 64) || !*(void *)(a1 + 56)) && !*(void *)(a1 + 48))
      {
        sub_100D1B4C0(*(void *)(a1 + 32));
        operator new();
      }
    }
    else
    {
      if (qword_102419050 != -1) {
        dispatch_once(&qword_102419050, &stru_1022F25F0);
      }
      id v5 = qword_102419058;
      if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "No accelerometer; not detecting gestures",
          buf,
          2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419050 != -1) {
          dispatch_once(&qword_102419050, &stru_1022F25F0);
        }
        uint64_t v2 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLGestureNotifier::startDetectingGestures()", "%s\n", v2);
        goto LABEL_32;
      }
    }
  }
  else
  {
    if (qword_102419050 != -1) {
      dispatch_once(&qword_102419050, &stru_1022F25F0);
    }
    uint64_t v1 = qword_102419058;
    if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "Not starting gesture detection since requested accelerometer interval < 0", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419050 != -1) {
        dispatch_once(&qword_102419050, &stru_1022F25F0);
      }
      uint64_t v2 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGestureNotifier::startDetectingGestures()", "%s\n", v2);
LABEL_32:
      if (v2 != (char *)buf) {
        free(v2);
      }
    }
  }
}

void sub_100D04F2C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

const char *sub_100D04F8C(uint64_t a1, uint64_t a2, __n128 a3, int8x16_t a4)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  v8.n128_u64[0] = *(void *)(a1 + 8);
  v8.n128_u64[1] = *(unsigned int *)(a1 + 16);
  unint64_t v9 = *(void *)a1;
  a3.n128_u64[0] = v9;
  uint64_t result = (const char *)sub_100D1C880(*(unsigned int **)(a2 + 32), &v8, (_DWORD *)&v11 + 1, &v11, &v10, a3, a4);
  if (result)
  {
    strncpy(__dst, result, 0x10uLL);
    uint64_t v13 = v11;
    unint64_t v7 = *(void *)a1;
    uint64_t v14 = v10;
    unint64_t v15 = v7;
    return (const char *)sub_1000E01AC(a2, 0, (uint64_t)__dst, 40);
  }
  return result;
}

void sub_100D05054(unsigned __int8 *a1, double *a2)
{
  int v3 = *a1;
  uint64_t v4 = sub_1009EC0A8();
  uint64_t v5 = *((void *)a2 + 6);
  if (v3)
  {
    sub_1009D26C4(v4, 0, v5);
    uint64_t v6 = *((void *)a2 + 4);
    sub_100D1B4C0(v6);
  }
  else
  {
    double v7 = a2[5];
    sub_1009D1EC4(v4, 0, v5, v7);
  }
}

void sub_100D050C4(uint64_t a1, int a2, uint64_t a3)
{
  if (a2)
  {
    if (qword_102419050 != -1) {
      dispatch_once(&qword_102419050, &stru_1022F25F0);
    }
    int v3 = qword_102419058;
    if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Unrecognized notification", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419050 != -1) {
        dispatch_once(&qword_102419050, &stru_1022F25F0);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGestureNotifier::numberOfSpectatorsChanged(int, size_t)", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else if (a3)
  {
    sub_100D049F0(a1);
  }
  else
  {
    sub_100D0431C(a1);
  }
}

void sub_100D052CC(id a1)
{
  qword_102419058 = (uint64_t)os_log_create("com.apple.locationd.Motion", "EarGesture");
}

void *sub_100D052FC(void *a1, uint64_t a2, uint64_t a3, double *a4, double *a5, double *a6)
{
  *a1 = off_10234BF80;
  *a1 = off_1022F2620;
  a1[1] = 0;
  a1[2] = a2;
  a1[3] = a3;
  sub_100D0C4F0(a1 + 4, *a4, *a5, *a6, 0.04);
  return a1;
}

void sub_100D053A0(_Unwind_Exception *a1)
{
  sub_1019D78CC(v1);
  _Unwind_Resume(a1);
}

void sub_100D053B4(uint64_t a1)
{
  sub_1019D78CC(a1);

  operator delete();
}

uint64_t sub_100D053EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_100D0C4F4(a1 + 32, (float *)(a3 + 8), (double *)a3, v7);
  if (result)
  {
    double v6 = *(double *)a3;
    return (*(uint64_t (**)(double *, void))(a1 + 16))(&v6, *(void *)(a1 + 24));
  }
  return result;
}

void sub_100D05444(uint64_t a1, char a2, int a3, char a4)
{
  uint64_t v7 = sub_100538CA8(a1, a3);
  *(void *)uint64_t v7 = off_1022F26C0;
  *(void *)(v7 + 200) = off_1022F2730;
  sub_100E16F9C(v7 + 200, *(unsigned __int8 *)(v7 + 8), 0);
  *(void *)a1 = off_1022F26C0;
  *(void *)(a1 + 200) = off_1022F2730;
  *(_DWORD *)(a1 + 276) = 0;
  *(void *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 288) = -1;
  *(unsigned char *)(a1 + 292) = a4;
  *(_DWORD *)(a1 + 296) = 1127481344;
  uint64_t v8 = sub_100A08A84();
  *(void *)uint64_t buf = sub_100A09AFC(v8, (double *)(a1 + 24));
  sub_100C57788(a1 + 304, buf, a1 + 16, (double *)(a1 + 32), a2);
}

void sub_100D056A0(_Unwind_Exception *a1)
{
  sub_100C57868(v3);
  sub_100E16FDC(v2);
  sub_1005395A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100D056DC(void *a1)
{
  *a1 = off_1022F26C0;
  uint64_t v2 = a1 + 25;
  a1[25] = off_1022F2730;
  sub_100D05870((uint64_t)a1);
  sub_100C57868(a1 + 38);
  sub_100E16FDC(v2);

  return sub_1005395A0((uint64_t)a1);
}

uint64_t sub_100D05768(uint64_t a1)
{
  return sub_100D056DC((void *)(a1 - 200));
}

void sub_100D05770(void *a1)
{
  sub_100D056DC(a1);

  operator delete();
}

void sub_100D057A8(uint64_t a1)
{
  sub_100D056DC((void *)(a1 - 200));

  operator delete();
}

uint64_t sub_100D057E4(uint64_t a1)
{
  sub_100C578AC(a1 + 304);
  *(_DWORD *)(a1 + 276) = 0;
  *(void *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 288) = -1;
  *(_DWORD *)(a1 + 296) = 1127481344;
  sub_100E17398(a1 + 200);
  sub_100E171B4(a1 + 200);
  sub_100E172D8(a1 + 200);
  sub_100E174BC(a1 + 200);
  uint64_t v3 = 2;
  return sub_10053A1D0(a1, &v3);
}

void *sub_100D05870(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 200);
  sub_100E17104((void *)(a1 + 200));
  sub_100E17364((uint64_t)v1);
  sub_100E17034(v1);

  return sub_100E1709C(v1);
}

void sub_100D058BC(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 56))
  {
    if (*(unsigned __int8 *)(a1 + 292) != a2)
    {
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022F2798);
      }
      uint64_t v3 = qword_102419088;
      if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEFAULT))
      {
        int v4 = *(unsigned __int8 *)(a1 + 292);
        *(_DWORD *)uint64_t buf = 67240192;
        int v7 = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "North reference overridden as %{public}d by first client", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419080 != -1) {
          dispatch_once(&qword_102419080, &stru_1022F2798);
        }
        uint64_t v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusionService9Axis::useNorthRef(BOOL)", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
      }
    }
  }
  else
  {
    *(unsigned char *)(a1 + 292) = a2;
  }
}

void sub_100D05A88(uint64_t a1, uint64_t a2)
{
  int v4 = (double *)(a1 + 304);
  float v5 = *(float *)(a2 + 12);
  *(double *)unsigned int v19 = *(float *)(a2 + 8);
  *(double *)v17.i64 = v5;
  v18[0] = *(float *)(a2 + 16);
  sub_100C57BCC(a1 + 304, (float64x2_t *)v19, (uint64_t)&v17, v18, (void *)a2);
  if (*(double *)(a1 + 480) <= 0.0)
  {
    float32x2_t v6 = 0;
    float v7 = 0.0;
  }
  else
  {
    sub_100B07F84((double *)v19, (double *)(a1 + 320));
    float32x2_t v6 = vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)(a1 + 656)), *(float64x2_t *)v19));
    float v7 = *(float *)(a1 + 664) - *(double *)&v19[16];
  }
  unsigned int v8 = *(_DWORD *)(a1 + 460);
  uint64_t v16 = *(void *)(a1 + 464);
  sub_100C57B94((uint64_t)v4, (uint64_t)v18);
  *(void *)&v19[16] = 0;
  *(_OWORD *)unsigned int v19 = 0xBFF0000000000000;
  float32x4_t v14 = *(float32x4_t *)(a1 + 320);
  float64x2_t v15 = *(float64x2_t *)(a1 + 336);
  sub_100B9BEAC((float32x4_t *)&v19[8], v14);
  int v22 = 0;
  long long v21 = 0u;
  long long v20 = 0u;
  long long v23 = xmmword_101D1F280;
  uint64_t v24 = 0x1FF00000000;
  int v25 = 0;
  char v26 = 0;
  uint64_t v27 = 0;
  *(void *)unsigned int v19 = *(void *)a2;
  float32x4_t v17 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)v14), v15);
  sub_100B9BEAC(&v17, v17);
  *(void *)&long long v9 = v16;
  *(float32x4_t *)&v19[8] = v17;
  *(float32x2_t *)&long long v20 = v6;
  *((void *)&v20 + 1) = __PAIR64__(v8, LODWORD(v7));
  int v10 = *(_DWORD *)(a1 + 284);
  *((void *)&v9 + 1) = *(void *)(a1 + 276);
  long long v21 = v9;
  int v22 = v10;
  BYTE4(v24) = *(_DWORD *)(a1 + 288);
  *(float *)&unsigned int v11 = sub_100C587E4(v4);
  *(void *)&long long v23 = __PAIR64__(*(_DWORD *)(a1 + 296), v11);
  BYTE5(v24) = 1;
  HIWORD(v24) = HIWORD(v24) & 0xFFE7 | (8 * *(unsigned __int8 *)(a1 + 313)) | (16 * *(unsigned __int8 *)(a1 + 252));
  if (sub_100C578A4((uint64_t)v4)) {
    __int16 v12 = 256;
  }
  else {
    __int16 v12 = 0;
  }
  HIWORD(v24) = HIWORD(v24) & 0xDEFF | v12 | (*(unsigned __int8 *)(a1 + 315) << 13);
  if (*(unsigned char *)(a1 + 292)) {
    int v13 = 15;
  }
  else {
    int v13 = 7;
  }
  int v25 = v13;
  uint64_t v27 = 0;
  char v26 = *(unsigned char *)(a2 + 22);
  sub_10053987C(a1, (uint64_t)v19);
}

void sub_100D05CDC(uint64_t a1, uint64_t a2)
{
}

double sub_100D05CE4(uint64_t a1, float32x2_t *a2, float *a3)
{
  return sub_100C583D4(a1 + 304, a2, a3);
}

double sub_100D05CEC(uint64_t a1, float32x2_t *a2, float *a3)
{
  return sub_100C583D4(a1 + 104, a2, a3);
}

void sub_100D05CF4(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)(a2 + 12);
  double v5 = *(float *)(a2 + 8);
  double v3 = *(float *)(a2 + 16);
  double v4 = v2;
  sub_100C58994(a1 + 304, &v5, &v4, &v3, (void *)a2);
}

void sub_100D05D44(uint64_t a1, uint64_t a2)
{
}

void sub_100D05D4C(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 56);
  long long v18 = *(_OWORD *)(a2 + 40);
  long long v19 = v4;
  long long v20 = *(_OWORD *)(a2 + 72);
  uint64_t v21 = *(void *)(a2 + 88);
  long long v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)float32x4_t v17 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)&v17[16] = v5;
  if ((sub_1000A16E8() & 0x10) != 0 && (DWORD1(v18) - 1) <= 4) {
    DWORD1(v18) = dword_101D8BF20[DWORD1(v18) - 1];
  }
  buf[0] = *(unsigned char *)(a1 + 272);
  BOOL v6 = sub_100C5AAA8(a1 + 304, (uint64_t *)v17, buf, (unsigned char *)(a1 + 292), (double *)a2);
  sub_100C57B94(a1 + 304, (uint64_t)&v14);
  if (*(unsigned char *)(a1 + 8))
  {
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022F2798);
    }
    float v7 = qword_102419088;
    if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
    {
      int v8 = *(unsigned __int8 *)(a1 + 272);
      *(_DWORD *)uint64_t buf = 134219008;
      double v33 = v14;
      __int16 v34 = 2048;
      double v35 = v15;
      __int16 v36 = 2048;
      double v37 = v16;
      __int16 v38 = 1024;
      int v39 = v8;
      __int16 v40 = 1024;
      BOOL v41 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "correctedCompassExt, %.3f, %.3f, %.3f, %u, %u", buf, 0x2Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022F2798);
      }
      int v12 = *(unsigned __int8 *)(a1 + 272);
      int v22 = 134219008;
      double v23 = v14;
      __int16 v24 = 2048;
      double v25 = v15;
      __int16 v26 = 2048;
      double v27 = v16;
      __int16 v28 = 1024;
      int v29 = v12;
      __int16 v30 = 1024;
      BOOL v31 = v6;
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusionService9Axis::feedCompassData(const CLCompass_Type::Sample *)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  if (v6)
  {
    uint64_t v9 = sub_100A68CE8();
    sub_100A6ABAC(1, (uint64_t)&v14, v9);
  }
  int v10 = DWORD1(v18);
  *(_DWORD *)(a1 + 288) = DWORD1(v18);
  *(_DWORD *)(a1 + 296) = v18;
  if (v10 <= 0)
  {
    *(_DWORD *)(a1 + 276) = 0;
    *(void *)(a1 + 280) = 0;
  }
  else
  {
    if ((sub_1000A16E8() & 0x10) != 0)
    {
      *(_DWORD *)(a1 + 284) = *(_DWORD *)&v17[20];
      uint64_t v11 = *(void *)&v17[12];
    }
    else
    {
      *(_DWORD *)(a1 + 284) = *(_DWORD *)&v17[8];
      uint64_t v11 = *(void *)v17;
    }
    *(void *)(a1 + 276) = v11;
  }
}

void sub_100D0607C(uint64_t a1, uint64_t a2)
{
}

void sub_100D06084(id a1)
{
  qword_102419088 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

uint64_t sub_100D060B4(_DWORD *a1, uint64_t a2)
{
  sub_10006EF84(a2, "maxCacheCount", a1 + 2);
  sub_10006EF84(a2, "maxHarvest", a1 + 3);
  sub_1000A699C(a2, "minGapTime", a1 + 4);
  sub_1000A699C(a2, "maxGapTime", a1 + 6);
  sub_1000A699C(a2, "minWifiTimespan", a1 + 8);
  sub_1000A699C(a2, "targetCompassUpdateInterval", a1 + 10);
  sub_1000A699C(a2, "traceDuration", a1 + 12);

  return sub_1000A699C(a2, "traceFuzzInterval", a1 + 14);
}

uint64_t sub_100D061A4(_DWORD *a1, uint64_t *a2)
{
  sub_10006EF84(*a2, "HarvestIndoorMaxCacheCount", a1 + 2);
  sub_10006EF84(*a2, "HarvestIndoorMaxEvents", a1 + 3);
  sub_1000A699C(*a2, "HarvestIndoorMaxGapTime", a1 + 6);
  sub_1000A699C(*a2, "HarvestIndoorMinGapTime", a1 + 4);
  sub_1000A699C(*a2, "HarvestIndoorMinWifiTimespan", a1 + 8);
  sub_1000A699C(*a2, "HarvestIndoorTargetCompassUpdateInterval", a1 + 10);
  sub_1000A699C(*a2, "HarvestIndoorTraceDuration", a1 + 12);
  uint64_t v4 = *a2;

  return sub_1000A699C(v4, "HarvestIndoorTraceFuzzInterval", a1 + 14);
}

uint64_t sub_100D06294(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  int v10 = (std::__shared_weak_count *)a4[1];
  uint64_t v28 = *a4;
  int v29 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = (std::__shared_weak_count *)a5[1];
  uint64_t v26 = *a5;
  double v27 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v12 = (std::__shared_weak_count *)a6[1];
  uint64_t v24 = *a6;
  double v25 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v23[0] = xmmword_102481090;
  v23[1] = unk_1024810A0;
  v23[2] = xmmword_1024810B0;
  sub_100D6AEB4(a1, a2, 7, &v28, &v26, &v24, a8, a7, v23);
  if (v25) {
    sub_1000DB0A0(v25);
  }
  if (v27) {
    sub_1000DB0A0(v27);
  }
  if (v29) {
    sub_1000DB0A0(v29);
  }
  *(void *)a1 = off_1022F27C8;
  uint64_t v14 = *a3;
  uint64_t v13 = a3[1];
  *(void *)(a1 + 352) = off_1022F28E8;
  *(void *)(a1 + 360) = v14;
  *(void *)(a1 + 368) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 384) = off_1022F2970;
  *(void *)(a1 + 392) = 0x61A8000003E8;
  *(_OWORD *)(a1 + 400) = xmmword_101D8BF40;
  *(_OWORD *)(a1 + 416) = xmmword_101D8B370;
  *(_OWORD *)(a1 + 432) = xmmword_101D813F0;
  *(void *)(a1 + 448) = &_mh_execute_header;
  *(void *)(a1 + 456) = 0x4022000000000000;
  float v15 = *(std::__shared_weak_count **)(a1 + 64);
  uint64_t v21 = *(void *)(a1 + 56);
  int v22 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  float v16 = *(std::__shared_weak_count **)(a1 + 368);
  uint64_t v19 = *(void *)(a1 + 360);
  long long v20 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = sub_10012FD50(a1);
  sub_101092E90(a1 + 464, a1 + 384, &v21, &v19, v17);
  if (v20) {
    sub_1000DB0A0(v20);
  }
  if (v22) {
    sub_1000DB0A0(v22);
  }
  *(unsigned char *)(a1 + 760) = 0;
  *(void *)(a1 + 768) = 0x7FEFFFFFFFFFFFFFLL;
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 360) + 32))(*(void *)(a1 + 360), a1 + 384);
  sub_101092EE0(a1 + 464);
  *(void *)(a1 + 376) = [*(id *)(a1 + 72) archiveForHarvester:7];
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 360) + 16))(*(void *)(a1 + 360), a1 + 352);
  return a1;
}

void sub_100D0651C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  float v16 = *(std::__shared_weak_count **)(v14 - 72);
  if (v16) {
    sub_1000DB0A0(v16);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(v14 - 56);
  if (v17) {
    sub_1000DB0A0(v17);
  }
  long long v18 = *(std::__shared_weak_count **)(v14 - 40);
  if (v18) {
    sub_1000DB0A0(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D06594(uint64_t a1)
{
  *(void *)a1 = off_1022F27C8;
  *(void *)(a1 + 352) = off_1022F28E8;

  sub_101092EDC(a1 + 464);
  float v2 = *(std::__shared_weak_count **)(a1 + 368);
  if (v2) {
    sub_1000DB0A0(v2);
  }

  return sub_1003C0998(a1);
}

uint64_t sub_100D06628(uint64_t a1)
{
  return sub_100D06594(a1 - 352);
}

void sub_100D06630(uint64_t a1)
{
  sub_100D06594(a1);

  operator delete();
}

void sub_100D06668(uint64_t a1)
{
  sub_100D06594(a1 - 352);

  operator delete();
}

uint64_t sub_100D066A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 360) + 24))();
}

uint64_t sub_100D066CC(uint64_t a1, uint64_t a2)
{
  sub_1000E9354(v11);
  long long v4 = unk_1024810A0;
  *(_OWORD *)(a1 + 280) = xmmword_102481090;
  *(_OWORD *)(a1 + 296) = v4;
  *(_OWORD *)(a1 + 305) = unk_1024810A9;
  if (sub_100012960(a2, "Indoor", v11))
  {
    sub_1012B77D8(a1 + 280, (uint64_t)v11);
    sub_1000E9354(&buf);
    sub_100012960((uint64_t)v11, "Settings", &buf);
    sub_100D060B4((_DWORD *)(a1 + 384), (uint64_t)&buf);
    sub_10013F3C4(&buf);
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022F2A90);
  }
  long long v5 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    sub_10012FD50(a1);
    unsigned int v6 = sub_10012FD50(a1);
    sub_1012B7520();
    if (v10 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    uint64_t buf = 68289539;
    __int16 v13 = 2082;
    uint64_t v14 = "";
    __int16 v15 = 2050;
    uint64_t v16 = v6;
    __int16 v17 = 2081;
    long long v18 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"harvest-apply-rules\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"rules\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x26u);
    if (v10 < 0) {
      operator delete(__p);
    }
  }
  return sub_10013F3C4(v11);
}

void sub_100D0689C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D068D4(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024810C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024810C8))
  {
    byte_1024810C0 = ((*(uint64_t (**)(void))(**(void **)(a1 + 56) + 72))(*(void *)(a1 + 56)) & 2) != 0;
    __cxa_guard_release(&qword_1024810C8);
  }
  return byte_1024810C0;
}

void sub_100D0696C(_Unwind_Exception *a1)
{
}

void sub_100D06984(uint64_t a1)
{
  if ([*(id *)(a1 + 376) count])
  {
    id v3 = objc_alloc_init((Class)CLPIndoorCollectionRequest);
    [v3 setMeta:+[CLPMeta meta](CLPMeta, "meta")];
    [*(id *)(a1 + 376) overwritePrimaryObject:v3];
    float v2 = [[CLHUploadRequest alloc] initWithArchive:*(void *)(a1 + 376)];
    -[CLHUploadRequest setEndpoint:[objc_msgSend(*(id *)(a1 + 80), "endpointSelector") indoorEndpoint]];
    [*(id *)(a1 + 80) submitRequest:v2];
  }
}

void sub_100D06A50(uint64_t a1)
{
  sub_100D6C16C((unsigned int *)a1);
  *(unsigned char *)(a1 + 760) = 1;
  sub_1010932AC(a1 + 464);
  double v2 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
  double v3 = *(double *)(a1 + 400);
  *(double *)(a1 + 768) = v2 + *(double *)(a1 + 432) + v3 + (double)rand() / 2147483650.0 * (*(double *)(a1 + 408) - v3);

  sub_1010938DC((void *)(a1 + 464));
}

uint64_t sub_100D06B04(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = sub_10012FD50(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 24))(v2, v3, 1);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = sub_10012FD50(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 24))(v4, v5, 3);
  return 1;
}

uint64_t sub_100D06B9C(uint64_t a1)
{
  sub_1001AF4C8((void *)(a1 + 464));
  *(unsigned char *)(a1 + 760) = 0;
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = sub_10012FD50(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 32))(v2, v3, 1);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = sub_10012FD50(a1);
  unsigned int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 32);

  return v6(v4, v5, 3);
}

id sub_100D06C4C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v9 = a3;
  char v6 = sub_100D06FD8(a1);
  float v7 = (void *)(a1 + 464);
  if (v6) {
    return (id)sub_101093390((uint64_t)v7, (uint64_t)&v9, a4, 1);
  }

  return sub_1001AF4C8(v7);
}

void sub_100D06CBC(uint64_t a1)
{
  uint64_t v2 = a1 + 464;
  if (!sub_1001862DC(a1 + 464))
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F2A90);
    }
    uint64_t v3 = qword_102419568;
    if (!os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    sub_10012FD50(a1);
    *(_DWORD *)uint64_t buf = 68289282;
    int v7 = 0;
    __int16 v8 = 2082;
    int v9 = "";
    __int16 v10 = 2050;
    uint64_t v11 = sub_10012FD50(a1);
    uint64_t v4 = "{\"msg%{public}.0s\":\"Cache is empty, not harvesting\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}";
LABEL_17:
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, v4, buf, 0x1Cu);
    return;
  }
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 56) + 160))(*(void *)(a1 + 56)) & 1) == 0)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F2A90);
    }
    uint64_t v3 = qword_102419568;
    if (!os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    sub_10012FD50(a1);
    *(_DWORD *)uint64_t buf = 68289282;
    int v7 = 0;
    __int16 v8 = 2082;
    int v9 = "";
    __int16 v10 = 2050;
    uint64_t v11 = sub_10012FD50(a1);
    uint64_t v4 = "{\"msg%{public}.0s\":\"Harvesting is not allowed, not harvesting\", \"subHarvester\":%{public, location:CLSubHa"
         "rvesterIdentifier}lld}";
    goto LABEL_17;
  }
  if (sub_10018485C(a1))
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    _DWORD v5[2] = sub_100D07358;
    v5[3] = &unk_1022F2940;
    uint64_t v5[4] = a1;
    sub_101094C88(v2, (uint64_t)v5);
    sub_100D6B950(a1);
    return;
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022F2A90);
  }
  uint64_t v3 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    sub_10012FD50(a1);
    *(_DWORD *)uint64_t buf = 68289282;
    int v7 = 0;
    __int16 v8 = 2082;
    int v9 = "";
    __int16 v10 = 2050;
    uint64_t v11 = sub_10012FD50(a1);
    uint64_t v4 = "{\"msg%{public}.0s\":\"no active trace, not harvesting\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}";
    goto LABEL_17;
  }
}

uint64_t sub_100D06F90(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v7 = a3;
  uint64_t result = sub_100D06FD8(a1);
  if (result) {
    return sub_1010937B4(a1 + 464, &v7, a4);
  }
  return result;
}

uint64_t sub_100D06FD8(uint64_t a1)
{
  if (!(*(unsigned int (**)(void))(**(void **)(a1 + 56) + 160))(*(void *)(a1 + 56))
    || !*(unsigned char *)(a1 + 88))
  {
    return 0;
  }

  return sub_10018485C(a1);
}

void sub_100D07050(uint64_t a1)
{
  char v2 = sub_100D06FD8(a1);
  uint64_t v3 = (double *)(a1 + 464);
  if (v2)
  {
    sub_101093C08(v3);
  }
  else
  {
    sub_1001AF4C8(v3);
  }
}

id sub_100D070BC(uint64_t a1, uint64_t a2)
{
  char v4 = sub_100D06FD8(a1);
  uint64_t v5 = (void *)(a1 + 464);
  if (v4)
  {
    return (id)sub_10006BD74((uint64_t)v5, a2);
  }
  else
  {
    return sub_1001AF4C8(v5);
  }
}

id sub_100D07120(uint64_t a1, uint64_t a2)
{
  return sub_100D070BC(a1 - 352, a2);
}

void sub_100D07128(uint64_t a1, uint64_t a2)
{
  char v4 = sub_100D06FD8(a1);
  uint64_t v5 = (void *)(a1 + 464);
  if (v4)
  {
    sub_101093F94((uint64_t)v5, a2);
  }
  else
  {
    sub_1001AF4C8(v5);
  }
}

void sub_100D0718C(uint64_t a1, uint64_t a2)
{
}

void sub_100D07194(uint64_t a1, uint64_t a2, _DWORD *a3, double *a4)
{
  char v7 = sub_100D06FD8(a1);
  __int16 v8 = (void *)(a1 + 464);
  if (v7)
  {
    sub_101094178((uint64_t)v8, a3, a4);
  }
  else
  {
    sub_1001AF4C8(v8);
  }
}

void sub_100D0720C(uint64_t a1, uint64_t a2, _DWORD *a3, double *a4)
{
}

uint64_t sub_100D07214(uint64_t a1)
{
  uint64_t result = sub_100D06FD8(a1);
  if ((result & 1) == 0)
  {
    return (uint64_t)sub_1001AF4C8((void *)(a1 + 464));
  }
  return result;
}

uint64_t sub_100D0725C(uint64_t a1)
{
  uint64_t result = sub_100D06FD8(a1 - 352);
  if ((result & 1) == 0)
  {
    return (uint64_t)sub_1001AF4C8((void *)(a1 + 112));
  }
  return result;
}

id sub_100D072B0(uint64_t a1)
{
  return [*(id *)(a1 + 376) count];
}

id sub_100D072B8(uint64_t a1)
{
  double v2 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
  double v3 = v2 - (*(double (**)(uint64_t))(*(void *)a1 + 184))(a1);
  char v4 = *(void **)(a1 + 376);

  return [v4 pruneSecondaryDataOlderThan:v3];
}

id sub_100D0734C(uint64_t a1)
{
  return [*(id *)(a1 + 72) clearDataForHarvester:7];
}

void sub_100D07358(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if ((*(_DWORD *)(v3 + 396) & 0x80000000) != 0
    || (*(uint64_t (**)(void))(*(void *)v3 + 160))(*(void *)(a1 + 32)) < (unint64_t)*(int *)(v3 + 396))
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F2A90);
    }
    char v4 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      sub_10012FD50(v3);
      *(_DWORD *)uint64_t buf = 68289539;
      unsigned int v21 = 0;
      __int16 v22 = 2082;
      double v23 = "";
      __int16 v24 = 2050;
      uint64_t v25 = sub_10012FD50(v3);
      __int16 v26 = 2113;
      id v27 = [a2 formattedText];
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"event\":%{private, location:escape_only}@}", buf, 0x26u);
    }
    switch([a2 type])
    {
      case 1u:
        uint64_t v5 = *(void **)(v3 + 376);
        id v6 = [a2 cmAttitude];
        char v7 = v5;
        uint64_t v8 = 4;
        goto LABEL_27;
      case 2u:
        __int16 v15 = *(void **)(v3 + 376);
        id v6 = [a2 cmPedometer];
        char v7 = v15;
        uint64_t v8 = 5;
        goto LABEL_27;
      case 3u:
        uint64_t v16 = *(void **)(v3 + 376);
        id v6 = [a2 location];
        char v7 = v16;
        uint64_t v8 = 3;
        goto LABEL_27;
      case 4u:
        __int16 v17 = *(void **)(v3 + 376);
        id v6 = [a2 motionActivity];
        char v7 = v17;
        uint64_t v8 = 6;
        goto LABEL_27;
      case 5u:
        long long v18 = *(void **)(v3 + 376);
        id v6 = [a2 pressure];
        char v7 = v18;
        uint64_t v8 = 7;
        goto LABEL_27;
      case 6u:
        uint64_t v19 = *(void **)(v3 + 376);
        id v6 = [a2 wifiScan];
        char v7 = v19;
        uint64_t v8 = 2;
LABEL_27:
        [v7 writeSecondaryObject:v6 toField:v8];
        break;
      case 7u:
        break;
      default:
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_1022F2A90);
        }
        int v12 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_FAULT))
        {
          unsigned int v13 = [a2 type];
          *(_DWORD *)uint64_t buf = 67109120;
          unsigned int v21 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Attempting to write unknown event with type %d, consider updating this switch statement", buf, 8u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_1022F2A90);
          }
          [a2 type];
          uint64_t v14 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLSubHarvesterIndoor::harvestIndoor()_block_invoke", "%s\n", v14);
          if (v14 != (char *)buf) {
            free(v14);
          }
        }
        break;
    }
    ++*(_DWORD *)(v3 + 208);
    *(double *)(v3 + 752) = (*(double (**)(void))(**(void **)(v3 + 56) + 64))(*(void *)(v3 + 56));
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F2A90);
    }
    int v9 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      sub_10012FD50(v3);
      unsigned int v10 = sub_10012FD50(v3);
      int v11 = *(_DWORD *)(v3 + 396);
      *(_DWORD *)uint64_t buf = 68289539;
      unsigned int v21 = 0;
      __int16 v22 = 2082;
      double v23 = "";
      __int16 v24 = 2050;
      uint64_t v25 = v10;
      __int16 v26 = 1025;
      LODWORD(v27) = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"max scans exceeded, removing from cache\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"maxEvents\":%{private}d}", buf, 0x22u);
    }
  }
}

void sub_100D07800()
{
}

double sub_100D07814(uint64_t a1)
{
  return *(double *)(a1 + 72);
}

double sub_100D0781C@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  return result;
}

void sub_100D07830(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

uint64_t sub_100D07860()
{
  return sub_1012B748C((uint64_t)&xmmword_102481090, 1, 2, 2, 1, 0.0, 43200.0, 43200.0);
}

void sub_100D078A0(uint64_t a1, double a2)
{
  double v3 = *(double *)(a1 + 24);
  if (v3 == -1.0) {
    return;
  }
  int v11 = 0;
  int v12 = 0;
  uint64_t v13 = 0;
  sub_10010F834(&v11, (const void *)qword_1024810E8, qword_1024810F0, (qword_1024810F0 - qword_1024810E8) >> 2);
  uint64_t v5 = (char *)v12 - (char *)v11;
  if (v12 != v11)
  {
    uint64_t v6 = 0;
    uint64_t v8 = v5 >> 2;
    if ((unint64_t)(v5 >> 2) <= 1) {
      uint64_t v8 = 1;
    }
    while (1)
    {
      float v7 = (a2 - v3) / 60.0;
      if (v11[v6] >= v7) {
        goto LABEL_9;
      }
      if (v8 == ++v6)
      {
        LODWORD(v6) = v8;
        goto LABEL_9;
      }
    }
  }
  LODWORD(v6) = 0;
  if (v12)
  {
LABEL_9:
    int v12 = v11;
    operator delete(v11);
    LODWORD(v5) = v6;
  }
  unint64_t v9 = (unint64_t)(qword_1024810D8 - qword_1024810D0) >> 2;
  int v10 = v5 & ~((int)v5 >> 31);
  if (v10 < (int)v9) {
    LODWORD(v9) = v10;
  }
  ++*(_DWORD *)(*(void *)a1 + 4 * (int)v9);
  *(void *)(a1 + 24) = 0xBFF0000000000000;
}

double sub_100D079A4(uint64_t a1)
{
  int v4 = 0;
  sub_100D0C2C0(&v5, ((qword_1024810F0 - qword_1024810E8) >> 2) + 1, &v4);
  double v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  double result = *(double *)&v5;
  *(_OWORD *)a1 = v5;
  *(void *)(a1 + 16) = v6;
  return result;
}

void sub_100D07A14(uint64_t a1)
{
  *(void *)a1 = off_1022F2AC0;
  *(void *)(a1 + 8) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  int v7 = 0;
  sub_100D0C2C0((void *)(a1 + 48), ((qword_1024810D8 - qword_1024810D0) >> 2) + 1, &v7);
  int v7 = 0;
  sub_100D0C2C0((void *)(a1 + 72), ((qword_1024810D8 - qword_1024810D0) >> 2) + 1, &v7);
  int v7 = 0;
  sub_100D0C2C0((void *)(a1 + 96), ((qword_1024810D8 - qword_1024810D0) >> 2) + 1, &v7);
  int v7 = 0;
  sub_100D0C2C0((void *)(a1 + 120), ((qword_1024810D8 - qword_1024810D0) >> 2) + 1, &v7);
  int v7 = 0;
  sub_100D0C2C0((void *)(a1 + 144), ((qword_1024810F0 - qword_1024810E8) >> 2) + 1, &v7);
  *(void *)(a1 + 168) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 176) = 1153138688;
  int v7 = 0;
  sub_100D0C2C0((void *)(a1 + 184), ((qword_1024810F0 - qword_1024810E8) >> 2) + 1, &v7);
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 388) = 0;
  *(void *)(a1 + 208) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 216) = 1112014848;
  *(_WORD *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(unsigned char *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 369) = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 400) = _Q1;
  *(unsigned char *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 432) = 6;
  *(void *)(a1 + 544) = 0;
  *(unsigned char *)(a1 + 552) = 0;
  *(unsigned char *)(a1 + 456) = 0;
  *(_OWORD *)(a1 + 440) = 0u;
  *(void *)(a1 + 464) = 0;
  *(_DWORD *)(a1 + 471) = 0;
  *(void *)(a1 + 496) = 0;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_WORD *)(a1 + 504) = 0;
  *(void *)(a1 + 528) = 0;
  *(_DWORD *)(a1 + 535) = 0;
  *(_OWORD *)(a1 + 512) = 0u;
  sub_1009D181C(a1 + 560, 1, -90, 60);
  sub_1009D181C(a1 + 608, 1, -90, 60);
  sub_100134750((void *)(a1 + 656), "Null");
  int v7 = 12;
  sub_101A21DA8((unsigned __int8 *)(a1 + 680), "FitnessOutdoorAnalyticsSegmentsPerDay", &v7, 0);
  *(void *)(a1 + 696) = 0x4000000000000000;
  LOBYTE(v7) = 1;
  sub_10006ACBC((unsigned __int8 *)(a1 + 704), "FitnessOutdoorAnalyticsEnableSubsampling", (unsigned __int8 *)&v7, 0);
  LOBYTE(v7) = 1;
  sub_10006ACBC((unsigned __int8 *)(a1 + 707), "FitnessOutdoorAnalyticsEnableWeatherRequirement", (unsigned __int8 *)&v7, 0);
  LOBYTE(v7) = 0;
  sub_10006ACBC((unsigned __int8 *)(a1 + 710), "FitnessOutdoorAnalyticsSeedLatLongAtCupertino", (unsigned __int8 *)&v7, 0);
  sub_100D07E18(a1);
}

void sub_100D07D0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9)
{
  if (*(char *)(v10 + 679) < 0) {
    operator delete(*v16);
  }
  long long v18 = *(void **)(v10 + 632);
  if (v18)
  {
    *(void *)(v10 + 640) = v18;
    operator delete(v18);
  }
  uint64_t v19 = *(void **)(v10 + 584);
  if (v19)
  {
    *(void *)(v10 + 592) = v19;
    operator delete(v19);
  }
  long long v20 = *v15;
  if (*v15)
  {
    *(void *)(v10 + 192) = v20;
    operator delete(v20);
  }
  unsigned int v21 = *v14;
  if (*v14)
  {
    *(void *)(v10 + 152) = v21;
    operator delete(v21);
  }
  __int16 v22 = *v13;
  if (*v13)
  {
    *(void *)(v10 + 128) = v22;
    operator delete(v22);
  }
  double v23 = *v12;
  if (*v12)
  {
    *(void *)(v10 + 104) = v23;
    operator delete(v23);
  }
  __int16 v24 = *v11;
  if (*v11)
  {
    *(void *)(v10 + 80) = v24;
    operator delete(v24);
  }
  uint64_t v25 = *a9;
  if (*a9)
  {
    *(void *)(v10 + 56) = v25;
    operator delete(v25);
  }
  uint64_t v26 = *v9;
  *unint64_t v9 = 0;
  if (v26) {
    sub_100D0C344((uint64_t)v9, v26);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D07E18(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    sub_100D0C344(a1 + 16, v2);
  }
  unsigned int v3 = *(_DWORD *)(a1 + 684);
  double v4 = 2.0;
  if (v3 - 1 <= 0x59F) {
    double v4 = 24.0 / (double)v3;
  }
  long long v5 = 0;
  *(double *)(a1 + 696) = v4;
  std::string __p = 0;
  __int16 v17 = 0;
  long long v18 = 0;
  double v6 = 0.0;
  while (1)
  {
    if (v5 >= v18)
    {
      uint64_t v8 = (double *)__p;
      uint64_t v9 = ((char *)v5 - (unsigned char *)__p) >> 3;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61) {
        sub_1001D7FD4();
      }
      uint64_t v11 = (char *)v18 - (unsigned char *)__p;
      if (((char *)v18 - (unsigned char *)__p) >> 2 > v10) {
        unint64_t v10 = v11 >> 2;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v10;
      }
      if (v12)
      {
        uint64_t v13 = (char *)sub_1000DA54C((uint64_t)&v18, v12);
        uint64_t v8 = (double *)__p;
        long long v5 = v17;
      }
      else
      {
        uint64_t v13 = 0;
      }
      uint64_t v14 = (double *)&v13[8 * v9];
      double *v14 = v6;
      int v7 = v14 + 1;
      while (v5 != v8)
      {
        uint64_t v15 = *((void *)v5-- - 1);
        *((void *)v14-- - 1) = v15;
      }
      std::string __p = v14;
      __int16 v17 = v7;
      long long v18 = (double *)&v13[8 * v12];
      if (v8) {
        operator delete(v8);
      }
    }
    else
    {
      double *v5 = v6;
      int v7 = v5 + 1;
    }
    __int16 v17 = v7;
    double v6 = v6 + *(double *)(a1 + 696);
    long long v5 = v7;
    if (v6 >= 24.0) {
      operator new();
    }
  }
}

void sub_100D07FC0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
}

std::string *sub_100D08004(uint64_t a1)
{
  if (qword_102419270 != -1) {
    dispatch_once(&qword_102419270, &stru_1022F2B00);
  }
  uint64_t v2 = qword_102419278;
  if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "FitnessOutdoorAnalyticsAggregator, reset", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022F2B00);
    }
    LOWORD(v12[0]) = 0;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFitnessOutdoorAnalyticsAggregator::reset()", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  *(double *)(a1 + 24) = sub_100C79308(*(void *)(a1 + 16));
  *(void *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = 0;
  v12[0] = 0;
  sub_100D0C2C0(buf, ((qword_1024810D8 - qword_1024810D0) >> 2) + 1, v12);
  double v4 = *(void **)(a1 + 48);
  if (v4)
  {
    *(void *)(a1 + 56) = v4;
    operator delete(v4);
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)buf;
  *(void *)(a1 + 64) = v14;
  v12[0] = 0;
  sub_100D0C2C0(buf, ((qword_1024810D8 - qword_1024810D0) >> 2) + 1, v12);
  long long v5 = *(void **)(a1 + 72);
  if (v5)
  {
    *(void *)(a1 + 80) = v5;
    operator delete(v5);
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)buf;
  *(void *)(a1 + 88) = v14;
  v12[0] = 0;
  sub_100D0C2C0(buf, ((qword_1024810D8 - qword_1024810D0) >> 2) + 1, v12);
  double v6 = *(void **)(a1 + 96);
  if (v6)
  {
    *(void *)(a1 + 104) = v6;
    operator delete(v6);
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)buf;
  *(void *)(a1 + 112) = v14;
  v12[0] = 0;
  sub_100D0C2C0(buf, ((qword_1024810D8 - qword_1024810D0) >> 2) + 1, v12);
  int v7 = *(void **)(a1 + 120);
  if (v7)
  {
    *(void *)(a1 + 128) = v7;
    operator delete(v7);
  }
  *(_OWORD *)(a1 + 120) = *(_OWORD *)buf;
  *(void *)(a1 + 136) = v14;
  sub_100D079A4(a1 + 144);
  sub_100D079A4(a1 + 184);
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 464) = 0;
  *(unsigned char *)(a1 + 552) = 0;
  unint64_t v8 = *(void *)(a1 + 576);
  *(_DWORD *)uint64_t buf = 0;
  sub_1004528EC((char **)(a1 + 584), v8, buf);
  unint64_t v9 = *(void *)(a1 + 624);
  *(_DWORD *)uint64_t buf = 0;
  sub_1004528EC((char **)(a1 + 632), v9, buf);
  double result = std::string::assign((std::string *)(a1 + 656), "Null");
  *(_WORD *)(a1 + 473) = 0;
  *(_WORD *)(a1 + 537) = 0;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 480) = 0;
  *(_WORD *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 520) = 0;
  return result;
}

uint64_t sub_100D0833C(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(result + 224) = *(unsigned char *)(a2 + 9);
  return result;
}

void sub_100D08348(uint64_t a1, double a2)
{
  double v3 = *(double *)(a1 + 8);
  if (v3 != 0.0 && v3 >= a2)
  {
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022F2B00);
    }
    long long v5 = qword_102419278;
    if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = *(void *)(a1 + 8);
      *(_DWORD *)uint64_t buf = 134218240;
      double v9 = a2;
      __int16 v10 = 2048;
      uint64_t v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "FitnessOutdoorAnalyticsAggregator, updates not strictly increasing, time, %f, prevTime, %f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419270 != -1) {
        dispatch_once(&qword_102419270, &stru_1022F2B00);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CFTimeInterval CLFitnessOutdoorAnalyticsAggregator::estimateDurationBetweenUpdates(CFAbsoluteTime) const", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

std::string *sub_100D0855C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 225) = CLMotionActivity::isTypeStatic();
  *(unsigned char *)(a1 + 536) = CLMotionActivity::isTypeInVehicle();
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 40);
  long long v5 = *(_OWORD *)(a2 + 72);
  long long v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 312) = v5;
  *(_OWORD *)(a1 + 264) = v6;
  *(_OWORD *)(a1 + 280) = v4;
  long long v7 = *(_OWORD *)(a2 + 104);
  long long v8 = *(_OWORD *)(a2 + 120);
  long long v9 = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 376) = *(void *)(a2 + 136);
  *(_OWORD *)(a1 + 344) = v7;
  *(_OWORD *)(a1 + 360) = v8;
  *(_OWORD *)(a1 + 328) = v9;
  double v10 = *(double *)a2;

  return sub_100D085F0(a1, v10);
}

std::string *sub_100D085F0(uint64_t a1, double a2)
{
  sub_100D08348(a1, a2);
  double v5 = v4;
  *(double *)(a1 + 8) = a2;
  double v6 = 0.0;
  if (!*(unsigned char *)(a1 + 224) && !*(unsigned char *)(a1 + 225)) {
    double v6 = v5;
  }
  *(double *)(a1 + 232) = v6 + *(double *)(a1 + 232);
  sub_100D087D8(a1);
  int v7 = *(unsigned __int8 *)(a1 + 456);
  if (*(unsigned char *)(a1 + 456)) {
    double v8 = v5;
  }
  else {
    double v8 = 0.0;
  }
  *(double *)(a1 + 448) = *(double *)(a1 + 448) + v8;
  if (v7)
  {
    double v9 = 0.0;
    if (*(unsigned char *)(a1 + 473)) {
      double v10 = v5;
    }
    else {
      double v10 = 0.0;
    }
    *(double *)(a1 + 480) = *(double *)(a1 + 480) + v10;
    if (*(unsigned char *)(a1 + 504)) {
      double v9 = v5;
    }
  }
  else
  {
    double v9 = 0.0;
    *(double *)(a1 + 480) = *(double *)(a1 + 480) + 0.0;
  }
  *(double *)(a1 + 512) = v9 + *(double *)(a1 + 512);
  int v11 = *(unsigned __int8 *)(a1 + 472);
  double v12 = 0.0;
  if (*(unsigned char *)(a1 + 472)) {
    double v13 = v5;
  }
  else {
    double v13 = 0.0;
  }
  *(double *)(a1 + 464) = *(double *)(a1 + 464) + v13;
  if (v11)
  {
    int v14 = *(unsigned __int8 *)(a1 + 473);
    if (*(unsigned char *)(a1 + 473)) {
      double v15 = v5;
    }
    else {
      double v15 = 0.0;
    }
    *(double *)(a1 + 488) = *(double *)(a1 + 488) + v15;
    int v16 = *(unsigned __int8 *)(a1 + 504);
    if (*(unsigned char *)(a1 + 504)) {
      double v12 = v5;
    }
  }
  else
  {
    *(double *)(a1 + 488) = *(double *)(a1 + 488) + 0.0;
    int v14 = *(unsigned __int8 *)(a1 + 473);
    int v16 = *(unsigned __int8 *)(a1 + 504);
  }
  *(double *)(a1 + 520) = v12 + *(double *)(a1 + 520);
  *(double *)(a1 + 40) = v5 + *(double *)(a1 + 40);
  double v17 = 0.0;
  if (v14) {
    double v18 = v5;
  }
  else {
    double v18 = 0.0;
  }
  *(double *)(a1 + 496) = *(double *)(a1 + 496) + v18;
  if (v16) {
    double v19 = v5;
  }
  else {
    double v19 = 0.0;
  }
  *(double *)(a1 + 528) = *(double *)(a1 + 528) + v19;
  if (*(unsigned char *)(a1 + 537)) {
    double v17 = v5;
  }
  *(double *)(a1 + 544) = *(double *)(a1 + 544) + v17;
  double result = (std::string *)sub_100C7976C(*(void *)(a1 + 16), a2);
  if (result)
  {
    sub_100D078A0(a1 + 144, a2);
    sub_100D078A0(a1 + 184, a2);
    sub_100D08D00(a1, a2);
    return sub_100D08004(a1);
  }
  return result;
}

void sub_100D087D8(uint64_t a1)
{
  double v2 = *(double *)(a1 + 8);
  if (v2 == -1.0)
  {
    BOOL v28 = 0;
LABEL_14:
    BOOL v7 = 0;
    goto LABEL_15;
  }
  double v3 = *(double *)(a1 + 408);
  BOOL v28 = v3 != -1.0 && v2 >= v3 + 30.0 && *(unsigned char *)(a1 + 416) != 0;
  double v5 = *(double *)(a1 + 400);
  if (v5 == -1.0) {
    goto LABEL_14;
  }
  if (v2 < v5 + 30.0 || v3 != -1.0) {
    goto LABEL_14;
  }
  BOOL v7 = v2 < v5 + 3600.0;
LABEL_15:
  double v8 = *(double *)(a1 + 424);
  BOOL v9 = v8 == -1.0 || v2 > v8 + 180.0;
  if (v9)
  {
    int v10 = 0;
LABEL_21:
    int v11 = 0;
    goto LABEL_32;
  }
  unsigned int v12 = *(_DWORD *)(a1 + 432);
  if (v12) {
    BOOL v13 = v12 == 3;
  }
  else {
    BOOL v13 = 1;
  }
  int v10 = v13;
  int v11 = 1;
  BOOL v9 = v12 > 5;
  int v14 = (1 << v12) & 0x36;
  if (v9 || v14 == 0) {
    goto LABEL_21;
  }
LABEL_32:
  unint64_t v16 = *(void *)(a1 + 440);
  unsigned int v17 = (v16 < 0x1D) & (0x10050A20u >> v16);
  unsigned int v18 = (v16 < 0x1C) & (0x9B28010u >> v16);
  if (*(unsigned char *)(a1 + 536)) {
    char v19 = 1;
  }
  else {
    char v19 = v11;
  }
  *(unsigned char *)(a1 + 537) = v19;
  if ((v19 & 1) != 0 || *(unsigned char *)(a1 + 224))
  {
    char v20 = 0;
    *(unsigned char *)(a1 + 473) = 0;
    int v21 = 1;
  }
  else
  {
    int v21 = 0;
    *(unsigned char *)(a1 + 473) = v28 | v17;
    if (v7) {
      char v20 = 1;
    }
    else {
      char v20 = v10 | v18;
    }
  }
  *(unsigned char *)(a1 + 504) = v20;
  if (qword_102419270 != -1) {
    dispatch_once(&qword_102419270, &stru_1022F2B00);
  }
  __int16 v22 = qword_102419278;
  if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEBUG))
  {
    int v23 = *(unsigned __int8 *)(a1 + 537);
    int v24 = *(unsigned __int8 *)(a1 + 224);
    unsigned int v25 = *(unsigned __int8 *)(a1 + 344);
    *(_DWORD *)uint64_t buf = 67112448;
    BOOL v30 = v28;
    __int16 v31 = 1024;
    BOOL v32 = v7;
    __int16 v33 = 1024;
    int v34 = v10;
    __int16 v35 = 1024;
    int v36 = v11;
    __int16 v37 = 1024;
    unsigned int v38 = v17;
    __int16 v39 = 1024;
    unsigned int v40 = v18;
    __int16 v41 = 1024;
    int v42 = v21;
    __int16 v43 = 1024;
    int v44 = v23;
    __int16 v45 = 1024;
    int v46 = v24;
    __int16 v47 = 1024;
    int v48 = v25 & 1;
    __int16 v49 = 1024;
    int v50 = (v25 >> 1) & 1;
    __int16 v51 = 1024;
    int v52 = (v25 >> 2) & 1;
    __int16 v53 = 1024;
    int v54 = (v25 >> 3) & 1;
    __int16 v55 = 1024;
    int v56 = (v25 >> 4) & 1;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "FitnessOutdoorAnalyticsAggregator, update priors, loiIndoor, %d, loiOutdoor, %d, mapsRouteOutdoor, %d, mapsRouteVehicle, %d workoutIndoor, %d, workoutOutdoor, %d, suppressPriors, %d, inVehicle, %d, onCharger, %d, vehicularMotionHint, %d, vehicularGpsHint, %d, vehicularBasebandHint, %d, vehicularWifiHint, %d, vehicularBtHint, %d", buf, 0x56u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022F2B00);
    }
    id v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFitnessOutdoorAnalyticsAggregator::updatePriors()", "%s\n", v27);
    if (v27 != (char *)buf) {
      free(v27);
    }
  }
  if (v11) {
    *(unsigned char *)(a1 + 538) |= 0x20u;
  }
  char v26 = *(unsigned char *)(a1 + 344);
  if (v26)
  {
    *(unsigned char *)(a1 + 538) |= 1u;
    if ((v26 & 2) == 0)
    {
LABEL_47:
      if ((v26 & 4) == 0) {
        goto LABEL_48;
      }
      goto LABEL_54;
    }
  }
  else if ((*(unsigned char *)(a1 + 344) & 2) == 0)
  {
    goto LABEL_47;
  }
  *(unsigned char *)(a1 + 538) |= 2u;
  if ((v26 & 4) == 0)
  {
LABEL_48:
    if ((v26 & 8) == 0) {
      goto LABEL_49;
    }
    goto LABEL_55;
  }
LABEL_54:
  *(unsigned char *)(a1 + 538) |= 4u;
  if ((v26 & 8) == 0)
  {
LABEL_49:
    if ((v26 & 0x10) == 0) {
      goto LABEL_50;
    }
    goto LABEL_56;
  }
LABEL_55:
  *(unsigned char *)(a1 + 538) |= 8u;
  if ((v26 & 0x10) == 0)
  {
LABEL_50:
    if (v21) {
      return;
    }
    goto LABEL_57;
  }
LABEL_56:
  *(unsigned char *)(a1 + 538) |= 0x10u;
  if (v21) {
    return;
  }
LABEL_57:
  if (v28)
  {
    *(unsigned char *)(a1 + 474) |= 1u;
    if (!v7)
    {
LABEL_59:
      if (!v10) {
        goto LABEL_60;
      }
      goto LABEL_66;
    }
  }
  else if (!v7)
  {
    goto LABEL_59;
  }
  *(unsigned char *)(a1 + 505) |= 1u;
  if (!v10)
  {
LABEL_60:
    if (!v17) {
      goto LABEL_61;
    }
    goto LABEL_67;
  }
LABEL_66:
  *(unsigned char *)(a1 + 505) |= 2u;
  if (!v17)
  {
LABEL_61:
    if (!v18) {
      return;
    }
    goto LABEL_62;
  }
LABEL_67:
  *(unsigned char *)(a1 + 474) |= 4u;
  if (v18) {
LABEL_62:
  }
    *(unsigned char *)(a1 + 505) |= 4u;
}

void sub_100D08D00(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 696);
  double v5 = *(double *)(a1 + 40);
  BOOL v6 = v5 >= (double)(int)(v4 * 0.95 * 3600.0) && v5 <= (double)(int)(v4 * 1.05 * 3600.0);
  double v7 = *(double *)(a1 + 32);
  BOOL v8 = sub_100D0C0AC(a1);
  BOOL v9 = v8;
  if (v6
    && vabdd_f64(a2, v7) <= 10.0
    && (*(unsigned char *)(a1 + 552) || !*(unsigned char *)(a1 + 708))
    && (*(unsigned char *)(a1 + 384) ? (BOOL v10 = v8) : (BOOL v10 = 0), v10))
  {
    int v11 = sub_100D09D40(a1, 1);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 40))(a1))
    {
      id v12 = sub_100D0B6E8(a1, 0, v11);
      (*(void (**)(uint64_t, id))(*(void *)a1 + 16))(a1, v12);
    }
    else
    {
      if (qword_102419270 != -1) {
        dispatch_once(&qword_102419270, &stru_1022F2B00);
      }
      int v21 = qword_102419278;
      if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "FitnessOutdoorAnalyticsAggregator, not sending some analytics, no IHA permission", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419270 != -1) {
          dispatch_once(&qword_102419270, &stru_1022F2B00);
        }
        unsigned int v25 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFitnessOutdoorAnalyticsAggregator::attemptSendAnalytics(CFAbsoluteTime) const", "%s\n", v25);
        if (v25 != (char *)buf) {
          free(v25);
        }
      }
    }
    id v22 = sub_100D0B7EC(a1, 0, v11);
    (*(void (**)(uint64_t, id))(*(void *)a1 + 24))(a1, v22);
    id v23 = sub_100D0B864(a1, 0, v11);
    (*(void (**)(uint64_t, id))(*(void *)a1 + 32))(a1, v23);
  }
  else
  {
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022F2B00);
    }
    BOOL v13 = qword_102419278;
    if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEFAULT))
    {
      double v14 = *(double *)(a1 + 24);
      double v15 = sub_100C79414(v14);
      double v16 = *(double *)(a1 + 32);
      double v17 = sub_100C79414(v16);
      uint64_t v18 = *(void *)(a1 + 40);
      int v19 = *(unsigned __int8 *)(a1 + 552);
      int v20 = *(unsigned __int8 *)(a1 + 384);
      *(_DWORD *)uint64_t buf = 134351104;
      double v27 = a2;
      __int16 v28 = 2050;
      double v29 = v14;
      __int16 v30 = 2050;
      double v31 = v15;
      __int16 v32 = 2050;
      double v33 = v16;
      __int16 v34 = 2050;
      double v35 = v17;
      __int16 v36 = 2050;
      uint64_t v37 = v18;
      __int16 v38 = 1026;
      int v39 = v19;
      __int16 v40 = 1026;
      int v41 = v20;
      __int16 v42 = 1024;
      BOOL v43 = v9;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "FitnessOutdoorAnalyticsAggregator, not sending analytics due to insufficient data, currentTime, %{public}.2f, binStartTime, %{public}.2f, binStartWallHour, %{public}.2f, binEndTime, %{public}.2f, binEndWallHour, %{public}.2f, accumulatedDurationInSeconds, %{public}.2f, hasRecentWeatherUpdate, %{public}d, hasLatLong, %{public}d, isCurrentBinEligibleSubsample, %d", buf, 0x50u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419270 != -1) {
        dispatch_once(&qword_102419270, &stru_1022F2B00);
      }
      sub_100C79414(*(double *)(a1 + 24));
      sub_100C79414(*(double *)(a1 + 32));
      int v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFitnessOutdoorAnalyticsAggregator::attemptSendAnalytics(CFAbsoluteTime) const", "%s\n", v24);
      if (v24 != (char *)buf) {
        free(v24);
      }
    }
  }
}

uint64_t sub_100D09284(uint64_t result, double a2, double a3)
{
  *(unsigned char *)(result + 384) = 1;
  *(_DWORD *)(result + 388) = llround(a2);
  *(_DWORD *)(result + 392) = llround(a3);
  return result;
}

std::string *sub_100D092A0(std::string *result, void *a2)
{
  if (a2)
  {
    double v3 = result;
    result[23].__r_.__value_.__s.__data_[0] = 1;
    [a2 temperature];
    int v5 = (int)v4;
    int v6 = HIDWORD(v3[23].__r_.__value_.__r.__words[1]);
    if (v6 > (int)v4) {
      int v5 = HIDWORD(v3[23].__r_.__value_.__r.__words[1]);
    }
    if (v5 >= SLODWORD(v3[23].__r_.__value_.__r.__words[2])) {
      int v5 = v3[23].__r_.__value_.__r.__words[2];
    }
    ++*(_DWORD *)(v3[24].__r_.__value_.__l.__size_ + 4 * ((v5 - v6) / SLODWORD(v3[23].__r_.__value_.__r.__words[1])));
    [a2 feelsLikeTemperature];
    int v8 = (int)v7;
    int v9 = HIDWORD(v3[25].__r_.__value_.__r.__words[1]);
    if (v9 > (int)v7) {
      int v8 = HIDWORD(v3[25].__r_.__value_.__r.__words[1]);
    }
    if (v8 >= SLODWORD(v3[25].__r_.__value_.__r.__words[2])) {
      int v8 = v3[25].__r_.__value_.__r.__words[2];
    }
    ++*(_DWORD *)(v3[26].__r_.__value_.__l.__size_ + 4 * ((v8 - v9) / SLODWORD(v3[25].__r_.__value_.__r.__words[1])));
    double result = (std::string *)[((std::string *)[a2 precipitationType]) isEqualToString:@"Null"];
    if ((result & 1) == 0)
    {
      BOOL v10 = (const std::string::value_type *)[a2 precipitationType];
      return std::string::assign((std::string *)((char *)v3 + 656), v10);
    }
  }
  return result;
}

BOOL sub_100D09398(uint64_t a1, char *a2)
{
  sub_100134750(&__dst, "Trail");
  sub_100134750(v30, "Park");
  sub_100134750(v31, "Field");
  sub_100134750(v32, "Golf");
  sub_100134750(v33, "Preserve");
  sub_100134750(v34, "Recreation Area");
  sub_100134750(v35, "Beach");
  sub_100134750(v36, "Bay");
  sub_100134750(v37, "River");
  sub_100134750(v38, "Creek");
  int v24 = 0;
  unsigned int v25 = 0;
  v26[0] = 0;
  v26[1] = &v24;
  char v27 = 0;
  int v24 = (char *)operator new(0xF0uLL);
  unsigned int v25 = v24;
  v26[0] = v24 + 240;
  uint64_t v3 = 0;
  unsigned int v25 = sub_1000DC3CC((uint64_t)v26, &__dst, &v39, v24);
  do
  {
    if (SHIBYTE(v38[v3 + 2]) < 0) {
      operator delete((void *)v38[v3]);
    }
    v3 -= 3;
  }
  while (v3 != -30);
  int v5 = v24;
  float v4 = v25;
  if (v24 == v25)
  {
    BOOL v21 = 0;
  }
  else
  {
    id v23 = a2;
    do
    {
      if (v5[23] < 0)
      {
        sub_1000DC48C(&__dst, *(void **)v5, *((void *)v5 + 1));
      }
      else
      {
        long long v6 = *(_OWORD *)v5;
        uint64_t v29 = *((void *)v5 + 2);
        long long __dst = v6;
      }
      if (a2[23] < 0)
      {
        int v8 = *(char **)a2;
        uint64_t v7 = *((void *)a2 + 1);
      }
      else
      {
        uint64_t v7 = a2[23];
        int v8 = a2;
      }
      int v9 = SHIBYTE(v29);
      BOOL v10 = (void *)__dst;
      if (v29 >= 0) {
        p_dst = &__dst;
      }
      else {
        p_dst = (long long *)__dst;
      }
      if (v29 >= 0) {
        int64_t v12 = HIBYTE(v29);
      }
      else {
        int64_t v12 = *((void *)&__dst + 1);
      }
      if (v12)
      {
        BOOL v13 = &v8[v7];
        if (v7 >= v12)
        {
          double v16 = v4;
          int v17 = *(char *)p_dst;
          uint64_t v18 = v8;
          do
          {
            uint64_t v19 = v7 - v12;
            if (v19 == -1) {
              break;
            }
            int v20 = (char *)memchr(v18, v17, v19 + 1);
            if (!v20) {
              break;
            }
            double v14 = v20;
            if (!memcmp(v20, p_dst, v12)) {
              goto LABEL_29;
            }
            uint64_t v18 = v14 + 1;
            uint64_t v7 = v13 - (v14 + 1);
          }
          while (v7 >= v12);
          double v14 = v13;
LABEL_29:
          float v4 = v16;
          a2 = v23;
        }
        else
        {
          double v14 = &v8[v7];
        }
        if (v14 == v13) {
          uint64_t v15 = -1;
        }
        else {
          uint64_t v15 = v14 - v8;
        }
      }
      else
      {
        uint64_t v15 = 0;
      }
      BOOL v21 = v15 != -1;
      if (v9 < 0) {
        operator delete(v10);
      }
      if (v15 != -1) {
        break;
      }
      v5 += 24;
    }
    while (v5 != v4);
  }
  *(void *)&long long __dst = &v24;
  sub_1000A7B4C((void ***)&__dst);
  return v21;
}

void sub_100D0967C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15)
{
  sub_1000A7B4C(&a13);
  uint64_t v16 = 0;
  while (1)
  {
    if (*((char *)&a15 + v16 + 239) < 0) {
      operator delete(*(void **)((char *)&a15 + v16 + 216));
    }
    v16 -= 24;
    if (v16 == -240) {
      _Unwind_Resume(a1);
    }
  }
}

void sub_100D0970C(uint64_t a1, void *a2)
{
  if (a2)
  {
    if ([a2 hasDepartureDate])
    {
      [objc_msgSend(a2, "departureDate") timeIntervalSinceReferenceDate];
      *(void *)(a1 + 400) = v4;
      *(void *)(a1 + 408) = 0xBFF0000000000000;
    }
    else
    {
      if (![a2 hasArrivalDate]) {
        goto LABEL_21;
      }
      [objc_msgSend(a2, "arrivalDate") timeIntervalSinceReferenceDate];
      *(void *)(a1 + 408) = v7;
      if ([a2 _placeInference])
      {
        id v8 = [objc_msgSend(a2, "_placeInference") userType];
        if (objc_msgSend(objc_msgSend(a2, "_placeInference"), "userType")
          || !objc_msgSend(objc_msgSend(a2, "_placeInference"), "preferredName"))
        {
          LOBYTE(v9) = 0;
        }
        else
        {
          double v14 = sub_100134750(__p, (char *)[objc_msgSend(objc_msgSend(objc_msgSend(a2, "_placeInference"), "preferredName"), "UTF8String"]);
          BOOL v9 = !sub_100D09398((uint64_t)v14, (char *)__p);
          if (v18 < 0) {
            operator delete(__p[0]);
          }
        }
        if (v8) {
          char v10 = 1;
        }
        else {
          char v10 = v9;
        }
        *(unsigned char *)(a1 + 416) = v10;
        goto LABEL_21;
      }
    }
    *(unsigned char *)(a1 + 416) = 0;
LABEL_21:
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022F2B00);
    }
    int v11 = qword_102419278;
    if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = *(void *)(a1 + 400);
      uint64_t v13 = *(void *)(a1 + 408);
      *(_DWORD *)uint64_t buf = 134218498;
      uint64_t v26 = v12;
      __int16 v27 = 2048;
      uint64_t v28 = v13;
      __int16 v29 = 2112;
      __int16 v30 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "FitnessOutdoorAnalyticsAggregator, received leeched visit notification, fPrevLoiVisitEnd, %.2f, fCurrentLoiVisitStart, .%2f, visit, %@", buf, 0x20u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022F2B00);
    }
    uint64_t v15 = *(void *)(a1 + 400);
    uint64_t v16 = *(void *)(a1 + 408);
    int v19 = 134218498;
    uint64_t v20 = v15;
    __int16 v21 = 2048;
    uint64_t v22 = v16;
    __int16 v23 = 2112;
    int v24 = a2;
    long long v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFitnessOutdoorAnalyticsAggregator::feedLocationOfInterest(CLVisit * _Nullable)", "%s\n", v6);
LABEL_33:
    if (v6 != (char *)buf) {
      free(v6);
    }
    return;
  }
  if (qword_102419270 != -1) {
    dispatch_once(&qword_102419270, &stru_1022F2B00);
  }
  int v5 = qword_102419278;
  if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "FitnessOutdoorAnalyticsAggregator, #warning, Received null visit", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022F2B00);
    }
    LOWORD(v19) = 0;
    long long v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFitnessOutdoorAnalyticsAggregator::feedLocationOfInterest(CLVisit * _Nullable)", "%s\n", v6);
    goto LABEL_33;
  }
}

void sub_100D09AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D09B0C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 424) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 432) = *(_DWORD *)a2;
  if (qword_102419270 != -1) {
    dispatch_once(&qword_102419270, &stru_1022F2B00);
  }
  uint64_t v3 = qword_102419278;
  if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = *(void *)(a1 + 424);
    int v5 = *(_DWORD *)(a1 + 432);
    *(_DWORD *)uint64_t buf = 134218240;
    uint64_t v8 = v4;
    __int16 v9 = 1024;
    int v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "FitnessOutdoorAnalyticsAggregator, received maps route hint, iosTime, %f, routingType, %d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022F2B00);
    }
    long long v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFitnessOutdoorAnalyticsAggregator::feedMapsRouteHint(const CLMapsRouteHintData &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

uint64_t sub_100D09CF0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2 == 15)
  {
    uint64_t v3 = 0;
  }
  else
  {
    if (v2 != 13) {
      return result;
    }
    uint64_t v3 = *(void *)(a2 + 112);
  }
  *(void *)(result + 440) = v3;
  return result;
}

uint64_t sub_100D09D18(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(result + 456) = *(void *)(a2 + 16) == 2;
  *(unsigned char *)(result + 472) = (*(void *)(a2 + 40) & 0xFFFFFFFFFFFFFFFELL) == 2;
  return result;
}

NSDictionary *sub_100D09D40(uint64_t a1, int a2)
{
  uint64_t v4 = (int)sub_100C79414(*(double *)(a1 + 24));
  unsigned int v5 = (int)sub_100C79414(*(double *)(a1 + 32));
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 24;
  }
  v60[0] = @"startTime";
  v61[0] = +[NSNumber numberWithInt:v4];
  v60[1] = @"endTime";
  v61[1] = +[NSNumber numberWithInt:v6];
  _OWORD v60[2] = @"wearTime";
  v61[2] = +[NSNumber numberWithDouble:round(*(double *)(a1 + 232) / 60.0)];
  v60[3] = @"latitude";
  v61[3] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 388)];
  v60[4] = @"longitude";
  v61[4] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 392)];
  v60[5] = @"sunElevationAngleStart";
  float v7 = sub_100AFFA40(*(double *)(a1 + 24), (float)*(int *)(a1 + 388), (float)*(int *)(a1 + 392));
  v61[5] = +[NSNumber numberWithDouble:sub_10126D948(5u, v7)];
  v60[6] = @"sunElevationAngleEnd";
  float v8 = sub_100AFFA40(*(double *)(a1 + 32), (float)*(int *)(a1 + 388), (float)*(int *)(a1 + 392));
  v61[6] = +[NSNumber numberWithDouble:sub_10126D948(5u, v8)];
  v60[7] = @"precipitationType";
  __int16 v9 = (void *)(a1 + 656);
  if (*(char *)(a1 + 679) < 0) {
    __int16 v9 = (void *)*v9;
  }
  v61[7] = +[NSString stringWithUTF8String:v9];
  v60[8] = @"enabledAlwaysOnDisplay";
  v61[8] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 240)];
  int v10 = +[NSDictionary dictionaryWithObjects:v61 forKeys:v60 count:9];
  v58[0] = @"currentTemp";
  int v11 = sub_1009D0508(a1 + 560);
  v59[0] = +[NSNumber numberWithDouble:sub_10126D934((double)v11)];
  v58[1] = @"feelsLikeTemp";
  int v12 = sub_1009D0508(a1 + 608);
  v59[1] = +[NSNumber numberWithDouble:sub_10126D934((double)v12)];
  uint64_t v13 = +[NSDictionary dictionaryWithObjects:v59 forKeys:v58 count:2];
  v56[0] = @"outdoorTime";
  v57[0] = +[NSNumber numberWithDouble:round(*(double *)(a1 + 448) / 60.0)];
  v56[1] = @"daylightTime";
  v57[1] = +[NSNumber numberWithDouble:round(*(double *)(a1 + 464) / 60.0)];
  v56[2] = @"outdoorTimeWithIndoorPrior";
  v57[2] = +[NSNumber numberWithDouble:round(*(double *)(a1 + 480) / 60.0)];
  v56[3] = @"daylightTimeWithIndoorPrior";
  v57[3] = +[NSNumber numberWithDouble:round(*(double *)(a1 + 488) / 60.0)];
  v56[4] = @"outdoorTimeWithOutdoorPrior";
  v57[4] = +[NSNumber numberWithDouble:round(*(double *)(a1 + 512) / 60.0)];
  v56[5] = @"daylightTimeWithOutdoorPrior";
  v57[5] = +[NSNumber numberWithDouble:round(*(double *)(a1 + 520) / 60.0)];
  double v14 = +[NSDictionary dictionaryWithObjects:v57 forKeys:v56 count:6];
  v54[0] = @"timeLuxBin01";
  v55[0] = +[NSNumber numberWithInt:(*(_DWORD *)(*(void *)(a1 + 48) + 4) + **(_DWORD **)(a1 + 48))];
  v54[1] = @"timeLuxBin02";
  v55[1] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 48) + 8)];
  v54[2] = @"timeLuxBin03";
  v55[2] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 48) + 12)];
  v54[3] = @"timeLuxBin04";
  v55[3] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 48) + 16)];
  v54[4] = @"timeLuxBin05";
  v55[4] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 48) + 20)];
  v54[5] = @"timeLuxBin06";
  v55[5] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 48) + 24)];
  v54[6] = @"timeLuxBin07";
  v55[6] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 48) + 28)];
  v54[7] = @"timeLuxBin08";
  v55[7] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 48) + 32)];
  _OWORD v54[8] = @"timeLuxBin09";
  v55[8] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 48) + 36)];
  v54[9] = @"timeLuxBin10";
  v55[9] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 48) + 40)];
  v54[10] = @"timeLuxBin11";
  v55[10] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 48) + 44)];
  v54[11] = @"timeLuxBin12";
  v55[11] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 48) + 48)];
  v54[12] = @"timeLuxBin13";
  v55[12] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 48) + 52)];
  v54[13] = @"timeLuxBin14";
  v55[13] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 48) + 56)];
  v54[14] = @"timeLuxBin15";
  v55[14] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 48) + 60)];
  v54[15] = @"timeLuxBin16";
  v55[15] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 48) + 64)];
  uint64_t v15 = +[NSDictionary dictionaryWithObjects:v55 forKeys:v54 count:16];
  v52[0] = @"intervalOccludedAlsBin01";
  v53[0] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 144) + 4)];
  v52[1] = @"intervalOccludedAlsBin02";
  v53[1] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 144) + 8)];
  v52[2] = @"intervalOccludedAlsBin03";
  v53[2] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 144) + 12)];
  v52[3] = @"intervalOccludedAlsBin04";
  v53[3] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 144) + 16)];
  v52[4] = @"intervalOccludedAlsBin05";
  v53[4] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 144) + 20)];
  v52[5] = @"intervalOccludedAlsBin06";
  v53[5] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 144) + 24)];
  v52[6] = @"intervalOccludedAlsT2Bin01";
  v53[6] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 184) + 4)];
  v52[7] = @"intervalOccludedAlsT2Bin02";
  v53[7] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 184) + 8)];
  _OWORD v52[8] = @"intervalOccludedAlsT2Bin03";
  v53[8] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 184) + 12)];
  v52[9] = @"intervalOccludedAlsT2Bin04";
  v53[9] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 184) + 16)];
  v52[10] = @"intervalOccludedAlsT2Bin05";
  v53[10] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 184) + 20)];
  v52[11] = @"intervalOccludedAlsT2Bin06";
  v53[11] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 184) + 24)];
  uint64_t v16 = +[NSDictionary dictionaryWithObjects:v53 forKeys:v52 count:12];
  v50[0] = @"totalTimeWithIndoorPrior";
  v51[0] = +[NSNumber numberWithDouble:round(*(double *)(a1 + 496) / 60.0)];
  v50[1] = @"indoorPriorType";
  v51[1] = +[NSNumber numberWithUnsignedChar:*(unsigned __int8 *)(a1 + 474)];
  v50[2] = @"luxWithIndoorPriorBin01";
  v51[2] = +[NSNumber numberWithInt:(*(_DWORD *)(*(void *)(a1 + 72) + 4) + **(_DWORD **)(a1 + 72))];
  v50[3] = @"luxWithIndoorPriorBin02";
  v51[3] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 72) + 8)];
  v50[4] = @"luxWithIndoorPriorBin03";
  v51[4] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 72) + 12)];
  v50[5] = @"luxWithIndoorPriorBin04";
  v51[5] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 72) + 16)];
  v50[6] = @"luxWithIndoorPriorBin05";
  v51[6] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 72) + 20)];
  v50[7] = @"luxWithIndoorPriorBin06";
  v51[7] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 72) + 24)];
  v50[8] = @"luxWithIndoorPriorBin07";
  v51[8] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 72) + 28)];
  v50[9] = @"luxWithIndoorPriorBin08";
  v51[9] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 72) + 32)];
  v50[10] = @"luxWithIndoorPriorBin09";
  v51[10] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 72) + 36)];
  v50[11] = @"luxWithIndoorPriorBin10";
  v51[11] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 72) + 40)];
  v50[12] = @"luxWithIndoorPriorBin11";
  v51[12] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 72) + 44)];
  v50[13] = @"luxWithIndoorPriorBin12";
  v51[13] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 72) + 48)];
  v50[14] = @"luxWithIndoorPriorBin13";
  v51[14] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 72) + 52)];
  v50[15] = @"luxWithIndoorPriorBin14";
  v51[15] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 72) + 56)];
  v50[16] = @"luxWithIndoorPriorBin15";
  v51[16] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 72) + 60)];
  v50[17] = @"luxWithIndoorPriorBin16";
  v51[17] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 72) + 64)];
  int v17 = +[NSDictionary dictionaryWithObjects:v51 forKeys:v50 count:18];
  v48[0] = @"totalTimeWithOutdoorPrior";
  v49[0] = +[NSNumber numberWithDouble:round(*(double *)(a1 + 528) / 60.0)];
  v48[1] = @"outdoorPriorType";
  v49[1] = +[NSNumber numberWithUnsignedChar:*(unsigned __int8 *)(a1 + 505)];
  v48[2] = @"luxWithOutdoorPriorBin01";
  v49[2] = +[NSNumber numberWithInt:(*(_DWORD *)(*(void *)(a1 + 96) + 4) + **(_DWORD **)(a1 + 96))];
  v48[3] = @"luxWithOutdoorPriorBin02";
  v49[3] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 96) + 8)];
  v48[4] = @"luxWithOutdoorPriorBin03";
  v49[4] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 96) + 12)];
  v48[5] = @"luxWithOutdoorPriorBin04";
  v49[5] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 96) + 16)];
  v48[6] = @"luxWithOutdoorPriorBin05";
  v49[6] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 96) + 20)];
  v48[7] = @"luxWithOutdoorPriorBin06";
  v49[7] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 96) + 24)];
  v48[8] = @"luxWithOutdoorPriorBin07";
  v49[8] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 96) + 28)];
  v48[9] = @"luxWithOutdoorPriorBin08";
  v49[9] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 96) + 32)];
  v48[10] = @"luxWithOutdoorPriorBin09";
  v49[10] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 96) + 36)];
  v48[11] = @"luxWithOutdoorPriorBin10";
  v49[11] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 96) + 40)];
  v48[12] = @"luxWithOutdoorPriorBin11";
  v49[12] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 96) + 44)];
  v48[13] = @"luxWithOutdoorPriorBin12";
  v49[13] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 96) + 48)];
  v48[14] = @"luxWithOutdoorPriorBin13";
  v49[14] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 96) + 52)];
  v48[15] = @"luxWithOutdoorPriorBin14";
  v49[15] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 96) + 56)];
  v48[16] = @"luxWithOutdoorPriorBin15";
  v49[16] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 96) + 60)];
  v48[17] = @"luxWithOutdoorPriorBin16";
  v49[17] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 96) + 64)];
  int v41 = +[NSDictionary dictionaryWithObjects:v49 forKeys:v48 count:18];
  if ((*(unsigned char *)(a1 + 538) & 0x20) == 0
    || (double v18 = *(double *)(a1 + 424), v18 == -1.0)
    || *(double *)(a1 + 8) > v18 + 180.0
    || (unsigned int v19 = *(_DWORD *)(a1 + 432), v19 > 5))
  {
    unsigned int v20 = 0;
  }
  else
  {
    unsigned int v20 = (0x36u >> v19) & 1;
  }
  v46[0] = @"totalTimeWithVehiclePrior";
  v47[0] = +[NSNumber numberWithDouble:round(*(double *)(a1 + 544) / 60.0)];
  v46[1] = @"vehiclePriorType";
  v47[1] = +[NSNumber numberWithUnsignedChar:*(unsigned __int8 *)(a1 + 538)];
  v46[2] = @"mapsRouteType";
  if (v20) {
    uint64_t v21 = *(unsigned int *)(a1 + 432);
  }
  else {
    uint64_t v21 = 404;
  }
  v47[2] = +[NSNumber numberWithInt:v21];
  v46[3] = @"luxWithVehiclePriorBin01";
  float v47[3] = +[NSNumber numberWithInt:(*(_DWORD *)(*(void *)(a1 + 120) + 4) + **(_DWORD **)(a1 + 120))];
  v46[4] = @"luxWithVehiclePriorBin02";
  v47[4] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 120) + 8)];
  v46[5] = @"luxWithVehiclePriorBin03";
  v47[5] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 120) + 12)];
  v46[6] = @"luxWithVehiclePriorBin04";
  v47[6] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 120) + 16)];
  v46[7] = @"luxWithVehiclePriorBin05";
  v47[7] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 120) + 20)];
  v46[8] = @"luxWithVehiclePriorBin06";
  v47[8] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 120) + 24)];
  v46[9] = @"luxWithVehiclePriorBin07";
  v47[9] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 120) + 28)];
  v46[10] = @"luxWithVehiclePriorBin08";
  v47[10] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 120) + 32)];
  v46[11] = @"luxWithVehiclePriorBin09";
  v47[11] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 120) + 36)];
  v46[12] = @"luxWithVehiclePriorBin10";
  v47[12] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 120) + 40)];
  v46[13] = @"luxWithVehiclePriorBin11";
  v47[13] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 120) + 44)];
  v46[14] = @"luxWithVehiclePriorBin12";
  v47[14] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 120) + 48)];
  v46[15] = @"luxWithVehiclePriorBin13";
  v47[15] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 120) + 52)];
  v46[16] = @"luxWithVehiclePriorBin14";
  v47[16] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 120) + 56)];
  v46[17] = @"luxWithVehiclePriorBin15";
  v47[17] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 120) + 60)];
  v46[18] = @"luxWithVehiclePriorBin16";
  v47[18] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 120) + 64)];
  uint64_t v22 = +[NSDictionary dictionaryWithObjects:v47 forKeys:v46 count:19];
  v44[0] = @"basic";
  v44[1] = @"weatherExtended";
  v45[0] = v10;
  v45[1] = v13;
  v44[2] = @"algoEstimates";
  v44[3] = @"overallLux";
  v45[2] = v14;
  v45[3] = v15;
  v44[4] = @"alsOcclusion";
  v44[5] = @"indoorPrior";
  v45[4] = v16;
  v45[5] = v17;
  v44[6] = @"outdoorPrior";
  v44[7] = @"vehiclePrior";
  v45[6] = v41;
  v45[7] = v22;
  __int16 v23 = +[NSDictionary dictionaryWithObjects:v45 forKeys:v44 count:8];
  if (a2)
  {
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022F2B00);
    }
    int v24 = qword_102419278;
    if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 138477827;
      BOOL v43 = v10;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "FitnessOutdoorAnalyticsAggregator, event basic info, %{private}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419270 != -1) {
        dispatch_once(&qword_102419270, &stru_1022F2B00);
      }
      double v33 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "NSDictionary *CLFitnessOutdoorAnalyticsAggregator::getCoreAnalyticsEventDictionaryNested(BOOL) const", "%s\n", v33);
      if (v33 != (char *)buf) {
        free(v33);
      }
    }
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022F2B00);
    }
    unsigned int v25 = qword_102419278;
    if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 138477827;
      BOOL v43 = v13;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "FitnessOutdoorAnalyticsAggregator, event weather extended info, %{private}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419270 != -1) {
        dispatch_once(&qword_102419270, &stru_1022F2B00);
      }
      __int16 v34 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "NSDictionary *CLFitnessOutdoorAnalyticsAggregator::getCoreAnalyticsEventDictionaryNested(BOOL) const", "%s\n", v34);
      if (v34 != (char *)buf) {
        free(v34);
      }
    }
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022F2B00);
    }
    uint64_t v26 = qword_102419278;
    if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 138477827;
      BOOL v43 = v14;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "FitnessOutdoorAnalyticsAggregator, event algorithm estimate info, %{private}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419270 != -1) {
        dispatch_once(&qword_102419270, &stru_1022F2B00);
      }
      double v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "NSDictionary *CLFitnessOutdoorAnalyticsAggregator::getCoreAnalyticsEventDictionaryNested(BOOL) const", "%s\n", v35);
      if (v35 != (char *)buf) {
        free(v35);
      }
    }
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022F2B00);
    }
    __int16 v27 = qword_102419278;
    if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 138477827;
      BOOL v43 = v15;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "FitnessOutdoorAnalyticsAggregator, event overall lux info, %{private}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419270 != -1) {
        dispatch_once(&qword_102419270, &stru_1022F2B00);
      }
      __int16 v36 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "NSDictionary *CLFitnessOutdoorAnalyticsAggregator::getCoreAnalyticsEventDictionaryNested(BOOL) const", "%s\n", v36);
      if (v36 != (char *)buf) {
        free(v36);
      }
    }
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022F2B00);
    }
    uint64_t v28 = qword_102419278;
    if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 138477827;
      BOOL v43 = v16;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "FitnessOutdoorAnalyticsAggregator, event als occlusion info, %{private}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419270 != -1) {
        dispatch_once(&qword_102419270, &stru_1022F2B00);
      }
      uint64_t v37 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "NSDictionary *CLFitnessOutdoorAnalyticsAggregator::getCoreAnalyticsEventDictionaryNested(BOOL) const", "%s\n", v37);
      if (v37 != (char *)buf) {
        free(v37);
      }
    }
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022F2B00);
    }
    __int16 v29 = qword_102419278;
    if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 138477827;
      BOOL v43 = v17;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "FitnessOutdoorAnalyticsAggregator, event indoorPrior info, %{private}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419270 != -1) {
        dispatch_once(&qword_102419270, &stru_1022F2B00);
      }
      __int16 v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "NSDictionary *CLFitnessOutdoorAnalyticsAggregator::getCoreAnalyticsEventDictionaryNested(BOOL) const", "%s\n", v38);
      if (v38 != (char *)buf) {
        free(v38);
      }
    }
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022F2B00);
    }
    __int16 v30 = qword_102419278;
    if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 138477827;
      BOOL v43 = v41;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "FitnessOutdoorAnalyticsAggregator, event outdoorPrior info, %{private}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419270 != -1) {
        dispatch_once(&qword_102419270, &stru_1022F2B00);
      }
      long long v39 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "NSDictionary *CLFitnessOutdoorAnalyticsAggregator::getCoreAnalyticsEventDictionaryNested(BOOL) const", "%s\n", v39);
      if (v39 != (char *)buf) {
        free(v39);
      }
    }
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022F2B00);
    }
    double v31 = qword_102419278;
    if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 138477827;
      BOOL v43 = v22;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "FitnessOutdoorAnalyticsAggregator, event vehiclePrior info, %{private}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419270 != -1) {
        dispatch_once(&qword_102419270, &stru_1022F2B00);
      }
      __int16 v40 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "NSDictionary *CLFitnessOutdoorAnalyticsAggregator::getCoreAnalyticsEventDictionaryNested(BOOL) const", "%s\n", v40);
      if (v40 != (char *)buf) {
        free(v40);
      }
    }
  }
  return v23;
}

id sub_100D0B6E8(uint64_t a1, int a2, NSDictionary *a3)
{
  uint64_t v3 = a3;
  if (!a3) {
    uint64_t v3 = sub_100D09D40(a1, a2);
  }
  id v4 = +[NSMutableDictionary dictionary];
  [v4 addEntriesFromDictionary:-[NSDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"basic")];
  [v4 addEntriesFromDictionary:-[NSDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"weatherExtended")];
  [v4 addEntriesFromDictionary:-[NSDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"algoEstimates")];
  [v4 addEntriesFromDictionary:-[NSDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"overallLux")];
  [v4 addEntriesFromDictionary:-[NSDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"alsOcclusion")];
  [v4 addEntriesFromDictionary:-[NSDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"indoorPrior")];
  [v4 addEntriesFromDictionary:-[NSDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"outdoorPrior")];
  return v4;
}

id sub_100D0B7EC(uint64_t a1, int a2, NSDictionary *a3)
{
  uint64_t v3 = a3;
  if (!a3) {
    uint64_t v3 = sub_100D09D40(a1, a2);
  }
  id v4 = +[NSMutableDictionary dictionary];
  [v4 addEntriesFromDictionary:-[NSDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"basic")];
  [v4 addEntriesFromDictionary:-[NSDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"indoorPrior")];
  return v4;
}

id sub_100D0B864(uint64_t a1, int a2, NSDictionary *a3)
{
  uint64_t v3 = a3;
  if (!a3) {
    uint64_t v3 = sub_100D09D40(a1, a2);
  }
  id v4 = +[NSMutableDictionary dictionary];
  [v4 addEntriesFromDictionary:-[NSDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"basic")];
  [v4 addEntriesFromDictionary:-[NSDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"vehiclePrior")];
  return v4;
}

id sub_100D0B8DC()
{
  id result = (id)objc_opt_class();
  if (result)
  {
    id v1 = +[MCProfileConnection sharedConnection];
    return [v1 isHealthDataSubmissionAllowed];
  }
  return result;
}

uint64_t sub_100D0B92C(uint64_t a1, void *a2)
{
  if (qword_102419270 != -1) {
    dispatch_once(&qword_102419270, &stru_1022F2B00);
  }
  uint64_t v3 = qword_102419278;
  if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109376;
    unsigned int v7 = [[a2 objectForKey:@"startTime"] intValue];
    __int16 v8 = 1024;
    unsigned int v9 = [[a2 objectForKey:@"endTime"] intValue];
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "FitnessOutdoorAnalyticsAggregator, sending FitnessOutdoor2 analytics, startTime, %d, endTime, %d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022F2B00);
    }
    [objc_msgSend(a2, "objectForKey:", @"startTime") intValue];
    [objc_msgSend(a2, "objectForKey:", @"endTime") intValue];
    unsigned int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFitnessOutdoorAnalyticsAggregator::sendAnalyticsFitnessOutdoor(NSDictionary * _Nonnull) const", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return AnalyticsSendEventLazy();
}

uint64_t sub_100D0BBA4(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_100D0BBAC(uint64_t a1, void *a2)
{
  if (qword_102419270 != -1) {
    dispatch_once(&qword_102419270, &stru_1022F2B00);
  }
  uint64_t v3 = qword_102419278;
  if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109376;
    unsigned int v7 = [[a2 objectForKey:@"startTime"] intValue];
    __int16 v8 = 1024;
    unsigned int v9 = [[objc_msgSend(a2, "objectForKey:", @"endTime") intValue];
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "FitnessOutdoorAnalyticsAggregator, sending AmbientLight.Indoor analytics, startTime, %d, endTime, %d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022F2B00);
    }
    [objc_msgSend(a2, "objectForKey:", @"startTime") intValue];
    [objc_msgSend(a2, "objectForKey:", @"endTime") intValue];
    unsigned int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFitnessOutdoorAnalyticsAggregator::sendAnalyticsAmbientLightIndoor(NSDictionary * _Nonnull) const", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return AnalyticsSendEventLazy();
}

uint64_t sub_100D0BE24(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_100D0BE2C(uint64_t a1, void *a2)
{
  if (qword_102419270 != -1) {
    dispatch_once(&qword_102419270, &stru_1022F2B00);
  }
  uint64_t v3 = qword_102419278;
  if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109376;
    unsigned int v7 = [[a2 objectForKey:@"startTime"] intValue];
    __int16 v8 = 1024;
    unsigned int v9 = [[a2 objectForKey:@"endTime"] intValue];
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "FitnessOutdoorAnalyticsAggregator, sending AmbientLight.Vehicle analytics, startTime, %d, endTime, %d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022F2B00);
    }
    [objc_msgSend(a2, "objectForKey:", @"startTime") intValue];
    [objc_msgSend(a2, "objectForKey:", @"endTime") intValue];
    unsigned int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFitnessOutdoorAnalyticsAggregator::sendAnalyticsAmbientLightVehicle(NSDictionary * _Nonnull) const", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return AnalyticsSendEventLazy();
}

uint64_t sub_100D0C0A4(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

BOOL sub_100D0C0AC(uint64_t a1)
{
  double v2 = *(double *)(a1 + 24);
  double v3 = sub_100C79414(v2);
  double v4 = sub_100C79414(*(double *)(a1 + 32));
  if (v4 < v3) {
    double v4 = v3 + 24.0;
  }
  if (!*(unsigned char *)(a1 + 705)) {
    return 1;
  }
  int v5 = 2 * ((int)vcvtmd_s64_f64(v2 / 86400.0) % 6);
  if (v3 <= (double)v5 && v4 > (double)v5) {
    return 1;
  }
  double v7 = (double)(v5 + 12);
  return v4 > v7 && v3 <= v7;
}

void sub_100D0C174(uint64_t a1)
{
  sub_100D0C1DC(a1);

  operator delete();
}

void sub_100D0C1AC(id a1)
{
  qword_102419278 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fitness");
}

uint64_t sub_100D0C1DC(uint64_t a1)
{
  *(void *)a1 = off_1022F2AC0;
  if (*(char *)(a1 + 679) < 0) {
    operator delete(*(void **)(a1 + 656));
  }
  double v2 = *(void **)(a1 + 632);
  if (v2)
  {
    *(void *)(a1 + 640) = v2;
    operator delete(v2);
  }
  double v3 = *(void **)(a1 + 584);
  if (v3)
  {
    *(void *)(a1 + 592) = v3;
    operator delete(v3);
  }
  double v4 = *(void **)(a1 + 184);
  if (v4)
  {
    *(void *)(a1 + 192) = v4;
    operator delete(v4);
  }
  int v5 = *(void **)(a1 + 144);
  if (v5)
  {
    *(void *)(a1 + 152) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 120);
  if (v6)
  {
    *(void *)(a1 + 128) = v6;
    operator delete(v6);
  }
  double v7 = *(void **)(a1 + 96);
  if (v7)
  {
    *(void *)(a1 + 104) = v7;
    operator delete(v7);
  }
  __int16 v8 = *(void **)(a1 + 72);
  if (v8)
  {
    *(void *)(a1 + 80) = v8;
    operator delete(v8);
  }
  unsigned int v9 = *(void **)(a1 + 48);
  if (v9)
  {
    *(void *)(a1 + 56) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v10) {
    sub_100D0C344(a1 + 16, v10);
  }
  return a1;
}

void *sub_100D0C2C0(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10017C6FC(a1, a2);
    uint64_t v6 = (_DWORD *)a1[1];
    double v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_100D0C328(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D0C344(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    double v2 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v2;
      operator delete(v2);
    }
    operator delete();
  }
}

uint64_t sub_100D0C3A0()
{
  qword_1024810D0 = 0;
  qword_1024810D8 = 0;
  qword_1024810E0 = 0;
  uint64_t v0 = operator new(0x44uLL);
  qword_1024810D8 = (uint64_t)(v0 + 17);
  qword_1024810E0 = (uint64_t)(v0 + 17);
  v0[16] = 1193033728;
  *(_OWORD *)uint64_t v0 = xmmword_101D8BFB8;
  *((_OWORD *)v0 + 1) = unk_101D8BFC8;
  *((_OWORD *)v0 + 2) = xmmword_101D8BFD8;
  *((_OWORD *)v0 + 3) = unk_101D8BFE8;
  qword_1024810D0 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_1003B1838, &qword_1024810D0, (void *)&_mh_execute_header);
  qword_1024810F0 = 0;
  unk_1024810F8 = 0;
  qword_1024810E8 = 0;
  uint64_t v1 = operator new(0x18uLL);
  qword_1024810F0 = (uint64_t)(v1 + 3);
  unk_1024810F8 = v1 + 3;
  *(_OWORD *)uint64_t v1 = xmmword_101D8BFFC;
  _DWORD v1[2] = 0x4270000041F00000;
  qword_1024810E8 = (uint64_t)v1;

  return __cxa_atexit((void (*)(void *))sub_1003B1838, &qword_1024810E8, (void *)&_mh_execute_header);
}

uint64_t sub_100D0C48C(uint64_t a1, double a2, double a3, double a4, double a5)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a5;
  *(double *)(a1 + 16) = a3;
  *(double *)(a1 + 24) = 1.0 - a3;
  *(double *)(a1 + 32) = a4;
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  bzero((void *)(a1 + 40), 0x18uLL);
  bzero((void *)(a1 + 64), 0x18uLL);
  bzero((void *)(a1 + 104), 0x18uLL);
  return a1;
}

uint64_t sub_100D0C4F4(uint64_t a1, float *a2, double *a3, float32x2_t *a4)
{
  double v6 = *(double *)(a1 + 96);
  double v7 = *a2;
  if (v6 <= 0.0)
  {
    double v11 = a2[1];
    *(double *)(a1 + 40) = v7;
    *(double *)(a1 + 48) = v11;
    double v13 = a2[2];
    *(double *)(a1 + 56) = v13;
    double v15 = 0.02;
    double v14 = v13;
    double v12 = v11;
    double v10 = v7;
  }
  else
  {
    double v9 = *(double *)(a1 + 16);
    double v8 = *(double *)(a1 + 24);
    double v10 = v9 * v7 + *(double *)(a1 + 40) * v8;
    double v11 = a2[1];
    double v12 = v9 * v11 + *(double *)(a1 + 48) * v8;
    *(double *)(a1 + 40) = v10;
    *(double *)(a1 + 48) = v12;
    double v13 = a2[2];
    double v14 = v9 * v13 + *(double *)(a1 + 56) * v8;
    *(double *)(a1 + 56) = v14;
    double v15 = *a3 - v6;
  }
  double v16 = *(double *)(a1 + 120);
  double v17 = *(double *)(a1 + 112) + v11;
  *(double *)(a1 + 104) = *(double *)(a1 + 104) + v7;
  *(double *)(a1 + 112) = v17;
  *(double *)(a1 + 120) = v16 + v13;
  ++*(_DWORD *)(a1 + 128);
  double v18 = (void *)(a1 + 64);
  double v19 = *(double *)(a1 + 64) + (v7 - v10) * v15;
  *(double *)(a1 + 64) = v19;
  double v20 = *(double *)(a1 + 72) + (v11 - v12) * v15;
  double v21 = *(double *)(a1 + 80) + (v13 - v14) * v15;
  *(double *)(a1 + 72) = v20;
  *(double *)(a1 + 80) = v21;
  double v22 = *a3;
  *(double *)(a1 + 96) = *a3;
  double v23 = *a3 - *(double *)(a1 + 88);
  if (v23 <= *(double *)(a1 + 8) && v22 > 0.0) {
    return 0;
  }
  double v24 = *(double *)(a1 + 32);
  double v25 = fabs(v20);
  double v26 = fabs(v21);
  BOOL v27 = fabs(v19) <= v24 && v25 <= v24;
  BOOL v28 = v27 && v26 <= v24;
  if (v28 && v23 <= *(double *)a1) {
    return 0;
  }
  *(double *)(a1 + 88) = *a3;
  bzero(v18, 0x18uLL);
  int v29 = *(_DWORD *)(a1 + 128);
  *a4 = vcvt_f32_f64(vdivq_f64(*(float64x2_t *)(a1 + 104), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v29), 0)));
  float32_t v30 = *(double *)(a1 + 120) / (double)v29;
  a4[1].f32[0] = v30;
  bzero((void *)(a1 + 104), 0x18uLL);
  *(_DWORD *)(a1 + 128) = 0;
  return 1;
}

id sub_100D0C6A8(uint64_t a1)
{
  id result = [*(id *)(a1 + 24) setObject:&off_102393368 forKeyedSubscript:@"StartDND"];
  if (!*(unsigned char *)(a1 + 32))
  {
    *(unsigned char *)(a1 + 32) = 1;
    double v3 = *(void **)(a1 + 24);
    return [v3 setObject:&off_102393368 forKeyedSubscript:@"DNDTriggered"];
  }
  return result;
}

id sub_100D0C720(uint64_t a1)
{
  id result = [*(id *)(a1 + 24) setObject:&off_102393368 forKeyedSubscript:@"StartDWR"];
  if (!*(unsigned char *)(a1 + 33))
  {
    *(unsigned char *)(a1 + 33) = 1;
    double v3 = *(void **)(a1 + 24);
    return [v3 setObject:&off_102393368 forKeyedSubscript:@"DWRTriggered"];
  }
  return result;
}

id sub_100D0C798(uint64_t a1)
{
  id result = [*(id *)(a1 + 24) setObject:&off_102393368 forKeyedSubscript:@"TransitionDND"];
  if (!*(unsigned char *)(a1 + 32))
  {
    *(unsigned char *)(a1 + 32) = 1;
    double v3 = *(void **)(a1 + 24);
    return [v3 setObject:&off_102393368 forKeyedSubscript:@"DNDTriggered"];
  }
  return result;
}

id sub_100D0C810(uint64_t a1)
{
  id result = [*(id *)(a1 + 24) setObject:&off_102393368 forKeyedSubscript:@"TransitionDWR"];
  if (!*(unsigned char *)(a1 + 33))
  {
    *(unsigned char *)(a1 + 33) = 1;
    double v3 = *(void **)(a1 + 24);
    return [v3 setObject:&off_102393368 forKeyedSubscript:@"DWRTriggered"];
  }
  return result;
}

id sub_100D0C890(uint64_t a1)
{
  return [*(id *)(a1 + 24) removeAllObjects];
}

id sub_100D0C898(uint64_t a1)
{
  return [*(id *)(a1 + 24) removeAllObjects];
}

id sub_100D0C8A0(uint64_t a1)
{
  return [*(id *)(a1 + 24) removeAllObjects];
}

uint64_t sub_100D0C8A8(uint64_t a1)
{
  *(void *)a1 = &unk_1022F2B20;
  *(void *)(a1 + 8) = 9;
  *(_WORD *)(a1 + 16) = 512;
  *(_WORD *)(a1 + 32) = 0;
  *(void *)(a1 + 24) = objc_opt_new();
  return a1;
}

uint64_t sub_100D0C8F8(uint64_t a1)
{
  return a1;
}

id sub_100D0C928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  [*(id *)(a1 + 24) removeAllObjects];
  [*(id *)(a1 + 24) setObject:+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a4) forKeyedSubscript:@"VehicularHints"];
  [*(id *)(a1 + 24) setObject:+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a2) forKeyedSubscript:@"StateSourcesVehicle"];
  [*(id *)(a1 + 24) setObject:[+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a3)] forKeyedSubscript:@"StateSourcesOperator"];
  double v8 = +[NSNumber numberWithUnsignedInteger:a3 + 10 * a2];
  double v9 = *(void **)(a1 + 24);

  return [v9 setObject:v8 forKeyedSubscript:@"StateSourcesCompounded"];
}

id sub_100D0CA04(uint64_t a1)
{
  id result = [*(id *)(a1 + 24) count];
  if (result) {
    return *(id *)(a1 + 24);
  }
  return result;
}

id sub_100D0CA34(uint64_t a1)
{
  id result = [*(id *)(a1 + 24) setObject:&off_102393368 forKeyedSubscript:@"EndDND"];
  if (*(unsigned char *)(a1 + 33) || *(unsigned char *)(a1 + 32))
  {
    *(_WORD *)(a1 + 32) = 0;
    double v3 = *(void **)(a1 + 24);
    return [v3 setObject:&off_102393368 forKeyedSubscript:@"DNDDWRCleared"];
  }
  return result;
}

id sub_100D0CAB0(uint64_t a1)
{
  id result = [*(id *)(a1 + 24) setObject:&off_102393368 forKeyedSubscript:@"EndDWR"];
  if (*(unsigned char *)(a1 + 33) || *(unsigned char *)(a1 + 32))
  {
    *(_WORD *)(a1 + 32) = 0;
    double v3 = *(void **)(a1 + 24);
    return [v3 setObject:&off_102393368 forKeyedSubscript:@"DNDDWRCleared"];
  }
  return result;
}

uint64_t sub_100D0CB2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100D0C928(a1, a2, a3, a4);
  if (a2 != 2 || (a3 & 0xFFFFFFFFFFFFFFFDLL) != 0)
  {
    if (a2 == 2 && a3 == 1)
    {
      double v7 = &v12;
      uint64_t v8 = a1;
      int v9 = 2;
    }
    else
    {
      double v7 = &v11;
      uint64_t v8 = a1;
      int v9 = 3;
    }
  }
  else
  {
    double v7 = &v13;
    uint64_t v8 = a1;
    int v9 = 1;
  }
  return sub_1001A34E0(v8, v9, (uint64_t)v7);
}

void sub_100D0CC68(id a1)
{
  qword_102481118 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLCoarseCellTilesManagerSilo"];
}

uint64_t sub_100D0CD28(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100D0F1E0;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_102481128 != -1) {
    dispatch_once(&qword_102481128, block);
  }
  return qword_10248AAF0;
}

BOOL sub_100D0D178(uint64_t a1, unsigned int a2, uint64_t a3, double a4, double a5, double a6)
{
  unsigned int v38 = a2;
  sub_10014F674((uint64_t)&v35, &v38);
  std::string::assign(&v37, "");
  uint64_t v11 = sub_10015EF24(v35, (void *)(a1 + 216));
  sub_100146674((uint64_t)&v35, a3, a4, a5, *(double *)(v11 + 152), *(double *)(v11 + 160));
  BOOL v12 = sub_1001447B8((unsigned int *)&v35);
  if (v12)
  {
    uint64_t v13 = *(void *)(a1 + 176);
    long long v32 = v35;
    uint64_t v33 = v36;
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      sub_1000DC48C(&__p, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v37;
    }
    int v16 = sub_1001468F8(v13, (uint64_t)&v32, a6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    double v17 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v18 = v38;
      double v19 = sub_100147F50(v38);
      sub_100C094CC((uint64_t)&v35);
      double v20 = v39[23] >= 0 ? v39 : *(unsigned char **)v39;
      int v21 = *(_DWORD *)(a1 + 148);
      *(_DWORD *)uint64_t buf = 67241731;
      *(_DWORD *)int v48 = v18;
      *(_WORD *)&v48[4] = 2082;
      *(void *)&v48[6] = v19;
      *(_WORD *)&v48[14] = 2049;
      *(double *)&v48[16] = a4;
      __int16 v49 = 2049;
      *(double *)int v50 = a5;
      *(_WORD *)&v50[8] = 2081;
      __int16 v51 = v20;
      __int16 v52 = 1026;
      int v53 = v16;
      __int16 v54 = 1026;
      int v55 = v21;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "TileDl, requestDownload, type, %{public}d, %{public}s, location, %{private}14.8lf, %{private}14.8lf, id, %{private}s, updated, %{public}d, reachbility, %{public}d", buf, 0x3Cu);
      if ((v39[23] & 0x80000000) != 0) {
        operator delete(*(void **)v39);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F2E80);
      }
      unsigned int v25 = v38;
      double v26 = sub_100147F50(v38);
      sub_100C094CC((uint64_t)&v35);
      if (v31 >= 0) {
        BOOL v27 = &v30;
      }
      else {
        BOOL v27 = v30;
      }
      int v28 = *(_DWORD *)(a1 + 148);
      *(_DWORD *)long long v39 = 67241731;
      *(_DWORD *)&v39[4] = v25;
      *(_WORD *)&v39[8] = 2082;
      *(void *)&v39[10] = v26;
      *(_WORD *)&v39[18] = 2049;
      *(double *)&v39[20] = a4;
      __int16 v40 = 2049;
      *(double *)int v41 = a5;
      *(_WORD *)&v41[8] = 2081;
      __int16 v42 = v27;
      __int16 v43 = 1026;
      int v44 = v16;
      __int16 v45 = 1026;
      int v46 = v28;
      int v29 = (char *)_os_log_send_and_compose_impl();
      if (v31 < 0) {
        operator delete(v30);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCoarseCellTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, CFAbsoluteTime)", "%s\n", v29);
      if (v29 != (char *)buf) {
        free(v29);
      }
    }
    if (!v16) {
      goto LABEL_30;
    }
    int v22 = (*(uint64_t (**)(void))(**(void **)(a1 + 168) + 40))(*(void *)(a1 + 168));
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    double v23 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)int v48 = v22;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "@TileSched, coarsecell, set, %{public}d", buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_30;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    *(_DWORD *)long long v39 = 67240192;
    *(_DWORD *)&v39[4] = v22;
    double v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCoarseCellTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, CFAbsoluteTime)", "%s\n", v15);
LABEL_45:
    if (v15 != (char *)buf) {
      free(v15);
    }
    goto LABEL_30;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022F2E80);
  }
  double v14 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 134284545;
    *(double *)int v48 = a4;
    *(_WORD *)&v48[8] = 2049;
    *(double *)&v48[10] = a5;
    *(_WORD *)&void v48[18] = 1024;
    *(_DWORD *)&v48[20] = v35;
    __int16 v49 = 1024;
    *(_DWORD *)int v50 = DWORD1(v35);
    *(_WORD *)&v50[4] = 1024;
    *(_DWORD *)&v50[6] = DWORD2(v35);
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "@TileError, RequestID, ll, %{private}.3lf, %{private}.3lf, tid, %d, %d, %d", buf, 0x28u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    *(_DWORD *)long long v39 = 134284545;
    *(double *)&v39[4] = a4;
    *(_WORD *)&v39[12] = 2049;
    *(double *)&v39[14] = a5;
    *(_WORD *)&v39[22] = 1024;
    *(_DWORD *)&v39[24] = v35;
    __int16 v40 = 1024;
    *(_DWORD *)int v41 = DWORD1(v35);
    *(_WORD *)&v41[4] = 1024;
    *(_DWORD *)&v41[6] = DWORD2(v35);
    double v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCoarseCellTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, CFAbsoluteTime)", "%s\n", v15);
    goto LABEL_45;
  }
LABEL_30:
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  return v12;
}

void sub_100D0D840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D0D8A4(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = sub_100D0E164(a1, "CLCoarseCellTilesManager", a2);
  *(void *)uint64_t v7 = off_1022F2C28;
  *(void *)(v7 + 112) = off_1022F2D10;
  *(void *)(v7 + 120) = 0;
  *(void *)(v7 + 136) = 0x415EA6E000000000;
  uint64_t v8 = (uint64_t *)(v7 + 136);
  *(_WORD *)(v7 + 128) = 1;
  *(_DWORD *)(v7 + 148) = 0;
  *(_WORD *)(v7 + 152) = 0;
  *(_DWORD *)(v7 + 160) = 2;
  uint64_t v9 = *a3;
  *a3 = 0;
  *(void *)(v7 + 168) = v9;
  *(void *)(v7 + 176) = 0;
  sub_1011377A0((void *)(v7 + 184));
  sub_100FFB380((void *)(a1 + 192), *(void *)(a1 + 40));
  sub_1013182A0(a1 + 216);
  *(unsigned char *)(a1 + 240) = 0;
  sub_1000C7F88(&buf);
  sub_1000A699C(buf, "AncientTilesThreshold", v8);
  if (*((void *)&buf + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf + 1));
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022F2EA0);
  }
  double v10 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v11 = *v8;
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "TILE: fMaxTileDataAge, %.1lf", (uint8_t *)&buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F2EA0);
    }
    double v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLCoarseCellTilesManager::CLCoarseCellTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLICoarseCellTilesManagerExternal>, std::optional<CLTilesSetCollection>)", "%s\n", v15);
    if (v15 != (char *)&buf) {
      free(v15);
    }
  }
  *(unsigned char *)(a1 + 144) = (*(uint64_t (**)(void))(**(void **)(a1 + 168) + 32))(*(void *)(a1 + 168));
  sub_1000C7F88(&buf);
  sub_1000D2988(buf, "CellTilesActive", (BOOL *)(a1 + 144));
  if (*((void *)&buf + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf + 1));
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022F2E80);
  }
  BOOL v12 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    int v13 = *(unsigned __int8 *)(a1 + 144);
    LODWORD(buf) = 67240192;
    DWORD1(buf) = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "TileCoarse, isActive, %{public}d", (uint8_t *)&buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    int v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLCoarseCellTilesManager::CLCoarseCellTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLICoarseCellTilesManagerExternal>, std::optional<CLTilesSetCollection>)", "%s\n", v16);
    if (v16 != (char *)&buf) {
      free(v16);
    }
  }
  if (*(unsigned char *)(a4 + 24))
  {
    sub_1013182A4((long long *)(a1 + 216), (long long *)a4);
    sub_1000C7F88(&buf);
    sub_1000A699C(buf, "MTimeModificationPeriod", &qword_102477288);
    if (*((void *)&buf + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&buf + 1));
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F2EA0);
    }
    double v14 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = qword_102477288;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "TILE: MTimeModificationPeriod, %.1lf", (uint8_t *)&buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022F2EA0);
      }
      double v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLCoarseCellTilesManager::CLCoarseCellTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLICoarseCellTilesManagerExternal>, std::optional<CLTilesSetCollection>)", "%s\n", v17);
      if (v17 != (char *)&buf) {
        free(v17);
      }
    }
    if (_os_feature_enabled_impl()) {
      operator new();
    }
    operator new();
  }
  sub_100D0E210((uint64_t)&buf);
}

void sub_100D0E020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100D1A044((void ***)va);
  nullsub_1413(v5);
  uint64_t v7 = *v4;
  *double v4 = 0;
  if (v7) {
    sub_100D1A0FC((uint64_t)v4, v7);
  }
  uint64_t v8 = *(void *)(v3 + 168);
  *(void *)(v3 + 168) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *(void *)(v3 + 120);
  *(void *)(v3 + 120) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  sub_100D0EF0C(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_100D0E164(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_1022F2EF0;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_100D0E1F4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D0E210(uint64_t a1@<X8>)
{
  sub_100D0F250();
  if (byte_102481158[23] < 0) {
    sub_1000DC48C(&__dst, *(void **)byte_102481158, *(unint64_t *)&byte_102481158[8]);
  }
  else {
    std::string __dst = *(std::string *)byte_102481158;
  }
  sub_1000C7F88(buf);
  BOOL v2 = sub_1004D1284(*(uint64_t *)buf, "CellTilesServerUrl", &__dst);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022F2E80);
  }
  uint64_t v3 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    p_dst = &__dst;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long buf = 136380931;
    *(void *)&uint8_t buf[4] = p_dst;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&buf[14] = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "TILE: fDefaultCellTilesServerUrl, %{private}s, overridden, %{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    int v21 = &__dst;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v21 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long v35 = 136380931;
    *(void *)&v35[4] = v21;
    __int16 v36 = 1026;
    BOOL v37 = v2;
    int v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLTilesSetCollection CLCoarseCellTilesManager::initializeProductionTilesSetCollection()", "%s\n", v22);
    if (v22 != buf) {
      free(v22);
    }
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __dst.__r_.__value_.__l.__size_;
  }
  double v6 = v35;
  sub_1001110E4((uint64_t)v35, size + 5);
  if (v38 < 0) {
    double v6 = *(unsigned char **)v35;
  }
  if (size)
  {
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v7 = &__dst;
    }
    else {
      uint64_t v7 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    memmove(v6, v7, size);
  }
  strcpy(&v6[size], "/6/v1");
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v8 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v8 = __dst.__r_.__value_.__l.__size_;
  }
  uint64_t v9 = v29;
  sub_1001110E4((uint64_t)v29, v8 + 5);
  if (v30 < 0) {
    uint64_t v9 = (void **)v29[0];
  }
  if (v8)
  {
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      double v10 = &__dst;
    }
    else {
      double v10 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    memmove(v9, v10, v8);
  }
  strcpy((char *)v9 + v8, "/7/v1");
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v11 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v11 = __dst.__r_.__value_.__l.__size_;
  }
  BOOL v12 = v27;
  sub_1001110E4((uint64_t)v27, v11 + 5);
  if (v28 < 0) {
    BOOL v12 = (void **)v27[0];
  }
  if (v11)
  {
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v13 = &__dst;
    }
    else {
      int v13 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    memmove(v12, v13, v11);
  }
  strcpy((char *)v12 + v11, "/8/v1");
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v14 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v14 = __dst.__r_.__value_.__l.__size_;
  }
  double v15 = v25;
  sub_1001110E4((uint64_t)v25, v14 + 6);
  if (v26 < 0) {
    double v15 = (void **)v25[0];
  }
  if (v14)
  {
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v16 = &__dst;
    }
    else {
      int v16 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    memmove(v15, v16, v14);
  }
  strcpy((char *)v15 + v14, "/11/v1");
  sub_1013182A0(a1);
  sub_100D0F2F0();
  if (byte_102481147 >= 0) {
    double v17 = (const char *)&qword_102481130;
  }
  else {
    double v17 = (const char *)qword_102481130;
  }
  int v18 = mkdir(v17, 0x1C0u);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022F2EA0);
  }
  double v19 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_100D0F2F0();
    if (byte_102481147 >= 0) {
      double v20 = &qword_102481130;
    }
    else {
      double v20 = (uint64_t *)qword_102481130;
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v20;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v18;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "TILE: mkdir, %s, ret, %d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F2EA0);
    }
    sub_100D0F2F0();
    if (byte_102481147 >= 0) {
      double v23 = &qword_102481130;
    }
    else {
      double v23 = (uint64_t *)qword_102481130;
    }
    __p[0] = 136315394;
    *(void *)&__p[1] = v23;
    __int16 v33 = 1024;
    int v34 = v18;
    double v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLTilesSetCollection CLCoarseCellTilesManager::initializeProductionTilesSetCollection()", "%s\n", v24);
    if (v24 != buf) {
      free(v24);
    }
  }
  operator new();
}

void sub_100D0ED1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  _Unwind_Resume(a1);
}

id sub_100D0EE90(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a3 + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100D134C4;
  v5[3] = &unk_1022C7AC0;
  char v6 = a2;
  uint64_t v5[4] = a3;
  void v5[5] = a1;
  void v5[6] = a3;
  return [v3 async:v5];
}

uint64_t sub_100D0EF0C(uint64_t a1)
{
  *(void *)a1 = off_1022F2EF0;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_100D0EF90()
{
}

void sub_100D0F034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13)
{
  if (a12)
  {
    *(void *)(v13 - 24) = &a9;
    sub_100D1A044((void ***)(v13 - 24));
  }
  sub_101A8AA9C(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100D0F060(uint64_t a1)
{
  *(void *)a1 = off_1022F2C28;
  *(void *)(a1 + 112) = off_1022F2D10;
  sub_100D0F3E0(a1);
  char v6 = (void **)(a1 + 216);
  sub_100D1A044(&v6);
  nullsub_1413(a1 + 184);
  uint64_t v2 = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = 0;
  if (v2) {
    sub_100D1A0FC(a1 + 176, v2);
  }
  uint64_t v3 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return sub_100D0EF0C(a1);
}

uint64_t sub_100D0F164(uint64_t a1)
{
  return sub_100D0F060(a1 - 112);
}

void sub_100D0F16C(uint64_t a1)
{
  sub_100D0F060(a1);

  operator delete();
}

void sub_100D0F1A4(uint64_t a1)
{
  sub_100D0F060(a1 - 112);

  operator delete();
}

void sub_100D0F1E0()
{
}

void sub_100D0F22C()
{
}

long long *sub_100D0F250()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102481170, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102481170))
  {
    xmmword_102481158 = 0uLL;
    unk_102481168 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102481158, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102481170);
  }
  if (qword_102481178 != -1) {
    dispatch_once(&qword_102481178, &stru_1022F2D88);
  }
  return &xmmword_102481158;
}

uint64_t *sub_100D0F2F0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102481148, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102481148))
  {
    qword_102481130 = 0;
    qword_102481138 = 0;
    unk_102481140 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102481130, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102481148);
  }
  if (qword_102481150 != -1) {
    dispatch_once(&qword_102481150, &stru_1022F2D68);
  }
  return &qword_102481130;
}

uint64_t sub_100D0F390(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100D1A160(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100D0F3E0(uint64_t a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022F2EA0);
  }
  uint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TILE: CLCoarseCellTilesManager::shutdown", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F2EA0);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLCoarseCellTilesManager::shutdown()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_10112ED30(*(void *)(a1 + 176));
  uint64_t result = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_100D0F5AC(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  if (*a3)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    uint64_t v5 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *a3;
      *(_DWORD *)long long buf = 67240192;
      int v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "TileCoarse, unexpected, dataprotection, %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 == -1)
      {
LABEL_19:
        double v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
        return;
      }
LABEL_21:
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
      goto LABEL_19;
    }
  }
  else
  {
    double v9 = (*(double (**)(void))(**(void **)(a1 + 168) + 16))(*(void *)(a1 + 168));
    int v10 = *(unsigned __int8 *)(a1 + 128);
    char v11 = *a4 != 1;
    *(unsigned char *)(a1 + 128) = v11;
    sub_10112FC54(*(void *)(a1 + 176), v11);
    if (*(unsigned char *)(a1 + 128))
    {
      int v12 = 1;
    }
    else
    {
      sub_100D0F91C(a1, v9);
      int v12 = *(unsigned __int8 *)(a1 + 128);
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    uint64_t v13 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      int v14 = *(unsigned __int8 *)(a1 + 128);
      *(_DWORD *)long long buf = 67109376;
      int v17 = v14;
      __int16 v18 = 1024;
      BOOL v19 = v10 != v12;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "TileCoarse, kNotificationEncryptedDataAvailability, %d, changed, %d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 == -1) {
        goto LABEL_19;
      }
      goto LABEL_21;
    }
  }
}

void sub_100D0F91C(uint64_t a1, double a2)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022F2E80);
  }
  uint64_t v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(unsigned __int8 *)(a1 + 129);
    *(_DWORD *)long long buf = 67240192;
    int v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TileCoarse, listAvailableFilesAllTypes, indexed, %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    int v8 = *(unsigned __int8 *)(a1 + 129);
    int v13 = 67240192;
    int v14 = v8;
    double v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::listAvailableFilesAllTypes(CFAbsoluteTime)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  if (!*(unsigned char *)(a1 + 129))
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    _OWORD v12[2] = sub_100D11780;
    v12[3] = &unk_1022C9848;
    _DWORD v12[4] = a1;
    *(double *)&void v12[5] = a2;
    sub_100D11500(a1, (uint64_t)"indexTiles", (uint64_t)v12);
    *(unsigned char *)(a1 + 129) = 1;
    if (*(unsigned char *)(a1 + 240))
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F2E80);
      }
      int v6 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "TileCoarse, clear on index", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022F2E80);
        }
        LOWORD(v13) = 0;
        char v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::listAvailableFilesAllTypes(CFAbsoluteTime)", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
      sub_100D10750(a1);
      *(unsigned char *)(a1 + 240) = 0;
    }
    else
    {
      sub_100D11464(a1, a2);
    }
    sub_100D109D4(a1, a2);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    uint64_t v7 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TileCoarse, listAvailableFilesAllTypes, done", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F2E80);
      }
      LOWORD(v13) = 0;
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::listAvailableFilesAllTypes(CFAbsoluteTime)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

void sub_100D0FDCC(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  if (*a3 == 6)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    int v6 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
    {
      int v8 = *a4;
      int v7 = a4[1];
      *(_DWORD *)long long buf = 67240448;
      int v16 = v7;
      __int16 v17 = 1026;
      int v18 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "TileCoarse, kNotificationReachability, %{public}d, was, %{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F2E80);
      }
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    int v9 = a4[1];
    *(_DWORD *)(a1 + 148) = v9;
    sub_10112FA4C(*(void *)(a1 + 176), v9);
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    char v11 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = *a3;
      *(_DWORD *)long long buf = 67240192;
      int v16 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "TileCoarse, unexpected, status, %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F2E80);
      }
      int v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
  }
}

void sub_100D10108(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  (*(void (**)(void))(**(void **)(a1 + 168) + 16))(*(void *)(a1 + 168));
  int v8 = *a3;
  if (*a3 == 6)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    char v11 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "TileCoarse, #CacheDelete kNotificationSoftwareUpdateStorageRecovery", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F2E80);
      }
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  else
  {
    double v9 = v7;
    if (v8 != 4)
    {
      if (v8)
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022F2E80);
        }
        double v15 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          int v16 = *a3;
          *(_DWORD *)long long buf = 67240192;
          int v21 = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "TileCoarse, unexpected, status, %{public}d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022F2E80);
          }
          BOOL v19 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v19);
          if (v19 != (char *)buf) {
            free(v19);
          }
        }
      }
      else
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022F2E80);
        }
        int v10 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "TileCoarse, kNotificationReset", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022F2E80);
          }
          __int16 v17 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v17);
          if (v17 != (char *)buf) {
            free(v17);
          }
        }
        sub_100D10750(a1);
        sub_100D109D4(a1, v9);
        if (!*(unsigned char *)(a1 + 129)) {
          *(unsigned char *)(a1 + 240) = 1;
        }
        (*(void (**)(void))(**(void **)(a1 + 168) + 48))(*(void *)(a1 + 168));
      }
      return;
    }
    *(unsigned char *)(a1 + 152) = *(_DWORD *)(a4 + 188) == 1;
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    int v13 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
    {
      int v14 = *(unsigned __int8 *)(a1 + 152);
      *(_DWORD *)long long buf = 67240192;
      int v21 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "TileCoarse, kNotificationLocationServicesStatus, %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F2E80);
      }
      int v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    if (*(unsigned char *)(a1 + 152))
    {
      sub_100D109D4(a1, v9);
      return;
    }
  }
  sub_100D10750(a1);
  if (!*(unsigned char *)(a1 + 129)) {
    *(unsigned char *)(a1 + 240) = 1;
  }
}

id *sub_100D10750(uint64_t a1)
{
  sub_1000E1294((uint64_t *)v7, (uint64_t)"clearLocationInformationCoarseCell", 0);
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022F2E80);
  }
  uint64_t v2 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 136446210;
    char v11 = "clearLocationInformationCoarseCell";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TileCoarse, %{public}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    int v8 = 136446210;
    double v9 = "clearLocationInformationCoarseCell";
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::clearLocationInformation()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  uint64_t v3 = *(void *)(a1 + 120);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  sub_10112ED30(*(void *)(a1 + 176));
  sub_100FFB390(a1 + 192);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_100D16454;
  v6[3] = &unk_1022C1698;
  uint64_t v6[4] = a1;
  sub_100D11500(a1, (uint64_t)"clearLocationInformationCoarseCell", (uint64_t)v6);
  return sub_1000E1098(v7);
}

void sub_100D109B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

void sub_100D109D4(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 129) && *(unsigned char *)(a1 + 144))
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    _DWORD v9[2] = sub_100D134A4;
    v9[3] = &unk_1022C9848;
    v9[4] = a1;
    *(double *)&v9[5] = a2;
    sub_100D11500(a1, (uint64_t)"predownloadTiles (Coarse)", (uint64_t)v9);
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    uint64_t v3 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
    {
      int v4 = *(unsigned __int8 *)(a1 + 129);
      int v5 = *(unsigned __int8 *)(a1 + 144);
      *(_DWORD *)long long buf = 67240448;
      int v15 = v4;
      __int16 v16 = 1026;
      int v17 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "TileCoarse, skip predownload, fIndexedAvailableFiles, %{public}d, fIsActive, %{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F2E80);
      }
      int v6 = *(unsigned __int8 *)(a1 + 129);
      int v7 = *(unsigned __int8 *)(a1 + 144);
      int v10 = 67240448;
      int v11 = v6;
      __int16 v12 = 1026;
      int v13 = v7;
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::predownloadTiles(CFAbsoluteTime)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

void sub_100D10C1C(uint64_t a1, uint64_t a2, int *a3, char *a4)
{
  if (*a3 == 5)
  {
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 168) + 24))(*(void *)(a1 + 168)))
    {
      double v6 = (*(double (**)(void))(**(void **)(a1 + 168) + 16))(*(void *)(a1 + 168));
      *(unsigned char *)(a1 + 153) = *a4;
      sub_10112FC00(*(void *)(a1 + 176), *a4);
      if (*(unsigned char *)(a1 + 153))
      {
        sub_100D10EAC(a1, v6);
      }
    }
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    int v8 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *a3;
      *(_DWORD *)long long buf = 67240192;
      int v12 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "TileCoarse, unexpected, companion, %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F2E80);
      }
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

BOOL sub_100D10EAC(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 152) && sub_10112C4FC(*(void *)(a1 + 176)))
  {
    LODWORD(v33) = 13;
    sub_10014F674((uint64_t)&buf, &v33);
    uint64_t v4 = *(void *)(a1 + 176);
    uint64_t v5 = *(void *)(a1 + 120);
    int v15 = 0xFFFF;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    long long v18 = xmmword_101D1C320;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v19 = _Q0;
    long long v20 = _Q0;
    long long v21 = _Q0;
    int v22 = 0;
    uint64_t v25 = 0;
    unint64_t v23 = 0xBFF0000000000000;
    uint64_t v24 = 0;
    int v26 = 0;
    unint64_t v27 = 0xBFF0000000000000;
    int v28 = 0x7FFFFFFF;
    uint64_t v30 = 0;
    uint64_t v29 = 0;
    char v32 = 0;
    uint64_t v31 = 0;
    sub_10112C85C(v4, v5, (uint64_t)&v15, (uint64_t)&v33, a2);
    long long buf = v33;
    uint64_t v38 = v34;
    if (SHIBYTE(v40) < 0) {
      operator delete((void *)v39);
    }
    long long v39 = v35;
    uint64_t v40 = v36;
    BOOL v11 = sub_1001447B8((unsigned int *)&buf);
    if (SHIBYTE(v40) < 0) {
      operator delete((void *)v39);
    }
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    int v12 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "@TileDl, coarse, failed criteria", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F2E80);
      }
      LOWORD(v33) = 0;
      int v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCoarseCellTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v14);
      if (v14 != (char *)&buf) {
        free(v14);
      }
    }
    return 0;
  }
  return v11;
}

void sub_100D11144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a45 < 0) {
    operator delete(*(void **)(v45 + 72));
  }
  _Unwind_Resume(exception_object);
}

id sub_100D1116C(uint64_t a1)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022F2E80);
  }
  uint64_t v2 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "TileCoarse, Cleanup", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    __int16 v8 = 0;
    double v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::onCleanupAgedTiles()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  double v3 = (*(double (**)(void))(**(void **)(a1 + 168) + 16))(*(void *)(a1 + 168));
  uint64_t v4 = *(void **)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  id v7[2] = sub_100D11380;
  v7[3] = &unk_1022B8660;
  uint64_t v7[4] = a1;
  *(double *)&void v7[5] = v3;
  return [v4 async:v7];
}

void sub_100D11380(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_100D11464(v1, *(double *)(a1 + 40));
  uint64_t v2 = _NSConcreteStackBlock;
  uint64_t v3 = 3221225472;
  uint64_t v4 = sub_100D177B0;
  uint64_t v5 = &unk_1022C1698;
  uint64_t v6 = v1;
  sub_100D11500(v1, (uint64_t)"updateTileRelevancy", (uint64_t)&v2);
  uint64_t v2 = _NSConcreteStackBlock;
  uint64_t v3 = 3221225472;
  uint64_t v4 = sub_100D14D78;
  uint64_t v5 = &unk_1022C1698;
  uint64_t v6 = v1;
  sub_100D11500(v1, (uint64_t)"refreshTilesDataIfNeeded", (uint64_t)&v2);
}

uint64_t *sub_100D11464(uint64_t a1, double a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100D165A0;
  v5[3] = &unk_1022C9848;
  uint64_t v5[4] = a1;
  *(double *)&void v5[5] = a2;
  sub_100D11500(a1, (uint64_t)"deleteAgedTiles", (uint64_t)v5);
  return sub_10112E174(*(void *)(a1 + 176), a2);
}

void sub_100D11500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v13 = [[CLOSTransaction alloc] initWithDescription:"CLCoarseCellTilesManager::traverseAllTilesSets"];
  unsigned int v6 = 0;
  int v7 = (void *)(a1 + 216);
  while (v6 - 6 < 3 || v6 == 12)
  {
    uint64_t v9 = sub_10015EF24(v6, v7);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F2EA0);
    }
    int v10 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = v9 + 8;
      if (*(char *)(v9 + 31) < 0) {
        uint64_t v11 = *(void *)(v9 + 8);
      }
      *(_DWORD *)long long buf = 136315394;
      uint64_t v15 = a2;
      __int16 v16 = 2080;
      uint64_t v17 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "TILE: performing, sAction, %s, tilesSet, %s", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022F2EA0);
      }
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::traverseAllTilesSets(const char *, CLTileManagerTraverseTilesSetBlock)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, v9);
LABEL_16:
    ++v6;
  }
  if (v6 != 13) {
    goto LABEL_16;
  }
}

BOOL sub_100D11780(uint64_t a1, uint64_t a2)
{
  return sub_100D11790(*(void *)(a1 + 32), a2, *(double *)(a1 + 40));
}

BOOL sub_100D11790(uint64_t a1, uint64_t a2, double a3)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022F2E80);
  }
  uint64_t v5 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    std::string::size_type v6 = *(void *)(a2 + 32);
    if (*(char *)(a2 + 55) >= 0) {
      std::string::size_type v6 = a2 + 32;
    }
    std::string::size_type v7 = a2 + 8;
    if (*(char *)(a2 + 31) < 0) {
      std::string::size_type v7 = *(void *)(a2 + 8);
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v6;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "TileCoarse, indexTiles, rootDirectory, %{public}s, name, %{public}s", (uint8_t *)&buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    uint64_t v66 = *(void *)(a2 + 32);
    if (*(char *)(a2 + 55) >= 0) {
      uint64_t v66 = a2 + 32;
    }
    __darwin_ino64_t v67 = a2 + 8;
    if (*(char *)(a2 + 31) < 0) {
      __darwin_ino64_t v67 = *(void *)(a2 + 8);
    }
    v86.st_dev = 136446466;
    *(void *)&v86.st_mode = v66;
    WORD2(v86.st_ino) = 2082;
    *(__darwin_ino64_t *)((char *)&v86.st_ino + 6) = v67;
    char v68 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCoarseCellTilesManager::indexTiles(CLTilesSet &, CFAbsoluteTime)", "%s\n", (const char *)v68);
    if (v68 != &buf) {
      free(v68);
    }
  }
  if (*(char *)(a2 + 55) >= 0) {
    __int16 v8 = (const char *)(a2 + 32);
  }
  else {
    __int16 v8 = *(const char **)(a2 + 32);
  }
  uint64_t v9 = opendir(v8);
  sub_100D1277C(a1, 0, *(_DWORD *)(a2 + 4));
  if (!v9)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    uint64_t v64 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
      _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_ERROR, "TileCoarse, indexTiles, can't open dir, %{public}s, #CloneMe", (uint8_t *)&buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return v9 != 0;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    v86.st_dev = 136446210;
    *(void *)&v86.st_mode = v8;
    id v63 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCoarseCellTilesManager::indexTiles(CLTilesSet &, CFAbsoluteTime)", "%s\n", (const char *)v63);
    if (v63 == &buf) {
      return v9 != 0;
    }
LABEL_149:
    free(v63);
    return v9 != 0;
  }
  int v10 = readdir(v9);
  if (v10)
  {
    int v11 = 0;
    uint64_t v69 = a2 + 184;
    while (1)
    {
      sub_1002E9328(__dst, v10->d_name, v10->d_namlen);
      if (*(char *)(a2 + 55) >= 0) {
        size_t v12 = *(unsigned __int8 *)(a2 + 55);
      }
      else {
        size_t v12 = *(void *)(a2 + 40);
      }
      sub_1001110E4((uint64_t)&buf, v12 + 1);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_std::string buf = &buf;
      }
      else {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      if (v12)
      {
        if (*(char *)(a2 + 55) >= 0) {
          int v14 = (const void *)(a2 + 32);
        }
        else {
          int v14 = *(const void **)(a2 + 32);
        }
        memmove(p_buf, v14, v12);
      }
      *(_WORD *)((char *)&p_buf->__r_.__value_.__l.__data_ + v12) = 47;
      if ((v74 & 0x80u) == 0) {
        uint64_t v15 = __dst;
      }
      else {
        uint64_t v15 = (void **)__dst[0];
      }
      if ((v74 & 0x80u) == 0) {
        std::string::size_type v16 = v74;
      }
      else {
        std::string::size_type v16 = (std::string::size_type)__dst[1];
      }
      uint64_t v17 = std::string::append(&buf, (const std::string::value_type *)v15, v16);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      int64_t v72 = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F2E80);
      }
      long long v19 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
      {
        long long v20 = __p;
        if (v72 < 0) {
          long long v20 = (void **)__p[0];
        }
        int d_type = v10->d_type;
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v20;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = d_type;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "TileCoarse, indexTiles, absoluteFilename, '%{public}s', d_type, %{public}d", (uint8_t *)&buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022F2E80);
        }
        int v41 = __p;
        if (v72 < 0) {
          int v41 = (void **)__p[0];
        }
        int v42 = v10->d_type;
        v86.st_dev = 136446466;
        *(void *)&v86.st_mode = v41;
        WORD2(v86.st_ino) = 1026;
        *(_DWORD *)((char *)&v86.st_ino + 6) = v42;
        __int16 v43 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCoarseCellTilesManager::indexTiles(CLTilesSet &, CFAbsoluteTime)", "%s\n", (const char *)v43);
        if (v43 != &buf) {
          free(v43);
        }
      }
      if (v10->d_type != 8) {
        goto LABEL_77;
      }
      if (!sub_10125C7E4((uint64_t)__dst, (const void **)(a2 + 32))) {
        break;
      }
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F2E80);
      }
      ++v11;
      int v22 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
      {
        unint64_t v23 = __p;
        if (v72 < 0) {
          unint64_t v23 = (void **)__p[0];
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v11;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "TileCoarse, convert to class C, first unlock, %{public}s, files, %{public}d", (uint8_t *)&buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022F2E80);
        }
        int v44 = __p;
        if (v72 < 0) {
          int v44 = (void **)__p[0];
        }
        v86.st_dev = 136446466;
        *(void *)&v86.st_mode = v44;
        WORD2(v86.st_ino) = 1026;
        *(_DWORD *)((char *)&v86.st_ino + 6) = v11;
        uint64_t v45 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCoarseCellTilesManager::indexTiles(CLTilesSet &, CFAbsoluteTime)", "%s\n", (const char *)v45);
        if (v45 != &buf) {
          free(v45);
        }
      }
      if (v72 >= 0) {
        uint64_t v24 = __p;
      }
      else {
        uint64_t v24 = (void **)__p[0];
      }
      sub_10104CF0C((const char *)v24);
      if (v72 >= 0) {
        uint64_t v25 = __p;
      }
      else {
        uint64_t v25 = (void **)__p[0];
      }
      int v26 = stat((const char *)v25, &v86);
      if (!v26)
      {
        if (sub_100D12E7C(a1, *(_DWORD *)(a2 + 4), (char *)(a2 + 32), (std::string::value_type *)__dst, a3))
        {
          uint64_t v34 = v33;
          *(_OWORD *)long long v83 = *(_OWORD *)(v33 + 48);
          *(void *)&v83[16] = *(void *)(v33 + 64);
          if (*(char *)(v33 + 95) < 0)
          {
            sub_1000DC48C(&v84, *(void **)(v33 + 72), *(void *)(v33 + 80));
          }
          else
          {
            long long v84 = *(_OWORD *)(v33 + 72);
            uint64_t v85 = *(void *)(v33 + 88);
          }
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022F2E80);
          }
          long long v35 = (unsigned int *)(v34 + 48);
          uint64_t v36 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
          {
            BOOL v37 = sub_100147F50(*v35);
            double v38 = sub_10013DAC0((uint64_t)v83);
            double v39 = sub_10013DA9C((uint64_t)v83);
            uint64_t v40 = sub_10014D19C(v69);
            LODWORD(buf.__r_.__value_.__l.__data_) = 136446979;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v37;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2049;
            *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v38;
            HIWORD(buf.__r_.__value_.__r.__words[2]) = 2049;
            double v88 = v39;
            __int16 v89 = 2050;
            uint64_t v90 = v40;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "@TileList, %{public}s, add, llsw, %{private}.2lf, %{private}.2lf, index, size, %{public}lu", (uint8_t *)&buf, 0x2Au);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_1022F2E80);
            }
            __int16 v47 = sub_100147F50(*v35);
            double v48 = sub_10013DAC0((uint64_t)v83);
            double v49 = sub_10013DA9C((uint64_t)v83);
            uint64_t v50 = sub_10014D19C(v69);
            int v75 = 136446979;
            char v76 = v47;
            __int16 v77 = 2049;
            double v78 = v48;
            __int16 v79 = 2049;
            double v80 = v49;
            __int16 v81 = 2050;
            uint64_t v82 = v50;
            __int16 v51 = (std::string *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCoarseCellTilesManager::indexTiles(CLTilesSet &, CFAbsoluteTime)", "%s\n", (const char *)v51);
            if (v51 != &buf) {
              free(v51);
            }
          }
          if (SHIBYTE(v85) < 0) {
            operator delete((void *)v84);
          }
        }
        goto LABEL_77;
      }
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F2E80);
      }
      unint64_t v27 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
      {
        int v28 = __dst;
        if ((v74 & 0x80u) != 0) {
          int v28 = (void **)__dst[0];
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v28;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v26;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "TileCoarse, indexTiles, failed to stat file, %{public}s, ret, %{public}d, #CloneMe", (uint8_t *)&buf, 0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022F2E80);
        }
        uint64_t v29 = __dst;
        if ((v74 & 0x80u) != 0) {
          uint64_t v29 = (void **)__dst[0];
        }
        *(_DWORD *)long long v83 = 136446466;
        *(void *)&v83[4] = v29;
        *(_WORD *)&v83[12] = 1026;
        *(_DWORD *)&v83[14] = v26;
        uint64_t v30 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCoarseCellTilesManager::indexTiles(CLTilesSet &, CFAbsoluteTime)", "%s\n", (const char *)v30);
LABEL_111:
        if (v30 != &buf) {
          free(v30);
        }
      }
LABEL_77:
      if (SHIBYTE(v72) < 0) {
        operator delete(__p[0]);
      }
      if ((char)v74 < 0) {
        operator delete(__dst[0]);
      }
      int v10 = readdir(v9);
      if (!v10) {
        goto LABEL_117;
      }
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    uint64_t v31 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      char v32 = __dst;
      if ((v74 & 0x80u) != 0) {
        char v32 = (void **)__dst[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "TileCoarse, indexTiles, invalid filename  %{public}s", (uint8_t *)&buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_77;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    int v46 = __dst;
    if ((v74 & 0x80u) != 0) {
      int v46 = (void **)__dst[0];
    }
    v86.st_dev = 136446210;
    *(void *)&v86.st_mode = v46;
    uint64_t v30 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCoarseCellTilesManager::indexTiles(CLTilesSet &, CFAbsoluteTime)", "%s\n", (const char *)v30);
    goto LABEL_111;
  }
LABEL_117:
  closedir(v9);
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022F2E80);
  }
  __int16 v52 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a2 + 31) >= 0) {
      std::string::size_type v53 = a2 + 8;
    }
    else {
      std::string::size_type v53 = *(void *)(a2 + 8);
    }
    uint64_t v54 = sub_10014D19C(a2 + 184);
    uint64_t v55 = sub_1008B42D8(a2 + 184);
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v53;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v54;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
    double v88 = *(double *)&v55;
    _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_INFO, "TileCoarse, indexTiles, done, %{public}s, size, %{public}lu, unprotected, %{public}lu", (uint8_t *)&buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    uint64_t v58 = *(void *)(a2 + 8);
    uint64_t v57 = a2 + 8;
    uint64_t v56 = v58;
    uint64_t v59 = *(char *)(v57 + 23) >= 0 ? v57 : v56;
    uint64_t v60 = v57 + 176;
    uint64_t v61 = sub_10014D19C(v57 + 176);
    uint64_t v62 = sub_1008B42D8(v60);
    v86.st_dev = 136446722;
    *(void *)&v86.st_mode = v59;
    WORD2(v86.st_ino) = 2050;
    *(__darwin_ino64_t *)((char *)&v86.st_ino + 6) = v61;
    HIWORD(v86.st_gid) = 2050;
    *(void *)&v86.st_rdev = v62;
    id v63 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCoarseCellTilesManager::indexTiles(CLTilesSet &, CFAbsoluteTime)", "%s\n", (const char *)v63);
    if (v63 != &buf) {
      goto LABEL_149;
    }
  }
  return v9 != 0;
}

void sub_100D126EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a47 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_100D1277C(uint64_t a1, int a2, unsigned int a3)
{
  BOOL v3 = a3 - 6 < 3 || a3 == 12;
  if (v3)
  {
    v44[0] = _NSConcreteStackBlock;
    v44[1] = 3221225472;
    v44[2] = sub_100D16464;
    v44[3] = &unk_1022F2D28;
    unsigned int v45 = a3;
    v46[0] = mach_absolute_time();
    v46[1] = (uint64_t)v44;
    uint64_t v43 = sub_10015EF24(a3, (void *)(a1 + 216));
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    std::string::size_type v7 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = *(void *)(v43 + 8);
      int v9 = *(char *)(v43 + 31);
      uint64_t v10 = sub_10014D19C(v43 + 184);
      if (v9 >= 0) {
        uint64_t v11 = v43 + 8;
      }
      else {
        uint64_t v11 = v8;
      }
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v56 = (const char *)v11;
      __int16 v57 = 2050;
      double v58 = *(double *)&v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "TileCoarse, %{public}s, removeAllTiles, size, %{public}lu", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F2E80);
      }
      uint64_t v33 = *(void *)(v43 + 8);
      int v34 = *(char *)(v43 + 31);
      uint64_t v35 = sub_10014D19C(v43 + 184);
      if (v34 >= 0) {
        uint64_t v36 = v43 + 8;
      }
      else {
        uint64_t v36 = v33;
      }
      int v47 = 136446466;
      double v48 = (const char *)v36;
      __int16 v49 = 2050;
      double v50 = *(double *)&v35;
      BOOL v37 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::removeAllTiles(BOOL, CLTilesManager_Type::TileType)", "%s\n", v37);
      if (v37 != (char *)buf) {
        free(v37);
      }
    }
    uint64_t v12 = v43 + 184;
    int v13 = (void *)sub_1000D8908(v43 + 184);
    if (v13 != (void *)sub_1000B894C(v43 + 184))
    {
      do
      {
        if (a2)
        {
          uint64_t v14 = v13[10];
          sub_101048104(v14);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022F2E80);
          }
          uint64_t v15 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
          {
            std::string::size_type v16 = sub_100147F50(*(_DWORD *)(v14 + 48));
            double v17 = sub_10013DAC0(v14 + 48);
            double v18 = sub_10013DA9C(v14 + 48);
            uint64_t v19 = sub_10014D19C(v12);
            *(_DWORD *)std::string buf = 136446979;
            uint64_t v56 = v16;
            __int16 v57 = 2049;
            double v58 = v17;
            __int16 v59 = 2049;
            double v60 = v18;
            __int16 v61 = 2050;
            uint64_t v62 = v19;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "@TileList, %{public}s, delete, llsw, %{private}.2lf, %{private}.2lf, all, size, %{public}lu", buf, 0x2Au);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_1022F2E80);
            }
            unsigned int v23 = *(_DWORD *)(v14 + 48);
            uint64_t v22 = v14 + 48;
            uint64_t v24 = sub_100147F50(v23);
            double v25 = sub_10013DAC0(v22);
            double v26 = sub_10013DA9C(v22);
            uint64_t v27 = sub_10014D19C(v12);
            int v47 = 136446979;
            double v48 = v24;
            __int16 v49 = 2049;
            double v50 = v25;
            __int16 v51 = 2049;
            double v52 = v26;
            __int16 v53 = 2050;
            uint64_t v54 = v27;
            int v28 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::removeAllTiles(BOOL, CLTilesManager_Type::TileType)", "%s\n", v28);
            if (v28 != (char *)buf) {
              free(v28);
            }
          }
        }
        long long v20 = (void *)v13[1];
        if (v20)
        {
          do
          {
            long long v21 = v20;
            long long v20 = (void *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            long long v21 = (void *)v13[2];
            BOOL v3 = *v21 == (void)v13;
            int v13 = v21;
          }
          while (!v3);
        }
        int v13 = v21;
      }
      while (v21 != (void *)sub_1000B894C(v12));
    }
    sub_1008B42E0(v12);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    uint64_t v29 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
    {
      if (*(char *)(v43 + 31) >= 0) {
        uint64_t v30 = v43 + 8;
      }
      else {
        uint64_t v30 = *(void *)(v43 + 8);
      }
      uint64_t v31 = sub_10014D19C(v12);
      uint64_t v32 = sub_1008B42D8(v12);
      *(_DWORD *)std::string buf = 136446722;
      uint64_t v56 = (const char *)v30;
      __int16 v57 = 2050;
      double v58 = *(double *)&v31;
      __int16 v59 = 2050;
      double v60 = *(double *)&v32;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "TileCoarse, removeAllTiles, end, name, %{public}s, size, %{public}lu, unprot size, %{public}lu", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F2E80);
      }
      if (*(char *)(v43 + 31) >= 0) {
        uint64_t v38 = v43 + 8;
      }
      else {
        uint64_t v38 = *(void *)(v43 + 8);
      }
      uint64_t v39 = sub_10014D19C(v12);
      uint64_t v40 = sub_1008B42D8(v12);
      int v47 = 136446722;
      double v48 = (const char *)v38;
      __int16 v49 = 2050;
      double v50 = *(double *)&v39;
      __int16 v51 = 2050;
      double v52 = *(double *)&v40;
      int v41 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::removeAllTiles(BOOL, CLTilesManager_Type::TileType)", "%s\n", v41);
      if (v41 != (char *)buf) {
        free(v41);
      }
    }
    return sub_1000E0900(v46);
  }
  else
  {
    uint64_t result = (uint64_t *)sub_101A8AAE4();
    __break(1u);
  }
  return result;
}

void sub_100D12E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_1000E0900((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D12E7C(uint64_t a1, unsigned int a2, char *a3, std::string::value_type *a4, double a5)
{
  if (a2 - 6 >= 3 && a2 != 12)
  {
    sub_101A8AC50();
    __break(1u);
    goto LABEL_54;
  }
  std::string::size_type v6 = a4;
  std::string::size_type v7 = a3;
  unsigned int v5 = a2;
  uint64_t v10 = sub_10015EF24(a2, (void *)(a1 + 216));
  sub_10125C090(v5, &v39);
  if (v7[23] >= 0) {
    uint64_t v11 = v7;
  }
  else {
    uint64_t v11 = *(char **)v7;
  }
  if (v6[23] >= 0) {
    uint64_t v12 = v6;
  }
  else {
    uint64_t v12 = *(std::string::value_type **)v6;
  }
  if ((sub_10104A8A0(v39, v11, v12, v5, 1, a5) & 1) == 0)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    uint64_t v14 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = sub_100147F50(v5);
      if (v7[23] >= 0) {
        std::string::size_type v16 = v7;
      }
      else {
        std::string::size_type v16 = *(char **)v7;
      }
      if (v6[23] >= 0) {
        double v17 = v6;
      }
      else {
        double v17 = *(std::string::value_type **)v6;
      }
      *(_DWORD *)std::string buf = 136446722;
      double v52 = v15;
      __int16 v53 = 2082;
      double v54 = *(double *)&v16;
      __int16 v55 = 2082;
      double v56 = *(double *)&v17;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "@TileList, %{public}s, readerror, dir, %{public}s, file, %{public}s, #CloneMe", buf, 0x20u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_26;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 == -1)
    {
LABEL_42:
      uint64_t v30 = sub_100147F50(v5);
      if (v7[23] >= 0) {
        uint64_t v31 = v7;
      }
      else {
        uint64_t v31 = *(char **)v7;
      }
      if (v6[23] >= 0) {
        uint64_t v32 = v6;
      }
      else {
        uint64_t v32 = *(std::string::value_type **)v6;
      }
      *(_DWORD *)double v48 = 136446722;
      *(void *)&v48[4] = v30;
      *(_WORD *)&v48[12] = 2082;
      *(void *)&v48[14] = v31;
      *(_WORD *)&v48[22] = 2082;
      *(void *)&long long __p = v32;
      uint64_t v33 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "std::tuple<BOOL, CLTileFile *> CLCoarseCellTilesManager::createTileFileObject(CLTilesManager_Type::TileType, const std::string &, const std::string &, CFAbsoluteTime)", "%s\n", v33);
      if (v33 != (char *)buf) {
        free(v33);
      }
LABEL_26:
      uint64_t v18 = 0;
      goto LABEL_38;
    }
LABEL_54:
    dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    goto LABEL_42;
  }
  int v13 = v39;
  *(_OWORD *)double v48 = *((_OWORD *)v39 + 3);
  *(void *)&v48[16] = v39[8];
  if (*((char *)v39 + 95) < 0)
  {
    sub_1000DC48C(&__p, (void *)v39[9], v39[10]);
    int v13 = v39;
  }
  else
  {
    long long __p = *(_OWORD *)(v39 + 9);
    uint64_t v50 = v39[11];
  }
  sub_10125C938((uint64_t)v13, v10, (uint64_t)"lister");
  uint64_t v19 = v10 + 184;
  long long v20 = sub_1008B436C((uint64_t **)(v10 + 184), (unsigned int *)v48);
  long long v21 = v39;
  uint64_t v39 = 0;
  uint64_t v22 = *v20;
  uint64_t *v20 = (uint64_t)v21;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022F2E80);
  }
  unsigned int v23 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    uint64_t v24 = sub_100147F50(v5);
    double v25 = sub_10013DAC0((uint64_t)v48);
    double v26 = sub_10013DA9C((uint64_t)v48);
    uint64_t v27 = sub_10014D19C(v19);
    *(_DWORD *)std::string buf = 136446979;
    double v52 = v24;
    __int16 v53 = 2049;
    double v54 = v25;
    __int16 v55 = 2049;
    double v56 = v26;
    __int16 v57 = 2050;
    uint64_t v58 = v27;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "@TileList, %{public}s, create, llsw, %{private}.2lf, %{private}.2lf, size, %{public}lu", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    int v34 = sub_100147F50(v5);
    double v35 = sub_10013DAC0((uint64_t)v48);
    double v36 = sub_10013DA9C((uint64_t)v48);
    uint64_t v37 = sub_10014D19C(v19);
    int v40 = 136446979;
    int v41 = v34;
    __int16 v42 = 2049;
    double v43 = v35;
    __int16 v44 = 2049;
    double v45 = v36;
    __int16 v46 = 2050;
    uint64_t v47 = v37;
    uint64_t v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "std::tuple<BOOL, CLTileFile *> CLCoarseCellTilesManager::createTileFileObject(CLTilesManager_Type::TileType, const std::string &, const std::string &, CFAbsoluteTime)", "%s\n", v38);
    if (v38 != (char *)buf) {
      free(v38);
    }
  }
  sub_100144000(v19, (unsigned int *)v48);
  if (SHIBYTE(v50) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v18 = 1;
LABEL_38:
  int v28 = v39;
  uint64_t v39 = 0;
  if (v28) {
    (*(void (**)(uint64_t *))(*v28 + 8))(v28);
  }
  return v18;
}

void sub_100D13428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100D134A4(uint64_t a1, uint64_t a2)
{
  return sub_100D0D178(*(void *)(a1 + 32), *(_DWORD *)(a2 + 4), -1, 0.0, 0.0, *(double *)(a1 + 40));
}

id *sub_100D134C4(uint64_t a1)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022F2E80);
  }
  uint64_t v2 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(unsigned __int8 *)(a1 + 56);
    *(_DWORD *)std::string buf = 67240192;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TileDl, tileDownloadedCallback, success, %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    unsigned int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLCoarseCellTilesManager::tileDownloadCallback(CLFileDownload *, BOOL, void *)_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return sub_100D13684(*(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned char *)(a1 + 56));
}

id *sub_100D13684(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  unsigned __int8 v100 = a3;
  sub_1000E1294((uint64_t *)v99, (uint64_t)"coarseCellTileDownloaded", 0);
  double v5 = (*(double (**)(void))(**(void **)(a1 + 168) + 16))(*(void *)(a1 + 168));
  uint64_t v6 = sub_10112D70C(*(void **)(a1 + 176), a2);
  int v7 = (_DWORD *)v6;
  int v98 = 0;
  if (v6)
  {
    long long v94 = *(_OWORD *)(v6 + 48);
    uint64_t v95 = *(void *)(v6 + 64);
    if (*(char *)(v6 + 95) < 0)
    {
      sub_1000DC48C(&v96, *(void **)(v6 + 72), *(void *)(v6 + 80));
    }
    else
    {
      long long v96 = *(_OWORD *)(v6 + 72);
      uint64_t v97 = *(void *)(v6 + 88);
    }
    unsigned int v10 = v7[12];
    uint64_t v11 = *(void *)(sub_1001BF5C0((uint64_t)v7) + 96);
    uint64_t v12 = a1 + 192;
    if (v100 || v11 == -1100) {
      sub_100FFB390(v12);
    }
    else {
      sub_100FFB3C0(v12, v5);
    }
    uint64_t v13 = sub_10015EF24(v10, (void *)(a1 + 216));
    if (v100 && (_os_feature_enabled_impl() & 1) == 0) {
      unsigned __int8 v100 = (*(uint64_t (**)(_DWORD *, int *))(*(void *)v7 + 40))(v7, &v98);
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    uint64_t v14 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v15 = v10;
      std::string::size_type v16 = sub_100147F50(v10);
      double v17 = sub_10013DAC0((uint64_t)&v94);
      double v18 = sub_10013DA9C((uint64_t)&v94);
      int v19 = v100;
      uint64_t v20 = *(void *)(sub_1001BF5C0((uint64_t)v7) + 96);
      *(_DWORD *)std::string buf = 136447235;
      *(void *)&uint8_t buf[4] = v16;
      __int16 v110 = 2049;
      *(double *)__int16 v111 = v17;
      *(_WORD *)&v111[8] = 2049;
      double v112 = v18;
      *(_WORD *)__int16 v113 = 1026;
      *(_DWORD *)&v113[2] = v19;
      *(_WORD *)&v113[6] = 1026;
      *(_DWORD *)&v113[8] = v20;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "@TileReq, %{public}s, downloaded, llsw, %{private}.2lf, %{private}.2lf, success, %{public}d, NSURLErrorCode, %{public}d", buf, 0x2Cu);
      unsigned int v10 = v15;
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F2E80);
      }
      unsigned int v54 = v10;
      __int16 v55 = sub_100147F50(v10);
      double v56 = sub_10013DAC0((uint64_t)&v94);
      double v57 = sub_10013DA9C((uint64_t)&v94);
      int v58 = v100;
      uint64_t v59 = *(void *)(sub_1001BF5C0((uint64_t)v7) + 96);
      *(_DWORD *)long long __p = 136447235;
      *(void *)&__p[4] = v55;
      __int16 v102 = 2049;
      *(double *)__int16 v103 = v56;
      *(_WORD *)&v103[8] = 2049;
      double v104 = v57;
      *(_WORD *)__int16 v105 = 1026;
      *(_DWORD *)&v105[2] = v58;
      *(_WORD *)&v105[6] = 1026;
      *(_DWORD *)&v105[8] = v59;
      double v60 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::tileDownloadCompleted(CLFileDownload *, BOOL, void *)", "%s\n", v60);
      unsigned int v10 = v54;
      if (v60 != buf) {
        free(v60);
      }
    }
    if (v100)
    {
      int v21 = v98;
      (*(void (**)(uint64_t))(*(void *)(v13 + 232) + 16))(v13 + 232);
      *(_DWORD *)(v13 + 276) += v21;
      (*(void (**)(uint64_t))(*(void *)(v13 + 232) + 24))(v13 + 232);
      (*(void (**)(uint64_t))(*(void *)(v13 + 232) + 16))(v13 + 232);
      ++*(_DWORD *)(v13 + 284);
      (*(void (**)(uint64_t))(*(void *)(v13 + 232) + 24))(v13 + 232);
      sub_100134750(buf, "tileDownloadCompleted");
      sub_100D3B360(v13 + 232, (uint64_t *)buf, *(_DWORD *)(a1 + 148));
      if ((v111[9] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    uint64_t v22 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v79 = v13;
      uint64_t v81 = a2;
      uint64_t v23 = v11;
      unsigned int v24 = v10;
      double v25 = __p;
      (*(void (**)(unsigned char *__return_ptr, _DWORD *))(*(void *)v7 + 16))(__p, v7);
      if (v103[9] < 0) {
        double v25 = *(unsigned char **)__p;
      }
      int v26 = v100;
      uint64_t v27 = *(void *)(sub_1001BF5C0((uint64_t)v7) + 96);
      int v28 = *(_DWORD *)(a1 + 148);
      BOOL v29 = sub_1001447B8((unsigned int *)&v94);
      int v30 = *(unsigned __int8 *)(a1 + 128);
      *(_DWORD *)std::string buf = 136382467;
      *(void *)&uint8_t buf[4] = v25;
      __int16 v110 = 1026;
      *(_DWORD *)__int16 v111 = v26;
      *(_WORD *)&v111[4] = 1026;
      *(_DWORD *)&v111[6] = v27;
      LOWORD(v112) = 1026;
      *(_DWORD *)((char *)&v112 + 2) = v23 == -1100;
      HIWORD(v112) = 1026;
      *(_DWORD *)__int16 v113 = v28;
      *(_WORD *)&v113[4] = 1026;
      *(_DWORD *)&v113[6] = v29;
      *(_WORD *)&v113[10] = 1026;
      int v114 = v30;
      __int16 v115 = 1026;
      int v116 = v98;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "@TileDl, tileDecompressionCompleted, tile, %{private}s, decompress done, success, %{public}d, NSURLErrorCode, %{public}d, tileDoesNotExist, %{public}d, reachability, %{public}d, validId, %{public}d, locked, %{public}d, fileSize, %{public}d", buf, 0x36u);
      if ((v103[9] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      unsigned int v10 = v24;
      uint64_t v11 = v23;
      uint64_t v13 = v79;
      a2 = v81;
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F2E80);
      }
      uint64_t v82 = v11;
      __int16 v61 = v92;
      (*(void (**)(void **__return_ptr, _DWORD *))(*(void *)v7 + 16))(v92, v7);
      unsigned int v80 = v10;
      if (v93 < 0) {
        __int16 v61 = (void **)v92[0];
      }
      int v62 = v100;
      uint64_t v63 = *(void *)(sub_1001BF5C0((uint64_t)v7) + 96);
      int v64 = *(_DWORD *)(a1 + 148);
      BOOL v65 = sub_1001447B8((unsigned int *)&v94);
      int v66 = *(unsigned __int8 *)(a1 + 128);
      *(_DWORD *)long long __p = 136382467;
      *(void *)&__p[4] = v61;
      __int16 v102 = 1026;
      *(_DWORD *)__int16 v103 = v62;
      *(_WORD *)&v103[4] = 1026;
      *(_DWORD *)&v103[6] = v63;
      LOWORD(v104) = 1026;
      *(_DWORD *)((char *)&v104 + 2) = v82 == -1100;
      HIWORD(v104) = 1026;
      *(_DWORD *)__int16 v105 = v64;
      *(_WORD *)&v105[4] = 1026;
      *(_DWORD *)&v105[6] = v65;
      *(_WORD *)&v105[10] = 1026;
      int v106 = v66;
      __int16 v107 = 1026;
      int v108 = v98;
      __darwin_ino64_t v67 = (char *)_os_log_send_and_compose_impl();
      if (v93 < 0) {
        operator delete(v92[0]);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::tileDownloadCompleted(CLFileDownload *, BOOL, void *)", "%s\n", v67);
      unsigned int v10 = v80;
      uint64_t v11 = v82;
      if (v67 != buf) {
        free(v67);
      }
    }
    if (!sub_1001447B8((unsigned int *)&v94))
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F2E80);
      }
      uint64_t v31 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "@TileError, DecompressionID", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022F2E80);
        }
        *(_WORD *)long long __p = 0;
        double v78 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::tileDownloadCompleted(CLFileDownload *, BOOL, void *)", "%s\n", v78);
        if (v78 != buf) {
          free(v78);
        }
      }
    }
    unsigned __int8 v100 = sub_101048658((uint64_t)v7, v100, v11 == -1100, v5);
    (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
    sub_100D148FC(a1, v100, v7, v13, v98);
    if (sub_1000FC450())
    {
      sub_1000E9354(buf);
      uint64_t v32 = (char *)(v7 + 2);
      if (*((char *)v7 + 31) < 0) {
        uint64_t v32 = *(char **)v32;
      }
      sub_1004D34AC((uint64_t)buf, "gotTile", v32);
      sub_1000EA238((uint64_t)buf, "success", &v100);
      sub_1000EA238((uint64_t)buf, "protection", (unsigned char *)(a1 + 128));
      sub_1000FC45C((uint64_t)buf, (uint64_t)"locationd");
      sub_10013F3C4(buf);
    }
    if (v100)
    {
      sub_10125C938((uint64_t)v7, v13, (uint64_t)"download");
      uint64_t v33 = *(void *)(a1 + 176);
      long long v88 = v94;
      uint64_t v89 = v95;
      if (SHIBYTE(v97) < 0)
      {
        sub_1000DC48C(&v90, (void *)v96, *((unint64_t *)&v96 + 1));
      }
      else
      {
        long long v90 = v96;
        uint64_t v91 = v97;
      }
      sub_10112D798(v33, (uint64_t)&v88, v100, v11 == -1100, (uint64_t *)v92, v5);
      if (SHIBYTE(v91) < 0) {
        operator delete((void *)v90);
      }
      if (v92[0])
      {
        double v36 = sub_1008B436C((uint64_t **)(v13 + 184), (unsigned int *)&v94);
        uint64_t v37 = v92[0];
        v92[0] = 0;
        uint64_t v38 = *v36;
        *double v36 = (uint64_t)v37;
        if (v38) {
          (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
        }
      }
      uint64_t v39 = sub_100144000(v13 + 184, (unsigned int *)&v94);
      sub_100144E3C(v39, v5);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F2E80);
      }
      int v40 = v7 + 12;
      int v41 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v42 = sub_100147F50(*v40);
        double v43 = sub_10013DAC0((uint64_t)&v94);
        double v44 = sub_10013DA9C((uint64_t)&v94);
        uint64_t v45 = sub_10014D19C(v13 + 184);
        *(_DWORD *)std::string buf = 136446979;
        *(void *)&uint8_t buf[4] = v42;
        __int16 v110 = 2049;
        *(double *)__int16 v111 = v43;
        *(_WORD *)&v111[8] = 2049;
        double v112 = v44;
        *(_WORD *)__int16 v113 = 2050;
        *(void *)&v113[2] = v45;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "@TileList, %{public}s, add, llsw, %{private}.2lf, %{private}.2lf, download, size, %{public}lu", buf, 0x2Au);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022F2E80);
        }
        char v68 = sub_100147F50(*v40);
        double v69 = sub_10013DAC0((uint64_t)&v94);
        double v70 = sub_10013DA9C((uint64_t)&v94);
        uint64_t v71 = sub_10014D19C(v13 + 184);
        *(_DWORD *)long long __p = 136446979;
        *(void *)&__p[4] = v68;
        __int16 v102 = 2049;
        *(double *)__int16 v103 = v69;
        *(_WORD *)&v103[8] = 2049;
        double v104 = v70;
        *(_WORD *)__int16 v105 = 2050;
        *(void *)&v105[2] = v71;
        int64_t v72 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::tileDownloadCompleted(CLFileDownload *, BOOL, void *)", "%s\n", v72);
        if (v72 != buf) {
          free(v72);
        }
      }
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F2E80);
      }
      __int16 v46 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
      {
        uint64_t v47 = sub_100147F50(v10);
        double v48 = sub_10013DAC0((uint64_t)&v94);
        double v49 = sub_10013DA9C((uint64_t)&v94);
        uint64_t v50 = sub_10014D19C(v13 + 184);
        *(_DWORD *)std::string buf = 136446979;
        *(void *)&uint8_t buf[4] = v47;
        __int16 v110 = 2049;
        *(double *)__int16 v111 = v48;
        *(_WORD *)&v111[8] = 2049;
        double v112 = v49;
        *(_WORD *)__int16 v113 = 2050;
        *(void *)&v113[2] = v50;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "@TileReq, %{public}s, add, llsw, %{private}.2lf, %{private}.2lf, download, size, %{public}lu", buf, 0x2Au);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022F2E80);
        }
        int v73 = sub_100147F50(v10);
        double v74 = sub_10013DAC0((uint64_t)&v94);
        double v75 = sub_10013DA9C((uint64_t)&v94);
        uint64_t v76 = sub_10014D19C(v13 + 184);
        *(_DWORD *)long long __p = 136446979;
        *(void *)&__p[4] = v73;
        __int16 v102 = 2049;
        *(double *)__int16 v103 = v74;
        *(_WORD *)&v103[8] = 2049;
        double v104 = v75;
        *(_WORD *)__int16 v105 = 2050;
        *(void *)&v105[2] = v76;
        __int16 v77 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::tileDownloadCompleted(CLFileDownload *, BOOL, void *)", "%s\n", v77);
        if (v77 != buf) {
          free(v77);
        }
      }
      ++*(_DWORD *)(v13 + 288);
      if ((sub_100147F74(*(_DWORD *)(a1 + 148), *(unsigned __int8 *)(a1 + 153)) & 1) == 0) {
        ++*(_DWORD *)(v13 + 292);
      }
      sub_100D11464(a1, v5);
      __int16 v51 = v92[0];
      v92[0] = 0;
      if (v51) {
        (*(void (**)(void *))(*(void *)v51 + 8))(v51);
      }
    }
    else
    {
      uint64_t v34 = *(void *)(a1 + 176);
      long long v83 = v94;
      uint64_t v84 = v95;
      if (SHIBYTE(v97) < 0)
      {
        sub_1000DC48C(&v85, (void *)v96, *((unint64_t *)&v96 + 1));
        BOOL v35 = v100 != 0;
      }
      else
      {
        BOOL v35 = 0;
        long long v85 = v96;
        uint64_t v86 = v97;
      }
      sub_10112D798(v34, (uint64_t)&v83, v35, v11 == -1100, &v87, v5);
      uint64_t v52 = v87;
      uint64_t v87 = 0;
      if (v52) {
        (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
      }
      if (SHIBYTE(v86) < 0) {
        operator delete((void *)v85);
      }
    }
    if (SHIBYTE(v97) < 0) {
      operator delete((void *)v96);
    }
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    uint64_t v8 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "@TileError, tile not on download list, #CloneMe", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F2E80);
      }
      *(_WORD *)long long __p = 0;
      int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoarseCellTilesManager::tileDownloadCompleted(CLFileDownload *, BOOL, void *)", "%s\n", v9);
      if (v9 != buf) {
        free(v9);
      }
    }
  }
  sub_100D10EAC(a1, v5);
  return sub_1000E1098(v99);
}

void sub_100D147B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,id a43)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  sub_1000E1098(&a43);
  _Unwind_Resume(a1);
}

void sub_100D148FC(uint64_t a1, char a2, _DWORD *a3, uint64_t a4, int a5)
{
  uint64_t v9 = (uint64_t)(a3 + 12);
  int v8 = a3[12];
  memset(&v26, 0, sizeof(v26));
  *(_OWORD *)unsigned int v24 = 0u;
  memset(__p, 0, sizeof(__p));
  v22[0] = a2;
  int v23 = v8;
  std::string::operator=((std::string *)v24, (const std::string *)(a4 + 56));
  sub_100C09A14(v9, &buf);
  if (SHIBYTE(__p[3]) < 0) {
    operator delete(__p[1]);
  }
  *(std::string *)&__p[1] = buf;
  sub_101048050((uint64_t)a3, &buf);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  std::string v26 = buf;
  char v28 = 0;
  int v27 = a5;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022F2E80);
  }
  unsigned int v10 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(unsigned char *__return_ptr, _DWORD *))(*(void *)a3 + 16))(v29, a3);
    uint64_t v11 = v33 >= 0 ? v29 : *(unsigned char **)v29;
    uint64_t v12 = SHIBYTE(__p[0]) >= 0 ? v24 : (void **)v24[0];
    uint64_t v13 = SHIBYTE(__p[3]) >= 0 ? &__p[1] : (void **)__p[1];
    uint64_t v14 = (v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v26
        : (std::string *)v26.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136381955;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v22[0];
    WORD1(buf.__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(buf.__r_.__value_.__r.__words[2]) = v23;
    __int16 v41 = 2081;
    __int16 v42 = v12;
    __int16 v43 = 2081;
    double v44 = v13;
    __int16 v45 = 2081;
    __int16 v46 = v14;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "@TileDl, kNotificationTileWasDownloaded, tileid, %{private}s, tileHeaderParsed, %{public}d, tileType, %{public}d, serverUrl, %{private}s, serverFilename, %{private}s, absoluteLocalFilename, %{private}s", (uint8_t *)&buf, 0x36u);
    if (SHIBYTE(v33) < 0) {
      operator delete(*(void **)v29);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    (*(void (**)(void **__return_ptr, _DWORD *))(*(void *)a3 + 16))(v20, a3);
    if (v21 >= 0) {
      unsigned int v15 = v20;
    }
    else {
      unsigned int v15 = (void **)v20[0];
    }
    if (SHIBYTE(__p[0]) >= 0) {
      std::string::size_type v16 = v24;
    }
    else {
      std::string::size_type v16 = (void **)v24[0];
    }
    if (SHIBYTE(__p[3]) >= 0) {
      double v17 = &__p[1];
    }
    else {
      double v17 = (void **)__p[1];
    }
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      double v18 = &v26;
    }
    else {
      double v18 = (std::string *)v26.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)BOOL v29 = 136381955;
    *(void *)&v29[4] = v15;
    __int16 v30 = 1026;
    int v31 = v22[0];
    __int16 v32 = 1026;
    int v33 = v23;
    __int16 v34 = 2081;
    BOOL v35 = v16;
    __int16 v36 = 2081;
    uint64_t v37 = v17;
    __int16 v38 = 2081;
    uint64_t v39 = v18;
    int v19 = (std::string *)_os_log_send_and_compose_impl();
    if (v21 < 0) {
      operator delete(v20[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::sendNotificationTileWasDownloaded(BOOL, const CLTileFile &, const CLTilesSet &, unsigned int)", "%s\n", (const char *)v19);
    if (v19 != &buf) {
      free(v19);
    }
  }
  LODWORD(buf.__r_.__value_.__l.__data_) = 0;
  (*(void (**)(uint64_t, std::string *, unsigned char *, void, uint64_t, void))(*(void *)a1 + 152))(a1, &buf, v22, 0, 0xFFFFFFFFLL, 0);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p[3]) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v24[0]);
  }
}

void sub_100D14D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_100C52374((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_100D14D78(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(void **)(v2 + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100D14DEC;
  v5[3] = &unk_1022B8660;
  uint64_t v5[4] = v2;
  void v5[5] = a2;
  return [v3 async:v5];
}

void sub_100D14DEC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  double v3 = (*(double (**)(void))(**(void **)(v2 + 168) + 16))(*(void *)(v2 + 168));
  uint64_t v4 = *(void *)(a1 + 40) + 184;
  double v5 = (void *)sub_1000D8908(v4);
  uint64_t v6 = sub_1000B894C(v4);
  if (v5 != (void *)v6)
  {
    int v7 = (void *)v6;
    char v8 = 0;
    do
    {
      char v9 = sub_10112DBA0(*(void *)(v2 + 176), v5[10], v3);
      unsigned int v10 = (void *)v5[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          unsigned int v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (void *)v5[2];
          BOOL v12 = *v11 == (void)v5;
          double v5 = v11;
        }
        while (!v12);
      }
      v8 |= v9;
      double v5 = v11;
    }
    while (v11 != v7);
    if (v8)
    {
      int v13 = (*(uint64_t (**)(void))(**(void **)(v2 + 168) + 40))(*(void *)(v2 + 168));
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F2E80);
      }
      uint64_t v14 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67240192;
        int v17 = v13;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "@TileSched, coarsecell, set, %{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022F2E80);
        }
        unsigned int v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::refreshTilesDataIfNeeded()_block_invoke", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
    }
  }
}

uint64_t sub_100D15078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_100113C7C(a3);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022F2EA0);
  }
  unsigned int v10 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_10142D00C(a3);
    uint64_t v11 = v45 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 134218242;
    *(void *)&uint8_t buf[4] = v9;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "TILE: getLocationByCellFromTile, searching, sec_key, %016llX, %s", buf, 0x16u);
    if (v45 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F2EA0);
    }
    sub_10142D00C(a3);
    if (v41 >= 0) {
      __int16 v30 = buf;
    }
    else {
      __int16 v30 = *(unsigned char **)buf;
    }
    int v42 = 134218242;
    *(void *)__int16 v43 = v9;
    *(_WORD *)&v43[8] = 2080;
    *(void *)&v43[10] = v30;
    int v31 = (char *)_os_log_send_and_compose_impl();
    if (v41 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCoarseCellTilesManager::getLocationByCellFromTile(CLTileFile *, const CLCell &, SearchContext &, CLDaemonLocation &)", "%s\n", v31);
    if (v31 != (char *)__p) {
      free(v31);
    }
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022F2EA0);
  }
  BOOL v12 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    int v13 = sub_1001453B8(a2, *(unsigned char *)(a1 + 128));
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 16))(__p, a2);
    uint64_t v14 = v45 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = v13;
    *(_WORD *)&uint8_t buf[8] = 2080;
    *(void *)&buf[10] = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "TILE: getLocationByCellFromTile, in tile, accessible, %d, %s", buf, 0x12u);
    if (v45 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F2EA0);
    }
    int v32 = sub_1001453B8(a2, *(unsigned char *)(a1 + 128));
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a2 + 16))(buf, a2);
    if (v41 >= 0) {
      int v33 = buf;
    }
    else {
      int v33 = *(unsigned char **)buf;
    }
    int v42 = 67109378;
    *(_DWORD *)__int16 v43 = v32;
    *(_WORD *)&v43[4] = 2080;
    *(void *)&v43[6] = v33;
    __int16 v34 = (char *)_os_log_send_and_compose_impl();
    if (v41 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCoarseCellTilesManager::getLocationByCellFromTile(CLTileFile *, const CLCell &, SearchContext &, CLDaemonLocation &)", "%s\n", v34);
    if (v34 != (char *)__p) {
      free(v34);
    }
  }
  if (!sub_1001453B8(a2, *(unsigned char *)(a1 + 128))) {
    return 0;
  }
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  long long v39 = (unsigned __int16)sub_1000C95E4(a3);
  unsigned int v15 = *(_DWORD *)(a3 + 8);
  if (v15 <= 7 && ((1 << v15) & 0x87) != 0)
  {
    WORD1(v39) = *(_DWORD *)(sub_1006E6690(a3) + 4);
    uint64_t v16 = sub_1006E6690(a3);
LABEL_23:
    int v17 = (_DWORD *)(v16 + 8);
    goto LABEL_24;
  }
  if (v15 - 3 > 2)
  {
    if (v15 == 10)
    {
      WORD1(v39) = *(_DWORD *)(sub_1006E8278(a3) + 4);
      uint64_t v16 = sub_1006E8278(a3);
      goto LABEL_23;
    }
    if (v15 == 6)
    {
      WORD1(v39) = *(_DWORD *)(sub_100117098(a3) + 4);
      uint64_t v16 = sub_100117098(a3);
      goto LABEL_23;
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F2EA0);
    }
    int v27 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      sub_10142D00C(a3);
      char v28 = v45 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v28;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "TILE: no lac tile for, %s", buf, 0xCu);
      if (v45 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022F2EA0);
      }
      sub_10142D00C(a3);
      if (v41 >= 0) {
        BOOL v35 = buf;
      }
      else {
        BOOL v35 = *(unsigned char **)buf;
      }
      int v42 = 136315138;
      *(void *)__int16 v43 = v35;
      __int16 v36 = (char *)_os_log_send_and_compose_impl();
      if (v41 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCoarseCellTilesManager::getLocationByCellFromTile(CLTileFile *, const CLCell &, SearchContext &, CLDaemonLocation &)", "%s\n", v36);
      if (v36 != (char *)__p) {
        free(v36);
      }
    }
    return 0;
  }
  WORD1(v39) = *(_DWORD *)(sub_1006E58D4(a3) + 32);
  int v17 = (_DWORD *)(sub_1006E58D4(a3) + 36);
LABEL_24:
  DWORD1(v39) = *v17;
  uint64_t v18 = (*(uint64_t (**)(uint64_t, long long *, uint64_t *))(*(void *)a2 + 176))(a2, &v39, &v37);
  if (v18)
  {
    unsigned int v20 = (unsigned __int16)v38;
    unsigned int v21 = WORD1(v38);
    LOBYTE(v19) = BYTE4(v38);
    *(double *)(a5 + 20) = (double)v19 * 1000.0;
    sub_10104C204(a2, v20, v21, (double *)(a5 + 4), (double *)(a5 + 12));
    *(_OWORD *)(a5 + 28) = xmmword_101D1C570;
    *(double *)(a5 + 76) = (*(double (**)(void))(**(void **)(a1 + 168) + 16))(*(void *)(a1 + 168));
    *(void *)(a5 + 88) = 0xBFF0000000000000;
    *(_DWORD *)(a5 + 96) = 7;
    *(void *)(a5 + 128) = 0x100000032;
    *(_DWORD *)(a5 + 84) = 70;
    if (sub_1001453B8(a2, *(unsigned char *)(a1 + 128)))
    {
      double v22 = (*(double (**)(void))(**(void **)(a1 + 168) + 16))(*(void *)(a1 + 168));
      sub_100144E3C(a2, v22);
    }
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022F2EA0);
  }
  int v23 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_1000AB340(a5);
    unsigned int v24 = v45 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = v18;
    *(_WORD *)&uint8_t buf[8] = 2080;
    *(void *)&buf[10] = v24;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "TILE: getLocationByCellFromTile, isFound, %d, locationd, %s", buf, 0x12u);
    if (v45 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F2EA0);
    }
    sub_1000AB340(a5);
    if (v41 >= 0) {
      double v25 = buf;
    }
    else {
      double v25 = *(unsigned char **)buf;
    }
    int v42 = 67109378;
    *(_DWORD *)__int16 v43 = v18;
    *(_WORD *)&v43[4] = 2080;
    *(void *)&v43[6] = v25;
    std::string v26 = (char *)_os_log_send_and_compose_impl();
    if (v41 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCoarseCellTilesManager::getLocationByCellFromTile(CLTileFile *, const CLCell &, SearchContext &, CLDaemonLocation &)", "%s\n", v26);
    if (v26 != (char *)__p) {
      free(v26);
    }
  }
  return v18;
}

uint64_t sub_100D15A34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a5 + 96) = 0;
  *(void *)(a5 + 104) = 0;
  *(_DWORD *)(a5 + 112) = 0;
  *(void *)(a5 + 136) = 0;
  *(void *)(a5 + 144) = 0;
  *(void *)(a5 + 128) = 0;
  *(unsigned char *)(a5 + 152) = 0;
  *(_DWORD *)a5 = 0xFFFF;
  *(void *)(a5 + 12) = 0;
  *(void *)(a5 + 4) = 0;
  *(_OWORD *)(a5 + 20) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a5 + 36) = _Q0;
  *(_OWORD *)(a5 + 52) = _Q0;
  *(_OWORD *)(a5 + 68) = _Q0;
  *(_DWORD *)(a5 + 84) = 0;
  *(void *)(a5 + 88) = 0xBFF0000000000000;
  *(void *)(a5 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a5 + 124) = 0x7FFFFFFF;
  if (!*(unsigned char *)(a1 + 129))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F2EA0);
    }
    unint64_t v19 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v20 = *(unsigned __int8 *)(a1 + 128);
      *(_DWORD *)long long __p = 67109120;
      *(_DWORD *)&__p[4] = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "TILE: getLocationByCell, index is not available, can't search tiles (locationd launched when device was locked?), fDataProtectionEnabled, %d", __p, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F2EA0);
    }
    int v21 = *(unsigned __int8 *)(a1 + 128);
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v21;
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCoarseCellTilesManager::getLocationByCell(const CLCell &, const CLDaemonLocation &, SearchContext &, CLDaemonLocation &)", "%s\n", v18);
    goto LABEL_93;
  }
  unsigned int v13 = *(_DWORD *)(a2 + 8);
  unsigned int v14 = 6;
  if (v13 >= 3 && v13 != 7)
  {
    if (v13 == 9)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022F2EA0);
      }
      unsigned int v15 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        sub_10142D00C(a2);
        uint64_t v16 = v45 >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "TILE: no tiles for, %s", buf, 0xCu);
        if (v45 < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        return 0;
      }
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022F2EA0);
      }
      sub_10142D00C(a2);
      if (v41 >= 0) {
        int v17 = buf;
      }
      else {
        int v17 = *(unsigned char **)buf;
      }
      int v42 = 136315138;
      __int16 v43 = v17;
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();
      if (v41 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCoarseCellTilesManager::getLocationByCell(const CLCell &, const CLDaemonLocation &, SearchContext &, CLDaemonLocation &)", "%s\n", v18);
LABEL_22:
      if (v18 == __p) {
        return 0;
      }
      goto LABEL_94;
    }
    if (v13 - 3 > 2)
    {
      if (v13 == 6)
      {
        unsigned int v14 = 8;
      }
      else
      {
        if (v13 != 10)
        {
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022F2E80);
          }
          int v33 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
          {
            sub_10142D00C(a2);
            __int16 v34 = v45 >= 0 ? __p : *(unsigned char **)__p;
            *(_DWORD *)std::string buf = 136380675;
            *(void *)&uint8_t buf[4] = v34;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "CoarseTile, getLocationByCell, un-supported cell type, %{private}s, #CloneMe", buf, 0xCu);
            if (v45 < 0) {
              operator delete(*(void **)__p);
            }
          }
          if (!sub_10013D1A0(115, 0)) {
            return 0;
          }
          bzero(__p, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022F2E80);
          }
          sub_10142D00C(a2);
          if (v41 >= 0) {
            BOOL v35 = buf;
          }
          else {
            BOOL v35 = *(unsigned char **)buf;
          }
          int v42 = 136380675;
          __int16 v43 = v35;
          uint64_t v18 = (char *)_os_log_send_and_compose_impl();
          if (v41 < 0) {
            operator delete(*(void **)buf);
          }
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCoarseCellTilesManager::getLocationByCell(const CLCell &, const CLDaemonLocation &, SearchContext &, CLDaemonLocation &)", "%s\n", v18);
          goto LABEL_22;
        }
        unsigned int v14 = 12;
      }
    }
    else
    {
      if (v13 != 3) {
        return 0;
      }
      unsigned int v14 = 7;
    }
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022F2EA0);
  }
  double v22 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long __p = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "TILE: getLocationByCell, search for LAC", __p, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F2EA0);
    }
    *(_WORD *)std::string buf = 0;
    __int16 v36 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCoarseCellTilesManager::getLocationByCell(const CLCell &, const CLDaemonLocation &, SearchContext &, CLDaemonLocation &)", "%s\n", v36);
    if (v36 != __p) {
      free(v36);
    }
  }
  uint64_t v23 = sub_10015EF24(v14, (void *)(a1 + 216));
  if (!*(unsigned char *)(a1 + 144))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F2EA0);
    }
    __int16 v30 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v31 = v23 + 8;
      if (*(char *)(v23 + 31) < 0) {
        uint64_t v31 = *(void *)(v23 + 8);
      }
      *(_DWORD *)long long __p = 136315138;
      *(void *)&__p[4] = v31;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "TILE: getLocationByCell, LAC tiles for, %s, are not active", __p, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F2EA0);
    }
    uint64_t v39 = *(void *)(v23 + 8);
    uint64_t v38 = v23 + 8;
    uint64_t v37 = v39;
    if (*(char *)(v38 + 23) >= 0) {
      uint64_t v37 = v38;
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v37;
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCoarseCellTilesManager::getLocationByCell(const CLCell &, const CLDaemonLocation &, SearchContext &, CLDaemonLocation &)", "%s\n", v18);
LABEL_93:
    if (v18 != __p) {
LABEL_94:
    }
      free(v18);
    return 0;
  }
  sub_10010EE08(a2, buf);
  uint64_t v24 = v23 + 184;
  if (sub_10014D19C(v24))
  {
    uint64_t v25 = sub_1000D8908(v24);
    uint64_t v27 = sub_100D15078(a1, *(void *)(v25 + 80), a2, v26, a5);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F2EA0);
    }
    char v28 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long __p = 67109120;
      *(_DWORD *)&__p[4] = v27;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "TILE: getLocationByCell, search for LAC, isFound, %d", __p, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022F2EA0);
      }
      int v42 = 67109120;
      LODWORD(v43) = v27;
      BOOL v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCoarseCellTilesManager::getLocationByCell(const CLCell &, const CLDaemonLocation &, SearchContext &, CLDaemonLocation &)", "%s\n", v29);
      if (v29 != __p) {
        free(v29);
      }
    }
  }
  else
  {
    uint64_t v27 = 0;
  }
  if (v41 < 0) {
    operator delete(*(void **)buf);
  }
  return v27;
}

void sub_100D16428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100D16454(uint64_t a1, uint64_t a2)
{
  return sub_100D1277C(*(void *)(a1 + 32), 1, *(_DWORD *)(a2 + 4));
}

void sub_100D16464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = sub_1000D3D90(a3 - a2);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022F2EC0);
  }
  int v7 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    int v8 = *(_DWORD *)(a1 + 32);
    v9[0] = 68290307;
    v9[1] = 0;
    __int16 v10 = 2082;
    uint64_t v11 = "";
    __int16 v12 = 2082;
    unsigned int v13 = "elapsed";
    __int16 v14 = 2050;
    uint64_t v15 = a2;
    __int16 v16 = 2050;
    uint64_t v17 = a3;
    __int16 v18 = 2050;
    double v19 = v6;
    __int16 v20 = 1025;
    int v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLCoarseCellTilesManager::removeAllTiles\", \"event\":%{public, location:escape_only}s, \"begin_mach\":%{public}llu, \"end_mach\":%{public}llu, \"elapsed_s\":\"%{public}.09f\", \"type\":%{private}d}", (uint8_t *)v9, 0x40u);
  }
}

id sub_100D165A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022F2E80);
  }
  double v5 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = a2 + 8;
    if (*(char *)(a2 + 31) < 0) {
      uint64_t v6 = *(void *)(a2 + 8);
    }
    *(_DWORD *)std::string buf = 136446210;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "TileCoarse, deleteAgedTiles, dispatch, %{public}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    uint64_t v9 = a2 + 8;
    if (*(char *)(a2 + 31) < 0) {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    int v12 = 136446210;
    uint64_t v13 = v9;
    __int16 v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::deleteAgedTiles(CFAbsoluteTime)_block_invoke", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  int v7 = *(void **)(v4 + 40);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_100D167E0;
  v11[3] = &unk_1022B8680;
  uint64_t v11[4] = v4;
  v11[5] = a2;
  v11[6] = *(void *)(a1 + 40);
  return [v7 async:v11];
}

unint64_t sub_100D167E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022F2E80);
  }
  double v3 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    double v5 = (void *)(v4 + 8);
    if (*(char *)(v4 + 31) < 0) {
      double v5 = (void *)*v5;
    }
    *(_DWORD *)std::string buf = 136446466;
    __int16 v10 = v5;
    __int16 v11 = 2050;
    uint64_t v12 = sub_10014D19C(v4 + 184);
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "TileCoarse, deleteAgedTiles, start, name, %{public}s, size, %{public}lu", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    sub_10014D19C(*(void *)(a1 + 40) + 184);
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::deleteAgedTiles(CFAbsoluteTime)_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  uint64_t v6 = *(void *)(a1 + 40) + 184;
  do
  {
    sub_100D16A14(v2, *(void *)(a1 + 40), *(double *)(a1 + 48));
    unint64_t result = sub_10014D19C(v6);
  }
  while (result > 1);
  return result;
}

uint64_t *sub_100D16A14(uint64_t a1, uint64_t a2, double a3)
{
  v68[0] = _NSConcreteStackBlock;
  v68[1] = 3221225472;
  v68[2] = sub_100D175C4;
  v68[3] = &unk_1022F2D48;
  *(double *)&v68[4] = a3;
  v69[0] = mach_absolute_time();
  v69[1] = (uint64_t)v68;
  uint64_t v62 = a2;
  uint64_t v6 = (uint64_t **)(a2 + 184);
  int v7 = (void *)sub_1000D8908((uint64_t)v6);
  uint64_t v8 = sub_1000B894C((uint64_t)v6);
  if (v7 == (void *)sub_1000B894C((uint64_t)v6))
  {
    int v9 = 0;
  }
  else
  {
    int v9 = 0;
    uint64_t v64 = a1;
    uint64_t v63 = v6;
    do
    {
      __int16 v10 = v7;
      __int16 v11 = (void *)v7[1];
      uint64_t v12 = v7;
      if (v11)
      {
        do
        {
          int v7 = v11;
          __int16 v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          int v7 = (void *)v12[2];
          BOOL v13 = *v7 == (void)v12;
          uint64_t v12 = v7;
        }
        while (!v13);
      }
      uint64_t v65 = (uint64_t)v10;
      __int16 v14 = (unsigned int *)v10[10];
      double v15 = sub_101045840((uint64_t)v14, a3);
      double v16 = sub_101045834((uint64_t)v14, a3);
      BOOL v17 = v16 >= *(double *)(a1 + 136) || sub_10104D9A8((uint64_t)v14);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022F2EA0);
      }
      __int16 v18 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v19 = *(void *)(a1 + 136);
        BOOL v20 = sub_10104D9A8((uint64_t)v14);
        (*(void (**)(unsigned char *__return_ptr, unsigned int *))(*(void *)v14 + 16))(__p, v14);
        int v21 = __p;
        if (__p[23] < 0) {
          int v21 = *(unsigned char **)__p;
        }
        *(_DWORD *)std::string buf = 134219010;
        *(double *)double v74 = v16;
        *(_WORD *)&v74[8] = 2048;
        *(void *)&v74[10] = v19;
        *(_WORD *)&v74[18] = 1024;
        *(_DWORD *)&v74[20] = v20;
        *(_WORD *)&v74[24] = 1024;
        *(_DWORD *)&v74[26] = v17;
        *(_WORD *)double v75 = 2080;
        *(void *)&v75[2] = v21;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "TILE: deleteAgedTiles, tileDataAge, %.1lf, %.1lf, corrupt, %d, isDelete, %d, tile, %s", buf, 0x2Cu);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        a1 = v64;
        uint64_t v6 = v63;
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        int v61 = v9;
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022F2EA0);
        }
        uint64_t v29 = *(void *)(a1 + 136);
        BOOL v30 = sub_10104D9A8((uint64_t)v14);
        (*(void (**)(void **__return_ptr, unsigned int *))(*(void *)v14 + 16))(v66, v14);
        uint64_t v31 = v66;
        if (v67 < 0) {
          uint64_t v31 = (void **)v66[0];
        }
        *(_DWORD *)long long __p = 134219010;
        *(double *)&__p[4] = v16;
        *(_WORD *)&unsigned char __p[12] = 2048;
        *(void *)&__p[14] = v29;
        *(_WORD *)&__p[22] = 1024;
        *(_DWORD *)&__p[24] = v30;
        *(_WORD *)&__p[28] = 1024;
        *(_DWORD *)&__p[30] = v17;
        *(_WORD *)uint64_t v71 = 2080;
        *(void *)&v71[2] = v31;
        int v32 = (char *)_os_log_send_and_compose_impl();
        if (v67 < 0) {
          operator delete(v66[0]);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::agedTileDeleter(CLTilesSet &, CFAbsoluteTime)", "%s\n", v32);
        int v9 = v61;
        a1 = v64;
        if (v32 != (char *)buf) {
          free(v32);
        }
      }
      if (v17)
      {
        sub_101048104((uint64_t)v14);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022F2E80);
        }
        double v22 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v23 = sub_100147F50(v14[12]);
          double v24 = sub_10013DAC0((uint64_t)(v14 + 12));
          double v25 = sub_10013DA9C((uint64_t)(v14 + 12));
          BOOL v26 = sub_10104D9A8((uint64_t)v14);
          uint64_t v27 = sub_10014D19C((uint64_t)v6);
          *(_DWORD *)std::string buf = 136447235;
          char v28 = "age";
          if (v26) {
            char v28 = "corrupt";
          }
          *(void *)double v74 = v23;
          *(_WORD *)&v74[8] = 2049;
          *(double *)&v74[10] = v24;
          *(_WORD *)&v74[18] = 2049;
          *(double *)&v74[20] = v25;
          *(_WORD *)&v74[28] = 2082;
          *(void *)double v75 = v28;
          *(_WORD *)&v75[8] = 2050;
          uint64_t v76 = v27 - 1;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "@TileList, %{public}s, delete, llsw, %{private}.2lf, %{private}.2lf, %{public}s, size, %{public}lu", buf, 0x34u);
          a1 = v64;
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022F2E80);
          }
          int v33 = sub_100147F50(v14[12]);
          double v34 = sub_10013DAC0((uint64_t)(v14 + 12));
          double v35 = sub_10013DA9C((uint64_t)(v14 + 12));
          BOOL v36 = sub_10104D9A8((uint64_t)v14);
          uint64_t v37 = sub_10014D19C((uint64_t)v6);
          *(_DWORD *)long long __p = 136447235;
          uint64_t v38 = "age";
          if (v36) {
            uint64_t v38 = "corrupt";
          }
          *(void *)&__p[4] = v33;
          *(_WORD *)&unsigned char __p[12] = 2049;
          *(double *)&__p[14] = v34;
          *(_WORD *)&__p[22] = 2049;
          *(double *)&__p[24] = v35;
          *(_WORD *)&__p[32] = 2082;
          *(void *)uint64_t v71 = v38;
          *(_WORD *)&v71[8] = 2050;
          uint64_t v72 = v37 - 1;
          uint64_t v39 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::agedTileDeleter(CLTilesSet &, CFAbsoluteTime)", "%s\n", v39);
          a1 = v64;
          if (v39 != (char *)buf) {
            free(v39);
          }
        }
        sub_1008B3890(v6, v65);
        ++v9;
      }
      else if (v8 == sub_1000B894C((uint64_t)v6))
      {
        uint64_t v8 = v65;
      }
      else if (v8 != sub_1000B894C((uint64_t)v6) && fabs(v15) >= fabs(sub_101045840(*(void *)(v8 + 80), a3)))
      {
        uint64_t v8 = v65;
      }
    }
    while (v7 != (void *)sub_1000B894C((uint64_t)v6));
  }
  if (v8 != sub_1000B894C((uint64_t)v6) && (unint64_t)sub_10014D19C((uint64_t)v6) >= 2)
  {
    uint64_t v40 = *(void *)(v8 + 80);
    if (sub_10014548C(v40))
    {
      sub_101048104(v40);
      ++v9;
    }
    int v41 = v9;
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    int v42 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v43 = sub_100147F50(*(_DWORD *)(v40 + 48));
      double v44 = sub_10013DAC0(v40 + 48);
      double v45 = sub_10013DA9C(v40 + 48);
      uint64_t v46 = sub_10014D19C((uint64_t)v6);
      *(_DWORD *)std::string buf = 136446979;
      *(void *)double v74 = v43;
      *(_WORD *)&v74[8] = 2049;
      *(double *)&v74[10] = v44;
      *(_WORD *)&v74[18] = 2049;
      *(double *)&v74[20] = v45;
      *(_WORD *)&v74[28] = 2050;
      *(void *)double v75 = v46 - 1;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "@TileList, %{public}s, delete, llsw, %{private}.2lf, %{private}.2lf, limits, size, %{public}lu", buf, 0x2Au);
    }
    int v9 = v41;
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F2E80);
      }
      unsigned int v55 = *(_DWORD *)(v40 + 48);
      uint64_t v54 = v40 + 48;
      double v56 = sub_100147F50(v55);
      double v57 = sub_10013DAC0(v54);
      double v58 = sub_10013DA9C(v54);
      uint64_t v59 = sub_10014D19C((uint64_t)v6);
      *(_DWORD *)long long __p = 136446979;
      *(void *)&__p[4] = v56;
      *(_WORD *)&unsigned char __p[12] = 2049;
      *(double *)&__p[14] = v57;
      *(_WORD *)&__p[22] = 2049;
      *(double *)&__p[24] = v58;
      *(_WORD *)&__p[32] = 2050;
      *(void *)uint64_t v71 = v59 - 1;
      double v60 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::agedTileDeleter(CLTilesSet &, CFAbsoluteTime)", "%s\n", v60);
      int v9 = v41;
      if (v60 != (char *)buf) {
        free(v60);
      }
    }
    sub_1008B3890(v6, v8);
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022F2E80);
  }
  uint64_t v47 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v48 = sub_10014D19C((uint64_t)v6);
    uint64_t v49 = v62 + 8;
    if (*(char *)(v62 + 31) < 0) {
      uint64_t v49 = *(void *)(v62 + 8);
    }
    *(_DWORD *)std::string buf = 67240707;
    *(_DWORD *)double v74 = v9;
    *(_WORD *)&v74[4] = 2050;
    *(void *)&v74[6] = v48;
    *(_WORD *)&v74[14] = 2081;
    *(void *)&v74[16] = v49;
    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "TileCoarse, deleteAgedTiles, end, numOfDeletedTiles, %{public}u, remain, %{public}lu, name, %{private}s", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    uint64_t v51 = sub_10014D19C((uint64_t)v6);
    uint64_t v52 = *(void *)(v62 + 8);
    if (*(char *)(v62 + 31) >= 0) {
      uint64_t v52 = v62 + 8;
    }
    *(_DWORD *)long long __p = 67240707;
    *(_DWORD *)&__p[4] = v9;
    *(_WORD *)&__p[8] = 2050;
    *(void *)&__p[10] = v51;
    *(_WORD *)&__p[18] = 2081;
    *(void *)&__p[20] = v52;
    __int16 v53 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::agedTileDeleter(CLTilesSet &, CFAbsoluteTime)", "%s\n", v53);
    if (v53 != (char *)buf) {
      free(v53);
    }
  }
  return sub_1000E0900(v69);
}

void sub_100D1755C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void sub_100D175C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = sub_1000D3D90(a3 - a2);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022F2EC0);
  }
  int v7 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    v9[0] = 68290306;
    v9[1] = 0;
    __int16 v10 = 2082;
    __int16 v11 = "";
    __int16 v12 = 2082;
    BOOL v13 = "elapsed";
    __int16 v14 = 2050;
    uint64_t v15 = a2;
    __int16 v16 = 2050;
    uint64_t v17 = a3;
    __int16 v18 = 2050;
    double v19 = v6;
    __int16 v20 = 2050;
    uint64_t v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLCoarseCellTilesManager::agedTileDeleter\", \"event\":%{public, location:escape_only}s, \"begin_mach\":%{public}llu, \"end_mach\":%{public}llu, \"elapsed_s\":\"%{public}.09f\", \"now_s\":\"%{public}.09f\"}", (uint8_t *)v9, 0x44u);
  }
}

void sub_100D176FC(id a1)
{
  sub_10053B99C(0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  std::string::assign((std::string *)&qword_102481130, [[+[NSString stringWithUTF8String:p_p] stringByAppendingPathComponent:@"tiles_cell"] UTF8String]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_100D17780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D1779C(id a1)
{
}

void sub_100D177B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v3 + 144))
  {
    uint64_t v4 = (int *)(a2 + 4);
    sub_10014F674((uint64_t)&v29, (_DWORD *)(a2 + 4));
    sub_100146674((uint64_t)&v29, -1, 0.0, 0.0, *(double *)(a2 + 152), *(double *)(a2 + 160));
    if (sub_1001447B8(&v29))
    {
      uint64_t v5 = sub_100144000(a2 + 184, &v29);
      uint64_t v6 = v5;
      if (!v5 || !sub_1001453B8(v5, *(unsigned char *)(v3 + 128))) {
        goto LABEL_41;
      }
      double v7 = (*(double (**)(void))(**(void **)(v3 + 168) + 16))(*(void *)(v3 + 168));
      int v8 = sub_100144E3C(v6, v7);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022F2EA0);
      }
      int v9 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        int v10 = *v4;
        sub_100C094CC((uint64_t)&v29);
        __int16 v11 = SHIBYTE(v28) >= 0 ? &__p : (void **)__p;
        *(_DWORD *)std::string buf = 67109634;
        *(_DWORD *)double v34 = v8;
        *(_WORD *)&v34[4] = 1024;
        *(_DWORD *)&v34[6] = (__int16)v10;
        __int16 v35 = 2080;
        BOOL v36 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "TILE: updating mtime, %d, type, %d, tileid, %s", buf, 0x18u);
        if (SHIBYTE(v28) < 0) {
          operator delete(__p);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_41;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022F2EA0);
      }
      int v12 = *v4;
      sub_100C094CC((uint64_t)&v29);
      BOOL v13 = v23 >= 0 ? &v22 : (void **)v22;
      LODWORD(__p) = 67109634;
      HIDWORD(__p) = v8;
      __int16 v25 = 1024;
      int v26 = (__int16)v12;
      __int16 v27 = 2080;
      char v28 = v13;
      __int16 v14 = (char *)_os_log_send_and_compose_impl();
      if (v23 < 0) {
        operator delete(v22);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::updateTileRelevancy()_block_invoke", "%s\n", v14);
      if (v14 == (char *)buf) {
        goto LABEL_41;
      }
    }
    else
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F2E80);
      }
      uint64_t v21 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "CoarseTile, Invalid tile id!, #CloneMe", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_41;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F2E80);
      }
      LOWORD(__p) = 0;
      __int16 v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCoarseCellTilesManager::updateTileRelevancy()_block_invoke", "%s\n", v14);
      if (v14 == (char *)buf) {
        goto LABEL_41;
      }
    }
    free(v14);
LABEL_41:
    if (v32 < 0) {
      operator delete(v31);
    }
    return;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022F2EA0);
  }
  uint64_t v15 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v16 = a2 + 8;
    if (*(char *)(a2 + 31) < 0) {
      uint64_t v16 = *(void *)(a2 + 8);
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)double v34 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "TILE: tiles, %s, not active", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F2EA0);
    }
    uint64_t v19 = *(void *)(a2 + 8);
    uint64_t v18 = a2 + 8;
    uint64_t v17 = v19;
    if (*(char *)(v18 + 23) >= 0) {
      uint64_t v17 = v18;
    }
    unsigned int v29 = 136315138;
    uint64_t v30 = v17;
    __int16 v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCoarseCellTilesManager::updateTileRelevancy()_block_invoke", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
}

void sub_100D17D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100D17D84(uint64_t a1, uint64_t a2)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022F2E80);
  }
  uint64_t v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 134349056;
    uint64_t v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "@TileSched, coarsecell, called, %{public}ld", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F2E80);
    }
    double v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLCoarseCellTilesManager::onScheduledTileDownloadsCallback(CLTileDownloadReachabilityRequirement)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  double v5 = (*(double (**)(void))(**(void **)(a1 + 168) + 16))(*(void *)(a1 + 168));
  return sub_100D10EAC(a1, v5);
}

BOOL sub_100D17F64(uint64_t a1, uint64_t a2)
{
  return sub_100D17D84(a1 - 112, a2);
}

void sub_100D17F6C()
{
}

void sub_100D18028(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_100D18064(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_1022F3040;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    int v12 = a3;
  }
  else {
    int v12 = (uint64_t *)*a3;
  }
  id v13 = [objc_msgSend(a4, "vendor") proxyForService:[NSString stringWithUTF8String:v12]];
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:objc_msgSend(a4, "silo")];
  return a1;
}

id sub_100D18148(uint64_t a1)
{
  id v2 = [+[CLServiceVendor sharedInstance] proxyForService:@"CLCoarseCellTilesManager"];

  return [v2 syncgetDoSync:a1];
}

void sub_100D18194(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        uint64_t v9 = (uint64_t *)v4;
      }
      else {
        uint64_t v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)std::string buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022F2E60);
      }
      int v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        __int16 v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          __int16 v11 = (void *)*v11;
        }
        *(_DWORD *)std::string buf = 136446466;
        uint64_t v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022F2E60);
        }
        int v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          int v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        uint64_t v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLCoarseCellTilesManager_Type::Notification, NotificationData_T = CLCoarseCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_100D18424(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_100D184D8(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_100D18520(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_100D18568(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_100D185B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_102474280);
}

BOOL sub_100D185DC(uint64_t a1, int a2, int *a3, char *a4)
{
  int v40 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      uint64_t v39 = v10;
      int v16 = *a3;
      uint64_t v19 = *(void *)(v10 + 48);
      uint64_t v18 = v10 + 48;
      uint64_t v17 = v19;
      if (!v19) {
        goto LABEL_31;
      }
      uint64_t v20 = v18;
      do
      {
        int v21 = *(_DWORD *)(v17 + 28);
        BOOL v22 = v21 < v16;
        if (v21 >= v16) {
          char v23 = (uint64_t *)v17;
        }
        else {
          char v23 = (uint64_t *)(v17 + 8);
        }
        if (!v22) {
          uint64_t v20 = v17;
        }
        uint64_t v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28)) {
LABEL_31:
      }
        uint64_t v20 = v18;
      uint64_t v24 = *(void *)(a1 + 64);
      if (!v24) {
        goto LABEL_42;
      }
      uint64_t v25 = a1 + 64;
      do
      {
        int v26 = *(_DWORD *)(v24 + 32);
        BOOL v27 = v26 < v16;
        if (v26 >= v16) {
          char v28 = (uint64_t *)v24;
        }
        else {
          char v28 = (uint64_t *)(v24 + 8);
        }
        if (!v27) {
          uint64_t v25 = v24;
        }
        uint64_t v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(void *)int v41 = v25;
        uint64_t v34 = *(void *)(v25 + 56);
        char v35 = *a4;
        *(void *)std::string buf = &v40;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v25 + 40), &v40, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v35;
        buf[0] = 0;
        memset(&buf[4], 0, 48);
        *(_OWORD *)std::string __p = 0u;
        long long v46 = 0u;
        char v47 = 0;
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_100D1AFBC();
        }
        if (SBYTE11(v46) < 0) {
          operator delete(*(void **)((char *)__p + 4));
        }
        if (SBYTE3(__p[0]) < 0) {
          operator delete(*(void **)&buf[32]);
        }
        if ((buf[31] & 0x80000000) != 0) {
          operator delete(*(void **)&buf[8]);
        }
        if (v34) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        *(void *)int v41 = a1 + 64;
        char v29 = byte_102474281;
        int v38 = v16;
        *(void *)std::string buf = &v38;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v29;
        int v38 = *a3;
        *(void *)std::string buf = &v38;
        uint64_t v30 = sub_10044715C((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        uint64_t v31 = (std::__shared_weak_count *)v30[9];
        v30[8] = 0;
        v30[9] = 0;
        if (v31) {
          sub_1000DB0A0(v31);
        }
        char v32 = *a4;
        int v38 = *a3;
        *(void *)std::string buf = &v38;
        int v33 = sub_10044715C((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)std::string buf = &v40;
        *((unsigned char *)sub_1000EB1B8(v33 + 5, &v40, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v20 == v18)
      {
        *(_DWORD *)std::string buf = *a3;
        sub_1000EDED4((uint64_t **)(v39 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F2E60);
  }
  id v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v15 = (void *)*v15;
    }
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F2E60);
    }
    BOOL v36 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      BOOL v36 = (void *)*v36;
    }
    *(_DWORD *)int v41 = 136446466;
    *(void *)&v41[4] = v36;
    __int16 v42 = 1026;
    int v43 = v40;
    uint64_t v37 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLCoarseCellTilesManager_Type::Notification, NotificationData_T = CLCoarseCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v37 != buf) {
      free(v37);
    }
    return 0;
  }
  return result;
}

void sub_100D18AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_100C52374((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100D18AF0(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        int v21 = (uint64_t *)v15;
      }
      else {
        int v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F2E60);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022F2E60);
      }
      BOOL v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLCoarseCellTilesManager_Type::Notification, NotificationData_T = CLCoarseCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_100D18D74(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            BOOL v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                BOOL v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022F2E60);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                BOOL v27 = a1 + 8;
                if (a1[31] < 0) {
                  BOOL v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  char v28 = __p;
                }
                else {
                  char v28 = (void **)__p[0];
                }
                *(_DWORD *)std::string buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                char v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022F2E60);
                }
                char v29 = a1 + 8;
                if (a1[31] < 0) {
                  char v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  uint64_t v30 = buf;
                }
                else {
                  uint64_t v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                int v38 = v29;
                __int16 v39 = 2082;
                int v40 = v30;
                uint64_t v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLCoarseCellTilesManager_Type::Notification, NotificationData_T = CLCoarseCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_100D19148(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v7 = *a2;
  uint64_t v8 = v3;
  do
  {
    int v9 = *(_DWORD *)(v4 + 32);
    BOOL v10 = v9 < v7;
    if (v9 >= v7) {
      int v11 = (uint64_t *)v4;
    }
    else {
      int v11 = (uint64_t *)(v4 + 8);
    }
    if (!v10) {
      uint64_t v8 = v4;
    }
    uint64_t v4 = *v11;
  }
  while (*v11);
  if (v8 == v3) {
    return 0;
  }
  if (v7 < *(_DWORD *)(v8 + 32)) {
    return 0;
  }
  uint64_t v12 = *(void *)(v8 + 64);
  if (!v12) {
    return 0;
  }
  *(void *)a3 = *(void *)v12;
  std::string::operator=((std::string *)(a3 + 8), (const std::string *)(v12 + 8));
  std::string::operator=((std::string *)(a3 + 32), (const std::string *)(v12 + 32));
  std::string::operator=((std::string *)(a3 + 56), (const std::string *)(v12 + 56));
  char v13 = *(unsigned char *)(v12 + 84);
  *(_DWORD *)(a3 + 80) = *(_DWORD *)(v12 + 80);
  *(unsigned char *)(a3 + 84) = v13;
  return 1;
}

uint64_t sub_100D191F8(uint64_t a1, int *a2, uint64_t a3)
{
  sub_100D1A818(a3, &v10);
  int v9 = *a2;
  int v11 = &v9;
  uint64_t v5 = sub_10044715C((uint64_t **)(a1 + 56), &v9, (uint64_t)&unk_101D0B290, &v11);
  long long v6 = v10;
  long long v10 = 0uLL;
  int v7 = (std::__shared_weak_count *)v5[9];
  *((_OWORD *)v5 + 4) = v6;
  if (v7)
  {
    sub_1000DB0A0(v7);
    if (*((void *)&v10 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  return 1;
}

void sub_100D1928C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D192A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[0] = 0;
  *(_OWORD *)uint64_t v5 = 0u;
  memset(v6, 0, sizeof(v6));
  *(_OWORD *)std::string __p = 0u;
  long long v8 = 0u;
  char v9 = 0;
  (*(void (**)(uint64_t, uint64_t, unsigned char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, v4, a3, a4, 0);
  if (SBYTE11(v8) < 0) {
    operator delete(*(void **)((char *)__p + 4));
  }
  if (SBYTE3(__p[0]) < 0) {
    operator delete(*(void **)((char *)&v6[1] + 4));
  }
  if (SBYTE3(v6[1]) < 0) {
    operator delete(*(void **)((char *)v5 + 4));
  }
}

void sub_100D1934C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100C52374((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100D19360(uint64_t a1, unsigned int *a2, uint64_t a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  long long v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F2E60);
  }
  char v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    long long v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)std::string buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2082;
    *(void *)&buf[20] = "activity";
    __int16 v23 = 2082;
    BOOL v24 = v10;
    __int16 v25 = 2050;
    int v26 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    BOOL v27 = v28;
    memset(v28, 0, sizeof(v28));
    char v29 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v27);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v26) {
      sub_1000DB0A0(v26);
    }
    sub_1000F5BB0((uint64_t)&buf[8], *(void **)&buf[16]);
    if (v29) {
      sub_1000DB0A0(v29);
    }
    sub_1000F5BB0((uint64_t)&v27, v28[0]);
  }
  if (!a4)
  {
    uint64_t v20 = (std::__shared_weak_count *)v14[9];
    v14[8] = 0;
    v14[9] = 0;
    if (!v20) {
      goto LABEL_29;
    }
LABEL_28:
    sub_1000DB0A0(v20);
    goto LABEL_29;
  }
  sub_100D1A818(a3, buf);
  long long v18 = *(_OWORD *)buf;
  *(void *)std::string buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  int v19 = (std::__shared_weak_count *)v14[9];
  *((_OWORD *)v14 + 4) = v18;
  if (v19)
  {
    sub_1000DB0A0(v19);
    uint64_t v20 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]) {
      goto LABEL_28;
    }
  }
LABEL_29:
  if (v14[7]) {
    sub_100D1A25C();
  }
  os_activity_scope_leave(&state);
}

void sub_100D19930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_100D1997C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F2E60);
    }
    id v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)std::string buf = 136315138;
      BOOL v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022F2E60);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLCoarseCellTilesManager_Type::Notification, NotificationData_T = CLCoarseCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F2E60);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      long long v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        long long v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)std::string buf = 136315394;
      BOOL v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022F2E60);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLCoarseCellTilesManager_Type::Notification, NotificationData_T = CLCoarseCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    long long v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        char v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_1022F2E60);
            }
            long long v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)std::string buf = 136315650;
              BOOL v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022F2E60);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLCoarseCellTilesManager_Type::Notification, NotificationData_T = CLCoarseCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                char v9 = v15;
              }
              while (!v16);
            }
            char v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        long long v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            long long v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            long long v8 = v19;
          }
          while (!v16);
        }
        long long v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_100D19F2C(uint64_t a1)
{
  sub_100D1AF4C(a1);

  operator delete();
}

id sub_100D19F64(uint64_t a1, int a2, void *a3)
{
  id result = sub_100D1AAFC(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_100D19FB4(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100D19FE4(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100D1A014(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100D1A044(void ***a1)
{
  uint64_t v1 = *a1;
  id v2 = (uint64_t *)**a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
        sub_100D0F390(--v4, 0);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_100D1A0CC(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100D1A0FC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_10014F400(a2 + 24, *(char **)(a2 + 32));
    sub_1008B4894(a2, *(void **)(a2 + 8));
    operator delete();
  }
}

uint64_t sub_100D1A160(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 304);
  *(void *)(a1 + 304) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 296);
  *(void *)(a1 + 296) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(char *)(a1 + 271) < 0) {
    operator delete(*(void **)(a1 + 248));
  }
  sub_10051310C(a1 + 232);
  sub_10014F400(a1 + 208, *(char **)(a1 + 216));
  sub_1008B4894(a1 + 184, *(void **)(a1 + 192));
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_100D1A25C()
{
}

void sub_100D1A30C()
{
}

void sub_100D1A330(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      char v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          int v12 = (uint64_t *)v4;
        }
        else {
          int v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          char v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        uint64_t v49 = v9;
        id v13 = sub_100D1AAFC(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            int v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                BOOL v22 = (uint64_t *)v17;
              }
              else {
                BOOL v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                int v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              uint64_t v48 = v19;
              sub_100D1A720(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              char v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  char v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              uint64_t v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                char v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    char v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  int v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      int v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      char v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              uint64_t v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022F2E60);
              }
              BOOL v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)std::string buf = 136446466;
                unsigned int v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022F2E60);
                }
                double v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  double v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                uint64_t v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                char v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLCoarseCellTilesManager_Type::Notification, CLCoarseCellTilesManager_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLCoarseCellTilesManager_Type::Notification, NotificationData_T = CLCoarseCellTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_100D1A720(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_100D1AAFC(a4);
    uint64_t v10 = *(void *)a3 + 80;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40);
    uint64_t v14 = (int *)(*(void *)a2 + 32);
    int v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    id result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4, v13];
    }
  }
  return result;
}

void *sub_100D1A818@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x70uLL);
  id result = sub_100D1A874(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100D1A860(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100D1A874(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022F2FD0;
  sub_100D1A970((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_100D1A8BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100D1A8D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022F2FD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100D1A8F0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022F2FD0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100D1A944(uint64_t a1)
{
  sub_100C55D44((uint64_t)&v1, a1 + 24);
}

uint64_t sub_100D1A970(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 32), *(void **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  int v6 = (unsigned char *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    sub_1000DC48C(v6, *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)int v6 = v7;
  }
  int v8 = *(_DWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = v8;
  return a1;
}

void sub_100D1AA44(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D1AA78(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    if (*(char *)(v1 + 79) < 0) {
      operator delete(*(void **)(v1 + 56));
    }
    if (*(char *)(v1 + 55) < 0) {
      operator delete(*(void **)(v1 + 32));
    }
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

id sub_100D1AAFC(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return sub_100D1AB5C(a1);
}

id sub_100D1AB5C(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022F3010);
      }
      uint64_t v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D8C235 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLCoarseCellTilesManager_Type::NotificationData, Callbacunint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022F3010);
      }
      long long v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D8C235 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1022F3010);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

void sub_100D1AF1C(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_100D1AF4C(uint64_t a1)
{
  *(void *)a1 = off_1022F3040;
  id v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  *id v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_100D1AFBC()
{
}

void sub_100D1B06C()
{
}

uint64_t sub_100D1B090(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    if (*(char *)(v1 + 79) < 0) {
      operator delete(*(void **)(v1 + 56));
    }
    if (*(char *)(v1 + 55) < 0) {
      operator delete(*(void **)(v1 + 32));
    }
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

void sub_100D1B114()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_100D1B194()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_100D1B224(_Unwind_Exception *a1)
{
}

void sub_100D1B23C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D8C070;
      v0[3] = unk_101D8C080;
      v0[4] = xmmword_101D8C090;
      v0[0] = xmmword_101D8C050;
      v0[1] = unk_101D8C060;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_100D1B31C(_Unwind_Exception *a1)
{
}

uint64_t sub_100D1B334()
{
  sub_100134750(qword_102481100, "t");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102481100, (void *)&_mh_execute_header);
}

void sub_100D1B394(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)a1 = a3;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 96) = 0;
  operator new[]();
}

void sub_100D1B494(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 103) < 0) {
    operator delete(*(void **)(v1 + 80));
  }
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 56) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D1B4C0(uint64_t a1)
{
  id v2 = *(uint64_t **)(a1 + 48);
  for (uint64_t i = *(uint64_t **)(a1 + 56); v2 != i; ++v2)
  {
    if (*v2)
    {
      sub_100D2EF3C(*v2);
      uint64_t i = *(uint64_t **)(a1 + 56);
    }
  }
}

void sub_100D1B508(uint64_t a1, const char *a2)
{
  sub_100D1B4C0(a1);
  *(void *)&__nitems[3] = 0;
  *(_DWORD *)&__nitems[1] = 0;
  long long v4 = fopen(a2, "rb");
  if (!v4)
  {
    if (qword_102419050 != -1) {
      dispatch_once(&qword_102419050, &stru_1022F30B8);
    }
    __int16 v11 = qword_102419058;
    if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Could not open prototype file", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419050 != -1) {
        dispatch_once(&qword_102419050, &stru_1022F30B8);
      }
      LOWORD(__ptr[0]) = 0;
      unint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPrototypeSet::readFromFile(const char *)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    goto LABEL_52;
  }
  long long v5 = v4;
  size_t v6 = fread(&__nitems[5], 4uLL, 1uLL, v4);
  int v7 = *(_DWORD *)&__nitems[5];
  if (v6 == 1 && *(_DWORD *)&__nitems[5] == 1611526157)
  {
    if (fread(&__nitems[2], 2uLL, 1uLL, v5) != 1)
    {
      if (qword_102419050 != -1) {
        dispatch_once(&qword_102419050, &stru_1022F30B8);
      }
      int v18 = qword_102419058;
      if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning Error reading number of prototypes", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_51;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419050 != -1) {
        dispatch_once(&qword_102419050, &stru_1022F30B8);
      }
      LOWORD(__ptr[0]) = 0;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPrototypeSet::readFromFile(const char *)", "%s\n", v10);
      goto LABEL_99;
    }
    if (__nitems[2] >= 0x3E8u) {
      unint64_t v13 = 1000;
    }
    else {
      unint64_t v13 = __nitems[2];
    }
    __nitems[2] = v13;
    sub_100D1CE8C(a1 + 48, v13);
    if (!v13)
    {
LABEL_95:
      fclose(v5);
      goto LABEL_53;
    }
    __nitems[0] = 0;
    if (fread((char *)__nitems + 1, 1uLL, 1uLL, v5) == 1)
    {
      uint64_t v14 = HIBYTE(__nitems[0]);
      if (fread(__ptr, 1uLL, HIBYTE(__nitems[0]), v5) == v14)
      {
        if (fread(__nitems, 1uLL, 1uLL, v5) == 1)
        {
          uint64_t v15 = LOBYTE(__nitems[0]);
          if (fread(v30, 1uLL, LOBYTE(__nitems[0]), v5) == v15)
          {
            if (fread(&__nitems[3], 4uLL, 1uLL, v5) == 1)
            {
              if (fread(&__nitems[1], 2uLL, 1uLL, v5) != 1)
              {
                if (qword_102419050 != -1) {
                  dispatch_once(&qword_102419050, &stru_1022F30B8);
                }
                BOOL v16 = qword_102419058;
                if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)std::string buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "You are reading an older prototype file.", buf, 2u);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_102419050 != -1) {
                    dispatch_once(&qword_102419050, &stru_1022F30B8);
                  }
                  LOWORD(v28) = 0;
                  uint64_t v17 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "void CLPrototypeSet::readFromFile(const char *)", "%s\n", v17);
                  if (v17 != (char *)buf) {
                    free(v17);
                  }
                }
                __nitems[1] = 0;
              }
              __int16 v26 = 0;
              if (fread(&v26, 2uLL, 1uLL, v5) == 1) {
                operator new[]();
              }
              if (qword_102419050 != -1) {
                dispatch_once(&qword_102419050, &stru_1022F30B8);
              }
              __int16 v25 = qword_102419058;
              if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)std::string buf = 67240192;
                int v35 = 0;
                _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#Warning Error reading number of accelerometer samples for prototype %{public}d", buf, 8u);
              }
              if (!sub_10013D1A0(115, 2)) {
                goto LABEL_95;
              }
              bzero(buf, 0x65CuLL);
              if (qword_102419050 != -1) {
                dispatch_once(&qword_102419050, &stru_1022F30B8);
              }
              int v28 = 67240192;
              int v29 = 0;
              int v20 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLPrototypeSet::readFromFile(const char *)", "%s\n", v20);
            }
            else
            {
              if (qword_102419050 != -1) {
                dispatch_once(&qword_102419050, &stru_1022F30B8);
              }
              BOOL v24 = qword_102419058;
              if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)std::string buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#Warning Error reading max distance", buf, 2u);
              }
              if (!sub_10013D1A0(115, 2)) {
                goto LABEL_95;
              }
              bzero(buf, 0x65CuLL);
              if (qword_102419050 != -1) {
                dispatch_once(&qword_102419050, &stru_1022F30B8);
              }
              LOWORD(v28) = 0;
              int v20 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLPrototypeSet::readFromFile(const char *)", "%s\n", v20);
            }
            goto LABEL_104;
          }
          if (qword_102419050 != -1) {
            dispatch_once(&qword_102419050, &stru_1022F30B8);
          }
          int v23 = qword_102419058;
          if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 67240192;
            int v35 = 0;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#Warning Error reading rawName of prototype %{public}d", buf, 8u);
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_95;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102419050 == -1) {
            goto LABEL_74;
          }
        }
        else
        {
          if (qword_102419050 != -1) {
            dispatch_once(&qword_102419050, &stru_1022F30B8);
          }
          BOOL v22 = qword_102419058;
          if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 67240192;
            int v35 = 0;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#Warning Error reading rawName length of prototype %{public}d", buf, 8u);
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_95;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102419050 == -1) {
            goto LABEL_74;
          }
        }
        dispatch_once(&qword_102419050, &stru_1022F30B8);
LABEL_74:
        int v28 = 67240192;
        int v29 = 0;
        int v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLPrototypeSet::readFromFile(const char *)", "%s\n", v20);
LABEL_104:
        if (v20 != (char *)buf) {
          free(v20);
        }
        goto LABEL_95;
      }
      if (qword_102419050 != -1) {
        dispatch_once(&qword_102419050, &stru_1022F30B8);
      }
      BOOL v21 = qword_102419058;
      if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67240192;
        int v35 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#Warning Error reading name of prototype %{public}d", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_95;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419050 == -1)
      {
LABEL_60:
        int v28 = 67240192;
        int v29 = 0;
        int v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLPrototypeSet::readFromFile(const char *)", "%s\n", v20);
        goto LABEL_104;
      }
    }
    else
    {
      if (qword_102419050 != -1) {
        dispatch_once(&qword_102419050, &stru_1022F30B8);
      }
      int v19 = qword_102419058;
      if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67240192;
        int v35 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#Warning Error reading name length of prototype %{public}d", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_95;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419050 == -1) {
        goto LABEL_60;
      }
    }
    dispatch_once(&qword_102419050, &stru_1022F30B8);
    goto LABEL_60;
  }
  if (qword_102419050 != -1) {
    dispatch_once(&qword_102419050, &stru_1022F30B8);
  }
  __int16 v9 = qword_102419058;
  if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67240448;
    int v35 = v7;
    __int16 v36 = 1026;
    int v37 = 1611526157;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning Error reading magic number or number (%{public}x) does not match expected number (0x%{public}x)", buf, 0xEu);
  }
  if (!sub_10013D1A0(115, 2)) {
    goto LABEL_51;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102419050 != -1) {
    dispatch_once(&qword_102419050, &stru_1022F30B8);
  }
  __ptr[0] = 67240448;
  __ptr[1] = v7;
  __int16 v32 = 1026;
  int v33 = 1611526157;
  uint64_t v10 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 2, "void CLPrototypeSet::readFromFile(const char *)", "%s\n", v10);
LABEL_99:
  if (v10 != (char *)buf) {
    free(v10);
  }
LABEL_51:
  fclose(v5);
LABEL_52:
  sub_100D1B4C0(a1);
LABEL_53:
  *(_DWORD *)(a1 + 40) = (int)((*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3) / *(_DWORD *)a1;
}

void sub_100D1C700()
{
}

uint64_t sub_100D1C730(uint64_t a1)
{
  if (*(void *)(a1 + 8)) {
    operator delete[]();
  }
  if (*(void *)(a1 + 16)) {
    operator delete[]();
  }
  if (*(void *)(a1 + 24)) {
    operator delete[]();
  }
  if (*(void *)(a1 + 32)) {
    operator delete[]();
  }
  sub_100D1C7F0(a1);
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  id v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_100D1C7F0(uint64_t a1)
{
  uint64_t v3 = *(void **)(a1 + 48);
  uint64_t v1 = *(void **)(a1 + 56);
  for (uint64_t i = a1 + 48; v3 != v1; ++v3)
  {
    if (*v3)
    {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
      uint64_t v1 = *(void **)(a1 + 56);
    }
  }

  sub_100D1CE8C(i, 0);
}

uint64_t sub_100D1C880(unsigned int *a1, __n128 *a2, _DWORD *a3, _DWORD *a4, void *a5, __n128 a6, int8x16_t a7)
{
  unint64_t v12 = (void *)*((void *)a1 + 9);
  if (v12) {
    a6 = sub_100D1CEEC(v12, a2);
  }
  if (*a1 == 1)
  {
    sub_100D1CB00((uint64_t)a1, a2, 0, ((*((void *)a1 + 7) - *((void *)a1 + 6)) >> 3) - 1, *((__int32 **)a1 + 1), *((_DWORD **)a1 + 2), *((uint64_t **)a1 + 4), *((void **)a1 + 3), (int8x16_t)a6, a7);
    unint64_t v13 = (_DWORD *)*((void *)a1 + 2);
    *a3 = **((_DWORD **)a1 + 1);
    *a4 = *v13;
    uint64_t v14 = *((void *)a1 + 4);
    *a5 = **((void **)a1 + 3);
    return *(void *)v14;
  }
  else
  {
    unsigned int v16 = a1[10];
    uint64_t v17 = dispatch_group_create();
    int v18 = (char *)&xmmword_101D8BFFC + 4;
    if ((int)*a1 <= 1)
    {
      global_queue = dispatch_get_global_queue(2, 0);
      unsigned int v22 = 0;
    }
    else
    {
      unsigned int v19 = v16 - 1;
      global_queue = dispatch_get_global_queue(2, 0);
      int v21 = 0;
      unsigned int v22 = 0;
      do
      {
        block[0] = _NSConcreteStackBlock;
        block[1] = 0x40000000;
        block[2] = sub_100D1CE30;
        block[3] = &unk_1022F3058;
        block[4] = a1;
        void block[5] = a2;
        unsigned int v35 = v22;
        unsigned int v36 = v19;
        int v37 = v21;
        dispatch_group_async(v17, global_queue, block);
        unsigned int v22 = v19 + 1;
        v19 += a1[10];
        ++v21;
      }
      while (v21 < (int)(*a1 - 1));
      int v18 = (unsigned char *)(&xmmword_101D8BFFC + 4);
    }
    int v23 = ((*((void *)a1 + 7) - *((void *)a1 + 6)) >> 3) - 1;
    v31[0] = _NSConcreteStackBlock;
    v31[1] = *((void *)v18 + 78);
    v31[2] = sub_100D1CE5C;
    uint64_t v31[3] = &unk_1022F3078;
    v31[4] = a1;
    v31[5] = a2;
    unsigned int v32 = v22;
    int v33 = v23;
    dispatch_group_async(v17, global_queue, v31);
    dispatch_group_wait(v17, 0xFFFFFFFFFFFFFFFFLL);
    dispatch_release(v17);
    BOOL v24 = (uint64_t *)*((void *)a1 + 4);
    uint64_t result = *v24;
    uint64_t v25 = *a1;
    if ((int)v25 >= 2)
    {
      __int16 v26 = (float *)*((void *)a1 + 1);
      float v27 = *v26;
      for (uint64_t i = 1; i != v25; ++i)
      {
        float v29 = v26[i];
        if (v29 < v27)
        {
          uint64_t v30 = *((void *)a1 + 3);
          *a4 = *(_DWORD *)(*((void *)a1 + 2) + 4 * i);
          uint64_t result = v24[i];
          *a5 = *(void *)(v30 + 8 * i);
          float v27 = v29;
        }
      }
    }
  }
  return result;
}

void sub_100D1CB00(uint64_t a1, void *a2, int a3, int a4, __int32 *a5, _DWORD *a6, uint64_t *a7, void *a8, int8x16_t a9, int8x16_t a10)
{
  *a5 = 2139095039;
  *a7 = 0;
  if (a3 <= a4)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 8 * a3;
    int v16 = a4 - a3 + 1;
    a9.i64[0] = 134349570;
    do
    {
      sub_100D2EF4C(*(void *)(*(void *)(a1 + 48) + v15 + 8 * v14), a2, a9, a10);
      float v18 = v17;
      uint64_t v20 = v19;
      float v21 = v17;
      if (sub_100D2EFD0(*(void *)(*(void *)(a1 + 48) + v15 + 8 * v14)) < v17 && v21 != 3.4028e38)
      {
        if (qword_102419050 != -1) {
          dispatch_once(&qword_102419050, &stru_1022F30B8);
        }
        int v23 = qword_102419058;
        if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_DEFAULT))
        {
          double v24 = sub_100D2EFD0(*(void *)(*(void *)(a1 + 48) + v15 + 8 * v14));
          uint64_t v25 = sub_100D2EFB4(*(void *)(*(void *)(a1 + 48) + v15 + 8 * v14));
          *(_DWORD *)std::string buf = 134349570;
          double v30 = v21;
          __int16 v31 = 2050;
          double v32 = v24;
          __int16 v33 = 2082;
          uint64_t v34 = v25;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#Warning Cost of match %{public}f exceeds max of %{public}f allowed for prototype %{public}s", buf, 0x20u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419050 != -1) {
            dispatch_once(&qword_102419050, &stru_1022F30B8);
          }
          sub_100D2EFD0(*(void *)(*(void *)(a1 + 48) + v15 + 8 * v14));
          sub_100D2EFB4(*(void *)(*(void *)(a1 + 48) + v15 + 8 * v14));
          __int16 v26 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLPrototypeSet::addSampleToSubset(const CLDtwSample &, int, int, float &, float &, const char *&, double &)", "%s\n", v26);
          if (v26 != (char *)buf) {
            free(v26);
          }
        }
      }
      a9.i32[0] = *a5;
      if (*(float *)a5 > v21)
      {
        *(float *)a5 = v18;
        *a7 = sub_100D2EFB4(*(void *)(*(void *)(a1 + 48) + v15 + 8 * v14));
        *(float *)a9.i32 = sub_100D2EFD0(*(void *)(*(void *)(a1 + 48) + v15 + 8 * v14));
        *a6 = a9.i32[0];
        *a8 = v20;
      }
      ++v14;
    }
    while (v16 != v14);
  }
}

void sub_100D1CE30(uint64_t a1, int8x16_t a2, int8x16_t a3)
{
  uint64_t v3 = *(void **)(a1 + 32);
  sub_100D1CB00((uint64_t)v3, *(void **)(a1 + 40), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), (__int32 *)(v3[1] + 4 * *(int *)(a1 + 56)), (_DWORD *)(v3[2] + 4 * *(int *)(a1 + 56)), (uint64_t *)(v3[4] + 8 * *(int *)(a1 + 56)), (void *)(v3[3] + 8 * *(int *)(a1 + 56)), a2, a3);
}

void sub_100D1CE5C(uint64_t a1, int8x16_t a2, int8x16_t a3)
{
  uint64_t v3 = *(void **)(a1 + 32);
  sub_100D1CB00((uint64_t)v3, *(void **)(a1 + 40), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), (__int32 *)(v3[1] + 4 * (*(int *)v3 - 1)), (_DWORD *)(v3[2] + 4 * (*(int *)v3 - 1)), (uint64_t *)(v3[4] + 8 * (*(int *)v3 - 1)), (void *)(v3[3] + 8 * (*(int *)v3 - 1)), a2, a3);
}

void sub_100D1CE8C(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    sub_100D1D2B4((void **)a1, a2 - v2);
  }
}

void sub_100D1CEBC(id a1)
{
  qword_102419058 = (uint64_t)os_log_create("com.apple.locationd.Motion", "EarGesture");
}

__n128 sub_100D1CEEC(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100D1CF9C(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  id v8 = (__n128 *)(*(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  __n128 result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  __n128 *v8 = result;
  ++a1[5];
  return result;
}

void sub_100D1CF9C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    id v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    __int16 v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)id v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C(v5, v33);
      unsigned int v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      BOOL v38 = (uint64_t *)a1[1];
      id v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        id v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        BOOL v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)BOOL v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      __int16 v9 = (char *)a1[1];
    }
    id v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    BOOL v44 = (void *)a1[1];
    id v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    __int16 v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      unsigned int v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      id v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        id v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      int v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        id v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __int16 v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  int v53 = operator new(0xFF0uLL);
  sub_1000DA434(&v54, &v53);
  float v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  float v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100D1D268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100D1D2B4(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  unint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      sub_1001D7FD4();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)sub_1000DA54C(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    BOOL v14 = &v13[8 * v10];
    uint64_t v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    uint64_t v16 = &v14[8 * a2];
    uint64_t v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

uint64_t sub_100D1D6C0(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) delegate];
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    id v5 = [*(id *)(a1 + 32) delegate];
    uint64_t v6 = *(void *)(a1 + 32);
    return (uint64_t)_[v5 fsm:v6 didYieldTrack:a2];
  }
  return result;
}

void sub_100D1D958(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_100D1D988(uint64_t *a1)
{
  uint64_t v1 = (uint64_t **)a1;
  unsigned int v2 = *((unsigned __int8 *)a1 + 23);
  if (*((char *)a1 + 23) < 0)
  {
    if ((unint64_t)a1[1] < 6) {
      return 0;
    }
    BOOL v3 = (char *)*a1;
  }
  else
  {
    BOOL v3 = (char *)a1;
    if (v2 < 6) {
      return 0;
    }
  }
  uint64_t result = 0;
  uint64_t v5 = ((((uint64_t)v3[2] << 8) | ((uint64_t)v3[1] << 16) | v3[3]) << 16) | ((uint64_t)v3[4] << 8) | v3[5];
  if (v5 <= 0x5041414343)
  {
    if (v5 <= 0x474E475340)
    {
      if (v5 <= 0x4742475355)
      {
        if (v5 > 0x4742474740)
        {
          BOOL v6 = v5 == 0x4742474741;
          uint64_t v7 = 1111970625;
        }
        else
        {
          BOOL v6 = v5 == 0x4741475341;
          uint64_t v7 = 1095193430;
        }
      }
      else if (v5 <= 0x4749475355)
      {
        BOOL v6 = v5 == 0x4742475356;
        uint64_t v7 = 1112689987;
      }
      else
      {
        BOOL v6 = v5 == 0x4749475356 || v5 == 0x474C475356;
        uint64_t v7 = 1313295955;
      }
      goto LABEL_57;
    }
    if (v5 <= 0x4750524D42)
    {
      if (v5 <= 0x4750475340)
      {
        BOOL v6 = v5 == 0x474E475341;
        uint64_t v7 = 1346848577;
      }
      else
      {
        BOOL v6 = v5 == 0x4750475341 || v5 == 0x4750475356;
        uint64_t v7 = 1346913364;
      }
      goto LABEL_57;
    }
    if (v5 <= 0x4751475340)
    {
      BOOL v6 = v5 == 0x4750524D43;
      uint64_t v7 = 1347834951;
LABEL_57:
      unint64_t v10 = v7 & 0xFFFF0000FFFFFFFFLL | 0x4700000000;
      goto LABEL_58;
    }
    BOOL v6 = v5 == 0x4751475341 || v5 == 0x4751475356;
    unint64_t v10 = 0x494D475341;
LABEL_58:
    if (!v6 && v5 != v10) {
      return result;
    }
    return v5;
  }
  if (v5 <= 0x50514D4530)
  {
    if (v5 > 0x50474C4F51)
    {
      if (v5 == 0x50474C4F52)
      {
        uint64_t result = 0x50474C4F52;
        if ((v2 & 0x80) != 0)
        {
          if ((unint64_t)v1[1] <= 0xB) {
            return result;
          }
          uint64_t v1 = (uint64_t **)*v1;
        }
        else if (v2 <= 0xB)
        {
          return result;
        }
        uint64_t result = ((uint64_t)*((char *)v1 + 10) << 8) | ((uint64_t)*((char *)v1 + 9) << 16) | *((char *)v1 + 11);
        if (result > 5260864)
        {
          if (result <= 5456211)
          {
            if (result > 5265233)
            {
              if (result == 5265234) {
                return result;
              }
              uint64_t v12 = 5392708;
            }
            else
            {
              if (result == 5260865) {
                return result;
              }
              uint64_t v12 = 5260877;
            }
          }
          else if (result <= 5461056)
          {
            if (result == 5456212) {
              return result;
            }
            uint64_t v12 = 5458255;
          }
          else
          {
            if (result == 5461057 || result == 5461571) {
              return result;
            }
            uint64_t v12 = 5590595;
          }
        }
        else if (result <= 4672590)
        {
          if (result > 4606285)
          {
            if (result == 4606286) {
              return result;
            }
            uint64_t v12 = 4606296;
          }
          else
          {
            if (result == 4278083) {
              return result;
            }
            uint64_t v12 = 4412504;
          }
        }
        else if (result <= 5002064)
        {
          if (result == 4672591) {
            return result;
          }
          uint64_t v12 = 4738113;
        }
        else
        {
          if (result == 5002065 || result == 5129559) {
            return result;
          }
          uint64_t v12 = 5133901;
        }
        if (result != v12) {
          return 0x50474C4F52;
        }
        return result;
      }
      BOOL v6 = v5 == 0x5051475341;
      uint64_t v9 = 1363628886;
    }
    else
    {
      BOOL v6 = v5 == 0x5041414344 || v5 == 0x5041474344;
      uint64_t v9 = 1095975748;
    }
LABEL_48:
    unint64_t v10 = v9 & 0xFFFF0000FFFFFFFFLL | 0x5000000000;
    goto LABEL_58;
  }
  if (v5 > 0x5051504452)
  {
    if (v5 > 0x5051584648)
    {
      BOOL v6 = v5 == 0x5051584649 || v5 == 0x515A475341;
      unint64_t v10 = 0x515A475356;
      goto LABEL_58;
    }
    BOOL v6 = v5 == 0x5051504453 || v5 == 0x5051504531;
    uint64_t v9 = 1364215091;
    goto LABEL_48;
  }
  if ((unint64_t)(v5 - 0x50514D4531) <= 6 && v5 != 344961402166) {
    return v5;
  }
  return result;
}

uint64_t sub_100D1DEAC(uint64_t a1)
{
  uint64_t result = 0;
  if (a1 <= 0x4750474740)
  {
    if (a1 > 0x4742474740)
    {
      if (a1 <= 0x4742524D42)
      {
        if (a1 == 0x4742474741 || a1 == 0x4742475341) {
          return 1;
        }
        uint64_t v5 = 1111970646;
      }
      else if (a1 > 0x474C475355)
      {
        if (a1 == 0x474C475356) {
          return 1;
        }
        uint64_t v5 = 1313297217;
      }
      else
      {
        if (a1 == 0x4742524D43) {
          return 1;
        }
        uint64_t v5 = 1229411158;
      }
    }
    else
    {
      if (a1 <= 5456211)
      {
        if (a1 == 4278083 || a1 == 4412504) {
          return 1;
        }
        unint64_t v4 = 4738113;
LABEL_41:
        if (a1 != v4) {
          return result;
        }
        return 1;
      }
      if (a1 <= 5461570)
      {
        if (a1 != 5456212)
        {
          unint64_t v4 = 5461057;
          goto LABEL_41;
        }
        return 1;
      }
      if (a1 == 5461571) {
        return 1;
      }
      uint64_t v5 = 1095193430;
    }
LABEL_36:
    unint64_t v4 = v5 & 0xFFFF0000FFFFFFFFLL | 0x4700000000;
    goto LABEL_41;
  }
  if (a1 <= 0x50514D4530)
  {
    if (a1 > 0x4750524D42)
    {
      if (a1 == 0x4750524D43 || a1 == 0x4751475356) {
        return 1;
      }
      unint64_t v7 = 1095975748;
      goto LABEL_40;
    }
    if (a1 == 0x4750474741 || a1 == 0x4750475341) {
      return 1;
    }
    uint64_t v5 = 1346851670;
    goto LABEL_36;
  }
  if (a1 > 0x5051504452)
  {
    if (a1 > 0x5051504532)
    {
      if (a1 != 0x5051584649)
      {
        uint64_t v6 = 17715;
        goto LABEL_39;
      }
    }
    else if (a1 != 0x5051504453)
    {
      uint64_t v6 = 17713;
LABEL_39:
      unint64_t v7 = v6 & 0xFFFFFFFF0000FFFFLL | 0x51500000;
LABEL_40:
      unint64_t v4 = v7 & 0xFFFF0000FFFFFFFFLL | 0x5000000000;
      goto LABEL_41;
    }
    return 1;
  }
  unint64_t v3 = a1 - 0x50514D4531;
  if (v3 <= 6 && ((1 << v3) & 0x5B) != 0) {
    return 1;
  }
  return result;
}

void sub_100D1E134(unsigned __int8 *a1@<X0>, std::string *a2@<X8>)
{
  unsigned int v2 = a1;
  if (((char)a1[23] & 0x80000000) == 0)
  {
    std::string::size_type v4 = a1[23];
    if (!a1[23])
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *((void *)a1 + 2);
      return;
    }
    goto LABEL_5;
  }
  std::string::size_type v4 = *((void *)a1 + 1);
  if (v4)
  {
LABEL_5:
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    std::string::reserve(a2, v4);
    uint64_t v5 = *((void *)v2 + 1);
    if ((v2[23] & 0x80u) == 0)
    {
      uint64_t v6 = v2[23];
    }
    else
    {
      unsigned int v2 = *(unsigned __int8 **)v2;
      uint64_t v6 = v5;
    }
    for (; v6; --v6)
    {
      int v7 = *v2;
      if (v7 != 10 && v7 != 13) {
        std::string::push_back(a2, v7);
      }
      ++v2;
    }
    return;
  }
  uint64_t v9 = *(void **)a1;

  sub_1000DC48C(a2, v9, 0);
}

void sub_100D1E20C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D1E22C(unsigned __int8 *a1, int a2)
{
  sub_100D1E134(a1, &__p);
  uint64_t v3 = sub_100D1D988((uint64_t *)&__p);
  int v4 = sub_100D1DEAC(v3);
  if (sub_100D1F314(v3))
  {
    if (v4)
    {
      if (v3 == 0x4750475341)
      {
        if (qword_102419470 != -1) {
          dispatch_once(&qword_102419470, &stru_1022F3120);
        }
        uint64_t v5 = qword_102419478;
        if (os_log_type_enabled((os_log_t)qword_102419478, OS_LOG_TYPE_DEFAULT))
        {
          double v6 = sub_10016C458();
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)std::string buf = 134218499;
          *(double *)long long v32 = v6;
          *(_WORD *)&v32[8] = 1026;
          *(_DWORD *)&v32[10] = a2;
          __int16 v33 = 2081;
          uint64_t v34 = p_p;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%.1lf,%{public}c,NMEA:%{private}s", buf, 0x1Cu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419470 != -1) {
            dispatch_once(&qword_102419470, &stru_1022F3120);
          }
          double v8 = sub_10016C458();
          uint64_t v9 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          int v27 = 134218499;
          *(double *)uint64_t v28 = v8;
          *(_WORD *)&v28[8] = 1026;
          *(_DWORD *)&v28[10] = a2;
          __int16 v29 = 2081;
          long long v30 = v9;
          unint64_t v10 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "v lg(s, c)", "%s\n", v10);
          goto LABEL_30;
        }
        goto LABEL_75;
      }
      if (qword_102419470 != -1) {
        dispatch_once(&qword_102419470, &stru_1022F3120);
      }
      unint64_t v22 = qword_102419478;
      if (os_log_type_enabled((os_log_t)qword_102419478, OS_LOG_TYPE_INFO))
      {
        uint64_t v23 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v23 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 67240451;
        *(_DWORD *)long long v32 = a2;
        *(_WORD *)&v32[4] = 2081;
        *(void *)&v32[6] = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "%{public}c,NMEA:%{private}s", buf, 0x12u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_75;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419470 != -1) {
        dispatch_once(&qword_102419470, &stru_1022F3120);
      }
      uint64_t v18 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
    }
    else
    {
      if (qword_102419470 != -1) {
        dispatch_once(&qword_102419470, &stru_1022F3120);
      }
      uint64_t v16 = qword_102419478;
      if (os_log_type_enabled((os_log_t)qword_102419478, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v17 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 67240451;
        *(_DWORD *)long long v32 = a2;
        *(_WORD *)&v32[4] = 2081;
        *(void *)&v32[6] = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "%{public}c,NMEA:%{private}s", buf, 0x12u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_75;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419470 != -1) {
        dispatch_once(&qword_102419470, &stru_1022F3120);
      }
      uint64_t v18 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
    }
    int v27 = 67240451;
    *(_DWORD *)uint64_t v28 = a2;
    *(_WORD *)&uint64_t v28[4] = 2081;
    *(void *)&void v28[6] = v18;
    unint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "v lg(s, c)", "%s\n", v10);
LABEL_83:
    if (v10 == (char *)buf) {
      goto LABEL_75;
    }
    goto LABEL_84;
  }
  if (!v4)
  {
    if (qword_102419470 != -1) {
      dispatch_once(&qword_102419470, &stru_1022F3120);
    }
    uint64_t v19 = qword_102419478;
    if (os_log_type_enabled((os_log_t)qword_102419478, OS_LOG_TYPE_DEBUG))
    {
      int64_t v20 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int64_t v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 67240450;
      *(_DWORD *)long long v32 = a2;
      *(_WORD *)&v32[4] = 2082;
      *(void *)&v32[6] = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "%{public}c,NMEA:%{public}s", buf, 0x12u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_75;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419470 != -1) {
      dispatch_once(&qword_102419470, &stru_1022F3120);
    }
    uint64_t v21 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    goto LABEL_82;
  }
  if (v3 != 5461057)
  {
    if (qword_102419470 != -1) {
      dispatch_once(&qword_102419470, &stru_1022F3120);
    }
    uint64_t v24 = qword_102419478;
    if (os_log_type_enabled((os_log_t)qword_102419478, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v25 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unint64_t v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 67240450;
      *(_DWORD *)long long v32 = a2;
      *(_WORD *)&v32[4] = 2082;
      *(void *)&v32[6] = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%{public}c,NMEA:%{public}s", buf, 0x12u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_75;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419470 != -1) {
      dispatch_once(&qword_102419470, &stru_1022F3120);
    }
    uint64_t v21 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
LABEL_82:
    int v27 = 67240450;
    *(_DWORD *)uint64_t v28 = a2;
    *(_WORD *)&uint64_t v28[4] = 2082;
    *(void *)&void v28[6] = v21;
    unint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "v lg(s, c)", "%s\n", v10);
    goto LABEL_83;
  }
  if (qword_102419470 != -1) {
    dispatch_once(&qword_102419470, &stru_1022F3120);
  }
  uint64_t v11 = qword_102419478;
  if (os_log_type_enabled((os_log_t)qword_102419478, OS_LOG_TYPE_DEFAULT))
  {
    double v12 = sub_10016C458();
    uint64_t v13 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 134218498;
    *(double *)long long v32 = v12;
    *(_WORD *)&v32[8] = 1026;
    *(_DWORD *)&v32[10] = a2;
    __int16 v33 = 2082;
    uint64_t v34 = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%.1lf,%{public}c,NMEA:%{public}s", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419470 != -1) {
      dispatch_once(&qword_102419470, &stru_1022F3120);
    }
    double v14 = sub_10016C458();
    uint64_t v15 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    int v27 = 134218498;
    *(double *)uint64_t v28 = v14;
    *(_WORD *)&v28[8] = 1026;
    *(_DWORD *)&v28[10] = a2;
    __int16 v29 = 2082;
    long long v30 = v15;
    unint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "v lg(s, c)", "%s\n", v10);
LABEL_30:
    if (v10 == (char *)buf) {
      goto LABEL_75;
    }
LABEL_84:
    free(v10);
  }
LABEL_75:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_100D1EC10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D1EC5C(unsigned __int8 *a1)
{
}

void sub_100D1EC64(unsigned __int8 *a1)
{
}

void sub_100D1EC70(unsigned __int8 *a1, int a2)
{
  sub_100D1E134(a1, &__p);
  uint64_t v3 = sub_100D1D988((uint64_t *)&__p);
  int v4 = sub_100D1DEAC(v3);
  if (!sub_100D1F314(v3))
  {
    if (v4)
    {
      if (qword_102419470 != -1) {
        dispatch_once(&qword_102419470, &stru_1022F3120);
      }
      uint64_t v9 = qword_102419478;
      if (os_log_type_enabled((os_log_t)qword_102419478, OS_LOG_TYPE_DEFAULT))
      {
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 136446466;
        unint64_t v22 = p_p;
        __int16 v23 = 1026;
        int v24 = a2;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "STARK,NMEA:%{public}s,sampleCount,%{public}d", buf, 0x12u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_47;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419470 != -1) {
        dispatch_once(&qword_102419470, &stru_1022F3120);
      }
      uint64_t v11 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
    }
    else
    {
      if (qword_102419470 != -1) {
        dispatch_once(&qword_102419470, &stru_1022F3120);
      }
      double v14 = qword_102419478;
      if (os_log_type_enabled((os_log_t)qword_102419478, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v15 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 136446466;
        unint64_t v22 = v15;
        __int16 v23 = 1026;
        int v24 = a2;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "STARK,NMEA:%{public}s,sampleCount,%{public}d", buf, 0x12u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_47;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419470 != -1) {
        dispatch_once(&qword_102419470, &stru_1022F3120);
      }
      uint64_t v11 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
    }
    int v17 = 136446466;
    uint64_t v18 = v11;
    __int16 v19 = 1026;
    int v20 = a2;
    double v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "v lg(s, i)", "%s\n", v8);
LABEL_55:
    if (v8 != (char *)buf) {
      free(v8);
    }
    goto LABEL_47;
  }
  if (v4)
  {
    if (qword_102419470 != -1) {
      dispatch_once(&qword_102419470, &stru_1022F3120);
    }
    uint64_t v5 = qword_102419478;
    if (os_log_type_enabled((os_log_t)qword_102419478, OS_LOG_TYPE_INFO))
    {
      double v6 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        double v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136380931;
      unint64_t v22 = v6;
      __int16 v23 = 1026;
      int v24 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "STARK,NMEA:%{private}s,sampleCount,%{public}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419470 != -1) {
        dispatch_once(&qword_102419470, &stru_1022F3120);
      }
      int v7 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
LABEL_14:
      int v17 = 136380931;
      uint64_t v18 = v7;
      __int16 v19 = 1026;
      int v20 = a2;
      double v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "v lg(s, i)", "%s\n", v8);
      goto LABEL_55;
    }
  }
  else
  {
    if (qword_102419470 != -1) {
      dispatch_once(&qword_102419470, &stru_1022F3120);
    }
    double v12 = qword_102419478;
    if (os_log_type_enabled((os_log_t)qword_102419478, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136380931;
      unint64_t v22 = v13;
      __int16 v23 = 1026;
      int v24 = a2;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "STARK,NMEA:%{private}s,sampleCount,%{public}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419470 != -1) {
        dispatch_once(&qword_102419470, &stru_1022F3120);
      }
      int v7 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      goto LABEL_14;
    }
  }
LABEL_47:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_100D1F2E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D1F314(uint64_t a1)
{
  uint64_t result = 1;
  if (a1 <= 0x4750484453)
  {
    if (a1 <= 5260864)
    {
      if (a1 > 4672590)
      {
        if (a1 > 5129558)
        {
          if (a1 == 5129559) {
            return 0;
          }
          unint64_t v3 = 5133901;
        }
        else
        {
          if (a1 == 4672591) {
            return 0;
          }
          unint64_t v3 = 4738113;
        }
      }
      else if (a1 > 4606285)
      {
        if (a1 == 4606286) {
          return 0;
        }
        unint64_t v3 = 4606296;
      }
      else
      {
        if (a1 == 4278083) {
          return 0;
        }
        unint64_t v3 = 4412504;
      }
    }
    else if (a1 <= 5456211)
    {
      if (a1 > 5265233)
      {
        if (a1 == 5265234) {
          return 0;
        }
        unint64_t v3 = 5392708;
      }
      else
      {
        if (a1 == 5260865) {
          return 0;
        }
        unint64_t v3 = 5260877;
      }
    }
    else
    {
      if (a1 > 5461056)
      {
        if (a1 != 5461057 && a1 != 5461571)
        {
          unint64_t v3 = 5590595;
          goto LABEL_45;
        }
        return 0;
      }
      if (a1 == 5456212) {
        return 0;
      }
      unint64_t v3 = 5458255;
    }
LABEL_45:
    if (a1 != v3) {
      return result;
    }
    return 0;
  }
  if (a1 <= 0x50514D4530)
  {
    if (a1 > 0x5041474343)
    {
      if (a1 == 0x5041474344 || a1 == 0x5041534344) {
        return 0;
      }
      unint64_t v5 = 1363628865;
    }
    else
    {
      if (a1 == 0x4750484454 || a1 == 0x4750565447) {
        return 0;
      }
      unint64_t v5 = 1094796100;
    }
LABEL_42:
    unint64_t v3 = v5 & 0xFFFF0000FFFFFFFFLL | 0x5000000000;
    goto LABEL_45;
  }
  if (a1 > 0x5051504452)
  {
    if (a1 > 0x5051504532)
    {
      if (a1 == 0x515A475341) {
        return 0;
      }
      uint64_t v6 = 17715;
    }
    else
    {
      if (a1 == 0x5051504453) {
        return 0;
      }
      uint64_t v6 = 17713;
    }
    unint64_t v5 = v6 & 0xFFFFFFFF0000FFFFLL | 0x51500000;
    goto LABEL_42;
  }
  unint64_t v4 = a1 - 0x50514D4531;
  if (v4 <= 6 && v4 != 5) {
    return 0;
  }
  return result;
}

void sub_100D1F5B8(id a1)
{
  qword_102419478 = (uint64_t)os_log_create("com.apple.locationd.Position", "NMEA");
}

void *sub_100D1F5E8(void *result, unsigned int a2)
{
  result[2] = 0;
  *uint64_t result = off_1022F3150;
  result[1] = result + 2;
  result[3] = 0;
  result[4] = result + 4;
  result[5] = result + 4;
  result[6] = 0;
  result[7] = a2;
  return result;
}

void sub_100D1F624(uint64_t a1@<X0>, uint64_t **a2@<X1>, void *a3@<X8>)
{
  __int16 v23 = 0;
  uint64_t v24 = 0;
  uint64_t v21 = 0;
  unint64_t v22 = (uint64_t *)&v23;
  __int16 v19 = (uint64_t *)&v20;
  int v20 = 0;
  int v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = (uint64_t *)&v17;
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    uint64_t v6 = a1 + 8;
    do
    {
      sub_100D1F878(v6, v4, (uint64_t)v25);
      if (v25[0])
      {
        if (v26[20]) {
          sub_100D1FEE8(&v16, v4, v4, (uint64_t)v26);
        }
        else {
          sub_100589490(&v19, v4, v4);
        }
      }
      else
      {
        sub_100589490(&v22, v4, v4);
      }
      ++v4;
    }
    while (v4 != v5);
  }
  a3[1] = 0;
  int v7 = a3 + 1;
  a3[2] = 0;
  a3[4] = 0;
  double v8 = a3 + 4;
  *a3 = a3 + 1;
  a3[3] = a3 + 4;
  a3[5] = 0;
  a3[7] = 0;
  uint64_t v9 = a3 + 7;
  a3[6] = a3 + 7;
  a3[8] = 0;
  sub_1000F5BB0((uint64_t)a3, 0);
  unint64_t v10 = v23;
  *a3 = v22;
  a3[1] = v10;
  uint64_t v11 = v24;
  a3[2] = v24;
  if (v11)
  {
    v10[2] = v7;
    unint64_t v22 = (uint64_t *)&v23;
    __int16 v23 = 0;
    uint64_t v24 = 0;
  }
  else
  {
    *a3 = v7;
  }
  sub_1000F5BB0((uint64_t)(a3 + 3), (void *)a3[4]);
  double v12 = v20;
  a3[3] = v19;
  a3[4] = v12;
  uint64_t v13 = v21;
  a3[5] = v21;
  if (v13)
  {
    _OWORD v12[2] = v8;
    __int16 v19 = (uint64_t *)&v20;
    int v20 = 0;
    uint64_t v21 = 0;
  }
  else
  {
    a3[3] = v8;
  }
  sub_1000F5BB0((uint64_t)(a3 + 6), (void *)a3[7]);
  double v14 = v17;
  a3[6] = v16;
  a3[7] = v14;
  uint64_t v15 = v18;
  a3[8] = v18;
  if (v15)
  {
    int v14[2] = v9;
    uint64_t v16 = (uint64_t *)&v17;
    int v17 = 0;
    uint64_t v18 = 0;
    double v14 = 0;
  }
  else
  {
    a3[6] = v9;
  }
  sub_1000F5BB0((uint64_t)&v16, v14);
  sub_1000F5BB0((uint64_t)&v19, v20);
  sub_1000F5BB0((uint64_t)&v22, v23);
}

void sub_100D1F840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, char a12, void *a13, uint64_t a14, char a15, void *a16)
{
}

void *sub_100D1F878@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_100529674(a1, a2);
  if ((void *)(a1 + 8) == result)
  {
    char v18 = 0;
  }
  else
  {
    int v7 = result;
    uint64_t result = (void *)result[8];
    if (*(void **)(a1 + 32) == result)
    {
      *(_OWORD *)(a3 + 4) = *(_OWORD *)(v7 + 5);
      uint64_t v19 = v7[7];
    }
    else
    {
      uint64_t v8 = *result;
      *(void *)(v8 + 8) = result[1];
      *(void *)result[1] = v8;
      --*(void *)(a1 + 40);
      operator delete(result);
      uint64_t v9 = operator new(0x18uLL);
      uint64_t v10 = *a2;
      uint64_t v11 = *(void **)(a1 + 32);
      *uint64_t v9 = a1 + 24;
      v9[1] = v11;
      _DWORD v9[2] = v10;
      void *v11 = v9;
      uint64_t v12 = *(void *)(a1 + 40) + 1;
      *(void *)(a1 + 32) = v9;
      *(void *)(a1 + 40) = v12;
      uint64_t v14 = v7[5];
      uint64_t v13 = v7 + 5;
      int v20 = a2;
      uint64_t v21 = v14;
      int v22 = *((_DWORD *)v13 + 2);
      uint64_t v15 = *(void *)((char *)v13 + 12);
      int v16 = *((unsigned __int8 *)v13 + 20);
      uint64_t result = sub_100D1FE54((uint64_t **)a1, a2, (uint64_t)&unk_101D0B290, &v20);
      int v17 = result + 5;
      if (*((unsigned __int8 *)result + 60) == v16)
      {
        if (*((unsigned char *)result + 60))
        {
          *int v17 = v21;
          *((_WORD *)result + 24) = v22;
          *(void *)((char *)result + 52) = v15;
        }
      }
      else if (*((unsigned char *)result + 60))
      {
        *((unsigned char *)result + 60) = 0;
      }
      else
      {
        *int v17 = v21;
        *((_DWORD *)result + 12) = v22;
        *(void *)((char *)result + 52) = v15;
        *((unsigned char *)result + 60) = 1;
      }
      result[8] = v9;
      *(_OWORD *)(a3 + 4) = *(_OWORD *)v13;
      uint64_t v19 = v13[2];
    }
    *(void *)(a3 + 20) = v19;
    char v18 = 1;
  }
  *(unsigned char *)a3 = v18;
  return result;
}

void *sub_100D1FA20(void *result, uint64_t a2)
{
  unsigned int v2 = *(void **)a2;
  unint64_t v3 = *(void **)(a2 + 8);
  if (*(void **)a2 != v3)
  {
    uint64_t v4 = (uint64_t)(result + 1);
    do
    {
      LOBYTE(v5) = 0;
      char v6 = 0;
      uint64_t result = sub_100D1FA80(v4, v2++, &v5);
    }
    while (v2 != v3);
  }
  return result;
}

void *sub_100D1FA80(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t result = sub_100529674(a1, a2);
  if ((void *)(a1 + 8) == result)
  {
    if (*(void *)(a1 + 16) >= *(void *)(a1 + 48)) {
      sub_100D1FF88(a1);
    }
    int v7 = operator new(0x18uLL);
    uint64_t v8 = *a2;
    uint64_t v9 = *(void **)(a1 + 32);
    void *v7 = a1 + 24;
    v7[1] = v9;
    id v7[2] = v8;
    *uint64_t v9 = v7;
    uint64_t v10 = *(void *)(a1 + 40) + 1;
    *(void *)(a1 + 32) = v7;
    *(void *)(a1 + 40) = v10;
    uint64_t v11 = *a3;
    uint64_t v15 = a2;
    uint64_t v16 = v11;
    int v17 = *((_DWORD *)a3 + 2);
    uint64_t v12 = *(uint64_t *)((char *)a3 + 12);
    int v13 = *((unsigned __int8 *)a3 + 20);
    uint64_t result = sub_100D1FE54((uint64_t **)a1, a2, (uint64_t)&unk_101D0B290, &v15);
    uint64_t v14 = result + 5;
    if (*((unsigned __int8 *)result + 60) == v13)
    {
      if (*((unsigned char *)result + 60))
      {
        void *v14 = v16;
        *((_WORD *)result + 24) = v17;
        *(void *)((char *)result + 52) = v12;
      }
    }
    else if (*((unsigned char *)result + 60))
    {
      *((unsigned char *)result + 60) = 0;
    }
    else
    {
      void *v14 = v16;
      *((_DWORD *)result + 12) = v17;
      *(void *)((char *)result + 52) = v12;
      *((unsigned char *)result + 60) = 1;
    }
    result[8] = v7;
  }
  return result;
}

void *sub_100D1FBD4(void *result, void *a2)
{
  unsigned int v2 = a2 + 1;
  unint64_t v3 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    uint64_t v4 = (uint64_t)(result + 1);
    do
    {
      long long v8 = *(_OWORD *)(v3 + 5);
      int v9 = *((_DWORD *)v3 + 14);
      char v10 = 1;
      uint64_t result = sub_100D1FA80(v4, v3 + 4, (uint64_t *)&v8);
      uint64_t v5 = (void *)v3[1];
      if (v5)
      {
        do
        {
          char v6 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          char v6 = (void *)v3[2];
          BOOL v7 = *v6 == (void)v3;
          unint64_t v3 = v6;
        }
        while (!v7);
      }
      unint64_t v3 = v6;
    }
    while (v6 != v2);
  }
  return result;
}

void *sub_100D1FC74(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 16);
  sub_1000F5BB0(a1 + 8, *(void **)(a1 + 16));
  *(v1 - 1) = v1;
  *uint64_t v1 = 0;
  v1[1] = 0;

  return sub_1003B2350(v1 + 2);
}

uint64_t sub_100D1FCBC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_100D1FCC4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

void sub_100D1FCCC(uint64_t **a1@<X1>, void *a2@<X8>)
{
  sub_100D1FFE4((uint64_t)&v6, *a1, a1[1]);
  a2[1] = 0;
  unint64_t v3 = a2 + 1;
  *a2 = a2 + 1;
  a2[4] = 0;
  a2[2] = 0;
  a2[3] = a2 + 4;
  a2[8] = 0;
  a2[7] = 0;
  a2[5] = 0;
  a2[6] = a2 + 7;
  sub_1000F5BB0((uint64_t)a2, 0);
  uint64_t v4 = v7;
  *a2 = v6;
  a2[1] = v4;
  uint64_t v5 = v8;
  a2[2] = v8;
  if (v5)
  {
    v4[2] = v3;
    char v6 = &v7;
    BOOL v7 = 0;
    uint64_t v8 = 0;
    uint64_t v4 = 0;
  }
  else
  {
    *a2 = v3;
  }
  sub_1000F5BB0((uint64_t)&v6, v4);
}

uint64_t sub_100D1FD84(uint64_t a1)
{
  *(void *)a1 = off_1022F3150;
  uint64_t v2 = a1 + 8;
  sub_1003B2350((void *)(a1 + 32));
  sub_1000F5BB0(v2, *(void **)(a1 + 16));
  return a1;
}

void sub_100D1FDDC(uint64_t a1)
{
  *(void *)a1 = off_1022F3150;
  uint64_t v2 = a1 + 8;
  sub_1003B2350((void *)(a1 + 32));
  sub_1000F5BB0(v2, *(void **)(a1 + 16));

  operator delete();
}

void *sub_100D1FE54(uint64_t **a1, void *a2, uint64_t a3, void **a4)
{
  char v6 = (void **)sub_1005295E0((uint64_t)a1, &v10, a2);
  BOOL v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    BOOL v7 = operator new(0x48uLL);
    uint64_t v7[4] = **a4;
    *((unsigned char *)v7 + 40) = 0;
    *((unsigned char *)v7 + 60) = 0;
    v7[8] = 0;
    sub_1000EDF90(a1, v10, v8, v7);
  }
  return v7;
}

char *sub_100D1FEE8(uint64_t **a1, void *a2, void *a3, uint64_t a4)
{
  BOOL v7 = (void **)sub_1005295E0((uint64_t)a1, &v11, a2);
  uint64_t v8 = (char *)*v7;
  if (!*v7)
  {
    int v9 = (uint64_t **)v7;
    uint64_t v8 = (char *)operator new(0x40uLL);
    *((void *)v8 + 4) = *a3;
    *(_OWORD *)(v8 + 40) = *(_OWORD *)a4;
    *((_DWORD *)v8 + 14) = *(_DWORD *)(a4 + 16);
    sub_1000EDF90(a1, v11, v9, (uint64_t *)v8);
  }
  return v8;
}

void sub_100D1FF88(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 24);
  sub_1006FF744((uint64_t **)a1, v2 + 2);
  uint64_t v3 = *v2;
  *(void *)(v3 + 8) = v2[1];
  *(void *)v2[1] = v3;
  --*(void *)(a1 + 40);

  operator delete(v2);
}

uint64_t sub_100D1FFE4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    char v6 = a2;
    do
    {
      sub_100D20068((uint64_t **)a1, v4, v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_100D20050(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100D20068(uint64_t **a1, void *a2, void *a3, uint64_t *a4)
{
  char v6 = sub_100529874(a1, a2, &v11, &v10, a3);
  BOOL v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    BOOL v7 = (uint64_t *)operator new(0x28uLL);
    uint64_t v7[4] = *a4;
    sub_1000EDF90(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t sub_100D200F0(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = a2;
  if (*((char *)a2 + 23) < 0) {
    a2 = (uint64_t **)*a2;
  }
  uint64_t v4 = sub_100513074(a1, a2, 1, 1);
  sub_101171D90(v4 + 16);
  *(_OWORD *)(a1 + 88) = 0u;
  uint64_t v5 = (id *)(a1 + 88);
  *(void *)(a1 + 56) = 0xBFF0000000000000;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0x3FE0000000000000;
  *(_WORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 176) = xmmword_101D474D0;
  *(_WORD *)(a1 + 192) = 1;
  *(_OWORD *)(a1 + 200) = xmmword_101D474E0;
  *(_WORD *)(a1 + 216) = 1;
  *(_DWORD *)(a1 + 220) = 0;
  *(unsigned char *)(a1 + 224) = 0;
  std::string::operator=((std::string *)(a1 + 128), (const std::string *)v2);
  long long v6 = *(_OWORD *)(v2 + 7);
  long long v7 = *(_OWORD *)(v2 + 9);
  uint64_t v8 = v2[11];
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(v2 + 5);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(v2 + 3);
  *(void *)(a1 + 216) = v8;
  *(_OWORD *)(a1 + 200) = v7;
  *(_OWORD *)(a1 + 184) = v6;
  if (!*(unsigned char *)(a1 + 169))
  {
    if (*((char *)v2 + 23) >= 0) {
      int v9 = (const char *)v2;
    }
    else {
      int v9 = (const char *)*v2;
    }
    *(void *)(a1 + 96) = dispatch_queue_create(v9, 0);
    sub_100F85E90();
    id v10 = [objc_alloc((Class)GEOMapFeatureAccess) initWithQueue:*(void *)(a1 + 96)];
    id *v5 = v10;
    [v10 setAllowNetworkTileLoad:*((unsigned __int8 *)v2 + 64)];
    [*v5 setFlipNegativeTravelDirectionRoads:1];
    [*v5 setAllowStaleData:1];
    [*v5 setVisitDoubleTravelDirectionRoadsTwice:*((_DWORD *)v2 + 6) == 1];
    [*v5 setAllowOfflineData:1];
    [*v5 setPreferStaleData:*((unsigned __int8 *)v2 + 65)];
  }
  return a1;
}

void sub_100D20270(_Unwind_Exception *a1)
{
  sub_10051310C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100D2029C(uint64_t result)
{
  *(void *)(result + 56) = 0xBFF0000000000000;
  *(void *)(result + 64) = 0;
  *(void *)(result + 72) = 0;
  *(void *)(result + 80) = 0xBFF0000000000000;
  *(unsigned char *)(result + 224) = 0;
  *(void *)(result + 112) = 0;
  *(void *)(result + 120) = 0;
  return result;
}

void sub_100D202B4(uint64_t a1, long long **a2, unsigned int a3, long long **a4)
{
  if (*(unsigned char *)(a1 + 168))
  {
    uint64_t v4 = *a2;
    if (v4)
    {
      long long v7 = sub_100D2036C((uint64_t **)(a1 + 288), v4, 1);
      if (v7)
      {
        uint64_t v8 = v7;
        if (*((unsigned char *)v7 + a3)) {
          sub_100D204B4((uint64_t)v7, a3);
        }
        id v10 = *a4;
        for (uint64_t i = a4[1]; v10 != i; ++v10)
        {
          if (a3)
          {
            v8[1] = 1;
            uint64_t v11 = (uint64_t *)(v8 + 8);
          }
          else
          {
            unsigned char *v8 = 1;
            uint64_t v11 = (uint64_t *)(v8 + 32);
          }
          sub_100D247D0(v11, v10);
        }
      }
    }
  }
}

_OWORD *sub_100D2036C(uint64_t **a1, long long *a2, int a3)
{
  if (sub_100D2AF70((uint64_t)a1, (unint64_t *)a2))
  {
    v8[0] = a2;
    return sub_100D2AFD0(a1, (unint64_t *)a2, (uint64_t)&unk_101D0B290, v8) + 3;
  }
  else if (a3)
  {
    __int16 v11 = 0;
    memset(v12, 0, sizeof(v12));
    unint64_t v13 = 0xBFF0000000000000;
    sub_100D2B1F0((uint64_t)v8, a2, (uint64_t)&v11);
    sub_100D2B0E8(a1, (unint64_t *)v8, (uint64_t)v8);
    uint64_t v14 = (void **)&v10;
    sub_1000C5954(&v14);
    uint64_t v14 = (void **)&v9;
    sub_1000C5954(&v14);
    v8[0] = a2;
    long long v6 = sub_100D2AFD0(a1, (unint64_t *)a2, (uint64_t)&unk_101D0B290, v8) + 3;
    v8[0] = (_OWORD *)((char *)&v12[1] + 8);
    sub_1000C5954((void ***)v8);
    v8[0] = v12;
    sub_1000C5954((void ***)v8);
  }
  else
  {
    return 0;
  }
  return v6;
}

void sub_100D2048C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_100D2AF24((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100D204B4(uint64_t a1, int a2)
{
  if (a2)
  {
    sub_100D2B3E4(a1, (uint64_t *)(a1 + 8));
    *(unsigned char *)(a1 + 1) = 0;
  }
  else
  {
    sub_100D2B3E4(a1, (uint64_t *)(a1 + 32));
    *(unsigned char *)a1 = 0;
  }
}

uint64_t sub_100D204FC(uint64_t a1, long long **a2, unsigned int a3, uint64_t a4)
{
  if (!*(unsigned char *)(a1 + 168)) {
    return 0;
  }
  uint64_t v4 = *a2;
  if (!v4) {
    return 0;
  }
  uint64_t result = (uint64_t)sub_100D2036C((uint64_t **)(a1 + 288), v4, 0);
  if (!result) {
    return result;
  }
  uint64_t v8 = result;
  if (!*(unsigned char *)(result + a3)) {
    return 0;
  }
  uint64_t v9 = result + 8;
  uint64_t v10 = 32;
  if (a3) {
    uint64_t v10 = 8;
  }
  else {
    uint64_t v9 = result + 32;
  }
  sub_100D2CEF4((uint64_t *)a4, *(void **)(a4 + 8), *(uint64_t **)(result + v10), *(void **)(v9 + 8), (uint64_t)(*(void *)(v9 + 8) - *(void *)(result + v10)) >> 4);
  *(CFAbsoluteTime *)(v8 + 56) = CFAbsoluteTimeGetCurrent();
  return 1;
}

id sub_100D205A0(uint64_t a1)
{
  id result = *(id *)(a1 + 88);
  if (result) {
    return [result clearRoadTiles];
  }
  return result;
}

void sub_100D205B0(uint64_t a1, double a2, double a3)
{
  uint64_t v5 = a1 + 288;
  double Current = CFAbsoluteTimeGetCurrent();

  sub_100D20600(v5, Current, a2, a3);
}

void sub_100D20600(uint64_t a1, double a2, double a3, double a4)
{
  int v7 = *(_DWORD *)(a1 + 16);
  uint64_t v8 = (uint64_t *)v62;
  v62[0] = 0;
  v62[1] = 0;
  int v61 = (uint64_t *)v62;
  double v9 = *(double *)(a1 + 24);
  BOOL v10 = v9 < 0.0;
  double v11 = vabdd_f64(a2, v9);
  BOOL v12 = !v10 && v11 <= a3;
  if (!v12 || v7 >= 501)
  {
    uint64_t v14 = (uint64_t *)(a1 + 8);
    unint64_t v13 = *(uint64_t **)a1;
    if (*(void *)a1 != a1 + 8)
    {
      do
      {
        double v15 = *((double *)v13 + 13);
        double v16 = vabdd_f64(a2, v15);
        if (v15 >= 0.0 && v16 <= a4)
        {
          if (v7 < 501) {
            goto LABEL_46;
          }
          uint64_t v19 = v13 + 4;
          int v20 = (int)fabs((double)(int)(a2 - v15));
          int v60 = v20;
          for (uint64_t i = v62[0]; i; uint64_t i = (void *)*i)
          {
            int v22 = *((_DWORD *)i + 8);
            if (v22 <= v20)
            {
              if (v22 >= v20)
              {
                __p[0] = &v60;
                long long v30 = sub_1000EAEE4(&v61, &v60, (uint64_t)&unk_101D0B290, (_DWORD **)__p);
                long long v31 = v30;
                long long v32 = v30[6];
                unsigned int v35 = v30[7];
                uint64_t v33 = (uint64_t)(v30 + 7);
                uint64_t v34 = v35;
                if (v32 >= v35)
                {
                  int v37 = v31[5];
                  uint64_t v38 = ((char *)v32 - (char *)v37) >> 4;
                  unint64_t v39 = v38 + 1;
                  if ((unint64_t)(v38 + 1) >> 60) {
                    sub_1001D7FD4();
                  }
                  uint64_t v40 = (char *)v34 - (char *)v37;
                  if (v40 >> 3 > v39) {
                    unint64_t v39 = v40 >> 3;
                  }
                  if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v41 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v41 = v39;
                  }
                  if (v41) {
                    uint64_t v42 = (char *)sub_1000C571C(v33, v41);
                  }
                  else {
                    uint64_t v42 = 0;
                  }
                  int v43 = &v42[16 * v38];
                  *(_OWORD *)int v43 = *v19;
                  uint64_t v45 = v31[5];
                  BOOL v44 = v31[6];
                  unint64_t v46 = (uint64_t *)v43;
                  if (v44 != v45)
                  {
                    do
                    {
                      *((_OWORD *)v46 - 1) = *((_OWORD *)v44 - 1);
                      v46 -= 2;
                      v44 -= 2;
                    }
                    while (v44 != v45);
                    BOOL v44 = v31[5];
                  }
                  uint64_t v36 = (uint64_t *)(v43 + 16);
                  v31[5] = v46;
                  void v31[6] = (uint64_t *)(v43 + 16);
                  v31[7] = (uint64_t *)&v42[16 * v41];
                  if (v44) {
                    operator delete(v44);
                  }
                }
                else
                {
                  *(_OWORD *)long long v32 = *v19;
                  uint64_t v36 = v32 + 2;
                }
                void v31[6] = v36;
                goto LABEL_46;
              }
              ++i;
            }
          }
          memset(__p, 0, 24);
          __int16 v23 = (char *)sub_1000C571C((uint64_t)&__p[2], 1uLL);
          *(_OWORD *)__int16 v23 = *v19;
          uint64_t v26 = (char *)__p[0];
          unint64_t v25 = (char *)__p[1];
          int v27 = v23;
          if (__p[1] != __p[0])
          {
            do
            {
              *((_OWORD *)v27 - 1) = *((_OWORD *)v25 - 1);
              v27 -= 16;
              v25 -= 16;
            }
            while (v25 != v26);
            unint64_t v25 = (char *)__p[0];
          }
          uint64_t v28 = v23 + 16;
          __p[0] = v27;
          __p[1] = v23 + 16;
          __p[2] = &v23[16 * v24];
          if (v25) {
            operator delete(v25);
          }
          __p[1] = v28;
          *(void *)uint64_t v63 = &v60;
          __int16 v29 = (char *)(sub_1000EAEE4(&v61, &v60, (uint64_t)&unk_101D0B290, (_DWORD **)v63) + 5);
          if (v29 != (char *)__p) {
            sub_10027C3B4(v29, (char *)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 4);
          }
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
LABEL_46:
          uint64_t v47 = (uint64_t *)v13[1];
          if (v47)
          {
            do
            {
              char v18 = v47;
              uint64_t v47 = (uint64_t *)*v47;
            }
            while (v47);
          }
          else
          {
            do
            {
              char v18 = (uint64_t *)v13[2];
              BOOL v48 = *v18 == (void)v13;
              unint64_t v13 = v18;
            }
            while (!v48);
          }
        }
        else
        {
          sub_100D2B3E4((uint64_t)(v13 + 6), v13 + 7);
          sub_100D2B3E4((uint64_t)(v13 + 6), v13 + 10);
          char v18 = sub_100D2B478((uint64_t **)a1, (uint64_t)v13);
        }
        unint64_t v13 = v18;
      }
      while (v18 != v14);
      if (v62 != (void **)v61)
      {
        do
        {
          if (*(void *)(a1 + 16) < 0x1F5uLL) {
            break;
          }
          uint64_t v49 = (uint64_t *)*v8;
          uint64_t v50 = (uint64_t *)*v8;
          uint64_t v51 = v8;
          if (*v8)
          {
            do
            {
              uint64_t v52 = v50;
              uint64_t v50 = (uint64_t *)v50[1];
            }
            while (v50);
          }
          else
          {
            do
            {
              uint64_t v52 = (uint64_t *)v51[2];
              BOOL v48 = *v52 == (void)v51;
              uint64_t v51 = v52;
            }
            while (v48);
          }
          int v53 = (char *)v52[5];
          long long v54 = (char *)v52[6];
          if (v53 != v54)
          {
            do
            {
              if (sub_100D2AF70(a1, (unint64_t *)v53))
              {
                __p[0] = v53;
                long long v55 = (uint64_t *)sub_100D2AFD0((uint64_t **)a1, (unint64_t *)v53, (uint64_t)&unk_101D0B290, (long long **)__p);
                sub_100D2B3E4((uint64_t)(v55 + 6), v55 + 7);
                sub_100D2B3E4((uint64_t)(v55 + 6), v55 + 10);
                sub_100D2B4D4((uint64_t **)a1, (unint64_t *)v53);
                if (*(void *)(a1 + 16) < 0x1F5uLL) {
                  break;
                }
              }
              v53 += 16;
            }
            while (v53 != v54);
            uint64_t v49 = (uint64_t *)*v8;
          }
          if (v49)
          {
            do
            {
              __int16 v56 = v49;
              uint64_t v49 = (uint64_t *)v49[1];
            }
            while (v49);
          }
          else
          {
            do
            {
              __int16 v56 = (uint64_t *)v8[2];
              BOOL v48 = *v56 == (void)v8;
              uint64_t v8 = v56;
            }
            while (v48);
          }
          uint64_t v8 = v56;
        }
        while (v56 != v61);
      }
    }
    int v57 = *(_DWORD *)(a1 + 16);
    *(double *)(a1 + 24) = a2;
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022F32E8);
    }
    double v58 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(__p[0]) = 134349568;
      *(void **)((char *)__p + 4) = *(void **)&a2;
      WORD2(__p[1]) = 1026;
      *(_DWORD *)((char *)&__p[1] + 6) = v7;
      WORD1(__p[2]) = 1026;
      HIDWORD(__p[2]) = v57;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,ClearStoredStaleConnections,szBefore,%{public}d,szAfter,%{public}d", (uint8_t *)__p, 0x18u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F32E8);
      }
      *(_DWORD *)uint64_t v63 = 134349568;
      *(double *)&v63[4] = a2;
      __int16 v64 = 1026;
      int v65 = v7;
      __int16 v66 = 1026;
      int v67 = v57;
      uint64_t v59 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGeoMapFeatureAccessGeometryCommon::CLGeoRoadConnectionsMap::clearStoredStaleConnections(const CFAbsoluteTime, const double, const double)", "%s\n", v59);
      if (v59 != (char *)__p) {
        free(v59);
      }
    }
  }
  sub_1006FE1A8((uint64_t)&v61, v62[0]);
}

void sub_100D20BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
}

uint64_t sub_100D20C24(uint64_t a1, char a2, char a3, uint64_t a4, double a5, CLLocationDegrees a6, CLLocationDegrees a7, double a8)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  ++*(_DWORD *)(a1 + 112);
  if ((a2 & 1) != 0
    || sub_100D21178((double *)(a1 + 56), (double *)(a1 + 16), *(unsigned __int8 *)(a1 + 217), a6, a7, a8))
  {
    if ((a3 & 1) == 0)
    {
      *(double *)std::string buf = a8;
      double v16 = (double *)buf;
      if (*(double *)(a1 + 184) < a8) {
        double v16 = (double *)(a1 + 184);
      }
      int v17 = (double *)(a1 + 176);
      if (*(double *)(a1 + 176) <= a8) {
        int v17 = v16;
      }
      a8 = *v17;
    }
    if (sub_100D21230(a5, a8, a6, a7))
    {
      if ((a3 & 1) == 0)
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022F32E8);
        }
        char v18 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          int v20 = *(_DWORD *)(a1 + 112);
          int v19 = *(_DWORD *)(a1 + 116);
          uint64_t v21 = *(void *)(a1 + 320);
          int v22 = *(unsigned __int8 *)(a1 + 224);
          int v23 = *(unsigned __int8 *)(a1 + 192);
          *(_DWORD *)std::string buf = 134351105;
          *(double *)&uint8_t buf[4] = a5;
          __int16 v30 = 2049;
          CLLocationDegrees v31 = a6;
          __int16 v32 = 2049;
          CLLocationDegrees v33 = a7;
          __int16 v34 = 2050;
          double v35 = a8;
          __int16 v36 = 1026;
          int v37 = v19;
          __int16 v38 = 1026;
          int v39 = v20;
          __int16 v40 = 2050;
          uint64_t v41 = v21;
          __int16 v42 = 1026;
          int v43 = v22;
          __int16 v44 = 1026;
          int v45 = v23;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,Roads,%{public}.1lf,buffering map data,ll,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,mapsAPICalls,%{public}d,bufferCalls,%{public}d,connectionUsed,%{public}lu,queryInProgress,%{public}d,network,%{public}d", buf, 0x4Cu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1022F32E8);
          }
          uint64_t v28 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureRoadGeometryBuffer::bufferMapData(const CFAbsoluteTime, const double, const double, const double, const BOOL, const BOOL, const BOOL)", "%s\n", v28);
          if (v28 != buf) {
            free(v28);
          }
        }
      }
      if (sub_100D212C4(a1, a4, a5, a6, a7, a8)) {
        goto LABEL_17;
      }
    }
    else
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F32E8);
      }
      unint64_t v25 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 134349825;
        *(double *)&uint8_t buf[4] = a5;
        __int16 v30 = 2049;
        CLLocationDegrees v31 = a6;
        __int16 v32 = 2049;
        CLLocationDegrees v33 = a7;
        __int16 v34 = 2050;
        double v35 = a8;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,Roads,%{public}.1lf,cacheRoadData,invalid input,ll,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf", buf, 0x2Au);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022F32E8);
        }
        int v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureRoadGeometryBuffer::bufferMapData(const CFAbsoluteTime, const double, const double, const double, const BOOL, const BOOL, const BOOL)", "%s\n", v27);
        if (v27 != buf) {
          free(v27);
        }
      }
    }
    uint64_t v24 = 0;
    goto LABEL_24;
  }
LABEL_17:
  uint64_t v24 = 1;
LABEL_24:
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  return v24;
}

void sub_100D21148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100D21178(double *a1, double *a2, int a3, double a4, double a5, double a6)
{
  if (!sub_100D21230(*a1, a1[3], a1[1], a1[2])) {
    return 1;
  }
  double v12 = sub_1000F1648(a2, a4, a5, a1[1], a1[2], 0.0);
  double v13 = a1[3];
  if (a3) {
    return v12 >= v13 * 0.5;
  }
  double v15 = v13 * 0.9;
  return v12 > v15 && v12 + a6 >= v15;
}

BOOL sub_100D21230(double a1, double a2, double a3, double a4)
{
  BOOL result = 0;
  if (a1 > 0.0 && a2 > 0.0)
  {
    if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      return 0;
    }
    else
    {
      return !sub_1000EF668(a3, a4) && sub_1000EF68C(a3, a4);
    }
  }
  return result;
}

uint64_t sub_100D212C4(uint64_t a1, uint64_t a2, double a3, CLLocationDegrees a4, CLLocationDegrees a5, double a6)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (*(unsigned char *)(a1 + 169))
  {
    uint64_t v12 = sub_100D26924(a1, *(unsigned __int8 *)(a1 + 192), a2, a3, a4, a5, a6);
  }
  else
  {
    if (!*(void *)(a1 + 88))
    {
      uint64_t v13 = 0;
      goto LABEL_6;
    }
    uint64_t v12 = sub_100D25508(a1, a2, a3, a4, a5, a6);
  }
  uint64_t v13 = v12;
LABEL_6:
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  return v13;
}

void sub_100D213C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D213E0(uint64_t a1, uint64_t *a2, int a3, double a4, double a5, double a6)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (*(unsigned char *)(a1 + 216)
    && (double Current = CFAbsoluteTimeGetCurrent(), (sub_100D20C24(a1, 0, 0, 0, Current, a4, a5, a6) & 1) == 0))
  {
    uint64_t v13 = 0;
  }
  else
  {
    sub_100D21504((unsigned char *)a1, (void *)(a1 + 240), a2, a3, a4, a5, a6);
    uint64_t v13 = 1;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  return v13;
}

void sub_100D214F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D21504(unsigned char *a1, void *a2, uint64_t *a3, int a4, double a5, double a6, double a7)
{
  (*(void (**)(unsigned char *))(*(void *)a1 + 16))(a1);
  if (a1[224])
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022F32E8);
    }
    uint64_t v14 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,map data requested while map data buffering was in progress", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F32E8);
      }
      double v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureRoadGeometryBuffer::findRoadsNear(const double, const double, const double, const std::map<CLMapRoadKey, CLMapRoadPtr> &, std::vector<CLMapRoadPtr> &, const BOOL)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  else
  {
    sub_100D24FA8((uint64_t)a1);
  }
  if (!a4)
  {
    sub_1000C59A8(a3);
    __int16 v32 = (long long *)*a2;
    __int16 v30 = (long long *)(a2 + 1);
    CLLocationDegrees v31 = v32;
    if (v32 == v30) {
      goto LABEL_56;
    }
    while (1)
    {
      uint64_t v33 = *((void *)v31 + 6);
      if (v33)
      {
        if (*(void *)(v33 + 144) - *(void *)(v33 + 136) >= 0x11uLL)
        {
          uint64_t v34 = 0;
          unint64_t v35 = 0;
          while (1)
          {
            GEOClosestCoordinateOnLineSegmentFromCoordinate();
            GEOCalculateDistance();
            if (v36 <= a7) {
              break;
            }
            ++v35;
            v34 += 16;
            if (v35 >= ((uint64_t)(*(void *)(v33 + 144) - *(void *)(v33 + 136)) >> 4) - 1) {
              goto LABEL_50;
            }
          }
LABEL_49:
          sub_100D247D0(a3, v31 + 3);
          goto LABEL_50;
        }
        GEOCalculateDistance();
        if (v37 <= a7) {
          goto LABEL_49;
        }
      }
LABEL_50:
      __int16 v38 = (long long *)*((void *)v31 + 1);
      if (v38)
      {
        do
        {
          int v39 = v38;
          __int16 v38 = *(long long **)v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          int v39 = (long long *)*((void *)v31 + 2);
          BOOL v29 = *(void *)v39 == (void)v31;
          CLLocationDegrees v31 = v39;
        }
        while (!v29);
      }
      CLLocationDegrees v31 = v39;
      if (v39 == v30) {
        goto LABEL_56;
      }
    }
  }
  sub_10016C458();
  sub_100D2B590((double *)buf, a5, a6, a7);
  sub_1000C59A8(a3);
  int v19 = (long long *)*a2;
  int v17 = (long long *)(a2 + 1);
  char v18 = v19;
  if (v19 == v17) {
    goto LABEL_56;
  }
  do
  {
    double v16 = v18 + 3;
    uint64_t v20 = *((void *)v18 + 6);
    if (!v20) {
      goto LABEL_34;
    }
    uint64_t v21 = *(double **)(v20 + 136);
    int v22 = *(double **)(v20 + 144);
    if (v21 == v22) {
      goto LABEL_34;
    }
    while (1)
    {
      if (*(double *)buf > *v21 || v44 < *v21) {
        goto LABEL_31;
      }
      double v24 = v21[1];
      if (v45 <= v43) {
        break;
      }
      if (v45 >= v24 && v43 <= v24) {
        goto LABEL_33;
      }
LABEL_31:
      v21 += 2;
      if (v21 == v22) {
        goto LABEL_34;
      }
    }
    if (v45 >= v43) {
      goto LABEL_31;
    }
    if (v45 <= v24 && v43 >= v24) {
      goto LABEL_31;
    }
LABEL_33:
    sub_100D247D0(a3, v16);
LABEL_34:
    int v27 = (long long *)*((void *)v18 + 1);
    if (v27)
    {
      do
      {
        uint64_t v28 = v27;
        int v27 = *(long long **)v27;
      }
      while (v27);
    }
    else
    {
      do
      {
        uint64_t v28 = (long long *)*((void *)v18 + 2);
        BOOL v29 = *(void *)v28 == (void)v18;
        char v18 = v28;
      }
      while (!v29);
    }
    char v18 = v28;
  }
  while (v28 != v17);
LABEL_56:
  (*(void (**)(unsigned char *, long long *))(*(void *)a1 + 24))(a1, v16);
  return 1;
}

void sub_100D21924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100D21964(uint64_t a1, uint64_t *a2, int a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  uint64_t v31 = a1;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  __int16 v32 = 256;
  uint64_t v28 = 0;
  BOOL v29 = 0;
  uint64_t v30 = 0;
  if (sub_100D21B50(a1, a3, (uint64_t *)&v28, 0, a4, a5, a6, a7, a8, a9))
  {
    char v18 = v28;
    int v19 = v29;
    if (v28 == v29)
    {
      BOOL v25 = *a2 != 0;
      double v20 = -1.0;
    }
    else
    {
      double v20 = -1.0;
      do
      {
        uint64_t v21 = *v18;
        if (v20 < 0.0 || v21 && *(double *)(v21 + 56) > v20)
        {
          uint64_t v22 = v18[1];
          if (v22) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
          }
          int v23 = (std::__shared_weak_count *)a2[1];
          *a2 = v21;
          a2[1] = v22;
          if (v23) {
            sub_1000DB0A0(v23);
          }
          double v20 = *(double *)(*v18 + 56);
        }
        v18 += 2;
      }
      while (v18 != v19);
      uint64_t v24 = *a2;
      BOOL v25 = *a2 != 0;
      if (*a2 && v20 > 0.0)
      {
        BOOL v25 = 1;
        *(unsigned char *)(v24 + 64) = 1;
        *(void *)(v24 + 112) = 0x3FF0000000000000;
      }
    }
    BOOL v26 = v20 >= 0.0 && v25;
  }
  else
  {
    BOOL v26 = 0;
  }
  uint64_t v33 = (void **)&v28;
  sub_1000C5954(&v33);
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  return v26;
}

void sub_100D21B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_1000C5954((void ***)va1);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100D21B50(uint64_t a1, int a2, uint64_t *a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  double v148 = a6;
  double v149 = a5;
  double v146 = a8;
  double v147 = a7;
  double v145 = a10;
  uint64_t v142 = a1;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  __int16 v144 = 256;
  double v17 = *(double *)(a1 + 200);
  if (*(double *)(a1 + 208) >= v17 + a9 * 4.0) {
    double v18 = v17 + a9 * 4.0;
  }
  else {
    double v18 = *(double *)(a1 + 208);
  }
  double v140 = a7;
  double v141 = a6;
  double v139 = a9;
  if (sub_100EBBCEC((id *)(a1 + 232), a2, &v141, &v140, &v139, 5, a6, a7, a9) == 1)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022F32E8);
    }
    int v19 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 134349569;
      *(double *)&uint8_t buf[4] = v149;
      *(_WORD *)&unsigned char buf[12] = 2049;
      *(double *)&buf[14] = v141;
      *(_WORD *)&unsigned char buf[22] = 2049;
      *(double *)&unsigned char buf[24] = v140;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "CLTSP,%{public}.1lf,getSnapCandidates,location shifting failed,LL,%{private}.7lf,%{private}.7lf", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F32E8);
      }
      v157[0] = 134349569;
      *(double *)&v157[1] = v149;
      LOWORD(v157[3]) = 2049;
      *(double *)((char *)&v157[3] + 2) = v141;
      HIWORD(v157[5]) = 2049;
      *(double *)&long long v158 = v140;
      uint64_t v118 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureRoadGeometryBuffer::getSnapCandidates(const double, const double, const double, const double, const double, const double, const CLClientLocationReferenceFrame, std::vector<CLGeoMapSnapDataPtr> &, const BOOL)", "%s\n", v118);
      if (v118 != buf) {
        free(v118);
      }
    }
    BOOL v20 = 0;
    goto LABEL_203;
  }
  uint64_t v136 = 0;
  uint64_t v137 = 0;
  uint64_t v138 = 0;
  if ((sub_100D213E0(a1, &v136, a4, v141, v140, v18) & 1) == 0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022F32E8);
    }
    __int16 v109 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 134349569;
      *(double *)&uint8_t buf[4] = v149;
      *(_WORD *)&unsigned char buf[12] = 2049;
      *(double *)&buf[14] = v141;
      *(_WORD *)&unsigned char buf[22] = 2049;
      *(double *)&unsigned char buf[24] = v140;
      _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,getSnapCandidates,findRoadsNear failed,LL,%{private}.7lf,%{private}.7lf", buf, 0x20u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_164;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_220;
    }
    goto LABEL_231;
  }
  if (v136 == v137)
  {
    double v110 = *(double *)(a1 + 208);
    if (v18 != v110)
    {
      if ((sub_100D213E0(a1, &v136, a4, v141, v140, v110) & 1) == 0)
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022F32E8);
        }
        __int16 v117 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 134349569;
          *(double *)&uint8_t buf[4] = v149;
          *(_WORD *)&unsigned char buf[12] = 2049;
          *(double *)&buf[14] = v141;
          *(_WORD *)&unsigned char buf[22] = 2049;
          *(double *)&unsigned char buf[24] = v140;
          _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,getSnapCandidates,findRoadsNear failed,LL,%{private}.7lf,%{private}.7lf", buf, 0x20u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_164;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419430 == -1) {
          goto LABEL_220;
        }
        goto LABEL_231;
      }
      if (v136 == v137)
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022F32E8);
        }
        __int16 v111 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 134349569;
          *(double *)&uint8_t buf[4] = v149;
          *(_WORD *)&unsigned char buf[12] = 2049;
          *(double *)&buf[14] = v141;
          *(_WORD *)&unsigned char buf[22] = 2049;
          *(double *)&unsigned char buf[24] = v140;
          _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_INFO, "CLTSP,%{public}.1lf,roads not available close to this point,LL,%{private}.7lf,%{private}.7lf", buf, 0x20u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_164;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419430 == -1)
        {
LABEL_220:
          v157[0] = 134349569;
          *(double *)&v157[1] = v149;
          LOWORD(v157[3]) = 2049;
          *(double *)((char *)&v157[3] + 2) = v141;
          HIWORD(v157[5]) = 2049;
          *(double *)&long long v158 = v140;
          __int16 v119 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureRoadGeometryBuffer::getSnapCandidates(const double, const double, const double, const double, const double, const double, const CLClientLocationReferenceFrame, std::vector<CLGeoMapSnapDataPtr> &, const BOOL)", "%s\n", v119);
          if (v119 != buf) {
            free(v119);
          }
LABEL_164:
          BOOL v20 = 0;
          goto LABEL_202;
        }
LABEL_231:
        dispatch_once(&qword_102419430, &stru_1022F32E8);
        goto LABEL_220;
      }
    }
  }
  uint64_t v133 = 0;
  uint64_t v134 = 0;
  uint64_t v135 = 0;
  sub_100D23834(a1, &v136, &v133, 30.0);
  memset(v157, 0, sizeof(v157));
  long long v158 = xmmword_101D1C320;
  char v159 = 0;
  long long v160 = 0u;
  long long v161 = 0u;
  sub_10053AAC0((uint64_t)v157, &v139, &v145);
  sub_10053AB70((uint64_t)v157);
  double v22 = v140;
  double v21 = v141;
  memset(v132, 0, sizeof(v132));
  uint64_t v23 = v133;
  uint64_t v122 = v134;
  if (v133 == v134) {
    goto LABEL_175;
  }
  double v24 = 180.0;
  while (2)
  {
    __int16 v129 = 0;
    double v130 = 0;
    uint64_t v131 = 0;
    BOOL v25 = *(uint64_t **)v23;
    uint64_t v123 = v23;
    uint64_t v124 = *(uint64_t **)(v23 + 8);
    if (*(uint64_t **)v23 == v124)
    {
      *(void *)std::string buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      goto LABEL_135;
    }
LABEL_16:
    uint64_t v26 = *v25;
    if (!*v25)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F32E8);
      }
      double v112 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 134349056;
        *(double *)&uint8_t buf[4] = v149;
        _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,road is nullptr", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_200;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_227;
      }
      goto LABEL_230;
    }
    int v27 = *(double **)(v26 + 136);
    unint64_t v28 = *(void *)(v26 + 144) - (void)v27;
    double v150 = -1.0;
    if ((int)(v28 >> 4) <= 1)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F32E8);
      }
      __int16 v113 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_DEBUG, "CLMM,findClosestPointOnRoad,CoordinateCount is <= 1", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022F32E8);
        }
        LOWORD(v152) = 0;
        double v120 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::findClosestPointOnRoad(CLDistanceCalc &, const int, const std::vector<Coordinate> &, const Coordinate &, double &, double &) [Coordinate = GEOLocationCoordinate2D]", "%s\n", v120);
        if (v120 != buf) {
          free(v120);
        }
      }
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F32E8);
      }
      int v114 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 134349056;
        *(double *)&uint8_t buf[4] = v149;
        _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,findClosestPointOnRoad returned false", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_200;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_227;
      }
      goto LABEL_230;
    }
    double v29 = v24;
    double v30 = *v27;
    double v31 = v27[1];
    *(void *)std::string buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    *(void *)&long long v152 = 0;
    sub_1000F17A8((double *)(a1 + 16), (double *)buf, (double *)&buf[8], (double *)&v152, v21, v22, 0.0, v30, v31, 0.0);
    uint64_t v32 = 0;
    uint64_t v33 = (v28 >> 4) - 1;
    double v34 = 0.0;
    double v35 = -1.0;
    double v36 = 0.0;
    do
    {
      uint64_t v37 = *(void *)(v26 + 136) + v32;
      double v38 = *(double *)(v37 + 16);
      double v39 = *(double *)(v37 + 24);
      long long v152 = 0uLL;
      *(void *)&long long v128 = 0;
      sub_1000F17A8((double *)(a1 + 16), (double *)&v152, (double *)&v152 + 1, (double *)&v128, v21, v22, 0.0, v38, v39, 0.0);
      double v40 = (*(double *)buf - *(double *)&v152) * (*(double *)buf - *(double *)&v152)
          + (*(double *)&buf[8] - *((double *)&v152 + 1)) * (*(double *)&buf[8] - *((double *)&v152 + 1));
      double v41 = 0.0 - *(double *)buf;
      if (v40 < 0.001)
      {
        double v42 = v41 * v41;
        double v43 = 0.0;
        double v44 = 0.0 - *(double *)&buf[8];
LABEL_21:
        double v45 = v42 + v44 * v44;
        goto LABEL_26;
      }
      double v43 = ((0.0 - *(double *)&buf[8]) * (*((double *)&v152 + 1) - *(double *)&buf[8])
           + v41 * (*(double *)&v152 - *(double *)buf))
          / v40;
      if (v43 >= 0.0)
      {
        if (v43 <= 1.0)
        {
          double v42 = (0.0 - (*(double *)buf + (*(double *)&v152 - *(double *)buf) * v43))
              * (0.0 - (*(double *)buf + (*(double *)&v152 - *(double *)buf) * v43));
          double v44 = 0.0 - (*(double *)&buf[8] + (*((double *)&v152 + 1) - *(double *)&buf[8]) * v43);
          goto LABEL_21;
        }
        double v45 = (0.0 - *(double *)&v152) * (0.0 - *(double *)&v152)
            + (0.0 - *((double *)&v152 + 1)) * (0.0 - *((double *)&v152 + 1));
        double v43 = 1.0;
      }
      else
      {
        double v45 = v41 * v41 + (0.0 - *(double *)&buf[8]) * (0.0 - *(double *)&buf[8]);
        double v43 = 0.0;
      }
LABEL_26:
      double v46 = sqrt(v40);
      double v47 = sqrt(v45);
      BOOL v48 = v35 < 0.0;
      if (v47 < v35) {
        BOOL v48 = 1;
      }
      double v49 = v36 + v46 * v43;
      if (v48)
      {
        double v35 = v47;
        double v34 = v49;
      }
      double v36 = v36 + v46;
      *(_OWORD *)std::string buf = v152;
      v32 += 16;
      --v33;
    }
    while (v33);
    if (v36 >= 0.001) {
      double v50 = v34 / v36;
    }
    else {
      double v50 = 0.0;
    }
    double v150 = v50;
    uint64_t v52 = *v25;
    uint64_t v51 = (std::__shared_weak_count *)v25[1];
    if (v51) {
      atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v128 = 0uLL;
    double v127 = 0.0;
    double v24 = v29;
    if (!v52)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F32E8);
      }
      double v58 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_ERROR, "CLMM, NULL road", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_65;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F32E8);
      }
      LOWORD(v152) = 0;
      uint64_t v59 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v59);
      goto LABEL_132;
    }
    uint64_t v53 = (*(void *)(v52 + 144) - *(void *)(v52 + 136)) >> 4;
    if ((int)v53 <= 0)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F32E8);
      }
      int v60 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,CoordinateCount is 0", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_65;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F32E8);
      }
      LOWORD(v152) = 0;
      uint64_t v59 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v59);
      goto LABEL_132;
    }
    if (v53 == 1) {
      goto LABEL_88;
    }
    sub_10039C4B4((void *)v52);
    uint64_t v54 = (uint64_t)(*(void *)(v52 + 168) - *(void *)(v52 + 160)) >> 3;
    if (v54 != v53 - 1)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F32E8);
      }
      int v61 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,inconsistent array size", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_65;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F32E8);
      }
      LOWORD(v152) = 0;
      uint64_t v59 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v59);
      double v24 = v29;
LABEL_132:
      if (v59 != buf) {
        free(v59);
      }
LABEL_65:
      char v62 = 0;
      goto LABEL_89;
    }
    sub_10039C4B4((void *)v52);
    if (v50 < 0.000001)
    {
      long long v55 = *(double **)(v52 + 136);
      long long v128 = *(_OWORD *)v55;
      double v56 = v55[2];
      double v57 = v55[3];
      *(void *)std::string buf = 0;
      double v151 = 0.0;
      *(void *)&long long v152 = 0;
      sub_1000F17A8((double *)(a1 + 16), (double *)buf, (double *)&v152, &v151, *(double *)&v128, *((double *)&v128 + 1), 0.0, v56, v57, 0.0);
      goto LABEL_84;
    }
    if (v50 >= 0.999999)
    {
      uint64_t v71 = (double *)(*(void *)(v52 + 136) + 16 * v54);
      long long v128 = *(_OWORD *)v71;
      double v72 = *(v71 - 2);
      double v73 = *(v71 - 1);
      *(void *)std::string buf = 0;
      double v151 = 0.0;
      *(void *)&long long v152 = 0;
      sub_1000F17A8((double *)(a1 + 16), (double *)buf, (double *)&v152, &v151, v72, v73, 0.0, *(double *)&v128, *((double *)&v128 + 1), 0.0);
LABEL_84:
      double v74 = atan2(*(long double *)&v152, *(long double *)buf);
      if (v74 < 0.0) {
        double v74 = v74 + 6.28318531;
      }
      double v75 = v74 * 57.2957795;
LABEL_87:
      double v127 = v75;
LABEL_88:
      char v62 = 1;
      goto LABEL_89;
    }
    uint64_t v63 = *(double **)(v52 + 160);
    __int16 v64 = *(double **)(v52 + 168);
    if (v63 == v64)
    {
LABEL_72:
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F32E8);
      }
      double v69 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,Could not interpolate to intended projection", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022F32E8);
        }
        LOWORD(v152) = 0;
        double v70 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v70);
        goto LABEL_80;
      }
      goto LABEL_65;
    }
    double v65 = 0.0;
    int v66 = 2;
    uint64_t v67 = 24;
    while (1)
    {
      double v68 = *v63 / *(double *)(v52 + 40);
      if (vabdd_f64(v50, v65 + v68) < 0.000001) {
        break;
      }
      if (v65 + v68 > v50)
      {
        double v91 = (v50 - v65) / v68;
        uint64_t v92 = (double *)(*(void *)(v52 + 136) + v67);
        double v93 = *(v92 - 2);
        double v94 = *v92;
        *(double *)&long long v128 = *(v92 - 3) + (*(v92 - 1) - *(v92 - 3)) * v91;
        *((double *)&v128 + 1) = v93 + sub_1011717B4(v93, v94) * v91;
        sub_10005B720(*((long double *)&v128 + 1));
        *((void *)&v128 + 1) = v95;
        long long v96 = (double *)(*(void *)(v52 + 136) + v67);
        double v97 = *(v96 - 3);
        double v98 = *(v96 - 2);
        double v99 = *(v96 - 1);
        double v100 = *v96;
        *(void *)std::string buf = 0;
        double v151 = 0.0;
        *(void *)&long long v152 = 0;
        sub_1000F17A8((double *)(a1 + 16), (double *)buf, (double *)&v152, &v151, v97, v98, 0.0, v99, v100, 0.0);
        goto LABEL_84;
      }
      ++v63;
      v67 += 16;
      ++v66;
      double v65 = v65 + v68;
      if (v63 == v64) {
        goto LABEL_72;
      }
    }
    if (v66 < (int)v53)
    {
      uint64_t v80 = *(void *)(v52 + 136) + v67;
      long long v128 = *(_OWORD *)(v80 - 8);
      double v81 = *(double *)(v80 - 24);
      double v82 = *(double *)(v80 - 16);
      *(void *)std::string buf = 0;
      double v151 = 0.0;
      *(void *)&long long v152 = 0;
      sub_1000F17A8((double *)(a1 + 16), (double *)buf, (double *)&v152, &v151, v81, v82, 0.0, *(double *)&v128, *((double *)&v128 + 1), 0.0);
      long double v83 = *(double *)&v152;
      long double v84 = *(double *)buf;
      uint64_t v85 = *(void *)(v52 + 136) + v67;
      double v86 = *(double *)(v85 + 8);
      double v87 = *(double *)(v85 + 16);
      *(void *)std::string buf = 0;
      double v151 = 0.0;
      *(void *)&long long v152 = 0;
      sub_1000F17A8((double *)(a1 + 16), (double *)buf, (double *)&v152, &v151, *(double *)&v128, *((double *)&v128 + 1), 0.0, v86, v87, 0.0);
      double v88 = atan2(v83, v84);
      if (v88 < 0.0) {
        double v88 = v88 + 6.28318531;
      }
      double v89 = v88 * 57.2957795;
      double v90 = atan2(*(long double *)&v152, *(long double *)buf);
      if (v90 < 0.0) {
        double v90 = v90 + 6.28318531;
      }
      double v24 = v29;
      sub_1004BAC08(v89, v90 * 57.2957795);
      goto LABEL_87;
    }
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022F32E8);
    }
    __int16 v101 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_ERROR, "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_65;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022F32E8);
    }
    LOWORD(v152) = 0;
    double v70 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v70);
LABEL_80:
    if (v70 != buf) {
      free(v70);
    }
    char v62 = 0;
    double v24 = v29;
LABEL_89:
    if (v51) {
      sub_1000DB0A0(v51);
    }
    if (v62)
    {
      memset(buf, 0, 24);
      *(void *)&unsigned char buf[24] = 0x3FF0000000000000;
      long long v163 = 0u;
      long long v164 = 0u;
      int v165 = 0;
      sub_1000F17A8((double *)(a1 + 16), (double *)&v163 + 1, (double *)&v163, (double *)&v164, *(double *)&v128, *((double *)&v128 + 1), 0.0, v141, v140, 0.0);
      if (v146 >= 0.0 && v145 > 0.0 && v127 >= 0.0)
      {
        double v76 = fmod(v146 - v127, 360.0);
        if (v76 < 0.0) {
          double v76 = v76 + 360.0;
        }
        if (v76 > v24) {
          double v76 = v76 + -360.0;
        }
        *((void *)&v164 + 1) = fabs(v76);
      }
      sub_10053B11C((uint64_t)v157, (uint64_t)buf);
      char v126 = 1;
      if ((*(_DWORD *)(a1 + 152) & 0xFFFFFFFE) == 2 && v146 >= 0.0 && v145 > 0.0 && v127 >= 0.0)
      {
        long long v152 = 0uLL;
        *(void *)&long long v153 = 0;
        *((void *)&v153 + 1) = 0x3FF0000000000000;
        long long v154 = 0u;
        long long v155 = 0u;
        int v156 = 0;
        sub_100142F58(v127 + v24);
        double v78 = v77;
        long long v154 = v163;
        *(void *)&long long v155 = v164;
        double v79 = fmod(v146 - v77, 360.0);
        if (v79 < 0.0) {
          double v79 = v79 + 360.0;
        }
        if (v79 > v24) {
          double v79 = v79 + -360.0;
        }
        *((void *)&v155 + 1) = fabs(v79);
        sub_10053B11C((uint64_t)v157, (uint64_t)&v152);
        if (*(double *)&v152 > *(double *)buf)
        {
          double v127 = v78;
          long long v163 = v154;
          long long v164 = v155;
          int v165 = v156;
          *(_OWORD *)std::string buf = v152;
          *(_OWORD *)&uint8_t buf[16] = v153;
          char v126 = 0;
        }
      }
      char v125 = 1;
      sub_100D2D380(&v149, (double *)&v128, (double *)&v128 + 1, &v127, &v150, (double *)buf, v25, &v152, &v125, &v126, (double *)&v163 + 1, (double *)&v163, (uint64_t *)&v164 + 1, (uint64_t *)&v148, (uint64_t *)&v147, (uint64_t *)&v146);
      sub_100D23F48((uint64_t *)&v129, &v152);
      if (*((void *)&v152 + 1)) {
        sub_1000DB0A0(*((std::__shared_weak_count **)&v152 + 1));
      }
      v25 += 2;
      if (v25 == v124)
      {
        __int16 v102 = v129;
        __int16 v103 = v130;
        *(void *)std::string buf = 0;
        *(void *)&uint8_t buf[8] = 0;
        if (v129 != v130)
        {
          double v104 = -1.0;
          do
          {
            uint64_t v105 = *v102;
            if (*v102 && (v104 < 0.0 || *(double *)(v105 + 56) > v104))
            {
              uint64_t v106 = v102[1];
              if (v106) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v106 + 8), 1uLL, memory_order_relaxed);
              }
              __int16 v107 = *(std::__shared_weak_count **)&buf[8];
              *(void *)std::string buf = v105;
              *(void *)&uint8_t buf[8] = v106;
              if (v107) {
                sub_1000DB0A0(v107);
              }
              double v104 = *(double *)(*v102 + 56);
            }
            v102 += 2;
          }
          while (v102 != v103);
          if (v104 >= 0.0 && *(void *)buf && **(void **)buf)
          {
            int v108 = a3;
            if (v146 >= 0.0)
            {
              int v108 = a3;
              if (v145 >= 0.0)
              {
                if (*(double *)(*(void *)buf + 88) >= 135.0) {
                  int v108 = v132;
                }
                else {
                  int v108 = a3;
                }
              }
            }
            sub_100D23F48(v108, (long long *)buf);
          }
        }
LABEL_135:
        if (*(void *)&buf[8]) {
          sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
        }
        *(void *)std::string buf = &v129;
        sub_1000C5954((void ***)buf);
        uint64_t v23 = v123 + 24;
        if (v123 + 24 == v122)
        {
LABEL_175:
          BOOL v20 = *a3 != a3[1];
          goto LABEL_201;
        }
        continue;
      }
      goto LABEL_16;
    }
    break;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1022F32E8);
  }
  __int16 v115 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 134349056;
    *(double *)&uint8_t buf[4] = v149;
    _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,interpolateOnRoad,interpolateProjections returned false", buf, 0xCu);
  }
  if (!sub_10013D1A0(115, 0)) {
    goto LABEL_200;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102419430 != -1) {
LABEL_230:
  }
    dispatch_once(&qword_102419430, &stru_1022F32E8);
LABEL_227:
  LODWORD(v152) = 134349056;
  *(double *)((char *)&v152 + 4) = v149;
  __int16 v121 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureRoadGeometryBuffer::getSnapCandidates(const double, const double, const double, const double, const double, const double, const CLClientLocationReferenceFrame, std::vector<CLGeoMapSnapDataPtr> &, const BOOL)", "%s\n", v121);
  if (v121 != buf) {
    free(v121);
  }
LABEL_200:
  *(void *)std::string buf = &v129;
  sub_1000C5954((void ***)buf);
  BOOL v20 = 0;
LABEL_201:
  *(void *)std::string buf = v132;
  sub_1000C5954((void ***)buf);
  *(void *)std::string buf = &v133;
  sub_100D2D30C((void ***)buf);
LABEL_202:
  *(void *)std::string buf = &v136;
  sub_1000C5954((void ***)buf);
LABEL_203:
  if (HIBYTE(v144))
  {
    if ((_BYTE)v144) {
      pthread_mutex_unlock(v143);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v142 + 24))(v142);
    }
  }
  return v20;
}

void sub_100D23748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  *(void *)(v71 + 184) = &a45;
  sub_1000C5954(&a71);
  sub_1019DB560((uint64_t)&a51);
  _Unwind_Resume(a1);
}

BOOL sub_100D23834(uint64_t a1, uint64_t *a2, uint64_t *a3, double a4)
{
  v70[0] = 0;
  v70[1] = 0;
  double v69 = (uint64_t *)v70;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      uint64_t v9 = *(uint64_t **)v4;
      uint64_t v8 = *(std::__shared_weak_count **)(v4 + 8);
      if (v8)
      {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v67 = v9;
        v68[0] = v8;
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        memset(&v68[1], 0, 32);
        sub_1000DB0A0(v8);
        BOOL v10 = *(long long **)v4;
      }
      else
      {
        uint64_t v67 = *(uint64_t **)v4;
        memset(v68, 0, sizeof(v68));
        BOOL v10 = (long long *)v9;
      }
      __int16 v64 = (uint64_t **)v10;
      double v11 = sub_100D2DB50(&v69, (unint64_t *)v10, (uint64_t)&unk_101D0B290, (long long **)&v64);
      uint64_t v12 = v11;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v13 = (std::__shared_weak_count *)v11[7];
      void v12[6] = (uint64_t)v9;
      v12[7] = (uint64_t)v8;
      if (v13) {
        sub_1000DB0A0(v13);
      }
      uint64_t v14 = (std::__shared_weak_count *)v12[9];
      void v12[8] = 0;
      v12[9] = 0;
      if (v14) {
        sub_1000DB0A0(v14);
      }
      double v15 = (std::__shared_weak_count *)v12[11];
      v12[10] = 0;
      v12[11] = 0;
      if (v15) {
        sub_1000DB0A0(v15);
      }
      if (v8) {
        sub_1000DB0A0(v8);
      }
      v4 += 16;
    }
    while (v4 != v5);
    double v16 = v69;
    if (v69 != (uint64_t *)v70)
    {
      while (1)
      {
        uint64_t v67 = 0;
        v68[0] = 0;
        double v17 = (uint64_t **)(v16 + 6);
        v68[1] = 0;
        sub_100D248EC(a1, v16 + 6, (uint64_t *)&v67, 1);
        double v18 = v67;
        int v19 = (uint64_t *)v68[0];
        if (v67 == (uint64_t *)v68[0]) {
          break;
        }
        BOOL v20 = 0;
        double v21 = 0;
        double v22 = 360.0;
        do
        {
          if (*v18 && sub_100D2AF70((uint64_t)&v69, (unint64_t *)*v18))
          {
            double v23 = sub_10039CCA8(*v17, 0);
            double v24 = sub_10039CED4((uint64_t *)*v18);
            double v25 = fmod(v23 - v24, 360.0);
            if (v25 < 0.0) {
              double v25 = v25 + 360.0;
            }
            if (v25 > 180.0) {
              double v25 = v25 + -360.0;
            }
            double v26 = fabs(v25);
            if (v26 < v22)
            {
              BOOL v20 = (uint64_t *)*v18;
              int v27 = (std::__shared_weak_count *)v18[1];
              if (v27) {
                atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v21) {
                sub_1000DB0A0(v21);
              }
              double v21 = v27;
              double v22 = v26;
            }
          }
          v18 += 2;
        }
        while (v18 != v19);
        if (v22 < a4)
        {
          if (v21) {
            atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
          }
LABEL_36:
          unint64_t v28 = (std::__shared_weak_count *)v16[9];
          v16[8] = (uint64_t)v20;
          v16[9] = (uint64_t)v21;
          if (v28) {
            sub_1000DB0A0(v28);
          }
        }
LABEL_38:
        __int16 v64 = 0;
        double v65 = 0;
        unint64_t v66 = 0;
        sub_100D24064(a1, v16 + 6, (uint64_t *)&v64, 1);
        double v29 = (uint64_t *)v64;
        double v30 = v65;
        if (v64 == (uint64_t **)v65)
        {
          if (a4 <= 360.0)
          {
            v63[0] = (void **)&v64;
            sub_1000C5954(v63);
            double v41 = a3;
            if (!v21) {
              goto LABEL_67;
            }
            goto LABEL_66;
          }
          uint64_t v32 = 0;
          double v31 = 0;
          double v41 = a3;
          goto LABEL_61;
        }
        double v31 = 0;
        uint64_t v32 = 0;
        double v33 = 360.0;
        do
        {
          if (*v29 && sub_100D2AF70((uint64_t)&v69, (unint64_t *)*v29))
          {
            BOOL v34 = sub_10039D44C((uint64_t)*v17, v29);
            double v35 = (uint64_t *)*v29;
            if (v34)
            {
              double v36 = sub_10039CCA8(v35, 0);
              double v37 = sub_10039CED4(*v17);
            }
            else
            {
              double v36 = sub_10039CED4(v35);
              double v37 = sub_10039CCA8(*v17, 0);
            }
            double v38 = fmod(v36 - v37, 360.0);
            if (v38 < 0.0) {
              double v38 = v38 + 360.0;
            }
            if (v38 > 180.0) {
              double v38 = v38 + -360.0;
            }
            double v39 = fabs(v38);
            if (v39 < v33)
            {
              uint64_t v32 = *v29;
              double v40 = (std::__shared_weak_count *)v29[1];
              if (v40) {
                atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v31) {
                sub_1000DB0A0(v31);
              }
              double v31 = v40;
              double v33 = v39;
            }
          }
          v29 += 2;
        }
        while (v29 != (uint64_t *)v30);
        double v41 = a3;
        if (v33 < a4)
        {
          if (v31) {
            atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
          }
LABEL_61:
          double v42 = (std::__shared_weak_count *)v16[11];
          v16[10] = v32;
          v16[11] = (uint64_t)v31;
          if (v42) {
            sub_1000DB0A0(v42);
          }
        }
        v63[0] = (void **)&v64;
        sub_1000C5954(v63);
        if (v31) {
          sub_1000DB0A0(v31);
        }
        if (!v21) {
          goto LABEL_67;
        }
LABEL_66:
        sub_1000DB0A0(v21);
LABEL_67:
        __int16 v64 = &v67;
        sub_1000C5954((void ***)&v64);
        double v43 = (uint64_t *)v16[1];
        if (v43)
        {
          do
          {
            double v44 = v43;
            double v43 = (uint64_t *)*v43;
          }
          while (v43);
        }
        else
        {
          do
          {
            double v44 = (uint64_t *)v16[2];
            BOOL v45 = *v44 == (void)v16;
            double v16 = v44;
          }
          while (!v45);
        }
        double v16 = v44;
        if (v44 == (uint64_t *)v70)
        {
          double v47 = v69;
          v68[0] = 0;
          v68[1] = 0;
          uint64_t v67 = v68;
          if (v69 == (uint64_t *)v70)
          {
            double v46 = 0;
            goto LABEL_105;
          }
          while (1)
          {
            BOOL v48 = (unint64_t *)v47[6];
            double v49 = (std::__shared_weak_count *)v47[7];
            double v50 = v48;
            if (v49)
            {
              atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
              double v50 = (unint64_t *)v47[6];
            }
            if (v50 && !sub_100D2AF70((uint64_t)&v67, v48)) {
              break;
            }
            if (v49) {
              goto LABEL_83;
            }
LABEL_84:
            uint64_t v51 = (uint64_t *)v47[1];
            if (v51)
            {
              do
              {
                uint64_t v52 = v51;
                uint64_t v51 = (uint64_t *)*v51;
              }
              while (v51);
            }
            else
            {
              do
              {
                uint64_t v52 = (uint64_t *)v47[2];
                BOOL v45 = *v52 == (void)v47;
                double v47 = v52;
              }
              while (!v45);
            }
            double v47 = v52;
            if (v52 == (uint64_t *)v70)
            {
              double v46 = (void *)v68[0];
              goto LABEL_105;
            }
          }
          __int16 v64 = 0;
          double v65 = 0;
          unint64_t v66 = 0;
          sub_100D27A18((uint64_t)(v47 + 6), &v69, (uint64_t *)&v64);
          uint64_t v53 = v65;
          if ((unint64_t)v65 >= v66)
          {
            uint64_t v54 = (long long *)sub_100D2DCBC((uint64_t *)&v64, v47 + 6);
          }
          else
          {
            sub_100D2C0D8((uint64_t)&v66, v65, v47 + 6);
            uint64_t v54 = v53 + 3;
          }
          double v65 = v54;
          sub_100D27B68((uint64_t)(v47 + 6), &v69, (uint64_t *)&v64);
          memset(v63, 0, sizeof(v63));
          long long v55 = (long long *)v64;
          double v56 = v65;
          while (v55 != v56)
          {
            double v57 = *(unint64_t **)v55;
            if (*(void *)v55)
            {
              uint64_t v71 = *(unint64_t **)v55;
              *((unsigned char *)sub_100D2DF34(&v67, v57, (uint64_t)&unk_101D0B290, (_OWORD **)&v71) + 48) = 1;
              sub_100D247D0((uint64_t *)v63, v55);
            }
            v55 += 3;
          }
          double v41 = a3;
          unint64_t v58 = a3[1];
          if (v58 >= a3[2])
          {
            uint64_t v59 = sub_100D2E014(a3, v63);
          }
          else
          {
            sub_100D2DFC0((uint64_t)a3, v63);
            uint64_t v59 = v58 + 24;
          }
          a3[1] = v59;
          double v72 = v63;
          sub_1000C5954((void ***)&v72);
          v63[0] = (void **)&v64;
          sub_100D2DE9C(v63);
          if (!v49) {
            goto LABEL_84;
          }
LABEL_83:
          sub_1000DB0A0(v49);
          goto LABEL_84;
        }
      }
      double v21 = 0;
      BOOL v20 = 0;
      if (a4 <= 360.0) {
        goto LABEL_38;
      }
      goto LABEL_36;
    }
  }
  double v46 = 0;
  v68[0] = 0;
  v68[1] = 0;
  uint64_t v67 = v68;
  double v41 = a3;
LABEL_105:
  BOOL v60 = *v41 != v41[1];
  sub_1000F5BB0((uint64_t)&v67, v46);
  sub_100D2DE40((uint64_t)&v69, v70[0]);
  return v60;
}

void sub_100D23E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,void *a25)
{
  *(void *)(v26 - 144) = &a12;
  sub_1000C5954((void ***)(v26 - 144));
  a12 = (void **)&a15;
  sub_100D2DE9C(&a12);
  if (v25) {
    sub_1000DB0A0(v25);
  }
  sub_1000F5BB0((uint64_t)&a18, a19);
  sub_100D2DE40((uint64_t)&a24, a25);
  _Unwind_Resume(a1);
}

void **sub_100D23F48(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  BOOL result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  int v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)sub_1000C571C((uint64_t)result, v13);
    double v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)double v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    double v18[2] = v15 + 16;
    sub_100D2D764(a1, v18);
    uint64_t v9 = (void *)a1[1];
    BOOL result = sub_1000C5898(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_100D24050(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000C5898((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D24064(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v72 = a1;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  __int16 v73 = 256;
  if (!*a2)
  {
    uint64_t v9 = 0;
    goto LABEL_104;
  }
  if (!sub_100D204FC(a1, (long long **)a2, 0, (uint64_t)a3))
  {
    uint64_t v67 = 0;
    double v68 = 0;
    uint64_t v69 = 0;
    __int16 v64 = 0;
    double v65 = 0;
    uint64_t v66 = 0;
    if (*(unsigned char *)(a1 + 216)
      && ((Current = CFAbsoluteTimeGetCurrent(), uint64_t v11 = *(void *)(*a2 + 144), v11 == *(void *)(*a2 + 136))
        ? (CLLocationDegrees v12 = 0.0, v13 = 0.0)
        : (CLLocationDegrees v12 = *(double *)(v11 - 16), v13 = *(double *)(v11 - 8)),
          (sub_100D20C24(a1, 0, 1, 0, Current, v12, v13, *(double *)(a1 + 160)) & 1) == 0))
    {
      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v14 = *(void *)(*a2 + 144);
      if (v14 == *(void *)(*a2 + 136))
      {
        double v15 = 0.0;
        double v16 = 0.0;
      }
      else
      {
        double v15 = *(double *)(v14 - 16);
        double v16 = *(double *)(v14 - 8);
      }
      sub_100D21504((unsigned char *)a1, (void *)(a1 + 264), (uint64_t *)&v67, 1, v15, v16, *(double *)(a1 + 160));
      uint64_t v17 = *(void *)(*a2 + 144);
      if (v17 == *(void *)(*a2 + 136))
      {
        double v18 = 0.0;
        double v19 = 0.0;
      }
      else
      {
        double v18 = *(double *)(v17 - 16);
        double v19 = *(double *)(v17 - 8);
      }
      sub_100D21504((unsigned char *)a1, (void *)(a1 + 240), (uint64_t *)&v64, 1, v18, v19, *(double *)(a1 + 160));
      std::string __p = 0;
      char v62 = 0;
      uint64_t v63 = 0;
      int v20 = *(_DWORD *)(*a2 + 112);
      double v21 = (char *)sub_10017EA34((uint64_t)&v63, 1uLL);
      *(_DWORD *)double v21 = v20;
      int v58 = a4;
      std::string __p = v21;
      uint64_t v63 = &v21[4 * v22];
      char v62 = v21 + 4;
      double v23 = v67;
      for (uint64_t i = v68; v23 != i; v23 += 2)
      {
        if (sub_10039D44C(*a2, v23))
        {
          int v25 = *(_DWORD *)(*v23 + 112);
          uint64_t v26 = v62;
          if (v62 >= v63)
          {
            unint64_t v28 = (char *)__p;
            uint64_t v29 = (v62 - (unsigned char *)__p) >> 2;
            unint64_t v30 = v29 + 1;
            if ((unint64_t)(v29 + 1) >> 62) {
              sub_1001D7FD4();
            }
            uint64_t v31 = v63 - (unsigned char *)__p;
            if ((v63 - (unsigned char *)__p) >> 1 > v30) {
              unint64_t v30 = v31 >> 1;
            }
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v32 = v30;
            }
            if (v32)
            {
              double v33 = (char *)sub_10017EA34((uint64_t)&v63, v32);
              unint64_t v28 = (char *)__p;
              uint64_t v26 = v62;
            }
            else
            {
              double v33 = 0;
            }
            BOOL v34 = &v33[4 * v29];
            *(_DWORD *)BOOL v34 = v25;
            int v27 = v34 + 4;
            while (v26 != v28)
            {
              int v35 = *((_DWORD *)v26 - 1);
              v26 -= 4;
              *((_DWORD *)v34 - 1) = v35;
              v34 -= 4;
            }
            std::string __p = v34;
            char v62 = v27;
            uint64_t v63 = &v33[4 * v32];
            if (v28) {
              operator delete(v28);
            }
          }
          else
          {
            *(_DWORD *)char v62 = v25;
            int v27 = v26 + 4;
          }
          char v62 = v27;
        }
        if ((*(_DWORD *)(a1 + 152) & 0xFFFFFFFE) == 2 && sub_10039D4E4(*a2, v23))
        {
          int v36 = *(_DWORD *)(*v23 + 108);
          double v37 = v62;
          if (v62 >= v63)
          {
            double v39 = (char *)__p;
            uint64_t v40 = (v62 - (unsigned char *)__p) >> 2;
            unint64_t v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 62) {
              sub_1001D7FD4();
            }
            uint64_t v42 = v63 - (unsigned char *)__p;
            if ((v63 - (unsigned char *)__p) >> 1 > v41) {
              unint64_t v41 = v42 >> 1;
            }
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v43 = v41;
            }
            if (v43)
            {
              double v44 = (char *)sub_10017EA34((uint64_t)&v63, v43);
              double v39 = (char *)__p;
              double v37 = v62;
            }
            else
            {
              double v44 = 0;
            }
            BOOL v45 = &v44[4 * v40];
            *(_DWORD *)BOOL v45 = v36;
            double v38 = v45 + 4;
            while (v37 != v39)
            {
              int v46 = *((_DWORD *)v37 - 1);
              v37 -= 4;
              *((_DWORD *)v45 - 1) = v46;
              v45 -= 4;
            }
            std::string __p = v45;
            char v62 = v38;
            uint64_t v63 = &v44[4 * v43];
            if (v39) {
              operator delete(v39);
            }
          }
          else
          {
            *(_DWORD *)char v62 = v36;
            double v38 = v37 + 4;
          }
          char v62 = v38;
        }
      }
      double v47 = (long long *)v64;
      BOOL v48 = (long long *)v65;
      if (v64 != v65)
      {
        while (1)
        {
          uint64_t v49 = *(void *)v47;
          if (!*(void *)v47) {
            goto LABEL_87;
          }
          uint64_t v50 = *a2;
          if (*(void *)v49 == *(void *)*a2 && *(void *)(v49 + 8) == *(void *)(v50 + 8)) {
            goto LABEL_87;
          }
          int v51 = *(unsigned __int8 *)(v49 + 17);
          if (*(unsigned char *)(v50 + 17)) {
            break;
          }
          if (!v51) {
            goto LABEL_69;
          }
LABEL_87:
          if (++v47 == v48) {
            goto LABEL_95;
          }
        }
        if (!v51) {
          goto LABEL_87;
        }
LABEL_69:
        if (sub_10039D44C(v50, (uint64_t *)v47)
          && sub_1004BABCC(*(double *)(*a2 + 128), *(double *)(*(void *)v47 + 120), 1.0))
        {
          if (*(unsigned char *)(*a2 + 117)
            || (~*(_DWORD *)(*a2 + 112) & 0x7FFFFFFF) == 0
            || *(unsigned char *)(*(void *)v47 + 116)
            || (int v52 = *(_DWORD *)(*(void *)v47 + 108), (~v52 & 0x7FFFFFFF) == 0))
          {
LABEL_86:
            sub_100D247D0(a3, v47);
            goto LABEL_87;
          }
          for (unint64_t j = (char *)__p; j != v62; j += 4)
          {
            if (*(_DWORD *)j == v52) {
              goto LABEL_86;
            }
          }
        }
        if ((*(_DWORD *)(a1 + 152) & 0xFFFFFFFE) != 2
          || !sub_10039D4E4(*a2, (uint64_t *)v47)
          || !sub_1004BABCC(*(double *)(*a2 + 128), *(double *)(*(void *)v47 + 128), 1.0))
        {
          goto LABEL_87;
        }
        if (!*(unsigned char *)(*a2 + 117)
          && (~*(_DWORD *)(*a2 + 112) & 0x7FFFFFFF) != 0
          && !*(unsigned char *)(*(void *)v47 + 117))
        {
          int v54 = *(_DWORD *)(*(void *)v47 + 112);
          if ((~v54 & 0x7FFFFFFF) != 0)
          {
            for (unint64_t k = (char *)__p; k != v62; k += 4)
            {
              if (*(_DWORD *)k == v54) {
                goto LABEL_86;
              }
            }
            goto LABEL_87;
          }
        }
        goto LABEL_86;
      }
LABEL_95:
      sub_100D202B4(a1, (long long **)a2, 0, (long long **)a3);
      if (v58)
      {
        double v56 = (std::__shared_weak_count *)a2[1];
        uint64_t v59 = *a2;
        BOOL v60 = v56;
        if (v56) {
          atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_100D24720(&v59, (uint64_t)a3);
        if (v60) {
          sub_1000DB0A0(v60);
        }
      }
      if (__p)
      {
        char v62 = (char *)__p;
        operator delete(__p);
      }
      uint64_t v9 = 1;
    }
    std::string __p = &v64;
    sub_1000C5954((void ***)&__p);
    __int16 v64 = (void **)&v67;
    sub_1000C5954(&v64);
    goto LABEL_104;
  }
  if (a4)
  {
    uint64_t v8 = (std::__shared_weak_count *)a2[1];
    uint64_t v70 = *a2;
    uint64_t v71 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_100D24720(&v70, (uint64_t)a3);
    if (v71) {
      sub_1000DB0A0(v71);
    }
  }
  ++*(void *)(a1 + 320);
  uint64_t v9 = 1;
LABEL_104:
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  return v9;
}

void sub_100D2467C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char **__p, char **a14, uint64_t a15, char *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  std::string __p = &a16;
  sub_1000C5954((void ***)&__p);
  a16 = &a19;
  sub_1000C5954((void ***)&a16);
  sub_1019DB560(v23 - 104);
  _Unwind_Resume(a1);
}

void sub_100D24720(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)a2;
  if (*(void *)a2 != *(void *)(a2 + 8))
  {
    uint64_t v5 = -(uint64_t)v2;
    while (!sub_10039D2E0(*v2, a1))
    {
      v2 += 2;
      v5 -= 16;
      if (v2 == *(uint64_t **)(a2 + 8)) {
        return;
      }
    }
    sub_1002CEF3C((uint64_t)&v10, (long long *)(16 - v5), *(long long **)(a2 + 8), -v5);
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(a2 + 8);
    if (v8 != v6)
    {
      do
      {
        uint64_t v9 = *(std::__shared_weak_count **)(v8 - 8);
        if (v9) {
          sub_1000DB0A0(v9);
        }
        v8 -= 16;
      }
      while (v8 != v7);
    }
    *(void *)(a2 + 8) = v7;
  }
}

void **sub_100D247D0(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  BOOL result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)sub_1000C571C((uint64_t)result, v13);
    double v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)double v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    double v18[2] = v15 + 16;
    sub_100D2CDB0(a1, v18);
    uint64_t v9 = (void *)a1[1];
    BOOL result = sub_1000C5898(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_100D248D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000C5898((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D248EC(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v72 = a1;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  __int16 v73 = 256;
  if (!*a2)
  {
    uint64_t v9 = 0;
    goto LABEL_104;
  }
  if (!sub_100D204FC(a1, (long long **)a2, 1u, (uint64_t)a3))
  {
    uint64_t v67 = 0;
    double v68 = 0;
    uint64_t v69 = 0;
    __int16 v64 = 0;
    double v65 = 0;
    uint64_t v66 = 0;
    if (*(unsigned char *)(a1 + 216)
      && ((Current = CFAbsoluteTimeGetCurrent(), unint64_t v11 = *(double **)(*a2 + 136), *(double **)(*a2 + 144) == v11)
        ? (CLLocationDegrees v12 = 0.0, v13 = 0.0)
        : (CLLocationDegrees v12 = *v11, v13 = v11[1]),
          (sub_100D20C24(a1, 0, 1, 0, Current, v12, v13, *(double *)(a1 + 160)) & 1) == 0))
    {
      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v14 = *(double **)(*a2 + 136);
      if (*(double **)(*a2 + 144) == v14)
      {
        double v15 = 0.0;
        double v16 = 0.0;
      }
      else
      {
        double v15 = *v14;
        double v16 = v14[1];
      }
      sub_100D21504((unsigned char *)a1, (void *)(a1 + 264), (uint64_t *)&v67, 1, v15, v16, *(double *)(a1 + 160));
      long long v17 = *(double **)(*a2 + 136);
      if (*(double **)(*a2 + 144) == v17)
      {
        double v18 = 0.0;
        double v19 = 0.0;
      }
      else
      {
        double v18 = *v17;
        double v19 = v17[1];
      }
      sub_100D21504((unsigned char *)a1, (void *)(a1 + 240), (uint64_t *)&v64, 1, v18, v19, *(double *)(a1 + 160));
      std::string __p = 0;
      char v62 = 0;
      uint64_t v63 = 0;
      int v20 = *(_DWORD *)(*a2 + 108);
      double v21 = (char *)sub_10017EA34((uint64_t)&v63, 1uLL);
      *(_DWORD *)double v21 = v20;
      int v58 = a4;
      std::string __p = v21;
      uint64_t v63 = &v21[4 * v22];
      char v62 = v21 + 4;
      uint64_t v23 = v67;
      for (uint64_t i = v68; v23 != i; v23 += 2)
      {
        if (sub_10039D400(*a2, v23))
        {
          int v25 = *(_DWORD *)(*v23 + 108);
          uint64_t v26 = v62;
          if (v62 >= v63)
          {
            unint64_t v28 = (char *)__p;
            uint64_t v29 = (v62 - (unsigned char *)__p) >> 2;
            unint64_t v30 = v29 + 1;
            if ((unint64_t)(v29 + 1) >> 62) {
              sub_1001D7FD4();
            }
            uint64_t v31 = v63 - (unsigned char *)__p;
            if ((v63 - (unsigned char *)__p) >> 1 > v30) {
              unint64_t v30 = v31 >> 1;
            }
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v32 = v30;
            }
            if (v32)
            {
              double v33 = (char *)sub_10017EA34((uint64_t)&v63, v32);
              unint64_t v28 = (char *)__p;
              uint64_t v26 = v62;
            }
            else
            {
              double v33 = 0;
            }
            BOOL v34 = &v33[4 * v29];
            *(_DWORD *)BOOL v34 = v25;
            int v27 = v34 + 4;
            while (v26 != v28)
            {
              int v35 = *((_DWORD *)v26 - 1);
              v26 -= 4;
              *((_DWORD *)v34 - 1) = v35;
              v34 -= 4;
            }
            std::string __p = v34;
            char v62 = v27;
            uint64_t v63 = &v33[4 * v32];
            if (v28) {
              operator delete(v28);
            }
          }
          else
          {
            *(_DWORD *)char v62 = v25;
            int v27 = v26 + 4;
          }
          char v62 = v27;
        }
        if ((*(_DWORD *)(a1 + 152) & 0xFFFFFFFE) == 2 && sub_10039D498(*a2, v23))
        {
          int v36 = *(_DWORD *)(*v23 + 112);
          double v37 = v62;
          if (v62 >= v63)
          {
            double v39 = (char *)__p;
            uint64_t v40 = (v62 - (unsigned char *)__p) >> 2;
            unint64_t v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 62) {
              sub_1001D7FD4();
            }
            uint64_t v42 = v63 - (unsigned char *)__p;
            if ((v63 - (unsigned char *)__p) >> 1 > v41) {
              unint64_t v41 = v42 >> 1;
            }
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v43 = v41;
            }
            if (v43)
            {
              double v44 = (char *)sub_10017EA34((uint64_t)&v63, v43);
              double v39 = (char *)__p;
              double v37 = v62;
            }
            else
            {
              double v44 = 0;
            }
            BOOL v45 = &v44[4 * v40];
            *(_DWORD *)BOOL v45 = v36;
            double v38 = v45 + 4;
            while (v37 != v39)
            {
              int v46 = *((_DWORD *)v37 - 1);
              v37 -= 4;
              *((_DWORD *)v45 - 1) = v46;
              v45 -= 4;
            }
            std::string __p = v45;
            char v62 = v38;
            uint64_t v63 = &v44[4 * v43];
            if (v39) {
              operator delete(v39);
            }
          }
          else
          {
            *(_DWORD *)char v62 = v36;
            double v38 = v37 + 4;
          }
          char v62 = v38;
        }
      }
      double v47 = (long long *)v64;
      BOOL v48 = (long long *)v65;
      if (v64 != v65)
      {
        while (1)
        {
          uint64_t v49 = *(void *)v47;
          if (!*(void *)v47) {
            goto LABEL_87;
          }
          uint64_t v50 = *a2;
          if (*(void *)v49 == *(void *)*a2 && *(void *)(v49 + 8) == *(void *)(v50 + 8)) {
            goto LABEL_87;
          }
          int v51 = *(unsigned __int8 *)(v49 + 17);
          if (*(unsigned char *)(v50 + 17)) {
            break;
          }
          if (!v51) {
            goto LABEL_69;
          }
LABEL_87:
          if (++v47 == v48) {
            goto LABEL_95;
          }
        }
        if (!v51) {
          goto LABEL_87;
        }
LABEL_69:
        if (sub_10039D400(v50, (uint64_t *)v47)
          && sub_1004BABCC(*(double *)(*a2 + 120), *(double *)(*(void *)v47 + 128), 1.0))
        {
          if (*(unsigned char *)(*a2 + 116)
            || (~*(_DWORD *)(*a2 + 108) & 0x7FFFFFFF) == 0
            || *(unsigned char *)(*(void *)v47 + 117)
            || (int v52 = *(_DWORD *)(*(void *)v47 + 112), (~v52 & 0x7FFFFFFF) == 0))
          {
LABEL_86:
            sub_100D247D0(a3, v47);
            goto LABEL_87;
          }
          for (unint64_t j = (char *)__p; j != v62; j += 4)
          {
            if (*(_DWORD *)j == v52) {
              goto LABEL_86;
            }
          }
        }
        if ((*(_DWORD *)(a1 + 152) & 0xFFFFFFFE) != 2
          || !sub_10039D498(*a2, (uint64_t *)v47)
          || !sub_1004BABCC(*(double *)(*a2 + 120), *(double *)(*(void *)v47 + 120), 1.0))
        {
          goto LABEL_87;
        }
        if (!*(unsigned char *)(*a2 + 116)
          && (~*(_DWORD *)(*a2 + 108) & 0x7FFFFFFF) != 0
          && !*(unsigned char *)(*(void *)v47 + 116))
        {
          int v54 = *(_DWORD *)(*(void *)v47 + 108);
          if ((~v54 & 0x7FFFFFFF) != 0)
          {
            for (unint64_t k = (char *)__p; k != v62; k += 4)
            {
              if (*(_DWORD *)k == v54) {
                goto LABEL_86;
              }
            }
            goto LABEL_87;
          }
        }
        goto LABEL_86;
      }
LABEL_95:
      sub_100D202B4(a1, (long long **)a2, 1u, (long long **)a3);
      if (v58)
      {
        double v56 = (std::__shared_weak_count *)a2[1];
        uint64_t v59 = *a2;
        BOOL v60 = v56;
        if (v56) {
          atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_100D24720(&v59, (uint64_t)a3);
        if (v60) {
          sub_1000DB0A0(v60);
        }
      }
      if (__p)
      {
        char v62 = (char *)__p;
        operator delete(__p);
      }
      uint64_t v9 = 1;
    }
    std::string __p = &v64;
    sub_1000C5954((void ***)&__p);
    __int16 v64 = (void **)&v67;
    sub_1000C5954(&v64);
    goto LABEL_104;
  }
  if (a4)
  {
    uint64_t v8 = (std::__shared_weak_count *)a2[1];
    uint64_t v70 = *a2;
    uint64_t v71 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_100D24720(&v70, (uint64_t)a3);
    if (v71) {
      sub_1000DB0A0(v71);
    }
  }
  ++*(void *)(a1 + 320);
  uint64_t v9 = 1;
LABEL_104:
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  return v9;
}

void sub_100D24F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char **__p, char **a14, uint64_t a15, char *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  std::string __p = &a16;
  sub_1000C5954((void ***)&__p);
  a16 = &a19;
  sub_1000C5954((void ***)&a16);
  sub_1019DB560(v23 - 104);
  _Unwind_Resume(a1);
}

uint64_t sub_100D24FA8(uint64_t a1)
{
  v15[2] = (void *)a1;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  __int16 v16 = 256;
  uint64_t v2 = *(uint64_t **)(a1 + 328);
  uint64_t v3 = *(uint64_t **)(a1 + 336);
  if (v2 != v3)
  {
    v15[0] = 0;
    v15[1] = 0;
    uint64_t v14 = (uint64_t *)v15;
    do
    {
      uint64_t v4 = (unint64_t *)*v2;
      *(_OWORD *)std::string buf = *(_OWORD *)*v2;
      uint8_t buf[16] = 1;
      sub_100D2DA3C(&v14, (unint64_t *)buf, (uint64_t)buf);
      if (!sub_100D2AF70(a1 + 240, v4) && !sub_100D2AF70(a1 + 264, v4))
      {
        if (sub_10039D6C0(*v2))
        {
          *(_OWORD *)std::string buf = *(_OWORD *)v4;
          *(void *)&uint8_t buf[16] = *v2;
          unint64_t v5 = (std::__shared_weak_count *)v2[1];
          uint64_t v22 = v5;
          if (v5) {
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_100D2DAC8((uint64_t **)(a1 + 240), (unint64_t *)buf, (uint64_t)buf);
        }
        else
        {
          *(_OWORD *)std::string buf = *(_OWORD *)v4;
          *(void *)&uint8_t buf[16] = *v2;
          unint64_t v6 = (std::__shared_weak_count *)v2[1];
          uint64_t v22 = v6;
          if (v6) {
            atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_100D2DAC8((uint64_t **)(a1 + 264), (unint64_t *)buf, (uint64_t)buf);
        }
        if (v22) {
          sub_1000DB0A0(v22);
        }
      }
      v2 += 2;
    }
    while (v2 != v3);
    sub_1000C59A8((uint64_t *)(a1 + 328));
    sub_100D25474((uint64_t *)(a1 + 240), (uint64_t)&v14);
    sub_100D25474((uint64_t *)(a1 + 264), (uint64_t)&v14);
    if (!*(unsigned char *)(a1 + 216))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F32E8);
      }
      uint64_t v7 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v8 = *(void *)(a1 + 256);
        uint64_t v9 = *(void *)(a1 + 280);
        *(_DWORD *)std::string buf = 134349312;
        *(void *)&uint8_t buf[4] = v8;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(void *)&buf[14] = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,Roads,newly buffered data ingested,roads,%{public}lu,zeroLengthRoads,%{public}lu", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022F32E8);
        }
        uint64_t v11 = *(void *)(a1 + 256);
        uint64_t v12 = *(void *)(a1 + 280);
        int v17 = 134349312;
        uint64_t v18 = v11;
        __int16 v19 = 2050;
        uint64_t v20 = v12;
        CLLocationDegrees v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGeoMapFeatureRoadGeometryBuffer::updateRoadDataObjectsWithNewlyBufferedData()", "%s\n", v13);
        if (v13 != buf) {
          free(v13);
        }
      }
    }
    sub_1000F5BB0((uint64_t)&v14, v15[0]);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
}

void sub_100D25314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  unint64_t v6 = va_arg(va1, void *);
  uint64_t v7 = va_arg(va1, void);
  sub_1000F5BB0((uint64_t)va, v6);
  sub_1019DB560((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_100D25368(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 152);
  if (v4 == 1)
  {
    if ([a2 isDrivable]) {
      return 1;
    }
    int v4 = *(_DWORD *)(a1 + 152);
  }
  if (v4 == 2)
  {
    if (!a2) {
      return 0;
    }
    unsigned int v5 = [a2 isRoadPedestrianNavigable];
    unsigned int v6 = [a2 walkableSide];
    unsigned int v7 = [a2 isRail];
    if (((v6 - 1 > 2) & ~v5) == 0 && !v7) {
      return 1;
    }
    int v4 = *(_DWORD *)(a1 + 152);
  }
  uint64_t result = 0;
  if (a2 && v4 == 3)
  {
    unsigned int v9 = [a2 isRoadPedestrianNavigable];
    unsigned int v10 = [a2 walkableSide];
    unsigned int v11 = [a2 isRail];
    if (((v10 - 1 > 2) & ~v9) == 0 && !v11) {
      return 1;
    }
    unsigned int v12 = [a2 bikeableSide];
    unsigned int v13 = [a2 isRail] ^ 1;
    if (v12 - 1 < 3) {
      return v13;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t *sub_100D25474(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = result + 1;
  uint64_t v2 = (void *)*result;
  if ((uint64_t *)*result != result + 1)
  {
    unsigned int v5 = (uint64_t **)result;
    do
    {
      if (sub_100D2AF70(a2, v2 + 4))
      {
        unsigned int v6 = (uint64_t *)v2[1];
        if (v6)
        {
          do
          {
            uint64_t result = v6;
            unsigned int v6 = (uint64_t *)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            uint64_t result = (uint64_t *)v2[2];
            BOOL v7 = *result == (void)v2;
            uint64_t v2 = result;
          }
          while (!v7);
        }
      }
      else
      {
        uint64_t result = sub_100D2D9FC(v5, v2);
      }
      uint64_t v2 = result;
    }
    while (result != v3);
  }
  return result;
}

uint64_t sub_100D25508(uint64_t a1, char a2, double a3, double a4, double a5, double a6)
{
  if (!*(void *)(a1 + 88)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 224))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022F32E8);
    }
    BOOL v7 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "CLMM,CLTSP,road data query already in progress using maps API", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F32E8);
      }
      LOWORD(v29[0]) = 0;
      double v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureRoadGeometryBuffer::queryUsingLocalMapsAPIObject(const double, const double, const double, const double, const BOOL)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
    return 0;
  }
  uint64_t v37 = a1;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  __int16 v39 = 256;
  double v15 = sub_10016C458();
  uint64_t v31 = 0;
  unint64_t v32 = &v31;
  uint64_t v33 = 0x3052000000;
  BOOL v34 = sub_100177DF0;
  int v35 = sub_100177508;
  uint64_t v36 = 0;
  int v17 = *(unsigned __int8 *)(a1 + 216);
  if (*(unsigned char *)(a1 + 216)) {
    v32[5] = (uint64_t)dispatch_semaphore_create(0);
  }
  v29[0] = 0;
  v29[1] = v29;
  v29[2] = 0x4812000000;
  v29[3] = sub_100D25B10;
  v29[4] = sub_100D25B34;
  v29[5] = "";
  memset(v30, 0, sizeof(v30));
  v27[0] = 0;
  v27[1] = v27;
  _DWORD v27[2] = 0x2020000000;
  int v28 = 0;
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  void v26[2] = sub_100D25B60;
  v26[3] = &unk_1022F3228;
  v26[5] = v29;
  v26[6] = a1;
  v26[4] = v27;
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_100D2636C;
  long long v23[3] = &unk_1022F3250;
  *(double *)&v23[8] = a3;
  *(double *)&v23[9] = a6;
  *(double *)&v23[10] = a4;
  *(double *)&v23[11] = a5;
  *(double *)&v23[12] = v15;
  char v24 = a2;
  v23[4] = v27;
  v23[5] = v29;
  char v25 = v17;
  v23[6] = &v31;
  v23[7] = a1;
  ++*(_DWORD *)(a1 + 116);
  *(unsigned char *)(a1 + 224) = 1;
  [*(id *)(a1 + 88) findRoadsNear:v26 radius:v23 handler:a4 completionHandler:a5];
  if (!v17) {
    goto LABEL_22;
  }
  intptr_t v18 = dispatch_semaphore_wait((dispatch_semaphore_t)v32[5], 0xFFFFFFFFFFFFFFFFLL);
  __int16 v19 = v32[5];
  if (v19) {
    dispatch_release(v19);
  }
  if (v18)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022F32E8);
    }
    uint64_t v20 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,Roads,queryForRoadsWithinDistance,semaphore timed out", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F32E8);
      }
      uint64_t v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureRoadGeometryBuffer::queryUsingLocalMapsAPIObject(const double, const double, const double, const double, const BOOL)", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
    uint64_t v8 = 0;
  }
  else
  {
LABEL_22:
    uint64_t v8 = 1;
  }
  _Block_object_dispose(v27, 8);
  _Block_object_dispose(v29, 8);
  *(void *)std::string buf = v30;
  sub_1000C5954((void ***)buf);
  _Block_object_dispose(&v31, 8);
  if (HIBYTE(v39))
  {
    if ((_BYTE)v39) {
      pthread_mutex_unlock(v38);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v37 + 24))(v37);
    }
  }
  return v8;
}

void sub_100D25AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,void **a55)
{
}

__n128 sub_100D25B10(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_100D25B34(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  sub_1000C5954(&v1);
}

void sub_100D25B60(void *a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = a1[6];
    id v4 = a2;
    if (v4)
    {
      unsigned int v5 = v4;
      if (sub_100D25368(v3, v4))
      {
        sub_100D25C4C(v5, 0, (std::string **)&v7);
        *(_DWORD *)(*(void *)(a1[4] + 8) + 24) += 208;
        if ((void)v7)
        {
          if (*(_DWORD *)(v3 + 152) != 1)
          {
            int v6 = *(_DWORD *)(v7 + 104);
            if (v6 >= 1) {
              *(double *)(v7 + 96) = (double)v6 * 3.7;
            }
          }
          sub_100D247D0((uint64_t *)(*(void *)(a1[5] + 8) + 48), &v7);
        }
        if (*((void *)&v7 + 1)) {
          sub_1000DB0A0(*((std::__shared_weak_count **)&v7 + 1));
        }
      }
    }
  }
}

void sub_100D25C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

double sub_100D25C4C@<D0>(void *a1@<X1>, int a2@<W2>, std::string **a3@<X8>)
{
  if (!a1)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022F32E8);
    }
    double v15 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "CLMM,GEOMapFeatureRoad is null", (uint8_t *)buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_23;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022F32E8);
    }
    uint64_t v8 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLMapRoadPtr CLGeoMapFeatureAccessGeometryCommon::makeRoadFromGEOMapFeatureRoad(CLDistanceCalc &, GEOMapFeatureRoad * _Nonnull, BOOL)", "%s\n", (const char *)v8);
    if (v8 == buf) {
      goto LABEL_23;
    }
LABEL_52:
    free(v8);
LABEL_23:
    *a3 = 0;
    a3[1] = 0;
    return result;
  }
  char v4 = a2;
  if (a2 && (unint64_t)[a1 coordinateCount] <= 1)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022F32E8);
    }
    int v6 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 134283777;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)[a1 roadID];
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)[a1 coordinateCount];
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#Warning CLMM, GEOMapFeatureRoad id,%{private}lld,has less than two coordinate,%{public}ld", (uint8_t *)buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_23;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022F32E8);
    }
    [a1 roadID];
    [a1 coordinateCount];
    uint64_t v8 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLMapRoadPtr CLGeoMapFeatureAccessGeometryCommon::makeRoadFromGEOMapFeatureRoad(CLDistanceCalc &, GEOMapFeatureRoad * _Nonnull, BOOL)", "%s\n", (const char *)v8);
    if (v8 == buf) {
      goto LABEL_23;
    }
    goto LABEL_52;
  }
  sub_100D2CBF0(a3);
  if ([a1 internalRoadName])
  {
    unsigned int v9 = *a3;
    sub_100134750(buf, [objc_msgSend(objc_msgSend(a1, "internalRoadName"), "UTF8String") UTF8String]);
    std::string::operator=(v9 + 2, buf);
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
  }
  unsigned int v10 = *a3;
  id v11 = [a1 roadID];
  unint64_t v12 = sub_100D2B5E8(a1);
  v10->__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
  v10->__r_.__value_.__l.__size_ = v12;
  unsigned int v13 = *a3;
  BOOL v14 = ([a1 isRail] & 1) != 0 || [a1 travelDirection] == 0;
  v13->__r_.__value_.__s.__data_[16] = !v14;
  __int16 v16 = *a3;
  v16->__r_.__value_.__s.__data_[17] = [a1 isRail];
  int v17 = *a3;
  v17->__r_.__value_.__s.__data_[18] = [a1 isTunnel];
  intptr_t v18 = *a3;
  v18->__r_.__value_.__s.__data_[19] = [a1 isBridge];
  __int16 v19 = *a3;
  HIDWORD(v19->__r_.__value_.__r.__words[2]) = [a1 roadClass];
  uint64_t v20 = *a3;
  LODWORD(v20[1].__r_.__value_.__l.__data_) = [a1 formOfWay];
  double v21 = *a3;
  LODWORD(v21[3].__r_.__value_.__l.__data_) = [a1 travelDirection];
  uint64_t v22 = *a3;
  HIDWORD(v22[3].__r_.__value_.__r.__words[0]) = [a1 rampType];
  uint64_t v23 = *a3;
  unsigned __int8 v24 = [a1 isRoadPedestrianNavigable];
  unsigned int v25 = [a1 walkableSide];
  unsigned __int8 v26 = [a1 isRail];
  if (v25 - 1 < 3) {
    char v27 = 1;
  }
  else {
    char v27 = v24;
  }
  v23[3].__r_.__value_.__s.__data_[8] = v27 & (v26 ^ 1);
  int v28 = *a3;
  v28[3].__r_.__value_.__s.__data_[9] = [a1 isDrivable];
  uint64_t v29 = *a3;
  LODWORD(v28) = [a1 isRoadPedestrianNavigable];
  unsigned int v30 = [a1 walkableSide];
  unsigned int v31 = [a1 isRail];
  if (((v30 - 1 > 2) & ~v28) != 0 || ((v31 ^ 1) & 1) == 0)
  {
    unsigned int v33 = [a1 bikeableSide];
    unsigned int v32 = [a1 isRail] ^ 1;
    if (v33 - 1 >= 3) {
      LOBYTE(v32) = 0;
    }
  }
  else
  {
    LOBYTE(v32) = 1;
  }
  v29[3].__r_.__value_.__s.__data_[10] = v32;
  BOOL v34 = *a3;
  HIDWORD(v34[3].__r_.__value_.__r.__words[1]) = [a1 walkableSide];
  int v35 = *a3;
  HIDWORD(v35[4].__r_.__value_.__r.__words[1]) = [objc_msgSend(objc_msgSend(a1, "startJunction"), "junctionIndex")];
  uint64_t v36 = *a3;
  LODWORD(v36[4].__r_.__value_.__r.__words[2]) = [objc_msgSend(objc_msgSend(a1, "endJunction"), "junctionIndex")];
  uint64_t v37 = *a3;
  v37[4].__r_.__value_.__s.__data_[20] = [objc_msgSend(objc_msgSend(a1, "startJunction"), "isOnTileBorder")];
  double v38 = *a3;
  v38[4].__r_.__value_.__s.__data_[21] = [objc_msgSend(objc_msgSend(a1, "endJunction"), "isOnTileBorder")];
  __int16 v39 = *a3;
  unsigned int v40 = [a1 roadClass];
  unsigned int v41 = [a1 travelDirection];
  if (v40 > 7)
  {
    double v43 = dbl_101D1C3C0[v41 == 0];
  }
  else
  {
    uint64_t v42 = (double *)&unk_101D8C340;
    if (!v41) {
      uint64_t v42 = (double *)&unk_101D8C380;
    }
    double v43 = v42[v40];
  }
  *(double *)&v39[4].__r_.__value_.__l.__data_ = v43;
  unsigned int v44 = [a1 speedLimitIsMPH];
  BOOL v45 = *a3;
  id v46 = [a1 speedLimit];
  double v47 = 0.277778;
  if (v44) {
    double v47 = 0.44704;
  }
  *(double *)&v45[1].__r_.__value_.__l.__size_ = v47 * (double)(unint64_t)v46;
  BOOL v48 = *a3;
  LODWORD(v48[4].__r_.__value_.__r.__words[1]) = [a1 laneCount];
  uint64_t v49 = *a3;
  uint64_t v50 = 0;
  unint64_t v51 = 0;
  LODWORD(v49[3].__r_.__value_.__r.__words[2]) = [a1 bikeableSide];
  while ((unint64_t)[a1 coordinateCount] > v51)
  {
    sub_10039C36C(*a3, (double *)((char *)[a1 coordinates] + v50), 1);
    ++v51;
    v50 += 16;
  }
  if ((v4 & 1) == 0 && [a1 coordinateCount] == (id)1) {
    sub_10039C36C(*a3, (double *)[a1 coordinates], 0);
  }
  if ([a1 coordinateCount])
  {
    int v52 = *a3;
    v52[5].__r_.__value_.__r.__words[0] = *((void *)[a1 coordinates3d] + 2);
    uint64_t v53 = *a3;
    int v54 = (double *)[a1 coordinates3d];
    double result = v54[3 * (void)[a1 coordinateCount] - 1];
    *(double *)&v53[5].__r_.__value_.__l.__size_ = result;
  }
  return result;
}

void sub_100D26328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  uint64_t v22 = *(std::__shared_weak_count **)(v20 + 8);
  if (v22) {
    sub_1000DB0A0(v22);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D2636C(uint64_t a1, void *a2)
{
  char v4 = *(int32x2_t **)(a1 + 56);
  if (a2)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022F32E8);
    }
    unsigned int v5 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 134349571;
      *(void *)unsigned __int8 v26 = [a2 code];
      *(_WORD *)&v26[8] = 2114;
      *(void *)char v27 = [a2 domain];
      *(_WORD *)&v27[8] = 2113;
      *(void *)int v28 = [a2 localizedDescription];
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLMM,CLTSP,Roads,Warning,GEOMapFeatureAccessRequest reported errorcode,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F32E8);
      }
      [a2 code];
      [a2 domain];
      [a2 localizedDescription];
      uint64_t v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureRoadGeometryBuffer::queryUsingLocalMapsAPIObject(const double, const double, const double, const double, const BOOL)_block_invoke", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
    v4[15] = vadd_s32(v4[15], (int32x2_t)0x100000001);
  }
  else
  {
    double v7 = *(double *)(a1 + 64);
    double v6 = *(double *)(a1 + 72);
    double v8 = *(double *)(a1 + 80);
    double v9 = *(double *)(a1 + 88);
    if (sub_100D21230(v7, v6, v8, v9))
    {
      *(double *)&v4[7] = v7;
      *(double *)&void v4[8] = v8;
      *(double *)&v4[9] = v9;
      *(double *)&v4[10] = v6;
    }
    v4[15].i32[1] = 0;
  }
  if (*(double *)(a1 + 72) > 0.5)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022F32E8);
    }
    unsigned int v10 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      int v11 = v4[35].i32[0] + v4[32].i32[0];
      int v12 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      double v13 = 0.0;
      if (*(double *)(a1 + 96) >= 0.0) {
        double v13 = vabdd_f64(sub_10016C458(), *(double *)(a1 + 96)) * 1000.0;
      }
      uint64_t v15 = *(void *)(a1 + 80);
      uint64_t v14 = *(void *)(a1 + 88);
      uint64_t v16 = *(void *)(a1 + 72);
      int32x2_t v17 = v4[40];
      __int32 v19 = v4[14].i32[0];
      __int32 v18 = v4[14].i32[1];
      __int32 v20 = v4[15].i32[0];
      __int32 v21 = v4[15].i32[1];
      *(_DWORD *)std::string buf = 67243009;
      *(_DWORD *)unsigned __int8 v26 = v11;
      *(_WORD *)&v26[4] = 1026;
      *(_DWORD *)&v26[6] = v12;
      *(_WORD *)char v27 = 2050;
      *(double *)&_DWORD v27[2] = v13;
      *(_WORD *)int v28 = 2049;
      *(void *)&v28[2] = v15;
      __int16 v29 = 2049;
      uint64_t v30 = v14;
      __int16 v31 = 2050;
      uint64_t v32 = v16;
      __int16 v33 = 1026;
      BOOL v34 = a2 != 0;
      __int16 v35 = 1026;
      __int32 v36 = v18;
      __int16 v37 = 2050;
      int32x2_t v38 = v17;
      __int16 v39 = 1026;
      __int32 v40 = v19;
      __int16 v41 = 1026;
      __int32 v42 = v20;
      __int16 v43 = 1026;
      __int32 v44 = v21;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,Roads,bufferDataUsingMapsAPI,roadCount,%{public}d,sizeOfRoad,%{public}d,responseTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,error,%{public}d,apiCalls,%{public}d,connectionBufferUsedCount,%{public}lu,bufferDataCalls,%{public}d,bufferingFailedCount,%{public}d,consecutiveBufferingFailed,%{public}d", buf, 0x5Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F32E8);
      }
      if (*(double *)(a1 + 96) >= 0.0) {
        sub_10016C458();
      }
      unsigned __int8 v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureRoadGeometryBuffer::queryUsingLocalMapsAPIObject(const double, const double, const double, const double, const BOOL)_block_invoke", "%s\n", v24);
      if (v24 != (char *)buf) {
        free(v24);
      }
    }
  }
  if (*(unsigned char *)(a1 + 104)) {
    [*(id *)&v4[11] clearRoadTiles];
  }
  uint64_t v22 = *(void *)(*(void *)(a1 + 40) + 8);
  if (&v4[41] != (int32x2_t *)(v22 + 48)) {
    sub_100D2D8A8((uint64_t)&v4[41], *(uint64_t **)(v22 + 48), *(uint64_t **)(v22 + 56), (uint64_t)(*(void *)(v22 + 56) - *(void *)(v22 + 48)) >> 4);
  }
  v4[28].i8[0] = 0;
  if (*(unsigned char *)(a1 + 105)) {
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(*(void *)(a1 + 48) + 8) + 40));
  }
}

BOOL sub_100D26924(uint64_t a1, uint64_t a2, uint64_t a3, double a4, CLLocationDegrees a5, CLLocationDegrees a6, double a7)
{
  if (!*(unsigned char *)(a1 + 169)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 224))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022F32E8);
    }
    double v8 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "CLMM,CLTSP,road data query already in progress using XPC", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F32E8);
      }
      LOWORD(v25) = 0;
      unsigned int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureRoadGeometryBuffer::queryUsingXPCService(const double, const double, const double, const double, const BOOL, const BOOL)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v25 = a1;
    (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
    __int16 v26 = 256;
    double v17 = sub_10016C458();
    *(void *)std::string buf = 0;
    int v28 = buf;
    uint64_t v29 = 0x2020000000;
    char v30 = 0;
    CLLocationCoordinate2D v19 = CLLocationCoordinate2DMake(a5, a6);
    *(unsigned char *)(a1 + 224) = 1;
    __int32 v20 = +[CLMapsXPCServiceManager sharedInstance];
    BOOL v21 = (*(_DWORD *)(a1 + 152) & 0xFFFFFFFE) == 2;
    uint64_t v22 = *(unsigned __int8 *)(a1 + 216);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_100D26C98;
    long long v23[3] = &unk_1022F3278;
    *(double *)&v23[6] = a4;
    *(double *)&v23[7] = a7;
    *(CLLocationDegrees *)&v23[8] = a5;
    *(CLLocationDegrees *)&v23[9] = a6;
    v23[4] = buf;
    v23[5] = a1;
    char v24 = a2;
    *(double *)&v23[10] = v17;
    -[CLMapsXPCServiceManager collectMapDataOfType:aroundCoordinate:inRadius:allowNetwork:isPedestrianOrCycling:clearTiles:callSynchronously:WithReply:](v20, "collectMapDataOfType:aroundCoordinate:inRadius:allowNetwork:isPedestrianOrCycling:clearTiles:callSynchronously:WithReply:", 0, a2, v21, a3, v22, v23, v19.latitude, v19.longitude, a7);
    _Block_object_dispose(buf, 8);
    (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
    return 1;
  }
  return result;
}

void sub_100D26C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a2) {
    sub_1001C7F8C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D26C98(double *a1, void *a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = *((void *)a1 + 5);
  ++*(_DWORD *)(v3 + 116);
  v76[0] = 0;
  v76[1] = 0;
  uint64_t v74 = 0;
  double v75 = v76;
  uint64_t v72 = 0;
  __int16 v73 = 0;
  if (a2)
  {
    double v5 = a1[6];
    double v4 = a1[7];
    double v6 = a1[8];
    double v7 = a1[9];
    if (sub_100D21230(v5, v4, v6, v7))
    {
      *(double *)(v3 + 56) = v5;
      *(double *)(v3 + 64) = v6;
      *(double *)(v3 + 72) = v7;
      *(double *)(v3 + 80) = v4;
    }
    *(_DWORD *)(v3 + 124) = 0;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    id v8 = [a2 countByEnumeratingWithState:&v68 objects:v113 count:16];
    double v65 = v2;
    if (!v8)
    {
      uint64_t v10 = v3;
      int v66 = 0;
      goto LABEL_34;
    }
    int v66 = 0;
    uint64_t v9 = *(void *)v69;
    uint64_t v10 = v3;
    uint64_t v11 = v3 + 16;
    int v12 = a2;
    while (1)
    {
      for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v69 != v9) {
          objc_enumerationMutation(v12);
        }
        uint64_t v14 = *(void **)(*((void *)&v68 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v15 = (char *)operator new(0xE8uLL);
          *((void *)v15 + 1) = 0;
          *((void *)v15 + 2) = 0;
          *(void *)uint64_t v15 = off_1022F3318;
          *(_OWORD *)(v15 + 40) = 0u;
          *(_OWORD *)(v15 + 56) = 0u;
          *(_OWORD *)(v15 + 72) = 0u;
          *(_OWORD *)(v15 + 88) = 0u;
          *(_OWORD *)(v15 + 120) = 0u;
          *((void *)v15 + 17) = 0;
          *(_OWORD *)(v15 + 104) = 0u;
          *(_OWORD *)(v15 + 24) = 0u;
          *(void *)(v15 + 44) = -1;
          *((void *)v15 + 8) = 0xBFF0000000000000;
          *((void *)v15 + 9) = 0;
          *((void *)v15 + 10) = 0;
          *((void *)v15 + 11) = 0;
          *((void *)v15 + 12) = -1;
          *((void *)v15 + 16) = -1;
          *((_DWORD *)v15 + 34) = -1;
          *((void *)v15 + 28) = 0;
          *((_OWORD *)v15 + 12) = 0u;
          *((_OWORD *)v15 + 13) = 0u;
          *((_OWORD *)v15 + 10) = 0u;
          *((_OWORD *)v15 + 11) = 0u;
          *((_OWORD *)v15 + 9) = 0u;
          *(void *)std::string buf = v15 + 24;
          *(void *)&uint8_t buf[8] = v15;
          if (!sub_10039D71C((uint64_t *)v15 + 3, v11, v14, 0)) {
            goto LABEL_22;
          }
          uint64_t v16 = *(void **)buf;
          uint64_t v17 = **(void **)buf;
          unint64_t v18 = sub_100D2754C((uint64_t *)buf);
          *uint64_t v16 = v17;
          v16[1] = v18;
          int v19 = *(_DWORD *)(v10 + 152);
          if (v19 == 3)
          {
            uint64_t v20 = *(void *)buf;
            if (!*(unsigned char *)(*(void *)buf + 82)) {
              goto LABEL_22;
            }
          }
          else
          {
            if (v19 != 2)
            {
              if (v19 != 1 || !*(unsigned char *)(*(void *)buf + 81))
              {
LABEL_22:
                int v12 = a2;
                if (*(void *)&buf[8]) {
                  sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
                }
                continue;
              }
LABEL_21:
              sub_100D247D0((uint64_t *)&v72, (long long *)buf);
              v66 += 208;
              goto LABEL_22;
            }
            uint64_t v20 = *(void *)buf;
            if (!*(unsigned char *)(*(void *)buf + 80)) {
              goto LABEL_22;
            }
          }
          int v21 = *(_DWORD *)(v20 + 104);
          if (v21 >= 1) {
            *(double *)(v20 + 96) = (double)v21 * 3.7;
          }
          goto LABEL_21;
        }
      }
      id v8 = [v12 countByEnumeratingWithState:&v68 objects:v113 count:16];
      if (!v8)
      {
LABEL_34:
        uint64_t v3 = v10;
        if ((uint64_t **)(v10 + 328) != &v72) {
          sub_100D2D8A8(v10 + 328, v72, v73, ((char *)v73 - (char *)v72) >> 4);
        }
        uint64_t v2 = v65;
        int v31 = v66;
        goto LABEL_38;
      }
    }
  }
  *(int32x2_t *)(v3 + 120) = vadd_s32(*(int32x2_t *)(v3 + 120), (int32x2_t)0x100000001);
  *(unsigned char *)(*(void *)(*((void *)a1 + 4) + 8) + 24) = 1;
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1022F32E8);
  }
  uint64_t v22 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
  {
    uint64_t v24 = *((void *)v2 + 8);
    uint64_t v23 = *((void *)v2 + 9);
    uint64_t v25 = *((void *)v2 + 7);
    int v27 = *(_DWORD *)(v3 + 112);
    int v26 = *(_DWORD *)(v3 + 116);
    int v28 = *(_DWORD *)(v3 + 120);
    int v29 = *(_DWORD *)(v3 + 124);
    int v30 = *((unsigned __int8 *)v2 + 88);
    *(_DWORD *)std::string buf = 134285313;
    *(void *)&uint8_t buf[4] = v24;
    *(_WORD *)&unsigned char buf[12] = 2049;
    *(void *)&buf[14] = v23;
    *(_WORD *)&unsigned char buf[22] = 2050;
    *(void *)double v97 = v25;
    *(_WORD *)&v97[8] = 1026;
    *(_DWORD *)double v98 = v26;
    *(_WORD *)&v98[4] = 1026;
    *(_DWORD *)&v98[6] = v27;
    __int16 v99 = 1026;
    *(_DWORD *)double v100 = v28;
    *(_WORD *)&v100[4] = 1026;
    *(_DWORD *)&v100[6] = v29;
    *(_WORD *)__int16 v101 = 1026;
    *(_DWORD *)&v101[2] = v30;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,Roads,queryForRoadsWithinDistance returned,xpcError,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,apiCalls,%{public}d,bufferDataCalls,%{public}d,bufferingFailedCount,%{public}d,consecutiveBufferingFailed,%{public}d,network,%{public}d", buf, 0x3Eu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022F32E8);
    }
    uint64_t v46 = *((void *)v2 + 8);
    uint64_t v45 = *((void *)v2 + 9);
    uint64_t v47 = *((void *)v2 + 7);
    int v49 = *(_DWORD *)(v3 + 112);
    int v48 = *(_DWORD *)(v3 + 116);
    int v50 = *(_DWORD *)(v3 + 120);
    int v51 = *(_DWORD *)(v3 + 124);
    int v52 = *((unsigned __int8 *)v2 + 88);
    int v77 = 134285313;
    *(void *)double v78 = v46;
    *(_WORD *)&v78[8] = 2049;
    *(void *)double v79 = v45;
    *(_WORD *)&v79[8] = 2050;
    *(void *)uint64_t v80 = v47;
    *(_WORD *)&v80[8] = 1026;
    *(_DWORD *)double v81 = v48;
    *(_WORD *)&v81[4] = 1026;
    *(_DWORD *)&v81[6] = v49;
    __int16 v82 = 1026;
    *(_DWORD *)long double v83 = v50;
    *(_WORD *)&v83[4] = 1026;
    *(_DWORD *)&v83[6] = v51;
    *(_WORD *)long double v84 = 1026;
    *(_DWORD *)&v84[2] = v52;
    uint64_t v53 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureRoadGeometryBuffer::queryUsingXPCService(const double, const double, const double, const double, const BOOL, const BOOL)_block_invoke", "%s\n", v53);
    if (v53 != buf) {
      free(v53);
    }
  }
  int v31 = 0;
LABEL_38:
  *(unsigned char *)(v3 + 224) = 0;
  if (v2[7] > *(double *)(v3 + 160))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022F32E8);
    }
    uint64_t v32 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      if (a2) {
        unsigned int v33 = [a2 count];
      }
      else {
        unsigned int v33 = 0;
      }
      double v34 = 0.0;
      if (v2[10] >= 0.0) {
        double v34 = vabdd_f64(sub_10016C458(), v2[10]) * 1000.0;
      }
      uint64_t v36 = *((void *)v2 + 8);
      uint64_t v35 = *((void *)v2 + 9);
      uint64_t v37 = *((void *)v2 + 7);
      uint64_t v38 = *(void *)(v3 + 320);
      int v40 = *(_DWORD *)(v3 + 112);
      int v39 = *(_DWORD *)(v3 + 116);
      int v41 = *(_DWORD *)(v3 + 120);
      int v42 = *(_DWORD *)(v3 + 124);
      int v43 = *((unsigned __int8 *)v2 + 88);
      *(_DWORD *)std::string buf = 67243265;
      *(_DWORD *)&uint8_t buf[4] = v33;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v31;
      *(_WORD *)&buf[14] = 2050;
      *(double *)&uint8_t buf[16] = v34;
      *(_WORD *)double v97 = 2049;
      *(void *)&v97[2] = v36;
      *(_WORD *)double v98 = 2049;
      *(void *)&v98[2] = v35;
      __int16 v99 = 2050;
      *(void *)double v100 = v37;
      *(_WORD *)&v100[8] = 1026;
      *(_DWORD *)__int16 v101 = a2 == 0;
      *(_WORD *)&v101[4] = 1026;
      int v102 = v39;
      __int16 v103 = 2050;
      uint64_t v104 = v38;
      __int16 v105 = 1026;
      int v106 = v40;
      __int16 v107 = 1026;
      int v108 = v41;
      __int16 v109 = 1026;
      int v110 = v42;
      __int16 v111 = 1026;
      int v112 = v43;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,Roads,MapHelperService,roadCount,%{public}d,sizeOfRoad,%{public}d,responseTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,error,%{public}d,apiCalls,%{public}d,connectionBufferUsedCount,%{public}lu,bufferDataCalls,%{public}d,bufferingFailedCount,%{public}d,consecutiveBufferingFailed,%{public}d,network,%{public}d", buf, 0x64u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F32E8);
      }
      if (a2) {
        unsigned int v44 = [a2 count];
      }
      else {
        unsigned int v44 = 0;
      }
      double v54 = 0.0;
      if (v2[10] >= 0.0) {
        double v54 = vabdd_f64(sub_10016C458(), v2[10]) * 1000.0;
      }
      uint64_t v56 = *((void *)v2 + 8);
      uint64_t v55 = *((void *)v2 + 9);
      uint64_t v57 = *((void *)v2 + 7);
      uint64_t v58 = *(void *)(v3 + 320);
      int v60 = *(_DWORD *)(v3 + 112);
      int v59 = *(_DWORD *)(v3 + 116);
      int v61 = *(_DWORD *)(v3 + 120);
      int v62 = *(_DWORD *)(v3 + 124);
      int v63 = *((unsigned __int8 *)v2 + 88);
      int v77 = 67243265;
      *(_DWORD *)double v78 = v44;
      *(_WORD *)&v78[4] = 1026;
      *(_DWORD *)&v78[6] = v31;
      *(_WORD *)double v79 = 2050;
      *(double *)&v79[2] = v54;
      *(_WORD *)uint64_t v80 = 2049;
      *(void *)&v80[2] = v56;
      *(_WORD *)double v81 = 2049;
      *(void *)&v81[2] = v55;
      __int16 v82 = 2050;
      *(void *)long double v83 = v57;
      *(_WORD *)&v83[8] = 1026;
      *(_DWORD *)long double v84 = a2 == 0;
      *(_WORD *)&v84[4] = 1026;
      int v85 = v59;
      __int16 v86 = 2050;
      uint64_t v87 = v58;
      __int16 v88 = 1026;
      int v89 = v60;
      __int16 v90 = 1026;
      int v91 = v61;
      __int16 v92 = 1026;
      int v93 = v62;
      __int16 v94 = 1026;
      int v95 = v63;
      __int16 v64 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureRoadGeometryBuffer::queryUsingXPCService(const double, const double, const double, const double, const BOOL, const BOOL)_block_invoke", "%s\n", v64);
      if (v64 != buf) {
        free(v64);
      }
    }
  }
  *(void *)std::string buf = &v72;
  sub_1000C5954((void ***)buf);
  sub_1000F5BB0((uint64_t)&v75, v76[0]);
}

void sub_100D274F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void **a43)
{
  a43 = (void **)&a23;
  sub_1000C5954(&a43);
  sub_1000F5BB0((uint64_t)&a26, a27);
  _Unwind_Resume(a1);
}

unint64_t sub_100D2754C(uint64_t *a1)
{
  uint64_t v2 = (unint64_t *)*a1;
  if (v2)
  {
    unint64_t v3 = *v2;
    unint64_t v12 = *v2;
    if ((int)((v2[18] - v2[17]) >> 4) > 1)
    {
      id v8 = (double *)sub_10039C48C((uint64_t)v2, 0);
      uint64_t v9 = (double *)sub_10039C48C(*a1, 1);
      if (sub_100D2BB2C(v8, v9, *(unsigned __int8 *)(*a1 + 17), *(unsigned __int8 *)(*a1 + 19), *(unsigned __int8 *)(*a1 + 18), &v12))
      {
        return v12;
      }
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F32E8);
      }
      uint64_t v10 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 134283521;
        unint64_t v16 = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "CLMM,GeoMapDataID,unable to make CLRoadID from CLMapRoadPtr,%{private}lld", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 0)) {
        return v12;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F32E8);
      }
      int v13 = 134283521;
      unint64_t v14 = v12;
      double v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static uint64_t CLGeoMapFeatureAccessGeometryCommon::CLGeoMapDataID::getRoadID(const CLMapRoadPtr &)", "%s\n");
    }
    else
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F32E8);
      }
      double v4 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 134283521;
        unint64_t v16 = v3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLMM,GeoMapDataID,less than two coordinates,roadID,%{private}lld", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        return v12;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F32E8);
      }
      int v13 = 134283521;
      unint64_t v14 = v3;
      double v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static uint64_t CLGeoMapFeatureAccessGeometryCommon::CLGeoMapDataID::getRoadID(const CLMapRoadPtr &)", "%s\n");
    }
    if (v5 != buf) {
      free(v5);
    }
    return v12;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1022F32E8);
  }
  double v6 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "CLMM,GeoMapDataID,null road", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022F32E8);
    }
    LOWORD(v13) = 0;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static uint64_t CLGeoMapFeatureAccessGeometryCommon::CLGeoMapDataID::getRoadID(const CLMapRoadPtr &)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  return 0;
}

void *sub_100D279D0(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    sub_1000DB0A0(v3);
  }
  double v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    sub_1000DB0A0(v4);
  }
  return a1;
}

void sub_100D27A18(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  double v4 = *(unint64_t **)(a1 + 16);
  if (v4)
  {
    uint64_t v6 = *a3;
    uint64_t v7 = a3[1] - *a3;
    if (v7)
    {
      uint64_t v8 = v7 / 48;
      if ((unint64_t)(v7 / 48) <= 1) {
        uint64_t v8 = 1;
      }
      while (**(void **)v6 != *v4 || *(void *)(*(void *)v6 + 8) != v4[1])
      {
        v6 += 48;
        if (!--v8) {
          goto LABEL_8;
        }
      }
    }
    else
    {
LABEL_8:
      int v19 = *(long long **)(a1 + 16);
      uint64_t v9 = sub_100D2DB50(a2, v4, (uint64_t)&unk_101D0B290, &v19);
      uint64_t v10 = (std::__shared_weak_count *)v9[7];
      uint64_t v13 = v9[6];
      unint64_t v14 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v11 = (std::__shared_weak_count *)v9[9];
      uint64_t v15 = v9[8];
      unint64_t v16 = v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v12 = (std::__shared_weak_count *)v9[11];
      uint64_t v17 = v9[10];
      unint64_t v18 = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_100D2BC54(a3, (uint64_t *)*a3, &v13);
      sub_100D27A18(&v13, a2, a3);
      if (v18) {
        sub_1000DB0A0(v18);
      }
      if (v16) {
        sub_1000DB0A0(v16);
      }
      if (v14) {
        sub_1000DB0A0(v14);
      }
    }
  }
}

void sub_100D27B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100D27B68(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  double v4 = *(unint64_t **)(a1 + 32);
  if (v4)
  {
    uint64_t v6 = *a3;
    uint64_t v7 = a3[1] - *a3;
    if (v7)
    {
      uint64_t v8 = v7 / 48;
      if ((unint64_t)(v7 / 48) <= 1) {
        uint64_t v8 = 1;
      }
      while (**(void **)v6 != *v4 || *(void *)(*(void *)v6 + 8) != v4[1])
      {
        v6 += 48;
        if (!--v8) {
          goto LABEL_8;
        }
      }
    }
    else
    {
LABEL_8:
      uint64_t v24 = *(long long **)(a1 + 32);
      uint64_t v9 = sub_100D2DB50(a2, v4, (uint64_t)&unk_101D0B290, &v24);
      uint64_t v11 = v9[6];
      uint64_t v10 = (std::__shared_weak_count *)v9[7];
      uint64_t v18 = v11;
      int v19 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v13 = v9[8];
      unint64_t v12 = (std::__shared_weak_count *)v9[9];
      uint64_t v20 = v13;
      int v21 = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v15 = v9[10];
      unint64_t v14 = (std::__shared_weak_count *)v9[11];
      uint64_t v22 = v15;
      uint64_t v23 = v14;
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v16 = (uint64_t *)a3[1];
      if ((unint64_t)v16 >= a3[2])
      {
        uint64_t v17 = sub_100D2DCBC(a3, &v18);
      }
      else
      {
        *unint64_t v16 = v11;
        v16[1] = (uint64_t)v10;
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        void v16[2] = v13;
        v16[3] = (uint64_t)v12;
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v16[4] = v15;
        void v16[5] = (uint64_t)v14;
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v17 = (uint64_t)(v16 + 6);
      }
      a3[1] = v17;
      sub_100D27B68(&v18, a2, a3);
      if (v23) {
        sub_1000DB0A0(v23);
      }
      if (v21) {
        sub_1000DB0A0(v21);
      }
      if (v19) {
        sub_1000DB0A0(v19);
      }
    }
  }
}

void sub_100D27CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100D27D04(uint64_t a1, uint64_t *a2, double a3, double a4, double a5)
{
  sub_10016C458();
  sub_100D2B590(&v30, a3, a4, a5);
  if (!*(unsigned char *)(a1 + 216)
    || (Current = CFAbsoluteTimeGetCurrent(), int v11 = sub_100D27EB0(a1, 0, 0, Current, a3, a4, a5), result = 0, v11))
  {
    sub_1000C59A8(a2);
    uint64_t v13 = *(long long **)(a1 + 232);
    for (uint64_t i = *(long long **)(a1 + 240); v13 != i; ++v13)
    {
      uint64_t v15 = *(void *)v13;
      if (*(void *)v13)
      {
        uint64_t v17 = v15 + 16;
        uint64_t v16 = *(void *)(v15 + 16);
        unint64_t v18 = 0x8E38E38E38E38E39 * ((*(void *)(v17 + 8) - v16) >> 3);
        if ((int)v18 >= 1)
        {
          unint64_t v19 = 0;
          do
          {
            if (v18 > v19)
            {
              if (v16)
              {
                uint64_t v20 = *(double **)(v16 + 72 * v19 + 48);
                uint64_t v21 = *(void *)(v16 + 72 * v19 + 56) - (void)v20;
                if ((int)((unint64_t)v21 >> 4) >= 1)
                {
                  unint64_t v22 = 0;
                  unint64_t v23 = v21 >> 4;
                  uint64_t v24 = ((unint64_t)v21 >> 4);
                  do
                  {
                    if (v23 <= v22) {
                      uint64_t v25 = 0;
                    }
                    else {
                      uint64_t v25 = v20;
                    }
                    if (v30 <= *v25 && v32 >= *v25)
                    {
                      double v27 = v25[1];
                      if (v33 <= v31)
                      {
                        if (v33 < v31 && (v33 > v27 || v31 < v27))
                        {
LABEL_32:
                          sub_100D283B0(a2, v13);
                          goto LABEL_33;
                        }
                      }
                      else if (v33 >= v27 && v31 <= v27)
                      {
                        goto LABEL_32;
                      }
                    }
                    ++v22;
                    v20 += 2;
                  }
                  while (v24 != v22);
                }
              }
            }
            ++v19;
          }
          while (v19 != v18);
        }
      }
LABEL_33:
      ;
    }
    return 1;
  }
  return result;
}

uint64_t sub_100D27EB0(uint64_t a1, char a2, uint64_t a3, double a4, CLLocationDegrees a5, CLLocationDegrees a6, double a7)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  ++*(_DWORD *)(a1 + 112);
  if ((a2 & 1) != 0
    || sub_100D21178((double *)(a1 + 56), (double *)(a1 + 16), *(unsigned __int8 *)(a1 + 217), a5, a6, a7))
  {
    *(double *)std::string buf = a7;
    unint64_t v14 = (double *)buf;
    if (*(double *)(a1 + 184) < a7) {
      unint64_t v14 = (double *)(a1 + 184);
    }
    uint64_t v15 = (double *)(a1 + 176);
    if (*(double *)(a1 + 176) <= a7) {
      uint64_t v15 = v14;
    }
    double v16 = *v15;
    if (sub_100D21230(a4, *v15, a5, a6))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F32E8);
      }
      uint64_t v17 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        int v19 = *(_DWORD *)(a1 + 112);
        int v18 = *(_DWORD *)(a1 + 116);
        int v20 = *(unsigned __int8 *)(a1 + 224);
        *(_DWORD *)std::string buf = 134350593;
        *(double *)&uint8_t buf[4] = a4;
        __int16 v27 = 2049;
        CLLocationDegrees v28 = a5;
        __int16 v29 = 2049;
        CLLocationDegrees v30 = a6;
        __int16 v31 = 2050;
        double v32 = v16;
        __int16 v33 = 1026;
        int v34 = v18;
        __int16 v35 = 1026;
        int v36 = v19;
        __int16 v37 = 1026;
        int v38 = v20;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,Buildings,%{public}.1lf,buffering map data,ll,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,mapsAPICalls,%{public}d,bufferCalls,%{public}d,queryInProgress,%{public}d", buf, 0x3Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022F32E8);
        }
        uint64_t v24 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::bufferMapData(const CFAbsoluteTime, const double, const double, const double, const BOOL, const BOOL)", "%s\n", v24);
        if (v24 != buf) {
          free(v24);
        }
      }
      if (sub_100D288AC(a1, a3, a4, a5, a6, v16)) {
        goto LABEL_14;
      }
    }
    else
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F32E8);
      }
      unint64_t v22 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 134349825;
        *(double *)&uint8_t buf[4] = a4;
        __int16 v27 = 2049;
        CLLocationDegrees v28 = a5;
        __int16 v29 = 2049;
        CLLocationDegrees v30 = a6;
        __int16 v31 = 2050;
        double v32 = v16;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,Buildings,%{public}.1lf,cacheRoadData,invalid input,ll,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf", buf, 0x2Au);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022F32E8);
        }
        uint64_t v25 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::bufferMapData(const CFAbsoluteTime, const double, const double, const double, const BOOL, const BOOL)", "%s\n", v25);
        if (v25 != buf) {
          free(v25);
        }
      }
    }
    uint64_t v21 = 0;
    goto LABEL_21;
  }
LABEL_14:
  uint64_t v21 = 1;
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  return v21;
}

void sub_100D28380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void **sub_100D283B0(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    unint64_t v14 = (char *)sub_1000C571C((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    double v18[2] = v15 + 16;
    sub_100D2E354(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = sub_1000C5898(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_100D284B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000C5898((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D284CC(double *a1, uint64_t *a2, double a3, double a4, double a5)
{
  int v52 = a1;
  (*(void (**)(double *))(*(void *)a1 + 16))(a1);
  __int16 v53 = 256;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  unsigned int v40 = sub_100D27D04((uint64_t)a1, &v49, a3, a4, a5);
  if (v40)
  {
    uint64_t v10 = v49;
    for (uint64_t i = v50; v10 != i; v10 += 16)
    {
      uint64_t v11 = *(void *)v10;
      uint64_t v12 = *(void *)(*(void *)v10 + 16);
      unint64_t v13 = 0x8E38E38E38E38E39 * ((*(void *)(*(void *)v10 + 24) - v12) >> 3);
      if ((int)v13 >= 1)
      {
        unint64_t v14 = 0;
        do
        {
          if (v12 && v13 > v14)
          {
            long long v47 = 0u;
            long long v48 = 0u;
            *(_OWORD *)std::string __p = 0u;
            long long v46 = 0u;
            uint64_t v15 = v12 + 72 * v14;
            int v18 = *(double **)(v15 + 48);
            long long v17 = (void **)(v15 + 48);
            uint64_t v16 = v18;
            __p[0] = *(v17 - 2);
            int v19 = v17[1];
            uint64_t v20 = v19 - (unsigned char *)v18;
            if ((int)((unint64_t)(v19 - (unsigned char *)v18) >> 4) >= 1)
            {
              unint64_t v21 = 0;
              do
              {
                if (v16 && v20 >> 4 > v21)
                {
                  *(void *)&v42[0] = 0;
                  uint64_t v43 = 0;
                  uint64_t v44 = 0;
                  sub_1000F17A8(a1 + 2, (double *)&v44, (double *)&v43, (double *)v42, a3, a4, 0.0, v16[2 * v21], v16[2 * v21 + 1], 0.0);
                  uint64_t v23 = v43;
                  uint64_t v22 = v44;
                  uint64_t v24 = v46;
                  if ((unint64_t)v46 >= *((void *)&v46 + 1))
                  {
                    uint64_t v26 = (uint64_t)(v46 - (unint64_t)__p[1]) >> 4;
                    unint64_t v27 = v26 + 1;
                    if ((unint64_t)(v26 + 1) >> 60) {
                      sub_1001D7FD4();
                    }
                    int64_t v28 = *((void *)&v46 + 1) - (unint64_t)__p[1];
                    if ((uint64_t)(*((void *)&v46 + 1) - (unint64_t)__p[1]) >> 3 > v27) {
                      unint64_t v27 = v28 >> 3;
                    }
                    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v29 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v29 = v27;
                    }
                    __int16 v31 = (char *)sub_1000C571C((uint64_t)&v46 + 8, v29);
                    double v32 = &v31[16 * v26];
                    *(void *)double v32 = v23;
                    *((void *)v32 + 1) = v22;
                    __int16 v33 = __p[1];
                    int v34 = (void *)v46;
                    __int16 v35 = v32;
                    while (v34 != v33)
                    {
                      uint64_t v36 = *(v34 - 2);
                      v34 -= 2;
                      *((void *)v35 - 2) = v36;
                      v35 -= 16;
                      *((void *)v35 + 1) = v34[1];
                    }
                    uint64_t v25 = v32 + 16;
                    __p[1] = v35;
                    *(void *)&long long v46 = v32 + 16;
                    *((void *)&v46 + 1) = &v31[16 * v30];
                    if (v33) {
                      operator delete(v33);
                    }
                  }
                  else
                  {
                    *(void *)long long v46 = v43;
                    *(void *)(v24 + 8) = v22;
                    uint64_t v25 = (void *)(v24 + 16);
                  }
                  *(void *)&long long v46 = v25;
                  int v19 = v17[1];
                  uint64_t v16 = (double *)*v17;
                }
                ++v21;
                uint64_t v20 = v19 - (unsigned char *)v16;
              }
              while ((uint64_t)v21 < (int)((unint64_t)(v19 - (unsigned char *)v16) >> 4));
            }
            sub_100E17D30((double **)&__p[1], (uint64_t)v42);
            long long v47 = v42[0];
            long long v48 = v42[1];
            unint64_t v37 = a2[1];
            if (v37 >= a2[2])
            {
              uint64_t v38 = sub_100D2E498(a2, (uint64_t)__p);
            }
            else
            {
              *(void **)unint64_t v37 = __p[0];
              *(void *)(v37 + 16) = 0;
              *(void *)(v37 + 24) = 0;
              *(void *)(v37 + 8) = 0;
              sub_100D2E5F0((char *)(v37 + 8), (void *)__p[1], (void *)v46, (uint64_t)(v46 - (unint64_t)__p[1]) >> 4);
              *(_OWORD *)(v37 + 32) = v47;
              *(_OWORD *)(v37 + 48) = v48;
              uint64_t v38 = v37 + 64;
              a2[1] = v37 + 64;
            }
            a2[1] = v38;
            if (__p[1])
            {
              *(void **)&long long v46 = __p[1];
              operator delete(__p[1]);
            }
            uint64_t v11 = *(void *)v10;
          }
          ++v14;
          uint64_t v12 = *(void *)(v11 + 16);
          unint64_t v13 = 0x8E38E38E38E38E39 * ((*(void *)(v11 + 24) - v12) >> 3);
        }
        while ((uint64_t)v14 < (int)v13);
      }
    }
  }
  __p[0] = &v49;
  sub_1000C5954((void ***)__p);
  (*(void (**)(double *))(*(void *)a1 + 24))(a1);
  return v40;
}

void sub_100D28854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char *a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  a19 = &a28;
  sub_1000C5954((void ***)&a19);
  sub_1019DB560(v28 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_100D288AC(uint64_t a1, uint64_t a2, double a3, CLLocationDegrees a4, CLLocationDegrees a5, double a6)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (*(unsigned char *)(a1 + 169))
  {
    uint64_t v12 = sub_100D289C8(a1, *(unsigned __int8 *)(a1 + 192), a2, a3, a4, a5, a6);
  }
  else
  {
    if (!*(void *)(a1 + 88))
    {
      uint64_t v13 = 0;
      goto LABEL_6;
    }
    uint64_t v12 = sub_100D28D50(a1, a2, a3, a4, a5, a6);
  }
  uint64_t v13 = v12;
LABEL_6:
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  return v13;
}

void sub_100D289B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100D289C8(uint64_t a1, uint64_t a2, uint64_t a3, double a4, CLLocationDegrees a5, CLLocationDegrees a6, double a7)
{
  if (!*(unsigned char *)(a1 + 169)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 224))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022F32E8);
    }
    uint64_t v8 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "CLMM,CLTSP,building data query already in progress using XPC", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F32E8);
      }
      LOWORD(v26) = 0;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::queryUsingXPCService(const double, const double, const double, const double, const BOOL, const BOOL)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v26 = a1;
    (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
    __int16 v27 = 256;
    double v17 = sub_10016C458();
    ++*(_DWORD *)(a1 + 116);
    *(void *)std::string buf = 0;
    unint64_t v29 = buf;
    uint64_t v30 = 0x2020000000;
    char v31 = 0;
    CLLocationCoordinate2D v19 = CLLocationCoordinate2DMake(a5, a6);
    *(unsigned char *)(a1 + 224) = 1;
    uint64_t v20 = +[CLMapsXPCServiceManager sharedInstance];
    if (*(_DWORD *)(a1 + 220) == 1) {
      uint64_t v21 = 2;
    }
    else {
      uint64_t v21 = 1;
    }
    BOOL v22 = (*(_DWORD *)(a1 + 152) & 0xFFFFFFFE) == 2;
    uint64_t v23 = *(unsigned __int8 *)(a1 + 216);
    v25[0] = _NSConcreteStackBlock;
    uint64_t v24 = v22;
    v25[1] = 3221225472;
    v25[2] = sub_100D29C7C;
    v25[3] = &unk_1022F32C8;
    *(double *)&v25[6] = a4;
    *(double *)&v25[7] = a7;
    *(CLLocationDegrees *)&v25[8] = a5;
    *(CLLocationDegrees *)&v25[9] = a6;
    char v25[4] = buf;
    v25[5] = a1;
    *(double *)&v25[10] = v17;
    -[CLMapsXPCServiceManager collectMapDataOfType:aroundCoordinate:inRadius:allowNetwork:isPedestrianOrCycling:clearTiles:callSynchronously:WithReply:](v20, "collectMapDataOfType:aroundCoordinate:inRadius:allowNetwork:isPedestrianOrCycling:clearTiles:callSynchronously:WithReply:", v21, a2, v24, a3, v23, v25, v19.latitude, v19.longitude, a7);
    _Block_object_dispose(buf, 8);
    (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
    return 1;
  }
  return result;
}

void sub_100D28D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a2) {
    sub_1001C7F8C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D28D50(uint64_t a1, char a2, double a3, double a4, double a5, double a6)
{
  uint64_t v37 = a1;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  __int16 v39 = 256;
  if (!*(void *)(a1 + 88))
  {
    uint64_t v13 = 0;
    goto LABEL_26;
  }
  if (*(unsigned char *)(a1 + 224))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022F32E8);
    }
    uint64_t v12 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "CLMM,CLTSP,building data query already in progress using maps API", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F32E8);
      }
      LOWORD(v29[0]) = 0;
      uint64_t v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::queryUsingLocalMapsAPIObject(const double, const double, const double, const double, const BOOL)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
    uint64_t v13 = 0;
    goto LABEL_24;
  }
  double v14 = sub_10016C458();
  uint64_t v31 = 0;
  double v32 = &v31;
  uint64_t v33 = 0x3052000000;
  int v34 = sub_100177DF0;
  __int16 v35 = sub_100177508;
  uint64_t v36 = 0;
  int v16 = *(unsigned __int8 *)(a1 + 216);
  if (*(unsigned char *)(a1 + 216)) {
    v32[5] = (uint64_t)dispatch_semaphore_create(0);
  }
  v29[0] = 0;
  v29[1] = v29;
  v29[2] = 0x4812000000;
  v29[3] = sub_100D29368;
  v29[4] = sub_100D2938C;
  v29[5] = "";
  memset(v30, 0, sizeof(v30));
  v27[0] = 0;
  v27[1] = v27;
  _DWORD v27[2] = 0x2020000000;
  int v28 = 0;
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  void v26[2] = sub_100D293B8;
  v26[3] = &unk_1022F32A0;
  v26[4] = v29;
  v26[5] = v27;
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_100D296DC;
  long long v23[3] = &unk_1022F3250;
  *(double *)&v23[8] = a3;
  *(double *)&v23[9] = a6;
  *(double *)&v23[10] = a4;
  *(double *)&void v23[11] = a5;
  v23[4] = v29;
  v23[5] = v27;
  *(double *)&v23[12] = v14;
  char v24 = v16;
  char v25 = a2;
  v23[6] = &v31;
  v23[7] = a1;
  ++*(_DWORD *)(a1 + 116);
  *(unsigned char *)(a1 + 224) = 1;
  [*(id *)(a1 + 88) findBuildingsNear:*(_DWORD *)(a1 + 220) == 1, v26, v23, a4, a5, a6];
  if (!v16) {
    goto LABEL_22;
  }
  intptr_t v17 = dispatch_semaphore_wait((dispatch_semaphore_t)v32[5], 0xFFFFFFFFFFFFFFFFLL);
  int v18 = v32[5];
  if (v18) {
    dispatch_release(v18);
  }
  if (v17)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022F32E8);
    }
    CLLocationCoordinate2D v19 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,Buildings,queryForBuildingsWithinDistance,semaphore timed out", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F32E8);
      }
      BOOL v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::queryUsingLocalMapsAPIObject(const double, const double, const double, const double, const BOOL)", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
    uint64_t v13 = 0;
  }
  else
  {
LABEL_22:
    uint64_t v13 = 1;
  }
  _Block_object_dispose(v27, 8);
  _Block_object_dispose(v29, 8);
  *(void *)std::string buf = v30;
  sub_1000C5954((void ***)buf);
  _Block_object_dispose(&v31, 8);
  if (HIBYTE(v39))
  {
LABEL_24:
    if ((_BYTE)v39)
    {
      pthread_mutex_unlock(v38);
      return v13;
    }
LABEL_26:
    (*(void (**)(uint64_t))(*(void *)v37 + 24))(v37);
  }
  return v13;
}

void sub_100D292F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,void **a55)
{
}

__n128 sub_100D29368(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_100D2938C(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  sub_1000C5954(&v1);
}

void sub_100D293B8(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v3 = a2;
    if (v3)
    {
      double v4 = v3;
      unint64_t v5 = operator new(0x40uLL);
      v5[1] = 0;
      _DWORD v5[2] = 0;
      void *v5 = off_1022F33B8;
      uint64_t v5[4] = 0;
      void v5[5] = 0;
      *((_DWORD *)v5 + 8) = -1;
      void v5[6] = 0;
      void v5[7] = 0;
      *((void *)&v6 + 1) = v5;
      v5[3] = 0;
      *(void *)&long long v6 = v5 + 3;
      sub_100D2948C((uint64_t)(v5 + 3), v4);
      sub_100D283B0((uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 48), &v6);
      *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += 40;

      if (*((void *)&v6 + 1)) {
        sub_1000DB0A0(*((std::__shared_weak_count **)&v6 + 1));
      }
    }
  }
}

void sub_100D29474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100D2948C(uint64_t a1, void *a2)
{
  *(void *)a1 = [a2 buildingID];
  *(_DWORD *)(a1 + 8) = [a2 tileSetStyle];
  *(unsigned char *)(a1 + 12) = 0;
  *(unsigned char *)(a1 + 12) = [a2 hasTerrainElevation];
  sub_100D2C5F4((uint64_t *)(a1 + 16), (unint64_t)[[objc_msgSend(objc_msgSend(a2, "sections"), "count")
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v4 = [a2 sections];
  id v5 = [v4 countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v26;
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v26 != v6) {
          objc_enumerationMutation(v4);
        }
        uint64_t v8 = *(void **)(*((void *)&v25 + 1) + 8 * i);
        uint64_t v24 = 0;
        *(_OWORD *)std::string __p = 0u;
        [v8 maxBaseHeight];
        [v8 minBaseHeight:v9];
        *((void *)&v18 + 1) = v10;
        [v8 terrainElevation];
        uint64_t v20 = v11;
        [v8 topHeight];
        uint64_t v19 = v12;
        [v8 height];
        uint64_t v21 = v13;
        [v8 baseHeight];
        uint64_t v14 = 0;
        unint64_t v15 = 0;
        uint64_t v22 = v16;
        while ((unint64_t)[v8 coordinateCount] > v15)
        {
          sub_100D2C6B4(&v18, *(double *)((char *)[v8 coordinates] + v14), *(double *)((char *)[v8 coordinates] + v14 + 8));
          ++v15;
          v14 += 16;
        }
        sub_100D2C7B8((uint64_t *)a1, &v18);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      id v5 = [v4 countByEnumeratingWithState:&v25 objects:v29 count:16];
    }
    while (v5);
  }
  return (int)(954437177 * ((*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3)) > 0;
}

void sub_100D296B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
}

void sub_100D296DC(uint64_t a1, void *a2)
{
  id v4 = *(int32x2_t **)(a1 + 56);
  v4[28].i8[0] = 0;
  if (a2)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022F32E8);
    }
    id v5 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 134349571;
      id v25 = [a2 code];
      __int16 v26 = 2114;
      *(void *)long long v27 = [a2 domain];
      *(_WORD *)&v27[8] = 2113;
      *(void *)&unsigned char v27[10] = [a2 localizedDescription];
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLMM,CLTSP,Buildings,Warning,GEOMapFeatureAccessRequest reported errorcode,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F32E8);
      }
      [a2 code];
      [a2 domain];
      [a2 localizedDescription];
      uint64_t v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::queryUsingLocalMapsAPIObject(const double, const double, const double, const double, const BOOL)_block_invoke", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
    v4[15] = vadd_s32(v4[15], (int32x2_t)0x100000001);
  }
  else
  {
    double v7 = *(double *)(a1 + 64);
    double v6 = *(double *)(a1 + 72);
    double v8 = *(double *)(a1 + 80);
    double v9 = *(double *)(a1 + 88);
    if (sub_100D21230(v7, v6, v8, v9))
    {
      *(double *)&v4[7] = v7;
      *(double *)&void v4[8] = v8;
      *(double *)&v4[9] = v9;
      *(double *)&v4[10] = v6;
    }
    v4[15].i32[1] = 0;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1022F32E8);
  }
  uint64_t v10 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v11 = (uint64_t)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 56)
                  - *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 48)) >> 4;
    int v12 = *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    double v13 = 0.0;
    if (*(double *)(a1 + 96) >= 0.0) {
      double v13 = vabdd_f64(sub_10016C458(), *(double *)(a1 + 96)) * 1000.0;
    }
    uint64_t v15 = *(void *)(a1 + 80);
    uint64_t v14 = *(void *)(a1 + 88);
    uint64_t v16 = *(void *)(a1 + 72);
    int v17 = *(unsigned __int8 *)(a1 + 104);
    __int32 v18 = v4[14].i32[1];
    __int32 v19 = v4[15].i32[0];
    __int32 v20 = v4[15].i32[1];
    *(_DWORD *)std::string buf = 134351617;
    id v25 = (id)v11;
    __int16 v26 = 1026;
    *(_DWORD *)long long v27 = v12;
    *(_WORD *)&v27[4] = 2050;
    *(double *)&v27[6] = v13;
    *(_WORD *)&v27[14] = 2049;
    *(void *)&v27[16] = v15;
    __int16 v28 = 2049;
    uint64_t v29 = v14;
    __int16 v30 = 2050;
    uint64_t v31 = v16;
    __int16 v32 = 1026;
    BOOL v33 = a2 != 0;
    __int16 v34 = 1026;
    __int32 v35 = v18;
    __int16 v36 = 1026;
    int v37 = v17;
    __int16 v38 = 1026;
    __int32 v39 = v19;
    __int16 v40 = 1026;
    __int32 v41 = v20;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,Buildings,bufferDataUsingMapsAPI,bldgCount,%{public}lu,sizeOfBuildings,%{public}d,responseTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,error,%{public}d,apiCalls,%{public}d,bufferSynchronously,%{public}d,bufferingFailedCount,%{public}d,consecutiveBufferingFailed,%{public}d", buf, 0x58u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022F32E8);
    }
    if (*(double *)(a1 + 96) >= 0.0) {
      sub_10016C458();
    }
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::queryUsingLocalMapsAPIObject(const double, const double, const double, const double, const BOOL)_block_invoke", "%s\n", v22);
    if (v22 != (char *)buf) {
      free(v22);
    }
  }
  if (*(unsigned char *)(a1 + 105)) {
    [*(id *)&v4[11] clearBuildingTiles];
  }
  uint64_t v21 = *(void *)(*(void *)(a1 + 32) + 8);
  if (&v4[29] != (int32x2_t *)(v21 + 48)) {
    sub_100D2EA14((uint64_t)&v4[29], *(uint64_t **)(v21 + 48), *(uint64_t **)(v21 + 56), (uint64_t)(*(void *)(v21 + 56) - *(void *)(v21 + 48)) >> 4);
  }
  if (*(unsigned char *)(a1 + 104)) {
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(*(void *)(a1 + 48) + 8) + 40));
  }
}

void sub_100D29C7C(uint64_t a1, void *a2)
{
  id v3 = *(int32x2_t **)(a1 + 40);
  v3[28].i8[0] = 0;
  __int16 v53 = 0;
  double v54 = 0;
  uint64_t v55 = 0;
  long long v48 = v3;
  if (!a2)
  {
    v3[15] = vadd_s32(v3[15], (int32x2_t)0x100000001);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022F32E8);
    }
    __int32 v19 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "CLTSP,Buildings,xpcQueryForBuildingData returned error", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F32E8);
      }
      LOWORD(v56) = 0;
      __int16 v34 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::queryUsingXPCService(const double, const double, const double, const double, const BOOL, const BOOL)_block_invoke", "%s\n", v34);
      if (v34 != (char *)&buf) {
        free(v34);
      }
    }
    goto LABEL_31;
  }
  double v5 = *(double *)(a1 + 48);
  double v4 = *(double *)(a1 + 56);
  double v6 = *(double *)(a1 + 64);
  double v7 = *(double *)(a1 + 72);
  if (sub_100D21230(v5, v4, v6, v7))
  {
    *(double *)&v3[7] = v5;
    *(double *)&void v3[8] = v6;
    *(double *)&v3[9] = v7;
    *(double *)&v3[10] = v4;
  }
  v3[15].i32[1] = 0;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  id v8 = [a2 countByEnumeratingWithState:&v49 objects:v104 count:16];
  if (!v8)
  {
LABEL_31:
    int v9 = 0;
    goto LABEL_32;
  }
  int v9 = 0;
  uint64_t v10 = *(void *)v50;
  do
  {
    uint64_t v11 = 0;
    do
    {
      if (*(void *)v50 != v10) {
        objc_enumerationMutation(a2);
      }
      int v12 = *(void **)(*((void *)&v49 + 1) + 8 * (void)v11);
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        double v13 = operator new(0x40uLL);
        v13[1] = 0;
        v13[2] = 0;
        void *v13 = off_1022F33B8;
        v13[3] = 0;
        void v13[4] = 0;
        v13[5] = 0;
        *((_DWORD *)v13 + 8) = -1;
        v13[6] = 0;
        void v13[7] = 0;
        *(void *)&long long buf = v13 + 3;
        *((void *)&buf + 1) = v13;
        sub_100D2A4A8((uint64_t)(v13 + 3), v12);
        sub_100D283B0((uint64_t *)&v53, &buf);
        if (*((void *)&buf + 1)) {
          sub_1000DB0A0(*((std::__shared_weak_count **)&buf + 1));
        }
        v9 += 40;
      }
      else
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022F32E8);
        }
        uint64_t v14 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
        {
          unsigned int v15 = [a2 count];
          LODWORD(buf) = 67240192;
          DWORD1(buf) = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,Buildings,conversion to building failed,%{public}d", (uint8_t *)&buf, 8u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1022F32E8);
          }
          unsigned int v16 = [a2 count];
          int v56 = 67240192;
          unsigned int v57 = v16;
          int v17 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::queryUsingXPCService(const double, const double, const double, const double, const BOOL, const BOOL)_block_invoke", "%s\n", v17);
          if (v17 != (char *)&buf) {
            free(v17);
          }
        }
      }
      uint64_t v11 = (char *)v11 + 1;
    }
    while (v8 != v11);
    id v18 = [a2 countByEnumeratingWithState:&v49 objects:v104 count:16];
    id v8 = v18;
  }
  while (v18);
LABEL_32:
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1022F32E8);
  }
  __int32 v20 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    if (a2) {
      unsigned int v21 = [a2 count];
    }
    else {
      unsigned int v21 = 0;
    }
    uint64_t v23 = v53;
    uint64_t v22 = v54;
    double v24 = 0.0;
    if (*(double *)(a1 + 80) >= 0.0) {
      double v24 = vabdd_f64(sub_10016C458(), *(double *)(a1 + 80)) * 1000.0;
    }
    uint64_t v26 = *(void *)(a1 + 64);
    uint64_t v25 = *(void *)(a1 + 72);
    uint64_t v27 = *(void *)(a1 + 56);
    int v28 = v48[27].u8[0];
    __int32 v29 = v48[14].i32[1];
    __int32 v30 = v48[15].i32[0];
    __int32 v31 = v48[15].i32[1];
    int v32 = v48[24].u8[0];
    LODWORD(buf) = 67243265;
    DWORD1(buf) = v21;
    WORD4(buf) = 1026;
    *(_DWORD *)((char *)&buf + 10) = v9;
    HIWORD(buf) = 1026;
    int v83 = (unint64_t)((char *)v22 - (char *)v23) >> 4;
    __int16 v84 = 2050;
    double v85 = v24;
    __int16 v86 = 2049;
    uint64_t v87 = v26;
    __int16 v88 = 2049;
    uint64_t v89 = v25;
    __int16 v90 = 2050;
    uint64_t v91 = v27;
    __int16 v92 = 1026;
    BOOL v93 = a2 == 0;
    __int16 v94 = 1026;
    __int32 v95 = v29;
    __int16 v96 = 1026;
    int v97 = v28;
    __int16 v98 = 1026;
    __int32 v99 = v30;
    __int16 v100 = 1026;
    __int32 v101 = v31;
    __int16 v102 = 1026;
    int v103 = v32;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,Buildings,MapHelperService,bldgCount,%{public}d,sizeOfBuildings,%{public}d,convertedBuildings,%{public}d,responseTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,error,%{public}d,apiCalls,%{public}d,bufferSynchronously,%{public}d,bufferingFailedCount,%{public}d,consecutiveBufferingFailed,%{public}d,network,%{public}d", (uint8_t *)&buf, 0x60u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022F32E8);
    }
    if (a2) {
      unsigned int v33 = [a2 count];
    }
    else {
      unsigned int v33 = 0;
    }
    __int16 v36 = v53;
    __int32 v35 = v54;
    double v37 = 0.0;
    if (*(double *)(a1 + 80) >= 0.0) {
      double v37 = vabdd_f64(sub_10016C458(), *(double *)(a1 + 80)) * 1000.0;
    }
    uint64_t v39 = *(void *)(a1 + 64);
    uint64_t v38 = *(void *)(a1 + 72);
    uint64_t v40 = *(void *)(a1 + 56);
    int v41 = v48[27].u8[0];
    __int32 v42 = v48[14].i32[1];
    __int32 v43 = v48[15].i32[0];
    __int32 v44 = v48[15].i32[1];
    int v45 = v48[24].u8[0];
    int v56 = 67243265;
    unsigned int v57 = v33;
    __int16 v58 = 1026;
    int v59 = v9;
    __int16 v60 = 1026;
    int v61 = (unint64_t)((char *)v35 - (char *)v36) >> 4;
    __int16 v62 = 2050;
    double v63 = v37;
    __int16 v64 = 2049;
    uint64_t v65 = v39;
    __int16 v66 = 2049;
    uint64_t v67 = v38;
    __int16 v68 = 2050;
    uint64_t v69 = v40;
    __int16 v70 = 1026;
    BOOL v71 = a2 == 0;
    __int16 v72 = 1026;
    __int32 v73 = v42;
    __int16 v74 = 1026;
    int v75 = v41;
    __int16 v76 = 1026;
    __int32 v77 = v43;
    __int16 v78 = 1026;
    __int32 v79 = v44;
    __int16 v80 = 1026;
    int v81 = v45;
    long long v46 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureBuildingGeometryBuffer::queryUsingXPCService(const double, const double, const double, const double, const BOOL, const BOOL)_block_invoke", "%s\n", v46);
    if (v46 != (char *)&buf) {
      free(v46);
    }
  }
  if (&v48[29] != (int32x2_t *)&v53) {
    sub_100D2EA14((uint64_t)&v48[29], v53, v54, ((char *)v54 - (char *)v53) >> 4);
  }
  *(void *)&long long buf = &v53;
  sub_1000C5954((void ***)&buf);
}

void sub_100D2A44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void **a39)
{
  a39 = (void **)&a24;
  sub_1000C5954(&a39);
  _Unwind_Resume(a1);
}

BOOL sub_100D2A4A8(uint64_t a1, void *a2)
{
  if (!a2)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022F32E8);
    }
    uint64_t v27 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,makeBuildingFromMapHelperNSDictionary,dictionary is null", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_70;
    }
LABEL_84:
    dispatch_once(&qword_102419430, &stru_1022F32E8);
LABEL_70:
    LOWORD(v32) = 0;
    __int32 v29 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMapBuilding::fillFromMapHelperNSDictionary(NSDictionary * _Nonnull)", "%s\n", v29);
    goto LABEL_71;
  }
  if ([a2 valueForKey:@"buildingID"]) {
    *(void *)a1 = [objc_msgSend(objc_msgSend(a2, "valueForKey:", @"buildingID"), "longLongValue");
  }
  if ([a2 valueForKey:@"tileSetStyle"]) {
    *(_DWORD *)(a1 + 8) = [objc_msgSend(objc_msgSend(a2, "valueForKey:", @"tileSetStyle"), "intValue");
  }
  if ([a2 valueForKey:@"hasTerrainElevation"]) {
    *(unsigned char *)(a1 + 12) = [(objc_msgSend(a2, "valueForKey:", @"hasTerrainElevation")) boolValue];
  }
  if (![a2 valueForKey:@"sections"]
    || (id v4 = [a2 valueForKey:@"sections"]) == 0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022F32E8);
    }
    uint64_t v25 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,fillFromMapHelperNSDictionary,sections is nil", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_70;
    }
    goto LABEL_84;
  }
  double v5 = v4;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022F32E8);
    }
    int v28 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,fillFromMapHelperNSDictionary,sections is not an array", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_70;
    }
    goto LABEL_84;
  }
  __int32 v31 = (uint64_t *)a1;
  sub_100D2C5F4((uint64_t *)(a1 + 16), (unint64_t)[v5 count]);
  if (![v5 count]) {
    return (int)(954437177 * ((unint64_t)(v31[3] - v31[2]) >> 3)) > 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    id v7 = [v5 objectAtIndexedSubscript:v6];
    id v8 = v7;
    if (!v7) {
      break;
    }
    uint64_t v36 = 0;
    long long v34 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    if ([v7 valueForKey:@"maxBaseHeight"])
    {
      [objc_msgSend(v8, "valueForKey:", @"maxBaseHeight") doubleValue];
      *(void *)&long long v32 = v9;
    }
    if ([v8 valueForKey:@"minBaseHeight"])
    {
      [objc_msgSend(v8, "valueForKey:", @"minBaseHeight") doubleValue];
      *((void *)&v32 + 1) = v10;
    }
    if ([v8 valueForKey:@"topHeight"])
    {
      [objc_msgSend(v8, "valueForKey:", @"topHeight") doubleValue];
      *(void *)&long long v33 = v11;
    }
    if ([v8 valueForKey:@"terrainElevation"])
    {
      [objc_msgSend(v8, "valueForKey:", @"terrainElevation") doubleValue];
      *((void *)&v33 + 1) = v12;
    }
    if ([v8 valueForKey:@"height"])
    {
      [objc_msgSend(v8, "valueForKey:", @"height") doubleValue];
      *(void *)&long long v34 = v13;
    }
    if ([v8 valueForKey:@"baseHeight"])
    {
      [objc_msgSend(v8, "valueForKey:", @"baseHeight") doubleValue];
      *((void *)&v34 + 1) = v14;
    }
    if ([v8 valueForKey:@"coordinateCount"])
    {
      int v15 = [[v8 valueForKey:@"coordinateCount"] intValue];
      if (v15 >= 1)
      {
        uint64_t v16 = 0;
        BOOL v17 = 1;
        while (1)
        {
          id v18 = +[NSString stringWithFormat:@"%@%i", @"coord", v16];
          if ([v8 valueForKey:v18])
          {
            id v19 = [[objc_msgSend(v8, "valueForKey:", v18) componentsSeparatedByString:@","];
            if ([v19 count] != (id)2)
            {
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_1022F32E8);
              }
              uint64_t v23 = qword_102419438;
              if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,fillFromMapHelperNSDictionary,coordinate column counts is not 2", buf, 2u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419430 != -1) {
                  dispatch_once(&qword_102419430, &stru_1022F32E8);
                }
                double v24 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMapBuilding::fillFromMapHelperNSDictionary(NSDictionary * _Nonnull)", "%s\n", v24);
                if (v24 != (char *)buf) {
                  free(v24);
                }
              }
              goto LABEL_36;
            }
            [objc_msgSend(v19, "objectAtIndexedSubscript:", 0) doubleValue];
            double v21 = v20;
            [objc_msgSend(v19, "objectAtIndexedSubscript:", 1) doubleValue];
            sub_100D2C6B4(&v32, v21, v22);
          }
          uint64_t v16 = (v16 + 1);
          BOOL v17 = (int)v16 < v15;
          if (v15 == v16) {
            goto LABEL_35;
          }
        }
      }
    }
    BOOL v17 = 0;
LABEL_35:
    sub_100D2C7B8(v31, &v32);
LABEL_36:
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v17) {
      return 0;
    }
    if ((unint64_t)[v5 count] <= ++v6) {
      return (int)(954437177 * ((unint64_t)(v31[3] - v31[2]) >> 3)) > 0;
    }
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1022F32E8);
  }
  __int32 v30 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,fillFromMapHelperNSDictionary,sectionDict is nil", buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022F32E8);
    }
    LOWORD(v32) = 0;
    __int32 v29 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMapBuilding::fillFromMapHelperNSDictionary(NSDictionary * _Nonnull)", "%s\n", v29);
LABEL_71:
    if (v29 != (char *)buf) {
      free(v29);
    }
    return 0;
  }
  return result;
}

void sub_100D2AE70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D2AEA8(id a1)
{
  qword_102419438 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

uint64_t sub_100D2AED8(uint64_t a1)
{
  id v3 = (void **)(a1 + 48);
  sub_1000C5954(&v3);
  id v3 = (void **)(a1 + 24);
  sub_1000C5954(&v3);
  return a1;
}

uint64_t sub_100D2AF24(uint64_t a1)
{
  id v3 = (void **)(a1 + 32);
  sub_1000C5954(&v3);
  id v3 = (void **)(a1 + 8);
  sub_1000C5954(&v3);
  return a1;
}

uint64_t sub_100D2AF70(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    unint64_t v3 = *a2;
    unint64_t v4 = a2[1];
    uint64_t result = 1;
    do
    {
      unint64_t v6 = v2[4];
      unint64_t v7 = v2[5];
      BOOL v8 = v4 < v7;
      if (v3 != v6) {
        BOOL v8 = v3 < v6;
      }
      if (!v8)
      {
        BOOL v9 = v7 < v4;
        if (v3 == v6) {
          BOOL v10 = v9;
        }
        else {
          BOOL v10 = v6 < v3;
        }
        if (!v10) {
          return result;
        }
        ++v2;
      }
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
  return 0;
}

_OWORD *sub_100D2AFD0(uint64_t **a1, unint64_t *a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (void **)sub_100D2B068((uint64_t)a1, &v11, a2);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    BOOL v8 = (uint64_t **)v6;
    unint64_t v7 = operator new(0x70uLL);
    long long v9 = **a4;
    uint64_t v7[4] = 0u;
    void v7[5] = 0u;
    id v7[2] = v9;
    v7[3] = 0u;
    *((void *)v7 + 12) = 0;
    *((void *)v7 + 13) = 0xBFF0000000000000;
    sub_1000EDF90(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

void *sub_100D2B068(uint64_t a1, void *a2, unint64_t *a3)
{
  double v5 = *(void **)(a1 + 8);
  uint64_t result = (void *)(a1 + 8);
  unint64_t v4 = v5;
  if (v5)
  {
    unint64_t v6 = *a3;
    unint64_t v7 = a3[1];
    do
    {
      while (1)
      {
        BOOL v8 = v4;
        unint64_t v9 = v4[4];
        unint64_t v10 = v8[5];
        BOOL v11 = v7 < v10;
        if (v6 != v9) {
          BOOL v11 = v6 < v9;
        }
        if (!v11) {
          break;
        }
        unint64_t v4 = (void *)*v8;
        uint64_t result = v8;
        if (!*v8) {
          goto LABEL_15;
        }
      }
      BOOL v12 = v10 < v7;
      if (v6 == v9) {
        BOOL v13 = v12;
      }
      else {
        BOOL v13 = v9 < v6;
      }
      if (!v13) {
        break;
      }
      uint64_t result = v8 + 1;
      unint64_t v4 = (void *)v8[1];
    }
    while (v4);
  }
  else
  {
    BOOL v8 = result;
  }
LABEL_15:
  *a2 = v8;
  return result;
}

uint64_t *sub_100D2B0E8(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  double v5 = (uint64_t **)sub_100D2B068((uint64_t)a1, &v8, a2);
  uint64_t result = *v5;
  if (!*v5)
  {
    sub_100D2B168((uint64_t)a1, a3, (uint64_t)&v7);
    sub_1000EDF90(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

double sub_100D2B168@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = operator new(0x70uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  _DWORD v6[2] = *(_OWORD *)a2;
  *((_WORD *)v6 + 24) = *(_WORD *)(a2 + 16);
  *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a2 + 24);
  *((void *)v6 + 9) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  void v6[5] = *(_OWORD *)(a2 + 48);
  *((void *)v6 + 12) = *(void *)(a2 + 64);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  double result = *(double *)(a2 + 72);
  *((double *)v6 + 13) = result;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

uint64_t sub_100D2B1F0(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  *(_OWORD *)a1 = *a2;
  *(_WORD *)(a1 + 16) = *(_WORD *)a3;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_100D2B294((void *)(a1 + 24), *(void **)(a3 + 8), *(void **)(a3 + 16), (uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 4);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  sub_100D2B294((void *)(a1 + 48), *(void **)(a3 + 32), *(void **)(a3 + 40), (uint64_t)(*(void *)(a3 + 40) - *(void *)(a3 + 32)) >> 4);
  *(void *)(a1 + 72) = *(void *)(a3 + 56);
  return a1;
}

void sub_100D2B27C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000C5954((void ***)va);
  _Unwind_Resume(a1);
}

void *sub_100D2B294(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_10022F168(result, a4);
    double result = sub_100D2B31C((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_100D2B2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1000C5954(&a9);
  _Unwind_Resume(a1);
}

void *sub_100D2B31C(uint64_t a1, void *a2, void *a3, void *a4)
{
  unint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  id v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *unint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_100D2B3AC((uint64_t)v7);
  return v4;
}

uint64_t sub_100D2B3AC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100223AE4(a1);
  }
  return a1;
}

void sub_100D2B3E4(uint64_t a1, uint64_t *a2)
{
  sub_1000C59A8(a2);
  sub_100D2B43C(a2);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  memset(v3, 0, sizeof(v3));
  unint64_t v4 = (void **)v3;
  sub_1000C5954(&v4);
}

void sub_100D2B43C(uint64_t *a1)
{
  if (*a1)
  {
    sub_1000C59A8(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *sub_100D2B478(uint64_t **a1, uint64_t a2)
{
  unint64_t v3 = sub_1000F0A30(a1, (uint64_t *)a2);
  uint64_t v5 = (void **)(a2 + 80);
  sub_1000C5954(&v5);
  uint64_t v5 = (void **)(a2 + 56);
  sub_1000C5954(&v5);
  operator delete((void *)a2);
  return v3;
}

uint64_t sub_100D2B4D4(uint64_t **a1, unint64_t *a2)
{
  unint64_t v3 = (uint64_t **)sub_100D2B51C((uint64_t)a1, a2);
  if (a1 + 1 == v3) {
    return 0;
  }
  sub_100D2B478(a1, (uint64_t)v3);
  return 1;
}

void *sub_100D2B51C(uint64_t a1, unint64_t *a2)
{
  unint64_t v4 = *(void **)(a1 + 8);
  uint64_t v2 = (void *)(a1 + 8);
  unint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  unint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v2;
  do
  {
    unint64_t v8 = v3[4];
    BOOL v10 = v8 == v5;
    BOOL v9 = v8 < v5;
    if (v10) {
      BOOL v9 = v3[5] < v6;
    }
    BOOL v10 = !v9;
    if (v9) {
      BOOL v11 = v3 + 1;
    }
    else {
      BOOL v11 = v3;
    }
    if (v10) {
      unint64_t v7 = v3;
    }
    unint64_t v3 = (void *)*v11;
  }
  while (*v11);
  if (v7 == v2) {
    return v2;
  }
  unint64_t v12 = v7[4];
  BOOL v13 = v6 < v7[5];
  BOOL v10 = v5 == v12;
  BOOL v14 = v5 < v12;
  if (v10) {
    BOOL v14 = v13;
  }
  if (v14) {
    return v2;
  }
  return v7;
}

double *sub_100D2B590(double *a1, double a2, double a3, double a4)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  sub_1004BDD98(a1, a1 + 1, a1 + 2, a1 + 3, a2, a3, a4);
  sub_10005B720(a1[1]);
  *((void *)a1 + 1) = v5;
  sub_10005B720(a1[3]);
  *((void *)a1 + 3) = v6;
  return a1;
}

unint64_t sub_100D2B5E8(void *a1)
{
  if (a1)
  {
    id v2 = [a1 roadID];
    id v13 = v2;
    if ((unint64_t)[a1 coordinateCount] > 1)
    {
      long long v16 = *(_OWORD *)[a1 coordinates];
      *(_OWORD *)unint64_t v12 = *((_OWORD *)[a1 coordinates] + 1);
      if ((unint64_t)[a1 coordinateCount] >= 2)
      {
        unint64_t v6 = 1;
        uint64_t v7 = 16;
        do
        {
          *(_OWORD *)unint64_t v12 = *(_OWORD *)((char *)[a1 coordinates] + v7);
          if (!sub_1004BABDC(*(double *)&v16, *((double *)&v16 + 1), v12[0], v12[1], 0.0000001)) {
            break;
          }
          ++v6;
          v7 += 16;
        }
        while ((unint64_t)[a1 coordinateCount] > v6);
      }
      if (!sub_100D2BB2C((double *)&v16, v12, (int)[a1 isRail], (int)objc_msgSend(a1, "isBridge"), (int)objc_msgSend(a1, "isTunnel"), (unint64_t *)&v13))
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022F32E8);
        }
        unint64_t v8 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 134283521;
          id v18 = v13;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "CLMM,GeoMapDataID,unable to make CLRoadID from GeoMapFeatureAccess,%{private}lld", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1022F32E8);
          }
          int v14 = 134283521;
          unint64_t v15 = (unint64_t)v13;
          BOOL v11 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "static uint64_t CLGeoMapFeatureAccessGeometryCommon::CLGeoMapDataID::getRoadID(const GEOMapFeatureRoad * _Nonnull)", "%s\n", v11);
          if (v11 != (char *)buf) {
            free(v11);
          }
        }
      }
      return (unint64_t)v13;
    }
    else
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F32E8);
      }
      unint64_t v3 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 134283521;
        id v18 = [a1 roadID];
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "CLMM,GeoMapDataID,less than two coordinates,roadID,%{private}lld", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022F32E8);
        }
        LODWORD(v16) = 134283521;
        *(void *)((char *)&v16 + 4) = [a1 roadID];
        unint64_t v4 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static uint64_t CLGeoMapFeatureAccessGeometryCommon::CLGeoMapDataID::getRoadID(const GEOMapFeatureRoad * _Nonnull)", "%s\n", v4);
        if (v4 != (char *)buf) {
          free(v4);
        }
      }
    }
  }
  else
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022F32E8);
    }
    uint64_t v5 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "CLMM,GeoMapDataID,null feature", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022F32E8);
      }
      LOWORD(v16) = 0;
      BOOL v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static uint64_t CLGeoMapFeatureAccessGeometryCommon::CLGeoMapDataID::getRoadID(const GEOMapFeatureRoad * _Nonnull)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    return 0;
  }
  return (unint64_t)v2;
}

BOOL sub_100D2BB2C(double *a1, double *a2, int a3, int a4, int a5, unint64_t *a6)
{
  uint64_t v6 = 0;
  if (a1 && a2)
  {
    double v8 = 0.2;
    if (a5) {
      double v8 = 0.35;
    }
    if (a4) {
      double v8 = 0.3;
    }
    if (a3) {
      double v9 = 0.25;
    }
    else {
      double v9 = v8;
    }
    double v10 = a1[1];
    double v11 = a2[1];
    v15[0] = *a1 + (*a2 - *a1) * v9;
    double v12 = sub_1011717B4(v10, v11);
    sub_10005B720(v10 + v12 * v9);
    v15[1] = v13;
    sub_100D2BBE4(v15, a6);
    return *a6 != 0;
  }
  return v6;
}

BOOL sub_100D2BBE4(double *a1, unint64_t *a2)
{
  BOOL v4 = sub_1000EF668(*a1, a1[1]);
  if (!v4) {
    *a2 = (unint64_t)((a1[1] + 180.0) * 10000000.0) | ((unint64_t)((*a1 + 90.0) * 10000000.0) << 32);
  }
  return !v4;
}

uint64_t *sub_100D2BC54(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  BOOL v4 = a2;
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - *a1) >> 4);
  unint64_t v11 = a1[2];
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = v11;
  if (v6 >= v11)
  {
    unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v7) >> 4) + 1;
    if (v23 > 0x555555555555555) {
      sub_1001D7FD4();
    }
    unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v7) >> 4);
    if (2 * v24 > v23) {
      unint64_t v23 = 2 * v24;
    }
    if (v24 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v25 = 0x555555555555555;
    }
    else {
      unint64_t v25 = v23;
    }
    uint64_t v32 = v9;
    if (v25) {
      uint64_t v26 = (char *)sub_10014F86C(v9, v25);
    }
    else {
      uint64_t v26 = 0;
    }
    int v28 = v26;
    __int32 v29 = &v26[48 * v8];
    __int32 v30 = v29;
    __int32 v31 = &v26[48 * v25];
    sub_100D2BEE8(&v28, a3);
    BOOL v4 = (uint64_t *)sub_100D2C024(a1, &v28, (uint64_t)v4);
    sub_100D2C578(&v28);
  }
  else if (a2 == (uint64_t *)v6)
  {
    sub_100D2C0D8(v9, a2, a3);
    a1[1] = (uint64_t)(v4 + 6);
  }
  else
  {
    sub_100D2BE64((uint64_t)a1, a2, v6, (uint64_t)(a2 + 6));
    if (v4 <= a3) {
      a3 += 6 * (a1[1] > (unint64_t)a3);
    }
    uint64_t v13 = *a3;
    uint64_t v12 = a3[1];
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    int v14 = (std::__shared_weak_count *)v4[1];
    *BOOL v4 = v13;
    v4[1] = v12;
    if (v14) {
      sub_1000DB0A0(v14);
    }
    uint64_t v16 = a3[2];
    uint64_t v15 = a3[3];
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(v7 + 48 * v8 + 16) = v16;
    unint64_t v17 = v7 + 48 * v8;
    id v18 = *(std::__shared_weak_count **)(v17 + 24);
    *(void *)(v17 + 24) = v15;
    if (v18) {
      sub_1000DB0A0(v18);
    }
    uint64_t v20 = a3[4];
    uint64_t v19 = a3[5];
    if (v19) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(v7 + 48 * v8 + 32) = v20;
    unint64_t v21 = v7 + 48 * v8;
    double v22 = *(std::__shared_weak_count **)(v21 + 40);
    *(void *)(v21 + 40) = v19;
    if (v22) {
      sub_1000DB0A0(v22);
    }
  }
  return v4;
}

void sub_100D2BE50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100D2C578((void **)va);
  _Unwind_Resume(a1);
}

void *sub_100D2BE64(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)((char *)a2 + v6 - a4);
  unint64_t v8 = (_OWORD *)v6;
  if ((unint64_t)v7 < a3)
  {
    uint64_t v9 = v7;
    unint64_t v8 = *(_OWORD **)(a1 + 8);
    do
    {
      _OWORD *v8 = *(_OWORD *)v9;
      *uint64_t v9 = 0;
      v9[1] = 0;
      v8[1] = *((_OWORD *)v9 + 1);
      _DWORD v9[2] = 0;
      v9[3] = 0;
      _DWORD v8[2] = *((_OWORD *)v9 + 2);
      v9[4] = 0;
      v9[5] = 0;
      v8 += 3;
      v9 += 6;
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_100D2C124((uint64_t)&v11, a2, v7, v6);
}

void sub_100D2BEE8(void *a1, void *a2)
{
  BOOL v4 = (long long *)a1[2];
  if (v4 == (long long *)a1[3])
  {
    uint64_t v5 = (long long *)a1[1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (long long *)*a1) {
        unint64_t v10 = 1;
      }
      else {
        unint64_t v10 = 0x5555555555555556 * (((uint64_t)v4 - *a1) >> 4);
      }
      unint64_t v11 = v10 >> 2;
      uint64_t v12 = a1[4];
      uint64_t v19 = a1[4];
      *(void *)&long long v17 = sub_10014F86C(v12, v10);
      *((void *)&v17 + 1) = v17 + 48 * v11;
      *(void *)&long long v18 = *((void *)&v17 + 1);
      *((void *)&v18 + 1) = v17 + 48 * v13;
      sub_100D2C274((uint64_t)&v17, a1[1], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - a1[1]) >> 4));
      long long v14 = v18;
      long long v15 = *(_OWORD *)a1;
      long long v16 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v17;
      *((_OWORD *)a1 + 1) = v14;
      long long v17 = v15;
      long long v18 = v16;
      sub_100D2C578((void **)&v17);
      BOOL v4 = (long long *)a1[2];
    }
    else
    {
      int64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *a1) >> 4);
      if (v6 >= -1) {
        uint64_t v7 = v6 + 1;
      }
      else {
        uint64_t v7 = v6 + 2;
      }
      uint64_t v8 = -3 * (v7 >> 1);
      sub_100D2C1D8((uint64_t)&v17, v5, v4, (uint64_t)&v5[-3 * (v7 >> 1)]);
      BOOL v4 = v9;
      a1[1] += 16 * v8;
      a1[2] = v9;
    }
  }
  sub_100D2C0D8(a1[4], v4, a2);
  a1[2] += 48;
}

void sub_100D2C010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t sub_100D2C024(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_100D2C2C4((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_100D2C370(v7, a3, a1[1], (_OWORD *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

void sub_100D2C0D8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a3[1];
  *a2 = *a3;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a3[3];
  a2[2] = a3[2];
  a2[3] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a3[5];
  a2[4] = a3[4];
  a2[5] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
}

void *sub_100D2C124(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (a3 != a2)
  {
    uint64_t v7 = a3;
    uint64_t v8 = a3;
    uint64_t v9 = a4;
    do
    {
      long long v10 = *((_OWORD *)v8 - 3);
      v8 -= 6;
      void *v8 = 0;
      v8[1] = 0;
      uint64_t v11 = *(std::__shared_weak_count **)(v4 - 40);
      *(_OWORD *)(v9 - 48) = v10;
      v9 -= 48;
      if (v11) {
        sub_1000DB0A0(v11);
      }
      long long v12 = *((_OWORD *)v7 - 2);
      *(v7 - 4) = 0;
      *(v7 - 3) = 0;
      uint64_t v13 = *(std::__shared_weak_count **)(v4 - 24);
      *(_OWORD *)(v4 - 32) = v12;
      if (v13) {
        sub_1000DB0A0(v13);
      }
      long long v14 = *((_OWORD *)v7 - 1);
      *(v7 - 2) = 0;
      *(v7 - 1) = 0;
      long long v15 = *(std::__shared_weak_count **)(v4 - 8);
      *(_OWORD *)(v4 - 16) = v14;
      if (v15) {
        sub_1000DB0A0(v15);
      }
      uint64_t v4 = v9;
      uint64_t v7 = v8;
    }
    while (v8 != a2);
  }
  return a3;
}

long long *sub_100D2C1D8(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      long long v7 = *v5;
      *(void *)uint64_t v5 = 0;
      *((void *)v5 + 1) = 0;
      uint64_t v8 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v7;
      if (v8) {
        sub_1000DB0A0(v8);
      }
      long long v9 = v5[1];
      *((void *)v5 + 2) = 0;
      *((void *)v5 + 3) = 0;
      long long v10 = *(std::__shared_weak_count **)(a4 + 24);
      *(_OWORD *)(a4 + 16) = v9;
      if (v10) {
        sub_1000DB0A0(v10);
      }
      long long v11 = v5[2];
      *((void *)v5 + 4) = 0;
      *((void *)v5 + 5) = 0;
      long long v12 = *(std::__shared_weak_count **)(a4 + 40);
      *(_OWORD *)(a4 + 32) = v11;
      if (v12) {
        sub_1000DB0A0(v12);
      }
      a4 += 48;
      v5 += 3;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_100D2C274(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(_OWORD **)(result + 16);
  if (a3)
  {
    uint64_t v4 = &v3[3 * a3];
    do
    {
      *uint64_t v3 = *(_OWORD *)a2;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      v3[1] = *(_OWORD *)(a2 + 16);
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      _DWORD v3[2] = *(_OWORD *)(a2 + 32);
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      v3 += 3;
      a2 += 48;
    }
    while (v3 != v4);
    uint64_t v3 = v4;
  }
  *(void *)(result + 16) = v3;
  return result;
}

uint64_t sub_100D2C2C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  _OWORD v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 48);
    do
    {
      long long v9 = *(_OWORD *)(a3 - 48);
      a3 -= 48;
      _OWORD *v8 = v9;
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      v8[1] = *(_OWORD *)(a3 + 16);
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      _DWORD v8[2] = *(_OWORD *)(a3 + 32);
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 48;
      v8 -= 3;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_100D2C404((uint64_t)v12);
  return v10;
}

_OWORD *sub_100D2C370(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4 = a4;
  long long v9 = a4;
  uint64_t v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  _DWORD v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *(_OWORD *)a2;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      v4[1] = *(_OWORD *)(a2 + 16);
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      v4[2] = *(_OWORD *)(a2 + 32);
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      v4 += 3;
      a2 += 48;
    }
    while (a2 != a3);
    long long v9 = v4;
  }
  char v7 = 1;
  sub_100D2C4EC((uint64_t)v6);
  return v4;
}

uint64_t sub_100D2C404(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100D2C43C((uint64_t *)a1);
  }
  return a1;
}

void sub_100D2C43C(uint64_t *a1)
{
  uint64_t v1 = *(void **)(a1[2] + 8);
  id v2 = *(void **)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_100D2C490(v3, v1);
      v1 += 6;
    }
    while (v1 != v2);
  }
}

void sub_100D2C490(uint64_t a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[5];
  if (v3) {
    sub_1000DB0A0(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a2[3];
  if (v4) {
    sub_1000DB0A0(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    sub_1000DB0A0(v5);
  }
}

uint64_t sub_100D2C4EC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100D2C524((uint64_t *)a1);
  }
  return a1;
}

void sub_100D2C524(uint64_t *a1)
{
  id v2 = (void *)a1[1];
  uint64_t v1 = (void **)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = (void *)*v2;
  if (*v1 != (void *)*v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 6;
      sub_100D2C490(v5, v3);
    }
    while (v3 != v4);
  }
}

void **sub_100D2C578(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100D2C5AC(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    sub_100D2C490(v4, (void *)(i - 48));
  }
}

uint64_t sub_100D2C5F4(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0x8E38E38E38E38E39 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x38E38E38E38E38FLL) {
      sub_1001D7FD4();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v7[4] = result;
    v7[0] = sub_10021D4B8(result, a2);
    v7[1] = v7[0] + v5;
    id v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 72 * v6;
    sub_100D2C7FC(a1, v7);
    return sub_100D2C9B8((uint64_t)v7);
  }
  return result;
}

void sub_100D2C6A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100D2C9B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100D2C6B4(void *a1, double a2, double a3)
{
  uint64_t v6 = (uint64_t)(a1 + 8);
  unint64_t v7 = a1[8];
  uint64_t v8 = (double *)a1[7];
  if ((unint64_t)v8 >= v7)
  {
    uint64_t v10 = (void **)(a1 + 6);
    long long v11 = (double *)a1[6];
    uint64_t v12 = ((char *)v8 - (char *)v11) >> 4;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v14 = v7 - (void)v11;
    if (v14 >> 3 > v13) {
      unint64_t v13 = v14 >> 3;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      long long v16 = (char *)sub_1000C571C(v6, v15);
      long long v11 = (double *)a1[6];
      uint64_t v8 = (double *)a1[7];
    }
    else
    {
      long long v16 = 0;
    }
    long long v17 = (double *)&v16[16 * v12];
    long long v18 = &v16[16 * v15];
    *long long v17 = a2;
    v17[1] = a3;
    long long v9 = v17 + 2;
    if (v8 != v11)
    {
      do
      {
        *((_OWORD *)v17 - 1) = *((_OWORD *)v8 - 1);
        v17 -= 2;
        v8 -= 2;
      }
      while (v8 != v11);
      long long v11 = (double *)*v10;
    }
    a1[6] = v17;
    a1[7] = v9;
    a1[8] = v18;
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    double *v8 = a2;
    v8[1] = a3;
    long long v9 = v8 + 2;
  }
  a1[7] = v9;
}

uint64_t sub_100D2C7B8(uint64_t *a1, long long *a2)
{
  uint64_t v3 = a1 + 2;
  unint64_t v4 = a1[3];
  if (v4 >= a1[4])
  {
    uint64_t result = sub_100D2CAB0(v3, a2);
  }
  else
  {
    sub_100D2CA4C((uint64_t)v3, a2);
    uint64_t result = v4 + 72;
  }
  a1[3] = result;
  return result;
}

uint64_t sub_100D2C7FC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100D2C874((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100D2C874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  _OWORD v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 72);
      long long v9 = *(_OWORD *)(a3 - 56);
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v9;
      *(_OWORD *)(v7 - 72) = v8;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      uint64_t v7 = *((void *)&v15 + 1) - 72;
      *((void *)&v15 + 1) -= 72;
      a3 -= 72;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_100D2C938((uint64_t)v12);
  return v10;
}

uint64_t sub_100D2C938(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100D2C970(a1);
  }
  return a1;
}

void sub_100D2C970(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 + 48);
    if (v3)
    {
      *(void *)(v1 + 56) = v3;
      operator delete(v3);
    }
    v1 += 72;
  }
}

uint64_t sub_100D2C9B8(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100D2C9F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 72;
    uint64_t v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 72;
    }
  }
}

void *sub_100D2CA4C(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  long long v4 = *a2;
  long long v5 = a2[2];
  *(_OWORD *)(v3 + 16) = a2[1];
  *(_OWORD *)(v3 + 32) = v5;
  *(_OWORD *)uint64_t v3 = v4;
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 64) = 0;
  *(void *)(v3 + 48) = 0;
  uint64_t result = sub_10017C680((void *)(v3 + 48), *((const void **)a2 + 6), *((void *)a2 + 7), (uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 4);
  *(void *)(a1 + 8) = v3 + 72;
  return result;
}

void sub_100D2CAA8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100D2CAB0(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL) {
    sub_1001D7FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1C71C71C71C71C7) {
    unint64_t v9 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v19 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_10021D4B8(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  long long v11 = &v10[72 * v4];
  v16[0] = v10;
  v16[1] = v11;
  long long v17 = v11;
  long long v18 = &v10[72 * v9];
  long long v12 = *a2;
  long long v13 = a2[2];
  *((_OWORD *)v11 + 1) = a2[1];
  *((_OWORD *)v11 + 2) = v13;
  *(_OWORD *)long long v11 = v12;
  *((void *)v11 + 7) = 0;
  *((void *)v11 + 8) = 0;
  *((void *)v11 + 6) = 0;
  sub_10017C680((void *)v11 + 6, *((const void **)a2 + 6), *((void *)a2 + 7), (uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 4);
  v17 += 72;
  sub_100D2C7FC(a1, v16);
  uint64_t v14 = a1[1];
  sub_100D2C9B8((uint64_t)v16);
  return v14;
}

void sub_100D2CBDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100D2C9B8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_100D2CBF0@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0xE8uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = off_1022F3318;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *((void *)v2 + 17) = 0;
  *(_OWORD *)(v2 + 104) = 0u;
  *(void *)(v2 + 44) = -1;
  *((void *)v2 + 8) = 0xBFF0000000000000;
  *((void *)v2 + 9) = 0;
  *((void *)v2 + 10) = 0;
  *((void *)v2 + 11) = 0;
  *((void *)v2 + 12) = -1;
  *((void *)v2 + 16) = -1;
  *((_DWORD *)v2 + 34) = -1;
  *((void *)v2 + 28) = 0;
  *((_OWORD *)v2 + 12) = 0u;
  *((_OWORD *)v2 + 13) = 0u;
  *((_OWORD *)v2 + 10) = 0u;
  *((_OWORD *)v2 + 11) = 0u;
  *((_OWORD *)v2 + 9) = 0u;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t result = v2 + 24;
  *a1 = result;
  return result;
}

void sub_100D2CC98(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022F3318;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100D2CCB8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022F3318;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100D2CD0C(uint64_t a1)
{
  sub_100D2CD38((uint64_t)&v1, a1 + 24);
}

void sub_100D2CD38(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 184);
  if (v3)
  {
    *(void *)(a2 + 192) = v3;
    operator delete(v3);
  }
  unint64_t v4 = *(void **)(a2 + 160);
  if (v4)
  {
    *(void *)(a2 + 168) = v4;
    operator delete(v4);
  }
  unint64_t v5 = *(void **)(a2 + 136);
  if (v5)
  {
    *(void *)(a2 + 144) = v5;
    operator delete(v5);
  }
  if (*(char *)(a2 + 71) < 0)
  {
    uint64_t v6 = *(void **)(a2 + 48);
    operator delete(v6);
  }
}

uint64_t sub_100D2CDB0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100D2CE28((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100D2CE28(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  _OWORD v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_100D2CEBC((uint64_t)v12);
  return v10;
}

uint64_t sub_100D2CEBC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1002CFBC4(a1);
  }
  return a1;
}

void *sub_100D2CEF4(uint64_t *a1, void *a2, uint64_t *a3, void *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    long long v9 = a1 + 2;
    uint64_t v10 = v11;
    unint64_t v12 = *(v9 - 1);
    if (a5 <= (uint64_t)(v11 - v12) >> 4)
    {
      uint64_t v19 = v12 - (void)a2;
      uint64_t v20 = (uint64_t)(v12 - (void)a2) >> 4;
      if (v20 >= a5)
      {
        unint64_t v21 = &a3[2 * a5];
      }
      else
      {
        unint64_t v21 = &a3[2 * v20];
        a1[1] = (uint64_t)sub_100D2B31C((uint64_t)v9, v21, a4, (void *)*(v9 - 1));
        if (v19 < 1) {
          return v5;
        }
      }
      sub_100D2D0A0((uint64_t)a1, v5, v12, (uint64_t)&v5[2 * a5]);
      sub_100D2D21C((uint64_t)v26, v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
      if (v14 >> 60) {
        sub_1001D7FD4();
      }
      uint64_t v15 = ((uint64_t)a2 - v13) >> 4;
      uint64_t v16 = v10 - v13;
      if (v16 >> 3 > v14) {
        unint64_t v14 = v16 >> 3;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      v26[4] = v9;
      if (v17) {
        long long v18 = (char *)sub_1000C571C((uint64_t)v9, v17);
      }
      else {
        long long v18 = 0;
      }
      double v22 = (uint64_t *)&v18[16 * v15];
      v26[0] = v18;
      v26[1] = v22;
      v26[3] = &v18[16 * v17];
      unint64_t v23 = &v22[2 * a5];
      do
      {
        *double v22 = *v7;
        uint64_t v24 = v7[1];
        v22[1] = v24;
        if (v24) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
        }
        v22 += 2;
        v7 += 2;
      }
      while (v22 != v23);
      void v26[2] = v23;
      uint64_t v5 = (void *)sub_100D2D104(a1, v26, v5);
      sub_1000C5898(v26);
    }
  }
  return v5;
}

void sub_100D2D080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void *sub_100D2D0A0(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)((char *)a2 + v6 - a4);
  uint64_t v8 = (_OWORD *)v6;
  if ((unint64_t)v7 < a3)
  {
    long long v9 = v7;
    uint64_t v8 = *(_OWORD **)(a1 + 8);
    do
    {
      *v8++ = *(_OWORD *)v9;
      *long long v9 = 0;
      v9[1] = 0;
      v9 += 2;
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_100D2D1B8((uint64_t)&v11, a2, v7, v6);
}

uint64_t sub_100D2D104(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_100D2CE28((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_100D2D298(v7, (uint64_t)a3, a1[1], (_OWORD *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

void *sub_100D2D1B8(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = a3;
    do
    {
      long long v8 = *((_OWORD *)v7 - 1);
      v7 -= 2;
      void *v7 = 0;
      v7[1] = 0;
      uint64_t v9 = *(std::__shared_weak_count **)(a4 - 8);
      *(_OWORD *)(a4 - 16) = v8;
      a4 -= 16;
      if (v9) {
        sub_1000DB0A0(v9);
      }
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t *sub_100D2D21C(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    uint64_t v8 = *v5;
    uint64_t v7 = v5[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = (std::__shared_weak_count *)a4[1];
    *a4 = v8;
    a4[1] = v7;
    if (v9) {
      sub_1000DB0A0(v9);
    }
    a4 += 2;
    v5 += 2;
  }
  while (v5 != v6);
  return v6;
}

_OWORD *sub_100D2D298(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  unint64_t v4 = a4;
  uint64_t v9 = a4;
  uint64_t v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  _DWORD v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *v4++ = *(_OWORD *)a2;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      a2 += 16;
    }
    while (a2 != a3);
    uint64_t v9 = v4;
  }
  char v7 = 1;
  sub_100D2B3AC((uint64_t)v6);
  return v4;
}

void sub_100D2D30C(void ***a1)
{
  char v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        sub_1000C5954(&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_100D2D380@<X0>(double *a1@<X1>, double *a2@<X2>, double *a3@<X3>, double *a4@<X4>, double *a5@<X5>, double *a6@<X6>, uint64_t *a7@<X7>, void *a8@<X8>, char *a9, char *a10, double *a11, double *a12, uint64_t *a13, uint64_t *a14, uint64_t *a15, uint64_t *a16)
{
  unint64_t v23 = operator new(0xC0uLL);
  uint64_t result = sub_100D2D460(v23, a1, a2, a3, a4, a5, a6, a7, a9, a10, a11, a12, a13, a14, a15, a16);
  *a8 = v23 + 3;
  a8[1] = v23;
  return result;
}

void sub_100D2D44C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100D2D460(void *a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, uint64_t *a8, char *a9, char *a10, double *a11, double *a12, uint64_t *a13, uint64_t *a14, uint64_t *a15, uint64_t *a16)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022F3368;
  sub_100D2D590((uint64_t)&v18, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
  return a1;
}

void sub_100D2D4F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100D2D508(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022F3368;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100D2D528(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022F3368;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100D2D57C(uint64_t a1)
{
  char v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    sub_1000DB0A0(v1);
  }
}

void sub_100D2D590(uint64_t a1, uint64_t a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, uint64_t *a9, char *a10, char *a11, double *a12, double *a13, uint64_t *a14, uint64_t *a15, uint64_t *a16, uint64_t *a17)
{
  double v17 = *a3;
  double v18 = *a4;
  double v19 = *a5;
  double v20 = *a6;
  double v21 = *a7;
  double v22 = *a8;
  unint64_t v23 = (std::__shared_weak_count *)a9[1];
  uint64_t v24 = *a9;
  unint64_t v25 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100D2D650(a2, &v24, *a10, *a11, v17, v18, v19, v20, v21, v22, *a12, *a13, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8, *a14, *a15, *a16,
    *a17);
  if (v25) {
    sub_1000DB0A0(v25);
  }
}

void sub_100D2D638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D2D650(uint64_t a1, uint64_t *a2, char a3, char a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0xBFF0000000000000;
  __asm { FMOV            V6.2D, #-1.0 }
  *(_OWORD *)(a1 + 40) = _Q6;
  *(void *)(a1 + 56) = 0;
  *(_WORD *)(a1 + 64) = 256;
  *(unsigned char *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 104) = xmmword_101D1C320;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 0;
  uint64_t v30 = *a2;
  __int32 v31 = (std::__shared_weak_count *)a2[1];
  if (v31)
  {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    *(double *)(a1 + 16) = a5;
    *(double *)(a1 + 24) = a6;
    *(double *)(a1 + 32) = a7;
    *(double *)(a1 + 40) = a8;
    *(double *)(a1 + 48) = a9;
    *(double *)(a1 + 56) = a10;
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v32 = *(std::__shared_weak_count **)(a1 + 8);
    *(void *)a1 = v30;
    *(void *)(a1 + 8) = v31;
    if (v32) {
      sub_1000DB0A0(v32);
    }
  }
  else
  {
    *(double *)(a1 + 16) = a5;
    *(double *)(a1 + 24) = a6;
    *(double *)(a1 + 32) = a7;
    *(double *)(a1 + 40) = a8;
    *(double *)(a1 + 48) = a9;
    *(double *)(a1 + 56) = a10;
    *(void *)a1 = v30;
    *(void *)(a1 + 8) = 0;
  }
  *(unsigned char *)(a1 + 64) = a3;
  *(unsigned char *)(a1 + 65) = a4;
  *(double *)(a1 + 72) = a11;
  *(double *)(a1 + 80) = a12;
  *(void *)(a1 + 88) = a17;
  *(void *)(a1 + 128) = a18;
  *(void *)(a1 + 136) = a19;
  *(void *)(a1 + 144) = a20;
  if (v31) {
    sub_1000DB0A0(v31);
  }
  return a1;
}

uint64_t sub_100D2D764(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100D2D7DC((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100D2D7DC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  _OWORD v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_100D2D870((uint64_t)v12);
  return v10;
}

uint64_t sub_100D2D870(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1002CFBC4(a1);
  }
  return a1;
}

void sub_100D2D8A8(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  long long v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    sub_100D2B43C((uint64_t *)a1);
    if (a4 >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_10022F168((void *)a1, v12);
    char v13 = sub_100D2B31C(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4;
  if (v14 < a4)
  {
    long long v15 = &a2[2 * v14];
    sub_100D2D21C((uint64_t)&v20, a2, v15, v9);
    char v13 = sub_100D2B31C(v8, v15, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  sub_100D2D21C((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      double v19 = *(std::__shared_weak_count **)(v18 - 8);
      if (v19) {
        sub_1000DB0A0(v19);
      }
      v18 -= 16;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_100D2D9EC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100D2D9F4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *sub_100D2D9FC(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = sub_1000F0A30(a1, a2);
  unint64_t v4 = (std::__shared_weak_count *)a2[7];
  if (v4) {
    sub_1000DB0A0(v4);
  }
  operator delete(a2);
  return v3;
}

_OWORD *sub_100D2DA3C(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v5 = (void **)sub_100D2B068((uint64_t)a1, &v9, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x38uLL);
    _DWORD v6[2] = *(_OWORD *)a3;
    *((unsigned char *)v6 + 48) = *(unsigned char *)(a3 + 16);
    sub_1000EDF90(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t *sub_100D2DAC8(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v5 = (void **)sub_100D2B068((uint64_t)a1, &v10, a2);
  uint64_t v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = (uint64_t *)operator new(0x40uLL);
    long long v8 = *(_OWORD *)(a3 + 16);
    *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
    *((_OWORD *)v6 + 3) = v8;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    sub_1000EDF90(a1, v10, v7, v6);
  }
  return v6;
}

uint64_t *sub_100D2DB50(uint64_t **a1, unint64_t *a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (void **)sub_100D2B068((uint64_t)a1, &v13, a2);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    long long v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x60uLL);
    v11[1] = a1 + 1;
    long long v9 = **a4;
    *((_OWORD *)v7 + 4) = 0u;
    *((_OWORD *)v7 + 5) = 0u;
    *((_OWORD *)v7 + 2) = v9;
    *((_OWORD *)v7 + 3) = 0u;
    char v12 = 1;
    sub_1000EDF90(a1, v13, v8, v7);
    v11[0] = 0;
    sub_100D2DC08((uint64_t)v11, 0);
  }
  return v7;
}

void sub_100D2DC08(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100D2DC60(v2 + 4);
    }
    operator delete(v2);
  }
}

void sub_100D2DC60(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[5];
  if (v3) {
    sub_1000DB0A0(v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)a1[3];
  if (v4)
  {
    sub_1000DB0A0(v4);
  }
}

uint64_t sub_100D2DCBC(uint64_t *a1, void *a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    sub_1001D7FD4();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  unint64_t v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)sub_10014F86C((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v10 = v7;
  uint64_t v11 = &v7[48 * v3];
  uint64_t v13 = &v7[48 * v6];
  sub_100D2C0D8((uint64_t)(a1 + 2), v11, a2);
  char v12 = v11 + 48;
  sub_100D2DDC8(a1, &v10);
  uint64_t v8 = a1[1];
  sub_100D2C578(&v10);
  return v8;
}

void sub_100D2DDB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100D2C578((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D2DDC8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100D2C2C4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void sub_100D2DE40(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100D2DE40(a1, *a2);
    sub_100D2DE40(a1, a2[1]);
    sub_100D2DC60(a2 + 4);
    operator delete(a2);
  }
}

void sub_100D2DE9C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    unint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 6;
        sub_100D2C490((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_OWORD *sub_100D2DF34(uint64_t **a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)sub_100D2B068((uint64_t)a1, &v10, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x38uLL);
    id v7[2] = **a4;
    *((unsigned char *)v7 + 48) = 0;
    sub_1000EDF90(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

void *sub_100D2DFC0(uint64_t a1, void **a2)
{
  unint64_t v3 = *(void **)(a1 + 8);
  *unint64_t v3 = 0;
  v3[1] = 0;
  _DWORD v3[2] = 0;
  uint64_t result = sub_100D2B294(v3, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_100D2E00C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100D2E014(uint64_t *a1, void **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1001D7FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_1000DA5D8(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  long long v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  sub_100D2B294(v11, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  v15 += 24;
  sub_100D2E12C(a1, v14);
  uint64_t v12 = a1[1];
  sub_100D2E2CC(v14);
  return v12;
}

void sub_100D2E118(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100D2E2CC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D2E12C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100D2E1A4((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100D2E1A4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_100D2E248((uint64_t)v11);
  return v9;
}

uint64_t sub_100D2E248(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100D2E280(a1);
  }
  return a1;
}

void sub_100D2E280(uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    sub_1000C5954(&v3);
    v1 += 3;
  }
}

void **sub_100D2E2CC(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100D2E300(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    sub_1000C5954(&v5);
  }
}

uint64_t sub_100D2E354(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100D2E3CC((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100D2E3CC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  _OWORD v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_100D2E460((uint64_t)v12);
  return v10;
}

uint64_t sub_100D2E460(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1002CFBC4(a1);
  }
  return a1;
}

uint64_t sub_100D2E498(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 6;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58) {
    sub_1001D7FD4();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 5 > v4) {
    unint64_t v4 = v6 >> 5;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v7 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  long long v15 = a1 + 2;
  if (v7) {
    uint64_t v8 = (char *)sub_10017EAF0((uint64_t)(a1 + 2), v7);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v11 = v8;
  char v12 = &v8[64 * v3];
  long long v14 = &v8[64 * v7];
  sub_100D2E588((uint64_t)(a1 + 2), (uint64_t)v12, a2);
  char v13 = v12 + 64;
  sub_100D2E674(a1, &v11);
  uint64_t v9 = a1[1];
  sub_100D2E838((uint64_t)&v11);
  return v9;
}

void sub_100D2E574(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100D2E838((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_100D2E588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = *(void *)a3;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  sub_100D2E5F0((char *)(a2 + 8), *(void **)(a3 + 8), *(void **)(a3 + 16), (uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 4);
  *(void *)(a2 + 32) = *(void *)(a3 + 32);
  *(void *)(a2 + 40) = *(void *)(a3 + 40);
  *(void *)(a2 + 48) = *(void *)(a3 + 48);
  double result = *(double *)(a3 + 56);
  *(double *)(a2 + 56) = result;
  return result;
}

char *sub_100D2E5F0(char *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = sub_10022F168(result, a4);
    unint64_t v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      void *v7 = *a2;
      v7[1] = a2[1];
      v7 += 2;
      a2 += 2;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_100D2E658(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D2E674(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100D2E6EC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100D2E6EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 64;
      sub_100D2E588(a1, v7 - 64, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 64;
      *((void *)&v16 + 1) -= 64;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_100D2E7B8((uint64_t)v13);
  return v11;
}

void sub_100D2E7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100D2E7B8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100D2E7F0(a1);
  }
  return a1;
}

void sub_100D2E7F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 + 8);
    if (v3)
    {
      *(void *)(v1 + 16) = v3;
      operator delete(v3);
    }
    v1 += 64;
  }
}

uint64_t sub_100D2E838(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100D2E870(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 64;
    uint64_t v5 = *(void **)(v2 - 56);
    if (v5)
    {
      *(void *)(v2 - 48) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 64;
    }
  }
}

void sub_100D2E8CC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022F33B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100D2E8EC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022F33B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100D2E940(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  sub_100D2E970(&v1);
}

void sub_100D2E970(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_100D2E9C4((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_100D2E9C4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 72)
  {
    unint64_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void sub_100D2EA14(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    sub_100D2B43C((uint64_t *)a1);
    if (a4 >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_10022F168((void *)a1, v12);
    char v13 = sub_100D2EB68(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4;
  if (v14 < a4)
  {
    long long v15 = &a2[2 * v14];
    sub_100D2D21C((uint64_t)&v20, a2, v15, v9);
    char v13 = sub_100D2EB68(v8, v15, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  sub_100D2D21C((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      double v19 = *(std::__shared_weak_count **)(v18 - 8);
      if (v19) {
        sub_1000DB0A0(v19);
      }
      v18 -= 16;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_100D2EB58(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100D2EB60(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *sub_100D2EB68(uint64_t a1, void *a2, void *a3, void *a4)
{
  unint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  id v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *unint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_100D2EBF8((uint64_t)v7);
  return v4;
}

uint64_t sub_100D2EBF8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100223AE4(a1);
  }
  return a1;
}

uint64_t sub_100D2EC30(uint64_t a1)
{
  *(void *)a1 = off_1022F3408;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 32) = -1;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 3212836864;
  sub_100D2ECD8(a1);
  return a1;
}

void sub_100D2ECAC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D2ECD8(uint64_t a1)
{
  if (*(void *)(a1 + 64)) {
    operator delete[]();
  }
  *(_DWORD *)(a1 + 72) = 0;
  uint64_t result = *(void *)(a1 + 80);
  if (result)
  {
    sub_100DDF9A0(result);
    uint64_t result = *(void *)(a1 + 80);
    if (result) {
      operator delete();
    }
    *(void *)(a1 + 80) = 0;
  }
  return result;
}

void sub_100D2ED4C(uint64_t a1)
{
}

uint64_t sub_100D2EE88(uint64_t a1)
{
  *(void *)a1 = off_1022F3408;
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2) {
    sub_100DDF9A0(v2);
  }
  sub_100D2ECD8(a1);
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_100D2EF04(uint64_t a1)
{
  sub_100D2EE88(a1);

  operator delete();
}

void sub_100D2EF3C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  if (v1) {
    sub_100DDF958(v1);
  }
}

float sub_100D2EF4C(uint64_t a1, void *a2, int8x16_t a3, int8x16_t a4)
{
  uint64_t v6 = 0;
  float result = sub_10096D130(*(void *)(a1 + 80), a2, (double *)&v6, a3, a4);
  if (result != 3.4028e38) {
    return result / (float)((float)*(int *)(a1 + 72) * 1.4142);
  }
  return result;
}

uint64_t sub_100D2EFB4(uint64_t a1)
{
  uint64_t result = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    return *(void *)result;
  }
  return result;
}

float sub_100D2EFD0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  float result = -1.0;
  if (v1)
  {
    int v3 = *(_DWORD *)(a1 + 72);
    if (v3 >= 1) {
      return *(float *)(v1 + 32) / (float)((float)v3 * 1.4142);
    }
  }
  return result;
}

void sub_100D2F004()
{
}

void sub_100D2F048()
{
}

uint64_t sub_100D2F06C()
{
  if (qword_102481180 != -1) {
    dispatch_once(&qword_102481180, &stru_1022F3428);
  }
  return qword_10248AAF8;
}

void sub_100D2F0B4(uint64_t a1)
{
}

void sub_100D2FAF8(_Unwind_Exception *a1)
{
  uint64_t v5 = *v3;
  *int v3 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  sub_1003A73E8(v2);
  sub_1009D1DE4(v1);
  _Unwind_Resume(a1);
}

void sub_100D2FBA4(uint64_t a1, _DWORD *a2, unsigned __int8 *a3, uint64_t a4)
{
  if (*a2 == 11)
  {
    int v8 = *a3;
    if (*(unsigned __int8 *)(a4 + 410) == v8) {
      return;
    }
    *(unsigned char *)(a4 + 410) = v8;
    uint64_t v6 = sub_1000D3E78();
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    _DWORD v9[2] = sub_100D3321C;
    v9[3] = &unk_1022A3020;
    v9[4] = a4;
    uint64_t v7 = v9;
    goto LABEL_7;
  }
  if (*a2 == 10)
  {
    int v5 = *(unsigned __int8 *)(a4 + 409);
    if (v5 == *a3)
    {
      *(unsigned char *)(a4 + 409) = v5 ^ 1;
      uint64_t v6 = sub_1000D3E78();
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_100D33214;
      v10[3] = &unk_1022A3020;
      v10[4] = a4;
      uint64_t v7 = v10;
LABEL_7:
      sub_1009E8E94(v6, (uint64_t)v7);
    }
  }
}

void *sub_100D2FCB4(void *a1)
{
  *a1 = off_1022F3458;
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveEveryObserver(DarwinNotifyCenter, a1);
  sub_100D2FD54((uint64_t)a1);
  uint64_t v3 = a1[40];
  a1[40] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_1003A73E8(a1 + 9);

  return sub_1009D1DE4(a1);
}

void sub_100D2FD54(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 312))
  {
    if (*(void *)(a1 + 328))
    {
      uint64_t v2 = *(__CFRunLoopTimer **)(a1 + 368);
      if (v2)
      {
        CFRunLoopTimerInvalidate(v2);
        CFRelease(*(CFTypeRef *)(a1 + 368));
        *(void *)(a1 + 368) = 0;
      }
      if (qword_102419050 != -1) {
        dispatch_once(&qword_102419050, &stru_1022F34A0);
      }
      uint64_t v3 = qword_102419058;
      if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Setting prox mode to none. Stopping ear gesture detection.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419050 != -1) {
          dispatch_once(&qword_102419050, &stru_1022F34A0);
        }
        uint64_t v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEarGestureNotifier::stopDetectingGestures()", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
      BKSHIDServicesRequestProximityDetectionMode();
      if (sub_100B49A6C())
      {
        uint64_t v4 = sub_100B49A6C();
        sub_1009D26C4(v4, 0, *(void *)(a1 + 336));
        uint64_t v5 = *(void *)(a1 + 336);
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
        *(void *)(a1 + 336) = 0;
      }
      uint64_t v6 = sub_100D03F90();
      sub_1009D26C4(v6, 0, *(void *)(a1 + 328));
      uint64_t v7 = *(void *)(a1 + 328);
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      }
      *(void *)(a1 + 328) = 0;
      *(_DWORD *)(a1 + 40) = 0;
      *(void *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 56) = 0;
      sub_1003A7544((void *)(a1 + 88));
      sub_1003A7544((void *)(a1 + 160));
      sub_1003A7544((void *)(a1 + 232));
    }
    if (*(void *)(a1 + 32))
    {
      uint64_t v8 = sub_1009EC0A8();
      sub_1009D26C4(v8, 0, *(void *)(a1 + 32));
      uint64_t v9 = *(void *)(a1 + 32);
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
      *(void *)(a1 + 32) = 0;
    }
  }
}

void sub_100D30010(void *a1)
{
  sub_100D2FCB4(a1);

  operator delete();
}

void sub_100D30048(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100D03F90();

  sub_100D04598(v3, a2);
}

uint64_t sub_100D30080(uint64_t result)
{
  if (*(unsigned char *)(result + 312))
  {
    if (!*(void *)(result + 328))
    {
      if (qword_102419050 != -1) {
        dispatch_once(&qword_102419050, &stru_1022F34A0);
      }
      uint64_t v1 = qword_102419058;
      if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Starting ear gesture detection", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419050 != -1) {
          dispatch_once(&qword_102419050, &stru_1022F34A0);
        }
        uint64_t v2 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEarGestureNotifier::startDetectingGestures()", "%s\n", v2);
        if (v2 != (char *)buf) {
          free(v2);
        }
      }
      operator new();
    }
    if (!*(void *)(result + 32)) {
      operator new();
    }
  }
  return result;
}

void sub_100D30694()
{
}

void sub_100D306C8(uint64_t a1, uint64_t a2)
{
  if (!strncmp((const char *)a1, "Ear", 3uLL))
  {
    strncpy((char *)(a2 + 393), (const char *)a1, 0x10uLL);
    double v4 = *(double *)(a1 + 32);
    *(double *)(a2 + 352) = v4;
    if (*(unsigned char *)(a2 + 314))
    {
      if (qword_102419050 != -1) {
        dispatch_once(&qword_102419050, &stru_1022F34A0);
      }
      uint64_t v5 = qword_102419058;
      if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Readying gesture notification. Ignoring prox", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419050 != -1) {
          dispatch_once(&qword_102419050, &stru_1022F34A0);
        }
        long long v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEarGestureNotifier::onGestureNotification(const CLGestureNotifier::NotificationData *, void *)", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      *(_DWORD *)(a2 + 360) = 2;
LABEL_9:
      kdebug_trace();
      return;
    }
    if (!*(_DWORD *)(a2 + 360))
    {
      if (vabdd_f64(v4, *(double *)(a2 + 344)) >= *(double *)(a2 + 376))
      {
        if (*(unsigned char *)(a2 + 392)) {
          return;
        }
      }
      else if (*(unsigned char *)(a2 + 392))
      {
        if (qword_102419050 != -1) {
          dispatch_once(&qword_102419050, &stru_1022F34A0);
        }
        uint64_t v6 = qword_102419058;
        if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Setting prox mode to PassiveEngaged. Ready to send notification.", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419050 != -1) {
            dispatch_once(&qword_102419050, &stru_1022F34A0);
          }
          uint64_t v17 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEarGestureNotifier::onGestureNotification(const CLGestureNotifier::NotificationData *, void *)", "%s\n", v17);
          if (v17 != (char *)buf) {
            free(v17);
          }
        }
        BKSHIDServicesRequestProximityDetectionMode();
        if (qword_102419050 != -1) {
          dispatch_once(&qword_102419050, &stru_1022F34A0);
        }
        uint64_t v7 = qword_102419058;
        if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_INFO))
        {
          double v8 = *(double *)(a1 + 32) - *(double *)(a2 + 344);
          *(_DWORD *)long long buf = 134349056;
          double v20 = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Readying gesture notification. Prox triggered before motion. dt = %{public}.3f", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419050 != -1) {
            dispatch_once(&qword_102419050, &stru_1022F34A0);
          }
          uint64_t v18 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEarGestureNotifier::onGestureNotification(const CLGestureNotifier::NotificationData *, void *)", "%s\n", v18);
          if (v18 != (char *)buf) {
            free(v18);
          }
        }
        +[NSString stringWithFormat:@"%@.%@", @"com.apple.CoreMotion", @"ProxToEarGestureDelta"];
        ADClientPushValueForDistributionKey();
        *(_DWORD *)(a2 + 360) = 2;
        goto LABEL_9;
      }
      if (qword_102419050 != -1) {
        dispatch_once(&qword_102419050, &stru_1022F34A0);
      }
      uint64_t v9 = qword_102419058;
      if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Setting prox mode to PassiveEngaged. Motion waiting for prox.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419050 != -1) {
          dispatch_once(&qword_102419050, &stru_1022F34A0);
        }
        uint64_t v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEarGestureNotifier::onGestureNotification(const CLGestureNotifier::NotificationData *, void *)", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      BKSHIDServicesRequestProximityDetectionMode();
      *(_DWORD *)(a2 + 360) = 1;
      uint64_t v10 = *(__CFRunLoopTimer **)(a2 + 368);
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      CFRunLoopTimerSetNextFireDate(v10, Current + *(double *)(a2 + 384));
      if (qword_102419050 != -1) {
        dispatch_once(&qword_102419050, &stru_1022F34A0);
      }
      unint64_t v12 = qword_102419058;
      if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_INFO))
      {
        double v13 = *(double *)(a2 + 384);
        *(_DWORD *)long long buf = 134283521;
        double v20 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Set timer for %{private}f seconds.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419050 != -1) {
          dispatch_once(&qword_102419050, &stru_1022F34A0);
        }
        unint64_t v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEarGestureNotifier::onGestureNotification(const CLGestureNotifier::NotificationData *, void *)", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
    }
  }
}

void sub_100D30E7C(uint64_t a1, uint64_t a2)
{
  if (qword_102419050 != -1) {
    dispatch_once(&qword_102419050, &stru_1022F34A0);
  }
  uint64_t v3 = qword_102419058;
  if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *(int *)(a2 + 360);
    if (v4 > 3) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = off_1022F3548[v4];
    }
    *(_DWORD *)long long buf = 136446210;
    long long v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Gesture timer expired. State = %{public}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419050 != -1) {
      dispatch_once(&qword_102419050, &stru_1022F34A0);
    }
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEarGestureNotifier::onTimer(CFRunLoopTimerRef, void *)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  int v6 = *(_DWORD *)(a2 + 360);
  if ((v6 - 2) >= 2)
  {
    if (v6 == 1)
    {
      if (qword_102419050 != -1) {
        dispatch_once(&qword_102419050, &stru_1022F34A0);
      }
      uint64_t v10 = qword_102419058;
      if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Setting prox mode to PassiveMonitoring. Prox timer expired.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419050 != -1) {
          dispatch_once(&qword_102419050, &stru_1022F34A0);
        }
        unint64_t v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEarGestureNotifier::onTimer(CFRunLoopTimerRef, void *)", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
      kdebug_trace();
      BKSHIDServicesRequestProximityDetectionMode();
      *(_DWORD *)(a2 + 360) = 0;
      if (&_ADClientAddValueForScalarKey)
      {
        +[NSString stringWithFormat:@"%@.%@.%@", @"com.apple.CoreMotion", @"EarGesture", @"ProxTimerExpired"];
        ADClientAddValueForScalarKey();
      }
    }
  }
  else
  {
    if (qword_102419050 != -1) {
      dispatch_once(&qword_102419050, &stru_1022F34A0);
    }
    uint64_t v7 = qword_102419058;
    if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = *(int *)(a2 + 360);
      if (v8 > 3) {
        uint64_t v9 = 0;
      }
      else {
        uint64_t v9 = off_1022F3548[v8];
      }
      *(_DWORD *)long long buf = 136446210;
      long long v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Timer fired while in state %{public}s.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419050 != -1) {
        dispatch_once(&qword_102419050, &stru_1022F34A0);
      }
      double v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLEarGestureNotifier::onTimer(CFRunLoopTimerRef, void *)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  CFRunLoopTimerSetNextFireDate(*(CFRunLoopTimerRef *)(a2 + 368), 1.79769313e308);
}

void sub_100D313AC(uint64_t *a1, uint64_t a2)
{
}

void sub_100D313BC(uint64_t a1, float32x2_t *a2)
{
}

void sub_100D313CC(unsigned char *a1)
{
  if (a1[313])
  {
    if (qword_102419050 != -1) {
      dispatch_once(&qword_102419050, &stru_1022F34A0);
    }
    uint64_t v2 = qword_102419058;
    if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_INFO))
    {
      int v3 = a1[409];
      int v4 = a1[410];
      *(_DWORD *)long long buf = 67240448;
      int v11 = v3;
      __int16 v12 = 1026;
      int v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Has blanked screen = %{public}d, Is locked = %{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419050 != -1) {
        dispatch_once(&qword_102419050, &stru_1022F34A0);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEarGestureNotifier::hasBlankedScreenOrIsLockedUpdated()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    if (a1[409] && a1[410])
    {
      if (qword_102419050 != -1) {
        dispatch_once(&qword_102419050, &stru_1022F34A0);
      }
      uint64_t v5 = qword_102419058;
      if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Screen is blanked and device is locked. Stopping gesture detection.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419050 != -1) {
          dispatch_once(&qword_102419050, &stru_1022F34A0);
        }
        uint64_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEarGestureNotifier::hasBlankedScreenOrIsLockedUpdated()", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      sub_100D2FD54((uint64_t)a1);
    }
    else
    {
      if (qword_102419050 != -1) {
        dispatch_once(&qword_102419050, &stru_1022F34A0);
      }
      int v6 = qword_102419058;
      if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Screen is unblanked or device is not locked. Starting gesture detection if necessary.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419050 != -1) {
          dispatch_once(&qword_102419050, &stru_1022F34A0);
        }
        uint64_t v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEarGestureNotifier::hasBlankedScreenOrIsLockedUpdated()", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
      }
      sub_100D30080((uint64_t)a1);
    }
  }
}

void sub_100D3181C(unsigned char *a1, int a2, uint64_t a3)
{
  if (a2)
  {
    if (qword_102419050 != -1) {
      dispatch_once(&qword_102419050, &stru_1022F34A0);
    }
    int v3 = qword_102419058;
    if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Unrecognized notification", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419050 != -1) {
        dispatch_once(&qword_102419050, &stru_1022F34A0);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLEarGestureNotifier::numberOfSpectatorsChanged(int, size_t)", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else if (a3 == 1)
  {
    a1[313] = 1;
    if (!a1[410] || !a1[409])
    {
      sub_100D30080((uint64_t)a1);
    }
  }
  else if (!a3)
  {
    a1[313] = 0;
    sub_100D2FD54((uint64_t)a1);
  }
}

uint64_t sub_100D31A48(uint64_t result)
{
  if (&_ADClientAddValueForScalarKey)
  {
    +[NSString stringWithFormat:@"%@.%@.%@", @"com.apple.CoreMotion", @"EarGesture", result];
    return ADClientAddValueForScalarKey();
  }
  return result;
}

void sub_100D31AB8(uint64_t a1, double *a2)
{
  if (*(_DWORD *)(a1 + 360) == 2)
  {
    float v4 = *(float *)(a1 + 48);
    float v5 = *(float *)(a1 + 52);
    float v6 = *(float *)(a1 + 56);
    float v7 = atan2f(sqrtf((float)(v5 * v5) + (float)(v4 * v4)), -v6);
    if (qword_102419050 != -1) {
      dispatch_once(&qword_102419050, &stru_1022F34A0);
    }
    uint64_t v8 = qword_102419058;
    if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_INFO))
    {
      double v9 = *a2;
      *(_DWORD *)long long buf = 134350080;
      double v23 = v4;
      __int16 v24 = 2050;
      double v25 = v5;
      __int16 v26 = 2050;
      double v27 = v6;
      __int16 v28 = 2050;
      double v29 = v7;
      __int16 v30 = 2050;
      double v31 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "endPose,%{public}.2f,%{public}.2f,%{public}.2f,tilt,%{public}.2f,timestamp,%{public}.3f", buf, 0x34u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419050 != -1) {
        dispatch_once(&qword_102419050, &stru_1022F34A0);
      }
      double v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEarGestureNotifier::checkEndPoseInReadyState(const CLAccelerometer::Sample *)", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    float v10 = 0.0;
    if (v5 <= 0.15
      && v7 <= 2.5133
      && ((float v11 = fabsf(v5), v7 <= 1.885) || v11 >= 0.15)
      && (fabsf(v4 / v5) <= 1.5 || (float v10 = 1.0, v7 <= 1.885) && (v7 >= 1.0367 || v11 >= 0.2)))
    {
      if (qword_102419050 != -1) {
        dispatch_once(&qword_102419050, &stru_1022F34A0);
      }
      uint64_t v17 = qword_102419058;
      if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 136380675;
        *(void *)&double v23 = a1 + 393;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Sending gesture notification. Matched prototype name, %{private}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419050 != -1) {
          dispatch_once(&qword_102419050, &stru_1022F34A0);
        }
        double v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEarGestureNotifier::checkEndPoseInReadyState(const CLAccelerometer::Sample *)", "%s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
      }
      kdebug_trace();
      strncpy((char *)buf, (const char *)(a1 + 393), 0x10uLL);
      uint64_t v18 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@.%@", @"MatchFound", +[NSString stringWithUTF8String:buf]);
      if (&_ADClientAddValueForScalarKey)
      {
        +[NSString stringWithFormat:@"%@.%@.%@", @"com.apple.CoreMotion", @"EarGesture", v18];
        ADClientAddValueForScalarKey();
      }
      *(_DWORD *)((char *)&v25 + 2) = 0;
      sub_1000E01AC(a1, 0, (uint64_t)buf, 20);
      *(_DWORD *)(a1 + 360) = 3;
      *(double *)(a1 + 304) = *a2;
      *(void *)(a1 + 64) = 0xBFF0000000000000;
      sub_1003A7544((void *)(a1 + 88));
      sub_1003A7544((void *)(a1 + 160));
      sub_1003A7544((void *)(a1 + 232));
    }
    else
    {
      double v12 = *(double *)(a1 + 64);
      double v13 = *a2;
      if (v12 <= 0.0)
      {
        *(double *)(a1 + 64) = v13;
      }
      else if (v13 - v12 > (float)((float)(v10 * 0.06) + 0.06))
      {
        *(_DWORD *)(a1 + 360) = 0;
        *(void *)(a1 + 64) = 0xBFF0000000000000;
        if (qword_102419050 != -1) {
          dispatch_once(&qword_102419050, &stru_1022F34A0);
        }
        unint64_t v14 = qword_102419058;
        if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_INFO))
        {
          uint64_t v15 = *(int *)(a1 + 360);
          if (v15 > 3) {
            *(double *)&uint64_t v16 = 0.0;
          }
          else {
            uint64_t v16 = off_1022F3548[v15];
          }
          *(_DWORD *)long long buf = 136446210;
          double v23 = *(double *)&v16;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Failed end pose sanity check. Set state to %{public}s", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419050 != -1) {
            dispatch_once(&qword_102419050, &stru_1022F34A0);
          }
          char v21 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEarGestureNotifier::checkEndPoseInReadyState(const CLAccelerometer::Sample *)", "%s\n", v21);
          if (v21 != (char *)buf) {
            free(v21);
          }
        }
        kdebug_trace();
        if (&_ADClientAddValueForScalarKey)
        {
          +[NSString stringWithFormat:@"%@.%@.%@", @"com.apple.CoreMotion", @"EarGesture", @"FailedEndPoseCheck"];
          ADClientAddValueForScalarKey();
        }
      }
    }
  }
}

void sub_100D321F4(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 360) == 3 && *(double *)a2 - *(double *)(a1 + 304) < 3.0)
  {
    int v3 = (float *)(a2 + 12);
    float v4 = (float *)(a2 + 16);
    sub_1001A44F4(a1 + 88, (float *)(a2 + 8));
    sub_1001A44F4(a1 + 160, v3);
    sub_1001A44F4(a1 + 232, v4);
    float v5 = *(float *)(a1 + 48);
    float v6 = *(float *)(a1 + 52);
    float v7 = *(float *)(a1 + 56);
    float v8 = atan2f(sqrtf((float)(v6 * v6) + (float)(v5 * v5)), -v7);
    if (v8 > 2.5133 || v8 < 0.50265 || v6 > 0.3)
    {
      int v19 = 1;
      sub_1000E01AC(a1, 0, (uint64_t)&v16, 20);
      *(_DWORD *)(a1 + 360) = 0;
      if (qword_102419050 != -1) {
        dispatch_once(&qword_102419050, &stru_1022F34A0);
      }
      float v11 = qword_102419058;
      if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 134349568;
        double v27 = v5;
        __int16 v28 = 2050;
        double v29 = v6;
        __int16 v30 = 2050;
        double v31 = v7;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Sending gesture notification. Gesture cancelled due to unlikely end pose, %{public}.2f, %{public}.2f, %{public}.2f", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419050 != -1) {
          dispatch_once(&qword_102419050, &stru_1022F34A0);
        }
        int v20 = 134349568;
        double v21 = v5;
        __int16 v22 = 2050;
        double v23 = v6;
        __int16 v24 = 2050;
        double v25 = v7;
        double v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEarGestureNotifier::detectCancelAfterSend(const CLAccelerometer::Sample *)", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
      if (&_ADClientAddValueForScalarKey)
      {
        +[NSString stringWithFormat:@"%@.%@.%@", @"com.apple.CoreMotion", @"EarGesture", @"CancelledPose"];
        ADClientAddValueForScalarKey();
      }
      kdebug_trace();
    }
    else if (*(void *)(a1 + 152) >= *(void *)(a1 + 96))
    {
      sub_100D32778(a1 + 72, &v16);
      float v9 = v17;
      if (v17 < v18) {
        float v9 = v18;
      }
      if (v9 < *(float *)&v19) {
        float v9 = *(float *)&v19;
      }
      if (v9 > 0.3025)
      {
        int v15 = 1;
        sub_1000E01AC(a1, 0, (uint64_t)v14, 20);
        *(_DWORD *)(a1 + 360) = 0;
        if (qword_102419050 != -1) {
          dispatch_once(&qword_102419050, &stru_1022F34A0);
        }
        float v10 = qword_102419058;
        if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 134349568;
          double v27 = v17;
          __int16 v28 = 2050;
          double v29 = v18;
          __int16 v30 = 2050;
          double v31 = *(float *)&v19;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Sending gesture notification. Gesture cancelled due to high dynamics, %{public}.3f, %{public}.3f, %{public}.3f", buf, 0x20u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419050 != -1) {
            dispatch_once(&qword_102419050, &stru_1022F34A0);
          }
          int v20 = 134349568;
          double v21 = v17;
          __int16 v22 = 2050;
          double v23 = v18;
          __int16 v24 = 2050;
          double v25 = *(float *)&v19;
          double v13 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEarGestureNotifier::detectCancelAfterSend(const CLAccelerometer::Sample *)", "%s\n", v13);
          if (v13 != (char *)buf) {
            free(v13);
          }
        }
        if (&_ADClientAddValueForScalarKey)
        {
          +[NSString stringWithFormat:@"%@.%@.%@", @"com.apple.CoreMotion", @"EarGesture", @"CancelledDynamics"];
          ADClientAddValueForScalarKey();
        }
        kdebug_trace();
      }
    }
  }
}

uint64_t sub_100D32778@<X0>(uint64_t result@<X0>, float32x2_t *a2@<X8>)
{
  unint64_t v2 = *(void *)(result + 80);
  if ((int)v2 >= 2)
  {
    float v5 = 0.0;
    float v6 = 0.0;
    unint64_t v7 = *(void *)(result + 152);
    if (v7) {
      float v6 = *(float *)(result + 104) / (float)v7;
    }
    unint64_t v8 = *(void *)(result + 224);
    v9.f32[0] = *(float *)(result + 32) / (float)v2;
    if (v8) {
      float v5 = *(float *)(result + 176) / (float)v8;
    }
    unint64_t v10 = *(void *)(result + 72);
    uint64_t v11 = *(void *)(result + 48);
    unint64_t v12 = *(void *)(result + 144);
    uint64_t v13 = *(void *)(result + 80);
    uint64_t v14 = *(void *)(result + 120);
    float32x2_t v15 = 0;
    unint64_t v16 = *(void *)(result + 216);
    float v17 = 0.0;
    float v18 = 0.0;
    uint64_t v19 = *(void *)(result + 192);
    float32x2_t v20 = 0;
    v9.f32[1] = v6;
    do
    {
      v21.i32[0] = *(_DWORD *)(*(void *)(v11 + ((v10 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v10 & 0x3FF));
      v21.i32[1] = *(_DWORD *)(*(void *)(v14 + ((v12 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v12 & 0x3FF));
      float32x2_t v22 = vsub_f32(v21, v9);
      float result = v16 & 0x3FF;
      float v23 = *(float *)(*(void *)(v19 + ((v16 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * result) - v5;
      float32x2_t v15 = vmla_f32(v15, v22, v22);
      float v17 = v17 + (float)(v23 * v23);
      float32x2_t v20 = vadd_f32(v22, v20);
      float v18 = v23 + v18;
      ++v10;
      ++v12;
      ++v16;
      --v13;
    }
    while (v13);
    v9.f32[0] = (float)(int)v2;
    v22.f32[0] = (float)((int)v2 - 1);
    float32x2_t v3 = vdiv_f32(vsub_f32(v15, vdiv_f32(vmul_f32(v20, v20), (float32x2_t)vdup_lane_s32((int32x2_t)v9, 0))), (float32x2_t)vdup_lane_s32((int32x2_t)v22, 0));
    float v4 = (float)(v17 - (float)((float)(v18 * v18) / (float)(int)v2)) / v22.f32[0];
  }
  else
  {
    float32x2_t v3 = 0;
    float v4 = 0.0;
  }
  *a2 = (float32x2_t)off_1022AD5D0;
  a2[1] = v3;
  a2[2].f32[0] = v4;
  return result;
}

void sub_100D328C4(float32x2_t *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  float32x2_t v5 = *(float32x2_t *)(a2 + 8);
  int v6 = v4;
  sub_100B5C68C(a1 + 5, &v5);
  a1[52] = *(float32x2_t *)a2;
  sub_100D31AB8((uint64_t)a1, (double *)a2);
  sub_100D321F4((uint64_t)a1, a2);
}

void sub_100D3292C(uint64_t a1, uint64_t *a2)
{
  *(unsigned char *)(a1 + 392) = (a2[1] & 0x240) != 0;
  float v4 = *(float *)(a1 + 48);
  float v5 = *(float *)(a1 + 52);
  float v6 = *(float *)(a1 + 56);
  if (qword_102419050 != -1) {
    dispatch_once(&qword_102419050, &stru_1022F34A0);
  }
  unint64_t v7 = qword_102419058;
  if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_INFO))
  {
    int v8 = *((_DWORD *)a2 + 2);
    int v9 = *(unsigned __int8 *)(a1 + 392);
    uint64_t v10 = *a2;
    double v11 = sub_1000D3E50();
    uint64_t v12 = *(int *)(a1 + 360);
    if (v12 > 3) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = off_1022F3548[v12];
    }
    uint64_t v14 = *(void *)(a1 + 344);
    uint64_t v15 = *(void *)(a1 + 352);
    uint64_t v16 = *(void *)(a1 + 416);
    *(_DWORD *)long long buf = 67177219;
    *(_DWORD *)__int32 v44 = v8;
    *(_WORD *)&void v44[4] = 1026;
    *(_DWORD *)&v44[6] = v9;
    __int16 v45 = 2050;
    uint64_t v46 = v10;
    __int16 v47 = 2050;
    double v48 = v11;
    __int16 v49 = 2082;
    long long v50 = v13;
    __int16 v51 = 2050;
    uint64_t v52 = v14;
    __int16 v53 = 2050;
    uint64_t v54 = v15;
    __int16 v55 = 2050;
    double v56 = v4;
    __int16 v57 = 2050;
    double v58 = v5;
    __int16 v59 = 2050;
    double v60 = v6;
    __int16 v61 = 2050;
    uint64_t v62 = v16;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Prox,detectionMask,0x%{private}x,objectWithinProximity,%{public}d,timestamp,%{public}.3f,now,%{public}.3f,state,%{public}s,lastProxTrigger,%{public}.3f,lastMotionTrigger,%{public}.3f,acc,%{public}.8f,%{public}.8f,%{public}.8f,accTime,%{public}.3f", buf, 0x68u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419050 != -1) {
      dispatch_once(&qword_102419050, &stru_1022F34A0);
    }
    int v29 = *((_DWORD *)a2 + 2);
    int v30 = *(unsigned __int8 *)(a1 + 392);
    uint64_t v31 = *a2;
    double v32 = sub_1000D3E50();
    uint64_t v33 = *(int *)(a1 + 360);
    if (v33 > 3) {
      long long v34 = 0;
    }
    else {
      long long v34 = off_1022F3548[v33];
    }
    uint64_t v35 = *(void *)(a1 + 344);
    uint64_t v36 = *(void *)(a1 + 352);
    uint64_t v37 = *(void *)(a1 + 416);
    LODWORD(v66) = 67177219;
    DWORD1(v66) = v29;
    WORD4(v66) = 1026;
    *(_DWORD *)((char *)&v66 + 10) = v30;
    HIWORD(v66) = 2050;
    uint64_t v67 = v31;
    *(_WORD *)__int16 v68 = 2050;
    *(double *)&v68[2] = v32;
    *(_WORD *)&v68[10] = 2082;
    uint64_t v69 = v34;
    __int16 v70 = 2050;
    uint64_t v71 = v35;
    __int16 v72 = 2050;
    uint64_t v73 = v36;
    __int16 v74 = 2050;
    double v75 = v4;
    __int16 v76 = 2050;
    double v77 = v5;
    __int16 v78 = 2050;
    double v79 = v6;
    __int16 v80 = 2050;
    uint64_t v81 = v37;
    uint64_t v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEarGestureNotifier::onProx(const CLProximityNotifier::Sample *)", "%s\n", v38);
    if (v38 != (char *)buf) {
      free(v38);
    }
  }
  if (*(unsigned char *)(a1 + 392))
  {
    *(void *)(a1 + 344) = *a2;
    kdebug_trace();
    if (*(_DWORD *)(a1 + 360) == 1)
    {
      if (qword_102419050 != -1) {
        dispatch_once(&qword_102419050, &stru_1022F34A0);
      }
      float v17 = qword_102419058;
      if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_INFO))
      {
        double v18 = *(double *)(a1 + 344) - *(double *)(a1 + 352);
        *(_DWORD *)long long buf = 134349056;
        *(double *)__int32 v44 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Readying gesture notification. Motion triggered before prox. dt = %{public}.3f", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419050 != -1) {
          dispatch_once(&qword_102419050, &stru_1022F34A0);
        }
        double v39 = *(double *)(a1 + 344) - *(double *)(a1 + 352);
        LODWORD(v66) = 134349056;
        *(double *)((char *)&v66 + 4) = v39;
        uint64_t v40 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEarGestureNotifier::onProx(const CLProximityNotifier::Sample *)", "%s\n", v40);
        if (v40 != (char *)buf) {
          free(v40);
        }
      }
      +[NSString stringWithFormat:@"%@.%@", @"com.apple.CoreMotion", @"ProxToEarGestureDelta"];
      ADClientPushValueForDistributionKey();
      CFRunLoopTimerSetNextFireDate(*(CFRunLoopTimerRef *)(a1 + 368), 1.79769313e308);
      *(_DWORD *)(a1 + 360) = 2;
    }
  }
  else
  {
    int v19 = *(_DWORD *)(a1 + 360);
    if ((v19 - 2) >= 2 && v19)
    {
      if (v19 == 1)
      {
        if (qword_102419050 != -1) {
          dispatch_once(&qword_102419050, &stru_1022F34A0);
        }
        float32x2_t v20 = qword_102419058;
        if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Prox untriggered while waiting for prox", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419050 != -1) {
            dispatch_once(&qword_102419050, &stru_1022F34A0);
          }
          LOWORD(v66) = 0;
          __int32 v42 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEarGestureNotifier::onProx(const CLProximityNotifier::Sample *)", "%s\n", v42);
          if (v42 != (char *)buf) {
            free(v42);
          }
        }
        if (&_ADClientAddValueForScalarKey)
        {
          +[NSString stringWithFormat:@"%@.%@.%@", @"com.apple.CoreMotion", @"EarGesture", @"DetectMotionProxUntriggered"];
          ADClientAddValueForScalarKey();
        }
      }
    }
    else
    {
      if (qword_102419050 != -1) {
        dispatch_once(&qword_102419050, &stru_1022F34A0);
      }
      float32x2_t v21 = qword_102419058;
      if (os_log_type_enabled((os_log_t)qword_102419058, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Setting prox mode to PassiveMonitoring. Waiting for motion.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419050 != -1) {
          dispatch_once(&qword_102419050, &stru_1022F34A0);
        }
        LOWORD(v66) = 0;
        int v41 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEarGestureNotifier::onProx(const CLProximityNotifier::Sample *)", "%s\n", v41);
        if (v41 != (char *)buf) {
          free(v41);
        }
      }
      BKSHIDServicesRequestProximityDetectionMode();
      *(_DWORD *)(a1 + 360) = 0;
    }
  }
  if (*(unsigned char *)(a1 + 411))
  {
    *(void *)&long long v66 = off_1022E6A88;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)&v68[8] = *((_DWORD *)a2 + 2);
    uint64_t v23 = *a2;
    *((CFAbsoluteTime *)&v66 + 1) = Current;
    *(void *)__int16 v68 = v23;
    uint64_t v24 = sub_101282D9C();
    sub_10128431C(v24, (uint64_t)&v66);
    sub_10170140C(buf);
    sub_101727008((uint64_t)buf);
    v65 |= 1u;
    uint64_t v63 = *((void *)&v66 + 1);
    uint64_t v25 = v64;
    uint64_t v26 = *a2;
    *(unsigned char *)(v64 + 20) |= 1u;
    *(void *)(v25 + 8) = v26;
    uint64_t v27 = v64;
    int v28 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(v64 + 20) |= 2u;
    *(_DWORD *)(v27 + 16) = v28;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1022F34C0);
    }
    if (qword_10248AF90) {
      sub_1019E5150(qword_10248AF90, (uint64_t)buf);
    }
    sub_101706914((PB::Base *)buf);
  }
}

void sub_100D331F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100D33214(uint64_t a1)
{
}

void sub_100D3321C(uint64_t a1)
{
}

void sub_100D33224(id a1)
{
  qword_102419058 = (uint64_t)os_log_create("com.apple.locationd.Motion", "EarGesture");
}

uint64_t sub_100D33258(int a1, uint32_t __upper_bound)
{
  return arc4random_uniform(__upper_bound);
}

uint64_t sub_100D33264(uint64_t a1, unsigned __int8 *a2, int a3)
{
  *(void *)(a1 + 12) = 0;
  *(void *)(a1 + 4) = 0;
  int v4 = *a2;
  int v5 = a2[12];
  unsigned int v7 = *((_DWORD *)a2 + 1);
  int v6 = *((_DWORD *)a2 + 2);
  int v8 = *((_DWORD *)a2 + 4);
  *(_DWORD *)a1 = v8;
  if (a2[13]) {
    int v9 = 1;
  }
  else {
    int v9 = 2;
  }
  *(_DWORD *)(a1 + 16) = v9;
  if (v4)
  {
    if (v7 <= 5)
    {
      int v10 = 1 << v7;
      if ((v10 & 0x1A) != 0)
      {
        if (v6 == 1) {
          int v11 = 3;
        }
        else {
          int v11 = 2;
        }
        if (v5) {
          int v12 = 2;
        }
        else {
          int v12 = 1;
        }
        *(_DWORD *)(a1 + 4) = v11;
        *(_DWORD *)(a1 + 8) = v12;
        *(_DWORD *)(a1 + 12) = 1;
        if (v8 == 255)
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_1022F35C0);
          }
          uint64_t v13 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "#EmergCon,CLEmergencyState,SimInstance is KSimNone", buf, 2u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_1022F35C0);
            }
            LOWORD(__p.__r_.__value_.__l.__data_) = 0;
            uint64_t v14 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "CLEmergencyState::CLEmergencyState(CLCTEmergencyMode, BOOL)", "%s\n", v14);
            if (v14 != (char *)buf) {
              free(v14);
            }
          }
        }
      }
      else if ((v10 & 0x24) != 0)
      {
        *(_DWORD *)(a1 + 12) = 2;
        if (v6 == 1) {
          int v15 = 3;
        }
        else {
          int v15 = 2;
        }
        *(_DWORD *)(a1 + 4) = v15;
        if (v5) {
          *(_DWORD *)(a1 + 8) = 2;
        }
        else {
          *(_DWORD *)(a1 + 8) = 1;
        }
      }
      else
      {
        int v16 = a2[14];
        *(_DWORD *)a1 = 255;
        if (v16)
        {
          *(void *)(a1 + 4) = 0x200000002;
          int v17 = 3;
        }
        else
        {
          *(void *)(a1 + 4) = 0x100000001;
          int v17 = 1;
        }
        *(_DWORD *)(a1 + 12) = v17;
      }
    }
  }
  else
  {
    *(_DWORD *)a1 = 255;
    if (a3)
    {
      *(_DWORD *)(a1 + 4) = 4;
      *(_DWORD *)(a1 + 12) = 0;
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
    }
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022F35C0);
  }
  double v18 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_100D335B8((_DWORD *)a1, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long buf = 68289282;
    int v23 = 0;
    __int16 v24 = 2082;
    uint64_t v25 = "";
    __int16 v26 = 2082;
    uint64_t v27 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmergCon CLEmergencyState Creation \", \"state\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return a1;
}

void sub_100D335B8(_DWORD *a1@<X0>, std::string *a2@<X8>)
{
  if (*a1)
  {
    if (*a1 == 255) {
      int v4 = "kSimNone";
    }
    else {
      int v4 = "kSim2";
    }
  }
  else
  {
    int v4 = "kSim1";
  }
  sub_100134750(&v38, v4);
  int v5 = std::string::insert(&v38, 0, "Sim_#");
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  unsigned int v7 = std::string::append(&v39, "_Status_#");
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  sub_100D33D18((uint64_t)a1, v36);
  if ((v37 & 0x80u) == 0) {
    int v9 = v36;
  }
  else {
    int v9 = (void **)v36[0];
  }
  if ((v37 & 0x80u) == 0) {
    std::string::size_type v10 = v37;
  }
  else {
    std::string::size_type v10 = (std::string::size_type)v36[1];
  }
  int v11 = std::string::append(&v40, (const std::string::value_type *)v9, v10);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  uint64_t v13 = std::string::append(&v41, "_Medium_#");
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  sub_100134750(v34, off_1022F3608[a1[2]]);
  if ((v35 & 0x80u) == 0) {
    int v15 = v34;
  }
  else {
    int v15 = (void **)v34[0];
  }
  if ((v35 & 0x80u) == 0) {
    std::string::size_type v16 = v35;
  }
  else {
    std::string::size_type v16 = (std::string::size_type)v34[1];
  }
  int v17 = std::string::append(&v42, (const std::string::value_type *)v15, v16);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  int v19 = std::string::append(&v43, "_Transport_#");
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  sub_100D33D30((uint64_t)a1, v32);
  if ((v33 & 0x80u) == 0) {
    float32x2_t v21 = v32;
  }
  else {
    float32x2_t v21 = (void **)v32[0];
  }
  if ((v33 & 0x80u) == 0) {
    std::string::size_type v22 = v33;
  }
  else {
    std::string::size_type v22 = (std::string::size_type)v32[1];
  }
  int v23 = std::string::append(&v44, (const std::string::value_type *)v21, v22);
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  uint64_t v25 = std::string::append(&v45, "_CallType_#");
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  sub_100134750(__p, off_1022F3640[a1[4]]);
  if ((v31 & 0x80u) == 0) {
    uint64_t v27 = __p;
  }
  else {
    uint64_t v27 = (void **)__p[0];
  }
  if ((v31 & 0x80u) == 0) {
    std::string::size_type v28 = v31;
  }
  else {
    std::string::size_type v28 = (std::string::size_type)__p[1];
  }
  int v29 = std::string::append(&v46, (const std::string::value_type *)v27, v28);
  *a2 = *v29;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if ((char)v31 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if ((char)v33 < 0) {
    operator delete(v32[0]);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if ((char)v35 < 0) {
    operator delete(v34[0]);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if ((char)v37 < 0) {
    operator delete(v36[0]);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
}

void sub_100D33904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v59 - 57) < 0) {
    operator delete(*(void **)(v59 - 80));
  }
  if (*(char *)(v59 - 89) < 0) {
    operator delete(*(void **)(v59 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v59 - 121) < 0) {
    operator delete(*(void **)(v59 - 144));
  }
  if (*(char *)(v59 - 153) < 0) {
    operator delete(*(void **)(v59 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v59 - 185) < 0) {
    operator delete(*(void **)(v59 - 208));
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D33A20()
{
}

void sub_100D33A28()
{
}

void sub_100D33A30()
{
}

void sub_100D33A38()
{
}

BOOL sub_100D33A44(uint64_t a1)
{
  return *(_DWORD *)(a1 + 12) == 1;
}

BOOL sub_100D33A54(uint64_t a1)
{
  return *(_DWORD *)(a1 + 12) == 1 && *(_DWORD *)(a1 + 16) == 1;
}

BOOL sub_100D33A78(uint64_t a1)
{
  return *(_DWORD *)(a1 + 12) == 1 && *(_DWORD *)(a1 + 4) != 1;
}

BOOL sub_100D33A9C(_DWORD *a1, int a2)
{
  if (a2 == 255)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022F35C0);
    }
    int v4 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#EmergCon,isCellularEmergencyForSim,SimInstance is KSimNone", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022F35C0);
      }
      long long v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEmergencyState::isCellularEmergencyForSim(SimInstance) const", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  if (a1[1] == 1) {
    return 1;
  }
  if (*a1 == a2) {
    return a1[3] == 1;
  }
  return 0;
}

BOOL sub_100D33C70(uint64_t a1)
{
  return *(_DWORD *)(a1 + 12) == 1 && *(_DWORD *)(a1 + 8) == 1;
}

BOOL sub_100D33C94(uint64_t a1)
{
  return *(_DWORD *)(a1 + 12) == 2;
}

BOOL sub_100D33CA4(uint64_t a1)
{
  return *(_DWORD *)(a1 + 12) == 3;
}

BOOL sub_100D33CB4(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) == 1;
}

BOOL sub_100D33CC4(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) == 2;
}

BOOL sub_100D33CD4(uint64_t a1)
{
  return *(_DWORD *)(a1 + 4) != 0;
}

BOOL sub_100D33CE4(uint64_t a1)
{
  return *(_DWORD *)(a1 + 4) == 2;
}

BOOL sub_100D33CF4(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 4) & 0xFFFFFFFE) == 2;
}

BOOL sub_100D33D08(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 4) & 0xFFFFFFFB) == 0;
}

void *sub_100D33D18@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_100134750(a2, off_1022F35E0[*(int *)(a1 + 4)]);
}

void *sub_100D33D30@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_100134750(a2, off_1022F3620[*(int *)(a1 + 12)]);
}

void sub_100D33D48(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

int *sub_100D33D78(int *result, uint64_t a2)
{
  int v2 = *result;
  *(_WORD *)(a2 + 4) = *((_WORD *)result + 2);
  *(_DWORD *)a2 = v2;
  unsigned int v3 = *(_DWORD *)(a2 + 6) & 0xFFFFFF00 | *((unsigned __int8 *)result + 6);
  *(_DWORD *)(a2 + 6) = v3;
  unsigned int v4 = v3 & 0xFFFFF0FF | (((*(unsigned int *)((char *)result + 6) >> 8) & 0xF) << 8);
  *(_DWORD *)(a2 + 6) = v4;
  unsigned int v5 = v4 & 0xFFF00FFF | ((*(unsigned int *)((char *)result + 6) >> 12) << 12);
  *(_DWORD *)(a2 + 6) = v5;
  unsigned int v6 = v5 & 0xFF0FFFFF | (((*(unsigned int *)((char *)result + 6) >> 20) & 0xF) << 20);
  *(_DWORD *)(a2 + 6) = v6;
  unsigned int v7 = v6 & 0xF0FFFFFF | ((HIBYTE(*(unsigned int *)((char *)result + 6)) & 0xF) << 24);
  *(_DWORD *)(a2 + 6) = v7;
  *(_DWORD *)(a2 + 6) = *(int *)((char *)result + 6) & 0xF0000000 | v7 & 0xFFFFFFF;
  return result;
}

uint64_t sub_100D33DEC(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 10) >> 5) & 1;
}

int8x8_t sub_100D33DFC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a2 = *(_OWORD *)a1;
  long long v4 = *(_OWORD *)(a1 + 16);
  long long v5 = *(_OWORD *)(a1 + 32);
  long long v6 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  long long v7 = *(_OWORD *)(a1 + 80);
  long long v8 = *(_OWORD *)(a1 + 96);
  long long v9 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 128) = v9;
  *(_OWORD *)(a2 + 80) = v7;
  *(_OWORD *)(a2 + 96) = v8;
  long long v10 = *(_OWORD *)(a1 + 144);
  long long v11 = *(_OWORD *)(a1 + 160);
  long long v12 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a2 + 188) = *(_OWORD *)(a1 + 188);
  *(_OWORD *)(a2 + 160) = v11;
  *(_OWORD *)(a2 + 176) = v12;
  *(_OWORD *)(a2 + 144) = v10;
  sub_10125BA3C((unsigned __int16 *)a1, a2);
  *(int8x16_t *)(a2 + 12) = vrev32q_s8(*(int8x16_t *)(a1 + 12));
  *(int8x16_t *)(a2 + 28) = vrev32q_s8(*(int8x16_t *)(a1 + 28));
  int8x8_t result = vrev32_s8(*(int8x8_t *)(a1 + 44));
  *(int8x8_t *)(a2 + 44) = result;
  *(_DWORD *)(a2 + 52) = bswap32(*(_DWORD *)(a1 + 52));
  unint64_t v14 = bswap64(*(void *)(a1 + 56));
  *(_DWORD *)(a2 + 192) = bswap32(*(_DWORD *)(a1 + 192));
  *(void *)(a2 + 56) = v14;
  return result;
}

int8x8_t sub_100D33EB0(uint64_t a1, uint64_t a2)
{
  sub_10125BA3C((unsigned __int16 *)a1, a2);
  int8x8_t result = vrev32_s8(*(int8x8_t *)(a1 + 12));
  *(int8x8_t *)(a2 + 12) = result;
  return result;
}

int *sub_100D33EE8(int *result, uint64_t a2)
{
  int v2 = *result;
  *(_WORD *)(a2 + 4) = *((_WORD *)result + 2);
  *(_DWORD *)a2 = v2;
  *(_DWORD *)(a2 + 6) = bswap32(*(int *)((char *)result + 6));
  return result;
}

int *sub_100D33F08(int *result, uint64_t a2)
{
  return sub_100D33D78(result, a2);
}

void *sub_100D33F10(void *a1, int a2)
{
  sub_100134750(__p, "");
  sub_100D33FF0((uint64_t)a1, "CardioChangeHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_1022F3668;
  a1[9] = off_1022F3718;
  sub_100D34880((uint64_t)a1);
  return a1;
}

void sub_100D33FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_100D344AC(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_100D33FF0(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  long long v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 8));
  *long long v12 = off_1022ADB08;
  *(void *)a1 = off_1022F38A8;
  *(void *)(a1 + 72) = off_1022F3950;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_1022F38A8;
  *(void *)(a1 + 72) = off_1022F3950;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_DWORD *)(a1 + 240) = -1;
  *(void *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = 12000;
  *(void *)(a1 + 264) = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 272));
  *(void *)(a1 + 272) = off_1022ADB08;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_100D34410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  *uint64_t v27 = v30;
  sub_1003BE1F8(v31);
  sub_1002CDF4C(v29);
  sub_1011F8AE0(v28);
  *uint64_t v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_100D344A4()
{
}

void *sub_100D344AC(void *a1)
{
  *a1 = off_1022F38A8;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_1022F3950;
  a1[33] = off_1022ADAD8;
  sub_1003BE1F8(a1 + 34);
  sub_1002CDF4C(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022ADAD8;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void *sub_100D34570(uint64_t a1)
{
  return sub_100D344AC((void *)(a1 - 72));
}

void sub_100D34578(void *a1)
{
  sub_100D344AC(a1);

  operator delete();
}

void sub_100D345B0(uint64_t a1)
{
  sub_100D344AC((void *)(a1 - 72));

  operator delete();
}

uint64_t sub_100D345EC(uint64_t a1, uint64_t a2)
{
  if (*(double *)(*(void *)(a2 + 8) - 16) == 1.79769313e308 && sub_100082064(a1 + 72))
  {
    sub_10002B640(*(void *)(a1 + 80));
    CFAbsoluteTimeGetCurrent();
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM CardioChangeHistory WHERE startTime < ?");
  }
  return -1;
}

void sub_100D34738(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D34750(uint64_t a1, uint64_t a2)
{
  return sub_100D345EC(a1 - 72, a2);
}

uint64_t sub_100D34758(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT COUNT(*) FROM CardioChangeHistory");
  }
  return 0xFFFFFFFFLL;
}

void sub_100D34814(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D34850(uint64_t a1)
{
  return sub_100D34758(a1 - 72);
}

uint64_t sub_100D34858(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 120))(a1, a2, 0);
}

uint64_t sub_100D34880(uint64_t a1)
{
  uint64_t result = sub_10014C3C0(*(void *)(a1 + 80));
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 80);
    return sub_1005F7B0C(v3, "CardioChangeHistory", (const char **)&off_1022F37A8, (const std::string::value_type **)&off_102474288, 0);
  }
  return result;
}

uint64_t sub_100D348E8(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"INSERT INTO CardioChangeHistory (startTime, status, riskScore) VALUES (?, ?, ?)");
  }
  return result;
}

void sub_100D349CC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

void sub_100D349E4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  long long v5 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(void *)a3 = sqlite3_column_int(v5, 0);
  char v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(double *)(a3 + 8) = sqlite3_column_double(v6, 1);
  long long v7 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(_DWORD *)(a3 + 16) = sqlite3_column_int(v7, 2);
  long long v8 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *(double *)(a3 + 24) = sqlite3_column_double(v8, 3);
}

uint64_t sub_100D34A5C(void *a1, void *a2)
{
  long long v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101A8ADBC(v4);
    sub_1001D7FD4();
  }
  long long v12 = v15[1];
  operator delete(v15[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    a2[1] = *a2;
    sub_10010F274((uint64_t)v15);
    char v6 = sub_100132EFC(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((SBYTE7(v14) & 0x80u) == 0) {
      long long v7 = __p;
    }
    else {
      long long v7 = (void **)__p[0];
    }
    if ((SBYTE7(v14) & 0x80u) == 0) {
      uint64_t v8 = BYTE7(v14);
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    long long v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if (SBYTE7(v14) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((SBYTE7(v14) & 0x80u) == 0) {
      long long v11 = __p;
    }
    else {
      long long v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_100D34E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  sub_101A129A8((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100D34EB0(void *a1)
{
  uint64_t v3 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17[0]) < 0)
  {
    uint64_t v10 = v16[1];
    operator delete(v16[0]);
    if (v10)
    {
LABEL_3:
      if (sub_100082064(a1 + 9))
      {
        sub_10010F274((uint64_t)v16);
        long long v4 = sub_100132EFC(v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
        if ((SBYTE7(v14) & 0x80u) == 0) {
          long long v5 = __p;
        }
        else {
          long long v5 = (void **)__p[0];
        }
        if ((SBYTE7(v14) & 0x80u) == 0) {
          uint64_t v6 = BYTE7(v14);
        }
        else {
          uint64_t v6 = (uint64_t)__p[1];
        }
        long long v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
        sub_100132EFC(v7, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if (SBYTE7(v14) < 0) {
          operator delete(__p[0]);
        }
        uint64_t v8 = a1[10];
        std::stringbuf::str();
        if ((SBYTE7(v14) & 0x80u) == 0) {
          long long v9 = __p;
        }
        else {
          long long v9 = (void **)__p[0];
        }
        sub_10014D518(v8, (uint64_t)v9);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17[0]))
  {
    goto LABEL_3;
  }
  sub_101A8AF2C(v3);
  uint64_t v15 = 0;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  *(void **)((char *)v16
  v17[0] = v11;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return 2;
}

void sub_100D352C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100D35348(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_100D36D08(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022F3990);
  }
  long long v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)long long buf = 68289282;
    *(_DWORD *)uint64_t v13 = 0;
    *(_WORD *)&void v13[4] = 2082;
    *(void *)&v13[6] = "";
    __int16 v14 = 2082;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022F3990);
    }
    long long v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)long long buf = 134349056;
      *(void *)uint64_t v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022F3990);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLCardioChange::EstimateResult, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = CLCardioChange::EstimateResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_100D35A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_100D35AD0(uint64_t a1, uint64_t a2, char a3)
{
  v32[0] = (id)os_transaction_create();
  v32[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, a1 + 224, a2);
    return sub_1000E1098(v32);
  }
  if ((a3 & 1) == 0) {
    sub_10002B640(*(void *)(a1 + 80));
  }
  uint64_t v28 = 0;
  double v29 = 0.0;
  int v30 = -1;
  uint64_t v31 = 0;
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 104))(a1, &v28);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022F3990);
      }
      __int16 v14 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022F3990);
        }
        LOWORD(v33) = 0;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLCardioChange::EstimateResult, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLCardioChange::EstimateResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      goto LABEL_43;
    }
    double v7 = *(double *)(a2 + 8);
    double v8 = v29;
    double v9 = v7 - v29;
    if (v7 - v29 < 0.0) {
      double v9 = -(v7 - v29);
    }
    if (v9 > 604800.0)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022F3990);
      }
      uint64_t v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a2 + 8);
        *(_DWORD *)long long buf = 134349312;
        double v38 = v29;
        __int16 v39 = 2050;
        uint64_t v40 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022F3990);
        }
        uint64_t v22 = *(void *)(a2 + 8);
        int v33 = 134349312;
        double v34 = v29;
        __int16 v35 = 2050;
        uint64_t v36 = v22;
        int v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLCardioChange::EstimateResult, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLCardioChange::EstimateResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
      }
      CLWriteStackshot();
      double v7 = *(double *)(a2 + 8);
      double v8 = v29;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022F3990);
        }
        long long v12 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          double v13 = *(double *)(a2 + 8);
          *(_DWORD *)long long buf = 134217984;
          double v38 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022F3990);
          }
          double v24 = *(double *)(a2 + 8);
          int v33 = 134217984;
          double v34 = v24;
          uint64_t v25 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLCardioChange::EstimateResult, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLCardioChange::EstimateResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v25);
          if (v25 != (char *)buf) {
            free(v25);
          }
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      double v16 = v7 - v8;
      double v17 = *(float *)(a1 + 136);
      if (qword_102418FD0 != -1)
      {
        double v27 = *(float *)(a1 + 136);
        dispatch_once(&qword_102418FD0, &stru_1022F3990);
        double v17 = v27;
      }
      double v18 = v16 - v17;
      uint64_t v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 134217984;
        double v38 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022F3990);
        }
        int v33 = 134217984;
        double v34 = v18;
        long long v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLCardioChange::EstimateResult, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLCardioChange::EstimateResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v26);
        if (v26 != (char *)buf) {
          free(v26);
        }
      }
      (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v18);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 144))(a1, &v28, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  long long v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v20;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_100028FB4(*(void *)(a1 + 80));
  }
  return sub_1000E1098(v32);
}

void sub_100D362E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D3630C(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101A8B09C(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  long long v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    int v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_100D36680(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A8B20C(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    uint64_t v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      long long v5 = __p;
    }
    else {
      long long v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    double v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      double v9 = __p;
    }
    else {
      double v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_100D369AC(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A8B37C(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    uint64_t v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

uint64_t sub_100D36CD0(uint64_t a1)
{
  return sub_100D35348(a1 - 72);
}

void sub_100D36CD8(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100D36D08(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_100D36D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D36DA4(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_100D36DD4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

void sub_100D36E64(void *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022F39E0;
  a1[3] = a2;
  sub_100D374DC(a1 + 4, a3);
}

void sub_100D36EB8(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = &off_1022F3A30;
  uint64_t v3 = (std::__shared_weak_count *)v1[2];
  if (v3) {
    sub_1000DB0A0(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100D36EF0(uint64_t a1, void *a2)
{
  id v4 = [a2 length];
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022F3A48);
  }
  uint64_t v5 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    id v6 = sub_10047D13C(*(void *)(a1 + 32));
    *(_DWORD *)long long buf = 134218240;
    *(void *)uint64_t v16 = v6;
    *(_WORD *)&v16[8] = 2048;
    *(void *)&v16[10] = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "currentSize is %llu, log msg size is %lu", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F3A48);
    }
    sub_10047D13C(*(void *)(a1 + 32));
    unsigned __int8 v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLActivityLoggerSizePolicy::shouldILog(NSData *)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  if ((unint64_t)v4 < 0x10000)
  {
    id v9 = sub_10047D13C(*(void *)(a1 + 32));
    if ((unint64_t)[a2 length] + (void)v9 + 2 <= *(void *)(a1 + 24)) {
      return 1;
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F3A48);
    }
    uint64_t v10 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = *(void *)(a1 + 24);
      id v12 = [a2 length];
      *(_DWORD *)long long buf = 134218240;
      *(void *)uint64_t v16 = v11;
      *(_WORD *)&v16[8] = 2048;
      *(void *)&v16[10] = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Log size exceeded %llu, skip log of %lu bytes", buf, 0x16u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022F3A48);
      }
      [a2 length];
      goto LABEL_23;
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F3A48);
    }
    int v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)uint64_t v16 = 0xFFFF;
      *(_WORD *)&v16[4] = 2048;
      *(void *)&v16[6] = v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Log msg size exceeds limit %d, skip loging %lu bytes", buf, 0x12u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022F3A48);
      }
LABEL_23:
      unsigned __int8 v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLActivityLoggerSizePolicy::shouldILog(NSData *)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
      return 0;
    }
  }
  return result;
}

void *sub_100D373A4(void *a1)
{
  *a1 = off_1022F39E0;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  *a1 = &off_1022F3A30;
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    sub_1000DB0A0(v3);
  }
  return a1;
}

void sub_100D37418(void *a1)
{
  *a1 = off_1022F39E0;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  *a1 = &off_1022F3A30;
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    sub_1000DB0A0(v3);
  }

  operator delete();
}

void sub_100D374AC(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100D374DC(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100D37550(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100D375F4((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_100D37568(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    sub_10047D700(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100D375B0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100D375F4(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10047D700(result);
    operator delete();
  }
  return result;
}

void sub_100D37644(void *a1@<X8>)
{
  uint64_t v2 = operator new(0xF0uLL);
  v2[12] = xmmword_101D8C770;
  v2[13] = unk_101D8C780;
  v2[14] = xmmword_101D8C790;
  v2[8] = xmmword_101D8C730;
  v2[9] = unk_101D8C740;
  v2[10] = xmmword_101D8C750;
  v2[11] = unk_101D8C760;
  v2[4] = xmmword_101D8C6F0;
  v2[5] = unk_101D8C700;
  v2[6] = xmmword_101D8C710;
  v2[7] = unk_101D8C720;
  *uint64_t v2 = xmmword_101D8C6B0;
  v2[1] = unk_101D8C6C0;
  v2[2] = xmmword_101D8C6D0;
  v2[3] = unk_101D8C6E0;
  v8[0] = v2;
  v8[1] = v2 + 15;
  _DWORD v8[2] = v2 + 15;
  uint64_t v3 = operator new(0xF0uLL);
  v3[12] = xmmword_101D8C860;
  v3[13] = unk_101D8C870;
  v3[14] = xmmword_101D8C880;
  void v3[8] = xmmword_101D8C820;
  v3[9] = unk_101D8C830;
  v3[10] = xmmword_101D8C840;
  v3[11] = unk_101D8C850;
  v3[4] = xmmword_101D8C7E0;
  v3[5] = unk_101D8C7F0;
  v3[6] = xmmword_101D8C800;
  v3[7] = unk_101D8C810;
  *uint64_t v3 = xmmword_101D8C7A0;
  v3[1] = unk_101D8C7B0;
  _DWORD v3[2] = xmmword_101D8C7C0;
  void v3[3] = unk_101D8C7D0;
  v8[3] = v3;
  uint64_t v8[4] = v3 + 15;
  v8[5] = v3 + 15;
  id v4 = operator new(0xF0uLL);
  _OWORD v8[8] = v4 + 15;
  v4[12] = xmmword_101D8C950;
  v4[13] = unk_101D8C960;
  v4[14] = xmmword_101D8C970;
  void v4[8] = xmmword_101D8C910;
  v4[9] = unk_101D8C920;
  v4[10] = xmmword_101D8C930;
  v4[11] = unk_101D8C940;
  unsigned char v4[4] = xmmword_101D8C8D0;
  v4[5] = unk_101D8C8E0;
  v4[6] = xmmword_101D8C8F0;
  v4[7] = unk_101D8C900;
  *id v4 = xmmword_101D8C890;
  v4[1] = unk_101D8C8A0;
  v4[2] = xmmword_101D8C8B0;
  v4[3] = unk_101D8C8C0;
  v8[6] = v4;
  v8[7] = v4 + 15;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  uint64_t v5 = operator new(0x48uLL);
  *a1 = v5;
  a1[1] = v5;
  a1[2] = v5 + 9;
  uint64_t v6 = 0;
  a1[1] = sub_100D37ED4((uint64_t)(a1 + 2), (uint64_t)v8, (uint64_t)&v9, v5);
  do
  {
    int v7 = (void *)v8[v6 + 6];
    if (v7)
    {
      v8[v6 + 7] = v7;
      operator delete(v7);
    }
    v6 -= 3;
  }
  while (v6 != -9);
}

void sub_100D37830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  uint64_t v13 = v12;
  *(void *)(v11 + 8) = v13;
  sub_1001DCABC(&a9);
  uint64_t v15 = 0;
  while (1)
  {
    uint64_t v16 = *(void **)(&a11 + v15 + 48);
    if (v16)
    {
      *(void *)(&a11 + v15 + 56) = v16;
      operator delete(v16);
    }
    v15 -= 24;
    if (v15 == -72) {
      _Unwind_Resume(a1);
    }
  }
}

void *sub_100D378AC(void *a1)
{
  return a1;
}

uint64_t sub_100D378D8(unsigned int a1)
{
  if (a1 - 20 >= 0xB5)
  {
    if (qword_102419170 != -1) {
      dispatch_once(&qword_102419170, &stru_1022F3B00);
    }
    uint64_t v6 = qword_102419178;
    if (os_log_type_enabled((os_log_t)qword_102419178, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67174657;
      unsigned int v9 = a1;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Invalid parameter in getIndexFromAge: %{private}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419170 != -1) {
        dispatch_once(&qword_102419170, &stru_1022F3B00);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static int CLVO2MaxClassifier::getIndexFromAge(int)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    return 0xFFFFFFFFLL;
  }
  else
  {
    if (a1 < 0x3C) {
      int v2 = 3;
    }
    else {
      int v2 = 4;
    }
    if (a1 >= 0x32) {
      int v3 = v2;
    }
    else {
      int v3 = 2;
    }
    if (a1 >= 0x28) {
      unsigned int v4 = v3;
    }
    else {
      unsigned int v4 = 1;
    }
    if (a1 >= 0x1E) {
      return v4;
    }
    else {
      return 0;
    }
  }
}

BOOL sub_100D37AC4(int a1)
{
  return (a1 - 20) < 0xB5;
}

double sub_100D37AD4(void *a1, unsigned int a2, unsigned int a3)
{
  if (a2 >= 4)
  {
    sub_100D378D8(a3);
  }
  else
  {
    uint64_t v4 = qword_101D8C980[a2];
    unsigned int v5 = sub_100D378D8(a3);
    if (v5 != -1) {
      return *(double *)(*(void *)(*a1 + 24 * v4) + 48 * v5 + 8);
    }
  }
  if (qword_102419170 != -1) {
    dispatch_once(&qword_102419170, &stru_1022F3B00);
  }
  int v7 = qword_102419178;
  if (os_log_type_enabled((os_log_t)qword_102419178, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Invalid parameter, cannot calculate an alert threshold", buf, 2u);
  }
  double v6 = 0.0;
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419170 != -1) {
      dispatch_once(&qword_102419170, &stru_1022F3B00);
    }
    unsigned int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "double CLVO2MaxClassifier::alertThresholdForSexAndAge(CLHKBiologicalSex, int) const", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  return v6;
}

double sub_100D37CBC(void *a1, unsigned int a2, unsigned int a3)
{
  if (a2 >= 4)
  {
    sub_100D378D8(a3);
  }
  else
  {
    uint64_t v4 = qword_101D8C980[a2];
    unsigned int v5 = sub_100D378D8(a3);
    if (v5 != -1) {
      return *(double *)(*(void *)(*a1 + 24 * v4) + 48 * v5 + 16);
    }
  }
  if (qword_102419170 != -1) {
    dispatch_once(&qword_102419170, &stru_1022F3B00);
  }
  int v7 = qword_102419178;
  if (os_log_type_enabled((os_log_t)qword_102419178, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Invalid parameter, cannot calculate an alert threshold", buf, 2u);
  }
  double v6 = 0.0;
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419170 != -1) {
      dispatch_once(&qword_102419170, &stru_1022F3B00);
    }
    unsigned int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "double CLVO2MaxClassifier::lowClassificationThresholdForSexAndAge(CLHKBiologicalSex, int) const", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  return v6;
}

void sub_100D37EA4(id a1)
{
  qword_102419178 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Health");
}

void *sub_100D37ED4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  _DWORD v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      sub_100D37F94(v4, *(const void **)v6, *(void *)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 4));
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_100D38010((uint64_t)v8);
  return v4;
}

void sub_100D37F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_100D37F94(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_100018218(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100D37FF4(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D38010(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1001DCE1C(a1);
  }
  return a1;
}

BOOL sub_100D38048(void *a1, void *a2)
{
  id v4 = [a1 mac];
  if (!a2)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B20);
    }
    uint64_t v16 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136380675;
      id v32 = [v4 UTF8String];
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, updating local store as there is no existing record for associated AP %{private}s", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B20);
    }
    int v29 = 136380675;
    id v30 = [v4 UTF8String];
    goto LABEL_47;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022F3B20);
  }
  unsigned int v5 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136380675;
    id v32 = [[objc_msgSend(a2, "description") UTF8String];
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, existing local store record: %{private}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B20);
    }
    int v29 = 136380675;
    id v30 = [[objc_msgSend(a2, "description") UTF8String];
    double v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiAssociatedApCentroidStoreUpdateManager::shouldUpdateSyncedDataStore(CLWifiAssociatedApCentroidDO *, CLWifiAssociatedApCentroidDO *)", "%s\n", v27);
    if (v27 != (char *)buf) {
      free(v27);
    }
  }
  [a1 latitude:sub_101171D90((uint64_t)&v29)];
  double v7 = v6;
  [a1 longitude];
  double v9 = v8;
  [a2 latitude];
  double v11 = v10;
  [a2 longitude];
  double v13 = sub_1000F1648((double *)&v29, v7, v9, v11, v12, 0.0);
  if (v13 > *((double *)sub_10141300C() + 10))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B20);
    }
    unsigned __int8 v14 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      id v15 = [v4 UTF8String];
      *(_DWORD *)long long buf = 136380931;
      id v32 = v15;
      __int16 v33 = 2048;
      double v34 = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, updating local store as associated AP %{private}s has moved more than %.1fm", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 == -1) {
      goto LABEL_46;
    }
LABEL_49:
    dispatch_once(&qword_1024193A0, &stru_1022F3B20);
LABEL_46:
    [v4 UTF8String];
LABEL_47:
    uint64_t v28 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiAssociatedApCentroidStoreUpdateManager::shouldUpdateSyncedDataStore(CLWifiAssociatedApCentroidDO *, CLWifiAssociatedApCentroidDO *)", "%s\n", v28);
    if (v28 != (char *)buf) {
      free(v28);
    }
    return 1;
  }
  [a1 lastUpdated];
  double v18 = v17;
  [a2 lastUpdated];
  double v20 = vabdd_f64(v18, v19);
  if (v20 > *((double *)sub_1014122A8() + 13))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B20);
    }
    float32x2_t v21 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      id v22 = [v4 UTF8String];
      *(_DWORD *)long long buf = 136380931;
      id v32 = v22;
      __int16 v33 = 2048;
      double v34 = v20;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, updating local store as associated AP %{private}s has not been updated more than %.1fs", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 == -1) {
      goto LABEL_46;
    }
    goto LABEL_49;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022F3B20);
  }
  double v24 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    id v25 = [v4 UTF8String];
    *(_DWORD *)long long buf = 136381187;
    id v32 = v25;
    __int16 v33 = 2048;
    double v34 = v13;
    __int16 v35 = 2048;
    double v36 = v20;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "WifiAssociatedApCentroidStore, skip updating local store for associated AP %{private}s, distance %.1fm, last updated %.1fs ago", buf, 0x20u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B20);
    }
    [v4 UTF8String];
    long long v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiAssociatedApCentroidStoreUpdateManager::shouldUpdateSyncedDataStore(CLWifiAssociatedApCentroidDO *, CLWifiAssociatedApCentroidDO *)", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
    return 0;
  }
  return result;
}

void sub_100D387AC(void *a1)
{
  if ((sub_100B393B0() & 1) == 0)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B20);
    }
    unsigned __int8 v14 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, skip updating local store as it is disabled by settings", (uint8_t *)&buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_1024193A0 == -1)
    {
LABEL_49:
      *(_WORD *)double v18 = 0;
      double v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLWifiAssociatedApCentroidStoreUpdateManager::updateSyncedDataStoreIfNecessary(CLWifiAssociatedApCentroidDO *)", "%s\n", v13);
      if (v13 == (char *)&buf) {
        return;
      }
      goto LABEL_50;
    }
LABEL_59:
    dispatch_once(&qword_1024193A0, &stru_1022F3B20);
    goto LABEL_49;
  }
  sub_10144DA50(&buf);
  int v2 = (void *)sub_101454F5C(buf);
  if (*((void *)&buf + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf + 1));
  }
  if (v2 && ([v2 isValid] & 1) != 0)
  {
    id v3 = [a1 mac];
    id v4 = [v2 fetchRecord:v3];
    BOOL v5 = sub_100D38048(a1, v4);

    if (!v5) {
      return;
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B20);
    }
    double v6 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = [v3 UTF8String];
      LODWORD(buf) = 136380675;
      *(void *)((char *)&buf + 4) = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, deleting records for associated AP %{private}s", (uint8_t *)&buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F3B20);
      }
      *(_DWORD *)double v18 = 136380675;
      *(void *)&v18[4] = [v3 UTF8String];
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLWifiAssociatedApCentroidStoreUpdateManager::updateSyncedDataStoreIfNecessary(CLWifiAssociatedApCentroidDO *)", "%s\n", v16);
      if (v16 != (char *)&buf) {
        free(v16);
      }
    }
    [v2 deleteRecordByMacString:v3];
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B20);
    }
    double v8 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = [[objc_msgSend(a1, "description") UTF8String];
      LODWORD(buf) = 136380675;
      *(void *)((char *)&buf + 4) = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, adding record: %{private}s", (uint8_t *)&buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F3B20);
      }
      *(_DWORD *)double v18 = 136380675;
      *(void *)&v18[4] = [objc_msgSend(a1, "description") UTF8String];
      double v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLWifiAssociatedApCentroidStoreUpdateManager::updateSyncedDataStoreIfNecessary(CLWifiAssociatedApCentroidDO *)", "%s\n", v17);
      if (v17 != (char *)&buf) {
        free(v17);
      }
    }
    [v2 addRecord:a1];
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B20);
    }
    double v10 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      [v2 getBasicInfo];
      double v11 = v23 >= 0 ? &buf : (long long *)buf;
      *(_DWORD *)double v18 = 136380675;
      *(void *)&v18[4] = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, %{private}s", v18, 0xCu);
      if (v23 < 0) {
        operator delete((void *)buf);
      }
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B20);
    }
    [v2 getBasicInfo];
    double v12 = v19 >= 0 ? v18 : *(unsigned char **)v18;
    int v20 = 136380675;
    float32x2_t v21 = v12;
    double v13 = (char *)_os_log_send_and_compose_impl();
    if (v19 < 0) {
      operator delete(*(void **)v18);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLWifiAssociatedApCentroidStoreUpdateManager::updateSyncedDataStoreIfNecessary(CLWifiAssociatedApCentroidDO *)", "%s\n", v13);
    if (v13 == (char *)&buf) {
      return;
    }
LABEL_50:
    free(v13);
    return;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022F3B20);
  }
  id v15 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, skip updating local store as the store is invalid", (uint8_t *)&buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1024193A0 == -1) {
      goto LABEL_49;
    }
    goto LABEL_59;
  }
}

void sub_100D38F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    sub_1000DB0A0(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D38F60(void *a1, uint64_t a2, void *a3)
{
  if (sub_100B393B0())
  {
    if (a3 && ([a3 isValid] & 1) != 0)
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F3B20);
      }
      BOOL v5 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        [a3 getBasicInfo];
        double v6 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? __p
           : (std::string *)__p[0].__r_.__value_.__r.__words[0];
        *(_DWORD *)long long buf = 136380675;
        *(void *)&uint8_t buf[4] = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, local store valid, %{private}s", buf, 0xCu);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022F3B20);
        }
        [a3 getBasicInfo];
        if (v41 >= 0) {
          char v23 = buf;
        }
        else {
          char v23 = *(unsigned char **)buf;
        }
        LODWORD(v30) = 136380675;
        *(void *)((char *)&v30 + 4) = v23;
        double v24 = (std::string *)_os_log_send_and_compose_impl();
        if (v41 < 0) {
          operator delete(*(void **)buf);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLWifiAssociatedApCentroidStoreUpdateManager::updateSyncedDataStoreIfNecessary(const std::vector<CLWifiHarvestDatabaseEntry> &, const CLMacAddress &, CLWifiAssociatedApCentroidSyncedDataStore *)", "%s\n", (const char *)v24);
        if (v24 != __p) {
          free(v24);
        }
      }
      __p[0].__r_.__value_.__r.__words[0] = 0x7FEFFFFFFFFFFFFFLL;
      sub_1013E9FEC(buf, a1, __p);
      if (sub_1013EA5F0((uint64_t)buf, a1))
      {
        sub_100B39278(__p);
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          id v7 = __p;
        }
        else {
          id v7 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
        }
        double v8 = +[NSString stringWithUTF8String:v7];
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022F3B20);
        }
        id v9 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          double v10 = [(NSString *)v8 UTF8String];
          LODWORD(__p[0].__r_.__value_.__l.__data_) = 136380675;
          *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, deleting records for associated AP %{private}s in local store as it is detected as moving using GPS harvest samples!", (uint8_t *)__p, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022F3B20);
          }
          LODWORD(v30) = 136380675;
          *(void *)((char *)&v30 + 4) = [(NSString *)v8 UTF8String];
          id v25 = (std::string *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "static void CLWifiAssociatedApCentroidStoreUpdateManager::updateSyncedDataStoreIfNecessary(const std::vector<CLWifiHarvestDatabaseEntry> &, const CLMacAddress &, CLWifiAssociatedApCentroidSyncedDataStore *)", "%s\n", (const char *)v25);
          if (v25 != __p) {
            free(v25);
          }
        }
        [a3 deleteRecordByMacString:v8];
      }
      else
      {
        sub_1013EA83C((uint64_t)buf, &v30);
        if (*(double *)&v30 < -90.0
          || *(double *)&v30 > 90.0
          || *((double *)&v30 + 1) > 180.0
          || *((double *)&v30 + 1) < -180.0)
        {
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022F3B20);
          }
          uint64_t v16 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, skip updating local store as it does not have a valid centroid!", (uint8_t *)__p, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_1022F3B20);
            }
            LOWORD(v48) = 0;
            long long v26 = (std::string *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "static void CLWifiAssociatedApCentroidStoreUpdateManager::updateSyncedDataStoreIfNecessary(const std::vector<CLWifiHarvestDatabaseEntry> &, const CLMacAddress &, CLWifiAssociatedApCentroidSyncedDataStore *)", "%s\n", (const char *)v26);
            if (v26 != __p) {
              free(v26);
            }
          }
        }
        else
        {
          sub_10144DA50(__p);
          (*(void (**)(long long *__return_ptr))(*(void *)__p[0].__r_.__value_.__l.__data_ + 48))(&v48);
          if (__p[0].__r_.__value_.__l.__size_) {
            sub_1000DB0A0((std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_);
          }
          if ((void)v48)
          {
            sub_100935084(v48);
            sub_100936054(v48);
            uint64_t v14 = v48;
            sub_10106DFF4((uint64_t)__p, v38, v36, v35, 0, v32, -1, *(double *)&v30, *((double *)&v30 + 1), v31, v33, v34, v37);
            char v47 = v39;
            int v15 = sub_1009381B8(v14, (double *)__p);
          }
          else
          {
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_1022F3B20);
            }
            double v17 = qword_1024193A8;
            if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
            {
              LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#warning, movingApDetector is null", (uint8_t *)__p, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(__p, 0x65CuLL);
              if (qword_1024193A0 != -1) {
                dispatch_once(&qword_1024193A0, &stru_1022F3B20);
              }
              int v29 = (std::string *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL isBadClientSideCentroidByMovingApDetector(const CLWifiAccessPoint &)", "%s\n", (const char *)v29);
              if (v29 != __p) {
                free(v29);
              }
            }
            int v15 = 0;
          }
          if (*((void *)&v48 + 1)) {
            sub_1000DB0A0(*((std::__shared_weak_count **)&v48 + 1));
          }
          if (v15)
          {
            sub_100B39278(__p);
            if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              double v18 = __p;
            }
            else {
              double v18 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
            }
            char v19 = +[NSString stringWithUTF8String:v18];
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p[0].__r_.__value_.__l.__data_);
            }
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_1022F3B20);
            }
            int v20 = qword_1024193A8;
            if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
            {
              float32x2_t v21 = [(NSString *)v19 UTF8String];
              LODWORD(__p[0].__r_.__value_.__l.__data_) = 136380675;
              *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, deleting records for associated AP %{private}s in local store as it fails to pass cross-check with GPS/Cell!", (uint8_t *)__p, 0xCu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(__p, 0x65CuLL);
              if (qword_1024193A0 != -1) {
                dispatch_once(&qword_1024193A0, &stru_1022F3B20);
              }
              double v27 = [(NSString *)v19 UTF8String];
              LODWORD(v48) = 136380675;
              *(void *)((char *)&v48 + 4) = v27;
              uint64_t v28 = (std::string *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "static void CLWifiAssociatedApCentroidStoreUpdateManager::updateSyncedDataStoreIfNecessary(const std::vector<CLWifiHarvestDatabaseEntry> &, const CLMacAddress &, CLWifiAssociatedApCentroidSyncedDataStore *)", "%s\n", (const char *)v28);
              if (v28 != __p) {
                free(v28);
              }
            }
            [a3 deleteRecordByMacString:v19];
          }
          else
          {
            id v22 = sub_1013EB4C4((uint64_t)buf);
            sub_100D387AC(v22);
          }
        }
      }
      if (v45 < 0) {
        operator delete(v44);
      }
      if (v42)
      {
        std::string v43 = v42;
        operator delete(v42);
      }
      return;
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B20);
    }
    double v12 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, skip updating local store as the store is invalid", (uint8_t *)__p, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193A0 == -1) {
        goto LABEL_38;
      }
      goto LABEL_104;
    }
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B20);
    }
    double v11 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, skip updating local store as it is disabled by settings", (uint8_t *)__p, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193A0 == -1)
      {
LABEL_38:
        *(_WORD *)long long buf = 0;
        double v13 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLWifiAssociatedApCentroidStoreUpdateManager::updateSyncedDataStoreIfNecessary(const std::vector<CLWifiHarvestDatabaseEntry> &, const CLMacAddress &, CLWifiAssociatedApCentroidSyncedDataStore *)", "%s\n", (const char *)v13);
        if (v13 != __p) {
          free(v13);
        }
        return;
      }
LABEL_104:
      dispatch_once(&qword_1024193A0, &stru_1022F3B20);
      goto LABEL_38;
    }
  }
}

void sub_100D39B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  double v60 = *(std::__shared_weak_count **)(v58 - 88);
  if (v60) {
    sub_1000DB0A0(v60);
  }
  sub_100D39B9C((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_100D39B9C(uint64_t a1)
{
  if (*(char *)(a1 + 207) < 0) {
    operator delete(*(void **)(a1 + 184));
  }
  int v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(void *)(a1 + 144) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_100D39BE0(void *a1, uint64_t a2)
{
  sub_10144DA50(&v5);
  id v4 = (void *)sub_101454F5C(v5);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  sub_100D38F60(a1, a2, v4);
}

void sub_100D39C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

id sub_100D39C5C()
{
  if ((sub_100B393B0() & 1) == 0)
  {
    if (*((unsigned char *)sub_1014122A8() + 103))
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F3B20);
      }
      int v2 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, purging older records from local store even if iCloud sharing is disabled", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022F3B20);
        }
        double v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL purgeOlderRecordsWheniCloudSharingIsDisabled()", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F3B20);
      }
      id v3 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Re-initializing WifiAssociatedApCentroidStore for purging older records", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022F3B20);
        }
        double v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL purgeOlderRecordsWheniCloudSharingIsDisabled()", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
      id v4 = objc_alloc_init(CLWifiAssociatedApCentroidSyncedDataStore);
      uint64_t v5 = v4;
      if (v4 && [(CLWifiAssociatedApCentroidSyncedDataStore *)v4 isValid])
      {
        BOOL v1 = [(CLWifiAssociatedApCentroidSyncedDataStore *)v5 purgeOlderRecords];

        return (id)v1;
      }
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F3B20);
      }
      double v8 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, skip purging older records from local store as the store is invalid", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 == -1) {
        goto LABEL_52;
      }
    }
    else
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F3B20);
      }
      id v9 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, skip purging older records as it is not allowed when iCloud sharing is disabled", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 == -1) {
        goto LABEL_52;
      }
    }
    dispatch_once(&qword_1024193A0, &stru_1022F3B20);
LABEL_52:
    id v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL purgeOlderRecordsWheniCloudSharingIsDisabled()", "%s\n", v7);
LABEL_53:
    if (v7 != (char *)buf) {
      free(v7);
    }
    return 0;
  }
  sub_10144DA50(buf);
  uint64_t v0 = (void *)sub_101454F5C(*(uint64_t *)buf);
  if (v14) {
    sub_1000DB0A0(v14);
  }
  if (!v0 || ([v0 isValid] & 1) == 0)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B20);
    }
    double v6 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, skip purging older records from local store as the store is invalid", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B20);
    }
    id v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiAssociatedApCentroidStoreUpdateManager::purgeOlderRecords()", "%s\n", v7);
    goto LABEL_53;
  }
  return [v0 purgeOlderRecords];
}

void sub_100D3A300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

id sub_100D3A320()
{
  if (sub_100B393B0())
  {
    sub_10144DA50(&__p);
    uint64_t v0 = (void *)sub_101454F5C((uint64_t)__p);
    if (v26) {
      sub_1000DB0A0(v26);
    }
    if (v0 && ([v0 isValid] & 1) != 0)
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F3B20);
      }
      BOOL v1 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        [v0 getBasicInfo];
        int v2 = v27 >= 0 ? &__p : (void **)__p;
        *(_DWORD *)long long buf = 136380675;
        *(void *)&uint8_t buf[4] = v2;
        _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, deleting all records from local store, %{private}s", buf, 0xCu);
        if (v27 < 0) {
          operator delete(__p);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022F3B20);
        }
        [v0 getBasicInfo];
        if (v22 >= 0) {
          double v17 = buf;
        }
        else {
          double v17 = *(unsigned char **)buf;
        }
        int v23 = 136380675;
        double v24 = v17;
        double v18 = (char *)_os_log_send_and_compose_impl();
        if (v22 < 0) {
          operator delete(*(void **)buf);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiAssociatedApCentroidStoreUpdateManager::deleteAllRecords()", "%s\n", v18);
        if (v18 != (char *)&__p) {
          free(v18);
        }
      }
      return [v0 deleteAllRecords];
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B20);
    }
    double v10 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, skip deleting all records from local store as the store is invalid", (uint8_t *)&__p, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(&__p, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B20);
    }
    *(_WORD *)long long buf = 0;
    double v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiAssociatedApCentroidStoreUpdateManager::deleteAllRecords()", "%s\n", v11);
LABEL_71:
    if (v11 != (char *)&__p) {
      free(v11);
    }
    return 0;
  }
  if (!*((unsigned char *)sub_1014122A8() + 103))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B20);
    }
    double v13 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, skip deleting all records as it is not allowed when iCloud sharing is disabled", (uint8_t *)&__p, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(&__p, 0x65CuLL);
    if (qword_1024193A0 == -1) {
      goto LABEL_70;
    }
    goto LABEL_91;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022F3B20);
  }
  id v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, deleting all records from local store even if iCloud sharing is disabled", (uint8_t *)&__p, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B20);
    }
    *(_WORD *)long long buf = 0;
    int v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL deleteAllRecordsWheniCloudSharingIsDisabled()", "%s\n", v15);
    if (v15 != (char *)&__p) {
      free(v15);
    }
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022F3B20);
  }
  uint64_t v5 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Re-initializing WifiAssociatedApCentroidStore for deleting all records", (uint8_t *)&__p, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B20);
    }
    *(_WORD *)long long buf = 0;
    uint64_t v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL deleteAllRecordsWheniCloudSharingIsDisabled()", "%s\n", v16);
    if (v16 != (char *)&__p) {
      free(v16);
    }
  }
  double v6 = objc_alloc_init(CLWifiAssociatedApCentroidSyncedDataStore);
  id v7 = v6;
  if (!v6 || ![(CLWifiAssociatedApCentroidSyncedDataStore *)v6 isValid])
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B20);
    }
    double v12 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, skip deleting all records from local store as the store is invalid", (uint8_t *)&__p, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(&__p, 0x65CuLL);
    if (qword_1024193A0 == -1) {
      goto LABEL_70;
    }
LABEL_91:
    dispatch_once(&qword_1024193A0, &stru_1022F3B20);
LABEL_70:
    *(_WORD *)long long buf = 0;
    double v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL deleteAllRecordsWheniCloudSharingIsDisabled()", "%s\n", v11);
    goto LABEL_71;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022F3B20);
  }
  double v8 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    [(CLWifiAssociatedApCentroidSyncedDataStore *)v7 getBasicInfo];
    id v9 = v27 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)long long buf = 136380675;
    *(void *)&uint8_t buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "WifiAssociatedApCentroidStore, deleting all records from local store, %{private}s", buf, 0xCu);
    if (v27 < 0) {
      operator delete(__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B20);
    }
    [(CLWifiAssociatedApCentroidSyncedDataStore *)v7 getBasicInfo];
    if (v22 >= 0) {
      char v19 = buf;
    }
    else {
      char v19 = *(unsigned char **)buf;
    }
    int v23 = 136380675;
    double v24 = v19;
    int v20 = (char *)_os_log_send_and_compose_impl();
    if (v22 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL deleteAllRecordsWheniCloudSharingIsDisabled()", "%s\n", v20);
    if (v20 != (char *)&__p) {
      free(v20);
    }
  }
  BOOL v3 = [(CLWifiAssociatedApCentroidSyncedDataStore *)v7 deleteAllRecords];

  return (id)v3;
}

void sub_100D3AD14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    sub_1000DB0A0(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D3AD34(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100D3AD64()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_100D3AE1C(_Unwind_Exception *a1)
{
}

void sub_100D3AE34()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    *uint64_t v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_100D3AEDC(_Unwind_Exception *a1)
{
}

uint64_t sub_100D3AEF4(uint64_t a1, const std::string::value_type *a2)
{
  uint64_t v4 = sub_100513074(a1, "name", 1, 1);
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 32) = 0;
  std::string::assign((std::string *)(v4 + 16), a2);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022F3B40);
  }
  uint64_t v5 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 136315138;
    id v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Bytes: construct, name, %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F3B40);
    }
    id v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLDebugBytes::CLDebugBytes(const char *)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_100D3B10C(a1);
  return a1;
}

void sub_100D3B0E4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  sub_10051310C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100D3B10C(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022F3B40);
  }
  int v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    BOOL v3 = (void *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0) {
      BOOL v3 = (void *)*v3;
    }
    *(_DWORD *)long long buf = 136315138;
    id v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Bytes: clear, name, %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F3B40);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDebugBytes::clear()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
}

void sub_100D3B334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D3B360(uint64_t a1, uint64_t *a2, int a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022F3B40);
  }
  double v6 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    id v7 = (void *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0) {
      id v7 = (void *)*v7;
    }
    if (*((char *)a2 + 23) >= 0) {
      double v8 = a2;
    }
    else {
      double v8 = (uint64_t *)*a2;
    }
    int v9 = *(_DWORD *)(a1 + 40);
    int v10 = *(_DWORD *)(a1 + 44);
    int v11 = *(_DWORD *)(a1 + 48);
    int v12 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)long long buf = 136316674;
    uint64_t v16 = v7;
    __int16 v17 = 2080;
    double v18 = v8;
    __int16 v19 = 1024;
    int v20 = v9;
    __int16 v21 = 1024;
    int v22 = v10;
    __int16 v23 = 1024;
    int v24 = v11;
    __int16 v25 = 1024;
    int v26 = v12;
    __int16 v27 = 1024;
    int v28 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Bytes: log, name, %s, m, %s, s, %d, r, %d, t, %d, ts, %d, reachability, %d", buf, 0x34u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F3B40);
    }
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDebugBytes::log(const std::string &, CLDaemonStatus_Type::Reachability)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
}

void sub_100D3B634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100D3B65C(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100D3CC24(id a1)
{
  qword_102419558 = (uint64_t)os_log_create("com.apple.locationd.Core", "Routine");
}

uint64_t sub_100D3CC54(unsigned int a1)
{
  if (a1 <= 0x40) {
    int v1 = 0;
  }
  else {
    int v1 = 25;
  }
  if (a1 <= 0x44) {
    unsigned int v2 = v1;
  }
  else {
    unsigned int v2 = 50;
  }
  if (a1 <= 0x4E) {
    return v2;
  }
  else {
    return 75;
  }
}

BOOL sub_100D3CC7C(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  if ((sub_1000E6DB4(a1) & 1) == 0)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B80);
    }
    uint64_t v16 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      sub_100BCE3E8();
      __int16 v17 = v45 >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)double v33 = 136380675;
      *(void *)&v33[4] = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "WifiCalc, integrity, invalid location %{private}s, fail", v33, 0xCu);
      if (SHIBYTE(v45) < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B80);
    }
    sub_100BCE3E8();
    if (v36 >= 0) {
      double v18 = v33;
    }
    else {
      double v18 = *(unsigned char **)v33;
    }
    int v40 = 136380675;
    char v41 = v18;
    __int16 v19 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v36) < 0) {
      operator delete(*(void **)v33);
    }
    goto LABEL_46;
  }
  if ((sub_1000E6DB4(a2) & 1) == 0)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B80);
    }
    int v20 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      sub_100BCE3E8();
      __int16 v21 = v45 >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)double v33 = 136380675;
      *(void *)&v33[4] = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "WifiCalc, integrity, invalid reference location %{private}s, fail", v33, 0xCu);
      if (SHIBYTE(v45) < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B80);
    }
    sub_100BCE3E8();
    if (v36 >= 0) {
      int v22 = v33;
    }
    else {
      int v22 = *(unsigned char **)v33;
    }
    int v40 = 136380675;
    char v41 = v22;
    __int16 v19 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v36) < 0) {
      operator delete(*(void **)v33);
    }
LABEL_46:
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiLocationIntegrityCalculator::shouldBumpLocationIntegrity(const CLDaemonLocation &, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const double)", "%s\n", v19);
    if (v19 == buf) {
      return 0;
    }
LABEL_47:
    free(v19);
    return 0;
  }
  double v8 = *((double *)sub_101413018() + 3);
  if (*(double *)(a3 + 344) <= 0.0)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B80);
    }
    __int16 v23 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "WifiCalc, integrity, warning, machContinuousTime not available in location private", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F3B80);
      }
      *(_WORD *)double v33 = 0;
      int v32 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CFTimeInterval getAge(const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v32);
      if (v32 != buf) {
        free(v32);
      }
    }
    double v11 = vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a2 + 76));
  }
  else
  {
    double v9 = sub_10016C458();
    double v10 = *(double *)(a3 + 344);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B80);
    }
    double v11 = vabdd_f64(v9, v10);
    int v12 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = *(void *)(a3 + 344);
      *(_DWORD *)long long buf = 134349312;
      *(void *)&uint8_t buf[4] = v13;
      __int16 v43 = 2050;
      double v44 = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "WifiCalc, integrity, machContinuousTime %{public}.1f, age %{public}.1f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F3B80);
      }
      uint64_t v14 = *(void *)(a3 + 344);
      *(_DWORD *)double v33 = 134349312;
      *(void *)&v33[4] = v14;
      __int16 v34 = 2050;
      double v35 = v11;
      int v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CFTimeInterval getAge(const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v15);
      if (v15 != buf) {
        free(v15);
      }
    }
  }
  if (v11 > v8)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B80);
    }
    int v24 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134349312;
      *(double *)&uint8_t buf[4] = v11;
      __int16 v43 = 2050;
      double v44 = v8;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "WifiCalc, integrity, age, %{public}.1f, threshold, %{public}.1f, fail", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B80);
    }
    *(_DWORD *)double v33 = 134349312;
    *(double *)&v33[4] = v11;
    __int16 v34 = 2050;
    double v35 = v8;
    __int16 v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiLocationIntegrityCalculator::shouldBumpLocationIntegrity(const CLDaemonLocation &, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const double)", "%s\n", v19);
    if (v19 == buf) {
      return 0;
    }
    goto LABEL_47;
  }
  double v27 = sub_1000A3D9C(*(double *)(a1 + 4), *(double *)(a1 + 12), *(double *)(a2 + 4), *(double *)(a2 + 12));
  BOOL v25 = v27 <= a4;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022F3B80);
  }
  int v28 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    int v29 = "fail";
    *(_DWORD *)long long buf = 134349826;
    *(double *)&uint8_t buf[4] = v11;
    if (v27 <= a4) {
      int v29 = "pass";
    }
    __int16 v43 = 2050;
    double v44 = v27;
    __int16 v45 = 2050;
    double v46 = a4;
    __int16 v47 = 2082;
    long long v48 = v29;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "WifiCalc, integrity, age, %{public}.1f, distance, %{public}.1f, threshold, %{public}.1f, %{public}s", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B80);
    }
    long long v30 = "fail";
    *(_DWORD *)double v33 = 134349826;
    if (v27 <= a4) {
      long long v30 = "pass";
    }
    *(double *)&v33[4] = v11;
    __int16 v34 = 2050;
    double v35 = v27;
    __int16 v36 = 2050;
    double v37 = a4;
    __int16 v38 = 2082;
    char v39 = v30;
    double v31 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiLocationIntegrityCalculator::shouldBumpLocationIntegrity(const CLDaemonLocation &, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const double)", "%s\n", v31);
    if (v31 != buf) {
      free(v31);
    }
  }
  return v25;
}

BOOL sub_100D3D668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5 = *(_DWORD *)(a1 + 84);
  if (v5 > 0x4E)
  {
    int v6 = 75;
    goto LABEL_20;
  }
  if (v5 <= 0x44)
  {
    if (v5 <= 0x40) {
      int v6 = 0;
    }
    else {
      int v6 = 25;
    }
LABEL_20:
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B80);
    }
    double v18 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      sub_100D3DF98(v6, buf);
      __int16 v19 = v39 >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)int v32 = 136446210;
      *(void *)&v32[4] = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "WifiCalc, integrity, not bumping integrity %{public}s as it is not Medium", v32, 0xCu);
      if (v39 < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B80);
    }
    sub_100D3DF98(v6, v32);
    double v31 = v33 >= 0 ? v32 : *(unsigned char **)v32;
    int v34 = 136446210;
    double v35 = v31;
    __int16 v17 = (char *)_os_log_send_and_compose_impl();
    if (v33 < 0) {
      operator delete(*(void **)v32);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiLocationIntegrityCalculator::shouldBumpLocationIntegrity(const CLDaemonLocation &, const CL::Wifi1::Types::ComputedLocation &, const CLDaemonLocationPrivate &, const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v17);
    if (v17 == (char *)buf) {
      return 0;
    }
LABEL_74:
    free(v17);
    return 0;
  }
  if ((sub_1000E6DB4(a2) & 1) == 0)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B80);
    }
    __int16 v21 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "WifiCalc, integrity, multi-AP wifi reference location unavailable", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 == -1) {
      goto LABEL_36;
    }
    goto LABEL_75;
  }
  if (*(_DWORD *)(a2 + 96) != 4)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B80);
    }
    int v22 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      int v23 = *(_DWORD *)(a2 + 96);
      *(_DWORD *)long long buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "WifiCalc, integrity, incorrect wifi location type, %{public}d", buf, 8u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B80);
    }
    int v24 = *(_DWORD *)(a2 + 96);
    *(_DWORD *)int v32 = 67240192;
    *(_DWORD *)&v32[4] = v24;
    __int16 v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLWifiLocationIntegrityCalculator::shouldBumpLocationIntegrity(const CLDaemonLocation &, const CL::Wifi1::Types::ComputedLocation &, const CLDaemonLocationPrivate &, const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v17);
    goto LABEL_60;
  }
  if ((sub_1000E6DB4(a4) & 1) == 0)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B80);
    }
    BOOL v25 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "WifiCalc, integrity, cell reference location unavailable", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 == -1) {
      goto LABEL_36;
    }
LABEL_75:
    dispatch_once(&qword_1024193A0, &stru_1022F3B80);
LABEL_36:
    *(_WORD *)int v32 = 0;
    __int16 v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLWifiLocationIntegrityCalculator::shouldBumpLocationIntegrity(const CLDaemonLocation &, const CL::Wifi1::Types::ComputedLocation &, const CLDaemonLocationPrivate &, const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v17);
    goto LABEL_60;
  }
  if (*(_DWORD *)(a4 + 96) != 6)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B80);
    }
    int v26 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      int v27 = *(_DWORD *)(a4 + 96);
      *(_DWORD *)long long buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "WifiCalc, integrity, incorrect cell location type, %{public}d", buf, 8u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B80);
    }
    int v28 = *(_DWORD *)(a4 + 96);
    *(_DWORD *)int v32 = 67240192;
    *(_DWORD *)&v32[4] = v28;
    __int16 v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLWifiLocationIntegrityCalculator::shouldBumpLocationIntegrity(const CLDaemonLocation &, const CL::Wifi1::Types::ComputedLocation &, const CLDaemonLocationPrivate &, const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v17);
    goto LABEL_60;
  }
  int v12 = sub_101413018();
  int v13 = *v12;
  if (*(_DWORD *)(a2 + 156) < *v12)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B80);
    }
    uint64_t v14 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      int v15 = *(_DWORD *)(a2 + 156);
      *(_DWORD *)long long buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = v15;
      __int16 v37 = 1026;
      int v38 = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "WifiCalc, integrity, multi-AP wifi fix unavailable, %{public}d APs, threshold, %{public}d, fail", buf, 0xEu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B80);
    }
    int v16 = *(_DWORD *)(a2 + 156);
    *(_DWORD *)int v32 = 67240448;
    *(_DWORD *)&v32[4] = v16;
    *(_WORD *)&v32[8] = 1026;
    *(_DWORD *)&v32[10] = v13;
    __int16 v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLWifiLocationIntegrityCalculator::shouldBumpLocationIntegrity(const CLDaemonLocation &, const CL::Wifi1::Types::ComputedLocation &, const CLDaemonLocationPrivate &, const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v17);
LABEL_60:
    if (v17 == (char *)buf) {
      return 0;
    }
    goto LABEL_74;
  }
  int v29 = sub_101413018();
  if (!sub_100D3CC7C(a1, a2, a3, *((double *)v29 + 2))) {
    return 0;
  }
  double v30 = *((double *)sub_101413018() + 1);

  return sub_100D3CC7C(a1, a4, a5, v30);
}

void *sub_100D3DF98@<X0>(int a1@<W0>, void *a2@<X8>)
{
  uint64_t v4 = "None";
  unsigned int v5 = "Medium";
  if (a1 != 50) {
    unsigned int v5 = "High";
  }
  if (a1) {
    uint64_t v4 = "Low";
  }
  if (a1 <= 49) {
    int v6 = (char *)v4;
  }
  else {
    int v6 = (char *)v5;
  }
  return sub_100134750(a2, v6);
}

uint64_t sub_100D3DFDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a1;
  unsigned int v10 = *(_DWORD *)(a1 + 84);
  if (v10 <= 0x40) {
    int v11 = 0;
  }
  else {
    int v11 = 25;
  }
  if (v10 <= 0x44) {
    unsigned int v12 = v11;
  }
  else {
    unsigned int v12 = 50;
  }
  if (v10 <= 0x4E) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 75;
  }
  uint64_t v14 = &qword_102419000;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022F3B80);
  }
  int v15 = &qword_102419000;
  int v16 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    sub_100D3DF98(v13, v50);
    uint64_t v17 = a2;
    uint64_t v40 = a3;
    if (SBYTE3(v54) >= 0) {
      double v18 = v50;
    }
    else {
      double v18 = *(unsigned char **)v50;
    }
    uint64_t v19 = v9;
    int v20 = *(_DWORD *)(v9 + 84);
    uint64_t v37 = v19;
    sub_100BCE3E8();
    if (v49 >= 0) {
      __int16 v21 = v48;
    }
    else {
      __int16 v21 = (void **)v48[0];
    }
    sub_100BCE3E8();
    sub_100BCE3E8();
    int v22 = v46;
    if (v47 < 0) {
      int v22 = (void **)v46[0];
    }
    if (v45 >= 0) {
      int v23 = __p;
    }
    else {
      int v23 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136447235;
    double v60 = v18;
    __int16 v61 = 1026;
    int v62 = v20;
    __int16 v63 = 2081;
    uint64_t v64 = v21;
    __int16 v65 = 2081;
    long long v66 = v22;
    __int16 v67 = 2081;
    __int16 v68 = v23;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "WifiCalc, integrity, %{public}s, confidence, %{public}d, location, %{private}s, reference multi-AP wifi, %{private}s, reference cell, %{private}s", buf, 0x30u);
    if (v45 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v14 = &qword_102419000;
    int v15 = &qword_102419000;
    a3 = v40;
    a2 = v17;
    uint64_t v9 = v37;
    if (v47 < 0) {
      operator delete(v46[0]);
    }
    uint64_t v13 = v13;
    if (v49 < 0) {
      operator delete(v48[0]);
    }
    if (SBYTE3(v54) < 0) {
      operator delete(*(void **)v50);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B80);
    }
    sub_100D3DF98(v13, v48);
    uint64_t v39 = a2;
    uint64_t v41 = a3;
    if (v49 >= 0) {
      int v26 = v48;
    }
    else {
      int v26 = (void **)v48[0];
    }
    uint64_t v27 = v9;
    int v28 = *(_DWORD *)(v9 + 84);
    uint64_t v29 = v27;
    sub_100BCE3E8();
    uint64_t v38 = a5;
    if (v47 >= 0) {
      double v30 = v46;
    }
    else {
      double v30 = (void **)v46[0];
    }
    sub_100BCE3E8();
    int v31 = v45;
    int v32 = (void **)__p[0];
    sub_100BCE3E8();
    char v33 = __p;
    if (v31 < 0) {
      char v33 = v32;
    }
    if (v43 >= 0) {
      int v34 = &v42;
    }
    else {
      int v34 = v42;
    }
    *(_DWORD *)long long v50 = 136447235;
    *(void *)&v50[4] = v26;
    __int16 v51 = 1026;
    int v52 = v28;
    __int16 v53 = 2081;
    uint64_t v54 = v30;
    __int16 v55 = 2081;
    double v56 = v33;
    __int16 v57 = 2081;
    uint64_t v58 = v34;
    double v35 = (char *)_os_log_send_and_compose_impl();
    if (v43 < 0) {
      operator delete(v42);
    }
    uint64_t v14 = &qword_102419000;
    int v15 = &qword_102419000;
    a5 = v38;
    a2 = v39;
    a3 = v41;
    uint64_t v9 = v29;
    if (v45 < 0) {
      operator delete(__p[0]);
    }
    if (v47 < 0) {
      operator delete(v46[0]);
    }
    if (v49 < 0) {
      operator delete(v48[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "static CLLocationIntegrity CLWifiLocationIntegrityCalculator::calculateLocationIntegrity(const CLDaemonLocation &, const CL::Wifi1::Types::ComputedLocation &, const CLDaemonLocationPrivate &, const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v35);
    if (v35 != (char *)buf) {
      free(v35);
    }
  }
  if (sub_100D3D668(v9, a2, a3, a4, a5))
  {
    if (v14[116] != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F3B80);
    }
    int v24 = v15[117];
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "WifiCalc, integrity, bumping wifi location integrity from Medium to High", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v14[116] != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022F3B80);
      }
      *(_WORD *)long long v50 = 0;
      __int16 v36 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static CLLocationIntegrity CLWifiLocationIntegrityCalculator::calculateLocationIntegrity(const CLDaemonLocation &, const CL::Wifi1::Types::ComputedLocation &, const CLDaemonLocationPrivate &, const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v36);
      if (v36 != (char *)buf) {
        free(v36);
      }
    }
    return 75;
  }
  return v13;
}

void sub_100D3E54C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D3E5E4(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100D3E614()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_100D3E6CC(_Unwind_Exception *a1)
{
}

void sub_100D3E6E4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    *uint64_t v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_100D3E78C(_Unwind_Exception *a1)
{
}

uint64_t sub_100D3E7A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 44) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 25) = 0u;
  int v6 = (CLMotionActivity *)sub_101116748(a1 + 48);
  *(_DWORD *)(a1 + 160) = 0;
  CLMotionActivity::getInit((uint64_t *)(a1 + 168), v6);
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(void *)(a1 + 528) = off_1022F3C18;
  *(void *)(a1 + 536) = strdup("PedestrianStepCountBuffer");
  *(void *)(a1 + 544) = 0x7FEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(void *)(a1 + 528) = off_1022F3C80;
  *(_OWORD *)(a1 + 624) = xmmword_101D8C9C0;
  *(void *)(a1 + 640) = 0x403E000000000000;
  *(_WORD *)(a1 + 648) = 256;
  *(void *)(a1 + 600) = 0;
  *(unsigned char *)(a1 + 608) = 1;
  *(void *)(a1 + 616) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 656) = a2;
  *(void *)(a1 + 664) = off_1022F3BD0;
  *(void *)(a1 + 672) = strdup("PedestrianActivityBuffer");
  *(void *)(a1 + 680) = 0x7FEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(void *)(a1 + 664) = off_1022F3D08;
  *(_WORD *)(a1 + 784) = 256;
  *(void *)(a1 + 736) = 0;
  *(unsigned char *)(a1 + 744) = 1;
  *(_OWORD *)(a1 + 752) = xmmword_101D8C9D0;
  *(_OWORD *)(a1 + 768) = xmmword_101D827E0;
  *(_DWORD *)(a1 + 792) = 0;
  sub_1010A9554(a1 + 800, a2, a3);
  *(void *)(a1 + 1992) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 2000) = xmmword_101D8C9E0;
  *(void *)(a1 + 2016) = 0x300000000;
  *(_OWORD *)(a1 + 2024) = xmmword_101D8CA30;
  *(_OWORD *)(a1 + 2040) = unk_101D8CA40;
  *(_OWORD *)(a1 + 2056) = xmmword_101D8CA50;
  *(_OWORD *)(a1 + 2068) = *(long long *)((char *)&xmmword_101D8CA50 + 12);
  *(_OWORD *)(a1 + 2088) = 0u;
  *(void *)(a1 + 2112) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 2136) = 0u;
  *(void *)(a1 + 2120) = 0;
  *(_DWORD *)(a1 + 2127) = 0;
  uint64_t v7 = sub_1000D3E78();
  sub_10006B564(v7, &v14);
  double v8 = (unsigned __int8 *)(a1 + 2129);
  if (sub_1000D2988(v14, "MotionLoggerLogPedometer", (BOOL *)(a1 + 2129)))
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022F3BA0);
    }
    uint64_t v9 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
    {
      int v10 = *v8;
      *(_DWORD *)long long buf = 136315394;
      __int16 v21 = "MotionLoggerLogPedometer";
      __int16 v22 = 1024;
      int v23 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "MSL Logging: %s: %d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_1022F3BA0);
      }
      int v12 = *v8;
      int v16 = 136315394;
      uint64_t v17 = "MotionLoggerLogPedometer";
      __int16 v18 = 1024;
      int v19 = v12;
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLStepDistanceFusion::CLStepDistanceFusion(CLNatalieInput<CLOdometerEntry> *, CLRunningFormHealthKitWriter *)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  if (v15) {
    sub_1000DB0A0(v15);
  }
  return a1;
}

void sub_100D3EBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  uint64_t v17 = (std::__shared_weak_count *)v12[268];
  if (v17) {
    sub_1000DB0A0(v17);
  }
  sub_1000D816C(v12 + 197);
  sub_100D3EC0C(v15);
  sub_100D3EC5C(v14);
  sub_10041F48C(v12 + 60);
  sub_101116818(v13);
  _Unwind_Resume(a1);
}

uint64_t sub_100D3EC0C(uint64_t a1)
{
  *(void *)a1 = off_1022F3BD0;
  free(*(void **)(a1 + 8));
  sub_100663B8C((void *)(a1 + 24));
  return a1;
}

uint64_t sub_100D3EC5C(uint64_t a1)
{
  *(void *)a1 = off_1022F3C18;
  free(*(void **)(a1 + 8));
  sub_1006A9CC0((void *)(a1 + 24));
  return a1;
}

uint64_t sub_100D3ECB0(uint64_t a1)
{
  unsigned int v2 = *(std::__shared_weak_count **)(a1 + 2144);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  sub_1000D816C((void *)(a1 + 1576));
  *(void *)(a1 + 664) = off_1022F3BD0;
  free(*(void **)(a1 + 672));
  sub_100663B8C((void *)(a1 + 688));
  *(void *)(a1 + 528) = off_1022F3C18;
  free(*(void **)(a1 + 536));
  sub_1006A9CC0((void *)(a1 + 552));
  sub_10041F48C((void *)(a1 + 480));
  sub_101116818(a1 + 48);
  return a1;
}

uint64_t sub_100D3ED5C(uint64_t a1, void **a2, double a3)
{
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  int v6 = (void *)(a1 + 528);
  if (!sub_1001856E8(a1 + 528, (uint64_t)&v64, &v62, a3))
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022F3BA0);
    }
    BOOL v25 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#Warning Inconsistency found between steps and clock. Ignoring.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_1022F3BA0);
      }
      LOWORD(v69) = 0;
      int v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLStepDistanceFusion::extendedMode(const double, std::vector<CLStepDistanceFusionResult> &)", "%s\n", v26);
      if (v26 != (char *)buf) {
        free(v26);
      }
    }
    return 1;
  }
  long long v60 = v64;
  long long v61 = v65;
  double v8 = (double *)*((void *)&v65 + 1);
  uint64_t v7 = v65;
  uint64_t v9 = *(double **)v65;
  if (*((void *)&v65 + 1) == *(void *)v65)
  {
    uint64_t v7 = v61 - 8;
    uint64_t v9 = *(double **)(v61 - 8);
    double v8 = v9 + 640;
  }
  int v10 = v8 - 40;
  double v11 = *v10;
  if (v10 == *((double **)&v63 + 1))
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022F3BA0);
    }
    uint64_t v27 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 134283521;
      *(double *)__int16 v72 = v11;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "ExtendedMode, pushing Pedometer, %{private}.3f, unable to find Pedometer before current Pedometer", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_1022F3BA0);
      }
      int v69 = 134283521;
      double v70 = v11;
      char v45 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLStepDistanceFusion::extendedMode(const double, std::vector<CLStepDistanceFusionResult> &)", "%s\n", v45);
      if (v45 != (char *)buf) {
        free(v45);
      }
    }
    sub_100D41264(a1, a2, (uint64_t)&v60, 0, 1.0, 0.0);
    return 1;
  }
  if (v10 == v9) {
    int v10 = (double *)(*(void *)(v7 - 8) + 5120);
  }
  double v12 = *(v10 - 40);
  if (sub_100D419EC(*(void **)(a1 + 656), v58, v11))
  {
    double v13 = *(double *)v58;
    if (sub_100D41B84(*(void **)(a1 + 656), &v54, *(double *)v58))
    {
      double v14 = *(double *)&v54;
      if (sub_100D41CEC(v6, &v69, v13))
      {
        if (sub_100D41E1C(v6, &v67, v14))
        {
          double v53 = 0.0;
          if (!sub_100D41F1C(a1, &v53, v13, v14))
          {
            if (qword_102419030 != -1) {
              dispatch_once(&qword_102419030, &stru_1022F3BA0);
            }
            std::string v42 = qword_102419038;
            if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)long long buf = 134283521;
              *(double *)__int16 v72 = v11;
              _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "ExtendedMode, pushing Pedometer, %{private}.3f, Pedometer distance failure", buf, 0xCu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419030 != -1) {
                dispatch_once(&qword_102419030, &stru_1022F3BA0);
              }
              v66[0] = 134283521;
              *(double *)&v66[1] = v11;
              long long v48 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLStepDistanceFusion::extendedMode(const double, std::vector<CLStepDistanceFusionResult> &)", "%s\n", v48);
              if (v48 != (char *)buf) {
                free(v48);
              }
            }
            sub_100D41264(a1, a2, (uint64_t)&v60, 0, 1.0, 0.0);
            return 1;
          }
          double v52 = 0.0;
          if (v13 > v12 && !sub_100D41F1C(a1, &v52, v12, v13))
          {
            if (qword_102419030 != -1) {
              dispatch_once(&qword_102419030, &stru_1022F3BA0);
            }
            char v43 = qword_102419038;
            if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)long long buf = 134283521;
              *(double *)__int16 v72 = v11;
              _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "ExtendedMode, pushing Pedometer, %{private}.3f, Pedometer distance before Odometer failure", buf, 0xCu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419030 != -1) {
                dispatch_once(&qword_102419030, &stru_1022F3BA0);
              }
              v66[0] = 134283521;
              *(double *)&v66[1] = v11;
              char v49 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLStepDistanceFusion::extendedMode(const double, std::vector<CLStepDistanceFusionResult> &)", "%s\n", v49);
              if (v49 != (char *)buf) {
                free(v49);
              }
            }
            sub_100D41264(a1, a2, (uint64_t)&v60, 0, 1.0, 0.0);
            return 1;
          }
          double v51 = 0.0;
          if (v14 >= a3 || sub_100D41F1C(a1, &v51, v14, a3))
          {
            if (v11 >= *(double *)a1 && v11 <= *(double *)(a1 + 8))
            {
              int v23 = *(unsigned __int8 *)(a1 + 40);
            }
            else
            {
              double v15 = v53;
              BOOL v16 = v14 - v13 > 0.5;
              double v17 = v55;
              double v18 = v56 - v59;
              if (v56 - v59 <= 0.0) {
                BOOL v16 = 0;
              }
              if (v55 / v18 >= 0.25) {
                BOOL v16 = 0;
              }
              double v19 = v18 / v53;
              if (v53 <= 0.0) {
                double v19 = -1.0;
              }
              BOOL v20 = v19 < 2.0;
              if (v19 <= 0.5) {
                BOOL v20 = 0;
              }
              int v21 = v57;
              int v22 = v16 && v20;
              if (v53 > 0.0) {
                int v23 = v22;
              }
              else {
                int v23 = 0;
              }
              if (qword_102419030 != -1) {
                dispatch_once(&qword_102419030, &stru_1022F3BA0);
              }
              int v24 = qword_102419038;
              if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)long long buf = 68290819;
                *(_WORD *)&v72[4] = 2082;
                *(_DWORD *)__int16 v72 = 0;
                *(void *)&v72[6] = "";
                *(_WORD *)&v72[14] = 2049;
                *(double *)&v72[16] = v13;
                *(_WORD *)&v72[24] = 2049;
                *(double *)&v72[26] = v14;
                *(_WORD *)&v72[34] = 2049;
                double v73 = v15;
                *(_WORD *)__int16 v74 = 2049;
                *(double *)&v74[2] = v18;
                __int16 v75 = 2049;
                double v76 = v17;
                __int16 v77 = 1025;
                int v78 = v23;
                __int16 v79 = 1025;
                int v80 = v21;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"ExtendedMode, Segment\", \"timeStart\":\"%{private}.3f\", \"timeStop\":\"%{private}.3f\", \"distPed\":\"%{private}.3f\", \"distOdom\":\"%{private}.3f\", \"uncOdom\":\"%{private}.3f\", \"isValid\":%{private}hhd, \"batchedLocationFixType\":%{private}d}", buf, 0x50u);
              }
              if (*(unsigned char *)(a1 + 2129))
              {
                sub_101789874((uint64_t)buf);
                *(double *)&v72[20] = v13;
                *(double *)&v72[28] = v14;
                *(double *)&v72[12] = v15;
                *(double *)&v72[4] = v18;
                double v73 = v17;
                v74[4] = v23;
                v74[8] |= 0x7Fu;
                *(_DWORD *)__int16 v74 = v21;
                if (qword_10248AF88 != -1) {
                  dispatch_once(&qword_10248AF88, &stru_1022F3C50);
                }
                if (qword_10248AF90) {
                  operator new();
                }
                PB::Base::~Base((PB::Base *)buf);
              }
              *(double *)a1 = v13;
              *(double *)(a1 + 8) = v14;
              *(double *)(a1 + 16) = v15;
              *(double *)(a1 + 24) = v18;
              *(double *)(a1 + 32) = v17;
              *(unsigned char *)(a1 + 40) = v23;
              *(_DWORD *)(a1 + 44) = v21;
            }
            if (v23)
            {
              sub_100D41264(a1, a2, (uint64_t)&v60, 1, *(double *)(a1 + 24) / *(double *)(a1 + 16), v52 + v51);
              return 1;
            }
          }
          else
          {
            if (qword_102419030 != -1) {
              dispatch_once(&qword_102419030, &stru_1022F3BA0);
            }
            double v44 = qword_102419038;
            if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)long long buf = 134283521;
              *(double *)__int16 v72 = v11;
              _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "ExtendedMode, pushing Pedometer, %{private}.3f, Pedometer distance after Odometer failure", buf, 0xCu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419030 != -1) {
                dispatch_once(&qword_102419030, &stru_1022F3BA0);
              }
              v66[0] = 134283521;
              *(double *)&v66[1] = v11;
              long long v50 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLStepDistanceFusion::extendedMode(const double, std::vector<CLStepDistanceFusionResult> &)", "%s\n", v50);
              if (v50 != (char *)buf) {
                free(v50);
              }
            }
          }
          sub_100D41264(a1, a2, (uint64_t)&v60, 0, 1.0, 0.0);
          return 1;
        }
        unint64_t v39 = *(void *)(a1 + 520) + *(void *)(a1 + 512) - 1;
        double v40 = *(double *)(*(void *)(*(void *)(a1 + 488) + ((v39 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v39 & 0x1FF))
            - a3;
        BOOL v28 = v40 > 150.0;
        if (v40 <= 150.0) {
          return v28;
        }
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_1022F3BA0);
        }
        uint64_t v41 = qword_102419038;
        if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 134283521;
          *(double *)__int16 v72 = v11;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "ExtendedMode, pushing Pedometer, %{private}.3f, unable to find first Pedometer after first Odometer after previous Pedometer", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419030 != -1) {
            dispatch_once(&qword_102419030, &stru_1022F3BA0);
          }
          v66[0] = 134283521;
          *(double *)&v66[1] = v11;
          char v47 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLStepDistanceFusion::extendedMode(const double, std::vector<CLStepDistanceFusionResult> &)", "%s\n", v47);
          if (v47 != (char *)buf) {
            goto LABEL_126;
          }
        }
LABEL_84:
        sub_100D41264(a1, a2, (uint64_t)&v60, 0, 1.0, 0.0);
        return v28;
      }
      unint64_t v36 = *(void *)(a1 + 520) + *(void *)(a1 + 512) - 1;
      double v37 = *(double *)(*(void *)(*(void *)(a1 + 488) + ((v36 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v36 & 0x1FF))
          - a3;
      BOOL v28 = v37 > 150.0;
      if (v37 <= 150.0) {
        return v28;
      }
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_1022F3BA0);
      }
      uint64_t v38 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 134283521;
        *(double *)__int16 v72 = v11;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "ExtendedMode, pushing Pedometer, %{private}.3f, unable to find first Pedometer before first Odometer before current Pedometer", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_84;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_1022F3BA0);
      }
      int v67 = 134283521;
      double v68 = v11;
      char v47 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLStepDistanceFusion::extendedMode(const double, std::vector<CLStepDistanceFusionResult> &)", "%s\n", v47);
      if (v47 == (char *)buf) {
        goto LABEL_84;
      }
    }
    else
    {
      unint64_t v33 = *(void *)(a1 + 520) + *(void *)(a1 + 512) - 1;
      double v34 = *(double *)(*(void *)(*(void *)(a1 + 488) + ((v33 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v33 & 0x1FF))
          - a3;
      BOOL v28 = v34 > 150.0;
      if (v34 <= 150.0) {
        return v28;
      }
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_1022F3BA0);
      }
      double v35 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 134283521;
        *(double *)__int16 v72 = v11;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "ExtendedMode, pushing Pedometer, %{private}.3f, unable to find first Odometer after previous Pedometer (and after first Odometer before current Pedometer)", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_84;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_1022F3BA0);
      }
      int v69 = 134283521;
      double v70 = v11;
      char v47 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLStepDistanceFusion::extendedMode(const double, std::vector<CLStepDistanceFusionResult> &)", "%s\n", v47);
      if (v47 == (char *)buf) {
        goto LABEL_84;
      }
    }
LABEL_126:
    free(v47);
    goto LABEL_84;
  }
  unint64_t v30 = *(void *)(a1 + 520) + *(void *)(a1 + 512) - 1;
  double v31 = *(double *)(*(void *)(*(void *)(a1 + 488) + ((v30 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v30 & 0x1FF)) - a3;
  BOOL v28 = v31 > 150.0;
  if (v31 > 150.0)
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022F3BA0);
    }
    int v32 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 134283521;
      *(double *)__int16 v72 = v11;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "ExtendedMode, pushing Pedometer, %{private}.3f, unable to find first Odometer before current Pedometer", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_1022F3BA0);
      }
      int v69 = 134283521;
      double v70 = v11;
      double v46 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLStepDistanceFusion::extendedMode(const double, std::vector<CLStepDistanceFusionResult> &)", "%s\n", v46);
      if (v46 != (char *)buf) {
        free(v46);
      }
    }
    sub_100D41264(a1, a2, (uint64_t)&v60, 0, 1.0, 0.0);
  }
  return v28;
}

void sub_100D3FF40(_Unwind_Exception *a1)
{
}

BOOL sub_100D3FF74(uint64_t a1, char a2)
{
  long long v128 = 0u;
  long long v129 = 0u;
  long long v126 = 0u;
  long long v127 = 0u;
  if (!(*(unsigned int (**)(void, long long *, long long *))(**(void **)(a1 + 656) + 16))(*(void *)(a1 + 656), &v128, &v126))return 0; {
  std::string __p = 0;
  }
  uint64_t v124 = 0;
  char v125 = 0;
  double v120 = 0;
  __int16 v121 = 0;
  uint64_t v122 = 0;
  uint64_t v4 = *((void *)&v129 + 1);
  if (*((void *)&v129 + 1) == *((void *)&v127 + 1)) {
    goto LABEL_78;
  }
  unsigned int v5 = 0;
  int v6 = (uint64_t *)v129;
  uint64_t v7 = *(void *)v129;
  double v8 = 0.0;
  while (v4 != v7)
  {
    double v9 = *(double *)(v4 - 192);
    if (v8 - v9 >= 5.0 || (uint64_t v10 = v4, v9 <= *(double *)(a1 + 1992)))
    {
      uint64_t v13 = v4;
      goto LABEL_54;
    }
LABEL_11:
    double v14 = v124;
    if (v124 >= v125)
    {
      BOOL v16 = (char *)__p;
      uint64_t v17 = (v124 - (unsigned char *)__p) >> 3;
      unint64_t v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 61) {
        sub_1001D7FD4();
      }
      uint64_t v19 = v125 - (unsigned char *)__p;
      if ((v125 - (unsigned char *)__p) >> 2 > v18) {
        unint64_t v18 = v19 >> 2;
      }
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v20 = v18;
      }
      if (v20)
      {
        int v21 = (char *)sub_1000DA54C((uint64_t)&v125, v20);
        BOOL v16 = (char *)__p;
        double v14 = v124;
      }
      else
      {
        int v21 = 0;
      }
      int v22 = &v21[8 * v17];
      *(void *)int v22 = *(void *)(v10 - 176);
      double v15 = v22 + 8;
      while (v14 != v16)
      {
        uint64_t v23 = *((void *)v14 - 1);
        v14 -= 8;
        *((void *)v22 - 1) = v23;
        v22 -= 8;
      }
      std::string __p = v22;
      uint64_t v124 = v15;
      char v125 = &v21[8 * v20];
      if (v16) {
        operator delete(v16);
      }
    }
    else
    {
      *(void *)uint64_t v124 = *(void *)(v10 - 176);
      double v15 = v14 + 8;
    }
    uint64_t v124 = v15;
    uint64_t v24 = v4;
    if (v4 == *v6) {
      uint64_t v24 = *(v6 - 1) + 4032;
    }
    BOOL v25 = (long long *)(v24 - 192);
    int v26 = v121;
    if (v121 >= v122)
    {
      unint64_t v36 = (char *)v120;
      unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((v121 - (unsigned char *)v120) >> 6);
      unint64_t v38 = v37 + 1;
      if (v37 + 1 > 0x155555555555555) {
        sub_1001D7FD4();
      }
      if (0x5555555555555556 * ((v122 - (unsigned char *)v120) >> 6) > v38) {
        unint64_t v38 = 0x5555555555555556 * ((v122 - (unsigned char *)v120) >> 6);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v122 - (unsigned char *)v120) >> 6) >= 0xAAAAAAAAAAAAAALL) {
        unint64_t v39 = 0x155555555555555;
      }
      else {
        unint64_t v39 = v38;
      }
      if (v39)
      {
        double v40 = (char *)sub_10017EB28((uint64_t)&v122, v39);
        unint64_t v36 = (char *)v120;
        int v26 = v121;
      }
      else
      {
        double v40 = 0;
      }
      uint64_t v41 = &v40[64 * ((v121 - (unsigned char *)v120) >> 6)];
      long long v42 = *v25;
      long long v43 = v25[1];
      long long v44 = v25[3];
      *((_OWORD *)v41 + 2) = v25[2];
      *((_OWORD *)v41 + 3) = v44;
      *(_OWORD *)uint64_t v41 = v42;
      *((_OWORD *)v41 + 1) = v43;
      long long v45 = v25[4];
      long long v46 = v25[5];
      long long v47 = v25[7];
      *((_OWORD *)v41 + 6) = v25[6];
      *((_OWORD *)v41 + 7) = v47;
      *((_OWORD *)v41 + 4) = v45;
      *((_OWORD *)v41 + 5) = v46;
      long long v48 = v25[8];
      long long v49 = v25[9];
      long long v50 = v25[11];
      *((_OWORD *)v41 + 10) = v25[10];
      *((_OWORD *)v41 + 11) = v50;
      *((_OWORD *)v41 + 8) = v48;
      *((_OWORD *)v41 + 9) = v49;
      if (v26 == v36)
      {
        long long v61 = &v40[192 * v37];
      }
      else
      {
        double v51 = &v40[192 * v37];
        do
        {
          long long v52 = *((_OWORD *)v26 - 12);
          long long v53 = *((_OWORD *)v26 - 11);
          long long v54 = *((_OWORD *)v26 - 9);
          *((_OWORD *)v51 - 10) = *((_OWORD *)v26 - 10);
          *((_OWORD *)v51 - 9) = v54;
          *((_OWORD *)v51 - 12) = v52;
          *((_OWORD *)v51 - 11) = v53;
          long long v55 = *((_OWORD *)v26 - 8);
          long long v56 = *((_OWORD *)v26 - 7);
          long long v57 = *((_OWORD *)v26 - 5);
          *((_OWORD *)v51 - 6) = *((_OWORD *)v26 - 6);
          *((_OWORD *)v51 - 5) = v57;
          *((_OWORD *)v51 - 8) = v55;
          *((_OWORD *)v51 - 7) = v56;
          long long v58 = *((_OWORD *)v26 - 4);
          long long v59 = *((_OWORD *)v26 - 3);
          long long v60 = *((_OWORD *)v26 - 1);
          long long v61 = v51 - 192;
          *((_OWORD *)v51 - 2) = *((_OWORD *)v26 - 2);
          *((_OWORD *)v51 - 1) = v60;
          *((_OWORD *)v51 - 4) = v58;
          *((_OWORD *)v51 - 3) = v59;
          v26 -= 192;
          v51 -= 192;
        }
        while (v26 != v36);
      }
      unsigned int v5 = v41 + 192;
      double v120 = v61;
      __int16 v121 = v41 + 192;
      uint64_t v122 = &v40[192 * v39];
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      long long v27 = *v25;
      long long v28 = *(_OWORD *)(v24 - 176);
      long long v29 = *(_OWORD *)(v24 - 144);
      *((_OWORD *)v121 + 2) = *(_OWORD *)(v24 - 160);
      *((_OWORD *)v26 + 3) = v29;
      *(_OWORD *)int v26 = v27;
      *((_OWORD *)v26 + 1) = v28;
      long long v30 = *(_OWORD *)(v24 - 128);
      long long v31 = *(_OWORD *)(v24 - 112);
      long long v32 = *(_OWORD *)(v24 - 80);
      *((_OWORD *)v26 + 6) = *(_OWORD *)(v24 - 96);
      *((_OWORD *)v26 + 7) = v32;
      *((_OWORD *)v26 + 4) = v30;
      *((_OWORD *)v26 + 5) = v31;
      long long v33 = *(_OWORD *)(v24 - 64);
      long long v34 = *(_OWORD *)(v24 - 48);
      long long v35 = *(_OWORD *)(v24 - 16);
      *((_OWORD *)v26 + 10) = *(_OWORD *)(v24 - 32);
      *((_OWORD *)v26 + 11) = v35;
      *((_OWORD *)v26 + 8) = v33;
      *((_OWORD *)v26 + 9) = v34;
      unsigned int v5 = v26 + 192;
    }
    __int16 v121 = v5;
    uint64_t v7 = *v6;
    if (v4 == *v6)
    {
      uint64_t v62 = *--v6;
      uint64_t v7 = v62;
      uint64_t v4 = v62 + 4032;
    }
    double v63 = *(double *)(v4 - 192);
    v4 -= 192;
    double v8 = v63;
    uint64_t v13 = v4;
    if (v4 == *((void *)&v127 + 1)) {
      goto LABEL_54;
    }
  }
  uint64_t v11 = *(v6 - 1);
  double v12 = *(double *)(v11 + 3840);
  if (v8 - v12 < 5.0)
  {
    uint64_t v13 = v7;
    if (v12 <= *(double *)(a1 + 1992)) {
      goto LABEL_54;
    }
    uint64_t v10 = v11 + 4032;
    goto LABEL_11;
  }
  uint64_t v13 = v7;
LABEL_54:
  if (__p != v124)
  {
    long long v65 = v124 - 8;
    if (v124 - 8 > __p)
    {
      long long v66 = (char *)__p + 8;
      do
      {
        uint64_t v67 = *((void *)v66 - 1);
        *((void *)v66 - 1) = *(void *)v65;
        *(void *)long long v65 = v67;
        v65 -= 8;
        BOOL v68 = v66 >= v65;
        v66 += 8;
      }
      while (!v68);
    }
    int v69 = (double *)v120;
    double v70 = v5 - 192;
    if (v120 != v5 && v70 > v120)
    {
      __int16 v72 = (char *)v120 + 192;
      do
      {
        long long v144 = *((_OWORD *)v72 - 5);
        long long v143 = *((_OWORD *)v72 - 6);
        long long v142 = *((_OWORD *)v72 - 7);
        long long v141 = *((_OWORD *)v72 - 8);
        long long v148 = *((_OWORD *)v72 - 1);
        long long v147 = *((_OWORD *)v72 - 2);
        long long v146 = *((_OWORD *)v72 - 3);
        long long v145 = *((_OWORD *)v72 - 4);
        *(_OWORD *)long long buf = *((_OWORD *)v72 - 12);
        *(_OWORD *)&uint8_t buf[16] = *((_OWORD *)v72 - 11);
        *(_OWORD *)&unsigned char buf[32] = *((_OWORD *)v72 - 10);
        long long v140 = *((_OWORD *)v72 - 9);
        long long v73 = *(_OWORD *)v70;
        long long v74 = *((_OWORD *)v70 + 1);
        long long v75 = *((_OWORD *)v70 + 3);
        *((_OWORD *)v72 - 10) = *((_OWORD *)v70 + 2);
        *((_OWORD *)v72 - 9) = v75;
        *((_OWORD *)v72 - 12) = v73;
        *((_OWORD *)v72 - 11) = v74;
        long long v76 = *((_OWORD *)v70 + 4);
        long long v77 = *((_OWORD *)v70 + 5);
        long long v78 = *((_OWORD *)v70 + 7);
        *((_OWORD *)v72 - 6) = *((_OWORD *)v70 + 6);
        *((_OWORD *)v72 - 5) = v78;
        *((_OWORD *)v72 - 8) = v76;
        *((_OWORD *)v72 - 7) = v77;
        long long v79 = *((_OWORD *)v70 + 8);
        long long v80 = *((_OWORD *)v70 + 9);
        long long v81 = *((_OWORD *)v70 + 11);
        *((_OWORD *)v72 - 2) = *((_OWORD *)v70 + 10);
        *((_OWORD *)v72 - 1) = v81;
        *((_OWORD *)v72 - 4) = v79;
        *((_OWORD *)v72 - 3) = v80;
        long long v82 = *(_OWORD *)buf;
        long long v83 = *(_OWORD *)&buf[16];
        long long v84 = v140;
        *((_OWORD *)v70 + 2) = *(_OWORD *)&buf[32];
        *((_OWORD *)v70 + 3) = v84;
        *(_OWORD *)double v70 = v82;
        *((_OWORD *)v70 + 1) = v83;
        long long v85 = v141;
        long long v86 = v142;
        long long v87 = v144;
        *((_OWORD *)v70 + 6) = v143;
        *((_OWORD *)v70 + 7) = v87;
        *((_OWORD *)v70 + 4) = v85;
        *((_OWORD *)v70 + 5) = v86;
        long long v88 = v145;
        long long v89 = v146;
        long long v90 = v148;
        *((_OWORD *)v70 + 10) = v147;
        *((_OWORD *)v70 + 11) = v90;
        *((_OWORD *)v70 + 8) = v88;
        *((_OWORD *)v70 + 9) = v89;
        v70 -= 192;
        BOOL v68 = v72 >= v70;
        v72 += 192;
      }
      while (!v68);
    }
    if (*v69 - *(double *)(a1 + 1992) > 6.0) {
      sub_101116854(a1 + 48);
    }
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022F3BA0);
    }
    uint64_t v91 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = (v124 - (unsigned char *)__p) >> 3;
      _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEBUG, "Classifying %lu odometer entries", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_1022F3BA0);
      }
      *(_DWORD *)double v130 = 134217984;
      *(void *)&v130[4] = (v124 - (unsigned char *)__p) >> 3;
      __int16 v109 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLStepDistanceFusion::isOdometerQualityUsable(CFAbsoluteTime, BOOL)", "%s\n", v109);
      if (v109 != buf) {
        free(v109);
      }
    }
    sub_101116CA8((double *)(a1 + 48), (uint64_t *)&__p);
    if (*(void *)(a1 + 472) == 1)
    {
      if (*(unsigned char *)(a1 + 2130)) {
        int v92 = 1;
      }
      else {
        int v92 = 3;
      }
    }
    else
    {
      int v92 = *(_DWORD *)(a1 + 152);
    }
    *(_DWORD *)(a1 + 792) = v92;
    *(void *)(a1 + 1992) = *((void *)v121 - 24);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022F3BA0);
    }
    __int16 v94 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
    {
      int v95 = *(_DWORD *)(a1 + 792);
      uint64_t v96 = *(void *)(a1 + 1992);
      uint64_t v97 = *((void *)v121 - 16);
      uint64_t v98 = *((void *)v121 - 18);
      uint64_t v100 = *((void *)v121 - 23);
      uint64_t v99 = *((void *)v121 - 22);
      *(_DWORD *)long long buf = 67110400;
      *(_DWORD *)&uint8_t buf[4] = v95;
      *(_WORD *)&uint8_t buf[8] = 2048;
      *(void *)&buf[10] = v96;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&buf[20] = v97;
      *(_WORD *)&unsigned char buf[28] = 2048;
      *(void *)&buf[30] = v98;
      *(_WORD *)&buf[38] = 2048;
      *(void *)&buf[40] = v100;
      LOWORD(v140) = 2048;
      *(void *)((char *)&v140 + 2) = v99;
      _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEBUG, "OdometerQuality,%d,MostRecentOdometerEntry,timestamp,%.3lf,timestampGps,%.3lf,odometer,%.3lf,deltaDist,%.3lf,deltaDistUnc,%.3lf", buf, 0x3Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_1022F3BA0);
      }
      int v110 = *(_DWORD *)(a1 + 792);
      uint64_t v111 = *(void *)(a1 + 1992);
      uint64_t v112 = *((void *)v121 - 16);
      uint64_t v113 = *((void *)v121 - 18);
      uint64_t v115 = *((void *)v121 - 23);
      uint64_t v114 = *((void *)v121 - 22);
      *(_DWORD *)double v130 = 67110400;
      *(_DWORD *)&v130[4] = v110;
      *(_WORD *)&v130[8] = 2048;
      *(void *)&v130[10] = v111;
      __int16 v131 = 2048;
      uint64_t v132 = v112;
      __int16 v133 = 2048;
      uint64_t v134 = v113;
      __int16 v135 = 2048;
      uint64_t v136 = v115;
      __int16 v137 = 2048;
      uint64_t v138 = v114;
      int v116 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLStepDistanceFusion::isOdometerQualityUsable(CFAbsoluteTime, BOOL)", "%s\n", v116);
      if (v116 != buf) {
        free(v116);
      }
    }
    *(_OWORD *)double v130 = v128;
    uint64_t v101 = *((void *)&v129 + 1);
    if (*((void *)&v129 + 1) != v13)
    {
      __int16 v102 = (void *)v129;
      do
      {
        int v103 = *(_DWORD *)(a1 + 792);
        uint64_t v104 = *(void **)(a1 + 656);
        long long v117 = *(_OWORD *)v130;
        uint64_t v118 = v102;
        uint64_t v119 = v101;
        sub_100D4266C(v104, (uint64_t)&v117, buf);
        uint64_t v105 = *(void *)&buf[24];
        if (*(void *)&buf[24] == **(void **)&buf[16]) {
          uint64_t v105 = *(void *)(*(void *)&buf[16] - 8) + 4032;
        }
        *(_DWORD *)(v105 - 112) = v103;
        if (v101 == *v102)
        {
          uint64_t v106 = *--v102;
          uint64_t v101 = v106 + 4032;
        }
        v101 -= 192;
      }
      while (v101 != v13);
    }
    goto LABEL_95;
  }
LABEL_78:
  uint64_t v93 = *((void *)&v129 + 1);
  if (*((void *)&v129 + 1) == *(void *)v129) {
    uint64_t v93 = *(void *)(v129 - 8) + 4032;
  }
  if (*(double *)(v93 - 192) - *(double *)(a1 + 1992) > 6.0)
  {
    sub_101116854(a1 + 48);
    *(_DWORD *)(a1 + 792) = 0;
  }
LABEL_95:
  int v107 = *(_DWORD *)(a1 + 792);
  if ((a2 & 1) != 0 || sub_100087EE8(a1 + 160)) {
    BOOL v64 = (v107 - 1) < 2;
  }
  else {
    BOOL v64 = v107 == 1;
  }
  if (v120)
  {
    __int16 v121 = (char *)v120;
    operator delete(v120);
  }
  if (__p)
  {
    uint64_t v124 = (char *)__p;
    operator delete(__p);
  }
  return v64;
}

void sub_100D40924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D40968(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(uint64_t **)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  BOOL v3 = (long long *)(a2 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  if (v5 == v6)
  {
    int64_t v7 = 0;
  }
  else
  {
    int64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *v4) >> 6)
       + 2 * ((void)v4 - *(void *)(a3 + 16))
       + 0x3333333333333333 * ((v6 - **(void **)(a3 + 16)) >> 6);
    if (v7 > 3) {
      int64_t v7 = 4;
    }
  }
  long long v14 = *v3;
  sub_1000BACE4((uint64_t **)&v14, -v7);
  if (v5 == *((void *)&v14 + 1)) {
    return 1;
  }
  uint64_t v8 = *v4;
  while (v5 != v8)
  {
    if (*(_DWORD *)(v5 - 104)) {
      BOOL v9 = 1;
    }
    else {
      BOOL v9 = (*(unsigned char *)(v5 - 160) & 0xFD) == 1;
    }
    if (v9) {
      return 0;
    }
LABEL_19:
    v5 -= 320;
    if (v5 == *((void *)&v14 + 1)) {
      return 1;
    }
  }
  uint64_t v10 = *--v4;
  uint64_t v8 = v10;
  int v11 = *(unsigned char *)(v10 + 4960) & 0xFD;
  if (*(_DWORD *)(v10 + 5016)) {
    BOOL v12 = 1;
  }
  else {
    BOOL v12 = v11 == 1;
  }
  if (!v12)
  {
    uint64_t v5 = v8 + 5120;
    goto LABEL_19;
  }
  return 0;
}

uint64_t sub_100D40A70(uint64_t a1, char a2, char a3, double *a4, double *a5, double a6)
{
  long long v89 = 0u;
  long long v90 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  BOOL v12 = (void *)(a1 + 528);
  if (sub_1001856E8(a1 + 528, (uint64_t)&v89, &v87, a6))
  {
    *(_OWORD *)long long buf = 0u;
    long long v94 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    uint64_t result = (*(uint64_t (**)(void, uint8_t *, long long *, double))(**(void **)(a1 + 656) + 16))(*(void *)(a1 + 656), buf, &v91, a6);
    if (!result) {
      return result;
    }
    uint64_t v14 = *((void *)&v94 + 1);
    double v15 = (void *)v94;
    uint64_t v16 = *((void *)&v92 + 1);
    if (*((void *)&v94 + 1) != *((void *)&v92 + 1))
    {
      char v81 = a3;
      long long v80 = a4;
      long long v82 = a5;
      uint64_t v17 = *(void *)v94;
      uint64_t v18 = *((void *)&v94 + 1);
      uint64_t v19 = (void *)v94;
      while (1)
      {
        uint64_t v20 = v18;
        if (v18 == v17) {
          uint64_t v20 = *(v19 - 1) + 4032;
        }
        if (*(double *)(v20 - 192) <= *(double *)(a1 + 2000)) {
          break;
        }
        int v21 = *(_DWORD *)(v20 - 112);
        if ((a2 & 1) != 0 || sub_100087EE8(a1 + 160))
        {
          if ((v21 - 1) >= 2) {
            break;
          }
        }
        else if (v21 != 1)
        {
          break;
        }
        uint64_t v22 = v14;
        if (v14 == *v15) {
          uint64_t v22 = *(v15 - 1) + 4032;
        }
        double v23 = *(double *)(v20 - 128);
        if (v23 <= 0.0 || (double v24 = *(double *)(v22 - 128), v24 <= 0.0)) {
          double v25 = *(double *)(v22 - 192) - *(double *)(v20 - 192);
        }
        else {
          double v25 = v24 - v23;
        }
        if (fabs(v25) > 15.0 || *(double *)(v20 - 136) <= 0.0 || *(double *)(v20 - 152) <= 0.2) {
          break;
        }
        uint64_t v17 = *v19;
        if (v18 == *v19)
        {
          uint64_t v26 = *--v19;
          uint64_t v17 = v26;
          uint64_t v18 = v26 + 4032;
        }
        v18 -= 192;
        if (v18 == v16)
        {
          uint64_t v18 = v16;
          break;
        }
      }
      a4 = v80;
      uint64_t v16 = *((void *)&v92 + 1);
      double v15 = v19;
      uint64_t v14 = v18;
      a5 = v82;
      a3 = v81;
    }
    if (v14 != v16)
    {
      uint64_t v28 = *((void *)&v94 + 1);
      uint64_t v27 = v94;
      uint64_t v29 = *(void *)v94;
      uint64_t v30 = *((void *)&v94 + 1);
      if (*((void *)&v94 + 1) == *(void *)v94) {
        uint64_t v30 = *(void *)(v94 - 8) + 4032;
      }
      uint64_t v31 = v14;
      if (v14 == *v15) {
        uint64_t v31 = *(v15 - 1) + 4032;
      }
      double v32 = *(double *)(v30 - 128);
      if (v32 <= 0.0 || (double v33 = *(double *)(v31 - 128), v33 <= 0.0)) {
        double v34 = *(double *)(v31 - 192) - *(double *)(v30 - 192);
      }
      else {
        double v34 = v33 - v32;
      }
      if (fabs(v34) > 15.0)
      {
        if (v14 == *((void *)&v94 + 1))
        {
          double v41 = NAN;
        }
        else
        {
          double v38 = 0.0;
          do
          {
            if (v28 == v29)
            {
              uint64_t v40 = *(void *)(v27 - 8);
              v27 -= 8;
              uint64_t v29 = v40;
              unint64_t v39 = (double *)(v40 + 3880);
              uint64_t v28 = v40 + 4032;
            }
            else
            {
              unint64_t v39 = (double *)(v28 - 152);
            }
            double v38 = v38 + *v39;
            v28 -= 192;
          }
          while (v28 != v14);
          double v41 = v38
              / (double)(21 * ((uint64_t)(v94 - (void)v15) >> 3)
                       - 0x5555555555555555 * ((uint64_t)(*((void *)&v94 + 1) - *(void *)v94) >> 6)
                       + 0x5555555555555555 * ((v14 - *v15) >> 6));
        }
        v83[0] = v89;
        v83[1] = v90;
        sub_100D42AF0(v12, (uint64_t)v83, &v84);
        uint64_t v42 = v86;
        if (v86 == *v85) {
          uint64_t v42 = *(v85 - 1) + 5120;
        }
        *(double *)(v42 - 80) = v41;
        if (a3) {
          return 1;
        }
        uint64_t v43 = *((void *)&v90 + 1);
        if (*((void *)&v90 + 1) != *((void *)&v88 + 1))
        {
          int v44 = 0;
          uint64_t v45 = v90;
          uint64_t v46 = *(void *)v90;
          uint64_t v47 = *((void *)&v90 + 1);
          long long v48 = (void *)v90;
          while (1)
          {
            uint64_t v49 = v47;
            if (v47 == v46) {
              uint64_t v49 = *(v48 - 1) + 5120;
            }
            if (*(double *)(v49 - 240) <= 0.0) {
              break;
            }
            BOOL v50 = vabdd_f64(*(double *)(v49 - 320), a6) > 120.0 || *(double *)(v49 - 80) == -1.0;
            if (v50 || v44) {
              break;
            }
            if (v47 == v46)
            {
              uint64_t v51 = *--v48;
              uint64_t v46 = v51;
              uint64_t v47 = v51 + 5120;
            }
            int v44 = *(unsigned __int8 *)(v49 - 72);
            v47 -= 320;
            if (v47 == *((void *)&v88 + 1))
            {
              uint64_t v47 = *((void *)&v88 + 1);
              break;
            }
          }
          if (v47 != *((void *)&v90 + 1))
          {
            uint64_t v52 = *(void *)v90;
            int64_t v53 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v90 + 1) - *(void *)v90) >> 6)
                + 2 * (v90 - (void)v48)
                + 0x3333333333333333 * ((v47 - *v48) >> 6);
            if (v53 >= 6)
            {
              double v54 = (double)v53;
              double v55 = 0.0;
              uint64_t v56 = *(void *)v90;
              uint64_t v57 = *((void *)&v90 + 1);
              uint64_t v58 = v90;
              do
              {
                if (v57 == v56)
                {
                  uint64_t v60 = *(void *)(v58 - 8);
                  v58 -= 8;
                  uint64_t v56 = v60;
                  long long v59 = (double *)(v60 + 4880);
                  uint64_t v57 = v60 + 5120;
                }
                else
                {
                  long long v59 = (double *)(v57 - 240);
                }
                double v55 = v55 + 1.0 / *v59;
                v57 -= 320;
              }
              while (v57 != v47);
              double v61 = 0.0;
              uint64_t v62 = *(void *)v90;
              uint64_t v63 = *((void *)&v90 + 1);
              uint64_t v64 = v90;
              double v65 = v55 / v54;
              do
              {
                if (v63 == v62)
                {
                  uint64_t v66 = *(void *)(v64 - 8);
                  v64 -= 8;
                  uint64_t v62 = v66;
                  double v61 = v61 + (1.0 / *(double *)(v66 + 4880) - v65) * (1.0 / *(double *)(v66 + 4880) - v65);
                  uint64_t v63 = v66 + 5120;
                }
                else
                {
                  double v61 = v61 + (1.0 / *(double *)(v63 - 240) - v65) * (1.0 / *(double *)(v63 - 240) - v65);
                }
                v63 -= 320;
              }
              while (v63 != v47);
              *a5 = sqrt(v61 / v54);
              double v67 = 0.0;
              uint64_t v68 = v52;
              uint64_t v69 = v43;
              uint64_t v70 = v45;
              do
              {
                if (v69 == v68)
                {
                  uint64_t v72 = *(void *)(v70 - 8);
                  v70 -= 8;
                  uint64_t v68 = v72;
                  uint64_t v71 = (double *)(v72 + 5040);
                  uint64_t v69 = v72 + 5120;
                }
                else
                {
                  uint64_t v71 = (double *)(v69 - 80);
                }
                double v67 = v67 + *v71;
                v69 -= 320;
              }
              while (v69 != v47);
              double v73 = 0.0;
              uint64_t v74 = v52;
              uint64_t v75 = v43;
              uint64_t v76 = v45;
              double v77 = v67 / v54;
              do
              {
                if (v75 == v74)
                {
                  uint64_t v78 = *(void *)(v76 - 8);
                  v76 -= 8;
                  uint64_t v74 = v78;
                  double v73 = v73 + (*(double *)(v78 + 5040) - v77) * (*(double *)(v78 + 5040) - v77);
                  uint64_t v75 = v78 + 5120;
                }
                else
                {
                  double v73 = v73 + (*(double *)(v75 - 80) - v77) * (*(double *)(v75 - 80) - v77);
                }
                v75 -= 320;
              }
              while (v75 != v47);
              *a4 = sqrt(v73 / v54);
              if (v43 == v52) {
                uint64_t v43 = *(void *)(v45 - 8) + 5120;
              }
              double v79 = fmax(sub_1001BF26C(1.5, 0.15, 3.5, 0.35, *(double *)(v43 - 80)), 0.15);
              if (v79 > 0.35) {
                double v79 = 0.35;
              }
              return *a4 < *a5 + v79;
            }
          }
        }
      }
    }
    return 0;
  }
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_1022F3BA0);
  }
  long long v35 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    *(double *)&uint8_t buf[4] = a6;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_FAULT, "StepCountBuffer lookup time not successful,%0.3f", buf, 0xCu);
  }
  BOOL v36 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v36)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022F3BA0);
    }
    LODWORD(v91) = 134217984;
    *(double *)((char *)&v91 + 4) = a6;
    unint64_t v37 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLStepDistanceFusion::shouldUseOdometerPace(CFAbsoluteTime, BOOL, BOOL, double &, double &)", "%s\n", v37);
    if (v37 != (char *)buf) {
      free(v37);
    }
    return 0;
  }
  return result;
}

BOOL sub_100D411CC(uint64_t a1, uint64_t a2)
{
  if (!(*(unsigned int (**)(void, uint64_t *, double))(**(void **)(a1 + 656) + 24))(*(void *)(a1 + 656), &v5, *(double *)a2))return 0; {
  return v6 > 6.7056 && *(unsigned char *)(a2 + 160) != 0 || v6 > 13.4112;
  }
}

void sub_100D41264(uint64_t a1, void **a2, uint64_t a3, char a4, double a5, double a6)
{
  BOOL v12 = *(void **)(a3 + 16);
  uint64_t v13 = *(void *)(a3 + 24);
  if (v13 != *v12)
  {
    uint64_t v14 = v13 - 320;
    uint64_t v15 = *(void *)(v13 - 280);
    uint64_t v16 = *(void *)(v13 - 240);
    memset(v92, 0, sizeof(v92));
    long long v90 = 0u;
    long long v91 = 0u;
    long long v88 = 0u;
    memset(v89, 0, sizeof(v89));
    long long v87 = 0u;
    double v17 = a6 + (*(double *)(v13 - 280) - a6) * a5;
    double v18 = *(double *)(v13 - 240) / a5;
    if ((a4 & 1) == 0) {
      goto LABEL_7;
    }
LABEL_5:
    char v21 = 1;
    int v22 = 4;
    goto LABEL_8;
  }
  uint64_t v19 = *(v12 - 1);
  uint64_t v15 = *(void *)(v19 + 4840);
  uint64_t v16 = *(void *)(v19 + 4880);
  memset(v92, 0, sizeof(v92));
  long long v90 = 0u;
  long long v91 = 0u;
  long long v88 = 0u;
  memset(v89, 0, sizeof(v89));
  long long v87 = 0u;
  uint64_t v20 = *(v12 - 1);
  uint64_t v14 = v20 + 4800;
  double v17 = a6 + (*(double *)(v20 + 4840) - a6) * a5;
  double v18 = *(double *)(v20 + 4880) / a5;
  if (a4) {
    goto LABEL_5;
  }
  uint64_t v13 = v20 + 5120;
LABEL_7:
  char v21 = *(unsigned char *)(v13 - 146);
  int v22 = 1;
LABEL_8:
  long long v23 = *(_OWORD *)(v14 + 8);
  long long v24 = *(_OWORD *)(v14 + 24);
  v89[0] = *(_OWORD *)(v14 + 40);
  long long v25 = *(_OWORD *)(v14 + 56);
  long long v26 = *(_OWORD *)(v14 + 88);
  long long v27 = *(_OWORD *)(v14 + 104);
  v89[2] = *(_OWORD *)(v14 + 72);
  long long v28 = *(_OWORD *)(v14 + 136);
  long long v29 = *(_OWORD *)(v14 + 152);
  long long v30 = *(_OWORD *)(v14 + 168);
  long long v31 = *(_OWORD *)(v14 + 120);
  long long v87 = v23;
  long long v88 = v24;
  long long v90 = v26;
  long long v91 = v27;
  v89[1] = v25;
  v92[2] = v29;
  v92[3] = v30;
  v92[0] = v31;
  v92[1] = v28;
  *(double *)long long v89 = v17;
  *((double *)&v89[2] + 1) = v18;
  LOBYTE(v92[0]) = a4;
  BYTE1(v92[0]) = sub_100087A0C(a1, v22);
  BYTE6(v92[3]) = v21;
  DWORD2(v92[3]) = v22;
  if (*(unsigned char *)(a1 + 2129))
  {
    sub_10173CBA8((uint64_t)&v119);
    double v33 = *(void **)(a3 + 16);
    uint64_t v32 = *(void *)(a3 + 24);
    if (v32 == *v33) {
      uint64_t v32 = *(v33 - 1) + 5120;
    }
    int v34 = *(unsigned __int8 *)(v32 - 146);
    v124 |= 0x200u;
    int v123 = v34;
    sub_10068D3E4((uint64_t)&v87, (int8x16_t *)buf);
    BOOL v36 = *(void **)(a3 + 16);
    uint64_t v35 = *(void *)(a3 + 24);
    if (v35 == *v36) {
      uint64_t v35 = *(v36 - 1) + 5120;
    }
    sub_10068D5D8(v35 - 136, (uint64_t)&v85);
    operator new();
  }
  uint64_t v78 = v16;
  double v38 = *(void **)(a3 + 16);
  uint64_t v37 = *(void *)(a3 + 24);
  if (v37 == *v38) {
    uint64_t v37 = *(v38 - 1) + 5120;
  }
  uint64_t v39 = *(void *)(v37 - 320);
  long long v84 = v88;
  long long v85 = *(_OWORD *)((char *)v89 + 8);
  long long v86 = *(_OWORD *)((char *)&v89[1] + 8);
  uint64_t v40 = *(void *)&v89[0];
  uint64_t v41 = *((void *)&v89[2] + 1);
  long long v82 = v90;
  long long v83 = v91;
  int v42 = LOBYTE(v92[0]);
  int v43 = BYTE1(v92[0]);
  int v122 = *(_DWORD *)((char *)&v92[3] + 2);
  long long v120 = *(_OWORD *)((char *)&v92[1] + 2);
  long long v121 = *(_OWORD *)((char *)&v92[2] + 2);
  long long v119 = *(_OWORD *)((char *)v92 + 2);
  int v44 = BYTE6(v92[3]);
  char v45 = BYTE7(v92[3]);
  int v46 = DWORD2(v92[3]);
  int v47 = HIDWORD(v92[3]);
  long long v48 = (char *)a2[2];
  uint64_t v49 = (char *)a2[1];
  uint64_t v79 = *(void *)&v89[0];
  uint64_t v80 = *((void *)&v89[2] + 1);
  uint64_t v81 = *((void *)&v87 + 1);
  if (v49 >= v48)
  {
    uint64_t v77 = v15;
    unint64_t v55 = 0xAAAAAAAAAAAAAAABLL * ((v49 - (unsigned char *)*a2) >> 6);
    unint64_t v56 = v55 + 1;
    if (v55 + 1 > 0x155555555555555) {
      sub_1001D7FD4();
    }
    unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * ((v48 - (unsigned char *)*a2) >> 6);
    if (2 * v57 > v56) {
      unint64_t v56 = 2 * v57;
    }
    if (v57 >= 0xAAAAAAAAAAAAAALL) {
      unint64_t v58 = 0x155555555555555;
    }
    else {
      unint64_t v58 = v56;
    }
    if (v58) {
      long long v59 = (char *)sub_10017EB28((uint64_t)(a2 + 2), v58);
    }
    else {
      long long v59 = 0;
    }
    uint64_t v60 = &v59[192 * v55];
    double v61 = &v59[192 * v58];
    *(void *)uint64_t v60 = v87;
    *((void *)v60 + 1) = v81;
    *((_OWORD *)v60 + 1) = v84;
    *((void *)v60 + 4) = v79;
    *(_OWORD *)(v60 + 40) = v85;
    *(_OWORD *)(v60 + 56) = v86;
    *((void *)v60 + 9) = v80;
    *((_OWORD *)v60 + 5) = v82;
    *((_OWORD *)v60 + 6) = v83;
    v60[112] = v42;
    v60[113] = v43;
    long long v62 = v119;
    long long v63 = v120;
    long long v64 = v121;
    *(_DWORD *)(v60 + 162) = v122;
    *(_OWORD *)(v60 + 146) = v64;
    *(_OWORD *)(v60 + 130) = v63;
    *(_OWORD *)(v60 + 114) = v62;
    v60[166] = v44;
    v60[167] = v45;
    *((_DWORD *)v60 + 42) = v46;
    *((_DWORD *)v60 + 43) = v47;
    *((void *)v60 + 22) = v39;
    v60[184] = a4;
    v60[185] = a4;
    *(_DWORD *)(v60 + 186) = 0;
    *((_WORD *)v60 + 95) = 0;
    double v54 = v60 + 192;
    uint64_t v66 = (char *)*a2;
    double v65 = (char *)a2[1];
    if (v65 == *a2)
    {
      uint64_t v15 = v77;
    }
    else
    {
      uint64_t v15 = v77;
      do
      {
        long long v67 = *((_OWORD *)v65 - 12);
        long long v68 = *((_OWORD *)v65 - 11);
        long long v69 = *((_OWORD *)v65 - 9);
        *((_OWORD *)v60 - 10) = *((_OWORD *)v65 - 10);
        *((_OWORD *)v60 - 9) = v69;
        *((_OWORD *)v60 - 12) = v67;
        *((_OWORD *)v60 - 11) = v68;
        long long v70 = *((_OWORD *)v65 - 8);
        long long v71 = *((_OWORD *)v65 - 7);
        long long v72 = *((_OWORD *)v65 - 5);
        *((_OWORD *)v60 - 6) = *((_OWORD *)v65 - 6);
        *((_OWORD *)v60 - 5) = v72;
        *((_OWORD *)v60 - 8) = v70;
        *((_OWORD *)v60 - 7) = v71;
        long long v73 = *((_OWORD *)v65 - 4);
        long long v74 = *((_OWORD *)v65 - 3);
        long long v75 = *((_OWORD *)v65 - 1);
        *((_OWORD *)v60 - 2) = *((_OWORD *)v65 - 2);
        *((_OWORD *)v60 - 1) = v75;
        *((_OWORD *)v60 - 4) = v73;
        *((_OWORD *)v60 - 3) = v74;
        v60 -= 192;
        v65 -= 192;
      }
      while (v65 != v66);
      double v65 = (char *)*a2;
    }
    *a2 = v60;
    a2[1] = v54;
    a2[2] = v61;
    if (v65) {
      operator delete(v65);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v49 = v87;
    *((_OWORD *)v49 + 1) = v84;
    *((void *)v49 + 4) = v40;
    long long v50 = v86;
    *(_OWORD *)(v49 + 40) = v85;
    *(_OWORD *)(v49 + 56) = v50;
    *((void *)v49 + 9) = v41;
    *((_OWORD *)v49 + 5) = v82;
    *((_OWORD *)v49 + 6) = v83;
    v49[112] = v42;
    v49[113] = v43;
    long long v51 = v119;
    long long v52 = v120;
    long long v53 = v121;
    *(_DWORD *)(v49 + 162) = v122;
    *(_OWORD *)(v49 + 146) = v53;
    *(_OWORD *)(v49 + 130) = v52;
    *(_OWORD *)(v49 + 114) = v51;
    v49[166] = v44;
    v49[167] = v45;
    *((_DWORD *)v49 + 42) = v46;
    *((_DWORD *)v49 + 43) = v47;
    *((void *)v49 + 22) = v39;
    v49[184] = a4;
    v49[185] = a4;
    *(_DWORD *)(v49 + 186) = 0;
    double v54 = v49 + 192;
    *((_WORD *)v49 + 95) = 0;
  }
  a2[1] = v54;
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_1022F3BA0);
  }
  uint64_t v76 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 68291843;
    int v94 = 0;
    __int16 v95 = 2082;
    uint64_t v96 = "";
    __int16 v97 = 2049;
    uint64_t v98 = v81;
    __int16 v99 = 2049;
    uint64_t v100 = v79;
    __int16 v101 = 2049;
    uint64_t v102 = v80;
    __int16 v103 = 1025;
    int v104 = v42;
    __int16 v105 = 1025;
    int v106 = v43;
    __int16 v107 = 1025;
    int v108 = v44;
    __int16 v109 = 1025;
    int v110 = v46;
    __int16 v111 = 2049;
    uint64_t v112 = v15;
    __int16 v113 = 2049;
    uint64_t v114 = v78;
    __int16 v115 = 2049;
    double v116 = a5;
    __int16 v117 = 2049;
    double v118 = a6;
    _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"ExtendedMode\", \"startTime\":\"%{private}f\", \"distDeltaFused\":\"%{private}.3f\", \"paceFused\":\"%{private}.3f\", \"isOdometerDistance\":%{private}hhd, \"isOdometerPace\":%{private}hhd, \"distanceSource\":%{private}d, \"paceSource\":%{private}d, \"distDeltaCalPed\":\"%{private}.3f\", \"paceCalPed\":\"%{private}.3f\", \"gain\":\"%{private}.3f\", \"nonGainDist\":\"%{private}.3f\"}", buf, 0x70u);
  }
}

void sub_100D41990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  PB::Base::~Base((PB::Base *)&a21);
  sub_10173A4E4((PB::Base *)&a53);
  sub_10173CC80((PB::Base *)(v53 - 240));
  _Unwind_Resume(a1);
}

BOOL sub_100D419EC(void *a1, _OWORD *a2, double a3)
{
  double v29 = a3;
  unint64_t v5 = a1[7];
  unint64_t v6 = v5 + a1[8];
  uint64_t v7 = a1[4];
  unint64_t v8 = v7 + 8 * (v6 / 0x15);
  if (a1[5] == v7)
  {
    unint64_t v9 = 0;
    unint64_t v11 = 0;
    uint64_t v10 = (void *)(v7 + 8 * (v5 / 0x15));
  }
  else
  {
    unint64_t v9 = *(void *)(v7 + 8 * (v6 / 0x15)) + 192 * (v6 % 0x15);
    uint64_t v10 = (void *)(v7 + 8 * (v5 / 0x15));
    unint64_t v11 = *v10 + 192 * (v5 % 0x15);
  }
  v31.n128_u64[0] = v8;
  v31.n128_u64[1] = v9;
  unint64_t v32 = v8;
  unint64_t v33 = v9;
  v30[0] = v10;
  v30[1] = v11;
  v30[2] = v10;
  void v30[3] = v11;
  sub_100D43344(&v31, (uint64_t)v30, &v29, &v26);
  uint64_t v12 = a1[4];
  if (a1[5] == v12) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = *(void *)(v12 + 8 * (a1[7] / 0x15uLL)) + 192 * (a1[7] % 0x15uLL);
  }
  uint64_t v14 = v28;
  if (v13 != v28)
  {
    if (*v27 == v28) {
      uint64_t v15 = *(v27 - 1) + 4032;
    }
    else {
      uint64_t v15 = v28;
    }
    long long v16 = *(_OWORD *)(v15 - 192);
    long long v17 = *(_OWORD *)(v15 - 176);
    long long v18 = *(_OWORD *)(v15 - 144);
    a2[2] = *(_OWORD *)(v15 - 160);
    a2[3] = v18;
    *a2 = v16;
    a2[1] = v17;
    long long v19 = *(_OWORD *)(v15 - 128);
    long long v20 = *(_OWORD *)(v15 - 112);
    long long v21 = *(_OWORD *)(v15 - 80);
    a2[6] = *(_OWORD *)(v15 - 96);
    a2[7] = v21;
    a2[4] = v19;
    a2[5] = v20;
    long long v22 = *(_OWORD *)(v15 - 64);
    long long v23 = *(_OWORD *)(v15 - 48);
    long long v24 = *(_OWORD *)(v15 - 16);
    a2[10] = *(_OWORD *)(v15 - 32);
    a2[11] = v24;
    a2[8] = v22;
    a2[9] = v23;
  }
  return v13 != v14;
}

BOOL sub_100D41B84(void *a1, _OWORD *a2, double a3)
{
  double v27 = a3;
  unint64_t v5 = a1[7];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  unint64_t v8 = (void *)(v6 + 8 * (v5 / 0x15));
  if (v7 == v6)
  {
    unint64_t v9 = 0;
    uint64_t v12 = 0;
    unint64_t v11 = (void *)(v6 + 8 * ((a1[8] + v5) / 0x15));
  }
  else
  {
    unint64_t v9 = (double *)(*(void *)(v6 + 8 * (v5 / 0x15)) + 192 * (v5 % 0x15));
    unint64_t v10 = a1[8] + v5;
    unint64_t v11 = (void *)(v6 + 8 * (v10 / 0x15));
    uint64_t v12 = (double *)(*v11 + 192 * (v10 % 0x15));
  }
  sub_100D43468(v8, v9, v11, v12, &v27);
  uint64_t v14 = a1[4];
  if (a1[5] == v14)
  {
    unint64_t v16 = 0;
  }
  else
  {
    unint64_t v15 = a1[8] + a1[7];
    unint64_t v16 = *(void *)(v14 + 8 * (v15 / 0x15)) + 192 * (v15 % 0x15);
  }
  if ((long long *)v16 != v13)
  {
    long long v17 = *v13;
    long long v18 = v13[1];
    long long v19 = v13[3];
    a2[2] = v13[2];
    a2[3] = v19;
    *a2 = v17;
    a2[1] = v18;
    long long v20 = v13[4];
    long long v21 = v13[5];
    long long v22 = v13[7];
    a2[6] = v13[6];
    a2[7] = v22;
    a2[4] = v20;
    a2[5] = v21;
    long long v23 = v13[8];
    long long v24 = v13[9];
    long long v25 = v13[11];
    a2[10] = v13[10];
    a2[11] = v25;
    a2[8] = v23;
    a2[9] = v24;
  }
  return v16 != (void)v13;
}

BOOL sub_100D41CEC(void *a1, void *a2, double a3)
{
  double v20 = a3;
  unint64_t v5 = a1[7];
  unint64_t v6 = v5 + a1[8];
  uint64_t v7 = a1[4];
  unint64_t v8 = (void *)(v7 + 8 * (v6 >> 4));
  if (a1[5] == v7)
  {
    uint64_t v9 = 0;
    uint64_t v11 = 0;
    unint64_t v10 = (void *)(v7 + 8 * (v5 >> 4));
  }
  else
  {
    uint64_t v9 = *v8 + 320 * (v6 & 0xF);
    unint64_t v10 = (void *)(v7 + 8 * (v5 >> 4));
    uint64_t v11 = *v10 + 320 * (a1[7] & 0xFLL);
  }
  v22[0] = v8;
  v22[1] = v9;
  v22[2] = v8;
  v22[3] = v9;
  v21[0] = v10;
  v21[1] = v11;
  v21[2] = v10;
  v21[3] = v11;
  sub_100D4354C((uint64_t)v22, (uint64_t)v21, &v20, &v17);
  uint64_t v12 = a1[4];
  if (a1[5] == v12) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = *(void *)(v12 + ((a1[7] >> 1) & 0x7FFFFFFFFFFFFFF8)) + 320 * (a1[7] & 0xFLL);
  }
  uint64_t v14 = v19;
  if (v13 != v19)
  {
    if (*v18 == v19) {
      uint64_t v15 = *(v18 - 1) + 5120;
    }
    else {
      uint64_t v15 = v19;
    }
    memcpy(a2, (const void *)(v15 - 320), 0x140uLL);
  }
  return v13 != v14;
}

BOOL sub_100D41E1C(void *a1, void *a2, double a3)
{
  double v19 = a3;
  unint64_t v5 = a1[7];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  unint64_t v8 = (uint64_t *)(v6 + 8 * (v5 >> 4));
  if (v7 == v6)
  {
    uint64_t v9 = 0;
    uint64_t v12 = 0;
    uint64_t v11 = (char *)(v6 + 8 * ((a1[8] + v5) >> 4));
  }
  else
  {
    uint64_t v9 = *v8 + 320 * (v5 & 0xF);
    unint64_t v10 = a1[8] + v5;
    uint64_t v11 = (char *)(v6 + 8 * (v10 >> 4));
    uint64_t v12 = *(void *)v11 + 320 * (v10 & 0xF);
  }
  sub_100D43678(v8, v9, v11, v12, &v19);
  uint64_t v14 = (uint64_t)v13;
  uint64_t v15 = a1[4];
  if (a1[5] == v15)
  {
    uint64_t v17 = 0;
  }
  else
  {
    unint64_t v16 = a1[8] + a1[7];
    uint64_t v17 = *(void *)(v15 + ((v16 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 320 * (v16 & 0xF);
  }
  if ((const void *)v17 != v13) {
    memcpy(a2, v13, 0x140uLL);
  }
  return v17 != v14;
}

BOOL sub_100D41F1C(uint64_t a1, double *a2, double a3, double a4)
{
  double v11 = 0.0;
  double v12 = 0.0;
  *a2 = 0.0;
  if (a3 <= a4)
  {
    if (a3 != a4)
    {
      BOOL result = sub_100D4272C(a1, &v12, a3);
      if (!result) {
        return result;
      }
      BOOL result = sub_100D4272C(a1, &v11, a4);
      if (!result) {
        return result;
      }
      *a2 = v11 - v12;
    }
    return 1;
  }
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_1022F3BA0);
  }
  uint64_t v6 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134349312;
    double v18 = a3;
    __int16 v19 = 2050;
    double v20 = a4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Time rolled back! t1,%{public}f,t2,%{public}f", buf, 0x16u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022F3BA0);
    }
    int v13 = 134349312;
    double v14 = a3;
    __int16 v15 = 2050;
    double v16 = a4;
    unint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLStepDistanceFusion::getPedometerDistance(CFAbsoluteTime, CFAbsoluteTime, double &) const", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
    return 0;
  }
  return result;
}

uint64_t sub_100D42140@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  if (*(void *)(result + 520))
  {
    BOOL v3 = (int64x2_t *)result;
    uint64_t v4 = result + 480;
    uint64_t v5 = result + 528;
    do
    {
      double v6 = *(double *)(*(void *)(v3[30].i64[1] + (((unint64_t)v3[32].i64[0] >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (v3[32].i64[0] & 0x1FF));
      long long v9 = 0u;
      long long v10 = 0u;
      memset(v8, 0, sizeof(v8));
      if (sub_1001856E8(v5, (uint64_t)&v9, v8, v6))
      {
        v7[0] = v9;
        v7[1] = v10;
        sub_100D41264((uint64_t)v3, (void **)a2, (uint64_t)v7, 0, 1.0, 0.0);
      }
      unsigned char v3[32] = vaddq_s64(v3[32], (int64x2_t)xmmword_101D0A740);
      BOOL result = sub_10007F07C(v4, 1);
    }
    while (v3[32].i64[1]);
  }
  return result;
}

void sub_100D4221C(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D4223C(uint64_t a1, int *a2)
{
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_1022F3BA0);
  }
  uint64_t v4 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *a2;
    int v6 = a2[2];
    *(_DWORD *)long long buf = 67109376;
    int v11 = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "MotionOverride: action,%d,type,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022F3BA0);
    }
    long long v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLStepDistanceFusion::feedSession(const CLMotionStateMediator_Type::MotionOverride &)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  sub_100103240();
  if (sub_10010145C()) {
    sub_100E6B82C(*(std::mutex **)(a1 + 2136), a2);
  }
  char v7 = sub_100184BB4(a1);
  memcpy((void *)(a1 + 160), a2, 0x140uLL);
  uint64_t result = sub_100184BB4(a1);
  if ((v7 & 1) == 0)
  {
    if (result)
    {
      *(void *)(a1 + 2104) = 0;
      *(_OWORD *)(a1 + 2088) = 0u;
      *(void *)(a1 + 2112) = 0xBFF0000000000000;
      *(void *)(a1 + 2016) = 0x300000000;
      return sub_1001BEB94(a1 + 800);
    }
  }
  return result;
}

void sub_100D42484(uint64_t a1, uint64_t a2)
{
}

void sub_100D4248C(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 2129))
  {
    sub_101752F3C((uint64_t)v5);
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    int v4 = *((unsigned __int8 *)a2 + 16);
    int v8 = *((unsigned __int8 *)a2 + 17);
    int v9 = v4;
    LOBYTE(v4) = *((unsigned char *)a2 + 18);
    v11 |= 0x3Eu;
    char v10 = v4;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1022F3C50);
    }
    if (qword_10248AF90) {
      operator new();
    }
    PB::Base::~Base((PB::Base *)v5);
  }
  sub_1010A9984(a1 + 800, (long long *)a2);
}

void sub_100D425B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  PB::Base::~Base((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100D425E0(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  long long v6 = a2[2];
  *(_OWORD *)(a1 + 2068) = *(long long *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 2040) = v5;
  *(_OWORD *)(a1 + 2056) = v6;
  *(_OWORD *)(a1 + 2024) = v4;
  sub_1010A99D8(a1 + 800, (uint64_t)a2);
  sub_100103240();
  if ((sub_10010145C() & 1) != 0 || (sub_100103240(), sub_100106424()))
  {
    uint64_t v7 = *(void *)(a1 + 2136);
    sub_100E6B784(v7, a2);
  }
}

void *sub_100D42664(uint64_t a1, void *a2)
{
  return sub_1000980A4((void *)(a1 + 24), a2);
}

void *sub_100D4266C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v3 = a1[7] + a1[8];
  uint64_t v4 = a1[4];
  long long v5 = (void *)(v4 + 8 * (v3 / 0x15));
  if (a1[5] == v4)
  {
    unint64_t v6 = 0;
    *a3 = v5;
    a3[1] = 0;
  }
  else
  {
    unint64_t v6 = *v5 + 192 * (v3 % 0x15);
    *a3 = v5;
    a3[1] = v6;
  }
  a3[2] = v5;
  uint64_t v7 = a3 + 2;
  a3[3] = v6;
  uint64_t v8 = *(void *)(a2 + 24);
  if (v6 == v8) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = -21 * (((uint64_t)v5 - *(void *)(a2 + 16)) >> 3)
  }
       + 0x5555555555555555 * ((uint64_t)(v6 - *v5) >> 6)
       - 0x5555555555555555 * ((v8 - **(void **)(a2 + 16)) >> 6);
  return sub_100171E98(v7, v9);
}

BOOL sub_100D4272C(uint64_t a1, double *a2, double a3)
{
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  BOOL result = sub_100D42948((void *)(a1 + 528), (uint64_t)&v28, &v26, a3);
  if (result)
  {
    uint64_t v6 = *((void *)&v29 + 1);
    uint64_t v7 = *(void *)v29;
    uint64_t v8 = *((void *)&v29 + 1) - *(void *)v29;
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 6);
    unint64_t v10 = v9 - 1;
    if (v8 < 321)
    {
      uint64_t v12 = *(void *)(v29 - 8 * ((16 - v9) >> 4));
      uint64_t v13 = v12 + 320 * (~(16 - (_BYTE)v9) & 0xF);
      if (v13 == *((void *)&v27 + 1)) {
        return 0;
      }
      uint64_t v11 = -(uint64_t)((16 - v9) >> 4);
    }
    else
    {
      uint64_t v11 = v10 >> 4;
      uint64_t v12 = *(void *)(v29 + 8 * (v10 >> 4));
      uint64_t v13 = v12 + 320 * (v10 & 0xF);
      if (v13 == *((void *)&v27 + 1)) {
        return 0;
      }
    }
    if (v13 == v12) {
      uint64_t v13 = *(void *)(v29 + 8 * v11 - 8) + 5120;
    }
    if (*(double *)(v13 - 320) > a3) {
      return 0;
    }
    uint64_t v14 = *((void *)&v29 + 1);
    if (*((void *)&v29 + 1) == v7) {
      uint64_t v14 = *(void *)(v29 - 8) + 5120;
    }
    if (*(double *)(v14 - 320) <= a3) {
      return 0;
    }
    if (v8 < 321)
    {
      uint64_t v15 = -(uint64_t)((16 - v9) >> 4);
      uint64_t v16 = *(void *)(v29 - 8 * ((16 - v9) >> 4));
      unsigned int v17 = ~(16 - v9) & 0xF;
    }
    else
    {
      uint64_t v15 = v10 >> 4;
      uint64_t v16 = *(void *)(v29 + 8 * (v10 >> 4));
      unsigned int v17 = v10 & 0xF;
    }
    uint64_t v18 = v16 + 320 * v17;
    if (v18 == v16) {
      uint64_t v18 = *(void *)(v29 + 8 * v15 - 8) + 5120;
    }
    if (v8 < 321)
    {
      char v22 = ~(16 - v9);
      unint64_t v23 = (16 - v9) >> 4;
      uint64_t v19 = -(uint64_t)v23;
      uint64_t v20 = *(void *)(v29 - 8 * v23);
      unsigned int v21 = v22 & 0xF;
    }
    else
    {
      uint64_t v19 = v10 >> 4;
      uint64_t v20 = *(void *)(v29 + 8 * (v10 >> 4));
      unsigned int v21 = v10 & 0xF;
    }
    uint64_t v24 = v20 + 320 * v21;
    long long v25 = (double *)(v18 - 320);
    if (v24 == v20) {
      uint64_t v24 = *(void *)(v29 + 8 * v19 - 8) + 5120;
    }
    if (*((void *)&v29 + 1) == v7) {
      uint64_t v6 = *(void *)(v29 - 8) + 5120;
    }
    *a2 = sub_1001BF26C(*v25, *(double *)(v24 - 136), *(double *)(v6 - 320), *(double *)(v6 - 136), a3);
    return 1;
  }
  return result;
}

BOOL sub_100D42948(void *a1, uint64_t a2, void *a3, double a4)
{
  uint64_t v4 = a1[4];
  long long v5 = (void *)(v4 + 8 * (a1[7] >> 4));
  if (a1[5] == v4) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *v5 + 320 * (a1[7] & 0xFLL);
  }
  *a3 = v5;
  a3[1] = v6;
  a3[2] = v5;
  a3[3] = v6;
  long long v7 = *((_OWORD *)a3 + 1);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v7;
  uint64_t v8 = a1[8];
  if (!v8) {
    return 0;
  }
  unint64_t v9 = a1[7] + v8;
  uint64_t v10 = a1[4];
  uint64_t v11 = a1[5];
  uint64_t v12 = (void *)(v10 + 8 * (v9 >> 4));
  if (*(double *)(*(void *)(v10 + (((v9 - 1) >> 1) & 0x7FFFFFFFFFFFFFF8)) + 320 * ((v9 - 1) & 0xF)) < a4)
  {
    if (v11 == v10) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = *v12 + 320 * (v9 & 0xF);
    }
    BOOL result = 0;
    *(void *)a2 = v12;
    *(void *)(a2 + 8) = v13;
    *(void *)(a2 + 16) = v12;
    *(void *)(a2 + 24) = v13;
    return result;
  }
  if (v11 == v10) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = *v12 + 320 * (v9 & 0xF);
  }
  uint64_t v16 = a3[3];
  if (v15 == v16)
  {
LABEL_22:
    uint64_t v21 = *(void *)(a2 + 24);
    return v21 != v16;
  }
  uint64_t v17 = *v12;
  uint64_t v18 = v15;
  uint64_t v19 = v12;
  while (1)
  {
    uint64_t v20 = v18 - v17;
    if (v18 == v17) {
      break;
    }
    if (*(double *)(v18 - 320) <= a4) {
      goto LABEL_23;
    }
LABEL_21:
    v18 -= 320;
    if (v18 == v16) {
      goto LABEL_22;
    }
  }
  uint64_t v17 = *(v19 - 1);
  if (*(double *)(v17 + 4800) > a4)
  {
    uint64_t v18 = v17 + 5120;
    --v19;
    goto LABEL_21;
  }
LABEL_23:
  unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * (v20 >> 6);
  if (v20 < -319)
  {
    unint64_t v25 = 14 - v22;
    char v23 = ~(_BYTE)v25;
    uint64_t v24 = &v19[-(v25 >> 4)];
  }
  else
  {
    char v23 = v22 + 1;
    uint64_t v24 = &v19[(v22 + 1) >> 4];
  }
  uint64_t v21 = *v24 + 320 * (v23 & 0xF);
  *(void *)a2 = v12;
  *(void *)(a2 + 8) = v15;
  *(void *)(a2 + 16) = v24;
  *(void *)(a2 + 24) = v21;
  uint64_t v16 = a3[3];
  return v21 != v16;
}

uint64_t **sub_100D42AF0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v3 = a1[7] + a1[8];
  uint64_t v4 = a1[4];
  long long v5 = (void *)(v4 + 8 * (v3 >> 4));
  if (a1[5] == v4)
  {
    uint64_t v6 = 0;
    *a3 = v5;
    a3[1] = 0;
  }
  else
  {
    uint64_t v6 = *v5 + 320 * (v3 & 0xF);
    *a3 = v5;
    a3[1] = v6;
  }
  a3[2] = v5;
  long long v7 = (uint64_t **)(a3 + 2);
  a3[3] = v6;
  uint64_t v8 = *(void *)(a2 + 24);
  if (v6 == v8) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = 0x3333333333333333 * ((v6 - *v5) >> 6)
  }
       + 2 * (*(void *)(a2 + 16) - (void)v5)
       - 0x3333333333333333 * ((v8 - **(void **)(a2 + 16)) >> 6);
  return sub_1000BACE4(v7, v9);
}

uint64_t sub_100D42B88(uint64_t a1)
{
  uint64_t result = sub_10007DD64(a1 + 664, (uint64_t)&v2);
  if (result) {
    return CLMotionActivity::isTypePedestrian();
  }
  return result;
}

void sub_100D42BF0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 2136) = v2;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 2144);
  *(void *)(a1 + 2144) = v3;
  if (v4) {
    sub_1000DB0A0(v4);
  }
}

void sub_100D42C20(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_100D42C50(uint64_t a1)
{
  *(void *)a1 = off_1022F3BD0;
  free(*(void **)(a1 + 8));
  sub_100663B8C((void *)(a1 + 24));

  operator delete();
}

void sub_100D42CC0(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x11;
  unint64_t v4 = v2 - 17;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    long long v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)sub_1000DA54C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      double v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xF68uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xF68uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    int v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      long long v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      int v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0xF68uLL);
  sub_1000DA434(&v54, &v53);
  long long v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  long long v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100D42F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100D42FD8(uint64_t a1)
{
  *(void *)a1 = off_1022F3C18;
  free(*(void **)(a1 + 8));
  sub_1006A9CC0((void *)(a1 + 24));

  operator delete();
}

uint64_t sub_100D43048(uint64_t a1, _OWORD *a2)
{
  a2[18] = 0u;
  a2[19] = 0u;
  a2[16] = 0u;
  a2[17] = 0u;
  a2[14] = 0u;
  a2[15] = 0u;
  a2[12] = 0u;
  a2[13] = 0u;
  a2[10] = 0u;
  a2[11] = 0u;
  a2[8] = 0u;
  a2[9] = 0u;
  a2[6] = 0u;
  a2[7] = 0u;
  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v5 = 0u;
  long long v6 = 0u;
  uint64_t result = (*(uint64_t (**)(uint64_t, long long *, long long *))(*(void *)a1 + 16))(a1, &v7, &v5);
  if (result)
  {
    uint64_t v4 = *((void *)&v8 + 1);
    if (*((void *)&v8 + 1) == *((void *)&v6 + 1))
    {
      return 0;
    }
    else
    {
      if (*(void *)v8 == *((void *)&v8 + 1)) {
        uint64_t v4 = *(void *)(v8 - 8) + 5120;
      }
      memcpy(a2, (const void *)(v4 - 320), 0x140uLL);
      return 1;
    }
  }
  return result;
}

void sub_100D43120(uint64_t a1)
{
  *(void *)a1 = off_1022F3C18;
  free(*(void **)(a1 + 8));
  sub_1006A9CC0((void *)(a1 + 24));

  operator delete();
}

BOOL sub_100D43190(uint64_t a1, double a2)
{
  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4) {
    double v5 = *(double *)(*(void *)(*(void *)(a1 + 32)
  }
                               + (((unint64_t)(v4 + *(void *)(a1 + 56) - 1) >> 1) & 0x7FFFFFFFFFFFFFF8))
                   + 320 * ((v4 + *(_DWORD *)(a1 + 56) - 1) & 0xF));
  else {
    double v5 = -1.79769313e308;
  }
  if (v5 >= a2)
  {
    if (sub_1001856E8(a1, (uint64_t)v11, v10, a2)) {
      return 1;
    }
    long long v6 = (unsigned char *)(a1 + 80);
    goto LABEL_11;
  }
  long long v6 = (unsigned char *)(a1 + 80);
  if (*(unsigned char *)(a1 + 80))
  {
    double v7 = *(double *)(a1 + 16);
    if (*(double *)(a1 + 72) - v7 < a2 && v7 + *(double *)(a1 + 88) > a2)
    {
      double v8 = *(double *)(a1 + 104);
      if (v8 - (*(double (**)(uint64_t, double))(*(void *)a1 + 56))(a1, a2) < a2) {
        return 0;
      }
    }
LABEL_11:
    if (*v6) {
      return 1;
    }
  }
  return *(unsigned char *)(a1 + 120) || *(double *)(a1 + 104) + -2.0 >= a2;
}

void sub_100D432D4(uint64_t a1)
{
  *(void *)a1 = off_1022F3BD0;
  free(*(void **)(a1 + 8));
  sub_100663B8C((void *)(a1 + 24));

  operator delete();
}

__n128 sub_100D43344@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X1>, double *a3@<X2>, __n128 *a4@<X8>)
{
  unint64_t v6 = a1[1].n128_u64[1];
  uint64_t v7 = *(void *)(a2 + 24);
  if (v6 != v7)
  {
    unint64_t v8 = 21 * ((uint64_t)(a1[1].n128_u64[0] - *(void *)(a2 + 16)) >> 3)
       - 0x5555555555555555 * ((uint64_t)(v6 - *(void *)a1[1].n128_u64[0]) >> 6)
       + 0x5555555555555555 * ((v7 - **(void **)(a2 + 16)) >> 6);
    if (v8)
    {
      while (1)
      {
        unint64_t v10 = v8 >> 1;
        __n128 v16 = *a1;
        __n128 v17 = a1[1];
        sub_100171E98(&v17, -(uint64_t)(v8 >> 1));
        uint64_t v12 = v17.n128_i64[1];
        unint64_t v11 = v17.n128_u64[0];
        if (v17.n128_u64[1] != *(void *)v17.n128_u64[0]) {
          break;
        }
        unint64_t v11 = v17.n128_u64[0] - 8;
        uint64_t v13 = *(void *)(v17.n128_u64[0] - 8);
        if (*(double *)(v13 + 3840) >= *a3)
        {
          uint64_t v12 = v13 + 4032;
LABEL_8:
          *a1 = v16;
          a1[1].n128_u64[0] = v11;
          a1[1].n128_u64[1] = v12 - 192;
          unint64_t v10 = v8 + ~v10;
        }
LABEL_9:
        unint64_t v8 = v10;
        if (!v10) {
          goto LABEL_10;
        }
      }
      if (*(double *)(v17.n128_u64[1] - 192) < *a3) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
LABEL_10:
  __n128 result = *a1;
  __n128 v15 = a1[1];
  *a4 = *a1;
  a4[1] = v15;
  return result;
}

void *sub_100D43468(void *a1, double *a2, void *a3, double *a4, double *a5)
{
  double v5 = a2;
  unint64_t v6 = a1;
  if (a4 != a2)
  {
    unint64_t v7 = 21 * (a3 - a1)
       - 0x5555555555555555 * (((uint64_t)a4 - *a3) >> 6)
       + 0x5555555555555555 * (((uint64_t)a2 - *a1) >> 6);
    if (v7)
    {
      do
      {
        unint64_t v9 = v7 >> 1;
        unint64_t v11 = v6;
        uint64_t v12 = v5;
        sub_100171E98(&v11, v7 >> 1);
        if (*v12 <= *a5)
        {
          unint64_t v6 = v11;
          double v5 = v12 + 24;
          if ((double *)((char *)v12 - *v11 + 192) == (double *)4032)
          {
            unint64_t v6 = v11 + 1;
            double v5 = (double *)v11[1];
          }
          unint64_t v9 = v7 + ~v9;
        }
        unint64_t v7 = v9;
      }
      while (v9);
    }
  }
  return v6;
}

__n128 sub_100D4354C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, double *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a2 + 24);
  if (v6 != v7)
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - **(void **)(a1 + 16)) >> 6)
       + 2 * (*(void *)(a1 + 16) - *(void *)(a2 + 16))
       + 0x3333333333333333 * ((v7 - **(void **)(a2 + 16)) >> 6);
    if (v8)
    {
      while (1)
      {
        unint64_t v10 = v8 >> 1;
        __n128 v16 = *(__n128 *)a1;
        long long v17 = *(_OWORD *)(a1 + 16);
        sub_1000BACE4((uint64_t **)&v17, -(uint64_t)(v8 >> 1));
        uint64_t v12 = *((void *)&v17 + 1);
        uint64_t v11 = v17;
        if (*((void *)&v17 + 1) != *(void *)v17) {
          break;
        }
        uint64_t v11 = v17 - 8;
        uint64_t v13 = *(void *)(v17 - 8);
        if (*(double *)(v13 + 4800) >= *a3)
        {
          uint64_t v12 = v13 + 5120;
LABEL_8:
          *(__n128 *)a1 = v16;
          *(void *)(a1 + 16) = v11;
          *(void *)(a1 + 24) = v12 - 320;
          unint64_t v10 = v8 + ~v10;
        }
LABEL_9:
        unint64_t v8 = v10;
        if (!v10) {
          goto LABEL_10;
        }
      }
      if (*(double *)(*((void *)&v17 + 1) - 320) < *a3) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
LABEL_10:
  __n128 result = *(__n128 *)a1;
  long long v15 = *(_OWORD *)(a1 + 16);
  *a4 = *(_OWORD *)a1;
  a4[1] = v15;
  return result;
}

uint64_t *sub_100D43678(uint64_t *a1, uint64_t a2, char *a3, uint64_t a4, double *a5)
{
  uint64_t v5 = a2;
  uint64_t v6 = a1;
  if (a4 != a2)
  {
    unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((a4 - *(void *)a3) >> 6)
       + 2 * (a3 - (char *)a1)
       + 0x3333333333333333 * ((a2 - *a1) >> 6);
    if (v7)
    {
      do
      {
        unint64_t v9 = v7 >> 1;
        uint64_t v11 = v6;
        uint64_t v12 = (double *)v5;
        sub_1000BACE4(&v11, v7 >> 1);
        if (*v12 <= *a5)
        {
          uint64_t v6 = v11;
          uint64_t v5 = (uint64_t)(v12 + 40);
          if ((double *)((char *)v12 - *v11 + 320) == (double *)5120)
          {
            uint64_t v6 = v11 + 1;
            uint64_t v5 = v11[1];
          }
          unint64_t v9 = v7 + ~v9;
        }
        unint64_t v7 = v9;
      }
      while (v9);
    }
  }
  return v6;
}

void sub_100D43758(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_100D43788(uint64_t a1, unsigned __int16 *a2, unint64_t a3)
{
  unint64_t v3 = a2[1];
  if (v3 >= a3)
  {
    int v5 = 0;
    uint64_t v6 = -(uint64_t)a3;
    float v7 = 0.0;
    do
    {
      int v8 = *(unsigned __int8 *)(sub_100D43884(a2, v3 + v6) + 8);
      double v9 = 2.55999994;
      if (v3 + v6)
      {
        double v10 = *(double *)sub_100D43884(a2, v3 + v6);
        double v9 = v10 - *(double *)sub_100D43884(a2, v3 + v6 - 1);
      }
      float v7 = v9 + v7;
      if (*(float *)(sub_100D43884(a2, v3 + v6) + 12) >= v7) {
        float v7 = *(float *)(sub_100D43884(a2, v3 + v6) + 12);
      }
      v5 += v8;
    }
    while (!__CFADD__(v6++, 1));
  }
}

uint64_t sub_100D43884(unsigned __int16 *a1, unint64_t a2)
{
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F3EC8);
    }
    float v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)long long buf = 134218240;
      unint64_t v11 = a2;
      __int16 v12 = 1024;
      int v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022F3EC8);
      }
      double v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "const T &CMQueue<CLPedestrianWorkoutStopDetectorFSM::LimitedStepCountEntry>::operator[](const size_t) const [T = CLPedestrianWorkoutStopDetectorFSM::LimitedStepCountEntry]", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0;
  }
  return (uint64_t)&a1[12 * (v4 - v5) + 4];
}

float sub_100D43A84(uint64_t a1, unsigned __int16 *a2, unint64_t a3)
{
  unint64_t v4 = a2[1];
  float v5 = 0.0;
  float v6 = 0.0;
  if (v4 >= a3)
  {
    unsigned int v8 = 0;
    uint64_t v9 = -(uint64_t)a3;
    do
      v8 += *(unsigned __int8 *)(sub_100D43884(a2, v4 + v9) + 16);
    while (!__CFADD__(v9++, 1));
    float v6 = (float)v8;
  }
  if (a3) {
    return v6 / (float)v4;
  }
  return v5;
}

void sub_100D43B10(uint64_t a1, unsigned int a2, int a3, double a4, float a5)
{
  if (a2 >= 0xFF) {
    int v8 = 255;
  }
  else {
    int v8 = a2;
  }
  *(double *)&long long v44 = a4;
  float v9 = fminf(a5, 12.8);
  BYTE8(v44) = v8;
  *((float *)&v44 + 3) = v9;
  char v45 = a3;
  char v46 = 2;
  double v10 = (unsigned __int16 *)(a1 + 40);
  unint64_t v11 = sub_1001886E4((unsigned __int16 *)(a1 + 40), &v44);
  unsigned int v12 = *(unsigned __int16 *)(a1 + 42);
  float v13 = -1.0;
  if (v12 < 5)
  {
    float v16 = -1.0;
  }
  else
  {
    sub_100D43788((uint64_t)v11, v10, 5uLL);
    float v16 = v15;
    unsigned int v12 = *(unsigned __int16 *)(a1 + 42);
    if (v12 >= 5)
    {
      float v13 = sub_100D43A84(v14, v10, 5uLL);
      unsigned int v12 = *(unsigned __int16 *)(a1 + 42);
    }
  }
  BOOL v17 = v16 > 0.75;
  if (v13 > 0.5) {
    BOOL v17 = 1;
  }
  if (v12 <= 4) {
    int v18 = 2;
  }
  else {
    int v18 = v17;
  }
  uint64_t v19 = sub_100D43884(v10, v12 - 1);
  *(unsigned char *)(v19 + 17) = v18;
  unint64_t v20 = *(unsigned __int16 *)(a1 + 42);
  int v21 = v16 > 2.3333;
  if (v20 <= 4) {
    int v21 = 2;
  }
  int v41 = v8;
  int v42 = v21;
  BOOL v22 = v9 > 0.0 && (float)((float)v8 / v9) > 0.75;
  unint64_t v23 = *(void *)(a1 + 32);
  float v24 = -1.0;
  if (v23 <= v20)
  {
    sub_100D43788(v19, v10, *(void *)(a1 + 32));
    float v26 = v27;
    unint64_t v25 = *(unsigned __int16 *)(a1 + 42);
    unint64_t v23 = *(void *)(a1 + 32);
  }
  else
  {
    unint64_t v25 = *(unsigned __int16 *)(a1 + 42);
    float v26 = -1.0;
  }
  if (v23 <= v25)
  {
    float v24 = sub_100D43A84(v19, v10, v23);
    unint64_t v25 = *(unsigned __int16 *)(a1 + 42);
    unint64_t v23 = *(void *)(a1 + 32);
  }
  int v28 = v22 | a3;
  BOOL v29 = v26 > 0.75;
  if (v24 > 0.5) {
    BOOL v29 = 1;
  }
  unint64_t v30 = v25 - v23;
  int v31 = 2;
  if (v25 >= v23) {
    int v32 = v29;
  }
  else {
    int v32 = 2;
  }
  if (v30 + 2 <= v25)
  {
    int v31 = *(unsigned __int8 *)(sub_100D43884(v10, v30 + 2) + 17);
    unint64_t v23 = *(void *)(a1 + 32);
  }
  if (v16 > 2.3333 && v20 > 4) {
    unint64_t v34 = 0;
  }
  else {
    unint64_t v34 = *(void *)(a1 + 5664) + 1;
  }
  *(void *)(a1 + 5664) = v34;
  v43[0] = v28;
  v43[1] = v18;
  v43[2] = v42;
  v43[3] = v32;
  v43[4] = v34 >= v23;
  v43[5] = v31;
  int v40 = *(unsigned __int8 *)(a1 + 24);
  sub_1001A34E0(a1 + 8, 0, (uint64_t)v43);
  int v39 = *(unsigned __int8 *)(a1 + 24);
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022F3EA8);
  }
  uint64_t v35 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
  {
    uint64_t v36 = *(void *)(a1 + 5664);
    int buf = 134222080;
    double v82 = a4;
    __int16 v83 = 1024;
    int v84 = v40;
    __int16 v85 = 1024;
    int v86 = v39;
    __int16 v87 = 1024;
    int v88 = v41;
    __int16 v89 = 2048;
    double v90 = v9;
    __int16 v91 = 1024;
    int v92 = a3;
    __int16 v93 = 2048;
    double v94 = v16;
    __int16 v95 = 2048;
    double v96 = v13;
    __int16 v97 = 2048;
    double v98 = v26;
    __int16 v99 = 2048;
    double v100 = v24;
    __int16 v101 = 2048;
    uint64_t v102 = v36;
    __int16 v103 = 1024;
    int v104 = v31;
    __int16 v105 = 1024;
    BOOL v106 = v34 >= v23;
    __int16 v107 = 1024;
    int v108 = v32;
    __int16 v109 = 1024;
    int v110 = v42;
    __int16 v111 = 1024;
    int v112 = v18;
    __int16 v113 = 1024;
    int v114 = v28;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "PedestrianStop,timestamp,%0.3f,statePrev,%d,state,%d,stepCountDiff,%d,activeTimeDiff,%0.3f,isStroller,%d,stepCadenceSmallWindow,%0.3f,strollerFractionSmallWindow,%0.3f,stepCadenceLargeWindow,%0.3f,strollerFractionLargeWindow,%0.3f,fTimeSinceRunTimer,%zd,isFrontSmallWindowActiveInLargeWindow,%d,isTimeSinceRunComplete,%d,isLargeWindowActive,%d,isSmallWindowActiveRun,%d,isSmallWindowActive,%d,isCurrentEpochActive,%d", (uint8_t *)&buf, 0x84u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022F3EA8);
    }
    uint64_t v37 = *(void *)(a1 + 5664);
    int v47 = 134222080;
    double v48 = a4;
    __int16 v49 = 1024;
    int v50 = v40;
    __int16 v51 = 1024;
    int v52 = v39;
    __int16 v53 = 1024;
    int v54 = v41;
    __int16 v55 = 2048;
    double v56 = v9;
    __int16 v57 = 1024;
    int v58 = a3;
    __int16 v59 = 2048;
    double v60 = v16;
    __int16 v61 = 2048;
    double v62 = v13;
    __int16 v63 = 2048;
    double v64 = v26;
    __int16 v65 = 2048;
    double v66 = v24;
    __int16 v67 = 2048;
    uint64_t v68 = v37;
    __int16 v69 = 1024;
    int v70 = v31;
    __int16 v71 = 1024;
    BOOL v72 = v34 >= v23;
    __int16 v73 = 1024;
    int v74 = v32;
    __int16 v75 = 1024;
    int v76 = v42;
    __int16 v77 = 1024;
    int v78 = v18;
    __int16 v79 = 1024;
    int v80 = v28;
    double v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLPedestrianWorkoutStopDetectorFSM::feedStepCountEntry(const CFAbsoluteTime, const uint32_t, const float, const BOOL)", "%s\n", v38);
    if (v38 != (char *)&buf) {
      free(v38);
    }
  }
}

BOOL sub_100D44060(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 3) == 1 || *(unsigned char *)(a2 + 2) == 1;
}

BOOL sub_100D44084(uint64_t a1, uint64_t a2)
{
  return !*(unsigned char *)(a2 + 3) || *(unsigned char *)(a2 + 1) == 0;
}

BOOL sub_100D440A4(uint64_t a1, unsigned char *a2)
{
  return !*a2 && !a2[1] && !a2[3] && a2[4] && a2[5] == 0;
}

double sub_100D440DC(uint64_t a1)
{
  *(void *)(a1 + 8) = &unk_1022F3DA0;
  *(void *)(a1 + 16) = 6;
  *(_WORD *)(a1 + 24) = 512;
  *(void *)a1 = off_1022F3E40;
  *(void *)(a1 + 32) = 117;
  *(void *)&double result = 0xEA00000000;
  *(void *)(a1 + 40) = 0xEA00000000;
  *(void *)(a1 + 5664) = 0;
  return result;
}

BOOL sub_100D4412C(uint64_t a1, double *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024811A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024811A0))
  {
    LODWORD(v6[0]) = 8;
    sub_1004F7D80(qword_102481188, v6, 1uLL);
    __cxa_atexit((void (*)(void *))sub_1004F7E04, qword_102481188, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024811A0);
  }
  __int16 v7 = 0;
  *(_OWORD *)float v6 = xmmword_101D1E250;
  memset(&v6[2], 0, 135);
  long long v8 = xmmword_101D1E250;
  uint64_t v9 = 0;
  int v10 = 0;
  uint64_t v11 = 0;
  v12[0] = 0;
  *(void *)((char *)v12 + 5) = 0;
  *(void *)((char *)&v12[1] + 6) = 0;
  char v13 = 0;
  memset(&v12[3], 0, 24);
  long long v14 = xmmword_101D1E250;
  uint64_t v15 = 0;
  int v16 = 0;
  unint64_t v17 = 0xFFEFFFFFFFFFFFFFLL;
  int v28 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  int v23 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  memset(v27, 0, sizeof(v27));
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  unint64_t v31 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v32 = 0;
  int v33 = 0;
  uint64_t v39 = 0;
  __int16 v40 = 0;
  int v45 = 0;
  int v38 = 0;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v42 = 0u;
  long long v41 = 0u;
  char v43 = 0;
  memset(v44, 0, sizeof(v44));
  double v46 = -1.79769313e308;
  long long v65 = 0u;
  long long v64 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  long long v50 = 0u;
  long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  uint64_t v66 = 0;
  unint64_t v67 = 0xFFEFFFFFFFFFFFFFLL;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  unint64_t v72 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v73 = 0;
  int v74 = 0;
  uint64_t v75 = 0;
  char v76 = 0;
  unint64_t v77 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v79 = 0;
  uint64_t v78 = 0;
  uint64_t v80 = 0x80000000800000;
  uint64_t v82 = 0;
  uint64_t v81 = 0;
  long long v83 = xmmword_101D1E260;
  uint64_t v84 = 0x80000000800000;
  long long v85 = 0u;
  long long v86 = 0u;
  uint64_t v87 = 0;
  unint64_t v88 = 0xFFEFFFFFFFFFFFFFLL;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  long long v92 = 0u;
  long long v93 = 0u;
  long long v94 = 0u;
  int v95 = 0;
  unint64_t v96 = 0xFFEFFFFFFFFFFFFFLL;
  __int16 v97 = 0;
  int v98 = 0;
  unint64_t v99 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v100 = 7;
  unint64_t v101 = 0xFFEFFFFFFFFFFFFFLL;
  char v102 = 0;
  uint64_t v104 = 0;
  uint64_t v103 = 0;
  uint64_t v105 = 0;
  if (sub_100174478(a2, qword_102481188, (uint64_t)v6))
  {
    float v4 = *((double *)&v60 + 1);
    sub_100D43B10(a1, v60, BYTE8(v56) == 1, v46, v4);
  }
  return *(unsigned char *)(a1 + 24) == 3;
}

void sub_100D44454(_Unwind_Exception *a1)
{
}

uint64_t sub_100D44474(uint64_t result, unsigned int a2)
{
  if (a2 <= 3) {
    *(void *)(result + 32) = *(void *)&aU_1[8 * a2];
  }
  *(_DWORD *)(result + 40) = 0;
  *(void *)(result + 5664) = 0;
  return result;
}

void *sub_100D44498(void *result)
{
  *double result = off_1022F3E40;
  return result;
}

void sub_100D444B8(void *a1)
{
  *a1 = off_1022F3E40;
  operator delete();
}

void sub_100D444E8(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_100D44518(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100D445F8(id a1)
{
  qword_1024811A8 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLMagneticAccessorySilo"];
}

uint64_t sub_100D446B8(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100D44FA0;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_1024811C8 != -1) {
    dispatch_once(&qword_1024811C8, block);
  }
  return qword_10248AB00;
}

void sub_100D4491C(id a1)
{
  sub_100103240();
  if ((sub_1000A16E8() & 0x10000000000000) != 0)
  {
    unsigned __int8 v2 = 0;
    sub_10006ACBC(v3, "EnableMagneticAccessoryService", &v2, 0);
    BOOL v1 = v3[1] != 0;
  }
  else
  {
    BOOL v1 = 0;
  }
  byte_1024811B8 = v1;
}

void sub_100D449EC(uint64_t **a1, int a2, void *a3, void *a4)
{
  if (a4 && ![a4 objectForKeyedSubscript:off_1024743C8[0]()])
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022F40D0);
    }
    unsigned int v12 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Missing accessory type", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024190E0 == -1)
    {
LABEL_34:
      *(_WORD *)std::string __dst = 0;
      long long v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMagneticAccessory::onNfcEvent(BOOL, NSString *, NSDictionary *)", "%s\n", v14);
      if (v14 != buf) {
        free(v14);
      }
      return;
    }
LABEL_36:
    dispatch_once(&qword_1024190E0, &stru_1022F40D0);
    goto LABEL_34;
  }
  unsigned __int8 v8 = [[a4 objectForKeyedSubscript:off_1024743C8[0]] unsignedIntValue];
  if (![a3 UTF8String])
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022F40D0);
    }
    uint64_t v11 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Invalid UUID", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024190E0 == -1) {
      goto LABEL_34;
    }
    goto LABEL_36;
  }
  sub_100134750(buf, (char *)[a3 UTF8String]);
  uint64_t v9 = sub_10012FFE0((uint64_t)(a1 + 16), (const void **)buf);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  int v10 = a1 + 17;
  if (a2)
  {
    if (v10 == (uint64_t **)v9)
    {
      sub_100134750(buf, (char *)[a3 UTF8String]);
      *(void *)std::string __dst = buf;
      *((unsigned char *)sub_100D47F9C(a1 + 16, (const void **)buf, (uint64_t)&unk_101D0B290, (_OWORD **)__dst) + 56) = v8;
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_19;
    }
    return;
  }
  if (v10 != (uint64_t **)v9)
  {
    unsigned __int8 v8 = *(unsigned char *)(v9 + 56);
    sub_100645C00(a1 + 16, v9);
LABEL_19:
    __dst[256] = v8;
    __dst[257] = a2;
    strncpy(__dst, (const char *)[a3 UTF8String], 0x100uLL);
    __int16 v18 = 0;
    *(_DWORD *)int buf = 1;
    memcpy(&buf[4], __dst, 0x102uLL);
    sub_100D459AC((uint64_t)a1);
    int v15 = 0;
    ((void (*)(uint64_t **, int *, unsigned char *, uint64_t, uint64_t, void))(*a1)[19])(a1, &v15, buf, 1, 0xFFFFFFFFLL, 0);
    return;
  }
  if (qword_1024190E0 != -1) {
    dispatch_once(&qword_1024190E0, &stru_1022F40D0);
  }
  char v13 = qword_1024190E8;
  if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Received detachment event without prior attachment event.", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190E0 == -1) {
      goto LABEL_34;
    }
    goto LABEL_36;
  }
}

void sub_100D44F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a50 < 0) {
    operator delete(*v50);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D44FA0()
{
}

void sub_100D44FEC()
{
}

uint64_t sub_100D45010(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_100D45324(a1, "CLMagneticAccessory", a2);
  *(void *)uint64_t v3 = off_1022F3F38;
  *(void *)(v3 + 136) = 0;
  *(void *)(v3 + 128) = v3 + 136;
  *(void *)(v3 + 144) = 0;
  *(void *)(v3 + 112) = 0;
  *(void *)(v3 + 120) = 0;
  *(_DWORD *)(v3 + 152) = -1;
  float v4 = (int *)(v3 + 152);
  *(unsigned char *)(v3 + 156) = 0;
  Class v5 = (Class)off_1024743B8[0]();
  if (v5)
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022F40D0);
    }
    float v6 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "ACCConnectionInfo is available.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022F40D0);
      }
      __int16 v13 = 0;
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLMagneticAccessory::CLMagneticAccessory(id<CLIntersiloUniverse>)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    *(void *)(a1 + 120) = [[CLMagneticAccessoryAdapter alloc] initWithMagneticAccessory:a1];
    *(void *)(a1 + 112) = [(objc_class *)v5 sharedInstance];
    __int16 v7 = *(void **)(a1 + 40);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    _OWORD v12[2] = sub_100D453D0;
    void v12[3] = &unk_1022A3020;
    _DWORD v12[4] = a1;
    [v7 async:v12];
  }
  unsigned __int8 v8 = [*(id *)(a1 + 40) queue];
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_100D4574C;
  handler[3] = &unk_1022BA9F0;
  handler[4] = a1;
  notify_register_dispatch("com.apple.system.powersources.source", v4, v8, handler);
  return a1;
}

void sub_100D45300(_Unwind_Exception *a1)
{
  sub_1000DB264(v2, *(char **)(v1 + 136));
  sub_100D45850(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100D45324(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_1022F4120;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_100D453B4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

id sub_100D453D0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_100D45478(v1);
  sub_100D45664(v1);
  uint64_t v3 = *(void **)(v1 + 112);
  uint64_t v2 = *(void *)(v1 + 120);
  uint64_t v5 = off_1024743C0[0]();
  float v6 = &off_1023933C8;
  return [v3 registerDelegate:v2 withFilter:+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v6, &v5, 1)];
}

void sub_100D45478(uint64_t a1)
{
  uint64_t v13 = a1;
  long long v20 = 0;
  uint64_t v2 = sub_1000A6958();
  if (sub_1004D01D8(v2, @"ConnectedMagneticAccessoryNfc", (CFTypeRef *)&v20))
  {
    uint64_t v3 = v20;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v4 = [v20 countByEnumeratingWithState:&v16 objects:v22 count:16];
    if (v4)
    {
      uint64_t v5 = *(void *)v17;
      float v6 = (uint64_t **)(v13 + 128);
      do
      {
        for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v17 != v5) {
            objc_enumerationMutation(v3);
          }
          unsigned __int8 v8 = *(void **)(*((void *)&v16 + 1) + 8 * i);
          unsigned __int8 v9 = [[v3 objectForKeyedSubscript:v8, v13] unsignedIntValue];
          sub_100134750(__p, (char *)[v8 UTF8String]);
          long long v21 = __p;
          *((unsigned char *)sub_100D47F9C(v6, (const void **)__p, (uint64_t)&unk_101D0B290, (_OWORD **)&v21) + 56) = v9;
          if (v15 < 0) {
            operator delete(__p[0]);
          }
        }
        id v4 = [v3 countByEnumeratingWithState:&v16 objects:v22 count:16];
      }
      while (v4);
    }
  }
  LOBYTE(__p[0]) = 0;
  uint64_t v10 = sub_1000A6958();
  int v11 = sub_1000D29FC(v10, @"ConnectedMagneticAccessoryPowerInduction", (BOOL *)__p);
  if (LOBYTE(__p[0])) {
    int v12 = v11;
  }
  else {
    int v12 = 0;
  }
  if (v12 == 1) {
    *(unsigned char *)(v13 + 156) = 1;
  }
}

void sub_100D45640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D45664(uint64_t a1)
{
  sub_100D48F10((uint64_t *)&v7, (const void ***)(a1 + 128));
  uint64_t v2 = v7;
  if (v7 != v8)
  {
    do
    {
      uint64_t v3 = v2 + 4;
      if (*((char *)v2 + 55) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      sub_100D449EC((uint64_t **)a1, 0, +[NSString stringWithUTF8String:v3], 0);
      id v4 = v2[1];
      if (v4)
      {
        do
        {
          uint64_t v5 = (char **)v4;
          id v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v5 = (char **)v2[2];
          BOOL v6 = *v5 == (char *)v2;
          uint64_t v2 = v5;
        }
        while (!v6);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v8);
  }
  sub_100D45754((unsigned char *)a1);
  sub_1000DB264((uint64_t)&v7, v8[0]);
}

void sub_100D45730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

unsigned char *sub_100D4574C(uint64_t a1)
{
  return sub_100D45754(*(unsigned char **)(a1 + 32));
}

unsigned char *sub_100D45754(unsigned char *a1)
{
  CFDictionaryRef v2 = (const __CFDictionary *)off_1024743D0();
  if (v2)
  {
    CFDictionaryRef v3 = v2;
    if (CFDictionaryContainsKey(v2, @"FamilyCode"))
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v3, @"FamilyCode");
      CFNumberRef v5 = Value;
      if (!Value)
      {
LABEL_15:
        CFRelease(v3);
        return sub_100D45B80(a1, (int)v5);
      }
      CFTypeID v6 = CFGetTypeID(Value);
      if (v6 == CFNumberGetTypeID())
      {
        int valuePtr = 0;
        if (CFNumberGetValue(v5, kCFNumberIntType, &valuePtr)) {
          BOOL v7 = (valuePtr + 536723450) >= 3;
        }
        else {
          BOOL v7 = 1;
        }
        LODWORD(v5) = !v7;
        goto LABEL_15;
      }
    }
    LODWORD(v5) = 0;
    goto LABEL_15;
  }

  return sub_100D45B80(a1, 0);
}

uint64_t sub_100D45850(uint64_t a1)
{
  *(void *)a1 = off_1022F4120;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_100D458D4(uint64_t a1)
{
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  uint64_t result = notify_is_valid_token(*(_DWORD *)(a1 + 152));
  if (result)
  {
    uint64_t result = notify_cancel(*(_DWORD *)(a1 + 152));
    *(_DWORD *)(a1 + 152) = -1;
  }
  *(unsigned char *)(a1 + 108) = 1;
  return result;
}

void *sub_100D45930@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

void sub_100D459AC(uint64_t a1)
{
  id v3 = +[NSMutableDictionary dictionary];
  id v4 = *(void **)(a1 + 128);
  CFNumberRef v5 = (void *)(a1 + 136);
  if (v4 != (void *)(a1 + 136))
  {
    do
    {
      CFTypeID v6 = v4 + 4;
      BOOL v7 = +[NSNumber numberWithUnsignedChar:*((unsigned __int8 *)v4 + 56)];
      if (*((char *)v4 + 55) < 0) {
        CFTypeID v6 = (void *)*v6;
      }
      [v3 setObject:v7 forKeyedSubscript:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6)];
      unsigned __int8 v8 = (void *)v4[1];
      if (v8)
      {
        do
        {
          unsigned __int8 v9 = v8;
          unsigned __int8 v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          unsigned __int8 v9 = (void *)v4[2];
          BOOL v10 = *v9 == (void)v4;
          id v4 = v9;
        }
        while (!v10);
      }
      id v4 = v9;
    }
    while (v9 != v5);
  }
  uint64_t v11 = sub_1000A6958();
  sub_1004D258C(v11);
  uint64_t v12 = *(void *)sub_1000A6958();
  (*(void (**)(void))(v12 + 944))();
}

uint64_t sub_100D45AEC(uint64_t a1)
{
  uint64_t v2 = sub_1000A6958();
  +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 156)];
  sub_1004D258C(v2);
  id v3 = *(uint64_t (**)(void))(*(void *)sub_1000A6958() + 944);

  return v3();
}

unsigned char *sub_100D45B80(unsigned char *result, int a2)
{
  if (result[156] != a2)
  {
    uint64_t v2 = (uint64_t)result;
    result[156] = a2;
    int v21 = 0;
    long long v20 = 0u;
    long long v19 = 0u;
    long long v18 = 0u;
    long long v17 = 0u;
    long long v16 = 0u;
    long long v15 = 0u;
    long long v14 = 0u;
    long long v13 = 0u;
    long long v12 = 0u;
    long long v11 = 0u;
    long long v10 = 0u;
    long long v9 = 0u;
    long long v8 = 0u;
    long long v7 = 0u;
    long long v6 = 0u;
    long long v5 = 0u;
    int v3 = 0;
    int v4 = 2;
    LOBYTE(v5) = a2;
    (*(void (**)(unsigned char *, int *, int *, uint64_t, uint64_t, void))(*(void *)result + 152))(result, &v3, &v4, 1, 0xFFFFFFFFLL, 0);
    return (unsigned char *)sub_100D45AEC(v2);
  }
  return result;
}

void sub_100D45C7C()
{
}

void sub_100D45D38(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_100D45D74(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_1022F4270;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    long long v12 = a3;
  }
  else {
    long long v12 = (uint64_t *)*a3;
  }
  id v13 = [objc_msgSend(a4, "vendor") proxyForService:[NSString stringWithUTF8String:v12]];
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:[a4 silo]];
  return a1;
}

uint64_t sub_100D45E58(uint64_t a1)
{
  *(void *)a1 = off_1022F3F38;
  sub_1000DB264(a1 + 128, *(char **)(a1 + 136));

  return sub_100D45850(a1);
}

void sub_100D45EB0(uint64_t a1)
{
  *(void *)a1 = off_1022F3F38;
  sub_1000DB264(a1 + 128, *(char **)(a1 + 136));
  sub_100D45850(a1);

  operator delete();
}

void sub_100D45F1C(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        long long v9 = (uint64_t *)v4;
      }
      else {
        long long v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)int buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022F4090);
      }
      long long v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        long long v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          long long v11 = (void *)*v11;
        }
        *(_DWORD *)int buf = 136446466;
        long long v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022F4090);
        }
        long long v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          long long v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        long long v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLMagneticAccessory_Type::Notification, CLMagneticAccessory_Type::NotificationData>::removeClient(int) [Notification_T = CLMagneticAccessory_Type::Notification, NotificationData_T = CLMagneticAccessory_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_100D461AC(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_100D46260(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_100D462A8(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_100D462F0(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_100D46338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_1024743D8);
}

uint64_t sub_100D46364(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)long long v42 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          long long v24 = (uint64_t *)v18;
        }
        else {
          long long v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          uint64_t v29 = (uint64_t *)v25;
        }
        else {
          uint64_t v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v40 = v26;
        uint64_t v35 = *(void *)(v26 + 56);
        char v36 = *a4;
        *(void *)&buf[0] = &v41;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v36;
        uint64_t v46 = 0;
        memset(buf, 0, sizeof(buf));
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _OWORD *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_100D49190();
        }
        if (v35) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v40 = a1 + 64;
        char v30 = byte_1024743D9;
        int v39 = v17;
        *(void *)&buf[0] = &v39;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v30;
        int v39 = *a3;
        *(void *)&buf[0] = &v39;
        unint64_t v31 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        uint64_t v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        char v33 = *a4;
        int v39 = *a3;
        *(void *)&buf[0] = &v39;
        long long v34 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)&buf[0] = &v41;
        *((unsigned char *)sub_1000EB1B8(v34 + 5, &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v33;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        LODWORD(buf[0]) = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F4090);
  }
  id v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    long long v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v15 = (void *)*v15;
    }
    LODWORD(buf[0]) = 136446466;
    *(void *)((char *)buf + 4) = v15;
    WORD6(buf[0]) = 1026;
    *(_DWORD *)((char *)buf + 14) = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      (uint8_t *)buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F4090);
    }
    long long v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v37 = (void *)*v37;
    }
    *(_DWORD *)long long v42 = 136446466;
    *(void *)&v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = a2;
    int v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMagneticAccessory_Type::Notification, CLMagneticAccessory_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLMagneticAccessory_Type::Notification, NotificationData_T = CLMagneticAccessory_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v38);
    if (v38 != (char *)buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

BOOL sub_100D46834(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F4090);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)int buf = 136446466;
      long long v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022F4090);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMagneticAccessory_Type::Notification, CLMagneticAccessory_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLMagneticAccessory_Type::Notification, NotificationData_T = CLMagneticAccessory_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_100D46AB8(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022F4090);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)int buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                uint64_t v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022F4090);
                }
                uint64_t v29 = a1 + 8;
                if (a1[31] < 0) {
                  uint64_t v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  char v30 = buf;
                }
                else {
                  char v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                int v38 = v29;
                __int16 v39 = 2082;
                uint64_t v40 = v30;
                unint64_t v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMagneticAccessory_Type::Notification, CLMagneticAccessory_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLMagneticAccessory_Type::Notification, NotificationData_T = CLMagneticAccessory_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_100D46E8C(uint64_t a1, int *a2, void *__dst)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      BOOL v10 = (uint64_t *)v4;
    }
    else {
      BOOL v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v7 == v3) {
    return 0;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0;
  }
  int v11 = *(const void **)(v7 + 64);
  if (!v11) {
    return 0;
  }
  memcpy(__dst, v11, 0x108uLL);
  return 1;
}

uint64_t sub_100D46F00(uint64_t a1, int *a2, const void *a3)
{
  int v6 = (uint64_t *)operator new(0x120uLL);
  v6[1] = 0;
  _DWORD v6[2] = 0;
  *int v6 = (uint64_t)off_1022F4200;
  memcpy(v6 + 3, a3, 0x108uLL);
  int v10 = *a2;
  int v11 = &v10;
  uint64_t v7 = sub_10044715C((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101D0B290, &v11);
  int v8 = (std::__shared_weak_count *)v7[9];
  v7[8] = v6 + 3;
  v7[9] = v6;
  if (v8) {
    sub_1000DB0A0(v8);
  }
  return 1;
}

void sub_100D46FC4(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100D46FD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_100D47084(uint64_t a1, unsigned int *a2, const void *a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F4090);
  }
  BOOL v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    int v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)int buf = 68289794;
    int v22 = 0;
    __int16 v23 = 2082;
    *(void *)BOOL v24 = "";
    *(_WORD *)&v24[8] = 2082;
    *(void *)&v24[10] = "activity";
    __int16 v25 = 2082;
    int v26 = v10;
    __int16 v27 = 2050;
    BOOL v28 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    uint64_t v29 = v30;
    memset(v30, 0, sizeof(v30));
    unint64_t v31 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v29);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v28) {
      sub_1000DB0A0(v28);
    }
    sub_1000F5BB0((uint64_t)&v23, *(void **)&v24[6]);
    if (v31) {
      sub_1000DB0A0(v31);
    }
    sub_1000F5BB0((uint64_t)&v29, v30[0]);
  }
  if (a4)
  {
    BOOL v18 = (uint64_t *)operator new(0x120uLL);
    v18[1] = 0;
    double v18[2] = 0;
    uint64_t *v18 = (uint64_t)off_1022F4200;
    memcpy(v18 + 3, a3, 0x108uLL);
    int v19 = (std::__shared_weak_count *)v14[9];
    v14[8] = v18 + 3;
    v14[9] = v18;
    if (!v19) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  int v19 = (std::__shared_weak_count *)v14[9];
  v14[8] = 0;
  v14[9] = 0;
  if (v19) {
LABEL_27:
  }
    sub_1000DB0A0(v19);
LABEL_28:
  if (v14[7]) {
    sub_100D48038();
  }
  os_activity_scope_leave(&state);
}

void sub_100D47670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_100D476BC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F4090);
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)int buf = 136315138;
      int v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022F4090);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLMagneticAccessory_Type::Notification, CLMagneticAccessory_Type::NotificationData>::listClients() [Notification_T = CLMagneticAccessory_Type::Notification, NotificationData_T = CLMagneticAccessory_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F4090);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)int buf = 136315394;
      int v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022F4090);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLMagneticAccessory_Type::Notification, CLMagneticAccessory_Type::NotificationData>::listClients() [Notification_T = CLMagneticAccessory_Type::Notification, NotificationData_T = CLMagneticAccessory_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    int v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        BOOL v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_1022F4090);
            }
            int v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)int buf = 136315650;
              int v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022F4090);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLMagneticAccessory_Type::Notification, CLMagneticAccessory_Type::NotificationData>::listClients() [Notification_T = CLMagneticAccessory_Type::Notification, NotificationData_T = CLMagneticAccessory_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                BOOL v9 = v15;
              }
              while (!v16);
            }
            BOOL v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        BOOL v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            BOOL v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            int v8 = v19;
          }
          while (!v16);
        }
        int v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_100D47C6C(uint64_t a1)
{
  sub_100D49120(a1);

  operator delete();
}

id sub_100D47CA4(uint64_t a1, int a2, void *a3)
{
  id result = sub_100D48670(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_100D47CF4(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

Class sub_100D47D24()
{
  if (qword_1024811D8 != -1) {
    dispatch_once(&qword_1024811D8, &stru_1022F40B0);
  }
  Class result = objc_getClass("ACCConnectionInfo");
  qword_1024811D0 = (uint64_t)result;
  off_1024743B8[0] = sub_100D47D88;
  return result;
}

uint64_t sub_100D47D88()
{
  return qword_1024811D0;
}

void sub_100D47D94(id a1)
{
  qword_1024811E0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CoreAccessories.framework/CoreAccessories", 2);
}

void sub_100D47DC0(id a1)
{
  qword_1024190E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

uint64_t sub_100D47DF0()
{
  if (qword_1024811D8 != -1) {
    dispatch_once(&qword_1024811D8, &stru_1022F40B0);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)qword_1024811E0, "ACCConnectionInfoFilterAllowConnectionType");
  if (v0)
  {
    uint64_t result = *v0;
    qword_1024811E8 = result;
  }
  else
  {
    uint64_t result = qword_1024811E8;
  }
  off_1024743C0[0] = sub_100D47E70;
  return result;
}

uint64_t sub_100D47E70()
{
  return qword_1024811E8;
}

uint64_t sub_100D47E7C()
{
  if (qword_1024811D8 != -1) {
    dispatch_once(&qword_1024811D8, &stru_1022F40B0);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)qword_1024811E0, "kACCProperties_Endpoint_NFC_Type");
  if (v0)
  {
    uint64_t result = *v0;
    qword_1024811F0 = result;
  }
  else
  {
    uint64_t result = qword_1024811F0;
  }
  off_1024743C8[0] = sub_100D47EFC;
  return result;
}

uint64_t sub_100D47EFC()
{
  return qword_1024811F0;
}

uint64_t sub_100D47F08()
{
  if (qword_1024811F8 != -1) {
    dispatch_once(&qword_1024811F8, &stru_1022F40F0);
  }
  uint64_t v0 = (uint64_t (*)())dlsym((void *)qword_102481200, "IOPSCopyExternalPowerAdapterDetails");
  off_1024743D0 = v0;

  return v0();
}

void sub_100D47F70(id a1)
{
  qword_102481200 = (uint64_t)dlopen("/System/Library/Frameworks/IOKit.framework/IOKit", 2);
}

_OWORD *sub_100D47F9C(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  int v6 = (void **)sub_1001070AC((uint64_t)a1, &v12, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x40uLL);
    BOOL v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    _OWORD v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    _DWORD v9[2] = 0;
    *BOOL v9 = 0;
    *((unsigned char *)v7 + 56) = 0;
    sub_1000EDF90(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

void sub_100D48038()
{
}

void sub_100D480EC(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      BOOL v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          uint64_t v12 = (uint64_t *)v4;
        }
        else {
          uint64_t v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          BOOL v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        long long v49 = v9;
        id v13 = sub_100D48670(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            int v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                int v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              long long v48 = v19;
              sub_100D484DC(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              uint64_t v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  uint64_t v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              long long v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                uint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    uint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      uint64_t v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              long long v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022F4090);
              }
              BOOL v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)int buf = 136446466;
                long long v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022F4090);
                }
                int v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  int v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                long long v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                long long v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLMagneticAccessory_Type::Notification, CLMagneticAccessory_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLMagneticAccessory_Type::Notification, NotificationData_T = CLMagneticAccessory_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_100D484DC(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_100D48670(a4);
    uint64_t v10 = *(void *)a3 + 80;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40);
    uint64_t v14 = (int *)(*(void *)a2 + 32);
    uint64_t v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4, v13];
    }
  }
  return result;
}

void sub_100D485D4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022F4200;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100D485F4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022F4200;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100D48650(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

id sub_100D48670(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    return sub_100D4870C(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      return sub_100D48A98(a1);
    }
    else
    {
      return 0;
    }
  }
}

id sub_100D4870C(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_100D48E58((uint64_t)&v7, a1);
  }
  if (!getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_1022F4240);
    }
    uint64_t v5 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 134218498;
      id v15 = v2;
      __int16 v16 = 2048;
      uint64_t v17 = 0;
      __int16 v18 = 2080;
      unint64_t v19 = 0x8000000101D8CCF6 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418F90 == -1) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  if (qword_102418F90 != -1) {
    dispatch_once(&qword_102418F90, &stru_1022F4240);
  }
  uint64_t v3 = qword_102418F98;
  if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 134218498;
    id v15 = v2;
    __int16 v16 = 2048;
    uint64_t v17 = 0;
    __int16 v18 = 2080;
    unint64_t v19 = 0x8000000101D8CCF6 & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  }
  if (!sub_10013D1A0(115, 0)) {
    return 0;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102418F90 != -1) {
LABEL_20:
  }
    dispatch_once(&qword_102418F90, &stru_1022F4240);
LABEL_18:
  int v8 = 134218498;
  id v9 = v2;
  __int16 v10 = 2048;
  uint64_t v11 = 0;
  __int16 v12 = 2080;
  unint64_t v13 = 0x8000000101D8CCF6 & 0x7FFFFFFFFFFFFFFFLL;
  int v6 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMagneticAccessory_Type::NotificationData, Callbacunint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v6);
  if (v6 != (char *)buf) {
    free(v6);
  }
  return 0;
}

id sub_100D48A98(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022F4240);
      }
      uint64_t v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D8CCF6 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMagneticAccessory_Type::NotificationData, Callbacunint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022F4240);
      }
      uint64_t v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)int buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D8CCF6 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1022F4240);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

id sub_100D48E58(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_1023933E0))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)264) {
      sub_101A8B680();
    }
    [a2 setCppObjectPtr:[objc_msgSend(objc_msgSend(a2, "serialized"), "bytes") bytes]];
  }

  return [a2 cppObjectPtr];
}

void sub_100D48EE0(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t *sub_100D48F10(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100D48F68(a1, *a2, a2 + 1);
  return a1;
}

void sub_100D48F50(_Unwind_Exception *a1)
{
  sub_1000DB264(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100D48F68(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    int v6 = result + 1;
    do
    {
      uint64_t result = sub_100D48FF4(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      char v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          id v8 = (const void ***)v7;
          char v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          id v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      uint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_100D48FF4(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  int v6 = (uint64_t **)sub_100645F1C(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_100D49078((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000EDF90(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

unsigned char *sub_100D49078@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t result = sub_1000DC48C(result, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  unsigned char v6[56] = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_100D49104(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_1001F7F34(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_100D49120(uint64_t a1)
{
  *(void *)a1 = off_1022F4270;
  id v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  *id v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_100D49190()
{
}

uint64_t sub_100D49244(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

id sub_100D492EC(uint64_t a1)
{
  id v2 = -[CLWifiAssociatedApCentroidMO initWithContext:]([CLWifiAssociatedApCentroidMO alloc], "initWithContext:", [*(id *)(a1 + 32) managedObjectContext]);
  -[CLWifiAssociatedApCentroidMO setMac:](v2, "setMac:", [objc_alloc((Class)NSString) initWithString:[*(id *)(a1 + 40) mac]]);
  [*(id *)(a1 + 40) latitude];
  -[CLWifiAssociatedApCentroidMO setLatitude:](v2, "setLatitude:");
  [*(id *)(a1 + 40) longitude];
  -[CLWifiAssociatedApCentroidMO setLongitude:](v2, "setLongitude:");
  [*(id *)(a1 + 40) altitude];
  -[CLWifiAssociatedApCentroidMO setAltitude:](v2, "setAltitude:");
  [*(id *)(a1 + 40) horizontalAccuracy];
  -[CLWifiAssociatedApCentroidMO setHorizontalAccuracy:](v2, "setHorizontalAccuracy:");
  [*(id *)(a1 + 40) verticalAccuracy];
  -[CLWifiAssociatedApCentroidMO setVerticalAccuracy:](v2, "setVerticalAccuracy:");
  -[CLWifiAssociatedApCentroidMO setReach:](v2, "setReach:", [*(id *)(a1 + 40) reach]);
  -[CLWifiAssociatedApCentroidMO setLoiType:](v2, "setLoiType:", [objc_alloc((Class)NSString) initWithString:[*(id *)(a1 + 40) loiType]]);
  [*(id *)(a1 + 40) stationaryTimeInSeconds];
  -[CLWifiAssociatedApCentroidMO setStationaryTimeInSeconds:](v2, "setStationaryTimeInSeconds:");
  [*(id *)(a1 + 40) lastUpdated];

  return -[CLWifiAssociatedApCentroidMO setLastUpdated:](v2, "setLastUpdated:");
}

uint64_t sub_100D4991C(uint64_t a1, uint64_t a2)
{
  sub_10006EF84(a2, "maxCacheCount", (_DWORD *)(a1 + 8));
  sub_10006EF84(a2, "maxHarvest", (_DWORD *)(a1 + 12));
  sub_1000A699C(a2, "minGapTime", (void *)(a1 + 16));
  sub_1000A699C(a2, "maxGapTime", (void *)(a1 + 24));
  sub_1000A699C(a2, "minWifiTimespan", (void *)(a1 + 32));
  sub_10006EF84(a2, "maxEvents", (_DWORD *)(a1 + 12));
  sub_1000A699C(a2, "targetCompassUpdateInterval", (void *)(a1 + 48));
  sub_1000A699C(a2, "traceDuration", (void *)(a1 + 40));
  sub_1000A699C(a2, "traceFuzzInterval", (void *)(a1 + 56));
  sub_1000D2988(a2, "traceOnDiskHarvestingOnly", (BOOL *)(a1 + 64));
  sub_1000A699C(a2, "traceUploadInterval", (void *)(a1 + 72));
  uint64_t v4 = sub_101069FA0();
  if ((int *)(a1 + 104) != v4 + 28)
  {
    *(_DWORD *)(a1 + 136) = v4[36];
    sub_100D4CE70((void *)(a1 + 104), *((void **)v4 + 16), 0);
  }
  BOOL v41 = 0;
  if (sub_1004D1D1C(a2, @"HarvestTraceVisionBlockingLoiTypes", (CFTypeRef *)&v41))
  {
    sub_1000E2F40((void *)(a1 + 104));
    uint64_t v5 = v41;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    id v6 = [v41 countByEnumeratingWithState:&v37 objects:v44 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v38;
      do
      {
        uint64_t v9 = 0;
        do
        {
          if (*(void *)v38 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void **)(*((void *)&v37 + 1) + 8 * (void)v9);
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            id v36 = [v10 integerValue];
            sub_10089DA1C(a1 + 104, (unint64_t *)&v36, &v36);
          }
          uint64_t v9 = (char *)v9 + 1;
        }
        while (v7 != v9);
        id v7 = [v5 countByEnumeratingWithState:&v37 objects:v44 count:16];
      }
      while (v7);
    }
  }
  __int16 v11 = sub_101069FA0();
  if ((int *)(a1 + 144) != v11 + 38)
  {
    *(_DWORD *)(a1 + 176) = v11[46];
    sub_100D4CE70((void *)(a1 + 144), *((void **)v11 + 21), 0);
  }
  id v36 = 0;
  if (sub_1004D1D1C(a2, @"HarvestTraceNonVisionBlockingLoiTypes", (CFTypeRef *)&v36))
  {
    sub_1000E2F40((void *)(a1 + 144));
    unint64_t v12 = v36;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    id v13 = [v36 countByEnumeratingWithState:&v32 objects:v43 count:16];
    if (v13)
    {
      id v14 = v13;
      uint64_t v15 = *(void *)v33;
      do
      {
        __int16 v16 = 0;
        do
        {
          if (*(void *)v33 != v15) {
            objc_enumerationMutation(v12);
          }
          uint64_t v17 = *(void **)(*((void *)&v32 + 1) + 8 * (void)v16);
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            id v31 = [v17 integerValue];
            sub_10089DA1C(a1 + 144, (unint64_t *)&v31, &v31);
          }
          __int16 v16 = (char *)v16 + 1;
        }
        while (v14 != v16);
        id v14 = [v12 countByEnumeratingWithState:&v32 objects:v43 count:16];
      }
      while (v14);
    }
  }
  __int16 v18 = sub_101069FA0();
  if ((int *)(a1 + 184) != v18 + 48)
  {
    *(_DWORD *)(a1 + 216) = v18[56];
    sub_100D4CE70((void *)(a1 + 184), *((void **)v18 + 26), 0);
  }
  id v31 = 0;
  if (sub_1004D1D1C(a2, @"HarvestTraceTriggeringLoiTypes", (CFTypeRef *)&v31))
  {
    sub_1000E2F40((void *)(a1 + 184));
    unint64_t v19 = v31;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    id v20 = [v31 countByEnumeratingWithState:&v27 objects:v42 count:16];
    if (v20)
    {
      id v21 = v20;
      uint64_t v22 = *(void *)v28;
      do
      {
        int v23 = 0;
        do
        {
          if (*(void *)v28 != v22) {
            objc_enumerationMutation(v19);
          }
          BOOL v24 = *(void **)(*((void *)&v27 + 1) + 8 * (void)v23);
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            id v26 = [v24 integerValue];
            sub_10089DA1C(a1 + 184, (unint64_t *)&v26, &v26);
          }
          int v23 = (char *)v23 + 1;
        }
        while (v21 != v23);
        id v21 = [v19 countByEnumeratingWithState:&v27 objects:v42 count:16];
      }
      while (v21);
    }
  }
  *(_DWORD *)(a1 + 80) = sub_101069FA0()[1];
  sub_10006EF84(a2, "HarvestTraceMaxVisionEnabled", (_DWORD *)(a1 + 80));
  *(_DWORD *)(a1 + 88) = *sub_101069FA0();
  sub_10006EF84(a2, "HarvestTraceMaxNumSubmissionsScored", (_DWORD *)(a1 + 88));
  sub_1000D2988(a2, "HarvestImmediateNonVisionTraceHarvestAllowed", (BOOL *)(a1 + 84));
  *(void *)(a1 + 96) = *((void *)sub_101069FA0() + 11);
  sub_1000A699C(a2, "HarvestTraceVisionSecondsBetweenVLDebugInfo", (void *)(a1 + 96));
  *(unsigned char *)(a1 + 224) = *((unsigned char *)sub_101069FA0() + 232);
  sub_1000D2988(a2, "traceAllowInertialOdometryNotifications", (BOOL *)(a1 + 224));
  *(unsigned char *)(a1 + 225) = *((unsigned char *)sub_101069FA0() + 233);
  return sub_1000D2988(a2, "traceAllowOutdoorServiceNotifications", (BOOL *)(a1 + 225));
}

uint64_t sub_100D49E8C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (BOOL *)(a1 + 64);
  uint64_t result = sub_1000D2988(*a2, "HarvestTraceOnDiskOnly", (BOOL *)(a1 + 64));
  if ((result & 1) == 0)
  {
    uint64_t v5 = *a2;
    return sub_1000D2988(v5, "RealTimeHarvesting", v3);
  }
  return result;
}

uint64_t sub_100D49F00(uint64_t a1)
{
  sub_10010F274((uint64_t)v38);
  id v2 = sub_100132EFC(v39, (uint64_t)"Settings(", 9);
  sub_100132EFC(v2, (uint64_t)"fMaxCacheCount,", 15);
  uint64_t v3 = (void *)std::ostream::operator<<();
  uint64_t v4 = sub_100132EFC(v3, (uint64_t)", ", 2);
  sub_100132EFC(v4, (uint64_t)"fMaxEvents,", 11);
  uint64_t v5 = (void *)std::ostream::operator<<();
  id v6 = sub_100132EFC(v5, (uint64_t)", ", 2);
  sub_100132EFC(v6, (uint64_t)"fMinGapTime,", 12);
  id v7 = (void *)std::ostream::operator<<();
  uint64_t v8 = sub_100132EFC(v7, (uint64_t)", ", 2);
  sub_100132EFC(v8, (uint64_t)"fMaxGapTime,", 12);
  uint64_t v9 = (void *)std::ostream::operator<<();
  uint64_t v10 = sub_100132EFC(v9, (uint64_t)", ", 2);
  sub_100132EFC(v10, (uint64_t)"fMinWifiTimespan,", 17);
  __int16 v11 = (void *)std::ostream::operator<<();
  unint64_t v12 = sub_100132EFC(v11, (uint64_t)", ", 2);
  sub_100132EFC(v12, (uint64_t)"fTraceDuration,", 15);
  id v13 = (void *)std::ostream::operator<<();
  id v14 = sub_100132EFC(v13, (uint64_t)", ", 2);
  sub_100132EFC(v14, (uint64_t)"fTargetCompassUpdateInterval,", 29);
  uint64_t v15 = (void *)std::ostream::operator<<();
  __int16 v16 = sub_100132EFC(v15, (uint64_t)", ", 2);
  sub_100132EFC(v16, (uint64_t)"fTraceFuzzInterval,", 19);
  uint64_t v17 = (void *)std::ostream::operator<<();
  __int16 v18 = sub_100132EFC(v17, (uint64_t)", ", 2);
  sub_100132EFC(v18, (uint64_t)"fTraceOnDiskHarvestingOnly,", 27);
  unint64_t v19 = (void *)std::ostream::operator<<();
  id v20 = sub_100132EFC(v19, (uint64_t)", ", 2);
  sub_100132EFC(v20, (uint64_t)"fTraceUploadInterval,", 21);
  id v21 = (void *)std::ostream::operator<<();
  uint64_t v22 = sub_100132EFC(v21, (uint64_t)", ", 2);
  sub_100132EFC(v22, (uint64_t)"fMaxVisionEnabledTraces,", 24);
  int v23 = (void *)std::ostream::operator<<();
  BOOL v24 = sub_100132EFC(v23, (uint64_t)", ", 2);
  sub_100132EFC(v24, (uint64_t)"fMaxNumSubmissionsScoredTraces,", 31);
  __int16 v25 = (void *)std::ostream::operator<<();
  id v26 = sub_100132EFC(v25, (uint64_t)", ", 2);
  sub_100132EFC(v26, (uint64_t)"fHarvestImmediateNonVisionTraceHarvestAllowed,", 46);
  long long v27 = (void *)std::ostream::operator<<();
  long long v28 = sub_100132EFC(v27, (uint64_t)", ", 2);
  sub_100132EFC(v28, (uint64_t)"fVisionSecondsBetweenVLDebugInfo,", 33);
  long long v29 = (void *)std::ostream::operator<<();
  long long v30 = sub_100132EFC(v29, (uint64_t)", ", 2);
  sub_100132EFC(v30, (uint64_t)"fAllowInertialOdometryNotifications,", 36);
  id v31 = (void *)std::ostream::operator<<();
  long long v32 = sub_100132EFC(v31, (uint64_t)", ", 2);
  sub_100132EFC(v32, (uint64_t)"fAllowOutdoorServiceNotifications,", 34);
  long long v33 = (void *)std::ostream::operator<<();
  long long v34 = sub_100132EFC(v33, (uint64_t)",", 1);
  sub_100132EFC(v34, (uint64_t)"fVisionTraceBlockLoiTypes,[", 27);
  sub_100D4D3B0(*(void *)(a1 + 120), 0, (uint64_t)v39, (uint64_t)",", v41);
  long long v35 = sub_100132EFC(v39, (uint64_t)"], ", 3);
  sub_100132EFC(v35, (uint64_t)"fNonVisionTraceBlockLoiTypes,[", 30);
  sub_100D4D3B0(*(void *)(a1 + 160), 0, (uint64_t)v39, (uint64_t)",", v41);
  sub_100132EFC(v39, (uint64_t)"])", 2);
  std::stringbuf::str();
  *(void *)((char *)v38
  v39[0] = v36;
  if (v40 < 0) {
    operator delete((void *)v39[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100D4A37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100D4A390(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = (std::__shared_weak_count *)a4[1];
  uint64_t v35 = *a4;
  uint64_t v36 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __int16 v11 = (std::__shared_weak_count *)a5[1];
  uint64_t v33 = *a5;
  long long v34 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v12 = (std::__shared_weak_count *)a6[1];
  uint64_t v31 = *a6;
  long long v32 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v30[0] = xmmword_102481208;
  v30[1] = unk_102481218;
  v30[2] = xmmword_102481228;
  sub_100D6AEB4(a1, a2, 10, &v35, &v33, &v31, a8, a7, v30);
  if (v32) {
    sub_1000DB0A0(v32);
  }
  if (v34) {
    sub_1000DB0A0(v34);
  }
  if (v36) {
    sub_1000DB0A0(v36);
  }
  *(void *)a1 = off_1022F4298;
  *(void *)(a1 + 352) = off_1022F43B8;
  *(void *)(a1 + 360) = *a3;
  uint64_t v13 = a3[1];
  *(void *)(a1 + 368) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 376) = off_1022F4470;
  *(void *)(a1 + 384) = 0x61A8000003E8;
  *(void *)(a1 + 392) = 0x40D5180000000000;
  *(_OWORD *)(a1 + 400) = xmmword_101D8CD30;
  *(_OWORD *)(a1 + 416) = xmmword_101D8CD40;
  *(void *)(a1 + 432) = 0x40F5180000000000;
  *(unsigned char *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0x40F5180000000000;
  *(_DWORD *)(a1 + 456) = 1;
  *(unsigned char *)(a1 + 460) = 0;
  *(_DWORD *)(a1 + 464) = 1;
  *(void *)(a1 + 472) = 0x4022000000000000;
  *(void *)&v37[0] = 0;
  sub_100D4CDC8(a1 + 480, (unint64_t *)v37, 1);
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_DWORD *)(a1 + 552) = 1065353216;
  v37[0] = xmmword_101D8CDB8;
  v37[1] = unk_101D8CDC8;
  sub_100D4CDC8(a1 + 560, (unint64_t *)v37, 4);
  *(_WORD *)(a1 + 600) = 257;
  id v14 = *(std::__shared_weak_count **)(a1 + 64);
  uint64_t v28 = *(void *)(a1 + 56);
  long long v29 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 368);
  uint64_t v26 = *(void *)(a1 + 360);
  long long v27 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = sub_10012FD50(a1);
  sub_101092E90(a1 + 608, a1 + 376, &v28, &v26, v16);
  if (v27) {
    sub_1000DB0A0(v27);
  }
  if (v29) {
    sub_1000DB0A0(v29);
  }
  *(unsigned char *)(a1 + 904) = 0;
  *(void *)&v37[0] = *(void *)(a1 + 416);
  sub_100D4D480((double *)v37, (void *)(a1 + 920));
  uint64_t v17 = *(void *)(a1 + 72);
  __int16 v18 = (std::__shared_weak_count *)a3[1];
  uint64_t v24 = *a3;
  __int16 v25 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100F7143C(a1 + 936, a1 + 376, v17, &v24, a1 + 920);
  if (v25) {
    sub_1000DB0A0(v25);
  }
  uint64_t v19 = *(void *)(a1 + 72);
  id v20 = (std::__shared_weak_count *)a3[1];
  uint64_t v22 = *a3;
  int v23 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100E47CD4(a1 + 1104, a1 + 376, v19, &v22, a1 + 920);
  if (v23) {
    sub_1000DB0A0(v23);
  }
  sub_100D8F144((void *)(a1 + 1336), a1 + 376, *(void *)(a1 + 72));
  sub_100134750((void *)(a1 + 1384), off_1024743E0[0]);
  *(_DWORD *)(a1 + 1408) = 0;
  *(unsigned char *)(a1 + 1416) = 1;
  *(_WORD *)(a1 + 1424) = 0;
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 360) + 32))(*(void *)(a1 + 360), a1 + 376);
  sub_100E482F8(a1 + 1104);
  sub_101092EE0(a1 + 608);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 360) + 16))(*(void *)(a1 + 360), a1 + 352);
  *(double *)(a1 + 912) = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                        + *(double *)(a1 + 448);
  *(void *)(a1 + 1376) = 0;
  return a1;
}

void sub_100D4A7C8(_Unwind_Exception *a1)
{
  sub_100D8F1B8(v4);
  sub_100E47CD8(v6);
  sub_100F71440(v5);
  uint64_t v8 = *(std::__shared_weak_count **)(v1 + 928);
  if (v8) {
    sub_1000DB0A0(v8);
  }
  sub_101092EDC(v3);
  sub_100D4A8D8(v2);
  uint64_t v9 = *(std::__shared_weak_count **)(v1 + 368);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  sub_1003C0998(v1);
  _Unwind_Resume(a1);
}

void *sub_100D4A8D8(void *a1)
{
  *a1 = off_1022F4470;
  uint64_t v2 = (uint64_t)(a1 + 13);
  sub_1000D7D80((uint64_t)(a1 + 23));
  sub_1000D7D80((uint64_t)(a1 + 18));
  sub_1000D7D80(v2);
  return a1;
}

uint64_t sub_100D4A938(uint64_t a1)
{
  *(void *)a1 = off_1022F4298;
  *(void *)(a1 + 352) = off_1022F43B8;
  if (*(unsigned char *)(a1 + 1416)) {
    sub_100178B14(a1 + 1384);
  }
  sub_100D8F1B8(a1 + 1336);
  sub_100E47CD8((void *)(a1 + 1104));
  sub_100F71440((void *)(a1 + 936));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 928);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  sub_101092EDC(a1 + 608);
  *(void *)(a1 + 376) = off_1022F4470;
  sub_1000D7D80(a1 + 560);
  sub_1000D7D80(a1 + 520);
  sub_1000D7D80(a1 + 480);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 368);
  if (v3) {
    sub_1000DB0A0(v3);
  }

  return sub_1003C0998(a1);
}

uint64_t sub_100D4AA2C(uint64_t a1)
{
  return sub_100D4A938(a1 - 352);
}

void sub_100D4AA34(uint64_t a1)
{
  sub_100D4A938(a1);

  operator delete();
}

void sub_100D4AA6C(uint64_t a1)
{
  sub_100D4A938(a1 - 352);

  operator delete();
}

uint64_t sub_100D4AAA8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 360) + 24))();
}

uint64_t sub_100D4AAD0(uint64_t a1, uint64_t a2)
{
  sub_1000E9354(v15);
  long long v4 = unk_102481218;
  *(_OWORD *)(a1 + 280) = xmmword_102481208;
  *(_OWORD *)(a1 + 296) = v4;
  *(_OWORD *)(a1 + 305) = unk_102481221;
  if (sub_100012960(a2, "Trace", v15))
  {
    sub_1012B77D8(a1 + 280, (uint64_t)v15);
    sub_1000E9354(&buf);
    BOOL v5 = sub_100012960((uint64_t)v15, "Settings", &buf);
    sub_100D4991C(a1 + 376, (uint64_t)&buf);
    sub_10013F3C4(&buf);
  }
  else
  {
    BOOL v5 = 0;
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022F4580);
  }
  id v6 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    sub_10012FD50(a1);
    unsigned int v7 = sub_10012FD50(a1);
    sub_1012B7520();
    sub_100D49F00(a1 + 376);
    uint64_t v8 = &v13;
    if (v14 < 0) {
      uint64_t v8 = v13;
    }
    LODWORD(buf) = 68290051;
    if (v12 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    HIDWORD(buf) = 0;
    __int16 v17 = 2082;
    __int16 v18 = "";
    __int16 v19 = 2050;
    uint64_t v20 = v7;
    __int16 v21 = 2081;
    uint64_t v22 = v8;
    __int16 v23 = 2081;
    uint64_t v24 = p_p;
    __int16 v25 = 1025;
    BOOL v26 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"harvest-apply-rules\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"rules\":%{private, location:escape_only}s, \"settings\":%{private, location:escape_only}s, \"override_settings\":%{private}d}", (uint8_t *)&buf, 0x36u);
    if (v12 < 0) {
      operator delete(__p);
    }
    if (v14 < 0) {
      operator delete(v13);
    }
  }
  return sub_10013F3C4(v15);
}

void sub_100D4ACF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_10013F3C4(&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_100D4AD48(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102481240, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102481240))
  {
    byte_102481238 = ((*(uint64_t (**)(void))(**(void **)(a1 + 56) + 72))(*(void *)(a1 + 56)) & 2) != 0;
    __cxa_guard_release(&qword_102481240);
  }
  return byte_102481238;
}

void sub_100D4ADE0(_Unwind_Exception *a1)
{
}

void sub_100D4ADF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!*(unsigned char *)(a1 + 440))
  {
    uint64_t v9 = 0;
    uint64_t v10 = &v9;
    uint64_t v11 = 0x2020000000;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    _OWORD v8[2] = sub_100D4AF48;
    void v8[3] = &unk_1022F4418;
    uint64_t v8[4] = &v9;
    v8[5] = a1;
    uint64_t v12 = a1 + 936;
    (*(void (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 936) + 72))(a1 + 936, v8, a3, a4, a5, a6, a7);
    v10[3] = a1 + 1104;
    (*(void (**)(uint64_t, void *))(*(void *)(a1 + 1104) + 72))(a1 + 1104, v8);
    sub_100D4B21C(a1);
    *(double *)(a1 + 912) = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
                          + *(double *)(a1 + 448);
    _Block_object_dispose(&v9, 8);
  }
}

void sub_100D4AF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100D4AF48(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = objc_alloc_init((Class)CLPTraceCollectionRequest);
  [v5 setMeta:+[CLPMeta meta](CLPMeta, "meta")];
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  [v5 setType:(*(uint64_t (**)(uint64_t, void *))(*(void *)v6 + 80))(v6, a2)];
  [a2 overwritePrimaryObject:v5];

  sub_1000C7F88(buf);
  LOBYTE(v12[0]) = 0;
  int v7 = sub_1000D2988(*(uint64_t *)buf, "BypassTraceHarvestUpload", (BOOL *)v12);
  if (LOBYTE(v12[0])) {
    int v8 = v7;
  }
  else {
    int v8 = 0;
  }
  if (v14) {
    sub_1000DB0A0(v14);
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022F4580);
  }
  uint64_t v9 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Force allow trace harvest, %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F4580);
    }
    v12[0] = 67240192;
    v12[1] = v8;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSubHarvesterTrace::derivedUploadArchivedHarvest()_block_invoke", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  if ((v8 & 1) == 0)
  {
    uint64_t v10 = [[CLHUploadRequest alloc] initWithArchive:a2];
    -[CLHUploadRequest setEndpoint:](v10, "setEndpoint:[objc_msgSend(*(id *)(v4 + 80), \"endpointSelector\") traceEndpoint]");
    [*(id *)(v4 + 80) submitRequest:v10];
  }
}

void sub_100D4B1FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

id sub_100D4B21C(uint64_t a1)
{
  sub_100F71AFC(a1 + 936);
  sub_100E482F8(a1 + 1104);
  sub_100D8F2D0(a1 + 1336);
  *(void *)(a1 + 1376) = 0;
  *(unsigned char *)(a1 + 904) = 0;

  return sub_1001AF4C8((void *)(a1 + 608));
}

uint64_t sub_100D4B270(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 904) = 0;
  sub_1001A7D50(a1);
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022F4580);
  }
  uint64_t v4 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 1376) + 104))(*(void *)(a1 + 1376));
    *(_DWORD *)uint64_t buf = 138412290;
    uint64_t v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%@ completing trace", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F4580);
    }
    (*(void (**)(void))(**(void **)(a1 + 1376) + 104))(*(void *)(a1 + 1376));
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSubHarvesterTrace::completeTrace(BOOL)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 1376) + 24))(*(void *)(a1 + 1376), a2);
  *(void *)(a1 + 1376) = 0;
  return result;
}

uint64_t sub_100D4B4AC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = sub_10012FD50(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 24))(v2, v3, 1);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = sub_10012FD50(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 24))(v4, v5, 7);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = sub_10012FD50(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 24))(v6, v7, 3);
  return 1;
}

id sub_100D4B580(uint64_t a1)
{
  sub_1001AF4C8((void *)(a1 + 608));
  *(unsigned char *)(a1 + 904) = 0;
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = sub_10012FD50(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 32))(v2, v3, 1);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = sub_10012FD50(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 32))(v4, v5, 7);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = sub_10012FD50(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, v7, 3);
  sub_100D4B684(a1 + 1384, (const std::string::value_type **)off_1024743E0);

  return sub_100D4B21C(a1);
}

uint64_t sub_100D4B684(uint64_t a1, const std::string::value_type **a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    sub_100D4D5C4(a1, (std::string *)a1, a2);
  }
  else
  {
    sub_100134750((void *)a1, (char *)*a2);
    *(_DWORD *)(a1 + 24) = 0;
    *(unsigned char *)(a1 + 32) = 1;
  }
  return a1;
}

BOOL sub_100D4B6DC(uint64_t a1)
{
  return !*(unsigned char *)(a1 + 440)
      && (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56)) >= *(double *)(a1 + 912)
      && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1) != 0;
}

uint64_t sub_100D4B770(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v7 = a3;
  uint64_t result = sub_1000E65E0(a1);
  if ((result & 1) == 0) {
    return sub_101093390(a1 + 608, (uint64_t)&v7, a4, 1);
  }
  return result;
}

uint64_t sub_100D4B7BC(uint64_t result, uint64_t a2, int a3, _DWORD *a4)
{
  int v9 = a3;
  if (a3 == 3)
  {
    uint64_t v4 = result;
    if (*(unsigned char *)(result + 88))
    {
      sub_1000E65E0(result);
      if ((sub_1000E6694(v4) & 1) == 0 && *a4 == 4)
      {
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_1022F4580);
        }
        uint64_t v6 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
        {
          sub_10012FD50(v4);
          *(_DWORD *)uint64_t buf = 68289282;
          int v11 = 0;
          __int16 v12 = 2082;
          uint64_t v13 = "";
          __int16 v14 = 2050;
          uint64_t v15 = sub_10012FD50(v4);
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Starting trace for CLMotionActivity::kTypeWalking\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
        }
        if (*(unsigned char *)(v4 + 440))
        {
          sub_1001A7F0C(v4, v4 + 1336);
        }
        else
        {
          if (sub_1001A7F0C(v4, v4 + 936))
          {
            uint64_t v7 = v4;
            int v8 = 4;
          }
          else
          {
            uint64_t v7 = v4;
            int v8 = 5;
          }
          sub_1001A7CCC(v7, v8);
        }
      }
      uint64_t result = sub_1000E6694(v4);
      if (result) {
        return sub_1010937B4(v4 + 608, &v9, (uint64_t)a4);
      }
    }
  }
  return result;
}

void sub_100D4B954(uint64_t a1)
{
  if ((sub_1000E65E0(a1) & 1) == 0) {
    sub_101093C08((double *)(a1 + 608));
  }
}

uint64_t sub_100D4B99C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1000E65E0(a1);
  if ((result & 1) == 0)
  {
    return sub_10006BD74(a1 + 608, a2);
  }
  return result;
}

void sub_100D4B9EC(uint64_t a1, uint64_t a2)
{
  if ((sub_1000E65E0(a1) & 1) == 0)
  {
    sub_101093F94(a1 + 608, a2);
  }
}

void sub_100D4BA3C(uint64_t a1, uint64_t a2)
{
  if ((sub_1000E65E0(a1 - 352) & 1) == 0)
  {
    sub_101093F94(a1 + 256, a2);
  }
}

void sub_100D4BA90(uint64_t a1, uint64_t a2, _DWORD *a3, double *a4)
{
  if ((sub_1000E65E0(a1) & 1) == 0)
  {
    sub_101094178(a1 + 608, a3, a4);
  }
}

void sub_100D4BAF4(uint64_t a1, uint64_t a2, _DWORD *a3, double *a4)
{
  if ((sub_1000E65E0(a1 - 352) & 1) == 0)
  {
    sub_101094178(a1 + 256, a3, a4);
  }
}

uint64_t sub_100D4BB5C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1000E65E0(a1);
  if ((result & 1) == 0)
  {
    return sub_10006BA88(a1 + 608, a2);
  }
  return result;
}

void sub_100D4BBAC(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 88))
  {
    sub_1000E65E0(a1);
    if (sub_1000E6694(a1))
    {
      if (*(void *)(a1 + 1376) == a1 + 936)
      {
        uint64_t v4 = *(void *)(a1 + 920);
        double v5 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
        sub_1011C5764(v4, 2, v5);
      }
    }
    else
    {
      sub_1001A7F0C(a1, a1 + 1104);
    }
    if (sub_1000E6694(a1)
      && (*(unsigned int (**)(void))(**(void **)(a1 + 1376) + 88))(*(void *)(a1 + 1376)))
    {
      sub_1010945A0(a1 + 608, a2);
    }
  }
}

void sub_100D4BCAC(uint64_t a1, void *a2)
{
}

void sub_100D4BCB4(uint64_t a1, void *a2, void *a3)
{
  if (*(unsigned char *)(a1 + 88))
  {
    sub_1000E65E0(a1);
    if (sub_1000E6694(a1))
    {
      if (*(void *)(a1 + 1376) == a1 + 936)
      {
        uint64_t v6 = *(void *)(a1 + 920);
        double v7 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
        sub_1011C5764(v6, 2, v7);
      }
    }
    else
    {
      sub_1001A7F0C(a1, a1 + 1104);
    }
    if (sub_1000E6694(a1)
      && (*(unsigned int (**)(void))(**(void **)(a1 + 1376) + 88))(*(void *)(a1 + 1376)))
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022F4580);
      }
      int v8 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        v10[0] = 68289283;
        v10[1] = 0;
        __int16 v11 = 2082;
        __int16 v12 = "";
        __int16 v13 = 2081;
        id v14 = [a3 UTF8String];
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Maps488 check: client key\", \"key\":%{private, location:escape_only}s}", (uint8_t *)v10, 0x1Cu);
      }
      if (*(unsigned char *)(a1 + 1424) && *(unsigned char *)(a1 + 1425)) {
        int v9 = [a3 isEqualToString:@"com.apple.Maps"];
      }
      else {
        int v9 = 0;
      }
      sub_10109478C(a1 + 608, a2, v9);
    }
  }
}

void sub_100D4BE9C(uint64_t a1, void *a2, void *a3)
{
}

void sub_100D4BEA4(uint64_t a1, int a2)
{
  if ((a2 & 1) == 0 && *(unsigned char *)(a1 + 1424) && *(unsigned char *)(a1 + 1425))
  {
    uint64_t v4 = *(void *)(a1 + 1376);
    if (v4 && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 88))(v4))
    {
      [(id)(*(uint64_t (**)(void))(**(void **)(a1 + 1376) + 40))(*(void *)(a1 + 1376)) secondaryDataSize];
      sub_1011C5608();
      sub_100D4B270(a1, 1);
    }
    sub_100E482F8(a1 + 1104);
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022F4580);
  }
  double v5 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 68289283;
    v6[1] = 0;
    __int16 v7 = 2082;
    int v8 = "";
    __int16 v9 = 1025;
    int v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Update server maps488 enabled\", \"enabled\":%{private}d}", (uint8_t *)v6, 0x18u);
  }
  *(unsigned char *)(a1 + 1424) = a2;
}

void sub_100D4C03C(uint64_t a1, int a2)
{
}

void sub_100D4C044(uint64_t a1, int a2)
{
  if ((a2 & 1) == 0 && *(unsigned char *)(a1 + 1424) && *(unsigned char *)(a1 + 1425))
  {
    uint64_t v4 = *(void *)(a1 + 1376);
    if (v4 && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 88))(v4))
    {
      [(id)(*(uint64_t (**)(void))(**(void **)(a1 + 1376) + 40))(*(void *)(a1 + 1376)) secondaryDataSize];
      sub_1011C5608();
      sub_100D4B270(a1, 1);
    }
    sub_100E482F8(a1 + 1104);
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022F4580);
  }
  double v5 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 68289283;
    v6[1] = 0;
    __int16 v7 = 2082;
    int v8 = "";
    __int16 v9 = 1025;
    int v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Update user maps488 enabled\", \"enabled\":%{private}d}", (uint8_t *)v6, 0x18u);
  }
  *(unsigned char *)(a1 + 1425) = a2;
}

void sub_100D4C1DC(uint64_t a1, int a2)
{
}

void sub_100D4C1E4(uint64_t a1, void *a2, id a3)
{
  if (a3)
  {
    a3 = [a3 type];
    uint64_t v5 = 1;
  }
  else
  {
    uint64_t v5 = 0;
  }

  sub_100D4C23C(a1, a2, (uint64_t)a3, v5);
}

void sub_100D4C23C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022F4580);
  }
  uint64_t v6 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    sub_10012FD50(a1);
    *(_DWORD *)uint64_t buf = 68289539;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v34 = 2082;
    uint64_t v35 = "";
    __int16 v36 = 2050;
    uint64_t v37 = sub_10012FD50(a1);
    __int16 v38 = 2113;
    long long v39 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"received leeched visit notification\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"visit\":%{private, location:escape_only}@}", buf, 0x26u);
  }
  if ([a2 hasDepartureDate])
  {
    uint64_t v7 = a1 + 1384;
    if (*(unsigned char *)(a1 + 1416))
    {
      sub_100178B14(a1 + 1384);
      *(unsigned char *)(a1 + 1416) = 0;
    }
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F4580);
    }
    int v8 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      sub_10012FD50(a1);
      unsigned int v9 = sub_10012FD50(a1);
      *(void *)uint64_t buf = 68289282;
      __int16 v34 = 2082;
      uint64_t v35 = "";
      __int16 v36 = 2050;
      uint64_t v37 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"departure a visit; reset LOI type info\", \"subHarvester\":%{public, location:CLSubHarves"
        "terIdentifier}lld}",
        buf,
        0x1Cu);
    }
    uint64_t v10 = *(void *)(a1 + 1376);
    if (v10)
    {
      sub_100176CA0(v30, v7);
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v10 + 64))(v10, v30);
      if (v30[32])
      {
        __int16 v11 = v30;
LABEL_49:
        sub_100178B14((uint64_t)v11);
        return;
      }
    }
    return;
  }
  if ((_BYTE)v32)
  {
    if (*(unsigned char *)(a1 + 1416))
    {
      sub_100D4D688(a1 + 1384, &v31);
    }
    else
    {
      *(void *)(a1 + 1384) = v31;
      *(_DWORD *)(a1 + 1408) = 1;
      *(unsigned char *)(a1 + 1416) = 1;
    }
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F4580);
    }
    uint64_t v12 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      sub_10012FD50(a1);
      unsigned int v13 = sub_10012FD50(a1);
      if (!(_BYTE)v32) {
        sub_10020D700();
      }
      *(void *)uint64_t buf = 68289539;
      __int16 v34 = 2082;
      uint64_t v35 = "";
      __int16 v36 = 2050;
      uint64_t v37 = v13;
      __int16 v38 = 1025;
      LODWORD(v39) = v31;
      id v14 = "{\"msg%{public}.0s\":\"cache loi type\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \""
            "type\":%{private}d}";
      uint64_t v15 = v12;
      uint32_t v16 = 34;
      goto LABEL_31;
    }
  }
  else
  {
    *(void *)uint64_t buf = -1;
    if (*(unsigned char *)(a1 + 1416))
    {
      sub_100D4D688(a1 + 1384, buf);
    }
    else
    {
      *(void *)(a1 + 1384) = -1;
      *(_DWORD *)(a1 + 1408) = 1;
      *(unsigned char *)(a1 + 1416) = 1;
    }
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F4580);
    }
    uint64_t v17 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      sub_10012FD50(a1);
      unsigned int v18 = sub_10012FD50(a1);
      *(void *)uint64_t buf = 68289282;
      __int16 v34 = 2082;
      uint64_t v35 = "";
      __int16 v36 = 2050;
      uint64_t v37 = v18;
      id v14 = "{\"msg%{public}.0s\":\"no loi info for the visit, treating as unknown\", \"subHarvester\":%{public, location"
            ":CLSubHarvesterIdentifier}lld}";
      uint64_t v15 = v17;
      uint32_t v16 = 28;
LABEL_31:
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, v14, buf, v16);
    }
  }
  uint64_t v19 = *(void *)(a1 + 1376);
  if (v19)
  {
    sub_100176CA0(v29, a1 + 1384);
    int v20 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v19 + 96))(v19, v29);
    char v21 = v20;
    if (v29[32])
    {
      sub_100178B14((uint64_t)v29);
      if (v21)
      {
LABEL_35:
        (*(uint64_t (**)(void))(**(void **)(a1 + 1376) + 88))(*(void *)(a1 + 1376));
        [(id)(*(uint64_t (**)(void))(**(void **)(a1 + 1376) + 40))() secondaryDataSize];
        sub_1011C5608();
        sub_100D4B270(a1, 1);
        return;
      }
    }
    else if (v20)
    {
      goto LABEL_35;
    }
  }
  uint64_t v22 = a1 + 1384;
  sub_100176CA0(v28, a1 + 1384);
  BOOL v23 = sub_100D4C8F8(a1, (uint64_t)v28);
  if (v28[32]) {
    sub_100178B14((uint64_t)v28);
  }
  if (v23)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F4580);
    }
    uint64_t v24 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      sub_10012FD50(a1);
      unsigned int v25 = sub_10012FD50(a1);
      *(void *)uint64_t buf = 68289282;
      __int16 v34 = 2082;
      uint64_t v35 = "";
      __int16 v36 = 2050;
      uint64_t v37 = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Starting trace for LOI visit\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
    }
    if (*(unsigned char *)(a1 + 440))
    {
      sub_1001A7F0C(a1, a1 + 1336);
    }
    else if (sub_1001A7F0C(a1, a1 + 936))
    {
      sub_1001A7CCC(a1, 2);
    }
    else
    {
      sub_1001A7CCC(a1, 3);
    }
  }
  else
  {
    uint64_t v26 = *(void *)(a1 + 1376);
    if (v26)
    {
      sub_100176CA0(v27, v22);
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v26 + 64))(v26, v27);
      if (v27[32])
      {
        __int16 v11 = v27;
        goto LABEL_49;
      }
    }
  }
}

void sub_100D4C898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (a13) {
    sub_100178B14((uint64_t)&a9);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100D4C8F8(uint64_t a1, uint64_t a2)
{
  if (sub_1000E6694(a1)) {
    return 0;
  }
  if (!*(unsigned char *)(a2 + 32)) {
    sub_10020D700();
  }
  if (*(_DWORD *)(a2 + 24) != 1) {
    return 0;
  }
  sub_10017F25C((uint64_t)v6, a1 + 560);
  BOOL v4 = sub_1006BCC18(v6, (unint64_t *)a2) != 0;
  sub_1000D7D80((uint64_t)v6);
  return v4;
}

uint64_t sub_100D4C978@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10017F25C(a2, a1 + 184);
}

char *sub_100D4C984(uint64_t a1)
{
  uint64_t v2 = sub_100DFCADC(a1 + 936);
  return &v2[(void)sub_100DFCADC(a1 + 1104)];
}

void *sub_100D4C9BC(void *result)
{
  if (!*((unsigned char *)result + 440))
  {
    uint64_t v1 = result;
    double v2 = (*(double (**)(void))(*(void *)result[7] + 64))(result[7]);
    double v3 = v2 - (*(double (**)(void *))(*v1 + 184))(v1);
    BOOL v4 = (void *)v1[9];
    return _[v4 pruneSecondaryDataOlderThan:10 forHarvester:v3];
  }
  return result;
}

id sub_100D4CA6C(uint64_t a1)
{
  [*(id *)(a1 + 72) clearDataForHarvester:10];

  return sub_100D4B21C(a1);
}

void sub_100D4CAAC(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if ((*(_DWORD *)(v4 + 388) & 0x80000000) != 0
    || (unint64_t)[*(id *)(a1 + 32) count] < *(int *)(v4 + 388)
    || *(unsigned char *)(v4 + 440))
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F4580);
    }
    uint64_t v5 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      sub_10012FD50(v4);
      int v9 = 68289539;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2050;
      uint64_t v14 = sub_10012FD50(v4);
      __int16 v15 = 2113;
      id v16 = [a2 formattedText];
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"event\":%{private, location:escape_only}@}", (uint8_t *)&v9, 0x26u);
    }
    [*(id *)(a1 + 32) writeSecondaryObject:a2 toField:2];
    ++*(_DWORD *)(v4 + 208);
    *(double *)(v4 + 896) = (*(double (**)(void))(**(void **)(v4 + 56) + 64))(*(void *)(v4 + 56));
    (*(void (**)(void, void *))(**(void **)(v4 + 1376) + 56))(*(void *)(v4 + 1376), a2);
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F4580);
    }
    uint64_t v6 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      sub_10012FD50(v4);
      unsigned int v7 = sub_10012FD50(v4);
      int v8 = *(_DWORD *)(v4 + 388);
      int v9 = 68289539;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2050;
      uint64_t v14 = v7;
      __int16 v15 = 1025;
      LODWORD(v16) = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"max scans exceeded, removing from cache\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"maxEvents\":%{private}d}", (uint8_t *)&v9, 0x22u);
    }
  }
}

void sub_100D4CD28(void *a1)
{
  *a1 = off_1022F4470;
  uint64_t v2 = (uint64_t)(a1 + 13);
  sub_1000D7D80((uint64_t)(a1 + 23));
  sub_1000D7D80((uint64_t)(a1 + 18));
  sub_1000D7D80(v2);

  operator delete();
}

uint64_t sub_100D4CDA4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 84);
}

uint64_t sub_100D4CDAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10017F25C(a2, a1 + 104);
}

uint64_t sub_100D4CDB8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 224);
}

uint64_t sub_100D4CDC0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 225);
}

uint64_t sub_100D4CDC8(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 8 * a3;
    do
    {
      sub_10089DA1C(a1, a2, a2);
      ++a2;
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

void sub_100D4CE2C(_Unwind_Exception *a1)
{
  sub_1000D7D80(v1);
  _Unwind_Resume(a1);
}

void sub_100D4CE40(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_100D4CE70(void *a1, void *a2, void *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_9;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  int v8 = (void *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      unint64_t v9 = a2[2];
      _OWORD v8[2] = v9;
      int v10 = (void *)*v8;
      v8[1] = v9;
      __int16 v11 = sub_100D4CF7C((uint64_t)a1, v9, v8 + 2);
      sub_1000D8A74(a1, v8, v11);
      a2 = (void *)*a2;
      int v8 = v10;
      if (!v10) {
        goto LABEL_9;
      }
    }
    do
    {
      uint64_t v12 = (void *)*v8;
      operator delete(v8);
      int v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      sub_100D4D338(a1, a2 + 2);
      a2 = (void *)*a2;
    }
  }
}

void sub_100D4CF48(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_100D4CF68(_Unwind_Exception *a1)
{
}

void *sub_100D4CF7C(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    uint64_t v9 = 2 * v6;
    BOOL v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    size_t v11 = v10 | v9;
    unint64_t v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    sub_100D4D0D4(a1, v13);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }
  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }
  id v16 = *(void **)(*(void *)a1 + 8 * v15);
  if (!v16) {
    return 0;
  }
  int v17 = 0;
  do
  {
    uint64_t result = v16;
    id v16 = (void *)*v16;
    if (!v16) {
      break;
    }
    unint64_t v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v20 = v16[1];
      if (v19 >= v6) {
        unint64_t v20 = v19 % v6;
      }
    }
    else
    {
      unint64_t v20 = v19 & (v6 - 1);
    }
    if (v20 != v15) {
      break;
    }
    BOOL v21 = v19 == a2 && v16[2] == *a3;
    int v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

void sub_100D4D0D4(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_100D4D1C4(a1, prime);
    }
  }
}

void sub_100D4D1C4(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_1001D7FA0();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      for (uint64_t i = (void *)*v7; *v7; uint64_t i = (void *)*v7)
      {
        unint64_t v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2) {
            v12 %= a2;
          }
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          uint64_t v7 = i;
        }
        else
        {
          size_t v13 = i;
          if (*(void *)(*(void *)a1 + 8 * v12))
          {
            do
            {
              uint8x8_t v14 = v13;
              size_t v13 = (void *)*v13;
            }
            while (v13 && i[2] == v13[2]);
            void *v7 = v13;
            void *v14 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = i;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v12) = v7;
            uint64_t v7 = i;
            unint64_t v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    BOOL v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *sub_100D4D338(void *a1, unint64_t *a2)
{
  int8x8_t v4 = operator new(0x18uLL);
  unint64_t v5 = *a2;
  v4[2] = *a2;
  *int8x8_t v4 = 0;
  v4[1] = v5;
  uint64_t v6 = sub_100D4CF7C((uint64_t)a1, v5, v4 + 2);
  sub_1000D8A74(a1, v4, v6);
  return v4;
}

void sub_100D4D39C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100D4D3B0@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  unint64_t v5 = (void *)result;
  uint64_t v8 = a3;
  uint64_t v9 = a4;
  if ((void *)result != a2)
  {
    do
    {
      uint64_t result = sub_100D4D424((uint64_t)&v8);
      unint64_t v5 = (void *)*v5;
    }
    while (v5 != a2);
    a3 = v8;
    a4 = v9;
    unint64_t v5 = a2;
  }
  *a5 = v5;
  a5[1] = a3;
  a5[2] = a4;
  return result;
}

uint64_t sub_100D4D424(uint64_t a1)
{
  std::ostream::operator<<();
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    size_t v3 = strlen(*(const char **)(a1 + 8));
    sub_100132EFC(*(void **)a1, v2, v3);
  }
  return a1;
}

void *sub_100D4D480@<X0>(double *a1@<X1>, void *a2@<X8>)
{
  int8x8_t v4 = operator new(0x38uLL);
  uint64_t result = sub_100D4D4DC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100D4D4C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100D4D4DC(void *a1, double *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022F45B0;
  sub_1011C55F0((uint64_t)(a1 + 3), *a2);
  return a1;
}

void sub_100D4D528(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100D4D53C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022F45B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100D4D55C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022F45B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100D4D5B0(uint64_t a1)
{
}

void sub_100D4D5C4(uint64_t a1, std::string *this, const std::string::value_type **a3)
{
  if (*(_DWORD *)(a1 + 24))
  {
    v5[0] = a1;
    v5[1] = a3;
    sub_100D4D61C((uint64_t)v5);
  }
  else
  {
    int8x8_t v4 = *a3;
    std::string::assign(this, v4);
  }
}

void sub_100D4D61C(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  sub_100134750(__p, **(char ***)(a1 + 8));
  sub_1006BC38C(v1, (long long *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100D4D66C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D4D688(uint64_t a1, void *a2)
{
  if (*(_DWORD *)(a1 + 24) == 1) {
    *(void *)a1 = *a2;
  }
  else {
    sub_100D4D6D0(a1, a2);
  }
  return a1;
}

uint64_t sub_100D4D6D0(uint64_t a1, void *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))*(&off_1022F4570 + v4))(&v6, a1);
  }
  *(void *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 1;
  return a1;
}

uint64_t sub_100D4D738()
{
  return sub_1012B748C((uint64_t)&xmmword_102481208, 1, 2, 2, 1, 0.0, 43200.0, 43200.0);
}

uint64_t sub_100D4D778()
{
  uint64_t result = sub_1000EB1B0();
  if (result) {
    operator new();
  }
  return result;
}

void sub_100D4D7FC()
{
}

uint64_t sub_100D4D820()
{
  if (qword_102481248 != -1) {
    dispatch_once(&qword_102481248, &stru_1022F45F0);
  }
  return qword_10248AB08;
}

void sub_100D4D86C(void *a1)
{
  sub_1012F6FF8(a1);

  operator delete();
}

double sub_100D4D8A4(uint64_t a1, int a2, double *a3)
{
  if (a2)
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022F4678);
    }
    uint64_t v4 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      LODWORD(v14) = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "[AccessoryGyro] Unrecognized update interval notification %{public}d", buf, 8u);
    }
    double v5 = 0.0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022F4678);
      }
      char v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccessoryGyro::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  else
  {
    sub_1012F71A4(a1);
    if (*a3 > 0.0)
    {
      (*(void (**)(double))(**(void **)(a1 + 32) + 16))(*a3);
      (*(void (**)(void))(**(void **)(a1 + 32) + 16))();
      *(unsigned char *)(a1 + 30) = 0;
    }
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022F4678);
    }
    uint64_t v9 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *(void *)a3;
      *(_DWORD *)uint64_t buf = 134349056;
      uint64_t v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "[AccessoryGyro] Setting update interval to %{public}f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022F4678);
      }
      unint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccessoryGyro::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    sub_100A29D64(*(void *)(a1 + 32), *a3);
    return *a3;
  }
  return v5;
}

double sub_100D4DC9C(uint64_t a1, int a2, double *a3)
{
  if (a2)
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022F4678);
    }
    uint64_t v4 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      LODWORD(v14) = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "[AccessoryGyro] Unrecognized batch interval notification %{public}d", buf, 8u);
    }
    double v5 = 0.0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022F4678);
      }
      char v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccessoryGyro::minimumBatchIntervalChanged(int, const CFTimeInterval &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  else
  {
    sub_1012F71A4(a1);
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022F4678);
    }
    uint64_t v9 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_INFO))
    {
      double v10 = *a3;
      *(_DWORD *)uint64_t buf = 134349056;
      double v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "[AccessoryGyro] Setting batch interval to %{public}f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022F4678);
      }
      unint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccessoryGyro::minimumBatchIntervalChanged(int, const CFTimeInterval &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    sub_100A29E04(*(void *)(a1 + 32), *a3);
    return *a3;
  }
  return v5;
}

void sub_100D4DFC8(uint64_t a1, uint64_t a2)
{
  sub_1000E7BA0(a1, 0, a2, 40);
  if (!*(unsigned char *)(a1 + 30))
  {
    *(unsigned char *)(a1 + 30) = 1;
    int v11 = 0;
    sub_100134750(v12, "N/A");
    sub_100134750(__p, "N/A");
    int v16 = 0;
    if (sub_1012F72FC(a1, &v11))
    {
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022F4678);
      }
      char v3 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEBUG))
      {
        if (v13 >= 0) {
          uint64_t v4 = v12;
        }
        else {
          uint64_t v4 = (void **)v12[0];
        }
        if (v15 >= 0) {
          double v5 = __p;
        }
        else {
          double v5 = (void **)__p[0];
        }
        *(_DWORD *)uint64_t buf = 67240707;
        int v24 = v11;
        __int16 v25 = 2081;
        uint64_t v26 = v4;
        __int16 v27 = 2081;
        uint64_t v28 = v5;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[AccessoryGyro] config,side,%{public}d,configuration,%{private}s,serialNumber,%{private}s", buf, 0x1Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_1022F4678);
        }
        if (v13 >= 0) {
          uint64_t v7 = v12;
        }
        else {
          uint64_t v7 = (void **)v12[0];
        }
        if (v15 >= 0) {
          uint64_t v8 = __p;
        }
        else {
          uint64_t v8 = (void **)__p[0];
        }
        int v17 = 67240707;
        int v18 = v11;
        __int16 v19 = 2081;
        unint64_t v20 = v7;
        __int16 v21 = 2081;
        int v22 = v8;
        uint64_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLAccessoryGyro::onGyroData(const Sample &)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      sub_1000E7BA0(a1, 1, (uint64_t)&v11, 64);
    }
    else
    {
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022F4678);
      }
      char v6 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "[AccessoryGyro] Service not found!", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_1022F4678);
        }
        LOWORD(v17) = 0;
        double v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLAccessoryGyro::onGyroData(const Sample &)", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
    }
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
  }
}

void sub_100D4E3B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void sub_100D4E3F4(uint64_t a1)
{
  if (IOHIDEventGetType() == 20)
  {
    IOHIDEventGetFloatValue();
    float v3 = v2;
    float v17 = v3;
    IOHIDEventGetFloatValue();
    float v5 = v4;
    float v18 = v5;
    IOHIDEventGetFloatValue();
    float v7 = v6;
    float v19 = v7;
    unint64_t TimeStamp = IOHIDEventGetTimeStamp();
    double v9 = sub_1000D3D90(TimeStamp);
    double v16 = v9;
    IntegerCFNumberRef Value = IOHIDEventGetIntegerValue();
    unsigned __int16 v21 = IntegerValue;
    uint64_t v11 = sub_10149F054();
    uint64_t v20 = v11;
    float v12 = *(float *)(a1 + 100);
    float v22 = v12;
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022F4678);
    }
    char v13 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67241728;
      int v38 = IntegerValue;
      __int16 v39 = 2050;
      double v40 = v3;
      __int16 v41 = 2050;
      double v42 = v5;
      __int16 v43 = 2050;
      double v44 = v7;
      __int16 v45 = 2050;
      double v46 = v12;
      __int16 v47 = 2050;
      uint64_t v48 = v11;
      __int16 v49 = 2050;
      double v50 = v9;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "[AccessoryGyro] seq,%{public}d,x,%{public}20.20f,y,%{public}20.20f,z,%{public}20.20f,temp,%{public}20.20f,sensorTime,%{public}llu,timestamp,%{public}20.20f", buf, 0x44u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022F4678);
      }
      int v23 = 67241728;
      int v24 = IntegerValue;
      __int16 v25 = 2050;
      double v26 = v3;
      __int16 v27 = 2050;
      double v28 = v5;
      __int16 v29 = 2050;
      double v30 = v7;
      __int16 v31 = 2050;
      double v32 = v12;
      __int16 v33 = 2050;
      uint64_t v34 = v11;
      __int16 v35 = 2050;
      double v36 = v9;
      char v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLAccessoryGyro::onEventData(void *, void *, IOHIDEventRef)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    sub_100D4DFC8(a1, (uint64_t)&v16);
  }
  else if (IOHIDEventGetType() == 15)
  {
    IOHIDEventGetFloatValue();
    *(float *)&double v14 = v14;
    *(_DWORD *)(a1 + 100) = LODWORD(v14);
  }
}

void sub_100D4E724(id a1)
{
  qword_1024190E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

double sub_100D4E754(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

double sub_100D4E76C(unint64_t *a1, double a2)
{
  double v5 = a2;
  double v2 = a1 + 1;
  unint64_t v3 = a1[6];
  if (v3 >= *a1)
  {
    ++a1[5];
    a1[6] = v3 - 1;
    sub_10007F07C((uint64_t)(a1 + 1), 1);
  }
  return sub_10017CCF0(v2, &v5);
}

uint64_t sub_100D4E7D0(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 48);
  if (v1)
  {
    ++*(void *)(result + 40);
    *(void *)(result + 48) = v1 - 1;
    return sub_10007F07C(result + 8, 1);
  }
  return result;
}

double sub_100D4E7FC(void *a1)
{
  uint64_t v1 = a1[2];
  if (a1[3] == v1)
  {
    unint64_t v2 = a1[6];
  }
  else
  {
    unint64_t v3 = a1[5];
    unint64_t v2 = a1[6];
    double v4 = (double **)(v1 + 8 * (v3 >> 9));
    double v5 = *v4;
    double v6 = &(*v4)[v3 & 0x1FF];
    uint64_t v7 = *(void *)(v1 + (((v2 + v3) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v2 + v3) & 0x1FF);
    if (v6 != (double *)v7)
    {
      double v8 = 0.0;
      do
      {
        double v9 = *v6++;
        double v10 = v9;
        if ((char *)v6 - (char *)v5 == 4096)
        {
          uint64_t v11 = v4[1];
          ++v4;
          double v5 = v11;
          double v6 = v11;
        }
        double v8 = v8 + v10;
      }
      while (v6 != (double *)v7);
      if (v2) {
        return v8 / (double)v2;
      }
      return 0.0;
    }
  }
  double v8 = 0.0;
  if (v2) {
    return v8 / (double)v2;
  }
  return 0.0;
}

uint64_t sub_100D4E88C(uint64_t a1, void *a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  sub_101A1F180((unsigned __int8 *)(a1 + 56), "GyroBiasLoggerDailyReportTimeout", &qword_101D8CE48, 0);
  sub_101A1F180((unsigned __int8 *)(a1 + 88), "GyroBiasLoggerBiasEstimationTimeout", &qword_101D8CE50, 0);
  sub_101A1F180((unsigned __int8 *)(a1 + 112), "GyroBiasLoggerMinTimeBetweenFitSessions", &qword_101D8CE58, 0);
  *(void *)(a1 + 136) = 0xFF7FFFFF7F7FFFFFLL;
  *(unsigned char *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 156) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 172) = 0;
  *(void *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 232) = 0;
  uint64_t v4 = (int)*(double *)(a1 + 96);
  *(void *)(a1 + 256) = a2;
  *(void *)(a1 + 264) = off_1022AD0A0;
  *(void *)(a1 + 272) = v4;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = off_1022AD0A0;
  *(void *)(a1 + 344) = v4;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 245) = 0x800000007FFFFFFFLL;
  *(void *)(a1 + 237) = 0xFF7FFFFF7F7FFFFFLL;
  *(void *)(a1 + 412) = 0xFF7FFFFF7F7FFFFFLL;
  *(void *)(a1 + 176) = 0xFF7FFFFF7F7FFFFFLL;
  *(void *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 200) = 0;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_100D4EA78;
  void v6[3] = &unk_1022A56E0;
  uint64_t v6[4] = a2;
  void v6[5] = a1;
  [objc_msgSend(a2, "silo") async:v6];
  return a1;
}

void sub_100D4EA54(_Unwind_Exception *a1)
{
  v1[42] = v3;
  sub_1003A7340(v1 + 45);
  v1[33] = v2;
  sub_1003A7340(v1 + 36);
  _Unwind_Resume(a1);
}

id sub_100D4EA78(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [[objc_msgSend(*(id *)(a1 + 32), "silo") newTimer];
  *(void *)(v2 + 48) = v3;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _OWORD v7[2] = sub_100D4EB80;
  void v7[3] = &unk_1022A3020;
  uint64_t v7[4] = v2;
  [v3 setHandler:v7];
  [*(id *)(v2 + 48) setNextFireDelay:*(double *)(v2 + 64) interval:*(double *)(v2 + 64)];
  id v4 = [[objc_msgSend(*(id *)(a1 + 32), "silo") newTimer];
  *(void *)(v2 + 80) = v4;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_100D4EEA4;
  void v6[3] = &unk_1022A3020;
  uint64_t v6[4] = v2;
  [v4 setHandler:v6];
  return [*(id *)(v2 + 80) setNextFireDelay:*(double *)(v2 + 96) interval:*(double *)(v2 + 96)];
}

double sub_100D4EB80(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_100D4EBC4(v1);
  sub_100D4ECA8(v1);

  return sub_100D4EDEC(v1);
}

uint64_t sub_100D4EBC4(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)(result + 160);
  if (*(unsigned char *)(result + 172) && *(unsigned char *)(result + 156)) {
    double result = AnalyticsSendEventLazy();
  }
  *uint64_t v2 = *(void *)(v1 + 144);
  *(void *)((char *)v2 + 5) = *(void *)(v1 + 149);
  return result;
}

double sub_100D4ECA8(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 200);
  double v3 = *(double *)(a1 + 200);
  if (v3 >= 0.0)
  {
    double v4 = *(double *)(a1 + 208);
    if (v4 >= 0.0)
    {
      double v5 = *(double *)(a1 + 216);
      if (v5 >= 0.0) {
        AnalyticsSendEventLazy();
      }
    }
  }
  *(void *)(a1 + 412) = 0xFF7FFFFF7F7FFFFFLL;
  double result = -1.40444743e306;
  *(void *)(a1 + 176) = 0xFF7FFFFF7F7FFFFFLL;
  *(void *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  v2[1] = 0;
  v2[2] = 0;
  *uint64_t v2 = 0;
  return result;
}

double sub_100D4EDEC(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 245) != 0x7FFFFFFF && *(_DWORD *)(a1 + 249) != 0x80000000)
  {
    AnalyticsSendEventLazy();
    *(void *)(a1 + 245) = 0x800000007FFFFFFFLL;
    double result = -1.40444743e306;
    *(void *)(a1 + 237) = 0xFF7FFFFF7F7FFFFFLL;
  }
  return result;
}

void sub_100D4EEA4(uint64_t a1)
{
}

void sub_100D4EEAC(void *a1)
{
  if (a1[41])
  {
    uint64_t v1 = a1 + 33;
    uint64_t v2 = a1 + 42;
    AnalyticsSendEventLazy();
    sub_1003A7544(v1);
    sub_1003A7544(v2);
  }
}

uint64_t sub_100D4EF7C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 256) silo];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100D4F054;
  v4[3] = &unk_1022A3020;
  unsigned char v4[4] = a1;
  [v2 async:v4];
  *(void *)(a1 + 336) = off_1022AD0A0;
  sub_1003A7340((void *)(a1 + 360));
  *(void *)(a1 + 264) = off_1022AD0A0;
  sub_1003A7340((void *)(a1 + 288));
  return a1;
}

void sub_100D4F054(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  [*(id *)(v1 + 48) invalidate];

  *(void *)(v1 + 48) = 0;
  [*(id *)(v1 + 80) invalidate];

  *(void *)(v1 + 80) = 0;
}

uint64_t sub_100D4F0A0(uint64_t result, double a2)
{
  uint64_t v3 = result;
  if (*(unsigned char *)(result + 40))
  {
    double v4 = a2 - *(double *)(result + 32);
    double result = AnalyticsSendEventLazy();
    double v5 = 0.0;
    if (a2 >= 1.0)
    {
      double v5 = *(double *)(v3 + 216);
      if (v4 >= v5) {
        double v5 = v4;
      }
    }
    *(double *)(v3 + 216) = v5;
  }
  *(double *)(v3 + 32) = a2;
  *(unsigned char *)(v3 + 40) = 1;
  return result;
}

NSDictionary *sub_100D4F168(uint64_t a1)
{
  CFStringRef v2 = @"timeBetweenDatabaseUpdates";
  uint64_t v3 = +[NSNumber numberWithDouble:*(double *)(a1 + 32)];
  return +[NSDictionary dictionaryWithObjects:&v3 forKeys:&v2 count:1];
}

NSDictionary *sub_100D4F1EC(uint64_t a1)
{
  CFStringRef v2 = @"timeBetweenFits";
  uint64_t v3 = +[NSNumber numberWithDouble:*(double *)(a1 + 32)];
  return +[NSDictionary dictionaryWithObjects:&v3 forKeys:&v2 count:1];
}

uint64_t sub_100D4F270(uint64_t result, int *a2)
{
  int v2 = *a2;
  if (*a2)
  {
    uint64_t v4 = result;
    if (*(unsigned char *)(result + 24)) {
      double v5 = *((double *)a2 + 2) - *(double *)(result + 16);
    }
    else {
      double v5 = -1.0;
    }
    if (v2 != 1)
    {
      if (v2 == 2)
      {
        if (*(unsigned char *)(result + 24))
        {
          __dst[0] = _NSConcreteStackBlock;
          __dst[1] = 3221225472;
          __dst[2] = sub_100D4F1EC;
          __dst[3] = &unk_1022A6368;
          *(double *)&__dst[4] = v5;
          AnalyticsSendEventLazy();
          double v6 = *(double *)(v4 + 208);
          if (v6 < v5) {
            double v6 = v5;
          }
          *(double *)(v4 + 208) = v6;
        }
        double result = (uint64_t)memcpy(__dst, (char *)a2 + 33, 0x11AuLL);
        for (uint64_t i = 0; i != 8; ++i)
        {
          if (*((float *)&__dst[24] + i + 1) >= 3.4028e38) {
            break;
          }
        }
        float v8 = *(float *)&__dst[28] + *((float *)&__dst[24] + i);
        *(float *)(v4 + 136) = *((float *)&__dst[24] + 1) - *(float *)&__dst[28];
        *(float *)(v4 + 140) = v8;
      }
LABEL_28:
      *(void *)(v4 + 16) = *((void *)a2 + 2);
      *(unsigned char *)(v4 + 24) = 1;
      return result;
    }
    double v9 = *((double *)a2 + 1);
    if (v9 > 0.0 || v9 == -1.79769313e308)
    {
      if (v5 > *(double *)(result + 120)) {
        goto LABEL_24;
      }
    }
    else if (*(unsigned char *)(result + 24))
    {
      __dst[0] = _NSConcreteStackBlock;
      __dst[1] = 3221225472;
      __dst[2] = sub_100D4F1EC;
      __dst[3] = &unk_1022A6368;
      *(double *)&__dst[4] = v5;
LABEL_24:
      double result = AnalyticsSendEventLazy();
    }
    int v11 = *(unsigned __int8 *)(v4 + 156);
    int v12 = a2[13];
    *(void *)(v4 + 144) = *(void *)(a2 + 11);
    *(_DWORD *)(v4 + 152) = v12;
    if (!v11) {
      *(unsigned char *)(v4 + 156) = 1;
    }
    *(void *)(v4 + 136) = *((void *)a2 + 3);
    goto LABEL_28;
  }
  return result;
}

NSDictionary *sub_100D4F4D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v6[0] = @"timeBetweenFits";
  if (*(unsigned char *)(v2 + 24)) {
    uint64_t v3 = +[NSNumber numberWithDouble:*(double *)(a1 + 40)];
  }
  else {
    uint64_t v3 = +[NSNull null];
  }
  v6[1] = @"timeSinceLastMiniCal";
  v7[0] = v3;
  if (*(double *)(a1 + 48) <= 0.0) {
    uint64_t v4 = +[NSNull null];
  }
  else {
    uint64_t v4 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  }
  v7[1] = v4;
  return +[NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:2];
}

NSDictionary *sub_100D4F5AC(uint64_t a1, double a2)
{
  v4[0] = @"outOfBoxFirstConvergedTemperature";
  LODWORD(a2) = *(_DWORD *)(a1 + 40);
  v4[1] = @"outOfBoxTimeToFirstConvergedBiasEstimate";
  v5[0] = +[NSNumber numberWithFloat:a2];
  v5[1] = +[NSNumber numberWithDouble:*(double *)(a1 + 32)];
  return +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:2];
}

NSDictionary *sub_100D4F650(uint64_t a1, double a2)
{
  uint64_t v3 = *(_DWORD **)(a1 + 32);
  v10[0] = @"dailyMinObservedTemperature";
  LODWORD(a2) = v3[103];
  v11[0] = +[NSNumber numberWithFloat:a2];
  v10[1] = @"dailyMaxObservedTemperature";
  LODWORD(v4) = v3[104];
  v11[1] = +[NSNumber numberWithFloat:v4];
  _DWORD v10[2] = @"dailyBiasEstimationPercentageUsingFitInterpolation";
  if (*(double *)(a1 + 40) <= 0.0) {
    double v5 = +[NSNull null];
  }
  else {
    double v5 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  }
  _OWORD v11[2] = v5;
  v10[3] = @"dailyBiasEstimationPercentageUsingFitExtrapolation";
  if (*(double *)(a1 + 48) <= 0.0) {
    double v6 = +[NSNull null];
  }
  else {
    double v6 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  }
  void v11[3] = v6;
  v10[4] = @"dailyMaxTimeBetweenGyroBiasEstimations";
  uint64_t v11[4] = +[NSNumber numberWithDouble:*(double *)(a1 + 56)];
  void v10[5] = @"dailyMaxTimeBetweenNonlinearFits";
  v11[5] = +[NSNumber numberWithDouble:*(double *)(a1 + 64)];
  v10[6] = @"dailyMaxTimeBetweenDataBaseUpdates";
  v11[6] = +[NSNumber numberWithDouble:*(double *)(a1 + 72)];
  v10[7] = @"dailyMinBiasEstimateTemperature";
  LODWORD(v7) = v3[44];
  void v11[7] = +[NSNumber numberWithFloat:v7];
  v10[8] = @"dailyMaxBiasEstimateTemperature";
  LODWORD(v8) = v3[45];
  void v11[8] = +[NSNumber numberWithFloat:v8];
  return +[NSDictionary dictionaryWithObjects:v11 forKeys:v10 count:9];
}

NSDictionary *sub_100D4F7F4(double *a1)
{
  v3[0] = @"dailyChangeInInterceptX";
  v4[0] = +[NSNumber numberWithDouble:a1[4]];
  v3[1] = @"dailyChangeInInterceptY";
  v4[1] = +[NSNumber numberWithDouble:a1[5]];
  _DWORD v3[2] = @"dailyChangeInInterceptZ";
  void v4[2] = +[NSNumber numberWithDouble:a1[6]];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:3];
}

NSDictionary *sub_100D4F8B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v14[0] = @"logSequenceID";
  v15[0] = +[NSNumber numberWithUnsignedLongLong:(unint64_t)(CFAbsoluteTimeGetCurrent() * 1000000.0)];
  v14[1] = @"gyroBiasEstimationTemperature";
  LODWORD(v3) = *(_DWORD *)(a1 + 40);
  v15[1] = +[NSNumber numberWithFloat:v3];
  int v14[2] = @"temperatureDistanceFromFit";
  float v4 = *(float *)(a1 + 44);
  if (v4 > -3.4028e38 && v4 < 3.4028e38) {
    double v6 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  }
  else {
    double v6 = +[NSNull null];
  }
  void v15[2] = v6;
  v14[3] = @"gyroBiasEstimationMinDatabaseTemperature";
  float v7 = *(float *)(v2 + 136);
  if (v7 > -100.0 && v7 < 100.0) {
    double v9 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  }
  else {
    double v9 = +[NSNull null];
  }
  v15[3] = v9;
  v14[4] = @"gyroBiasEstimationMaxDatabaseTemperature";
  float v10 = *(float *)(v2 + 140);
  if (v10 > -100.0 && v10 < 100.0) {
    int v12 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  }
  else {
    int v12 = +[NSNull null];
  }
  uint8_t v15[4] = v12;
  return +[NSDictionary dictionaryWithObjects:v15 forKeys:v14 count:5];
}

NSDictionary *sub_100D4FA50(uint64_t a1, double a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v5[0] = @"dailyMinGyroBiasError";
  LODWORD(a2) = *(_DWORD *)(v2 + 237);
  v6[0] = +[NSNumber numberWithFloat:a2];
  v5[1] = @"dailyMaxGyroBiasError";
  LODWORD(v3) = *(_DWORD *)(v2 + 241);
  v6[1] = +[NSNumber numberWithFloat:v3];
  void v5[2] = @"dailyMinGyroTemperature";
  void v6[2] = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 245)];
  v5[3] = @"dailyMaxGyroTemperature";
  void v6[3] = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 249)];
  return +[NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:4];
}

uint64_t sub_100D4FB30(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 12);
  if (v2 >= *(_DWORD *)(result + 245)) {
    int v2 = *(_DWORD *)(result + 245);
  }
  *(_DWORD *)(result + 245) = v2;
  int v3 = *(_DWORD *)(result + 249);
  if (v3 <= *(_DWORD *)(a2 + 16)) {
    int v3 = *(_DWORD *)(a2 + 16);
  }
  *(_DWORD *)(result + 249) = v3;
  float v4 = *(float *)(a2 + 4);
  if (v4 >= *(float *)(result + 237)) {
    float v4 = *(float *)(result + 237);
  }
  *(float *)(result + 237) = v4;
  float v5 = *(float *)(result + 241);
  if (v5 < *(float *)(a2 + 8)) {
    float v5 = *(float *)(a2 + 8);
  }
  *(float *)(result + 241) = v5;
  return result;
}

void sub_100D4FB84(uint64_t a1)
{
  *(unsigned char *)(a1 + 232) = 1;
  *(CFAbsoluteTime *)(a1 + 224) = CFAbsoluteTimeGetCurrent();
}

uint64_t sub_100D4FBB4(uint64_t result, uint64_t a2)
{
  float v2 = *(float *)(a2 + 4);
  if (v2 >= *(float *)(result + 412)) {
    float v2 = *(float *)(result + 412);
  }
  *(float *)(result + 412) = v2;
  float v3 = *(float *)(result + 416);
  if (v3 < *(float *)(a2 + 8)) {
    float v3 = *(float *)(a2 + 8);
  }
  *(float *)(result + 416) = v3;
  return result;
}

uint64_t sub_100D504A8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    float v4 = &OBJC_IVAR___CLHidManager__delegate;
    float v5 = &OBJC_IVAR___CLHidManager__delegate;
    double v6 = &OBJC_IVAR___CLHidManager__delegate;
    float v7 = &OBJC_IVAR___CLHidManager__delegate;
    double v8 = &OBJC_IVAR___CLHidManager__delegate;
    double v9 = &OBJC_IVAR___CLHidManager__delegate;
    float v10 = &OBJC_IVAR___CLHidManager__delegate;
    int v11 = &OBJC_IVAR___CLHidManager__delegate;
    int v12 = &OBJC_IVAR___CLHidManager__delegate;
    do
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        uint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v17 = v16 + 1;
        if (v16 == -1 || v17 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v18 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17;
        v15 |= (unint64_t)(v18 & 0x7F) << v13;
        if ((v18 & 0x80) == 0) {
          goto LABEL_12;
        }
        v13 += 7;
        BOOL v19 = v14++ >= 9;
        if (v19)
        {
          unint64_t v15 = 0;
          int v20 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
      int v20 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v15 = 0;
      }
LABEL_14:
      if (v20 || (v15 & 7) == 4) {
        break;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + v4[351]) |= 0x10u;
          unint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v75 = v5[352];
          goto LABEL_130;
        case 2u:
          *(_WORD *)(a1 + v4[351]) |= 0x200u;
          unint64_t v30 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            int v31 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            int v31 = 0;
          }
          uint64_t v76 = v6[353];
          goto LABEL_121;
        case 3u:
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v34 = 0;
          *(_WORD *)(a1 + v4[351]) |= 0x100u;
          while (2)
          {
            uint64_t v35 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v36 = v35 + 1;
            if (v35 == -1 || v36 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v37 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v35);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v36;
              v34 |= (unint64_t)(v37 & 0x7F) << v32;
              if (v37 < 0)
              {
                v32 += 7;
                BOOL v19 = v33++ >= 9;
                if (v19)
                {
                  LODWORD(v34) = 0;
                  goto LABEL_90;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v34) = 0;
          }
LABEL_90:
          uint64_t v72 = v7[354];
          goto LABEL_107;
        case 4u:
          *(_WORD *)(a1 + v4[351]) |= 0x40u;
          unint64_t v38 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v38 <= 0xFFFFFFFFFFFFFFFBLL && v38 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            int v31 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v38);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v38 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            int v31 = 0;
          }
          uint64_t v76 = v8[355];
          goto LABEL_121;
        case 5u:
          *(_WORD *)(a1 + v4[351]) |= 0x80u;
          unint64_t v39 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v39 <= 0xFFFFFFFFFFFFFFFBLL && v39 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            int v31 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v39);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v39 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            int v31 = 0;
          }
          uint64_t v76 = v9[356];
LABEL_121:
          *(_DWORD *)(a1 + v76) = v31;
          continue;
        case 6u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v34 = 0;
          *(_WORD *)(a1 + v4[351]) |= 0x20u;
          while (2)
          {
            uint64_t v42 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v43 = v42 + 1;
            if (v42 == -1 || v43 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v44 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v42);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v43;
              v34 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                BOOL v19 = v41++ >= 9;
                if (v19)
                {
                  LODWORD(v34) = 0;
                  goto LABEL_94;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v34) = 0;
          }
LABEL_94:
          uint64_t v72 = v10[357];
          goto LABEL_107;
        case 7u:
          *(_WORD *)(a1 + v4[351]) |= 2u;
          unint64_t v45 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v45 <= 0xFFFFFFFFFFFFFFF7 && v45 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v45);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v45 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v75 = v11[358];
          goto LABEL_130;
        case 8u:
          char v46 = 0;
          unsigned int v47 = 0;
          uint64_t v48 = 0;
          *(_WORD *)(a1 + v4[351]) |= 0x800u;
          while (2)
          {
            uint64_t v49 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v50 = v49 + 1;
            if (v49 == -1 || v50 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v51 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v49);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v50;
              v48 |= (unint64_t)(v51 & 0x7F) << v46;
              if (v51 < 0)
              {
                v46 += 7;
                BOOL v19 = v47++ >= 9;
                if (v19)
                {
                  uint64_t v48 = 0;
                  goto LABEL_98;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v48 = 0;
          }
LABEL_98:
          BOOL v73 = v48 != 0;
          uint64_t v74 = v12[359];
          goto LABEL_112;
        case 9u:
          char v52 = 0;
          unsigned int v53 = 0;
          uint64_t v54 = 0;
          *(_WORD *)(a1 + v4[351]) |= 0x1000u;
          while (2)
          {
            uint64_t v55 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v56 = v55 + 1;
            if (v55 == -1 || v56 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v57 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v55);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v56;
              v54 |= (unint64_t)(v57 & 0x7F) << v52;
              if (v57 < 0)
              {
                v52 += 7;
                BOOL v19 = v53++ >= 9;
                if (v19)
                {
                  uint64_t v54 = 0;
                  goto LABEL_102;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v54 = 0;
          }
LABEL_102:
          BOOL v73 = v54 != 0;
          uint64_t v74 = 73;
          goto LABEL_112;
        case 0xAu:
          char v58 = 0;
          unsigned int v59 = 0;
          uint64_t v34 = 0;
          *(_WORD *)(a1 + v4[351]) |= 0x400u;
          while (2)
          {
            uint64_t v60 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v61 = v60 + 1;
            if (v60 == -1 || v61 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v62 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v60);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v61;
              v34 |= (unint64_t)(v62 & 0x7F) << v58;
              if (v62 < 0)
              {
                v58 += 7;
                BOOL v19 = v59++ >= 9;
                if (v19)
                {
                  LODWORD(v34) = 0;
                  goto LABEL_106;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v34) = 0;
          }
LABEL_106:
          uint64_t v72 = 68;
LABEL_107:
          *(_DWORD *)(a1 + v72) = v34;
          continue;
        case 0xBu:
          *(_WORD *)(a1 + v4[351]) |= 1u;
          unint64_t v63 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v63 <= 0xFFFFFFFFFFFFFFF7 && v63 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v63);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v63 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v75 = 8;
          goto LABEL_130;
        case 0xCu:
          *(_WORD *)(a1 + v4[351]) |= 8u;
          unint64_t v64 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v64 <= 0xFFFFFFFFFFFFFFF7 && v64 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v64);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v64 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v75 = 32;
          goto LABEL_130;
        case 0xDu:
          char v65 = 0;
          unsigned int v66 = 0;
          uint64_t v67 = 0;
          *(_WORD *)(a1 + v4[351]) |= 0x2000u;
          break;
        case 0xEu:
          *(_WORD *)(a1 + v4[351]) |= 4u;
          unint64_t v71 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v71 <= 0xFFFFFFFFFFFFFFF7 && v71 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v71);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v71 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v75 = 24;
LABEL_130:
          *(void *)(a1 + v75) = v23;
          continue;
        default:
          int v24 = v5;
          __int16 v25 = v6;
          double v26 = v7;
          __int16 v27 = v4;
          double v28 = v8;
          uint64_t result = PBReaderSkipValueWithTag();
          double v8 = v28;
          float v4 = v27;
          double v9 = &OBJC_IVAR___CLHidManager__delegate;
          float v7 = v26;
          float v10 = &OBJC_IVAR___CLHidManager__delegate;
          double v6 = v25;
          int v12 = &OBJC_IVAR___CLHidManager__delegate;
          float v5 = v24;
          int v11 = &OBJC_IVAR___CLHidManager__delegate;
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v68 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v69 = v68 + 1;
        if (v68 == -1 || v69 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v70 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v68);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v69;
        v67 |= (unint64_t)(v70 & 0x7F) << v65;
        if ((v70 & 0x80) == 0) {
          goto LABEL_109;
        }
        v65 += 7;
        BOOL v19 = v66++ >= 9;
        if (v19)
        {
          uint64_t v67 = 0;
          goto LABEL_111;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_109:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v67 = 0;
      }
LABEL_111:
      BOOL v73 = v67 != 0;
      uint64_t v74 = 74;
LABEL_112:
      *(unsigned char *)(a1 + v74) = v73;
    }
    while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length));
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

double sub_100D51F4C(uint64_t a1)
{
  *(void *)a1 = off_1022F46C8;
  double result = 0.0;
  *(_OWORD *)(a1 + 1800) = 0u;
  *(_OWORD *)(a1 + 1816) = 0u;
  *(unsigned char *)(a1 + 1752) = 0;
  *(_OWORD *)(a1 + 1720) = 0u;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(_OWORD *)(a1 + 1776) = 0u;
  *(unsigned char *)(a1 + 1792) = 0;
  *(void *)(a1 + 8) = 0x4600000000;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(unsigned char *)(a1 + 1712) = 0;
  return result;
}

void *sub_100D51FAC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(unsigned __int8 *)(a1 + 1712);
  float v4 = *(float *)(a1 + 1728);
  double v5 = *(double *)(a1 + 1704);
  BOOL v7 = v5 > 600.0 && v3 != 0;
  if (v4 != 0.0) {
    BOOL v7 = 0;
  }
  snprintf(__str, 0x200uLL, "valid15s,%d,dur15s,%f,cadence15s,%f,stroller15s,%f,up15s,%f,down15s,%f,drive15s,%f,cycle15s,%f,valid1m,%d,dur1m,%f,cadence1m,%f,stroller1m,%f,up1m,%f,down1m,%f,drive1m,%f,cycle1m,%f,valid3m,%d,dur3m,%f,cadence3m,%f,stroller3m,%f,up3m,%f,down3m,%f,drive3m,%f,cycle3m,%f,lastActive,%f,stopTimer,%f,stopped,%d", v3, *(double *)(a1 + 1720), v4, *(float *)(a1 + 1732), *(float *)(a1 + 1736), *(float *)(a1 + 1740), *(float *)(a1 + 1744), *(float *)(a1 + 1748), *(unsigned __int8 *)(a1 + 1752), *(double *)(a1 + 1760), *(float *)(a1 + 1768), *(float *)(a1 + 1772), *(float *)(a1 + 1776), *(float *)(a1 + 1780),
    *(float *)(a1 + 1784),
    *(float *)(a1 + 1788),
    *(unsigned __int8 *)(a1 + 1792),
    *(double *)(a1 + 1800),
    *(float *)(a1 + 1808),
    *(float *)(a1 + 1812),
    *(float *)(a1 + 1816),
    *(float *)(a1 + 1820),
    *(float *)(a1 + 1824),
    *(float *)(a1 + 1828),
    *(double *)(a1 + 1696),
    v5,
    v7);
  return sub_100134750(a2, __str);
}

double sub_100D52138(uint64_t a1, int a2)
{
  if (a2 != 3)
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022F4700);
    }
    uint64_t v3 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Only hiking is supported here!", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022F4700);
      }
      double v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLHikingStopDetector::setStopModeAndReset(StopMode)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  *(_DWORD *)(a1 + 8) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 1696) = 0u;
  return result;
}

uint64_t sub_100D522E0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 1712) || !*(unsigned char *)(a1 + 1752) || !*(unsigned char *)(a1 + 1792)) {
    return 1;
  }
  float v1 = *(float *)(a1 + 1728);
  BOOL v2 = v1 > 45.0 && *(float *)(a1 + 1768) > 45.0 && *(float *)(a1 + 1808) > 29.7;
  BOOL v4 = *(float *)(a1 + 1776) >= 0.9 || *(float *)(a1 + 1780) >= 0.9;
  BOOL v5 = *(float *)(a1 + 1784) == 0.0;
  if (*(float *)(a1 + 1824) >= 0.3) {
    BOOL v5 = 0;
  }
  BOOL v6 = *(float *)(a1 + 1788) == 0.0;
  if (*(float *)(a1 + 1828) >= 0.5) {
    BOOL v6 = 0;
  }
  char v7 = v1 > 140.0 || v2;
  int v8 = 1;
  if ((v7 & 1) == 0 && *(float *)(a1 + 1812) <= 0.5) {
    int v8 = *(float *)(a1 + 1768) > 22.5 && v4;
  }
  return v6 & v8 & v5;
}

uint64_t sub_100D523F4(uint64_t a1, uint64_t a2)
{
  sub_100D52878(a1, (double *)a2);
  sub_100D52C38(a1, 6uLL, (uint64_t)buf);
  long long v4 = v22;
  *(_OWORD *)(a1 + 1712) = *(_OWORD *)buf;
  *(_OWORD *)(a1 + 1728) = v4;
  *(void *)(a1 + 1744) = v23;
  sub_100D52C38(a1, 0x17uLL, (uint64_t)buf);
  *(void *)(a1 + 1784) = v23;
  long long v5 = v22;
  *(_OWORD *)(a1 + 1752) = *(_OWORD *)buf;
  *(_OWORD *)(a1 + 1768) = v5;
  sub_100D52C38(a1, 0x46uLL, (uint64_t)buf);
  long long v6 = v22;
  *(_OWORD *)(a1 + 1792) = *(_OWORD *)buf;
  *(_OWORD *)(a1 + 1808) = v6;
  *(void *)(a1 + 1824) = v23;
  if (sub_100D522E0(a1))
  {
    *(void *)(a1 + 1704) = 0;
    *(void *)(a1 + 1696) = *(void *)(a2 + 296);
  }
  else if (*(float *)(a1 + 1768) < 45.0)
  {
    *(double *)(a1 + 1704) = *(double *)(a1 + 1704) + 2.55999994;
  }
  sub_100D51FAC(a1, __p);
  if (*(double *)(a1 + 1704) > 600.0 && *(unsigned char *)(a1 + 1712) && *(float *)(a1 + 1728) == 0.0)
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022F4700);
    }
    char v7 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = __p;
      if (v18 < 0) {
        int v8 = (void **)__p[0];
      }
      *(_DWORD *)uint64_t buf = 136315138;
      *(void *)&uint8_t buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "PedestrianStop DETECTED!,%s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022F4700);
      }
      unint64_t v15 = __p;
      if (v18 < 0) {
        unint64_t v15 = (void **)__p[0];
      }
      int v19 = 136315138;
      int v20 = v15;
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual std::pair<BOOL, CFAbsoluteTime> CLHikingStopDetector::update(const CLWorkoutPredictorInputs &)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    uint64_t v9 = 1;
  }
  else
  {
    uint64_t v9 = 0;
  }
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022F4700);
  }
  float v10 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
  {
    int v11 = __p;
    if (v18 < 0) {
      int v11 = (void **)__p[0];
    }
    *(_DWORD *)uint64_t buf = 136315138;
    *(void *)&uint8_t buf[4] = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "PedestrianStop,%s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022F4700);
    }
    char v13 = __p;
    if (v18 < 0) {
      char v13 = (void **)__p[0];
    }
    int v19 = 136315138;
    int v20 = v13;
    unsigned int v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual std::pair<BOOL, CFAbsoluteTime> CLHikingStopDetector::update(const CLWorkoutPredictorInputs &)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  return v9;
}

void sub_100D5284C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D52878(uint64_t a1, double *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102481268, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102481268))
  {
    v10[0] = 0x100000008;
    LODWORD(v10[1]) = 0;
    sub_1004F7D80(qword_102481250, v10, 3uLL);
    __cxa_atexit((void (*)(void *))sub_1004F7E04, qword_102481250, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102481268);
  }
  __int16 v11 = 0;
  *(_OWORD *)float v10 = xmmword_101D1E250;
  memset(&v10[2], 0, 135);
  long long v12 = xmmword_101D1E250;
  uint64_t v13 = 0;
  int v14 = 0;
  uint64_t v15 = 0;
  v16[0] = 0;
  *(void *)((char *)v16 + 5) = 0;
  *(void *)((char *)&v16[1] + 6) = 0;
  char v17 = 0;
  memset(&v16[3], 0, 24);
  long long v18 = xmmword_101D1E250;
  uint64_t v19 = 0;
  int v20 = 0;
  unint64_t v21 = 0xFFEFFFFFFFFFFFFFLL;
  int v32 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  int v27 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  memset(v31, 0, sizeof(v31));
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  unint64_t v35 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v36 = 0;
  int v37 = 0;
  uint64_t v43 = 0;
  __int16 v44 = 0;
  int v49 = 0;
  int v42 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v46 = 0u;
  long long v45 = 0u;
  char v47 = 0;
  memset(v48, 0, sizeof(v48));
  double v50 = -1.79769313e308;
  long long v69 = 0u;
  long long v68 = 0u;
  long long v67 = 0u;
  long long v66 = 0u;
  long long v65 = 0u;
  long long v64 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  uint64_t v70 = 0;
  unint64_t v71 = 0xFFEFFFFFFFFFFFFFLL;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  unint64_t v76 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v77 = 0;
  int v78 = 0;
  uint64_t v79 = 0;
  char v80 = 0;
  unint64_t v81 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v83 = 0;
  uint64_t v82 = 0;
  uint64_t v84 = 0x80000000800000;
  uint64_t v86 = 0;
  uint64_t v85 = 0;
  long long v87 = xmmword_101D1E260;
  uint64_t v88 = 0x80000000800000;
  long long v89 = 0u;
  long long v90 = 0u;
  uint64_t v91 = 0;
  unint64_t v92 = 0xFFEFFFFFFFFFFFFFLL;
  long long v93 = 0u;
  long long v94 = 0u;
  long long v95 = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  int v99 = 0;
  unint64_t v100 = 0xFFEFFFFFFFFFFFFFLL;
  __int16 v101 = 0;
  int v102 = 0;
  unint64_t v103 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v104 = 7;
  unint64_t v105 = 0xFFEFFFFFFFFFFFFFLL;
  char v106 = 0;
  uint64_t v108 = 0;
  uint64_t v107 = 0;
  uint64_t v109 = 0;
  sub_100174478(a2, qword_102481250, (uint64_t)v10);
  if (v50 == -1.79769313e308)
  {
    sub_100134750(__p, "CLPedestrianStopDetector");
    sub_10111B644(a2, (uint64_t *)__p, (uint64_t)qword_102481250);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(double *)&long long v8 = v50;
    BYTE8(v8) = v64;
    BYTE9(v8) = BYTE8(v60) == 1;
    int v4 = v14;
    if (*((double *)&v12 + 1) == -1.79769313e308) {
      int v4 = 0;
    }
    HIDWORD(v8) = v4;
    if (*(double *)&v10[1] == -1.79769313e308)
    {
      int v5 = 0;
    }
    else
    {
      sub_100052E44((uint64_t)v10, (uint64_t)__p);
      int v5 = (int)__p[0];
    }
    int v9 = v5;
    sub_1001886E4((unsigned __int16 *)(a1 + 8), &v8);
  }
}

void sub_100D52C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t sub_100D52C38@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 8) = 0u;
  int v5 = (double *)(a3 + 8);
  *(_OWORD *)(a3 + 24) = 0u;
  unint64_t v6 = *(unsigned __int16 *)(result + 10);
  *(unsigned char *)a3 = v6 >= a2;
  if (v6 >= a2)
  {
    if (v6 - a2 >= v6)
    {
      *(_DWORD *)(a3 + 16) = 0;
    }
    else
    {
      long long v8 = (unsigned __int16 *)(result + 8);
      uint64_t v9 = -(uint64_t)a2;
      float32x2_t v10 = 0;
      __asm { FMOV            V0.2S, #1.0 }
      int8x8_t v36 = _D0;
      float v16 = 0.0;
      float v17 = 0.0;
      float v18 = 0.0;
      float v19 = 0.0;
      float v20 = 0.0;
      do
      {
        unint64_t v21 = v6 + v9;
        uint64_t v22 = sub_100D52E40(v8, v6 + v9);
        long long v23 = (double *)v22;
        LOBYTE(v3) = *(unsigned char *)(v22 + 8);
        if (*(unsigned char *)(v22 + 9)) {
          float v24 = 1.0;
        }
        else {
          float v24 = 0.0;
        }
        long long v25 = (const float *)(v22 + 12);
        float32x2_t v26 = vld1_dup_f32(v25);
        int32x2_t v38 = (int32x2_t)v26;
        unsigned int isTypeInVehicle = CLMotionActivity::isTypeInVehicle();
        double result = CLMotionActivity::isTypeCycling();
        unsigned int v28 = result;
        double v29 = 2.55999994;
        if (v21)
        {
          float v37 = v24;
          unsigned int v30 = v3;
          double v31 = *v23;
          double result = sub_100D52E40(v8, v21 - 1);
          double v29 = v31 - *(double *)result;
          unsigned int v3 = v30;
          float v24 = v37;
        }
        float v19 = v19 + (float)v3;
        float v20 = v20 + v24;
        float32x2_t v10 = vadd_f32(v10, (float32x2_t)vand_s8((int8x8_t)vceq_s32(v38, (int32x2_t)0x300000001), v36));
        float v17 = v17 + (float)isTypeInVehicle;
        float v16 = v16 + (float)v28;
        float v32 = v29;
        float v18 = v18 + v32;
      }
      while (!__CFADD__(v9++, 1));
      double v33 = v18;
      double *v5 = v18;
      float v34 = 0.0;
      if (v18 > 0.0)
      {
        double v33 = v19 / v33 * 60.0;
        float v34 = v33;
      }
      *(float *)(a3 + 16) = v34;
      if (a2)
      {
        *(float *)&double v33 = (float)a2;
        *(float *)(a3 + 20) = v20 / (float)a2;
        *(float32x2_t *)(a3 + 24) = vdiv_f32(v10, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v33, 0));
        *(float *)(a3 + 32) = v17 / (float)a2;
        float v35 = v16 / (float)a2;
LABEL_17:
        *(float *)(a3 + 36) = v35;
        return result;
      }
    }
    *(void *)(a3 + 28) = 0;
    *(void *)(a3 + 20) = 0;
    float v35 = 0.0;
    goto LABEL_17;
  }
  return result;
}

uint64_t sub_100D52E40(unsigned __int16 *a1, unint64_t a2)
{
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F4720);
    }
    char v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)uint64_t buf = 134218240;
      unint64_t v11 = a2;
      __int16 v12 = 1024;
      int v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022F4720);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "const T &CMQueue<CLHikingStopDetector::HistoryEntry>::operator[](const size_t) const [T = CLHikingStopDetector::HistoryEntry]", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0;
  }
  return (uint64_t)&a1[12 * (v4 - v5) + 4];
}

void *sub_100D53040(void *result)
{
  *double result = off_1022F46C8;
  return result;
}

void sub_100D53060(void *a1)
{
  *a1 = off_1022F46C8;
  operator delete();
}

void sub_100D53090(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_100D530C0(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100D530F0()
{
  if (qword_102481270 != -1) {
    dispatch_once(&qword_102481270, &stru_1022F4740);
  }
  return qword_10248AB10;
}

void sub_100D53134(id a1)
{
}

void sub_100D53178()
{
}

uint64_t sub_100D5319C(uint64_t a1)
{
  *(void *)a1 = off_1022F4770;
  *(void *)(a1 + 8) = 850045863;
  BOOL v2 = (std::mutex *)(a1 + 8);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(unsigned char *)(a1 + 96) = 1;
  std::mutex::lock((std::mutex *)(a1 + 8));
  BOOL v9 = 0;
  sub_1000C7F88(buf);
  int v3 = sub_1000D2988(*(uint64_t *)buf, "EnableTrackRun", &v9);
  if (v13) {
    sub_1000DB0A0(v13);
  }
  if (v3) {
    *(unsigned char *)(a1 + 96) = v9;
  }
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_1022F47C0);
  }
  unint64_t v4 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a1 + 96);
    *(_DWORD *)uint64_t buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#cltr,CLTrackRunEnablementController,EnableTrackRun,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022F47C0);
    }
    int v7 = *(unsigned __int8 *)(a1 + 96);
    int v10 = 67240192;
    int v11 = v7;
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLTrackRunEnablementController::CLTrackRunEnablementController()", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  std::mutex::unlock(v2);
  return a1;
}

void sub_100D533E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::mutex::unlock(v15);
  a13 = v14 + 72;
  sub_100D54028((void ***)&a13);
  std::mutex::~mutex(v15);
  _Unwind_Resume(a1);
}

void sub_100D53438(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  int v8 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1000DC48C(&__dst, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    long long __dst = *(_OWORD *)a2;
    uint64_t v20 = *(void *)(a2 + 16);
  }
  uint64_t v21 = *a3;
  sub_10065AB34((uint64_t)v22, a4);
  unint64_t v9 = *(void *)(a1 + 80);
  if (v9 >= *(void *)(a1 + 88))
  {
    uint64_t v10 = sub_100D54110((uint64_t *)(a1 + 72), &__dst);
  }
  else
  {
    sub_100D54200(a1 + 88, *(void **)(a1 + 80), &__dst);
    uint64_t v10 = v9 + 64;
    *(void *)(a1 + 80) = v9 + 64;
  }
  *(void *)(a1 + 80) = v10;
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_1022F47C0);
  }
  int v11 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a2 + 23) >= 0) {
      __int16 v12 = (void *)a2;
    }
    else {
      __int16 v12 = *(void **)a2;
    }
    uint64_t v13 = (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 6;
    *(_DWORD *)uint64_t buf = 136446466;
    float v16 = v12;
    __int16 v17 = 2050;
    uint64_t v18 = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#cltr,CLTrackRunEnablementController,addObserver,%{public}s,count,%{public}lu", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022F47C0);
    }
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunEnablementController::addObserver(const std::string &, const dispatch_queue_t &, const std::function<void (const BOOL)> &)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  sub_10065ABCC(v22);
  if (SHIBYTE(v20) < 0) {
    operator delete((void *)__dst);
  }
  std::mutex::unlock(v8);
}

void sub_100D536F4(_Unwind_Exception *a1)
{
  sub_100D53740(v2 - 144);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100D53740(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100D5377C(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v3 = *(unsigned __int8 *)(a1 + 96);
  std::mutex::unlock(v2);
  return v3;
}

void sub_100D537B8(uint64_t a1, unsigned __int8 **a2)
{
  unint64_t v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 80);
  if (v5 == v6) {
    goto LABEL_31;
  }
  char v7 = *((unsigned char *)a2 + 23);
  if (v7 >= 0) {
    int v8 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
  }
  else {
    int v8 = a2[1];
  }
  if (v7 >= 0) {
    unint64_t v9 = (unsigned __int8 *)a2;
  }
  else {
    unint64_t v9 = *a2;
  }
  while (1)
  {
    uint64_t v10 = *(unsigned __int8 *)(v5 + 23);
    if ((v10 & 0x80u) == 0) {
      int v11 = (unsigned __int8 *)*(unsigned __int8 *)(v5 + 23);
    }
    else {
      int v11 = *(unsigned __int8 **)(v5 + 8);
    }
    if (v11 != v8) {
      goto LABEL_19;
    }
    if ((v10 & 0x80) != 0) {
      break;
    }
    if (!*(unsigned char *)(v5 + 23)) {
      goto LABEL_21;
    }
    uint64_t v12 = 0;
    while (*(unsigned __int8 *)(v5 + v12) == v9[v12])
    {
      if (v10 == ++v12) {
        goto LABEL_21;
      }
    }
LABEL_19:
    v5 += 64;
    if (v5 == v6) {
      goto LABEL_31;
    }
  }
  if (memcmp(*(const void **)v5, v9, *(void *)(v5 + 8))) {
    goto LABEL_19;
  }
LABEL_21:
  sub_100D54548((uint64_t)buf, v5 + 64, v6, v5);
  uint64_t v14 = v13;
  uint64_t v15 = *(void *)(a1 + 80);
  if (v15 != v13)
  {
    do
    {
      v15 -= 64;
      sub_100D540C0(a1 + 88, v15);
    }
    while (v15 != v14);
  }
  *(void *)(a1 + 80) = v14;
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_1022F47C0);
  }
  float v16 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0) {
      __int16 v17 = (unsigned __int8 *)a2;
    }
    else {
      __int16 v17 = *a2;
    }
    uint64_t v18 = (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 6;
    *(_DWORD *)uint64_t buf = 136446466;
    uint64_t v21 = v17;
    __int16 v22 = 2050;
    uint64_t v23 = v18;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#cltr,CLTrackRunEnablementController,removeObserver,%{public}s,count,%{public}lu", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022F47C0);
    }
    float v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunEnablementController::removeObserver(const std::string &)", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
LABEL_31:
  std::mutex::unlock(v4);
}

void sub_100D53AA4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100D53ABC(uint64_t a1, char a2)
{
  unint64_t v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  *(unsigned char *)(a1 + 96) = a2;
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_1022F47C0);
  }
  uint64_t v5 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(unsigned __int8 *)(a1 + 96);
    *(_DWORD *)uint64_t buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#cltr,CLTrackRunEnablementController,setEnablementState,is_enabled,%{public}d,alerting observers", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022F47C0);
    }
    int v11 = *(unsigned __int8 *)(a1 + 96);
    int v18 = 67240192;
    int v19 = v11;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunEnablementController::setEnablementState(BOOL)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  char v7 = *(long long **)(a1 + 72);
  for (uint64_t i = *(long long **)(a1 + 80); v7 != i; v7 += 4)
  {
    if (*((char *)v7 + 23) < 0)
    {
      sub_1000DC48C(buf, *(void **)v7, *((void *)v7 + 1));
    }
    else
    {
      long long v9 = *v7;
      uint64_t v21 = *((void *)v7 + 2);
      *(_OWORD *)uint64_t buf = v9;
    }
    __int16 v22 = *((void *)v7 + 3);
    sub_10065AB34((uint64_t)v23, (uint64_t)(v7 + 2));
    uint64_t v10 = v22;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_100D53E30;
    block[3] = &unk_1022F4780;
    block[4] = a1;
    if (SHIBYTE(v21) < 0)
    {
      sub_1000DC48C(&__p, *(void **)buf, *(unint64_t *)&buf[8]);
    }
    else
    {
      long long __p = *(_OWORD *)buf;
      uint64_t v15 = v21;
    }
    float v16 = v22;
    sub_10065AB34((uint64_t)v17, (uint64_t)v23);
    dispatch_async(v10, block);
    sub_10065ABCC(v17);
    if (SHIBYTE(v15) < 0) {
      operator delete((void *)__p);
    }
    sub_10065ABCC(v23);
    if (SHIBYTE(v21) < 0) {
      operator delete(*(void **)buf);
    }
  }
  std::mutex::unlock(v4);
}

void sub_100D53DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
}

uint64_t sub_100D53E30(uint64_t a1)
{
  return sub_100180260(a1 + 72, *(unsigned char *)(*(void *)(a1 + 32) + 96));
}

uint64_t sub_100D53E40(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 63) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 40), *(void **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
  }
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return sub_10065AB34(a1 + 72, a2 + 72);
}

void sub_100D53EB0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 63) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D53ECC(uint64_t a1)
{
  sub_10065ABCC((void *)(a1 + 72));
  if (*(char *)(a1 + 63) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 40);
    operator delete(v2);
  }
}

uint64_t sub_100D53F1C(uint64_t a1)
{
  *(void *)a1 = off_1022F4770;
  uint64_t v2 = (std::mutex *)(a1 + 8);
  long long v4 = (void **)(a1 + 72);
  sub_100D54028(&v4);
  std::mutex::~mutex(v2);
  return a1;
}

void sub_100D53F80(uint64_t a1)
{
  *(void *)a1 = off_1022F4770;
  float v1 = (std::mutex *)(a1 + 8);
  uint64_t v2 = (void **)(a1 + 72);
  sub_100D54028(&v2);
  std::mutex::~mutex(v1);
  operator delete();
}

void sub_100D53FF8(id a1)
{
  qword_102418FB8 = (uint64_t)os_log_create("com.apple.locationd.Position", "TrackRun");
}

void sub_100D54028(void ***a1)
{
  float v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        sub_100D540C0((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_100D540C0(uint64_t a1, uint64_t a2)
{
  sub_10065ABCC((void *)(a2 + 32));
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

uint64_t sub_100D54110(uint64_t *a1, long long *a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 6;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58) {
    sub_1001D7FD4();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 5 > v4) {
    unint64_t v4 = v6 >> 5;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v7 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  uint64_t v15 = a1 + 2;
  if (v7) {
    int v8 = (char *)sub_10017EAF0((uint64_t)(a1 + 2), v7);
  }
  else {
    int v8 = 0;
  }
  int v11 = v8;
  uint64_t v12 = &v8[64 * v3];
  uint64_t v14 = &v8[64 * v7];
  sub_100D54200(a1 + 16, v12, a2);
  uint64_t v13 = v12 + 64;
  sub_100D5427C(a1, &v11);
  uint64_t v9 = a1[1];
  sub_100D544CC(&v11);
  return v9;
}

void sub_100D541EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100D544CC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D54200(int a1, void *__dst, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    __dst[2] = *((void *)a3 + 2);
    *(_OWORD *)long long __dst = v5;
  }
  __dst[3] = *((void *)a3 + 3);
  return sub_10065AB34((uint64_t)(__dst + 4), (uint64_t)(a3 + 2));
}

void sub_100D54260(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D5427C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100D542F4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100D542F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  int v14[2] = &v17;
  char v15 = 0;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    uint64_t v9 = a3 - 32;
    do
    {
      uint64_t v10 = v9 - 32;
      long long v11 = *(_OWORD *)(v9 - 32);
      *(void *)(v7 - 48) = *(void *)(v9 - 16);
      *(_OWORD *)(v7 - 64) = v11;
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      *(void *)(v9 - 32) = 0;
      *(void *)(v7 - 40) = *(void *)(v9 - 8);
      sub_100D543C0(v7 - 32, v9);
      uint64_t v7 = *((void *)&v17 + 1) - 64;
      *((void *)&v17 + 1) -= 64;
      v9 -= 64;
    }
    while (v10 != a5);
    uint64_t v12 = v17;
  }
  char v15 = 1;
  sub_100D54440((uint64_t)v14);
  return v12;
}

uint64_t sub_100D543C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t sub_100D54440(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100D54478((uint64_t *)a1);
  }
  return a1;
}

void sub_100D54478(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_100D540C0(v3, v1);
      v1 += 64;
    }
    while (v1 != v2);
  }
}

void **sub_100D544CC(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100D54500(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 64;
    sub_100D540C0(v4, i - 64);
  }
}

uint64_t sub_100D54548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      long long v7 = *(_OWORD *)v5;
      *(void *)(a4 + 16) = *(void *)(v5 + 16);
      *(_OWORD *)a4 = v7;
      *(unsigned char *)(v5 + 23) = 0;
      *(unsigned char *)uint64_t v5 = 0;
      *(void *)(a4 + 24) = *(void *)(v5 + 24);
      uint64_t v8 = v5 + 32;
      sub_100D545E0((void *)(a4 + 32), v8);
      a4 += 64;
      uint64_t v5 = v8 + 32;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void *sub_100D545E0(void *a1, uint64_t a2)
{
  sub_100D54664(a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *sub_100D54664(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100D546EC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88) && *(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_100D54728(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_100D5475C(uint64_t *a1)
{
  sub_10048B72C((uint64_t)v27);
  uint64_t v2 = sub_100132EFC(v27, (uint64_t)"{", 1);
  uint64_t v3 = sub_100132EFC(v2, (uint64_t)"\"mac\": ", 7);
  uint64_t v25 = *a1;
  sub_100B39278(&v26);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v4 = &v26;
  }
  else {
    uint64_t v4 = (std::string *)v26.__r_.__value_.__r.__words[0];
  }
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v26.__r_.__value_.__l.__size_;
  }
  uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, size);
  long long v7 = sub_100132EFC(v6, (uint64_t)", \"ssid\": ", 10);
  if (*((char *)a1 + 31) < 0)
  {
    sub_1000DC48C(__p, (void *)a1[1], a1[2]);
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)(a1 + 1);
    uint64_t v24 = a1[3];
  }
  if (v24 >= 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  if (v24 >= 0) {
    uint64_t v9 = HIBYTE(v24);
  }
  else {
    uint64_t v9 = (uint64_t)__p[1];
  }
  uint64_t v10 = sub_100132EFC(v7, (uint64_t)v8, v9);
  sub_100132EFC(v10, (uint64_t)", \"rssi\": ", 10);
  long long v11 = (void *)std::ostream::operator<<();
  sub_100132EFC(v11, (uint64_t)", \"mode\": ", 10);
  uint64_t v12 = (void *)std::ostream::operator<<();
  sub_100132EFC(v12, (uint64_t)", \"channel\": ", 13);
  uint64_t v13 = (void *)std::ostream::operator<<();
  uint64_t v14 = sub_100132EFC(v13, (uint64_t)", \"age\": ", 9);
  uint64_t v15 = *v14;
  *(_DWORD *)((char *)v14 + *(void *)(*v14 - 24) + 8) = *(_DWORD *)((unsigned char *)v14 + *(void *)(*v14 - 24) + 8) & 0xFFFFFEFB | 4;
  *(uint64_t *)((char *)v14 + *(void *)(v15 - 24) + 16) = 2;
  long long v16 = (void *)std::ostream::operator<<();
  long long v17 = sub_100132EFC(v16, (uint64_t)", \"timestamp\": ", 15);
  uint64_t v18 = *v17;
  *(_DWORD *)((char *)v17 + *(void *)(*v17 - 24) + 8) = *(_DWORD *)((unsigned char *)v17 + *(void *)(*v17 - 24) + 8) & 0xFFFFFEFB | 4;
  *(uint64_t *)((char *)v17 + *(void *)(v18 - 24) + 16) = 1;
  int v19 = (void *)std::ostream::operator<<();
  sub_100132EFC(v19, (uint64_t)", \"rssiFlags\": ", 15);
  std::ostream::operator<<();
  if (SHIBYTE(v24) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (*((unsigned char *)a1 + 64))
  {
    sub_100132EFC(v27, (uint64_t)", \"isApplePersonalHotspot\": ", 28);
    std::ostream::operator<<();
  }
  if (*((unsigned char *)a1 + 65))
  {
    sub_100132EFC(v27, (uint64_t)", \"isMoving\": ", 14);
    std::ostream::operator<<();
  }
  if (*((double *)a1 + 10) > 0.0)
  {
    uint64_t v20 = sub_100132EFC(v27, (uint64_t)", \"notificationAge\": ", 21);
    uint64_t v21 = *v20;
    *(_DWORD *)((char *)v20 + *(void *)(*v20 - 24) + 8) = *(_DWORD *)((unsigned char *)v20 + *(void *)(*v20 - 24) + 8) & 0xFFFFFEFB | 4;
    *(uint64_t *)((char *)v20 + *(void *)(v21 - 24) + 16) = 2;
    CFAbsoluteTimeGetCurrent();
    std::ostream::operator<<();
  }
  if (*((unsigned char *)a1 + 72))
  {
    sub_100132EFC(v27, (uint64_t)", \"isAssociated\": ", 18);
    std::ostream::operator<<();
  }
  sub_100132EFC(v27, (uint64_t)"}", 1);
  std::stringbuf::str();
  if (v28 < 0) {
    operator delete((void *)v27[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_100D54BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_10048B8C4((uint64_t)&a22);
  _Unwind_Resume(a1);
}

double sub_100D54C3C(uint64_t a1)
{
  return vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a1 + 80));
}

uint64_t sub_100D54C68(uint64_t a1)
{
  sub_10048B72C((uint64_t)v9);
  uint64_t v2 = sub_100132EFC(v9, (uint64_t)"{", 1);
  sub_100132EFC(v2, (uint64_t)"\"isAssociated\": ", 16);
  std::ostream::operator<<();
  if (*(unsigned char *)(a1 + 88) && *(int *)(a1 + 40) >= 1)
  {
    uint64_t v3 = sub_100132EFC(v9, (uint64_t)", \"accessPoint\": ", 17);
    sub_100D5475C((uint64_t *)a1);
    uint64_t v4 = (v8 & 0x80u) == 0 ? __p : (void **)__p[0];
    uint64_t v5 = (v8 & 0x80u) == 0 ? (void *)v8 : __p[1];
    sub_100132EFC(v3, (uint64_t)v4, (uint64_t)v5);
    if ((char)v8 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_100132EFC(v9, (uint64_t)"}", 1);
  std::stringbuf::str();
  if (v10 < 0) {
    operator delete((void *)v9[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_100D54E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_10048B8C4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

const char *sub_100D54E8C(int a1)
{
  if (a1 > 13) {
    return "-";
  }
  else {
    return (&off_1022F47E0)[a1];
  }
}

const char *sub_100D54EB0(unsigned int a1)
{
  if (a1 > 0xC) {
    return "na";
  }
  else {
    return (&off_1022F4850)[a1];
  }
}

const char *sub_100D54ED8(unsigned int a1)
{
  if (a1 < 3) {
    return (&off_1022F48F8)[a1];
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022F48B8);
  }
  uint64_t v3 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    unsigned int v6 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "@WifiService_Type, unsupported scan source %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F48B8);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "const char *CLWifiService_Type::toString(CLWifiService_Type::ScanSource)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return "?";
}

BOOL sub_100D550A4(int a1)
{
  return (a1 - 1) < 0xE;
}

BOOL sub_100D550B4(int a1)
{
  if ((a1 + 1) < 0xF) {
    return (((_WORD)a1 + 1) & 0x7FFF) == 13;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022F48B8);
  }
  uint64_t v3 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    int v7 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "@WifiService_Type, unsupported scan type %{public}d", buf, 8u);
  }
  BOOL v4 = sub_10013D1A0(115, 0);
  BOOL result = 0;
  if (v4)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022F48B8);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLWifiService_Type::isLocationScanTypeOn5GHzBand(ScanType)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
    return 0;
  }
  return result;
}

uint64_t *sub_100D55288@<X0>(uint64_t *result@<X0>, std::string *a2@<X8>)
{
  if (*result == result[1])
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    uint64_t v3 = result;
    sub_10048B72C((uint64_t)v11);
    uint64_t v4 = *v3;
    uint64_t v5 = v3[1];
    if (*v3 != v5)
    {
      do
      {
        unsigned int v6 = (void *)std::ostream::operator<<();
        sub_100132EFC(v6, (uint64_t)",", 1);
        v4 += 4;
      }
      while (v4 != v5);
    }
    std::stringbuf::str();
    uint64_t v7 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    int v8 = (char)v7;
    std::string::size_type v9 = (std::string::size_type)a2 + v7;
    if (v8 >= 0)
    {
      std::string::size_type v10 = (std::string::size_type)a2;
    }
    else
    {
      std::string::size_type v9 = a2->__r_.__value_.__r.__words[0] + a2->__r_.__value_.__l.__size_;
      std::string::size_type v10 = a2->__r_.__value_.__r.__words[0];
    }
    std::string::erase(a2, ~v10 + v9, 1uLL);
    if (v12 < 0) {
      operator delete((void *)v11[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (uint64_t *)std::ios::~ios();
  }
  return result;
}

void sub_100D5543C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  sub_10048B8C4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_100D5546C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 31)) {
      goto LABEL_3;
    }
LABEL_7:
    sub_101A8B804();
  }
  if (!*(void *)(a1 + 16)) {
    goto LABEL_7;
  }
LABEL_3:
  int v4 = *(_DWORD *)(a1 + 40);
  if (v4 == -1) {
    sub_101A8B990();
  }
  if ((*(unsigned char *)(a1 + 31) & 0x80) != 0)
  {
    sub_1000DC48C(&v7, *(void **)(a1 + 8), *(void *)(a1 + 16));
    int v4 = *(_DWORD *)(a1 + 40);
  }
  else
  {
    long long v7 = *(_OWORD *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 24);
  }
  int v5 = *(_DWORD *)(a1 + 36);
  double result = *(double *)(a1 + 48);
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v8;
  *(_DWORD *)(a2 + 24) = v5;
  *(_DWORD *)(a2 + 28) = v4;
  *(double *)(a2 + 32) = result;
  return result;
}

uint64_t sub_100D55514(uint64_t result, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    unint64_t v4 = *a2;
    unint64_t v5 = a2[1];
    if (*a2 != v5)
    {
      while (1)
      {
        uint64_t v6 = *(void *)v4;
        uint64_t v10 = *(void *)v3;
        uint64_t v11 = v6;
        if (sub_100B39178(&v11, &v10)) {
          break;
        }
        v4 += 88;
        if (v4 == v5)
        {
          unint64_t v4 = v5;
          break;
        }
      }
      if (v4 != a2[1])
      {
        *(void *)unint64_t v4 = *(void *)v3;
        double result = (uint64_t)std::string::operator=((std::string *)(v4 + 8), (const std::string *)(v3 + 8));
        long long v8 = *(_OWORD *)(v3 + 48);
        long long v7 = *(_OWORD *)(v3 + 64);
        long long v9 = *(_OWORD *)(v3 + 32);
        *(void *)(v4 + 80) = *(void *)(v3 + 80);
        *(_OWORD *)(v4 + 48) = v8;
        *(_OWORD *)(v4 + 64) = v7;
        *(_OWORD *)(v4 + 32) = v9;
        return result;
      }
      unint64_t v4 = a2[1];
    }
    if (v4 >= a2[2])
    {
      double result = sub_1001F8D14(a2, v3);
    }
    else
    {
      sub_1001F8C88((uint64_t)a2, v3);
      double result = v4 + 88;
    }
    a2[1] = result;
  }
  return result;
}

void sub_100D555F0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)a1;
  unint64_t v4 = (unsigned char *)(a2 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    sub_1000DC48C(v4, *(void **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)unint64_t v4 = *(_OWORD *)(a1 + 8);
    *(void *)(a2 + 24) = *(void *)(a1 + 24);
  }
  long long v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(void *)(a2 + 80) = *(void *)(a1 + 80);
  *(CFAbsoluteTime *)(a2 + 56) = CFAbsoluteTimeGetCurrent();
}

void sub_100D55674(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D55690(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(a1 + 88)) {
    BOOL v3 = *(_DWORD *)(a1 + 40) < 1;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    sub_1000E23EC((unsigned char *)a2, a1);
  }
  else
  {
    sub_100D555F0(a1, (uint64_t)&v8);
    *(void *)a2 = v8;
    unint64_t v4 = (unsigned char *)(a2 + 8);
    if (SHIBYTE(v10) < 0)
    {
      sub_1000DC48C(v4, (void *)__p, *((unint64_t *)&__p + 1));
      int v6 = SHIBYTE(v10);
      long long v7 = v12;
      *(_OWORD *)(a2 + 32) = v11;
      *(_OWORD *)(a2 + 48) = v7;
      *(_OWORD *)(a2 + 64) = v13;
      *(void *)(a2 + 80) = v14;
      *(unsigned char *)(a2 + 88) = 1;
      if (v6 < 0) {
        operator delete((void *)__p);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v4 = __p;
      *(void *)(a2 + 24) = v10;
      long long v5 = v12;
      *(_OWORD *)(a2 + 32) = v11;
      *(_OWORD *)(a2 + 48) = v5;
      *(_OWORD *)(a2 + 64) = v13;
      *(void *)(a2 + 80) = v14;
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
}

void sub_100D55790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D557AC(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100D557DC(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100D5580C()
{
  byte_10248AB18 = 0;
  byte_10248AB70 = 0;
  __cxa_atexit((void (*)(void *))sub_100D546EC, &byte_10248AB18, (void *)&_mh_execute_header);
  uint64_t v1 = nullsub_41(0, v0);
  sub_100134750(&v8, "");
  qword_10248AB78 = v1;
  *(_OWORD *)byte_10248AB80 = v8;
  *(void *)&byte_10248AB80[16] = v9;
  long long v8 = 0uLL;
  uint64_t v9 = 0;
  *(void *)&xmmword_10248AB98 = -100;
  DWORD2(xmmword_10248AB98) = -1;
  __asm { FMOV            V0.2D, #-1.0 }
  xmmword_10248ABA8 = _Q0;
  LOWORD(xmmword_10248ABB8) = 256;
  DWORD1(xmmword_10248ABB8) = 0;
  BYTE8(xmmword_10248ABB8) = 0;
  qword_10248ABC8 = 0;
  __cxa_atexit((void (*)(void *))sub_100D54728, &qword_10248AB78, (void *)&_mh_execute_header);
  sub_100134750(&v8, "");
  xmmword_10248ABD0 = v8;
  qword_10248ABE0 = v9;
  uint64_t v9 = 0;
  long long v8 = 0uLL;
  qword_10248ABE8 = -1;
  qword_10248ABF0 = 0xBFF0000000000000;
  return __cxa_atexit((void (*)(void *))sub_10058C198, &xmmword_10248ABD0, (void *)&_mh_execute_header);
}

void sub_100D55948()
{
}

void sub_100D5598C()
{
}

uint64_t sub_100D559B0()
{
  if (qword_102481278 != -1) {
    dispatch_once(&qword_102481278, &stru_1022F4910);
  }
  return qword_10248ABF8;
}

void sub_100D559F8(uint64_t a1)
{
}

void sub_100D55ABC(_Unwind_Exception *a1)
{
  sub_1009D1DE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100D55AD0(uint64_t a1)
{
  BOOL v2 = sub_100D568B0(a1, "AppleHIDKeyboardEventDriverV2", @"RequiresCompassResetOnConnect");
  uint64_t result = sub_100D568B0(v2, "IOAccessoryIDBusHIDDevice", @"RequiresCompassResetOnConnect");
  char v7 = v2 | result;
  if (*(unsigned __int8 *)(a1 + 81) != (v2 | result))
  {
    *(unsigned char *)(a1 + 81) = v2 | result;
    if ((v2 | result)) {
      double Current = 1.79769313e308;
    }
    else {
      double Current = CFAbsoluteTimeGetCurrent();
    }
    *(double *)(a1 + 88) = Current;
    uint64_t v5 = sub_1000A6958();
    sub_10016332C(v5, "LastKeyboardDisconnect", (const void *)(a1 + 88));
    uint64_t v6 = *(void *)sub_1000A6958();
    (*(void (**)(void))(v6 + 944))();
    return sub_1000E01AC(a1, 0, (uint64_t)&v7, 1);
  }
  return result;
}

void *sub_100D55BC4(void *a1)
{
  *a1 = off_1022F4940;
  sub_100D55C60((uint64_t)a1, 0, 0);

  return sub_1009D1DE4(a1);
}

void sub_100D55C28(void *a1)
{
  sub_100D55BC4(a1);

  operator delete();
}

void sub_100D55C60(uint64_t a1, int a2, unint64_t a3)
{
  if (!a2)
  {
    if (a3)
    {
      if (!*(unsigned char *)(a1 + 80))
      {
        if (qword_102481278 != -1) {
          dispatch_once(&qword_102481278, &stru_1022F4910);
        }
        sub_100D55F34(qword_10248ABF8);
      }
      if (a3 >= 2)
      {
        sub_1000E01AC(a1, 0, a1 + 81, 1);
      }
    }
    else
    {
      if (qword_102481278 != -1) {
        dispatch_once(&qword_102481278, &stru_1022F4910);
      }
      uint64_t v5 = qword_10248ABF8;
      sub_100D55D48(v5);
    }
  }
}

void sub_100D55D48(uint64_t a1)
{
  if (qword_1024190E0 != -1) {
    dispatch_once(&qword_1024190E0, &stru_1022F4988);
  }
  BOOL v2 = qword_1024190E8;
  if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "unregistering for keyboard updates", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022F4988);
    }
    __int16 v6 = 0;
    unint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLKeyboardCoverState::unregisterForKeyboardUpdates()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  uint64_t v3 = sub_1000D3E78();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_100D56760;
  v5[3] = &unk_1022A3020;
  void v5[4] = a1;
  sub_1009E8E94(v3, (uint64_t)v5);
  *(unsigned char *)(a1 + 80) = 0;
}

void sub_100D55F34(uint64_t a1)
{
  if (qword_1024190E0 != -1) {
    dispatch_once(&qword_1024190E0, &stru_1022F4988);
  }
  BOOL v2 = qword_1024190E8;
  if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "registering for keyboard updates", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022F4988);
    }
    __int16 v6 = 0;
    unint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLKeyboardCoverState::registerForKeyboardUpdates()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  uint64_t v3 = sub_1000D3E78();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_100D56180;
  v5[3] = &unk_1022A3020;
  void v5[4] = a1;
  sub_1009E8E94(v3, (uint64_t)v5);
  *(unsigned char *)(a1 + 80) = 1;
}

uint64_t sub_100D56124(uint64_t a1, io_iterator_t iterator)
{
  uint64_t result = IOIteratorNext(iterator);
  if (result)
  {
    io_object_t v5 = result;
    do
    {
      sub_100D55AD0(a1);
      IOObjectRelease(v5);
      uint64_t result = IOIteratorNext(iterator);
      io_object_t v5 = result;
    }
    while (result);
  }
  return result;
}

void sub_100D56180(uint64_t a1)
{
  kern_return_t v21;
  IONotificationPort *v22;
  CFDictionaryRef v23;
  kern_return_t v24;
  IONotificationPort *v25;
  CFDictionaryRef v26;
  kern_return_t v27;
  IONotificationPort *v28;
  CFDictionaryRef v29;
  kern_return_t v30;
  io_iterator_t v31;
  NSObject *v32;
  char *v33;
  char *v34;
  uint8_t buf[1640];
  uint64_t vars8;

  uint64_t v1 = *(void *)(a1 + 32);
  *(void *)(v1 + 32) = IONotificationPortCreate(kIOMainPortDefault);
  *(void *)(v1 + 40) = IONotificationPortCreate(kIOMainPortDefault);
  *(void *)(v1 + 48) = IONotificationPortCreate(kIOMainPortDefault);
  IONotificationPortRef v2 = IONotificationPortCreate(kIOMainPortDefault);
  *(void *)(v1 + 56) = v2;
  uint64_t v3 = *(IONotificationPort **)(v1 + 32);
  if (v3 && *(void *)(v1 + 40) && (*(void *)(v1 + 48) ? (BOOL v4 = v2 == 0) : (BOOL v4 = 1), !v4))
  {
    RunLoopSource = IONotificationPortGetRunLoopSource(v3);
    char v7 = IONotificationPortGetRunLoopSource(*(IONotificationPortRef *)(v1 + 40));
    long long v8 = IONotificationPortGetRunLoopSource(*(IONotificationPortRef *)(v1 + 48));
    CFRunLoopSourceRef v9 = IONotificationPortGetRunLoopSource(*(IONotificationPortRef *)(v1 + 56));
    if (RunLoopSource) {
      BOOL v10 = v7 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10 || v8 == 0 || v9 == 0)
    {
      if (qword_102481278 != -1) {
        dispatch_once(&qword_102481278, &stru_1022F4910);
      }
      uint64_t v13 = qword_10248ABF8;
      sub_100D55D48(v13);
    }
    else
    {
      uint64_t v14 = v9;
      sub_1000D3E78();
      uint64_t v15 = (__CFRunLoop *)sub_1001BEA14();
      CFRunLoopAddSource(v15, RunLoopSource, kCFRunLoopDefaultMode);
      sub_1000D3E78();
      long long v16 = (__CFRunLoop *)sub_1001BEA14();
      CFRunLoopAddSource(v16, v7, kCFRunLoopDefaultMode);
      sub_1000D3E78();
      long long v17 = (__CFRunLoop *)sub_1001BEA14();
      CFRunLoopAddSource(v17, v8, kCFRunLoopDefaultMode);
      sub_1000D3E78();
      uint64_t v18 = (__CFRunLoop *)sub_1001BEA14();
      CFRunLoopAddSource(v18, v14, kCFRunLoopDefaultMode);
      int v19 = *(IONotificationPort **)(v1 + 32);
      CFDictionaryRef v20 = IOServiceMatching("AppleHIDKeyboardEventDriverV2");
      uint64_t v21 = IOServiceAddMatchingNotification(v19, "IOServiceFirstMatch", v20, (IOServiceMatchingCallback)sub_100D56124, (void *)v1, (io_iterator_t *)(v1 + 64));
      __int16 v22 = *(IONotificationPort **)(v1 + 40);
      uint64_t v23 = IOServiceMatching("AppleHIDKeyboardEventDriverV2");
      uint64_t v24 = IOServiceAddMatchingNotification(v22, "IOServiceTerminate", v23, (IOServiceMatchingCallback)sub_100D56124, (void *)v1, (io_iterator_t *)(v1 + 68));
      uint64_t v25 = *(IONotificationPort **)(v1 + 48);
      std::string v26 = IOServiceMatching("IOAccessoryIDBusHIDDevice");
      int v27 = IOServiceAddMatchingNotification(v25, "IOServiceFirstMatch", v26, (IOServiceMatchingCallback)sub_100D56124, (void *)v1, (io_iterator_t *)(v1 + 72));
      char v28 = *(IONotificationPort **)(v1 + 56);
      double v29 = IOServiceMatching("IOAccessoryIDBusHIDDevice");
      unsigned int v30 = IOServiceAddMatchingNotification(v28, "IOServiceTerminate", v29, (IOServiceMatchingCallback)sub_100D56124, (void *)v1, (io_iterator_t *)(v1 + 76));
      if (v21 || v24 || v27 || v30)
      {
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_1022F4988);
        }
        float v32 = qword_1024190E8;
        if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#Warning Failed to register for keyboard updates. Could not register for notifications from  AppleHIDKeyboardEventDriverV2 service and IOAccessoryIDBusHIDDevice service (for kIOFirstMatchNotification and kIOTerminatedNotification).", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190E0 != -1) {
            dispatch_once(&qword_1024190E0, &stru_1022F4988);
          }
          float v34 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLKeyboardCoverState::registerForKeyboardUpdates()_block_invoke", "%s\n", v34);
          if (v34 != (char *)buf) {
            free(v34);
          }
        }
        if (qword_102481278 != -1) {
          dispatch_once(&qword_102481278, &stru_1022F4910);
        }
        sub_100D55D48(qword_10248ABF8);
      }
      else
      {
        sub_100D56124(v1, *(_DWORD *)(v1 + 64));
        sub_100D56124(v1, *(_DWORD *)(v1 + 68));
        sub_100D56124(v1, *(_DWORD *)(v1 + 72));
        double v31 = *(_DWORD *)(v1 + 76);
        sub_100D56124(v1, v31);
      }
    }
  }
  else
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022F4988);
    }
    io_object_t v5 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Failed to register for keyboard updates. Could not create KeyboardConnectNotificationPort and KeyboardConnectNotificationPort", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022F4988);
      }
      double v33 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLKeyboardCoverState::registerForKeyboardUpdates()_block_invoke", "%s\n", v33);
      if (v33 != (char *)buf) {
        free(v33);
      }
    }
  }
}

uint64_t sub_100D56760(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  IONotificationPortRef v2 = *(IONotificationPort **)(v1 + 32);
  if (v2)
  {
    CFRunLoopSourceRef RunLoopSource = IONotificationPortGetRunLoopSource(v2);
    if (RunLoopSource)
    {
      BOOL v4 = RunLoopSource;
      sub_1000D3E78();
      io_object_t v5 = (__CFRunLoop *)sub_1001BEA14();
      CFRunLoopRemoveSource(v5, v4, kCFRunLoopDefaultMode);
    }
    IONotificationPortDestroy(*(IONotificationPortRef *)(v1 + 32));
    *(void *)(v1 + 32) = 0;
  }
  __int16 v6 = *(IONotificationPort **)(v1 + 40);
  if (v6)
  {
    CFRunLoopSourceRef v7 = IONotificationPortGetRunLoopSource(v6);
    if (v7)
    {
      long long v8 = v7;
      sub_1000D3E78();
      CFRunLoopSourceRef v9 = (__CFRunLoop *)sub_1001BEA14();
      CFRunLoopRemoveSource(v9, v8, kCFRunLoopDefaultMode);
    }
    IONotificationPortDestroy(*(IONotificationPortRef *)(v1 + 40));
    *(void *)(v1 + 40) = 0;
  }
  BOOL v10 = *(IONotificationPort **)(v1 + 48);
  if (v10)
  {
    CFRunLoopSourceRef v11 = IONotificationPortGetRunLoopSource(v10);
    if (v11)
    {
      long long v12 = v11;
      sub_1000D3E78();
      uint64_t v13 = (__CFRunLoop *)sub_1001BEA14();
      CFRunLoopRemoveSource(v13, v12, kCFRunLoopDefaultMode);
    }
    IONotificationPortDestroy(*(IONotificationPortRef *)(v1 + 48));
    *(void *)(v1 + 48) = 0;
  }
  uint64_t v14 = *(IONotificationPort **)(v1 + 56);
  if (v14)
  {
    CFRunLoopSourceRef v15 = IONotificationPortGetRunLoopSource(v14);
    if (v15)
    {
      long long v16 = v15;
      sub_1000D3E78();
      long long v17 = (__CFRunLoop *)sub_1001BEA14();
      CFRunLoopRemoveSource(v17, v16, kCFRunLoopDefaultMode);
    }
    IONotificationPortDestroy(*(IONotificationPortRef *)(v1 + 56));
    *(void *)(v1 + 56) = 0;
  }
  io_object_t v18 = *(_DWORD *)(v1 + 64);
  if (v18)
  {
    IOObjectRelease(v18);
    *(_DWORD *)(v1 + 64) = 0;
  }
  io_object_t v19 = *(_DWORD *)(v1 + 68);
  if (v19)
  {
    IOObjectRelease(v19);
    *(_DWORD *)(v1 + 68) = 0;
  }
  io_object_t v20 = *(_DWORD *)(v1 + 72);
  if (v20)
  {
    IOObjectRelease(v20);
    *(_DWORD *)(v1 + 72) = 0;
  }
  uint64_t result = *(unsigned int *)(v1 + 76);
  if (result)
  {
    uint64_t result = IOObjectRelease(result);
    *(_DWORD *)(v1 + 76) = 0;
  }
  return result;
}

BOOL sub_100D568B0(int a1, char *name, const __CFString *a3)
{
  io_iterator_t existing = 0;
  CFDictionaryRef v4 = IOServiceMatching(name);
  IOServiceGetMatchingServices(kIOMainPortDefault, v4, &existing);
  io_object_t v5 = IOIteratorNext(existing);
  if (v5)
  {
    io_object_t v6 = v5;
    BOOL v7 = 0;
    do
    {
      CFBooleanRef CFProperty = (const __CFBoolean *)IORegistryEntryCreateCFProperty(v6, a3, kCFAllocatorDefault, 0);
      if (CFProperty)
      {
        CFBooleanRef v9 = CFProperty;
        CFTypeID v10 = CFGetTypeID(CFProperty);
        if (v10 == CFBooleanGetTypeID())
        {
          BOOL v7 = CFBooleanGetValue(v9) != 0;
          CFRelease(v9);
        }
      }
      IOObjectRelease(v6);
      io_object_t v6 = IOIteratorNext(existing);
    }
    while (v6);
  }
  else
  {
    return 0;
  }
  return v7;
}

uint64_t sub_100D5699C(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  double v3 = *(double *)(a1 + 88);
  if (v3 == 1.79769313e308) {
    return 2;
  }
  if (v3 >= Current + -1800.0) {
    return v3 <= Current;
  }
  return 0;
}

uint64_t sub_100D569F8()
{
  uint64_t v0 = 0xFFFFFFFFLL;
  unsigned int v4 = -1;
  io_registry_entry_t v1 = sub_1012D1494(+[NSString stringWithUTF8String:"AppleHIDKeyboardEventDriverV2"]);
  if (v1)
  {
    io_object_t v2 = v1;
    sub_1012D14DC(&v4, v1, @"ProductID");
    IOObjectRelease(v2);
    return v4;
  }
  return v0;
}

void sub_100D56A68(id a1)
{
  qword_1024190E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

double sub_100D56A98(uint64_t a1)
{
  *(void *)a1 = off_1022B2000;
  *(_DWORD *)(a1 + 8) = 5;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = a1 + 72;
  double result = 2.22507386e-308;
  *(_OWORD *)(a1 + 88) = xmmword_101D1EA10;
  return result;
}

double sub_100D56AE8(uint64_t a1, double a2)
{
  double v2 = a2 - *(double *)(a1 + 88);
  double result = 0.0;
  if (v2 < 10.0) {
    return *(double *)(a1 + 96);
  }
  return result;
}

void sub_100D56B08(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 88);
  double v5 = a2 - v4;
  if (v5 >= 10.0)
  {
    sub_10041F400((void *)a1);
    *(void *)(a1 + 96) = 0;
    goto LABEL_9;
  }
  if (v4 == 2.22507386e-308)
  {
LABEL_9:
    *(double *)(a1 + 88) = a2;
    return;
  }
  double v7 = v5;
  sub_10007EEB4(a1, &v7);
  *(double *)(a1 + 88) = a2;
  double v7 = 0.0;
  if (*(_DWORD *)(a1 + 80) >= 3u && sub_10007EDE0((void *)a1, 2, &v7))
  {
    double v6 = 0.0;
    if (v7 > 0.0) {
      double v6 = 1.0 / v7;
    }
    *(double *)(a1 + 96) = v6;
  }
}

void sub_100D56E34()
{
}

uint64_t sub_100D56E60(uint64_t a1, uint64_t a2)
{
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_1022F49D0);
  }
  double v4 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(a2 + 8);
    *(_DWORD *)uint64_t buf = 134217984;
    *(void *)io_object_t v20 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Finished insertion startTime %f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022F49D0);
    }
    uint64_t v13 = *(void *)(a2 + 8);
    int v17 = 134217984;
    uint64_t v18 = v13;
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CMStrideCalibrationDatabase initWithSilo:]_block_invoke", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  double v6 = sub_101218444(*(void *)(*(void *)(a1 + 32) + 8), *(double *)(a2 + 72));
  if ([(NSArray *)v6 count] >= 0x33)
  {
    [v6 objectAtIndex:50 getBytes:buf length:120];
    sub_10121648C(*(void *)(*(void *)(a1 + 32) + 8), *(double *)&v20[4]);
  }
  [*(id *)(a1 + 32) delegate];
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    id v8 = [*(id *)(a1 + 32) delegate];
    uint64_t v9 = *(void *)(a1 + 32);
    long long v10 = *(_OWORD *)(a2 + 80);
    uint8_t v15[4] = *(_OWORD *)(a2 + 64);
    void v15[5] = v10;
    v15[6] = *(_OWORD *)(a2 + 96);
    uint64_t v16 = *(void *)(a2 + 112);
    long long v11 = *(_OWORD *)(a2 + 16);
    v15[0] = *(_OWORD *)a2;
    v15[1] = v11;
    long long v12 = *(_OWORD *)(a2 + 48);
    void v15[2] = *(_OWORD *)(a2 + 32);
    v15[3] = v12;
    return (uint64_t)[v8 strideCalibrationDatabase:v9 didInsertEntry:v15];
  }
  return result;
}

uint64_t sub_100D57284(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1 + 112;
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v6 = a1 + 72;
  *(void *)&v19[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  __int16 v20 = 256;
  v19[0] = *(double *)(a2 + 8);
  if (sub_10018360C(v6, v19))
  {
    if (sub_100082064(v6))
    {
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 80))(a1, a2, 0);
    }
    else if (!*(unsigned char *)(a1 + 128))
    {
      long long v12 = (void *)(a1 + 176);
      unint64_t v13 = *(void *)(a1 + 216);
      if (v13 > *(int *)(a1 + 344))
      {
        ++*(void *)(a1 + 208);
        *(void *)(a1 + 216) = v13 - 1;
        sub_10080EFBC(a1 + 176, 1);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022F49F0);
        }
        uint64_t v14 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Maximum number of entries exceeded, throwing out oldest entry.", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022F49F0);
          }
          uint64_t v18 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLActivityRecorderDb<CLStrideCalEntry>::addSuspectRecord(const T &) [T = CLStrideCalEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v18);
          if (v18 != (char *)buf) {
            free(v18);
          }
        }
      }
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_1022F49D0);
      }
      CFRunLoopSourceRef v15 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Buffer was added to since db was inaccesible.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_1022F49D0);
        }
        int v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLActivityRecorderDb<CLStrideCalEntry>::addSuspectRecord(const T &) [T = CLStrideCalEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
      }
      __n128 v7 = sub_100D58034(v12, (long long *)a2);
    }
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022F49F0);
    }
    id v8 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = (void *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0) {
        uint64_t v9 = (void *)*v9;
      }
      *(_DWORD *)uint64_t buf = 68289538;
      int v22 = 0;
      __int16 v23 = 2082;
      uint64_t v24 = "";
      __int16 v25 = 1026;
      int v26 = (int)v19[0];
      __int16 v27 = 2082;
      char v28 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022F49F0);
      }
    }
    long long v10 = qword_102418FD8;
    if (os_signpost_enabled((os_log_t)qword_102418FD8))
    {
      long long v11 = (void *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0) {
        long long v11 = (void *)*v11;
      }
      *(_DWORD *)uint64_t buf = 68289538;
      int v22 = 0;
      __int16 v23 = 2082;
      uint64_t v24 = "";
      __int16 v25 = 1026;
      int v26 = (int)v19[0];
      __int16 v27 = 2082;
      char v28 = v11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CL database error, record contains invalid time", "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
    }
  }
  return (*(uint64_t (**)(uint64_t, __n128))(*(void *)v5 + 24))(v5, v7);
}

void sub_100D577C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100D57D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100419F34((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100D57EDC(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)(v1 - 72);
  if (v3)
  {
    *(void *)(v1 - 64) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D58004(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

__n128 sub_100D58034(void *a1, long long *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 34 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100D5812C(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x22)) + 120 * (v7 % 0x22);
  long long v9 = *a2;
  long long v10 = a2[1];
  long long v11 = a2[3];
  *(_OWORD *)(v8 + 32) = a2[2];
  *(_OWORD *)(v8 + 48) = v11;
  *(_OWORD *)unint64_t v8 = v9;
  *(_OWORD *)(v8 + 16) = v10;
  __n128 result = (__n128)a2[4];
  long long v13 = a2[5];
  long long v14 = a2[6];
  *(void *)(v8 + 112) = *((void *)a2 + 14);
  *(_OWORD *)(v8 + 80) = v13;
  *(_OWORD *)(v8 + 96) = v14;
  *(__n128 *)(v8 + 64) = result;
  ++a1[5];
  return result;
}

void sub_100D580FC(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100D5812C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x22;
  unint64_t v4 = v2 - 34;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    long long v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      float v34 = (char *)sub_1000DA54C(v5, v33);
      float v35 = &v34[8 * (v33 >> 2)];
      float v37 = &v34[8 * v36];
      int32x2_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        long long v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)long long v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    io_object_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      long long v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    __int16 v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    long long v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      float v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      float v35 = &v34[8 * (v46 >> 2)];
      float v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  long long v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0xFF0uLL);
  sub_1000DA434(&v54, &v53);
  __int16 v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  double v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100D583F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_100D58444(void *a1, int a2)
{
  sub_100134750(__p, "");
  sub_100D58524((uint64_t)a1, "VO2MaxStagingSummaryHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_1022F4A20;
  a1[9] = off_1022F4AD8;
  sub_100D598B4((uint64_t)a1);
  return a1;
}

void sub_100D584F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_100D589F8(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_100D58524(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 8));
  *uint64_t v12 = off_1022ADB08;
  *(void *)a1 = off_1022F4EF8;
  *(void *)(a1 + 72) = off_1022F4FA0;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_1022F4EF8;
  *(void *)(a1 + 72) = off_1022F4FA0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 264) = 0x7FEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_DWORD *)(a1 + 400) = 1;
  *(_DWORD *)(a1 + 408) = 12000;
  *(void *)(a1 + 416) = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 424));
  *(void *)(a1 + 424) = off_1022ADB08;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_100D5895C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  *__int16 v27 = v30;
  sub_1003BE1F8(v31);
  sub_100D5C434(v29);
  sub_1011F8AE0(v28);
  *unint64_t v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_100D589F0()
{
}

void *sub_100D589F8(void *a1)
{
  *a1 = off_1022F4EF8;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_1022F4FA0;
  a1[52] = off_1022ADAD8;
  sub_1003BE1F8(a1 + 53);
  sub_100D5C434(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022ADAD8;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void *sub_100D58ABC(uint64_t a1)
{
  return sub_100D589F8((void *)(a1 - 72));
}

void sub_100D58AC4(void *a1)
{
  sub_100D589F8(a1);

  operator delete();
}

void sub_100D58AFC(uint64_t a1)
{
  sub_100D589F8((void *)(a1 - 72));

  operator delete();
}

void *sub_100D58B38@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "VO2MaxStagingSummaryHistory");
}

void *sub_100D58B48@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "VO2MaxStagingSummaryHistory");
}

uint64_t sub_100D58B58(uint64_t a1, uint64_t a2)
{
  if (*(double *)(*(void *)(a2 + 8) - 16) == 1.79769313e308 && sub_100082064(a1 + 72))
  {
    sub_10002B640(*(void *)(a1 + 80));
    CFAbsoluteTimeGetCurrent();
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM VO2MaxStagingSummaryHistory WHERE startTime < ?");
  }
  return -1;
}

void sub_100D58CA4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D58CBC(uint64_t a1, uint64_t a2)
{
  return sub_100D58B58(a1 - 72, a2);
}

uint64_t sub_100D58CC4(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    memset(out, 0, 37);
    uuid_unparse(a2, out);
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM VO2MaxStagingSummaryHistory WHERE sessionId = ?");
  }
  return result;
}

void sub_100D58F14(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D58F58(uint64_t a1, void *a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    a2[1] = *a2;
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * from VO2MaxStagingSummaryHistory ORDER BY startTime ASC");
  }
  return result;
}

void sub_100D59274(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D592BC(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1;
  }
  if (v5 != 100) {
    return 2;
  }
  sub_100D59C78(a1, a2);
  return 0;
}

uint64_t sub_100D5931C(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT COUNT(*) FROM VO2MaxStagingSummaryHistory");
  }
  return 0xFFFFFFFFLL;
}

void sub_100D593D8(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D59414(uint64_t a1)
{
  return sub_100D5931C(a1 - 72);
}

uint64_t sub_100D5941C(uint64_t a1, void *a2)
{
  if (sub_100082064(a1 + 72))
  {
    a2[1] = *a2;
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM VO2MaxStagingSummaryHistory WHERE pointCount > 0 AND startTime > ? and startTime < ? ORDER BY startTime DESC");
  }
  if (qword_102419220 != -1) {
    dispatch_once(&qword_102419220, &stru_1022F4B68);
  }
  unint64_t v4 = qword_102419228;
  if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "VO2MaxStagingSummaryHistory, DB not accessible", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_1022F4B68);
    }
    char v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLVO2MaxStagingSummaryRecorderDb::queryInTimeRange(const CFAbsoluteTime, const CFAbsoluteTime, std::vector<VO2MaxStagingSummary> &) const", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return 109;
}

void sub_100D59870(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100D598B4(uint64_t a1)
{
  uint64_t result = sub_10014C3C0(*(void *)(a1 + 80));
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 80);
    return sub_1005F7B0C(v3, "VO2MaxStagingSummaryHistory", (const char **)&off_1022F4B88, (const std::string::value_type **)&off_1024743E8, 0);
  }
  return result;
}

uint64_t sub_100D5991C(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM VO2MaxStagingSummaryHistory");
  }
  return result;
}

void sub_100D599CC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D599E4(uint64_t a1)
{
  return sub_100D5991C(a1 - 72);
}

uint64_t sub_100D599EC(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"INSERT INTO VO2MaxStagingSummaryHistory (startTime, workoutType, sessionId, durationInSeconds, pointCount, hrMax, hrMin, meanHr, meanVo2, meanSpeed, meanGrade, meanHrConfidence, meanHrCadenceAgreement, meanCadence, vo2MaxModelSource, sessionType) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
  }
  return result;
}

void sub_100D59C4C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D59C6C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_100D59C78(a2, a3);
}

uint64_t sub_100D59C78(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(void *)a2 = sqlite3_column_int(v4, 0);
  int v5 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v5, 1);
  char v6 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(void *)(a2 + 16) = sqlite3_column_int(v6, 2);
  unint64_t v7 = (sqlite3_stmt *)sub_10014D19C(*a1);
  unint64_t v8 = sqlite3_column_text(v7, 3);
  uuid_parse((const char *)v8, (unsigned __int8 *)(a2 + 24));
  long long v9 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 40) = sqlite3_column_double(v9, 4);
  uint64_t v10 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(void *)(a2 + 48) = sqlite3_column_int(v10, 5);
  uint64_t v11 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 64) = sqlite3_column_double(v11, 6);
  uint64_t v12 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 56) = sqlite3_column_double(v12, 7);
  uint64_t v13 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 72) = sqlite3_column_double(v13, 8);
  BOOL v14 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 96) = sqlite3_column_double(v14, 9);
  uint64_t v15 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 104) = sqlite3_column_double(v15, 10);
  uint64_t v16 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 112) = sqlite3_column_double(v16, 11);
  uint64_t v17 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 80) = sqlite3_column_double(v17, 12);
  __int16 v18 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 88) = sqlite3_column_double(v18, 13);
  io_object_t v19 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 120) = sqlite3_column_double(v19, 14);
  int64_t v20 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 176) = sqlite3_column_int(v20, 15);
  uint64_t v21 = (sqlite3_stmt *)sub_10014D19C(*a1);
  uint64_t result = sqlite3_column_int(v21, 16);
  *(_DWORD *)(a2 + 180) = result;
  return result;
}

uint64_t sub_100D59E00(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v11);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if (HIBYTE(v12)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101A8BB1C(v2);
    __break(1u);
  }
  long long v9 = v11[1];
  operator delete(v11[0]);
  if (!v9) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v11);
    uint64_t v3 = sub_100132EFC(&v12, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      unint64_t v4 = __p;
    }
    else {
      unint64_t v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    char v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      unint64_t v8 = __p;
    }
    else {
      unint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_100D5A354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a51 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_100D5A3DC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_100D5C56C(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022F4FE0);
  }
  uint64_t v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    char v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      char v6 = (void *)*v6;
    }
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)uint64_t v13 = 0;
    *(_WORD *)&void v13[4] = 2082;
    *(void *)&v13[6] = "";
    __int16 v14 = 2082;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022F4FE0);
    }
    uint64_t v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)uint64_t v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022F4FE0);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<VO2MaxStagingSummary, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = VO2MaxStagingSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_100D5AB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_100D5AB90(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  long long v4 = a3[1];
  long long v5 = a3[3];
  *(_OWORD *)(a2 + 32) = a3[2];
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v4;
  long long v6 = a3[4];
  long long v7 = a3[5];
  long long v8 = a3[7];
  *(_OWORD *)(a2 + 96) = a3[6];
  *(_OWORD *)(a2 + 112) = v8;
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 80) = v7;
  __n128 result = (__n128)a3[8];
  long long v10 = a3[9];
  long long v11 = a3[10];
  *(void *)(a2 + 176) = *((void *)a3 + 22);
  *(_OWORD *)(a2 + 144) = v10;
  *(_OWORD *)(a2 + 160) = v11;
  *(__n128 *)(a2 + 128) = result;
  return result;
}

id *sub_100D5ABCC(uint64_t a1, long long *a2, char a3)
{
  v36[0] = (id)os_transaction_create();
  v36[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 72))(a1, a1 + 224, a2);
    return sub_1000E1098(v36);
  }
  if ((a3 & 1) == 0) {
    sub_10002B640(*(void *)(a1 + 80));
  }
  uint64_t v45 = 0;
  double v46 = 1.79769313e308;
  uint64_t v47 = 0;
  uint64_t v48 = 0x7FEFFFFFFFFFFFFFLL;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  int v57 = 1;
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 104))(a1, &v45);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022F4FE0);
      }
      __int16 v14 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022F4FE0);
        }
        LOWORD(v37) = 0;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<VO2MaxStagingSummary, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxStagingSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      goto LABEL_43;
    }
    double v7 = *((double *)a2 + 1);
    double v8 = v46;
    double v9 = v7 - v46;
    if (v7 - v46 < 0.0) {
      double v9 = -(v7 - v46);
    }
    if (v9 > 604800.0)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022F4FE0);
      }
      long long v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *((void *)a2 + 1);
        *(_DWORD *)uint64_t buf = 134349312;
        double v42 = v46;
        __int16 v43 = 2050;
        uint64_t v44 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022F4FE0);
        }
        uint64_t v30 = *((void *)a2 + 1);
        int v37 = 134349312;
        double v38 = v46;
        __int16 v39 = 2050;
        uint64_t v40 = v30;
        long long v31 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxStagingSummary, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxStagingSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v31);
        if (v31 != (char *)buf) {
          free(v31);
        }
      }
      CLWriteStackshot();
      double v7 = *((double *)a2 + 1);
      double v8 = v46;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022F4FE0);
        }
        uint64_t v12 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          double v13 = *((double *)a2 + 1);
          *(_DWORD *)uint64_t buf = 134217984;
          double v42 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022F4FE0);
          }
          double v32 = *((double *)a2 + 1);
          int v37 = 134217984;
          double v38 = v32;
          unint64_t v33 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxStagingSummary, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxStagingSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v33);
          if (v33 != (char *)buf) {
            free(v33);
          }
        }
        (*(void (**)(uint64_t, long long *))(*(void *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      double v16 = v7 - v8;
      double v17 = *(float *)(a1 + 136);
      if (qword_102418FD0 != -1)
      {
        double v35 = *(float *)(a1 + 136);
        dispatch_once(&qword_102418FD0, &stru_1022F4FE0);
        double v17 = v35;
      }
      double v18 = v16 - v17;
      io_object_t v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 134217984;
        double v42 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022F4FE0);
        }
        int v37 = 134217984;
        double v38 = v18;
        float v34 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxStagingSummary, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxStagingSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v34);
        if (v34 != (char *)buf) {
          free(v34);
        }
      }
      (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v18);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, long long *))(*(void *)a1 + 144))(a1, &v45, a1 + 224, a2);
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  long long v20 = *a2;
  long long v21 = a2[1];
  long long v22 = a2[3];
  *(_OWORD *)(a1 + 256) = a2[2];
  *(_OWORD *)(a1 + 272) = v22;
  *(_OWORD *)(a1 + 224) = v20;
  *(_OWORD *)(a1 + 240) = v21;
  long long v23 = a2[4];
  long long v24 = a2[5];
  long long v25 = a2[7];
  *(_OWORD *)(a1 + 320) = a2[6];
  *(_OWORD *)(a1 + 336) = v25;
  *(_OWORD *)(a1 + 288) = v23;
  *(_OWORD *)(a1 + 304) = v24;
  long long v26 = a2[8];
  long long v27 = a2[9];
  long long v28 = a2[10];
  *(void *)(a1 + 400) = *((void *)a2 + 22);
  *(_OWORD *)(a1 + 368) = v27;
  *(_OWORD *)(a1 + 384) = v28;
  *(_OWORD *)(a1 + 352) = v26;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_100028FB4(*(void *)(a1 + 80));
  }
  return sub_1000E1098(v36);
}

void sub_100D5B43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D5B468(void *a1, uint64_t a2)
{
  long long v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101A8BC8C(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  uint64_t v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    int v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_100D5B7DC(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A8BDFC(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    long long v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      long long v5 = __p;
    }
    else {
      long long v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    double v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      double v9 = __p;
    }
    else {
      double v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_100D5BB08(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A8BF6C(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    long long v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      long long v4 = __p;
    }
    else {
      long long v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

uint64_t sub_100D5BE2C(uint64_t a1)
{
  return sub_100D5A3DC(a1 - 72);
}

void sub_100D5BE34(id a1)
{
  qword_102419228 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

uint64_t sub_100D5BE64(void *a1, void *a2)
{
  long long v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v13);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    if (HIBYTE(v14)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101A8C0DC(v4);
    __break(1u);
  }
  uint64_t v12 = v13[1];
  operator delete(v13[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    a2[1] = *a2;
    sub_10010F274((uint64_t)v13);
    uint64_t v6 = sub_100132EFC(&v14, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v16 & 0x80u) == 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    if ((v16 & 0x80u) == 0) {
      uint64_t v8 = v16;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v16 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v16 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_100D5C37C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (v53) {
    (*(void (**)(uint64_t))(*(void *)v53 + 8))(v53);
  }
  sub_101A129A8((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_100D5C404(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100D5C434(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  long long v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      long long v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 11;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 22;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000D7EB4((uint64_t)a1);
}

uint64_t sub_100D5C4DC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

void sub_100D5C56C(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_100D5C5EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D5C608(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_100D5C97C(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_100D5C9AC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D8CFA0;
      v0[3] = unk_101D8CFB0;
      v0[4] = xmmword_101D8CFC0;
      v0[0] = xmmword_101D8CF80;
      v0[1] = unk_101D8CF90;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_100D5CA8C(_Unwind_Exception *a1)
{
}

uint64_t sub_100D5CAA4()
{
  sub_100134750(qword_102481280, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102481280, (void *)&_mh_execute_header);
}

uint64_t sub_100D5CB04(uint64_t a1, uint64_t a2, double a3)
{
  if ((*(unsigned int (**)(void))(**(void **)(a2 + 48) + 48))(*(void *)(a2 + 48)))
  {
    (*(void (**)(void, unsigned char *, double))(**(void **)(a2 + 48) + 24))(*(void *)(a2 + 48), v7, a3);
    if (v7[208]) {
      sub_10046B90C(*(void *)(a2 + 8), *(double *)(*(void *)(a2 + 8) + 104), *(double *)(*(void *)(a2 + 8) + 112));
    }
  }
  return nullsub_1536(a1 + 8, a2, a3);
}

uint64_t sub_100D5CBF0(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a3 + 8) + 48))(*(void *)(a3 + 8));
  if (result)
  {
    int v7 = *(uint64_t (**)(__n128))(**(void **)(a3 + 40) + 48);
    v6.n128_f64[0] = a1;
    return v7(v6);
  }
  return result;
}

void sub_100D5CC90(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 3;
  *(void *)(a3 + 32) = 3;
  sub_1014EFF94(a1 + 8, a2, (uint64_t)buf);
  float v5 = *(float *)&v19[6];
  *(_DWORD *)(a3 + 4) = *(_DWORD *)&v19[6];
  float v6 = 3.0;
  if (v5 >= 3.0) {
    float v7 = v5;
  }
  else {
    float v7 = 3.0;
  }
  float v8 = 0.0;
  if (sub_1001860C8(a2) && *(double *)(a2 + 600) < *(double *)a2)
  {
    float v9 = *(double *)(a2 + 560);
    float v10 = *(float *)(a2 + 1368);
    float v11 = (*(float *)(a2 + 1380) - v9) / (*(float *)(a2 + 1380) - *(float *)(a2 + 1376));
    float v12 = v10 * sub_101141BD8(v11, *(float *)(a2 + 1372));
    float v8 = v12 * 0.72;
    *(float *)a3 = v12 * 0.72;
    float v6 = 1.6;
    if ((float)(v12 * 0.72) >= 1.6) {
      float v7 = v12 * 0.72;
    }
    else {
      float v7 = 1.6;
    }
  }
  *(float *)(a3 + 28) = v7;
  *(float *)(a3 + 20) = v7;
  if (v7 == v6) {
    int v13 = 3;
  }
  else {
    int v13 = v7 == v8;
  }
  *(_DWORD *)(a3 + 24) = v13;
  *(float *)(a3 + 12) = v5;
  *(_DWORD *)(a3 + 32) = v13;
  *(_DWORD *)(a3 + 36) = 19;
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022F5090);
  }
  uint64_t v14 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 134219008;
    double v17 = v6;
    __int16 v18 = 2048;
    *(double *)io_object_t v19 = v8;
    *(_WORD *)&v19[8] = 2048;
    double v20 = v5;
    __int16 v21 = 2048;
    double v22 = v7;
    __int16 v23 = 1024;
    int v24 = v13;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "TaiChi,baselineMets,%.1f,metsHR,%.1f,metsWR,%.1f,userMets,%.1f,userMetsSource,%d", buf, 0x30u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022F5090);
    }
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLMetsInfo CLCalorieTaiChiModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
}

void sub_100D5CF9C(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100D5CFCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t v3 = 0;
  unsigned int v4 = -1;
  do
  {
    char v5 = *(unsigned char *)(a1 + v3);
    if (a3 + 1 == v3 || a3 == v3 || a3 + 2 == v3 || a3 + 3 == v3) {
      char v5 = 0;
    }
    unsigned int v4 = dword_101D8CFF4[(v5 ^ v4)] ^ (v4 >> 8);
    ++v3;
  }
  while (a2 != v3);
  return ~v4;
}

void sub_100D5D030(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)sub_100D5D3CC(a1, "CLSkiNotifier", a2);
  *uint64_t v2 = off_1022F50C0;
  v2[14] = 0;
  sub_10079388C();
}

void sub_100D5D2EC(_Unwind_Exception *a1)
{
  uint64_t v5 = *(void *)(v1 + 272);
  *(void *)(v1 + 272) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *v3;
  *uint64_t v3 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  sub_100793890(v2);
  uint64_t v7 = *(void *)(v1 + 112);
  *(void *)(v1 + 112) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_100D5DD58(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100D5D3CC(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_1022F5288;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_100D5D45C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D5D478(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F5238);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    float v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSkiNotifier::onMotionStateMediatorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F5238);
    }
    float v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      double v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSkiNotifier::onMotionStateMediatorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100D5ED60(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100D5D634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D5D654(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F5238);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    float v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSkiNotifier::onOdometerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F5238);
    }
    float v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      double v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSkiNotifier::onOdometerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100D5EEB0(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100D5D810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

id sub_100D5D830(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_100D5D8A4;
  void v4[3] = &unk_1022A3020;
  unsigned char v4[4] = v1;
  return [v2 async:v4];
}

uint64_t sub_100D5D8A4(uint64_t a1)
{
  return sub_100D5D8AC(*(void **)(a1 + 32));
}

uint64_t sub_100D5D8AC(void *a1)
{
  if (qword_102419180 != -1) {
    dispatch_once(&qword_102419180, &stru_1022F5258);
  }
  uint64_t v2 = qword_102419188;
  if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Skiing autoresume", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419180 != -1) {
      dispatch_once(&qword_102419180, &stru_1022F5258);
    }
    LOWORD(v5[0]) = 0;
    unsigned int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSkiNotifier::onSkiAlarm()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_100D5DEDC(a1);
  sub_100D5EBD4((uint64_t)a1, 1);
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  *(_OWORD *)uint64_t buf = 0u;
  long long v7 = 0u;
  buf[0] = 1;
  v5[0] = 1;
  (*(void (**)(void *, int *, uint8_t *, uint64_t, uint64_t, void))(*a1 + 152))(a1, v5, buf, 1, 0xFFFFFFFFLL, 0);
  uint64_t result = a1[14];
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

uint64_t sub_100D5DAD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  v28[2] = *(_OWORD *)(a2 + 32);
  v28[3] = v4;
  long long v5 = *(_OWORD *)(a2 + 80);
  uint64_t v28[4] = *(_OWORD *)(a2 + 64);
  v28[5] = v5;
  long long v6 = *(_OWORD *)(a2 + 16);
  v28[0] = *(_OWORD *)a2;
  v28[1] = v6;
  if (qword_102419180 != -1) {
    dispatch_once(&qword_102419180, &stru_1022F5258);
  }
  long long v7 = qword_102419188;
  if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(void *)(a2 + 40);
    uint64_t v9 = *(void *)(a2 + 48);
    uint64_t v10 = *(void *)(a2 + 88);
    uint64_t v11 = *(void *)(a2 + 56);
    uint64_t v12 = *(void *)(a2 + 64);
    uint64_t v13 = *(void *)(a2 + 72);
    *(_DWORD *)uint64_t buf = 134219264;
    uint64_t v17 = v8;
    __int16 v18 = 2048;
    uint64_t v19 = v9;
    __int16 v20 = 2048;
    uint64_t v21 = v11;
    __int16 v22 = 2048;
    uint64_t v23 = v10;
    __int16 v24 = 2048;
    uint64_t v25 = v12;
    __int16 v26 = 2048;
    uint64_t v27 = v13;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Ski Record update: startTime %lf, endTime %lf, runDistance %f, runElevationDescent %f, runAvgSpeed %f, runMaxSpeed %f", buf, 0x3Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419180 != -1) {
      dispatch_once(&qword_102419180, &stru_1022F5258);
    }
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLSkiNotifier::CLSkiNotifier(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  *(_DWORD *)uint64_t buf = 0;
  return (*(uint64_t (**)(uint64_t, uint8_t *, _OWORD *, uint64_t, uint64_t, void))(*(void *)v3 + 152))(v3, buf, v28, 1, 0xFFFFFFFFLL, 0);
}

uint64_t sub_100D5DD58(uint64_t a1)
{
  *(void *)a1 = off_1022F5288;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_100D5DDDC(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100D5DE6C;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_1024812B0 != -1) {
    dispatch_once(&qword_1024812B0, block);
  }
  return qword_10248AC00;
}

void sub_100D5DE6C()
{
}

void sub_100D5DEB8()
{
}

id sub_100D5DEDC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) newTimer];
  *(void *)(a1 + 248) = v2;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_100D5DF74;
  void v4[3] = &unk_1022A3020;
  unsigned char v4[4] = a1;
  [v2 setHandler:v4];
  return [*(id *)(a1 + 248) setNextFireDelay:5.11999989 interval:5.11999989];
}

void *sub_100D5DF74(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(v1 + 112);
  if (result)
  {
    uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(*result + 16))(&v6);
    if ((v6 - 3) >= 3)
    {
      if (v6 == 2 && *(unsigned char *)(v1 + 257)) {
        uint64_t result = (void *)sub_100D5D8AC((void *)v1);
      }
    }
    else
    {
      sub_100D5E26C((id *)v1);
      uint64_t v3 = sub_1000D2E34(0);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)(v3 + 88) + 24))();
    }
    if (v10)
    {
      if (qword_102419180 != -1) {
        dispatch_once(&qword_102419180, &stru_1022F5258);
      }
      long long v4 = qword_102419188;
      if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 134218752;
        *(void *)&uint8_t buf[4] = v7;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = *((void *)&v7 + 1);
        *(_WORD *)&unsigned char buf[22] = 2048;
        *(void *)&unsigned char buf[24] = v8;
        LOWORD(v20) = 2048;
        *(void *)((char *)&v20 + 2) = *((void *)&v8 + 1);
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[live data] sending live update updateTime, %f, distance, %f, averageSpeed, %f, verticalDescent, %f", buf, 0x2Au);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419180 != -1) {
          dispatch_once(&qword_102419180, &stru_1022F5258);
        }
        int v11 = 134218752;
        uint64_t v12 = v7;
        __int16 v13 = 2048;
        uint64_t v14 = *((void *)&v7 + 1);
        __int16 v15 = 2048;
        uint64_t v16 = v8;
        __int16 v17 = 2048;
        uint64_t v18 = *((void *)&v8 + 1);
        long long v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLSkiNotifier::setupTimer()_block_invoke", "%s\n", v5);
        if (v5 != buf) {
          free(v5);
        }
      }
      int v11 = 2;
      if (!v10) {
        sub_10020D700();
      }
      *(_OWORD *)uint64_t buf = v7;
      *(_OWORD *)&uint8_t buf[16] = v8;
      long long v20 = v9;
      return (void *)(*(uint64_t (**)(uint64_t, int *, unsigned char *, void, uint64_t, void))(*(void *)v1 + 152))(v1, &v11, buf, 0, 0xFFFFFFFFLL, 0);
    }
  }
  return result;
}

uint64_t sub_100D5E26C(id *a1)
{
  if (qword_102419180 != -1) {
    dispatch_once(&qword_102419180, &stru_1022F5258);
  }
  id v2 = qword_102419188;
  if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Skiing autopause", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419180 != -1) {
      dispatch_once(&qword_102419180, &stru_1022F5258);
    }
    LOWORD(v5[0]) = 0;
    long long v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSkiNotifier::pauseSkiTracking()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  [a1[31] invalidate];

  a1[31] = 0;
  sub_100D5EBD4((uint64_t)a1, 0);
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  *(_OWORD *)uint64_t buf = 0u;
  long long v7 = 0u;
  v5[0] = 1;
  return (*((uint64_t (**)(id *, int *, uint8_t *, uint64_t, uint64_t, void))*a1 + 19))(a1, v5, buf, 1, 0xFFFFFFFFLL, 0);
}

uint64_t sub_100D5E474(uint64_t a1)
{
  *(void *)a1 = off_1022F50C0;
  uint64_t v2 = *(void *)(a1 + 264);
  *(void *)(a1 + 264) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  [*(id *)(a1 + 248) invalidate];

  *(void *)(a1 + 248) = 0;
  uint64_t v3 = *(void *)(a1 + 272);
  *(void *)(a1 + 272) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 264);
  *(void *)(a1 + 264) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  sub_100793890(a1 + 120);
  uint64_t v5 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  return sub_100D5DD58(a1);
}

void sub_100D5E5A8(uint64_t a1)
{
  sub_100D5E474(a1);

  operator delete();
}

uint64_t sub_100D5E5E0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 264);
  *(void *)(a1 + 264) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *sub_100D5E618@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

uint64_t sub_100D5E694(uint64_t a1, int *a2)
{
  if (qword_102419180 != -1) {
    dispatch_once(&qword_102419180, &stru_1022F5258);
  }
  uint64_t v4 = qword_102419188;
  if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_INFO))
  {
    v12[0] = *a2;
    int v5 = v12[0];
    int v6 = sub_1001072EC(a1, v12, 1);
    *(_DWORD *)uint64_t buf = 67109376;
    int v16 = v5;
    __int16 v17 = 1024;
    int v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Added client for %d, count %d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419180 != -1) {
      dispatch_once(&qword_102419180, &stru_1022F5258);
    }
    int v8 = *a2;
    int v11 = v8;
    int v9 = sub_1001072EC(a1, &v11, 1);
    v12[0] = 67109376;
    v12[1] = v8;
    __int16 v13 = 1024;
    int v14 = v9;
    long long v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLSkiNotifier::registerForNotificationInternal(const CLSkiNotifier_Type::Notification &)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  return 1;
}

uint64_t sub_100D5E89C(uint64_t a1, int *a2)
{
  if (qword_102419180 != -1) {
    dispatch_once(&qword_102419180, &stru_1022F5258);
  }
  uint64_t v4 = qword_102419188;
  if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_INFO))
  {
    v12[0] = *a2;
    int v5 = v12[0];
    int v6 = sub_1001072EC(a1, v12, 1);
    *(_DWORD *)uint64_t buf = 67109376;
    int v16 = v5;
    __int16 v17 = 1024;
    int v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Removed client for %d, count %d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419180 != -1) {
      dispatch_once(&qword_102419180, &stru_1022F5258);
    }
    int v8 = *a2;
    int v11 = v8;
    int v9 = sub_1001072EC(a1, &v11, 1);
    v12[0] = 67109376;
    v12[1] = v8;
    __int16 v13 = 1024;
    int v14 = v9;
    long long v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLSkiNotifier::unregisterForNotificationInternal(const CLSkiNotifier_Type::Notification &)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  return 1;
}

uint64_t sub_100D5EAA4(uint64_t result)
{
  if (!*(void *)(result + 112))
  {
    if (*(unsigned char *)(result + 257)) {
      operator new();
    }
    operator new();
  }
  return result;
}

void sub_100D5EB9C()
{
}

id sub_100D5EBD4(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 272);
  uint64_t v5 = *(void *)(v3 + 8);
  uint64_t v4 = *(void **)(v3 + 16);
  if (a2)
  {
    [v4 register:v5 forNotification:2 registrationInfo:0];
    [*(id *)(*(void *)(a1 + 272) + 16) register:*(void *)(*(void *)(a1 + 272) + 8) forNotification:4 registrationInfo:0];
    [*(id *)(*(void *)(a1 + 272) + 16) register:*(void *)(*(void *)(a1 + 272) + 8) forNotification:3 registrationInfo:0];
    uint64_t v6 = *(void *)(a1 + 272);
    uint64_t v8 = *(void *)(v6 + 8);
    long long v7 = *(void **)(v6 + 16);
    return [v7 register:v8 forNotification:7 registrationInfo:0];
  }
  else
  {
    [v4 unregister:v5 forNotification:2];
    [*(id *)(*(void *)(a1 + 272) + 16) unregister:*(void *)(*(void *)(a1 + 272) + 8) forNotification:4];
    [*(id *)(*(void *)(a1 + 272) + 16) unregister:*(void *)(*(void *)(a1 + 272) + 8) forNotification:3];
    uint64_t v10 = *(void *)(a1 + 272);
    uint64_t v12 = *(void *)(v10 + 8);
    int v11 = *(void **)(v10 + 16);
    return [v11 unregister:v12 forNotification:7];
  }
}

uint64_t sub_100D5ECA0(uint64_t a1)
{
  [*(id *)(a1 + 248) invalidate];

  *(void *)(a1 + 248) = 0;
  sub_100D5EBD4(a1, 0);
  uint64_t v2 = sub_1000D2E34(0);
  (*(void (**)(void))(*(void *)(v2 + 88) + 24))();
  uint64_t result = *(void *)(a1 + 112);
  if (result)
  {
    *(void *)(a1 + 112) = 0;
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v4();
  }
  return result;
}

uint64_t sub_100D5ED58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1007938C0((uint64_t **)(a1 + 120), a2, a3);
}

__n128 sub_100D5ED60(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 2)
  {
    uint64_t v6 = *(void *)(a4 + 16);
    if (v6 == 1)
    {
      uint64_t v17 = *(void *)(a4 + 112);
      if (v17 == 37 || v17 == 23)
      {
        sub_100D5ECA0(a1);
        long long v19 = *(_OWORD *)(a4 + 208);
        v26[12] = *(_OWORD *)(a4 + 192);
        v26[13] = v19;
        uint64_t v27 = *(void *)(a4 + 224);
        long long v20 = *(_OWORD *)(a4 + 144);
        v26[8] = *(_OWORD *)(a4 + 128);
        v26[9] = v20;
        long long v21 = *(_OWORD *)(a4 + 176);
        unsigned char v26[10] = *(_OWORD *)(a4 + 160);
        v26[11] = v21;
        long long v22 = *(_OWORD *)(a4 + 80);
        v26[4] = *(_OWORD *)(a4 + 64);
        v26[5] = v22;
        long long v23 = *(_OWORD *)(a4 + 112);
        void v26[6] = *(_OWORD *)(a4 + 96);
        void v26[7] = v23;
        long long v24 = *(_OWORD *)(a4 + 16);
        v26[0] = *(_OWORD *)a4;
        v26[1] = v24;
        long long v25 = *(_OWORD *)(a4 + 48);
        void v26[2] = *(_OWORD *)(a4 + 32);
        v26[3] = v25;
        sub_1007939D4(a1 + 120, (uint64_t)v26);
      }
    }
    else if (!v6)
    {
      uint64_t v7 = *(void *)(a4 + 112);
      if (v7 == 37 || v7 == 23)
      {
        long long v9 = *(_OWORD *)(a4 + 208);
        v28[12] = *(_OWORD *)(a4 + 192);
        v28[13] = v9;
        uint64_t v29 = *(void *)(a4 + 224);
        long long v10 = *(_OWORD *)(a4 + 144);
        v28[8] = *(_OWORD *)(a4 + 128);
        v28[9] = v10;
        long long v11 = *(_OWORD *)(a4 + 176);
        unsigned char v28[10] = *(_OWORD *)(a4 + 160);
        v28[11] = v11;
        long long v12 = *(_OWORD *)(a4 + 80);
        uint64_t v28[4] = *(_OWORD *)(a4 + 64);
        v28[5] = v12;
        long long v13 = *(_OWORD *)(a4 + 112);
        _OWORD v28[6] = *(_OWORD *)(a4 + 96);
        v28[7] = v13;
        long long v14 = *(_OWORD *)(a4 + 16);
        v28[0] = *(_OWORD *)a4;
        v28[1] = v14;
        long long v15 = *(_OWORD *)(a4 + 48);
        v28[2] = *(_OWORD *)(a4 + 32);
        v28[3] = v15;
        sub_1007939D4(a1 + 120, (uint64_t)v28);
        sub_100D5EAA4(a1);
      }
    }
  }
  return result;
}

uint64_t sub_100D5EEB0(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t result = *(void *)(a1 + 112);
  if (result)
  {
    switch(*a3)
    {
      case 2:
      case 4:
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, a4);
        break;
      case 3:
      case 7:
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 32))(result, a4);
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_100D5EF54()
{
}

void sub_100D5F010(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_100D5F04C(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_1022F53D8;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    long long v12 = a3;
  }
  else {
    long long v12 = (uint64_t *)*a3;
  }
  id v13 = [objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:[a4 silo]];
  return a1;
}

void sub_100D5F130(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        long long v9 = (uint64_t *)v4;
      }
      else {
        long long v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)uint64_t buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022F5238);
      }
      long long v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        long long v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          long long v11 = (void *)*v11;
        }
        *(_DWORD *)uint64_t buf = 136446466;
        long long v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022F5238);
        }
        long long v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          long long v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        long long v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData>::removeClient(int) [Notification_T = CLSkiNotifier_Type::Notification, NotificationData_T = CLSkiNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_100D5F3C0(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_100D5F474(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_100D5F4BC(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_100D5F504(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_100D5F54C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_1024743F8);
}

uint64_t sub_100D5F578(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)double v42 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          long long v24 = (uint64_t *)v18;
        }
        else {
          long long v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          uint64_t v29 = (uint64_t *)v25;
        }
        else {
          uint64_t v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v40 = v26;
        uint64_t v35 = *(void *)(v26 + 56);
        char v36 = *a4;
        *(void *)&buf[0] = &v41;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v36;
        memset(buf, 0, 96);
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _OWORD *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_100D61A4C();
        }
        if (v35) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v40 = a1 + 64;
        char v30 = byte_1024743F9;
        int v39 = v17;
        *(void *)&buf[0] = &v39;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v30;
        int v39 = *a3;
        *(void *)&buf[0] = &v39;
        long long v31 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        double v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        char v33 = *a4;
        int v39 = *a3;
        *(void *)&buf[0] = &v39;
        float v34 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)&buf[0] = &v41;
        *((unsigned char *)sub_1000EB1B8(v34 + 5, &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v33;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        LODWORD(buf[0]) = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F5238);
  }
  id v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    long long v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v15 = (void *)*v15;
    }
    LODWORD(buf[0]) = 136446466;
    *(void *)((char *)buf + 4) = v15;
    WORD6(buf[0]) = 1026;
    *(_DWORD *)((char *)buf + 14) = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      (uint8_t *)buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F5238);
    }
    int v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v37 = (void *)*v37;
    }
    *(_DWORD *)double v42 = 136446466;
    *(void *)&v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = a2;
    double v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLSkiNotifier_Type::Notification, NotificationData_T = CLSkiNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v38);
    if (v38 != (char *)buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

BOOL sub_100D5FA30(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F5238);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)uint64_t buf = 136446466;
      long long v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022F5238);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLSkiNotifier_Type::Notification, NotificationData_T = CLSkiNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_100D5FCB4(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022F5238);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)uint64_t buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                uint64_t v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022F5238);
                }
                uint64_t v29 = a1 + 8;
                if (a1[31] < 0) {
                  uint64_t v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  char v30 = buf;
                }
                else {
                  char v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                double v38 = v29;
                __int16 v39 = 2082;
                uint64_t v40 = v30;
                long long v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLSkiNotifier_Type::Notification, NotificationData_T = CLSkiNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_100D60088(uint64_t a1, int *a2, _OWORD *a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      BOOL v10 = (uint64_t *)v4;
    }
    else {
      BOOL v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v7 == v3) {
    return 0;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0;
  }
  int v11 = *(_OWORD **)(v7 + 64);
  if (!v11) {
    return 0;
  }
  long long v12 = v11[1];
  *a3 = *v11;
  a3[1] = v12;
  long long v13 = v11[2];
  long long v14 = v11[3];
  long long v15 = v11[5];
  a3[4] = v11[4];
  a3[5] = v15;
  a3[2] = v13;
  a3[3] = v14;
  return 1;
}

uint64_t sub_100D600F8(uint64_t a1, int *a2, _OWORD *a3)
{
  int v6 = (char *)operator new(0x78uLL);
  long long v7 = a3[3];
  *(_OWORD *)(v6 + 56) = a3[2];
  *(_OWORD *)(v6 + 72) = v7;
  long long v8 = a3[5];
  *(_OWORD *)(v6 + 88) = a3[4];
  *(_OWORD *)(v6 + 104) = v8;
  long long v9 = a3[1];
  *(_OWORD *)(v6 + 24) = *a3;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = off_1022F5368;
  *(_OWORD *)(v6 + 40) = v9;
  int v13 = *a2;
  long long v14 = &v13;
  BOOL v10 = sub_10044715C((uint64_t **)(a1 + 56), &v13, (uint64_t)&unk_101D0B290, &v14);
  int v11 = (std::__shared_weak_count *)v10[9];
  v10[8] = (uint64_t *)(v6 + 24);
  void v10[9] = (uint64_t *)v6;
  if (v11) {
    sub_1000DB0A0(v11);
  }
  return 1;
}

void sub_100D601C8(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100D601DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  memset(v5, 0, sizeof(v5));
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_100D60268(uint64_t a1, unsigned int *a2, _OWORD *a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  long long v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F5238);
  }
  long long v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    BOOL v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      BOOL v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)uint64_t buf = 68289794;
    int v25 = 0;
    __int16 v26 = 2082;
    *(void *)int v27 = "";
    *(_WORD *)&v27[8] = 2082;
    *(void *)&unsigned char v27[10] = "activity";
    __int16 v28 = 2082;
    uint64_t v29 = v10;
    __int16 v30 = 2050;
    long long v31 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  long long v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      long long v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    int v32 = v33;
    memset(v33, 0, sizeof(v33));
    __int16 v34 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v32);
    long long v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v31) {
      sub_1000DB0A0(v31);
    }
    sub_1000F5BB0((uint64_t)&v26, *(void **)&v27[6]);
    if (v34) {
      sub_1000DB0A0(v34);
    }
    sub_1000F5BB0((uint64_t)&v32, v33[0]);
  }
  if (a4)
  {
    BOOL v18 = (char *)operator new(0x78uLL);
    long long v19 = a3[1];
    *(_OWORD *)(v18 + 24) = *a3;
    *(_OWORD *)(v18 + 40) = v19;
    long long v20 = a3[4];
    *(_OWORD *)(v18 + 104) = a3[5];
    *(_OWORD *)(v18 + 88) = v20;
    long long v21 = a3[2];
    *(_OWORD *)(v18 + 72) = a3[3];
    *((void *)v18 + 1) = 0;
    *((void *)v18 + 2) = 0;
    *(void *)BOOL v18 = off_1022F5368;
    *(_OWORD *)(v18 + 56) = v21;
    int v22 = (std::__shared_weak_count *)v14[9];
    v14[8] = (uint64_t *)(v18 + 24);
    v14[9] = (uint64_t *)v18;
    if (!v22) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  int v22 = (std::__shared_weak_count *)v14[9];
  v14[8] = 0;
  v14[9] = 0;
  if (v22) {
LABEL_27:
  }
    sub_1000DB0A0(v22);
LABEL_28:
  if (v14[7]) {
    sub_100D60F4C();
  }
  os_activity_scope_leave(&state);
}

void sub_100D60868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_100D608B4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F5238);
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      int v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022F5238);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData>::listClients() [Notification_T = CLSkiNotifier_Type::Notification, NotificationData_T = CLSkiNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F5238);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)uint64_t buf = 136315394;
      int v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022F5238);
      }
      long long v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData>::listClients() [Notification_T = CLSkiNotifier_Type::Notification, NotificationData_T = CLSkiNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    long long v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        long long v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_1022F5238);
            }
            BOOL v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)uint64_t buf = 136315650;
              int v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022F5238);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData>::listClients() [Notification_T = CLSkiNotifier_Type::Notification, NotificationData_T = CLSkiNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            long long v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                long long v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                long long v9 = v15;
              }
              while (!v16);
            }
            long long v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        BOOL v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            long long v19 = v18;
            BOOL v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            long long v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            long long v8 = v19;
          }
          while (!v16);
        }
        long long v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_100D60E64(uint64_t a1)
{
  sub_100D619DC(a1);

  operator delete();
}

id sub_100D60E9C(uint64_t a1, int a2, void *a3)
{
  id result = sub_100D6158C(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_100D60EEC(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100D60F1C(id a1)
{
  qword_102419188 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Skiing");
}

void sub_100D60F4C()
{
}

void sub_100D61008(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      long long v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          int v12 = (uint64_t *)v4;
        }
        else {
          int v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          long long v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        long long v49 = v9;
        id v13 = sub_100D6158C(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        long long v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            long long v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                long long v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              uint64_t v48 = v19;
              sub_100D613F8(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              uint64_t v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  uint64_t v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              long long v49 = v29;
              uint64_t v34 = v29[6];
              long long v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                uint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    uint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      long long v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      long long v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      long long v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      uint64_t v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              uint64_t v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022F5238);
              }
              BOOL v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                int v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  int v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)uint64_t buf = 136446466;
                long long v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022F5238);
                }
                uint64_t v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  uint64_t v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                long long v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                uint64_t v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLSkiNotifier_Type::Notification, CLSkiNotifier_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLSkiNotifier_Type::Notification, NotificationData_T = CLSkiNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_100D613F8(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_100D6158C(a4);
    uint64_t v10 = *(void *)a3 + 80;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40);
    long long v14 = (int *)(*(void *)a2 + 32);
    int v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    id result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4, v13];
    }
  }
  return result;
}

void sub_100D614F0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022F5368;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100D61510(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022F5368;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100D6156C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

id sub_100D6158C(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return sub_100D615EC(a1);
}

id sub_100D615EC(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022F53A8);
      }
      uint64_t v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D8D528 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLSkiNotifier_Type::NotificationData, Callbacunint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022F53A8);
      }
      uint64_t v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D8D528 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1022F53A8);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

void sub_100D619AC(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_100D619DC(uint64_t a1)
{
  *(void *)a1 = off_1022F53D8;
  id v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  *id v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_100D61A4C()
{
}

uint64_t sub_100D61B08(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

uint64_t sub_100D61B28()
{
  sub_100134750(qword_102481298, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102481298, (void *)&_mh_execute_header);
}

void *sub_100D61B88(void *a1, int a2)
{
  sub_100134750(__p, "");
  sub_100D61C68((uint64_t)a1, "VO2MaxStagingLostEstimateHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_1022F5400;
  a1[9] = off_1022F54B8;
  sub_100D62A00((uint64_t)a1);
  return a1;
}

void sub_100D61C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_100D62118(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_100D61C68(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  unint64_t v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 8));
  *unint64_t v12 = off_1022ADB08;
  *(void *)a1 = off_1022F5638;
  *(void *)(a1 + 72) = off_1022F56E0;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_1022F5638;
  *(void *)(a1 + 72) = off_1022F56E0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_DWORD *)(a1 + 256) = 12000;
  *(void *)(a1 + 264) = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 272));
  *(void *)(a1 + 272) = off_1022ADB08;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_100D6207C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  *uint64_t v27 = v30;
  sub_1003BE1F8(v31);
  sub_1002CDF4C(v29);
  sub_1011F8AE0(v28);
  *int v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_100D62110()
{
}

void *sub_100D62118(void *a1)
{
  *a1 = off_1022F5638;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_1022F56E0;
  a1[33] = off_1022ADAD8;
  sub_1003BE1F8(a1 + 34);
  sub_1002CDF4C(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022ADAD8;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void *sub_100D621DC(uint64_t a1)
{
  return sub_100D62118((void *)(a1 - 72));
}

void sub_100D621E4(void *a1)
{
  sub_100D62118(a1);

  operator delete();
}

void sub_100D6221C(uint64_t a1)
{
  sub_100D62118((void *)(a1 - 72));

  operator delete();
}

uint64_t sub_100D62258(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_100D62264(a2, a3);
}

uint64_t sub_100D62264(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(void *)a2 = sqlite3_column_int(v4, 0);
  uint64_t v5 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v5, 1);
  char v6 = (sqlite3_stmt *)sub_10014D19C(*a1);
  uint64_t v7 = sqlite3_column_text(v6, 2);

  return uuid_parse((const char *)v7, (unsigned __int8 *)(a2 + 16));
}

uint64_t sub_100D622D8(uint64_t a1, uint64_t a2)
{
  if (*(double *)(*(void *)(a2 + 8) - 16) == 1.79769313e308 && sub_100082064(a1 + 72))
  {
    sub_10002B640(*(void *)(a1 + 80));
    CFAbsoluteTimeGetCurrent();
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM VO2MaxStagingLostEstimateHistory WHERE startTime < ?");
  }
  return -1;
}

void sub_100D62424(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D6243C(uint64_t a1, uint64_t a2)
{
  return sub_100D622D8(a1 - 72, a2);
}

uint64_t sub_100D62444(uint64_t a1, void *a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    a2[1] = *a2;
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * from VO2MaxStagingLostEstimateHistory ORDER BY startTime ASC");
  }
  return result;
}

void sub_100D62624(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D6266C(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT COUNT(*) FROM VO2MaxStagingLostEstimateHistory");
  }
  return 0xFFFFFFFFLL;
}

void sub_100D62728(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D62764(uint64_t a1)
{
  return sub_100D6266C(a1 - 72);
}

uint64_t sub_100D6276C(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    memset(out, 0, 37);
    uuid_unparse(a2, out);
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM VO2MaxStagingLostEstimateHistory WHERE sessionId = ?");
  }
  return result;
}

void sub_100D629BC(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D62A00(uint64_t a1)
{
  uint64_t result = sub_10014C3C0(*(void *)(a1 + 80));
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 80);
    return sub_1005F7B0C(v3, "VO2MaxStagingLostEstimateHistory", (const char **)&off_1022F5568, (const std::string::value_type **)&off_102474400, 0);
  }
  return result;
}

uint64_t sub_100D62A68(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM VO2MaxStagingLostEstimateHistory");
  }
  return result;
}

void sub_100D62B18(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D62B30(uint64_t a1)
{
  return sub_100D62A68(a1 - 72);
}

uint64_t sub_100D62B38(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"INSERT INTO VO2MaxStagingLostEstimateHistory (startTime, sessionId) VALUES (?, ?)");
  }
  return result;
}

void sub_100D62C48(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D62C68(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v11);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if (HIBYTE(v12)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101A8C24C(v2);
    __break(1u);
  }
  __int16 v9 = v11[1];
  operator delete(v11[0]);
  if (!v9) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v11);
    uint64_t v3 = sub_100132EFC(&v12, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(v13, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v4 = v13;
    }
    else {
      uint64_t v4 = (void **)v13[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)v13[1];
    }
    char v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
    if ((char)v14 < 0) {
      operator delete(v13[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      id v8 = v13;
    }
    else {
      id v8 = (void **)v13[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_100D630A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (*(char *)(v3 - 113) < 0) {
    operator delete(*(void **)(v3 - 136));
  }
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D63128(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_100D65014(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022F5720);
  }
  uint64_t v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    char v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      char v6 = (void *)*v6;
    }
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)uint64_t v13 = 0;
    *(_WORD *)&void v13[4] = 2082;
    *(void *)&v13[6] = "";
    __int16 v14 = 2082;
    int v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022F5720);
    }
    uint64_t v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)uint64_t v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022F5720);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<VO2MaxStagingLostEstimate, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = VO2MaxStagingLostEstimate, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_100D6387C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_100D638B0(uint64_t a1, uint64_t a2, char a3)
{
  v28[0] = (id)os_transaction_create();
  v28[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, a1 + 224, a2);
    return sub_1000E1098(v28);
  }
  if ((a3 & 1) == 0) {
    sub_10002B640(*(void *)(a1 + 80));
  }
  uint64_t v37 = 0;
  double v38 = 0.0;
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 104))(a1, &v37);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022F5720);
      }
      __int16 v14 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022F5720);
        }
        LOWORD(v29) = 0;
        int v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<VO2MaxStagingLostEstimate, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxStagingLostEstimate, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      goto LABEL_43;
    }
    double v7 = *(double *)(a2 + 8);
    double v8 = v38;
    double v9 = v7 - v38;
    if (v7 - v38 < 0.0) {
      double v9 = -(v7 - v38);
    }
    if (v9 > 604800.0)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022F5720);
      }
      uint64_t v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a2 + 8);
        *(_DWORD *)uint64_t buf = 134349312;
        double v34 = v38;
        __int16 v35 = 2050;
        uint64_t v36 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022F5720);
        }
        uint64_t v22 = *(void *)(a2 + 8);
        int v29 = 134349312;
        double v30 = v38;
        __int16 v31 = 2050;
        uint64_t v32 = v22;
        int v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxStagingLostEstimate, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxStagingLostEstimate, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
      }
      CLWriteStackshot();
      double v7 = *(double *)(a2 + 8);
      double v8 = v38;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022F5720);
        }
        uint64_t v12 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          double v13 = *(double *)(a2 + 8);
          *(_DWORD *)uint64_t buf = 134217984;
          double v34 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022F5720);
          }
          double v24 = *(double *)(a2 + 8);
          int v29 = 134217984;
          double v30 = v24;
          int v25 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxStagingLostEstimate, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxStagingLostEstimate, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v25);
          if (v25 != (char *)buf) {
            free(v25);
          }
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      double v16 = v7 - v8;
      double v17 = *(float *)(a1 + 136);
      if (qword_102418FD0 != -1)
      {
        double v27 = *(float *)(a1 + 136);
        dispatch_once(&qword_102418FD0, &stru_1022F5720);
        double v17 = v27;
      }
      double v18 = v16 - v17;
      long long v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 134217984;
        double v34 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022F5720);
        }
        int v29 = 134217984;
        double v30 = v18;
        int v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxStagingLostEstimate, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxStagingLostEstimate, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v26);
        if (v26 != (char *)buf) {
          free(v26);
        }
      }
      (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v18);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 144))(a1, &v37, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  long long v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v20;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_100028FB4(*(void *)(a1 + 80));
  }
  return sub_1000E1098(v28);
}

void sub_100D640B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D640E0(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101A8C3BC(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  uint64_t v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    int v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_100D64454(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A8C52C(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    uint64_t v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    double v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      double v9 = __p;
    }
    else {
      double v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_100D64780(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A8C69C(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    uint64_t v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

uint64_t sub_100D64AA4(uint64_t a1)
{
  return sub_100D63128(a1 - 72);
}

void sub_100D64AAC(id a1)
{
  qword_102419228 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

uint64_t sub_100D64ADC(void *a1, void *a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v13);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    if (HIBYTE(v14)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101A8C80C(v4);
    __break(1u);
  }
  uint64_t v12 = v13[1];
  operator delete(v13[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    a2[1] = *a2;
    sub_10010F274((uint64_t)v13);
    uint64_t v6 = sub_100132EFC(&v14, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(v15, a1);
    if ((v16 & 0x80u) == 0) {
      uint64_t v7 = v15;
    }
    else {
      uint64_t v7 = (void **)v15[0];
    }
    if ((v16 & 0x80u) == 0) {
      uint64_t v8 = v16;
    }
    else {
      uint64_t v8 = (uint64_t)v15[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v16 < 0) {
      operator delete(v15[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v16 & 0x80u) == 0) {
      uint64_t v11 = v15;
    }
    else {
      uint64_t v11 = (void **)v15[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_100D64ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100D64F54(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100D64F84(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

void sub_100D65014(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_100D65094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D650B0(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_100D67020(_Unwind_Exception *a1)
{
  STACK[0xE30] = v1;
  uint64_t v3 = (void *)STACK[0xE38];
  if (STACK[0xE38])
  {
    STACK[0xE40] = (unint64_t)v3;
    operator delete(v3);
  }
  sub_1016F745C(&STACK[0xE50]);
  _Unwind_Resume(a1);
}

void *sub_100D6705C(void *a1)
{
  *a1 = off_1022F5790;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_100D6723C(id a1)
{
  qword_1024190F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

void sub_100D6726C(void *a1)
{
  *a1 = off_1022F5790;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  operator delete();
}

uint64_t sub_100D672DC(uint64_t result)
{
  *(void *)(result + 16) = *(void *)(result + 8);
  return result;
}

char *sub_100D672E8(uint64_t a1, char *__src, int64_t a3)
{
  return sub_100C60C58(a1 + 8, *(char **)(a1 + 16), __src, &__src[a3], a3);
}

uint64_t sub_100D67304()
{
  sub_100134750(qword_1024812B8, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024812B8, (void *)&_mh_execute_header);
}

double sub_100D67364(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022F57E0);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = (uint64_t)*(double *)(a1 + 96);
    uint64_t v5 = *(void *)(a1 + 104);
    uint64_t v6 = *(void *)(a1 + 112);
    uint64_t v7 = *(void *)(a1 + 120);
    uint64_t v8 = *(void *)(a1 + 128);
    uint64_t v10 = *(void *)(a1 + 136);
    uint64_t v9 = *(void *)(a1 + 144);
    int v11 = *(_DWORD *)(a1 + 200);
    int v12 = *(_DWORD *)(a1 + 820);
    int v13 = *(_DWORD *)(a1 + 824);
    int v14 = *(_DWORD *)(a1 + 828);
    int v15 = *(_DWORD *)(a1 + 832);
    double v16 = *(float *)(a1 + 836);
    double v17 = *(float *)(a1 + 840);
    int v18 = *(_DWORD *)(a1 + 844);
    int v19 = *(unsigned __int8 *)(a1 + 1088);
    v20[0] = 68293123;
    __int16 v21 = 2082;
    v20[1] = 0;
    uint64_t v22 = "";
    __int16 v23 = 2049;
    uint64_t v24 = v4;
    __int16 v25 = 2049;
    uint64_t v26 = v5;
    __int16 v27 = 2049;
    uint64_t v28 = v9;
    __int16 v29 = 2049;
    uint64_t v30 = v6;
    __int16 v31 = 2049;
    uint64_t v32 = v7;
    __int16 v33 = 2049;
    uint64_t v34 = v8;
    __int16 v35 = 2049;
    uint64_t v36 = v10;
    __int16 v37 = 1025;
    int v38 = v11;
    __int16 v39 = 1025;
    int v40 = v12;
    __int16 v41 = 1025;
    int v42 = v13;
    __int16 v43 = 1025;
    int v44 = v14;
    __int16 v45 = 1025;
    int v46 = v15;
    __int16 v47 = 2049;
    double v48 = v16;
    __int16 v49 = 2049;
    double v50 = v17;
    __int16 v51 = 1025;
    int v52 = v18;
    __int16 v53 = 1025;
    int v54 = v19;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gnssawd GnssSessionData log\", \"sessionDuration\":%{private}lld, \"fEpochCount\":%{private}lld, \"yieldCount\":%{private}lld, \"lat\":\"%{private}.08f\", \"lon\":\"%{private}.08f\", \"alt\":\"%{private}f\", \"accuracy\":\"%{private}f\", \"ttff\":%{private}d, \"mcc\":%{private}d, \"mnc\":%{private}d, \"sid\":%{private}d, \"nid\":%{private}d, \"transFreq\":\"%{private}f\", \"transBW\":\"%{private}f\", \"transBand\":%{private}d, \"isEmergency\":%{private}d}", (uint8_t *)v20, 0x96u);
  }
  return result;
}

uint64_t sub_100D6750C(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022F57E0);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    v9[0] = 68289026;
    v9[1] = 0;
    __int16 v10 = 2082;
    int v11 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gnssawd,GnssSessionData::reset\"}", (uint8_t *)v9, 0x12u);
  }
  bzero(v9, 0x4C0uLL);
  int v12 = v13;
  __asm { FMOV            V1.2D, #-1.0 }
  long long v16 = 0u;
  v13[1] = _Q1;
  memset(&v13[2], 0, 48);
  uint64_t v14 = 0;
  int v15 = &v16;
  long long v18 = 0u;
  double v17 = &v18;
  int v19 = -1;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v22 = 0x3F80000000000000;
  __int16 v23 = v24;
  memset(v24, 0, sizeof(v24));
  int v25 = 1065353216;
  long long v27 = 0u;
  uint64_t v26 = &v27;
  int v28 = 0;
  long long v30 = 0u;
  long long v32 = 0u;
  memset(v34, 0, sizeof(v34));
  __int16 v29 = &v30;
  __int16 v31 = &v32;
  __int16 v33 = v34;
  int v35 = 1065353216;
  uint64_t v36 = v37;
  memset(v37, 0, 165);
  memset((char *)&v37[10] + 8, 0, 168);
  int v38 = 11;
  uint64_t v39 = -1;
  uint64_t v40 = -1;
  unint64_t v41 = 0xBF800000BF800000;
  char v42 = 0;
  memset(v52, 0, sizeof(v52));
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  int v50 = 0;
  __int16 v51 = v52;
  int v53 = 1065353216;
  uint64_t v54 = 0;
  int v55 = 1;
  int v56 = 0;
  uint64_t v57 = 0;
  int v59 = 0;
  int v60 = 0;
  memset(v58, 0, sizeof(v58));
  int v61 = -1;
  unint64_t v62 = 0xBFF0000000000000;
  int v63 = -1;
  uint64_t v67 = 0;
  long long v66 = 0u;
  long long v65 = 0u;
  long long v64 = 0u;
  char v68 = 1;
  sub_100D677A4(a1, (long long *)v9);
  return sub_100D69AC4((uint64_t)v9);
}

uint64_t sub_100D677A4(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  long long v6 = a2[2];
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v4;
  sub_100D697EC(a1 + 56, (void *)a2 + 7);
  *(_OWORD *)(a1 + 80) = a2[5];
  long long v7 = a2[6];
  long long v8 = a2[7];
  long long v9 = a2[8];
  *(void *)(a1 + 144) = *((void *)a2 + 18);
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 96) = v7;
  sub_100D697EC(a1 + 152, (void *)a2 + 19);
  sub_100D697EC(a1 + 176, (void *)a2 + 22);
  *(void *)(a1 + 200) = *((void *)a2 + 25);
  sub_1000E2E9C(a1 + 208, (uint64_t *)a2 + 26);
  sub_100D697EC(a1 + 248, (void *)a2 + 31);
  sub_1000E2E9C(a1 + 272, (uint64_t *)a2 + 34);
  sub_100D697EC(a1 + 312, (void *)a2 + 39);
  uint64_t v10 = *((void *)a2 + 42);
  *(_DWORD *)(a1 + 344) = *((_DWORD *)a2 + 86);
  *(void *)(a1 + 336) = v10;
  sub_100D697EC(a1 + 352, (void *)a2 + 44);
  sub_100D697EC(a1 + 376, (void *)a2 + 47);
  sub_100D697EC(a1 + 400, (void *)a2 + 50);
  sub_10084E2F4(a1 + 424, (uint64_t *)a2 + 53);
  *(_DWORD *)(a1 + 464) = *((_DWORD *)a2 + 116);
  sub_100D697EC(a1 + 472, (void *)a2 + 59);
  memcpy((void *)(a1 + 496), a2 + 31, 0x162uLL);
  sub_100D69858(a1 + 856, (uint64_t)a2 + 856);
  sub_100D69858(a1 + 904, (uint64_t)a2 + 904);
  long long v11 = *(long long *)((char *)a2 + 952);
  *(_DWORD *)(a1 + 968) = *((_DWORD *)a2 + 242);
  *(_OWORD *)(a1 + 952) = v11;
  sub_100D697EC(a1 + 976, (void *)a2 + 122);
  sub_1000E2E9C(a1 + 1000, (uint64_t *)a2 + 125);
  *(_DWORD *)(a1 + 1040) = *((_DWORD *)a2 + 260);
  *(void *)(a1 + 1048) = *((void *)a2 + 131);
  *(unsigned char *)(a1 + 1056) = *((unsigned char *)a2 + 1056);
  *(_DWORD *)(a1 + 1060) = *((_DWORD *)a2 + 265);
  long long v12 = *(long long *)((char *)a2 + 1080);
  *(_OWORD *)(a1 + 1064) = *(long long *)((char *)a2 + 1064);
  *(_OWORD *)(a1 + 1080) = v12;
  long long v13 = *(long long *)((char *)a2 + 1096);
  long long v14 = *(long long *)((char *)a2 + 1112);
  long long v15 = *(long long *)((char *)a2 + 1144);
  *(_OWORD *)(a1 + 1128) = *(long long *)((char *)a2 + 1128);
  *(_OWORD *)(a1 + 1144) = v15;
  *(_OWORD *)(a1 + 1096) = v13;
  *(_OWORD *)(a1 + 1112) = v14;
  long long v16 = *(long long *)((char *)a2 + 1160);
  long long v17 = *(long long *)((char *)a2 + 1176);
  long long v18 = *(long long *)((char *)a2 + 1192);
  *(unsigned char *)(a1 + 1208) = *((unsigned char *)a2 + 1208);
  *(_OWORD *)(a1 + 1176) = v17;
  *(_OWORD *)(a1 + 1192) = v18;
  *(_OWORD *)(a1 + 1160) = v16;
  return a1;
}

uint64_t sub_100D67960(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned char **)(a2 + 152);
  uint64_t v3 = *(unsigned char **)(a2 + 160);
  if (v2 != v3)
  {
    unsigned int v4 = ((*(double *)(a2 + 16) - *(double *)(result + 80)) * 1000.0);
    do
    {
      switch(v2[8])
      {
        case 1:
          if (*(_DWORD *)result) {
            BOOL v7 = 1;
          }
          else {
            BOOL v7 = v2[9] == 0;
          }
          if (!v7) {
            *(_DWORD *)double result = v4;
          }
          if (*(_DWORD *)(result + 16)) {
            BOOL v8 = 1;
          }
          else {
            BOOL v8 = v2[12] == 0;
          }
          if (!v8) {
            *(_DWORD *)(result + 16) = v4;
          }
          break;
        case 4:
          if (*(_DWORD *)(result + 4)) {
            BOOL v9 = 1;
          }
          else {
            BOOL v9 = v2[9] == 0;
          }
          if (!v9) {
            *(_DWORD *)(result + 4) = v4;
          }
          if (*(_DWORD *)(result + 20)) {
            BOOL v10 = 1;
          }
          else {
            BOOL v10 = v2[13] == 0;
          }
          if (!v10) {
            *(_DWORD *)(result + 20) = v4;
          }
          break;
        case 5:
        case 6:
          if (*(_DWORD *)(result + 12)) {
            BOOL v5 = 1;
          }
          else {
            BOOL v5 = v2[9] == 0;
          }
          if (!v5) {
            *(_DWORD *)(result + 12) = v4;
          }
          if (*(_DWORD *)(result + 28)) {
            BOOL v6 = 1;
          }
          else {
            BOOL v6 = v2[12] == 0;
          }
          if (!v6) {
            *(_DWORD *)(result + 28) = v4;
          }
          break;
        case 8:
          if (*(_DWORD *)(result + 8)) {
            BOOL v11 = 1;
          }
          else {
            BOOL v11 = v2[9] == 0;
          }
          if (!v11) {
            *(_DWORD *)(result + 8) = v4;
          }
          if (*(_DWORD *)(result + 24)) {
            BOOL v12 = 1;
          }
          else {
            BOOL v12 = v2[12] == 0;
          }
          if (!v12) {
            *(_DWORD *)(result + 24) = v4;
          }
          break;
        default:
          break;
      }
      v2 += 176;
    }
    while (v2 != v3);
  }
  return result;
}

double sub_100D67AB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 1000;
  unsigned int v8 = sub_101890D58((double *)(a2 + 24));
  BOOL v9 = &v8;
  BOOL v5 = sub_100D69C4C(v4, &v8, (uint64_t)&unk_101D0B290, &v9);
  ++v5[3];
  *(_DWORD *)(a1 + 968) = 0;
  double result = *(double *)(a2 + 24);
  if (result >= 0.0 && (*(void *)(a2 + 24) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    ++*(_DWORD *)(a1 + 1040);
    double result = result + *(double *)(a1 + 1048);
    *(double *)(a1 + 1048) = result;
  }
  return result;
}

uint64_t sub_100D67B60(uint64_t result, int a2)
{
  if ((a2 - 1) > 5) {
    int v2 = 0;
  }
  else {
    int v2 = dword_101D8D6C0[a2 - 1];
  }
  *(_DWORD *)(result + 204) = v2;
  return result;
}

void sub_100D67B88(int *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022F57E0);
  }
  int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    int v3 = a1[4];
    int v4 = a1[5];
    int v6 = a1[2];
    int v5 = a1[3];
    int v7 = *a1;
    int v8 = a1[1];
    uint64_t v9 = *((void *)a1 + 3);
    uint64_t v10 = *((void *)a1 + 4);
    int v11 = a1[10];
    *(_DWORD *)uint64_t buf = 67111168;
    int v14 = v3;
    __int16 v15 = 1024;
    int v16 = v5;
    __int16 v17 = 1024;
    int v18 = v4;
    __int16 v19 = 1024;
    int v20 = v6;
    __int16 v21 = 1024;
    int v22 = v7;
    __int16 v23 = 1024;
    int v24 = v8;
    __int16 v25 = 2048;
    uint64_t v26 = v9;
    __int16 v27 = 2048;
    uint64_t v28 = v10;
    __int16 v29 = 1024;
    int v30 = v11;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#gnssawd,PersistentDiagnostics,#gpsd,numSessions,%d,numCrash,%d,numLsOff,%d,numAbnormalExit,%d,exitCat,%d,exitPayload,%d,startDelayMs,%lld,maxDelayMs,%lld,maxDelayType,%d", buf, 0x40u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022F57E0);
    }
    BOOL v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void GNSS::PersistentDiagnostics::log() const", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
}

double sub_100D67DEC(void *a1)
{
  double result = NAN;
  *a1 = 0xFFFFFFFF00000001;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = -1;
  a1[4] = -1;
  a1[5] = -1;
  a1[6] = 0xFFFFFFFFLL;
  return result;
}

uint64_t sub_100D67E10(uint64_t *a1, float *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022F57E0);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *((unsigned __int8 *)a1 + 48);
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = *a1;
    double v8 = (double)(*(void *)a2 - *a1) * 0.000001;
    double v9 = a2[2];
    *(_DWORD *)uint64_t buf = 67110144;
    int v14 = v5;
    __int16 v15 = 2050;
    uint64_t v16 = v6;
    __int16 v17 = 2050;
    uint64_t v18 = v7;
    __int16 v19 = 2050;
    double v20 = v8;
    __int16 v21 = 2050;
    double v22 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#tt,posvalid,%d,ttTimeNs,%{public}llu,epochTimeNs,%{public}llu,diffMs,%{public}.2f,ttUncNs,%{public}.2f", buf, 0x30u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022F57E0);
    }
    BOOL v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "GNSS::TimeTransferSource GNSS::gnssTimeSource(const PerEpochData &, const TimeTransferPulseTime &)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  if (!*((unsigned char *)a1 + 48) || *(void *)a2 <= *a1 || *(void *)a2 - *a1 > 2999999999) {
    return 0;
  }
  float v10 = a2[2];
  if (v10 < 2000000.0 && (~*((_DWORD *)a1 + 34) & 3) == 0) {
    return 2;
  }
  return v10 < 10000000.0;
}

void sub_100D680C8(int a1@<W0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = 0;
  if (a1 > 31)
  {
    if (a1 > 127)
    {
      if (a1 != 128)
      {
        BOOL v7 = a1 == 256;
        int v6 = 5;
LABEL_21:
        if (!v7) {
          int v6 = 0;
        }
        goto LABEL_25;
      }
    }
    else if (a1 != 32 && a1 != 64)
    {
      goto LABEL_25;
    }
LABEL_10:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022F57E0);
    }
    double v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      int v15 = a1;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "unexpected SatSystem to convert to client type,%{public}d", buf, 8u);
    }
    BOOL v9 = sub_10013D1A0(115, 0);
    int v6 = 0;
    if (v9)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022F57E0);
      }
      float v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLClientSatelliteInfo GNSS::ConvertGnssSatelliteInfoToCLClientSatelliteInfo(const GNSS::SatSystem::sys, const GNSS::SatelliteInfoIndividual &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
      int v6 = 0;
    }
    goto LABEL_25;
  }
  switch(a1)
  {
    case 0:
      goto LABEL_10;
    case 1:
    case 3:
    case 5:
    case 6:
    case 7:
      break;
    case 2:
      int v6 = 1;
      break;
    case 4:
      int v6 = 2;
      break;
    case 8:
      int v6 = 3;
      break;
    default:
      BOOL v7 = a1 == 16;
      int v6 = 4;
      goto LABEL_21;
  }
LABEL_25:
  *(_DWORD *)(a3 + 24) = 0;
  int v11 = *a2;
  *(_DWORD *)a3 = v6;
  *(_DWORD *)(a3 + 4) = v11;
  int8x16_t v12 = *(int8x16_t *)(a2 + 1);
  *(int8x16_t *)(a3 + 8) = vextq_s8(v12, v12, 8uLL);
  BOOL v13 = *(float *)v12.i32 > 0.0;
  if (*(float *)&v12.i32[1] > 0.0) {
    BOOL v13 = 1;
  }
  *(unsigned char *)(a3 + 24) = v13;
  *(unsigned char *)(a3 + 25) = (a2[6] & 3) != 0;
}

void sub_100D6837C(uint64_t a1@<X0>, void *a2@<X8>)
{
  double v4 = sub_10016C458();
  long long __p = 0;
  int v24 = 0;
  __int16 v25 = 0;
  int v5 = *(uint64_t **)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = 0;
    double v7 = v4 + -60.0;
    do
    {
      for (uint64_t i = (uint64_t *)v5[5]; i; uint64_t i = (uint64_t *)*i)
      {
        BOOL v9 = *((float *)i + 8) > 0.0 && v7 < *((float *)i + 10);
        if (v9 || *((float *)i + 6) > 0.0 || *((float *)i + 7) > 0.0)
        {
          sub_100D680C8(*((_DWORD *)v5 + 4), (int *)i + 5, (uint64_t)buf);
          float v10 = v24;
          if (v24 >= v25)
          {
            int8x16_t v12 = __p;
            uint64_t v13 = 0x6DB6DB6DB6DB6DB7 * ((v24 - (unsigned char *)__p) >> 2);
            unint64_t v14 = v13 + 1;
            if ((unint64_t)(v13 + 1) > 0x924924924924924) {
              sub_1001D7FD4();
            }
            if (0xDB6DB6DB6DB6DB6ELL * ((v25 - (unsigned char *)__p) >> 2) > v14) {
              unint64_t v14 = 0xDB6DB6DB6DB6DB6ELL * ((v25 - (unsigned char *)__p) >> 2);
            }
            if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v25 - (unsigned char *)__p) >> 2)) >= 0x492492492492492) {
              unint64_t v15 = 0x924924924924924;
            }
            else {
              unint64_t v15 = v14;
            }
            if (v15)
            {
              uint64_t v16 = (char *)sub_100ADA48C((uint64_t)&v25, v15);
              int8x16_t v12 = __p;
              float v10 = v24;
            }
            else
            {
              uint64_t v16 = 0;
            }
            __int16 v17 = &v16[4 * ((v24 - (unsigned char *)__p) >> 2)];
            *(_OWORD *)__int16 v17 = *(_OWORD *)buf;
            *(_OWORD *)(v17 + 12) = *(_OWORD *)&buf[12];
            if (v10 == v12)
            {
              double v20 = &v16[28 * v13];
            }
            else
            {
              uint64_t v18 = &v16[28 * v13];
              do
              {
                long long v19 = *(_OWORD *)((char *)v10 - 28);
                double v20 = v18 - 28;
                *((_OWORD *)v18 - 1) = *(v10 - 1);
                *(_OWORD *)(v18 - 28) = v19;
                float v10 = (_OWORD *)((char *)v10 - 28);
                v18 -= 28;
              }
              while (v10 != v12);
            }
            int v11 = v17 + 28;
            long long __p = v20;
            int v24 = v17 + 28;
            __int16 v25 = &v16[28 * v15];
            if (v12) {
              operator delete(v12);
            }
          }
          else
          {
            *(_OWORD *)int v24 = *(_OWORD *)buf;
            *(_OWORD *)((char *)v10 + 12) = *(_OWORD *)&buf[12];
            int v11 = (char *)v10 + 28;
          }
          int v24 = v11;
        }
      }
      v6 += v5[6];
      int v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022F57E0);
  }
  __int16 v21 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 134218240;
    *(void *)&uint8_t buf[4] = v6;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = 0x6DB6DB6DB6DB6DB7 * ((v24 - (unsigned char *)__p) >> 2);
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "#SatReport,info available for %zu SVs with %zu above-horizon SVs copied to client report", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022F57E0);
    }
    int v26 = 134218240;
    uint64_t v27 = v6;
    __int16 v28 = 2048;
    uint64_t v29 = 0x6DB6DB6DB6DB6DB7 * ((v24 - (unsigned char *)__p) >> 2);
    double v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "std::shared_ptr<const CLDaemonLocationPrivate::AboveHorizonSatelliteVisibilityReport> GNSS::ConvertSatelliteVisibilityReportToCLClientSatelliteReport(const GNSS::SatelliteVisibilityReport &)", "%s\n", v22);
    if (v22 != buf) {
      free(v22);
    }
  }
  sub_100D69E74((uint64_t)&__p, a2);
  if (__p)
  {
    int v24 = (char *)__p;
    operator delete(__p);
  }
}

void sub_100D68778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D687A0(void *a1)
{
  if (*a1 == -1)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022F57E0);
    }
    int v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#gnssmeas,invalid report,rx clock", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022F57E0);
      }
      long long v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void logInvalidMeasurementReport(const gnss::MeasurementReport &)", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
  }
  uint64_t v3 = a1[14];
  for (uint64_t i = a1[15]; v3 != i; v3 += 176)
  {
    if (!sub_100D68BF0((int *)v3))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022F57E0);
      }
      int v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        BOOL v6 = !sub_100D68D30((_DWORD *)v3);
        BOOL v7 = *(unsigned char *)(v3 + 8) == 0;
        unint64_t v8 = *(void *)(v3 + 24);
        unint64_t v9 = *(void *)(v3 + 32);
        BOOL v10 = v8 == -1;
        BOOL v11 = v9 == -1;
        BOOL v12 = *(void *)(v3 + 40) == -1;
        BOOL v13 = v8 > v9;
        uint64_t v14 = *(void *)(v3 + 160);
        int v15 = v13;
        BOOL v16 = *(float *)(v3 + 168) < 0.0;
        *(_DWORD *)uint64_t buf = 67241984;
        int v17 = v16;
        BOOL v21 = v6;
        __int16 v22 = 1026;
        BOOL v23 = v7;
        __int16 v24 = 1026;
        BOOL v25 = v10;
        __int16 v26 = 1026;
        BOOL v27 = v11;
        __int16 v28 = 1026;
        BOOL v29 = v12;
        __int16 v30 = 1026;
        int v31 = v15;
        __int16 v32 = 1026;
        int v33 = v17;
        __int16 v34 = 1026;
        BOOL v35 = v14 != 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#gnssmeas,invalid report,meas,id,%{public}d,sync,%{public}d,start1,%{public}d,end,%{public}d,app,%{public}d,start2,%{public}d,cn0,%{public}d,ext,%{public}d", buf, 0x32u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022F57E0);
        }
        sub_100D68D30((_DWORD *)v3);
        uint64_t v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void logInvalidMeasurementReport(const gnss::MeasurementReport &)", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
      }
    }
  }
}

BOOL sub_100D68BF0(int *a1)
{
  BOOL result = sub_100D68D30(a1);
  if (result)
  {
    unsigned int v3 = *((unsigned __int8 *)a1 + 8);
    if (!*((unsigned char *)a1 + 8)) {
      return 0;
    }
    unint64_t v4 = *((void *)a1 + 3);
    if (v4 == -1) {
      return 0;
    }
    unint64_t v5 = *((void *)a1 + 4);
    if (v5 == -1) {
      return 0;
    }
    BOOL result = 0;
    if (v4 <= v5 && *((void *)a1 + 5) != -1)
    {
      if (*((float *)a1 + 42) < 0.0) {
        return 0;
      }
      int v6 = *a1;
      BOOL result = 0;
      switch(*a1)
      {
        case 0:
          return result;
        case 1:
          goto LABEL_16;
        case 2:
          if (v3 != 4 || (*((unsigned char *)a1 + 5) != 0) != *((unsigned __int8 *)a1 + 4) - 1 < 0x18) {
            return 0;
          }
          goto LABEL_23;
        case 3:
        case 5:
        case 6:
        case 7:
          goto LABEL_23;
        case 4:
          if (v3 - 5 >= 3) {
            return 0;
          }
          goto LABEL_23;
        case 8:
          if ((v3 & 0xFE) != 8) {
            return 0;
          }
          goto LABEL_23;
        default:
          if (v6 == 32)
          {
            if (v3 != 10) {
              return 0;
            }
          }
          else if (v6 == 16)
          {
LABEL_16:
            if (v3 >= 4) {
              return 0;
            }
          }
LABEL_23:
          BOOL result = 1;
          break;
      }
    }
  }
  return result;
}

BOOL sub_100D68D30(_DWORD *a1)
{
  uint64_t v1 = 0;
  int v2 = *a1;
  switch(*a1)
  {
    case 1:
      unsigned int v3 = a1 + 1;
      unsigned int v4 = 32;
      goto LABEL_9;
    case 2:
      unsigned int v3 = (char *)a1 + 6;
      unsigned int v4 = 14;
      char v5 = 7;
      return v4 > (*v3 + v5);
    case 3:
    case 5:
    case 6:
    case 7:
      return v1;
    case 4:
      unsigned int v3 = a1 + 1;
      unsigned int v4 = 63;
      goto LABEL_9;
    case 8:
      unsigned int v3 = a1 + 1;
      unsigned int v4 = 50;
      goto LABEL_9;
    default:
      if (v2 == 16)
      {
        unsigned int v3 = a1 + 1;
        unsigned int v4 = 10;
        char v5 = 63;
      }
      else
      {
        if (v2 != 32) {
          return v1;
        }
        unsigned int v3 = a1 + 1;
        unsigned int v4 = 14;
LABEL_9:
        char v5 = -1;
      }
      return v4 > (*v3 + v5);
  }
}

uint64_t sub_100D68DFC(void *a1, int a2)
{
  unsigned int v4 = a1 + 5;
  if (sub_100D69360(a1 + 5))
  {
    uint64_t v5 = a1[22];
    uint64_t v6 = a1[23];
    while (v5 != v6)
    {
      if ((sub_100D693BC(v5) & 1) == 0)
      {
        if (!a2) {
          return 0;
        }
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022F57E0);
        }
        int v15 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
        {
          int v16 = *(_DWORD *)v5;
          int v17 = *(unsigned __int8 *)(v5 + 4);
          *(_DWORD *)uint64_t buf = 67240448;
          int v26 = v16;
          __int16 v27 = 1026;
          int v28 = v17;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#gnssmeas,invalid report,sv info,system,%{public}d,prn,%{public}d", buf, 0xEu);
        }
        BOOL v18 = sub_10013D1A0(115, 0);
        uint64_t result = 0;
        if (v18)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 == -1) {
            goto LABEL_51;
          }
          goto LABEL_55;
        }
        return result;
      }
      v5 += 144;
    }
    uint64_t v7 = a1[25];
    uint64_t v8 = a1[26];
    if (v7 == v8)
    {
LABEL_13:
      unint64_t v9 = (float *)a1[33];
      if (v9 && !sub_100D695E8(v9))
      {
        if (!a2) {
          return 0;
        }
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022F57E0);
        }
        long long v19 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#gnssmeas,invalid report,klobuchar model", buf, 2u);
        }
        BOOL v20 = sub_10013D1A0(115, 0);
        uint64_t result = 0;
        if (v20)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 == -1)
          {
LABEL_51:
            __int16 v24 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "BOOL gnss::MeasurementData::isValid(BOOL) const", "%s\n", v24);
            if (v24 != (char *)buf) {
              free(v24);
            }
            return 0;
          }
LABEL_55:
          dispatch_once(&qword_1024193D0, &stru_1022F57E0);
          goto LABEL_51;
        }
      }
      else
      {
        BOOL v10 = (int *)a1[34];
        BOOL v11 = (int *)a1[35];
        while (1)
        {
          if (v10 == v11) {
            return 1;
          }
          if (!sub_100D69720((uint64_t)v10)) {
            break;
          }
          v10 += 10;
        }
        if (!a2) {
          return 0;
        }
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022F57E0);
        }
        BOOL v21 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
        {
          int v22 = *v10;
          *(_DWORD *)uint64_t buf = 67240192;
          int v26 = v22;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "#gnssmeas,invalid report,apc parameters,system,%{public}d", buf, 8u);
        }
        BOOL v23 = sub_10013D1A0(115, 0);
        uint64_t result = 0;
        if (v23)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 == -1) {
            goto LABEL_51;
          }
          goto LABEL_55;
        }
      }
    }
    else
    {
      while (*(unsigned char *)(v7 + 16)
           && (*(void *)v7 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
           && (*(_DWORD *)(v7 + 8) & 0x7FFFFFFFu) < 0x7F800000)
      {
        v7 += 24;
        if (v7 == v8) {
          goto LABEL_13;
        }
      }
      if (!a2) {
        return 0;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022F57E0);
      }
      BOOL v12 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#gnssmeas,invalid report,rxbc", buf, 2u);
      }
      BOOL v13 = sub_10013D1A0(115, 0);
      uint64_t result = 0;
      if (v13)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1) {
          goto LABEL_51;
        }
        goto LABEL_55;
      }
    }
  }
  else
  {
    if (a2) {
      sub_100D687A0(v4);
    }
    return 0;
  }
  return result;
}

BOOL sub_100D69360(void *a1)
{
  if (*a1 == -1) {
    return 0;
  }
  uint64_t v1 = (int *)a1[14];
  int v2 = (int *)a1[15];
  if (v1 == v2) {
    return 1;
  }
  do
  {
    BOOL result = sub_100D68BF0(v1);
    if (!result) {
      break;
    }
    v1 += 44;
  }
  while (v1 != v2);
  return result;
}

uint64_t sub_100D693BC(uint64_t a1)
{
  if (!sub_100D68D30((_DWORD *)a1)
    || !*(unsigned char *)(a1 + 16)
    || (*(void *)(a1 + 56) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(void *)(a1 + 64) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(void *)(a1 + 72) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_DWORD *)(a1 + 88) & 0x7FFFFFFFu) > 0x7F7FFFFF
    || (*(_DWORD *)(a1 + 92) & 0x7FFFFFFFu) > 0x7F7FFFFF)
  {
    return 0;
  }
  int v2 = *(void **)(a1 + 24);
  unsigned int v3 = *(void **)(a1 + 32);
  if (v2 != v3)
  {
    while ((*v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
         && (v2[1] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
         && (v2[2] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
         && (v2[3] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      v2 += 4;
      if (v2 == v3) {
        goto LABEL_14;
      }
    }
    return 0;
  }
LABEL_14:
  v12[0] = 0;
  v12[1] = 0;
  BOOL v11 = v12;
  unsigned int v4 = *(unsigned __int8 **)(a1 + 112);
  uint64_t v5 = *(unsigned __int8 **)(a1 + 120);
  if (v4 == v5)
  {
    BOOL v10 = 0;
    uint64_t v6 = 1;
    goto LABEL_36;
  }
  while (2)
  {
    uint64_t v6 = 0;
    switch(*v4)
    {
      case 0u:
        goto LABEL_34;
      case 1u:
      case 2u:
      case 3u:
        if (*(_DWORD *)a1 == 1 || *(_DWORD *)a1 == 16) {
          goto LABEL_28;
        }
        goto LABEL_33;
      case 4u:
        if (*(_DWORD *)a1 != 2) {
          goto LABEL_33;
        }
        goto LABEL_28;
      case 5u:
      case 6u:
      case 7u:
        if (*(_DWORD *)a1 != 4) {
          goto LABEL_33;
        }
        goto LABEL_28;
      case 8u:
      case 9u:
        if (*(_DWORD *)a1 != 8) {
          goto LABEL_33;
        }
        goto LABEL_28;
      case 0xAu:
        if (*(_DWORD *)a1 == 32) {
          goto LABEL_28;
        }
        goto LABEL_33;
      default:
LABEL_28:
        sub_100D69B90(&v11, v4, v4);
        if (v8)
        {
          v4 += 32;
          if (v4 == v5)
          {
            uint64_t v6 = 1;
            goto LABEL_34;
          }
          continue;
        }
LABEL_33:
        uint64_t v6 = 0;
LABEL_34:
        BOOL v10 = (void *)v12[0];
LABEL_36:
        sub_1000F5BB0((uint64_t)&v11, v10);
        return v6;
    }
  }
}

void sub_100D695A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

BOOL sub_100D695E8(float *a1)
{
  float v1 = a1[2];
  BOOL v2 = v1 == 0.0 && a1[3] == 0.0 && a1[4] == 0.0 && a1[5] == 0.0;
  float v3 = a1[6];
  BOOL v4 = v3 == 0.0 && a1[7] == 0.0 && a1[8] == 0.0 && a1[9] == 0.0;
  uint64_t v5 = 0;
  if (fabsf(v1) < 0.00000014305 && !v2 && !v4)
  {
    if (fabsf(a1[3]) >= 0.0000011444 || fabsf(a1[4]) >= 0.0000091553) {
      return 0;
    }
    uint64_t v5 = 0;
    if (fabsf(v3) < 314570.0 && fabsf(a1[5]) < 0.0000091553)
    {
      if (fabsf(a1[7]) < 2516600.0 && fabsf(a1[8]) < 10066000.0) {
        return fabsf(a1[9]) < 10066000.0;
      }
      return 0;
    }
  }
  return v5;
}

BOOL sub_100D69720(uint64_t a1)
{
  if (*(_DWORD *)a1 == 2)
  {
    if (*(unsigned __int8 *)(a1 + 4) - 1 >= 0x18) {
      return 0;
    }
  }
  else
  {
    BOOL result = sub_100D68D30((_DWORD *)a1);
    if (!result) {
      return result;
    }
  }
  if (*(unsigned char *)(a1 + 8)
    && *(unsigned char *)(a1 + 9)
    && (*(void *)(a1 + 16) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(void *)(a1 + 24) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    return (*(void *)(a1 + 32) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  }
  return 0;
}

void sub_100D697BC(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_100D697EC(uint64_t a1, void *a2)
{
  BOOL v4 = (void *)(a1 + 8);
  sub_1000F5BB0(a1, *(void **)(a1 + 8));
  *(void *)a1 = *a2;
  uint64_t v5 = a2 + 1;
  uint64_t v6 = a2[1];
  *BOOL v4 = v6;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    void *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
}

uint64_t sub_100D69858(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void ***)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v6 = v5 - (void)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      uint64_t v7 = *(void *)(a1 + 16);
      BOOL v4 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v4;
      unint64_t v6 = v7 - (void)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    uint64_t v8 = 64;
    goto LABEL_7;
  }
  if (v6 >> 3 == 2)
  {
    uint64_t v8 = 128;
LABEL_7:
    *(void *)(a1 + 32) = v8;
  }
  sub_100D698FC((void **)a1);
  uint64_t result = sub_100D69A54(a1, a2);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100D698FC(void **a1)
{
  if (a1[5])
  {
    sub_1002D0514((uint64_t)a1, 0);
    sub_10017DE88(a1, 0);
  }
  else
  {
    float v3 = a1[1];
    for (uint64_t i = (uint64_t)a1[2]; (void *)i != v3; a1[2] = (void *)i)
    {
      operator delete(*(void **)(i - 8));
      float v3 = a1[1];
      uint64_t i = (uint64_t)a1[2] - 8;
    }
    a1[4] = 0;
  }

  sub_100D69980(a1);
}

void sub_100D69980(void **a1)
{
  float v3 = a1[3];
  uint64_t v2 = (uint64_t)(a1 + 3);
  BOOL v4 = a1[1];
  uint64_t v5 = a1[2];
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 >= (v3 - (unsigned char *)*a1) >> 3) {
    return;
  }
  if (v5 == v4)
  {
    BOOL v10 = 0;
    uint64_t v7 = 0;
    goto LABEL_8;
  }
  uint64_t v7 = (char *)sub_1000DA54C(v2, v6);
  uint64_t v8 = a1[1];
  uint64_t v5 = a1[2];
  BOOL v10 = &v7[8 * v9];
  uint64_t v11 = v5 - v8;
  if (v5 == v8)
  {
LABEL_8:
    uint64_t v14 = v5;
    goto LABEL_9;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 8 * (v11 >> 3);
  do
  {
    *(void *)&v7[v12] = *(void *)&v8[v12];
    v12 += 8;
  }
  while (v13 != v12);
  uint64_t v5 = a1[1];
  uint64_t v14 = a1[2];
LABEL_9:
  int64_t v15 = v14 - v5;
  int v16 = *a1;
  *a1 = v7;
  a1[1] = v7;
  a1[2] = &v7[v15];
  a1[3] = v10;
  if (v16)
  {
    operator delete(v16);
  }
}

uint64_t sub_100D69A54(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 != v5) {
    *(void *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  sub_100D69980((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

uint64_t sub_100D69AC4(uint64_t a1)
{
  return a1;
}

uint64_t **sub_100D69B90(uint64_t **a1, unsigned __int8 *a2, unsigned char *a3)
{
  unint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unsigned int v9 = *((unsigned __int8 *)v5 + 25);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        unint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        unint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    BOOL v10 = (uint64_t *)operator new(0x20uLL);
    *((unsigned char *)v10 + 25) = *a3;
    sub_1000EDF90(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void *sub_100D69C4C(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    BOOL v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x20uLL);
  void *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  void v11[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_100100330(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  BOOL v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    void *v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }
  void *v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    BOOL v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_100D69E60(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100D69E74@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = (char *)operator new(0x30uLL);
  uint64_t result = sub_100D69ED0((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_100D69EBC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100D69ED0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = off_1022F5810;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 24) = 0;
  sub_100D69FEC((void *)(a1 + 24), *(const void **)a2, *(void *)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2));
  return a1;
}

void sub_100D69F48(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100D69F5C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022F5810;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100D69F7C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022F5810;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100D69FD0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void *sub_100D69FEC(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = sub_100ADA434(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100D6A04C(_Unwind_Exception *exception_object)
{
  float v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D6A068()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_100D6A0E8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_100D6A178(_Unwind_Exception *a1)
{
}

uint64_t sub_100D6A190()
{
  uint64_t result = sub_1004BDA0C();
  dword_10248AC08 = result;
  return result;
}

BOOL sub_100D6A1F0(uint64_t a1, uint64_t a2)
{
  sub_10016332C(a2, "kCLMotionTypeGeomagneticModelDataXKey", (const void *)a1);
  sub_10016332C(a2, "kCLMotionTypeGeomagneticModelDataYKey", (const void *)(a1 + 8));
  sub_10016332C(a2, "kCLMotionTypeGeomagneticModelDataZKey", (const void *)(a1 + 16));
  sub_10016332C(a2, "kCLMotionTypeGeomagneticModelDataMagnitudeKey", (const void *)(a1 + 24));
  sub_10016332C(a2, "kCLMotionTypeGeomagneticModelDataHorizontalKey", (const void *)(a1 + 32));
  sub_10016332C(a2, "kCLMotionTypeGeomagneticModelDataDeclinationKey", (const void *)(a1 + 40));
  sub_10016332C(a2, "kCLMotionTypeGeomagneticModelDataInclinationKey", (const void *)(a1 + 48));

  return sub_10016332C(a2, "kCLMotionTypeGeomagneticModelDataTimestampKey", (const void *)(a1 + 56));
}

BOOL sub_100D6A2C0(float *a1, float *a2, char a3, uint64_t a4)
{
  char v9 = a3;
  double v8 = *a1;
  sub_10016332C(a4, "kCLBiasXKey", &v8);
  double v8 = a1[1];
  sub_10016332C(a4, "kCLBiasYKey", &v8);
  double v8 = a1[2];
  sub_10016332C(a4, "kCLBiasZKey", &v8);
  double v8 = *a2;
  sub_10016332C(a4, "kCLVarianceXKey", &v8);
  double v8 = a2[1];
  sub_10016332C(a4, "kCLVarianceYKey", &v8);
  double v8 = a2[2];
  sub_10016332C(a4, "kCLVarianceZKey", &v8);
  return sub_1000EA238(a4, "KCLDoingBiasEstimationKey", &v9);
}

BOOL sub_100D6A3D0(const void *a1, const void *a2, const void *a3, uint64_t a4)
{
  sub_1000EA838(a4, "kCMActivityAlarmId", a1);
  sub_1000EA838(a4, "kCMActivityAlarmTrigger", a2);

  return sub_10016332C(a4, "kCMActivityAlarmDuration", a3);
}

uint64_t sub_100D6A448(_DWORD *a1, _DWORD *a2, void *a3, uint64_t a4)
{
  if (!sub_10006EF84(a4, "kCMActivityAlarmId", a1)
    || !sub_10006EF84(a4, "kCMActivityAlarmTrigger", a2))
  {
    return 0;
  }

  return sub_1000A699C(a4, "kCMActivityAlarmDuration", a3);
}

void sub_100D6A4E8(UInt8 *bytes, uint64_t a2)
{
  CFDataRef v3 = CFDataCreate(kCFAllocatorDefault, bytes, 29);
  sub_1000EA8A4(a2, "kCMPressureBiasId", (uint64_t)v3);

  CFRelease(v3);
}

uint64_t sub_100D6A54C(UInt8 *a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  if (sub_1004D0164(a2, "kCMPressureBiasId", &cf)) {
    BOOL v3 = cf == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return 0;
  }
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 != CFDataGetTypeID()) {
    return 0;
  }
  CFDataRef v5 = (const __CFData *)cf;
  if ((unint64_t)CFDataGetLength((CFDataRef)cf) < 0x1D) {
    return 0;
  }
  v8.location = 0;
  v8.length = 29;
  CFDataGetBytes(v5, v8, a1);
  return 1;
}

uint64_t sub_100D6A5F0()
{
  return qword_1024812D0;
}

void *sub_100D6A5FC(void *result)
{
  uint64_t v1 = qword_1024812D0;
  *uint64_t result = off_1022F5860;
  result[1] = v1;
  qword_1024812D0 = (uint64_t)result;
  return result;
}

void *sub_100D6A628(void *a1)
{
  *a1 = off_1022F5860;
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022F58B8);
  }
  uint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CMFFTProcessor is being cleaned up.  Subsequent calls to CMAccelerometerProcessor::computeFrequencyFeatures will lead to undefined behavior.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F58B8);
    }
    CFTypeID v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CMFFTProcessor::~CMFFTProcessor()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return a1;
}

void sub_100D6A7DC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_100D6A7EC(void *a1)
{
  sub_100D6A628(a1);

  operator delete();
}

uint64_t sub_100D6A824(float a1)
{
  if (a1 < 0.0 || a1 > 2147500000.0)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F58B8);
    }
    CFDataRef v5 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      double v8 = a1;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Assertion failed: arg >= 0.f && arg <= static_cast<scalar_32>(2147483647), file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMFFTProcessor.cpp, line 52,arg,%f.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022F58B8);
      }
      unint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static int CMFFTProcessor::idxCeil(scalar_32)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  unsigned int v3 = (int)a1;
  if ((float)(int)a1 == a1) {
    return v3;
  }
  else {
    return v3 + 1;
  }
}

float sub_100D6A9FC(int a1, unint64_t a2, float a3)
{
  float result = a3 / (float)((float)((float)a1 * 0.25) / (float)(int)(a2 >> 1));
  if (result > (float)((int)a2 - 1)) {
    return (float)((int)a2 - 1);
  }
  return result;
}

float sub_100D6AA2C(int a1, unint64_t a2)
{
  return (float)((float)a1 * 0.25) / (float)(int)(a2 >> 1);
}

float sub_100D6AA48(int a1, int a2, uint64_t a3)
{
  if (a1 >= a2)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F58B8);
    }
    BOOL v10 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67109376;
      int v13 = a1;
      __int16 v14 = 1024;
      int v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Assertion failed: start < end, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMFFTProcessor.cpp, line 74,start,%d,end,%d.", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022F58B8);
      }
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static float CMFFTProcessor::getSum(int, int, const FrequencyData *)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  float result = 0.0;
  if (a1 <= a2)
  {
    uint64_t v7 = (float *)(a3 + 4 * a1);
    int v8 = a2 - a1 + 1;
    do
    {
      float v9 = *v7++;
      float result = result + v9;
      --v8;
    }
    while (v8);
  }
  return result;
}

float sub_100D6AC4C(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1 >= a2)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022F58B8);
    }
    BOOL v20 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67109376;
      int v23 = a1;
      __int16 v24 = 1024;
      int v25 = a2;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "Assertion failed: start < end, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMFFTProcessor.cpp, line 85,start,%d,end,%d.", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022F58B8);
      }
      unint64_t v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static float CMFFTProcessor::getPowerSum(int, int, const FrequencyData *, const FrequencyData *, const FrequencyData *)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
  }
  float result = 0.0;
  if (a1 <= a2)
  {
    uint64_t v11 = (float *)(a3 + 4 * a1);
    unint64_t v12 = (float *)(a4 + 4 * a1);
    int v13 = a2 - a1 + 1;
    __int16 v14 = (float *)(a5 + 4 * a1);
    do
    {
      float v15 = *v11++;
      float v16 = v15 * v15;
      float v17 = *v12++;
      float v18 = v16 + (float)(v17 * v17);
      float v19 = *v14++;
      float result = result + (float)(v18 + (float)(v19 * v19));
      --v13;
    }
    while (v13);
  }
  return result;
}

void sub_100D6AE84(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100D6AEB4(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5, void *a6, uint64_t a7, uint64_t a8, long long *a9)
{
  *(void *)a1 = off_1022F58E8;
  *(void *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  uint64_t v10 = a4[1];
  *(void *)(a1 + 24) = *a4;
  *(void *)(a1 + 32) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = a5[1];
  *(void *)(a1 + 40) = *a5;
  *(void *)(a1 + 48) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = a6[1];
  *(void *)(a1 + 56) = *a6;
  *(void *)(a1 + 64) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 72) = a7;
  *(void *)(a1 + 80) = a8;
  *(unsigned char *)(a1 + 88) = 0;
  *(void *)(a1 + 104) = 0xBFF0000000000000;
  *(_WORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 116) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 124) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  sub_100D6B080(a1, a1 + 136);
  *(unsigned char *)(a1 + 264) = 0;
  *(void *)(a1 + 268) = 0;
  long long v13 = *a9;
  long long v14 = a9[2];
  *(_OWORD *)(a1 + 296) = a9[1];
  *(_OWORD *)(a1 + 312) = v14;
  *(_OWORD *)(a1 + 280) = v13;
  *(void *)(a1 + 328) = 0x7FEFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 344) = 0;
  *(void *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 116) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 124) = 0;
  uint64_t v15 = sub_1000A6958();
  id v16 = sub_100D6B134(a1);
  if ((sub_1000A6A10(v15, (uint64_t)v16, (void *)(a1 + 96)) & 1) == 0)
  {
    double v17 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
    sub_100D6B1CC(a1, v17);
  }
  *(double *)(a1 + 336) = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
  return a1;
}

void sub_100D6B040(_Unwind_Exception *exception_object)
{
  unsigned int v3 = (std::__shared_weak_count *)v1[8];
  if (v3) {
    sub_1000DB0A0(v3);
  }
  CFTypeID v4 = (std::__shared_weak_count *)v1[6];
  if (v4) {
    sub_1000DB0A0(v4);
  }
  CFDataRef v5 = (std::__shared_weak_count *)v1[4];
  if (v5) {
    sub_1000DB0A0(v5);
  }
  _Unwind_Resume(exception_object);
}

double sub_100D6B080@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0xBFF0000000000000;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(void *)(a2 + 76) = 0;
  *(void *)(a2 + 68) = 0;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(void *)(a2 + 120) = 0;
  *(unsigned char *)a2 = 1;
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 56) + 16))(&v6);
  int v4 = *(_DWORD *)(a1 + 16);
  double result = *(double *)&v6;
  *(_OWORD *)(a2 + 40) = v6;
  *(void *)(a2 + 56) = v7;
  *(_DWORD *)(a2 + 64) = v4;
  return result;
}

void sub_100D6B120(_Unwind_Exception *a1)
{
  sub_100D6B228(v1);
  _Unwind_Resume(a1);
}

id sub_100D6B134(uint64_t a1)
{
  sub_100BA5C6C(*(_DWORD *)(a1 + 16), __p);
  if (v5 >= 0) {
    uint64_t v1 = __p;
  }
  else {
    uint64_t v1 = (void **)__p[0];
  }
  id v2 = [[@"LastUploadTime" stringByAppendingString:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v1)];
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_100D6B1B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100D6B1CC(uint64_t a1, double a2)
{
  *(double *)(a1 + 96) = a2;
  unsigned int v3 = (const void *)(a1 + 96);
  uint64_t v4 = sub_1000A6958();
  CFStringRef v5 = (const __CFString *)sub_100D6B134(a1);

  return sub_100163398(v4, v5, v3);
}

uint64_t sub_100D6B228(uint64_t a1)
{
  id v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(void *)(a1 + 112) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void *sub_100D6B27C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_100BA5C6C(*(_DWORD *)(a1 + 16), a2);
}

uint64_t sub_100D6B284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 == 6)
  {
    (*(void (**)(uint64_t, void))(*(void *)a1 + 104))(a1, *(unsigned int *)(a4 + 4));
  }
  else if (a3 == 7)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 96))(a1, a4);
  }
  int v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120);

  return v8(a1, a2, a3, a4);
}

BOOL sub_100D6B380(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1) || !*(unsigned char *)(a1 + 320))
    {
      long long v16 = *(_OWORD *)(a1 + 104);
      uint64_t v17 = *(void *)(a1 + 120);
      int v2 = sub_1012B74E0(a1 + 280, (uint64_t)&v16);
      if (*(_DWORD *)(a1 + 128) >= v2) {
        return 1;
      }
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022F59C0);
      }
      unsigned int v3 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        sub_100BA5C6C(*(_DWORD *)(a1 + 16), v22);
        uint64_t v4 = v26 >= 0 ? v22 : *(unsigned char **)v22;
        int v5 = *(_DWORD *)(a1 + 128);
        *(_DWORD *)uint64_t buf = 136315650;
        *(void *)float v19 = v4;
        *(_WORD *)&v19[8] = 1024;
        *(_DWORD *)&unsigned char v19[10] = v5;
        __int16 v20 = 1024;
        LODWORD(v21) = v2;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "%s not ready to upload: invalid reachability. Have %d and need %d", buf, 0x18u);
        if (SHIBYTE(v26) < 0) {
          operator delete(*(void **)v22);
        }
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_1022F59C0);
        }
        sub_100BA5C6C(*(_DWORD *)(a1 + 16), __p);
        if (v15 >= 0) {
          uint64_t v7 = __p;
        }
        else {
          uint64_t v7 = (void **)__p[0];
        }
        int v8 = *(_DWORD *)(a1 + 128);
        *(_DWORD *)int v22 = 136315650;
        *(void *)&void v22[4] = v7;
        __int16 v23 = 1024;
        int v24 = v8;
        __int16 v25 = 1024;
        int v26 = v2;
        float v9 = (char *)_os_log_send_and_compose_impl();
        if (v15 < 0) {
          operator delete(__p[0]);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLSubHarvester::baseUploadRequirementsMet()", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022F59C0);
      }
      uint64_t v10 = qword_102419568;
      BOOL result = os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG);
      if (result)
      {
        uint64_t v13 = *(unsigned int *)(a1 + 16);
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)float v19 = 0;
        *(_WORD *)&uint64_t v19[4] = 2082;
        *(void *)&v19[6] = "";
        __int16 v20 = 2050;
        uint64_t v21 = v13;
        uint64_t v12 = "{\"msg%{public}.0s\":\"not ready to upload: no locations\", \"subHarvester\":%{public, location:CLSubHarve"
              "sterIdentifier}lld}";
        goto LABEL_32;
      }
    }
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F59C0);
    }
    uint64_t v10 = qword_102419568;
    BOOL result = os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG);
    if (result)
    {
      uint64_t v11 = *(unsigned int *)(a1 + 16);
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)float v19 = 0;
      *(_WORD *)&uint64_t v19[4] = 2082;
      *(void *)&v19[6] = "";
      __int16 v20 = 2050;
      uint64_t v21 = v11;
      uint64_t v12 = "{\"msg%{public}.0s\":\"not ready to upload: turned off\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}";
LABEL_32:
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, v12, buf, 0x1Cu);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100D6B764(uint64_t a1)
{
  uint64_t result = sub_100D6B380(a1);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
    if (result)
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022F59C0);
      }
      unsigned int v3 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
      {
        uint64_t v4 = *(unsigned int *)(a1 + 16);
        uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
        double v6 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56))
           - *(double *)(a1 + 96);
        v8[0] = 68289795;
        v8[1] = 0;
        __int16 v9 = 2082;
        uint64_t v10 = "";
        __int16 v11 = 2049;
        uint64_t v12 = v4;
        __int16 v13 = 2049;
        uint64_t v14 = v5;
        __int16 v15 = 2049;
        double v16 = v6;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Harvest-Upload\", \"subHarvester\":%{private, location:CLSubHarvesterIdentifier}lld, \"numPoints\":%{private}lu, \"secondsSinceLastUpload\":\"%{private}f\"}", (uint8_t *)v8, 0x30u);
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 136))(a1);
      double v7 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
      return sub_100D6B1CC(a1, v7);
    }
  }
  return result;
}

void sub_100D6B950(uint64_t a1)
{
  if (sub_100D6B380(a1)) {
    int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
  }
  else {
    int v2 = 0;
  }
  int v3 = *(unsigned __int8 *)(a1 + 344);
  if ((v2 & 1) != 0 || *(unsigned char *)(a1 + 344))
  {
    (*(void (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
    uint64_t v5 = 224;
    if (!v3) {
      uint64_t v5 = 232;
    }
    *(double *)(a1 + v5) = v4 - *(double *)(a1 + 336) + *(double *)(a1 + v5);
    *(double *)(a1 + 336) = v4;
    double v6 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
    long long v25 = *(_OWORD *)(a1 + 104);
    uint64_t v26 = *(void *)(a1 + 120);
    sub_1012B74A4(a1 + 280, (uint64_t)&v25);
    double v8 = v7;
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F59C0);
    }
    __int16 v9 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v10 = *(unsigned int *)(a1 + 16);
      double v11 = *(double *)(a1 + 96);
      double v12 = *(double *)(a1 + 328);
      *(_DWORD *)uint64_t buf = 68290307;
      int v28 = 0;
      __int16 v29 = 2082;
      __int16 v30 = "";
      __int16 v31 = 2050;
      uint64_t v32 = v10;
      __int16 v33 = 2049;
      double v34 = v11;
      __int16 v35 = 2049;
      double v36 = v12;
      __int16 v37 = 2049;
      double v38 = v6 - v11;
      __int16 v39 = 2049;
      double v40 = v12 - v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#uploadTimer ATU\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"fLastUploadTime_s\":\"%{private}.09f\", \"fNextUploadTime_s\":\"%{private}.09f\", \"sinceLU_s\":\"%{private}.09f\", \"tillNU_s\":\"%{private}.09f\"}", buf, 0x44u);
    }
    if (!v2)
    {
      double v6 = 1.79769313e308;
LABEL_32:
      *(unsigned char *)(a1 + 344) = v2;
      *(double *)(a1 + 328) = v6;
      (*(void (**)(void, void, double))(**(void **)(a1 + 56) + 56))(*(void *)(a1 + 56), *(unsigned int *)(a1 + 16), v6);
      return;
    }
    double v13 = *(double *)(a1 + 328);
    double v14 = v8 + *(double *)(a1 + 96);
    if (v13 <= v6 || v13 >= v14)
    {
      if (v14 >= v6)
      {
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_1022F59C0);
        }
        int v22 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
        {
          uint64_t v23 = *(unsigned int *)(a1 + 16);
          double v24 = *(double *)(a1 + 96);
          *(_DWORD *)uint64_t buf = 68289795;
          int v28 = 0;
          __int16 v29 = 2082;
          __int16 v30 = "";
          __int16 v31 = 2050;
          uint64_t v32 = v23;
          __int16 v33 = 2049;
          double v34 = v24;
          __int16 v35 = 2049;
          double v36 = v8;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#uploadTimer option B\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"fLastUploadTime\":\"%{private}f\", \"interval\":\"%{private}f\"}", buf, 0x30u);
        }
        double v6 = v8 + *(double *)(a1 + 96);
      }
      else
      {
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_1022F59C0);
        }
        double v16 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
        {
          uint64_t v17 = *(unsigned int *)(a1 + 16);
          double v18 = *(double *)(a1 + 96);
          *(_DWORD *)uint64_t buf = 68289795;
          int v28 = 0;
          __int16 v29 = 2082;
          __int16 v30 = "";
          __int16 v31 = 2050;
          uint64_t v32 = v17;
          __int16 v33 = 2049;
          double v34 = v18;
          __int16 v35 = 2049;
          double v36 = v8;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#uploadTimer option C\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"fLastUploadTime\":\"%{private}f\", \"interval\":\"%{private}f\"}", buf, 0x30u);
        }
      }
      goto LABEL_32;
    }
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F59C0);
    }
    float v19 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      uint64_t v20 = *(unsigned int *)(a1 + 16);
      double v21 = *(double *)(a1 + 96);
      *(_DWORD *)uint64_t buf = 68289795;
      int v28 = 0;
      __int16 v29 = 2082;
      __int16 v30 = "";
      __int16 v31 = 2050;
      uint64_t v32 = v20;
      __int16 v33 = 2049;
      double v34 = v21;
      __int16 v35 = 2049;
      double v36 = v8;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#uploadTimer option A\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"fLastUploadTime\":\"%{private}f\", \"interval\":\"%{private}f\"}", buf, 0x30u);
    }
  }
}

__n128 sub_100D6BDD8(uint64_t a1, long long *a2)
{
  result.n128_u64[0] = *(void *)a2;
  if (*(double *)a2 != *(double *)(a1 + 104)
    || *((unsigned __int8 *)a2 + 8) != *(unsigned __int8 *)(a1 + 112)
    || *((unsigned __int8 *)a2 + 9) != *(unsigned __int8 *)(a1 + 113)
    || *((_DWORD *)a2 + 3) != *(_DWORD *)(a1 + 116))
  {
    long long v3 = *a2;
    *(void *)(a1 + 120) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 104) = v3;
    sub_100D6B950(a1);
  }
  return result;
}

void sub_100D6BE34(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 128) != a2)
  {
    *(_DWORD *)(a1 + 128) = a2;
    sub_100D6B950(a1);
  }
}

uint64_t sub_100D6BE4C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))();
}

BOOL sub_100D6BE74(uint64_t a1, uint64_t a2)
{
  return sub_100D6BE7C(a1, *(double *)(a2 + 76));
}

BOOL sub_100D6BE7C(uint64_t a1, double a2)
{
  double v4 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
  double v5 = v4 - (*(double (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
  if (v5 > a2)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F59C0);
    }
    double v6 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = *(unsigned int *)(a1 + 16);
      v9[0] = 68289283;
      v9[1] = 0;
      __int16 v10 = 2082;
      double v11 = "";
      __int16 v12 = 2049;
      uint64_t v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"contains invalid harvest point that exceeds maximum age\", \"subHarvester\":%{private, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v9, 0x1Cu);
    }
  }
  return v5 <= a2;
}

void sub_100D6BFDC(unsigned int *a1)
{
  uint64_t v2 = (*(uint64_t (**)(unsigned int *))(*(void *)a1 + 160))(a1);
  (*(void (**)(unsigned int *))(*(void *)a1 + 168))(a1);
  uint64_t v3 = (*(uint64_t (**)(unsigned int *))(*(void *)a1 + 160))(a1);
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022F59C0);
  }
  uint64_t v4 = v2 - v3;
  double v5 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = a1[4];
    v7[0] = 68289539;
    v7[1] = 0;
    __int16 v8 = 2082;
    __int16 v9 = "";
    __int16 v10 = 2049;
    uint64_t v11 = v6;
    __int16 v12 = 2049;
    uint64_t v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"pruned harvest points\", \"subHarvester\":%{private, location:CLSubHarvesterIdentifier}lld, \"prunedPointsCount\":%{private}lu}", (uint8_t *)v7, 0x26u);
  }
  a1[53] += v4;
  sub_100D6B950((uint64_t)a1);
}

void sub_100D6C16C(unsigned int *a1)
{
  uint64_t v2 = (*(uint64_t (**)(unsigned int *))(*(void *)a1 + 160))(a1);
  (*(void (**)(unsigned int *))(*(void *)a1 + 176))(a1);
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022F59C0);
  }
  uint64_t v3 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = a1[4];
    v5[0] = 68289539;
    v5[1] = 0;
    __int16 v6 = 2082;
    uint64_t v7 = "";
    __int16 v8 = 2049;
    uint64_t v9 = v4;
    __int16 v10 = 2049;
    uint64_t v11 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"cleared harvest points\", \"subHarvester\":%{private, location:CLSubHarvesterIdentifier}lld, \"clearedPointsCount\":%{private}lu}", (uint8_t *)v5, 0x26u);
  }
  a1[54] += v2;
  sub_100D6B950((uint64_t)a1);
}

void sub_100D6C2CC(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 344);
  (*(void (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
  uint64_t v4 = 224;
  if (!v2) {
    uint64_t v4 = 232;
  }
  *(double *)(a1 + v4) = v3 - *(double *)(a1 + 336) + *(double *)(a1 + v4);
  *(double *)(a1 + 336) = v3;
  *(double *)(a1 + 144) = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
  (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022F59C0);
  }
  double v5 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    sub_100BA5C6C(*(_DWORD *)(a1 + 200), __p);
    __int16 v6 = v26 >= 0 ? __p : (void **)__p[0];
    int v7 = *(_DWORD *)(a1 + 204);
    int v8 = *(_DWORD *)(a1 + 208);
    int v9 = *(_DWORD *)(a1 + 212);
    int v10 = *(_DWORD *)(a1 + 216);
    uint64_t v11 = *(void *)(a1 + 224);
    uint64_t v12 = *(void *)(a1 + 232);
    *(_DWORD *)uint64_t buf = 68290819;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2081;
    *(void *)&buf[20] = v6;
    *(_WORD *)&unsigned char buf[28] = 1025;
    *(_DWORD *)&buf[30] = v7;
    *(_WORD *)&buf[34] = 1025;
    *(_DWORD *)&buf[36] = v8;
    *(_WORD *)int v28 = 1025;
    *(_DWORD *)&id v28[2] = v9;
    *(_WORD *)&_OWORD v28[6] = 1025;
    *(_DWORD *)&v28[8] = v10;
    *(_WORD *)&v28[12] = 2049;
    *(void *)&_OWORD v28[14] = v11;
    *(_WORD *)&v28[22] = 2049;
    *(void *)&long long v29 = v12;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"SubHarvesterMetrics\", \"subHarvesterIdentifier\":%{private, location:escape_only}s, \"pointsReceived\":%{private}d, \"pointsSaved\":%{private}d, \"pointsPruned\":%{private}d, \"pointsCleared\":%{private}d, \"durationUploadCapable\":\"%{private}f\", \"durationUploadIncapable\":\"%{private}f\"}", buf, 0x48u);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v13 = *(unsigned __int8 **)(a1 + 240);
  for (uint64_t i = *(unsigned __int8 **)(a1 + 248); v13 != i; v13 += 12)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022F59C0);
    }
    __int16 v15 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      sub_100BA5C6C(*(_DWORD *)(a1 + 200), __p);
      double v16 = __p;
      if (v26 < 0) {
        double v16 = (void **)__p[0];
      }
      int v17 = *v13;
      int v18 = *((_DWORD *)v13 + 1);
      int v19 = *((_DWORD *)v13 + 2);
      *(_DWORD *)uint64_t buf = 68290051;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2081;
      *(void *)&buf[20] = v16;
      *(_WORD *)&unsigned char buf[28] = 1025;
      *(_DWORD *)&buf[30] = v17;
      *(_WORD *)&buf[34] = 1025;
      *(_DWORD *)&buf[36] = v18;
      *(_WORD *)int v28 = 1025;
      *(_DWORD *)&id v28[2] = v19;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"SubHarvesterUploadAttempt\", \"subHarvesterIdentifier\":%{private, location:escape_only}s, \"uploadSucceeded\":%{private}d, \"errorCode\":%{private}d, \"pointsAttached\":%{private}d}", buf, 0x2Eu);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  sub_100D6B080(a1, (uint64_t)buf);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)buf;
  uint64_t v20 = (void **)(a1 + 152);
  if (*(char *)(a1 + 175) < 0) {
    operator delete(*v20);
  }
  *(_OWORD *)uint64_t v20 = *(_OWORD *)&buf[16];
  *(void *)(a1 + 168) = *(void *)&buf[32];
  buf[39] = 0;
  uint8_t buf[16] = 0;
  double v21 = (void **)(a1 + 176);
  if (*(char *)(a1 + 199) < 0) {
    operator delete(*v21);
  }
  *(_OWORD *)double v21 = *(_OWORD *)v28;
  long long v22 = v30;
  *(_OWORD *)(a1 + 200) = v29;
  *(void *)(a1 + 192) = *(void *)&v28[16];
  v28[23] = 0;
  v28[0] = 0;
  *(_OWORD *)(a1 + 216) = v22;
  *(void *)(a1 + 232) = v31;
  uint64_t v23 = *(void **)(a1 + 240);
  if (v23)
  {
    *(void *)(a1 + 248) = v23;
    operator delete(v23);
    int v24 = v28[23];
    *(_OWORD *)(a1 + 240) = v32;
    *(void *)(a1 + 256) = v33;
    uint64_t v33 = 0;
    long long v32 = 0uLL;
    if (v24 < 0) {
      operator delete(*(void **)v28);
    }
  }
  else
  {
    *(_OWORD *)(a1 + 240) = v32;
    *(void *)(a1 + 256) = v33;
    uint64_t v33 = 0;
    long long v32 = 0uLL;
  }
  if ((buf[39] & 0x80000000) != 0) {
    operator delete(*(void **)&buf[16]);
  }
}

void sub_100D6C6F4(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void *sub_100D6C724(void *a1, int a2)
{
  sub_100134750(__p, "");
  sub_100D6C834((uint64_t)a1, "CLCyclingDevice", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_1022F59F0;
  a1[9] = off_1022F5AA8;
  sub_100F03BA0(a1 + 47, 0, 0);
  (*(void (**)(void *))(*a1 + 112))(a1);
  return a1;
}

void sub_100D6C808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D6C834(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 8));
  *uint64_t v12 = off_1022ADB08;
  *(void *)a1 = off_1022F5CA8;
  *(void *)(a1 + 72) = off_1022F5D50;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_1022F5CA8;
  *(void *)(a1 + 72) = off_1022F5D50;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 296) = 12000;
  *(void *)(a1 + 304) = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 312));
  *(void *)(a1 + 312) = off_1022ADB08;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_100D6CC58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  *a11 = v30;
  sub_1003BE1F8(v31);
  sub_100D6D0DC(v29);
  sub_100D6FD84(v28);
  sub_1011F8AE0(v27);
  *long long v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_100D6CCF8()
{
}

uint64_t sub_100D6CD00(uint64_t a1)
{
  *(void *)a1 = off_1022F5CA8;
  uint64_t v2 = a1 + 72;
  *(void *)(a1 + 72) = off_1022F5D50;
  *(void *)(a1 + 304) = off_1022ADAD8;
  sub_1003BE1F8((void *)(a1 + 312));
  if (*(char *)(a1 + 295) < 0) {
    operator delete(*(void **)(a1 + 272));
  }
  if (*(char *)(a1 + 271) < 0) {
    operator delete(*(void **)(a1 + 248));
  }
  sub_100D6FD84((void *)(a1 + 176));
  sub_1011F8AE0(v2);
  *(void *)a1 = off_1022ADAD8;
  sub_1003BE1F8((void *)(a1 + 8));
  return a1;
}

uint64_t sub_100D6CDE4(uint64_t a1)
{
  return sub_100D6CD00(a1 - 72);
}

void sub_100D6CDEC(uint64_t a1)
{
  sub_100D6CD00(a1);

  operator delete();
}

void sub_100D6CE24(uint64_t a1)
{
  sub_100D6CD00(a1 - 72);

  operator delete();
}

uint64_t sub_100D6CE60()
{
  return -1;
}

uint64_t sub_100D6CE7C()
{
  return -1;
}

uint64_t sub_100D6CE98(uint64_t a1)
{
  uint64_t v2 = a1 + 112;
  uint64_t v3 = a1 + 72;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 16))(a1 + 112);
  if (sub_100082064(v3)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT COUNT(*) FROM CLCyclingDevice");
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return 0xFFFFFFFFLL;
}

void sub_100D6CFB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D6D00C(uint64_t a1)
{
  return sub_100D6CE98(a1 - 72);
}

uint64_t sub_100D6D014(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1;
  }
  if (v5 != 100) {
    return 2;
  }
  char v6 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(void *)a2 = sqlite3_column_int64(v6, 0);
  int v7 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v7, 1);
  int v8 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 16) = sqlite3_column_int(v8, 2);
  int v9 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v10 = sqlite3_column_text(v9, 3);
  std::string::assign((std::string *)(a2 + 24), (const std::string::value_type *)v10);
  uint64_t v11 = (sqlite3_stmt *)sub_10014D19C(*a1);
  uint64_t v12 = sqlite3_column_text(v11, 4);
  std::string::assign((std::string *)(a2 + 48), (const std::string::value_type *)v12);
  return 0;
}

uint64_t sub_100D6D0DC(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

uint64_t sub_100D6D120(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = a1 + 112;
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v6 = a1 + 72;
  uint64_t v10 = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  __int16 v11 = 256;
  if (sub_100082064(v6))
  {
    uint64_t v8 = *a2;
    uint64_t v7 = a2[1];
    if (v7 != *a2)
    {
      do
      {
        v7 -= 72;
        sub_100D6FED4((uint64_t)(a2 + 2), v7);
      }
      while (v7 != v8);
    }
    a2[1] = v8;
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * from CLCyclingDevice ORDER BY start_time ASC");
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
}

void sub_100D6D2CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100D6D0DC((uint64_t)va);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_1019DB560(v3 - 72);
  _Unwind_Resume(a1);
}

uint64_t sub_100D6D33C(uint64_t *a1)
{
  uint64_t result = sub_10014C3C0(a1[10]);
  if (result)
  {
    sub_1005F7B0C(a1[10], "CLCyclingDevice", (const char **)&off_1022F5B38, (const std::string::value_type **)&off_102474410, 0);
    uint64_t result = sub_100601D1C(a1[10], (uint64_t)"DELETE FROM CLCyclingDevice WHERE power_meter_id < 0");
    a1[47] = result;
    a1[48] = v3;
  }
  return result;
}

uint64_t sub_100D6D3A0(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM CLCyclingDevice");
  }
  return result;
}

void sub_100D6D450(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D6D468(uint64_t a1)
{
  return sub_100D6D3A0(a1 - 72);
}

void sub_100D6D478(uint64_t a1, uint64_t a2)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"INSERT INTO CLCyclingDevice (start_time, power_meter_id, manufacturer, serial_number) VALUES (?, ?, ?, ?)");
  }
  if (qword_1024192F0 != -1) {
    dispatch_once(&qword_1024192F0, &stru_1022F5C58);
  }
  uint64_t v4 = qword_1024192F8;
  if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = *(void *)(a2 + 24);
    uint64_t v6 = *(void *)(a2 + 8);
    int v7 = *(_DWORD *)(a2 + 16);
    if (*(char *)(a2 + 47) >= 0) {
      uint64_t v5 = a2 + 24;
    }
    uint64_t v8 = a2 + 48;
    if (*(char *)(a2 + 71) < 0) {
      uint64_t v8 = *(void *)(a2 + 48);
    }
    buf[0] = 134349826;
    *(void *)&buf[1] = v6;
    __int16 v11 = 1026;
    int v12 = v7;
    __int16 v13 = 2082;
    uint64_t v14 = v5;
    __int16 v15 = 2082;
    uint64_t v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "CLCyclingDeviceDb, database isn't available for entry with startTime, %{public}f, power meter id, %{public}d, manufacturer, %{public}s, serial number, %{public}s", (uint8_t *)buf, 0x26u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_1022F5C58);
    }
    int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLCyclingDeviceDb::insertRecordUL(const CLCyclingDeviceDbRow &, BOOL)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
}

void sub_100D6D8D8(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D6D91C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 120))(a1, a2, 0);
}

uint64_t sub_100D6D944()
{
  return 0;
}

uint64_t sub_100D6D94C(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM CLCyclingDevice ORDER BY id DESC LIMIT 1");
  }
  return 2;
}

void sub_100D6D9E8(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D6DA00(void *a1)
{
  uint64_t v3 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17[0]) < 0)
  {
    uint64_t v10 = v16[1];
    operator delete(v16[0]);
    if (v10)
    {
LABEL_3:
      if (sub_100082064(a1 + 9))
      {
        sub_10010F274((uint64_t)v16);
        uint64_t v4 = sub_100132EFC(v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0) {
          uint64_t v5 = __p;
        }
        else {
          uint64_t v5 = (void **)__p[0];
        }
        if ((v14 & 0x80u) == 0) {
          uint64_t v6 = v14;
        }
        else {
          uint64_t v6 = (uint64_t)__p[1];
        }
        int v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
        sub_100132EFC(v7, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v8 = a1[10];
        std::stringbuf::str();
        if ((v14 & 0x80u) == 0) {
          int v9 = __p;
        }
        else {
          int v9 = (void **)__p[0];
        }
        sub_10014D518(v8, (uint64_t)v9);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17[0]))
  {
    goto LABEL_3;
  }
  sub_101A8C97C(v3);
  uint64_t v15 = 0;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  *(void **)((char *)v16
  v17[0] = v11;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return 2;
}

void sub_100D6DD94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_100D6DE24(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_100D70410(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022F5D90);
  }
  uint64_t v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)__int16 v13 = 0;
    *(_WORD *)&void v13[4] = 2082;
    *(void *)&v13[6] = "";
    __int16 v14 = 2082;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022F5D90);
    }
    int v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)__int16 v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022F5D90);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLCyclingDeviceDbRow, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = CLCyclingDeviceDbRow, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_100D6E63C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *sub_100D6E670(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v5 = *a3;
  *(_DWORD *)(a2 + 16) = *((_DWORD *)a3 + 4);
  *(_OWORD *)a2 = v5;
  std::string::operator=((std::string *)(a2 + 24), (const std::string *)a3 + 1);

  return std::string::operator=((std::string *)(a2 + 48), (const std::string *)a3 + 2);
}

uint64_t sub_100D6E6C8(uint64_t a1)
{
  return sub_100D6DE24(a1 - 72);
}

void sub_100D6E6D0(id a1)
{
  qword_1024192F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CyclingPower");
}

void sub_100D6E700(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100D6E730(void *a1, uint64_t *a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v20);
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
    if (HIBYTE(v21)) {
      goto LABEL_3;
    }
LABEL_20:
    uint64_t v15 = (_Unwind_Exception *)sub_101A8CAEC(v4);
    sub_100D6D0DC((uint64_t)__p);
    uint64_t v16 = v19;
    uint64_t v19 = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    sub_101A129A8((uint64_t)v20);
    _Unwind_Resume(v15);
  }
  __int16 v14 = v20[1];
  operator delete(v20[0]);
  if (!v14) {
    goto LABEL_20;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    uint64_t v7 = *a2;
    uint64_t v6 = a2[1];
    if (v6 != *a2)
    {
      do
      {
        v6 -= 72;
        sub_100D6FED4((uint64_t)(a2 + 2), v6);
      }
      while (v6 != v7);
    }
    a2[1] = v7;
    sub_10010F274((uint64_t)v20);
    uint64_t v8 = sub_100132EFC(&v21, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v18 & 0x80u) == 0) {
      int v9 = __p;
    }
    else {
      int v9 = (void **)__p[0];
    }
    if ((v18 & 0x80u) == 0) {
      uint64_t v10 = v18;
    }
    else {
      uint64_t v10 = (uint64_t)__p[1];
    }
    uint64_t v11 = sub_100132EFC(v8, (uint64_t)v9, v10);
    sub_100132EFC(v11, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v18 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v12 = a1[10];
    std::stringbuf::str();
    if ((v18 & 0x80u) == 0) {
      __int16 v13 = __p;
    }
    else {
      __int16 v13 = (void **)__p[0];
    }
    sub_10014D518(v12, (uint64_t)v13);
  }
  return result;
}

id *sub_100D6EB38(uint64_t *a1, long long *a2, char a3)
{
  v33[0] = (id)os_transaction_create();
  v33[1] = 0;
  if (*((double *)a1 + 29) <= 0.0
    || !(*(unsigned int (**)(uint64_t *, uint64_t *, long long *))(*a1 + 136))(a1, a1 + 28, a2))
  {
    if ((a3 & 1) == 0) {
      sub_10002B640(a1[10]);
    }
    *(_OWORD *)long long __p = 0u;
    long long v32 = 0u;
    *(_OWORD *)uint64_t v30 = 0u;
    int v6 = (*(uint64_t (**)(uint64_t *, char *))(*a1 + 104))(a1, v28);
    if (v6 != 1)
    {
      if (v6)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022F5D90);
        }
        __int16 v14 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022F5D90);
          }
          LOWORD(v34) = 0;
          uint64_t v15 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLCyclingDeviceDbRow, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLCyclingDeviceDbRow, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
          if (v15 != (char *)buf) {
            free(v15);
          }
        }
LABEL_43:
        if (SHIBYTE(v32) < 0) {
          operator delete(__p[1]);
        }
        if (SHIBYTE(__p[0]) < 0)
        {
          operator delete(v30[0]);
          if (a3) {
            return sub_1000E1098(v33);
          }
        }
        else if (a3)
        {
          return sub_1000E1098(v33);
        }
        sub_100028FB4(a1[10]);
        return sub_1000E1098(v33);
      }
      double v7 = *((double *)a2 + 1);
      double v8 = v29;
      double v9 = v7 - v29;
      if (v7 - v29 < 0.0) {
        double v9 = -(v7 - v29);
      }
      if (v9 > 604800.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022F5D90);
        }
        uint64_t v10 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v11 = *((void *)a2 + 1);
          *(_DWORD *)uint64_t buf = 134349312;
          double v39 = v29;
          __int16 v40 = 2050;
          uint64_t v41 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022F5D90);
          }
          uint64_t v22 = *((void *)a2 + 1);
          int v34 = 134349312;
          double v35 = v29;
          __int16 v36 = 2050;
          uint64_t v37 = v22;
          uint64_t v23 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLCyclingDeviceDbRow, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLCyclingDeviceDbRow, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v23);
          if (v23 != (char *)buf) {
            free(v23);
          }
        }
        CLWriteStackshot();
        double v7 = *((double *)a2 + 1);
        double v8 = v29;
      }
      if (v7 < v8)
      {
        if (v8 - v7 < 10.0)
        {
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022F5D90);
          }
          uint64_t v12 = qword_102418FD8;
          if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
          {
            double v13 = *((double *)a2 + 1);
            *(_DWORD *)uint64_t buf = 134217984;
            double v39 = v13;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102418FD0 != -1) {
              dispatch_once(&qword_102418FD0, &stru_1022F5D90);
            }
            double v24 = *((double *)a2 + 1);
            int v34 = 134217984;
            double v35 = v24;
            long long v25 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLCyclingDeviceDbRow, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLCyclingDeviceDbRow, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v25);
            if (v25 != (char *)buf) {
              free(v25);
            }
          }
          (*(void (**)(uint64_t *, long long *))(*a1 + 88))(a1, a2);
          goto LABEL_42;
        }
        double v16 = v7 - v8;
        double v17 = *((float *)a1 + 34);
        if (qword_102418FD0 != -1)
        {
          double v27 = *((float *)a1 + 34);
          dispatch_once(&qword_102418FD0, &stru_1022F5D90);
          double v17 = v27;
        }
        double v18 = v16 - v17;
        uint64_t v19 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t buf = 134217984;
          double v39 = v18;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022F5D90);
          }
          int v34 = 134217984;
          double v35 = v18;
          char v26 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLCyclingDeviceDbRow, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLCyclingDeviceDbRow, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v26);
          if (v26 != (char *)buf) {
            free(v26);
          }
        }
        (*(void (**)(uint64_t *, double))(*a1 + 96))(a1, v18);
      }
      (*(void (**)(uint64_t *, char *, uint64_t *, long long *))(*a1 + 144))(a1, v28, a1 + 28, a2);
    }
    (*(void (**)(uint64_t *, long long *, uint64_t))(*a1 + 120))(a1, a2, 1);
LABEL_42:
    long long v20 = *a2;
    *((_DWORD *)a1 + 60) = *((_DWORD *)a2 + 4);
    *((_OWORD *)a1 + 14) = v20;
    std::string::operator=((std::string *)(a1 + 31), (const std::string *)a2 + 1);
    std::string::operator=((std::string *)(a1 + 34), (const std::string *)a2 + 2);
    goto LABEL_43;
  }
  (*(void (**)(uint64_t *, uint64_t *, long long *))(*a1 + 72))(a1, a1 + 28, a2);
  return sub_1000E1098(v33);
}

void sub_100D6F358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_100D6D0DC((uint64_t)va);
  sub_1000E1098((id *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_100D6F390(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v13 = (_Unwind_Exception *)sub_101A8CC5C(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  uint64_t v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    int v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    uint64_t v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_100D6F704(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A8CDCC(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    uint64_t v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    uint64_t v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      uint64_t v9 = __p;
    }
    else {
      uint64_t v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_100D6FA30(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A8CF3C(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    uint64_t v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_100D6FD54(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100D6FD84(void *a1)
{
  uint64_t v2 = a1 + 5;
  uint64_t v3 = (void **)a1[1];
  uint64_t v4 = (void **)a1[2];
  if (v4 == v3)
  {
    uint64_t v4 = (void **)a1[1];
  }
  else
  {
    unint64_t v5 = a1[4];
    uint64_t v6 = &v3[v5 / 0x38];
    uint64_t v7 = (uint64_t)*v6 + 72 * (v5 % 0x38);
    unint64_t v8 = (unint64_t)v3[(a1[5] + v5) / 0x38] + 72 * ((a1[5] + v5) % 0x38);
    if (v7 != v8)
    {
      do
      {
        sub_100D6FED4((uint64_t)v2, v7);
        v7 += 72;
        if (v7 - (void)*v6 == 4032)
        {
          uint64_t v9 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != v8);
      uint64_t v3 = (void **)a1[1];
      uint64_t v4 = (void **)a1[2];
    }
  }
  *uint64_t v2 = 0;
  unint64_t v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      uint64_t v4 = (void **)a1[2];
      uint64_t v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      unint64_t v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 28;
  }
  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 56;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    unsigned __int8 v13 = *v3++;
    operator delete(v13);
  }

  return sub_1000D7EB4((uint64_t)a1);
}

void sub_100D6FED4(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 71) < 0) {
    operator delete(*(void **)(a2 + 48));
  }
  if (*(char *)(a2 + 47) < 0)
  {
    uint64_t v3 = *(void **)(a2 + 24);
    operator delete(v3);
  }
}

uint64_t sub_100D6FF2C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

void sub_100D6FFBC(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

unsigned char *sub_100D6FFEC(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v5 = *a3;
  *(_DWORD *)(a2 + 16) = *((_DWORD *)a3 + 4);
  *(_OWORD *)a2 = v5;
  uint64_t v6 = (unsigned char *)(a2 + 24);
  if (*((char *)a3 + 47) < 0)
  {
    sub_1000DC48C(v6, *((void **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v7 = *(long long *)((char *)a3 + 24);
    *(void *)(a2 + 40) = *((void *)a3 + 5);
    *(_OWORD *)uint64_t v6 = v7;
  }
  uint64_t result = (unsigned char *)(a2 + 48);
  if (*((char *)a3 + 71) < 0) {
    return sub_1000DC48C(result, *((void **)a3 + 6), *((void *)a3 + 7));
  }
  long long v9 = a3[3];
  *(void *)(a2 + 64) = *((void *)a3 + 8);
  *(_OWORD *)uint64_t result = v9;
  return result;
}

void sub_100D70084(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D700A0(uint64_t *a1, long long *a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL) {
    sub_1001D7FD4();
  }
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3);
  }
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v6 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v6 = v4;
  }
  unsigned __int8 v14 = a1 + 2;
  if (v6) {
    long long v7 = (char *)sub_10021D4B8((uint64_t)(a1 + 2), v6);
  }
  else {
    long long v7 = 0;
  }
  unint64_t v10 = v7;
  unint64_t v11 = &v7[72 * v3];
  unsigned __int8 v13 = &v7[72 * v6];
  sub_100D6FFEC((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  uint64_t v12 = v11 + 72;
  sub_100D701C8(a1, &v10);
  uint64_t v8 = a1[1];
  sub_100D70394(&v10);
  return v8;
}

void sub_100D701B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100D70394((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D701C8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100D70240((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100D70240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  int v14[2] = &v17;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 72);
      *(_DWORD *)(v9 - 56) = *(_DWORD *)(a3 - 56);
      *(_OWORD *)(v9 - 72) = v10;
      long long v11 = *(_OWORD *)(a3 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v11;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 48) = 0;
      long long v12 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v12;
      v9 -= 72;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 72;
      a3 -= 72;
    }
    while (a3 != a5);
    *((void *)&v17 + 1) = v9;
  }
  char v15 = 1;
  sub_100D70308((uint64_t)v14);
  return a6;
}

uint64_t sub_100D70308(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100D70340((uint64_t *)a1);
  }
  return a1;
}

void sub_100D70340(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_100D6FED4(v3, v1);
      v1 += 72;
    }
    while (v1 != v2);
  }
}

void **sub_100D70394(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100D703C8(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 72;
    sub_100D6FED4(v4, i - 72);
  }
}

void sub_100D70410(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_100D70490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D7055C(id a1)
{
  qword_1024812D8 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLDMVisionServiceSilo"];
}

void sub_100D705D4(id a1)
{
  sub_100103240();
  if (sub_10016CCBC()) {
    BOOL v1 = sub_10125D0BC() != 0;
  }
  else {
    BOOL v1 = 0;
  }
  byte_1024812E8 = v1;
}

void sub_100D70F98()
{
}

id sub_100D70FC4(uint64_t a1, void *a2)
{
  return _[a2 handleDeviceMotionData:a1];
}

void sub_100D70FD0(uint64_t a1, _DWORD *a2, uint64_t a3, void *a4)
{
  if (!*a2) {
    [a4 handleGeomagneticModelData:];
  }
}

void *sub_100D7157C(void *result)
{
  *uint64_t result = off_1022F5E40;
  return result;
}

void sub_100D715E8(id a1)
{
  qword_102419088 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

void sub_100D71618(void *a1)
{
  *a1 = off_1022F5E40;
  operator delete();
}

void sub_100D71720(id a1)
{
  if (NSClassFromString(@"RTRoutineManager")
    && [+[NSFileManager defaultManager](NSFileManager, "defaultManager") fileExistsAtPath:+[CLRoutineMonitor bundlePath]]&& (sub_10074056C() & 1) == 0)
  {
    byte_102481310 = 1;
  }
}

void sub_100D7183C(id a1)
{
  qword_102481320 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLRoutineMonitorSilo"];
}

void sub_100D718B4(id a1)
{
  BOOL v1 = +[NSFileManager defaultManager];
  uint64_t v2 = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 0x408uLL, 0);
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = [(NSArray *)v2 countByEnumeratingWithState:&v10 objects:v18 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    while (2)
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = [*(id *)(*((void *)&v10 + 1) + 8 * i) stringByAppendingPathComponent:@"LocationBundles/Routine.bundle"];
        if ([(NSFileManager *)v1 fileExistsAtPath:v7])
        {
          if (qword_102419550 != -1) {
            dispatch_once(&qword_102419550, &stru_1022F6020);
          }
          uint64_t v8 = qword_102419558;
          if (os_log_type_enabled((os_log_t)qword_102419558, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint64_t buf = 138412290;
            id v17 = v7;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Bundle path for LocationBundles/Routine.bundle found %@", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419550 != -1) {
              dispatch_once(&qword_102419550, &stru_1022F6020);
            }
            int v14 = 138412290;
            id v15 = v7;
            uint64_t v9 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "+[CLRoutineMonitor bundlePath]_block_invoke", "%s\n", v9);
            if (v9 != (char *)buf) {
              free(v9);
            }
          }
          qword_102481330 = (uint64_t)[v7 copy];
          return;
        }
      }
      id v4 = [(NSArray *)v2 countByEnumeratingWithState:&v10 objects:v18 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
}

void sub_100D7238C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Block_object_dispose(&a22, 8);
  _Unwind_Resume(a1);
}

id sub_100D72440(uint64_t a1)
{
  return _[*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) onWakeRoutinedTimer];
}

id sub_100D72450(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v4 = *a2;
  long long v5 = *(_OWORD *)(a3 + 16);
  v7[0] = *(_OWORD *)a3;
  v7[1] = v5;
  _DWORD v7[2] = *(_OWORD *)(a3 + 32);
  uint64_t v8 = *(void *)(a3 + 48);
  return [a4 onVdrNotification:v4 data:v7];
}

void sub_100D72498(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v6 = *a2;
  sub_100089AE0((char *)v7, (long long *)a3);
  uint64_t v21 = *(void *)(a3 + 184);
  [a4 onClientManagerNotification:v6 data:v7];
  if (v20 < 0) {
    operator delete(__p);
  }
  if (v18 < 0) {
    operator delete(v17);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v14 < 0) {
    operator delete(v13);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
}

void sub_100D72564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_100D727F0(uint64_t a1, void *a2)
{
  id v3 = [a2 unsignedIntegerValue];
  id v4 = [*(id *)(a1 + 32) routineManager];

  return [v4 stopMonitoringScenarioTriggerOfType:v3];
}

id sub_100D72A50(uint64_t a1, uint64_t a2)
{
  id v4 = [[objc_msgSend(*(id *)(a1 + 32), "universe") silo];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_100D72ADC;
  _OWORD v7[3] = &unk_10229FEB0;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v7[4] = a2;
  void v7[5] = v5;
  return [v4 async:v7];
}

id sub_100D72ADC(uint64_t a1)
{
  if (qword_102419550 != -1) {
    dispatch_once(&qword_102419550, &stru_1022F6020);
  }
  uint64_t v2 = qword_102419558;
  if (os_log_type_enabled((os_log_t)qword_102419558, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    v5[0] = 68289283;
    v5[1] = 0;
    __int16 v6 = 2082;
    id v7 = "";
    __int16 v8 = 2113;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"received place inferences for cache\", \"placeInferences\":%{private, location:escape_only}@}", (uint8_t *)v5, 0x1Cu);
  }
  [objc_msgSend(*(id *)(a1 + 40), "cachedPlaceInferences") removeAllObjects];
  return [(*(id *)(a1 + 40)) cachedPlaceInferences addObjectsFromArray:*(void *)(a1 + 32)];
}

id sub_100D72E70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = [objc_msgSend(*(id *)(a1 + 32), "universe") silo];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_100D72F0C;
  void v8[3] = &unk_10229FF28;
  uint64_t v8[4] = a2;
  v8[5] = a3;
  void v8[6] = *(void *)(a1 + 32);
  return [v6 async:v8];
}

void sub_100D72F0C(uint64_t a1)
{
  if (qword_102419550 != -1) {
    dispatch_once(&qword_102419550, &stru_1022F6020);
  }
  uint64_t v2 = qword_102419558;
  if (os_log_type_enabled((os_log_t)qword_102419558, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    *(_DWORD *)uint64_t buf = 138412546;
    uint64_t v24 = v3;
    __int16 v25 = 2112;
    uint64_t v26 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#slv received visit from routined, visit, %@, error, %@", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419550 != -1) {
      dispatch_once(&qword_102419550, &stru_1022F6020);
    }
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    int v19 = 138412546;
    uint64_t v20 = v11;
    __int16 v21 = 2112;
    uint64_t v22 = v12;
    long long v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLRoutineMonitor startMonitoringVisitsForClient:]_block_invoke", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  if (!*(void *)(a1 + 40))
  {
    if (*(void *)(a1 + 32))
    {
      id v5 = [objc_alloc((Class)CLVisit) initWithVisit:*(void *)(a1 + 32)];
      long long v14 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      id v6 = [*(id *)(a1 + 48) visitClients];
      id v7 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v7)
      {
        id v8 = v7;
        uint64_t v9 = *(void *)v15;
        do
        {
          for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v15 != v9) {
              objc_enumerationMutation(v6);
            }
            [*(id *)(*((void *)&v14 + 1) + 8 * i) onVisit:v5];
          }
          id v8 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
        }
        while (v8);
      }
    }
  }
}

id sub_100D735B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = [[objc_msgSend(*(id *)(a1 + 32), "universe") silo];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_100D73650;
  void v8[3] = &unk_10229FF28;
  uint64_t v8[4] = a2;
  v8[5] = a3;
  void v8[6] = *(void *)(a1 + 32);
  return [v6 async:v8];
}

void sub_100D73650(uint64_t a1)
{
  if (qword_102419550 != -1) {
    dispatch_once(&qword_102419550, &stru_1022F6020);
  }
  uint64_t v2 = qword_102419558;
  if (os_log_type_enabled((os_log_t)qword_102419558, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    *(_DWORD *)uint64_t buf = 138412546;
    uint64_t v24 = v3;
    __int16 v25 = 2112;
    uint64_t v26 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#slv Received leeched visit from routined, visit, %@, error, %@", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419550 != -1) {
      dispatch_once(&qword_102419550, &stru_1022F6020);
    }
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    int v19 = 138412546;
    uint64_t v20 = v11;
    __int16 v21 = 2112;
    uint64_t v22 = v12;
    long long v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLRoutineMonitor startLeechingVisitsForClient:]_block_invoke", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  if (!*(void *)(a1 + 40))
  {
    if (*(void *)(a1 + 32))
    {
      id v5 = [objc_alloc((Class)CLVisit) initWithVisit:*(void *)(a1 + 32)];
      long long v14 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      id v6 = [*(id *)(a1 + 48) leechClients];
      id v7 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v7)
      {
        id v8 = v7;
        uint64_t v9 = *(void *)v15;
        do
        {
          for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v15 != v9) {
              objc_enumerationMutation(v6);
            }
            [*(id *)(*((void *)&v14 + 1) + 8 * i) onVisit:v5];
          }
          id v8 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
        }
        while (v8);
      }
    }
  }
}

id sub_100D73CC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = [[[*(id *)(a1 + 32) universe] silo];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_100D73D5C;
  void v8[3] = &unk_10229FF28;
  uint64_t v8[4] = a2;
  v8[5] = a3;
  void v8[6] = *(void *)(a1 + 32);
  return [v6 async:v8];
}

void sub_100D73D5C(uint64_t a1)
{
  if (qword_102419550 != -1) {
    dispatch_once(&qword_102419550, &stru_1022F6020);
  }
  uint64_t v2 = qword_102419558;
  if (os_log_type_enabled((os_log_t)qword_102419558, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    *(_DWORD *)uint64_t buf = 138412546;
    uint64_t v30 = v3;
    __int16 v31 = 2112;
    uint64_t v32 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#slv Received leeched low confidence visit from routined, visit, %@, error, %@", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419550 != -1) {
      dispatch_once(&qword_102419550, &stru_1022F6020);
    }
    uint64_t v17 = *(void *)(a1 + 32);
    uint64_t v18 = *(void *)(a1 + 40);
    int v25 = 138412546;
    uint64_t v26 = v17;
    __int16 v27 = 2112;
    uint64_t v28 = v18;
    int v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLRoutineMonitor startLeechingLowConfidenceVisitsForClient:]_block_invoke", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  id v5 = *(void **)(a1 + 40);
  if (v5)
  {
    id v6 = [v5 domain];
    if ([v6 isEqualToString:RTErrorDomain]
      && [*(id *)(a1 + 40) code] != (id)1)
    {
      if (qword_102419550 != -1) {
        dispatch_once(&qword_102419550, &stru_1022F6020);
      }
      id v7 = qword_102419558;
      if (os_log_type_enabled((os_log_t)qword_102419558, OS_LOG_TYPE_ERROR))
      {
        uint64_t v8 = *(void *)(a1 + 40);
        *(_DWORD *)uint64_t buf = 138412290;
        uint64_t v30 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#slv Got unexpceted error from routined, error, %@", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419550 != -1) {
          dispatch_once(&qword_102419550, &stru_1022F6020);
        }
        uint64_t v9 = *(void *)(a1 + 40);
        int v25 = 138412290;
        uint64_t v26 = v9;
        char v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "-[CLRoutineMonitor startLeechingLowConfidenceVisitsForClient:]_block_invoke", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
    }
  }
  else
  {
    id v11 = [objc_alloc((Class)CLVisit) initWithVisit:*(void *)(a1 + 32)];
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    id v12 = [*(id *)(a1 + 48) lowConfidenceVisitLeechClients];
    id v13 = [v12 countByEnumeratingWithState:&v20 objects:v24 count:16];
    if (v13)
    {
      id v14 = v13;
      uint64_t v15 = *(void *)v21;
      do
      {
        for (uint64_t i = 0; i != v14; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v21 != v15) {
            objc_enumerationMutation(v12);
          }
          [*(id *)(*((void *)&v20 + 1) + 8 * i) onLowConfidenceVisit:v11];
        }
        id v14 = [v12 countByEnumeratingWithState:&v20 objects:v24 count:16];
      }
      while (v14);
    }
  }
}

void sub_100D74F84(id a1)
{
  sub_1000C7F88(&v3);
  int v5 = 0;
  int v1 = sub_10006EF84(v3, "CLTSPBatchSizeInertialDataSent", &v5);
  uint64_t v2 = v5;
  if (!v1) {
    uint64_t v2 = 60;
  }
  qword_102474540 = v2;
  if (v4) {
    sub_1000DB0A0(v4);
  }
}

void sub_100D74FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

id sub_100D75F58(uint64_t a1)
{
  [objc_msgSend(*(id *)(a1 + 32), "universe") silo];
  if (qword_102419550 != -1) {
    dispatch_once(&qword_102419550, &stru_1022F6020);
  }
  uint64_t v2 = qword_102419558;
  if (os_log_type_enabled((os_log_t)qword_102419558, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Connection interrupted", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419550 != -1) {
      dispatch_once(&qword_102419550, &stru_1022F6020);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLRoutineMonitor listener:shouldAcceptNewConnection:]_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  [*(id *)(a1 + 32) setUpdating:0];
  return [*(id *)(a1 + 32) setConnection:0];
}

id sub_100D76110(uint64_t a1)
{
  [objc_msgSend(*(id *)(a1 + 32), "universe") silo];
  if (qword_102419550 != -1) {
    dispatch_once(&qword_102419550, &stru_1022F6020);
  }
  uint64_t v2 = qword_102419558;
  if (os_log_type_enabled((os_log_t)qword_102419558, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Connection invalidated", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419550 != -1) {
      dispatch_once(&qword_102419550, &stru_1022F6020);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLRoutineMonitor listener:shouldAcceptNewConnection:]_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  [*(id *)(a1 + 32) setUpdating:0];
  return [*(id *)(a1 + 32) setConnection:0];
}

uint64_t sub_100D767FC(uint64_t a1)
{
  if (qword_102419550 != -1) {
    dispatch_once(&qword_102419550, &stru_1022F6020);
  }
  uint64_t v2 = qword_102419558;
  if (os_log_type_enabled((os_log_t)qword_102419558, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    __int16 v5 = 2082;
    id v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#location #routine sendLocations replied\"}", (uint8_t *)v4, 0x12u);
  }
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_100D77504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = [objc_msgSend(*(id *)(a1 + 32), "universe") silo];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_100D775A0;
  void v8[3] = &unk_1022C6138;
  uint64_t v8[4] = a2;
  v8[5] = a3;
  long long v9 = *(_OWORD *)(a1 + 32);
  return [v6 async:v8];
}

void sub_100D775A0(uint64_t a1)
{
  if (qword_102419550 != -1) {
    dispatch_once(&qword_102419550, &stru_1022F6020);
  }
  uint64_t v2 = qword_102419558;
  if (os_log_type_enabled((os_log_t)qword_102419558, OS_LOG_TYPE_INFO))
  {
    id v3 = [*(id *)(a1 + 32) type];
    uint64_t v4 = *(void *)(a1 + 40);
    *(_DWORD *)uint64_t buf = 134218242;
    id v29 = v3;
    __int16 v30 = 2112;
    uint64_t v31 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#scenarioTrigger Received trigger of type %lu from routined, error %@", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419550 != -1) {
      dispatch_once(&qword_102419550, &stru_1022F6020);
    }
    id v16 = [*(id *)(a1 + 32) type];
    uint64_t v17 = *(void *)(a1 + 40);
    int v24 = 134218242;
    id v25 = v16;
    __int16 v26 = 2112;
    uint64_t v27 = v17;
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLRoutineMonitor startMonitoringScenarioTriggerOfType:forClient:]_block_invoke", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  __int16 v5 = *(void **)(a1 + 40);
  if (v5)
  {
    id v6 = [v5 domain];
    if ([v6 isEqualToString:RTErrorDomain]
      && [*(id *)(a1 + 40) code] != (id)1)
    {
      if (qword_102419550 != -1) {
        dispatch_once(&qword_102419550, &stru_1022F6020);
      }
      id v7 = qword_102419558;
      if (os_log_type_enabled((os_log_t)qword_102419558, OS_LOG_TYPE_ERROR))
      {
        uint64_t v8 = *(void **)(a1 + 40);
        *(_DWORD *)uint64_t buf = 138412290;
        id v29 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#scenarioTrigger Got error from routined, error, %@", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419550 != -1) {
          dispatch_once(&qword_102419550, &stru_1022F6020);
        }
        long long v9 = *(void **)(a1 + 40);
        int v24 = 138412290;
        id v25 = v9;
        char v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "-[CLRoutineMonitor startMonitoringScenarioTriggerOfType:forClient:]_block_invoke", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
    }
  }
  else
  {
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    id v11 = [[objc_msgSend(*(id *)(a1 + 48), "scenarioTriggerClients") objectForKey:*(void *)(a1 + 56)];
    id v12 = [v11 countByEnumeratingWithState:&v19 objects:v23 count:16];
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = *(void *)v20;
      do
      {
        for (uint64_t i = 0; i != v13; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v20 != v14) {
            objc_enumerationMutation(v11);
          }
          [*(id *)(*((void *)&v19 + 1) + 8 * i) onScenarioTrigger:*(void *)(a1 + 32)];
        }
        id v13 = [v11 countByEnumeratingWithState:&v19 objects:v23 count:16];
      }
      while (v13);
    }
  }
}

id sub_100D77F0C(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022F6040);
    }
    id v6 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = 68289282;
      *(_WORD *)id v16 = 2082;
      *(void *)&void v16[2] = "";
      *(_WORD *)&v16[10] = 2114;
      *(void *)&v16[12] = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#storedLocations: CoreRoutine error while getting stored visits.\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v15, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022F6040);
      }
    }
    uint64_t v7 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      uint64_t v15 = 68289282;
      *(_WORD *)id v16 = 2082;
      *(void *)&void v16[2] = "";
      *(_WORD *)&v16[10] = 2114;
      *(void *)&v16[12] = a3;
      uint64_t v8 = "#storedLocations: CoreRoutine error while getting stored visits.";
      long long v9 = "{\"msg%{public}.0s\":\"#storedLocations: CoreRoutine error while getting stored visits.\", \"Error\":%{public"
           ", location:escape_only}@}";
      char v10 = v7;
LABEL_17:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v8, v9, (uint8_t *)&v15, 0x1Cu);
    }
  }
  else if (a2)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022F6040);
    }
    id v11 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = 68289282;
      *(_WORD *)id v16 = 2082;
      *(void *)&void v16[2] = "";
      *(_WORD *)&v16[10] = 2050;
      *(void *)&v16[12] = [a2 count];
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#storedLocations: CoreRoutine returned.\", \"Visits\":%{public}ld}", (uint8_t *)&v15, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022F6040);
      }
    }
    uint64_t v12 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      id v13 = [a2 count];
      uint64_t v15 = 68289282;
      *(_WORD *)id v16 = 2082;
      *(void *)&void v16[2] = "";
      *(_WORD *)&v16[10] = 2050;
      *(void *)&v16[12] = v13;
      uint64_t v8 = "#storedLocations: CoreRoutine returned.";
      long long v9 = "{\"msg%{public}.0s\":\"#storedLocations: CoreRoutine returned.\", \"Visits\":%{public}ld}";
      char v10 = v12;
      goto LABEL_17;
    }
  }
  return [*(id *)(a1 + 32) zipperedStoredLocationsBetweenStartTime:a2 endTime:*(void *)(a1 + 40) apartFromEachOther:*(void *)(a1 + 48) lyingWithinTimeIntervals:*(double *)(a1 + 56) custeredWithVisits:*(double *)(a1 + 64) withReply:*(double *)(a1 + 72) v15:v15];
}

void sub_100D786A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v51 - 224), 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a51, 8);
  _Unwind_Resume(a1);
}

void sub_100D7870C(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  if (a3)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022F6040);
    }
    __int16 v5 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      int v57 = 68289282;
      int v58 = 0;
      __int16 v59 = 2082;
      int v60 = "";
      __int16 v61 = 2114;
      id v62 = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#storedLocations: CoreRoutine error while getting stored locations.\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v57, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022F6040);
      }
    }
    id v6 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      int v57 = 68289282;
      int v58 = 0;
      __int16 v59 = 2082;
      int v60 = "";
      __int16 v61 = 2114;
      id v62 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#storedLocations: CoreRoutine error while getting stored locations.", "{\"msg%{public}.0s\":\"#storedLocations: CoreRoutine error while getting stored locations.\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v57, 0x1Cu);
    }
    return;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022F6040);
  }
  char v10 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    int v57 = 68289282;
    int v58 = 0;
    __int16 v59 = 2082;
    int v60 = "";
    __int16 v61 = 2050;
    id v62 = [a2 count];
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#storedLocations: enumerateStoredLocationsWithOptions\", \"LocationCount\":%{public}ld}", (uint8_t *)&v57, 0x1Cu);
  }
  if ([a2 count])
  {
    uint64_t v11 = 0;
    int v12 = 0;
    while (1)
    {
      unint64_t v13 = *(int *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
      if ((unint64_t)[*(id *)(a1 + 32) count] <= v13) {
        goto LABEL_66;
      }
      [objc_msgSend(a2, "objectAtIndexedSubscript:", v11) horizontalAccuracy];
      double v15 = v14;
      [objc_msgSend(objc_msgSend(objc_msgSend(a2, "objectAtIndexedSubscript:", v11), "timestamp"), "timeIntervalSinceReferenceDate");
      double v17 = v16;
      [objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", *(int *)(*(void *)(*(void *)(a1 + 64) + 8) + 24)) start];
      double v19 = v18;
      [objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", *(int *)(*(void *)(*(void *)(a1 + 64) + 8) + 24)) end];
      if (v17 <= v20) {
        break;
      }
      if (*(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24))
      {
        int v21 = -2;
        double v22 = 0.0;
      }
      else
      {
        uint64_t v23 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
        if (v23) {
          double v22 = v20;
        }
        else {
          double v22 = 0.0;
        }
        if (v23) {
          int v21 = -1;
        }
        else {
          int v21 = -2;
        }
      }
      ++*(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
      *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 0;
LABEL_41:
      if (v21 >= -1)
      {
        *(double *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = v22;
        while (1)
        {
          unint64_t v36 = *(int *)(*(void *)(*(void *)(a1 + 96) + 8) + 24);
          if ((unint64_t)[*(id *)(a1 + 40) count] <= v36) {
            break;
          }
          *(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) = [*(id *)(a1 + 40) objectAtIndexedSubscript:*(int *)(*(void *)(*(void *)(a1 + 96)+ 8)+ 24)];
          if ([*(id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) entry])
          {
            if ([*(id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) exit])
            {
              [objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40), "exit") timeIntervalSinceReferenceDate];
              if (v37 + *(double *)(a1 + 120) >= v22) {
                break;
              }
            }
          }
          *(unsigned char *)(*(void *)(*(void *)(a1 + 112) + 8) + 24) = 0;
          ++*(_DWORD *)(*(void *)(*(void *)(a1 + 96) + 8) + 24);
        }
        id v38 = [*(id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) entry];
        id v39 = [*(id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) exit];
        if (v38)
        {
          [v38 timeIntervalSinceReferenceDate];
          double v41 = v40 - *(double *)(a1 + 120);
          if (v39) {
            goto LABEL_50;
          }
LABEL_52:
          [+[NSDate distantFuture] timeIntervalSinceReferenceDate];
        }
        else
        {
          [+[NSDate distantFuture] timeIntervalSinceReferenceDate];
          double v41 = v43;
          if (!v39) {
            goto LABEL_52;
          }
LABEL_50:
          [v39 timeIntervalSinceReferenceDate];
          double v20 = v42 + *(double *)(a1 + 120);
        }
        if (v22 > v41 && v22 < v20)
        {
          if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 112) + 8) + 24))
          {
            long long v48 = [CLUsageReportCoordinate alloc];
            [objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40), "location") latitude];
            double v50 = v49;
            [objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40), "location") longitude];
            int v52 = [(CLUsageReportCoordinate *)v48 initWithLatitude:v50 longitude:v51];
            if (v52)
            {
              [*(id *)(a1 + 48) addObject:v52];
              *(unsigned char *)(*(void *)(*(void *)(a1 + 112) + 8) + 24) = 1;
            }
          }
        }
        else
        {
          if (v21 < 0)
          {
            [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) coordinate:v20];
            double v46 = v53;
            id v47 = *(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
          }
          else
          {
            [objc_msgSend(a2, "objectAtIndexedSubscript:", v21, v20) coordinate];
            double v46 = v45;
            id v47 = [a2 objectAtIndexedSubscript:v21];
          }
          [v47 coordinate];
          int v55 = [[CLUsageReportCoordinate alloc] initWithLatitude:v46 longitude:v54];
          if (v55) {
            [*(id *)(a1 + 56) addObject:v55];
          }
        }
      }
      uint64_t v11 = v12;
      if ((unint64_t)objc_msgSend(a2, "count", v20) <= v12) {
        goto LABEL_66;
      }
    }
    double v20 = v17 + 8.0;
    double v22 = 0.0;
    if (v17 + 8.0 >= v19
      && (double v20 = *(double *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) + *(double *)(a1 + 120), v17 >= v20))
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
      double v22 = v17;
      int v21 = v12;
    }
    else
    {
      int v21 = -2;
    }
    int v24 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
    if (v15 <= 300.0)
    {
      if (!v24) {
        goto LABEL_40;
      }
      [objc_msgSend(v24, "timestamp", v20) timeIntervalSinceReferenceDate];
      double v20 = v17 - v26;
      if (v20 <= 600.0) {
        goto LABEL_40;
      }
      [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) coordinate];
      double v28 = v27;
      double v30 = v29;
      [objc_msgSend(a2, "objectAtIndexedSubscript:", v11) coordinate];
      double v33 = sub_1000A3D9C(v28, v30, v31, v32);
      [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) horizontalAccuracy];
      double v20 = v34 + v34;
      if (v33 <= v20) {
        goto LABEL_40;
      }
      double v35 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
      if (!v35) {
        goto LABEL_40;
      }

      id v25 = 0;
    }
    else
    {
      if (v24) {

      }
      id v25 = [a2 objectAtIndexedSubscript:v11];
    }
    *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) = v25;
LABEL_40:
    ++v12;
    goto LABEL_41;
  }
LABEL_66:
  if ([*(id *)(a1 + 32) count] == (id)*(int *)(*(void *)(*(void *)(a1 + 64) + 8) + 24)) {
    *a4 = 1;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022F6040);
  }
  int v56 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    int v57 = 68289026;
    int v58 = 0;
    __int16 v59 = 2082;
    int v60 = "";
    _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#storedLocations: enumerateStoredLocationsWithOptions<finsihed>\"}", (uint8_t *)&v57, 0x12u);
  }
}

id sub_100D78E90(void *a1, unsigned int a2)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022F6040);
  }
  uint64_t v4 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    uint64_t buf = 68289282;
    __int16 v43 = 2082;
    long long v44 = "";
    __int16 v45 = 2050;
    id v46 = [a1 count];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#storedLocations: dedupe\", \"locationCount\":%{public}ld}", (uint8_t *)&buf, 0x1Cu);
  }
  id v5 = objc_alloc_init((Class)NSMutableDictionary);
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  id v6 = [a1 countByEnumeratingWithState:&v36 objects:v41 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v37;
    double v9 = 90.0;
    double v10 = 360.0;
    do
    {
      for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v37 != v8) {
          objc_enumerationMutation(a1);
        }
        int v12 = *(void **)(*((void *)&v36 + 1) + 8 * i);
        [v12 latitude];
        double v9 = fmin(v9, v13);
        [v12 longitude];
        double v10 = fmin(v10, v14);
      }
      id v7 = [a1 countByEnumeratingWithState:&v36 objects:v41 count:16];
    }
    while (v7);
  }
  else
  {
    double v9 = 90.0;
    double v10 = 360.0;
  }
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id v15 = [a1 countByEnumeratingWithState:&v32 objects:v40 count:16];
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = fmax((double)a2, 50.0);
    uint64_t v18 = *(void *)v33;
    do
    {
      for (unint64_t j = 0; j != v16; unint64_t j = (char *)j + 1)
      {
        if (*(void *)v33 != v18) {
          objc_enumerationMutation(a1);
        }
        double v20 = *(void **)(*((void *)&v32 + 1) + 8 * (void)j);
        [v20 latitude];
        double v22 = sub_1000A3D9C(v9, 0.0, v21, 0.0);
        [v20 latitude];
        double v24 = v23;
        [v20 latitude];
        double v26 = v25;
        [v20 longitude];
        double v28 = +[NSNumber numberWithLong:50000000 * (uint64_t)(v22 / (double)v17) / v17+ (uint64_t)(sub_1000A3D9C(v24, v10, v26, v27) / (double)v17)];
        if (![v5 objectForKey:v28]) {
          [v5 setObject:v20 forKey:v28];
        }
      }
      id v16 = [a1 countByEnumeratingWithState:&v32 objects:v40 count:16];
    }
    while (v16);
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022F6040);
  }
  double v29 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    id v30 = [[v5 allValues] count];
    uint64_t buf = 68289282;
    __int16 v43 = 2082;
    long long v44 = "";
    __int16 v45 = 2050;
    id v46 = v30;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#storedLocations: dedupe\", \"deduppedCount\":%{public}ld}", (uint8_t *)&buf, 0x1Cu);
  }
  return [v5 allValues];
}

void sub_100D794F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    sub_1000DB0A0(a20);
  }
  _Unwind_Resume(exception_object);
}

id sub_100D79514(uint64_t a1)
{
  if (qword_102419550 != -1) {
    dispatch_once(&qword_102419550, &stru_1022F6020);
  }
  uint64_t v2 = qword_102419558;
  if (os_log_type_enabled((os_log_t)qword_102419558, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    __int16 v5 = 2082;
    id v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#location #routine sendLocations complete\"}", (uint8_t *)v4, 0x12u);
  }
  return [(*(id *)(a1 + 32)) routineManager fetchEstimatedLocationAtDate:*(void *)(a1 + 40) handler:*(void *)(a1 + 48)];
}

void sub_100D79894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    sub_1000DB0A0(a22);
  }
  _Unwind_Resume(exception_object);
}

id sub_100D798B4(uint64_t a1)
{
  if (qword_102419550 != -1) {
    dispatch_once(&qword_102419550, &stru_1022F6020);
  }
  uint64_t v2 = qword_102419558;
  if (os_log_type_enabled((os_log_t)qword_102419558, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    __int16 v5 = 2082;
    id v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#location #routine sendLocations complete for options\"}", (uint8_t *)v4, 0x12u);
  }
  return [objc_msgSend(*(id *)(a1 + 32), "routineManager") fetchEstimatedLocationAtDate:*(void *)(a1 + 40) options:*(void *)(a1 + 48) handler:*(void *)(a1 + 56)];
}

uint64_t sub_100D79AE4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100D79C9C(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3)
  {
    if (qword_102419550 != -1) {
      dispatch_once(&qword_102419550, &stru_1022F6020);
    }
    __int16 v5 = qword_102419558;
    if (os_log_type_enabled((os_log_t)qword_102419558, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 68289026;
      int v14 = 0;
      __int16 v15 = 2082;
      id v16 = "";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#location #routine familiarityIndex error\"}", (uint8_t *)&v13, 0x12u);
    }
    (*(void (**)(double))(*(void *)(a1 + 32) + 16))(0.0);
  }
  id v6 = [a2 firstObject];
  if (qword_102419550 != -1) {
    dispatch_once(&qword_102419550, &stru_1022F6020);
  }
  id v7 = qword_102419558;
  if (os_log_type_enabled((os_log_t)qword_102419558, OS_LOG_TYPE_DEFAULT))
  {
    [v6 familiarityIndex];
    int v9 = (int)(v8 * 100.0);
    unsigned int v10 = [a2 count];
    int v13 = 68289538;
    int v14 = 0;
    __int16 v15 = 2082;
    id v16 = "";
    __int16 v17 = 1026;
    int v18 = v9;
    __int16 v19 = 1026;
    unsigned int v20 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#cms familiarityIndex\", \"pct\":%{public}d, \"count\":%{public}d}", (uint8_t *)&v13, 0x1Eu);
  }
  uint64_t v11 = *(void *)(a1 + 32);
  [v6 familiarityIndex];
  return (*(uint64_t (**)(uint64_t, void))(v11 + 16))(v11, 0);
}

void sub_100D7A1DC(id a1)
{
  qword_102419558 = (uint64_t)os_log_create("com.apple.locationd.Core", "Routine");
}

void sub_100D7A20C(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100D7A23C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_100D7A2F4(_Unwind_Exception *a1)
{
}

void sub_100D7A30C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    *uint64_t v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_100D7A3B4(_Unwind_Exception *a1)
{
}

uint64_t sub_100D7A3CC()
{
  sub_100134750(&qword_1024812F8, "RoutineMonitor");

  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024812F8, (void *)&_mh_execute_header);
}

void sub_100D7A42C()
{
}

void sub_100D7A4C4()
{
}

uint64_t sub_100D7A4E8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = off_1022F6708;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = a5;
  [a3 silo];
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 80))(a2);
  __int16 v19 = &OBJC_PROTOCOL___CLIntersiloServiceProtocol;
  [+[CLIntersiloInterface sharedInterface](CLIntersiloInterface, "sharedInterface") extendSelectorInfoWithProtocol:&OBJC_PROTOCOL___CLNotifierServiceProtocol bases:+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v19, 1)];
  int v18 = &OBJC_PROTOCOL___CLIntersiloClientProtocol;
  [+[CLIntersiloInterface sharedInterface](CLIntersiloInterface, "sharedInterface") extendSelectorInfoWithProtocol:&OBJC_PROTOCOL___CLNotifierServiceClientProtocol bases:[+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v18, 1)]];
  id v11 = [a3 silo];
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1000DC48C(__p, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)(a2 + 8);
    uint64_t v17 = *(void *)(a2 + 24);
  }
  if (v17 >= 0) {
    int v12 = __p;
  }
  else {
    int v12 = (void **)__p[0];
  }
  id v13 = +[CLIntersiloProxy proxyForRecipientObject:inSilo:recipientName:](CLIntersiloProxy, "proxyForRecipientObject:inSilo:recipientName:", v10, v11, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12, __p[0], __p[1], v17));
  *(void *)(a1 + 16) = v13;
  if (SHIBYTE(v17) < 0)
  {
    operator delete(__p[0]);
    id v13 = *(id *)(a1 + 16);
  }
  id v14 = v13;
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:[a3 silo]];
  return a1;
}

void sub_100D7A70C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D7A7E8(uint64_t a1, void *a2)
{
  if (a2)
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    uint64_t v4 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 68289283;
      int v9 = 0;
      __int16 v10 = 2082;
      id v11 = "";
      __int16 v12 = 2113;
      id v13 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Fence: Received visit from routined\", \"visit\":%{private, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
    }
    double Current = CFAbsoluteTimeGetCurrent();
    sub_100DCC200(a1 + 120, a2);
    if (*(void *)(a1 + 3000))
    {
      sub_100168850(&v8);
      sub_100AE8C58(a2, (uint64_t)&v8, Current);
      sub_100030BFC(*(void *)(a1 + 3000));
      sub_1001687EC(&v8);
    }
  }
  else
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    id v6 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
    {
      int v8 = 68289026;
      int v9 = 0;
      __int16 v10 = 2082;
      id v11 = "";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Fence: Attempting to notify nil visit\"}", (uint8_t *)&v8, 0x12u);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
    }
    id v7 = qword_1024193C8;
    if (os_signpost_enabled((os_log_t)qword_1024193C8))
    {
      int v8 = 68289026;
      int v9 = 0;
      __int16 v10 = 2082;
      id v11 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Fence: Attempting to notify nil visit", "{\"msg%{public}.0s\":\"Fence: Attempting to notify nil visit\"}", (uint8_t *)&v8, 0x12u);
    }
  }
}

void sub_100D7AA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100D7AAB4(uint64_t a1, void *a2)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022F66B8);
  }
  uint64_t v4 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 136380675;
    id v8 = [[objc_msgSend(a2, "description") UTF8String];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: received scenario trigger, %{private}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    [objc_msgSend(a2, "description") UTF8String];
    id v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::onScenarioTrigger(RTScenarioTrigger *)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    double Current = CFAbsoluteTimeGetCurrent();
    sub_100DC30B0(a1 + 120);
    if (*(void *)(a1 + 3000))
    {
      sub_100168850(buf);
      sub_100AE9120(a2, (uint64_t)buf, Current);
      sub_100030BFC(*(void *)(a1 + 3000));
      sub_1001687EC(buf);
    }
  }
}

void sub_100D7ACE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

void sub_100D7AD24(uint64_t a1, void *a2)
{
  *(void *)a1 = off_1022F64C0;
  sub_100D7C4C4(a1 + 8, "FenceMonitorNotifier", a2);
  *(void *)a1 = off_1022F6098;
  *(void *)(a1 + 8) = off_1022F62A0;
  sub_100882184(a1 + 117);
  sub_100DB90CC(a1 + 120, a1, 0);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = off_1022F6810;
  v4[1] = sub_100D82AF8;
  _DWORD v4[2] = 0;
  void v4[3] = a1;
  void v6[3] = v4;
  sub_101576408(a1 + 2064, v3, v6);
  sub_1002F8A04(v6);
  *(void *)(a1 + 2328) = 0;
  *(_OWORD *)(a1 + 2296) = 0u;
  *(_OWORD *)(a1 + 2312) = 0u;
  *(_OWORD *)(a1 + 2264) = 0u;
  *(_OWORD *)(a1 + 2280) = 0u;
  *(_OWORD *)(a1 + 2232) = 0u;
  *(_OWORD *)(a1 + 2248) = 0u;
  *(_OWORD *)(a1 + 2216) = 0u;
  *(void *)(a1 + 2336) = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)[*(id *)(a1 + 48) queue]);
  *(void *)(a1 + 2344) = 0;
  *(void *)(a1 + 2360) = 0;
  *(void *)(a1 + 2352) = 0;
  *(void *)(a1 + 2368) = [objc_msgSend(*(id *)(a1 + 40), "silo") newTimer];
  *(void *)(a1 + 2376) = 0;
  sub_100EBBEB0(a1 + 2384, (uint64_t)"FenceMonitorAlwaysOn", a1, 0.0);
  sub_100EBBEB0(a1 + 2432, (uint64_t)"FenceMonitorWatchdog", a1, 90.0);
  sub_100EBBEB0(a1 + 2480, (uint64_t)"CLFenceMonitorWifi", a1, 300.0);
  __int16 v5 = sub_10016363C();
  sub_100EBBEB0(a1 + 2528, (uint64_t)"FenceMonitorConvergingState", a1, *((double *)v5 + 9));
  *(void *)(a1 + 2576) = 0;
  *(unsigned char *)(a1 + 2592) = 0;
  *(_OWORD *)(a1 + 2608) = 0u;
  *(_DWORD *)(a1 + 2623) = 0;
  *(unsigned char *)(a1 + 2627) = 1;
  *(void *)(a1 + 2632) = 0;
  *(unsigned char *)(a1 + 2640) = 0;
  *(void *)(a1 + 2920) = 0;
  *(void *)(a1 + 2936) = 0;
  *(void *)(a1 + 2928) = 0;
  *(_DWORD *)(a1 + 2944) = 0;
  sub_1009C2DD0((void *)(a1 + 2968), *(void **)(a1 + 40));
}

void sub_100D7C09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v50 = v46[375];
  v46[375] = 0;
  if (v50) {
    (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
  }
  sub_1009C2DD4(a11);
  sub_100EBBF9C(a12);
  sub_100EBBF9C(a13);
  sub_100EBBF9C(a14);
  sub_100EBBF9C(a15);
  uint64_t v51 = v46[289];
  v46[289] = 0;
  if (v51) {
    (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
  }
  uint64_t v52 = v46[288];
  v46[288] = 0;
  if (v52) {
    (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
  }
  uint64_t v53 = v46[285];
  v46[285] = 0;
  if (v53) {
    (*(void (**)(uint64_t))(*(void *)v53 + 8))(v53);
  }
  uint64_t v54 = v46[284];
  v46[284] = 0;
  if (v54) {
    (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
  }
  uint64_t v55 = v46[283];
  v46[283] = 0;
  if (v55) {
    (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
  }
  uint64_t v56 = v46[282];
  v46[282] = 0;
  if (v56) {
    (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
  }
  uint64_t v57 = v46[281];
  v46[281] = 0;
  if (v57) {
    (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
  }
  uint64_t v58 = v46[280];
  v46[280] = 0;
  if (v58) {
    (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
  }
  uint64_t v59 = v46[279];
  v46[279] = 0;
  if (v59) {
    (*(void (**)(uint64_t))(*(void *)v59 + 8))(v59);
  }
  uint64_t v60 = v46[278];
  v46[278] = 0;
  if (v60) {
    (*(void (**)(uint64_t))(*(void *)v60 + 8))(v60);
  }
  uint64_t v61 = *v48;
  *long long v48 = 0;
  if (v61) {
    (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
  }
  sub_1015766A0(v47);
  sub_100DB91A8(a16);
  nullsub_41(a17, v62);
  sub_100D7EACC(a18);
  _Unwind_Resume(a1);
}

uint64_t sub_100D7C4C4(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_1022F6730;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_100D7C554(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D7C570(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(unsigned char *)(v1 + 2624) = 0;
  double Current = CFAbsoluteTimeGetCurrent();

  sub_100DC07C4(v1 + 120, Current);
}

void sub_100D7C5AC(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 40), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F6698);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    id v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceMonitorNotifier::onBluetoothNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F6698);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceMonitorNotifier::onBluetoothNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100D813EC(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100D7C768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

id sub_100D7C788(uint64_t a1)
{
  return sub_100D7C790(*(void *)(a1 + 32));
}

id sub_100D7C790(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022F66B8);
  }
  uint64_t v3 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#FenceMetrics #BackgroundTask metric submission handler invoked", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    id v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::onBackgroundActivityFired()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  uint64_t v4 = a1 + 2968;
  sub_1009C3538(v4, (uint64_t)buf, Current);
  AnalyticsSendEventLazy();
  return sub_1009C35F4(v4, Current, 172800.0);
}

void sub_100D7C9C0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 40), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F6698);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    id v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceMonitorNotifier::onMotionStateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F6698);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceMonitorNotifier::onMotionStateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100D81E9C(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100D7CB7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D7CB9C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 40), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F6698);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    id v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceMonitorNotifier::onDataProtectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F6698);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceMonitorNotifier::onDataProtectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100D8AE8C(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100D7CD58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D7CD78(uint64_t a1, __int32 *a2, unsigned __int8 *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 40), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F6698);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    id v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceMonitorNotifier::onStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F6698);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceMonitorNotifier::onStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100D827CC(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100D7CF34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D7CF54(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 40), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F6698);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    id v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceMonitorNotifier::onSignalEnvironmentNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F6698);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceMonitorNotifier::onSignalEnvironmentNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100D82870(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100D7D110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D7D130(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 40), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F6698);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    id v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceMonitorNotifier::onMobileAssetNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F6698);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceMonitorNotifier::onMobileAssetNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100D82914(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100D7D2EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D7D30C(uint64_t a1, int *a2, char *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 40), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F6698);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    id v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceMonitorNotifier::onCompanionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F6698);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceMonitorNotifier::onCompanionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100D816E8(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100D7D4C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D7D4E8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 40), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F6698);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    uint64_t v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceMonitorNotifier::onDarwinNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F6698);
    }
    id v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2082;
      __int16 v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceMonitorNotifier::onDarwinNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  sub_100D8258C(a4, v6, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_100D7D69C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D7D6BC(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 40), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F6698);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v6 = 1;
    uint64_t v3 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceMonitorNotifier::onDelayedTriggerTimer", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v3, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F6698);
    }
    uint64_t v4 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v8 = 0;
      __int16 v9 = 2082;
      char v10 = "";
      __int16 v11 = 2082;
      int v12 = "activity";
      __int16 v13 = 2050;
      uint64_t v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceMonitorNotifier::onDelayedTriggerTimer\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v6 = 0;
  }
  sub_100D8662C(a2);
  if (v6) {
    os_activity_scope_leave(&state);
  }
}

void sub_100D7D860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D7D880(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 40), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F6698);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v6 = 1;
    uint64_t v3 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceMonitorNotifier::onDeAssTriggerTimer", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v3, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F6698);
    }
    uint64_t v4 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v8 = 0;
      __int16 v9 = 2082;
      char v10 = "";
      __int16 v11 = 2082;
      int v12 = "activity";
      __int16 v13 = 2050;
      uint64_t v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceMonitorNotifier::onDeAssTriggerTimer\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v6 = 0;
  }
  sub_100D866F4(a2);
  if (v6) {
    os_activity_scope_leave(&state);
  }
}

void sub_100D7DA24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D7DA44(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 40), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F6698);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v6 = 1;
    uint64_t v3 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceMonitorNotifier::onContinousTrackingTimer", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v3, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F6698);
    }
    uint64_t v4 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v8 = 0;
      __int16 v9 = 2082;
      char v10 = "";
      __int16 v11 = 2082;
      int v12 = "activity";
      __int16 v13 = 2050;
      uint64_t v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceMonitorNotifier::onContinousTrackingTimer\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v6 = 0;
  }
  sub_100D867BC(a2);
  if (v6) {
    os_activity_scope_leave(&state);
  }
}

void sub_100D7DBE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D7DC08(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 40), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F6698);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v6 = 1;
    uint64_t v3 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceMonitorNotifier::onSettledTimerExpired", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v3, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F6698);
    }
    uint64_t v4 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v8 = 0;
      __int16 v9 = 2082;
      char v10 = "";
      __int16 v11 = 2082;
      int v12 = "activity";
      __int16 v13 = 2050;
      uint64_t v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceMonitorNotifier::onSettledTimerExpired\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v6 = 0;
  }
  sub_100D89878(a2);
  if (v6) {
    os_activity_scope_leave(&state);
  }
}

void sub_100D7DDAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D7DDCC(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 40), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F6698);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v6 = 1;
    uint64_t v3 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceMonitorNotifier::onMiLoLocalizerWaitTimerExpired", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v3, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F6698);
    }
    uint64_t v4 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v8 = 0;
      __int16 v9 = 2082;
      char v10 = "";
      __int16 v11 = 2082;
      int v12 = "activity";
      __int16 v13 = 2050;
      uint64_t v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceMonitorNotifier::onMiLoLocalizerWaitTimerExpired\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v6 = 0;
  }
  sub_100D863EC(a2);
  if (v6) {
    os_activity_scope_leave(&state);
  }
}

void sub_100D7DF70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D7DF90(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 40), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F6698);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v6 = 1;
    uint64_t v3 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceMonitorNotifier::onMiLoMetircsGpsWaitTimerExpired", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v3, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F6698);
    }
    uint64_t v4 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v8 = 0;
      __int16 v9 = 2082;
      char v10 = "";
      __int16 v11 = 2082;
      int v12 = "activity";
      __int16 v13 = 2050;
      uint64_t v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceMonitorNotifier::onMiLoMetircsGpsWaitTimerExpired\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v6 = 0;
  }
  sub_100D8450C(a2);
  if (v6) {
    os_activity_scope_leave(&state);
  }
}

void sub_100D7E134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D7E154(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 40), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F6698);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v6 = 1;
    uint64_t v3 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceMonitorNotifier::onConvergingStateChangeTimerFired", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v3, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F6698);
    }
    uint64_t v4 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v8 = 0;
      __int16 v9 = 2082;
      char v10 = "";
      __int16 v11 = 2082;
      int v12 = "activity";
      __int16 v13 = 2050;
      uint64_t v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceMonitorNotifier::onConvergingStateChangeTimerFired\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v6 = 0;
  }
  sub_100D861B0(a2);
  if (v6) {
    os_activity_scope_leave(&state);
  }
}

void sub_100D7E2F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D7E318(uint64_t a1)
{
}

void sub_100D7E320(uint64_t a1)
{
  if (*(void *)(a1 + 2576))
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    uint64_t v2 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Fence: onConsolidatedTrigger, calling triggerReceivedNow", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      __int16 v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::onConsolidatedTrigger()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    if (*(void *)(a1 + 3000))
    {
      sub_100168850(buf);
      double Current = CFAbsoluteTimeGetCurrent();
      sub_100134750(&__p, "ConsolidatedTimer");
      sub_10001A794(&__p, 1u, (uint64_t)buf, Current, -1.0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_100030BFC(*(void *)(a1 + 3000));
      sub_1001687EC(buf);
    }
    [*(id *)(a1 + 2576) setNextFireDelay:1.79769313e308];
    sub_100D82E6C(a1);
  }
  else
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    uint64_t v4 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: ignore, onConsolidatedTrigger, shutdown?", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      char v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::onConsolidatedTrigger()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_100D7E66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_1001687EC(&a18);
  _Unwind_Resume(a1);
}

void sub_100D7E6A4(uint64_t a1)
{
}

void sub_100D7E6AC(uint64_t a1)
{
  if (*(void *)(a1 + 2336))
  {
    double Current = CFAbsoluteTimeGetCurrent();
    sub_100DBD164(a1 + 120, Current);
  }
  else
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    uint64_t v3 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Fence: ignoring recalculateNow, shut down?", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::recalculateNow()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

id sub_100D7E884(uint64_t a1)
{
  id result = (id)objc_opt_class();
  if (result)
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    uint64_t v3 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Fence: MiLo, registering to Biome to receive MicroLocation event update", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      __int16 v7 = 0;
      __int16 v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::registerToBiomeForMicroLocation()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    *(void *)(a1 + 2960) = [objc_alloc((Class)BMBiomeScheduler) initWithIdentifier:@"com.apple.locationd" targetQueue:[*(id *)(a1 + 48) queue]];
    id v4 = [[[[[(id)BiomeLibrary() Location] MicroLocationVisit] DSLPublisher] subscribeOn:*(void *)(a1 + 2960)];
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    void v6[2] = sub_100D7F2F0;
    void v6[3] = &unk_1022A5908;
    void v6[4] = a1;
    id result = [v4 sinkWithCompletion:&stru_1022F6370 receiveInput:v6];
    *(void *)(a1 + 2952) = result;
  }
  return result;
}

uint64_t sub_100D7EACC(uint64_t a1)
{
  *(void *)a1 = off_1022F6730;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_1007E53C4(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_100D7EB54(uint64_t a1)
{
  *(void *)a1 = off_1022F6098;
  uint64_t v2 = a1 + 8;
  *(void *)(a1 + 8) = off_1022F62A0;
  sub_1001A0900(a1, (uint64_t)"~CLFenceMonitor");
  uint64_t v3 = *(void *)(a1 + 2264);
  *(void *)(a1 + 2264) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 2280);
  *(void *)(a1 + 2280) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  if (*(int *)(a1 + 2392) >= 1) {
    sub_100EBC6AC(a1 + 2384);
  }
  [*(id *)(a1 + 2576) invalidate];

  *(void *)(a1 + 2576) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 216))(a1);
  uint64_t v5 = *(void *)(a1 + 2344);
  if (v5)
  {
    sub_100998C38(v5);
    operator delete();
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 144))(a1);
  uint64_t v6 = *(void *)(a1 + 2360);
  if (v6)
  {
    sub_100998C38(v6);
    operator delete();
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 288))(a1);
  uint64_t v7 = *(void *)(a1 + 2352);
  if (v7)
  {
    sub_100998C38(v7);
    operator delete();
  }
  [*(id *)(a1 + 2368) invalidate];

  *(void *)(a1 + 2368) = 0;
  *(unsigned char *)(a1 + 2624) = 0;
  uint64_t v8 = *(void *)(a1 + 2928);
  if (v8)
  {
    sub_1001B0AE4(v8);
    uint64_t v9 = *(void *)(a1 + 2928);
    if (v9)
    {
      sub_100998C38(v9);
      operator delete();
    }
    *(void *)(a1 + 2928) = 0;
  }
  uint64_t v10 = *(void *)(a1 + 2936);
  if (v10)
  {
    sub_1001B0AE4(v10);
    uint64_t v11 = *(void *)(a1 + 2936);
    if (v11)
    {
      sub_100998C38(v11);
      operator delete();
    }
    *(void *)(a1 + 2936) = 0;
  }

  *(void *)(a1 + 2288) = 0;
  *(void *)(a1 + 2296) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 328))(a1);
  uint64_t v12 = *(void *)(a1 + 2376);
  if (v12)
  {
    sub_100998C38(v12);
    operator delete();
  }
  [*(id *)(a1 + 2920) setValid:0];
  [*(id *)(a1 + 2952) cancel];
  *(void *)(a1 + 2952) = 0;

  *(void *)(a1 + 2960) = 0;
  uint64_t v13 = *(void *)(a1 + 3000);
  if (v13)
  {
    sub_100428578(v13);
    uint64_t v14 = *(void *)(a1 + 3000);
    *(void *)(a1 + 3000) = 0;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
  }
  else
  {
    *(void *)(a1 + 3000) = 0;
  }
  sub_1009C2DD4(a1 + 2968);
  sub_100EBBF9C(a1 + 2528);
  sub_100EBBF9C(a1 + 2480);
  sub_100EBBF9C(a1 + 2432);
  sub_100EBBF9C(a1 + 2384);
  uint64_t v15 = *(void *)(a1 + 2312);
  *(void *)(a1 + 2312) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = *(void *)(a1 + 2304);
  *(void *)(a1 + 2304) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = *(void *)(a1 + 2280);
  *(void *)(a1 + 2280) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = *(void *)(a1 + 2272);
  *(void *)(a1 + 2272) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = *(void *)(a1 + 2264);
  *(void *)(a1 + 2264) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = *(void *)(a1 + 2256);
  *(void *)(a1 + 2256) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = *(void *)(a1 + 2248);
  *(void *)(a1 + 2248) = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  uint64_t v22 = *(void *)(a1 + 2240);
  *(void *)(a1 + 2240) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  uint64_t v23 = *(void *)(a1 + 2232);
  *(void *)(a1 + 2232) = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = *(void *)(a1 + 2224);
  *(void *)(a1 + 2224) = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  uint64_t v25 = *(void *)(a1 + 2216);
  *(void *)(a1 + 2216) = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  sub_1015766A0(a1 + 2064);
  sub_100DB91A8(a1 + 120);
  nullsub_41(a1 + 117, v26);
  sub_100D7EACC(v2);
  return a1;
}

uint64_t sub_100D7F0EC(uint64_t a1)
{
  return sub_100D7EB54(a1 - 8);
}

void sub_100D7F0F4(uint64_t a1)
{
  sub_100D7EB54(a1);

  operator delete();
}

void sub_100D7F12C(uint64_t a1)
{
  sub_100D7EB54(a1 - 8);

  operator delete();
}

void sub_100D7F168(id a1, BPSCompletion *a2)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022F66B8);
  }
  uint64_t v2 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Fence: MiLo, registeration completed", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::registerToBiomeForMicroLocation()_block_invoke", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
}

void sub_100D7F2F0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022F66B8);
  }
  uint64_t v4 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: MiLo, MicroLocation event updated", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::registerToBiomeForMicroLocation()_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_100D7F494(v3, a2);
}

void sub_100D7F494(uint64_t a1, void *a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100134750(__s1, (char *)[[[objc_msgSend(objc_msgSend(objc_msgSend(a2, "eventBody"), "domain"), "UTF8String")
  if (byte_102489B87 >= 0) {
    uint64_t v4 = (const char *)&qword_102489B70;
  }
  else {
    uint64_t v4 = (const char *)qword_102489B70;
  }
  uint64_t v5 = (void *)strlen(v4);
  if ((char)v41 < 0)
  {
    if (v5 != __s1[1])
    {
      operator delete(__s1[0]);
      return;
    }
    if (v5 != (void *)-1)
    {
      uint64_t v6 = __s1[0];
      int v7 = memcmp(__s1[0], v4, (size_t)v5);
      operator delete(v6);
      if (v7) {
        return;
      }
      goto LABEL_12;
    }
LABEL_48:
    sub_1002E93D4();
  }
  if (v5 != (void *)v41) {
    return;
  }
  if (v5 == (void *)-1) {
    goto LABEL_48;
  }
  if (memcmp(__s1, v4, (size_t)v5)) {
    return;
  }
LABEL_12:
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022F66B8);
  }
  uint64_t v8 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__s1[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Fence: MiLo, new homeLoi event from microlocation", (uint8_t *)__s1, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__s1, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    LOWORD(v29[0]) = 0;
    uint64_t v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::onMicroLocationNotification(BMStoreEvent<BMLocationMicroLocationVisit *> *)", "%s\n", v26);
    if (v26 != (char *)__s1) {
      free(v26);
    }
  }
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  id v9 = [objc_msgSend(a2, "eventBody") probabilityVector];
  id v10 = [v9 countByEnumeratingWithState:&v34 objects:v39 count:16];
  double v11 = 0.0;
  if (v10)
  {
    uint64_t v12 = *(void *)v35;
    while (2)
    {
      for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v35 != v12) {
          objc_enumerationMutation(v9);
        }
        uint64_t v14 = *(void **)(*((void *)&v34 + 1) + 8 * i);
        if (objc_msgSend(objc_msgSend(v14, "microLocationIdentifier"), "isEqualToString:", @"00000000-0000-0000-0000-000000000000"))
        {
          [v14 probability];
          double v11 = 1.0 - v15;
          goto LABEL_28;
        }
      }
      id v10 = [v9 countByEnumeratingWithState:&v34 objects:v39 count:16];
      if (v10) {
        continue;
      }
      break;
    }
  }
LABEL_28:
  char v27 = [objc_msgSend(a2, "eventBody") isStable];
  [a2 timestamp];
  double v17 = v16;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id v18 = [[objc_msgSend(a2, "eventBody") numDevicesVector];
  int v19 = 0;
  int v20 = 0;
  int v21 = 0;
  id v22 = [v18 countByEnumeratingWithState:&v30 objects:v38 count:16];
  if (v22)
  {
    uint64_t v23 = *(void *)v31;
    do
    {
      for (unint64_t j = 0; j != v22; unint64_t j = (char *)j + 1)
      {
        if (*(void *)v31 != v23) {
          objc_enumerationMutation(v18);
        }
        uint64_t v25 = *(void **)(*((void *)&v30 + 1) + 8 * (void)j);
        if (objc_msgSend(objc_msgSend(v25, "technology"), "isEqualToString:", @"numberOfWifiDevices"))
        {
          int v19 = [v25 numDevices];
        }
        else if (objc_msgSend(objc_msgSend(v25, "technology"), "isEqualToString:", @"numberOfBleDevices"))
        {
          int v20 = [v25 numDevices];
        }
        else if (objc_msgSend(objc_msgSend(v25, "technology"), "isEqualToString:", @"numberOfUwbDevices"))
        {
          int v21 = [v25 numDevices];
        }
      }
      id v22 = [v18 countByEnumeratingWithState:&v30 objects:v38 count:16];
    }
    while (v22);
  }
  sub_100DB91E4((uint64_t)v29, v27, v19, v20, v21, v17, v11);
  *(_DWORD *)(a1 + 2944) = 0;
  sub_100DBDCA0(a1 + 120, v29);
  if (*(void *)(a1 + 3000))
  {
    sub_100168850(__s1);
    sub_100AE7FB8((uint64_t)v29, (uint64_t)__s1, Current);
    sub_100030BFC(*(void *)(a1 + 3000));
    sub_1001687EC(__s1);
  }
}

void sub_100D7F970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_1001687EC(&a65);
  _Unwind_Resume(a1);
}

uint64_t sub_100D7F99C(uint64_t a1, _DWORD *a2)
{
  if (!*a2) {
    sub_100DC3644(a1 + 120);
  }
  return 1;
}

uint64_t sub_100D7F9C4(uint64_t a1, _DWORD *a2)
{
  if (!*a2) {
    sub_100DC3644(a1 + 112);
  }
  return 1;
}

uint64_t sub_100D7F9EC()
{
  return 1;
}

uint64_t sub_100D7F9F4()
{
  return 1;
}

void *sub_100D7F9FC@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

void *sub_100D7FA78@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

void sub_100D7FAF4(uint64_t a1, int a2)
{
}

uint64_t sub_100D7FAFC(uint64_t a1, char a2)
{
  return sub_100DB97E4(a1 + 120, a2);
}

void sub_100D7FB04(uint64_t a1, uint64_t a2)
{
}

id *sub_100D7FB0C(uint64_t *a1, uint64_t *a2)
{
  sub_1000E1294((uint64_t *)v9, (uint64_t)"CLFenceMonitorNotifier.startMonitoringFences", 0);
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100DB9D30((uint64_t)(a1 + 15), a2, Current);
  if (sub_100DBAD0C((uint64_t)(a1 + 15)) && sub_100DBAD04((uint64_t)(a1 + 15))) {
    (*(void (**)(uint64_t *, uint64_t *))(*a1 + 408))(a1, a2);
  }
  if (a1[375])
  {
    uint64_t v6 = *a2;
    uint64_t v5 = a2[1];
    while (v6 != v5)
    {
      sub_100168850(v8);
      sub_100AE68B8(1, v6, (uint64_t)v8, Current);
      sub_100030BFC(a1[375]);
      sub_1001687EC(v8);
      v6 += 248;
    }
  }
  return sub_1000E1098(v9);
}

void sub_100D7FC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

void sub_100D7FC3C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    while (*(void *)(v2 + 232) == *(void *)(v2 + 224))
    {
      double v5 = sub_100044A78(v2);
      if (v5 > *((double *)sub_100044B44() + 5)) {
        break;
      }
      sub_100D7FE84(a1, v2);
      v2 += 248;
      if (v2 == v3) {
        return;
      }
    }
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    uint64_t v6 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      BOOL v7 = *(void *)(v2 + 232) != *(void *)(v2 + 224);
      *(_DWORD *)uint64_t buf = 67240448;
      BOOL v10 = v7;
      __int16 v11 = 2050;
      double v12 = sub_100044A78(v2);
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Skip finding LOI type,poly,%{public}d,radius,%{public}.01lf", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      sub_100044A78(v2);
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::findAndSetLoiTypeForFences(const std::vector<CLFenceManager_Type::Fence> &)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

void sub_100D7FE84(uint64_t a1, uint64_t a2)
{
  v7[0] = 0;
  v7[1] = v7;
  _DWORD v7[2] = 0x12812000000;
  _OWORD v7[3] = sub_100177E10;
  uint64_t v7[4] = sub_100177520;
  void v7[5] = "/!0";
  sub_10048AEC0((char *)&v8, (long long *)a2);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100D87B64;
  void v6[3] = &unk_1022F6398;
  void v6[4] = v7;
  void v6[5] = a1;
  id v4 = objc_alloc((Class)CLCircularRegion);
  CLLocationCoordinate2D v5 = CLLocationCoordinate2DMake(*(CLLocationDegrees *)(a2 + 72), *(CLLocationDegrees *)(a2 + 80));
  [*(id *)(a1 + 2288) fetchLocationOfInterestForRegion:[v4 initWithCenter:@"GeoFence" radius:v5.latitude longitude:v5.longitude identifier:*((double *)sub_100044B44() + 5)] withReply:v6];
  _Block_object_dispose(v7, 8);
  if (__p)
  {
    id v18 = __p;
    operator delete(__p);
  }

  if (v15 < 0) {
    operator delete(v14);
  }
  if (v13 < 0) {
    operator delete(v12);
  }
  if (v11 < 0) {
    operator delete(v10);
  }
  if (v9 < 0) {
    operator delete(v8);
  }
}

void sub_100D8001C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  sub_100488394(v8);
  _Unwind_Resume(a1);
}

NSDictionary *sub_100D8003C(uint64_t a1)
{
  uint64_t v1 = sub_100DE3154((unsigned int *)(a1 + 32));
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022F66B8);
  }
  uint64_t v2 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 138412290;
    uint64_t v6 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#FenceMetrics submitting metric %@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    id v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::onBackgroundActivityFired()_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return v1;
}

id *sub_100D801F4(uint64_t a1, unsigned __int8 **a2, int a3)
{
  sub_1000E1294((uint64_t *)v11, (uint64_t)"CLFenceMonitorNotifier.stopMonitoringFences", 0);
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100DBA2B0(a1 + 120, a2, a3, Current);
  if (*(void *)(a1 + 3000))
  {
    BOOL v7 = *a2;
    uint64_t v8 = a2[1];
    while (v7 != v8)
    {
      sub_100168850(v10);
      sub_100AE68B8(0, (uint64_t)v7, (uint64_t)v10, Current);
      sub_100030BFC(*(void *)(a1 + 3000));
      sub_1001687EC(v10);
      v7 += 248;
    }
  }
  return sub_1000E1098(v11);
}

void sub_100D802B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

void sub_100D802DC(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100DBA5D8(a1 + 120, Current);
  if (*(void *)(a1 + 3000))
  {
    sub_100168850(v4);
    int v3 = 0;
    sub_100AE8174(&v3, (uint64_t)v4, Current);
    sub_100030BFC(*(void *)(a1 + 3000));
    sub_100428580(*(void *)(a1 + 3000));
    sub_1001687EC(v4);
  }
}

void sub_100D8035C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

BOOL sub_100D80374(uint64_t a1, uint64_t *a2)
{
  BOOL v4 = sub_100DBA6E8(a1 + 120, a2);
  double Current = CFAbsoluteTimeGetCurrent();
  if (*(void *)(a1 + 3000))
  {
    double v6 = Current;
    sub_100168850(v11);
    int v10 = 0;
    sub_100AE8174(&v10, (uint64_t)v11, v6);
    sub_100030BFC(*(void *)(a1 + 3000));
    sub_1001687EC(v11);
    uint64_t v8 = *a2;
    uint64_t v7 = a2[1];
    while (v8 != v7)
    {
      sub_100168850(v11);
      sub_100AE68B8(1, v8, (uint64_t)v11, v6);
      sub_100030BFC(*(void *)(a1 + 3000));
      sub_1001687EC(v11);
      v8 += 248;
    }
  }
  return v4;
}

void sub_100D80444(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D80460(uint64_t a1, uint64_t a2, int a3)
{
  return sub_100DBA8B8(a1 + 120, a2, a3);
}

uint64_t sub_100D80468(uint64_t result, unint64_t a2, unint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v3 = result;
    if (*(void *)(result + 2224))
    {
      if (a2 || !a3)
      {
        if (!a2 || a3)
        {
          if (a3 < a2)
          {
            id result = sub_100DBAD14(result + 120);
            if ((result & 1) == 0)
            {
              char v9 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 344);
              return v9(v3);
            }
          }
        }
        else
        {
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022F66B8);
          }
          uint64_t v7 = qword_1024193C8;
          if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint64_t buf = 134283777;
            *(void *)&uint8_t buf[4] = a2;
            *(_WORD *)&unsigned char buf[12] = 2049;
            *(void *)&buf[14] = 0;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Fence: unregisterForNotification, location, numOfFencesOld, %{private}lu, numOfFenceNew, %{private}lu", buf, 0x16u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_1022F66B8);
            }
            int v17 = 134283777;
            unint64_t v18 = a2;
            __int16 v19 = 2049;
            unint64_t v20 = 0;
            double v12 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::updateSubscriptions(const size_t, const size_t)", "%s\n", v12);
            if (v12 != buf) {
              free(v12);
            }
          }
          if (_os_feature_enabled_impl())
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1022F66D8);
            }
            uint64_t v8 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)uint64_t buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#wigo,off,FenceAlwaysOn", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_1022F66D8);
              }
              LOWORD(v17) = 0;
              uint64_t v14 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::updateSubscriptions(const size_t, const size_t)", "%s\n", v14);
              if (v14 != buf) {
                free(v14);
              }
            }
            [*(id *)(*(void *)(v3 + 2224) + 16) unregister:*(void *)(*(void *)(v3 + 2224) + 8) forNotification:0];
            if (*(int *)(v3 + 2392) >= 1) {
              sub_100EBC6AC(v3 + 2384);
            }
          }
          [*(id *)(*(void *)(v3 + 2224) + 16) unregister:*(void *)(*(void *)(v3 + 2224) + 8) forNotification:22];
          [*(id *)(*(void *)(v3 + 2224) + 16) unregister:*(void *)(*(void *)(v3 + 2224) + 8) forNotification:3];
          return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 344))(v3);
        }
      }
      else
      {
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022F66B8);
        }
        double v6 = qword_1024193C8;
        if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t buf = 134283777;
          *(void *)&uint8_t buf[4] = 0;
          *(_WORD *)&unsigned char buf[12] = 2049;
          *(void *)&buf[14] = a3;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Fence: registerForNotification, location, numOfFencesOld, %{private}lu, numOfFenceNew, %{private}lu", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022F66B8);
          }
          int v17 = 134283777;
          unint64_t v18 = 0;
          __int16 v19 = 2049;
          unint64_t v20 = a3;
          char v11 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::updateSubscriptions(const size_t, const size_t)", "%s\n", v11);
          if (v11 != buf) {
            free(v11);
          }
        }
        [*(id *)(*(void *)(v3 + 2224) + 16) register:*(void *)(*(void *)(v3 + 2224) + 8) forNotification:3 registrationInfo:0];
        [*(id *)(*(void *)(v3 + 2224) + 16) register:*(void *)(*(void *)(v3 + 2224) + 8) forNotification:22 registrationInfo:0];
        id result = _os_feature_enabled_impl();
        if (result)
        {
          sub_100134750(__p, "none");
          if (*(int *)(v3 + 2392) <= 0)
          {
            if (SHIBYTE(v16) < 0)
            {
              sub_1000DC48C(buf, __p[0], (unint64_t)__p[1]);
            }
            else
            {
              *(_OWORD *)uint64_t buf = *(_OWORD *)__p;
              *(void *)&uint8_t buf[16] = v16;
            }
            sub_100EBBFD8(v3 + 2384, (uint64_t *)buf);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }
          if (SHIBYTE(v16) < 0) {
            operator delete(__p[0]);
          }
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022F66D8);
          }
          int v10 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#wigo,on,FenceAlwaysOn", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1022F66D8);
            }
            LOWORD(v17) = 0;
            char v13 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::updateSubscriptions(const size_t, const size_t)", "%s\n", v13);
            if (v13 != buf) {
              free(v13);
            }
          }
          return (uint64_t)[*(id *)(*(void *)(v3 + 2224) + 16) register:*(void *)(*(void *)(v3 + 2224) + 8) forNotification:0 registrationInfo:0];
        }
      }
    }
  }
  return result;
}

void sub_100D80BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D80C2C(uint64_t a1)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022F66B8);
  }
  uint64_t v2 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(unsigned __int8 *)(a1 + 2626);
    *(_DWORD *)uint64_t buf = 67240192;
    int v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Start emergency acquisition, %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    double v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::startEmergencyAcquisition()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  if (!*(unsigned char *)(a1 + 2626))
  {
    *(unsigned char *)(a1 + 2626) = 1;
    if (_os_feature_enabled_impl())
    {
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      BOOL v4 = qword_1024193C8;
      if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Stopped emergency acquisition", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193C0 == -1)
        {
LABEL_26:
          uint64_t v7 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::startEmergencyAcquisition()", "%s\n", v7);
          if (v7 != (char *)buf) {
            free(v7);
          }
          return;
        }
LABEL_28:
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
        goto LABEL_26;
      }
    }
    else
    {
      [*(id *)(*(void *)(a1 + 2224) + 16) register:*(void *)(*(void *)(a1 + 2224) + 8) forNotification:0 registrationInfo:0];
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      CLLocationCoordinate2D v5 = qword_1024193C8;
      if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Started emergency acquisition", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193C0 == -1) {
          goto LABEL_26;
        }
        goto LABEL_28;
      }
    }
  }
}

void sub_100D81010(uint64_t a1)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022F66B8);
  }
  uint64_t v2 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(unsigned __int8 *)(a1 + 2626);
    *(_DWORD *)uint64_t buf = 67240192;
    int v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Stop emergency acquisition, %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    double v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::stopEmergencyAcquisition()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  if (*(unsigned char *)(a1 + 2626))
  {
    *(unsigned char *)(a1 + 2626) = 0;
    if (_os_feature_enabled_impl())
    {
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      BOOL v4 = qword_1024193C8;
      if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Stopped emergency acquisition", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193C0 == -1)
        {
LABEL_26:
          uint64_t v7 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::stopEmergencyAcquisition()", "%s\n", v7);
          if (v7 != (char *)buf) {
            free(v7);
          }
          return;
        }
LABEL_28:
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
        goto LABEL_26;
      }
    }
    else
    {
      [*(id *)(*(void *)(a1 + 2224) + 16) unregister:*(void *)(*(void *)(a1 + 2224) + 8) forNotification:0];
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      CLLocationCoordinate2D v5 = qword_1024193C8;
      if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Stopped emergency acquisition", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193C0 == -1) {
          goto LABEL_26;
        }
        goto LABEL_28;
      }
    }
  }
}

void sub_100D813EC(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100DBD16C(a1 + 120, a3, a4, Current);
  if (*(void *)(a1 + 3000))
  {
    sub_100168850(v8);
    sub_100AE6EA4(a3, a4, (uint64_t)v8, Current);
    sub_100030BFC(*(void *)(a1 + 3000));
    sub_1001687EC(v8);
  }
}

void sub_100D8147C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

void sub_100D81490(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022F66B8);
  }
  uint64_t v7 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *(void *)(a4 + 4);
    uint64_t v9 = *(void *)(a4 + 12);
    uint64_t v10 = *(void *)(a4 + 20);
    *(_DWORD *)uint64_t buf = 134284033;
    uint64_t v29 = v8;
    __int16 v30 = 2049;
    uint64_t v31 = v9;
    __int16 v32 = 2049;
    uint64_t v33 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Fence: got gps notification, %{private}.8lf, %{private}.8lf, %{private}.1lf", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    uint64_t v16 = *(void *)(a4 + 4);
    uint64_t v17 = *(void *)(a4 + 12);
    uint64_t v18 = *(void *)(a4 + 20);
    int v22 = 134284033;
    uint64_t v23 = v16;
    __int16 v24 = 2049;
    uint64_t v25 = v17;
    __int16 v26 = 2049;
    uint64_t v27 = v18;
    __int16 v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::onGpsNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  if (*(_DWORD *)(a4 + 96) == 1 && !*a3)
  {
    double Current = CFAbsoluteTimeGetCurrent();
    long long v12 = *(_OWORD *)(a4 + 112);
    v20[6] = *(_OWORD *)(a4 + 96);
    v20[7] = v12;
    v21[0] = *(_OWORD *)(a4 + 128);
    *(_OWORD *)((char *)v21 + 12) = *(_OWORD *)(a4 + 140);
    long long v13 = *(_OWORD *)(a4 + 48);
    _DWORD v20[2] = *(_OWORD *)(a4 + 32);
    v20[3] = v13;
    long long v14 = *(_OWORD *)(a4 + 80);
    v20[4] = *(_OWORD *)(a4 + 64);
    v20[5] = v14;
    long long v15 = *(_OWORD *)(a4 + 16);
    v20[0] = *(_OWORD *)a4;
    v20[1] = v15;
    sub_100DCA430(a1 + 120, (uint64_t)v20, 1, Current);
  }
}

void sub_100D816E8(uint64_t a1, uint64_t a2, int *a3, char *a4)
{
  if (*a3 == 5)
  {
    sub_100103240();
    if (sub_10010145C())
    {
      if (_os_feature_enabled_impl())
      {
        if (*a4)
        {
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022F66B8);
          }
          uint64_t v7 = qword_1024193C8;
          if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Companion is nearby but not yet ready for handoff", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193C0 == -1) {
              goto LABEL_32;
            }
            goto LABEL_57;
          }
        }
        else
        {
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022F66B8);
          }
          int v21 = qword_1024193C8;
          if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
          {
            int v22 = sub_100DBACFC(a1 + 120);
            int v23 = *a4;
            *(_DWORD *)uint64_t buf = 68289538;
            *(_DWORD *)uint64_t v29 = 0;
            *(_WORD *)&v29[4] = 2082;
            *(void *)&void v29[6] = "";
            *(_WORD *)&v29[14] = 1026;
            *(_DWORD *)&v29[16] = v22;
            __int16 v30 = 1026;
            int v31 = v23;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Connected state of watch changed\", \"from\":%{public}hhd, \"to\":%{public}hhd}", buf, 0x1Eu);
          }
          double Current = CFAbsoluteTimeGetCurrent();
          sub_100DBAD74(a1 + 120, 0, Current);
        }
      }
      else
      {
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022F66B8);
        }
        long long v15 = qword_1024193C8;
        if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_INFO))
        {
          int v16 = sub_100DBACFC(a1 + 120);
          uint64_t v17 = "No";
          if (v16) {
            uint64_t v18 = "Yes";
          }
          else {
            uint64_t v18 = "No";
          }
          if (*a4) {
            uint64_t v17 = "Yes";
          }
          *(_DWORD *)uint64_t buf = 136380931;
          *(void *)uint64_t v29 = v18;
          *(_WORD *)&v29[8] = 2081;
          *(void *)&v29[10] = v17;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Connected state changed from %{private}s to %{private}s", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022F66B8);
          }
          sub_100DBACFC(a1 + 120);
          uint64_t v27 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v27);
          if (v27 != (char *)buf) {
            free(v27);
          }
        }
        BOOL v19 = *a4 != 0;
        double v20 = CFAbsoluteTimeGetCurrent();
        sub_100DBAD74(a1 + 120, v19, v20);
      }
    }
    else
    {
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      uint64_t v10 = qword_1024193C8;
      if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = sub_100DBACFC(a1 + 120);
        long long v12 = "No";
        if (v11) {
          long long v13 = "Yes";
        }
        else {
          long long v13 = "No";
        }
        if (*a4) {
          long long v12 = "Yes";
        }
        *(_DWORD *)uint64_t buf = 136380931;
        *(void *)uint64_t v29 = v13;
        *(_WORD *)&v29[8] = 2081;
        *(void *)&v29[10] = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Connected state changed from %{private}s to %{private}s", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022F66B8);
        }
        sub_100DBACFC(a1 + 120);
        goto LABEL_32;
      }
    }
  }
  else
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    uint64_t v8 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *a3;
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)uint64_t v29 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning Unhandled notification %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 == -1)
      {
LABEL_32:
        long long v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
        goto LABEL_50;
      }
LABEL_57:
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      goto LABEL_32;
    }
  }
LABEL_50:
  double v25 = CFAbsoluteTimeGetCurrent();
  if (*(void *)(a1 + 3000))
  {
    double v26 = v25;
    sub_100168850(buf);
    sub_100AE73FC(a3, a4, (uint64_t)buf, v26);
    sub_100030BFC(*(void *)(a1 + 3000));
    sub_1001687EC(buf);
  }
}

void sub_100D81E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

void sub_100D81E9C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (*a3 == 3)
  {
    *(_OWORD *)(a1 + 2784) = *(_OWORD *)a4;
    long long v15 = *(_OWORD *)(a4 + 16);
    long long v16 = *(_OWORD *)(a4 + 32);
    long long v17 = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(a1 + 2848) = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a1 + 2832) = v17;
    *(_OWORD *)(a1 + 2816) = v16;
    *(_OWORD *)(a1 + 2800) = v15;
    long long v18 = *(_OWORD *)(a4 + 80);
    long long v19 = *(_OWORD *)(a4 + 96);
    long long v20 = *(_OWORD *)(a4 + 112);
    *(void *)(a1 + 2912) = *(void *)(a4 + 128);
    *(_OWORD *)(a1 + 2896) = v20;
    *(_OWORD *)(a1 + 2880) = v19;
    *(_OWORD *)(a1 + 2864) = v18;
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    int v21 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67175937;
      *(_DWORD *)uint64_t v27 = CLMotionActivity::isStatic((CLMotionActivity *)(a1 + 2648));
      *(_WORD *)&v27[4] = 1025;
      *(_DWORD *)&v27[6] = CLMotionActivity::isWalking((CLMotionActivity *)(a1 + 2648));
      *(_WORD *)double v28 = 1025;
      *(_DWORD *)&id v28[2] = CLMotionActivity::isDriving((CLMotionActivity *)(a1 + 2648));
      __int16 v29 = 1025;
      int v30 = CLMotionActivity::isInVehicle((CLMotionActivity *)(a1 + 2648));
      __int16 v31 = 1025;
      int isRunning = CLMotionActivity::isRunning((CLMotionActivity *)(a1 + 2648));
      __int16 v33 = 1025;
      int isCycling = CLMotionActivity::isCycling((CLMotionActivity *)(a1 + 2648));
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "Received dominant motion state,static,%{private}d,walking,%{private}d,driving,%{private}d,inVehicle,%{private}d,running,%{private}d,cycling,%{private}d", buf, 0x26u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_17;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    CLMotionActivity::isStatic((CLMotionActivity *)(a1 + 2648));
    CLMotionActivity::isWalking((CLMotionActivity *)(a1 + 2648));
    CLMotionActivity::isDriving((CLMotionActivity *)(a1 + 2648));
    CLMotionActivity::isInVehicle((CLMotionActivity *)(a1 + 2648));
    CLMotionActivity::isRunning((CLMotionActivity *)(a1 + 2648));
    CLMotionActivity::isCycling((CLMotionActivity *)(a1 + 2648));
    long long v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::onMotionStateNotification(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v14);
    if (v14 == (char *)buf) {
      goto LABEL_17;
    }
LABEL_28:
    free(v14);
LABEL_17:
    if (*(void *)(a1 + 3000))
    {
      double Current = CFAbsoluteTimeGetCurrent();
      sub_100168850(buf);
      sub_100AE76F8(a3, a4, (uint64_t)buf, Current);
      sub_100030BFC(*(void *)(a1 + 3000));
      sub_1001687EC(buf);
    }
    return;
  }
  if (*a3 == 2)
  {
    *(_OWORD *)(a1 + 2648) = *(_OWORD *)a4;
    long long v7 = *(_OWORD *)(a4 + 16);
    long long v8 = *(_OWORD *)(a4 + 32);
    long long v9 = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a1 + 2696) = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(a1 + 2712) = v9;
    *(_OWORD *)(a1 + 2664) = v7;
    *(_OWORD *)(a1 + 2680) = v8;
    long long v10 = *(_OWORD *)(a4 + 80);
    long long v11 = *(_OWORD *)(a4 + 96);
    long long v12 = *(_OWORD *)(a4 + 112);
    *(void *)(a1 + 2776) = *(void *)(a4 + 128);
    *(_OWORD *)(a1 + 2744) = v11;
    *(_OWORD *)(a1 + 2760) = v12;
    *(_OWORD *)(a1 + 2728) = v10;
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    long long v13 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67175425;
      *(_DWORD *)uint64_t v27 = CLMotionActivity::isStatic((CLMotionActivity *)(a1 + 2648));
      *(_WORD *)&v27[4] = 1025;
      *(_DWORD *)&v27[6] = CLMotionActivity::isWalking((CLMotionActivity *)(a1 + 2648));
      *(_WORD *)double v28 = 1025;
      *(_DWORD *)&id v28[2] = CLMotionActivity::isDriving((CLMotionActivity *)(a1 + 2648));
      __int16 v29 = 1025;
      int v30 = CLMotionActivity::isInVehicle((CLMotionActivity *)(a1 + 2648));
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Received motion state,static,%{private}d,walking,%{private}d,driving,%{private}d,inVehicle,%{private}d", buf, 0x1Au);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_17;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    CLMotionActivity::isStatic((CLMotionActivity *)(a1 + 2648));
    CLMotionActivity::isWalking((CLMotionActivity *)(a1 + 2648));
    CLMotionActivity::isDriving((CLMotionActivity *)(a1 + 2648));
    CLMotionActivity::isInVehicle((CLMotionActivity *)(a1 + 2648));
    long long v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::onMotionStateNotification(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v14);
    if (v14 == (char *)buf) {
      goto LABEL_17;
    }
    goto LABEL_28;
  }
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022F66B8);
  }
  int v23 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_ERROR))
  {
    int v24 = *a3;
    *(_DWORD *)uint64_t buf = 136315394;
    *(void *)uint64_t v27 = "onMotionStateNotification";
    *(_WORD *)&v27[8] = 1026;
    *(_DWORD *)double v28 = v24;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "%s, Unhandled notification %{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    double v25 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceMonitorNotifier::onMotionStateNotification(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v25);
    if (v25 != (char *)buf) {
      free(v25);
    }
  }
}

void sub_100D82570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D8258C(uint64_t result, uint64_t a2, _DWORD *a3)
{
  if (*a3 == 11)
  {
    uint64_t v3 = result;
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    BOOL v4 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#significantRegion model change event", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      CLLocationCoordinate2D v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::onDarwinNotification(int, const CLDarwinNotifier_Type::Notification &, const CLDarwinNotifier_Type::NotificationData &)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    CFAbsoluteTimeGetCurrent();
    return sub_100DC2F6C(v3 + 120);
  }
  return result;
}

void sub_100D82738(uint64_t a1, uint64_t a2)
{
  sub_100DC2D50(a1 + 120, a2);
  double Current = CFAbsoluteTimeGetCurrent();
  if (*(void *)(a1 + 3000))
  {
    double v4 = Current;
    sub_100168850(v6);
    int v5 = 1;
    sub_100AE8174(&v5, (uint64_t)v6, v4);
    sub_100030BFC(*(void *)(a1 + 3000));
    sub_1001687EC(v6);
  }
}

void sub_100D827B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

void sub_100D827CC(uint64_t a1, uint64_t a2, __int32 *a3, unsigned __int8 *a4)
{
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100DBF474(a1 + 120, a3, a4, Current);
  if (*(void *)(a1 + 3000))
  {
    sub_100168850(v8);
    sub_100AE79C8(a3, (char *)a4, (uint64_t)v8, Current);
    sub_100030BFC(*(void *)(a1 + 3000));
    sub_1001687EC(v8);
  }
}

void sub_100D8285C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

void sub_100D82870(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100DC0490(a1 + 120, a3, a4);
  if (*(void *)(a1 + 3000))
  {
    sub_100168850(v8);
    sub_100AE7B78(a3, a4, (uint64_t)v8, Current);
    sub_100030BFC(*(void *)(a1 + 3000));
    sub_1001687EC(v8);
  }
}

void sub_100D82900(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D82914(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 5)
  {
    uint64_t v5 = result;
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    double v6 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 138477827;
      uint64_t v9 = sub_1000E9358(a4);
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#Mobile Asset Geofence Settings notification data: %{private}@, updating OTA dependant params", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      sub_1000E9358(a4);
      long long v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    sub_100882188(v5 + 117, a4);
    return sub_100DB9018(v5 + 120);
  }
  return result;
}

void sub_100D82AF8(uint64_t a1, uint64_t a2, int *a3, double *a4)
{
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100DBE3BC(a1 + 120, a3, a4, Current);
  if (*(void *)(a1 + 3000))
  {
    sub_100168850(v8);
    sub_100AE7E54(a3, (char *)a4, (uint64_t)v8, Current);
    sub_100030BFC(*(void *)(a1 + 3000));
    sub_1001687EC(v8);
  }
}

void sub_100D82B88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D82B9C(uint64_t a1, char *a2, double a3)
{
  *(CFAbsoluteTime *)(a1 + 2600) = CFAbsoluteTimeGetCurrent();
  uint64_t result = sub_1001BAE50(a1 + 120);
  if (result)
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    long long v7 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = *(void *)(a1 + 2576);
      int v9 = *(unsigned __int8 *)(a1 + 2592);
      *(_DWORD *)uint64_t buf = 136381443;
      long long v19 = a2;
      __int16 v20 = 2049;
      uint64_t v21 = v8;
      __int16 v22 = 1025;
      int v23 = v9;
      __int16 v24 = 2049;
      double v25 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Fence: triggerReceived, reason, %{private}s, schedule, %{private}p, pending, %{private}d, interval, %{private}lf", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      std::string::size_type v11 = *(void *)(a1 + 2576);
      int v12 = *(unsigned __int8 *)(a1 + 2592);
      LODWORD(__p.__r_.__value_.__l.__data_) = 136381443;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2049;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v11;
      HIWORD(__p.__r_.__value_.__r.__words[2]) = 1025;
      int v15 = v12;
      __int16 v16 = 2049;
      double v17 = a3;
      long long v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::triggerReceived(const char *, CFTimeInterval)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    uint64_t result = *(void *)(a1 + 2576);
    if (result && !*(unsigned char *)(a1 + 2592))
    {
      uint64_t result = (uint64_t)[(id)result setNextFireDelay:a3];
      *(unsigned char *)(a1 + 2592) = 1;
    }
    if (*(void *)(a1 + 3000))
    {
      sub_100168850(buf);
      double v10 = *(double *)(a1 + 2600);
      sub_100134750(&__p, a2);
      sub_100AE9C40(&__p, (uint64_t)buf, v10, a3);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_100030BFC(*(void *)(a1 + 3000));
      return sub_1001687EC(buf);
    }
  }
  return result;
}

void sub_100D82E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

void sub_100D82E6C(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100DBC44C(a1 + 120, Current);
  *(unsigned char *)(a1 + 2592) = 0;
  if (*(void *)(a1 + 3000))
  {
    sub_100168850(v3);
    sub_100AE9EF8((uint64_t)v3, Current);
    sub_100030BFC(*(void *)(a1 + 3000));
    sub_1001687EC(v3);
  }
}

void sub_100D82EE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

id sub_100D82EF4(uint64_t a1)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022F66B8);
  }
  uint64_t v2 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Fence: cancelTriggerWake", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::cancelTriggerWake()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  id result = *(id *)(a1 + 2344);
  if (result)
  {
    id result = sub_1001B0AE4((uint64_t)result);
    if (*(void *)(a1 + 3000))
    {
      sub_100168850(buf);
      double Current = CFAbsoluteTimeGetCurrent();
      sub_1001B0A78(*(void *)(a1 + 2344), (uint64_t)&__p);
      sub_10001A794(&__p, 3u, (uint64_t)buf, Current, -1.0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_100030BFC(*(void *)(a1 + 3000));
      return (id)sub_1001687EC(buf);
    }
  }
  return result;
}

void sub_100D830FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_1001687EC(&a18);
  _Unwind_Resume(a1);
}

void *sub_100D83134(void *result, double *a2)
{
  if (result[293])
  {
    uint64_t v3 = result;
    double Current = CFAbsoluteTimeGetCurrent();
    id result = sub_1001165F8(v3[293], Current + *a2);
    if (v3[375])
    {
      sub_100168850(v6);
      sub_1001B0A78(v3[293], (uint64_t)&__p);
      sub_10001A794(&__p, 2u, (uint64_t)v6, Current, *a2);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_100030BFC(v3[375]);
      return (void *)sub_1001687EC(v6);
    }
  }
  return result;
}

void sub_100D831E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t sub_100D83210(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 2624);
}

void sub_100D83218(uint64_t a1, double *a2)
{
  if (*(void *)(a1 + 2368))
  {
    *(unsigned char *)(a1 + 2624) = 1;
    sub_100134750(__p, "onLocationWatchdog");
    if (*(int *)(a1 + 2440) <= 0)
    {
      if (SHIBYTE(v14) < 0)
      {
        sub_1000DC48C(buf, __p[0], (unint64_t)__p[1]);
      }
      else
      {
        *(_OWORD *)uint64_t buf = *(_OWORD *)__p;
        *(void *)&uint8_t buf[16] = v14;
      }
      sub_100EBBFD8(a1 + 2432, (uint64_t *)buf);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
    sub_100DC3B90(a1 + 120);
    double Current = CFAbsoluteTimeGetCurrent();
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    long long v7 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      double v8 = *a2;
      double v9 = Current + *a2;
      *(_DWORD *)uint64_t buf = 134283777;
      *(double *)&uint8_t buf[4] = v9;
      *(_WORD *)&unsigned char buf[12] = 2049;
      *(double *)&buf[14] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Fence: scheduleLocationWatchdog, at %{private}.1lf, in, %{private}.1lf, seconds", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      std::string::size_type v10 = *(void *)a2;
      double v11 = Current + *a2;
      LODWORD(v15.__r_.__value_.__l.__data_) = 134283777;
      *(double *)((char *)v15.__r_.__value_.__r.__words + 4) = v11;
      WORD2(v15.__r_.__value_.__r.__words[1]) = 2049;
      *(std::string::size_type *)((char *)&v15.__r_.__value_.__r.__words[1] + 6) = v10;
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::scheduleLocationWatchdog(const CFTimeInterval &)", "%s\n", v12);
      if (v12 != buf) {
        free(v12);
      }
    }
    [*(id *)(a1 + 2368) setNextFireDelay:*a2];
    sub_100DC3B80(a1 + 120);
    if (*(void *)(a1 + 3000))
    {
      sub_100168850(buf);
      sub_100134750(&v15, "NoLocationWatchdog");
      sub_10001A794(&v15, 2u, (uint64_t)buf, Current, *a2);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      sub_100030BFC(*(void *)(a1 + 3000));
      sub_1001687EC(buf);
    }
  }
  else
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    double v4 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: scheduleLocationWatchdog, ignore, shutdown?", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      LOWORD(v15.__r_.__value_.__l.__data_) = 0;
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::scheduleLocationWatchdog(const CFTimeInterval &)", "%s\n", v5);
      if (v5 != buf) {
        free(v5);
      }
    }
  }
}

void sub_100D83634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D8369C(uint64_t a1, double *a2)
{
  if (*(void *)(a1 + 2928))
  {
    double Current = CFAbsoluteTimeGetCurrent();
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    uint64_t v5 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      double v6 = *a2;
      double v7 = Current + *a2;
      *(_DWORD *)uint64_t buf = 134283777;
      double v15 = v7;
      __int16 v16 = 2049;
      double v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Fence: MiLo, scheduleMiLoLocalizerWaitTimer, at %{private}.1lf, in, %{private}.1lf, seconds", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      std::string::size_type v9 = *(void *)a2;
      double v10 = Current + *a2;
      LODWORD(__p.__r_.__value_.__l.__data_) = 134283777;
      *(double *)((char *)__p.__r_.__value_.__r.__words + 4) = v10;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2049;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v9;
      double v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::scheduleMiLoLocalizerWaitTimer(const CFTimeInterval &)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    sub_1001165F8(*(void *)(a1 + 2928), Current + *a2);
    if (*(void *)(a1 + 3000))
    {
      sub_100168850(buf);
      sub_1001B0A78(*(void *)(a1 + 2928), (uint64_t)&__p);
      sub_10001A794(&__p, 2u, (uint64_t)buf, Current, *a2);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_100030BFC(*(void *)(a1 + 3000));
      sub_1001687EC(buf);
    }
  }
  else
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    double v8 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Fence: MiLo, scheduleMiLoLocalizerWaitTimer, ignore, shutdown?", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::scheduleMiLoLocalizerWaitTimer(const CFTimeInterval &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
}

void sub_100D83A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
}

void sub_100D83A60(uint64_t a1)
{
  if (*(void *)(a1 + 2928))
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    uint64_t v2 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Fence: MiLo, cancelMiLoLocalizerWaitTimer", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::cancelMiLoLocalizerWaitTimer()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    sub_1001B0AE4(*(void *)(a1 + 2928));
    if (*(void *)(a1 + 3000))
    {
      sub_100168850(buf);
      double Current = CFAbsoluteTimeGetCurrent();
      sub_1001B0A78(*(void *)(a1 + 2928), (uint64_t)&__p);
      sub_10001A794(&__p, 3u, (uint64_t)buf, Current, -1.0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_100030BFC(*(void *)(a1 + 3000));
      sub_1001687EC(buf);
    }
  }
  else
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    double v4 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: MiLo, cancelMiLoLocalizerWaitTimer, ignore, shutdown?", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      double v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::cancelMiLoLocalizerWaitTimer()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  *(_DWORD *)(a1 + 2944) = 0;
}

void sub_100D83D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_1001687EC(&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_100D83DD0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 2944);
}

void sub_100D83DD8(uint64_t a1, double *a2)
{
  if (*(void *)(a1 + 2936))
  {
    double Current = CFAbsoluteTimeGetCurrent();
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    uint64_t v5 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      double v6 = *a2;
      double v7 = Current + *a2;
      *(_DWORD *)uint64_t buf = 134283777;
      double v15 = v7;
      __int16 v16 = 2049;
      double v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Fence: MiLo, scheduleMiLoMetricsGpsWaitTimer, at %{private}.1lf, in, %{private}.1lf, seconds", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      std::string::size_type v9 = *(void *)a2;
      double v10 = Current + *a2;
      LODWORD(__p.__r_.__value_.__l.__data_) = 134283777;
      *(double *)((char *)__p.__r_.__value_.__r.__words + 4) = v10;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2049;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v9;
      double v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::scheduleMiLoMetricsGpsWaitTimer(const CFTimeInterval &)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    sub_1001165F8(*(void *)(a1 + 2936), Current + *a2);
    if (*(void *)(a1 + 3000))
    {
      sub_100168850(buf);
      sub_1001B0A78(*(void *)(a1 + 2936), (uint64_t)&__p);
      sub_10001A794(&__p, 2u, (uint64_t)buf, Current, *a2);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_100030BFC(*(void *)(a1 + 3000));
      sub_1001687EC(buf);
    }
  }
  else
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    double v8 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Fence: MiLo, scheduleMiLoMetricsGpsWaitTimer, ignore, shutdown?", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::scheduleMiLoMetricsGpsWaitTimer(const CFTimeInterval &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
}

void sub_100D84164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
}

void sub_100D8419C(uint64_t a1)
{
  if (*(void *)(a1 + 2936))
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    uint64_t v2 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Fence: MiLo, cancelMiLoMetricsGpsWaitTimer", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::cancelMiLoMetricsGpsWaitTimer()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    sub_1001B0AE4(*(void *)(a1 + 2936));
    if (*(void *)(a1 + 3000))
    {
      sub_100168850(buf);
      double Current = CFAbsoluteTimeGetCurrent();
      sub_1001B0A78(*(void *)(a1 + 2936), (uint64_t)&__p);
      sub_10001A794(&__p, 3u, (uint64_t)buf, Current, -1.0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_100030BFC(*(void *)(a1 + 3000));
      sub_1001687EC(buf);
    }
  }
  else
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    double v4 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: MiLo, cancelMiLoMetricsGpsWaitTimer, ignore, shutdown?", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      double v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::cancelMiLoMetricsGpsWaitTimer()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_100D844D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_1001687EC(&a18);
  _Unwind_Resume(a1);
}

void sub_100D8450C(uint64_t a1)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022F66B8);
  }
  uint64_t v2 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Fence: MiLo, onMiLoMetircsGpsWaitTimerExpired", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::onMiLoMetircsGpsWaitTimerExpired(CLPersistentTimer *)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_100DCA684(a1 + 120);
  if (!*(unsigned char *)(a1 + 2624))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 392))(a1);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    uint64_t v3 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Fence: MiLo, onMiLoMetircsGpsWaitTimerExpired, stopGps", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      double v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::onMiLoMetircsGpsWaitTimerExpired(CLPersistentTimer *)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  if (*(void *)(a1 + 3000))
  {
    sub_100168850(buf);
    double Current = CFAbsoluteTimeGetCurrent();
    sub_1001B0A78(*(void *)(a1 + 2936), (uint64_t)&__p);
    sub_10001A794(&__p, 1u, (uint64_t)buf, Current, -1.0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_100030BFC(*(void *)(a1 + 3000));
    sub_1001687EC(buf);
  }
}

void sub_100D84870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_1001687EC(&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_100D848A8(uint64_t a1)
{
  if (*(void *)(a1 + 2368))
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    uint64_t v2 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Fence: cancelLocationWatchdog", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      double v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::cancelLocationWatchdog()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    [*(id *)(a1 + 2368) setNextFireDelay:1.79769313e308];
    *(unsigned char *)(a1 + 2624) = 0;
    if (*(void *)(a1 + 3000))
    {
      sub_100168850(buf);
      double Current = CFAbsoluteTimeGetCurrent();
      sub_100134750(&__p, "NoLocationWatchdog");
      sub_10001A794(&__p, 3u, (uint64_t)buf, Current, -1.0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_100030BFC(*(void *)(a1 + 3000));
      sub_1001687EC(buf);
    }
  }
  else
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    double v4 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: cancelLocationWatchdog, ignore, shutdown?", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      double v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::cancelLocationWatchdog()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 400))(a1);
  if (result)
  {
    double v6 = CFAbsoluteTimeGetCurrent();
    uint64_t result = sub_100DC36C0(a1 + 120, v6);
  }
  if (*(int *)(a1 + 2440) >= 1) {
    return sub_100EBC6AC(a1 + 2432);
  }
  return result;
}

void sub_100D84C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_1001687EC(&a18);
  _Unwind_Resume(a1);
}

id sub_100D84C78(uint64_t a1)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022F66B8);
  }
  uint64_t v2 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Fence: cancelDeassociationDelayedTrigger", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::cancelDeassociationDelayedTrigger()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  id result = *(id *)(a1 + 2352);
  if (result)
  {
    id result = sub_1001B0AE4((uint64_t)result);
    if (*(void *)(a1 + 3000))
    {
      sub_100168850(buf);
      double Current = CFAbsoluteTimeGetCurrent();
      sub_1001B0A78(*(void *)(a1 + 2352), (uint64_t)&__p);
      sub_10001A794(&__p, 3u, (uint64_t)buf, Current, -1.0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_100030BFC(*(void *)(a1 + 3000));
      return (id)sub_1001687EC(buf);
    }
  }
  return result;
}

void sub_100D84E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_1001687EC(&a18);
  _Unwind_Resume(a1);
}

void *sub_100D84EB8(void *result, double *a2)
{
  if (result[294])
  {
    uint64_t v3 = result;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    id result = sub_1001165F8(v3[294], Current + *a2);
    if (v3[375])
    {
      sub_100168850(v7);
      double v5 = CFAbsoluteTimeGetCurrent();
      sub_1001B0A78(v3[294], (uint64_t)&__p);
      sub_10001A794(&__p, 2u, (uint64_t)v7, v5, *a2);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_100030BFC(v3[375]);
      return (void *)sub_1001687EC(v7);
    }
  }
  return result;
}

void sub_100D84F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_1001687EC(&a15);
  _Unwind_Resume(a1);
}

double sub_100D84F98(uint64_t a1, double *a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  uint64_t v5 = *(void *)(a1 + 2360);
  if (v5)
  {
    double v6 = Current;
    double v7 = Current + *a2;
    sub_1001165F8(v5, v7);
    if (*(void *)(a1 + 3000))
    {
      sub_100168850(buf);
      sub_1001B0A78(*(void *)(a1 + 2360), (uint64_t)&__p);
      sub_10001A794(&__p, 2u, (uint64_t)buf, v6, *a2);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_100030BFC(*(void *)(a1 + 3000));
      sub_1001687EC(buf);
    }
  }
  else
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    double v8 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Fence: ignoring, setNextTrackingWake, shutdown?", buf, 2u);
    }
    double v7 = 0.0;
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      double v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CFAbsoluteTime CLFenceMonitorNotifier::setNextTrackingWake(const CFTimeInterval &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  return v7;
}

void sub_100D851B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
}

void sub_100D851EC(uint64_t a1, double a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  sub_1001165F8(*(void *)(a1 + 2584), Current + a2);
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022F66B8);
  }
  uint64_t v5 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 134218240;
    double v9 = a2;
    __int16 v10 = 2048;
    double v11 = Current + a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "converging state change timer, scheduled, interval, %.2f, fireTime, %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 134218240;
    *(double *)((char *)__p.__r_.__value_.__r.__words + 4) = a2;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = Current + a2;
    double v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::scheduleConvergingStateChangeTimer(CFTimeInterval)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  if (*(void *)(a1 + 3000))
  {
    sub_100168850(buf);
    sub_1001B0A78(*(void *)(a1 + 2584), (uint64_t)&__p);
    sub_10001A794(&__p, 2u, (uint64_t)buf, Current, a2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_100030BFC(*(void *)(a1 + 3000));
    sub_1001687EC(buf);
  }
}

void sub_100D85434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
}

uint64_t sub_100D8546C(uint64_t *a1)
{
  sub_1001B0AE4(a1[323]);
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022F66B8);
  }
  uint64_t v2 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "converging state change timer, canceled", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    double v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::cancelConvergingStateChangeTimer()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  if (a1[375])
  {
    sub_100168850(buf);
    double Current = CFAbsoluteTimeGetCurrent();
    sub_1001B0A78(a1[323], (uint64_t)&__p);
    sub_10001A794(&__p, 3u, (uint64_t)buf, Current, -1.0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_100030BFC(a1[375]);
    sub_1001687EC(buf);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t *))(*a1 + 176))(a1);
  if (result)
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    uint64_t v5 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "converging state change timer, gnss session ended", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      double v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::cancelConvergingStateChangeTimer()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    return (*(uint64_t (**)(uint64_t *))(*a1 + 192))(a1);
  }
  return result;
}

void sub_100D857EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_1001687EC(&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_100D85824(uint64_t result, unsigned int a2, unsigned int a3, uint64_t a4)
{
  if (*(void *)(result + 3000))
  {
    uint64_t v7 = result;
    sub_100168850(v9);
    double Current = CFAbsoluteTimeGetCurrent();
    sub_100AEA3C8(a2, a3, a4, (uint64_t)v9, Current);
    sub_100030BFC(*(void *)(v7 + 3000));
    return sub_1001687EC(v9);
  }
  return result;
}

void sub_100D8589C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

void sub_100D858B0(uint64_t a1, int a2, double a3)
{
}

BOOL sub_100D858B8(uint64_t a1)
{
  return *(void *)(a1 + 2272) != 0;
}

void sub_100D858C8(uint64_t a1)
{
  if (*(int *)(a1 + 2536) < 1)
  {
    sub_100134750(__p, "none");
    sub_100EBBFD8(a1 + 2528, (uint64_t *)__p);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
    sub_100E92BC0();
  }
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022F66B8);
  }
  uint64_t v1 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "converging state, GNSS already started", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    LOWORD(v6) = 0;
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLFenceMonitorNotifier::startConvergingStateGNSS()", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
}

void sub_100D85D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  sub_1001687EC(&a25);
  _Unwind_Resume(a1);
}

void sub_100D85D64(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 40), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F6698);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    double v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceMonitorNotifier::onGpsNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F6698);
    }
    double v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      double v15 = "";
      __int16 v16 = 2082;
      double v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceMonitorNotifier::onGpsNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100D81490(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100D85F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D85F40(uint64_t a1)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022F66B8);
  }
  uint64_t v2 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "converging state, cancelling GNSS", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    char v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::cancelConvergingStateGNSS()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_100EBC6AC(a1 + 2528);
  uint64_t result = *(void *)(a1 + 2272);
  *(void *)(a1 + 2272) = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (*(void *)(a1 + 3000))
  {
    sub_100168850(buf);
    double Current = CFAbsoluteTimeGetCurrent();
    sub_100134750(&__p, "ConvergingState");
    sub_100AE8DB4(0, 0, &__p, (uint64_t)buf, Current);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_100030BFC(*(void *)(a1 + 3000));
    return sub_1001687EC(buf);
  }
  return result;
}

void sub_100D86178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_1001687EC(&a18);
  _Unwind_Resume(a1);
}

void sub_100D861B0(uint64_t a1)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022F66B8);
  }
  uint64_t v2 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "converging state, onConvergingStateChangeTimerFired", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    double v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::onConvergingStateChangeTimerFired(CLPersistentTimer *)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100DC19B8(a1 + 120, Current);
  if (*(void *)(a1 + 3000))
  {
    sub_100168850(buf);
    sub_1001B0A78(*(void *)(a1 + 2584), (uint64_t)&__p);
    sub_10001A794(&__p, 1u, (uint64_t)buf, Current, -1.0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_100030BFC(*(void *)(a1 + 3000));
    sub_1001687EC(buf);
  }
}

void sub_100D863B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
}

void sub_100D863EC(uint64_t a1)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022F66B8);
  }
  uint64_t v2 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Fence: MiLo, onMiLoLocalizerWaitTimerExpired", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    double v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::onMiLoLocalizerWaitTimerExpired(CLPersistentTimer *)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  double Current = CFAbsoluteTimeGetCurrent();
  *(_DWORD *)(a1 + 2944) = 0;
  sub_100DC19B0(a1 + 120);
  if (*(void *)(a1 + 3000))
  {
    sub_100168850(buf);
    sub_1001B0A78(*(void *)(a1 + 2928), (uint64_t)&__p);
    sub_10001A794(&__p, 1u, (uint64_t)buf, Current, -1.0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_100030BFC(*(void *)(a1 + 3000));
    sub_1001687EC(buf);
  }
}

void sub_100D865F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
}

void sub_100D8662C(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100DC200C(a1 + 120, Current);
  if (*(void *)(a1 + 3000))
  {
    sub_100168850(v4);
    sub_1001B0A78(*(void *)(a1 + 2344), (uint64_t)&__p);
    sub_10001A794(&__p, 1u, (uint64_t)v4, Current, -1.0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_100030BFC(*(void *)(a1 + 3000));
    sub_1001687EC(v4);
  }
}

void sub_100D866C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void sub_100D866F4(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100DC1D54(a1 + 120, Current);
  if (*(void *)(a1 + 3000))
  {
    sub_100168850(v4);
    sub_1001B0A78(*(void *)(a1 + 2352), (uint64_t)&__p);
    sub_10001A794(&__p, 1u, (uint64_t)v4, Current, -1.0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_100030BFC(*(void *)(a1 + 3000));
    sub_1001687EC(v4);
  }
}

void sub_100D8678C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void sub_100D867BC(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100DC22C4(a1 + 120, Current);
  if (*(void *)(a1 + 3000))
  {
    sub_100168850(v4);
    sub_1001B0A78(*(void *)(a1 + 2360), (uint64_t)&__p);
    sub_10001A794(&__p, 1u, (uint64_t)v4, Current, -1.0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_100030BFC(*(void *)(a1 + 3000));
    sub_1001687EC(v4);
  }
}

void sub_100D86854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

NSObject *sub_100D86884(uint64_t a1)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022F66B8);
  }
  uint64_t v2 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Fence: CLFenceMonitor, shutdown", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    double v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::shutdown()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100DC36C0(a1 + 120, Current);
  uint64_t result = *(NSObject **)(a1 + 2336);
  if (result)
  {
    dispatch_source_cancel(result);
    char v5 = *(NSObject **)(a1 + 2336);
    *(void *)(a1 + 2336) = 0;
    dispatch_release(v5);
    return [*(id *)(a1 + 2296) clearExitAndEntryScanNetworks:1];
  }
  return result;
}

NSObject *sub_100D86A4C(uint64_t a1)
{
  return sub_100D86884(a1 - 8);
}

void sub_100D86A54(uint64_t a1, char *a2)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022F66B8);
  }
  double v4 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 136380675;
    *(void *)&uint8_t buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Fence: request update, reason, %{private}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    int v21 = 136380675;
    __int16 v22 = a2;
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::requestWifiLocationUpdate(const char *)", "%s\n", v7);
    if (v7 != buf) {
      free(v7);
    }
  }
  sub_100DC3B88(a1 + 120);
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100134750(__p, "geofence");
  sub_1006D30DC(buf, 4, 0, __p, Current);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  id v6 = [objc_msgSend(*(id *)(a1 + 40), "vendor") proxyForService:@"CLWifiLocationProvider"];
  uint64_t v9 = *(void *)buf;
  char v10 = buf[8];
  if (SHIBYTE(v25) < 0)
  {
    sub_1000DC48C(&v11, (void *)v24, *((unint64_t *)&v24 + 1));
  }
  else
  {
    long long v11 = v24;
    uint64_t v12 = v25;
  }
  long long v14 = v27;
  long long v15 = v28;
  v16[0] = v29[0];
  *(_OWORD *)((char *)v16 + 12) = *(_OWORD *)((char *)v29 + 12);
  long long v13 = v26;
  if (SHIBYTE(v31) < 0)
  {
    sub_1000DC48C(&v17, (void *)v30, *((unint64_t *)&v30 + 1));
  }
  else
  {
    long long v17 = v30;
    uint64_t v18 = v31;
  }
  [v6 requestLocationUpdateWithParameters:sub_1005DD244((uint64_t)&v9)];
  if (SHIBYTE(v18) < 0) {
    operator delete((void *)v17);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete((void *)v11);
  }
  if (*(void *)(a1 + 3000))
  {
    sub_100168850(&v21);
    sub_100134750(&v8, a2);
    sub_100AE8DB4(1u, 1, &v8, (uint64_t)&v21, Current);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
    sub_100030BFC(*(void *)(a1 + 3000));
    sub_1001687EC(&v21);
  }
  if (SHIBYTE(v31) < 0) {
    operator delete((void *)v30);
  }
  if (SHIBYTE(v25) < 0) {
    operator delete((void *)v24);
  }
}

void sub_100D86DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  sub_10050EC2C((uint64_t)&a52);
  _Unwind_Resume(a1);
}

void sub_100D86E44(uint64_t a1, uint64_t a2)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022F66B8);
  }
  double v4 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(a1 + 2632);
    int v6 = *(unsigned __int8 *)(a1 + 2627);
    *(_DWORD *)uint64_t buf = 136381187;
    uint64_t v18 = a2;
    __int16 v19 = 2049;
    uint64_t v20 = v5;
    __int16 v21 = 1025;
    int v22 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: createActivityAlarm, %{private}s, %{private}p, fIsUseActivityAlarm, %{private}d", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    uint64_t v7 = *(void *)(a1 + 2632);
    int v8 = *(unsigned __int8 *)(a1 + 2627);
    int v11 = 136381187;
    uint64_t v12 = a2;
    __int16 v13 = 2049;
    uint64_t v14 = v7;
    __int16 v15 = 1025;
    int v16 = v8;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::createActivityAlarm(const char *)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  if (*(unsigned char *)(a1 + 2627))
  {
    if (!*(void *)(a1 + 2632))
    {
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      _DWORD v10[2] = sub_100D870C4;
      v10[3] = &unk_1022B7B30;
      v10[4] = a1;
      *(void *)(a1 + 2632) = -[CMActivityAlarmLocal initWithTrigger:duration:onQueue:withHandler:]([CMActivityAlarmLocal alloc], "initWithTrigger:duration:onQueue:withHandler:", 6, [*(id *)(a1 + 48) queue], v10, 900.0);
    }
  }
}

void sub_100D870C4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(uint64_t **)(a1 + 32);
  double Current = CFAbsoluteTimeGetCurrent();
  double v19 = Current;
  if (a3) {
    uint64_t v7 = (char *)[a3 description].UTF8String;
  }
  else {
    uint64_t v7 = "ok";
  }
  sub_100134750(&__p, v7);
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022F66B8);
  }
  int v8 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_INFO))
  {
    int v9 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    std::string::size_type v10 = __p.__r_.__value_.__r.__words[0];
    unsigned int v11 = [a2 trigger];
    p_p = &__p;
    *(_DWORD *)uint64_t buf = 134284035;
    if (v9 < 0) {
      p_p = (std::string *)v10;
    }
    long long v27 = a2;
    __int16 v28 = 2081;
    __int16 v29 = p_p;
    __int16 v30 = 1025;
    unsigned int v31 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Fence: activityAlarmHandler, %{private}p, %{private}s, trigger, %{private}d", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    int v13 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    std::string::size_type v14 = __p.__r_.__value_.__r.__words[0];
    unsigned int v15 = [a2 trigger];
    int v16 = &__p;
    int v20 = 134284035;
    if (v13 < 0) {
      int v16 = (std::string *)v14;
    }
    __int16 v21 = a2;
    __int16 v22 = 2081;
    int v23 = v16;
    __int16 v24 = 1025;
    unsigned int v25 = v15;
    long long v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::createActivityAlarm(const char *)_block_invoke", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  sub_100DC301C((uint64_t)(v5 + 15), Current);
  sub_100DBD644((uint64_t)(v5 + 15), (uint64_t)"kNotificationDelayTriggerReceived", 0, &v19);
  (*(void (**)(uint64_t *, const char *))(*v5 + 320))(v5, "createActivityAlarm-cleanup");
  if (v5[375])
  {
    sub_100168850(buf);
    sub_100AEA048(a2, &__p, (uint64_t)buf, v19);
    sub_100030BFC(v5[375]);
    sub_1001687EC(buf);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_100D873D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_100D87414(uint64_t a1)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022F66B8);
  }
  uint64_t v2 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Fence: cancelSettledTimer", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::cancelSettledTimer()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  id result = *(id *)(a1 + 2376);
  if (result)
  {
    id result = sub_1001B0AE4((uint64_t)result);
    if (*(void *)(a1 + 3000))
    {
      sub_100168850(buf);
      double Current = CFAbsoluteTimeGetCurrent();
      sub_1001B0A78(*(void *)(a1 + 2376), (uint64_t)&__p);
      sub_10001A794(&__p, 3u, (uint64_t)buf, Current, -1.0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_100030BFC(*(void *)(a1 + 3000));
      return (id)sub_1001687EC(buf);
    }
  }
  return result;
}

void sub_100D8761C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_1001687EC(&a18);
  _Unwind_Resume(a1);
}

void sub_100D87654(uint64_t a1)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022F66B8);
  }
  uint64_t v2 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 134283521;
    uint64_t v9 = 0x4072C00000000000;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Fence: scheduleNextSettledTimer in, %{private}.1lf", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 134283521;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = 0x4072C00000000000;
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::scheduleSettledTimer()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  uint64_t v3 = *(void *)(a1 + 2376);
  if (v3)
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    sub_1001165F8(v3, Current + 300.0);
    if (*(void *)(a1 + 3000))
    {
      sub_100168850(buf);
      double v5 = CFAbsoluteTimeGetCurrent();
      sub_1001B0A78(*(void *)(a1 + 2376), (uint64_t)&__p);
      sub_10001A794(&__p, 2u, (uint64_t)buf, v5, 300.0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_100030BFC(*(void *)(a1 + 3000));
      sub_1001687EC(buf);
    }
  }
}

void sub_100D87898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_1001687EC(&a18);
  _Unwind_Resume(a1);
}

void sub_100D878D0(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 8;
  (*(void (**)(uint64_t, _DWORD *, uint64_t, void, uint64_t, void))(*(void *)(a1 + 8) + 152))(a1 + 8, a2, a3, 0, 0xFFFFFFFFLL, 0);
  double Current = CFAbsoluteTimeGetCurrent();
  if (*(void *)(v6 + 2992))
  {
    double v8 = Current;
    sub_100168850(v9);
    sub_100AE6AFC(a2, a3, (uint64_t)v9, v8);
    sub_100030BFC(*(void *)(a1 + 3000));
    sub_1001687EC(v9);
  }
}

void sub_100D87988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

BOOL sub_100D8799C(uint64_t a1)
{
  return *(void *)(a1 + 2288) != 0;
}

void sub_100D879AC(uint64_t a1)
{
  [*(id *)(a1 + 2288) startMonitoringScenarioTriggerOfType:1 forClient:CLISP_ME_TOKEN];
  double Current = CFAbsoluteTimeGetCurrent();
  if (*(void *)(a1 + 3000))
  {
    double v3 = Current;
    sub_100168850(v5);
    sub_100134750(&__p, "");
    sub_100AE8DB4(4u, 1, &__p, (uint64_t)v5, v3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_100030BFC(*(void *)(a1 + 3000));
    sub_1001687EC(v5);
  }
}

void sub_100D87A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void sub_100D87A88(uint64_t a1)
{
  [*(id *)(a1 + 2288) stopMonitoringScenarioTriggerOfType:1 forClient:CLISP_ME_TOKEN];
  double Current = CFAbsoluteTimeGetCurrent();
  if (*(void *)(a1 + 3000))
  {
    double v3 = Current;
    sub_100168850(v5);
    sub_100134750(&__p, "");
    sub_100AE8DB4(4u, 0, &__p, (uint64_t)v5, v3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_100030BFC(*(void *)(a1 + 3000));
    sub_1001687EC(v5);
  }
}

void sub_100D87B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void sub_100D87B64(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3)
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    double v4 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
      uint64_t v6 = (void *)(v5 + 72);
      if (*(char *)(v5 + 95) < 0) {
        uint64_t v6 = (void *)*v6;
      }
      *(_DWORD *)uint64_t buf = 136380675;
      id v25 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning, error requesting LOI for fence %{private}s", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    uint64_t v18 = *(void *)(*(void *)(a1 + 32) + 8);
    int v16 = (void *)(v18 + 72);
    if (*(char *)(v18 + 95) < 0) {
      int v16 = (void *)*v16;
    }
LABEL_41:
    int v22 = 136380675;
    id v23 = v16;
    double v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::findAndSetLoiTypeForFence(const CLFenceManager_Type::Fence &)_block_invoke", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
    return;
  }
  if (a2)
  {
    uint64_t v8 = *(void *)(a1 + 40);
    double Current = CFAbsoluteTimeGetCurrent();
    int v21 = 0;
    id v10 = a2;
    switch((unint64_t)[v10 type])
    {
      case 0xFFFFFFFFFFFFFFFFLL:
      case 3uLL:
        int v11 = 4;
        goto LABEL_34;
      case 0uLL:
        int v11 = 1;
        goto LABEL_34;
      case 1uLL:
        int v11 = 2;
        goto LABEL_34;
      case 2uLL:
        int v11 = 3;
LABEL_34:
        int v21 = v11;
        break;
      default:
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022F66B8);
        }
        long long v17 = qword_1024193C8;
        if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)uint64_t buf = 134349056;
          id v25 = [v10 type];
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Unhandled LOI type, %{public}ld", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022F66B8);
          }
          int v22 = 134349056;
          id v23 = [v10 type];
          int v20 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceMonitorNotifier::findAndSetLoiTypeForFence(const CLFenceManager_Type::Fence &)_block_invoke", "%s\n", v20);
          if (v20 != (char *)buf) {
            free(v20);
          }
        }
        int v11 = 0;
        break;
    }

    sub_100DB97EC(v8 + 120, *(void *)(*(void *)(a1 + 32) + 8) + 48, v11);
    if (*(void *)(v8 + 3000))
    {
      sub_100168850(buf);
      sub_100AE8440(*(void *)(*(void *)(a1 + 32) + 8) + 48, (unsigned int *)&v21, (uint64_t)buf, Current);
      sub_100030BFC(*(void *)(v8 + 3000));
      sub_1001687EC(buf);
    }
  }
  else
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    uint64_t v12 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 8);
      std::string::size_type v14 = (void *)(v13 + 72);
      if (*(char *)(v13 + 95) < 0) {
        std::string::size_type v14 = (void *)*v14;
      }
      *(_DWORD *)uint64_t buf = 136380675;
      id v25 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "No LOI info for fence %{private}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 8);
      int v16 = (void *)(v15 + 72);
      if (*(char *)(v15 + 95) < 0) {
        int v16 = (void *)*v16;
      }
      goto LABEL_41;
    }
  }
}

void sub_100D880F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

void sub_100D88124(uint64_t a1, uint64_t a2, char a3)
{
  v12[0] = 0;
  v12[1] = v12;
  void v12[2] = 0x12812000000;
  void v12[3] = sub_100177E10;
  _DWORD v12[4] = sub_100177520;
  void v12[5] = "/!0";
  sub_10048AEC0((char *)&v13, (long long *)a2);
  v10[0] = 0;
  v10[1] = v10;
  _DWORD v10[2] = 0x2020000000;
  char v11 = a3;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  id v9[2] = sub_100D88324;
  v9[3] = &unk_1022F63C0;
  void v9[5] = v10;
  void v9[6] = a1;
  v9[4] = v12;
  id v6 = objc_alloc((Class)CLCircularRegion);
  CLLocationCoordinate2D v7 = CLLocationCoordinate2DMake(*(CLLocationDegrees *)(a2 + 72), *(CLLocationDegrees *)(a2 + 80));
  id v8 = [v6 initWithCenter:@"SignificantRegion" radius:v7.latitude longitude:v7.longitude identifier:sub_100044A78(a2) block:_NSConcreteStackBlock capacity:3221225472 blockSize:sub_100D88324 deallocator:&unk_1022F63C0 info:v12 retain:v10 release:a1];
  sub_100DCCD0C(a1 + 120);
  [*(id *)(a1 + 2288) fetchLocationOfInterestForRegion:v8 withReply:v9];
  _Block_object_dispose(v10, 8);
  _Block_object_dispose(v12, 8);
  if (__p)
  {
    id v23 = __p;
    operator delete(__p);
  }

  if (v20 < 0) {
    operator delete(v19);
  }
  if (v18 < 0) {
    operator delete(v17);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v14 < 0) {
    operator delete(v13);
  }
}

void sub_100D882F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  sub_100488394(v8);
  _Unwind_Resume(a1);
}

void sub_100D88324(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a1[6];
  double Current = CFAbsoluteTimeGetCurrent();
  if (a3)
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    uint64_t v8 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1[4] + 8);
      int v10 = (int)*(double *)(v9 + 144);
      uint64_t v12 = *(void **)(v9 + 120);
      uint64_t v11 = *(void *)(v9 + 128);
      *(_DWORD *)uint64_t buf = 68290051;
      int v44 = 0;
      __int16 v45 = 2082;
      id v46 = "";
      __int16 v47 = 2049;
      id v48 = v12;
      __int16 v49 = 2049;
      uint64_t v50 = v11;
      __int16 v51 = 1026;
      int v52 = v10;
      __int16 v53 = 2114;
      uint64_t v54 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#significantRegion: fetching LOI - error\", \"latitude\":\"%{private}f\", \"longitude\":\"%{private}f\", \"radius\":%{public}d, \"error\":%{public, location:escape_only}@}", buf, 0x36u);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
    }
    uint64_t v13 = qword_1024193C8;
    if (os_signpost_enabled((os_log_t)qword_1024193C8))
    {
      uint64_t v14 = *(void *)(a1[4] + 8);
      int v15 = (int)*(double *)(v14 + 144);
      long long v17 = *(void **)(v14 + 120);
      uint64_t v16 = *(void *)(v14 + 128);
      *(_DWORD *)uint64_t buf = 68290051;
      int v44 = 0;
      __int16 v45 = 2082;
      id v46 = "";
      __int16 v47 = 2049;
      id v48 = v17;
      __int16 v49 = 2049;
      uint64_t v50 = v16;
      __int16 v51 = 1026;
      int v52 = v15;
      __int16 v53 = 2114;
      uint64_t v54 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#significantRegion: fetching LOI - error", "{\"msg%{public}.0s\":\"#significantRegion: fetching LOI - error\", \"latitude\":\"%{private}f\", \"longitude\":\"%{private}f\", \"radius\":%{public}d, \"error\":%{public, location:escape_only}@}", buf, 0x36u);
    }
    sub_100DCCD14(v6 + 120);
    if (!*(unsigned char *)(*(void *)(a1[5] + 8) + 24))
    {
      sub_100DCC088((uint64_t **)(v6 + 120), (unsigned char *)(*(void *)(a1[4] + 8) + 48), 1, Current);
      if (*(void *)(v6 + 3000))
      {
        sub_100168850(buf);
        sub_100AE8698(1, *(void *)(a1[4] + 8) + 48, (uint64_t)buf, Current);
        sub_100030BFC(*(void *)(v6 + 3000));
LABEL_12:
        sub_1001687EC(buf);
      }
    }
  }
  else if (a2)
  {
    id v18 = a2;
    sub_100134750(&v42, (char *)[[[v18 identifier] UUIDString] UTF8String]);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      sub_1000DC48C(&__p, v42.__r_.__value_.__l.__data_, v42.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v42;
    }
    [objc_msgSend(v18, "location", __p.__r_.__value_.__r.__words[0]) latitude];
    uint64_t v25 = v24;
    [objc_msgSend(v18, "location") longitude];
    uint64_t v27 = v26;
    [objc_msgSend(v18, "location") horizontalUncertainty];
    uint64_t v29 = v28;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_1000DC48C(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      uint64_t v39 = v25;
      uint64_t v40 = v27;
      uint64_t v41 = v29;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string __dst = __p;
      uint64_t v39 = v25;
      uint64_t v40 = v27;
      uint64_t v41 = v28;
    }
    sub_100DCAC14((uint64_t **)(v6 + 120), (uint64_t)&__dst, (unsigned __int8 *)(*(void *)(a1[4] + 8) + 48), Current, *(unsigned __int8 *)(*(void *)(a1[5] + 8) + 24));
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    __int16 v30 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
    {
      [objc_msgSend(v18, "location") horizontalUncertainty];
      *(_DWORD *)uint64_t buf = 68289539;
      int v44 = 0;
      __int16 v45 = 2082;
      id v46 = "";
      __int16 v47 = 2113;
      id v48 = v18;
      __int16 v49 = 1026;
      LODWORD(v50) = (int)v31;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#significantRegion: fetching LOI - match\", \"loi\":%{private, location:escape_only}@, \"radius\":%{public}d}", buf, 0x22u);
    }
    [objc_msgSend(v18, "location") horizontalUncertainty];
    double v33 = v32;
    [objc_msgSend(v18, "location") latitude];
    double v35 = v34;
    [objc_msgSend(v18, "location") longitude];
    sub_100DCCD24(v6 + 120, v33, v35, v36, *(double *)(*(void *)(a1[4] + 8) + 120), *(double *)(*(void *)(a1[4] + 8) + 128));
    if (*(void *)(v6 + 3000))
    {
      sub_100168850(buf);
      sub_100AE8968(&__dst, *(void *)(a1[4] + 8) + 48, (uint64_t)buf, Current);
      sub_100030BFC(*(void *)(v6 + 3000));
      sub_1001687EC(buf);
    }

    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    double v19 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = *(void *)(a1[4] + 8);
      int v21 = (int)*(double *)(v20 + 144);
      id v23 = *(void **)(v20 + 120);
      uint64_t v22 = *(void *)(v20 + 128);
      *(_DWORD *)uint64_t buf = 68289795;
      int v44 = 0;
      __int16 v45 = 2082;
      id v46 = "";
      __int16 v47 = 2049;
      id v48 = v23;
      __int16 v49 = 2049;
      uint64_t v50 = v22;
      __int16 v51 = 1026;
      int v52 = v21;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#significantRegion: fetching LOI - no match\", \"latitude\":\"%{private}f\", \"longitude\":\"%{private}f\", \"radius\":%{public}d}", buf, 0x2Cu);
    }
    sub_100DCCD1C(v6 + 120);
    if (!*(unsigned char *)(*(void *)(a1[5] + 8) + 24))
    {
      sub_100DCC088((uint64_t **)(v6 + 120), (unsigned char *)(*(void *)(a1[4] + 8) + 48), 0, Current);
      if (*(void *)(v6 + 3000))
      {
        sub_100168850(buf);
        sub_100AE8698(0, *(void *)(a1[4] + 8) + 48, (uint64_t)buf, Current);
        sub_100030BFC(*(void *)(v6 + 3000));
        goto LABEL_12;
      }
    }
  }
}

void sub_100D88948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
}

void sub_100D889C4(uint64_t a1, int *a2, uint64_t a3, long long *a4)
{
  v34[0] = 0;
  v34[1] = v34;
  v34[2] = 0x12812000000;
  uint64_t v34[3] = sub_100177E10;
  v34[4] = sub_100177520;
  v34[5] = "/!0";
  sub_10048AEC0((char *)&v35, (long long *)a3);
  v32[0] = 0;
  v32[1] = v32;
  id v32[2] = 0x2020000000;
  int v33 = *a2;
  v22[0] = 0;
  v22[1] = v22;
  v22[2] = 0xD012000000;
  v22[3] = sub_100D89068;
  long long v8 = a4[6];
  long long v9 = a4[8];
  long long v30 = a4[7];
  v31[0] = v9;
  *(_OWORD *)((char *)v31 + 12) = *(long long *)((char *)a4 + 140);
  long long v10 = a4[2];
  long long v11 = a4[4];
  long long v12 = a4[5];
  long long v26 = a4[3];
  long long v27 = v11;
  long long v28 = v12;
  long long v29 = v8;
  long long v13 = a4[1];
  long long v23 = *a4;
  void v22[4] = nullsub_1113;
  void v22[5] = 0;
  long long v24 = v13;
  long long v25 = v10;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  _OWORD v21[2] = sub_100D890A0;
  v21[3] = &unk_1022F63E8;
  void v21[4] = v34;
  v21[5] = v32;
  v21[6] = v22;
  v21[7] = a1;
  switch(v33)
  {
    case -1:
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      uint64_t v14 = qword_1024193C8;
      if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "#significantRegion: unknown status", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193C0 != -1) {
          goto LABEL_39;
        }
        goto LABEL_23;
      }
      break;
    case 0:
      uint64_t v16 = 1;
      goto LABEL_27;
    case 1:
      uint64_t v16 = 2;
      goto LABEL_27;
    case 2:
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      long long v17 = qword_1024193C8;
      if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "#significantRegion: invalid status", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        break;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 == -1) {
        goto LABEL_23;
      }
      goto LABEL_39;
    case 3:
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      int v15 = qword_1024193C8;
      if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "#significantRegion: not set status", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        break;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 == -1) {
        goto LABEL_23;
      }
LABEL_39:
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
LABEL_23:
      id v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLFenceMonitorNotifier::sendLoiFenceEventHint(const CLFenceManager_Type::FenceStatus &, const CLFenceManager_Type::Fence &, const CLDaemonLocation &)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
      break;
    default:
      uint64_t v16 = 0;
LABEL_27:
      id v19 = objc_alloc((Class)CLCircularRegion);
      CLLocationCoordinate2D v20 = CLLocationCoordinate2DMake(*(CLLocationDegrees *)(a3 + 72), *(CLLocationDegrees *)(a3 + 80));
      [*(id *)(a1 + 2288) setHintForRegionState:v16 significantRegion:[v19 initWithCenter:v20.latitude, v20.longitude, sub_100044A78(a3)] withReply:v21];
      break;
  }
  _Block_object_dispose(v22, 8);
  _Block_object_dispose(v32, 8);
  _Block_object_dispose(v34, 8);
  if (__p)
  {
    __int16 v45 = __p;
    operator delete(__p);
  }

  if (v42 < 0) {
    operator delete(v41);
  }
  if (v40 < 0) {
    operator delete(v39);
  }
  if (v38 < 0) {
    operator delete(v37);
  }
  if (v36 < 0) {
    operator delete(v35);
  }
}

void sub_100D88FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a46, 8);
  _Block_object_dispose(&a50, 8);
  sub_100488394(v50);
  _Unwind_Resume(a1);
}

__n128 sub_100D89068(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v2;
  long long v3 = *(_OWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 96);
  long long v5 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v5;
  *(_OWORD *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 96) = v4;
  __n128 result = *(__n128 *)(a2 + 144);
  long long v7 = *(_OWORD *)(a2 + 160);
  long long v8 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 188) = *(_OWORD *)(a2 + 188);
  *(_OWORD *)(a1 + 160) = v7;
  *(_OWORD *)(a1 + 176) = v8;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

void sub_100D890A0(uint64_t a1, int a2, uint64_t a3)
{
  if (a2)
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    long long v3 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#significantRegion: successfully sent hint", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      __int16 v11 = 0;
      long long v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::sendLoiFenceEventHint(const CLFenceManager_Type::FenceStatus &, const CLFenceManager_Type::Fence &, const CLDaemonLocation &)_block_invoke", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 56);
    if (sub_100044B44()[2])
    {
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      long long v7 = qword_1024193C8;
      if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 68289282;
        int v13 = 0;
        __int16 v14 = 2082;
        int v15 = "";
        __int16 v16 = 2114;
        uint64_t v17 = a3;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#significantRegion: could not deliver hint\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022F66B8);
        }
      }
      long long v8 = qword_1024193C8;
      if (os_signpost_enabled((os_log_t)qword_1024193C8))
      {
        *(_DWORD *)uint64_t buf = 68289282;
        int v13 = 0;
        __int16 v14 = 2082;
        int v15 = "";
        __int16 v16 = 2114;
        uint64_t v17 = a3;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#significantRegion: could not deliver hint", "{\"msg%{public}.0s\":\"#significantRegion: could not deliver hint\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
      CFAbsoluteTimeGetCurrent();
      sub_100134750(&__p, "HintError");
      sub_100DBB9B0(v6 + 120);
      if (v10 < 0) {
        operator delete(__p);
      }
    }
  }
}

void sub_100D893E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D89404(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 2640))
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    uint64_t v1 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v7 = 0;
      __int16 v8 = 2082;
      long long v9 = "";
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#significantRegion: already monitoring\"}", buf, 0x12u);
    }
  }
  else if (sub_100DCAC04(a1 + 120))
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    long long v3 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v7 = 0;
      __int16 v8 = 2082;
      long long v9 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#significantRegion: start monitoring\"}", buf, 0x12u);
    }
    [*(id *)(a1 + 2288) startMonitoringVisitsForClient:CLISP_ME_TOKEN];
    *(unsigned char *)(a1 + 2640) = 1;
    if (*(void *)(a1 + 3000))
    {
      double Current = CFAbsoluteTimeGetCurrent();
      sub_100168850(buf);
      sub_100134750(&__p, "");
      sub_100AE8DB4(3u, 1, &__p, (uint64_t)buf, Current);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_100030BFC(*(void *)(a1 + 3000));
      sub_1001687EC(buf);
    }
  }
}

void sub_100D89608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void sub_100D89640(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 2640))
  {
    if (!sub_100DCAC04(a1 + 120))
    {
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      long long v2 = qword_1024193C8;
      if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        int v7 = 0;
        __int16 v8 = 2082;
        long long v9 = "";
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#significantRegion: stop monitoring\"}", buf, 0x12u);
      }
      [*(id *)(a1 + 2288) stopMonitoringVisitsForClient:CLISP_ME_TOKEN];
      *(unsigned char *)(a1 + 2640) = 0;
      if (*(void *)(a1 + 3000))
      {
        double Current = CFAbsoluteTimeGetCurrent();
        sub_100168850(buf);
        sub_100134750(&__p, "");
        sub_100AE8DB4(3u, 0, &__p, (uint64_t)buf, Current);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        sub_100030BFC(*(void *)(a1 + 3000));
        sub_1001687EC(buf);
      }
    }
  }
  else
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    long long v4 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v7 = 0;
      __int16 v8 = 2082;
      long long v9 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#significantRegion: already stopped monitoring\"}", buf, 0x12u);
    }
  }
}

void sub_100D89840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void sub_100D89878(uint64_t a1)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022F66B8);
  }
  long long v2 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Fence: settled timer expired", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    long long v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::onSettledTimerExpired(CLPersistentTimer *)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100DC30B0(a1 + 120);
  if (*(void *)(a1 + 3000))
  {
    sub_100168850(buf);
    sub_1001B0A78(*(void *)(a1 + 2376), (uint64_t)&__p);
    sub_10001A794(&__p, 1u, (uint64_t)buf, Current, -1.0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_100030BFC(*(void *)(a1 + 3000));
    sub_1001687EC(buf);
  }
}

void sub_100D89A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
}

BOOL sub_100D89AB4(uint64_t a1, int a2)
{
  int v8 = a2;
  BOOL result = +[CLGnssProviderAdapter isSupported];
  if (result)
  {
    sub_100134750(v6, "onLocationWatchdogExpire");
    if (*(int *)(a1 + 2440) <= 0)
    {
      if (SHIBYTE(v7) < 0)
      {
        sub_1000DC48C(__p, v6[0], (unint64_t)v6[1]);
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)v6;
        uint64_t v11 = v7;
      }
      sub_100EBBFD8(a1 + 2432, (uint64_t *)__p);
      if (SHIBYTE(v11) < 0) {
        operator delete(__p[0]);
      }
    }
    if (SHIBYTE(v7) < 0) {
      operator delete(v6[0]);
    }
    sub_100DC3B90(a1 + 120);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    long long v4 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: onLocationWatchdogExpired, start gps", (uint8_t *)__p, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      LOWORD(v9) = 0;
      long long v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CFAbsoluteTime CLFenceMonitorNotifier::startGps(int, int)", "%s\n", v5);
      if (v5 != (char *)__p) {
        free(v5);
      }
    }
    if (sub_1000FC450())
    {
      sub_1000E9354(__p);
      sub_1000EA838((uint64_t)__p, "WatchdogExpiredStartGps", &v8);
      sub_1000FC45C((uint64_t)__p, (uint64_t)"locationd");
      sub_10013F3C4(__p);
    }
    sub_100E92BC0();
  }
  return result;
}

void sub_100D8A390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100D8A408()
{
  if (+[CLGnssProviderAdapter isSupported]) {
    sub_100E92BC0();
  }
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022F66B8);
  }
  uint64_t v0 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Fence: MiLo, failed to start GPS, not supported", buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    long long v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLFenceMonitorNotifier::startGpsForMiLoHomeLoiMetrics()", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
    return 0;
  }
  return result;
}

void sub_100D8AA9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
}

void sub_100D8AAD4(uint64_t a1)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022F66B8);
  }
  long long v2 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 2248);
    *(_DWORD *)uint64_t buf = 134283521;
    uint64_t v13 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Fence: unregister gps client, %{private}p", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    std::string::size_type v8 = *(void *)(a1 + 2248);
    LODWORD(__p.__r_.__value_.__l.__data_) = 134283521;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v8;
    long long v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::stopGps()", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022F66D8);
  }
  long long v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#wigo,off,Fence", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022F66D8);
    }
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    char v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::stopGps()", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  uint64_t v5 = *(void *)(a1 + 2248);
  *(void *)(a1 + 2248) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  double Current = CFAbsoluteTimeGetCurrent();
  if (*(void *)(a1 + 3000))
  {
    double v7 = Current;
    sub_100168850(buf);
    sub_100134750(&__p, "");
    sub_100AE8DB4(0, 0, &__p, (uint64_t)buf, v7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_100030BFC(*(void *)(a1 + 3000));
    sub_1001687EC(buf);
  }
}

void sub_100D8AE54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
}

void sub_100D8AE8C(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 1)
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    uint64_t v6 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      int v7 = sub_100DBAD04(a1 + 120);
      int v8 = *(unsigned __int8 *)(a4 + 4);
      *(_DWORD *)uint64_t buf = 67240448;
      int v11 = v7;
      __int16 v12 = 1026;
      int v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Fence: state kNotificationDeviceUnlockedSinceBoot, from, %{public}d, to, %{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      sub_100DBAD04(a1 + 120);
      long long v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceMonitorNotifier::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    if (*(unsigned char *)(a4 + 4))
    {
      [*(id *)(*(void *)(a1 + 2304) + 16) unregister:*(void *)(*(void *)(a1 + 2304) + 8) forNotification:1];
      CFAbsoluteTimeGetCurrent();
      sub_100DC34E4(a1 + 120, *(unsigned __int8 *)(a4 + 4));
    }
  }
}

BOOL sub_100D8B0A4(uint64_t a1)
{
  return sub_101576750(a1 + 2064);
}

unsigned char *sub_100D8B0AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_101576778(a1 + 2064, a2);
}

void sub_100D8B0B4(uint64_t a1)
{
  [*(id *)(a1 + 2296) clearExitAndEntryScanNetworks:0];
  double Current = CFAbsoluteTimeGetCurrent();
  if (*(void *)(a1 + 3000))
  {
    double v3 = Current;
    sub_100168850(v6);
    memset(v5, 0, sizeof(v5));
    memset(v4, 0, sizeof(v4));
    sub_100AE9564(v5, (uint64_t *)v4, (uint64_t)v6, v3);
    int v7 = v4;
    sub_1000D7F78((void ***)&v7);
    v4[0] = (void **)v5;
    sub_1000D7F78(v4);
    sub_100030BFC(*(void *)(a1 + 3000));
    sub_1001687EC(v6);
  }
}

void sub_100D8B168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

void sub_100D8B19C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *(void **)(a1 + 2296);
  memset(v12, 0, sizeof(v12));
  sub_1000DA6E8(v12, *a2, a2[1], 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3));
  id v7 = sub_100D8B304(v12);
  memset(v11, 0, sizeof(v11));
  sub_1000DA6E8(v11, *a3, a3[1], 0x2E8BA2E8BA2E8BA3 * ((a3[1] - *a3) >> 3));
  [v6 programEntryScanNetworks:v7 andExitScanNetworks:sub_100D8B304(v11)];
  v10[0] = (void **)v11;
  sub_1000D7F78(v10);
  v10[0] = (void **)v12;
  sub_1000D7F78(v10);
  double Current = CFAbsoluteTimeGetCurrent();
  if (*(void *)(a1 + 3000))
  {
    double v9 = Current;
    sub_100168850(v10);
    sub_100AE9564(a2, a3, (uint64_t)v10, v9);
    sub_100030BFC(*(void *)(a1 + 3000));
    sub_1001687EC(v10);
  }
}

void sub_100D8B2C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

id sub_100D8B304(uint64_t *a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3321888768;
  _DWORD v3[2] = sub_100D8E9FC;
  void v3[3] = &unk_1022F6908;
  memset(v4, 0, sizeof(v4));
  sub_1000DA6E8(v4, *a1, a1[1], 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3));
  id v1 = [v3 copy];
  uint64_t v5 = (void **)v4;
  sub_1000D7F78(&v5);
  return v1;
}

void sub_100D8B3C0(_Unwind_Exception *a1)
{
  *(void *)(v2 - 24) = v1;
  sub_1000D7F78((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100D8B3D8(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  id v3 = [+[CLServiceVendor sharedInstance] proxyForService:@"CLMicroLocationNotifier"];
  [v3 requestCurrentMicroLocationForClient:@"geofence" withAdditionalInformation:0];
  if (v3)
  {
    ++*(_DWORD *)(a1 + 2944);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    long long v4 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Fence: MiLo, microlocation localizer triggered", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::triggerMicroLocationLocalizer()", "%s\n", v5);
LABEL_25:
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  else
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    uint64_t v6 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Fence: MiLo, proxy not available", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLFenceMonitorNotifier::triggerMicroLocationLocalizer()", "%s\n", v5);
      goto LABEL_25;
    }
  }

  if (*(void *)(a1 + 3000))
  {
    if (v3) {
      id v7 = "";
    }
    else {
      id v7 = "error";
    }
    sub_100134750(&__p, v7);
    sub_100168850(buf);
    sub_100AE8DB4(2u, 1, &__p, (uint64_t)buf, Current);
    sub_100030BFC(*(void *)(a1 + 3000));
    sub_1001687EC(buf);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_100D8B74C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_100D8B780(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 2296) setBackgroundExitScanCount:a2];
}

void sub_100D8B78C(uint64_t a1, char *a2)
{
  sub_100134750(&v9, a2);
  if (*(int *)(a1 + 2488) <= 0)
  {
    if (SHIBYTE(v10) < 0)
    {
      sub_1000DC48C(__p, (void *)v9, *((unint64_t *)&v9 + 1));
    }
    else
    {
      *(_OWORD *)std::string __p = v9;
      uint64_t v8 = v10;
    }
    sub_100EBBFD8(a1 + 2480, (uint64_t *)__p);
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }
  if (SHIBYTE(v10) < 0) {
    operator delete((void *)v9);
  }
  double Current = CFAbsoluteTimeGetCurrent();
  if (*(void *)(a1 + 3000))
  {
    double v5 = Current;
    sub_100168850(__p);
    sub_100134750(&__str, a2);
    sub_100AE98C4(&__str, (uint64_t)__p, v5);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    sub_100030BFC(*(void *)(a1 + 3000));
    sub_1001687EC(__p);
  }
}

void sub_100D8B880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 33) < 0) {
    operator delete(*(void **)(v21 - 56));
  }
  _Unwind_Resume(exception_object);
}

void sub_100D8B8E0(uint64_t a1)
{
  sub_100EBC6AC(a1 + 2480);
  double Current = CFAbsoluteTimeGetCurrent();
  if (*(void *)(a1 + 3000))
  {
    double v3 = Current;
    sub_100168850(v4);
    sub_100AE9AF4((uint64_t)v4, v3);
    sub_100030BFC(*(void *)(a1 + 3000));
    sub_1001687EC(v4);
  }
}

void sub_100D8B950(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

void sub_100D8B964(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 2336);
  if (v1)
  {
    dispatch_time_t v2 = dispatch_time(0, 5000000000);
    dispatch_source_set_timer(v1, v2, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
  }
  else
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022F66B8);
    }
    double v3 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Fence: ignore recalculation, shut down?", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022F66B8);
      }
      long long v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::scheduleRecalculate()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_100D8BB58(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        long long v9 = (uint64_t *)v4;
      }
      else {
        long long v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)uint64_t buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022F6698);
      }
      uint64_t v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        int v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          int v11 = (void *)*v11;
        }
        *(_DWORD *)uint64_t buf = 136446466;
        id v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022F6698);
        }
        __int16 v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          __int16 v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        int v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        int v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::string>::removeClient(int) [Notification_T = CLFenceMonitor_Type::Notification, NotificationData_T = CLFenceMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_100D8BDE8(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_100110018(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_100D8BE9C(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_100D8BEE4(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_100D8BF2C(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_100D8BF74(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102474628, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = a1;
    int v3 = __cxa_guard_acquire(&qword_102474628);
    a1 = v4;
    if (v3)
    {
      qword_102474610 = 0;
      *(void *)algn_102474618 = 0;
      qword_102474620 = 0;
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102474610, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_102474628);
      a1 = v4;
    }
  }
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)a1 + 96);

  return v1();
}

BOOL sub_100D8C050(uint64_t a1, int a2, int *a3, const std::string *a4)
{
  int v41 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        int v13 = (uint64_t *)v7;
      }
      else {
        int v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      uint64_t v40 = v10;
      int v16 = *a3;
      uint64_t v19 = *(void *)(v10 + 48);
      uint64_t v18 = v10 + 48;
      uint64_t v17 = v19;
      if (!v19) {
        goto LABEL_31;
      }
      uint64_t v20 = v18;
      do
      {
        int v21 = *(_DWORD *)(v17 + 28);
        BOOL v22 = v21 < v16;
        if (v21 >= v16) {
          long long v23 = (uint64_t *)v17;
        }
        else {
          long long v23 = (uint64_t *)(v17 + 8);
        }
        if (!v22) {
          uint64_t v20 = v17;
        }
        uint64_t v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28)) {
LABEL_31:
      }
        uint64_t v20 = v18;
      uint64_t v24 = *(void *)(a1 + 64);
      if (!v24) {
        goto LABEL_42;
      }
      uint64_t v25 = a1 + 64;
      do
      {
        int v26 = *(_DWORD *)(v24 + 32);
        BOOL v27 = v26 < v16;
        if (v26 >= v16) {
          long long v28 = (uint64_t *)v24;
        }
        else {
          long long v28 = (uint64_t *)(v24 + 8);
        }
        if (!v27) {
          uint64_t v25 = v24;
        }
        uint64_t v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(void *)char v42 = v25;
        uint64_t v34 = *(void *)(v25 + 56);
        *(void *)uint64_t buf = &v41;
        double v35 = sub_1000EAEE4((uint64_t **)(v25 + 40), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        std::string::operator=((std::string *)(v35 + 5), a4);
        __n128 v36 = sub_100D8EB6C(buf);
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, unsigned char *, __n128))(*(void *)a1 + 128))(a1, a3, buf, v36))
        {
          sub_100D8EA88();
        }
        if (v56)
        {
          uint64_t v57 = v56;
          operator delete(v56);
        }

        if (v54 < 0) {
          operator delete(v53);
        }
        if (v52 < 0) {
          operator delete(__p);
        }
        if (v50 < 0) {
          operator delete(v49);
        }
        if (v48 < 0) {
          operator delete(*(void **)buf);
        }
        if (v34) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        *(void *)char v42 = a1 + 64;
        char v29 = byte_102474630;
        int v39 = v16;
        *(void *)uint64_t buf = &v39;
        *((unsigned char *)sub_10078BC58((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v29;
        int v39 = *a3;
        *(void *)uint64_t buf = &v39;
        long long v30 = sub_10078BC58((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        double v31 = (std::__shared_weak_count *)v30[9];
        v30[8] = 0;
        v30[9] = 0;
        if (v31) {
          sub_1000DB0A0(v31);
        }
        int v39 = *a3;
        *(void *)uint64_t buf = &v39;
        double v32 = sub_10078BC58((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)uint64_t buf = &v41;
        int v33 = sub_1000EAEE4(v32 + 5, &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        std::string::operator=((std::string *)(v33 + 5), a4);
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v20 == v18)
      {
        *(_DWORD *)uint64_t buf = *a3;
        sub_1000EDED4((uint64_t **)(v40 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022F6698);
  }
  __int16 v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    int v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v15 = (void *)*v15;
    }
    *(_DWORD *)uint64_t buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v46 = 1026;
    int v47 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F6698);
    }
    long long v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v37 = (void *)*v37;
    }
    *(_DWORD *)char v42 = 136446466;
    *(void *)&v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = v41;
    char v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::string>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLFenceMonitor_Type::Notification, NotificationData_T = CLFenceMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v38);
    if (v38 != buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

void sub_100D8C560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_100488394((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100D8C590(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        int v21 = (uint64_t *)v15;
      }
      else {
        int v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022F6698);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)uint64_t buf = 136446466;
      uint64_t v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022F6698);
      }
      BOOL v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::string>::clientRegistered(int, const Notification_T &) [Notification_T = CLFenceMonitor_Type::Notification, NotificationData_T = CLFenceMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_100D8C814(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        int v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            int v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            BOOL v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                BOOL v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10006D9B8((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022F6698);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                BOOL v27 = a1 + 8;
                if (a1[31] < 0) {
                  BOOL v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  long long v28 = __p;
                }
                else {
                  long long v28 = (void **)__p[0];
                }
                *(_DWORD *)uint64_t buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                double v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022F6698);
                }
                char v29 = a1 + 8;
                if (a1[31] < 0) {
                  char v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  long long v30 = buf;
                }
                else {
                  long long v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                char v38 = v29;
                __int16 v39 = 2082;
                uint64_t v40 = v30;
                double v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::string>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLFenceMonitor_Type::Notification, NotificationData_T = CLFenceMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}