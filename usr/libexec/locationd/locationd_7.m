void sub_10041B8AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10041B8D0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 1068))
  {
    BOOL result = sub_10041A124(a1);
    if (!result) {
      return result;
    }
    *(unsigned char *)(a1 + 1068) = 1;
  }
  if (*(unsigned char *)(a1 + 1069)) {
    return 1;
  }
  if (sub_10041ABE8(a1))
  {
    BOOL result = 1;
    *(unsigned char *)(a1 + 1069) = 1;
  }
  else
  {
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_1022B1FD0);
    }
    v3 = qword_102419008;
    if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Cannot yet set first swim session entry", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_1022B1FD0);
      }
      v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLSwimDataStore::setupSessionPersistence()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_10041BAA4(uint64_t a1, double a2)
{
  *(double *)(a1 + 1000) = a2;
  return sub_10041B8D0(a1);
}

void sub_10041BAAC(uint64_t a1, void *a2)
{
  if (qword_102419000 != -1) {
    dispatch_once(&qword_102419000, &stru_1022B1FD0);
  }
  v3 = qword_102419008;
  if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v47) = [a2 count];
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Got %d swimming LOIs.", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_1022B1FD0);
    }
    *(_DWORD *)uu2 = 67109120;
    *(_DWORD *)&uu2[4] = [a2 count];
    v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSwimDataStore::setCurrentLOI(NSArray *)", "%s\n", v24);
    if (v24 != (char *)buf) {
      free(v24);
    }
  }
  if ((int)[a2 count] >= 1)
  {
    if (!*(unsigned char *)(a1 + 1068) && sub_10041A124(a1)) {
      *(unsigned char *)(a1 + 1068) = 1;
    }
    memset(uu, 0, sizeof(uu));
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    id obj = [a2 reverseObjectEnumerator];
    id v28 = [obj countByEnumeratingWithState:&v31 objects:v44 count:16];
    if (!v28) {
      goto LABEL_59;
    }
    char v4 = 0;
    uint64_t v26 = *(void *)v32;
    do
    {
      v5 = 0;
      do
      {
        if (*(void *)v32 != v26) {
          objc_enumerationMutation(obj);
        }
        sub_100134750(__p, (char *)[objc_msgSend(*(id *)(*((void *)&v31 + 1) + 8 * (void)v5), "UUIDString") UTF8String]);
        if (qword_102419000 != -1) {
          dispatch_once(&qword_102419000, &stru_1022B1FD0);
        }
        v6 = qword_102419008;
        if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEBUG))
        {
          if (v30 >= 0) {
            v7 = __p;
          }
          else {
            v7 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136315138;
          v47 = v7;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Checking swimming LOI with id '%s'.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419000 != -1) {
            dispatch_once(&qword_102419000, &stru_1022B1FD0);
          }
          if (v30 >= 0) {
            v20 = __p;
          }
          else {
            v20 = (void **)__p[0];
          }
          *(_DWORD *)uu2 = 136315138;
          *(void *)&uu2[4] = v20;
          v21 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLSwimDataStore::setCurrentLOI(NSArray *)", "%s\n", v21);
          if (v21 != (char *)buf) {
            free(v21);
          }
        }
        if (v30 >= 0) {
          v8 = __p;
        }
        else {
          v8 = (void **)__p[0];
        }
        uuid_parse((const char *)v8, uu);
        v10 = *(long long **)(a1 + 32);
        v9 = *(long long **)(a1 + 40);
        while (v10 != v9)
        {
          long long v11 = *v10;
          long long v12 = v10[1];
          long long v39 = v10[2];
          *(_OWORD *)uu2 = v11;
          long long v38 = v12;
          long long v13 = v10[3];
          long long v14 = v10[4];
          long long v15 = v10[6];
          long long v42 = v10[5];
          long long v43 = v15;
          long long v40 = v13;
          long long v41 = v14;
          if (!uuid_compare(uu, uu2))
          {
            if (qword_102419000 != -1) {
              dispatch_once(&qword_102419000, &stru_1022B1FD0);
            }
            v16 = qword_102419008;
            if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEBUG))
            {
              if (v30 >= 0) {
                v17 = __p;
              }
              else {
                v17 = (void **)__p[0];
              }
              *(_DWORD *)buf = 136315138;
              v47 = v17;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Found swimming distributions for LOI with id '%s'.", buf, 0xCu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419000 != -1) {
                dispatch_once(&qword_102419000, &stru_1022B1FD0);
              }
              if (v30 >= 0) {
                v18 = __p;
              }
              else {
                v18 = (void **)__p[0];
              }
              int v35 = 136315138;
              v36 = v18;
              v19 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLSwimDataStore::setCurrentLOI(NSArray *)", "%s\n", v19);
              if (v19 != (char *)buf) {
                free(v19);
              }
            }
            uuid_copy((unsigned __int8 *)(a1 + 1030), uu);
            char v4 = 1;
          }
          v10 += 7;
        }
        if (v30 < 0) {
          operator delete(__p[0]);
        }
        v5 = (char *)v5 + 1;
      }
      while (v5 != v28);
      id v22 = [obj countByEnumeratingWithState:&v31 objects:v44 count:16];
      id v28 = v22;
    }
    while (v22);
    if ((v4 & 1) == 0) {
LABEL_59:
    }
      uuid_copy((unsigned __int8 *)(a1 + 1030), uu);
    *(CFAbsoluteTime *)(a1 + 1048) = CFAbsoluteTimeGetCurrent();
    for (uint64_t i = 200; i != 984; i += 112)
      uuid_copy((unsigned __int8 *)(a1 + i), (const unsigned __int8 *)(a1 + 1030));
  }
}

void sub_10041C108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10041C138(uint64_t a1, double a2, double a3)
{
  if (*(void *)(a1 + 2120) == 1) {
    sub_10041C14C(a1, a2, a3);
  }
  else {
    sub_10041C390(a1);
  }
}

void sub_10041C14C(uint64_t a1, double a2, double a3)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1) & 1) == 0 && sub_10041B8D0(a1))
  {
    uint64_t v23 = 0;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v16 = 0u;
    memset(v15, 0, sizeof(v15));
    uuid_copy((unsigned __int8 *)v15 + 8, (const unsigned __int8 *)(a1 + 1014));
    uint64_t v6 = *(void *)(a1 + 192);
    if (v6)
    {
      unint64_t v7 = *(void *)(*(void *)(a1 + 160) + 8 * ((v6 + *(void *)(a1 + 184) - 1) / 0x1AuLL))
         + 152 * ((v6 + *(void *)(a1 + 184) - 1) % 0x1AuLL);
      *((void *)&v16 + 1) = *(void *)(v7 + 48);
      int v8 = (*(uint64_t (**)(uint64_t, void, double, double))(*(void *)a1 + 136))(a1, *(void *)(a1 + 96), *(double *)(v7 + 56), a3);
      unint64_t v9 = *(void *)(a1 + 192) + *(void *)(a1 + 184) - 1;
      int v10 = *(_DWORD *)(*(void *)(*(void *)(a1 + 160) + 8 * (v9 / 0x1A)) + 152 * (v9 % 0x1A) + 108);
    }
    else
    {
      *((void *)&v16 + 1) = *(void *)(a1 + 992);
      int v8 = sub_101221010(a1 + 2128);
      int v10 = 0;
    }
    DWORD1(v20) = v8;
    HIDWORD(v20) = v10;
    *(double *)&long long v17 = a2;
    *((double *)&v17 + 1) = a3;
    *(void *)&long long v18 = 0;
    *((void *)&v18 + 1) = sub_100B02B58(a1 + 2104);
    long long v19 = *(unint64_t *)&a2;
    LODWORD(v20) = 3;
    DWORD2(v20) = (*(uint64_t (**)(uint64_t, double))(*(void *)a1 + 128))(a1, a3);
    if (*(void *)(a1 + 96))
    {
      int v11 = sub_10041DD54((void *)a1, (uint64_t)v13, a3);
      int v12 = v14;
      if (!v11) {
        int v12 = 0;
      }
    }
    else
    {
      int v12 = *(_DWORD *)(a1 + 1060);
    }
    LODWORD(v23) = v12;
    DWORD2(v21) = 0;
    long long v22 = COERCE_UNSIGNED_INT64(sub_100B03448((uint64_t)v15, a1));
    sub_10041AF24(a1, (uint64_t)v15);
  }
}

void sub_10041C390(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t, _DWORD *))(*(void *)a1 + 120))(a1, v2))
  {
    double v4 = sub_100B0362C(v3++, a1);
    v2[24] = 5;
    sub_10041AF24(a1, (uint64_t)v2);
  }
}

void sub_10041C440(uint64_t a1)
{
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  uint64_t v3 = a1 + 1072;
  uint64_t v4 = a1 + 984;
  do
  {
    if (*(unsigned char *)(v4 + v2))
    {
      if (*(_DWORD *)(v4 + v1 - 744) != 6) {
        sub_100E4E618(v3);
      }
    }
    ++v2;
    v1 += 112;
  }
  while (v2 != 7);
}

BOOL sub_10041C4AC(uint64_t a1, unsigned int a2, char a3, double a4)
{
  BOOL v8 = sub_10041B8D0(a1);
  if (v8)
  {
    sub_100D56B08(a1 + 1544, a4);
    uint64_t v14 = 0;
    v13.n128_f64[0] = a4;
    int v9 = *(_DWORD *)(a1 + 1056) + 1;
    *(_DWORD *)(a1 + 1056) = v9;
    v13.n128_u64[1] = __PAIR64__(v9, a2);
    LOBYTE(v14) = a3;
    int v10 = *(_DWORD *)(a1 + 1060);
    if (a2 == 6) {
      *(_DWORD *)(a1 + 1060) = ++v10;
    }
    HIDWORD(v14) = v10;
    unint64_t v11 = *(void *)(a1 + 96);
    if (v11 >= 0x1F5)
    {
      ++*(void *)(a1 + 88);
      *(void *)(a1 + 96) = v11 - 1;
      sub_10041FD7C(a1 + 56, 1);
    }
    sub_10041C578((void *)(a1 + 56), &v13);
  }
  return v8;
}

__n128 sub_10041C578(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10041FDDC(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  BOOL v8 = (__n128 *)(*(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  __n128 result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *BOOL v8 = result;
  ++a1[5];
  return result;
}

BOOL sub_10041C628(void *a1, __n128 *a2, double a3)
{
  BOOL v6 = sub_10041B8D0((uint64_t)a1);
  if (v6)
  {
    if (a1[265]) {
      sub_101A5F654();
    }
    a2->n128_f64[0] = a3;
    a2[1].n128_u32[0] = *((_DWORD *)a1 + 252);
    uint64_t v7 = a1[18];
    if (v7)
    {
      BOOL v8 = (double *)(*(void *)(a1[14] + 8 * ((v7 + a1[17] - 1) / 0xAAuLL)) + 24 * ((v7 + a1[17] - 1) % 0xAAuLL));
    }
    else
    {
      uint64_t v9 = a1[24];
      if (v9) {
        BOOL v8 = (double *)(*(void *)(a1[20] + 8 * ((v9 + a1[23] - 1) / 0x1AuLL))
      }
                      + 152 * ((v9 + a1[23] - 1) % 0x1AuLL)
                      + 56);
      else {
        BOOL v8 = (double *)(a1 + 125);
      }
    }
    a2->n128_u32[2] = (*(uint64_t (**)(void *, void, double, double))(*a1 + 136))(a1, a1[12], *v8, a3);
    a2->n128_u32[3] = (*(uint64_t (**)(void *, double))(*a1 + 128))(a1, a3);
    unint64_t v10 = a1[18];
    if (v10 >= 0xC9)
    {
      ++a1[17];
      a1[18] = v10 - 1;
      sub_10041FD7C((uint64_t)(a1 + 13), 1);
    }
    sub_10041C7B8(a1 + 13, a2);
  }
  return v6;
}

__n128 sub_10041C7B8(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1004200F4(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  BOOL v8 = (__n128 *)(*(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  __n128 result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *BOOL v8 = result;
  ++a1[5];
  return result;
}

uint64_t sub_10041C868@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  return sub_100E4FFC0((uint64_t *)(a1 + 1072), a2, (void **)a3);
}

void sub_10041C89C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10041C8B8(uint64_t a1@<X0>, const unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
}

BOOL sub_10041C8C0(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[24];
  if (v2)
  {
    unint64_t v3 = *(void *)(a1[20] + 8 * ((v2 + a1[23] - 1) / 0x1AuLL)) + 152 * ((v2 + a1[23] - 1) % 0x1AuLL);
    long long v4 = *(_OWORD *)(v3 + 80);
    long long v6 = *(_OWORD *)(v3 + 32);
    long long v5 = *(_OWORD *)(v3 + 48);
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(v3 + 64);
    *(_OWORD *)(a2 + 80) = v4;
    *(_OWORD *)(a2 + 32) = v6;
    *(_OWORD *)(a2 + 48) = v5;
    long long v8 = *(_OWORD *)(v3 + 112);
    long long v7 = *(_OWORD *)(v3 + 128);
    long long v9 = *(_OWORD *)(v3 + 96);
    *(void *)(a2 + 144) = *(void *)(v3 + 144);
    *(_OWORD *)(a2 + 112) = v8;
    *(_OWORD *)(a2 + 128) = v7;
    *(_OWORD *)(a2 + 96) = v9;
    long long v10 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)v3;
    *(_OWORD *)(a2 + 16) = v10;
  }
  return v2 != 0;
}

void *sub_10041C940@<X0>(uint64_t a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, void **a4@<X8>)
{
  memset(dst, 0, sizeof(dst));
  uuid_copy(dst, (const unsigned __int8 *)(a1 + 1014));
  long long v8 = (char *)operator new(0x20uLL);
  *(void *)long long v8 = off_1022B2040;
  *((_DWORD *)v8 + 2) = a2;
  *(_OWORD *)(v8 + 12) = *(_OWORD *)dst;
  v10[3] = v8;
  sub_10041CA28((void *)a1, a3, (uint64_t)v10, a4);
  return sub_100420544(v10);
}

void sub_10041CA0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100420544((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10041CA28(void *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  int v5 = a2;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  unint64_t v8 = a1[23];
  unint64_t v9 = v8 + a1[24];
  uint64_t v10 = a1[20];
  uint64_t v11 = a1[21];
  int v12 = (unint64_t *)(v10 + 8 * (v9 / 0x1A));
  if (v11 == v10) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = *v12 + 152 * (v9 % 0x1A);
  }
  unint64_t v68 = a2;
  while (1)
  {
    unint64_t v14 = v11 == v10 ? 0 : *(void *)(v10 + 8 * (v8 / 0x1A)) + 152 * (v8 % 0x1A);
    if (v13 == v14 || v5 >= 1 && v68 <= ((unsigned char *)a4[1] - (unsigned char *)*a4) >> 4) {
      break;
    }
    unint64_t v15 = *v12;
    uint64_t v16 = v13 - *v12;
    unint64_t v17 = 0x86BCA1AF286BCA1BLL * (v16 >> 3);
    unint64_t v18 = v16 < 153
        ? v12[-((26 - v17) / 0x1A)] + 152 * (26 * ((26 - v17) / 0x1A) - (26 - v17)) + 3800
        : v12[(v17 - 1) / 0x1A] + 152 * ((v17 - 1) % 0x1A);
    unint64_t v19 = v11 == v10 ? 0 : *(void *)(v10 + 8 * (v8 / 0x1A)) + 152 * (v8 % 0x1A);
    if (v18 == v19) {
      break;
    }
    if (v13 == v15)
    {
      uint64_t v21 = *(v12 - 1);
      unint64_t v15 = v13;
      if ((*(_DWORD *)(v21 + 3896) - 1) >= 2) {
        goto LABEL_68;
      }
      unint64_t v20 = v21 + 3952;
    }
    else
    {
      unint64_t v20 = v13;
      if ((*(_DWORD *)(v13 - 56) - 1) >= 2) {
        goto LABEL_68;
      }
    }
    uint64_t v22 = *(void *)(a3 + 24);
    if (!v22) {
      sub_10015E48C();
    }
    int v23 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v22 + 48))(v22, v20 - 152);
    unint64_t v15 = *v12;
    if (v23)
    {
      unint64_t v24 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v13 - v15) >> 3);
      if ((uint64_t)(v13 - v15) < 153)
      {
        unint64_t v30 = 26 - v24;
        unint64_t v31 = (26 - v24) / 0x1A;
        v27 = &v12[-v31];
        unint64_t v28 = *v27;
        uint64_t v29 = *v27 + 152 * (26 * v31 - v30) + 3800;
      }
      else
      {
        unint64_t v25 = v24 - 1;
        unint64_t v26 = (v24 - 1) / 0x1A;
        v27 = &v12[v26];
        unint64_t v28 = *v27;
        uint64_t v29 = *v27 + 152 * (v25 - 26 * v26);
      }
      uint64_t v32 = a1[20];
      while (1)
      {
        unint64_t v33 = a1[21] == v32 ? 0 : *(void *)(v32 + 8 * (a1[23] / 0x1AuLL)) + 152 * (a1[23] % 0x1AuLL);
        if (v29 == v33) {
          break;
        }
        if (v29 == v28)
        {
          uint64_t v37 = *(v27 - 1);
          unsigned int v38 = *(_DWORD *)(v37 + 3896);
          BOOL v63 = v38 > 4;
          int v39 = (1 << v38) & 0x16;
          if (!v63 && v39 != 0)
          {
LABEL_46:
            if (v13 == v15)
            {
              uint64_t v43 = *(v12 - 1);
              long long v41 = (uint64_t *)(v43 + 3888);
              unint64_t v42 = v43 + 3952;
            }
            else
            {
              long long v41 = (uint64_t *)(v13 - 64);
              unint64_t v42 = v13;
            }
            uint64_t v44 = a3;
            if (v29 == v28) {
              uint64_t v29 = *(v27 - 1) + 3952;
            }
            uint64_t v45 = *v41;
            int v46 = *(_DWORD *)(v42 - 48) - *(_DWORD *)(v29 - 48);
            v47 = (char *)a4[1];
            v48 = (char *)a4[2];
            if (v47 >= v48)
            {
              uint64_t v50 = (v47 - (unsigned char *)*a4) >> 4;
              unint64_t v51 = v50 + 1;
              if ((unint64_t)(v50 + 1) >> 60) {
                sub_1001D7FD4();
              }
              uint64_t v52 = v48 - (unsigned char *)*a4;
              if (v52 >> 3 > v51) {
                unint64_t v51 = v52 >> 3;
              }
              if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v53 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v53 = v51;
              }
              if (v53) {
                v54 = (char *)sub_1000C571C((uint64_t)(a4 + 2), v53);
              }
              else {
                v54 = 0;
              }
              v55 = &v54[16 * v50];
              *(void *)v55 = v45;
              *((_DWORD *)v55 + 2) = v46;
              *((_DWORD *)v55 + 3) = 0;
              v57 = (char *)*a4;
              v56 = (char *)a4[1];
              v58 = v55;
              a3 = v44;
              if (v56 != *a4)
              {
                do
                {
                  *((_OWORD *)v58 - 1) = *((_OWORD *)v56 - 1);
                  v58 -= 16;
                  v56 -= 16;
                }
                while (v56 != v57);
                v56 = (char *)*a4;
              }
              int v5 = a2;
              v49 = v55 + 16;
              *a4 = v58;
              a4[1] = v55 + 16;
              a4[2] = &v54[16 * v53];
              if (v56) {
                operator delete(v56);
              }
            }
            else
            {
              *(void *)v47 = v45;
              v49 = v47 + 16;
              *((_DWORD *)v47 + 2) = v46;
              *((_DWORD *)v47 + 3) = 0;
              a3 = v44;
              int v5 = a2;
            }
            a4[1] = v49;
            unint64_t v15 = *v12;
            break;
          }
          uint64_t v29 = v37 + 3952;
          unint64_t v28 = *--v27;
        }
        else
        {
          unsigned int v34 = *(_DWORD *)(v29 - 56);
          BOOL v63 = v34 > 4;
          int v35 = (1 << v34) & 0x16;
          if (!v63 && v35 != 0) {
            goto LABEL_46;
          }
        }
        v29 -= 152;
      }
    }
LABEL_68:
    if (v13 == v15)
    {
      uint64_t v59 = *--v12;
      unint64_t v13 = v59 + 3952;
    }
    v13 -= 152;
    unint64_t v8 = a1[23];
    uint64_t v10 = a1[20];
    uint64_t v11 = a1[21];
  }
  unint64_t v60 = (unint64_t)*a4;
  v61 = (char *)a4[1];
  v62 = v61 - 16;
  BOOL v63 = *a4 != v61 && (unint64_t)v62 > v60;
  if (v63)
  {
    unint64_t v64 = v60 + 16;
    do
    {
      long long v65 = *(_OWORD *)(v64 - 16);
      *(_OWORD *)(v64 - 16) = *(_OWORD *)v62;
      *(_OWORD *)v62 = v65;
      v62 -= 16;
      BOOL v66 = v64 >= (unint64_t)v62;
      v64 += 16;
    }
    while (!v66);
  }
}

void sub_10041CEC0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10041CEE8(void *a1@<X0>, int a2@<W1>, void **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v6 = a1[23] + a1[24];
  uint64_t v7 = a1[20];
  uint64_t v8 = a1[21];
  unint64_t v9 = (unint64_t *)(v7 + 8 * (v6 / 0x1A));
  if (v8 == v7) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *v9 + 152 * (v6 % 0x1A);
  }
  uint64_t v11 = (const unsigned __int8 *)a1 + 1014;
  v72 = (const unsigned __int8 *)a1 + 1014;
  while (1)
  {
    unint64_t v12 = v8 == v7 ? 0 : *(void *)(v7 + 8 * (a1[23] / 0x1AuLL)) + 152 * (a1[23] % 0x1AuLL);
    if (v10 == v12) {
      break;
    }
    if (v10 == *v9)
    {
      uint64_t v14 = *(v9 - 1);
      if (*(_DWORD *)(v14 + 3920) < a2) {
        break;
      }
      unint64_t v13 = v14 + 3952;
    }
    else
    {
      unint64_t v13 = v10;
      if (*(_DWORD *)(v10 - 32) < a2) {
        break;
      }
    }
    if (uuid_compare((const unsigned __int8 *)(v13 - 144), v11)) {
      break;
    }
    unint64_t v15 = *v9;
    uint64_t v16 = v10 - *v9;
    unint64_t v17 = 0x86BCA1AF286BCA1BLL * (v16 >> 3);
    unint64_t v18 = v17 - 1;
    unint64_t v19 = v16 < 153
        ? v9[-((26 - v17) / 0x1A)] + 152 * (v17 - 26 + 26 * ((26 - v17) / 0x1A)) + 3800
        : v9[v18 / 0x1A] + 152 * (v18 % 0x1A);
    uint64_t v20 = a1[20];
    unint64_t v21 = a1[21] == v20 ? 0 : *(void *)(v20 + 8 * (a1[23] / 0x1AuLL)) + 152 * (a1[23] % 0x1AuLL);
    if (v19 == v21) {
      break;
    }
    if (v10 == v15)
    {
      uint64_t v24 = *(v9 - 1);
      unint64_t v23 = v10;
      if (*(_DWORD *)(v24 + 3920) != a2) {
        goto LABEL_62;
      }
      unint64_t v22 = v24 + 3952;
    }
    else
    {
      unint64_t v22 = v10;
      if (*(_DWORD *)(v10 - 32) != a2)
      {
        unint64_t v23 = *v9;
        goto LABEL_62;
      }
    }
    unsigned int v25 = *(_DWORD *)(v22 - 56) - 1;
    unint64_t v23 = *v9;
    if (v25 <= 1)
    {
      if (v16 < 153)
      {
        unint64_t v29 = 26 - v17;
        unint64_t v30 = (26 - v17) / 0x1A;
        unint64_t v26 = &v9[-v30];
        unint64_t v27 = *v26;
        uint64_t v28 = *v26 + 152 * (26 * v30 - v29) + 3800;
      }
      else
      {
        unint64_t v26 = &v9[v18 / 0x1A];
        unint64_t v27 = *v26;
        uint64_t v28 = *v26 + 152 * (v18 % 0x1A);
      }
      if (v10 == v15)
      {
        uint64_t v34 = *(v9 - 1);
        unint64_t v31 = (uint64_t *)(v34 + 3840);
        uint64_t v32 = (uint64_t *)(v34 + 3848);
        unint64_t v33 = v34 + 3952;
      }
      else
      {
        unint64_t v31 = (uint64_t *)(v10 - 112);
        uint64_t v32 = (uint64_t *)(v10 - 104);
        unint64_t v33 = v10;
      }
      uint64_t v35 = v28;
      if (v28 == v27) {
        uint64_t v35 = *(v26 - 1) + 3952;
      }
      if (v10 == v15)
      {
        uint64_t v38 = *(v9 - 1);
        v36 = (int *)(v38 + 3900);
        unint64_t v37 = v38 + 3952;
      }
      else
      {
        v36 = (int *)(v10 - 52);
        unint64_t v37 = v10;
      }
      if (v28 == v27) {
        uint64_t v28 = *(v26 - 1) + 3952;
      }
      uint64_t v39 = v10;
      if (v10 == v15) {
        uint64_t v39 = *(v9 - 1) + 3952;
      }
      uint64_t v40 = *v31;
      uint64_t v41 = *v32;
      double v42 = *(double *)(v33 - 80) - *(double *)(v35 - 80);
      int v43 = *v36;
      int v44 = *(_DWORD *)(v37 - 48) - *(_DWORD *)(v28 - 48);
      uint64_t v45 = *(void *)(v39 - 24);
      v47 = (char *)a3[1];
      int v46 = (char *)a3[2];
      if (v47 >= v46)
      {
        v49 = (char *)*a3;
        unint64_t v50 = 0xCCCCCCCCCCCCCCCDLL * ((v47 - (unsigned char *)*a3) >> 3);
        unint64_t v51 = v50 + 1;
        if (v50 + 1 > 0x666666666666666) {
          sub_1001D7FD4();
        }
        unint64_t v52 = 0xCCCCCCCCCCCCCCCDLL * ((v46 - v49) >> 3);
        if (2 * v52 > v51) {
          unint64_t v51 = 2 * v52;
        }
        if (v52 >= 0x333333333333333) {
          unint64_t v53 = 0x666666666666666;
        }
        else {
          unint64_t v53 = v51;
        }
        if (v53)
        {
          v54 = (char *)sub_1002E5328((uint64_t)(a3 + 2), v53);
          v49 = (char *)*a3;
          v47 = (char *)a3[1];
        }
        else
        {
          v54 = 0;
        }
        v55 = &v54[40 * v50];
        *(void *)v55 = v40;
        *((void *)v55 + 1) = v41;
        *((double *)v55 + 2) = v42;
        *((_DWORD *)v55 + 6) = v43;
        *((_DWORD *)v55 + 7) = v44;
        *((void *)v55 + 4) = v45;
        if (v47 == v49)
        {
          uint64_t v59 = &v54[40 * v50];
        }
        else
        {
          v56 = &v54[40 * v50];
          do
          {
            long long v57 = *(_OWORD *)(v47 - 40);
            long long v58 = *(_OWORD *)(v47 - 24);
            uint64_t v59 = v56 - 40;
            *((void *)v56 - 1) = *((void *)v47 - 1);
            *(_OWORD *)(v56 - 24) = v58;
            *(_OWORD *)(v56 - 40) = v57;
            v47 -= 40;
            v56 -= 40;
          }
          while (v47 != v49);
        }
        v48 = v55 + 40;
        *a3 = v59;
        a3[1] = v55 + 40;
        a3[2] = &v54[40 * v53];
        if (v49) {
          operator delete(v49);
        }
      }
      else
      {
        *(void *)v47 = v40;
        *((void *)v47 + 1) = v41;
        *((double *)v47 + 2) = v42;
        *((_DWORD *)v47 + 6) = v43;
        *((_DWORD *)v47 + 7) = v44;
        v48 = v47 + 40;
        *((void *)v47 + 4) = v45;
      }
      a3[1] = v48;
      unint64_t v23 = *v9;
      uint64_t v11 = v72;
    }
LABEL_62:
    if (v10 == v23)
    {
      uint64_t v60 = *--v9;
      unint64_t v10 = v60 + 3952;
    }
    v10 -= 152;
    uint64_t v7 = a1[20];
    uint64_t v8 = a1[21];
  }
  v61 = (char *)*a3;
  v62 = a3[1];
  unint64_t v63 = (unint64_t)v62 - 40;
  if (*a3 != v62 && v63 > (unint64_t)v61)
  {
    long long v65 = v61 + 40;
    do
    {
      long long v66 = *(_OWORD *)(v65 - 40);
      long long v67 = *(_OWORD *)(v65 - 24);
      uint64_t v68 = *((void *)v65 - 1);
      uint64_t v69 = *(void *)(v63 + 32);
      long long v70 = *(_OWORD *)(v63 + 16);
      *(_OWORD *)(v65 - 40) = *(_OWORD *)v63;
      *(_OWORD *)(v65 - 24) = v70;
      *((void *)v65 - 1) = v69;
      *(void *)(v63 + 32) = v68;
      *(_OWORD *)unint64_t v63 = v66;
      *(_OWORD *)(v63 + 16) = v67;
      v63 -= 40;
      BOOL v71 = (unint64_t)v65 >= v63;
      v65 += 40;
    }
    while (!v71);
  }
}

void sub_10041D3E8(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10041D40C(void *a1, int a2, void *a3, _DWORD *a4)
{
  uint64_t v4 = a1[8];
  if (a1[9] == v4) {
    return 0;
  }
  unint64_t v5 = a1[11];
  unint64_t v6 = (void *)(v4 + 8 * (v5 / 0xAA));
  unint64_t v7 = *v6 + 24 * (v5 % 0xAA);
  unint64_t v8 = a1[12] + v5;
  unint64_t v9 = v8 / 0xAA;
  unint64_t v10 = v8 % 0xAA;
  unint64_t v11 = *(void *)(v4 + 8 * (v8 / 0xAA)) + 24 * (v8 % 0xAA);
  if (v7 != v11)
  {
    while (*(_DWORD *)(v7 + 12) < a2)
    {
      v7 += 24;
      if (v7 - *v6 == 4080)
      {
        unint64_t v12 = v6[1];
        ++v6;
        unint64_t v7 = v12;
      }
      if (v7 == v11)
      {
        unint64_t v7 = v11;
        break;
      }
    }
  }
  if (v7 == *(void *)(v4 + 8 * v9) + 24 * v10) {
    return 0;
  }
  *a3 = *(void *)v7;
  *a4 = *(_DWORD *)(v7 + 12);
  return 1;
}

uint64_t sub_10041D4C8(void *a1)
{
  uint64_t v1 = a1[24];
  if (v1) {
    return *(unsigned int *)(*(void *)(a1[20] + 8 * ((v1 + a1[23] - 1) / 0x1AuLL))
  }
                           + 152 * ((v1 + a1[23] - 1) % 0x1AuLL)
                           + 108);
  else {
    return 0;
  }
}

double sub_10041D51C(void *a1)
{
  if (!a1[24]) {
    return 0.0;
  }
  if ((*(unsigned int (**)(void *))(*a1 + 176))(a1))
  {
    unint64_t v2 = a1[24] + a1[23] - 1;
    return *(double *)(*(void *)(a1[20] + 8 * (v2 / 0x1A)) + 152 * (v2 % 0x1A) + 72);
  }
  else
  {
    return sub_100B02B58((uint64_t)(a1 + 263));
  }
}

void sub_10041D5D4(void *a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, unint64_t *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  unint64_t v7 = a1[17];
  unint64_t v8 = v7 + a1[18];
  uint64_t v9 = a1[14];
  uint64_t v10 = a1[15];
  unint64_t v11 = (uint64_t *)(v9 + 8 * (v8 / 0xAA));
  if (v10 == v9) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = *v11 + 24 * (v8 % 0xAA);
  }
  unint64_t v13 = 0;
  uint64_t v14 = a4 + 2;
  int v15 = a3;
  while (1)
  {
    unint64_t v16 = v10 == v9 ? 0 : *(void *)(v9 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA);
    if (v12 == v16) {
      break;
    }
    uint64_t v17 = *v11;
    uint64_t v18 = v12 - *v11;
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * (v18 >> 3);
    unint64_t v20 = v19 - 1;
    unint64_t v21 = v18 < 25
        ? v11[-((170 - v19) / 0xAA)] + 24 * (v19 - 170 + 170 * ((170 - v19) / 0xAA)) + 4056
        : v11[v20 / 0xAA] + 24 * (v20 % 0xAA);
    unint64_t v22 = v10 == v9 ? 0 : *(void *)(v9 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA);
    if (v21 == v22 || v15 >= 1 && a3 <= (unint64_t)((uint64_t)&v13[-*a4] >> 4)) {
      break;
    }
    if (a2 == 5) {
      goto LABEL_22;
    }
    uint64_t v23 = v12;
    if (v12 == v17) {
      uint64_t v23 = *(v11 - 1) + 4080;
    }
    if (*(_DWORD *)(v23 - 16) == a2)
    {
LABEL_22:
      uint64_t v24 = v12;
      if (v12 == v17) {
        uint64_t v24 = *(v11 - 1) + 4080;
      }
      if (v18 < 25)
      {
        unint64_t v28 = 170 - v19;
        unint64_t v29 = (170 - v19) / 0xAA;
        unint64_t v25 = -(uint64_t)v29;
        uint64_t v26 = v11[-v29];
        uint64_t v27 = v26 + 24 * (170 * v29 - v28) + 4056;
      }
      else
      {
        unint64_t v25 = v20 / 0xAA;
        uint64_t v26 = v11[v20 / 0xAA];
        uint64_t v27 = v26 + 24 * (v20 % 0xAA);
      }
      if (v27 == v26) {
        uint64_t v27 = v11[v25 - 1] + 4080;
      }
      int v30 = *(_DWORD *)(v24 - 12) - *(_DWORD *)(v27 - 12);
      if (v30 >= 1)
      {
        uint64_t v31 = v12;
        if (v12 == v17) {
          uint64_t v31 = *(v11 - 1) + 4080;
        }
        double v32 = *(float *)(v31 - 8);
        if ((unint64_t)v13 >= *v14)
        {
          uint64_t v33 = (uint64_t)&v13[-*a4] >> 4;
          if ((unint64_t)(v33 + 1) >> 60) {
            sub_1001D7FD4();
          }
          uint64_t v34 = *v14 - *a4;
          uint64_t v35 = v34 >> 3;
          if (v34 >> 3 <= (unint64_t)(v33 + 1)) {
            uint64_t v35 = v33 + 1;
          }
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v36 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v36 = v35;
          }
          if (v36)
          {
            unint64_t v37 = (char *)sub_1000C571C((uint64_t)v14, v36);
            uint64_t v14 = a4 + 2;
          }
          else
          {
            unint64_t v37 = 0;
          }
          uint64_t v38 = &v37[16 * v33];
          *(double *)uint64_t v38 = v32;
          *((_DWORD *)v38 + 2) = v30;
          *((_DWORD *)v38 + 3) = 0;
          uint64_t v40 = (char *)*a4;
          uint64_t v39 = (char *)a4[1];
          uint64_t v41 = v38;
          if (v39 != (char *)*a4)
          {
            do
            {
              *((_OWORD *)v41 - 1) = *((_OWORD *)v39 - 1);
              v41 -= 16;
              v39 -= 16;
            }
            while (v39 != v40);
            uint64_t v39 = (char *)*a4;
          }
          unint64_t v13 = v38 + 16;
          *a4 = (unint64_t)v41;
          a4[1] = (unint64_t)(v38 + 16);
          a4[2] = (unint64_t)&v37[16 * v36];
          if (v39)
          {
            operator delete(v39);
            uint64_t v14 = a4 + 2;
          }
          int v15 = a3;
        }
        else
        {
          *(double *)unint64_t v13 = v32;
          *((_DWORD *)v13 + 2) = v30;
          *((_DWORD *)v13 + 3) = 0;
          v13 += 16;
        }
        a4[1] = (unint64_t)v13;
        uint64_t v17 = *v11;
      }
    }
    if (v12 == v17)
    {
      uint64_t v42 = *--v11;
      unint64_t v12 = v42 + 4080;
    }
    v12 -= 24;
    unint64_t v7 = a1[17];
    uint64_t v9 = a1[14];
    uint64_t v10 = a1[15];
  }
  unint64_t v43 = *a4;
  int v44 = v13 - 16;
  if ((char *)*a4 != v13 && (unint64_t)v44 > v43)
  {
    unint64_t v46 = v43 + 16;
    do
    {
      long long v47 = *(_OWORD *)(v46 - 16);
      *(_OWORD *)(v46 - 16) = *(_OWORD *)v44;
      *(_OWORD *)int v44 = v47;
      v44 -= 16;
      BOOL v48 = v46 >= (unint64_t)v44;
      v46 += 16;
    }
    while (!v48);
  }
}

void sub_10041D96C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10041D98C(void *a1, int a2)
{
  uint64_t v2 = a1[14];
  if (a1[15] == v2) {
    return 0;
  }
  unint64_t v3 = a1[17];
  uint64_t v4 = (unint64_t *)(v2 + 8 * (v3 / 0xAA));
  unint64_t v5 = *v4;
  unint64_t v6 = *v4 + 24 * (v3 % 0xAA);
  unint64_t v7 = *(void *)(v2 + 8 * ((a1[18] + v3) / 0xAA)) + 24 * ((a1[18] + v3) % 0xAA);
  if (v6 == v7) {
    return 0;
  }
  LODWORD(result) = 0;
  do
  {
    if (*(_DWORD *)(v6 + 8) == a2) {
      uint64_t result = (result + 1);
    }
    else {
      uint64_t result = result;
    }
    v6 += 24;
    if (v6 - v5 == 4080)
    {
      unint64_t v9 = v4[1];
      ++v4;
      unint64_t v5 = v9;
      unint64_t v6 = v9;
    }
  }
  while (v6 != v7);
  return result;
}

uint64_t sub_10041DA20(uint64_t a1, void *a2)
{
  return sub_100E50364(a1 + 1072, a2);
}

BOOL sub_10041DA28(uint64_t a1)
{
  return *(double *)(a1 + 992) > -1.79769313e308;
}

__n128 sub_10041DA40(uint64_t a1, int a2, long long *a3)
{
  if (*((_DWORD *)a3 + 10) != a2) {
    sub_101A5F7CC();
  }
  *(unsigned char *)(a1 + a2 + 984) = 1;
  uint64_t v3 = a1 + 112 * a2;
  long long v4 = *a3;
  long long v5 = a3[1];
  *(_OWORD *)(v3 + 232) = a3[2];
  *(_OWORD *)(v3 + 216) = v5;
  *(_OWORD *)(v3 + 200) = v4;
  __n128 result = (__n128)a3[3];
  long long v7 = a3[4];
  long long v8 = a3[6];
  *(_OWORD *)(v3 + 280) = a3[5];
  *(_OWORD *)(v3 + 296) = v8;
  *(_OWORD *)(v3 + 264) = v7;
  *(__n128 *)(v3 + 248) = result;
  return result;
}

__n128 sub_10041DAA4@<Q0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a1 + 112 * a2;
  long long v4 = *(_OWORD *)(v3 + 248);
  long long v5 = *(_OWORD *)(v3 + 216);
  *(_OWORD *)a3 = *(_OWORD *)(v3 + 200);
  *(_OWORD *)(a3 + 16) = v5;
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(v3 + 232);
  *(_OWORD *)(a3 + 48) = v4;
  long long v6 = *(_OWORD *)(v3 + 280);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(v3 + 264);
  *(_OWORD *)(a3 + 80) = v6;
  __n128 result = *(__n128 *)(v3 + 296);
  *(__n128 *)(a3 + 96) = result;
  return result;
}

uint64_t sub_10041DADC@<X0>(uint64_t a1@<X0>, int a2@<W1>, const unsigned __int8 *a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_1004205C8(a4, *(const void **)(a1 + 32), *(void *)(a1 + 40), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 4));
  memset(uu, 0, sizeof(uu));
  uuid_parse("00000000-0000-0000-0000-000000000000", uu);
  uint64_t result = uuid_compare(a3, uu);
  uint64_t v8 = *a4;
  if (!result) {
    goto LABEL_19;
  }
  unint64_t v9 = (long long *)a4[1];
  long long v23 = *(_OWORD *)a3;
  if ((long long *)v8 != v9)
  {
    while (*(_DWORD *)(v8 + 40) == a2)
    {
      uint64_t result = uuid_compare((const unsigned __int8 *)v8, (const unsigned __int8 *)&v23);
      if (result) {
        break;
      }
      v8 += 112;
      if ((long long *)v8 == v9)
      {
        uint64_t v8 = (uint64_t)v9;
        goto LABEL_14;
      }
    }
    if ((long long *)v8 != v9)
    {
      for (uint64_t i = (const unsigned __int8 *)(v8 + 112); i != (const unsigned __int8 *)v9; i += 112)
      {
        if (*((_DWORD *)i + 10) == a2)
        {
          uint64_t result = uuid_compare(i, (const unsigned __int8 *)&v23);
          if (!result)
          {
            long long v11 = *(_OWORD *)i;
            long long v12 = *((_OWORD *)i + 2);
            *(_OWORD *)(v8 + 16) = *((_OWORD *)i + 1);
            *(_OWORD *)(v8 + 32) = v12;
            *(_OWORD *)uint64_t v8 = v11;
            long long v13 = *((_OWORD *)i + 3);
            long long v14 = *((_OWORD *)i + 4);
            long long v15 = *((_OWORD *)i + 6);
            *(_OWORD *)(v8 + 80) = *((_OWORD *)i + 5);
            *(_OWORD *)(v8 + 96) = v15;
            *(_OWORD *)(v8 + 48) = v13;
            *(_OWORD *)(v8 + 64) = v14;
            v8 += 112;
          }
        }
      }
    }
  }
LABEL_14:
  if (v8 == *a4)
  {
LABEL_19:
    unint64_t v16 = (long long *)a4[1];
    while ((long long *)v8 != v16)
    {
      if (*(_DWORD *)(v8 + 40) != a2)
      {
        if ((long long *)v8 != v16)
        {
          for (j = (long long *)(v8 + 112); j != v16; j += 7)
          {
            if (*((_DWORD *)j + 10) == a2)
            {
              long long v18 = *j;
              long long v19 = j[2];
              *(_OWORD *)(v8 + 16) = j[1];
              *(_OWORD *)(v8 + 32) = v19;
              *(_OWORD *)uint64_t v8 = v18;
              long long v20 = j[3];
              long long v21 = j[4];
              long long v22 = j[6];
              *(_OWORD *)(v8 + 80) = j[5];
              *(_OWORD *)(v8 + 96) = v22;
              *(_OWORD *)(v8 + 48) = v20;
              *(_OWORD *)(v8 + 64) = v21;
              v8 += 112;
            }
          }
        }
        goto LABEL_16;
      }
      v8 += 112;
    }
  }
  else
  {
    unint64_t v16 = (long long *)a4[1];
LABEL_16:
    if ((long long *)v8 != v16) {
      a4[1] = v8;
    }
  }
  return result;
}

void sub_10041DCFC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10041DD20@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  long long v4 = *(const void **)(a1 + 32);
  if (v4 != *(const void **)(a1 + 40)) {
    return (void *)sub_10041DADC(a1, a2, (const unsigned __int8 *)(a1 + 1030), a3);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return sub_1004205C8(a3, v4, (uint64_t)v4, 0);
}

uint64_t sub_10041DD54(void *a1, uint64_t a2, double a3)
{
  uint64_t v3 = a1[12];
  if (!v3) {
    return 0;
  }
  uint64_t v4 = a1[8];
  if (a1[9] == v4) {
    return 0;
  }
  unint64_t v5 = a1[11];
  unint64_t v6 = v5 + v3;
  long long v7 = (uint64_t *)(v4 + 8 * ((v5 + v3) / 0xAA));
  uint64_t v8 = *v7;
  unint64_t v9 = *v7 + 24 * (v6 % 0xAA);
  unint64_t v10 = v5 / 0xAA;
  uint64_t v11 = *(void *)(v4 + 8 * (v5 / 0xAA));
  unint64_t v12 = v5 % 0xAA;
  uint64_t v13 = v11 + 24 * v12;
  if (v9 == v13)
  {
    uint64_t v8 = *v7 + 24 * (v6 % 0xAA);
  }
  else
  {
    long long v14 = v7;
    do
    {
      if (v9 == v8)
      {
        uint64_t v16 = *--v14;
        uint64_t v15 = v16;
        if (*(double *)(v16 + 4056) <= a3) {
          goto LABEL_13;
        }
        unint64_t v9 = v15 + 4080;
        long long v7 = v14;
      }
      else
      {
        uint64_t v15 = v8;
        uint64_t v8 = v9;
        if (*(double *)(v9 - 24) <= a3) {
          goto LABEL_13;
        }
      }
      v9 -= 24;
      uint64_t v8 = v15;
    }
    while (v9 != v13);
    uint64_t v8 = v13;
  }
LABEL_13:
  if (v8 == *(void *)(v4 + 8 * v10) + 24 * v12) {
    return 0;
  }
  if (v8 == *v7) {
    uint64_t v8 = *(v7 - 1) + 4080;
  }
  long long v17 = *(_OWORD *)(v8 - 24);
  *(void *)(a2 + 16) = *(void *)(v8 - 8);
  *(_OWORD *)a2 = v17;
  return 1;
}

uint64_t sub_10041DE54(uint64_t a1, double a2)
{
  if (!*(void *)(a1 + 96)) {
    return *(unsigned int *)(a1 + 1056);
  }
  if (sub_10041DD54((void *)a1, (uint64_t)v3, a2)) {
    return v4;
  }
  return 0;
}

__n128 sub_10041DE94@<Q0>(void *a1@<X0>, double *a2@<X1>, __n128 **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v6 = a1[11] + a1[12];
  uint64_t v7 = a1[8];
  uint64_t v8 = a1[9];
  unint64_t v9 = (void *)(v7 + 8 * (v6 / 0xAA));
  if (v8 == v7) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *v9 + 24 * (v6 % 0xAA);
  }
  uint64_t v11 = 0;
  unint64_t v12 = a3 + 2;
  while (1)
  {
    unint64_t v13 = v8 == v7 ? 0 : *(void *)(v7 + 8 * (a1[11] / 0xAAuLL)) + 24 * (a1[11] % 0xAAuLL);
    if (v10 == v13) {
      break;
    }
    if (v10 == *v9)
    {
      uint64_t v16 = *(v9 - 1);
      result.n128_u64[0] = *(void *)(v16 + 4056);
      if (result.n128_f64[0] <= *a2) {
        break;
      }
      unint64_t v15 = v16 + 4080;
    }
    else
    {
      result.n128_u64[0] = *(void *)(v10 - 24);
      unint64_t v15 = v10;
      if (result.n128_f64[0] <= *a2) {
        break;
      }
    }
    long long v17 = (__n128 *)(v15 - 24);
    if ((unint64_t)v11 >= *v12)
    {
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (((char *)v11 - (char *)*a3) >> 3);
      unint64_t v19 = v18 + 1;
      if (v18 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      if (0x5555555555555556 * ((uint64_t)(*v12 - (void)*a3) >> 3) > v19) {
        unint64_t v19 = 0x5555555555555556 * ((uint64_t)(*v12 - (void)*a3) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v12 - (void)*a3) >> 3) >= 0x555555555555555) {
        unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v20 = v19;
      }
      if (v20) {
        long long v21 = (char *)sub_1000DA5D8((uint64_t)(a3 + 2), v20);
      }
      else {
        long long v21 = 0;
      }
      long long v22 = (__n128 *)&v21[24 * v18];
      __n128 result = *v17;
      v22[1].n128_u64[0] = v17[1].n128_u64[0];
      *long long v22 = result;
      uint64_t v24 = *a3;
      long long v23 = a3[1];
      unint64_t v25 = v22;
      if (v23 != *a3)
      {
        do
        {
          __n128 result = *(__n128 *)((char *)v23 - 24);
          v25[-1].n128_u64[1] = v23[-1].n128_u64[1];
          *(__n128 *)((char *)v25 - 24) = result;
          unint64_t v25 = (__n128 *)((char *)v25 - 24);
          long long v23 = (__n128 *)((char *)v23 - 24);
        }
        while (v23 != v24);
        long long v23 = *a3;
      }
      uint64_t v11 = (__n128 *)((char *)v22 + 24);
      *a3 = v25;
      a3[1] = (__n128 *)((char *)v22 + 24);
      a3[2] = (__n128 *)&v21[24 * v20];
      if (v23) {
        operator delete(v23);
      }
    }
    else
    {
      __n128 result = *v17;
      v11[1].n128_u64[0] = *(void *)(v15 - 8);
      *uint64_t v11 = result;
      uint64_t v11 = (__n128 *)((char *)v11 + 24);
    }
    a3[1] = v11;
    if (v10 == *v9)
    {
      uint64_t v26 = *--v9;
      unint64_t v10 = v26 + 4080;
    }
    v10 -= 24;
    uint64_t v7 = a1[8];
    uint64_t v8 = a1[9];
  }
  uint64_t v27 = *a3;
  unint64_t v28 = &v11[-2].n128_i8[8];
  if (*a3 != v11 && v28 > (__int8 *)v27)
  {
    unint64_t v30 = (unint64_t)&v27[1].n128_u64[1];
    do
    {
      __n128 result = *(__n128 *)(v30 - 24);
      uint64_t v31 = *(void *)(v30 - 8);
      uint64_t v32 = *((void *)v28 + 2);
      *(_OWORD *)(v30 - 24) = *(_OWORD *)v28;
      *(void *)(v30 - 8) = v32;
      *((void *)v28 + 2) = v31;
      *(__n128 *)unint64_t v28 = result;
      v28 -= 24;
      BOOL v33 = v30 >= (unint64_t)v28;
      v30 += 24;
    }
    while (!v33);
  }
  return result;
}

void sub_10041E138(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10041E158(void *a1@<X0>, void *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unint64_t v8 = a1[11] + a1[12];
  uint64_t v9 = a1[8];
  uint64_t v10 = a1[9];
  uint64_t v11 = (unint64_t *)(v9 + 8 * (v8 / 0xAA));
  if (v10 == v9) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = *v11 + 24 * (v8 % 0xAA);
  }
  unint64_t v13 = 0;
  long long v14 = a2 + 2;
  while (1)
  {
    unint64_t v15 = v10 == v9 ? 0 : *(void *)(v9 + 8 * (a1[11] / 0xAAuLL)) + 24 * (a1[11] % 0xAAuLL);
    if (v12 == v15) {
      break;
    }
    unint64_t v16 = *v11;
    if (v12 == *v11)
    {
      uint64_t v19 = *(v11 - 1);
      double v20 = *(double *)(v19 + 4056);
      if (v20 < a3) {
        break;
      }
      if (v20 > a4)
      {
        unint64_t v16 = v12;
        goto LABEL_34;
      }
      unint64_t v18 = v19 + 4080;
LABEL_17:
      unint64_t v21 = v18 - 24;
      if ((unint64_t)v13 >= *v14)
      {
        unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v13[-*a2] >> 3);
        unint64_t v24 = v23 + 1;
        if (v23 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_1001D7FD4();
        }
        if (0x5555555555555556 * ((uint64_t)(*v14 - *a2) >> 3) > v24) {
          unint64_t v24 = 0x5555555555555556 * ((uint64_t)(*v14 - *a2) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v14 - *a2) >> 3) >= 0x555555555555555) {
          unint64_t v25 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v25 = v24;
        }
        if (v25) {
          uint64_t v26 = (char *)sub_1000DA5D8((uint64_t)(a2 + 2), v25);
        }
        else {
          uint64_t v26 = 0;
        }
        uint64_t v27 = &v26[24 * v23];
        long long v28 = *(_OWORD *)v21;
        *((void *)v27 + 2) = *(void *)(v21 + 16);
        *(_OWORD *)uint64_t v27 = v28;
        unint64_t v30 = (char *)*a2;
        unint64_t v29 = (char *)a2[1];
        uint64_t v31 = v27;
        if (v29 != (char *)*a2)
        {
          do
          {
            long long v32 = *(_OWORD *)(v29 - 24);
            *((void *)v31 - 1) = *((void *)v29 - 1);
            *(_OWORD *)(v31 - 24) = v32;
            v31 -= 24;
            v29 -= 24;
          }
          while (v29 != v30);
          unint64_t v29 = (char *)*a2;
        }
        unint64_t v13 = v27 + 24;
        *a2 = v31;
        a2[1] = v27 + 24;
        a2[2] = &v26[24 * v25];
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        long long v22 = *(_OWORD *)v21;
        *((void *)v13 + 2) = *(void *)(v18 - 8);
        *(_OWORD *)unint64_t v13 = v22;
        v13 += 24;
      }
      a2[1] = v13;
      unint64_t v16 = *v11;
      goto LABEL_34;
    }
    double v17 = *(double *)(v12 - 24);
    if (v17 < a3) {
      break;
    }
    unint64_t v18 = v12;
    if (v17 <= a4) {
      goto LABEL_17;
    }
LABEL_34:
    if (v12 == v16)
    {
      uint64_t v33 = *--v11;
      unint64_t v12 = v33 + 4080;
    }
    v12 -= 24;
    uint64_t v9 = a1[8];
    uint64_t v10 = a1[9];
  }
  uint64_t v34 = (char *)*a2;
  uint64_t v35 = v13 - 24;
  if ((char *)*a2 != v13 && v35 > v34)
  {
    unint64_t v37 = v34 + 24;
    do
    {
      long long v38 = *(_OWORD *)(v37 - 24);
      uint64_t v39 = *((void *)v37 - 1);
      uint64_t v40 = *((void *)v35 + 2);
      *(_OWORD *)(v37 - 24) = *(_OWORD *)v35;
      *((void *)v37 - 1) = v40;
      *((void *)v35 + 2) = v39;
      *(_OWORD *)uint64_t v35 = v38;
      v35 -= 24;
      BOOL v41 = v37 >= v35;
      v37 += 24;
    }
    while (!v41);
  }
}

void sub_10041E418(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10041E438(uint64_t a1, uint64_t a2, double a3)
{
  BOOL v6 = sub_10041B8D0(a1);
  if (v6)
  {
    if (*(void *)(a1 + 2120)) {
      sub_101A5F944();
    }
    uint64_t v36 = 0x7FFFFFFFFFFFFFFFLL;
    memset(v37, 0, sizeof(v37));
    double v8 = *(double *)a2;
    double v7 = *(double *)(a2 + 8);
    double v9 = a3 - v7;
    BOOL v10 = v7 < a3;
    double v11 = 0.0;
    if (!v10) {
      double v9 = 0.0;
    }
    double v12 = *(double *)(a1 + 2168);
    double v13 = v12 - v9;
    if (v8 < a3) {
      double v11 = a3 - v8;
    }
    double v14 = v12 - v11;
    double v38 = v12 - v9;
    double v39 = v12 - v11;
    double v40 = v8;
    uint64_t v50 = 0;
    uint64_t v41 = 0;
    uint64_t v15 = *(void *)(a1 + 192);
    double v16 = *(float *)(a1 + 1008);
    if (v15) {
      double v17 = *(double *)(*(void *)(*(void *)(a1 + 160) + 8 * ((v15 + *(void *)(a1 + 184) - 1) / 0x1AuLL))
    }
                      + 152 * ((v15 + *(void *)(a1 + 184) - 1) % 0x1AuLL)
                      + 72)
          + v16;
    else {
      double v17 = *(float *)(a1 + 1008);
    }
    double v42 = v17;
    double v43 = v14;
    double v44 = v16;
    uint64_t v45 = 0;
    int v46 = (*(uint64_t (**)(uint64_t, double))(*(void *)a1 + 128))(a1, v8);
    uint64_t v18 = *(void *)(a1 + 192);
    if (v18) {
      int v19 = *(_DWORD *)(*(void *)(*(void *)(a1 + 160) + 8 * ((v18 + *(void *)(a1 + 184) - 1) / 0x1AuLL))
    }
                      + 152 * ((v18 + *(void *)(a1 + 184) - 1) % 0x1AuLL)
                      + 108)
          + 1;
    else {
      int v19 = 1;
    }
    int v47 = v19;
    long long v48 = 0u;
    long long v49 = 0u;
    if (*(void *)(a1 + 96))
    {
      int v20 = sub_10041DD54((void *)a1, (uint64_t)&v26, *(double *)a2);
      int v21 = DWORD1(v27);
      if (!v20) {
        int v21 = 0;
      }
    }
    else
    {
      int v21 = *(_DWORD *)(a1 + 1060);
    }
    LODWORD(v50) = v21;
    uint64_t v35 = 0;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v26 = 0u;
    if ((*(unsigned int (**)(uint64_t, long long *))(*(void *)a1 + 120))(a1, &v26))
    {
      DWORD2(v48) = DWORD2(v33);
      int v22 = DWORD2(v33) + 1;
    }
    else
    {
      int v22 = 1;
    }
    if (*(unsigned char *)(a2 + 20))
    {
      sub_10041C390(a1);
      DWORD2(v48) = v22;
    }
    int v23 = *(_DWORD *)(a2 + 16);
    if (v23)
    {
      if (v23 != 1)
      {
LABEL_27:
        HIDWORD(v45) = (*(uint64_t (**)(uint64_t, void, double, double))(*(void *)a1 + 136))(a1, *(void *)(a1 + 96), v8 - vabdd_f64(v14, v13), v8);
        uuid_copy(v37, (const unsigned __int8 *)(a1 + 1014));
        *(void *)&long long v49 = sub_100B031EC((uint64_t)&v36, a1);
        sub_10041AF24(a1, (uint64_t)&v36);
        sub_1013F9510((_OWORD *)(a1 + 1648));
        return v6;
      }
      int v24 = 2;
    }
    else
    {
      int v24 = 1;
    }
    LODWORD(v45) = v24;
    goto LABEL_27;
  }
  return v6;
}

double sub_10041E764(uint64_t a1, int a2)
{
  return sub_1013F9354(a1 + 1648, a2);
}

BOOL sub_10041E76C(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  BOOL result = sub_10041B8D0(a1);
  if (result)
  {
    if (*(unsigned char *)(a1 + 1013))
    {
      double v11 = *(float *)(a1 + 1008);
      int v12 = (*(uint64_t (**)(uint64_t, double))(*(void *)a1 + 128))(a1, a3);
      float v13 = sub_100D56AE8(a1 + 1544, a3);
      int v14 = *(_DWORD *)(a1 + 1064);
      int v15 = (*(uint64_t (**)(uint64_t, void, double, double))(*(void *)a1 + 136))(a1, *(void *)(a1 + 96), a3 - a5, a3);
      if (*(void *)(a1 + 96))
      {
        int v16 = sub_10041DD54((void *)a1, (uint64_t)v25, a3);
        int v17 = v25[5];
        if (!v16) {
          int v17 = 0;
        }
      }
      else
      {
        int v17 = *(_DWORD *)(a1 + 1060);
      }
      int v18 = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      *(double *)(a2 + 40) = a4 - a5;
      *(double *)(a2 + 48) = a4;
      *(void *)(a2 + 64) = 0;
      *(void *)(a2 + 72) = 0;
      *(void *)(a2 + 56) = 0;
      *(double *)(a2 + 80) = a4;
      *(double *)(a2 + 88) = v11;
      *(void *)(a2 + 96) = 0;
      *(_DWORD *)(a2 + 104) = v12;
      *(_DWORD *)(a2 + 108) = 0;
      *(float *)(a2 + 112) = v13;
      *(_DWORD *)(a2 + 116) = v14;
      *(_DWORD *)(a2 + 120) = 0;
      *(_DWORD *)(a2 + 124) = v15;
      *(void *)(a2 + 128) = 0;
      *(void *)(a2 + 136) = 0;
      *(_DWORD *)(a2 + 144) = v17;
      if (v13 > 0.0) {
        int v18 = (*(uint64_t (**)(uint64_t, void, double, double))(*(void *)a1 + 136))(a1, *(int *)(a1 + 1624), 0.0, a3);
      }
      *(_DWORD *)(a2 + 100) = v18;
      uint64_t v19 = *(void *)(a1 + 192);
      if (v19)
      {
        unint64_t v20 = *(void *)(*(void *)(a1 + 160) + 8 * ((v19 + *(void *)(a1 + 184) - 1) / 0x1AuLL))
            + 152 * ((v19 + *(void *)(a1 + 184) - 1) % 0x1AuLL);
        LODWORD(v19) = *(_DWORD *)(v20 + 120);
        int v21 = *(_DWORD *)(v20 + 108);
      }
      else
      {
        int v21 = 0;
      }
      *(_DWORD *)(a2 + 120) = v19;
      *(_DWORD *)(a2 + 108) = v21;
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 176))(a1))
      {
        uint64_t v22 = *(void *)(a1 + 192);
        if (v22) {
          double v23 = *(double *)(*(void *)(*(void *)(a1 + 160) + 8 * ((v22 + *(void *)(a1 + 184) - 1) / 0x1AuLL))
        }
                          + 152 * ((v22 + *(void *)(a1 + 184) - 1) % 0x1AuLL)
                          + 72);
        else {
          double v23 = 0.0;
        }
        (*(void (**)(uint64_t, _DWORD *))(*(void *)a1 + 120))(a1, v25);
        double v24 = v23 + sub_1013F92AC(a1 + 1648, v26);
        if (v23 + *(float *)(a1 + 1008) + -2.0 < v24) {
          double v24 = v23 + *(float *)(a1 + 1008) + -2.0;
        }
      }
      else
      {
        double v24 = sub_100B02B58(a1 + 2104);
      }
      *(double *)(a2 + 72) = v24;
      uuid_copy((unsigned __int8 *)(a2 + 8), (const unsigned __int8 *)(a1 + 1014));
      uuid_parse("00000000-0000-0000-0000-000000000000", (unsigned __int8 *)(a2 + 24));
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

double sub_10041EAAC(uint64_t a1, double a2)
{
  return sub_100B02B60((double *)(a1 + 2104), a2);
}

void sub_10041EAB4(uint64_t a1, double a2, double a3)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1) & 1) == 0 && sub_100B03080(a1))
  {
    sub_10041C14C(a1, a2, a3);
  }
}

__n128 sub_10041EB44@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v6 = *(double *)(a1 + 992);
  double v7 = *(double *)(a1 + 2176);
  if (v6 >= v7)
  {
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_1022B1FD0);
    }
    int v15 = qword_102419008;
    if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *(void *)(a1 + 992);
      uint64_t v17 = *(void *)(a1 + 2176);
      *(_DWORD *)buf = 134218240;
      uint64_t v29 = v16;
      __int16 v30 = 2048;
      uint64_t v31 = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Session start time should be > session end time, not alterting timestamps, sessionStart, %f, sessionEnd, %f", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_20;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419000 == -1) {
      goto LABEL_22;
    }
LABEL_24:
    dispatch_once(&qword_102419000, &stru_1022B1FD0);
LABEL_22:
    long long v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLSwimEntry CLSwimDataStore::sanitizeEntryStartEndTimes(const CLSwimEntry &)", "%s\n", v27);
    if (v27 != (char *)buf) {
      free(v27);
    }
    goto LABEL_20;
  }
  double v8 = v6 + 0.1;
  if (*(double *)(a2 + 40) >= v8) {
    double v8 = *(double *)(a2 + 40);
  }
  double v9 = v7 + -0.1;
  if (v9 >= *(double *)(a2 + 48)) {
    double v9 = *(double *)(a2 + 48);
  }
  if (v8 < v9)
  {
    long long v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(_OWORD *)(a3 + 16) = v10;
    *(void *)(a3 + 32) = *(void *)(a2 + 32);
    *(double *)(a3 + 40) = v8;
    *(double *)(a3 + 48) = v9;
    long long v11 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a3 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a3 + 104) = v11;
    long long v12 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a3 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a3 + 136) = v12;
    __n128 result = *(__n128 *)(a2 + 56);
    long long v14 = *(_OWORD *)(a2 + 72);
    *(__n128 *)(a3 + 56) = result;
    *(_OWORD *)(a3 + 72) = v14;
    return result;
  }
  if (qword_102419000 != -1) {
    dispatch_once(&qword_102419000, &stru_1022B1FD0);
  }
  int v18 = qword_102419008;
  if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_ERROR))
  {
    uint64_t v19 = *(void *)(a1 + 992);
    uint64_t v20 = *(void *)(a1 + 2176);
    uint64_t v21 = *(void *)(a2 + 40);
    uint64_t v22 = *(void *)(a2 + 48);
    *(_DWORD *)buf = 134218752;
    uint64_t v29 = v19;
    __int16 v30 = 2048;
    uint64_t v31 = v20;
    __int16 v32 = 2048;
    uint64_t v33 = v21;
    __int16 v34 = 2048;
    uint64_t v35 = v22;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "sanitizing entry resulted in startTime > endTime, not altering timestamps, sessionStart, %f, sessionEnd, %f, entryStart, %f, entryEnd, %f", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419000 == -1) {
      goto LABEL_22;
    }
    goto LABEL_24;
  }
LABEL_20:
  long long v23 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a3 + 112) = v23;
  *(_OWORD *)(a3 + 128) = *(_OWORD *)(a2 + 128);
  *(void *)(a3 + 144) = *(void *)(a2 + 144);
  long long v24 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a3 + 48) = v24;
  long long v25 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a3 + 80) = v25;
  __n128 result = *(__n128 *)a2;
  long long v26 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 16) = v26;
  return result;
}

__n128 sub_10041EF18(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 26 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10042069C(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x1A)) + 152 * (v7 % 0x1A);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  long long v10 = *(_OWORD *)(a2 + 32);
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v12 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v8 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v8 + 80) = v12;
  *(_OWORD *)(v8 + 32) = v10;
  *(_OWORD *)(v8 + 48) = v11;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v14 = *(_OWORD *)(a2 + 112);
  long long v15 = *(_OWORD *)(a2 + 128);
  *(void *)(v8 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(v8 + 112) = v14;
  *(_OWORD *)(v8 + 128) = v15;
  *(__n128 *)(v8 + 96) = result;
  ++a1[5];
  return result;
}

uint64_t sub_10041EFF0(void *a1)
{
  return (*(uint64_t (**)(void *, void))(*a1 + 136))(a1, a1[12]);
}

uint64_t sub_10041F018(void *a1, unint64_t a2, double a3, double a4)
{
  sub_101220FD8(v24);
  unint64_t v8 = a1[11] + a1[12];
  uint64_t v9 = a1[8];
  uint64_t v10 = a1[9];
  long long v11 = (unint64_t *)(v9 + 8 * (v8 / 0xAA));
  if (v10 == v9) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = *v11 + 24 * (v8 % 0xAA);
  }
  unint64_t v13 = 0;
  while (1)
  {
    unint64_t v14 = v10 == v9 ? 0 : *(void *)(v9 + 8 * (a1[11] / 0xAAuLL)) + 24 * (a1[11] % 0xAAuLL);
    if (v12 == v14) {
      return sub_101221010((uint64_t)v24);
    }
    unint64_t v15 = *v11;
    if (v12 == *v11)
    {
      uint64_t v19 = *(v11 - 1);
      double v20 = *(double *)(v19 + 4056);
      if (v20 < a3 || v13 >= a2) {
        return sub_101221010((uint64_t)v24);
      }
      if (v20 > a4)
      {
        unint64_t v15 = v12;
        goto LABEL_24;
      }
      unint64_t v18 = v19 + 4080;
LABEL_23:
      sub_101220FE4((uint64_t)v24, *(_DWORD *)(v18 - 16));
      ++v13;
      unint64_t v15 = *v11;
      goto LABEL_24;
    }
    double v16 = *(double *)(v12 - 24);
    if (v16 < a3 || v13 >= a2) {
      return sub_101221010((uint64_t)v24);
    }
    unint64_t v18 = v12;
    if (v16 <= a4) {
      goto LABEL_23;
    }
LABEL_24:
    if (v12 == v15)
    {
      uint64_t v22 = *--v11;
      unint64_t v12 = v22 + 4080;
    }
    v12 -= 24;
    uint64_t v9 = a1[8];
    uint64_t v10 = a1[9];
  }
}

uint64_t sub_10041F180(uint64_t a1)
{
  return sub_100E4EF18(a1 + 1072);
}

void sub_10041F188(uint64_t a1, double a2)
{
  *(double *)(a1 + 2176) = a2;
  if (qword_102419000 != -1) {
    dispatch_once(&qword_102419000, &stru_1022B1FD0);
  }
  uint64_t v3 = qword_102419008;
  if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    double v6 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "data store setting session end time to %f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_1022B1FD0);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSwimDataStore::setSessionEndTime(CFAbsoluteTime)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
}

float sub_10041F338(uint64_t a1)
{
  return *(float *)(a1 + 1008);
}

uint64_t sub_10041F340(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1056);
}

BOOL sub_10041F348(uint64_t a1)
{
  return *(void *)(a1 + 2120) == 0;
}

double sub_10041F358(uint64_t a1)
{
  return *(double *)(a1 + 1000);
}

void sub_10041F360(id a1)
{
  qword_102419008 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

void sub_10041F390(uint64_t a1)
{
  *(void *)a1 = off_1022B2000;
  sub_1000F5BB0(a1 + 64, *(void **)(a1 + 72));
  sub_10041F48C((void *)(a1 + 16));

  operator delete();
}

void sub_10041F400(void *a1)
{
  uint64_t v2 = (void **)a1[3];
  uint64_t v3 = a1[4];
  a1[7] = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = a1[4];
      uint64_t v2 = (void **)(a1[3] + 8);
      a1[3] = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 256;
    goto LABEL_7;
  }
  if (v4 >> 3 == 2)
  {
    uint64_t v6 = 512;
LABEL_7:
    a1[6] = v6;
  }
  unint64_t v8 = (void *)a1[9];
  unint64_t v7 = a1 + 9;
  sub_1000F5BB0((uint64_t)(v7 - 1), v8);
  *(v7 - 1) = v7;
  *unint64_t v7 = 0;
  v7[1] = 0;
}

uint64_t sub_10041F48C(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    unint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000D7EB4((uint64_t)a1);
}

void sub_10041F534(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000DA54C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      double v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    double v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      long long v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      double v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0x1000uLL);
  sub_1000DA434(&v54, &v53);
  long long v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10041F800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

_OWORD *sub_10041F84C(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v5 = (void **)sub_1001070AC((uint64_t)a1, &v9, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    unint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x58uLL);
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *(_OWORD *)((char *)v6 + 68) = *(_OWORD *)(a3 + 36);
    sub_1000EDF90(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void sub_10041F8F0(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, void **a5)
{
  uint64_t v7 = a2;
  unint64_t v8 = *a5;
  if (a1 == a3)
  {
    while (v7 != a4)
    {
      sub_10041EF18(v8, v7);
      v7 += 152;
    }
  }
  else
  {
    uint64_t v11 = *a1 + 3952;
    if (v11 != a2)
    {
      do
      {
        sub_10041EF18(v8, v7);
        v7 += 152;
      }
      while (v7 != v11);
    }
    *a5 = v8;
    for (uint64_t i = a1 + 1; i != a3; ++i)
    {
      uint64_t v13 = 0;
      uint64_t v14 = *i;
      do
      {
        sub_10041EF18(v8, v14 + v13);
        v13 += 152;
      }
      while (v13 != 3952);
      *a5 = v8;
    }
    for (uint64_t j = *a3; j != a4; j += 152)
      sub_10041EF18(v8, j);
  }
  *a5 = v8;
}

uint64_t sub_10041F9E4(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x1A) {
    a2 = 1;
  }
  if (v2 < 0x34) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 26;
  }
  return v4 ^ 1u;
}

__n128 sub_10041FA44@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v19 = a2;
    uint64_t v18 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
  }
  else
  {
    uint64_t v13 = a3 - 1;
    uint64_t v12 = *a3;
    uint64_t v14 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_10041FB14(v12, v14, v15, v16, &v21);
      uint64_t v16 = (char *)v22.n128_u64[1];
      uint64_t v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      uint64_t v17 = *v13--;
      uint64_t v12 = v17;
      uint64_t v14 = v17 + 3952;
    }
    uint64_t v18 = *a1 + 3952;
    uint64_t v19 = a2;
  }
  sub_10041FB14(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_10041FB14@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = *a3;
    uint64_t v11 = a2;
    while (1)
    {
      int64_t v12 = 0x86BCA1AF286BCA1BLL * ((uint64_t)&a4[-v10] >> 3);
      if ((uint64_t)(0x86BCA1AF286BCA1BLL * ((v11 - a1) >> 3)) < v12) {
        int64_t v12 = 0x86BCA1AF286BCA1BLL * ((v11 - a1) >> 3);
      }
      v11 -= 152 * v12;
      a4 -= 152 * v12;
      if (v12) {
        __n128 result = memmove(a4, v11, 152 * v12);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v10 = v14;
      a4 = (char *)(v14 + 3952);
    }
    if ((char *)(*v6 + 3952) == a4)
    {
      uint64_t v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_10041FBF8(void *a1, unsigned char *a2, unsigned char **a3, unsigned char *a4, uint64_t a5)
{
  uint64_t v7 = *(void ***)a5;
  unint64_t v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (uint64_t i = (unsigned char *)(*a1 + 3952); ; uint64_t i = v12 + 3952)
    {
      sub_10041FC8C(a2, v8, i, v7, &v14);
      unint64_t v8 = (char *)*((void *)&v15 + 1);
      uint64_t v7 = (void **)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v8;
      if (v10 == a3) {
        break;
      }
      int64_t v12 = (unsigned char *)*v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_10041FC8C(a2, v8, a4, v7, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_10041FC8C@<X0>(unsigned char *__src@<X1>, char *__dst@<X4>, unsigned char *a3@<X2>, void **a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = a4;
  uint64_t v7 = __src;
  if (__src == a3)
  {
    uint64_t v9 = __src;
  }
  else
  {
    uint64_t v9 = a3;
    uint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      int64_t v11 = 0x86BCA1AF286BCA1BLL * ((v10 - __dst + 3952) >> 3);
      unint64_t v12 = (uint64_t)(0x86BCA1AF286BCA1BLL * ((v9 - v7) >> 3)) >= v11 ? v11 : 0x86BCA1AF286BCA1BLL * ((v9 - v7) >> 3);
      if (v12) {
        double result = memmove(__dst, v7, 152 * v12);
      }
      v7 += 152 * v12;
      if (v7 == v9) {
        break;
      }
      uint64_t v14 = (char *)*v6++;
      uint64_t v10 = v14;
      __uuid_t dst = v14;
    }
    __dst += 152 * v12;
    if ((char *)*(v6 - 1) + 3952 == __dst) {
      __uuid_t dst = (char *)*v6;
    }
    else {
      --v6;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

uint64_t sub_10041FD7C(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0xAA) {
    a2 = 1;
  }
  if (v2 < 0x154) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 170;
  }
  return v4 ^ 1u;
}

void sub_10041FDDC(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000DA54C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      double v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    double v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      long long v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      double v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0xFF0uLL);
  sub_1000DA434(&v54, &v53);
  long long v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1004200A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1004200F4(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000DA54C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      double v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    double v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      long long v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      double v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0xFF0uLL);
  sub_1000DA434(&v54, &v53);
  long long v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1004203C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100420410()
{
}

__n128 sub_100420424(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v2 = off_1022B2040;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_DWORD *)v2 + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

__n128 sub_100420478(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022B2040;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1004204B0(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 8);
  return (v2 == 5 || *(_DWORD *)(a2 + 100) == v2)
      && uuid_compare((const unsigned __int8 *)(a2 + 8), (const unsigned __int8 *)(a1 + 12)) == 0;
}

uint64_t sub_1004204F8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100420538()
{
}

void *sub_100420544(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1004205C8(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = sub_100420644(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100420628(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100420644(void *a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL) {
    sub_1001D7FD4();
  }
  __n128 result = (char *)sub_100227C5C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[112 * v4];
  return result;
}

void sub_10042069C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x1A;
  unint64_t v4 = v2 - 26;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    size_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)size_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000DA54C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      double v38 = (uint64_t *)a1[1];
      size_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        size_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    size_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xF70uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xF70uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    double v44 = (void *)a1[1];
    size_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      long long v48 = (uint64_t *)a1[1];
      size_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        size_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      double v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        size_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0xF70uLL);
  sub_1000DA434(&v54, &v53);
  long long v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100420968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1004209B4()
{
  uint64_t v1 = qword_102419008;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

BOOL sub_1004209D4()
{
  unint64_t v2 = *(NSObject **)(v0 + 8);
  return os_log_type_enabled(v2, OS_LOG_TYPE_INFO);
}

void sub_100420BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_10042185C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

id sub_100421870(uint64_t a1)
{
  id Weak = objc_loadWeak((id *)(a1 + 32));

  return _[Weak enableBOMScan];
}

NSDictionary *__cdecl sub_1004219F4(id a1)
{
  return (NSDictionary *)&off_102397090;
}

NSDictionary *sub_100421B74(uint64_t a1)
{
  v4[0] = @"bomDisableCount";
  unint64_t v2 = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 32)];
  v4[1] = @"timeSinceLastDisable";
  v5[0] = v2;
  v5[1] = +[NSNumber numberWithDouble:*(double *)(a1 + 40)];
  return +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:2];
}

id sub_100421FF8(uint64_t a1)
{
  if (qword_102419490 != -1) {
    dispatch_once(&qword_102419490, &stru_1022B2158);
  }
  unint64_t v2 = qword_102419498;
  if (os_log_type_enabled((os_log_t)qword_102419498, OS_LOG_TYPE_INFO))
  {
    v5[0] = 68289026;
    v5[1] = 0;
    __int16 v6 = 2082;
    uint64_t v7 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#ut BOM reset check\"}", (uint8_t *)v5, 0x12u);
  }
  BOOL v3 = (id *)(a1 + 32);
  [objc_loadWeak(v3) resetBOMScanIfNeeded];
  return [objc_loadWeak(v3) scheduleDailyResetBOMScan];
}

void sub_10042211C(id a1)
{
  qword_102419498 = (uint64_t)os_log_create("com.apple.locationd.Position", "TrackingAvoidance");
}

id sub_1004223C0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _setup];
}

id sub_100422864(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _registerForEventsNotification];
}

id sub_100422AC0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _unregisterForEventsNotification];
}

id sub_100422EE8(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 8) silo];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_100422F74;
  v4[3] = &unk_10229FED8;
  v4[4] = *(void *)(a1 + 32);
  return [v2 afterInterval:v4 async:5.0];
}

void sub_100422F74(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 24))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022B2208);
    }
    uint64_t v1 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v7 = "-[CLEmergencyWifiAvailability _scheduleWifiArtifactsAllocation:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "%s, device, previously retrieved", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022B2208);
      }
      id v2 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLEmergencyWifiAvailability _scheduleWifiArtifactsAllocation:]_block_invoke", "%s\n", v2);
      if (v2 != (char *)buf) {
        free(v2);
      }
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022B2208);
    }
    unint64_t v4 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v7 = "-[CLEmergencyWifiAvailability _scheduleWifiArtifactsAllocation:]_block_invoke_2";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%s, device, timer retrieve", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022B2208);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLEmergencyWifiAvailability _scheduleWifiArtifactsAllocation:]_block_invoke", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    [*(id *)(a1 + 32) _registerForLqmScoreNotifications];
  }
}

void sub_100424C30(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = *(NSObject **)(v2 + 16);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_100424CA4;
  v4[3] = &unk_10229FEB0;
  v4[4] = a2;
  void v4[5] = v2;
  dispatch_async(v3, v4);
}

void sub_100424CA4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    id v3 = [v2 type];
    if (v3 == (id)9)
    {
      id v10 = [*(id *)(*(void *)(a1 + 40) + 40) wakeOnWirelessEnabled];
      [*(id *)(*(void *)(a1 + 40) + 48) setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v10) forKey:@"isWoWEnabledKey"];
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022B2208);
      }
      uint64_t v11 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        CFStringRef v12 = @"Disabled";
        if (v10) {
          CFStringRef v12 = @"Enabled";
        }
        *(_DWORD *)buf = 136315394;
        uint64_t v19 = "-[CLEmergencyWifiAvailability _setupMonitoringEvent]_block_invoke";
        __int16 v20 = 2112;
        CFStringRef v21 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%s, wow changed to, %@", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022B2208);
        }
        uint64_t v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "-[CLEmergencyWifiAvailability _setupMonitoringEvent]_block_invoke", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      [*(id *)(a1 + 40) submitWowChangeEventToBiome];
    }
    else if (v3 == (id)6)
    {
      id v4 = [*(id *)(a1 + 32) info];
      id v5 = [v4 objectForKeyedSubscript:CWFEventLinkChangeStatusKey];
      unsigned int v6 = [v5 isLinkDown];
      if (v6) {
        BOOL v7 = [v5 reason] != 1 && [v5 reason] != 5;
      }
      else {
        BOOL v7 = 1;
      }
      [*(id *)(*(void *)(a1 + 40) + 48) setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v6 ^ 1)] forKey:@"isWiFiStartingKey"];
      [*(id *)(*(void *)(a1 + 40) + 48) setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v7) forKey:@"isWiFiSwitchOnKey"];
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022B2208);
      }
      uint64_t v13 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        CFStringRef v14 = @"NO";
        uint64_t v19 = "-[CLEmergencyWifiAvailability _setupMonitoringEvent]_block_invoke";
        if (v6) {
          CFStringRef v15 = @"YES";
        }
        else {
          CFStringRef v15 = @"NO";
        }
        *(_DWORD *)buf = 136315650;
        CFStringRef v21 = v15;
        __int16 v20 = 2112;
        if (v7) {
          CFStringRef v14 = @"YES";
        }
        __int16 v22 = 2112;
        CFStringRef v23 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s, isLinkDown, %@, isWifiSwitchOn, %@", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022B2208);
        }
        uint64_t v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "-[CLEmergencyWifiAvailability _setupMonitoringEvent]_block_invoke", "%s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
      }
      [*(id *)(a1 + 40) submitWifiAvailabilityEventToBiome];
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022B2208);
    }
    size_t v8 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v19 = "-[CLEmergencyWifiAvailability _setupMonitoringEvent]_block_invoke_2";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s, event nil", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022B2208);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLEmergencyWifiAvailability _setupMonitoringEvent]_block_invoke", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
}

id sub_100425348(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _submitWifiAvailabilityEventToBiome];
}

void sub_100425718(id a1, id a2, id a3, BOOL *a4)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022B2208);
  }
  unsigned int v6 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v9 = "-[CLEmergencyWifiAvailability _submitWifiAvailabilityEventToBiome]_block_invoke";
    __int16 v10 = 2112;
    id v11 = a2;
    __int16 v12 = 2112;
    id v13 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%s, key, %@, value, %@", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022B2208);
    }
    BOOL v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLEmergencyWifiAvailability _submitWifiAvailabilityEventToBiome]_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
}

id sub_100425970(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _submitWowChangeEventToBiome];
}

void sub_100425E5C(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_100425EE4(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v6 = CMPedestrianFenceIdentifier;
    uint64_t v7 = a2;
    id v5 = +[NSDictionary dictionaryWithObjects:&v7 forKeys:&v6 count:1];
    sub_100427D20("PedestrianFence/kCLConnectionMessagePedestrianFence", &v3);
    uint64_t v2 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    CLConnection::sendMessage();
    if (v2) {
      sub_1000DB0A0(v2);
    }
    if (v4) {
      sub_1000DB0A0(v4);
    }
  }
}

void sub_100425FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  if (a13) {
    sub_1000DB0A0(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_100425FF8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v6 = CMErrorMessage;
    uint64_t v7 = +[NSNumber numberWithInteger:a2];
    id v5 = +[NSDictionary dictionaryWithObjects:&v7 forKeys:&v6 count:1];
    sub_100427D20("PedestrianFence/kCLConnectionMessagePedestrianFence", &v3);
    uint64_t v2 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    CLConnection::sendMessage();
    if (v2) {
      sub_1000DB0A0(v2);
    }
    if (v4) {
      sub_1000DB0A0(v4);
    }
  }
}

void sub_1004260E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  if (a13) {
    sub_1000DB0A0(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_100426120(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 8))
  {
    id v3 = +[NSMutableDictionary dictionary];
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    id obj = [a2 allKeys];
    id v4 = [obj countByEnumeratingWithState:&v14 objects:v22 count:16];
    if (v4)
    {
      uint64_t v5 = *(void *)v15;
      do
      {
        for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v15 != v5) {
            objc_enumerationMutation(obj);
          }
          uint64_t v7 = *(void *)(*((void *)&v14 + 1) + 8 * i);
          id v8 = [a2 objectForKeyedSubscript:v7];
          v20[0] = @"radius";
          [v8 radius];
          v21[0] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
          v20[1] = @"radialDisplacement";
          [v8 radialDisplacement];
          v21[1] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
          v20[2] = @"duration";
          [v8 duration];
          v21[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
          [v3 setObject:+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v21, v20, 3) forKeyedSubscript:v7];
        }
        id v4 = [obj countByEnumeratingWithState:&v14 objects:v22 count:16];
      }
      while (v4);
    }
    uint64_t v18 = CMPedestrianFenceStatus;
    id v19 = v3;
    id v13 = +[NSDictionary dictionaryWithObjects:&v19 forKeys:&v18 count:1];
    sub_100427DF8("PedestrianFence/kCLConnectionMessagePedestrianFenceStatus", &v11);
    __int16 v10 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    CLConnection::sendMessage();
    if (v10) {
      sub_1000DB0A0(v10);
    }
    if (v12) {
      sub_1000DB0A0(v12);
    }
  }
}

void sub_10042635C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a13) {
    sub_1000DB0A0(a13);
  }
  if (a15) {
    sub_1000DB0A0(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100426400(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v6 = CMBackgroundInertialOdometry;
    uint64_t v7 = a2;
    uint64_t v5 = +[NSDictionary dictionaryWithObjects:&v7 forKeys:&v6 count:1];
    sub_100427E5C("PedestrianFence/kCLConnectionMessageBackgroundInertialOdometry", &v3);
    uint64_t v2 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    CLConnection::sendMessage();
    if (v2) {
      sub_1000DB0A0(v2);
    }
    if (v4) {
      sub_1000DB0A0(v4);
    }
  }
}

void sub_1004264DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  if (a13) {
    sub_1000DB0A0(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100426528(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)a1 = off_1022B2238;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  uint64_t v5 = [[CLPedestrianFenceClientDelegate alloc] initWithPedestrianFenceClient:a1];
  *(void *)(a1 + 24) = v5;
  [(CLPedestrianFenceClientDelegate *)v5 setValid:1];
  id v6 = [[[a3 vendor] proxyForService:@"CLPedestrianFenceService"];
  *(void *)(a1 + 32) = v6;
  [v6 registerDelegate:*(void *)(a1 + 24) inSilo:[a3 silo]];
  [*(id *)(a1 + 32) setDelegateEntityName:"CLPedestrianFenceClient"];
  uint64_t v7 = [[CLBackgroundInertialOdometryClientDelegate alloc] initWithPedestrianFenceClient:a1];
  *(void *)(a1 + 40) = v7;
  [(CLBackgroundInertialOdometryClientDelegate *)v7 setValid:1];
  id v8 = [[[a3 vendor] proxyForService:@"CLBackgroundInertialOdometryService"];
  *(void *)(a1 + 48) = v8;
  [v8 registerDelegate:*(void *)(a1 + 40) inSilo:[a3 silo]];
  [*(id *)(a1 + 48) setDelegateEntityName:"CLBackgroundInertialOdometryService"];
  CLConnection::setDefaultMessageHandler();
  CLConnection::setDisconnectionHandler();
  return a1;
}

void sub_100426728(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  sub_100426880((void *)v1);
  _Unwind_Resume(a1);
}

void sub_10042675C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = *a2;
  uint64_t v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16))(v2, &v4);
  if (v5) {
    sub_1000DB0A0(v5);
  }
}

void sub_1004267D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

id sub_1004267E8(uint64_t a1)
{
  return sub_1004267F0(*(void *)(a1 + 32));
}

id sub_1004267F0(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) teardownClient:*(void *)(a1 + 24)];
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v3 = (void *)(a1 + 64);
    if (*(char *)(a1 + 87) < 0) {
      uint64_t v3 = (void *)*v3;
    }
    id result = [*(id *)(a1 + 32) odometryClient:requestInterval:[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3) &off_102395520];
  }
  if (*(unsigned char *)(a1 + 88))
  {
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v4 = *(void **)(a1 + 48);
    return [v4 stopBackgroundInertialOdometryUpdatesForClient:v5];
  }
  return result;
}

void *sub_100426880(void *a1)
{
  *a1 = off_1022B22B8;
  uint64_t v2 = (CLConnection *)a1[1];
  if (v2)
  {
    CLConnection::deferredDelete(v2);
    a1[1] = 0;
  }
  return a1;
}

void *sub_1004268D8(uint64_t a1)
{
  *(void *)a1 = off_1022B2238;

  *(void *)(a1 + 32) = 0;
  [*(id *)(a1 + 24) setValid:0];

  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = 0;
  [*(id *)(a1 + 40) setValid:0];

  *(void *)(a1 + 40) = 0;
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }

  return sub_100426880((void *)a1);
}

void sub_100426998(uint64_t a1)
{
  sub_1004268D8(a1);

  operator delete();
}

void sub_1004269D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
  int v5 = *((char *)v4 + 23);
  if (v5 < 0)
  {
    if (v4[1] != 52) {
      goto LABEL_7;
    }
    uint64_t v4 = (void *)*v4;
  }
  else if (v5 != 52)
  {
    goto LABEL_7;
  }
  if (!memcmp(v4, "PedestrianFence/kCLConnectionMessageInertialOdometry", 0x34uLL)) {
    goto LABEL_16;
  }
LABEL_7:
  id v6 = (void *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
  int v7 = *((char *)v6 + 23);
  if ((v7 & 0x80000000) == 0)
  {
    if (v7 != 62) {
      goto LABEL_13;
    }
LABEL_12:
    if (memcmp(v6, "PedestrianFence/kCLConnectionMessageBackgroundInertialOdometry", 0x3EuLL)) {
      goto LABEL_13;
    }
LABEL_16:
    sub_100134750(__p, "com.apple.locationd.inertialodometry");
    char isEntitled = CLConnection::isEntitled();
    char v11 = isEntitled;
    if (v44 < 0)
    {
      operator delete(*(void **)__p);
      if (v11) {
        goto LABEL_28;
      }
    }
    else if (isEntitled)
    {
      goto LABEL_28;
    }
    if (qword_1024192E0 != -1) {
      dispatch_once(&qword_1024192E0, &stru_1022B22E0);
    }
    long long v17 = qword_1024192E8;
    if (os_log_type_enabled((os_log_t)qword_1024192E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__p = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Subscription: Client not entitled.", __p, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(__p, 0x65CuLL);
    if (qword_1024192E0 != -1) {
      dispatch_once(&qword_1024192E0, &stru_1022B22E0);
    }
    goto LABEL_44;
  }
  if (v6[1] == 62)
  {
    id v6 = (void *)*v6;
    goto LABEL_12;
  }
LABEL_13:
  sub_100134750(__p, "com.apple.locationd.pedestrianfencemanager");
  char v8 = CLConnection::isEntitled();
  char v9 = v8;
  if (v44 < 0)
  {
    operator delete(*(void **)__p);
    if (v9) {
      goto LABEL_28;
    }
  }
  else if (v8)
  {
LABEL_28:
    id v13 = (void *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
    int v14 = *((char *)v13 + 23);
    if (v14 < 0)
    {
      if (v13[1] != 51) {
        goto LABEL_34;
      }
      id v13 = (void *)*v13;
    }
    else if (v14 != 51)
    {
      goto LABEL_34;
    }
    if (!memcmp(v13, "PedestrianFence/kCLConnectionMessagePedestrianFence", 0x33uLL))
    {
      unint64_t v25 = *(CLConnectionMessage **)a2;
      uint64_t v26 = *(void *)(a2 + 8);
      v40[0] = v25;
      v40[1] = (CLConnectionMessage *)v26;
      if (v26) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
      }
      sub_10042715C(a1, v40);
      goto LABEL_97;
    }
LABEL_34:
    long long v15 = (void *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
    int v16 = *((char *)v15 + 23);
    if (v16 < 0)
    {
      if (v15[1] != 61) {
        goto LABEL_49;
      }
      long long v15 = (void *)*v15;
    }
    else if (v16 != 61)
    {
      goto LABEL_49;
    }
    if (!memcmp(v15, "PedestrianFence/kCLConnectionMessagePedestrianFenceSimulation", 0x3DuLL))
    {
      long long v32 = *(CLConnectionMessage **)a2;
      uint64_t v26 = *(void *)(a2 + 8);
      v39[0] = v32;
      v39[1] = (CLConnectionMessage *)v26;
      if (v26) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
      }
      sub_100427668(a1, v39);
      goto LABEL_97;
    }
LABEL_49:
    id v19 = (void *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
    int v20 = *((char *)v19 + 23);
    if (v20 < 0)
    {
      if (v19[1] != 58) {
        goto LABEL_55;
      }
      id v19 = (void *)*v19;
    }
    else if (v20 != 58)
    {
      goto LABEL_55;
    }
    if (!memcmp(v19, "PedestrianFence/kCLConnectionMessagePedestrianFenceSession", 0x3AuLL))
    {
      unint64_t v33 = *(CLConnectionMessage **)a2;
      uint64_t v26 = *(void *)(a2 + 8);
      v38[0] = v33;
      v38[1] = (CLConnectionMessage *)v26;
      if (v26) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
      }
      sub_1004278D4(a1, v38);
      goto LABEL_97;
    }
LABEL_55:
    CFStringRef v21 = (void *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
    int v22 = *((char *)v21 + 23);
    if (v22 < 0)
    {
      if (v21[1] != 52) {
        goto LABEL_61;
      }
      CFStringRef v21 = (void *)*v21;
    }
    else if (v22 != 52)
    {
      goto LABEL_61;
    }
    if (!memcmp(v21, "PedestrianFence/kCLConnectionMessageInertialOdometry", 0x34uLL))
    {
      __int16 v34 = *(CLConnectionMessage **)a2;
      uint64_t v26 = *(void *)(a2 + 8);
      v37[0] = v34;
      v37[1] = (CLConnectionMessage *)v26;
      if (v26) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
      }
      sub_100427B28(a1, v37);
      goto LABEL_97;
    }
LABEL_61:
    CFStringRef v23 = (void *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
    int v24 = *((char *)v23 + 23);
    if (v24 < 0)
    {
      if (v23[1] != 62) {
        goto LABEL_70;
      }
      CFStringRef v23 = (void *)*v23;
    }
    else if (v24 != 62)
    {
LABEL_70:
      if (qword_1024192D0 != -1) {
        dispatch_once(&qword_1024192D0, &stru_1022B2300);
      }
      long long v27 = qword_1024192D8;
      if (os_log_type_enabled((os_log_t)qword_1024192D8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v28 = CLConnectionMessage::name(*(CLConnectionMessage **)a2);
        if (*(char *)(v28 + 23) >= 0) {
          uint64_t v29 = v28;
        }
        else {
          uint64_t v29 = *(void *)v28;
        }
        *(_DWORD *)__p = 136446210;
        *(void *)&__p[4] = v29;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "Got unhandled mesage of type %{public}s", __p, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1024192D0 != -1) {
          dispatch_once(&qword_1024192D0, &stru_1022B2300);
        }
        uint64_t v30 = CLConnectionMessage::name(*(CLConnectionMessage **)a2);
        uint64_t v31 = *(char *)(v30 + 23) >= 0 ? v30 : *(void *)v30;
        int v41 = 136446210;
        uint64_t v42 = v31;
        uint64_t v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLPedestrianFenceClient::handleMessage(std::shared_ptr<CLConnectionMessage>)", "%s\n", v18);
        if (v18 != __p) {
          goto LABEL_84;
        }
      }
      return;
    }
    if (memcmp(v23, "PedestrianFence/kCLConnectionMessageBackgroundInertialOdometry", 0x3EuLL)) {
      goto LABEL_70;
    }
    uint64_t v35 = *(CLConnectionMessage **)a2;
    uint64_t v26 = *(void *)(a2 + 8);
    v36[0] = v35;
    v36[1] = (CLConnectionMessage *)v26;
    if (v26) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
    }
    sub_100427BE8(a1, v36);
LABEL_97:
    if (v26) {
      sub_1000DB0A0((std::__shared_weak_count *)v26);
    }
    return;
  }
  if (qword_1024192D0 != -1) {
    dispatch_once(&qword_1024192D0, &stru_1022B2300);
  }
  __int16 v12 = qword_1024192D8;
  if (os_log_type_enabled((os_log_t)qword_1024192D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__p = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Subscription: Client not entitled.", __p, 2u);
  }
  if (!sub_10013D1A0(115, 0)) {
    return;
  }
  bzero(__p, 0x65CuLL);
  if (qword_1024192D0 != -1) {
    dispatch_once(&qword_1024192D0, &stru_1022B2300);
  }
LABEL_44:
  LOWORD(v41) = 0;
  uint64_t v18 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLPedestrianFenceClient::handleMessage(std::shared_ptr<CLConnectionMessage>)", "%s\n", v18);
  if (v18 != __p) {
LABEL_84:
  }
    free(v18);
}

void sub_10042710C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v29 = v28;
  if (v29) {
    sub_1000DB0A0(v29);
  }
  _Unwind_Resume(exception_object);
}

void sub_10042715C(uint64_t a1, CLConnectionMessage **a2)
{
  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  id v4 = [Dictionary objectForKey:@"kCLConnectionMessageSubscribeKey"];
  if (!v4)
  {
    if (qword_1024192D0 != -1) {
      dispatch_once(&qword_1024192D0, &stru_1022B2300);
    }
    __int16 v12 = qword_1024192D8;
    if (os_log_type_enabled((os_log_t)qword_1024192D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Couldn't get value for kCLConnectionMessageSubscribeKey key", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024192D0 == -1)
    {
LABEL_40:
      CFStringRef v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLPedestrianFenceClient::handleMessagePedestrianFenceUpdate(std::shared_ptr<CLConnectionMessage>)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
      return;
    }
LABEL_42:
    dispatch_once(&qword_1024192D0, &stru_1022B2300);
    goto LABEL_40;
  }
  int v5 = v4;
  id v6 = [Dictionary objectForKey:CMPedestrianFenceIdentifier];
  if (!v6)
  {
    if (qword_1024192D0 != -1) {
      dispatch_once(&qword_1024192D0, &stru_1022B2300);
    }
    id v13 = qword_1024192D8;
    if (os_log_type_enabled((os_log_t)qword_1024192D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Invalid paramaters!", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024192D0 == -1) {
      goto LABEL_40;
    }
    goto LABEL_42;
  }
  id v7 = v6;
  if (![v5 BOOLValue])
  {
    id v14 = [Dictionary objectForKey:CMPedestrianFenceForceClear];
    id v15 = [Dictionary objectForKey:CMPedestrianFenceForceClearAll];
    if ([v14 BOOLValue])
    {
      unsigned int v16 = [v15 BOOLValue];
      long long v17 = *(void **)(a1 + 32);
      if (v16)
      {
        _[v17 forceClearAllFences];
      }
      else
      {
        [v17 forceClearFence:];
      }
    }
    else
    {
      uint64_t v19 = *(void *)(a1 + 24);
      uint64_t v18 = *(void **)(a1 + 32);
      [v18 clearFence:v7 forClient:v19];
    }
    return;
  }
  id v8 = [Dictionary objectForKey:CMPedestrianFenceRadius];
  if (v8)
  {
    uint64_t v11 = a1 + 24;
    uint64_t v9 = *(void *)(a1 + 24);
    __int16 v10 = *(void **)(v11 + 8);
    [v8 floatValue];
    [v10 setFence:v7 forClient:v9 withRadius:];
    return;
  }
  if (qword_1024192D0 != -1) {
    dispatch_once(&qword_1024192D0, &stru_1022B2300);
  }
  int v20 = qword_1024192D8;
  if (os_log_type_enabled((os_log_t)qword_1024192D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "Invalid parameters!", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192D0 == -1) {
      goto LABEL_40;
    }
    goto LABEL_42;
  }
}

void sub_100427668(uint64_t a1, CLConnectionMessage **a2)
{
  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  id v4 = [Dictionary objectForKey:CMPedestrianFenceIdentifier];
  id v5 = [Dictionary objectForKey:CMPedestrianFenceDelay];
  id v6 = [Dictionary objectForKey:CMPedestrianFenceShouldWake];
  if (v4) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7 || v6 == 0)
  {
    if (qword_1024192D0 != -1) {
      dispatch_once(&qword_1024192D0, &stru_1022B2300);
    }
    uint64_t v9 = qword_1024192D8;
    if (os_log_type_enabled((os_log_t)qword_1024192D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Invalid simulation paramaters!", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192D0 != -1) {
        dispatch_once(&qword_1024192D0, &stru_1022B2300);
      }
      long long v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLPedestrianFenceClient::handleMessagePedestrianFenceSimulation(std::shared_ptr<CLConnectionMessage>)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
  }
  else
  {
    __int16 v10 = v6;
    uint64_t v13 = a1 + 24;
    uint64_t v11 = *(void *)(a1 + 24);
    __int16 v12 = *(void **)(v13 + 8);
    [v5 doubleValue];
    double v15 = v14;
    id v16 = [v10 BOOLValue];
    _[v12 simulateFence:v4 forClient:v11 withExitAfterDelay:v16 wake:v15];
  }
}

void sub_1004278D4(uint64_t a1, CLConnectionMessage **a2)
{
  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  id v4 = [Dictionary objectForKey:@"kCLConnectionMessageSubscribeKey"];
  if (v4)
  {
    unsigned int v5 = [v4 BOOLValue];
    uint64_t v8 = a1 + 24;
    uint64_t v7 = *(void *)(a1 + 24);
    id v6 = *(void **)(v8 + 8);
    if (v5)
    {
      id v9 = [Dictionary objectForKey:CMPedestrianFenceClientIdentifier];
      [v6 startSessionForClient:v7 withIdentifier:v9];
    }
    else
    {
      [v6 endSessionForClient:v7];
    }
  }
  else
  {
    if (qword_1024192D0 != -1) {
      dispatch_once(&qword_1024192D0, &stru_1022B2300);
    }
    __int16 v10 = qword_1024192D8;
    if (os_log_type_enabled((os_log_t)qword_1024192D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Couldn't get value for inSession key", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192D0 != -1) {
        dispatch_once(&qword_1024192D0, &stru_1022B2300);
      }
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLPedestrianFenceClient::handleMessagePedestrianFenceSession(std::shared_ptr<CLConnectionMessage>)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
}

id sub_100427B28(uint64_t a1, CLConnectionMessage **a2)
{
  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  id v4 = [Dictionary objectForKey:CMInertialOdometryUpdateInterval];
  id result = [Dictionary objectForKey:CMPedestrianFenceClientIdentifier];
  if (v4) {
    BOOL v6 = result == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    id v7 = result;
    *(unsigned char *)(a1 + 56) = 1;
    sub_100134750(&v9, (char *)[result UTF8String]);
    uint64_t v8 = (void **)(a1 + 64);
    if (*(char *)(a1 + 87) < 0) {
      operator delete(*v8);
    }
    *(_OWORD *)uint64_t v8 = v9;
    *(void *)(a1 + 80) = v10;
    return [*(id *)(a1 + 32) odometryClient:v7 requestInterval:v4];
  }
  return result;
}

id sub_100427BE8(uint64_t a1, CLConnectionMessage **a2)
{
  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  id v4 = [Dictionary objectForKey:CMPedestrianFenceClientIdentifier];
  id result = [Dictionary objectForKey:@"kCLConnectionMessageSubscribeKey"];
  if (v4) {
    BOOL v6 = result == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    id v7 = result;
    *(unsigned char *)(a1 + 88) = 1;
    sub_100134750(&v12, (char *)[v4 UTF8String]);
    uint64_t v8 = (void **)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      operator delete(*v8);
    }
    *(_OWORD *)uint64_t v8 = v12;
    *(void *)(a1 + 112) = v13;
    unsigned int v9 = [v7 BOOLValue];
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v10 = *(void **)(a1 + 48);
    if (v9) {
      return [v10 startBackgroundInertialOdometryUpdatesForClient:v11 withIdentifier:v4 usingReferenceFrame:1];
    }
    else {
      return [v10 stopBackgroundInertialOdometryUpdatesForClient:v11];
    }
  }
  return result;
}

void sub_100427CC0(id a1)
{
  qword_1024192E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "InertialOdometry");
}

void sub_100427CF0(id a1)
{
  qword_1024192D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "PedestrianFence");
}

void *sub_100427D20@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  id v4 = operator new(0x70uLL);
  id result = sub_10017E9C0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100427D70(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100427D84(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B2330;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100427DA4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B2330;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void *sub_100427DF8@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  id v4 = operator new(0x70uLL);
  id result = sub_10017E9C0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100427E48(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100427E5C@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  id v4 = operator new(0x70uLL);
  id result = sub_10017E9C0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100427EAC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100427EC4()
{
  sub_1000C7F88(buf);
  uint64_t v0 = *(void *)buf;
  sub_100103240();
  unsigned int v1 = sub_10073E30C();
  LOBYTE(v6[0]) = 0;
  if (sub_1000D2988(v0, "EnableFenceLogEntryRecorder", (BOOL *)v6)) {
    uint64_t v2 = LOBYTE(v6[0]) != 0;
  }
  else {
    uint64_t v2 = v1;
  }
  if (v8) {
    sub_1000DB0A0(v8);
  }
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022B23A0);
  }
  uint64_t v3 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Fence: EnableFenceLogEntryRecorder,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022B23A0);
    }
    v6[0] = 67240192;
    v6[1] = v2;
    unsigned int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLFenceLogEntrySerializer::isDiskEnabled()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return v2;
}

void sub_1004280C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

void sub_1004280E4(void *a1)
{
  *a1 = off_1022B2380;
  a1[2] = 0;
  sub_10042823C(&v1);
  operator new();
}

void sub_1004281CC()
{
}

uint64_t sub_10042823C@<X0>(std::string *a1@<X8>)
{
  uint64_t v2 = (std::string *)sub_10042885C((uint64_t)a1);
  std::string::assign(v2, "cl_fence");
  sub_1000C7F88(buf);
  v11[0] = 0;
  int v3 = sub_1000D2988(*(uint64_t *)buf, "WriteLocationdLogsToCrashReporterFolder", v11);
  if (v11[0]) {
    int v4 = v3;
  }
  else {
    int v4 = 0;
  }
  if (v13) {
    sub_1000DB0A0(v13);
  }
  if (v4) {
    unsigned int v5 = "/var/mobile/Library/Logs/CrashReporter/com.apple.locationd/fence";
  }
  else {
    unsigned int v5 = "/var/mobile/Library/Logs/locationd/fence";
  }
  std::string::assign(a1 + 2, v5);
  sub_1000C7F88(buf);
  v11[0] = 0;
  int v6 = sub_1000D2988(*(uint64_t *)buf, "EnableLargeFenceLogs", v11);
  if (v11[0]) {
    int v7 = v6;
  }
  else {
    int v7 = 0;
  }
  if (v13) {
    sub_1000DB0A0(v13);
  }
  if (v7)
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022B23A0);
    }
    uint64_t v8 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Fence: EnableLargeFenceLogs is set", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022B23A0);
      }
      *(_WORD *)uint64_t v11 = 0;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static CLProtobufSerializer::Config CLFenceLogEntrySerializer::generateLoggerConfig()", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    a1[4].__r_.__value_.__l.__size_ *= 16;
  }
  a1[4].__r_.__value_.__s.__data_[20] = 0;
  a1[4].__r_.__value_.__s.__data_[21] = sub_10120E064();
  uint64_t result = sub_100427EC4();
  a1[4].__r_.__value_.__s.__data_[22] = result;
  return result;
}

void sub_1004284A0(_Unwind_Exception *a1)
{
  sub_1004284E0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004284E0(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100428548(uint64_t a1)
{
  *(CFAbsoluteTime *)(a1 + 8) = CFAbsoluteTimeGetCurrent();
}

void sub_100428578(uint64_t a1)
{
}

void sub_100428580(uint64_t a1)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022B23A0);
  }
  uint64_t v2 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Fence: Truncating and re-opening CLFenceLogEntrySerializer log", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022B23A0);
    }
    int v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceLogEntrySerializer::flushAndReopenLogs()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  sub_101212CAC(*(void *)(a1 + 16));
  sub_10120EFA4(*(void *)(a1 + 16));
  *(CFAbsoluteTime *)(a1 + 8) = CFAbsoluteTimeGetCurrent();
}

void *sub_10042872C(void *a1)
{
  *a1 = off_1022B2380;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_10042879C(void *a1)
{
  *a1 = off_1022B2380;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  operator delete();
}

void sub_10042882C(id a1)
{
  qword_1024193C8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

uint64_t sub_10042885C(uint64_t a1)
{
  uint64_t v2 = sub_100134750((void *)a1, "cl_proto");
  sub_100134750(v2 + 3, ".bin");
  sub_100134750((void *)(a1 + 48), "/var/mobile/Library/Logs/com.apple.locationd");
  sub_100134750((void *)(a1 + 72), "");
  *(void *)(a1 + 96) = 0x410FA40000000000;
  *(void *)(a1 + 104) = 314572800;
  *(_DWORD *)(a1 + 112) = 250;
  *(_DWORD *)(a1 + 116) = 65537;
  *(_WORD *)(a1 + 120) = 257;
  return a1;
}

void sub_1004288F4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

float sub_100428940(uint64_t a1, float a2, float a3, float a4, float a5)
{
  float v5 = (float)(1.0 / a3) / 6.28318531;
  *(float *)a1 = v5;
  *(float *)(a1 + 4) = a2;
  unint64_t v6 = (unint64_t)(float)(a4 / a2);
  float result = a5 / a2;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = (unint64_t)result;
  return result;
}

float sub_100428978(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a1 + 8) >= a3) {
    unint64_t v3 = a3;
  }
  else {
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (*(void *)(a1 + 16) >= a3) {
    unint64_t v4 = a3;
  }
  else {
    unint64_t v4 = *(void *)(a1 + 16);
  }
  double v5 = 0.0;
  BOOL v6 = v4 > v3;
  unint64_t v7 = v4 - v3;
  if (v6)
  {
    unint64_t v8 = 0;
    uint64_t v9 = a2 + 4 * v3;
    float v10 = 0.0;
    float v11 = 0.0;
    do
    {
      float v12 = *(float *)(v9 + 4 * v8++);
      float v13 = v12 - v11;
      float v11 = v11 + (float)((float)(v12 - v11) / (float)v8);
      float v10 = v10 + (float)(v13 * (float)(v12 - v11));
    }
    while (v7 != v8);
    if (v7 >= 2) {
      double v5 = (float)(v10 / (float)(v7 - 1));
    }
  }
  return pow(v5, 4.0);
}

float sub_100428A08(uint64_t a1, uint64_t a2, float *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v4 = 0;
    unint64_t v5 = 0;
    float v6 = 3.4028e38;
    do
    {
      if (*(float *)(a2 + 4 * v4) < v6)
      {
        float v6 = *(float *)(a2 + 4 * v4);
        unint64_t v5 = v4;
      }
      ++v4;
    }
    while (a4 != v4);
  }
  else
  {
    unint64_t v5 = 0;
    float v6 = 3.4028e38;
  }
  if (v5 >= a4)
  {
    float v8 = 0.0;
  }
  else
  {
    unint64_t v7 = 0;
    do
    {
      if (*(float *)(a2 + 4 * v5) > v6)
      {
        float v6 = *(float *)(a2 + 4 * v5);
        unint64_t v7 = v5;
      }
      ++v5;
    }
    while (a4 != v5);
    float v8 = (float)v7;
  }
  *a3 = fmaxf(v6, 0.0);
  return *(float *)(a1 + 4) * v8;
}

id sub_100429370(uint64_t a1, void *a2)
{
  if (!*(void *)(a1 + 128)) {
    *(void *)(a1 + 128) = [[CLOSTransaction alloc] initWithDescription:"CS Session"];
  }
  *(unsigned char *)(a1 + 200) = 0;
  [*(id *)(a1 + 8) setSessionStalenessInterval:5.0];
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56)))
  {
    return sub_100430D6C(a1, a2);
  }
  else
  {
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 56) + 24))(*(void *)(a1 + 56)))
    {
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B2480);
      }
      unint64_t v5 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "@GtsWarn, GizmoSync, handleStartSession, #CloneMe", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022B2480);
        }
        float v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "NSDictionary *CLTileSyncManager::handleStartSession(NSDictionary *)", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
    }
    return 0;
  }
}

void sub_100429D04(uint64_t a1)
{
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022B2480);
  }
  uint64_t v2 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    int v3 = *(char *)(a1 + 192);
    *(_DWORD *)buf = 67240192;
    int v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "@GtsSync, CsSync, handleServiceError, %{public}c", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    unint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileSyncManager::handleServiceError()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
}

uint64_t sub_10042A1D4(uint64_t a1, void *a2)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56)))
  {
    return sub_100431CB8(a1, a2);
  }
  else if ((*(unsigned int (**)(void))(**(void **)(a1 + 56) + 24))(*(void *)(a1 + 56)))
  {
    return sub_100433100();
  }
  else
  {
    return 256;
  }
}

void sub_10042A5FC(uint64_t a1, void *a2)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 56) + 24))(*(void *)(a1 + 56)))
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    unint64_t v4 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "@GtsWarn, GizmoSync, handleApplyChanges, #CloneMe", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B2480);
      }
      *(_WORD *)__p = 0;
      unint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileSyncManager::handleApplyChanges(CLTileSyncSyChange *)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  else
  {
    id v6 = [a2 properties];
    id v7 = [v6 objectForKey:@"kSYDictionaryObjectSyncIDKey"];
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    float v8 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      id v20 = [v7 UTF8String];
      __int16 v21 = 2050;
      id v22 = [a2 changeType];
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "@GtsMgr, change, syncId, %{public}s, type, %{public}ld", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B2480);
      }
      *(_DWORD *)__p = 136446466;
      *(void *)&__p[4] = [v7 UTF8String];
      __int16 v16 = 2050;
      id v17 = [a2 changeType];
      float v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileSyncManager::handleApplyChanges(CLTileSyncSyChange *)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    if (v7)
    {
      id v9 = [v6 objectForKey:@"kCLTileSyncObjectDataKey"];
      [objc_msgSend(v6, "objectForKey:", @"kCLTileSyncObjectSyncTimestampKey") doubleValue];
      uint64_t v14 = v10;
      sub_100134750(__p, (char *)[v7 UTF8String]);
      sub_100C09258(buf, __p);
      if (v18 < 0) {
        operator delete(*(void **)__p);
      }
      sub_100434244(a1, (int *)buf, v9, (double *)&v14);
      if (v24 < 0) {
        operator delete(v23);
      }
    }
    else
    {
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B2480);
      }
      float v11 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "@GtsCont, change with no data!!!", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022B2480);
        }
        *(_WORD *)__p = 0;
        float v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileSyncManager::handleApplyChanges(CLTileSyncSyChange *)", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
    *(unsigned char *)(a1 + 193) = 1;
  }
}

void sub_10042AB28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10042B03C(uint64_t a1, int a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 160);
  BOOL v6 = v4 == 73 || v4 == 82;
  if (a2) {
    int v7 = *(_DWORD *)(a1 + 196) + 1;
  }
  else {
    int v7 = 0;
  }
  *(_DWORD *)(a1 + 196) = v7;
  double v8 = (*(double (**)(void))(**(void **)(a1 + 56) + 32))(*(void *)(a1 + 56));
  sub_10042EFE4(a1 + 208, a2, v8);
  if (!*(unsigned char *)(a1 + 193))
  {
    sub_10014FF34((uint64_t *)(a1 + 168));
    if (!*(unsigned char *)(a1 + 200)) {
      *(unsigned char *)(a1 + 192) = 88;
    }
  }
  *(unsigned char *)(a1 + 193) = 0;
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56))) {
    BOOL v9 = a2 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    int v10 = *(_DWORD *)(a1 + 196);
    if (v10 <= 3)
    {
      if (v10 == 1 || *(unsigned char *)(a1 + 120))
      {
        float v11 = "CsErrorShort";
        double v12 = 30.0;
      }
      else
      {
        float v11 = "CsErrorLong";
        double v12 = 600.0;
      }
      sub_1004303D0(a1, (uint64_t)v11, v12);
    }
  }

  *(void *)(a1 + 128) = 0;
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022B2480);
  }
  float v13 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    int v14 = *(_DWORD *)(a1 + 196);
    int v15 = *(char *)(a1 + 192);
    int v16 = *(unsigned __int8 *)(a1 + 200);
    int v17 = *(char *)(a1 + 160);
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 4);
    int v19 = *(unsigned __int8 *)(a1 + 120);
    *(_DWORD *)buf = 67241984;
    int v23 = a2;
    __int16 v24 = 1026;
    int v25 = v14;
    __int16 v26 = 1026;
    int v27 = v15;
    __int16 v28 = 1026;
    int v29 = v16;
    __int16 v30 = 1026;
    BOOL v31 = v6;
    __int16 v32 = 1026;
    int v33 = v17;
    __int16 v34 = 2050;
    unint64_t v35 = v18;
    __int16 v36 = 1026;
    int v37 = v19;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "@GtsMgr, handleSessionDidEnd, error, %{public}d, %{public}d, change, %{public}c, pending, %{public}d, psActive, %{public}d, syncState, %{public}c, queue, %{public}ld, exchanged, %{public}d", buf, 0x36u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    __int16 v21 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileSyncManager::handleSessionDidEnd(BOOL)", "%s\n", v21);
    if (v21 != (char *)buf) {
      free(v21);
    }
  }
  *(unsigned char *)(a1 + 120) = 0;
  return v6;
}

void sub_10042B788(uint64_t a1, void *a2)
{
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022B2480);
  }
  int v4 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    id v5 = [[[a2 UUIDString] UTF8String];
    double v6 = (*(double (**)(void))(**(void **)(a1 + 56) + 56))(*(void *)(a1 + 56));
    *(_DWORD *)buf = 136446466;
    id v9 = v5;
    __int16 v10 = 2050;
    double v11 = v6 / 86400.0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "@GtsMgr, willSwitch, new, %{public}s, days inactive, %{public}0.1f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    [objc_msgSend(a2, "UUIDString") UTF8String];
    (*(double (**)(void))(**(void **)(a1 + 56) + 56))(*(void *)(a1 + 56));
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileSyncManager::handleWillSwitch(NSUUID *)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
}

void sub_10042BC0C(uint64_t a1, int a2, int a3)
{
  int v6 = *(char *)(a1 + 160);
  [*(id *)(a1 + 8) setSessionStalenessInterval:5.0];
  int v7 = 88;
  if (a2 && (a3 & 1) == 0)
  {
    sub_100430B98(a1);
    if (*(unsigned char *)(a1 + 136)) {
      char v8 = 76;
    }
    else {
      char v8 = 83;
    }
    *(unsigned char *)(a1 + 160) = v8;
    int v7 = 82;
  }
  if (a3 && (a2 & 1) == 0)
  {
    [*(id *)(a1 + 8) suspend];
    *(unsigned char *)(a1 + 160) = 76;
    int v7 = 83;
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022B2480);
  }
  id v9 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    int v10 = *(char *)(a1 + 160);
    int v11 = *(unsigned __int8 *)(a1 + 136);
    double v12 = (*(double (**)(void))(**(void **)(a1 + 56) + 56))(*(void *)(a1 + 56));
    *(_DWORD *)buf = 67241728;
    int v15 = a2;
    __int16 v16 = 1026;
    int v17 = a3;
    __int16 v18 = 1026;
    int v19 = v7;
    __int16 v20 = 1026;
    int v21 = v6;
    __int16 v22 = 1026;
    int v23 = v10;
    __int16 v24 = 1026;
    int v25 = v11;
    __int16 v26 = 2050;
    double v27 = v12 / 86400.0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "@GtsMgr, handlePairSwitch, ids ,%{public}d, %{public}d, resume/suspend, %{public}c, state, %{public}c, %{public}c, restricted, %{public}d, inactive, %{public}0.1f", buf, 0x30u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    (*(double (**)(void))(**(void **)(a1 + 56) + 56))(*(void *)(a1 + 56));
    float v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileSyncManager::handlePairingSwitch(BOOL, BOOL)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
}

id sub_10042C14C(uint64_t a1)
{
  id v2 = [objc_msgSend(*(id *)(a1 + 32), "activeSyncSession") syncSessionType];
  unint64_t v3 = (unint64_t)[*(id *)(a1 + 32) activeSyncSession].syncSessionType;
  if (v3 > 2) {
    int v4 = "Unknown";
  }
  else {
    int v4 = off_1022B2520[v3];
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022B2480);
  }
  id v5 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    int v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "@GtsFlow, PS, handleSyncTrapTurn%s, 1", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    char v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLTileSyncDelegate syncCoordinator:beginSyncSession:]_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  id result = (id)sub_10042C488(*(void *)(*(void *)(a1 + 40) + 8), v2 == 0);
  if (result)
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    int v7 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "@GtsFlow, PS, syncDidCompleteTx, 2, skipped", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B2480);
      }
      id v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLTileSyncDelegate syncCoordinator:beginSyncSession:]_block_invoke", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    return [*(id *)(*(void *)(a1 + 40) + 24) syncDidComplete];
  }
  return result;
}

uint64_t sub_10042C488(uint64_t a1, int a2)
{
  int v3 = *(char *)(a1 + 160);
  if (a2) {
    char v4 = 73;
  }
  else {
    char v4 = 82;
  }
  *(unsigned char *)(a1 + 160) = v4;
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 56) + 48))(*(void *)(a1 + 56)))
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    id v5 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "@GtsMgr, xSyncTrap, canDownload", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 == -1)
    {
LABEL_36:
      __int16 v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileSyncManager::handleSyncTrapTurn(BOOL)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
      return 1;
    }
LABEL_42:
    dispatch_once(&qword_1024193B0, &stru_1022B2480);
    goto LABEL_36;
  }
  double v6 = (*(double (**)(void))(**(void **)(a1 + 56) + 56))(*(void *)(a1 + 56));
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022B2480);
  }
  int v7 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134349312;
    *(double *)int v19 = v6 / 3600.0;
    *(_WORD *)&v19[8] = 2050;
    *(double *)__int16 v20 = v6 / 86400.0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "@GtsSync, since last switched, hours, %{public}0.1f, days, %{public}0.1f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    int v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileSyncManager::handleSyncTrapTurn(BOOL)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  if (v6 < *(double *)(a1 + 88) || *(unsigned char *)(a1 + 200))
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    char v8 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349568;
      double v9 = *(double *)(a1 + 88);
      int v10 = *(unsigned __int8 *)(a1 + 200);
      *(double *)int v19 = v6 / 86400.0;
      *(_WORD *)&v19[8] = 2050;
      *(double *)__int16 v20 = v9 / 86400.0;
      *(_WORD *)&v20[8] = 1026;
      v21[0] = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "@GtsMgr, xSyncTrap, days inactive, %{public}0.1f, thresh, %{public}0.1f, pending, %{public}d", buf, 0x1Cu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 == -1) {
      goto LABEL_36;
    }
    goto LABEL_42;
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022B2480);
  }
  double v12 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = *(char *)(a1 + 160);
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 4);
    *(_DWORD *)buf = 67240960;
    *(_DWORD *)int v19 = v3;
    *(_WORD *)&v19[4] = 1026;
    *(_DWORD *)&v19[6] = v13;
    *(_WORD *)__int16 v20 = 2050;
    *(void *)&v20[2] = v14;
    LOWORD(v21[0]) = 2050;
    *(double *)((char *)v21 + 2) = v6;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "@GtsFlow, CS, setNeedsReset, 1, BeginPair, state, %{public}c, %{public}c, queuewas, %{public}ld, inactive, %{public}0.1f", buf, 0x22u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    int v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileSyncManager::handleSyncTrapTurn(BOOL)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  *(unsigned char *)(a1 + 192) = 84;
  *(unsigned char *)(a1 + 200) = 1;
  sub_10014FF34((uint64_t *)(a1 + 168));
  [*(id *)(a1 + 8) setHasChangesAvailable];
  return 0;
}

void sub_10042D098(uint64_t a1)
{
  if (![*(id *)(a1 + 32) syncRestriction])
  {
    uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8);
    int v3 = 0;
    goto LABEL_5;
  }
  if ([*(id *)(a1 + 32) syncRestriction] == (id)1)
  {
    uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8);
    int v3 = 1;
LABEL_5:
    sub_10042D2E8(v2, v3);
    return;
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022B2480);
  }
  char v4 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_ERROR))
  {
    id v5 = [*(id *)(a1 + 32) syncRestriction];
    *(_DWORD *)buf = 134349056;
    id v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "@GtsSync, PsCoord, RestrictionUnknown, %{public}ld, #CloneMe", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    [*(id *)(a1 + 32) syncRestriction];
    double v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "-[CLTileSyncDelegate syncCoordinatorDidChangeSyncRestriction:]_block_invoke", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

void sub_10042D2E8(uint64_t a1, int a2)
{
  int v3 = *(char *)(a1 + 160);
  *(unsigned char *)(a1 + 136) = a2;
  if (a2)
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    char v4 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "@GtsSync, PsCoord, RestrictionLimitPush", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B2480);
      }
      int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileSyncManager::handleRestrictionChange(BOOL)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    char v5 = 76;
    goto LABEL_15;
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022B2480);
  }
  double v6 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "@GtsSync, PsCoord, RestrictionNone", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    double v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileSyncManager::handleRestrictionChange(BOOL)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56)))
  {
    char v5 = 83;
LABEL_15:
    *(unsigned char *)(a1 + 160) = v5;
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022B2480);
  }
  int v7 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    int v8 = *(char *)(a1 + 160);
    int v9 = *(unsigned __int8 *)(a1 + 136);
    *(_DWORD *)buf = 67240704;
    int v14 = v3;
    __int16 v15 = 1026;
    int v16 = v8;
    __int16 v17 = 1026;
    int v18 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "@GtsMgr, restriction, state was, %{public}c, now, %{public}c, restricted, %{public}d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileSyncManager::handleRestrictionChange(BOOL)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
}

void sub_10042DBFC(uint64_t a1)
{
}

void sub_10042DC08(uint64_t a1)
{
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022B2480);
  }
  uint64_t v2 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    int v3 = *(char *)(a1 + 160);
    *(_DWORD *)buf = 67240192;
    int v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "@GtsMgr, SyncTrapEnd, oldstate, %{public}c", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    char v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileSyncManager::handleSyncTrapEnd()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  *(unsigned char *)(a1 + 160) = 83;
  sub_1004303D0(a1, (uint64_t)"ClosePS", 1.0);
}

void sub_10042E0E8(double *a1, double a2)
{
  a1[6] = a2;
  char v4 = +[NSMutableArray arrayWithCapacity:11];
  [(NSMutableArray *)v4 setObject:+[NSNumber numberWithInt:*(unsigned int *)a1] atIndexedSubscript:0];
  [(NSMutableArray *)v4 setObject:+[NSNumber numberWithInt:*((unsigned int *)a1 + 1)] atIndexedSubscript:1];
  [(NSMutableArray *)v4 setObject:+[NSNumber numberWithInt:*((unsigned int *)a1 + 2)] atIndexedSubscript:2];
  [(NSMutableArray *)v4 setObject:+[NSNumber numberWithInt:*((unsigned int *)a1 + 3)] atIndexedSubscript:3];
  [(NSMutableArray *)v4 setObject:+[NSNumber numberWithInt:*((unsigned int *)a1 + 6)] atIndexedSubscript:4];
  [(NSMutableArray *)v4 setObject:+[NSNumber numberWithInt:*((unsigned int *)a1 + 4)] atIndexedSubscript:5];
  [(NSMutableArray *)v4 setObject:+[NSNumber numberWithInt:*((unsigned int *)a1 + 5)] atIndexedSubscript:6];
  [(NSMutableArray *)v4 setObject:+[NSNumber numberWithInt:*((unsigned int *)a1 + 7)] atIndexedSubscript:7];
  [(NSMutableArray *)v4 setObject:+[NSNumber numberWithInt:*((unsigned int *)a1 + 8)] atIndexedSubscript:8];
  [(NSMutableArray *)v4 setObject:+[NSNumber numberWithDouble:a1[5]] atIndexedSubscript:9];
  [(NSMutableArray *)v4 setObject:+[NSNumber numberWithDouble:a1[6]] atIndexedSubscript:10];
  uint64_t v5 = sub_1000A6958();
  sub_1004D258C(v5);
  uint64_t v6 = *(void *)sub_1000A6958();
  (*(void (**)(void))(v6 + 944))();
}

void sub_10042E2CC(uint64_t a1, double a2)
{
  int v25 = 0;
  uint64_t v5 = sub_1000A6958();
  if (sub_1004D1D1C(v5, @"TileSyncAwd", (CFTypeRef *)&v25))
  {
    uint64_t v6 = v25;
    if ([v25 count] == (id)11)
    {
      *(_DWORD *)a1 = [v6 objectAtIndexedSubscript:0].intValue;
      *(_DWORD *)(a1 + 4) = [[v6 objectAtIndexedSubscript:1] intValue];
      *(_DWORD *)(a1 + 8) = [objc_msgSend(objc_msgSend(v6, "objectAtIndexedSubscript:", 2), "intValue");
      *(_DWORD *)(a1 + 12) = [objc_msgSend(v6, "objectAtIndexedSubscript:", 3) intValue];
      *(_DWORD *)(a1 + 24) = [objc_msgSend(v6, "objectAtIndexedSubscript:", 4) intValue];
      *(_DWORD *)(a1 + 16) = [objc_msgSend(objc_msgSend(v6, "objectAtIndexedSubscript:", 5), "intValue");
      *(_DWORD *)(a1 + 20) = [v6 objectAtIndexedSubscript:6].intValue;
      *(_DWORD *)(a1 + 28) = [v6 objectAtIndexedSubscript:7].intValue;
      *(_DWORD *)(a1 + 32) = [v6 objectAtIndexedSubscript:8].intValue;
      [objc_msgSend(v6, "objectAtIndexedSubscript:", 9) doubleValue];
      *(void *)(a1 + 40) = v7;
      [objc_msgSend(v6, "objectAtIndexedSubscript:", 10) doubleValue];
      *(void *)(a1 + 48) = v8;
    }
    else
    {
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B2480);
      }
      int v9 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
      {
        double v10 = COERCE_DOUBLE([v6 count]);
        *(_DWORD *)buf = 134349056;
        double v33 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "@GtsAwd, plist, error, load, %{public}lu", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022B2480);
        }
        double v23 = COERCE_DOUBLE([v6 count]);
        int v26 = 134349056;
        double v27 = v23;
        __int16 v24 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileSyncAWD::loadMetrics(CFAbsoluteTime)", "%s\n", v24);
        if (v24 != (char *)buf) {
          free(v24);
        }
      }
    }
  }
  double v11 = a2 - *(double *)(a1 + 48);
  if (v11 > 7776000.0)
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    double v12 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 134349568;
      double v33 = v11;
      __int16 v34 = 2050;
      double v35 = 7776000.0;
      __int16 v36 = 2050;
      uint64_t v37 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "@GtsAwd, plist, clear, %{public}.1f, thresh, %{public}.0f, last, %{public}.1f", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B2480);
      }
      uint64_t v19 = *(void *)(a1 + 48);
      int v26 = 134349568;
      double v27 = v11;
      __int16 v28 = 2050;
      double v29 = 7776000.0;
      __int16 v30 = 2050;
      uint64_t v31 = v19;
      __int16 v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileSyncAWD::loadMetrics(CFAbsoluteTime)", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    uint64_t v14 = sub_1000A6958();
    sub_1004CF870(v14);
  }
  double v15 = *(double *)(a1 + 40);
  if (v15 > a2 || v15 + 604800.0 < a2)
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    __int16 v17 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
    {
      double v18 = *(double *)(a1 + 40);
      *(_DWORD *)buf = 134349312;
      double v33 = v18;
      __int16 v34 = 2048;
      double v35 = a2;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "@GtsAwd, plist, error, time, %{public}.1f, now, %.1f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B2480);
      }
      double v21 = *(double *)(a1 + 40);
      int v26 = 134349312;
      double v27 = v21;
      __int16 v28 = 2048;
      double v29 = a2;
      __int16 v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileSyncAWD::loadMetrics(CFAbsoluteTime)", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
    *(double *)(a1 + 40) = a2;
  }
  sub_10042E900((double *)a1, (uint64_t)"loadcache", a2);
}

void sub_10042E900(double *a1, uint64_t a2, double a3)
{
  double v6 = a3 - a1[6];
  if (v6 > 604800.0)
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    uint64_t v7 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *((void *)a1 + 6);
      *(_DWORD *)buf = 134349568;
      double v26 = v6;
      __int16 v27 = 2050;
      *(void *)__int16 v28 = 0x4122750000000000;
      *(_WORD *)&v28[8] = 2050;
      uint64_t v29 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "@GtsAwd, plist, clear, %{public}.1f, thresh, %{public}.0f, last, %{public}.1f", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B2480);
      }
      __int16 v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileSyncAWD::weekLongLogging(const char *, CFAbsoluteTime)", "%s\n", v24);
      if (v24 != (char *)buf) {
        free(v24);
      }
    }
    uint64_t v9 = sub_1000A6958();
    sub_1004CF870(v9);
  }
  double v10 = a1[5];
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022B2480);
  }
  double v11 = a3 - v10;
  double v12 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = *(_DWORD *)a1;
    int v14 = *((_DWORD *)a1 + 1);
    int v15 = *((_DWORD *)a1 + 2);
    int v16 = *((_DWORD *)a1 + 3);
    int v17 = *((_DWORD *)a1 + 4);
    double v18 = (double)*((int *)a1 + 5) * 0.0009765625;
    int v19 = *((_DWORD *)a1 + 6);
    int v20 = *((_DWORD *)a1 + 7);
    double v21 = (double)*((int *)a1 + 8) * 0.0009765625;
    uint64_t v22 = *((void *)a1 + 6);
    *(_DWORD *)buf = 136449538;
    double v26 = *(double *)&a2;
    __int16 v27 = 1026;
    *(_DWORD *)__int16 v28 = v13;
    *(_WORD *)&v28[4] = 1026;
    *(_DWORD *)&v28[6] = v14;
    LOWORD(v29) = 1026;
    *(_DWORD *)((char *)&v29 + 2) = v15;
    HIWORD(v29) = 1026;
    int v30 = v16;
    __int16 v31 = 1026;
    int v32 = v19;
    __int16 v33 = 1026;
    int v34 = v17;
    __int16 v35 = 2050;
    double v36 = v18;
    __int16 v37 = 1026;
    int v38 = v20;
    __int16 v39 = 2050;
    double v40 = v21;
    __int16 v41 = 2050;
    double v42 = v11 / 3600.0;
    __int16 v43 = 1026;
    BOOL v44 = v11 > 604800.0;
    __int16 v45 = 2050;
    uint64_t v46 = v22;
    __int16 v47 = 2050;
    double v48 = v6 / 3600.0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "@GtsAwd, snap, %{public}s, sessions, %{public}d, empty, %{public}d, completed, %{public}d, errored, %{public}d, requested, %{public}d, synced, %{public}d, sizemb, %{public}.1f, week, %{public}d, %{public}.1f, sinceweekly, %{public}0.1f, reset, %{public}d, lastSave, %{public}0.1f, %{public}0.1f", buf, 0x6Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    double v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileSyncAWD::weekLongLogging(const char *, CFAbsoluteTime)", "%s\n", v23);
    if (v23 != (char *)buf) {
      free(v23);
    }
  }
  if (v11 > 604800.0)
  {
    *((_DWORD *)a1 + 7) = 0;
    *((_DWORD *)a1 + 8) = 0;
    a1[5] = a1[5] + 604800.0;
  }
}

void sub_10042EE0C(double *a1, double a2)
{
  ++*(_DWORD *)a1;
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022B2480);
  }
  char v4 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    int v5 = *(_DWORD *)a1;
    *(_DWORD *)buf = 67240192;
    int v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "@GtsAwd, started, %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    double v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileSyncAWD::startSession(CFAbsoluteTime)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  sub_10042E0E8(a1, a2);
}

void sub_10042EFE4(uint64_t a1, int a2, double a3)
{
  if (a2) {
    ++*(_DWORD *)(a1 + 12);
  }
  ++*(_DWORD *)(a1 + 8);
  sub_10042E0E8((double *)a1, a3);

  sub_10042E900((double *)a1, (uint64_t)"endsync", a3);
}

void sub_10042F058(double *a1, int a2, double a3)
{
  if (!a2) {
    ++*((_DWORD *)a1 + 1);
  }
  *((_DWORD *)a1 + 6) += a2;
  sub_10042E0E8(a1, a3);
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022B2480);
  }
  int v5 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    int v6 = *((_DWORD *)a1 + 6);
    int v7 = *(_DWORD *)a1;
    *(_DWORD *)buf = 67240704;
    int v10 = a2;
    __int16 v11 = 1026;
    int v12 = v6;
    __int16 v13 = 1026;
    int v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "@GtsAwd, request, tiles, %{public}d, total, %{public}d, sessions, %{public}d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileSyncAWD::tilesRequested(CFAbsoluteTime, int)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
}

void sub_10042F264(uint64_t a1, int a2, double a3)
{
  int v6 = a2 + 512;
  if (a2 < -512) {
    int v6 = a2 + 1535;
  }
  int v7 = *(_DWORD *)(a1 + 20) + (v6 >> 10);
  ++*(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 20) = v7;
  int v8 = *(_DWORD *)(a1 + 32);
  ++*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 32) = v8 + (v6 >> 10);
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022B2480);
  }
  uint64_t v9 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    double v10 = (double)*(int *)(a1 + 20) * 0.0009765625;
    *(_DWORD *)buf = 67240448;
    int v13 = a2;
    __int16 v14 = 2050;
    double v15 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "@GtsAwd, serialized, %{public}d, totalmb, %{public}.1f", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    __int16 v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileSyncAWD::tileSynced(CFAbsoluteTime, int)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  sub_10042E0E8((double *)a1, a3);
}

void sub_10042F498(unsigned int *a1, _DWORD *a2, double a3)
{
  unsigned int v5 = *a1;
  int v6 = 1;
  if ((int)*a1 >= 101)
  {
    unsigned int v7 = *a1;
    do
    {
      unsigned int v5 = v7 / 0xA;
      v6 *= 10;
      BOOL v8 = v7 > 0x3F1;
      v7 /= 0xAu;
    }
    while (v8);
  }
  a2[10] = v6 * v5;
  signed int v9 = a1[1];
  int v10 = 1;
  if (v9 >= 101)
  {
    unsigned int v11 = a1[1];
    do
    {
      signed int v9 = v11 / 0xA;
      v10 *= 10;
      BOOL v8 = v11 > 0x3F1;
      v11 /= 0xAu;
    }
    while (v8);
  }
  a2[11] = v10 * v9;
  signed int v12 = a1[2];
  int v13 = 1;
  if (v12 >= 101)
  {
    unsigned int v14 = a1[2];
    do
    {
      signed int v12 = v14 / 0xA;
      v13 *= 10;
      BOOL v8 = v14 > 0x3F1;
      v14 /= 0xAu;
    }
    while (v8);
  }
  a2[12] = v13 * v12;
  signed int v15 = a1[3];
  int v16 = 1;
  if (v15 >= 101)
  {
    unsigned int v17 = a1[3];
    do
    {
      signed int v15 = v17 / 0xA;
      v16 *= 10;
      BOOL v8 = v17 > 0x3F1;
      v17 /= 0xAu;
    }
    while (v8);
  }
  a2[13] = v16 * v15;
  signed int v18 = a1[4];
  int v19 = 1;
  if (v18 >= 101)
  {
    unsigned int v20 = a1[4];
    do
    {
      signed int v18 = v20 / 0xA;
      v19 *= 10;
      BOOL v8 = v20 > 0x3F1;
      v20 /= 0xAu;
    }
    while (v8);
  }
  unsigned int v21 = a1[5];
  a2[14] = v19 * v18;
  a2[15] = v21;
  sub_10042E900((double *)a1, (uint64_t)"report", a3);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;

  sub_10042E0E8((double *)a1, a3);
}

uint64_t sub_10042F63C(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, void *a5)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_1022B23D0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = a2;
  uint64_t v7 = *a4;
  *a4 = 0;
  *(void *)(a1 + 56) = v7;
  *(void *)(a1 + 64) = a3;
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 88) = xmmword_101D1E9C0;
  BOOL v8 = (void *)(a1 + 88);
  *(void *)(a1 + 104) = [objc_msgSend(objc_msgSend(a3, "silo"), "newTimer")];
  *(unsigned char *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 1;
  *(void *)(a1 + 144) = *a5;
  uint64_t v9 = a5[1];
  *(void *)(a1 + 152) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 160) = 76;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(_WORD *)(a1 + 192) = 88;
  *(_DWORD *)(a1 + 196) = 0;
  *(unsigned char *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_DWORD *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56)) & 1) == 0
    && ((*(uint64_t (**)(void))(**(void **)(a1 + 56) + 24))(*(void *)(a1 + 56)) & 1) == 0)
  {
    sub_101A5FABC();
    abort_report_np();
    __break(1u);
  }
  sub_1000C7F88(buf);
  sub_1000A699C(*(uint64_t *)buf, "ManifestRate", (void *)(a1 + 96));
  if (v43) {
    sub_1000DB0A0(v43);
  }
  sub_1000C7F88(buf);
  sub_1000A699C(*(uint64_t *)buf, "QwsPeriod", v8);
  if (v43) {
    sub_1000DB0A0(v43);
  }
  double v10 = (*(double (**)(void))(**(void **)(a1 + 56) + 32))(*(void *)(a1 + 56));
  *(double *)(a1 + 72) = v10;
  sub_10014FF34((uint64_t *)(a1 + 168));
  int v11 = sub_10042FCE4(a1);
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56))) {
    BOOL v12 = sub_10042FF80(a1);
  }
  else {
    BOOL v12 = 1;
  }
  if ((v11 & v12) != 0) {
    char v13 = 83;
  }
  else {
    char v13 = 76;
  }
  *(unsigned char *)(a1 + 160) = v13;
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022B2480);
  }
  unsigned int v14 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56));
    int v16 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 24))(*(void *)(a1 + 56));
    uint64_t v17 = *(void *)(a1 + 96);
    int v18 = *(char *)(a1 + 160);
    int v19 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 48))(*(void *)(a1 + 56));
    *(_DWORD *)buf = 67241728;
    *(_DWORD *)&uint8_t buf[4] = v15;
    LOWORD(v43) = 1026;
    *(_DWORD *)((char *)&v43 + 2) = v16;
    HIWORD(v43) = 2050;
    uint64_t v44 = v17;
    __int16 v45 = 1026;
    BOOL v46 = v12;
    __int16 v47 = 1026;
    int v48 = v11;
    __int16 v49 = 1026;
    int v50 = v18;
    __int16 v51 = 1026;
    int v52 = v19;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "@GtsInit, CG, %{public}d, %{public}d, rate, %{public}0.0f, state, %{public}d, %{public}d, %{public}c, canDownload, %{public}d", buf, 0x30u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    int v21 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56));
    int v22 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 24))(*(void *)(a1 + 56));
    uint64_t v23 = *(void *)(a1 + 96);
    int v24 = *(char *)(a1 + 160);
    int v25 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 48))(*(void *)(a1 + 56));
    int v28 = 67241728;
    int v29 = v21;
    __int16 v30 = 1026;
    int v31 = v22;
    __int16 v32 = 2050;
    uint64_t v33 = v23;
    __int16 v34 = 1026;
    BOOL v35 = v12;
    __int16 v36 = 1026;
    int v37 = v11;
    __int16 v38 = 1026;
    int v39 = v24;
    __int16 v40 = 1026;
    int v41 = v25;
    double v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLTileSyncManager::CLTileSyncManager(CLITilesManager *, id<CLIntersiloUniverse>, std::unique_ptr<IExternal>, std::shared_ptr<CLWifiAccessPointLocationService>)", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
  sub_10042E2CC(a1 + 208, v10);
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_1004301DC;
  v27[3] = &unk_1022A3020;
  v27[4] = a1;
  [*(id *)(a1 + 104) setHandler:v27];
  sub_1004303D0(a1, (uint64_t)"Timer", *(double *)(a1 + 96));
  return a1;
}

void sub_10042FC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_10014FEE0((void ***)va);
  uint64_t v17 = *(std::__shared_weak_count **)(v15 + 152);
  if (v17) {
    sub_1000DB0A0(v17);
  }
  uint64_t v18 = *(void *)(v15 + 56);
  *(void *)(v15 + 56) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10042FCE4(uint64_t a1)
{
  *(void *)(a1 + 16) = -[CLTileSyncDelegate initWithSyncManager:silo:]([CLTileSyncDelegate alloc], "initWithSyncManager:silo:", a1, [*(id *)(a1 + 64) silo]);
  id v2 = objc_alloc(off_10241B110());
  id v3 = [v2 initWithService:@"com.apple.private.alloy.location.wifitilesync" priority:-20 asMasterStore:(*(uint64_t (**)(void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56)) options:0];
  *(void *)(a1 + 8) = v3;
  [v3 setDelegate:*(void *)(a1 + 16) queue:objc_msgSend(objc_msgSend(*(id *)(a1 + 64), "silo"), "queue")];
  *(void *)(a1 + 24) = objc_alloc_init(CLTileSyncSyChange);
  [*(id *)(a1 + 8) setSessionStalenessInterval:1.0];
  if (*(void *)(a1 + 8))
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56));
    if (result)
    {
      sub_100430B98(a1);
      return 1;
    }
  }
  else
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    unsigned int v5 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "@GtsInit, CsObjects failed", buf, 2u);
    }
    uint64_t result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B2480);
      }
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileSyncManager::csInitialize()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_10042FF80(uint64_t a1)
{
  id v2 = [(objc_class *)off_10241B100() syncCoordinatorWithServiceName:@"com.apple.pairedsync.locationd"];
  *(void *)(a1 + 32) = v2;
  [v2 setDelegate:*(void *)(a1 + 16)];
  *(void *)(a1 + 40) = [objc_alloc(off_10241B108()) initWithDelegate:*(void *)(a1 + 16)];
  *(unsigned char *)(a1 + 136) = [*(id *)(a1 + 32) syncRestriction] != 0;
  if (!*(void *)(a1 + 32) || !*(void *)(a1 + 40))
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    id v3 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
    {
      BOOL v4 = *(void *)(a1 + 32) == 0;
      BOOL v5 = *(void *)(a1 + 40) == 0;
      *(_DWORD *)buf = 67240448;
      BOOL v9 = v4;
      __int16 v10 = 1026;
      BOOL v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "@GtsInit, PsObjects failed, C, %{public}d, O, %{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B2480);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileSyncManager::psInitialize()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  return *(unsigned char *)(a1 + 136) == 0;
}

uint64_t sub_1004301DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022B2480);
  }
  id v2 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(v1 + 112);
    *(_DWORD *)buf = 136446210;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "@GtsTimer, fired, %{public}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    BOOL v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLTileSyncManager::CLTileSyncManager(CLITilesManager *, id<CLIntersiloUniverse>, std::unique_ptr<IExternal>, std::shared_ptr<CLWifiAccessPointLocationService>)_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_1004303D0(v1, (uint64_t)"Timer", *(double *)(v1 + 96));
  return (*(uint64_t (**)(uint64_t, void))(*(void *)v1 + 48))(v1, *(void *)(v1 + 112));
}

void sub_1004303D0(uint64_t a1, uint64_t a2, double a3)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56)))
  {
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 56) + 48))(*(void *)(a1 + 56)))
    {
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B2480);
      }
      int v6 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "@GtsTimer, direct, skip", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022B2480);
        }
        uint64_t v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileSyncManager::setManifestFire(const char *, CFTimeInterval)", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
    }
    else
    {
      if (*(unsigned char *)(a1 + 160) != 83) {
        a3 = *(double *)(a1 + 96);
      }
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B2480);
      }
      BOOL v8 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
      {
        int v9 = *(char *)(a1 + 160);
        *(_DWORD *)buf = 134349570;
        double v12 = a3;
        __int16 v13 = 2082;
        uint64_t v14 = a2;
        __int16 v15 = 1026;
        int v16 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "@GtsTimer, nextfire, %{public}.0f, %{public}s, state, %{public}c", buf, 0x1Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022B2480);
        }
        __int16 v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileSyncManager::setManifestFire(const char *, CFTimeInterval)", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
      *(void *)(a1 + 112) = a2;
      [*(id *)(a1 + 104) setNextFireDelay:a3];
    }
  }
}

uint64_t sub_100430770(uint64_t a1)
{
  *(void *)a1 = off_1022B23D0;
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022B2480);
  }
  id v2 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "@GtsMgr, dtor", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLTileSyncManager::~CLTileSyncManager()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  sub_1004309A4((id *)a1);

  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;

  *(void *)buf = a1 + 168;
  sub_10014FEE0((void ***)buf);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 152);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  uint64_t v4 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

void sub_100430998(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_1004309A4(id *a1)
{
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022B2480);
  }
  id v2 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "@GtsMgr, release", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileSyncManager::csRelease()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }

  a1[1] = 0;
  a1[2] = 0;

  a1[3] = 0;
}

void sub_100430B60(uint64_t a1)
{
  sub_100430770(a1);

  operator delete();
}

void sub_100430B98(uint64_t a1)
{
  id v5 = 0;
  [*(id *)(a1 + 8) resume:&v5];
  if (v5)
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    uint64_t v1 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
    {
      id v2 = [[objc_msgSend(v5, "localizedDescription") UTF8String];
      *(_DWORD *)buf = 136446210;
      id v9 = v2;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "@GtsSync, CsError, 1, resume, %{public}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B2480);
      }
      id v3 = [[objc_msgSend(v5, "localizedDescription") UTF8String];
      int v6 = 136446210;
      id v7 = v3;
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileSyncManager::csResume()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

id sub_100430D6C(uint64_t a1, void *a2)
{
  if ([a2 count])
  {
    id v4 = [a2 objectForKey:@"kSYDictionaryObjectSyncIDKey"];
    id v5 = [a2 objectForKey:@"kCLTileSyncControlRequest"];
    if ([v4 isEqualToString:@"Control"]
      && [v5 isEqualToString:@"Request"])
    {
      sub_1004303D0(a1, (uint64_t)"GizmoReq", 30.0);
    }
    else
    {
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B2480);
      }
      int v6 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)double v26 = [v4 UTF8String];
        *(_WORD *)&v26[8] = 2082;
        *(void *)&v26[10] = [v5 UTF8String];
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "@GtsMgr, Mismatching keys, syncId, %{public}s, request, %{public}s", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022B2480);
        }
        [v4 UTF8String];
        [v5 UTF8String];
        uint64_t v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "NSDictionary *CLTileSyncManager::handleStartSessionCompanion(NSDictionary *)", "%s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
      }
    }
    if (*(unsigned char *)(a1 + 192) == 88) {
      goto LABEL_35;
    }
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    id v7 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
    {
      int v8 = *(char *)(a1 + 192);
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)double v26 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "@GtsMgr, Crossing sessions, %{public}c, #CloneMe", buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_35;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 == -1)
    {
LABEL_51:
      int v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "NSDictionary *CLTileSyncManager::handleStartSessionCompanion(NSDictionary *)", "%s\n", v24);
      if (v24 != (char *)buf) {
        free(v24);
      }
LABEL_35:
      id v10 = 0;
      goto LABEL_36;
    }
LABEL_53:
    dispatch_once(&qword_1024193B0, &stru_1022B2480);
    goto LABEL_51;
  }
  int v9 = *(unsigned __int8 *)(a1 + 192);
  if (v9 == 84)
  {
    sub_1004315FC(a1, 1);
    id v10 = [[objc_msgSend(*(id *)(a1 + 24), "properties") objectForKey:@"kCLTileSyncControlManifestDict"];
    goto LABEL_36;
  }
  if (v9 != 77)
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    __int16 v13 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = *(char *)(a1 + 192);
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)double v26 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "@GtsMgr, Unexpected Companion startSession flow, type, %{public}c, #CloneMe", buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_35;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 == -1) {
      goto LABEL_51;
    }
    goto LABEL_53;
  }
  id v10 = [[objc_msgSend(*(id *)(a1 + 24), "properties") objectForKey:@"kCLTileSyncControlManifestDict"];
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022B2480);
  }
  BOOL v11 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349056;
    *(void *)double v26 = [v10 count];
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "@GtsManif, CompTx, %{public}ld", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    [v10 count];
    double v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "NSDictionary *CLTileSyncManager::handleStartSessionCompanion(NSDictionary *)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
LABEL_36:
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022B2480);
  }
  __int16 v15 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    int v16 = *(char *)(a1 + 192);
    id v17 = [a2 count];
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 4);
    id v19 = [v10 count];
    *(_DWORD *)buf = 67240960;
    *(_DWORD *)double v26 = v16;
    *(_WORD *)&v26[4] = 2050;
    *(void *)&v26[6] = v17;
    *(_WORD *)&v26[14] = 2050;
    *(void *)&v26[16] = v18;
    __int16 v27 = 2050;
    id v28 = v19;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "@GtsSync, CsService, startSession, %{public}c, mdin, %{public}ld, queue, %{public}ld, mdout, %{public}ld", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    [a2 count];
    [v10 count];
    int v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "NSDictionary *CLTileSyncManager::handleStartSessionCompanion(NSDictionary *)", "%s\n", v22);
    if (v22 != (char *)buf) {
      free(v22);
    }
  }
  double v20 = (*(double (**)(void))(**(void **)(a1 + 56) + 32))(*(void *)(a1 + 56));
  sub_10042EE0C((double *)(a1 + 208), v20);
  return v10;
}

id sub_1004315FC(uint64_t a1, int a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48));
  id v4 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v5 = v3 + 184;
  uint64_t v6 = sub_1000D8908(v5);
  uint64_t v7 = sub_1000B894C(v5);
  if (v6 != v7)
  {
    int v8 = (void *)v7;
    do
    {
      *(_OWORD *)buf = *(_OWORD *)(v6 + 32);
      *(void *)&buf[16] = *(void *)(v6 + 48);
      if (*(char *)(v6 + 79) < 0)
      {
        sub_1000DC48C(&v50, *(void **)(v6 + 56), *(void *)(v6 + 64));
      }
      else
      {
        long long v50 = *(_OWORD *)(v6 + 56);
        uint64_t v51 = *(void *)(v6 + 72);
      }
      uint64_t v9 = sub_100144000(v5, (unsigned int *)buf);
      if (!a2
        || ((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 32))(*(void *)(a1 + 48), v9) & 1) != 0)
      {
        id v10 = +[NSNumber numberWithDouble:*(double *)(v9 + 176)];
        sub_100C0925C();
        BOOL v11 = v45 >= 0 ? __p : *(unsigned char **)__p;
        [v4 setObject:v10 forKey:[NSString stringWithUTF8String:v11]];
        if (SHIBYTE(v45) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (SHIBYTE(v51) < 0) {
        operator delete((void *)v50);
      }
      double v12 = *(void **)(v6 + 8);
      if (v12)
      {
        do
        {
          __int16 v13 = v12;
          double v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          __int16 v13 = *(void **)(v6 + 16);
          BOOL v14 = *v13 == v6;
          uint64_t v6 = (uint64_t)v13;
        }
        while (!v14);
      }
      uint64_t v6 = (uint64_t)v13;
    }
    while (v13 != v8);
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022B2480);
  }
  __int16 v15 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = *(void *)(a1 + 112);
    uint64_t v17 = sub_10014D19C(v5);
    unsigned int v18 = [v4 count];
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = v16;
    *(_WORD *)&buf[12] = 2050;
    *(void *)&buf[14] = v17;
    *(_WORD *)&buf[22] = 1024;
    LODWORD(v50) = v18;
    WORD2(v50) = 1026;
    *(_DWORD *)((char *)&v50 + 6) = a2;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "@GtsManif, PrepTx, %{public}s, tiles, %{public}lu, %d, currentOnly, %{public}d", buf, 0x22u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    uint64_t v32 = *(void *)(a1 + 112);
    uint64_t v33 = sub_10014D19C(v5);
    unsigned int v34 = [v4 count];
    *(_DWORD *)__p = 136446978;
    *(void *)&__p[4] = v32;
    __int16 v43 = 2050;
    uint64_t v44 = v33;
    __int16 v45 = 1024;
    unsigned int v46 = v34;
    __int16 v47 = 1026;
    int v48 = a2;
    BOOL v35 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileSyncManager::createManifestInSyChange(BOOL)", "%s\n", v35);
    if (v35 != buf) {
      free(v35);
    }
  }
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  id v19 = [v4 countByEnumeratingWithState:&v37 objects:v41 count:16];
  if (v19)
  {
    uint64_t v20 = *(void *)v38;
    do
    {
      int v21 = 0;
      do
      {
        if (*(void *)v38 != v20) {
          objc_enumerationMutation(v4);
        }
        int v22 = *(void **)(*((void *)&v37 + 1) + 8 * (void)v21);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022B2480);
        }
        uint64_t v23 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
        {
          id v24 = [v22 UTF8String];
          [objc_msgSend(v4, "objectForKeyedSubscript:", v22) doubleValue];
          *(_DWORD *)buf = 136380931;
          *(void *)&uint8_t buf[4] = v24;
          *(_WORD *)&buf[12] = 2050;
          *(void *)&buf[14] = v25;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "@GtsManif, entry, %{private}s, gentime, %{public}.1f", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022B2480);
          }
          id v26 = [v22 UTF8String];
          [objc_msgSend(v4, "objectForKeyedSubscript:", v22) doubleValue];
          *(_DWORD *)__p = 136380931;
          *(void *)&__p[4] = v26;
          __int16 v43 = 2050;
          uint64_t v44 = v27;
          id v28 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileSyncManager::createManifestInSyChange(BOOL)", "%s\n", v28);
          if (v28 != buf) {
            free(v28);
          }
        }
        int v21 = (char *)v21 + 1;
      }
      while (v19 != v21);
      id v29 = [v4 countByEnumeratingWithState:&v37 objects:v41 count:16];
      id v19 = v29;
    }
    while (v29);
  }
  __int16 v30 = +[NSDictionary dictionaryWithObjectsAndKeys:@"Control", @"kSYDictionaryObjectSyncIDKey", v4, @"kCLTileSyncControlManifestDict", 0];
  [*(id *)(a1 + 24) setObjectIdentifier:@"Control"];
  [*(id *)(a1 + 24) setChangeType:1];
  id result = [*(id *)(a1 + 24) setProperties:v30];
  *(unsigned char *)(a1 + 192) = 77;
  *(unsigned char *)(a1 + 200) = 1;
  return result;
}

void sub_100431C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a58 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100431CB8(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 192) != 77) {
    goto LABEL_52;
  }
  *(unsigned char *)(a1 + 192) = 65;
  *(unsigned char *)(a1 + 120) = 1;
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022B2480);
  }
  id v4 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [a2 count];
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 4);
    *(_DWORD *)buf = 134349312;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&buf[12] = 2050;
    *(void *)&buf[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "@GtsManif, CompRx, %{public}ld, queue, %{public}lu, metadata", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    id v56 = [a2 count];
    unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 4);
    *(_DWORD *)v81 = 134349312;
    *(void *)&v81[4] = v56;
    *(_WORD *)&v81[12] = 2050;
    *(void *)&v81[14] = v57;
    long long v58 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "std::tuple<BOOL, BOOL, BOOL> CLTileSyncManager::handleEnqueueChangesCompanion(NSDictionary *)", "%s\n", v58);
    if (v58 != buf) {
      free(v58);
    }
  }
  double v7 = (*(double (**)(void))(**(void **)(a1 + 56) + 32))(*(void *)(a1 + 56));
  sub_10042F058((double *)(a1 + 208), (int)[a2 count], v7);
  long long v73 = 0u;
  long long v74 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  id v8 = [a2 countByEnumeratingWithState:&v71 objects:v84 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v72;
    do
    {
      id v10 = 0;
      do
      {
        if (*(void *)v72 != v9) {
          objc_enumerationMutation(a2);
        }
        BOOL v11 = *(void **)(*((void *)&v71 + 1) + 8 * (void)v10);
        uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48));
        sub_100134750(buf, (char *)[v11 UTF8String]);
        sub_100C09258(v81, buf);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (sub_1001447B8((unsigned int *)v81))
        {
          uint64_t v13 = v12 + 184;
          BOOL v14 = sub_10013D858(v13, (unsigned int *)v81);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022B2480);
          }
          __int16 v15 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
          {
            id v16 = [v11 UTF8String];
            *(_DWORD *)buf = 136380931;
            *(void *)&uint8_t buf[4] = v16;
            *(_WORD *)&buf[12] = 1026;
            *(_DWORD *)&buf[14] = v14;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "@GtsManif, CompReply, %{private}s, have, %{public}d", buf, 0x12u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1022B2480);
            }
            id v23 = [v11 UTF8String];
            int v75 = 136380931;
            *(void *)v76 = v23;
            *(_WORD *)&v76[8] = 1026;
            *(_DWORD *)&v76[10] = v14;
            id v24 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "std::tuple<BOOL, BOOL, BOOL> CLTileSyncManager::handleEnqueueChangesCompanion(NSDictionary *)", "%s\n", v24);
            if (v24 != buf) {
              free(v24);
            }
          }
          if (v14)
          {
            uint64_t v17 = sub_100144000(v13, (unsigned int *)v81);
            sub_1004332DC(a1, v17);
          }
        }
        else
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022B2480);
          }
          unsigned int v18 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_ERROR))
          {
            id v19 = [v11 UTF8String];
            *(_DWORD *)buf = 136380675;
            *(void *)&uint8_t buf[4] = v19;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "@GtsManif, BadId, enqueueC, %{private}s, #CloneMe", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1022B2480);
            }
            id v21 = [v11 UTF8String];
            int v75 = 136380675;
            *(void *)v76 = v21;
            int v22 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "std::tuple<BOOL, BOOL, BOOL> CLTileSyncManager::handleEnqueueChangesCompanion(NSDictionary *)", "%s\n", v22);
            if (v22 != buf) {
              free(v22);
            }
          }
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_1022B24C0);
          }
          uint64_t v20 = qword_102419638;
          if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTileSyncManager.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 966;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = "false";
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "Assert Failed, %s, %d, %s", buf, 0x1Cu);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419630 != -1) {
              dispatch_once(&qword_102419630, &stru_1022B24C0);
            }
            int v75 = 136315650;
            *(void *)v76 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTileSyncManager.mm";
            *(_WORD *)&v76[8] = 1024;
            *(_DWORD *)&v76[10] = 966;
            __int16 v77 = 2080;
            v78 = "false";
            uint64_t v25 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "std::tuple<BOOL, BOOL, BOOL> CLTileSyncManager::handleEnqueueChangesCompanion(NSDictionary *)", "%s\n", v25);
            if (v25 != buf) {
              free(v25);
            }
          }
          sub_1004BA578();
        }
        if (SHIBYTE(v83) < 0) {
          operator delete((void *)__p);
        }
        id v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id v26 = [a2 countByEnumeratingWithState:&v71 objects:v84 count:16];
      id v8 = v26;
    }
    while (v26);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 4) >= 0x29)
  {
    [*(id *)(a1 + 8) setSessionStalenessInterval:300.0];
    int v27 = 1;
  }
  else
  {
LABEL_52:
    int v27 = 0;
  }
  if (![a2 count])
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    uint64_t v33 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "@GtsFlow, CS, metadataX, 3", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B2480);
      }
      *(_WORD *)v81 = 0;
      uint64_t v59 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "std::tuple<BOOL, BOOL, BOOL> CLTileSyncManager::handleEnqueueChangesCompanion(NSDictionary *)", "%s\n", v59);
      if (v59 != buf) {
        free(v59);
      }
    }
    goto LABEL_68;
  }
  unsigned int v28 = *(unsigned __int8 *)(a1 + 192);
  if (v28 > 0x51)
  {
    if (v28 == 84)
    {
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B2480);
      }
      uint64_t v44 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "@GtsFlow, CS, enqueueChanges, 3, SyncTrap", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022B2480);
        }
        *(_WORD *)v81 = 0;
        long long v65 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "std::tuple<BOOL, BOOL, BOOL> CLTileSyncManager::handleEnqueueChangesCompanion(NSDictionary *)", "%s\n", v65);
        if (v65 != buf) {
          free(v65);
        }
      }
      *(unsigned char *)(a1 + 192) = 77;
      goto LABEL_94;
    }
    if (v28 != 82) {
      goto LABEL_57;
    }
LABEL_71:
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    unsigned int v34 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      int v35 = *(char *)(a1 + 192);
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v35;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "@GtsFlow, CS, enqueueChanges, 3, Manifest, %{public}c", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B2480);
      }
      int v36 = *(char *)(a1 + 192);
      *(_DWORD *)v81 = 67240192;
      *(_DWORD *)&v81[4] = v36;
      long long v37 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "std::tuple<BOOL, BOOL, BOOL> CLTileSyncManager::handleEnqueueChangesCompanion(NSDictionary *)", "%s\n", v37);
      if (v37 != buf) {
        free(v37);
      }
    }
LABEL_94:
    int v31 = 1;
LABEL_95:
    int v32 = 1;
    goto LABEL_96;
  }
  if (v28 == 65)
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    long long v38 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      int v39 = *(char *)(a1 + 192);
      unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 4);
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = v39;
      *(_WORD *)&uint8_t buf[8] = 2050;
      *(void *)&buf[10] = v40;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "@GtsFlow, CS, enqueueChanges, 3, TileData, %{public}c, queue, %{public}ld", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B2480);
      }
      int v62 = *(char *)(a1 + 192);
      unint64_t v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 4);
      *(_DWORD *)v81 = 67240448;
      *(_DWORD *)&v81[4] = v62;
      *(_WORD *)&v81[8] = 2050;
      *(void *)&v81[10] = v63;
      unint64_t v64 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "std::tuple<BOOL, BOOL, BOOL> CLTileSyncManager::handleEnqueueChangesCompanion(NSDictionary *)", "%s\n", v64);
      if (v64 != buf) {
        free(v64);
      }
    }
    int v41 = *(long long **)(a1 + 168);
    if (*(long long **)(a1 + 176) != v41)
    {
      long long v42 = *v41;
      *(void *)&v81[16] = *((void *)v41 + 2);
      *(_OWORD *)v81 = v42;
      if (*((char *)v41 + 47) < 0)
      {
        sub_1000DC48C(&__p, *((void **)v41 + 3), *((void *)v41 + 4));
      }
      else
      {
        long long v43 = *(long long *)((char *)v41 + 24);
        uint64_t v83 = *((void *)v41 + 5);
        long long __p = v43;
      }
      sub_10043399C(a1, (uint64_t)v81);
      sub_100436800((uint64_t)buf, (long long *)(*(void *)(a1 + 168) + 48), *(long long **)(a1 + 176), *(void *)(a1 + 168));
      uint64_t v48 = v47;
      for (uint64_t i = *(void *)(a1 + 176); i != v48; i -= 48)
      {
        if (*(char *)(i - 1) < 0) {
          operator delete(*(void **)(i - 24));
        }
      }
      *(void *)(a1 + 176) = v48;
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B2480);
      }
      long long v50 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
      {
        int v51 = *(char *)(a1 + 192);
        double v52 = sub_10013DAC0((uint64_t)v81);
        double v53 = sub_10013DA9C((uint64_t)v81);
        unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 4);
        *(_DWORD *)buf = 67240961;
        *(_DWORD *)&uint8_t buf[4] = v51;
        *(_WORD *)&uint8_t buf[8] = 2049;
        *(double *)&buf[10] = v52;
        *(_WORD *)&buf[18] = 2049;
        *(double *)&buf[20] = v53;
        __int16 v86 = 2050;
        unint64_t v87 = v54;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_INFO, "@GtsSync, CsSession, %{public}c, llsw, %{private}.2lf, %{private}.2lf, queue, %{public}ld", buf, 0x26u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022B2480);
        }
        int v66 = *(char *)(a1 + 192);
        double v67 = sub_10013DAC0((uint64_t)v81);
        double v68 = sub_10013DA9C((uint64_t)v81);
        unint64_t v69 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 4);
        int v75 = 67240961;
        *(_DWORD *)v76 = v66;
        *(_WORD *)&v76[4] = 2049;
        *(double *)&v76[6] = v67;
        __int16 v77 = 2049;
        v78 = *(const char **)&v68;
        __int16 v79 = 2050;
        unint64_t v80 = v69;
        long long v70 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "std::tuple<BOOL, BOOL, BOOL> CLTileSyncManager::handleEnqueueChangesCompanion(NSDictionary *)", "%s\n", v70);
        if (v70 != buf) {
          free(v70);
        }
      }
      int v31 = *(void *)(a1 + 176) == *(void *)(a1 + 168);
      if (SHIBYTE(v83) < 0) {
        operator delete((void *)__p);
      }
      goto LABEL_95;
    }
LABEL_68:
    int v32 = 0;
    int v31 = 1;
    goto LABEL_96;
  }
  if (v28 == 77) {
    goto LABEL_71;
  }
LABEL_57:
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022B2480);
  }
  id v29 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
  {
    int v30 = *(char *)(a1 + 192);
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v30;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "@GtsFlow, CS, enqueueChanges, 3, Unexpected change type, %{public}c", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    int v60 = *(char *)(a1 + 192);
    *(_DWORD *)v81 = 67240192;
    *(_DWORD *)&v81[4] = v60;
    v61 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "std::tuple<BOOL, BOOL, BOOL> CLTileSyncManager::handleEnqueueChangesCompanion(NSDictionary *)", "%s\n", v61);
    if (v61 != buf) {
      free(v61);
    }
  }
  int v31 = 0;
  int v32 = 0;
LABEL_96:
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022B2480);
  }
  __int16 v45 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240704;
    *(_DWORD *)&uint8_t buf[4] = v32;
    *(_WORD *)&uint8_t buf[8] = 1026;
    *(_DWORD *)&buf[10] = v31;
    *(_WORD *)&buf[14] = 1026;
    *(_DWORD *)&buf[16] = v27;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, "@GtsSync, enqueue return, change, %{public}d, complete, %{public}d, large, %{public}d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    *(_DWORD *)v81 = 67240704;
    *(_DWORD *)&v81[4] = v32;
    *(_WORD *)&v81[8] = 1026;
    *(_DWORD *)&v81[10] = v31;
    *(_WORD *)&v81[14] = 1026;
    *(_DWORD *)&v81[16] = v27;
    long long v55 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "std::tuple<BOOL, BOOL, BOOL> CLTileSyncManager::handleEnqueueChangesCompanion(NSDictionary *)", "%s\n", v55);
    if (v55 != buf) {
      free(v55);
    }
  }
  return v32 | (v31 << 8) | (v27 << 16);
}

void sub_100433094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100433100()
{
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022B2480);
  }
  uint64_t v0 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240704;
    int v4 = 0;
    __int16 v5 = 1026;
    int v6 = 1;
    __int16 v7 = 1026;
    int v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "@GtsSync, enqueue return, change, %{public}d, complete, %{public}d, large, %{public}d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    id v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "std::tuple<BOOL, BOOL, BOOL> CLTileSyncManager::handleEnqueueChangesGizmo(NSDictionary *)", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
  return 256;
}

void sub_1004332DC(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56)))
  {
    int v4 = (long long *)(a2 + 48);
    if (!*(_DWORD *)(a2 + 48))
    {
      if ((*(unsigned char *)(a1 + 160) & 0xFE) == 0x4C)
      {
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022B2480);
        }
        __int16 v5 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
        {
          int v6 = *(char *)(a1 + 160);
          *(_DWORD *)buf = 67240192;
          LODWORD(v27) = v6;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "@GtsPair, skipevent, add, blocking sync state, %{public}c", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022B2480);
          }
          __int16 v7 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileSyncManager::addTileSync(CLTileFile *)", "%s\n", v7);
LABEL_44:
          if (v7 != (char *)buf) {
            free(v7);
          }
        }
      }
      else
      {
        int v8 = *(long long **)(a1 + 168);
        uint64_t v9 = *(long long **)(a1 + 176);
        if (v8 == v9)
        {
          uint64_t v10 = *(void *)(a1 + 168);
        }
        else
        {
          while ((sub_100C09930((uint64_t)v8, a2 + 48) & 1) == 0)
          {
            v8 += 3;
            if (v8 == v9)
            {
              int v8 = v9;
              break;
            }
          }
          uint64_t v10 = (uint64_t)v8;
          int v8 = *(long long **)(a1 + 176);
        }
        if ((long long *)v10 != v8)
        {
          sub_100436800((uint64_t)buf, (long long *)(v10 + 48), v8, v10);
          uint64_t v12 = v11;
          for (uint64_t i = *(void *)(a1 + 176); i != v12; i -= 48)
          {
            if (*(char *)(i - 1) < 0) {
              operator delete(*(void **)(i - 24));
            }
          }
          *(void *)(a1 + 176) = v12;
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022B2480);
          }
          BOOL v14 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
          {
            double v15 = sub_10013DAC0(a2 + 48);
            double v16 = sub_10013DA9C(a2 + 48);
            unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 4);
            *(_DWORD *)buf = 134284033;
            double v27 = v15;
            __int16 v28 = 2049;
            double v29 = v16;
            __int16 v30 = 2050;
            unint64_t v31 = v17;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "@GtsCont, replaceadd, llsw, %{private}.2lf, %{private}.2lf, size, %{public}ld", buf, 0x20u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1022B2480);
            }
            sub_10013DAC0(a2 + 48);
            sub_10013DA9C(a2 + 48);
            uint64_t v25 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileSyncManager::addTileSync(CLTileFile *)", "%s\n", v25);
            if (v25 != (char *)buf) {
              free(v25);
            }
          }
        }
        int v18 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 32))(*(void *)(a1 + 48), a2);
        if (v18)
        {
          sub_100435B18((uint64_t *)(a1 + 168), *(void *)(a1 + 168), (unint64_t)v4);
        }
        else
        {
          unint64_t v19 = *(void *)(a1 + 176);
          if (v19 >= *(void *)(a1 + 184))
          {
            uint64_t v20 = sub_10014F734((uint64_t *)(a1 + 168), v4);
          }
          else
          {
            sub_10014F6C0(a1 + 168, v4);
            uint64_t v20 = v19 + 48;
          }
          *(void *)(a1 + 176) = v20;
        }
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022B2480);
        }
        id v21 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
        {
          double v22 = sub_10013DAC0((uint64_t)v4);
          double v23 = sub_10013DA9C((uint64_t)v4);
          unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 4);
          *(_DWORD *)buf = 134284289;
          double v27 = v22;
          __int16 v28 = 2049;
          double v29 = v23;
          __int16 v30 = 2050;
          unint64_t v31 = v24;
          __int16 v32 = 1024;
          int v33 = v18;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "@GtsCont, add, llsw, %{private}.2lf, %{private}.2lf, size, %{public}ld, current, {public}%d", buf, 0x26u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022B2480);
          }
          sub_10013DAC0((uint64_t)v4);
          sub_10013DA9C((uint64_t)v4);
          __int16 v7 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileSyncManager::addTileSync(CLTileFile *)", "%s\n", v7);
          goto LABEL_44;
        }
      }
    }
  }
}

BOOL sub_10043399C(uint64_t a1, uint64_t a2)
{
  sub_1000E1294((uint64_t *)v43, (uint64_t)"sendEventToGizmo", 0);
  sub_1014526D0(*(void *)(a1 + 144), v42);
  if (v42[144])
  {
    *(void *)id v56 = 0;
    *(void *)&v56[8] = v56;
    *(void *)&v56[16] = 0x3812000000;
    unint64_t v57 = sub_1001778D8;
    long long v58 = sub_1001772DC;
    uint64_t v59 = 0;
    sub_101452E08(*(void *)(a1 + 144), a2, v60);
    uint64_t v4 = *(void *)(*(void *)&v56[8] + 48);
    BOOL v5 = v4 != 0;
    if (v4)
    {
      double v6 = (*(double (**)(void))(**(void **)(a1 + 56) + 32))(*(void *)(a1 + 56));
      double v7 = (*(double (**)(void))(**(void **)(a1 + 56) + 32))(*(void *)(a1 + 56));
      sub_10042F264(a1 + 208, *(_DWORD *)(*(void *)(*(void *)&v56[8] + 48) + 8) - **(_DWORD **)(*(void *)&v56[8] + 48), v7);
      id v8 = objc_alloc((Class)NSData);
      uint64_t v9 = *(uint64_t **)(*(void *)&v56[8] + 48);
      uint64_t v10 = *v9;
      uint64_t v11 = v9[1];
      uint64_t v12 = v11 - *v9;
      if (v11 == *v9) {
        sub_100273D6C();
      }
      v41[0] = _NSConcreteStackBlock;
      v41[1] = 3221225472;
      v41[2] = nullsub_185;
      v41[3] = &unk_1022B2438;
      v41[4] = v56;
      id v13 = [v8 initWithBytesNoCopy:v10 length:v12 deallocator:v41];
      sub_100C0925C();
      if (v64 >= 0) {
        BOOL v14 = __p;
      }
      else {
        BOOL v14 = *(unsigned char **)__p;
      }
      double v15 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14), @"kSYDictionaryObjectSyncIDKey", v13, @"kCLTileSyncObjectDataKey", +[NSNumber numberWithDouble:v6], @"kCLTileSyncObjectSyncTimestampKey", 0);
      if (SHIBYTE(v64) < 0) {
        operator delete(*(void **)__p);
      }
      double v16 = *(void **)(a1 + 24);
      sub_100C0925C();
      if (v64 >= 0) {
        unint64_t v17 = __p;
      }
      else {
        unint64_t v17 = *(unsigned char **)__p;
      }
      [v16 setObjectIdentifier:[NSString stringWithUTF8String:v17]];
      if (SHIBYTE(v64) < 0) {
        operator delete(*(void **)__p);
      }
      [*(id *)(a1 + 24) setChangeType:1];
      [*(id *)(a1 + 24) setProperties:v15];
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B2480);
      }
      int v18 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
      {
        double v19 = sub_10013DAC0(a2);
        double v20 = sub_10013DA9C(a2);
        int v21 = *(_DWORD *)(a2 + 4);
        int v22 = *(_DWORD *)(a2 + 8);
        uint64_t v23 = *(void *)(*(void *)(*(void *)&v56[8] + 48) + 8) - **(void **)(*(void *)&v56[8] + 48);
        unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 4);
        *(_DWORD *)long long __p = 134284801;
        *(double *)&__p[4] = v19;
        __int16 v62 = 2049;
        double v63 = v20;
        __int16 v64 = 1025;
        int v65 = v21;
        __int16 v66 = 1025;
        int v67 = v22;
        __int16 v68 = 2050;
        uint64_t v69 = v23;
        __int16 v70 = 2050;
        unint64_t v71 = v24;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "@GtsComp, add, llsw, %{private}.2lf, %{private}.2lf, tile_x, %{private}d, tile_y, %{private}d, tilesize, %{public}ld, queue, %{public}lu", __p, 0x36u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_33;
      }
      bzero(__p, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B2480);
      }
      double v25 = sub_10013DAC0(a2);
      double v26 = sub_10013DA9C(a2);
      int v27 = *(_DWORD *)(a2 + 4);
      int v28 = *(_DWORD *)(a2 + 8);
      uint64_t v29 = *(void *)(*(void *)(*(void *)&v56[8] + 48) + 8) - **(void **)(*(void *)&v56[8] + 48);
      unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 4);
      int v44 = 134284801;
      double v45 = v25;
      __int16 v46 = 2049;
      double v47 = v26;
      __int16 v48 = 1025;
      int v49 = v27;
      __int16 v50 = 1025;
      int v51 = v28;
      __int16 v52 = 2050;
      uint64_t v53 = v29;
      __int16 v54 = 2050;
      unint64_t v55 = v30;
      unint64_t v31 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileSyncManager::sendEventToGizmo(TileId &)", "%s\n", v31);
    }
    else
    {
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B2480);
      }
      int v35 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long __p = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "Unable to send #tile, it is missing", __p, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_33;
      }
      bzero(__p, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B2480);
      }
      LOWORD(v44) = 0;
      unint64_t v31 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLTileSyncManager::sendEventToGizmo(TileId &)", "%s\n", v31);
    }
    if (v31 != __p) {
      free(v31);
    }
LABEL_33:
    _Block_object_dispose(v56, 8);
    uint64_t v36 = v60[0];
    v60[0] = 0;
    if (v36) {
      sub_100436D2C((uint64_t)v60, v36);
    }
    goto LABEL_35;
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022B2480);
  }
  __int16 v32 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    double v33 = sub_10013DAC0(a2);
    double v34 = sub_10013DA9C(a2);
    *(_DWORD *)long long __p = 134283777;
    *(double *)&__p[4] = v33;
    __int16 v62 = 2049;
    double v63 = v34;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "@GtsCont, addlost, llsw, %{private}.2lf, %{private}.2lf", __p, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    double v38 = sub_10013DAC0(a2);
    double v39 = sub_10013DA9C(a2);
    *(_DWORD *)id v56 = 134283777;
    *(double *)&v56[4] = v38;
    *(_WORD *)&v56[12] = 2049;
    *(double *)&v56[14] = v39;
    unint64_t v40 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileSyncManager::sendEventToGizmo(TileId &)", "%s\n", v40);
    if (v40 != __p) {
      free(v40);
    }
  }
  BOOL v5 = 0;
LABEL_35:
  sub_1000E1098(v43);
  return v5;
}

void sub_1004341B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,id a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  _Block_object_dispose(&a49, 8);
  uint64_t v64 = a55;
  a55 = 0;
  if (v64) {
    sub_100436D2C(v62, v64);
  }
  sub_1000E1098(&a39);
  _Unwind_Resume(a1);
}

void sub_100434244(uint64_t a1, int *a2, void *a3, double *a4)
{
  if (*a2) {
    sub_101A5FC5C();
  }
  (*(void (**)(void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48));
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56)))
  {
    if (*a4 >= *(double *)(a1 + 72))
    {
      if (*a2)
      {
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022B2480);
        }
        double v15 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_ERROR))
        {
          int v16 = *a2;
          LODWORD(buf.__r_.__value_.__l.__data_) = 67240192;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "@GtsError, Adding non-Wifi tile, %{public}d, #CloneMe", (uint8_t *)&buf, 8u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022B2480);
          }
          int v17 = *a2;
          int v36 = 67240192;
          LODWORD(v37) = v17;
          id v13 = (std::string *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLTileSyncManager::addTile(const TileId &, NSData *, const CFAbsoluteTime &)", "%s\n", (const char *)v13);
          goto LABEL_29;
        }
      }
      else
      {
        sub_10127F01C(a2, (uint64_t)v34);
        uint64_t v18 = sub_100C0A028(a2);
        double v19 = (char *)v18;
        if (*(char *)(v18 + 23) >= 0) {
          size_t v20 = *(unsigned __int8 *)(v18 + 23);
        }
        else {
          size_t v20 = *(void *)(v18 + 8);
        }
        p_std::string buf = &buf;
        sub_1001110E4((uint64_t)&buf, v20 + 1);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        if (v20)
        {
          if (v19[23] >= 0) {
            int v22 = v19;
          }
          else {
            int v22 = *(char **)v19;
          }
          memmove(p_buf, v22, v20);
        }
        *(_WORD *)((char *)&p_buf->__r_.__value_.__l.__data_ + v20) = 47;
        if ((v35 & 0x80u) == 0) {
          uint64_t v23 = v34;
        }
        else {
          uint64_t v23 = (void **)v34[0];
        }
        if ((v35 & 0x80u) == 0) {
          std::string::size_type v24 = v35;
        }
        else {
          std::string::size_type v24 = (std::string::size_type)v34[1];
        }
        double v25 = std::string::append(&buf, (const std::string::value_type *)v23, v24);
        long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        int64_t v33 = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)long long __p = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (v33 >= 0) {
          int v27 = __p;
        }
        else {
          int v27 = (void **)__p[0];
        }
        if ([a3 writeToFile:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v27) atomically:1])sub_10127CD44(*(void *)(a1 + 144), *a4); {
        if (qword_1024193B0 != -1)
        }
          dispatch_once(&qword_1024193B0, &stru_1022B2480);
        int v28 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v29 = __p;
          if (v33 < 0) {
            uint64_t v29 = (void **)__p[0];
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "Failed writing tile to file, %{private}s", (uint8_t *)&buf, 0xCu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022B2480);
          }
          unint64_t v30 = __p;
          if (v33 < 0) {
            unint64_t v30 = (void **)__p[0];
          }
          int v36 = 136380675;
          double v37 = *(double *)&v30;
          unint64_t v31 = (std::string *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLTileSyncManager::addTile(const TileId &, NSData *, const CFAbsoluteTime &)", "%s\n", (const char *)v31);
          if (v31 != &buf) {
            free(v31);
          }
        }
        if (SHIBYTE(v33) < 0) {
          operator delete(__p[0]);
        }
        if ((char)v35 < 0) {
          operator delete(v34[0]);
        }
      }
    }
    else
    {
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B2480);
      }
      id v8 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
      {
        double v9 = *a4;
        std::string::size_type v10 = *(void *)(a1 + 72);
        LODWORD(buf.__r_.__value_.__l.__data_) = 134349312;
        *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v9;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "@GtsSync, drop older add, timestamp, %{public}0.1f, toggle/reset, %{public}0.1f", (uint8_t *)&buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022B2480);
        }
        double v11 = *a4;
        uint64_t v12 = *(void *)(a1 + 72);
        int v36 = 134349312;
        double v37 = v11;
        __int16 v38 = 2050;
        uint64_t v39 = v12;
        id v13 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileSyncManager::addTile(const TileId &, NSData *, const CFAbsoluteTime &)", "%s\n", (const char *)v13);
LABEL_29:
        if (v13 != &buf) {
          free(v13);
        }
      }
    }
  }
  else
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    BOOL v14 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "@GtsLock, drop add on LS off", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B2480);
      }
      LOWORD(v36) = 0;
      id v13 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileSyncManager::addTile(const TileId &, NSData *, const CFAbsoluteTime &)", "%s\n", (const char *)v13);
      goto LABEL_29;
    }
  }
}

void sub_100434E2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100434EA8(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56))) {
    sub_1004303D0(a1, (uint64_t)"Indexed", 1.0);
  }
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 24))(*(void *)(a1 + 56));
  if (result)
  {
    return sub_100434F54(a1);
  }
  return result;
}

uint64_t sub_100434F54(uint64_t result)
{
  if (*(unsigned char *)(result + 80))
  {
    uint64_t v1 = result;
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    id v2 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "@GtsGiz, reclearing", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B2480);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileSyncManager::handleFirstUnlockGizmo()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    *(unsigned char *)(v1 + 80) = 0;
    return (*(uint64_t (**)(void))(**(void **)(v1 + 48) + 40))(*(void *)(v1 + 48));
  }
  return result;
}

void sub_10043511C(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56)))
  {
    sub_100435188(a1);
  }
}

void sub_100435188(uint64_t a1)
{
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022B2480);
  }
  id v2 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 4);
    int v4 = *(_DWORD *)(a1 + 196);
    *(_DWORD *)std::string buf = 134349312;
    unint64_t v7 = v3;
    __int16 v8 = 1026;
    int v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "@GtsMgr, Nearby, queue, %{public}lu, sessionErrors, %{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    BOOL v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileSyncManager::handleNearbyCompanion()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  if (*(_DWORD *)(a1 + 196)) {
    sub_1004303D0(a1, (uint64_t)"Nearby", 1.0);
  }
}

void sub_1004353A0(uint64_t a1, int a2)
{
  *(double *)(a1 + 72) = (*(double (**)(void))(**(void **)(a1 + 56) + 32))(*(void *)(a1 + 56));
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56)))
  {
    id v4 = [*(id *)(a1 + 64) silo];
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    _DWORD v5[2] = sub_100435688;
    v5[3] = &unk_1022B2410;
    v5[4] = a1;
    int v6 = a2;
    [v4 async:v5];
  }
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 56) + 24))(*(void *)(a1 + 56))) {
    sub_1004354B8(a1, a2);
  }
}

void sub_1004354B8(uint64_t a1, int a2)
{
  char v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48));
  if (!a2 && (v4 & 1) == 0)
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    BOOL v5 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "@GtsGiz, reclear pending", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B2480);
      }
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileSyncManager::handleToggleResetGizmo(int)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    *(unsigned char *)(a1 + 80) = 1;
  }
}

void sub_100435688(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022B2480);
  }
  unint64_t v3 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    int v4 = *(_DWORD *)(a1 + 40);
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v2 + 176) - *(void *)(v2 + 168)) >> 4);
    *(_DWORD *)std::string buf = 67240448;
    int v8 = v4;
    __int16 v9 = 2050;
    unint64_t v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "@GtsCont, ToggleReset, %{public}d, queuewas, %{public}ld", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileSyncManager::handleToggleResetCompanion(int)_block_invoke", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  sub_10014FF34((uint64_t *)(v2 + 168));
}

void sub_100435890(uint64_t a1, uint64_t a2, double a3, double a4)
{
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 56) + 24))(*(void *)(a1 + 56)) & 1) == 0)
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    int v8 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 136446723;
      uint64_t v11 = a2;
      __int16 v12 = 2049;
      double v13 = a3;
      __int16 v14 = 2049;
      double v15 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "@GtsCont, %{public}s, llsw, %{private}.2lf, %{private}.2lf", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B2480);
      }
      __int16 v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLTileSyncManager::handleTileAdded(const char *, double, double)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    sub_1004303D0(a1, a2, 30.0);
  }
}

void sub_100435AB4(uint64_t a1, _DWORD *a2)
{
  unint64_t v3 = (unsigned int *)(a1 + 208);
  (*(void (**)(void))(**(void **)(a1 + 56) + 32))(*(void *)(a1 + 56));

  sub_10042F498(v3, a2, v4);
}

unint64_t sub_100435B18(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4 = a2;
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a2 - *a1) >> 4);
  unint64_t v11 = a1[2];
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = v11;
  if (v6 >= v11)
  {
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v7) >> 4) + 1;
    if (v13 > 0x555555555555555) {
      sub_1001D7FD4();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v7) >> 4);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v15 = 0x555555555555555;
    }
    else {
      unint64_t v15 = v13;
    }
    uint64_t v22 = v9;
    if (v15) {
      int v16 = (char *)sub_10014F86C(v9, v15);
    }
    else {
      int v16 = 0;
    }
    uint64_t v18 = v16;
    double v19 = &v16[48 * v8];
    size_t v20 = v19;
    int v21 = &v16[48 * v15];
    sub_100436918(&v18, (long long *)a3);
    unint64_t v4 = sub_100436AAC((uint64_t)a1, &v18, (long long *)v4);
    sub_10014FA14((uint64_t)&v18);
  }
  else if (a2 == v6)
  {
    sub_10014F6C0((uint64_t)a1, (long long *)a3);
  }
  else
  {
    sub_100436890((uint64_t)a1, a2, v6, a2 + 48);
    if (v4 <= a3) {
      a3 += 48 * (a1[1] > a3);
    }
    long long v12 = *(_OWORD *)a3;
    *(void *)(v4 + 16) = *(void *)(a3 + 16);
    *(_OWORD *)unint64_t v4 = v12;
    std::string::operator=((std::string *)(v7 + 48 * v8 + 24), (const std::string *)(a3 + 24));
  }
  return v4;
}

void sub_100435C94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10014FA14((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100435CA8(uint64_t a1, uint64_t a2)
{
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56)))
  {
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 56) + 48))(*(void *)(a1 + 56)))
    {
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B2480);
      }
      unint64_t v4 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "@GtsManif, skip, direct", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 == -1)
        {
LABEL_16:
          unint64_t v6 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLTileSyncManager::sendCompanionManifest(const char *)", "%s\n", v6);
          if (v6 != (char *)buf) {
            free(v6);
          }
          return;
        }
LABEL_58:
        dispatch_once(&qword_1024193B0, &stru_1022B2480);
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v22 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48));
      BOOL v7 = !(*(unsigned int (**)(void))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48))
        || *(unsigned char *)(a1 + 160) != 83
        || sub_10014D19C(v22 + 184) == 0;
      uint64_t v9 = *(void *)(a1 + 168);
      uint64_t v8 = *(void *)(a1 + 176);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B2480);
      }
      unint64_t v10 = &qword_102419000;
      unint64_t v11 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
      {
        int v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48)) ^ 1;
        int v13 = *(char *)(a1 + 160);
        uint64_t v14 = sub_10014D19C(v22 + 184);
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 4);
        *(_DWORD *)std::string buf = 136447234;
        uint64_t v24 = a2;
        __int16 v25 = 1026;
        BOOL v26 = v12;
        __int16 v27 = 1026;
        BOOL v28 = v13;
        unint64_t v10 = &qword_102419000;
        __int16 v29 = 2050;
        uint64_t v30 = v14;
        __int16 v31 = 2050;
        unint64_t v32 = v15;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "@GtsManif, check, %{public}s, state, %{public}d, %{public}c, %{public}lu, sync, %{public}lu", buf, 0x2Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022B2480);
        }
        (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48));
        sub_10014D19C(v22 + 184);
        double v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLTileSyncManager::sendCompanionManifest(const char *)", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
        unint64_t v10 = &qword_102419000;
      }
      int v16 = v8 != v9 || v7;
      if (v16 == 1)
      {
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022B2480);
        }
        int v17 = v10[119];
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 136446722;
          uint64_t v24 = a2;
          __int16 v25 = 1026;
          BOOL v26 = v7;
          __int16 v27 = 1026;
          BOOL v28 = v8 != v9;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "@GtsManif, skip, %{public}s, state, %{public}d, sync, %{public}d", buf, 0x18u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022B2480);
          }
          size_t v20 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLTileSyncManager::sendCompanionManifest(const char *)", "%s\n", v20);
          if (v20 != (char *)buf) {
            free(v20);
          }
        }
        if (v8 != v9) {
          sub_1004303D0(a1, (uint64_t)"Syncing", 30.0);
        }
      }
      else
      {
        sub_1004315FC(a1, 0);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022B2480);
        }
        uint64_t v18 = v10[119];
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "@GtsFlow, CS, setHasChanges, 1, SendManifest", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022B2480);
          }
          int v21 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLTileSyncManager::sendCompanionManifest(const char *)", "%s\n", v21);
          if (v21 != (char *)buf) {
            free(v21);
          }
        }
        [*(id *)(a1 + 8) setHasChangesAvailable];
      }
    }
  }
  else
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B2480);
    }
    unint64_t v5 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "@GtsManif, return, not companion", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 == -1) {
        goto LABEL_16;
      }
      goto LABEL_58;
    }
  }
}

void sub_100436558(id a1)
{
  qword_1024193B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

Class sub_100436588()
{
  if (qword_10247A9C8 != -1) {
    dispatch_once(&qword_10247A9C8, &stru_1022B24A0);
  }
  Class result = objc_getClass("SYDictionaryObject");
  qword_10247A9C0 = (uint64_t)result;
  off_10241AF18 = sub_1004365EC;
  return result;
}

uint64_t sub_1004365EC()
{
  return qword_10247A9C0;
}

void sub_1004365F8(id a1)
{
  qword_10247A9D0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CompanionSync.framework/CompanionSync", 2);
}

void sub_100436624(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

Class sub_100436654()
{
  if (qword_10247A9E0 != -1) {
    dispatch_once(&qword_10247A9E0, &stru_1022B24E0);
  }
  Class result = objc_getClass("PSYSyncCoordinator");
  qword_10247A9D8 = (uint64_t)result;
  off_10241B100 = sub_1004366B8;
  return result;
}

uint64_t sub_1004366B8()
{
  return qword_10247A9D8;
}

void sub_1004366C4(id a1)
{
  qword_10247A9E8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/PairedSync.framework/PairedSync", 2);
}

Class sub_1004366F0()
{
  if (qword_10247A9E0 != -1) {
    dispatch_once(&qword_10247A9E0, &stru_1022B24E0);
  }
  Class result = objc_getClass("PSYInitialSyncStateObserver");
  qword_10247A9F0 = (uint64_t)result;
  off_10241B108 = sub_100436754;
  return result;
}

uint64_t sub_100436754()
{
  return qword_10247A9F0;
}

Class sub_100436760()
{
  if (qword_10247A9C8 != -1) {
    dispatch_once(&qword_10247A9C8, &stru_1022B24A0);
  }
  Class result = objc_getClass("SYService");
  qword_10247A9F8 = (uint64_t)result;
  off_10241B110 = sub_1004367C4;
  return result;
}

uint64_t sub_1004367C4()
{
  return qword_10247A9F8;
}

void sub_1004367D0(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

long long *sub_100436800(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  unint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      long long v7 = *v5;
      *(void *)(a4 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a4 = v7;
      uint64_t v8 = (void **)(a4 + 24);
      if (*(char *)(a4 + 47) < 0) {
        operator delete(*v8);
      }
      long long v9 = *(long long *)((char *)v5 + 24);
      *(void *)(a4 + 40) = *((void *)v5 + 5);
      *(_OWORD *)uint64_t v8 = v9;
      *((unsigned char *)v5 + 47) = 0;
      *((unsigned char *)v5 + 24) = 0;
      a4 += 48;
      v5 += 3;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_100436890(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      long long v10 = *(_OWORD *)v9;
      *(void *)(v8 + 16) = *(void *)(v9 + 16);
      *(_OWORD *)uint64_t v8 = v10;
      long long v11 = *(_OWORD *)(v9 + 24);
      *(void *)(v8 + 40) = *(void *)(v9 + 40);
      *(_OWORD *)(v8 + 24) = v11;
      *(void *)(v9 + 32) = 0;
      *(void *)(v9 + 40) = 0;
      *(void *)(v9 + 24) = 0;
      v8 += 48;
      v9 += 48;
    }
    while (v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_100436B60((uint64_t)&v13, a2, v7, v6);
}

unsigned char *sub_100436918(void *a1, long long *a2)
{
  uint64_t v4 = a1[2];
  if (v4 == a1[3])
  {
    unint64_t v5 = (long long *)a1[1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == *a1) {
        unint64_t v10 = 1;
      }
      else {
        unint64_t v10 = 0x5555555555555556 * ((v4 - *a1) >> 4);
      }
      unint64_t v11 = v10 >> 2;
      uint64_t v12 = a1[4];
      uint64_t v30 = a1[4];
      char v13 = (char *)sub_10014F86C(v12, v10);
      unint64_t v15 = &v13[48 * v11];
      unint64_t v16 = a1[1];
      unint64_t v17 = a1[2] - v16;
      if (v17)
      {
        uint64_t v18 = &v15[v17];
        double v19 = &v13[48 * v11];
        do
        {
          long long v20 = *(_OWORD *)v16;
          *((void *)v19 + 2) = *(void *)(v16 + 16);
          *(_OWORD *)double v19 = v20;
          long long v21 = *(_OWORD *)(v16 + 24);
          *((void *)v19 + 5) = *(void *)(v16 + 40);
          *(_OWORD *)(v19 + 24) = v21;
          *(void *)(v16 + 32) = 0;
          *(void *)(v16 + 40) = 0;
          *(void *)(v16 + 24) = 0;
          v19 += 48;
          v16 += 48;
        }
        while (v19 != v18);
        int64x2_t v22 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        int64x2_t v22 = vdupq_n_s64(v16);
        uint64_t v18 = &v13[48 * v11];
      }
      uint64_t v27 = *a1;
      *a1 = v13;
      a1[1] = v15;
      int64x2_t v28 = v22;
      uint64_t v23 = a1[3];
      a1[2] = v18;
      a1[3] = &v13[48 * v14];
      uint64_t v29 = v23;
      sub_10014FA14((uint64_t)&v27);
      uint64_t v4 = a1[2];
    }
    else
    {
      int64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *a1) >> 4);
      if (v6 >= -1) {
        uint64_t v7 = v6 + 1;
      }
      else {
        uint64_t v7 = v6 + 2;
      }
      uint64_t v8 = -3 * (v7 >> 1);
      sub_100436800((uint64_t)&v27, v5, (long long *)v4, (uint64_t)&v5[-3 * (v7 >> 1)]);
      uint64_t v4 = v9;
      a1[1] += 16 * v8;
      a1[2] = v9;
    }
  }
  long long v24 = *a2;
  *(void *)(v4 + 16) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v4 = v24;
  Class result = (unsigned char *)(v4 + 24);
  if (*((char *)a2 + 47) < 0)
  {
    Class result = sub_1000DC48C(result, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v26 = *(long long *)((char *)a2 + 24);
    *(void *)(v4 + 40) = *((void *)a2 + 5);
    *(_OWORD *)Class result = v26;
  }
  a1[2] += 48;
  return result;
}

uint64_t sub_100436AAC(uint64_t a1, void *a2, long long *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1 + 16;
  sub_10014F92C(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(void *)a1, *(void *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_100436C04(v7, a3, *(long long **)(a1 + 8), a2[2]);
  uint64_t v9 = *(void *)a1;
  *(void *)a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = a2[2];
  a2[2] = v10;
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_100436B60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a3 + v7;
      uint64_t v9 = a4 + v7;
      long long v10 = *(_OWORD *)(a3 + v7 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 + v7 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      uint64_t v11 = (void **)(a4 + v7 - 24);
      if (*(char *)(a4 + v7 - 1) < 0) {
        operator delete(*v11);
      }
      long long v12 = *(_OWORD *)(v8 - 24);
      *(void *)(a4 + v7 - 8) = *(void *)(v8 - 8);
      *(_OWORD *)uint64_t v11 = v12;
      *(unsigned char *)(v8 - 1) = 0;
      *(unsigned char *)(v8 - 24) = 0;
      v7 -= 48;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t sub_100436C04(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v10 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  if (a2 != a3)
  {
    do
    {
      long long v5 = *a2;
      *(void *)(v4 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v4 = v5;
      long long v6 = *(long long *)((char *)a2 + 24);
      *(void *)(v4 + 40) = *((void *)a2 + 5);
      *(_OWORD *)(v4 + 24) = v6;
      *((void *)a2 + 4) = 0;
      *((void *)a2 + 5) = 0;
      *((void *)a2 + 3) = 0;
      v4 += 48;
      a2 += 3;
    }
    while (a2 != a3);
    uint64_t v11 = v4;
  }
  char v9 = 1;
  sub_100018344((uint64_t)v8);
  return v4;
}

void sub_100436C9C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 47) < 0) {
      operator delete(*(void **)(v1 + 24));
    }
    v1 += 48;
  }
}

void sub_100436CE4(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 48;
  }
}

void sub_100436D2C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v2;
      operator delete(v2);
    }
    operator delete();
  }
}

BOOL sub_100436D88()
{
  uint64_t v1 = qword_102419638;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

void sub_100436DA8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_100436E28()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_100436EB8(_Unwind_Exception *a1)
{
}

uint64_t sub_1004375EC(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v6 = 0;
        int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v11 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = 0;
        while (1)
        {
          uint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v17 = v16 + 1;
          if (v16 == -1 || v17 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v18 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17;
          v15 |= (unint64_t)(v18 & 0x7F) << v13;
          if ((v18 & 0x80) == 0) {
            goto LABEL_59;
          }
          v13 += 7;
          BOOL v10 = v14++ >= 9;
          if (v10)
          {
            LODWORD(v15) = 0;
            goto LABEL_61;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_59:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_61:
        uint64_t v42 = 8;
        goto LABEL_78;
      case 2u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v15 = 0;
        *(unsigned char *)(a1 + 32) |= 1u;
        while (2)
        {
          uint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v23 = v22 + 1;
          if (v22 == -1 || v23 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23;
            v15 |= (unint64_t)(v24 & 0x7F) << v20;
            if (v24 < 0)
            {
              v20 += 7;
              BOOL v10 = v21++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_65;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_65:
        uint64_t v42 = 12;
        goto LABEL_78;
      case 3u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v15 = 0;
        *(unsigned char *)(a1 + 32) |= 2u;
        while (2)
        {
          uint64_t v27 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v28 = v27 + 1;
          if (v27 == -1 || v28 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v29 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28;
            v15 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              BOOL v10 = v26++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_69;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_69:
        uint64_t v42 = 16;
        goto LABEL_78;
      case 4u:
        *(unsigned char *)(a1 + 32) |= 0x10u;
        unint64_t v30 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          int v31 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 4;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          int v31 = 0;
        }
        *(_DWORD *)(a1 + 28) = v31;
        continue;
      case 5u:
        char v32 = 0;
        unsigned int v33 = 0;
        uint64_t v15 = 0;
        *(unsigned char *)(a1 + 32) |= 4u;
        while (2)
        {
          uint64_t v34 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v35 = v34 + 1;
          if (v34 == -1 || v35 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v36 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v35;
            v15 |= (unint64_t)(v36 & 0x7F) << v32;
            if (v36 < 0)
            {
              v32 += 7;
              BOOL v10 = v33++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_73;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_73:
        uint64_t v42 = 20;
        goto LABEL_78;
      case 6u:
        char v37 = 0;
        unsigned int v38 = 0;
        uint64_t v15 = 0;
        *(unsigned char *)(a1 + 32) |= 8u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      uint64_t v39 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v40 = v39 + 1;
      if (v39 == -1 || v40 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v41 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v39);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v40;
      v15 |= (unint64_t)(v41 & 0x7F) << v37;
      if ((v41 & 0x80) == 0) {
        goto LABEL_75;
      }
      v37 += 7;
      BOOL v10 = v38++ >= 9;
      if (v10)
      {
        LODWORD(v15) = 0;
        goto LABEL_77;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_75:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v15) = 0;
    }
LABEL_77:
    uint64_t v42 = 24;
LABEL_78:
    *(_DWORD *)(a1 + v42) = v15;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_100438B14(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    char v4 = &selRef_endpoint;
    unsigned int v5 = &selRef_endpoint;
    unint64_t v6 = &selRef_endpoint;
    uint64_t v7 = &selRef_endpoint;
    unint64_t v8 = &selRef_endpoint;
    char v9 = &selRef_endpoint;
    BOOL v10 = &selRef_endpoint;
    int v11 = &selRef_endpoint;
    long long v12 = &selRef_endpoint;
    do
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        uint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v17 = v16 + 1;
        if (v16 == -1 || v17 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v18 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17;
        v15 |= (unint64_t)(v18 & 0x7F) << v13;
        if ((v18 & 0x80) == 0) {
          goto LABEL_12;
        }
        v13 += 7;
        BOOL v19 = v14++ >= 9;
        if (v19)
        {
          unint64_t v15 = 0;
          int v20 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
      int v20 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v15 = 0;
      }
LABEL_14:
      if (v20 || (v15 & 7) == 4) {
        break;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + *((int *)v4 + 913)) |= 0x100u;
          unint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v70 = *((int *)v5 + 914);
          goto LABEL_128;
        case 2u:
          *(_WORD *)(a1 + *((int *)v4 + 913)) |= 8u;
          unint64_t v30 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v70 = *((int *)v6 + 915);
          goto LABEL_128;
        case 3u:
          char v31 = 0;
          unsigned int v32 = 0;
          uint64_t v33 = 0;
          *(_WORD *)(a1 + *((int *)v4 + 913)) |= 0x1000u;
          while (2)
          {
            uint64_t v34 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v35 = v34 + 1;
            if (v34 == -1 || v35 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v36 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v35;
              v33 |= (unint64_t)(v36 & 0x7F) << v31;
              if (v36 < 0)
              {
                v31 += 7;
                BOOL v19 = v32++ >= 9;
                if (v19)
                {
                  LODWORD(v33) = 0;
                  goto LABEL_89;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v33) = 0;
          }
LABEL_89:
          uint64_t v67 = *((int *)v7 + 916);
          goto LABEL_107;
        case 4u:
          *(_WORD *)(a1 + *((int *)v4 + 913)) |= 1u;
          unint64_t v37 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v37 <= 0xFFFFFFFFFFFFFFF7 && v37 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v37);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v37 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v70 = *((int *)v8 + 917);
          goto LABEL_128;
        case 5u:
          *(_WORD *)(a1 + *((int *)v4 + 913)) |= 0x20u;
          unint64_t v38 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v38 <= 0xFFFFFFFFFFFFFFF7 && v38 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v38);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v38 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v70 = *((int *)v9 + 918);
          goto LABEL_128;
        case 6u:
          *(_WORD *)(a1 + *((int *)v4 + 913)) |= 0x40u;
          unint64_t v39 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v39 <= 0xFFFFFFFFFFFFFFF7 && v39 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v39);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v39 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v70 = *((int *)v10 + 919);
          goto LABEL_128;
        case 7u:
          *(_WORD *)(a1 + *((int *)v4 + 913)) |= 0x200u;
          unint64_t v40 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v40 <= 0xFFFFFFFFFFFFFFF7 && v40 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v40);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v40 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v70 = *((int *)v11 + 920);
          goto LABEL_128;
        case 8u:
          *(_WORD *)(a1 + *((int *)v4 + 913)) |= 0x10u;
          unint64_t v41 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v41 <= 0xFFFFFFFFFFFFFFF7 && v41 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v41);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v41 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v70 = *((int *)v12 + 921);
          goto LABEL_128;
        case 9u:
          char v42 = 0;
          unsigned int v43 = 0;
          uint64_t v33 = 0;
          *(_WORD *)(a1 + *((int *)v4 + 913)) |= 0x800u;
          while (2)
          {
            uint64_t v44 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v45 = v44 + 1;
            if (v44 == -1 || v45 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v46 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v44);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v45;
              v33 |= (unint64_t)(v46 & 0x7F) << v42;
              if (v46 < 0)
              {
                v42 += 7;
                BOOL v19 = v43++ >= 9;
                if (v19)
                {
                  LODWORD(v33) = 0;
                  goto LABEL_93;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v33) = 0;
          }
LABEL_93:
          uint64_t v67 = 92;
          goto LABEL_107;
        case 0xAu:
          char v47 = 0;
          unsigned int v48 = 0;
          uint64_t v49 = 0;
          *(_WORD *)(a1 + *((int *)v4 + 913)) |= 0x4000u;
          while (2)
          {
            uint64_t v50 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v51 = v50 + 1;
            if (v50 == -1 || v51 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v52 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v50);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v51;
              v49 |= (unint64_t)(v52 & 0x7F) << v47;
              if (v52 < 0)
              {
                v47 += 7;
                BOOL v19 = v48++ >= 9;
                if (v19)
                {
                  uint64_t v49 = 0;
                  goto LABEL_97;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v49 = 0;
          }
LABEL_97:
          BOOL v68 = v49 != 0;
          uint64_t v69 = 101;
          goto LABEL_102;
        case 0xBu:
          char v53 = 0;
          unsigned int v54 = 0;
          uint64_t v55 = 0;
          *(_WORD *)(a1 + *((int *)v4 + 913)) |= 0x2000u;
          while (2)
          {
            uint64_t v56 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v57 = v56 + 1;
            if (v56 == -1 || v57 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v58 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v56);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v57;
              v55 |= (unint64_t)(v58 & 0x7F) << v53;
              if (v58 < 0)
              {
                v53 += 7;
                BOOL v19 = v54++ >= 9;
                if (v19)
                {
                  uint64_t v55 = 0;
                  goto LABEL_101;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v55 = 0;
          }
LABEL_101:
          BOOL v68 = v55 != 0;
          uint64_t v69 = 100;
LABEL_102:
          *(unsigned char *)(a1 + v69) = v68;
          continue;
        case 0xCu:
          char v59 = 0;
          unsigned int v60 = 0;
          uint64_t v33 = 0;
          *(_WORD *)(a1 + *((int *)v4 + 913)) |= 0x400u;
          break;
        case 0xDu:
          *(_WORD *)(a1 + *((int *)v4 + 913)) |= 4u;
          unint64_t v64 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v64 <= 0xFFFFFFFFFFFFFFF7 && v64 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v64);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v64 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v70 = 24;
          goto LABEL_128;
        case 0xEu:
          *(_WORD *)(a1 + *((int *)v4 + 913)) |= 2u;
          unint64_t v65 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v65 <= 0xFFFFFFFFFFFFFFF7 && v65 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v65);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v65 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v70 = 16;
          goto LABEL_128;
        case 0xFu:
          *(_WORD *)(a1 + *((int *)v4 + 913)) |= 0x80u;
          unint64_t v66 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v66 <= 0xFFFFFFFFFFFFFFF7 && v66 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v66);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v66 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v70 = 64;
LABEL_128:
          *(void *)(a1 + v70) = v23;
          continue;
        default:
          char v24 = v5;
          char v25 = v6;
          unsigned int v26 = v7;
          uint64_t v27 = v4;
          unint64_t v28 = v8;
          uint64_t result = PBReaderSkipValueWithTag();
          unint64_t v8 = v28;
          char v4 = v27;
          char v9 = &selRef_endpoint;
          uint64_t v7 = v26;
          BOOL v10 = &selRef_endpoint;
          unint64_t v6 = v25;
          int v11 = &selRef_endpoint;
          unsigned int v5 = v24;
          long long v12 = &selRef_endpoint;
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v61 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v62 = v61 + 1;
        if (v61 == -1 || v62 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v63 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v61);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v62;
        v33 |= (unint64_t)(v63 & 0x7F) << v59;
        if ((v63 & 0x80) == 0) {
          goto LABEL_104;
        }
        v59 += 7;
        BOOL v19 = v60++ >= 9;
        if (v19)
        {
          LODWORD(v33) = 0;
          goto LABEL_106;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_104:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v33) = 0;
      }
LABEL_106:
      uint64_t v67 = 88;
LABEL_107:
      *(_DWORD *)(a1 + v67) = v33;
    }
    while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length));
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

double sub_10043A770(uint64_t a1)
{
  uint64_t v1 = sub_100EB0494(a1, 1);
  *(void *)uint64_t v1 = off_1022B2568;
  *(void *)(v1 + 96) = &_mh_execute_header;
  *(void *)(v1 + 104) = 26;
  *(_DWORD *)(v1 + 112) = 0;
  *(unsigned char *)(v1 + 120) = 0;
  *(unsigned char *)(v1 + 128) = 0;
  *(void *)(v1 + 136) = 0x7FF0000000000000;
  *(unsigned char *)(v1 + 144) = 0;
  *(void *)(v1 + 152) = 0;
  double result = 2.22507386e-308;
  *(_OWORD *)(v1 + 160) = xmmword_101D1EA10;
  *(unsigned char *)(v1 + 176) = 0;
  *(void *)(v1 + 184) = 0x10000000000000;
  *(_DWORD *)(v1 + 192) = 0;
  *(void *)(v1 + 200) = 0;
  *(unsigned char *)(v1 + 208) = 0;
  *(unsigned char *)(v1 + 216) = 0;
  return result;
}

void sub_10043A804(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 96) != a2)
  {
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B2610);
    }
    char v4 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(int *)(a1 + 96);
      v6[0] = 68289538;
      v6[1] = 0;
      __int16 v7 = 2082;
      unint64_t v8 = "";
      __int16 v9 = 2050;
      uint64_t v10 = a2;
      __int16 v11 = 2050;
      uint64_t v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Changing source state\", \"new state\":%{public, location:CLStreamingAwareLocationProviderLocalGPSStateMachine::LocationSourceState}lld, \"old state\":%{public, location:CLStreamingAwareLocationProviderLocalGPSStateMachine::LocationSourceState}lld}", (uint8_t *)v6, 0x26u);
    }
    *(_DWORD *)(a1 + 96) = a2;
    if (a2 != 1) {
      *(_DWORD *)(a1 + 100) = 1;
    }
  }
}

void sub_10043A928(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 96) != 1) {
    sub_101A5FE0C();
  }
  int v4 = *(_DWORD *)(a1 + 100);
  if (v4 != a2)
  {
    if (a2 != 1 || v4 != 2) {
      goto LABEL_27;
    }
    uint64_t v5 = *(int **)(a1 + 64);
    unint64_t v6 = *(int **)(a1 + 72);
    if (v5 == v6)
    {
      uint64_t v13 = 0;
      uint64_t v7 = 0;
      uint64_t v10 = 0;
      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v7 = 0;
      unint64_t v8 = *(int **)(a1 + 64);
      do
      {
        int v9 = *v8++;
        if (v9 == 3) {
          ++v7;
        }
      }
      while (v8 != v6);
      uint64_t v10 = 0;
      __int16 v11 = *(int **)(a1 + 64);
      do
      {
        int v12 = *v11++;
        if (v12 == 2) {
          ++v10;
        }
      }
      while (v11 != v6);
      uint64_t v13 = 0;
      unsigned int v14 = *(int **)(a1 + 64);
      do
      {
        int v15 = *v14++;
        if (v15 == 1) {
          ++v13;
        }
      }
      while (v14 != v6);
      uint64_t v16 = 0;
      do
      {
        if (!*v5++) {
          ++v16;
        }
      }
      while (v5 != v6);
    }
    if (v10 > 2 || v13 > 1 || v16 >= 2)
    {
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_1022B2610);
      }
      int v20 = qword_102419548;
      if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v21 = (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 2;
        *(_DWORD *)std::string buf = 134350848;
        *(void *)char v24 = v7;
        *(_WORD *)&v24[8] = 2050;
        *(void *)&v24[10] = v10;
        *(_WORD *)&v24[18] = 2050;
        *(void *)&v24[20] = 2;
        *(_WORD *)&v24[28] = 2050;
        *(void *)&v24[30] = v13;
        __int16 v25 = 2050;
        uint64_t v26 = 1;
        __int16 v27 = 2050;
        uint64_t v28 = v16;
        __int16 v29 = 2050;
        uint64_t v30 = 1;
        __int16 v31 = 2050;
        uint64_t v32 = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Will not change to remote compatible workout state due to companion not meeting availability criteria,ahq,%{public}ld,a,%{public}ld,thresh_a,%{public}ld,ua,%{public}ld,thresh_ua,%{public}ld,uk,%{public}ld,thresh_uk,%{public}ld,buffsize,%{public}zu", buf, 0x52u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419540 != -1) {
          dispatch_once(&qword_102419540, &stru_1022B2610);
        }
        unint64_t v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLStreamingAwareLocationProviderLocalGPSStateMachine::changeWorkoutState(WorkoutState)", "%s\n", v22);
        if (v22 != (char *)buf) {
          free(v22);
        }
      }
    }
    else
    {
LABEL_27:
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_1022B2610);
      }
      char v18 = qword_102419548;
      if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v19 = *(int *)(a1 + 100);
        *(_DWORD *)std::string buf = 68289538;
        *(_DWORD *)char v24 = 0;
        *(_WORD *)&v24[4] = 2082;
        *(void *)&v24[6] = "";
        *(_WORD *)&v24[14] = 2050;
        *(void *)&v24[16] = a2;
        *(_WORD *)&v24[24] = 2050;
        *(void *)&v24[26] = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Changing workout state\", \"new state\":%{public, location:CLStreamingAwareLocationProviderLocalGPSStateMachine::WorkoutState}lld, \"old state\":%{public, location:CLStreamingAwareLocationProviderLocalGPSStateMachine::WorkoutState}lld}", buf, 0x26u);
      }
      *(_DWORD *)(a1 + 100) = a2;
    }
  }
}

uint64_t sub_10043AD08(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 96);
  if ((v4 - 2) < 2)
  {
LABEL_11:
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B2610);
    }
    goto LABEL_13;
  }
  if (v4 == 1)
  {
    int v5 = sub_100EB0730(a1) ^ 1;
    if (a2) {
      goto LABEL_11;
    }
  }
  else
  {
    int v5 = 1;
    if (a2) {
      goto LABEL_11;
    }
  }
  if (!v5) {
    goto LABEL_11;
  }
  *(void *)(a1 + 184) = 0x10000000000000;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 160) = xmmword_101D1EA10;
  if (qword_102419540 != -1) {
    dispatch_once(&qword_102419540, &stru_1022B2610);
  }
  unint64_t v6 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
  {
    int v9 = 68289026;
    int v10 = 0;
    __int16 v11 = 2082;
    int v12 = "";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Clearing motion sample data\"}", (uint8_t *)&v9, 0x12u);
    goto LABEL_11;
  }
LABEL_13:
  uint64_t v7 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
  {
    int v9 = 68289282;
    int v10 = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 1026;
    int v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Setting motion alarm state\", \"enabled\":%{public}d}", (uint8_t *)&v9, 0x18u);
  }
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), a2);
}

void sub_10043AF00(uint64_t a1)
{
  if (qword_102419540 != -1) {
    dispatch_once(&qword_102419540, &stru_1022B2610);
  }
  uint64_t v2 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(int *)(a1 + 96);
    uint64_t v4 = *(int *)(a1 + 100);
    int v5 = *(unsigned __int8 *)(a1 + 144);
    *(void *)__int16 v13 = 68289794;
    *(_WORD *)&v13[8] = 2082;
    *(void *)&v13[10] = "";
    __int16 v14 = 2050;
    uint64_t v15 = v3;
    __int16 v16 = 2050;
    uint64_t v17 = v4;
    __int16 v18 = 1026;
    int v19 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Starting providers\", \"state\":%{public, location:CLStreamingAwareLocationProviderLocalGPSStateMachine::LocationSourceState}lld, \"workoutState\":%{public, location:CLStreamingAwareLocationProviderLocalGPSStateMachine::WorkoutState}lld, \"workoutForceGPSOn\":%{public}hhd}", v13, 0x2Cu);
  }
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)__int16 v13 = _Q0;
  *(_WORD *)&v13[16] = 0;
  uint64_t v15 = 0;
  switch(*(_DWORD *)(a1 + 96))
  {
    case 0:
      sub_100EB0C8C(a1, 0);
      goto LABEL_14;
    case 1:
      if (*(unsigned char *)(a1 + 144))
      {
        sub_100126168(a1, 0, (uint64_t)v13);
        v13[17] = 1;
        uint64_t v11 = 0;
        if (!sub_100EB0730(a1)) {
          goto LABEL_16;
        }
LABEL_12:
        sub_100126168(a1, 1, (uint64_t)v13);
LABEL_15:
        uint64_t v11 = 0;
        goto LABEL_16;
      }
      int v12 = *(_DWORD *)(a1 + 100);
      switch(v12)
      {
        case 0:
          sub_100126168(a1, 0, (uint64_t)v13);
          uint64_t v11 = 1;
          sub_100EB0C8C(a1, 1u);
LABEL_16:
          sub_10043AD08(a1, v11);
          return;
        case 1:
          sub_100EB0C8C(a1, 0);
          goto LABEL_24;
        case 2:
          sub_100126168(a1, 0, (uint64_t)v13);
LABEL_24:
          v13[17] = 1;
          goto LABEL_12;
      }
      return;
    case 2:
    case 4:
      sub_100126168(a1, 0, (uint64_t)v13);
      goto LABEL_12;
    case 3:
      sub_100EB0C8C(a1, 0);
      goto LABEL_12;
    case 5:
      sub_100126168(a1, 0, (uint64_t)v13);
LABEL_14:
      sub_100EB0C8C(a1, 1u);
      goto LABEL_15;
    default:
      return;
  }
}

void sub_10043B164(uint64_t a1, double a2)
{
  uint64_t v4 = *(int *)(a1 + 96);
  if (qword_102419540 != -1) {
    dispatch_once(&qword_102419540, &stru_1022B2610);
  }
  int v5 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
  {
    v7[0] = 68289282;
    v7[1] = 0;
    __int16 v8 = 2082;
    int v9 = "";
    __int16 v10 = 2050;
    uint64_t v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Determining state\", \"current state\":%{public, location:CLStreamingAwareLocationProviderLocalGPSStateMachine::LocationSourceState}lld}", (uint8_t *)v7, 0x1Cu);
  }
  uint64_t v6 = *(void *)(a1 + 104);
  if (v6 && v6 != 26) {
    sub_10043B298(a1, a2);
  }
  else {
    sub_10043B334(a1, a2);
  }
  sub_10043AF00(a1);
}

void sub_10043B298(uint64_t a1, double a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 16);
  if (!v4)
  {
LABEL_6:
    sub_10043B334(a1, a2);
    return;
  }
  while (1)
  {
    int v5 = *((_DWORD *)v4 + 7);
    if (v5 <= 0) {
      break;
    }
LABEL_5:
    uint64_t v4 = (uint64_t *)*v4;
    if (!v4) {
      goto LABEL_6;
    }
  }
  if (v5 < 0)
  {
    ++v4;
    goto LABEL_5;
  }
  sub_10043A804(a1, 1);

  sub_10043BF0C(a1, a2);
}

void sub_10043B334(uint64_t a1, double a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = *(uint64_t **)(a1 + 16);
  if (!v3)
  {
LABEL_16:
    int v10 = 0;
LABEL_24:
    sub_10043A804(a1, v10);
    return;
  }
  int v5 = *(uint64_t **)(a1 + 16);
  do
  {
    int v6 = *((_DWORD *)v5 + 7);
    if (v6 > 0) {
      goto LABEL_6;
    }
    if ((v6 & 0x80000000) == 0)
    {
      if (sub_100EB0730(a1))
      {
        int v14 = *(_DWORD *)(v2 + 112);
        if (v14 != 3)
        {
          if (v14 == 4) {
            goto LABEL_23;
          }
          if (!*(unsigned char *)(v2 + 128)
            || ((double v15 = a2 - *(double *)(v2 + 120), v15 >= 0.0) ? (v16 = v15 > 30.0) : (v16 = 1), v16))
          {
            int v18 = 1;
            int v19 = (unsigned int *)&v18;
            int v17 = *((_DWORD *)sub_100125FD0((uint64_t **)(v2 + 40), &v18, (uint64_t)&unk_101D0B290, &v19) + 8);
            uint64_t v12 = v2;
            if (v17 == 1) {
              int v13 = 2;
            }
            else {
              int v13 = 3;
            }
            goto LABEL_28;
          }
        }
        a1 = v2;
        int v10 = 4;
        goto LABEL_24;
      }
LABEL_23:
      a1 = v2;
      int v10 = 5;
      goto LABEL_24;
    }
    ++v5;
LABEL_6:
    int v5 = (uint64_t *)*v5;
  }
  while (v5);
  uint64_t v7 = *(uint64_t **)(a1 + 16);
  while (1)
  {
    int v8 = *((_DWORD *)v7 + 7);
    if (v8 <= 1) {
      break;
    }
LABEL_11:
    uint64_t v7 = (uint64_t *)*v7;
    if (!v7)
    {
      do
      {
        int v9 = *((_DWORD *)v3 + 7);
        if (v9 <= 2)
        {
          if (v9 == 2) {
            goto LABEL_17;
          }
          ++v3;
        }
        uint64_t v3 = (uint64_t *)*v3;
      }
      while (v3);
      goto LABEL_16;
    }
  }
  if (v8 != 1)
  {
    ++v7;
    goto LABEL_11;
  }
LABEL_17:
  if ((sub_100EB0730(a1) & 1) == 0) {
    goto LABEL_23;
  }
  int v18 = 0;
  int v19 = (unsigned int *)&v18;
  int v11 = *((_DWORD *)sub_100125FD0((uint64_t **)(v2 + 40), &v18, (uint64_t)&unk_101D0B290, &v19) + 8);
  uint64_t v12 = v2;
  if (v11 == 1) {
    int v13 = 4;
  }
  else {
    int v13 = 5;
  }
LABEL_28:
  sub_10043A804(v12, v13);
}

void sub_10043B4F0(uint64_t a1, unsigned int a2, unsigned int *a3, uint64_t a4, double a5)
{
  double v26 = a5;
  if (!sub_100EB0478(*a3)) {
    goto LABEL_39;
  }
  int v10 = *(_DWORD *)(a4 + 928);
  if ((*(_DWORD *)(a4 + 96) - 6) >= 3)
  {
    int v11 = *(_DWORD *)(a4 + 436);
    *(_DWORD *)(a1 + 112) = v11;
    if ((v11 - 3) <= 1)
    {
      if (v11 == 4)
      {
        *(double *)(a1 + 120) = a5;
        *(unsigned char *)(a1 + 128) = 1;
      }
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_1022B2610);
      }
      uint64_t v12 = qword_102419548;
      if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = *(_DWORD *)(a4 + 436);
        int v14 = *(_DWORD *)(a4 + 96);
        uint64_t v15 = *(void *)(a4 + 76);
        *(_DWORD *)std::string buf = 68290050;
        __int16 v28 = 2082;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v29 = "";
        __int16 v30 = 2050;
        uint64_t v31 = a2;
        __int16 v32 = 1026;
        *(_DWORD *)uint64_t v33 = v13;
        *(_WORD *)&v33[4] = 1026;
        *(_DWORD *)&v33[6] = v14;
        *(_WORD *)uint64_t v34 = 2050;
        *(void *)&v34[2] = v15;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#cltr,Received track notification\", \"source\":%{public, location:CLStreamingAwareLocationProviderStateMachine::LocationSource}lld, \"trackProximity\":%{public}d, \"type\":%{public}d, \"timestamp\":\"%{public}f\"}", buf, 0x32u);
      }
    }
  }
  int v16 = *(_DWORD *)(a1 + 96);
  if (v16 != 1)
  {
    if (v16 != 5)
    {
      if (v16 == 3 && a2 != 1) {
        return;
      }
LABEL_39:
      (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 32) + 8))(*(void *)(a1 + 32), *a3, a4);
      return;
    }
    goto LABEL_31;
  }
  if (a2)
  {
    BOOL v17 = a2 == 1;
    BOOL v18 = a2 != 1;
    if (a2 == 1 && v10)
    {
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_1022B2610);
      }
      int v19 = qword_102419548;
      if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
      {
        uint64_t v20 = (int)*a3;
        uint64_t v21 = *(unsigned int *)(a4 + 928);
        uint64_t v22 = *(void *)(a4 + 76);
        *(_DWORD *)std::string buf = 68290050;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v28 = 2082;
        __int16 v29 = "";
        __int16 v30 = 2050;
        uint64_t v31 = 1;
        __int16 v32 = 2050;
        *(void *)uint64_t v33 = v20;
        *(_WORD *)&v33[8] = 2050;
        *(void *)uint64_t v34 = v21;
        *(_WORD *)&v34[8] = 2050;
        uint64_t v35 = v22;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received motion rich location notification\", \"source\":%{public, location:CLStreamingAwareLocationProviderStateMachine::LocationSource}lld, \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld, \"motion data\":%{public, location:CLLocationProvider_Type::MotionDetected}lld, \"timestamp\":\"%{public}f\"}", buf, 0x3Au);
      }
      sub_10043B870(a1, (int *)(a4 + 928), (double *)(a4 + 76), &v26);
      BOOL v17 = 1;
    }
  }
  else
  {
    BOOL v17 = 0;
    *(double *)(a1 + 208) = a5;
    BOOL v18 = 1;
    *(unsigned char *)(a1 + 216) = 1;
  }
  int v23 = *(_DWORD *)(a1 + 100);
  if (v23 != 2)
  {
    if (v23 == 1)
    {
      if (!v17) {
        return;
      }
      goto LABEL_39;
    }
    if (v23) {
      goto LABEL_39;
    }
  }
  if (a2) {
    char v24 = v18;
  }
  else {
    char v24 = 1;
  }
  if (v24)
  {
LABEL_31:
    if (a2) {
      return;
    }
    goto LABEL_39;
  }
  if ((*(void *)(a1 + 104) | 8) != 0x1B)
  {
    int v25 = 0;
    *(void *)std::string buf = &v25;
    if (*((_DWORD *)sub_100125FD0((uint64_t **)(a1 + 40), &v25, (uint64_t)&unk_101D0B290, (unsigned int **)buf) + 8) != 3
      || !*(unsigned char *)(a1 + 216)
      || vabdd_f64(a5, *(double *)(a1 + 208)) >= 4.0)
    {
      goto LABEL_39;
    }
  }
}

uint64_t sub_10043B870(uint64_t a1, int *a2, double *a3, double *a4)
{
  int v6 = *a2;
  if (*a2 == *(_DWORD *)(a1 + 192))
  {
    double v7 = *(double *)(a1 + 184);
    if (v7 >= *a3) {
      double v7 = *a3;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 192) = v6;
    double v7 = *a3;
  }
  *(double *)(a1 + 184) = v7;
  double v8 = v7 + 30.0;
  if (v6 == 1) {
    double v7 = v7 + 15.0;
  }
  if (v6 == 2) {
    double v9 = v8;
  }
  else {
    double v9 = v7;
  }
  if (v9 <= *a4)
  {
    double v9 = INFINITY;
  }
  else
  {
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B2610);
    }
    int v10 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
    {
      double v11 = *a4;
      double v12 = v9 - *a4;
      *(_DWORD *)std::string buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v21 = 2082;
      uint64_t v22 = "";
      __int16 v23 = 2050;
      double v24 = v11;
      __int16 v25 = 2050;
      double v26 = v9;
      __int16 v27 = 2050;
      double v28 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Scheduling timer for motion confidence\", \"now_s\":\"%{public}.09f\", \"fire time_s\":\"%{public}.09f\", \"delta_s\":\"%{public}.09f\"}", buf, 0x30u);
    }
  }
  if (!*(void *)(a1 + 200))
  {
    (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 32) + 32))(buf);
    uint64_t v13 = *(void *)buf;
    *(void *)std::string buf = 0;
    uint64_t v14 = *(void *)(a1 + 200);
    *(void *)(a1 + 200) = v13;
    if (v14)
    {
      (*(void (**)(uint64_t))(*(void *)v14 + 40))(v14);
      uint64_t v15 = *(void *)buf;
      *(void *)std::string buf = 0;
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 40))(v15);
      }
    }
    uint64_t v16 = *(void *)(a1 + 200);
    v19[0] = off_1022B26D0;
    v19[1] = a1;
    v19[3] = v19;
    (*(void (**)(uint64_t, void *))(*(void *)v16 + 8))(v16, v19);
    sub_10043C994(v19);
  }
  uint64_t v17 = **(void **)(a1 + 200);
  if (v9 == INFINITY) {
    return (*(uint64_t (**)(void))(v17 + 24))();
  }
  (*(void (**)(double))v17)(v9);
  return (*(uint64_t (**)(void))(**(void **)(a1 + 200) + 16))(*(void *)(a1 + 200));
}

void sub_10043BB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10043BB88(uint64_t a1, uint64_t a2, double a3)
{
  unint64_t v4 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = a2;
  if (!a2 || a2 == 26)
  {
    int v5 = 0;
    *(void *)(a1 + 136) = 0x7FF0000000000000;
    goto LABEL_23;
  }
  if (v4 > 0x21) {
    goto LABEL_10;
  }
  if (((1 << v4) & 0x201028006) != 0)
  {
    int v6 = 0;
    goto LABEL_11;
  }
  if (((1 << v4) & 0x4000001) != 0) {
    goto LABEL_20;
  }
  if (((1 << v4) & 0x8080000) != 0) {
    int v6 = 1;
  }
  else {
LABEL_10:
  }
    int v6 = 2;
LABEL_11:
  int v7 = 0;
  if (a2 > 26)
  {
    if (a2 != 33)
    {
      if (a2 == 27) {
LABEL_15:
      }
        int v7 = 1;
      else {
LABEL_17:
      }
        int v7 = 2;
    }
  }
  else
  {
    switch(a2)
    {
      case 15:
      case 17:
      case 24:
        break;
      case 16:
      case 18:
      case 20:
      case 21:
      case 22:
      case 23:
        goto LABEL_17;
      case 19:
        goto LABEL_15;
      default:
        if ((unint64_t)(a2 - 1) >= 2) {
          goto LABEL_17;
        }
        break;
    }
  }
  if (v6 == v7)
  {
    int v5 = 0;
    goto LABEL_23;
  }
LABEL_20:
  *(double *)(a1 + 136) = a3;
  *(void *)(a1 + 72) = *(void *)(a1 + 64);
  if (*(unsigned char *)(a1 + 216)) {
    *(unsigned char *)(a1 + 216) = 0;
  }
  int v5 = 1;
LABEL_23:
  if (qword_102419540 != -1) {
    dispatch_once(&qword_102419540, &stru_1022B2610);
  }
  double v8 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 104);
    v10[0] = 68289538;
    v10[1] = 0;
    __int16 v11 = 2082;
    double v12 = "";
    __int16 v13 = 2050;
    uint64_t v14 = v9;
    __int16 v15 = 1026;
    int v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Workout change\", \"currentWorkout\":%{public}ld, \"workoutStarted\":%{public}hhd}", (uint8_t *)v10, 0x22u);
  }
}

double sub_10043BDC4(uint64_t a1, uint64_t a2)
{
  double result = *(double *)a2;
  uint64_t v3 = *(void *)(a2 + 208);
  *(void *)(a1 + 160) = *(void *)a2;
  *(void *)(a1 + 168) = v3;
  return result;
}

uint64_t sub_10043BDD4(uint64_t result, unsigned int a2, double a3)
{
  unsigned int v7 = a2;
  double v6 = a3;
  if (*(_DWORD *)(result + 96) == 1)
  {
    uint64_t v4 = result;
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B2610);
    }
    int v5 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2050;
      uint64_t v13 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Motion alarm fired\", \"detected motion\":%{public, location:CLLocationProvider_Type::MotionDetected}lld}", buf, 0x1Cu);
    }
    return sub_10043B870(v4, (int *)&v7, &v6, &v6);
  }
  return result;
}

void sub_10043BEF4(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 96);
  if (v1) {
    BOOL v2 = v1 == 3;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2) {
    sub_10043AF00(a1);
  }
}

uint64_t sub_10043BF0C(uint64_t a1, double a2)
{
  unint64_t v4 = *(void *)(a1 + 104);
  if (v4 > 0x21)
  {
LABEL_61:
    uint64_t v6 = 0;
    int v5 = 2;
    goto LABEL_4;
  }
  if (((1 << v4) & 0x201028006) == 0)
  {
    if (((1 << v4) & 0x8080000) != 0)
    {
      uint64_t v6 = 0;
      int v7 = 0;
      int v5 = 1;
      goto LABEL_7;
    }
    if (((1 << v4) & 0x4000001) != 0) {
      sub_101A5FF90();
    }
    goto LABEL_61;
  }
  int v5 = 0;
  uint64_t v6 = 1;
LABEL_4:
  int v7 = 1;
LABEL_7:
  if (!sub_100EB0730(a1) || *(_DWORD *)(a1 + 112) == 4)
  {
    int v8 = 0;
LABEL_10:
    int v9 = 1;
    goto LABEL_11;
  }
  if (v5 == 2)
  {
    int v9 = 0;
    uint64_t v6 = 0;
    int v8 = 1;
    goto LABEL_11;
  }
  if (v5 == 1)
  {
    int v8 = 0;
    uint64_t v6 = 0;
    goto LABEL_10;
  }
  int v12 = *(_DWORD *)(a1 + 192);
  if (v12 == 1)
  {
    if (a2 - *(double *)(a1 + 184) >= 15.0)
    {
      int v9 = 0;
      int v8 = 1;
      goto LABEL_64;
    }
    goto LABEL_63;
  }
  if (v12 != 2
    || a2 - *(double *)(a1 + 184) < 30.0
    || *(double *)(a1 + 160) + 15.0 <= a2
    || *(double *)(a1 + 168) <= 0.0)
  {
LABEL_63:
    int v8 = 0;
    int v9 = 0;
    goto LABEL_64;
  }
  int v8 = 0;
  int v9 = 1;
LABEL_64:
  if (qword_102419540 != -1) {
    dispatch_once(&qword_102419540, &stru_1022B2610);
  }
  uint64_t v22 = qword_102419548;
  uint64_t v6 = 1;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
  {
    uint64_t v23 = *(unsigned int *)(a1 + 192);
    uint64_t v24 = *(void *)(a1 + 184);
    *(_DWORD *)std::string buf = 68290306;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v30 = 2082;
    uint64_t v31 = "";
    __int16 v32 = 2050;
    uint64_t v33 = v23;
    __int16 v34 = 2050;
    uint64_t v35 = v24;
    __int16 v36 = 2050;
    double v37 = a2;
    __int16 v38 = 1026;
    int v39 = v8;
    __int16 v40 = 1026;
    int v41 = v9;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"In pedestrian workout, Motion compatible?\", \"remote motion\":%{public, location:CLLocationProvider_Type::MotionDetected}lld, \"sample time_s\":\"%{public}.09f\", \"now_s\":\"%{public}.09f\", \"prefer remote\":%{public}hhd, \"prefer local\":%{public}hhd}", buf, 0x3Cu);
  }
LABEL_11:
  if (*(unsigned __int8 *)(a1 + 176) != v6)
  {
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), v6);
    *(unsigned char *)(a1 + 176) = v6;
  }
  if ((v9 | v8) == 1) {
    sub_10043A928(a1, v9 ^ 1);
  }
  if (*(_DWORD *)(a1 + 100) == 1)
  {
    BOOL v10 = 1;
    if (*(_DWORD *)(a1 + 112) != 4)
    {
      if (*(unsigned char *)(a1 + 128))
      {
        double v11 = a2 - *(double *)(a1 + 120);
        BOOL v10 = v11 <= 30.0 && v11 >= 0.0;
      }
      else
      {
        BOOL v10 = 0;
      }
    }
    v27[0] = 1;
    *(void *)std::string buf = v27;
    if (*((_DWORD *)sub_100125FD0((uint64_t **)(a1 + 40), v27, (uint64_t)&unk_101D0B290, (unsigned int **)buf) + 8)
      && (int v26 = 1,
          *(void *)std::string buf = &v26,
          *((_DWORD *)sub_100125FD0((uint64_t **)(a1 + 40), &v26, (uint64_t)&unk_101D0B290, (unsigned int **)buf) + 8) != 3))
    {
      if (!v10)
      {
LABEL_44:
        sub_10043A928(a1, 2);
        goto LABEL_45;
      }
    }
    else if (!v10)
    {
      goto LABEL_45;
    }
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B2610);
    }
    uint64_t v13 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#cltr,user was recently on a track,changing WorkoutState to RemoteCompatibleButUnavailable", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_1022B2610);
      }
      LOWORD(v27[0]) = 0;
      __int16 v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStreamingAwareLocationProviderLocalGPSStateMachine::setWorkoutStateBasedOnMotionCompatibility(CFAbsoluteTime)", "%s\n", v25);
      if (v25 != (char *)buf) {
        free(v25);
      }
    }
    goto LABEL_44;
  }
  v27[0] = 1;
  *(void *)std::string buf = v27;
  if (*((_DWORD *)sub_100125FD0((uint64_t **)(a1 + 40), v27, (uint64_t)&unk_101D0B290, (unsigned int **)buf) + 8) == 3
    && *(_DWORD *)(a1 + 100) == 2
    && (v9 & 1) == 0)
  {
    sub_10043A928(a1, 1);
  }
LABEL_45:
  double v14 = vabdd_f64(*(double *)(a1 + 136), a2);
  if (v14 < 180.0) {
    int v15 = v7;
  }
  else {
    int v15 = 0;
  }
  *(unsigned char *)(a1 + 144) = v15;
  if (v14 <= 10.0) {
    *(void *)(a1 + 72) = *(void *)(a1 + 64);
  }
  if (!*(void *)(a1 + 152))
  {
    (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 32) + 32))(buf);
    uint64_t v16 = *(void *)buf;
    *(void *)std::string buf = 0;
    uint64_t v17 = *(void *)(a1 + 152);
    *(void *)(a1 + 152) = v16;
    if (v17)
    {
      (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
      uint64_t v18 = *(void *)buf;
      *(void *)std::string buf = 0;
      if (v18) {
        (*(void (**)(uint64_t))(*(void *)v18 + 40))(v18);
      }
    }
    uint64_t v19 = *(void *)(a1 + 152);
    v28[0] = off_1022B2640;
    v28[1] = a1;
    v28[3] = v28;
    (*(void (**)(uint64_t, void *))(*(void *)v19 + 8))(v19, v28);
    sub_10043C994(v28);
    int v15 = *(unsigned __int8 *)(a1 + 144);
  }
  uint64_t v20 = *(void *)(a1 + 152);
  if (!v15) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v20 + 24))(v20);
  }
  (**(void (***)(uint64_t, double))v20)(v20, *(double *)(a1 + 136) + 180.0);
  return (*(uint64_t (**)(void))(**(void **)(a1 + 152) + 16))(*(void *)(a1 + 152));
}

void sub_10043C600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10043C994((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10043C620(void *a1)
{
  sub_10043C690(a1);

  operator delete();
}

uint64_t sub_10043C658(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = a2;
  return result;
}

void sub_10043C660(id a1)
{
  qword_102419548 = (uint64_t)os_log_create("com.apple.locationd.Core", "Streaming");
}

uint64_t sub_10043C690(void *a1)
{
  *a1 = off_1022B2568;
  uint64_t v2 = a1[25];
  a1[25] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  uint64_t v3 = a1[19];
  a1[19] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }

  return sub_10043C740((uint64_t)a1);
}

uint64_t sub_10043C740(uint64_t a1)
{
  *(void *)a1 = off_1023004B0;
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
  sub_1000F5BB0(a1 + 40, *(void **)(a1 + 48));
  sub_1000F5BB0(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

void sub_10043C7AC()
{
}

void *sub_10043C7C0(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_1022B2640;
  result[1] = v3;
  return result;
}

uint64_t sub_10043C808(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022B2640;
  a2[1] = v2;
  return result;
}

uint64_t sub_10043C834(uint64_t a1, double *a2)
{
  double v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  if (qword_102419540 != -1) {
    dispatch_once(&qword_102419540, &stru_1022B2610);
  }
  unint64_t v4 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 68289026;
    v6[1] = 0;
    __int16 v7 = 2082;
    int v8 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Reconsidering forced GPS state\"}", (uint8_t *)v6, 0x12u);
  }
  return (*(uint64_t (**)(uint64_t, double))(*(void *)v3 + 96))(v3, v2);
}

uint64_t sub_10043C948(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10043C988()
{
}

void *sub_10043C994(void *a1)
{
  double v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10043CA1C()
{
}

void *sub_10043CA30(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_1022B26D0;
  result[1] = v3;
  return result;
}

uint64_t sub_10043CA78(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022B26D0;
  a2[1] = v2;
  return result;
}

uint64_t sub_10043CAA4(uint64_t a1, double *a2)
{
  double v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  if (qword_102419540 != -1) {
    dispatch_once(&qword_102419540, &stru_1022B2610);
  }
  unint64_t v4 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 68289026;
    v6[1] = 0;
    __int16 v7 = 2082;
    int v8 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Reconsidering motion compatibility\"}", (uint8_t *)v6, 0x12u);
  }
  return (*(uint64_t (**)(uint64_t, double))(*(void *)v3 + 96))(v3, v2);
}

uint64_t sub_10043CBB8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10043CBF8()
{
}

BOOL sub_10043CC04()
{
  int v1 = qword_102419548;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

void sub_10043CCD4(id a1)
{
  qword_10247AA00 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLHealthAssessmentNotifierSilo"];
}

uint64_t sub_10043D2B0(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100442130;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_10247AA20 != -1) {
    dispatch_once(&qword_10247AA20, block);
  }
  return qword_102489F60;
}

void sub_10043D87C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a26) {
    sub_1000DB0A0(a26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10043D89C(uint64_t result)
{
  if (!*(unsigned char *)(result + 109))
  {
    uint64_t v1 = result;
    if ((sub_1000A16E8() & 0x10000000) != 0)
    {
      unsigned __int8 v4 = 0;
      sub_100445AF8(&v4, &v5);
      long long v2 = v5;
      long long v5 = 0uLL;
      uint64_t v3 = *(std::__shared_weak_count **)(v1 + 168);
      *(_OWORD *)(v1 + 160) = v2;
      if (v3)
      {
        sub_1000DB0A0(v3);
        if (*((void *)&v5 + 1)) {
          sub_1000DB0A0(*((std::__shared_weak_count **)&v5 + 1));
        }
      }
      operator new();
    }
    sub_100871608();
  }
  return result;
}

void sub_10043DA48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  operator delete();
}

id sub_10043DA78(uint64_t a1)
{
  return _[*(id *)(a1 + 32) updateSensorRecorderQuery];
}

id sub_10043DA80(uint64_t a1)
{
  return [*(id *)(a1 + 32) aggregateRecords];
}

id sub_10043DFD4(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateSensorRecorderSubscription];
}

void sub_10043DFDC(uint64_t a1)
{
  if (qword_102419350 != -1) {
    dispatch_once(&qword_102419350, &stru_1022B28B0);
  }
  long long v2 = off_102419358;
  if (os_log_type_enabled((os_log_t)off_102419358, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67240448;
    LODWORD(v12[0]) = 100;
    WORD2(v12[0]) = 1026;
    *(_DWORD *)((char *)v12 + 6) = 100;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Subscribing to Sensor Recorder: Accel Rate %{public}d Gyro Rate %{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419350 != -1) {
      dispatch_once(&qword_102419350, &stru_1022B28B0);
    }
    __int16 v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLHealthAssessmentNotifierAdapter updateSensorRecorderSubscription]_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  if ((objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "sensorRecorder"), "setAccelSampleRate:", 100) & 1) == 0)
  {
    if (qword_102419350 != -1) {
      dispatch_once(&qword_102419350, &stru_1022B28B0);
    }
    uint64_t v3 = off_102419358;
    if (os_log_type_enabled((os_log_t)off_102419358, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 67240192;
      LODWORD(v12[0]) = 100;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Unable to set sample rate for accel to %{public}d.", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419350 != -1) {
        dispatch_once(&qword_102419350, &stru_1022B28B0);
      }
      int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLHealthAssessmentNotifierAdapter updateSensorRecorderSubscription]_block_invoke", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  if ((objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "sensorRecorder"), "setGyroSampleRate:", 100) & 1) == 0)
  {
    if (qword_102419350 != -1) {
      dispatch_once(&qword_102419350, &stru_1022B28B0);
    }
    unsigned __int8 v4 = off_102419358;
    if (os_log_type_enabled((os_log_t)off_102419358, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 67240192;
      LODWORD(v12[0]) = 100;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unable to set sample rate for gyro to %{public}d.", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419350 != -1) {
        dispatch_once(&qword_102419350, &stru_1022B28B0);
      }
      BOOL v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLHealthAssessmentNotifierAdapter updateSensorRecorderSubscription]_block_invoke", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  [objc_msgSend(*(id *)(a1 + 32), "fSensorRecorderSubscribeTimer") setNextFireDelay:43200.0];
  if (qword_102419350 != -1) {
    dispatch_once(&qword_102419350, &stru_1022B28B0);
  }
  long long v5 = off_102419358;
  if (os_log_type_enabled((os_log_t)off_102419358, OS_LOG_TYPE_INFO))
  {
    [objc_msgSend(*(id *)(a1 + 32), "fSensorRecorderSubscribeTimer") nextFireTime];
    *(_DWORD *)std::string buf = 134349056;
    v12[0] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "fSensorRecorderSubscribeTimer.nextFireTime, %{public}f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419350 != -1) {
      dispatch_once(&qword_102419350, &stru_1022B28B0);
    }
    [objc_msgSend(*(id *)(a1 + 32), "fSensorRecorderSubscribeTimer") nextFireTime];
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLHealthAssessmentNotifierAdapter updateSensorRecorderSubscription]_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
}

id sub_10043E650(uint64_t a1)
{
  [*(id *)(a1 + 32) processDataWithMaxDuration:3600.0 endTime:CFAbsoluteTimeGetCurrent()];
  id v2 = [*(id *)(a1 + 32) fSensorRecorderQueryTimer];

  return [v2 setNextFireDelay:300.0];
}

uint64_t sub_10043FF9C()
{
  int v5 = 0;
  uint64_t v0 = sub_1000A6958();
  sub_10013E418(v0, @"kMonitorKinesiasDBPushErrorCount", &v5);
  uint64_t v1 = sub_1000A6958();
  int v4 = v5 + 1;
  sub_1000EA2A4(v1, @"kMonitorKinesiasDBPushErrorCount", &v4);
  uint64_t v2 = *(void *)sub_1000A6958();
  return (*(uint64_t (**)(void))(v2 + 944))();
}

BOOL sub_100440038(void *a1, double *a2, CFAbsoluteTime *a3, double a4)
{
  if (qword_102419350 != -1) {
    dispatch_once(&qword_102419350, &stru_1022B28B0);
  }
  int v8 = &qword_102419000;
  int v9 = off_102419358;
  if (os_log_type_enabled((os_log_t)off_102419358, OS_LOG_TYPE_INFO))
  {
    double v10 = *a2;
    *(_DWORD *)std::string buf = 134349056;
    double v54 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Checking from %{public}.2f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419350 != -1) {
      dispatch_once(&qword_102419350, &stru_1022B28B0);
    }
    char v47 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLHealthAssessmentNotifier::getNextValidPeriod(CFAbsoluteTime *, CFAbsoluteTime *, NSTimeInterval)", "%s\n", v47);
    if (v47 != (char *)buf) {
      free(v47);
    }
  }
  uint64_t v11 = a1[28];
  if (!v11)
  {
LABEL_9:
    *a3 = CFAbsoluteTimeGetCurrent();
    if (qword_102419350 != -1) {
      dispatch_once(&qword_102419350, &stru_1022B28B0);
    }
    uint64_t v13 = off_102419358;
    if (os_log_type_enabled((os_log_t)off_102419358, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "No valid monitoring periods seen", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419350 != -1) {
      goto LABEL_105;
    }
    goto LABEL_90;
  }
  while (1)
  {
    unint64_t v12 = a1[27];
    if (*(double *)(*(void *)(a1[24] + ((v12 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v12 + 8) > *a2) {
      break;
    }
    a1[28] = v11 - 1;
    a1[27] = v12 + 1;
    sub_100096314((uint64_t)(a1 + 23), 1);
    uint64_t v11 = a1[28];
    if (!v11) {
      goto LABEL_9;
    }
  }
  if (qword_102419350 != -1) {
    dispatch_once(&qword_102419350, &stru_1022B28B0);
  }
  int v15 = off_102419358;
  if (os_log_type_enabled((os_log_t)off_102419358, OS_LOG_TYPE_INFO))
  {
    uint64_t v16 = (double *)(*(void *)(a1[24] + ((a1[27] >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * a1[27]);
    double v18 = *v16;
    double v17 = v16[1];
    *(_DWORD *)std::string buf = 134349312;
    double v54 = v18;
    __int16 v55 = 2050;
    CFAbsoluteTime v56 = v17;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Selecting monitoring period: %{public}f - %{public}f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419350 != -1) {
      dispatch_once(&qword_102419350, &stru_1022B28B0);
    }
    uint64_t v49 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLHealthAssessmentNotifier::getNextValidPeriod(CFAbsoluteTime *, CFAbsoluteTime *, NSTimeInterval)", "%s\n", v49);
    if (v49 != (char *)buf) {
      free(v49);
    }
  }
  uint64_t v19 = (CFAbsoluteTime *)(*(void *)(a1[24] + ((a1[27] >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * a1[27]);
  double v20 = *a2;
  if (*a2 < *v19) {
    double v20 = *v19;
  }
  *a2 = v20;
  *a3 = v19[1];
  uint64_t v21 = a1[30];
  if (a1[31] == v21
    || (unint64_t v22 = a1[33],
        uint64_t v23 = (void *)(v21 + 8 * (v22 >> 8)),
        uint64_t v24 = *v23 + 16 * v22,
        uint64_t v25 = *(void *)(v21 + (((a1[34] + v22) >> 5) & 0x7FFFFFFFFFFFFF8))
            + 16 * (*((unsigned char *)a1 + 272) + v22),
        v24 == v25))
  {
LABEL_66:
    BOOL v29 = 1;
    goto LABEL_67;
  }
  int v52 = 0;
  char v26 = 0;
  uint64_t v27 = (uint64_t)(a1 + 29);
  double v28 = (int64x2_t *)(a1 + 33);
  BOOL v29 = 1;
  while (1)
  {
    double v30 = *(double *)v24;
    if (*(double *)v24 >= *a3)
    {
LABEL_54:
      int v37 = 0;
      goto LABEL_57;
    }
    if (v26)
    {
      if (v30 < *a3 && *(unsigned char *)(v24 + 8) == 0) {
        goto LABEL_56;
      }
      if (qword_102419350 != -1) {
        dispatch_once(&qword_102419350, &stru_1022B28B0);
      }
      __int16 v32 = v8;
      uint64_t v33 = v8[107];
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "Found two consecutive onWrist events, skipping later one", buf, 2u);
      }
      int v8 = v32;
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419350 != -1) {
          dispatch_once(&qword_102419350, &stru_1022B28B0);
        }
        __int16 v36 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLHealthAssessmentNotifier::getNextValidPeriod(CFAbsoluteTime *, CFAbsoluteTime *, NSTimeInterval)", "%s\n", v36);
        if (v36 != (char *)buf) {
          free(v36);
        }
      }
      char v26 = 1;
      goto LABEL_46;
    }
    if (v30 > *a2) {
      break;
    }
    char v26 = 0;
    ++v52;
    int v34 = *(unsigned __int8 *)(v24 + 8);
LABEL_45:
    BOOL v29 = v34 != 0;
LABEL_46:
    v24 += 16;
    if (v24 - *v23 == 4096)
    {
      uint64_t v35 = v23[1];
      ++v23;
      uint64_t v24 = v35;
    }
    if (v24 == v25) {
      goto LABEL_54;
    }
  }
  if (*(unsigned char *)(v24 + 8))
  {
    if (!v29) {
      *a2 = v30;
    }
    int v34 = 1;
    char v26 = 1;
    goto LABEL_45;
  }
  if (!v29)
  {
    int v34 = 0;
    char v26 = 0;
    goto LABEL_45;
  }
  BOOL v29 = 1;
LABEL_56:
  *a3 = v30;
  int v37 = 1;
LABEL_57:
  if (v52 >= 2)
  {
    unsigned int v38 = v52 + 1;
    do
    {
      *double v28 = vaddq_s64(*v28, (int64x2_t)xmmword_101D0A740);
      sub_100096314(v27, 1);
      --v38;
    }
    while (v38 > 2);
  }
  if (v37)
  {
    if (qword_102419350 != -1) {
      dispatch_once(&qword_102419350, &stru_1022B28B0);
    }
    int v39 = v8[107];
    if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
    {
      double v40 = *a2;
      CFAbsoluteTime v41 = *a3;
      *(_DWORD *)std::string buf = 134349312;
      double v54 = v40;
      __int16 v55 = 2050;
      CFAbsoluteTime v56 = v41;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "Full on wrist period seen, %{public}0.f - %{public}0.f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419350 != -1) {
        dispatch_once(&qword_102419350, &stru_1022B28B0);
      }
      unint64_t v51 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLHealthAssessmentNotifier::getNextValidPeriod(CFAbsoluteTime *, CFAbsoluteTime *, NSTimeInterval)", "%s\n", v51);
      if (v51 != (char *)buf) {
        free(v51);
      }
    }
    goto LABEL_66;
  }
LABEL_67:
  double v42 = CFAbsoluteTimeGetCurrent() + -60.0;
  if (v42 >= *a3) {
    double v42 = *a3;
  }
  *a3 = v42;
  if (v42 > *a2 && v29)
  {
    if (*a2 + a4 < v42) {
      double v42 = *a2 + a4;
    }
    *a3 = v42;
    if (qword_102419350 != -1) {
      dispatch_once(&qword_102419350, &stru_1022B28B0);
    }
    unsigned int v43 = v8[107];
    if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
    {
      double v44 = *a2;
      CFAbsoluteTime v45 = *a3;
      *(_DWORD *)std::string buf = 134349312;
      double v54 = v44;
      __int16 v55 = 2050;
      CFAbsoluteTime v56 = v45;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "Valid period returned, %{public}0.f - %{public}0.f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419350 != -1) {
        dispatch_once(&qword_102419350, &stru_1022B28B0);
      }
      uint64_t v50 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLHealthAssessmentNotifier::getNextValidPeriod(CFAbsoluteTime *, CFAbsoluteTime *, NSTimeInterval)", "%s\n", v50);
      if (v50 != (char *)buf) {
        free(v50);
      }
    }
    return 1;
  }
  if (qword_102419350 != -1) {
    dispatch_once(&qword_102419350, &stru_1022B28B0);
  }
  char v46 = v8[107];
  if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "No valid on wrist periods seen", buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419350 == -1) {
      goto LABEL_90;
    }
LABEL_105:
    dispatch_once(&qword_102419350, &stru_1022B28B0);
LABEL_90:
    unsigned int v48 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLHealthAssessmentNotifier::getNextValidPeriod(CFAbsoluteTime *, CFAbsoluteTime *, NSTimeInterval)", "%s\n", v48);
    if (v48 != (char *)buf) {
      free(v48);
    }
    return 0;
  }
  return result;
}

void sub_100441258(uint64_t a1, void *a2, int a3)
{
  if (a3)
  {
    if (a3 == 1)
    {
      [objc_msgSend(a2, "objectForKeyedSubscript:", @"time") doubleValue];
      double v6 = v5;
      unsigned int v7 = [[a2 objectForKeyedSubscript:@"score"] intValue];
      [objc_msgSend(a2, "objectForKeyedSubscript:", @"likelihood") floatValue];
      [objc_msgSend(a2, "objectForKeyedSubscript:", @"strength") floatValue];
      unsigned int v8 = [[a2 objectForKeyedSubscript:@"tremorScore"] intValue];
      double v10 = *(double *)(a1 + 112);
      if (v10 == 0.0)
      {
        double v11 = (double)(uint64_t)(v6 / 60.0) * 60.0;
        if (v11 <= v10) {
          double v11 = v11 + 60.0;
        }
        *(_OWORD *)(a1 + 128) = 0u;
        *(_OWORD *)(a1 + 144) = 0u;
        double v12 = v11 + 60.0;
        *(double *)(a1 + 112) = v11;
        *(double *)(a1 + 120) = v11 + 60.0;
      }
      else
      {
        double v12 = *(double *)(a1 + 120);
      }
      if (v6 >= v12)
      {
        float32x4_t v16 = *(float32x4_t *)(a1 + 128);
        float v18 = *(float *)(a1 + 144);
        float v17 = *(float *)(a1 + 148);
        float v19 = *(float *)(a1 + 152);
        *(float *)v9.i32 = (float)((float)((float)((float)(COERCE_FLOAT(vaddq_f32(v16, (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)&v16, 3)).i32[2])+ v18)+ v17)+ v19)+ COERCE_FLOAT(HIDWORD(*(void *)(a1 + 128))))+ v16.f32[0];
        if (*(float *)v9.i32 >= 18.75)
        {
          *(float *)(a1 + 144) = v18 / *(float *)v9.i32;
          *(float *)(a1 + 148) = v17 / *(float *)v9.i32;
          *(float *)(a1 + 152) = v19 / *(float *)v9.i32;
          *(float32x4_t *)(a1 + 128) = vdivq_f32(v16, (float32x4_t)vdupq_lane_s32(v9, 0));
          if (sub_100082064(*(void *)(a1 + 160) + 72))
          {
            if (qword_102419350 != -1) {
              dispatch_once(&qword_102419350, &stru_1022B28B0);
            }
            unint64_t v22 = off_102419358;
            if (os_log_type_enabled((os_log_t)off_102419358, OS_LOG_TYPE_INFO))
            {
              double v23 = *(double *)(a1 + 120);
              *(_DWORD *)std::string buf = 134349056;
              double v33 = v23;
              _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "Persisting result for period ending %{public}f", buf, 0xCu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419350 != -1) {
                dispatch_once(&qword_102419350, &stru_1022B28B0);
              }
              BOOL v29 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLHealthAssessmentNotifier::resultReady(NSDictionary *, CLHealthAssessment_Types::DataType)", "%s\n", v29);
              if (v29 != (char *)buf) {
                free(v29);
              }
            }
            uint64_t v24 = 0;
          }
          else
          {
            if (qword_102419350 != -1) {
              dispatch_once(&qword_102419350, &stru_1022B28B0);
            }
            uint64_t v25 = off_102419358;
            if (os_log_type_enabled((os_log_t)off_102419358, OS_LOG_TYPE_ERROR))
            {
              double v26 = *(double *)(a1 + 112);
              uint64_t v27 = *(void *)(a1 + 120);
              *(_DWORD *)std::string buf = 134349312;
              double v33 = v26;
              __int16 v34 = 2050;
              uint64_t v35 = v27;
              _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "WARNING: DB not accessible, results for period from %{public}f to %{public}f may be lost.", buf, 0x16u);
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419350 != -1) {
                dispatch_once(&qword_102419350, &stru_1022B28B0);
              }
              double v30 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "void CLHealthAssessmentNotifier::resultReady(NSDictionary *, CLHealthAssessment_Types::DataType)", "%s\n", v30);
              if (v30 != (char *)buf) {
                free(v30);
              }
            }
            sub_10043FF9C();
            uint64_t v24 = 5;
          }
          sub_100442E88(*(void *)(a1 + 176), (double *)(a1 + 112));
          [*(id *)(a1 + 32) setLastProcessedTime:*(double *)(a1 + 120)];
          sub_1004429F8(a1, 2, v24, 1, *(double *)(a1 + 112), *(double *)(a1 + 120));
        }
        else
        {
          float v31 = *(float *)v9.i32;
          if (qword_102419350 != -1) {
            dispatch_once(&qword_102419350, &stru_1022B28B0);
          }
          double v20 = off_102419358;
          if (os_log_type_enabled((os_log_t)off_102419358, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)std::string buf = 134349312;
            double v33 = v31;
            __int16 v34 = 2050;
            uint64_t v35 = 0x4032C00000000000;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Skipping partially empty period, saw %{public}.1f of %{public}.1f epochs in period", buf, 0x16u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419350 != -1) {
              dispatch_once(&qword_102419350, &stru_1022B28B0);
            }
            uint64_t v21 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLHealthAssessmentNotifier::resultReady(NSDictionary *, CLHealthAssessment_Types::DataType)", "%s\n", v21);
            if (v21 != (char *)buf) {
              free(v21);
            }
          }
        }
        double v28 = (double)(uint64_t)(v6 / 60.0) * 60.0;
        if (v28 <= *(double *)(a1 + 112)) {
          double v28 = v28 + 60.0;
        }
        *(_OWORD *)(a1 + 128) = 0u;
        *(_OWORD *)(a1 + 144) = 0u;
        *(double *)(a1 + 112) = v28;
        *(double *)(a1 + 120) = v28 + 60.0;
      }
      switch(v8)
      {
        case 1u:
          *(float *)(a1 + 140) = *(float *)(a1 + 140) + 1.0;
          break;
        case 2u:
          *(float *)(a1 + 144) = *(float *)(a1 + 144) + 1.0;
          break;
        case 3u:
          *(float *)(a1 + 148) = *(float *)(a1 + 148) + 1.0;
          break;
        case 4u:
          *(float *)(a1 + 152) = *(float *)(a1 + 152) + 1.0;
          break;
        default:
          if (v7 == 1)
          {
            *(float *)(a1 + 132) = *(float *)(a1 + 132) + 1.0;
          }
          else if (v8)
          {
            *(float *)(a1 + 128) = *(float *)(a1 + 128) + 1.0;
          }
          else
          {
            *(float *)(a1 + 136) = *(float *)(a1 + 136) + 1.0;
          }
          break;
      }
    }
  }
  else
  {
    uint64_t v13 = +[NSNotificationCenter defaultCenter];
    double v14 = off_102476058;
    uint64_t v15 = *(void *)(a1 + 32);
    [(NSNotificationCenter *)v13 postNotificationName:v14 object:v15 userInfo:a2];
  }
}

BOOL sub_100441D1C(uint64_t a1)
{
  if (qword_102419350 != -1) {
    dispatch_once(&qword_102419350, &stru_1022B28B0);
  }
  uint64_t v2 = off_102419358;
  if (os_log_type_enabled((os_log_t)off_102419358, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Aggregating records for fParkinsonsResultPersistence", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419350 != -1) {
      dispatch_once(&qword_102419350, &stru_1022B28B0);
    }
    double v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLHealthAssessmentNotifier::aggregateRecords()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  sub_1004433C8(*(void *)(a1 + 176));
  double Current = CFAbsoluteTimeGetCurrent();
  [*(id *)(a1 + 32) monitorKinesiasExpiration];
  return Current < v4 + 604800.0;
}

void sub_1004420FC(id a1)
{
  if (sub_10010145C())
  {
    if ((sub_1000A16E8() & 0x200000000000) != 0) {
      byte_10247AA10 = 1;
    }
  }
}

void sub_100442130()
{
}

void sub_1004421C0()
{
}

uint64_t sub_1004421E4(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100442274;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_10247AA30 != -1) {
    dispatch_once(&qword_10247AA30, block);
  }
  return byte_10247AA28;
}

id sub_100442274(uint64_t a1)
{
  id result = [[objc_msgSend(*(id *)(a1 + 32), "vendor") isServiceEnabled:@"CLHealthAssessmentNotifier"];
  byte_10247AA28 = (char)result;
  return result;
}

uint64_t sub_1004422A4(uint64_t result)
{
  *(unsigned char *)(result + 108) = 1;
  return result;
}

uint64_t sub_1004422B0(uint64_t result)
{
  *(unsigned char *)(result + 108) = 1;
  return result;
}

uint64_t sub_1004422BC(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_1022B2900;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_10044234C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100442368(uint64_t a1)
{
  *(void *)a1 = off_1022B27A0;
  *(unsigned char *)(a1 + 108) = 1;
  uint64_t v2 = *(void *)(a1 + 280);
  *(void *)(a1 + 280) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_1000D80C4((void *)(a1 + 232));
  sub_1000D80C4((void *)(a1 + 184));
  sub_1003B273C((uint64_t *)(a1 + 176), 0);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 168);
  if (v3) {
    sub_1000DB0A0(v3);
  }

  return sub_100442418(a1);
}

uint64_t sub_100442418(uint64_t a1)
{
  *(void *)a1 = off_1022B2900;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1004424A0(uint64_t a1)
{
  sub_100442368(a1);

  operator delete();
}

void sub_1004424D8(void **a1, double a2)
{
  if (a2 >= 0.0)
  {
    unsigned int v8 = a1[2];
    uint64_t v6 = (uint64_t)(a1 + 2);
    unsigned int v7 = v8;
    unint64_t v9 = *(void *)(v6 - 8);
    if (v9 >= (unint64_t)v8)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)*a1) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14) {
        uint64_t v15 = (char *)sub_1000DA5D8(v6, v14);
      }
      else {
        uint64_t v15 = 0;
      }
      float32x4_t v16 = &v15[24 * v11];
      float v17 = &v15[24 * v14];
      *(double *)float32x4_t v16 = a2;
      *((void *)v16 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v16[16] = 0;
      double v10 = v16 + 24;
      float v19 = (char *)*a1;
      float v18 = (char *)a1[1];
      if (v18 != *a1)
      {
        do
        {
          long long v20 = *(_OWORD *)(v18 - 24);
          *(v16 - 8) = *(v18 - 8);
          *(_OWORD *)(v16 - 24) = v20;
          v16 -= 24;
          v18 -= 24;
        }
        while (v18 != v19);
        float v18 = (char *)*a1;
      }
      *a1 = v16;
      a1[1] = v10;
      a1[2] = v17;
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *(double *)unint64_t v9 = a2;
      *(void *)(v9 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(unsigned char *)(v9 + 16) = 0;
      double v10 = (char *)(v9 + 24);
    }
    a1[1] = v10;
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B2A20);
    }
    uint64_t v3 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134349056;
      double v22 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Programmer error, this expiration rule with time %{public}fis not valid.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B2A20);
      }
      double v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLActivityAggregator<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy>::setExpirationRule(CFTimeInterval) [T = ParkinsonsResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_100442790(uint64_t a1, _DWORD *a2, unsigned __int32 *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022B28D0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unsigned int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLHealthAssessmentNotifier::onWatchOrientationSettingsNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B28D0);
    }
    unint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      float v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLHealthAssessmentNotifier::onWatchOrientationSettingsNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100443980((void *)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10044294C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_10044296C(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100445C80(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

void sub_1004429F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  if (objc_opt_class()
    && (objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isHealthDataSubmissionAllowed") & 1) != 0)
  {
    id v12 = objc_alloc_init((Class)NSMutableDictionary);
    [v12 setObject:+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a2) forKeyedSubscript:@"dataBaseAccessType"];
    [v12 setObject:+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a3) forKeyedSubscript:@"errorType"];
    [v12 setObject:+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a4) forKeyedSubscript:@"recordsCount"];
    double Current = CFAbsoluteTimeGetCurrent();
    [*(id *)(a1 + 32) lastProcessedTime];
    uint64_t v15 = (int)fmax(Current - v14, 0.0);
    [v12 setObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)fmax(Current - a5, 0.0))] forKeyedSubscript:@"relativeQueryStartTime"];
    [v12 setObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)fmax(Current - a6, 0.0))] forKeyedSubscript:@"relativeQueryEndTime"];
    [v12 setObject:+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v15) forKeyedSubscript:@"timeSinceLastProcessed"];
    [v12 setObject:+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(void *)(a1 + 160) + 132)) forKeyedSubscript:@"databaseSize"];
    [v12 setObject:-[NSUUID UUIDString](+[NSUUID UUID](NSUUID, "UUID"), "UUIDString") forKeyedSubscript:@"uuid"];
    if (qword_102419350 != -1) {
      dispatch_once(&qword_102419350, &stru_1022B28B0);
    }
    __int16 v16 = off_102419358;
    if (os_log_type_enabled((os_log_t)off_102419358, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 138543362;
      id v21 = v12;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Sending metrics to CoreAnalytics:%{public}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419350 != -1) {
        dispatch_once(&qword_102419350, &stru_1022B28B0);
      }
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLHealthAssessmentNotifier::logDBAccessAnalytics(DataBaseAccessType, ErrorType, int, CFAbsoluteTime, CFAbsoluteTime) const", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    AnalyticsSendEvent();
  }
  else
  {
    if (qword_102419350 != -1) {
      dispatch_once(&qword_102419350, &stru_1022B28B0);
    }
    float v17 = off_102419358;
    if (os_log_type_enabled((os_log_t)off_102419358, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Not sending analytics, no IHA permission", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419350 != -1) {
        dispatch_once(&qword_102419350, &stru_1022B28B0);
      }
      __int16 v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLHealthAssessmentNotifier::logDBAccessAnalytics(DataBaseAccessType, ErrorType, int, CFAbsoluteTime, CFAbsoluteTime) const", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
  }
}

uint64_t sub_100442E88(uint64_t a1, double *a2)
{
  uint64_t result = sub_100445F98(*(void *)(a1 + 24), a2);
  if (!*(unsigned char *)(a1 + 41))
  {
    uint64_t result = sub_100082064(*(void *)(a1 + 24) + 72);
    if (result)
    {
      *(unsigned char *)(a1 + 41) = 1;
      return sub_1004433C8(a1);
    }
  }
  return result;
}

void *sub_100442EF0@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

uint64_t sub_100442F6C(uint64_t a1, int a2, double a3)
{
  unint64_t v6 = sub_1000A16E8();
  if ((v6 & 0x10000000) == 0) {
    return (v6 >> 28) & 1;
  }
  double Current = CFAbsoluteTimeGetCurrent();
  double v8 = Current;
  if (a3 <= 0.0)
  {
    uint64_t v19 = *(void *)(a1 + 224);
    if (v19)
    {
      uint64_t v20 = *(void *)(*(void *)(a1 + 192)
                      + (((unint64_t)(v19 + *(void *)(a1 + 216) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
          + 16 * (v19 + *(unsigned char *)(a1 + 216) - 1);
      double v22 = *(double *)(v20 + 8);
      id v21 = (double *)(v20 + 8);
      if (v22 > Current) {
        double *v21 = Current;
      }
    }
    [*(id *)(a1 + 32) stopMonitoring];
    return (v6 >> 28) & 1;
  }
  double v9 = Current + a3;
  [*(id *)(a1 + 32) addMonitoringPeriodFrom:Current until:v9];
  uint64_t v10 = *(void *)(a1 + 224);
  if (v10)
  {
    uint64_t v11 = *(void *)(*(void *)(a1 + 192)
                    + (((unint64_t)(v10 + *(void *)(a1 + 216) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (v10 + *(unsigned char *)(a1 + 216) - 1);
    double v13 = *(double *)(v11 + 8);
    id v12 = (double *)(v11 + 8);
    if (v13 >= v8)
    {
      *id v12 = v9;
      if (qword_102419350 != -1) {
        dispatch_once(&qword_102419350, &stru_1022B28B0);
      }
      double v23 = off_102419358;
      if (os_log_type_enabled((os_log_t)off_102419358, OS_LOG_TYPE_INFO))
      {
        unint64_t v24 = *(void *)(a1 + 224) + *(void *)(a1 + 216) - 1;
        uint64_t v25 = (uint64_t *)(*(void *)(*(void *)(a1 + 192) + ((v24 >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * v24);
        uint64_t v27 = *v25;
        uint64_t v26 = v25[1];
        *(_DWORD *)std::string buf = 134349312;
        *(void *)&uint8_t buf[4] = v27;
        *(_WORD *)&buf[12] = 2050;
        *(void *)&buf[14] = v26;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Extend existing monitoring period %{public}f - %{public}f", buf, 0x16u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_21;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419350 == -1) {
        goto LABEL_27;
      }
      goto LABEL_29;
    }
  }
  *(double *)std::string buf = v8;
  *(double *)&uint8_t buf[8] = v9;
  sub_10044296C((void *)(a1 + 184), (__n128 *)buf);
  if (qword_102419350 != -1) {
    dispatch_once(&qword_102419350, &stru_1022B28B0);
  }
  double v14 = off_102419358;
  if (os_log_type_enabled((os_log_t)off_102419358, OS_LOG_TYPE_INFO))
  {
    unint64_t v15 = *(void *)(a1 + 224) + *(void *)(a1 + 216) - 1;
    __int16 v16 = (uint64_t *)(*(void *)(*(void *)(a1 + 192) + ((v15 >> 5) & 0x7FFFFFFFFFFFFF8))
                    + 16 * v15);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    *(_DWORD *)std::string buf = 134349312;
    *(void *)&uint8_t buf[4] = v18;
    *(_WORD *)&buf[12] = 2050;
    *(void *)&buf[14] = v17;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Add new monitoring period %{public}f - %{public}f", buf, 0x16u);
  }
  if (!sub_10013D1A0(115, 2)) {
    goto LABEL_21;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102419350 != -1) {
LABEL_29:
  }
    dispatch_once(&qword_102419350, &stru_1022B28B0);
LABEL_27:
  BOOL v29 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLHealthAssessmentNotifier::recordHealthAssessmentData(CLHealthAssessment_Types::DataType, CFTimeInterval)", "%s\n", v29);
  if (v29 != buf) {
    free(v29);
  }
LABEL_21:
  [*(id *)(a1 + 32) setupService];
  if (!a2)
  {
LABEL_24:
    [*(id *)(a1 + 32) startUpdatesforAnalyzer:0];
    return (v6 >> 28) & 1;
  }
  if (a2 == 1)
  {
    [*(id *)(a1 + 32) startUpdatesforAnalyzer:1];
    goto LABEL_24;
  }
  return (v6 >> 28) & 1;
}

uint64_t sub_1004433C8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B2A20);
    }
    uint64_t v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v3 = sub_1000D3E50();
      int v4 = *(_DWORD *)(*(void *)(a1 + 24) + 132);
      *(_DWORD *)std::string buf = 134218240;
      *(double *)id v21 = v3;
      *(_WORD *)&v21[8] = 1024;
      int v22 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records start %f, count ~%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B2A20);
      }
      sub_1000D3E50();
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = ParkinsonsResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), a1);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B2A20);
    }
    unint64_t v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v7 = sub_1000D3E50();
      int v8 = *(_DWORD *)(*(void *)(a1 + 24) + 132);
      *(_DWORD *)std::string buf = 134218240;
      *(double *)id v21 = v7;
      *(_WORD *)&v21[8] = 1024;
      int v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Aggregating records stop %f, count ~%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B2A20);
      }
      sub_1000D3E50();
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = ParkinsonsResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    uint64_t v9 = *(void *)(a1 + 24);
    double v10 = (double)*(int *)(v9 + 132);
    if ((double)(int)sub_100446990(v9, (double **)a1) * 1.2 < v10)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B2A20);
      }
      uint64_t v11 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 24);
        int v13 = *(_DWORD *)(v12 + 132);
        int v14 = sub_100446990(v12, (double **)a1);
        *(_DWORD *)std::string buf = 67109376;
        *(_DWORD *)id v21 = v13;
        *(_WORD *)&v21[4] = 1024;
        *(_DWORD *)&v21[6] = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022B2A20);
        }
        sub_100446990(*(void *)(a1 + 24), (double **)a1);
        uint64_t v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = ParkinsonsResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
    }
    return v5;
  }
  else
  {
    __int16 v16 = *(uint64_t (**)(void))(**(void **)(a1 + 24) + 32);
    return v16();
  }
}

void sub_100443980(void *a1, uint64_t a2, _DWORD *a3, unsigned __int32 *a4)
{
  if (*a3 == 1)
  {
    if (qword_102419350 != -1) {
      dispatch_once(&qword_102419350, &stru_1022B28B0);
    }
    unint64_t v6 = off_102419358;
    if (os_log_type_enabled((os_log_t)off_102419358, OS_LOG_TYPE_INFO))
    {
      unsigned __int32 v7 = *a4;
      buf[0].n128_u32[0] = 67240192;
      buf[0].n128_u32[1] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Watch wrist state updated,onwrist,%{public}d", (uint8_t *)buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419350 != -1) {
        dispatch_once(&qword_102419350, &stru_1022B28B0);
      }
      int v14 = (__n128 *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLHealthAssessmentNotifier::onWatchOrientationSettingsNotification(int, const CLWatchOrientationSettingsNotifier_Type::Notification &, const CLWatchOrientationSettingsNotifier_Type::NotificationData &)", "%s\n", (const char *)v14);
      if (v14 != buf) {
        free(v14);
      }
    }
    double Current = CFAbsoluteTimeGetCurrent();
    int v9 = *a4 == 1;
    uint64_t v10 = a1[34];
    if (!v10
      || (uint64_t v11 = v10 - 1,
          unint64_t v12 = v11 + a1[33],
          uint64_t v13 = *(void *)(a1[30] + ((v12 >> 5) & 0x7FFFFFFFFFFFFF8)),
          *(unsigned __int8 *)(v13 + 16 * v12 + 8) != v9)
      && (*(double *)(v13 + 16 * (v11 + *((unsigned char *)a1 + 264))) + 60.0 <= Current
       || (a1[34] = v11, sub_100446B90(a1 + 29, 1), !a1[34])))
    {
      buf[0].n128_f64[0] = Current;
      buf[0].n128_u8[8] = v9;
      sub_100443BE4(a1 + 29, buf);
    }
  }
}

__n128 sub_100443BE4(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100446C00(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

void sub_100443C70(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        int v9 = (uint64_t *)v4;
      }
      else {
        int v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)std::string buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022B28D0);
      }
      uint64_t v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        uint64_t v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          uint64_t v11 = (void *)*v11;
        }
        *(_DWORD *)std::string buf = 136446466;
        uint64_t v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022B28D0);
        }
        unint64_t v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          unint64_t v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        unint64_t v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        uint64_t v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLHealthAssessmentNotifier_Type::Notification, NotificationData_T = CLHealthAssessmentNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_100443F00(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_100443FB4(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_100443FFC(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_100444044(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_10044408C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (!result)
  {
    int v3 = objc_alloc_init(CLNotifierServiceAdapter);
    *(void *)(a1 + 48) = v3;
    [(CLNotifierServiceAdapter *)v3 setValid:1];
    [*(id *)(a1 + 48) setAdaptedNotifier:a1];
    return *(void *)(a1 + 48);
  }
  return result;
}

uint64_t sub_1004440DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_10241B2F8);
}

uint64_t sub_100444108(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        uint64_t v13 = (uint64_t *)v7;
      }
      else {
        uint64_t v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)double v42 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          unint64_t v24 = (uint64_t *)v18;
        }
        else {
          unint64_t v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          BOOL v29 = (uint64_t *)v25;
        }
        else {
          BOOL v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v40 = v26;
        uint64_t v35 = *(void *)(v26 + 56);
        char v36 = *a4;
        *(void *)std::string buf = &v41;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v36;
        *(void *)std::string buf = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_100446FB8();
        }
        if (v35) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v40 = a1 + 64;
        char v30 = byte_10241B2F9;
        int v39 = v17;
        *(void *)std::string buf = &v39;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v30;
        int v39 = *a3;
        *(void *)std::string buf = &v39;
        float v31 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        __int16 v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        char v33 = *a4;
        int v39 = *a3;
        *(void *)std::string buf = &v39;
        __int16 v34 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)std::string buf = &v41;
        *((unsigned char *)sub_1000EB1B8(v34 + 5, &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v33;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        *(_DWORD *)std::string buf = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022B28D0);
  }
  int v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    unint64_t v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      unint64_t v15 = (void *)*v15;
    }
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v46 = 1026;
    int v47 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B28D0);
    }
    int v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v37 = (void *)*v37;
    }
    *(_DWORD *)double v42 = 136446466;
    *(void *)&v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = a2;
    unsigned int v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLHealthAssessmentNotifier_Type::Notification, NotificationData_T = CLHealthAssessmentNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v38);
    if (v38 != buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

BOOL sub_1004445AC(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B28D0);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)std::string buf = 136446466;
      unint64_t v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022B28D0);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLHealthAssessmentNotifier_Type::Notification, NotificationData_T = CLHealthAssessmentNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_100444830(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        uint64_t v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            uint64_t v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022B28D0);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)std::string buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                uint64_t v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022B28D0);
                }
                BOOL v29 = a1 + 8;
                if (a1[31] < 0) {
                  BOOL v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  char v30 = buf;
                }
                else {
                  char v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                unsigned int v38 = v29;
                __int16 v39 = 2082;
                uint64_t v40 = v30;
                float v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLHealthAssessmentNotifier_Type::Notification, NotificationData_T = CLHealthAssessmentNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_100444C04(uint64_t a1, int *a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      BOOL v10 = (uint64_t *)v4;
    }
    else {
      BOOL v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v7 == v3) {
    return 0;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0;
  }
  int v11 = *(void **)(v7 + 64);
  if (!v11) {
    return 0;
  }
  *a3 = *v11;
  return 1;
}

uint64_t sub_100444C64(uint64_t a1, int *a2, uint64_t *a3)
{
  int v6 = (uint64_t *)operator new(0x20uLL);
  v6[1] = 0;
  _DWORD v6[2] = 0;
  v6[3] = *a3;
  uint64_t *v6 = (uint64_t)off_1022B2AB0;
  int v10 = *a2;
  int v11 = &v10;
  uint64_t v7 = sub_10044715C((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101D0B290, &v11);
  int v8 = (std::__shared_weak_count *)v7[9];
  v7[8] = v6 + 3;
  v7[9] = v6;
  if (v8) {
    sub_1000DB0A0(v8);
  }
  return 1;
}

void sub_100444D18(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100444D2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, &v5, a3, a4, 0);
}

void sub_100444D80(uint64_t a1, unsigned int *a2, uint64_t *a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022B28D0);
  }
  BOOL v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    int v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)std::string buf = 68289794;
    int v22 = 0;
    __int16 v23 = 2082;
    *(void *)BOOL v24 = "";
    *(_WORD *)&v24[8] = 2082;
    *(void *)&v24[10] = "activity";
    __int16 v25 = 2082;
    int v26 = v10;
    __int16 v27 = 2050;
    BOOL v28 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    BOOL v29 = v30;
    memset(v30, 0, sizeof(v30));
    float v31 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v29);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v28) {
      sub_1000DB0A0(v28);
    }
    sub_1000F5BB0((uint64_t)&v23, *(void **)&v24[6]);
    if (v31) {
      sub_1000DB0A0(v31);
    }
    sub_1000F5BB0((uint64_t)&v29, v30[0]);
  }
  if (a4)
  {
    BOOL v18 = (uint64_t *)operator new(0x20uLL);
    v18[1] = 0;
    v18[2] = 0;
    *BOOL v18 = (uint64_t)off_1022B2AB0;
    v18[3] = *a3;
    int v19 = (std::__shared_weak_count *)v14[9];
    v14[8] = v18 + 3;
    v14[9] = v18;
    if (!v19) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  int v19 = (std::__shared_weak_count *)v14[9];
  v14[8] = 0;
  v14[9] = 0;
  if (v19) {
LABEL_27:
  }
    sub_1000DB0A0(v19);
LABEL_28:
  if (v14[7]) {
    sub_100447BFC();
  }
  os_activity_scope_leave(&state);
}

void sub_100445364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_1004453B0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B28D0);
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)std::string buf = 136315138;
      int v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022B28D0);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLHealthAssessmentNotifier_Type::Notification, NotificationData_T = CLHealthAssessmentNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B28D0);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)std::string buf = 136315394;
      int v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022B28D0);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLHealthAssessmentNotifier_Type::Notification, NotificationData_T = CLHealthAssessmentNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    int v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        BOOL v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_1022B28D0);
            }
            int v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)std::string buf = 136315650;
              int v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022B28D0);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLHealthAssessmentNotifier_Type::Notification, NotificationData_T = CLHealthAssessmentNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                BOOL v9 = v15;
              }
              while (!v16);
            }
            BOOL v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        BOOL v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            BOOL v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            int v8 = v19;
          }
          while (!v16);
        }
        int v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_10044595C(id a1)
{
  off_102419358 = os_log_create("com.apple.locationd.Motion", "MovementDisorder");
}

void sub_10044598C(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1004459BC(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1004459BC(a1, *a2);
    sub_1004459BC(a1, a2[1]);
    sub_1000F5BB0((uint64_t)(a2 + 5), (void *)a2[6]);
    operator delete(a2);
  }
}

void sub_100445A1C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100445A1C(a1, *a2);
    sub_100445A1C(a1, a2[1]);
    sub_100445A78((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_100445A78(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  uint64_t v3 = *(void **)(a1 + 16);

  sub_1000F5BB0(a1 + 8, v3);
}

uint64_t sub_100445ABC(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  sub_1000F5BB0(a1, *(void **)(a1 + 8));
  return a1;
}

void *sub_100445AF8@<X0>(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x178uLL);
  BOOL result = sub_100445B54(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100445B40(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100445B54(void *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B29E0;
  sub_101381A18(a1 + 3, *a2);
  return a1;
}

void sub_100445BA0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100445BB4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B29E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100445BD4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B29E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100445C28(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void sub_100445C50(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100445C80(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    int v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    int v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    BOOL v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)int v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000DA54C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      unsigned int v38 = (uint64_t *)a1[1];
      int v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        int v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      BOOL v9 = (char *)a1[1];
    }
    int v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    int v44 = (void *)a1[1];
    int v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    BOOL v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      unsigned int v48 = (uint64_t *)a1[1];
      int v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        int v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      __int16 v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        int v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  CFAbsoluteTime v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  char v53 = operator new(0x1000uLL);
  sub_1000DA434(&v54, &v53);
  __int16 v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  BOOL v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100445F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100445F98(uint64_t a1, double *a2)
{
  uint64_t v5 = a1 + 112;
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v6 = a1 + 72;
  *(void *)&v19[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  __int16 v20 = 256;
  v19[0] = *a2;
  if (sub_10018360C(v6, v19))
  {
    if (sub_100082064(v6))
    {
      (*(void (**)(uint64_t, double *, void))(*(void *)a1 + 80))(a1, a2, 0);
    }
    else if (!*(unsigned char *)(a1 + 128))
    {
      uint64_t v12 = (void *)(a1 + 176);
      unint64_t v13 = *(void *)(a1 + 216);
      if (v13 > *(int *)(a1 + 272))
      {
        ++*(void *)(a1 + 208);
        *(void *)(a1 + 216) = v13 - 1;
        sub_1004465E8(a1 + 176, 1);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022B2A40);
        }
        BOOL v14 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Maximum number of entries exceeded, throwing out oldest entry.", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022B2A40);
          }
          uint64_t v18 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLActivityRecorderDb<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy>::addSuspectRecord(const T &) [T = ParkinsonsResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v18);
          if (v18 != (char *)buf) {
            free(v18);
          }
        }
      }
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_1022B2A60);
      }
      uint64_t v15 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Buffer was added to since db was inaccesible.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_1022B2A60);
        }
        uint64_t v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLActivityRecorderDb<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy>::addSuspectRecord(const T &) [T = ParkinsonsResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
      }
      __n128 v7 = sub_100446508(v12, (uint64_t)a2);
    }
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022B2A40);
    }
    int v8 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
    {
      BOOL v9 = (void *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0) {
        BOOL v9 = (void *)*v9;
      }
      *(_DWORD *)std::string buf = 68289538;
      int v22 = 0;
      __int16 v23 = 2082;
      uint64_t v24 = "";
      __int16 v25 = 1026;
      int v26 = (int)v19[0];
      __int16 v27 = 2082;
      uint64_t v28 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B2A40);
      }
    }
    uint64_t v10 = qword_102418FD8;
    if (os_signpost_enabled((os_log_t)qword_102418FD8))
    {
      uint64_t v11 = (void *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0) {
        uint64_t v11 = (void *)*v11;
      }
      *(_DWORD *)std::string buf = 68289538;
      int v22 = 0;
      __int16 v23 = 2082;
      uint64_t v24 = "";
      __int16 v25 = 1026;
      int v26 = (int)v19[0];
      __int16 v27 = 2082;
      uint64_t v28 = v11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CL database error, record contains invalid time", "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
    }
  }
  return (*(uint64_t (**)(uint64_t, __n128))(*(void *)v5 + 24))(v5, v7);
}

void sub_1004464DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_100446508(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 85 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100446678(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x55)) + 48 * (v7 % 0x55);
  __n128 result = *(__n128 *)a2;
  long long v10 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v8 + 32) = v10;
  *(__n128 *)unint64_t v8 = result;
  ++a1[5];
  return result;
}

void sub_1004465B8(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1004465E8(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x55) {
    a2 = 1;
  }
  if (v2 < 0xAA) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 85;
  }
  return v4 ^ 1u;
}

void sub_100446648(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_100446678(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x55;
  unint64_t v4 = v2 - 85;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    BOOL v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000DA54C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      unsigned int v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      BOOL v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    int v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    BOOL v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      unsigned int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      __int16 v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  CFAbsoluteTime v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  char v53 = operator new(0xFF0uLL);
  sub_1000DA434(&v54, &v53);
  __int16 v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  BOOL v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100446944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100446990(uint64_t a1, double **a2)
{
  BOOL v3 = *a2;
  unint64_t v2 = a2[1];
  double v4 = (*a2)[1];
  double v5 = *(float *)(a1 + 136);
  if (v4 <= v5) {
    double v4 = *(float *)(a1 + 136);
  }
  uint64_t v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    uint64_t v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    double v8 = *v3;
    do
    {
      double v9 = *v6;
      double v10 = v6[1];
      v6 += 3;
      uint64_t v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5) {
        double v4 = *(float *)(a1 + 136);
      }
      else {
        double v4 = v10;
      }
      double v8 = v9;
    }
    while (v6 != v2);
  }
  if (v4 != 1.79769313e308)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022B2A40);
    }
    uint64_t v11 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning No expiration rule was added so the number of records will be unbounded.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B2A40);
      }
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "int CLActivityRecorderDb<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy>::estimateRecordsNeeded(const CLAggregationRules &) [T = ParkinsonsResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  return v7;
}

uint64_t sub_100446B90(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 32 * (v2 - v3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x100) {
    a2 = 1;
  }
  if (v5 < 0x200) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void sub_100446C00(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    int v7 = (void *)a1[1];
    double v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    double v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)double v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000DA54C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      unsigned int v38 = (uint64_t *)a1[1];
      double v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        double v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      double v9 = (char *)a1[1];
    }
    double v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    int v44 = (void *)a1[1];
    double v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    double v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      unsigned int v48 = (uint64_t *)a1[1];
      double v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        double v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      __int16 v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  CFAbsoluteTime v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  char v53 = operator new(0x1000uLL);
  sub_1000DA434(&v54, &v53);
  __int16 v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  BOOL v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100446ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100446F18(uint64_t **a1, uint64_t a2)
{
  BOOL v3 = a1 + 1;
  unint64_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        BOOL v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 28) >= *((_DWORD *)v4 + 7)) {
          break;
        }
        unint64_t v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      unint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    uint64_t v5 = v3 + 1;
  }
  else
  {
    uint64_t v5 = a1 + 1;
  }
LABEL_8:
  sub_1000EDF90(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

void sub_100446F88(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_100446FB8()
{
}

unsigned char *sub_100447064(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    int v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_1004472D4(a4);
    uint64_t v10 = *(void *)a3 + 80;
    uint64_t v11 = (uint64_t **)(*(void *)a3 + 40);
    BOOL v14 = (int *)(*(void *)a2 + 32);
    uint64_t v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    __n128 result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4 v13];
    }
  }
  return result;
}

uint64_t **sub_10044715C(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  int v7 = a1 + 1;
  uint64_t v6 = a1[1];
  uint64_t v8 = a1 + 1;
  id v9 = a1 + 1;
  if (v6)
  {
    int v10 = *a2;
    while (1)
    {
      while (1)
      {
        id v9 = (uint64_t **)v6;
        int v11 = *((_DWORD *)v6 + 8);
        if (v10 >= v11) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v11 >= v10) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t v12 = operator new(0x58uLL);
    v14[1] = v7;
    v12[8] = **a4;
    *((_OWORD *)v12 + 4) = 0u;
    *((_OWORD *)v12 + 3) = 0u;
    *((void *)v12 + 9) = 0;
    *((void *)v12 + 10) = 0;
    *((void *)v12 + 5) = v12 + 12;
    *((void *)v12 + 8) = 0;
    char v15 = 1;
    sub_1000EDF90(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0;
    sub_10044725C((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void sub_10044725C(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100445A78((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t sub_1004472B4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

id sub_1004472D4(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    return sub_100447370(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      return sub_1004476FC(a1);
    }
    else
    {
      return 0;
    }
  }
}

id sub_100447370(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_100447ABC((uint64_t)&v7, a1);
  }
  if (!getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_1022B2A80);
    }
    uint64_t v5 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v15 = v2;
      __int16 v16 = 2048;
      uint64_t v17 = 0;
      __int16 v18 = 2080;
      unint64_t v19 = 0x8000000101D1EDA0 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418F90 == -1) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  if (qword_102418F90 != -1) {
    dispatch_once(&qword_102418F90, &stru_1022B2A80);
  }
  BOOL v3 = qword_102418F98;
  if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 134218498;
    id v15 = v2;
    __int16 v16 = 2048;
    uint64_t v17 = 0;
    __int16 v18 = 2080;
    unint64_t v19 = 0x8000000101D1EDA0 & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  }
  if (!sub_10013D1A0(115, 0)) {
    return 0;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102418F90 != -1) {
LABEL_20:
  }
    dispatch_once(&qword_102418F90, &stru_1022B2A80);
LABEL_18:
  int v8 = 134218498;
  id v9 = v2;
  __int16 v10 = 2048;
  uint64_t v11 = 0;
  __int16 v12 = 2080;
  unint64_t v13 = 0x8000000101D1EDA0 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLHealthAssessmentNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v6);
  if (v6 != (char *)buf) {
    free(v6);
  }
  return 0;
}

id sub_1004476FC(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022B2A80);
      }
      BOOL v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D1EDA0 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        uint64_t v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLHealthAssessmentNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022B2A80);
      }
      uint64_t v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D1EDA0 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1022B2A80);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

id sub_100447ABC(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_102392510))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)8) {
      sub_101A602B0();
    }
    [a2 setCppObjectPtr:[objc_msgSend(objc_msgSend(a2, "serialized"), "bytes") bytes]];
  }

  return [a2 cppObjectPtr];
}

void sub_100447B44(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B2AB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100447B64(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B2AB0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100447BC0(uint64_t a1)
{
  id v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  sub_1000F5BB0(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

void sub_100447BFC()
{
}

void sub_100447CA8(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      __int16 v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          unint64_t v12 = (uint64_t *)v4;
        }
        else {
          unint64_t v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          __int16 v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        uint64_t v49 = v9;
        id v13 = sub_1004472D4(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        BOOL v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          id v15 = a1 + 11;
          __int16 v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            unint64_t v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                unint64_t v22 = (uint64_t *)v17;
              }
              else {
                unint64_t v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                unint64_t v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              unsigned int v48 = v19;
              sub_100447064(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              BOOL v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  long long v32 = (uint64_t *)v27;
                }
                else {
                  long long v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  BOOL v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              uint64_t v49 = v29;
              uint64_t v34 = v29[6];
              BOOL v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                uint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    uint64_t v39 = (uint64_t *)v36;
                  }
                  else {
                    uint64_t v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    uint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      uint64_t v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      uint64_t v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      BOOL v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      BOOL v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      BOOL v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      uint64_t v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              unsigned int v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022B28D0);
              }
              uint64_t v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                unint64_t v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  unint64_t v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)std::string buf = 136446466;
                long long v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022B28D0);
                }
                uint64_t v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  uint64_t v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                unint64_t v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                uint64_t v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLHealthAssessmentNotifier_Type::Notification, NotificationData_T = CLHealthAssessmentNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

uint64_t **sub_100448098(uint64_t **a1, __n128 *a2)
{
  uint64_t v4 = a1 + 1;
  uint64_t v5 = (__n128 *)operator new(0x58uLL);
  v12[0] = v5;
  v12[1] = v4;
  sub_100448178(v5 + 2, a2);
  char v13 = 1;
  char v7 = a1[1];
  if (v7)
  {
    int v8 = *v6;
    while (1)
    {
      while (1)
      {
        __int16 v9 = (uint64_t **)v7;
        int v10 = *((_DWORD *)v7 + 8);
        if (v8 >= v10) {
          break;
        }
        char v7 = *v9;
        uint64_t v4 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      char v7 = v9[1];
      if (!v7)
      {
        uint64_t v4 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    __int16 v9 = v4;
LABEL_10:
    sub_1000EDF90(a1, (uint64_t)v9, v4, (uint64_t *)v5);
    v12[0] = 0;
    __int16 v9 = (uint64_t **)v5;
  }
  sub_10044725C((uint64_t)v12, 0);
  return v9;
}

__n128 sub_100448178(__n128 *a1, __n128 *a2)
{
  a1->n128_u32[0] = a2->n128_u32[0];
  a1->n128_u64[1] = a2->n128_u64[1];
  id v2 = a2 + 1;
  unint64_t v3 = a2[1].n128_u64[0];
  a1[1].n128_u64[0] = v3;
  uint64_t v4 = a1 + 1;
  unint64_t v5 = a2[1].n128_u64[1];
  a1[1].n128_u64[1] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2->n128_u64[1] = (unint64_t)v2;
    v2->n128_u64[0] = 0;
    a2[1].n128_u64[1] = 0;
  }
  else
  {
    a1->n128_u64[1] = (unint64_t)v4;
  }
  __n128 result = a2[2];
  a1[2] = result;
  a2[2].n128_u64[0] = 0;
  a2[2].n128_u64[1] = 0;
  a1[3].n128_u8[0] = a2[3].n128_u8[0];
  return result;
}

uint64_t sub_1004481D0(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(_DWORD *)a1 = *a2;
  sub_100448228((uint64_t *)(a1 + 8), a3);
  uint64_t v5 = *(void *)(a3 + 32);
  *(void *)(a1 + 32) = *(void *)(a3 + 24);
  *(void *)(a1 + 40) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a3 + 40);
  return a1;
}

uint64_t *sub_100448228(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100ECB718(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_100448268(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_100448280(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

BOOL sub_1004482A0()
{
  uint64_t v1 = qword_102418F98;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

void sub_1004482C4(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, uint64_t a6, float a7, uint64_t a8, long long *a9, long long *a10)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  int v18 = (void *)(a1 + 8);
  *(void *)a1 = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 8));
  *int v18 = off_1022ADB08;
  *(void *)a1 = off_1022B2B00;
  *(void *)(a1 + 72) = off_1022B2B38;
  sub_1011F8748(a1 + 72, a2, a5, a1, a7, a6, 7, 12000);
  *(void *)a1 = off_1022B2B00;
  *(void *)(a1 + 72) = off_1022B2B38;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 176) = a4;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = 0;
  sub_100134750((void *)(a1 + 224), a2);
  if (*((char *)a9 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 248), *(void **)a9, *((void *)a9 + 1));
  }
  else
  {
    long long v19 = *a9;
    *(void *)(a1 + 264) = *((void *)a9 + 2);
    *(_OWORD *)(a1 + 248) = v19;
  }
  if (*((char *)a10 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 272), *(void **)a10, *((void *)a10 + 1));
  }
  else
  {
    long long v20 = *a10;
    *(void *)(a1 + 288) = *((void *)a10 + 2);
    *(_OWORD *)(a1 + 272) = v20;
  }
  *(void *)(a1 + 296) = -1;
  *(void *)(a1 + 304) = -1;
  *(unsigned char *)(a1 + 312) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 320) = 0;
  *(unsigned char *)(a1 + 344) = 0;
  sub_100F03BA0((void *)(a1 + 352), 0, 0);
  if (a3) {
    operator new();
  }
  operator new();
}

void sub_10044871C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (*(char *)(v21 + 271) < 0) {
    operator delete(*v24);
  }
  if (*(char *)(v21 + 247) < 0) {
    operator delete(*a10);
  }
  sub_1000A7B4C((void ***)&__p);
  uint64_t v26 = *(void *)(v21 + 192);
  *(void *)(v21 + 192) = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 24))(v26);
  }
  uint64_t v27 = *v23;
  *int v23 = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  sub_1011F8AE0(a11);
  *(void *)uint64_t v21 = a12;
  sub_1003BE1F8(v22);
  _Unwind_Resume(a1);
}

void sub_10044887C()
{
}

void sub_100448884()
{
}

uint64_t sub_10044888C(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (*(void *)(a1 + 176) && (sub_100082064(a1 + 72) & 1) == 0) {
    sub_1010079E0(*(void *)(a1 + 176));
  }
  if (!(*(unsigned int (**)(void))(*(void *)(a1 + 72) + 24))()) {
    return 0;
  }
  unint64_t v3 = *(uint64_t (**)(void))(**(void **)(a1 + 184) + 24);

  return v3();
}

void sub_10044893C(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, uint64_t a6, float a7, uint64_t a8, long long *a9, long long *a10)
{
}

uint64_t sub_100448948(uint64_t a1, uint64_t *a2, double *a3, int *a4)
{
  int v8 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v9 = sqlite3_step(v8);
  if (v9 == 101) {
    return 1;
  }
  int v10 = v9;
  if (v9 == 100)
  {
    sub_100448B48(a1, a2, a3, a4);
    return 0;
  }
  else
  {
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_1022B2BB0);
    }
    unint64_t v12 = qword_102419308;
    if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 67109120;
      int v15 = v10;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "[DB] getMostRecentTimeWithCode - Result was error: %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419300 != -1) {
        dispatch_once(&qword_102419300, &stru_1022B2BB0);
      }
      char v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLActivityDB::ActivityCode CMHealthColdStorageDb::getTimeAndIDWithCode(const CLSqliteScopedStatement &, CFAbsoluteTime &, int &) const", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    return 2;
  }
}

void sub_100448B48(uint64_t a1, uint64_t *a2, double *a3, int *a4)
{
  int v8 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *a4 = sqlite3_column_int(v8, *(_DWORD *)(a1 + 308));
  int v9 = (sqlite3_stmt *)sub_10014D19C(*a2);
  *a3 = sqlite3_column_double(v9, *(_DWORD *)(a1 + 296));
}

uint64_t sub_100448BA4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)&v31);
    uint64_t v6 = sub_100132EFC(&v32, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 32))(__p, a1);
    if ((v30 & 0x80u) == 0) {
      char v7 = __p;
    }
    else {
      char v7 = (void **)__p[0];
    }
    if ((v30 & 0x80u) == 0) {
      uint64_t v8 = v30;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    int v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    int v10 = sub_100132EFC(v9, (uint64_t)" WHERE ", 7);
    if (byte_10247AA67 >= 0) {
      BOOL v11 = &qword_10247AA50;
    }
    else {
      BOOL v11 = (uint64_t *)qword_10247AA50;
    }
    if (byte_10247AA67 >= 0) {
      uint64_t v12 = byte_10247AA67;
    }
    else {
      uint64_t v12 = unk_10247AA58;
    }
    char v13 = sub_100132EFC(v10, (uint64_t)v11, v12);
    BOOL v14 = sub_100132EFC(v13, (uint64_t)" LIKE '%", 8);
    int v15 = *(char *)(a3 + 23);
    if (v15 >= 0) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = *(void *)a3;
    }
    if (v15 >= 0) {
      uint64_t v17 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v17 = *(void *)(a3 + 8);
    }
    int v18 = sub_100132EFC(v14, v16, v17);
    long long v19 = sub_100132EFC(v18, (uint64_t)"%' OR ", 6);
    if (byte_10247AA67 >= 0) {
      long long v20 = &qword_10247AA50;
    }
    else {
      long long v20 = (uint64_t *)qword_10247AA50;
    }
    if (byte_10247AA67 >= 0) {
      uint64_t v21 = byte_10247AA67;
    }
    else {
      uint64_t v21 = unk_10247AA58;
    }
    unint64_t v22 = sub_100132EFC(v19, (uint64_t)v20, v21);
    int v23 = sub_100132EFC(v22, (uint64_t)" IS NULL OR ", 12);
    if (byte_10247AA67 >= 0) {
      uint64_t v24 = &qword_10247AA50;
    }
    else {
      uint64_t v24 = (uint64_t *)qword_10247AA50;
    }
    if (byte_10247AA67 >= 0) {
      uint64_t v25 = byte_10247AA67;
    }
    else {
      uint64_t v25 = unk_10247AA58;
    }
    uint64_t v26 = sub_100132EFC(v23, (uint64_t)v24, v25);
    sub_100132EFC(v26, (uint64_t)" = '' ORDER BY ROWID DESC LIMIT 1", 33);
    if ((char)v30 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v27 = a1[10];
    std::stringbuf::str();
    if ((v30 & 0x80u) == 0) {
      int v28 = __p;
    }
    else {
      int v28 = (void **)__p[0];
    }
    sub_10014D518(v27, (uint64_t)v28);
  }
  return result;
}

void sub_100448EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (v17) {
    sub_101A5DB04();
  }
  sub_101A129A8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_100448F38(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)&v31);
    uint64_t v6 = sub_100132EFC(&v32, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 32))(__p, a1);
    if ((v30 & 0x80u) == 0) {
      char v7 = __p;
    }
    else {
      char v7 = (void **)__p[0];
    }
    if ((v30 & 0x80u) == 0) {
      uint64_t v8 = v30;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    int v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    int v10 = sub_100132EFC(v9, (uint64_t)" WHERE ", 7);
    if (byte_10247AA67 >= 0) {
      BOOL v11 = &qword_10247AA50;
    }
    else {
      BOOL v11 = (uint64_t *)qword_10247AA50;
    }
    if (byte_10247AA67 >= 0) {
      uint64_t v12 = byte_10247AA67;
    }
    else {
      uint64_t v12 = unk_10247AA58;
    }
    char v13 = sub_100132EFC(v10, (uint64_t)v11, v12);
    BOOL v14 = sub_100132EFC(v13, (uint64_t)" LIKE '%", 8);
    int v15 = *(char *)(a3 + 23);
    if (v15 >= 0) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = *(void *)a3;
    }
    if (v15 >= 0) {
      uint64_t v17 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v17 = *(void *)(a3 + 8);
    }
    int v18 = sub_100132EFC(v14, v16, v17);
    long long v19 = sub_100132EFC(v18, (uint64_t)"%' OR ", 6);
    if (byte_10247AA67 >= 0) {
      long long v20 = &qword_10247AA50;
    }
    else {
      long long v20 = (uint64_t *)qword_10247AA50;
    }
    if (byte_10247AA67 >= 0) {
      uint64_t v21 = byte_10247AA67;
    }
    else {
      uint64_t v21 = unk_10247AA58;
    }
    unint64_t v22 = sub_100132EFC(v19, (uint64_t)v20, v21);
    int v23 = sub_100132EFC(v22, (uint64_t)" IS NULL OR ", 12);
    if (byte_10247AA67 >= 0) {
      uint64_t v24 = &qword_10247AA50;
    }
    else {
      uint64_t v24 = (uint64_t *)qword_10247AA50;
    }
    if (byte_10247AA67 >= 0) {
      uint64_t v25 = byte_10247AA67;
    }
    else {
      uint64_t v25 = unk_10247AA58;
    }
    uint64_t v26 = sub_100132EFC(v23, (uint64_t)v24, v25);
    sub_100132EFC(v26, (uint64_t)" = '' ORDER BY ROWID ASC LIMIT 1", 32);
    if ((char)v30 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v27 = a1[10];
    std::stringbuf::str();
    if ((v30 & 0x80u) == 0) {
      int v28 = __p;
    }
    else {
      int v28 = (void **)__p[0];
    }
    sub_10014D518(v27, (uint64_t)v28);
  }
  return result;
}

void sub_100449280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (v17) {
    sub_101A5DB04();
  }
  sub_101A129A8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_1004492CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sub_100082064(a1 + 72))
  {
    sub_10010F274((uint64_t)&v36);
    uint64_t v5 = sub_100132EFC(&v37, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 32))(__p, a1);
    if ((v35 & 0x80u) == 0) {
      uint64_t v6 = __p;
    }
    else {
      uint64_t v6 = (void **)__p[0];
    }
    if ((v35 & 0x80u) == 0) {
      uint64_t v7 = v35;
    }
    else {
      uint64_t v7 = (uint64_t)__p[1];
    }
    uint64_t v8 = sub_100132EFC(v5, (uint64_t)v6, v7);
    int v9 = sub_100132EFC(v8, (uint64_t)" WHERE ", 7);
    int v10 = *(char *)(a1 + 271);
    if (v10 >= 0) {
      uint64_t v11 = a1 + 248;
    }
    else {
      uint64_t v11 = *(void *)(a1 + 248);
    }
    if (v10 >= 0) {
      uint64_t v12 = *(unsigned __int8 *)(a1 + 271);
    }
    else {
      uint64_t v12 = *(void *)(a1 + 256);
    }
    char v13 = sub_100132EFC(v9, v11, v12);
    BOOL v14 = sub_100132EFC(v13, (uint64_t)" > ? AND (", 10);
    if (byte_10247AA67 >= 0) {
      int v15 = &qword_10247AA50;
    }
    else {
      int v15 = (uint64_t *)qword_10247AA50;
    }
    if (byte_10247AA67 >= 0) {
      uint64_t v16 = byte_10247AA67;
    }
    else {
      uint64_t v16 = unk_10247AA58;
    }
    uint64_t v17 = sub_100132EFC(v14, (uint64_t)v15, v16);
    int v18 = sub_100132EFC(v17, (uint64_t)" LIKE '%", 8);
    int v19 = *(char *)(a3 + 23);
    if (v19 >= 0) {
      uint64_t v20 = a3;
    }
    else {
      uint64_t v20 = *(void *)a3;
    }
    if (v19 >= 0) {
      uint64_t v21 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v21 = *(void *)(a3 + 8);
    }
    unint64_t v22 = sub_100132EFC(v18, v20, v21);
    int v23 = sub_100132EFC(v22, (uint64_t)"%' OR ", 6);
    if (byte_10247AA67 >= 0) {
      uint64_t v24 = &qword_10247AA50;
    }
    else {
      uint64_t v24 = (uint64_t *)qword_10247AA50;
    }
    if (byte_10247AA67 >= 0) {
      uint64_t v25 = byte_10247AA67;
    }
    else {
      uint64_t v25 = unk_10247AA58;
    }
    uint64_t v26 = sub_100132EFC(v23, (uint64_t)v24, v25);
    uint64_t v27 = sub_100132EFC(v26, (uint64_t)" IS NULL OR ", 12);
    if (byte_10247AA67 >= 0) {
      int v28 = &qword_10247AA50;
    }
    else {
      int v28 = (uint64_t *)qword_10247AA50;
    }
    if (byte_10247AA67 >= 0) {
      uint64_t v29 = byte_10247AA67;
    }
    else {
      uint64_t v29 = unk_10247AA58;
    }
    unsigned __int8 v30 = sub_100132EFC(v27, (uint64_t)v28, v29);
    sub_100132EFC(v30, (uint64_t)" = '') ORDER BY ROWID ASC LIMIT ", 32);
    std::ostream::operator<<();
    if ((char)v35 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v31 = *(void *)(a1 + 80);
    std::stringbuf::str();
    if ((v35 & 0x80u) == 0) {
      uint64_t v32 = __p;
    }
    else {
      uint64_t v32 = (void **)__p[0];
    }
    sub_10014D518(v31, (uint64_t)v32);
  }
  return 0;
}

void sub_100449760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a18);
  _Unwind_Resume(a1);
}

id sub_1004497D4(uint64_t a1, uint64_t *a2)
{
  if (!*a2) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 300) == -1) {
    return 0;
  }
  uint64_t v4 = (sqlite3_stmt *)sub_10014D19C(*a2);
  if (sqlite3_step(v4) != 100) {
    return 0;
  }
  uint64_t v5 = (sqlite3_stmt *)sub_10014D19C(*a2);
  uint64_t v6 = sqlite3_column_blob(v5, *(_DWORD *)(a1 + 300));
  uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v8 = sqlite3_column_bytes(v7, *(_DWORD *)(a1 + 300));
  if (!v6 || !v8) {
    return 0;
  }
  id v9 = [objc_alloc((Class)NSData) initWithBytes:v6 length:v8];

  return v9;
}

uint64_t sub_100449890(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    sub_10010F274((uint64_t)&v16);
    unint64_t v3 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 32))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v5 = v15;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    uint64_t v7 = sub_100132EFC(v6, (uint64_t)" WHERE ", 7);
    int v8 = *(char *)(a1 + 271);
    if (v8 >= 0) {
      uint64_t v9 = a1 + 248;
    }
    else {
      uint64_t v9 = *(void *)(a1 + 248);
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a1 + 271);
    }
    else {
      uint64_t v10 = *(void *)(a1 + 256);
    }
    uint64_t v11 = sub_100132EFC(v7, v9, v10);
    sub_100132EFC(v11, (uint64_t)" < ?", 4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v12 = *(void *)(a1 + 80);
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      char v13 = __p;
    }
    else {
      char v13 = (void **)__p[0];
    }
    sub_10014D518(v12, (uint64_t)v13);
  }
  return result;
}

void sub_100449B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_100449BAC(uint64_t *a1)
{
  id v2 = __p;
  (*(void (**)(void **__return_ptr))(*a1 + 32))(__p);
  if (v13 < 0) {
    id v2 = (void **)__p[0];
  }
  if (!strcmp((const char *)v2, "VO2MaxInputHistory") && !*(unsigned char *)(a1[22] + 148))
  {
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_1022B2BB0);
    }
    uint64_t v7 = qword_102419308;
    if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[DB] VO2MaxInputHistory table not yet ready for sync since deduplication is not complete", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419300 != -1) {
        dispatch_once(&qword_102419300, &stru_1022B2BB0);
      }
      LOWORD(v14) = 0;
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CMHealthColdStorageDb::validateTableFormat()", "%s\n", v8);
      if (v8 != (char *)buf) {
        goto LABEL_28;
      }
    }
  }
  else
  {
    if (sub_100082064(a1[23]) && sub_100082064(a1 + 9))
    {
      sub_1000A7BA0(a1 + 25);
      memset(v11, 0, sizeof(v11));
      sub_1011F9528(a1[23], (const char *)v2, a1 + 25, v11);
    }
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_1022B2BB0);
    }
    unint64_t v3 = qword_102419308;
    if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = sub_100082064(a1[23]);
      int v5 = sub_100082064(a1 + 9);
      *(_DWORD *)std::string buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v4;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[DB] One of the DBs is not accessible. Hot: %d, Cold %d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419300 != -1) {
        dispatch_once(&qword_102419300, &stru_1022B2BB0);
      }
      int v9 = sub_100082064(a1[23]);
      int v10 = sub_100082064(a1 + 9);
      int v14 = 67109376;
      int v15 = v9;
      __int16 v16 = 1024;
      int v17 = v10;
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CMHealthColdStorageDb::validateTableFormat()", "%s\n", v8);
      if (v8 != (char *)buf) {
LABEL_28:
      }
        free(v8);
    }
  }
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_10044A7D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10044A868(uint64_t a1, char *a2)
{
  if (!sub_1005F93E4(*(void *)(a1 + 80), a2)) {
    return 1;
  }
  if (!strcmp(a2, "SmoothedGaitMetricsHistory"))
  {
    uint64_t v6 = "";
    int v7 = 5;
    __int16 v8 = 0;
    char v9 = 0;
    char v10 = 0;
    sub_1005FEC4C(*(void *)(a1 + 80), a2, (uint64_t)"numGaitMetrics", (uint64_t)&v6);
  }
  if (strcmp(a2, "VO2MaxInputHistory")) {
    return 1;
  }
  sub_100134750(__p, a2);
  uint64_t v4 = sub_10044AB00(a1, (uint64_t)__p);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return v4;
}

void sub_10044AADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10044AB00(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1 + 112;
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v6 = a1 + 72;
  v16[33] = (void *)(a1 + 112);
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  __int16 v17 = 256;
  if (sub_100082064(v6))
  {
    uint64_t v7 = *(char *)(a2 + 23) >= 0 ? a2 : *(void *)a2;
    if (sub_1005F93E4(*(void *)(a1 + 80), v7))
    {
      CFAbsoluteTimeGetCurrent();
      sub_10010F274((uint64_t)&v15);
      __int16 v8 = sub_100132EFC(v16, (uint64_t)"DELETE FROM ", 12);
      int v9 = *(char *)(a2 + 23);
      if (v9 >= 0) {
        uint64_t v10 = a2;
      }
      else {
        uint64_t v10 = *(void *)a2;
      }
      if (v9 >= 0) {
        uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v11 = *(void *)(a2 + 8);
      }
      sub_100132EFC(v8, v10, v11);
      uint64_t v12 = *(void *)(a1 + 80);
      std::stringbuf::str();
      if (v19 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      sub_10014D518(v12, (uint64_t)p_p);
    }
  }
  (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  return 0;
}

void sub_10044AF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (v58) {
    (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
  }
  sub_101A129A8((uint64_t)&a11);
  sub_1019DB560((uint64_t)&a46);
  _Unwind_Resume(a1);
}

uint64_t sub_10044B008(uint64_t a1, uint64_t a2, uint64_t *a3, double a4)
{
  if ((sub_100082064(*(void *)(a1 + 184)) & 1) == 0
    && (sub_100082064(a1 + 72) & 1) == 0
    && MKBGetDeviceLockState() == 3)
  {
    sub_1010079E0(*(void *)(a1 + 176));
    (*(void (**)(void))(**(void **)(a1 + 184) + 24))(*(void *)(a1 + 184));
    (*(void (**)(uint64_t))(*(void *)(a1 + 72) + 24))(a1 + 72);
  }
  if (sub_100082064(*(void *)(a1 + 184)) && (uint64_t v8 = a1 + 72, sub_100082064(a1 + 72)))
  {
    if (sub_100449BAC((uint64_t *)a1))
    {
      *(double *)&unint64_t v79 = -1.0;
      if (sub_100448BA4((void *)a1, (uint64_t)&v79, a2))
      {
        int v9 = &qword_102419000;
        if (qword_102419300 != -1) {
          dispatch_once(&qword_102419300, &stru_1022B2BB0);
        }
        uint64_t v10 = qword_102419308;
        if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_INFO))
        {
          unint64_t v11 = v79;
          (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 32))(__p, a1);
          uint64_t v12 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
          *(_DWORD *)std::string buf = 134218242;
          *(void *)&uint8_t buf[4] = v11;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v12;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[DB] Found most recent time %f for %s", buf, 0x16u);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_102419300 != -1) {
            dispatch_once(&qword_102419300, &stru_1022B2BB0);
          }
          double v59 = *(double *)&v79;
          (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)a1 + 32))(buf, a1);
          if ((buf[23] & 0x80u) == 0) {
            unsigned int v60 = buf;
          }
          else {
            unsigned int v60 = *(uint8_t **)buf;
          }
          *(_DWORD *)unint64_t v87 = 134218242;
          *(double *)&v87[4] = v59;
          *(_WORD *)&v87[12] = 2080;
          *(void *)&v87[14] = v60;
          uint64_t v61 = (char *)_os_log_send_and_compose_impl();
          if ((char)buf[23] < 0) {
            operator delete(*(void **)buf);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "CMError CMHealthColdStorageDb::syncFromHot(CFAbsoluteTime, const std::string &, std::shared_ptr<CLHealthColdStorageStats>)", "%s\n", v61);
          double v13 = v59;
          if (v61 != __p) {
            free(v61);
          }
        }
        else
        {
          double v13 = *(double *)&v79;
        }
        double v78 = -1.0;
        sub_100448F38((void *)a1, (uint64_t)&v78, a2);
        BOOL v14 = a4 > 0.0;
        if (v13 <= 0.0) {
          BOOL v14 = 0;
        }
        if (v14 && v13 < a4)
        {
          if (qword_102419300 != -1) {
            dispatch_once(&qword_102419300, &stru_1022B2BB0);
          }
          uint64_t v15 = qword_102419308;
          if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)long long __p = 0;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "[DB] Deleting all old records.", __p, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_102419300 != -1) {
              dispatch_once(&qword_102419300, &stru_1022B2BB0);
            }
            *(_WORD *)std::string buf = 0;
            BOOL v68 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "CMError CMHealthColdStorageDb::syncFromHot(CFAbsoluteTime, const std::string &, std::shared_ptr<CLHealthColdStorageStats>)", "%s\n", v68);
            if (v68 != __p) {
              free(v68);
            }
          }
          sub_1011F9E28((void *)(a1 + 72));
        }
        else
        {
          if (v78 >= a4) {
            BOOL v14 = 0;
          }
          if (v14)
          {
            if (qword_102419300 != -1) {
              dispatch_once(&qword_102419300, &stru_1022B2BB0);
            }
            uint64_t v20 = qword_102419308;
            if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)long long __p = 0;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "[DB] Deleting all old records preceding delete request.", __p, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(__p, 0x65CuLL);
              if (qword_102419300 != -1) {
                dispatch_once(&qword_102419300, &stru_1022B2BB0);
              }
              *(_WORD *)std::string buf = 0;
              unint64_t v71 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "CMError CMHealthColdStorageDb::syncFromHot(CFAbsoluteTime, const std::string &, std::shared_ptr<CLHealthColdStorageStats>)", "%s\n", v71);
              if (v71 != __p) {
                free(v71);
              }
            }
            sub_100449890(a1);
          }
        }
        if (!*(_DWORD *)(a1 + 132)) {
          *(_DWORD *)(a1 + 132) = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 72) + 48))(a1 + 72);
        }
        if (v13 >= a4) {
          double v21 = v13;
        }
        else {
          double v21 = a4;
        }
        memset(buf, 0, 24);
        sub_10044C7C4(a1, (uint64_t)buf);
        double Current = CFAbsoluteTimeGetCurrent();
        uint64_t v23 = *(void *)(a1 + 184);
        (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 32))(v87, a1);
        memset(__p, 0, 24);
        *(void *)&long long v85 = __p;
        BYTE8(v85) = 0;
        *(void *)long long __p = operator new(0x18uLL);
        *(void *)&__p[8] = *(void *)__p;
        *(void *)&__p[16] = *(void *)__p + 24;
        *(void *)&__p[8] = sub_1000DC3CC((uint64_t)&__p[16], (long long *)v87, (long long *)&v88, *(char **)__p);
        int v74 = (char)buf[23];
        if ((char)buf[23] < 0)
        {
          sub_1000DC48C(__dst, *(void **)buf, *(unint64_t *)&buf[8]);
        }
        else
        {
          *(_OWORD *)__uuid_t dst = *(_OWORD *)buf;
          *(void *)&__dst[16] = *(void *)&buf[16];
        }
        long long v85 = 0uLL;
        uint64_t v86 = 0;
        *(void *)unint64_t v80 = &v85;
        v80[8] = 0;
        *(void *)&long long v85 = operator new(0x18uLL);
        *((void *)&v85 + 1) = v85;
        uint64_t v86 = v85 + 24;
        *((void *)&v85 + 1) = sub_1000DC3CC((uint64_t)&v86, (long long *)__dst, (long long *)&v84, (char *)v85);
        uint64_t v24 = (char *)(a1 + 248);
        if (*(char *)(a1 + 271) < 0) {
          uint64_t v24 = *(char **)v24;
        }
        sub_1011F9538(a1 + 72, v23, (uint64_t *)__p, &v85, v24, v21);
        *(void *)unint64_t v80 = &v85;
        sub_1000A7B4C((void ***)v80);
        if ((__dst[23] & 0x80000000) != 0) {
          operator delete(*(void **)__dst);
        }
        *(void *)&long long v85 = __p;
        sub_1000A7B4C((void ***)&v85);
        if ((v87[23] & 0x80000000) != 0) {
          operator delete(*(void **)v87);
        }
        int v25 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 48))(a1 + 72);
        if (*(unsigned char *)(a1 + 312))
        {
          if (qword_102419300 != -1) {
            dispatch_once(&qword_102419300, &stru_1022B2BB0);
          }
          uint64_t v26 = qword_102419308;
          if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_DEFAULT))
          {
            int v27 = *(unsigned __int8 *)(a1 + 312);
            *(_DWORD *)long long __p = 67109376;
            *(_DWORD *)&__p[4] = v27;
            *(_WORD *)&__p[8] = 1024;
            *(_DWORD *)&__p[10] = 730;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Cold Storage Max expiration enabled %d, expiration in days set to %d", __p, 0xEu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_102419300 != -1) {
              dispatch_once(&qword_102419300, &stru_1022B2BB0);
            }
            int v65 = *(unsigned __int8 *)(a1 + 312);
            *(_DWORD *)unint64_t v87 = 67109376;
            *(_DWORD *)&v87[4] = v65;
            *(_WORD *)&v87[8] = 1024;
            *(_DWORD *)&v87[10] = 730;
            unint64_t v66 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "CMError CMHealthColdStorageDb::syncFromHot(CFAbsoluteTime, const std::string &, std::shared_ptr<CLHealthColdStorageStats>)", "%s\n", v66);
            if (v66 != __p) {
              free(v66);
            }
          }
          uint64_t v18 = 100;
          int v28 = 730;
        }
        else
        {
          (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 32))(__p, a1);
          uint64_t v29 = sub_100122860(qword_10247AA68, __p);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          if (v29)
          {
            int v28 = *((_DWORD *)v29 + 10);
            uint64_t v18 = 100;
          }
          else
          {
            if (qword_102419300 != -1) {
              dispatch_once(&qword_102419300, &stru_1022B2BB0);
            }
            unsigned __int8 v30 = qword_102419308;
            if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_FAULT))
            {
              (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 32))(__p, a1);
              uint64_t v31 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
              *(_DWORD *)unint64_t v87 = 136315138;
              *(void *)&v87[4] = v31;
              _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_FAULT, "No expiration set for db, %s", v87, 0xCu);
              if ((__p[23] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(__p, 0x65CuLL);
              if (qword_102419300 != -1) {
                dispatch_once(&qword_102419300, &stru_1022B2BB0);
              }
              (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 32))(v87, a1);
              if (v87[23] >= 0) {
                long long v72 = v87;
              }
              else {
                long long v72 = *(unsigned char **)v87;
              }
              LODWORD(v85) = 136315138;
              *(void *)((char *)&v85 + 4) = v72;
              long long v73 = (char *)_os_log_send_and_compose_impl();
              if ((v87[23] & 0x80000000) != 0) {
                operator delete(*(void **)v87);
              }
              sub_1004BA5E4("Generic", 1, 0, 0, "CMError CMHealthColdStorageDb::syncFromHot(CFAbsoluteTime, const std::string &, std::shared_ptr<CLHealthColdStorageStats>)", "%s\n", v73);
              if (v73 != __p) {
                free(v73);
              }
            }
            int v28 = 0;
            uint64_t v18 = 103;
          }
        }
        if (qword_102419300 != -1) {
          dispatch_once(&qword_102419300, &stru_1022B2BB0);
        }
        uint64_t v32 = qword_102419308;
        if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_DEBUG))
        {
          (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 32))(v87, a1);
          if (v87[23] >= 0) {
            uint64_t v33 = v87;
          }
          else {
            uint64_t v33 = *(unsigned char **)v87;
          }
          int v34 = *(unsigned __int8 *)(a1 + 312);
          *(_DWORD *)long long __p = 136315650;
          *(void *)&__p[4] = v33;
          *(_WORD *)&unsigned char __p[12] = 1024;
          *(_DWORD *)&__p[14] = v28;
          *(_WORD *)&__p[18] = 1024;
          *(_DWORD *)&__p[20] = v34;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "Cold Storage expiration for db, %s, set to %d days, enableMaxExpiration, %d", __p, 0x18u);
          if ((v87[23] & 0x80000000) != 0) {
            operator delete(*(void **)v87);
          }
          int v9 = &qword_102419000;
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_102419300 != -1) {
            dispatch_once(&qword_102419300, &stru_1022B2BB0);
          }
          (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 32))(&v85, a1);
          if (v86 >= 0) {
            unint64_t v62 = &v85;
          }
          else {
            unint64_t v62 = (long long *)v85;
          }
          int v63 = *(unsigned __int8 *)(a1 + 312);
          *(_DWORD *)unint64_t v87 = 136315650;
          *(void *)&v87[4] = v62;
          *(_WORD *)&v87[12] = 1024;
          *(_DWORD *)&v87[14] = v28;
          *(_WORD *)&v87[18] = 1024;
          *(_DWORD *)&v87[20] = v63;
          unint64_t v64 = (char *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v86) < 0) {
            operator delete((void *)v85);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "CMError CMHealthColdStorageDb::syncFromHot(CFAbsoluteTime, const std::string &, std::shared_ptr<CLHealthColdStorageStats>)", "%s\n", v64);
          if (v64 != __p) {
            free(v64);
          }
          int v9 = &qword_102419000;
        }
        unsigned __int8 v35 = operator new(0x18uLL);
        *(void *)&v87[8] = v35 + 3;
        *(void *)&v87[16] = v35 + 3;
        *(double *)unsigned __int8 v35 = (double)v28 * 86400.0;
        v35[1] = 0x7FEFFFFFFFFFFFFFLL;
        *((unsigned char *)v35 + 16) = 1;
        *(void *)unint64_t v87 = v35;
        int v36 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v8 + 16))(a1 + 72, v87);
        if (v9[96] != -1) {
          dispatch_once(&qword_102419300, &stru_1022B2BB0);
        }
        uint64_t v37 = qword_102419308;
        if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_INFO))
        {
          (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 32))(&v85, a1);
          int v38 = SHIBYTE(v86);
          uint64_t v39 = (long long *)v85;
          CFAbsoluteTime v40 = CFAbsoluteTimeGetCurrent();
          int v41 = *(_DWORD *)(a1 + 132);
          double v42 = v40 - Current;
          __int16 v43 = &v85;
          if (v38 < 0) {
            __int16 v43 = v39;
          }
          *(void *)long long __p = 68290306;
          *(_WORD *)&__p[8] = 2082;
          *(void *)&__p[10] = "";
          *(_WORD *)&__p[18] = 2082;
          *(void *)&__p[20] = v43;
          __int16 v91 = 2050;
          double v92 = v42;
          __int16 v93 = 1026;
          int v94 = v41;
          __int16 v95 = 1026;
          int v96 = v25;
          __int16 v97 = 1026;
          int v98 = v36;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"copyTablesFromOtherDatabase\", \"tableName\":%{public, location:escape_only}s, \"duration\":\"%{public}.5f\", \"recordCountInitial\":%{public}d, \"recordCountAfterSync\":%{public}d, \"recordCountAfterPurge\":%{public}d}", __p, 0x38u);
          if (SHIBYTE(v86) < 0) {
            operator delete((void *)v85);
          }
        }
        if (v36 >= 0) {
          int v44 = v25 - v36;
        }
        else {
          int v44 = 0;
        }
        (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 32))(__p, a1);
        if (__p[23] >= 0) {
          uint64_t v45 = __p;
        }
        else {
          uint64_t v45 = *(unsigned char **)__p;
        }
        int v46 = +[NSString stringWithUTF8String:v45];
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        uint64_t v47 = *a3;
        unsigned int v48 = (std::__shared_weak_count *)a3[1];
        v77[0] = v47;
        v77[1] = v48;
        if (v48) {
          atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_10044CADC(a1, v77, v25 - *(_DWORD *)(a1 + 132), v44);
        if (v48) {
          sub_1000DB0A0(v48);
        }
        *(_DWORD *)(a1 + 132) = v36;
        CFStringRef v49 = [(NSString *)v46 stringByAppendingString:@"CKSyncStartTime"];
        double v76 = 0.0;
        uint64_t v50 = sub_1000A6958();
        sub_1000A6A10(v50, (uint64_t)v49, &v76);
        if (*(unsigned char *)(a1 + 344))
        {
          if (qword_102419300 != -1) {
            dispatch_once(&qword_102419300, &stru_1022B2BB0);
          }
          unint64_t v51 = qword_102419308;
          if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long __p = 134217984;
            *(double *)&__p[4] = a4;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "[CloudKit] marked as dirty, start Time for cloud sync : %f", __p, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_102419300 != -1) {
              dispatch_once(&qword_102419300, &stru_1022B2BB0);
            }
            LODWORD(v85) = 134217984;
            *(double *)((char *)&v85 + 4) = a4;
            uint64_t v67 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "CMError CMHealthColdStorageDb::syncFromHot(CFAbsoluteTime, const std::string &, std::shared_ptr<CLHealthColdStorageStats>)", "%s\n", v67);
            if (v67 != __p) {
              free(v67);
            }
          }
          double v76 = a4;
        }
        long long v85 = 0uLL;
        uint64_t v86 = 0;
        uint64_t v75 = 0;
        sub_1004492CC(a1, (uint64_t)&v85, a2);
        __int16 v52 = (void *)v85;
        if ((void)v85 != *((void *)&v85 + 1))
        {
          if (*((void *)&v85 + 1) - (void)v85 == 2000)
          {
            if (qword_102419300 != -1) {
              dispatch_once(&qword_102419300, &stru_1022B2BB0);
            }
            int v53 = qword_102419308;
            if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_DEFAULT))
            {
              (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 32))(__p, a1);
              long long v54 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
              *(_DWORD *)__uuid_t dst = 136315394;
              *(void *)&__dst[4] = v54;
              *(_WORD *)&__dst[12] = 2048;
              *(void *)&__dst[14] = v75;
              _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "[DB] Max records fetch limit reached for %s, latest record time %f", __dst, 0x16u);
              if ((__p[23] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(__p, 0x65CuLL);
              if (qword_102419300 != -1) {
                dispatch_once(&qword_102419300, &stru_1022B2BB0);
              }
              (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 32))(__dst, a1);
              if (__dst[23] >= 0) {
                uint64_t v69 = __dst;
              }
              else {
                uint64_t v69 = *(unsigned char **)__dst;
              }
              *(_DWORD *)unint64_t v80 = 136315394;
              *(void *)&v80[4] = v69;
              __int16 v81 = 2048;
              uint64_t v82 = v75;
              uint64_t v70 = (char *)_os_log_send_and_compose_impl();
              if ((__dst[23] & 0x80000000) != 0) {
                operator delete(*(void **)__dst);
              }
              sub_1004BA5E4("Generic", 1, 0, 2, "CMError CMHealthColdStorageDb::syncFromHot(CFAbsoluteTime, const std::string &, std::shared_ptr<CLHealthColdStorageStats>)", "%s\n", v70);
              if (v70 != __p) {
                free(v70);
              }
            }
          }
          sub_10044CCAC((uint64_t *)a1);
          sub_1001E06C8(a1 + 320, *(void *)(a1 + 328), (char *)v85, *((char **)&v85 + 1), (uint64_t)(*((void *)&v85 + 1) - v85) >> 2);
          uint64_t v55 = sub_1000A6958();
          sub_100163398(v55, v49, &v75);
          uint64_t v56 = sub_1000A6958();
          (*(void (**)(uint64_t))(*(void *)v56 + 944))(v56);
          __int16 v52 = (void *)v85;
        }
        *(unsigned char *)(a1 + 344) = 0;
        if (v52)
        {
          *((void *)&v85 + 1) = v52;
          operator delete(v52);
        }
        if (*(void *)v87)
        {
          *(void *)&v87[8] = *(void *)v87;
          operator delete(*(void **)v87);
        }
        if (v74 < 0) {
          operator delete(*(void **)buf);
        }
      }
      else
      {
        return 112;
      }
    }
    else
    {
      return 103;
    }
  }
  else
  {
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_1022B2BB0);
    }
    __int16 v16 = qword_102419308;
    if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = sub_100082064(*(void *)(a1 + 184));
      *(_DWORD *)long long __p = 67109376;
      *(_DWORD *)&__p[4] = v17;
      *(_WORD *)&__p[8] = 1024;
      *(_DWORD *)&__p[10] = sub_100082064(a1 + 72);
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[DB] One of the DBs is not accessible. Hot: %d, Cold %d", __p, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419300 != -1) {
        dispatch_once(&qword_102419300, &stru_1022B2BB0);
      }
      int v57 = sub_100082064(*(void *)(a1 + 184));
      *(_DWORD *)std::string buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v57;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = sub_100082064(a1 + 72);
      uint64_t v58 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CMError CMHealthColdStorageDb::syncFromHot(CFAbsoluteTime, const std::string &, std::shared_ptr<CLHealthColdStorageStats>)", "%s\n", v58);
      if (v58 != __p) {
        free(v58);
      }
    }
    return 109;
  }
  return v18;
}

void sub_10044C654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a47 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10044C7C4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  if (*(void *)(result + 200) != *(void *)(result + 208))
  {
    sub_10010F274((uint64_t)v22);
    uint64_t v3 = *(void *)(v2 + 200);
    uint64_t v4 = *(void *)(v2 + 208) - v3;
    if (v4)
    {
      unint64_t v5 = 0;
      unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
      do
      {
        uint64_t v7 = (unsigned __int8 *)(v3 + 24 * v5);
        signed __int8 v8 = v7[23];
        if (v8 >= 0) {
          uint64_t v9 = v7[23];
        }
        else {
          uint64_t v9 = *((void *)v7 + 1);
        }
        uint64_t v10 = *(unsigned __int8 *)(v2 + 295);
        int v11 = (char)v10;
        if ((v10 & 0x80u) != 0) {
          uint64_t v10 = *(void *)(v2 + 280);
        }
        if (v9 != v10) {
          goto LABEL_23;
        }
        if (v11 >= 0) {
          uint64_t v12 = (unsigned __int8 *)(v2 + 272);
        }
        else {
          uint64_t v12 = *(unsigned __int8 **)(v2 + 272);
        }
        if ((v7[23] & 0x80) != 0)
        {
          if (memcmp(*(const void **)v7, v12, *((void *)v7 + 1))) {
            goto LABEL_23;
          }
        }
        else if (v7[23])
        {
          double v13 = v7;
          uint64_t v14 = v7[23];
          while (*v13 == *v12)
          {
            ++v13;
            ++v12;
            if (!--v14) {
              goto LABEL_34;
            }
          }
LABEL_23:
          if (v6 - 1 == v5 || v6 - 2 == v5 && v6 - 1 == *(_DWORD *)(v2 + 308))
          {
            if (v8 >= 0) {
              uint64_t v15 = (uint64_t)v7;
            }
            else {
              uint64_t v15 = *(void *)v7;
            }
            sub_100132EFC(v23, v15, v9);
          }
          else
          {
            if (v8 >= 0) {
              uint64_t v16 = (uint64_t)v7;
            }
            else {
              uint64_t v16 = *(void *)v7;
            }
            int v17 = sub_100132EFC(v23, v16, v9);
            sub_100132EFC(v17, (uint64_t)",", 1);
          }
        }
LABEL_34:
        ++v5;
        uint64_t v3 = *(void *)(v2 + 200);
        unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v2 + 208) - v3) >> 3);
      }
      while (v6 > v5);
    }
    std::stringbuf::str();
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(_OWORD *)a2 = v20;
    *(void *)(a2 + 16) = v21;
    *(void *)((char *)v22
    v23[0] = v18;
    if (v24 < 0) {
      operator delete((void *)v23[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return std::ios::~ios();
  }
  return result;
}

void sub_10044CAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10044CADC(uint64_t a1, void *a2, int a3, int a4)
{
  if (*a2)
  {
    unint64_t v6 = (uint64_t **)(*a2 + 24);
    *(void *)std::string buf = a1 + 224;
    uint64_t v7 = sub_100450F00(v6, (const void **)(a1 + 224), (uint64_t)&unk_101D0B290, (long long **)buf);
    int v8 = *((_DWORD *)v7 + 15) - a4;
    *((_DWORD *)v7 + 14) += a3;
    *((_DWORD *)v7 + 15) = v8;
  }
  else
  {
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_1022B2BB0);
    }
    uint64_t v9 = qword_102419308;
    if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "[Database] ColdStorageStats not initialized.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419300 != -1) {
        dispatch_once(&qword_102419300, &stru_1022B2BB0);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CMHealthColdStorageDb::populateStats(std::shared_ptr<CLHealthColdStorageStats>, int, int)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

void sub_10044CCAC(uint64_t *a1)
{
  if (sub_100082064(a1 + 9))
  {
    sub_10002B640(a1[10]);
    sub_10010F274((uint64_t)buf);
    uint64_t v2 = sub_100132EFC(&v17, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, uint64_t *))(*a1 + 32))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      uint64_t v3 = __p;
    }
    else {
      uint64_t v3 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v4 = v15;
    }
    else {
      uint64_t v4 = (uint64_t)__p[1];
    }
    unint64_t v5 = sub_100132EFC(v2, (uint64_t)v3, v4);
    unint64_t v6 = sub_100132EFC(v5, (uint64_t)" SET ", 5);
    if (byte_10247AA67 >= 0) {
      uint64_t v7 = &qword_10247AA50;
    }
    else {
      uint64_t v7 = (uint64_t *)qword_10247AA50;
    }
    if (byte_10247AA67 >= 0) {
      uint64_t v8 = byte_10247AA67;
    }
    else {
      uint64_t v8 = unk_10247AA58;
    }
    uint64_t v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" = ? WHERE ROWID = ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      int v11 = __p;
    }
    else {
      int v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  if (qword_102419300 != -1) {
    dispatch_once(&qword_102419300, &stru_1022B2BB0);
  }
  uint64_t v12 = qword_102419308;
  if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "[DB] Unable to update UUID on records.", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_1022B2BB0);
    }
    LOWORD(__p[0]) = 0;
    double v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CMHealthColdStorageDb::updateRecordIDForRowIDs(const std::vector<int> &, const std::string &)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
}

void sub_10044D1D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32)
{
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
  sub_101A129A8((uint64_t)&a32);
  _Unwind_Resume(a1);
}

BOOL sub_10044D294(uint64_t a1)
{
  return *(void *)(a1 + 160) != 0;
}

uint64_t sub_10044D2A4(void *a1, uint64_t a2, void *a3)
{
  if (a3) {
    *a3 = 0;
  }
  if (a1[20])
  {
    if (sub_100082064(a1 + 9))
    {
      sub_10010F274((uint64_t)buf);
      unint64_t v5 = sub_100132EFC((uint64_t *)((char *)&v23 + 2), (uint64_t)"SELECT * FROM ", 14);
      (*(void (**)(void **__return_ptr, void *))(*a1 + 32))(__p, a1);
      if ((v20 & 0x80u) == 0) {
        unint64_t v6 = __p;
      }
      else {
        unint64_t v6 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v7 = v20;
      }
      else {
        uint64_t v7 = (uint64_t)__p[1];
      }
      uint64_t v8 = sub_100132EFC(v5, (uint64_t)v6, v7);
      uint64_t v9 = sub_100132EFC(v8, (uint64_t)" WHERE ", 7);
      if (byte_10247AA67 >= 0) {
        uint64_t v10 = &qword_10247AA50;
      }
      else {
        uint64_t v10 = (uint64_t *)qword_10247AA50;
      }
      if (byte_10247AA67 >= 0) {
        uint64_t v11 = byte_10247AA67;
      }
      else {
        uint64_t v11 = unk_10247AA58;
      }
      uint64_t v12 = sub_100132EFC(v9, (uint64_t)v10, v11);
      sub_100132EFC(v12, (uint64_t)" = ?", 4);
      if ((char)v20 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v13 = a1[10];
      std::stringbuf::str();
      if ((v20 & 0x80u) == 0) {
        uint64_t v14 = __p;
      }
      else {
        uint64_t v14 = (void **)__p[0];
      }
      sub_10014D518(v13, (uint64_t)v14);
    }
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_1022B2BB0);
    }
    unsigned __int8 v15 = qword_102419308;
    if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void **__return_ptr, void *))(*a1 + 32))(__p, a1);
      uint64_t v16 = (v20 & 0x80u) == 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v16;
      __int16 v22 = 2080;
      uint64_t v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "[DB] getRecordDataForID since db is not accessible for %s, recordID=%s", buf, 0x16u);
      if ((char)v20 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419300 != -1) {
        dispatch_once(&qword_102419300, &stru_1022B2BB0);
      }
      (*(void (**)(unsigned char *__return_ptr, void *))(*a1 + 32))(buf, a1);
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();
      if (v24 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CMHealthColdStorageDb::getRecordDataForID(const char *, NSData **, NSData **)", "%s\n", v18);
      if (v18 != (char *)__p) {
        free(v18);
      }
    }
  }
  return 0;
}

void sub_10044DF58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  sub_101A129A8((uint64_t)&STACK[0x6E0]);
  _Unwind_Resume(a1);
}

uint64_t sub_10044E06C(void *a1, void *a2, void *a3)
{
  id v5 = [[objc_msgSend(a2, "recordName") UTF8String];

  return sub_10044D2A4(a1, (uint64_t)v5, a3);
}

uint64_t sub_10044E0C8(void *a1)
{
  sub_10010F274((uint64_t)v21);
  uint64_t v2 = sub_100132EFC(v22, (uint64_t)"UPDATE ", 7);
  (*(void (**)(void **__return_ptr, void *))(*a1 + 32))(__p, a1);
  if ((v20 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v20 & 0x80u) == 0) {
    uint64_t v4 = v20;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  id v5 = sub_100132EFC(v2, (uint64_t)v3, v4);
  unint64_t v6 = sub_100132EFC(v5, (uint64_t)" SET ", 5);
  if (byte_10247AA4F >= 0) {
    uint64_t v7 = &qword_10247AA38;
  }
  else {
    uint64_t v7 = (uint64_t *)qword_10247AA38;
  }
  if (byte_10247AA4F >= 0) {
    uint64_t v8 = byte_10247AA4F;
  }
  else {
    uint64_t v8 = unk_10247AA40;
  }
  uint64_t v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
  uint64_t v10 = sub_100132EFC(v9, (uint64_t)" = ? WHERE ", 11);
  if (byte_10247AA67 >= 0) {
    uint64_t v11 = &qword_10247AA50;
  }
  else {
    uint64_t v11 = (uint64_t *)qword_10247AA50;
  }
  if (byte_10247AA67 >= 0) {
    uint64_t v12 = byte_10247AA67;
  }
  else {
    uint64_t v12 = unk_10247AA58;
  }
  uint64_t v13 = sub_100132EFC(v10, (uint64_t)v11, v12);
  sub_100132EFC(v13, (uint64_t)" = ?", 4);
  if ((char)v20 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v14 = a1[10];
  std::stringbuf::str();
  if ((v20 & 0x80u) == 0) {
    unsigned __int8 v15 = __p;
  }
  else {
    unsigned __int8 v15 = (void **)__p[0];
  }
  a1[44] = sub_100601D1C(v14, (uint64_t)v15);
  a1[45] = v16;
  if ((char)v20 < 0) {
    operator delete(__p[0]);
  }
  *(void *)((char *)v21
  v22[0] = v17;
  if (v23 < 0) {
    operator delete((void *)v22[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10044E350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10044E388(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = a1;
  if (!sub_100082064(a1 + 72)) {
    goto LABEL_15;
  }
  sub_1000E1294((uint64_t *)v14, (uint64_t)"CMHealthColdStorageDb.updateLocalSystemFieldsForRecord", 0);
  if (!sub_100F03BA8((void *)(v5 + 352))) {
    sub_10044E0C8((void *)v5);
  }
  if (!sub_100F03BA8((void *)(v5 + 352)))
  {
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_1022B2BB0);
    }
    uint64_t v10 = qword_102419308;
    if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[DB] SQL update statement is invalid.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419300 != -1) {
        dispatch_once(&qword_102419300, &stru_1022B2BB0);
      }
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CMHealthColdStorageDb::updateLocalSystemFieldsForRecord(CKRecordID *, NSData *)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    goto LABEL_14;
  }
  sub_100082068((void *)(v5 + 352), buf);
  if (!*(void *)buf)
  {
LABEL_14:
    sub_1000E1098(v14);
LABEL_15:
    LOBYTE(v5) = 0;
    return v5 & 1;
  }
  unint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)buf);
  if (sub_100604C54(v6, 1, a3)
    && (uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)buf),
        sub_100133F10(v7, 2, (char *)objc_msgSend(objc_msgSend(a2, "recordName"), "UTF8String"))))
  {
    uint64_t v5 = *(void *)(v5 + 80);
    uint64_t v8 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)buf);
    LOBYTE(v5) = sub_10001FEB0(v5, v8);
    char v9 = 0;
  }
  else
  {
    char v9 = 1;
  }
  uint64_t v12 = *(void *)buf;
  *(void *)std::string buf = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  sub_1000E1098(v14);
  if (v9) {
    goto LABEL_15;
  }
  return v5 & 1;
}

void sub_10044E634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10044E670(uint64_t result)
{
  *(unsigned char *)(result + 344) = 1;
  return result;
}

void sub_10044E67C(uint64_t *a1, void *a2)
{
  if (a2)
  {
    sub_100134750(v90, (char *)[[[a2 recordID] recordName] UTF8String]);
    if (a1[20])
    {
      sub_1000E1294((uint64_t *)v89, (uint64_t)"CMHealthColdStorageDb.handleFetchedRecord", 0);
      (*(void (**)(void **__return_ptr, uint64_t *))(*a1 + 32))(v87, a1);
      if (v88 >= 0) {
        uint64_t v4 = v87;
      }
      else {
        uint64_t v4 = (void **)v87[0];
      }
      if (sub_1005F93E4(a1[10], v4) & 1) != 0 || (sub_100449BAC(a1))
      {
        sub_100134750(&v86, (char *)[[[a1[20] columns] UTF8String];
        sub_10010F274((uint64_t)v83);
        __uuid_t dst = 0;
        uint64_t v80 = 0;
        unint64_t v82 = 0;
        sub_10044F458(v78, &v86, 8);
        v76[0] = 0;
        v76[1] = 0;
        uint64_t v77 = 0;
        for (int i = 1; ; ++i)
        {
          unint64_t v6 = sub_10044F5DC(v78, (uint64_t)v76, 0x2Cu);
          if ((*((unsigned char *)v6 + *(void *)(*v6 - 24) + 32) & 5) != 0) {
            break;
          }
          sub_100132EFC(v84, (uint64_t)"?,", 2);
          uint64_t v7 = __dst;
          if ((unint64_t)__dst >= v82)
          {
            char v9 = (void *)sub_1016FD368(&v80, (long long *)v76);
          }
          else
          {
            if (SHIBYTE(v77) < 0)
            {
              sub_1000DC48C(__dst, v76[0], (unint64_t)v76[1]);
            }
            else
            {
              long long v8 = *(_OWORD *)v76;
              *((void *)__dst + 2) = v77;
              *uint64_t v7 = v8;
            }
            char v9 = (char *)v7 + 24;
          }
          __uuid_t dst = v9;
        }
        sub_100132EFC(v84, (uint64_t)"?,?", 3);
        std::stringbuf::str();
        sub_10010F274((uint64_t)v71);
        uint64_t v70 = 0;
        if (sub_10044D2A4(a1, (uint64_t)objc_msgSend(objc_msgSend(objc_msgSend(a2, "recordID"), "recordName"), "UTF8String"), &v70))
        {
          if (v70)
          {
            uint64_t v10 = sub_100132EFC(v72, (uint64_t)"UPDATE ", 7);
            (*(void (**)(unsigned char *__return_ptr, uint64_t *))(*a1 + 32))(__p, a1);
            if ((v96 & 0x80u) == 0) {
              uint64_t v11 = __p;
            }
            else {
              uint64_t v11 = *(unsigned char **)__p;
            }
            if ((v96 & 0x80u) == 0) {
              uint64_t v12 = v96;
            }
            else {
              uint64_t v12 = *(void *)&__p[8];
            }
            uint64_t v13 = sub_100132EFC(v10, (uint64_t)v11, v12);
            sub_100132EFC(v13, (uint64_t)" SET ", 5);
            if ((char)v96 < 0) {
              operator delete(*(void **)__p);
            }
            uint64_t v14 = v80;
            for (uint64_t j = __dst; (void *)v14 != j; v14 += 24)
            {
              int v16 = *(char *)(v14 + 23);
              if (v16 >= 0) {
                uint64_t v17 = v14;
              }
              else {
                uint64_t v17 = *(void *)v14;
              }
              if (v16 >= 0) {
                uint64_t v18 = *(unsigned __int8 *)(v14 + 23);
              }
              else {
                uint64_t v18 = *(void *)(v14 + 8);
              }
              char v19 = sub_100132EFC(v72, v17, v18);
              sub_100132EFC(v19, (uint64_t)"=?, ", 4);
            }
            if (byte_10247AA67 >= 0) {
              unsigned __int8 v20 = &qword_10247AA50;
            }
            else {
              unsigned __int8 v20 = (uint64_t *)qword_10247AA50;
            }
            if (byte_10247AA67 >= 0) {
              uint64_t v21 = byte_10247AA67;
            }
            else {
              uint64_t v21 = unk_10247AA58;
            }
            __int16 v22 = sub_100132EFC(v72, (uint64_t)v20, v21);
            char v23 = sub_100132EFC(v22, (uint64_t)"=?, ", 4);
            if (byte_10247AA4F >= 0) {
              char v24 = &qword_10247AA38;
            }
            else {
              char v24 = (uint64_t *)qword_10247AA38;
            }
            if (byte_10247AA4F >= 0) {
              uint64_t v25 = byte_10247AA4F;
            }
            else {
              uint64_t v25 = unk_10247AA40;
            }
            uint64_t v26 = sub_100132EFC(v23, (uint64_t)v24, v25);
            sub_100132EFC(v26, (uint64_t)"=?", 2);
            int v27 = sub_100132EFC(v72, (uint64_t)" WHERE ", 7);
            if (byte_10247AA67 >= 0) {
              int v28 = &qword_10247AA50;
            }
            else {
              int v28 = (uint64_t *)qword_10247AA50;
            }
            if (byte_10247AA67 >= 0) {
              uint64_t v29 = byte_10247AA67;
            }
            else {
              uint64_t v29 = unk_10247AA58;
            }
            unsigned __int8 v30 = sub_100132EFC(v27, (uint64_t)v28, v29);
            uint64_t v31 = sub_100132EFC(v30, (uint64_t)" = ", 3);
            uint64_t v32 = sub_100132EFC(v31, (uint64_t)"\"", 1);
            uint64_t v33 = (const char *)[[[a2 recordID] recordName] UTF8String];
            size_t v34 = strlen(v33);
            unsigned __int8 v35 = sub_100132EFC(v32, (uint64_t)v33, v34);
            sub_100132EFC(v35, (uint64_t)"\"", 1);
          }
          else
          {
            int v44 = sub_100132EFC(v72, (uint64_t)"INSERT INTO ", 12);
            (*(void (**)(unsigned char *__return_ptr, uint64_t *))(*a1 + 32))(__p, a1);
            if ((v96 & 0x80u) == 0) {
              uint64_t v45 = __p;
            }
            else {
              uint64_t v45 = *(unsigned char **)__p;
            }
            if ((v96 & 0x80u) == 0) {
              uint64_t v46 = v96;
            }
            else {
              uint64_t v46 = *(void *)&__p[8];
            }
            uint64_t v47 = sub_100132EFC(v44, (uint64_t)v45, v46);
            unsigned int v48 = sub_100132EFC(v47, (uint64_t)"( ", 2);
            if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              CFStringRef v49 = &v86;
            }
            else {
              CFStringRef v49 = (std::string *)v86.__r_.__value_.__r.__words[0];
            }
            if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v86.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v86.__r_.__value_.__l.__size_;
            }
            unint64_t v51 = sub_100132EFC(v48, (uint64_t)v49, size);
            __int16 v52 = sub_100132EFC(v51, (uint64_t)",", 1);
            if (byte_10247AA67 >= 0) {
              int v53 = &qword_10247AA50;
            }
            else {
              int v53 = (uint64_t *)qword_10247AA50;
            }
            if (byte_10247AA67 >= 0) {
              uint64_t v54 = byte_10247AA67;
            }
            else {
              uint64_t v54 = unk_10247AA58;
            }
            uint64_t v55 = sub_100132EFC(v52, (uint64_t)v53, v54);
            uint64_t v56 = sub_100132EFC(v55, (uint64_t)",", 1);
            if (byte_10247AA4F >= 0) {
              int v57 = &qword_10247AA38;
            }
            else {
              int v57 = (uint64_t *)qword_10247AA38;
            }
            if (byte_10247AA4F >= 0) {
              uint64_t v58 = byte_10247AA4F;
            }
            else {
              uint64_t v58 = unk_10247AA40;
            }
            double v59 = sub_100132EFC(v56, (uint64_t)v57, v58);
            unsigned int v60 = sub_100132EFC(v59, (uint64_t)") VALUES(", 12);
            if ((v75 & 0x80u) == 0) {
              uint64_t v61 = v74;
            }
            else {
              uint64_t v61 = (void **)v74[0];
            }
            if ((v75 & 0x80u) == 0) {
              uint64_t v62 = v75;
            }
            else {
              uint64_t v62 = (uint64_t)v74[1];
            }
            int v63 = sub_100132EFC(v60, (uint64_t)v61, v62);
            sub_100132EFC(v63, (uint64_t)")", 1);
            if ((char)v96 < 0) {
              operator delete(*(void **)__p);
            }
          }
          uint64_t v64 = a1[10];
          std::stringbuf::str();
          if ((v96 & 0x80u) == 0) {
            int v65 = __p;
          }
          else {
            int v65 = *(unsigned char **)__p;
          }
          sub_10014D518(v64, (uint64_t)v65);
        }
        if (qword_102419300 != -1) {
          dispatch_once(&qword_102419300, &stru_1022B2BB0);
        }
        int v36 = qword_102419308;
        if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_ERROR))
        {
          uint64_t v37 = v90;
          if (v91 < 0) {
            uint64_t v37 = (void **)v90[0];
          }
          int v38 = v87;
          if (v88 < 0) {
            int v38 = (void **)v87[0];
          }
          *(_DWORD *)long long __p = 136315394;
          *(void *)&__p[4] = v37;
          *(_WORD *)&unsigned char __p[12] = 2080;
          *(void *)&__p[14] = v38;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "[DB] Unable to verify if fetched record exists, ignore record=%s, for table %s", __p, 0x16u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(__p, 0x65CuLL);
          if (qword_102419300 != -1) {
            dispatch_once(&qword_102419300, &stru_1022B2BB0);
          }
          uint64_t v39 = v90;
          if (v91 < 0) {
            uint64_t v39 = (void **)v90[0];
          }
          CFAbsoluteTime v40 = v87;
          if (v88 < 0) {
            CFAbsoluteTime v40 = (void **)v87[0];
          }
          v92[0] = 136315394;
          *(void *)&v92[1] = v39;
          __int16 v93 = 2080;
          int v94 = v40;
          int v41 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CMHealthColdStorageDb::handleFetchedRecord(CKRecord *)", "%s\n", v41);
          if (v41 != __p) {
            free(v41);
          }
        }
        *(void *)((char *)v71
                              - 24)) = v68;
        uint64_t v69 = v67;
        v72[0] = v67;
        if (v73 < 0) {
          operator delete((void *)v72[9]);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        std::ios::~ios();
        if ((char)v75 < 0) {
          operator delete(v74[0]);
        }
        if (SHIBYTE(v77) < 0) {
          operator delete(v76[0]);
        }
        *(void (__cdecl ***)(std::istringstream *__hidden))((char *)v78
        if (v79 < 0) {
          operator delete(v78[10]);
        }
        std::streambuf::~streambuf();
        std::istream::~istream();
        std::ios::~ios();
        *(void *)long long __p = &v80;
        sub_1000A7B4C((void ***)__p);
        v83[0] = v66;
        *(void *)((char *)v83 + *(void *)(v66 - 24)) = v68;
        v84[0] = v69;
        if (v85 < 0) {
          operator delete((void *)v84[9]);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        std::ios::~ios();
        if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v86.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        if (qword_102419300 != -1) {
          dispatch_once(&qword_102419300, &stru_1022B2BB0);
        }
        double v42 = qword_102419308;
        if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long __p = 0;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "[DB] unable to create table when handling fetched records", __p, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(__p, 0x65CuLL);
          if (qword_102419300 != -1) {
            dispatch_once(&qword_102419300, &stru_1022B2BB0);
          }
          LOWORD(v83[0]) = 0;
          __int16 v43 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CMHealthColdStorageDb::handleFetchedRecord(CKRecord *)", "%s\n", v43);
          if (v43 != __p) {
            free(v43);
          }
        }
      }
      if (v88 < 0) {
        operator delete(v87[0]);
      }
      sub_1000E1098(v89);
    }
    if (v91 < 0) {
      operator delete(v90[0]);
    }
  }
}

void sub_10044F320(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x3D7]) < 0) {
    operator delete((void *)STACK[0x3C0]);
  }
  sub_1000E1098((id *)&STACK[0x3D8]);
  if (SLOBYTE(STACK[0x3FF]) < 0) {
    operator delete((void *)STACK[0x3E8]);
  }
  _Unwind_Resume(a1);
}

void (__cdecl ***sub_10044F458(void (__cdecl ***a1)(std::istringstream *__hidden this), const std::string *a2, int a3))(std::istringstream *__hidden this)
{
  uint64_t v6 = (uint64_t)(a1 + 2);
  *a1 = v8;
  *(void *)((char *)*(v8 - 3) + (void)a1) = v7;
  a1[1] = 0;
  char v9 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  std::ios_base::init(v9, a1 + 2);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  sub_100450D4C(v6, a2, a3 | 8);
  return a1;
}

void sub_10044F5B4(_Unwind_Exception *a1)
{
}

void *sub_10044F5DC(void *a1, uint64_t a2, unsigned __int8 a3)
{
  std::istream::sentry::sentry();
  if (!v11) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    long long v8 = (unsigned char *)v7[3];
    if (v8 != (unsigned char *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
    if (v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_10044F73C(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x10044F6FCLL);
  }
  __cxa_rethrow();
}

void sub_10044F7B8(_Unwind_Exception *a1)
{
}

uint64_t sub_10044F7CC(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  std::ios::~ios();
  return a1;
}

BOOL sub_10044F8D0(uint64_t a1)
{
  uint64_t v2 = a1 + 112;
  uint64_t v3 = a1 + 72;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 16))(a1 + 112);
  if (sub_100082064(v3))
  {
    double Current = CFAbsoluteTimeGetCurrent();
    if (qword_10247AA98 != -1) {
      dispatch_once(&qword_10247AA98, &stru_1022B2BD0);
    }
    int v5 = dword_10247AA90;
    int v6 = sub_10003CC68(*(void *)(a1 + 80), dword_10247AA90);
    BOOL v7 = v6 == 0;
    double v8 = CFAbsoluteTimeGetCurrent();
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_1022B2BB0);
    }
    int v9 = qword_102419308;
    if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 134349568;
      double v13 = v8 - Current;
      __int16 v14 = 2050;
      uint64_t v15 = v6;
      __int16 v16 = 1026;
      int v17 = v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[DB] Time taken for incrementalVacuum, %{public}.2f ReduceFreePagesStatus, %{public}lu, incrementalVacuumPageLimit : %{public}d", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419300 != -1) {
        dispatch_once(&qword_102419300, &stru_1022B2BB0);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CMHealthColdStorageDb::performIncrementalDbVacuum()", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  else
  {
    BOOL v7 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v7;
}

void sub_10044FBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10044FBD8(uint64_t a1)
{
  sub_100451040(a1);

  operator delete();
}

char *sub_10044FC10@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[247] < 0) {
    return (char *)sub_1000DC48C((unsigned char *)a2, *((void **)result + 28), *((void *)result + 29));
  }
  *(_OWORD *)a2 = *((_OWORD *)result + 14);
  *(void *)(a2 + 16) = *((void *)result + 30);
  return result;
}

uint64_t sub_10044FC3C(uint64_t a1)
{
  return sub_100451040(a1 - 72);
}

void sub_10044FC44(uint64_t a1)
{
  sub_100451040(a1 - 72);

  operator delete();
}

char *sub_10044FC80@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[175] < 0) {
    return (char *)sub_1000DC48C((unsigned char *)a2, *((void **)result + 19), *((void *)result + 20));
  }
  *(_OWORD *)a2 = *(_OWORD *)(result + 152);
  *(void *)(a2 + 16) = *((void *)result + 21);
  return result;
}

void sub_10044FCAC(id a1)
{
  qword_102419308 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HealthColdStorage");
}

void sub_10044FCDC(id a1)
{
  sub_10044FD20(v1, "HealthColdStorageVacuumPageLimitKey", &dword_101D1EEB0, 0);
  dword_10247AA90 = v2;
}

unsigned __int8 *sub_10044FD20(unsigned __int8 *a1, const char *a2, _DWORD *a3, unsigned __int8 a4)
{
  *a1 = 0;
  *((_DWORD *)a1 + 1) = *a3;
  int v6 = a1 + 4;
  a1[8] = a4;
  uint64_t v7 = sub_1000D3E78();
  sub_10006B564(v7, buf);
  *a1 = sub_10006EF84(*(uint64_t *)buf, a2, v6);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_10010F274((uint64_t)v28);
  std::ostream::operator<<();
  if (!a1[8])
  {
    if (*a1)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B2BF0);
      }
      uint64_t v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = *a1;
        std::stringbuf::str();
        uint64_t v12 = SBYTE3(v34) >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = a2;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v11;
        __int16 v36 = 2080;
        uint64_t v37 = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d,value,%s", buf, 0x1Cu);
        if (SBYTE3(v34) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_47;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B2BF0);
      }
      int v13 = *a1;
      std::stringbuf::str();
      if (v27 >= 0) {
        __int16 v14 = v26;
      }
      else {
        __int16 v14 = (void **)v26[0];
      }
      *(_DWORD *)long long __p = 136315650;
      *(void *)&__p[4] = a2;
      __int16 v31 = 1024;
      int v32 = v13;
      __int16 v33 = 2080;
      size_t v34 = v14;
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      if (v27 < 0) {
        operator delete(v26[0]);
      }
    }
    else
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B2BF0);
      }
      char v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        int v20 = *a1;
        std::stringbuf::str();
        uint64_t v21 = SBYTE3(v34) >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = a2;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v20;
        __int16 v36 = 2080;
        uint64_t v37 = v21;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "motion default,%s,set,%d,value,%s", buf, 0x1Cu);
        if (SBYTE3(v34) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_47;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B2BF0);
      }
      int v24 = *a1;
      std::stringbuf::str();
      if (v27 >= 0) {
        uint64_t v25 = v26;
      }
      else {
        uint64_t v25 = (void **)v26[0];
      }
      *(_DWORD *)long long __p = 136315650;
      *(void *)&__p[4] = a2;
      __int16 v31 = 1024;
      int v32 = v24;
      __int16 v33 = 2080;
      size_t v34 = v25;
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      if (v27 < 0) {
        operator delete(v26[0]);
      }
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "CLMotionDefaultsWrite<int>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = int]", "%s\n", v15);
    if (v15 == buf) {
      goto LABEL_47;
    }
    goto LABEL_58;
  }
  if (*a1)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022B2BF0);
    }
    double v8 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *a1;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 == -1)
      {
LABEL_36:
        int v18 = *a1;
        *(_DWORD *)long long __p = 136315394;
        *(void *)&__p[4] = a2;
        __int16 v31 = 1024;
        int v32 = v18;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLMotionDefaultsWrite<int>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = int]", "%s\n", v15);
        if (v15 == buf) {
          goto LABEL_47;
        }
LABEL_58:
        free(v15);
        goto LABEL_47;
      }
LABEL_59:
      dispatch_once(&qword_102418FD0, &stru_1022B2BF0);
      goto LABEL_36;
    }
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022B2BF0);
    }
    __int16 v16 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      int v17 = *a1;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "motion default,%s,set,%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 == -1) {
        goto LABEL_36;
      }
      goto LABEL_59;
    }
  }
LABEL_47:
  *(void *)((char *)v28
  v28[2] = v22;
  if (v29 < 0) {
    operator delete((void *)v28[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return a1;
}

void sub_100450578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004505C8(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1004505F8(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 32 * a3;
    do
    {
      sub_100450670(a1, a2, (uint64_t)a2);
      a2 += 32;
      v5 -= 32;
    }
    while (v5);
  }
  return a1;
}

void sub_10045065C(_Unwind_Exception *a1)
{
  sub_1002220F0(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100450670(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    int v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (int i = *v13; i; int i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_1004508F0(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  int i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_1004508CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_10022251C((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_1004508F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x30uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = v8 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    uint64_t result = sub_1000DC48C(result, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)a3;
    *((void *)v8 + 4) = *(void *)(a3 + 16);
  }
  *((_DWORD *)v8 + 10) = *(_DWORD *)(a3 + 24);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_100450980(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_10022251C(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_10045099C()
{
  return 3;
}

void *sub_1004509A4(void *a1)
{
  *a1 = off_1022B2C20;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void sub_1004509E8(void *a1)
{
  *a1 = off_1022B2C20;
  sub_1003BE1F8(a1 + 1);

  operator delete();
}

void *sub_100450A4C(void *a1, char *a2, uint64_t a3, int a4, float a5)
{
  sub_100134750(__p, "");
  sub_1011F8748((uint64_t)a1, a2, a4, a3, a5, (uint64_t)__p, 1, 0);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_1022B2CA0;
  sub_100134750(a1 + 13, a2);
  return a1;
}

void sub_100450B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_1011F8AE0(v15);
  _Unwind_Resume(a1);
}

void sub_100450B34(uint64_t a1)
{
  sub_100450B98(a1);

  operator delete();
}

char *sub_100450B6C@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[127] < 0) {
    return (char *)sub_1000DC48C((unsigned char *)a2, *((void **)result + 13), *((void *)result + 14));
  }
  *(_OWORD *)a2 = *(_OWORD *)(result + 104);
  *(void *)(a2 + 16) = *((void *)result + 15);
  return result;
}

uint64_t sub_100450B98(uint64_t a1)
{
  *(void *)a1 = off_1022B2CA0;
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }

  return sub_1011F8AE0(a1);
}

void *sub_100450BF8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022B2D08;
  result[1] = v3;
  return result;
}

uint64_t sub_100450C40(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022B2D08;
  a2[1] = v2;
  return result;
}

uint64_t sub_100450C6C(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  return (*(uint64_t (**)(void, void))(a1 + 8))(*a2, *a3);
}

uint64_t sub_100450C7C(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_1022B2D88)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100450CBC()
{
  return &off_1022B2D88;
}

void *sub_100450CC8(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1001DCF60(a1, a2);
    int v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_100450D30(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100450D4C(uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6 = std::streambuf::basic_streambuf();
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  sub_100450DEC(a1);
  return a1;
}

void sub_100450DC8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void sub_100450DEC(uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
  uint64_t v2 = (std::string *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    uint64_t v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }
  else
  {
    uint64_t v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        uint64_t v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 48) = v4;
      }
      if (v5) {
        *(void *)(a1 + 48) = (char *)v4 + v5;
      }
    }
  }
}

uint64_t *sub_100450F00(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  int v6 = (uint64_t **)sub_1001070AC((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_100450F98((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000EDF90(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

unsigned char *sub_100450F98@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = v6 + 32;
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_1000DC48C(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)uint64_t result = v9;
  }
  *((void *)v6 + 7) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_100451024(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_1001F7F34(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_100451040(uint64_t a1)
{
  *(void *)a1 = off_1022B2B00;
  uint64_t v2 = a1 + 72;
  *(void *)(a1 + 72) = off_1022B2B38;
  uint64_t v3 = *(void **)(a1 + 320);
  if (v3)
  {
    *(void *)(a1 + 328) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 295) < 0) {
    operator delete(*(void **)(a1 + 272));
  }
  if (*(char *)(a1 + 271) < 0) {
    operator delete(*(void **)(a1 + 248));
  }
  if (*(char *)(a1 + 247) < 0) {
    operator delete(*(void **)(a1 + 224));
  }
  std::string::size_type v7 = (void **)(a1 + 200);
  sub_1000A7B4C(&v7);
  uint64_t v4 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  sub_1011F8AE0(v2);
  *(void *)a1 = off_1022ADAD8;
  sub_1003BE1F8((void *)(a1 + 8));
  return a1;
}

uint64_t sub_100451184()
{
  sub_100134750(&qword_10247AA38, "systemFields");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247AA38, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247AA50, "recordID");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247AA50, (void *)&_mh_execute_header);
  sub_100134750(v2, "SmoothedGaitMetricsHistory");
  int v3 = 3;
  sub_100134750(v4, "ElevationGradeHistory");
  int v5 = 3;
  sub_100134750(v6, "PredictedWalkDistanceBoutHistory");
  int v7 = 28;
  sub_100134750(v8, "WalkingSpeedStrideCal");
  int v9 = 28;
  sub_100134750(v10, "StrideCalHistory");
  int v11 = 28;
  sub_100134750(v12, "MobilityBoutMetricsHistory");
  int v13 = 90;
  sub_100134750(v14, "HRRecoveryInputHRHistory");
  int v15 = 180;
  sub_100134750(v16, "HRRecoveryInputWRHistory");
  int v17 = 180;
  sub_100134750(v18, "HRRecoverySessionHistory");
  int v19 = 180;
  sub_100134750(v20, "VO2MaxInputHistory");
  int v21 = 730;
  sub_100134750(v22, "VO2MaxHistory");
  int v23 = 730;
  sub_100134750(v24, "VO2MaxSessionAttributesHistory");
  int v25 = 730;
  sub_100134750(v26, "VO2MaxSummaryHistory");
  int v27 = 730;
  sub_1004505F8((uint64_t)&unk_10247AA68, v2, 13);
  uint64_t v0 = 416;
  do
  {
    if ((char)v2[v0 - 9] < 0) {
      operator delete(*(void **)&v2[v0 - 32]);
    }
    v0 -= 32;
  }
  while (v0);
  return __cxa_atexit((void (*)(void *))sub_1004482C0, &unk_10247AA68, (void *)&_mh_execute_header);
}

void sub_10045140C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = 416;
  while (1)
  {
    if (*(char *)(v10 + v12 - 9) < 0) {
      operator delete(*(void **)(v10 + v12 - 32));
    }
    v12 -= 32;
    if (!v12) {
      _Unwind_Resume(exception_object);
    }
  }
}

void sub_10045148C()
{
}

void sub_100451494(uint64_t a1, void *a2)
{
  sub_100451610(a1);
  uint64_t v4 = 0;
  int v5 = (char *)*a2;
  a2[1] = *a2;
  int v6 = a2 + 2;
  do
  {
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 == *(void *)(a1 + 16)) {
      int v8 = 0;
    }
    else {
      int v8 = *(_DWORD *)(v7 + 4 * v4);
    }
    double v9 = 1.60000002;
    if (v4)
    {
      if (v4 == 10) {
        double v9 = 10.7;
      }
      else {
        double v9 = (double)(unint64_t)(v4 - 1) + 1.60000002 + 0.5;
      }
    }
    if ((unint64_t)v5 >= *v6)
    {
      uint64_t v11 = (uint64_t)&v5[-*a2] >> 3;
      if ((unint64_t)(v11 + 1) >> 61) {
        sub_1001D7FD4();
      }
      uint64_t v12 = *v6 - *a2;
      uint64_t v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
        uint64_t v13 = v11 + 1;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v13;
      }
      float v16 = (char *)sub_1000DA54C((uint64_t)(a2 + 2), v14);
      int v17 = &v16[8 * v11];
      float v18 = v9;
      *(float *)int v17 = v18;
      *((_DWORD *)v17 + 1) = v8;
      unint64_t v20 = (char *)*a2;
      int v19 = (char *)a2[1];
      int v21 = v17;
      if (v19 != (char *)*a2)
      {
        do
        {
          uint64_t v22 = *((void *)v19 - 1);
          v19 -= 8;
          *((void *)v21 - 1) = v22;
          v21 -= 8;
        }
        while (v19 != v20);
        int v19 = (char *)*a2;
      }
      int v5 = v17 + 8;
      *a2 = v21;
      a2[1] = v17 + 8;
      a2[2] = &v16[8 * v15];
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      float v10 = v9;
      *(float *)int v5 = v10;
      *((_DWORD *)v5 + 1) = v8;
      v5 += 8;
    }
    a2[1] = v5;
    ++v4;
  }
  while (v4 != 11);
}

uint64_t sub_100451610(uint64_t result)
{
  if (*(double *)result == 1.79769313e308)
  {
    uint64_t v1 = (void *)result;
    uint64_t v2 = (void **)(result + 8);
    *(void *)(result + 16) = *(void *)(result + 8);
    CFTypeRef v32 = 0;
    uint64_t v27 = sub_1000A6958();
    int v3 = sub_1004D01D8(v27, @"FallMetMinuteTable", &v32);
    CFTypeRef v4 = v32;
    if (v32) {
      int v5 = v3;
    }
    else {
      int v5 = 0;
    }
    if (v5 == 1)
    {
      uint64_t v6 = objc_opt_class();
      id v7 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", +[NSSet setWithObjects:](NSSet, "setWithObjects:", v6, objc_opt_class(), 0), v4, 0);
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      id v8 = [v7 countByEnumeratingWithState:&v28 objects:v34 count:16];
      if (v8)
      {
        uint64_t v9 = *(void *)v29;
        do
        {
          for (int i = 0; i != v8; int i = (char *)i + 1)
          {
            if (*(void *)v29 != v9) {
              objc_enumerationMutation(v7);
            }
            unsigned int v11 = [*(id *)(*((void *)&v28 + 1) + 8 * i) longValue];
            unsigned int v12 = v11;
            unint64_t v14 = (unsigned int *)v1[2];
            unint64_t v13 = v1[3];
            if ((unint64_t)v14 >= v13)
            {
              float v16 = (unsigned int *)*v2;
              uint64_t v17 = ((char *)v14 - (unsigned char *)*v2) >> 2;
              unint64_t v18 = v17 + 1;
              if ((unint64_t)(v17 + 1) >> 62) {
                sub_1001D7FD4();
              }
              uint64_t v19 = v13 - (void)v16;
              if (v19 >> 1 > v18) {
                unint64_t v18 = v19 >> 1;
              }
              if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v20 = v18;
              }
              if (v20)
              {
                int v21 = (char *)sub_10017EA34((uint64_t)(v1 + 3), v20);
                float v16 = (unsigned int *)v1[1];
                unint64_t v14 = (unsigned int *)v1[2];
              }
              else
              {
                int v21 = 0;
              }
              uint64_t v22 = (unsigned int *)&v21[4 * v17];
              *uint64_t v22 = v12;
              uint64_t v15 = v22 + 1;
              while (v14 != v16)
              {
                unsigned int v23 = *--v14;
                *--uint64_t v22 = v23;
              }
              v1[1] = v22;
              v1[2] = v15;
              v1[3] = &v21[4 * v20];
              if (v16) {
                operator delete(v16);
              }
            }
            else
            {
              *unint64_t v14 = v11;
              uint64_t v15 = v14 + 1;
            }
            v1[2] = v15;
          }
          id v8 = [v7 countByEnumeratingWithState:&v28 objects:v34 count:16];
        }
        while (v8);
      }
    }
    CFTypeRef v33 = 0;
    int v24 = sub_1004D01D8(v27, @"FallMetMinuteComputeTime", &v33);
    if (v33) {
      int v25 = v24;
    }
    else {
      int v25 = 0;
    }
    if (v25 == 1)
    {
      [+[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClass:fromData:error:", objc_opt_class(), v33, 0) timeIntervalSinceReferenceDate];
      *uint64_t v1 = v26;
    }
    return sub_100452340((uint64_t)v1);
  }
  return result;
}

void sub_1004518C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int buf,int a24,long long a25)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022B2DA8);
    }
    int v25 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_ERROR))
    {
      std::string buf = 68289026;
      a24 = 0;
      LOWORD(a25) = 2082;
      *(void *)((char *)&a25 + 2) = "";
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"MaxMETs,Failed to receive correct MET minutes from plist.\"}", (uint8_t *)&buf, 0x12u);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022B2DA8);
      }
    }
    uint64_t v26 = qword_1024190F8;
    if (os_signpost_enabled((os_log_t)qword_1024190F8))
    {
      std::string buf = 68289026;
      a24 = 0;
      LOWORD(a25) = 2082;
      *(void *)((char *)&a25 + 2) = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v26, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "MaxMETs,Failed to receive correct MET minutes from plist.", "{\"msg%{public}.0s\":\"MaxMETs,Failed to receive correct MET minutes from plist.\"}", (uint8_t *)&buf, 0x12u);
    }
    objc_end_catch();
    JUMPOUT(0x100451814);
  }
  _Unwind_Resume(a1);
}

BOOL sub_100451A1C(uint64_t a1, void *a2, double a3, double a4, double a5, double a6)
{
  if (a2 && [a2 count])
  {
    sub_100451610(a1);
    double v11 = *(double *)a1;
    long long v77 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    id v12 = [a2 countByEnumeratingWithState:&v77 objects:v93 count:16];
    if (v12)
    {
      uint64_t v14 = *(void *)v78;
      while (2)
      {
        uint64_t v15 = 0;
        do
        {
          if (*(void *)v78 != v14) {
            objc_enumerationMutation(a2);
          }
          float v16 = *(void **)(*((void *)&v77 + 1) + 8 * (void)v15);
          [objc_msgSend(v16, "startDate") timeIntervalSinceReferenceDate];
          if (v11 <= v17)
          {
            [objc_msgSend(v16, "averageIntensity") doubleValue];
            if (v24 < 0.0)
            {
              if (qword_1024190F0 != -1) {
                dispatch_once(&qword_1024190F0, &stru_1022B2DA8);
              }
              double v59 = qword_1024190F8;
              if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_FAULT))
              {
                [objc_msgSend(v16, "startDate") timeIntervalSinceReferenceDate];
                uint64_t v61 = v60;
                [objc_msgSend(v16, "averageIntensity") doubleValue];
                *(_DWORD *)std::string buf = 68289539;
                int v82 = 0;
                __int16 v83 = 2082;
                uint64_t v84 = "";
                __int16 v85 = 2049;
                *(void *)std::string v86 = v61;
                *(_WORD *)&v86[8] = 1025;
                *(_DWORD *)unint64_t v87 = (int)v62;
                _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"MaxMETs,Invalid MET minute input.\", \"MET Minute time_s\":\"%{private}.09f\", \"MET value\":%{private}d}", buf, 0x22u);
                if (qword_1024190F0 != -1) {
                  dispatch_once(&qword_1024190F0, &stru_1022B2DA8);
                }
              }
              int v63 = qword_1024190F8;
              if (os_signpost_enabled((os_log_t)qword_1024190F8))
              {
                [objc_msgSend(v16, "startDate") timeIntervalSinceReferenceDate];
                uint64_t v65 = v64;
                [objc_msgSend(v16, "averageIntensity") doubleValue];
                *(_DWORD *)std::string buf = 68289539;
                int v82 = 0;
                __int16 v83 = 2082;
                uint64_t v84 = "";
                __int16 v85 = 2049;
                *(void *)std::string v86 = v65;
                *(_WORD *)&v86[8] = 1025;
                *(_DWORD *)unint64_t v87 = (int)v66;
                _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v63, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "MaxMETs,Invalid MET minute input.", "{\"msg%{public}.0s\":\"MaxMETs,Invalid MET minute input.\", \"MET Minute time_s\":\"%{private}.09f\", \"MET value\":%{private}d}", buf, 0x22u);
              }
              return 0;
            }
            [objc_msgSend(v16, "startDate") timeIntervalSinceReferenceDate];
            double v11 = v25 + 60.0;
          }
          else
          {
            if (qword_1024190F0 != -1) {
              dispatch_once(&qword_1024190F0, &stru_1022B2DA8);
            }
            unint64_t v18 = qword_1024190F8;
            if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_ERROR))
            {
              double v19 = *(double *)a1;
              [objc_msgSend(v16, "startDate") timeIntervalSinceReferenceDate];
              *(_DWORD *)std::string buf = 68289539;
              int v82 = 0;
              __int16 v83 = 2082;
              uint64_t v84 = "";
              __int16 v85 = 2049;
              *(double *)std::string v86 = v19;
              *(_WORD *)&v86[8] = 2049;
              *(void *)unint64_t v87 = v20;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"MaxMETs,Invalid MET minute input.\", \"MRU time_s\":\"%{private}.09f\", \"Input time_s\":\"%{private}.09f\"}", buf, 0x26u);
              if (qword_1024190F0 != -1) {
                dispatch_once(&qword_1024190F0, &stru_1022B2DA8);
              }
            }
            int v21 = qword_1024190F8;
            if (os_signpost_enabled((os_log_t)qword_1024190F8))
            {
              double v22 = *(double *)a1;
              [objc_msgSend(v16, "startDate") timeIntervalSinceReferenceDate];
              *(_DWORD *)std::string buf = 68289539;
              int v82 = 0;
              __int16 v83 = 2082;
              uint64_t v84 = "";
              __int16 v85 = 2049;
              *(double *)std::string v86 = v22;
              *(_WORD *)&v86[8] = 2049;
              *(void *)unint64_t v87 = v23;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "MaxMETs,Invalid MET minute input.", "{\"msg%{public}.0s\":\"MaxMETs,Invalid MET minute input.\", \"MRU time_s\":\"%{private}.09f\", \"Input time_s\":\"%{private}.09f\"}", buf, 0x26u);
            }
          }
          uint64_t v15 = (char *)v15 + 1;
        }
        while (v12 != v15);
        id v12 = [a2 countByEnumeratingWithState:&v77 objects:v93 count:16];
        if (v12) {
          continue;
        }
        break;
      }
    }
    long long __p = 0;
    unsigned __int8 v75 = 0;
    unint64_t v76 = 0;
    if (a3 < a4)
    {
      *(void *)&long long v13 = 68290307;
      long long v68 = v13;
      do
      {
        long long v72 = 0u;
        long long v73 = 0u;
        long long v70 = 0u;
        long long v71 = 0u;
        id v26 = [a2 countByEnumeratingWithState:&v70 objects:v92 count:16];
        double v28 = a3 + a5;
        if (v26)
        {
          uint64_t v29 = *(void *)v71;
          do
          {
            for (int i = 0; i != v26; int i = (char *)i + 1)
            {
              if (*(void *)v71 != v29) {
                objc_enumerationMutation(a2);
              }
              long long v31 = *(void **)(*((void *)&v70 + 1) + 8 * i);
              [objc_msgSend(v31, "startDate") timeIntervalSinceReferenceDate];
              if (a3 <= v32)
              {
                [objc_msgSend(v31, "startDate") timeIntervalSinceReferenceDate];
                if (v33 < v28)
                {
                  [objc_msgSend(v31, "averageIntensity") doubleValue];
                  if (v34 > 1.60000002)
                  {
                    [objc_msgSend(v31, "averageIntensity") doubleValue];
                    uint64_t v36 = v35;
                    uint64_t v37 = v75;
                    if ((unint64_t)v75 >= v76)
                    {
                      uint64_t v39 = (double *)__p;
                      int64_t v40 = ((char *)v75 - (unsigned char *)__p) >> 3;
                      unint64_t v41 = v40 + 1;
                      if ((unint64_t)(v40 + 1) >> 61) {
                        sub_1001D7FD4();
                      }
                      uint64_t v42 = v76 - (void)__p;
                      if ((uint64_t)(v76 - (void)__p) >> 2 > v41) {
                        unint64_t v41 = v42 >> 2;
                      }
                      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v43 = v41;
                      }
                      if (v43)
                      {
                        int v44 = (char *)sub_1000DA54C((uint64_t)&v76, v43);
                        uint64_t v39 = (double *)__p;
                        uint64_t v37 = v75;
                      }
                      else
                      {
                        int v44 = 0;
                      }
                      uint64_t v45 = (double *)&v44[8 * v40];
                      *(void *)uint64_t v45 = v36;
                      int v38 = v45 + 1;
                      while (v37 != v39)
                      {
                        uint64_t v46 = *((void *)v37-- - 1);
                        *((void *)v45-- - 1) = v46;
                      }
                      long long __p = v45;
                      unsigned __int8 v75 = v38;
                      unint64_t v76 = (unint64_t)&v44[8 * v43];
                      if (v39) {
                        operator delete(v39);
                      }
                    }
                    else
                    {
                      *(void *)unsigned __int8 v75 = v35;
                      int v38 = v37 + 1;
                    }
                    unsigned __int8 v75 = v38;
                  }
                }
              }
            }
            id v26 = [a2 countByEnumeratingWithState:&v70 objects:v92 count:16];
          }
          while (v26);
        }
        uint64_t v47 = (double *)__p;
        unsigned int v48 = v75;
        int64_t v49 = (char *)v75 - (unsigned char *)__p;
        if (a6 >= 0.0)
        {
          uint64_t v51 = v49 >> 3;
          double v27 = 1.0;
          if (a6 <= 1.0)
          {
            double v27 = (double)(unint64_t)v51 * a6;
            unint64_t v50 = (unint64_t)v27;
          }
          else
          {
            unint64_t v50 = v51 - 1;
          }
        }
        else
        {
          unint64_t v50 = 0;
        }
        if (v75 != __p)
        {
          __int16 v52 = (double *)((char *)__p + 8 * v50);
          if (v52 != v75)
          {
            sub_10039BFC4((double *)__p, v52, v75, v27);
            uint64_t v47 = (double *)__p;
          }
          double v53 = v47[v50];
          if (qword_1024190F0 != -1) {
            dispatch_once(&qword_1024190F0, &stru_1022B2DA8);
          }
          uint64_t v54 = qword_1024190F8;
          if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)std::string buf = v68;
            int v82 = 0;
            __int16 v83 = 2082;
            uint64_t v84 = "";
            __int16 v85 = 1025;
            *(_DWORD *)std::string v86 = (unint64_t)v49 >> 3;
            *(_WORD *)&v86[4] = 1025;
            *(_DWORD *)&v86[6] = v50;
            *(_WORD *)unint64_t v87 = 2049;
            *(double *)&v87[2] = v53;
            __int16 v88 = 2049;
            double v89 = a3;
            __int16 v90 = 2049;
            double v91 = a3 + a5;
            _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Processed mets values\", \"count\":%{private}d, \"index\":%{private}d, \"mets value\":\"%{private}f\", \"start time_s\":\"%{private}.09f\", \"end time_s\":\"%{private}.09f\"}", buf, 0x3Cu);
          }
          unint64_t v55 = vcvtpd_u64_f64(v53 + -1.60000002);
          if (v55 >= 0xA) {
            unint64_t v55 = 10;
          }
          ++*(_DWORD *)(*(void *)(a1 + 8) + 4 * v55);
          unsigned int v48 = (double *)__p;
        }
        unsigned __int8 v75 = v48;
        a3 = a3 + a5;
      }
      while (v28 < a4);
    }
    *(double *)a1 = v11;
    BOOL v58 = sub_100452340(a1);
    if (__p)
    {
      unsigned __int8 v75 = (double *)__p;
      operator delete(__p);
    }
  }
  else
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022B2DA8);
    }
    uint64_t v56 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 68289026;
      int v82 = 0;
      __int16 v83 = 2082;
      uint64_t v84 = "";
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"MaxMETs,Empty MET minutes input.\"}", buf, 0x12u);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022B2DA8);
      }
    }
    int v57 = qword_1024190F8;
    if (os_signpost_enabled((os_log_t)qword_1024190F8))
    {
      *(_DWORD *)std::string buf = 68289026;
      int v82 = 0;
      __int16 v83 = 2082;
      uint64_t v84 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v57, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "MaxMETs,Empty MET minutes input.", "{\"msg%{public}.0s\":\"MaxMETs,Empty MET minutes input.\"}", buf, 0x12u);
    }
    BOOL v58 = 0;
    *(double *)a1 = a4;
  }
  return v58;
}

void sub_100452304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100452340(uint64_t a1)
{
  if (!sub_100452700(a1))
  {
    int v15 = 0;
    sub_1004528EC((char **)(a1 + 8), 0xBuLL, &v15);
    *(CFAbsoluteTime *)a1 = CFAbsoluteTimeGetCurrent() + -86400.0;
  }
  uint64_t v2 = objc_opt_new();
  int v3 = *(int **)(a1 + 8);
  CFTypeRef v4 = *(int **)(a1 + 16);
  while (v3 != v4)
  {
    uint64_t v5 = *v3++;
    [v2 addObject:[+[NSNumber numberWithLong:](NSNumber, "numberWithLong:", v5)]];
  }
  +[NSKeyedArchiver archivedDataWithRootObject:v2 requiringSecureCoding:1 error:0];
  uint64_t v6 = sub_1000A6958();
  int v7 = sub_1004D258C(v6);
  if ((v7 & 1) == 0)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022B2DA8);
    }
    id v8 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_ERROR))
    {
      int v15 = 68289026;
      int v16 = 0;
      __int16 v17 = 2082;
      unint64_t v18 = "";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"MaxMETs,Failed to persist MET minutes stats\"}", (uint8_t *)&v15, 0x12u);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022B2DA8);
      }
    }
    uint64_t v9 = qword_1024190F8;
    if (os_signpost_enabled((os_log_t)qword_1024190F8))
    {
      int v15 = 68289026;
      int v16 = 0;
      __int16 v17 = 2082;
      unint64_t v18 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "MaxMETs,Failed to persist MET minutes stats", "{\"msg%{public}.0s\":\"MaxMETs,Failed to persist MET minutes stats\"}", (uint8_t *)&v15, 0x12u);
    }
  }

  +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", +[NSDate dateWithTimeIntervalSinceReferenceDate:*(double *)a1], 1, 0);
  uint64_t v10 = sub_1000A6958();
  if (sub_1004D258C(v10))
  {
    if (v7)
    {
      uint64_t v11 = sub_1000A6958();
      (*(void (**)(uint64_t))(*(void *)v11 + 944))(v11);
      return 1;
    }
    return 0;
  }
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022B2DA8);
  }
  long long v13 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_ERROR))
  {
    int v15 = 68289026;
    int v16 = 0;
    __int16 v17 = 2082;
    unint64_t v18 = "";
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"MaxMETs,Failed to persist MET minutes stats compute time\"}", (uint8_t *)&v15, 0x12u);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022B2DA8);
    }
  }
  uint64_t v14 = qword_1024190F8;
  BOOL result = os_signpost_enabled((os_log_t)qword_1024190F8);
  if (result)
  {
    int v15 = 68289026;
    int v16 = 0;
    __int16 v17 = 2082;
    unint64_t v18 = "";
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "MaxMETs,Failed to persist MET minutes stats compute time", "{\"msg%{public}.0s\":\"MaxMETs,Failed to persist MET minutes stats compute time\"}", (uint8_t *)&v15, 0x12u);
    return 0;
  }
  return result;
}

BOOL sub_100452700(uint64_t a1)
{
  if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 44 && *(double *)a1 != 1.79769313e308) {
    return 1;
  }
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022B2DA8);
  }
  uint64_t v2 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_ERROR))
  {
    double v3 = *(double *)a1;
    uint64_t v4 = (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 2;
    int v9 = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    id v12 = "";
    __int16 v13 = 2049;
    uint64_t v14 = v4;
    __int16 v15 = 2049;
    double v16 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"MaxMETs,Invalid MET minute table\", \"table size\":%{private}ld, \"compute time_s\":\"%{private}.09f\"}", (uint8_t *)&v9, 0x26u);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022B2DA8);
    }
  }
  uint64_t v5 = qword_1024190F8;
  BOOL result = os_signpost_enabled((os_log_t)qword_1024190F8);
  if (result)
  {
    double v7 = *(double *)a1;
    uint64_t v8 = (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 2;
    int v9 = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    id v12 = "";
    __int16 v13 = 2049;
    uint64_t v14 = v8;
    __int16 v15 = 2049;
    double v16 = v7;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "MaxMETs,Invalid MET minute table", "{\"msg%{public}.0s\":\"MaxMETs,Invalid MET minute table\", \"table size\":%{private}ld, \"compute time_s\":\"%{private}.09f\"}", (uint8_t *)&v9, 0x26u);
    return 0;
  }
  return result;
}

char *sub_1004528EC(char **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6 = (uint64_t)a1[2];
  BOOL result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 2)
  {
    __int16 v13 = a1[1];
    unint64_t v14 = (v13 - result) >> 2;
    if (v14 >= a2) {
      uint64_t v15 = a2;
    }
    else {
      uint64_t v15 = (v13 - result) >> 2;
    }
    if (v15)
    {
      double v16 = result;
      do
      {
        *(_DWORD *)double v16 = *a3;
        v16 += 4;
        --v15;
      }
      while (v15);
    }
    if (a2 <= v14)
    {
      a1[1] = &result[4 * a2];
    }
    else
    {
      __int16 v17 = &v13[4 * (a2 - v14)];
      uint64_t v18 = 4 * a2 - 4 * v14;
      do
      {
        *(_DWORD *)__int16 v13 = *a3;
        v13 += 4;
        v18 -= 4;
      }
      while (v18);
      a1[1] = v17;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 >> 62) {
      sub_1001D7FD4();
    }
    uint64_t v8 = v6 >> 1;
    if (v6 >> 1 <= a2) {
      uint64_t v8 = a2;
    }
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v9 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    BOOL result = sub_10017C6FC(a1, v9);
    int v10 = a1[1];
    __int16 v11 = &v10[4 * a2];
    uint64_t v12 = 4 * a2;
    do
    {
      *(_DWORD *)int v10 = *a3;
      v10 += 4;
      v12 -= 4;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

void sub_100452A00(id a1)
{
  qword_1024190F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

void sub_100452AFC(id a1)
{
  qword_10247AAC8 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLStreamedLocationProviderSilo"];
}

uint64_t sub_100452BBC(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100453EEC;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_10247AAE8 != -1) {
    dispatch_once(&qword_10247AAE8, block);
  }
  return qword_10247AAF0;
}

void sub_100452E20(id a1)
{
  if (objc_opt_class())
  {
    sub_100103240();
    if (sub_10010145C()) {
      byte_10247AAD8 = 1;
    }
  }
  sub_1000C7F88(&v3);
  BOOL v5 = 0;
  int v1 = sub_1000D2988(v3, "EnableMultiClientStreaming", &v5);
  if (v5) {
    int v2 = v1;
  }
  else {
    int v2 = 0;
  }
  if (v4) {
    sub_1000DB0A0(v4);
  }
  if (v2) {
    byte_10247AAD8 = 1;
  }
}

void sub_100452EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100452EF8(_DWORD *a1)
{
  if ((a1[42] & 0x80000000) != 0)
  {
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B31C0);
    }
    BOOL v5 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_FAULT))
    {
      int v6 = a1[42];
      *(_DWORD *)std::string buf = 68289795;
      int v12 = 0;
      __int16 v13 = 2082;
      unint64_t v14 = "";
      __int16 v15 = 1026;
      int v16 = v6;
      __int16 v17 = 2082;
      uint64_t v18 = "assert";
      __int16 v19 = 2081;
      uint64_t v20 = "fDisablementAssertionCount >= 0";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion count must be non-negative\", \"count\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_1022B31C0);
      }
    }
    double v7 = qword_102419548;
    if (os_signpost_enabled((os_log_t)qword_102419548))
    {
      int v8 = a1[42];
      *(_DWORD *)std::string buf = 68289795;
      int v12 = 0;
      __int16 v13 = 2082;
      unint64_t v14 = "";
      __int16 v15 = 1026;
      int v16 = v8;
      __int16 v17 = 2082;
      uint64_t v18 = "assert";
      __int16 v19 = 2081;
      uint64_t v20 = "fDisablementAssertionCount >= 0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion count must be non-negative", "{\"msg%{public}.0s\":\"Assertion count must be non-negative\", \"count\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_1022B31C0);
      }
    }
    unint64_t v9 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
    {
      int v10 = a1[42];
      *(_DWORD *)std::string buf = 68289795;
      int v12 = 0;
      __int16 v13 = 2082;
      unint64_t v14 = "";
      __int16 v15 = 1026;
      int v16 = v10;
      __int16 v17 = 2082;
      uint64_t v18 = "assert";
      __int16 v19 = 2081;
      uint64_t v20 = "fDisablementAssertionCount >= 0";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion count must be non-negative\", \"count\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
    }
    abort_report_np();
  }
  else if (qword_102419540 == -1)
  {
    goto LABEL_3;
  }
  dispatch_once(&qword_102419540, &stru_1022B31C0);
LABEL_3:
  int v2 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = a1[42];
    *(_DWORD *)std::string buf = 68289282;
    int v12 = 0;
    __int16 v13 = 2082;
    unint64_t v14 = "";
    __int16 v15 = 1026;
    int v16 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Client took disablement assertion\", \"before change\":%{public}d}", buf, 0x18u);
  }
  int v4 = a1[42];
  a1[42] = v4 + 1;
  if (!v4)
  {
    *(_DWORD *)std::string buf = 9;
    (*(void (**)(_DWORD *, uint8_t *, uint64_t, uint64_t))(*(void *)a1 + 144))(a1, buf, 1, 0xFFFFFFFFLL);
    sub_1004555FC((uint64_t)a1);
  }
}

void sub_1004532A8(_DWORD *a1)
{
  if ((int)a1[42] <= 0)
  {
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B31C0);
    }
    BOOL v5 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_FAULT))
    {
      int v6 = a1[42];
      *(_DWORD *)std::string buf = 68289795;
      int v12 = 0;
      __int16 v13 = 2082;
      unint64_t v14 = "";
      __int16 v15 = 1026;
      int v16 = v6;
      __int16 v17 = 2082;
      uint64_t v18 = "assert";
      __int16 v19 = 2081;
      uint64_t v20 = "fDisablementAssertionCount > 0";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion count must be positive\", \"count\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_1022B31C0);
      }
    }
    double v7 = qword_102419548;
    if (os_signpost_enabled((os_log_t)qword_102419548))
    {
      int v8 = a1[42];
      *(_DWORD *)std::string buf = 68289795;
      int v12 = 0;
      __int16 v13 = 2082;
      unint64_t v14 = "";
      __int16 v15 = 1026;
      int v16 = v8;
      __int16 v17 = 2082;
      uint64_t v18 = "assert";
      __int16 v19 = 2081;
      uint64_t v20 = "fDisablementAssertionCount > 0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion count must be positive", "{\"msg%{public}.0s\":\"Assertion count must be positive\", \"count\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_1022B31C0);
      }
    }
    unint64_t v9 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
    {
      int v10 = a1[42];
      *(_DWORD *)std::string buf = 68289795;
      int v12 = 0;
      __int16 v13 = 2082;
      unint64_t v14 = "";
      __int16 v15 = 1026;
      int v16 = v10;
      __int16 v17 = 2082;
      uint64_t v18 = "assert";
      __int16 v19 = 2081;
      uint64_t v20 = "fDisablementAssertionCount > 0";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion count must be positive\", \"count\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
    }
    abort_report_np();
  }
  else if (qword_102419540 == -1)
  {
    goto LABEL_3;
  }
  dispatch_once(&qword_102419540, &stru_1022B31C0);
LABEL_3:
  int v2 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = a1[42];
    *(_DWORD *)std::string buf = 68289282;
    int v12 = 0;
    __int16 v13 = 2082;
    unint64_t v14 = "";
    __int16 v15 = 1026;
    int v16 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Client released disablement assertion\", \"before change\":%{public}d}", buf, 0x18u);
  }
  int v4 = a1[42] - 1;
  a1[42] = v4;
  if (!v4)
  {
    *(_DWORD *)std::string buf = 9;
    (*(void (**)(_DWORD *, uint8_t *))(*(void *)a1 + 120))(a1, buf);
    sub_1004555FC((uint64_t)a1);
  }
}

void sub_100453658(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 172) & 0x80000000) != 0)
  {
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B31C0);
    }
    BOOL v5 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_FAULT))
    {
      int v6 = *(_DWORD *)(a1 + 172);
      *(_DWORD *)std::string buf = 68289795;
      int v12 = 0;
      __int16 v13 = 2082;
      unint64_t v14 = "";
      __int16 v15 = 1026;
      int v16 = v6;
      __int16 v17 = 2082;
      uint64_t v18 = "assert";
      __int16 v19 = 2081;
      uint64_t v20 = "fEmergencyEnablementAssertionCount >= 0";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion count must be non-negative\", \"count\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_1022B31C0);
      }
    }
    double v7 = qword_102419548;
    if (os_signpost_enabled((os_log_t)qword_102419548))
    {
      int v8 = *(_DWORD *)(a1 + 172);
      *(_DWORD *)std::string buf = 68289795;
      int v12 = 0;
      __int16 v13 = 2082;
      unint64_t v14 = "";
      __int16 v15 = 1026;
      int v16 = v8;
      __int16 v17 = 2082;
      uint64_t v18 = "assert";
      __int16 v19 = 2081;
      uint64_t v20 = "fEmergencyEnablementAssertionCount >= 0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion count must be non-negative", "{\"msg%{public}.0s\":\"Assertion count must be non-negative\", \"count\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_1022B31C0);
      }
    }
    unint64_t v9 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
    {
      int v10 = *(_DWORD *)(a1 + 172);
      *(_DWORD *)std::string buf = 68289795;
      int v12 = 0;
      __int16 v13 = 2082;
      unint64_t v14 = "";
      __int16 v15 = 1026;
      int v16 = v10;
      __int16 v17 = 2082;
      uint64_t v18 = "assert";
      __int16 v19 = 2081;
      uint64_t v20 = "fEmergencyEnablementAssertionCount >= 0";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion count must be non-negative\", \"count\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
    }
    abort_report_np();
  }
  else if (qword_102419540 == -1)
  {
    goto LABEL_3;
  }
  dispatch_once(&qword_102419540, &stru_1022B31C0);
LABEL_3:
  int v2 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 172);
    *(_DWORD *)std::string buf = 68289282;
    int v12 = 0;
    __int16 v13 = 2082;
    unint64_t v14 = "";
    __int16 v15 = 1026;
    int v16 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Client took emergency enablement assertion\", \"before change\":%{public}d}", buf, 0x18u);
  }
  int v4 = *(_DWORD *)(a1 + 172);
  *(_DWORD *)(a1 + 172) = v4 + 1;
  if (!v4)
  {
    if (*(_DWORD *)(a1 + 144)) {
      sub_100454798(a1);
    }
  }
}

void sub_1004539D4(uint64_t a1)
{
  if (*(int *)(a1 + 172) <= 0)
  {
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B31C0);
    }
    BOOL v5 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_FAULT))
    {
      int v6 = *(_DWORD *)(a1 + 172);
      *(_DWORD *)std::string buf = 68289795;
      int v12 = 0;
      __int16 v13 = 2082;
      unint64_t v14 = "";
      __int16 v15 = 1026;
      int v16 = v6;
      __int16 v17 = 2082;
      uint64_t v18 = "assert";
      __int16 v19 = 2081;
      uint64_t v20 = "fEmergencyEnablementAssertionCount > 0";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion count must be positive\", \"count\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_1022B31C0);
      }
    }
    double v7 = qword_102419548;
    if (os_signpost_enabled((os_log_t)qword_102419548))
    {
      int v8 = *(_DWORD *)(a1 + 172);
      *(_DWORD *)std::string buf = 68289795;
      int v12 = 0;
      __int16 v13 = 2082;
      unint64_t v14 = "";
      __int16 v15 = 1026;
      int v16 = v8;
      __int16 v17 = 2082;
      uint64_t v18 = "assert";
      __int16 v19 = 2081;
      uint64_t v20 = "fEmergencyEnablementAssertionCount > 0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion count must be positive", "{\"msg%{public}.0s\":\"Assertion count must be positive\", \"count\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_1022B31C0);
      }
    }
    unint64_t v9 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
    {
      int v10 = *(_DWORD *)(a1 + 172);
      *(_DWORD *)std::string buf = 68289795;
      int v12 = 0;
      __int16 v13 = 2082;
      unint64_t v14 = "";
      __int16 v15 = 1026;
      int v16 = v10;
      __int16 v17 = 2082;
      uint64_t v18 = "assert";
      __int16 v19 = 2081;
      uint64_t v20 = "fEmergencyEnablementAssertionCount > 0";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion count must be positive\", \"count\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
    }
    abort_report_np();
  }
  else if (qword_102419540 == -1)
  {
    goto LABEL_3;
  }
  dispatch_once(&qword_102419540, &stru_1022B31C0);
LABEL_3:
  int v2 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 172);
    *(_DWORD *)std::string buf = 68289282;
    int v12 = 0;
    __int16 v13 = 2082;
    unint64_t v14 = "";
    __int16 v15 = 1026;
    int v16 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Client released emergency enablement assertion\", \"before change\":%{public}d}", buf, 0x18u);
  }
  int v4 = *(_DWORD *)(a1 + 172) - 1;
  *(_DWORD *)(a1 + 172) = v4;
  if (!v4)
  {
    if (*(_DWORD *)(a1 + 144)) {
      sub_100454798(a1);
    }
  }
}

void sub_100453D70(uint64_t a1, void *a2, void *a3)
{
  if ([a2 isEqual:@"kCLLocationStreamingMessageTypeLocation"])
  {
    sub_100457DB0((id *)a1, a3);
  }
  else if ([a2 isEqual:@"kCLLocationStreamingMessageTypeAliveAgain"] {
         && *(_DWORD *)(a1 + 144))
  }
  {
    sub_100454798(a1);
  }
}

uint64_t sub_100453E64(uint64_t a1, int a2)
{
  if (a2)
  {
    int v4 = 9;
    return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v4);
  }
  else
  {
    int v3 = 9;
    return (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 144))(a1, &v3, 1, 0xFFFFFFFFLL);
  }
}

void sub_100453EEC()
{
}

void sub_100453F38()
{
}

void sub_100453F5C(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1006B766C(a1, "Streamed location provider", a2);
  *(void *)uint64_t v3 = off_1022B2E18;
  *(void *)(v3 + 120) = 0;
  *(void *)(v3 + 128) = 0;
  *(void *)(a1 + 136) = [objc_msgSend(*(id *)(v3 + 32), "vendor") proxyForService:@"CLLocationStreamingConnectionManager" forClient:@"CLStreamedLocationProvider"];
  *(_DWORD *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = [*(id *)(a1 + 40) newTimer];
  *(void *)(a1 + 160) = [*(id *)(a1 + 40) newTimer];
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 174) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(unsigned char *)(a1 + 216) = 1;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1004546B4;
  v9[3] = &unk_1022A3020;
  v9[4] = a1;
  [*(id *)(a1 + 152) setHandler:v9];
  [*(id *)(a1 + 152) setNextFireDelay:1.79769313e308];
  [*(id *)(a1 + 152) setFireInterval:30.0];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100454B54;
  void v8[3] = &unk_1022A3020;
  v8[4] = a1;
  [*(id *)(a1 + 160) setHandler:v8];
  sub_1000C7F88(buf);
  LOBYTE(v10) = 0;
  char v4 = sub_1000D2988(*(uint64_t *)buf, "EnableMultiClientStreaming", (BOOL *)&v10);
  if ((_BYTE)v10) {
    char v5 = v4;
  }
  else {
    char v5 = 0;
  }
  *(unsigned char *)(a1 + 180) = v5;
  if (*(void *)v12) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v12);
  }
  if (qword_102419540 != -1) {
    dispatch_once(&qword_102419540, &stru_1022B31C0);
  }
  int v6 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
  {
    int v7 = *(unsigned __int8 *)(a1 + 180);
    *(_DWORD *)std::string buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)int v12 = 2082;
    *(void *)&void v12[2] = "";
    __int16 v13 = 1026;
    int v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Multiclient enabled?\", \"fEnableMultiClientStreaming\":%{public}hhd}", buf, 0x18u);
  }
  if (*(unsigned char *)(a1 + 180))
  {
    *(void *)(a1 + 192) = -[CLStreamedLocationProviderServerDiscoverer initOnQueue:]([CLStreamedLocationProviderServerDiscoverer alloc], "initOnQueue:", [*(id *)(a1 + 40) queue]);
    sub_100EB2E6C();
  }
  sub_100E92BC0();
}

void sub_100454608(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 128);
  *(void *)(v1 + 128) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *v2;
  *int v2 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  sub_1006B7BEC(v1);
  _Unwind_Resume(a1);
}

void sub_1004546B4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_102419540 != -1) {
    dispatch_once(&qword_102419540, &stru_1022B31C0);
  }
  int v2 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    __int16 v4 = 2082;
    uint64_t v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Refreshing location request\"}", (uint8_t *)v3, 0x12u);
  }
  sub_100454798(v1);
}

void sub_100454798(uint64_t a1)
{
  if (sub_1004553C4(a1))
  {
    int v2 = objc_alloc_init(CLLocationStreamingMessage);
    [(CLLocationStreamingMessage *)v2 setMessageType:@"kCLLocationStreamingMessageTypeRequestLocation"];
    id v3 = +[NSMutableDictionary dictionary];
    [v3 setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 144)) forKeyedSubscript:@"kCLLocationStreamingMessageGranularityKey"];
    if (sub_100457318(a1)) {
      [v3 setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1)] forKeyedSubscript:@"kCLLocationStreamingMessageIncludeMotionKey"];
    }
    *(_DWORD *)std::string buf = 28;
    if (sub_1001072EC(a1, (int *)buf, 1)) {
      [v3 setObject:&__kCFBooleanTrue forKeyedSubscript:@"kCLLocationStreamingMessageInFitnessSessionKey"];
    }
    *(_DWORD *)std::string buf = 29;
    if (sub_1001072EC(a1, (int *)buf, 1)) {
      [v3 setObject:&__kCFBooleanTrue forKeyedSubscript:@"kCLLocationStreamingMessageActivityTypeAirborneKey"];
    }
    *(_DWORD *)std::string buf = 17;
    if (sub_1001072EC(a1, (int *)buf, 1)) {
      [v3 setObject:&__kCFBooleanTrue forKeyedSubscript:@"kCLLocationStreamingMessageMapMatching"];
    }
    if (*(_DWORD *)(a1 + 172)) {
      [v3 setObject:&__kCFBooleanTrue forKeyedSubscript:@"kCLLocationStreamingMessageEmergencyEnablementKey"];
    }
    [(CLLocationStreamingMessage *)v2 setPayload:v3];
    [(CLLocationStreamingMessage *)v2 setPriority:300];
    v7[0] = IDSSendMessageOptionTimeoutKey;
    __int16 v4 = +[NSNumber numberWithDouble:30.0];
    v7[1] = IDSSendMessageOptionForceLocalDeliveryKey;
    _DWORD v7[2] = IDSSendMessageOptionEncryptPayloadKey;
    v8[0] = v4;
    v8[1] = &__kCFBooleanTrue;
    v8[2] = &__kCFBooleanTrue;
    void v8[3] = &__kCFBooleanTrue;
    v7[3] = IDSSendMessageOptionRequireBluetoothKey;
    v7[4] = IDSSendMessageOptionQueueOneIdentifierKey;
    v8[4] = @"kCLLocationStreamingMessageTypeRequestLocation";
    [(CLLocationStreamingMessage *)v2 setIdsOptions:+[NSDictionary dictionaryWithObjects:v8 forKeys:v7 count:5]];
    [*(id *)(a1 + 136) sendMessage:v2];
  }
  else
  {
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B31C0);
    }
    uint64_t v5 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#ilsa,sendLocationRequest,streaming is not allowed,blocking location request", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_1022B31C0);
      }
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStreamedLocationProvider::sendLocationRequest()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

uint64_t sub_100454B54(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_102419540 != -1) {
    dispatch_once(&qword_102419540, &stru_1022B31C0);
  }
  int v2 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Location unavailable timer fired. Triggering kNotificationLocationUnavailable notification", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B31C0);
    }
    __int16 v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLStreamedLocationProvider::CLStreamedLocationProvider(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  *(_DWORD *)std::string buf = 9;
  return (*(uint64_t (**)(uint64_t, uint8_t *, uint64_t, uint64_t))(*(void *)v1 + 144))(v1, buf, 1, 0xFFFFFFFFLL);
}

void sub_100454D24(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022B31A0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLStreamedLocationProvider::onDataProtectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B31A0);
    }
    unint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLStreamedLocationProvider::onDataProtectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10045640C(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100454EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100454F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022B31A0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLStreamedLocationProvider::onLocationStreamingControlStateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B31A0);
    }
    unint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLStreamedLocationProvider::onLocationStreamingControlStateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1004551E4(a4, v6, v7, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1004550B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004550D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 120);
  if (v2)
  {
    [*(id *)(v2 + 16) unregister:*(void *)(v2 + 8) forNotification:42];
    uint64_t v3 = *(void *)(a1 + 120);
    *(void *)(a1 + 120) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  [*(id *)(a1 + 200) invalidate];

  *(void *)(a1 + 200) = 0;
  [*(id *)(a1 + 208) invalidate];

  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 192) = 0;
  [0 invalidateAndReleaseProbeClients];
  [*(id *)(a1 + 184) invalidate];

  *(void *)(a1 + 184) = 0;
  [*(id *)(a1 + 152) invalidate];

  *(void *)(a1 + 152) = 0;
  [*(id *)(a1 + 160) invalidate];

  *(void *)(a1 + 160) = 0;
  [*(id *)(a1 + 136) retireClient:CLISP_ME_TOKEN];

  *(void *)(a1 + 136) = 0;

  return sub_1006B7C30(a1);
}

void sub_1004551E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022B31E0);
  }
  uint64_t v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(a1 + 216);
    int v8 = *(unsigned __int8 *)(a4 + 1480);
    *(_DWORD *)std::string buf = 67240448;
    int v11 = v7;
    __int16 v12 = 1026;
    int v13 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ilsa,CLStreamedLocationProvider,onLocationStreamingControlStateNotification,allowStreaming,old,%{public}d,new,%{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022B31E0);
    }
    unint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLStreamedLocationProvider::onLocationStreamingControlStateNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a4 + 1480);
}

uint64_t sub_1004553C4(uint64_t a1)
{
  if (qword_102419540 != -1) {
    dispatch_once(&qword_102419540, &stru_1022B31C0);
  }
  uint64_t v2 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 216);
    *(_DWORD *)std::string buf = 67240192;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ilsa,CLStreamedLocationProvider,isLocationStreamingAllowed,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B31C0);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLStreamedLocationProvider::isLocationStreamingAllowed() const", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return *(unsigned __int8 *)(a1 + 216);
}

uint64_t sub_100455580(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (*a2 > 0x27) {
    goto LABEL_9;
  }
  if (((1 << v2) & 0x8000000238) != 0) {
    return 1;
  }
  if (((1 << v2) & 7) != 0)
  {
    sub_1004555FC(a1);
    return 1;
  }
  if (((1 << v2) & 0x30020000) == 0) {
LABEL_9:
  }
    sub_101A6071C();
  if (*(_DWORD *)(a1 + 144)) {
    sub_100454798(a1);
  }
  return 1;
}

void sub_1004555FC(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 168) || (uint64_t v3 = qword_10247AAB0) == 0)
  {
    int v2 = 0;
  }
  else
  {
    int v2 = 0;
    do
    {
      v8[0] = *(_DWORD *)(v3 + 16);
      if (sub_1001072EC(a1, v8, 1)) {
        int v2 = *(_DWORD *)(v3 + 20);
      }
      uint64_t v3 = *(void *)v3;
    }
    while (v3);
  }
  int v4 = *(_DWORD *)(a1 + 144);
  if (v4 != v2)
  {
    if (v4)
    {
      if (!v2)
      {
        [*(id *)(a1 + 160) setNextFireDelay:1.79769313e308];
        v8[0] = 0;
        (*(void (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, v8);
        v8[0] = 1;
        (*(void (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, v8);
        v8[0] = 2;
        (*(void (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, v8);
      }
    }
    else
    {
      [*(id *)(a1 + 160) setNextFireDelay:5.0];
    }
    if (*(unsigned char *)(a1 + 180)) {
      sub_100456504((id *)a1, v2);
    }
    *(_DWORD *)(a1 + 144) = v2;
    double v5 = 30.0;
    if (!v2) {
      double v5 = 1.79769313e308;
    }
    [*(id *)(a1 + 152) setNextFireDelay:v5];
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B31C0);
    }
    uint64_t v6 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(unsigned int *)(a1 + 144);
      v8[0] = 68289282;
      v8[1] = 0;
      __int16 v9 = 2082;
      int v10 = "";
      __int16 v11 = 2050;
      uint64_t v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Changing requested granularity\", \"granularity\":%{public, location:CLLocationStreamingGranularity}lld}", (uint8_t *)v8, 0x1Cu);
    }
    sub_100454798(a1);
  }
}

uint64_t sub_100455850(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (*a2 > 0x27) {
    goto LABEL_9;
  }
  if (((1 << v2) & 0x8000000238) != 0) {
    return 1;
  }
  if (((1 << v2) & 7) != 0)
  {
    sub_1004555FC(a1);
    return 1;
  }
  if (((1 << v2) & 0x30020000) == 0) {
LABEL_9:
  }
    sub_101A608B0();
  if (*(_DWORD *)(a1 + 144)) {
    sub_100454798(a1);
  }
  return 1;
}

void sub_1004558CC(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(a2 + 96) & 0xFFFFFFF7) == 1)
  {
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B31C0);
    }
    uint64_t v3 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a2 + 4);
      uint64_t v5 = *(void *)(a2 + 12);
      uint64_t v6 = *(void *)(a2 + 20);
      uint64_t v7 = *(void *)(a2 + 44);
      uint64_t v8 = *(void *)(a2 + 60);
      int v9 = *(_DWORD *)(a2 + 96);
      uint64_t v10 = *(void *)(a2 + 28);
      uint64_t v11 = *(void *)(a2 + 36);
      uint64_t v12 = *(void *)(a2 + 144);
      uint64_t v13 = *(void *)(a2 + 52);
      uint64_t v14 = *(void *)(a2 + 68);
      int v15 = *(_DWORD *)(a2 + 140);
      uint64_t v16 = *(void *)(a2 + 76);
      *(_DWORD *)std::string buf = 134286593;
      uint64_t v19 = v4;
      __int16 v20 = 2049;
      uint64_t v21 = v5;
      __int16 v22 = 2050;
      uint64_t v23 = v6;
      __int16 v24 = 2049;
      uint64_t v25 = v7;
      __int16 v26 = 2049;
      uint64_t v27 = v8;
      __int16 v28 = 1026;
      int v29 = v9;
      __int16 v30 = 2049;
      uint64_t v31 = v10;
      __int16 v32 = 2050;
      uint64_t v33 = v11;
      __int16 v34 = 2049;
      uint64_t v35 = v12;
      __int16 v36 = 2049;
      uint64_t v37 = v13;
      __int16 v38 = 2049;
      uint64_t v39 = v14;
      __int16 v40 = 1025;
      int v41 = v15;
      __int16 v42 = 2050;
      uint64_t v43 = v16;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "@ClxStreamed, Send, ll, %{private}.7f, %{private}.7f, acc, %{public}.2f, speed, %{private}.1f, course, %{private}.1f, type, %{public}d, alt, %{private}.1f, altunc, %{public}.1f,ellipsoidalAlt,%{private}.1f,speedUnc,%{private}.1f,courseUnc,%{private}.1f,signalEnv,%{private}d,timestamp,%{public}.3f", buf, 0x7Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_1022B31C0);
      }
      __int16 v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStreamedLocationProvider::logGPS(const CLLocationProvider_Type::NotificationData &)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
  }
}

id sub_100455BD4(uint64_t a1)
{
  if (*(void *)(a1 + 200))
  {
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B31C0);
    }
    int v2 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 68289026;
      int v8 = 0;
      __int16 v9 = 2082;
      uint64_t v10 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Multiclient attempting to create retry discovery timer while another one still exists\"}", buf, 0x12u);
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_1022B31C0);
      }
    }
    uint64_t v3 = qword_102419548;
    if (os_signpost_enabled((os_log_t)qword_102419548))
    {
      *(_DWORD *)std::string buf = 68289026;
      int v8 = 0;
      __int16 v9 = 2082;
      uint64_t v10 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Multiclient attempting to create retry discovery timer while another one still exists", "{\"msg%{public}.0s\":\"#Multiclient attempting to create retry discovery timer while another one still exists\"}", buf, 0x12u);
    }
    [*(id *)(a1 + 200) invalidate];

    *(void *)(a1 + 200) = 0;
  }
  id v4 = [*(id *)(a1 + 40) newTimer];
  *(void *)(a1 + 200) = v4;
  [v4 setNextFireDelay:1.79769313e308];
  [*(id *)(a1 + 200) setFireInterval:5.0];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_100455DD8;
  void v6[3] = &unk_1022A3020;
  _DWORD v6[4] = a1;
  return [*(id *)(a1 + 200) setHandler:v6];
}

id sub_100455DD8(uint64_t a1)
{
  return sub_100455DE0(*(void *)(a1 + 32));
}

id sub_100455DE0(uint64_t a1)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_1004566AC;
  v7[3] = &unk_1022B2F50;
  v7[4] = a1;
  if (*(unsigned char *)(a1 + 181))
  {
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B31C0);
    }
    int v2 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289026;
      __int16 v9 = 2082;
      uint64_t v10 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Multiclient looking for candidate streaming sources\"}", (uint8_t *)&buf, 0x12u);
    }
    uint64_t v3 = *(void **)(a1 + 192);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    _DWORD v6[2] = sub_100456C5C;
    void v6[3] = &unk_1022B2F78;
    _DWORD v6[4] = v7;
    void v6[5] = a1;
    return [v3 findCandidateServersWithCompletion:v6];
  }
  else
  {
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B31C0);
    }
    uint64_t v5 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
    {
      uint64_t buf = 68289026;
      __int16 v9 = 2082;
      uint64_t v10 = "";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Multiclient skipping discovery because first unlock has yet to happen, but will retry in case we get unlocked\"}", (uint8_t *)&buf, 0x12u);
    }
    return [*(id *)(a1 + 200) setNextFireDelay:5.0];
  }
}

id sub_100455FF0(uint64_t a1)
{
  if (*(void *)(a1 + 208))
  {
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B31C0);
    }
    int v2 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v8 = 0;
      __int16 v9 = 2082;
      uint64_t v10 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Multiclient attempting to create reassert timer while another one still exists\"}", buf, 0x12u);
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_1022B31C0);
      }
    }
    uint64_t v3 = qword_102419548;
    if (os_signpost_enabled((os_log_t)qword_102419548))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v8 = 0;
      __int16 v9 = 2082;
      uint64_t v10 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Multiclient attempting to create reassert timer while another one still exists", "{\"msg%{public}.0s\":\"#Multiclient attempting to create reassert timer while another one still exists\"}", buf, 0x12u);
    }
    [*(id *)(a1 + 208) invalidate];

    *(void *)(a1 + 208) = 0;
  }
  id v4 = [*(id *)(a1 + 40) newTimer];
  *(void *)(a1 + 208) = v4;
  [v4 setNextFireDelay:1.79769313e308];
  [*(id *)(a1 + 208) setFireInterval:15.0];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_1004561F4;
  void v6[3] = &unk_1022A3020;
  _DWORD v6[4] = a1;
  return [*(id *)(a1 + 208) setHandler:v6];
}

_DWORD *sub_1004561F4(uint64_t a1)
{
  BOOL result = *(_DWORD **)(a1 + 32);
  if (result[36] == 3) {
    return sub_100456210((uint64_t)result, 0);
  }
  return result;
}

id sub_100456210(uint64_t a1, uint64_t a2)
{
  id v4 = +[NSMutableDictionary dictionary];
  [v4 setObject:[+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a2)] forKeyedSubscript:@"kCLLocationStreamingMessageRapportLocationStreamingActionKey"];
  if (sub_100457318(a1)) {
    uint64_t v5 = +[NSNumber numberWithBool:1];
  }
  else {
    uint64_t v5 = (NSNumber *)&__kCFBooleanFalse;
  }
  [v4 setObject:v5 forKeyedSubscript:@"kCLLocationStreamingMessageIncludeMotionKey"];
  int v13 = 28;
  if (sub_1001072EC(a1, &v13, 1)) {
    uint64_t v6 = &__kCFBooleanTrue;
  }
  else {
    uint64_t v6 = &__kCFBooleanFalse;
  }
  [v4 setObject:v6 forKeyedSubscript:@"kCLLocationStreamingMessageInFitnessSessionKey"];
  int v13 = 29;
  if (sub_1001072EC(a1, &v13, 1)) {
    uint64_t v7 = &__kCFBooleanTrue;
  }
  else {
    uint64_t v7 = &__kCFBooleanFalse;
  }
  [v4 setObject:v7 forKeyedSubscript:@"kCLLocationStreamingMessageActivityTypeAirborneKey"];
  if (*(_DWORD *)(a1 + 172)) {
    int v8 = &__kCFBooleanTrue;
  }
  else {
    int v8 = &__kCFBooleanFalse;
  }
  [v4 setObject:v8 forKeyedSubscript:@"kCLLocationStreamingMessageEmergencyEnablementKey"];
  int v13 = 17;
  if (sub_1001072EC(a1, &v13, 1)) {
    __int16 v9 = &__kCFBooleanTrue;
  }
  else {
    __int16 v9 = &__kCFBooleanFalse;
  }
  [v4 setObject:v9 forKeyedSubscript:@"kCLLocationStreamingMessageMapMatching"];
  uint64_t v10 = *(void **)(a1 + 184);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_1004573E8;
  void v12[3] = &unk_1022B2F98;
  v12[4] = a2;
  return [v10 sendRequestID:@"com.apple.locationd.rapport.stream-request" request:v4 destinationID:RPDestinationIdentifierDirectPeer options:0 responseHandler:v12];
}

void sub_10045640C(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 1 && *(unsigned char *)(a4 + 4) != 0)
  {
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B31C0);
    }
    uint64_t v6 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
    {
      v7[0] = 68289026;
      v7[1] = 0;
      __int16 v8 = 2082;
      __int16 v9 = "";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Multiclient got first unlock notification, now we can stream!\"}", (uint8_t *)v7, 0x12u);
    }
    *(unsigned char *)(a1 + 181) = 1;
  }
}

void sub_100456504(id *a1, int a2)
{
  if (a2 == 3)
  {
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B31C0);
    }
    uint64_t v3 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
    {
      int v5 = 68289026;
      int v6 = 0;
      __int16 v7 = 2082;
      __int16 v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Multiclient want to get best possible accuracy, and will request from nearby devices\"}", (uint8_t *)&v5, 0x12u);
    }
    sub_100455BD4((uint64_t)a1);
    sub_100455DE0((uint64_t)a1);
  }
  else
  {
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B31C0);
    }
    id v4 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
    {
      int v5 = 68289026;
      int v6 = 0;
      __int16 v7 = 2082;
      __int16 v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Multiclient no longer need to stream because granularity no longer Best\"}", (uint8_t *)&v5, 0x12u);
    }
    [a1[25] invalidate];

    a1[25] = 0;
    [a1[24] invalidateAndReleaseProbeClients];
    [a1[23] invalidate];

    a1[23] = 0;
  }
}

BOOL sub_1004566AC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (qword_102419540 != -1) {
    dispatch_once(&qword_102419540, &stru_1022B31C0);
  }
  id v4 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 68289283;
    int v14 = 0;
    __int16 v15 = 2082;
    uint64_t v16 = "";
    __int16 v17 = 2081;
    id v18 = [a2 UTF8String];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Multiclient registering a server\", \"effectiveID\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
  id v5 = [*(id *)(v3 + 192) deviceWithEffectiveID:a2];
  if (v5)
  {
    [*(id *)(v3 + 200) invalidate];

    *(void *)(v3 + 200) = 0;
    int v6 = *(void **)(v3 + 40);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_100456970;
    void v12[3] = &unk_1022A56E0;
    v12[4] = v5;
    void v12[5] = v3;
    [v6 afterInterval:v12 async:1.0];
  }
  else
  {
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B31C0);
    }
    __int16 v7 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_ERROR))
    {
      id v8 = [a2 UTF8String];
      *(_DWORD *)uint64_t buf = 68289283;
      int v14 = 0;
      __int16 v15 = 2082;
      uint64_t v16 = "";
      __int16 v17 = 2081;
      id v18 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Multiclient failed to find any already-discovered device with ID\", \"id\":%{private, location:escape_only}s}", buf, 0x1Cu);
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_1022B31C0);
      }
    }
    __int16 v9 = qword_102419548;
    if (os_signpost_enabled((os_log_t)qword_102419548))
    {
      id v10 = [a2 UTF8String];
      *(_DWORD *)uint64_t buf = 68289283;
      int v14 = 0;
      __int16 v15 = 2082;
      uint64_t v16 = "";
      __int16 v17 = 2081;
      id v18 = v10;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Multiclient failed to find any already-discovered device with ID", "{\"msg%{public}.0s\":\"#Multiclient failed to find any already-discovered device with ID\", \"id\":%{private, location:escape_only}s}", buf, 0x1Cu);
    }
  }
  return v5 != 0;
}

void sub_100456970(uint64_t a1)
{
}

void sub_10045697C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 184))
  {
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B31C0);
    }
    int v2 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_FAULT))
    {
      uint64_t buf = 68289026;
      __int16 v12 = 2082;
      int v13 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Multiclient attempting to re-register streaming link, but we already have one\"}", (uint8_t *)&buf, 0x12u);
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_1022B31C0);
      }
    }
    uint64_t v3 = qword_102419548;
    if (os_signpost_enabled((os_log_t)qword_102419548))
    {
      uint64_t buf = 68289026;
      __int16 v12 = 2082;
      int v13 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Multiclient attempting to re-register streaming link, but we already have one", "{\"msg%{public}.0s\":\"#Multiclient attempting to re-register streaming link, but we already have one\"}", (uint8_t *)&buf, 0x12u);
    }
  }
  else
  {
    if (!a2) {
      sub_101A60A44();
    }
    *(void *)(a1 + 184) = objc_alloc_init((Class)RPCompanionLinkClient);
    [*(id *)(a1 + 184) setDispatchQueue:[*(id *)(a1 + 40) queue]];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    _DWORD v10[2] = sub_100457794;
    void v10[3] = &unk_1022A3020;
    void v10[4] = a1;
    [*(id *)(a1 + 184) setInvalidationHandler:v10];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100457884;
    v9[3] = &unk_1022A3020;
    v9[4] = a1;
    [*(id *)(a1 + 184) setDisconnectHandler:v9];
    sub_100103240();
    if (sub_10073AAE4())
    {
      [*(id *)(a1 + 184) setFlags:1];
      uint64_t v6 = 0x380000103C04;
    }
    else
    {
      uint64_t v6 = 65538;
    }
    [*(id *)(a1 + 184) setControlFlags:v6];
    [*(id *)(a1 + 184) setDestinationDevice:a2];
    __int16 v7 = *(void **)(a1 + 184);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    int v8[2] = sub_100457988;
    void v8[3] = &unk_1022A5348;
    v8[4] = a1;
    [v7 activateWithCompletion:v8];
  }
}

void sub_100456C5C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(_DWORD *)(v2 + 144) != 3) {
    return;
  }
  if (![a2 count]) {
    goto LABEL_40;
  }
  uint64_t v32 = v2;
  id obj = [objc_alloc((Class)NSMutableArray) initWithCapacity:[a2 count]];
  id v35 = [objc_alloc((Class)NSMutableArray) initWithCapacity:[a2 count]];
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  id v4 = [a2 countByEnumeratingWithState:&v46 objects:v66 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v37 = *(void *)v47;
    while (2)
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v47 != v37) {
          objc_enumerationMutation(a2);
        }
        __int16 v7 = *(void **)(*((void *)&v46 + 1) + 8 * (void)v6);
        id v8 = [a2 objectForKeyedSubscript:v7];
        unsigned int v9 = [[objc_msgSend(v8, "objectForKeyedSubscript:", @"kCLLocationStreamingMessageRapportHasGPSKey") BOOLValue];
        unsigned int v10 = [[objc_msgSend(v8, "objectForKeyedSubscript:", @"kCLLocationStreamingMessageRapportIsPhoneKey") boolValue];
        unsigned int v11 = [[objc_msgSend(v8, "objectForKeyedSubscript:", @"kCLLocationStreamingMessageRapportIsPadKey") BOOLValue];
        if ([v8 objectForKeyedSubscript:@"kCLLocationStreamingMessageRapportIsAtLeast16_4"]) {
          unsigned int v12 = [[objc_msgSend(v8, "objectForKeyedSubscript:", @"kCLLocationStreamingMessageRapportIsAtLeast16_4") boolValue];
        }
        else {
          unsigned int v12 = 0;
        }
        if (qword_102419540 != -1) {
          dispatch_once(&qword_102419540, &stru_1022B31C0);
        }
        int v13 = qword_102419548;
        if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
        {
          id v14 = [v7 UTF8String];
          *(_DWORD *)uint64_t buf = 68290306;
          int v53 = 0;
          __int16 v54 = 2082;
          unint64_t v55 = "";
          __int16 v56 = 2082;
          uint64_t v57 = (uint64_t)v14;
          __int16 v58 = 1026;
          unsigned int v59 = v9;
          __int16 v60 = 1026;
          unsigned int v61 = v10;
          __int16 v62 = 1026;
          unsigned int v63 = v11;
          __int16 v64 = 1026;
          unsigned int v65 = v12;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Multiclient candidate device\", \"deviceID\":%{public, location:escape_only}s, \"hasGPS?\":%{public}hhd, \"isIphone\":%{public}hhd, \"isIpad\":%{public}hhd, \"atLeast16_4\":%{public}hhd}", buf, 0x34u);
        }
        if ((v12 & v9) == 1)
        {
          if (v10 && (*(unsigned int (**)(void))(*(void *)(a1 + 32) + 16))())
          {
            if (qword_102419540 != -1) {
              dispatch_once(&qword_102419540, &stru_1022B31C0);
            }
            uint64_t v27 = qword_102419548;
            if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
            {
              id v28 = [v7 UTF8String];
              *(_DWORD *)uint64_t buf = 68289282;
              int v53 = 0;
              __int16 v54 = 2082;
              unint64_t v55 = "";
              __int16 v56 = 2082;
              uint64_t v57 = (uint64_t)v28;
              int v29 = "{\"msg%{public}.0s\":\"#Multiclient selected an iPhone\", \"deviceID\":%{public, location:escape_only}s}";
LABEL_57:
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, v29, buf, 0x1Cu);
            }
            return;
          }
          if (v11) {
            __int16 v15 = obj;
          }
          else {
            __int16 v15 = v35;
          }
          [v15 addObject:v7];
        }
        uint64_t v6 = (char *)v6 + 1;
      }
      while (v5 != v6);
      id v5 = [a2 countByEnumeratingWithState:&v46 objects:v66 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  id v16 = [obj countByEnumeratingWithState:&v42 objects:v51 count:16];
  uint64_t v2 = v33;
  if (!v16)
  {
LABEL_32:
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    id v21 = [v35 countByEnumeratingWithState:&v38 objects:v50 count:16];
    if (v21)
    {
      id v22 = v21;
      uint64_t v23 = *(void *)v39;
LABEL_34:
      uint64_t v24 = 0;
      while (1)
      {
        if (*(void *)v39 != v23) {
          objc_enumerationMutation(v35);
        }
        uint64_t v25 = *(void **)(*((void *)&v38 + 1) + 8 * v24);
        if ((*(unsigned int (**)(void))(*(void *)(a1 + 32) + 16))()) {
          break;
        }
        if (v22 == (id)++v24)
        {
          id v22 = [v35 countByEnumeratingWithState:&v38 objects:v50 count:16];
          if (v22) {
            goto LABEL_34;
          }
          goto LABEL_40;
        }
      }
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_1022B31C0);
      }
      uint64_t v27 = qword_102419548;
      if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
      {
        id v31 = [v25 UTF8String];
        *(_DWORD *)uint64_t buf = 68289282;
        int v53 = 0;
        __int16 v54 = 2082;
        unint64_t v55 = "";
        __int16 v56 = 2082;
        uint64_t v57 = (uint64_t)v31;
        int v29 = "{\"msg%{public}.0s\":\"#Multiclient selected a non-iOS device\", \"deviceID\":%{public, location:escape_only}s}";
        goto LABEL_57;
      }
      return;
    }
LABEL_40:
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B31C0);
    }
    __int16 v26 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      int v53 = 0;
      __int16 v54 = 2082;
      unint64_t v55 = "";
      __int16 v56 = 2050;
      uint64_t v57 = 0x4014000000000000;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Multiclient failed to find any usable device, retrying\", \"nextFireInterval\":\"%{public}f\"}", buf, 0x1Cu);
    }
    [*(id *)(v2 + 200) setNextFireDelay:5.0];
    return;
  }
  id v17 = v16;
  uint64_t v18 = *(void *)v43;
LABEL_26:
  uint64_t v19 = 0;
  while (1)
  {
    if (*(void *)v43 != v18) {
      objc_enumerationMutation(obj);
    }
    __int16 v20 = *(void **)(*((void *)&v42 + 1) + 8 * v19);
    if ((*(unsigned int (**)(void))(*(void *)(a1 + 32) + 16))()) {
      break;
    }
    if (v17 == (id)++v19)
    {
      id v17 = [obj countByEnumeratingWithState:&v42 objects:v51 count:16];
      if (v17) {
        goto LABEL_26;
      }
      goto LABEL_32;
    }
  }
  if (qword_102419540 != -1) {
    dispatch_once(&qword_102419540, &stru_1022B31C0);
  }
  uint64_t v27 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
  {
    id v30 = [v20 UTF8String];
    *(_DWORD *)uint64_t buf = 68289282;
    int v53 = 0;
    __int16 v54 = 2082;
    unint64_t v55 = "";
    __int16 v56 = 2082;
    uint64_t v57 = (uint64_t)v30;
    int v29 = "{\"msg%{public}.0s\":\"#Multiclient selected an iPad\", \"deviceID\":%{public, location:escape_only}s}";
    goto LABEL_57;
  }
}

uint64_t sub_100457318(uint64_t a1)
{
  uint64_t v1 = qword_10247AAB0;
  if (!qword_10247AAB0) {
    return 0;
  }
  uint64_t v2 = (uint64_t **)(a1 + 56);
  while (1)
  {
    int v9 = *(_DWORD *)(v1 + 16);
    unsigned int v10 = &v9;
    uint64_t v3 = sub_10044715C(v2, &v9, (uint64_t)&unk_101D0B290, &v10);
    id v4 = v3[5];
    if (v4 != (uint64_t *)(v3 + 6)) {
      break;
    }
LABEL_11:
    uint64_t v1 = *(void *)v1;
    if (!v1) {
      return 0;
    }
  }
  while (!*((unsigned char *)v4 + 57))
  {
    id v5 = (uint64_t *)v4[1];
    if (v5)
    {
      do
      {
        uint64_t v6 = (uint64_t **)v5;
        id v5 = (uint64_t *)*v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        uint64_t v6 = (uint64_t **)v4[2];
        BOOL v7 = *v6 == v4;
        id v4 = (uint64_t *)v6;
      }
      while (!v7);
    }
    id v4 = (uint64_t *)v6;
    if (v6 == v3 + 6) {
      goto LABEL_11;
    }
  }
  return 1;
}

void sub_1004573E8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a4
    || ![a2 objectForKeyedSubscript:@"kCLLocationStreamingMessageRapportLocationStreamingActionKey"])
  {
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B31C0);
    }
    uint64_t v6 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_ERROR))
    {
      int v17 = 68289539;
      int v18 = 0;
      __int16 v19 = 2082;
      __int16 v20 = "";
      __int16 v21 = 2114;
      uint64_t v22 = a4;
      __int16 v23 = 2113;
      uint64_t v24 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Multiclient failed to send streaming action event\", \"error\":%{public, location:escape_only}@, \"resp\":%{private, location:escape_only}@}", (uint8_t *)&v17, 0x26u);
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_1022B31C0);
      }
    }
    uint64_t v7 = qword_102419548;
    if (os_signpost_enabled((os_log_t)qword_102419548))
    {
      int v17 = 68289539;
      int v18 = 0;
      __int16 v19 = 2082;
      __int16 v20 = "";
      __int16 v21 = 2114;
      uint64_t v22 = a4;
      __int16 v23 = 2113;
      uint64_t v24 = a2;
      id v8 = "#Multiclient failed to send streaming action event";
      int v9 = "{\"msg%{public}.0s\":\"#Multiclient failed to send streaming action event\", \"error\":%{public, location:esc"
           "ape_only}@, \"resp\":%{private, location:escape_only}@}";
      unsigned int v10 = v7;
      uint32_t v11 = 38;
LABEL_9:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v8, v9, (uint8_t *)&v17, v11);
    }
  }
  else
  {
    uint64_t v13 = (int)[a2 objectForKeyedSubscript:@"kCLLocationStreamingMessageRapportLocationStreamingActionKey"];
    if (*(void *)(a1 + 32) == v13)
    {
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_1022B31C0);
      }
      id v14 = qword_102419548;
      if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
      {
        int v17 = 68289282;
        int v18 = 0;
        __int16 v19 = 2082;
        __int16 v20 = "";
        __int16 v21 = 2050;
        uint64_t v22 = v13;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Multiclient action OK\", \"action\":%{public, location:CLLocationMultiStreamingAction}lld}", (uint8_t *)&v17, 0x1Cu);
      }
      return;
    }
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B31C0);
    }
    __int16 v15 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_FAULT))
    {
      int v17 = 68289282;
      int v18 = 0;
      __int16 v19 = 2082;
      __int16 v20 = "";
      __int16 v21 = 2050;
      uint64_t v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Multiclient unexpected action returned in response to request\", \"action\":%{public, location:CLLocationMultiStreamingAction}lld}", (uint8_t *)&v17, 0x1Cu);
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_1022B31C0);
      }
    }
    uint64_t v16 = qword_102419548;
    if (os_signpost_enabled((os_log_t)qword_102419548))
    {
      int v17 = 68289282;
      int v18 = 0;
      __int16 v19 = 2082;
      __int16 v20 = "";
      __int16 v21 = 2050;
      uint64_t v22 = v13;
      id v8 = "#Multiclient unexpected action returned in response to request";
      int v9 = "{\"msg%{public}.0s\":\"#Multiclient unexpected action returned in response to request\", \"action\":%{public,"
           " location:CLLocationMultiStreamingAction}lld}";
      unsigned int v10 = v16;
      uint32_t v11 = 28;
      goto LABEL_9;
    }
  }
}

id sub_100457794(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_102419540 != -1) {
    dispatch_once(&qword_102419540, &stru_1022B31C0);
  }
  uint64_t v2 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    __int16 v5 = 2082;
    uint64_t v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Multiclient invalidating server streaming link\"}", (uint8_t *)v4, 0x12u);
  }
  sub_100456210(v1, 1);
  return [*(id *)(v1 + 192) invalidateAndReleaseProbeClients];
}

uint64_t sub_100457884(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022B3200);
  }
  uint64_t v2 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    __int16 v5 = 2082;
    uint64_t v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Multiclient streamer got disconnected, invalidating connection and setup new discovery.\"}", (uint8_t *)v4, 0x12u);
  }
  [*(id *)(v1 + 192) invalidateAndReleaseProbeClients];
  [*(id *)(v1 + 184) invalidate];

  *(void *)(v1 + 184) = 0;
  return sub_100456504(v1, *(unsigned int *)(v1 + 144));
}

void sub_100457988(uint64_t a1, void *a2)
{
  if (a2)
  {
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B31C0);
    }
    uint64_t v3 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      int v19 = 0;
      __int16 v20 = 2082;
      __int16 v21 = "";
      __int16 v22 = 2114;
      id v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Multiclient failed to activate streaming link\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_1022B31C0);
      }
    }
    id v4 = qword_102419548;
    if (os_signpost_enabled((os_log_t)qword_102419548))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      int v19 = 0;
      __int16 v20 = 2082;
      __int16 v21 = "";
      __int16 v22 = 2114;
      id v23 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Multiclient failed to activate streaming link", "{\"msg%{public}.0s\":\"#Multiclient failed to activate streaming link\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 32);
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B31C0);
    }
    uint64_t v6 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
    {
      id v7 = [[[*(id *)(v5 + 184) destinationDevice] effectiveIdentifier] UTF8String];
      *(_DWORD *)uint64_t buf = 68289283;
      int v19 = 0;
      __int16 v20 = 2082;
      __int16 v21 = "";
      __int16 v22 = 2081;
      id v23 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Multiclient streaming client good to go!\", \"remoteID\":%{private, location:escape_only}s}", buf, 0x1Cu);
    }
    sub_100103240();
    if (sub_10073AAE4())
    {
      v16[0] = RPOptionInterest;
      v16[1] = RPOptionAllowUnauthenticated;
      v17[0] = &__kCFBooleanTrue;
      v17[1] = &__kCFBooleanTrue;
      id v8 = (void **)v17;
      int v9 = v16;
      uint64_t v10 = 2;
    }
    else
    {
      uint64_t v14 = RPOptionInterest;
      __int16 v15 = &__kCFBooleanTrue;
      id v8 = &v15;
      int v9 = &v14;
      uint64_t v10 = 1;
    }
    uint32_t v11 = +[NSDictionary dictionaryWithObjects:v8 forKeys:v9 count:v10];
    unsigned int v12 = *(void **)(v5 + 184);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100457CB0;
    v13[3] = &unk_1022B2FB8;
    v13[4] = v5;
    [v12 registerEventID:@"com.apple.locationd.rapport.stream-event" options:v11 handler:v13];
    sub_100456210(v5, 0);
    sub_100455FF0(v5);
    [*(id *)(v5 + 208) setNextFireDelay:15.0];
  }
}

void sub_100457CB0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(id **)(a1 + 32);
  if (qword_102419540 != -1) {
    dispatch_once(&qword_102419540, &stru_1022B31C0);
  }
  id v4 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
  {
    v5[0] = 68289283;
    v5[1] = 0;
    __int16 v6 = 2082;
    id v7 = "";
    __int16 v8 = 2113;
    int v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Multiclient got a location from our client!\", \"message\":%{private, location:escape_only}@}", (uint8_t *)v5, 0x1Cu);
  }
  sub_100457DB0(v3, a2);
}

void sub_100457DB0(id *a1, void *a2)
{
  id v4 = [[objc_msgSend(objc_msgSend(objc_alloc((Class)NSKeyedUnarchiver), "initForReadingFromData:error:", objc_msgSend(a2, "objectForKeyedSubscript:", @"kCLLocationStreamingMessageLocationKey"), 0), "decodeObjectOfClass:forKey:", objc_opt_class(), @"kCLLocationStreamingMessageLocationKey");
  id v5 = [a2 objectForKeyedSubscript:@"kCLLocationStreamingMessageInMotionKey"];
  id v6 = [a2 objectForKeyedSubscript:@"kCLLocationStreamingMessageLocationPrivateKey"];
  id v7 = [a2 objectForKeyedSubscript:@"kCLLocationStreamingMessageLocationInternalKey"];
  if (v4)
  {
    id v8 = v7;
    [v4 clientLocation];
    double v9 = *(double *)&__src[88];
    [v4 clientLocation];
    if (*(double *)&__src[88] <= 0.0)
    {
      double v10 = 15.0;
    }
    else
    {
      [v4 clientLocation:*(double *)&__src[88]];
      if (*(_DWORD *)&__src[96] == 1 || ([v4 clientLocation], v28 == 9))
      {
        if (*(double *)&__src[88] > 4.0) {
          double v9 = 4.0;
        }
      }
      [v4 clientLocation];
      double v10 = v9 + *(double *)&__src[76] - CFAbsoluteTimeGetCurrent();
    }
    if (v10 > 0.0)
    {
      sub_1000DB3D4((uint64_t)v27);
      uint64_t v16 = (std::__shared_weak_count *)[v4 clientLocation];
      long long v28 = *(_OWORD *)&__src[96];
      long long v29 = *(_OWORD *)&__src[112];
      *(_OWORD *)id v30 = *(_OWORD *)&__src[128];
      *(_OWORD *)&v30[12] = *(_OWORD *)&__src[140];
      *(_OWORD *)&v27[32] = *(_OWORD *)&__src[32];
      *(_OWORD *)&v27[48] = *(_OWORD *)&__src[48];
      *(_OWORD *)&v27[64] = *(_OWORD *)&__src[64];
      *(_OWORD *)&v27[80] = *(_OWORD *)&__src[80];
      *(_OWORD *)uint64_t v27 = *(_OWORD *)__src;
      *(_OWORD *)&v27[16] = *(_OWORD *)&__src[16];
      if (v5)
      {
        uint64_t v16 = (std::__shared_weak_count *)[v5 BOOLValue];
        if (v16) {
          int v17 = 1;
        }
        else {
          int v17 = 2;
        }
      }
      else
      {
        int v17 = 0;
      }
      int v42 = v17;
      if (v6)
      {
        __int16 v20 = [[CLStreamedLocationPrivate alloc] initWithData:v6];
        if (v20)
        {
          [(CLStreamedLocationPrivate *)v20 daemonLocationPrivate];
          long long v21 = v62;
        }
        else
        {
          bzero(__src, 0x280uLL);
          long long v21 = 0uLL;
        }
        long long v26 = v21;
        memcpy(v31, __src, 0x201uLL);
        long long v62 = 0u;
        uint64_t v16 = (std::__shared_weak_count *)*((void *)&v32 + 1);
        long long v32 = v26;
        if (!v16)
        {
          long long v37 = v67;
          v38[0] = v68[0];
          *(void *)((char *)v38 + 13) = *(void *)((char *)v68 + 13);
          long long v33 = v63;
          long long v34 = v64;
          long long v35 = v65;
          long long v36 = v66;
          if (!v8) {
            goto LABEL_33;
          }
          goto LABEL_32;
        }
        sub_1000DB0A0(v16);
        uint64_t v16 = (std::__shared_weak_count *)*((void *)&v62 + 1);
        long long v37 = v67;
        v38[0] = v68[0];
        *(void *)((char *)v38 + 13) = *(void *)((char *)v68 + 13);
        long long v33 = v63;
        long long v34 = v64;
        long long v35 = v65;
        long long v36 = v66;
        if (*((void *)&v62 + 1)) {
          sub_1000DB0A0(*((std::__shared_weak_count **)&v62 + 1));
        }
      }
      if (!v8)
      {
LABEL_33:
        v31[88] = 2;
        sub_1004558CC((uint64_t)v16, (uint64_t)v27);
        *(_DWORD *)__src = 9;
        (*((void (**)(id *, unsigned char *))*a1 + 15))(a1, __src);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022B3220);
        }
        id v23 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__src = 134286593;
          *(void *)&__src[4] = *(void *)&v27[4];
          *(_WORD *)&__src[12] = 2049;
          *(void *)&__src[14] = *(void *)&v27[12];
          *(_WORD *)&__src[22] = 2050;
          *(void *)&__src[24] = *(void *)&v27[20];
          *(_WORD *)&__src[32] = 2049;
          *(void *)&__src[34] = *(void *)&v27[44];
          *(_WORD *)&__src[42] = 2049;
          *(void *)&__src[44] = *(void *)&v27[60];
          *(_WORD *)&__src[52] = 1026;
          *(_DWORD *)&__src[54] = v28;
          *(_WORD *)&__src[58] = 2049;
          *(void *)&__src[60] = *(void *)&v27[28];
          *(_WORD *)&__src[68] = 2050;
          *(void *)&__src[70] = *(void *)&v27[36];
          *(_WORD *)&__src[78] = 2049;
          *(void *)&__src[80] = *(void *)&v30[16];
          *(_WORD *)&__src[88] = 2049;
          *(void *)&__src[90] = *(void *)&v27[52];
          *(_WORD *)&__src[98] = 2049;
          *(void *)&__src[100] = *(void *)&v27[68];
          *(_WORD *)&__src[108] = 1025;
          *(_DWORD *)&__src[110] = *(_DWORD *)&v30[12];
          *(_WORD *)&__src[114] = 2050;
          *(void *)&__src[116] = *(void *)&v27[76];
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "@ClxStreamed, Fix, 1, ll, %{private}.7f, %{private}.7f, acc, %{public}.2f, speed, %{private}.1f, course, %{private}.1f, type, %{public}d, alt, %{private}.1f, altunc, %{public}.1f,ellipsoidalAlt,%{private}.1f,speedUnc,%{private}.1f,courseUnc,%{private}.1f,signalEnv,%{private}d,timestamp,%{public}.3f", __src, 0x7Cu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(__src, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022B3220);
          }
          *(_DWORD *)uint64_t buf = 134286593;
          *(void *)long long v46 = *(void *)&v27[4];
          *(_WORD *)&v46[8] = 2049;
          *(void *)&v46[10] = *(void *)&v27[12];
          *(_WORD *)&v46[18] = 2050;
          *(void *)&v46[20] = *(void *)&v27[20];
          *(_WORD *)&v46[28] = 2049;
          *(void *)&v46[30] = *(void *)&v27[44];
          *(_WORD *)&v46[38] = 2049;
          *(void *)&v46[40] = *(void *)&v27[60];
          *(_WORD *)&v46[48] = 1026;
          int v47 = v28;
          __int16 v48 = 2049;
          uint64_t v49 = *(void *)&v27[28];
          __int16 v50 = 2050;
          uint64_t v51 = *(void *)&v27[36];
          __int16 v52 = 2049;
          uint64_t v53 = *(void *)&v30[16];
          __int16 v54 = 2049;
          *(void *)unint64_t v55 = *(void *)&v27[52];
          *(_WORD *)&v55[8] = 2049;
          uint64_t v56 = *(void *)&v27[68];
          __int16 v57 = 1025;
          int v58 = *(_DWORD *)&v30[12];
          __int16 v59 = 2050;
          uint64_t v60 = *(void *)&v27[76];
          uint64_t v25 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLStreamedLocationProvider::handleLocationMessage(NSDictionary *)", "%s\n", v25);
          if (v25 != __src) {
            free(v25);
          }
        }
        *(_DWORD *)__src = 0;
        (*((void (**)(id *, unsigned char *, unsigned char *, uint64_t, uint64_t, void))*a1 + 19))(a1, __src, v27, 1, 0xFFFFFFFFLL, 0);
        [v4 clientLocation];
        if (*(_DWORD *)&__src[96] == 1)
        {
          double v24 = 4.0;
        }
        else
        {
          [v4 clientLocation];
          double v24 = 5.0;
          if (*(_DWORD *)&v55[6] == 9) {
            double v24 = 4.0;
          }
        }
        if (v10 > v24) {
          double v24 = v10;
        }
        [a1[20] setNextFireDelay:v24];

        if (v43) {
          sub_1000DB0A0(v43);
        }
        if (v41 < 0) {
          operator delete(__p);
        }
        if (v39) {
          sub_1000DB0A0(v39);
        }
        if (*((void *)&v32 + 1)) {
          sub_1000DB0A0(*((std::__shared_weak_count **)&v32 + 1));
        }
        return;
      }
LABEL_32:
      __int16 v22 = [[CLStreamedLocationInternal alloc] initWithData:v8];
      [(CLStreamedLocationInternal *)v22 mergeIntoDaemonLocation:v27];

      goto LABEL_33;
    }
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B31C0);
    }
    uint64_t v18 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
    {
      [v4 clientLocation];
      uint64_t v19 = *(void *)&__src[76];
      [v4 clientLocation];
      *(_DWORD *)uint64_t buf = 68290050;
      *(_WORD *)&v46[4] = 2082;
      *(_DWORD *)long long v46 = 0;
      *(void *)&v46[6] = "";
      *(_WORD *)&v46[14] = 2050;
      *(void *)&v46[16] = v19;
      *(_WORD *)&v46[24] = 2050;
      *(double *)&v46[26] = v9;
      *(_WORD *)&v46[34] = 2050;
      *(double *)&v46[36] = v10;
      *(_WORD *)&v46[44] = 1026;
      *(_DWORD *)&v46[46] = v28;
      unsigned int v12 = "{\"msg%{public}.0s\":\"Dropping expired location\", \"timestamp\":\"%{public}f\", \"timeout\":\"%{public}f\""
            ", \"timeLeft\":\"%{public}f\", \"type\":%{public}d}";
      uint64_t v13 = buf;
      uint64_t v14 = v18;
      uint32_t v15 = 54;
      goto LABEL_22;
    }
  }
  else
  {
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B31C0);
    }
    uint64_t v11 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)__src = 68289283;
      *(_WORD *)&__src[8] = 2082;
      *(void *)&__src[10] = "";
      *(_WORD *)&__src[18] = 2113;
      *(void *)&__src[20] = a2;
      unsigned int v12 = "{\"msg%{public}.0s\":\"Missing data\", \"payload\":%{private, location:escape_only}@}";
      uint64_t v13 = __src;
      uint64_t v14 = v11;
      uint32_t v15 = 28;
LABEL_22:
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v12, v13, v15);
    }
  }
}

void sub_100458608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100458658((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100458658(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 1168);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  if (*(char *)(a1 + 927) < 0) {
    operator delete(*(void **)(a1 + 904));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 808);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  id v4 = *(std::__shared_weak_count **)(a1 + 688);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  return a1;
}

void sub_100458DA4(id a1, RPCompanionLinkDevice *a2)
{
  if ([(RPCompanionLinkDevice *)a2 model]) {
    uint64_t v3 = (const char *)[[-[RPCompanionLinkDevice model](a2, "model") UTF8String];
  }
  else {
    uint64_t v3 = "Unknown Model";
  }
  if ([(RPCompanionLinkDevice *)a2 name]) {
    id v4 = [[-[RPCompanionLinkDevice name](a2, "name") UTF8String];
  }
  else {
    id v4 = "Unknown Name";
  }
  if (qword_102419540 != -1) {
    dispatch_once(&qword_102419540, &stru_1022B31C0);
  }
  id v5 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v6 = ([(RPCompanionLinkDevice *)a2 statusFlags] >> 24) & 1;
    if (a2)
    {
      [(RPCompanionLinkDevice *)a2 operatingSystemVersion];
      uint64_t v7 = v13;
      [(RPCompanionLinkDevice *)a2 operatingSystemVersion];
      uint64_t v8 = v11;
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v7 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
    }
    id v9 = [[-[RPCompanionLinkDevice effectiveIdentifier](a2, "effectiveIdentifier", v10, v11, v12, v13, v14, v15) UTF8String];
    *(_DWORD *)uint64_t buf = 68290563;
    int v17 = 0;
    __int16 v18 = 2082;
    uint64_t v19 = "";
    __int16 v20 = 2082;
    long long v21 = v3;
    __int16 v22 = 2081;
    id v23 = v4;
    __int16 v24 = 1026;
    unsigned int v25 = v6;
    __int16 v26 = 2050;
    uint64_t v27 = v7;
    __int16 v28 = 2050;
    uint64_t v29 = v8;
    __int16 v30 = 2082;
    id v31 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#Multiclient listener found nearby device\", \"model\":%{public, location:escape_only}s, \"name\":%{private, location:escape_only}s, \"USB?\":%{public}hhd, \"major\":%{public}ld, \"minor\":%{public}ld, \"effectiveID\":%{public, location:escape_only}s}", buf, 0x4Au);
  }
}

void sub_100458F7C(id a1, RPCompanionLinkDevice *a2)
{
  if ([(RPCompanionLinkDevice *)a2 model]) {
    uint64_t v3 = (const char *)[[-[RPCompanionLinkDevice model](a2, "model") UTF8String];
  }
  else {
    uint64_t v3 = "Unknown Model";
  }
  if ([(RPCompanionLinkDevice *)a2 name]) {
    id v4 = [[-[RPCompanionLinkDevice name](a2, "name") UTF8String];
  }
  else {
    id v4 = "Unknown Name";
  }
  if (qword_102419540 != -1) {
    dispatch_once(&qword_102419540, &stru_1022B31C0);
  }
  id v5 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 68289795;
    v6[1] = 0;
    __int16 v7 = 2082;
    uint64_t v8 = "";
    __int16 v9 = 2082;
    uint64_t v10 = v3;
    __int16 v11 = 2081;
    uint64_t v12 = v4;
    __int16 v13 = 2082;
    id v14 = [[-[RPCompanionLinkDevice effectiveIdentifier](a2, "effectiveIdentifier") UTF8String];
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#Multiclient listener lost contact with nearby device\", \"model\":%{public, location:escape_only}s, \"name\":%{private, location:escape_only}s, \"effectiveID\":%{public, location:escape_only}s}", (uint8_t *)v6, 0x30u);
  }
}

void sub_1004590D8(id a1, NSError *a2)
{
  if (a2)
  {
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B31C0);
    }
    uint64_t v3 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2114;
      id v14 = a2;
      id v4 = "{\"msg%{public}.0s\":\"#Multiclient failed to setup nearby device listener\", \"error\":%{public, location:escape_only}@}";
      id v5 = v3;
      os_log_type_t v6 = OS_LOG_TYPE_DEFAULT;
      uint32_t v7 = 28;
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v5, v6, v4, (uint8_t *)&v9, v7);
    }
  }
  else
  {
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B31C0);
    }
    uint64_t v8 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
    {
      int v9 = 68289026;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      id v4 = "{\"msg%{public}.0s\":\"#Multiclient nearby device listener ready\"}";
      id v5 = v8;
      os_log_type_t v6 = OS_LOG_TYPE_INFO;
      uint32_t v7 = 18;
      goto LABEL_10;
    }
  }
}

void sub_100459FBC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B31C0);
    }
    uint64_t v2 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v12 = 0;
      __int16 v13 = 2082;
      id v14 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Multiclient probe client failed to register\"}", buf, 0x12u);
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_1022B31C0);
      }
    }
    uint64_t v3 = qword_102419548;
    if (os_signpost_enabled((os_log_t)qword_102419548))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v12 = 0;
      __int16 v13 = 2082;
      id v14 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Multiclient probe client failed to register", "{\"msg%{public}.0s\":\"#Multiclient probe client failed to register\"}", buf, 0x12u);
    }
  }
  else
  {
    id v5 = [[objc_msgSend(*(id *)(a1 + 32), "destinationDevice") effectiveIdentifier];
    id v6 = [[objc_msgSend(*(id *)(a1 + 32), "destinationDevice") name];
    uint32_t v7 = [*(id *)(a1 + 40) requestQ];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    int v8[2] = sub_10045A1C4;
    void v8[3] = &unk_1022B30A8;
    v8[4] = v5;
    void v8[5] = v6;
    v8[6] = *(void *)(a1 + 32);
    long long v9 = *(_OWORD *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 64);
    dispatch_async(v7, v8);
  }
}

id sub_10045A1C4(uint64_t a1)
{
  if (qword_102419540 != -1) {
    dispatch_once(&qword_102419540, &stru_1022B31C0);
  }
  uint64_t v2 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
  {
    id v3 = [*(id *)(a1 + 32) UTF8String];
    id v4 = [*(id *)(a1 + 40) UTF8String];
    *(_DWORD *)uint64_t buf = 68289539;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    __int16 v16 = 2082;
    id v17 = v3;
    __int16 v18 = 2081;
    id v19 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Multiclient probing potential server\", \"remote\":%{public, location:escape_only}s, \"name\":%{private, location:escape_only}s}", buf, 0x26u);
  }
  id v5 = *(void **)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10045A34C;
  v9[3] = &unk_1022B3080;
  int8x16_t v10 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 72);
  return [v5 sendRequestID:@"com.apple.locationd.rapport.availability-interest" request:v6 destinationID:RPDestinationIdentifierDirectPeer options:v7 responseHandler:v9];
}

void sub_10045A34C(id *a1, uint64_t a2, void *a3, void *a4)
{
  if (a4)
  {
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B31C0);
    }
    id v5 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_ERROR))
    {
      int v16 = 68289282;
      int v17 = 0;
      __int16 v18 = 2082;
      id v19 = "";
      __int16 v20 = 2082;
      id v21 = [[objc_msgSend(a4, "description") UTF8String];
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Multiclient error invoking interest request\", \"error\":%{public, location:escape_only}s}", (uint8_t *)&v16, 0x1Cu);
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_1022B31C0);
      }
    }
    uint64_t v6 = qword_102419548;
    if (os_signpost_enabled((os_log_t)qword_102419548))
    {
      id v7 = [[objc_msgSend(a4, "description") UTF8String];
      int v16 = 68289282;
      int v17 = 0;
      __int16 v18 = 2082;
      id v19 = "";
      __int16 v20 = 2082;
      id v21 = v7;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Multiclient error invoking interest request", "{\"msg%{public}.0s\":\"#Multiclient error invoking interest request\", \"error\":%{public, location:escape_only}s}", (uint8_t *)&v16, 0x1Cu);
    }
  }
  else
  {
    id v11 = [a3 objectForKeyedSubscript:RPOptionSenderID];
    int v12 = +[NSMutableDictionary dictionaryWithDictionary:a2];
    [(NSMutableDictionary *)v12 addEntriesFromDictionary:a3];
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B31C0);
    }
    int v13 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
    {
      id v14 = [a1[4] UTF8String];
      id v15 = [a1[5] UTF8String];
      int v16 = 68289795;
      int v17 = 0;
      __int16 v18 = 2082;
      id v19 = "";
      __int16 v20 = 2081;
      id v21 = v14;
      __int16 v22 = 2082;
      id v23 = v15;
      __int16 v24 = 2114;
      unsigned int v25 = v12;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Multiclient received availability response\", \"name\":%{private, location:escape_only}s, \"remote\":%{public, location:escape_only}s, \"resp\":%{public, location:escape_only}@}", (uint8_t *)&v16, 0x30u);
    }
    [a1[6] setObject:v12 forKeyedSubscript:v11];
  }
}

uint64_t sub_10045A5F8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10045A64C()
{
}

void sub_10045A704(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_10045A740(void *a1)
{
  *a1 = off_1022B2E18;
  uint64_t v2 = a1[16];
  a1[16] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[15];
  a1[15] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return sub_1006B7BEC(a1);
}

void sub_10045A7F0(void *a1)
{
  *a1 = off_1022B2E18;
  uint64_t v2 = a1[16];
  a1[16] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[15];
  a1[15] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_1006B7BEC(a1);

  operator delete();
}

void sub_10045A8B4(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        long long v9 = (uint64_t *)v4;
      }
      else {
        long long v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)uint64_t buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022B31A0);
      }
      int8x16_t v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        id v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          id v11 = (void *)*v11;
        }
        *(_DWORD *)uint64_t buf = 136446466;
        id v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022B31A0);
        }
        int v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          int v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        id v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        int v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::removeClient(int) [Notification_T = CLLocationProvider_Type::Notification, NotificationData_T = CLLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationProvider_Type::RegInfo]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_10045AB44(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_10045AB8C(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_10045ABD4(uint64_t a1, int *a2, uint64_t a3)
{
  sub_1000EF5B0(a3, &v10);
  int v9 = *a2;
  id v11 = &v9;
  uint64_t v5 = sub_10044715C((uint64_t **)(a1 + 56), &v9, (uint64_t)&unk_101D0B290, &v11);
  long long v6 = v10;
  long long v10 = 0uLL;
  int v7 = (std::__shared_weak_count *)v5[9];
  *((_OWORD *)v5 + 4) = v6;
  if (v7)
  {
    sub_1000DB0A0(v7);
    if (*((void *)&v10 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  return 1;
}

void sub_10045AC68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_10045AC80(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B31A0);
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v3 = (void *)*v3;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      __int16 v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022B31A0);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::listClients() [Notification_T = CLLocationProvider_Type::Notification, NotificationData_T = CLLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationProvider_Type::RegInfo]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B31A0);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      long long v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        long long v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)uint64_t buf = 136315394;
      __int16 v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022B31A0);
      }
      __int16 v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::listClients() [Notification_T = CLLocationProvider_Type::Notification, NotificationData_T = CLLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationProvider_Type::RegInfo]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    BOOL v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        int v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_1022B31A0);
            }
            long long v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              id v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                id v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)uint64_t buf = 136315650;
              __int16 v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022B31A0);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::listClients() [Notification_T = CLLocationProvider_Type::Notification, NotificationData_T = CLLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationProvider_Type::RegInfo]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            id v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                id v15 = v14;
                id v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                id v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                int v9 = v15;
              }
              while (!v16);
            }
            int v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        __int16 v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            id v19 = v18;
            __int16 v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            id v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            BOOL v8 = v19;
          }
          while (!v16);
        }
        BOOL v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_10045B230(uint64_t a1)
{
  sub_10045B690(a1);

  operator delete();
}

void sub_10045B268(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10045B298(id a1)
{
  qword_102419548 = (uint64_t)os_log_create("com.apple.locationd.Core", "Streaming");
}

void sub_10045B2C8(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_10045B2F8(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_10045B328(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_10045B358(uint64_t a1, int *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 8 * a3;
    do
    {
      sub_10045B3D0(a1, a2, a2);
      a2 += 2;
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

void sub_10045B3BC(_Unwind_Exception *a1)
{
  sub_1000D7D80(v1);
  _Unwind_Resume(a1);
}

void *sub_10045B3D0(uint64_t a1, int *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    int v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      long long v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          long long v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  long long v10 = operator new(0x18uLL);
  void *v10 = 0;
  v10[1] = v6;
  _DWORD v10[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_100100330(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  id v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *v10 = *v19;
LABEL_38:
    void *v19 = v10;
    goto LABEL_39;
  }
  void *v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    id v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_10045B5D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10045B5EC(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_10045B61C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B3270;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10045B63C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B3270;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10045B690(uint64_t a1)
{
  *(void *)a1 = off_1022B32C0;
  uint64_t v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  *uint64_t v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_10045B738(void *a1, int a2, int a3, int a4, const char *a5, const char *a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  _os_signpost_emit_with_name_impl(a1, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, a5, a6, &buf, 0x30u);
}

BOOL sub_10045B764()
{
  uint64_t v1 = qword_102419548;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

void sub_10045B784(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  _os_log_impl(a1, v13, OS_LOG_TYPE_FAULT, a4, &buf, 0x30u);
}

void sub_10045B7A4(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  _os_log_impl(a1, v13, OS_LOG_TYPE_INFO, a4, &buf, 0x30u);
}

void sub_10045B7C4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D1EFF8;
      v0[3] = unk_101D1F008;
      v0[4] = xmmword_101D1F018;
      v0[0] = xmmword_101D1EFD8;
      v0[1] = unk_101D1EFE8;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_10045B8A4(_Unwind_Exception *a1)
{
}

uint64_t sub_10045B8BC()
{
  long long v1 = xmmword_101D1F030;
  uint64_t v2 = 0x100000002;
  sub_10045B358((uint64_t)&unk_10247AAA0, (int *)&v1, 3);
  return __cxa_atexit((void (*)(void *))sub_100452A48, &unk_10247AAA0, (void *)&_mh_execute_header);
}

uint64_t sub_10045BB88(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v6 = 0;
        int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v11 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        *(unsigned char *)(a1 + 36) |= 1u;
        unint64_t v13 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v13 <= 0xFFFFFFFFFFFFFFF7 && v13 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v14 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v13);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v13 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v14 = 0;
        }
        *(void *)(a1 + 8) = v14;
        goto LABEL_42;
      case 2u:
        unint64_t v16 = objc_alloc_init(ALCMMotionContextMotionState);

        *(void *)(a1 + 16) = v16;
        if (!PBReaderPlaceMark() || (sub_10045D878((uint64_t)v16, a2) & 1) == 0) {
          return 0;
        }
        goto LABEL_28;
      case 3u:
        size_t v17 = objc_alloc_init(ALCLNatalieFeatures);

        *(void *)(a1 + 24) = v17;
        if PBReaderPlaceMark() && (sub_10046BE44((uint64_t)v17, a2))
        {
LABEL_28:
          PBReaderRecallMark();
LABEL_42:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }
        return 0;
      case 4u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        while (2)
        {
          uint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v22 = v21 + 1;
          if (v21 == -1 || v22 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v23 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if (v23 < 0)
            {
              v18 += 7;
              BOOL v10 = v19++ >= 9;
              if (v10)
              {
                uint64_t v20 = 0;
                goto LABEL_39;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v20 = 0;
        }
LABEL_39:
        *(unsigned char *)(a1 + 32) = v20 != 0;
        goto LABEL_42;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_42;
    }
  }
}

uint64_t sub_10045D878(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_84;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_86;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_84:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_86:
        uint64_t v53 = 36;
        goto LABEL_116;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v14 = 0;
        while (2)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v21 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_90;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_90:
        uint64_t v53 = 16;
        goto LABEL_116;
      case 3u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 44) |= 4u;
        while (2)
        {
          unint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v24 == -1 || v24 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v25 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
            v14 |= (unint64_t)(v25 & 0x7F) << v22;
            if (v25 < 0)
            {
              v22 += 7;
              BOOL v9 = v23++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_94;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_94:
        uint64_t v53 = 24;
        goto LABEL_116;
      case 4u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 44) |= 8u;
        while (2)
        {
          unint64_t v28 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v28 == -1 || v28 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v29 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 1;
            v14 |= (unint64_t)(v29 & 0x7F) << v26;
            if (v29 < 0)
            {
              v26 += 7;
              BOOL v9 = v27++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_98;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_98:
        uint64_t v53 = 28;
        goto LABEL_116;
      case 5u:
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 44) |= 0x10u;
        while (2)
        {
          unint64_t v32 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v32 == -1 || v32 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v33 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v32);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v32 + 1;
            v14 |= (unint64_t)(v33 & 0x7F) << v30;
            if (v33 < 0)
            {
              v30 += 7;
              BOOL v9 = v31++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_102;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_102:
        uint64_t v53 = 32;
        goto LABEL_116;
      case 6u:
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0;
        *(unsigned char *)(a1 + 44) |= 0x40u;
        while (2)
        {
          unint64_t v37 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v37 == -1 || v37 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v38 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v37);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v37 + 1;
            v36 |= (unint64_t)(v38 & 0x7F) << v34;
            if (v38 < 0)
            {
              v34 += 7;
              BOOL v9 = v35++ >= 9;
              if (v9)
              {
                uint64_t v36 = 0;
                goto LABEL_106;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v36 = 0;
        }
LABEL_106:
        BOOL v54 = v36 != 0;
        uint64_t v55 = 41;
        goto LABEL_111;
      case 7u:
        char v39 = 0;
        unsigned int v40 = 0;
        uint64_t v41 = 0;
        *(unsigned char *)(a1 + 44) |= 0x20u;
        while (2)
        {
          unint64_t v42 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v42 == -1 || v42 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v43 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v42);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v42 + 1;
            v41 |= (unint64_t)(v43 & 0x7F) << v39;
            if (v43 < 0)
            {
              v39 += 7;
              BOOL v9 = v40++ >= 9;
              if (v9)
              {
                uint64_t v41 = 0;
                goto LABEL_110;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v41 = 0;
        }
LABEL_110:
        BOOL v54 = v41 != 0;
        uint64_t v55 = 40;
LABEL_111:
        *(unsigned char *)(a1 + v55) = v54;
        continue;
      case 8u:
        char v44 = 0;
        unsigned int v45 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 44) |= 2u;
        while (2)
        {
          unint64_t v46 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v46 == -1 || v46 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v47 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v46);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v46 + 1;
            v14 |= (unint64_t)(v47 & 0x7F) << v44;
            if (v47 < 0)
            {
              v44 += 7;
              BOOL v9 = v45++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_115;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_115:
        uint64_t v53 = 20;
LABEL_116:
        *(_DWORD *)(a1 + v53) = v14;
        continue;
      case 9u:
        char v48 = 0;
        unsigned int v49 = 0;
        uint64_t v50 = 0;
        *(unsigned char *)(a1 + 44) |= 1u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      unint64_t v51 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v51 == -1 || v51 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v52 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v51);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v51 + 1;
      v50 |= (unint64_t)(v52 & 0x7F) << v48;
      if ((v52 & 0x80) == 0) {
        goto LABEL_120;
      }
      v48 += 7;
      BOOL v9 = v49++ >= 9;
      if (v9)
      {
        uint64_t v50 = 0;
        goto LABEL_122;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_120:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v50 = 0;
    }
LABEL_122:
    *(void *)(a1 + 8) = v50;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_10045E880()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247AB00, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10247AB00))
  {
    __cxa_atexit((void (*)(void *))sub_10045E944, &qword_10247AAF8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10247AB00);
  }
  uint64_t result = qword_10247AAF8;
  if (!qword_10247AAF8) {
    operator new();
  }
  return result;
}

uint64_t *sub_10045E944(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    sub_10045F2A8((uint64_t)a1, v2);
  }
  return a1;
}

uint64_t sub_10045E97C(unint64_t a1, _DWORD *a2)
{
  int v3 = a1;
  if (a1 >= 4)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022B3320);
    }
    unsigned int v5 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "fromCMIndoorOutdoorType received unhandled indoor outdoor type: %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022B3320);
      }
      unint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLOutdoorUpdateToProtobufConverter::fromCMIndoorOutdoorType(const CMIndoorOutdoorType, CLP::LogEntry::OutdoorEstimator::CMIndoorOutdoorType &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    int v4 = 0;
  }
  else
  {
    int v4 = dword_101D1F100[a1];
  }
  *a2 = v4;
  return 1;
}

void sub_10045EB50(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_10045EB5C(unint64_t a1, _DWORD *a2)
{
  int v3 = a1;
  if (a1 >= 4)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022B3320);
    }
    int v4 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "fromCMIndoorOutdoorConfidence received unhandled indoor outdoor confidence: %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022B3320);
      }
      unint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLOutdoorUpdateToProtobufConverter::fromCMIndoorOutdoorConfidence(const CMIndoorOutdoorConfidence, CLP::LogEntry::OutdoorEstimator::CMIndoorOutdoorConfidence &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    int v3 = 0;
  }
  *a2 = v3;
  return 1;
}

void sub_10045ED20(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

BOOL sub_10045ED2C(uint64_t a1, double a2)
{
  double v15 = a2;
  if (!a1) {
    return 0;
  }
  *(_DWORD *)(a1 + 36) |= 1u;
  *(double *)(a1 + 8) = a2;
  unint64_t v14 = 0xBFF0000000000000;
  uint64_t v3 = sub_10045E880();
  if (!sub_100B0198C(v3, &v15, (double *)&v14))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022B3320);
    }
    int v8 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "fromCFAbsoluteTime, convertCFAbsoluteToMachAbsolute_RealTime failed", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022B3320);
      }
      LOWORD(v13[0]) = 0;
      char v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLOutdoorUpdateToProtobufConverter::fromCFAbsoluteTime(const CFAbsoluteTime, CLP::LogEntry::OutdoorEstimator::Timestamp *)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    return 0;
  }
  unint64_t v4 = v14;
  *(_DWORD *)(a1 + 36) |= 2u;
  *(void *)(a1 + 16) = v4;
  v13[0] = 0.0;
  uint64_t v5 = sub_10045E880();
  BOOL v6 = sub_100B01398(v5, (double *)&v14, v13);
  if (v6)
  {
    double v7 = v13[0];
    *(_DWORD *)(a1 + 36) |= 4u;
    *(double *)(a1 + 24) = v7;
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022B3320);
    }
    int v10 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "fromCFAbsoluteTime, convertMachAbsoluteToMachContinuous_RealTime failed", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022B3320);
      }
      int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLOutdoorUpdateToProtobufConverter::fromCFAbsoluteTime(const CFAbsoluteTime, CLP::LogEntry::OutdoorEstimator::Timestamp *)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  return v6;
}

void sub_10045F074(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

BOOL sub_10045F080(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  sub_10016BC44((uint64_t)&v18);
  *(_DWORD *)(a2 + 52) |= 1u;
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4) {
    operator new();
  }
  *(_DWORD *)(v4 + 36) |= 1u;
  *(_DWORD *)(a2 + 52) |= 1u;
  *(_DWORD *)(v4 + 36) |= 2u;
  *(int8x16_t *)(v4 + 8) = vextq_s8(v19, v19, 8uLL);
  *(_DWORD *)(a2 + 52) |= 1u;
  uint64_t v5 = v18;
  *(_DWORD *)(v4 + 36) |= 4u;
  *(void *)(v4 + 24) = v5;
  *(_DWORD *)(a2 + 52) |= 2u;
  uint64_t v6 = *(void *)(a2 + 16);
  if (!v6) {
    operator new();
  }
  BOOL v7 = sub_10045ED2C(v6, *(double *)a1);
  unsigned int v17 = 0;
  sub_10045E97C(*(void *)(a1 + 16), &v17);
  unsigned int v8 = v17;
  if (!sub_10016E644(v17))
  {
    unsigned int v13 = "::CLP::LogEntry::OutdoorEstimator::CMIndoorOutdoorType_IsValid(value)";
    int v14 = 2227;
    double v15 = "set_type";
    goto LABEL_13;
  }
  *(_DWORD *)(a2 + 52) |= 4u;
  *(_DWORD *)(a2 + 24) = v8;
  unsigned int v16 = 0;
  sub_10045EB5C(*(void *)(a1 + 24), &v16);
  unsigned int v9 = v16;
  if (!sub_100165F14(v16))
  {
    unsigned int v13 = "::CLP::LogEntry::OutdoorEstimator::CMIndoorOutdoorConfidence_IsValid(value)";
    int v14 = 2250;
    double v15 = "set_confidence";
LABEL_13:
    __assert_rtn(v15, "CLPOutdoorEstimatorLogEntry.pb.h", v14, v13);
  }
  int v10 = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 28) = v9;
  double v11 = *(double *)(a1 + 32);
  *(_DWORD *)(a2 + 52) = v10 | 0x38;
  *(double *)(a2 + 32) = 1.0 - v11;
  *(double *)(a2 + 40) = v11;
  return v7;
}

void sub_10045F248()
{
}

void sub_10045F278(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_10045F2A8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void **)(a2 + 40);
    if (v2)
    {
      *(void *)(a2 + 48) = v2;
      operator delete(v2);
    }
    operator delete();
  }
}

void sub_10045F32C(id a1)
{
  v1[0] = @"gsp10-ssl.apple.com";
  v2[0] = +[NSNull null];
  v1[1] = @"gs-loc.apple.com";
  v2[1] = +[NSNull null];
  v2[2] = @"1.2.840.113635.100.6.27.35";
  v1[2] = @"iphone-ld.apple.com";
  v1[3] = @"configuration.apple.com";
  v2[3] = +[NSNull null];
  unsigned __int8 v1[4] = @"cl5.apple.com";
  v2[4] = +[NSNull null];
  v1[5] = @"cl4.apple.com";
  v2[5] = +[NSNull null];
  v1[6] = @"cl3.apple.com";
  v2[6] = +[NSNull null];
  v1[7] = @"cl2.apple.com";
  v2[7] = +[NSNull null];
  v1[8] = @"ingest.apple-studies.com";
  v2[8] = +[NSNull null];
  v1[9] = @"ingest.stg.apple-studies.com";
  v2[9] = +[NSNull null];
  qword_10247AB10 = +[NSDictionary dictionaryWithObjects:v2 forKeys:v1 count:10];
}

void sub_10045FB08(id a1)
{
  qword_102419608 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

uint64_t sub_10045FF90(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    uint64_t v4 = &selRef_endpoint;
    uint64_t v5 = &selRef_endpoint;
    uint64_t v6 = &selRef_endpoint;
    BOOL v7 = &selRef_endpoint;
    unsigned int v8 = &selRef_endpoint;
    unsigned int v9 = &selRef_endpoint;
    int v10 = &selRef_endpoint;
    double v11 = &selRef_endpoint;
    char v12 = &selRef_endpoint;
    do
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        uint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v17 = v16 + 1;
        if (v16 == -1 || v17 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v18 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17;
        v15 |= (unint64_t)(v18 & 0x7F) << v13;
        if ((v18 & 0x80) == 0) {
          goto LABEL_12;
        }
        v13 += 7;
        BOOL v19 = v14++ >= 9;
        if (v19)
        {
          unint64_t v15 = 0;
          uint64_t v20 = OBJC_IVAR___PBDataReader__error;
          int v21 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
      uint64_t v20 = OBJC_IVAR___PBDataReader__error;
      int v21 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v15 = 0;
      }
LABEL_14:
      if (v21 || (v15 & 7) == 4) {
        break;
      }
      switch((v15 >> 3))
      {
        case 1u:
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          *(unsigned char *)(a1 + *((int *)v4 + 961)) |= 4u;
          while (1)
          {
            uint64_t v26 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v27 = v26 + 1;
            if (v26 == -1 || v27 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v28 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27;
            v25 |= (unint64_t)(v28 & 0x7F) << v23;
            if ((v28 & 0x80) == 0) {
              goto LABEL_81;
            }
            v23 += 7;
            BOOL v19 = v24++ >= 9;
            if (v19)
            {
              LODWORD(v25) = 0;
              goto LABEL_83;
            }
          }
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_81:
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v25) = 0;
          }
LABEL_83:
          uint64_t v66 = *((int *)v5 + 962);
          goto LABEL_96;
        case 2u:
          unint64_t v35 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v35 <= 0xFFFFFFFFFFFFFFF7 && v35 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v36 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v35);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v35 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + v20) = 1;
            uint64_t v36 = 0;
          }
          uint64_t v67 = *((int *)v6 + 966);
          goto LABEL_118;
        case 3u:
          char v37 = 0;
          unsigned int v38 = 0;
          uint64_t v25 = 0;
          *(unsigned char *)(a1 + *((int *)v4 + 961)) |= 2u;
          while (2)
          {
            uint64_t v39 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v40 = v39 + 1;
            if (v39 == -1 || v40 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v41 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v39);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v40;
              v25 |= (unint64_t)(v41 & 0x7F) << v37;
              if (v41 < 0)
              {
                v37 += 7;
                BOOL v19 = v38++ >= 9;
                if (v19)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_87;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v25) = 0;
          }
LABEL_87:
          uint64_t v66 = *((int *)v7 + 963);
          goto LABEL_96;
        case 4u:
          unint64_t v42 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v42 <= 0xFFFFFFFFFFFFFFFBLL && v42 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            int v43 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v42);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v42 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + v20) = 1;
            int v43 = 0;
          }
          uint64_t v68 = *((int *)v8 + 967);
          goto LABEL_115;
        case 5u:
          unint64_t v44 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v44 <= 0xFFFFFFFFFFFFFFFBLL && v44 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            int v43 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v44);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v44 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + v20) = 1;
            int v43 = 0;
          }
          uint64_t v68 = *((int *)v9 + 968);
          goto LABEL_115;
        case 6u:
          unint64_t v45 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v45 <= 0xFFFFFFFFFFFFFFFBLL && v45 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            int v43 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v45);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v45 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + v20) = 1;
            int v43 = 0;
          }
          uint64_t v68 = *((int *)v10 + 969);
          goto LABEL_115;
        case 7u:
          unint64_t v46 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v46 <= 0xFFFFFFFFFFFFFFF7 && v46 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v36 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v46);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v46 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + v20) = 1;
            uint64_t v36 = 0;
          }
          uint64_t v67 = *((int *)v11 + 970);
          goto LABEL_118;
        case 8u:
          unint64_t v47 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v47 <= 0xFFFFFFFFFFFFFFFBLL && v47 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            int v43 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v47);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v47 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + v20) = 1;
            int v43 = 0;
          }
          uint64_t v68 = *((int *)v12 + 971);
          goto LABEL_115;
        case 9u:
          char v48 = 0;
          unsigned int v49 = 0;
          uint64_t v25 = 0;
          while (2)
          {
            uint64_t v50 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v51 = v50 + 1;
            if (v50 == -1 || v51 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v52 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v50);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v51;
              v25 |= (unint64_t)(v52 & 0x7F) << v48;
              if (v52 < 0)
              {
                v48 += 7;
                BOOL v19 = v49++ >= 9;
                if (v19)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_91;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v25) = 0;
          }
LABEL_91:
          uint64_t v66 = 64;
          goto LABEL_96;
        case 0xAu:
          char v53 = 0;
          unsigned int v54 = 0;
          uint64_t v25 = 0;
          while (2)
          {
            uint64_t v55 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v56 = v55 + 1;
            if (v55 == -1 || v56 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v57 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v55);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v56;
              v25 |= (unint64_t)(v57 & 0x7F) << v53;
              if (v57 < 0)
              {
                v53 += 7;
                BOOL v19 = v54++ >= 9;
                if (v19)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_95;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v25) = 0;
          }
LABEL_95:
          uint64_t v66 = 56;
LABEL_96:
          *(_DWORD *)(a1 + v66) = v25;
          continue;
        case 0xBu:
          unint64_t v58 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v58 <= 0xFFFFFFFFFFFFFFFBLL && v58 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            int v43 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v58);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v58 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + v20) = 1;
            int v43 = 0;
          }
          uint64_t v68 = 60;
LABEL_115:
          *(_DWORD *)(a1 + v68) = v43;
          continue;
        case 0xCu:
          *(unsigned char *)(a1 + *((int *)v4 + 961)) |= 1u;
          unint64_t v59 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v59 <= 0xFFFFFFFFFFFFFFF7 && v59 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v36 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v59);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v59 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v36 = 0;
          }
          uint64_t v67 = 24;
LABEL_118:
          *(void *)(a1 + v67) = v36;
          continue;
        case 0xDu:
          char v60 = 0;
          unsigned int v61 = 0;
          uint64_t v62 = 0;
          *(unsigned char *)(a1 + *((int *)v4 + 961)) |= 8u;
          break;
        default:
          char v29 = v5;
          char v30 = v6;
          unsigned int v31 = v7;
          unint64_t v32 = v4;
          uint64_t v69 = a1;
          char v33 = v8;
          uint64_t result = PBReaderSkipValueWithTag();
          unsigned int v8 = v33;
          a1 = v69;
          uint64_t v4 = v32;
          unsigned int v9 = &selRef_endpoint;
          BOOL v7 = v31;
          int v10 = &selRef_endpoint;
          uint64_t v6 = v30;
          double v11 = &selRef_endpoint;
          uint64_t v5 = v29;
          char v12 = &selRef_endpoint;
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v63 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v64 = v63 + 1;
        if (v63 == -1 || v64 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v65 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v63);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v64;
        v62 |= (unint64_t)(v65 & 0x7F) << v60;
        if ((v65 & 0x80) == 0) {
          goto LABEL_98;
        }
        v60 += 7;
        BOOL v19 = v61++ >= 9;
        if (v19)
        {
          uint64_t v62 = 0;
          goto LABEL_100;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_98:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v62 = 0;
      }
LABEL_100:
      *(unsigned char *)(a1 + 68) = v62 != 0;
    }
    while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length));
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void *sub_100461410(void *a1, int a2)
{
  sub_100134750(__p, "");
  sub_1004614F0((uint64_t)a1, "CardioChangeFeatureHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_1022B3390;
  a1[9] = off_1022B3440;
  sub_100461D80((uint64_t)a1);
  return a1;
}

void sub_1004614C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_1004619AC(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_1004614F0(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  char v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 8));
  *char v12 = off_1022ADB08;
  *(void *)a1 = off_1022B35F0;
  *(void *)(a1 + 72) = off_1022B3698;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_1022B35F0;
  *(void *)(a1 + 72) = off_1022B3698;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_DWORD *)(a1 + 240) = -1;
  *(void *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = 12000;
  *(void *)(a1 + 264) = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 272));
  *(void *)(a1 + 272) = off_1022ADB08;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_100461910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  void *v27 = v30;
  sub_1003BE1F8(v31);
  sub_1002CDF4C(v29);
  sub_1011F8AE0(v28);
  *uint64_t v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_1004619A4()
{
}

void *sub_1004619AC(void *a1)
{
  *a1 = off_1022B35F0;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_1022B3698;
  a1[33] = off_1022ADAD8;
  sub_1003BE1F8(a1 + 34);
  sub_1002CDF4C(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022ADAD8;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void *sub_100461A70(uint64_t a1)
{
  return sub_1004619AC((void *)(a1 - 72));
}

void sub_100461A78(void *a1)
{
  sub_1004619AC(a1);

  operator delete();
}

void sub_100461AB0(uint64_t a1)
{
  sub_1004619AC((void *)(a1 - 72));

  operator delete();
}

uint64_t sub_100461AEC(uint64_t a1, uint64_t a2)
{
  if (*(double *)(*(void *)(a2 + 8) - 16) == 1.79769313e308 && sub_100082064(a1 + 72))
  {
    sub_10002B640(*(void *)(a1 + 80));
    CFAbsoluteTimeGetCurrent();
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM CardioChangeFeatureHistory WHERE startTime < ?");
  }
  return -1;
}

void sub_100461C38(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100461C50(uint64_t a1, uint64_t a2)
{
  return sub_100461AEC(a1 - 72, a2);
}

uint64_t sub_100461C58(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT COUNT(*) FROM CardioChangeFeatureHistory");
  }
  return 0xFFFFFFFFLL;
}

void sub_100461D14(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100461D50(uint64_t a1)
{
  return sub_100461C58(a1 - 72);
}

uint64_t sub_100461D58(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 120))(a1, a2, 0);
}

uint64_t sub_100461D80(uint64_t a1)
{
  uint64_t result = sub_10014C3C0(*(void *)(a1 + 80));
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 80);
    return sub_1005F7B0C(v3, "CardioChangeFeatureHistory", (const char **)&off_1022B34D0, (const std::string::value_type **)&off_10241B4E8, 0);
  }
  return result;
}

uint64_t sub_100461DE8(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"INSERT INTO CardioChangeFeatureHistory (startTime, aggregateFeatureName, aggregateFeatureValue) VALUES (?, ?, ?)");
  }
  return result;
}

void sub_100461ECC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

void sub_100461EE4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
}

void sub_100461EF0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(void *)a2 = sqlite3_column_int(v4, 0);
  uint64_t v5 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v5, 1);
  char v6 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 16) = sqlite3_column_int(v6, 2);
  BOOL v7 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 24) = sqlite3_column_double(v7, 3);
}

uint64_t sub_100461F68(uint64_t a1, void *a2)
{
  if (sub_100082064(a1 + 72))
  {
    a2[1] = *a2;
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM CardioChangeFeatureHistory WHERE startTime >= ? ORDER BY startTime");
  }
  if (qword_1024192B0 != -1) {
    dispatch_once(&qword_1024192B0, &stru_1022B35C0);
  }
  uint64_t v4 = qword_1024192B8;
  if (os_log_type_enabled((os_log_t)qword_1024192B8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CardioChangeFeatureHistory, DB not accessible", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192B0 != -1) {
      dispatch_once(&qword_1024192B0, &stru_1022B35C0);
    }
    char v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLCardioChangeFeatureHistoryDb::querySinceTime(CFAbsoluteTime, std::vector<CLCardioChange::AggregateFeatureEntry> &) const", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return 109;
}

void sub_100462298(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1004622DC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1;
  }
  if (v5 != 100) {
    return 2;
  }
  sub_100461EF0(a1, a2);
  return 0;
}

uint64_t sub_10046233C(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM CardioChangeFeatureHistory WHERE aggregateFeatureName = ? ORDER BY id DESC LIMIT 1");
  }
  if (qword_1024192B0 != -1) {
    dispatch_once(&qword_1024192B0, &stru_1022B35C0);
  }
  uint64_t v2 = qword_1024192B8;
  if (os_log_type_enabled((os_log_t)qword_1024192B8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CardioChangeFeatureHistory, DB not accessible", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192B0 != -1) {
      dispatch_once(&qword_1024192B0, &stru_1022B35C0);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLCardioChangeFeatureHistoryDb::getMostRecentEntryForFeature(CLCardioChange::AggregateFeatureEntry &, CLCardioChange::AggregateFeatureType) const", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return 109;
}

void sub_1004626A4(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004626E8(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM CardioChangeFeatureHistory ORDER BY id DESC LIMIT 1");
  }
  return 2;
}

void sub_100462784(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10046279C(void *a1, void *a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101A60C04(v4);
    sub_1001D7FD4();
  }
  char v12 = v15[1];
  operator delete(v15[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    a2[1] = *a2;
    sub_10010F274((uint64_t)v15);
    char v6 = sub_100132EFC(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((SBYTE7(v14) & 0x80u) == 0) {
      BOOL v7 = __p;
    }
    else {
      BOOL v7 = (void **)__p[0];
    }
    if ((SBYTE7(v14) & 0x80u) == 0) {
      uint64_t v8 = BYTE7(v14);
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    unsigned int v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if (SBYTE7(v14) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((SBYTE7(v14) & 0x80u) == 0) {
      double v11 = __p;
    }
    else {
      double v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_100462B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  sub_101A129A8((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100462BF0(void *a1)
{
  uint64_t v3 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17[0]) < 0)
  {
    uint64_t v10 = v16[1];
    operator delete(v16[0]);
    if (v10)
    {
LABEL_3:
      if (sub_100082064(a1 + 9))
      {
        sub_10010F274((uint64_t)v16);
        uint64_t v4 = sub_100132EFC(v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
        if ((SBYTE7(v14) & 0x80u) == 0) {
          int v5 = __p;
        }
        else {
          int v5 = (void **)__p[0];
        }
        if ((SBYTE7(v14) & 0x80u) == 0) {
          uint64_t v6 = BYTE7(v14);
        }
        else {
          uint64_t v6 = (uint64_t)__p[1];
        }
        BOOL v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
        sub_100132EFC(v7, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if (SBYTE7(v14) < 0) {
          operator delete(__p[0]);
        }
        uint64_t v8 = a1[10];
        std::stringbuf::str();
        if ((SBYTE7(v14) & 0x80u) == 0) {
          unsigned int v9 = __p;
        }
        else {
          unsigned int v9 = (void **)__p[0];
        }
        sub_10014D518(v8, (uint64_t)v9);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17[0]))
  {
    goto LABEL_3;
  }
  sub_101A60D74(v3);
  uint64_t v15 = 0;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  *(void **)((char *)v16
  v17[0] = v11;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return 2;
}

void sub_100463008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100463088(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_100464B14(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022B36D8);
  }
  int v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)uint64_t v13 = 0;
    *(_WORD *)&v13[4] = 2082;
    *(void *)&v13[6] = "";
    __int16 v14 = 2082;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022B36D8);
    }
    BOOL v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)uint64_t v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B36D8);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLCardioChange::AggregateFeatureEntry, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = CLCardioChange::AggregateFeatureEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_1004637DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_100463810(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  *a2 = *(_OWORD *)a3;
  a2[1] = v4;
  return result;
}

id *sub_10046381C(uint64_t a1, uint64_t a2, char a3)
{
  v32[0] = (id)os_transaction_create();
  v32[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, a1 + 224, a2);
    return sub_1000E1098(v32);
  }
  if ((a3 & 1) == 0) {
    sub_10002B640(*(void *)(a1 + 80));
  }
  uint64_t v28 = 0;
  double v29 = 0.0;
  int v30 = -1;
  uint64_t v31 = 0;
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 104))(a1, &v28);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B36D8);
      }
      __int16 v14 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022B36D8);
        }
        LOWORD(v33) = 0;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLCardioChange::AggregateFeatureEntry, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLCardioChange::AggregateFeatureEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      goto LABEL_43;
    }
    double v7 = *(double *)(a2 + 8);
    double v8 = v29;
    double v9 = v7 - v29;
    if (v7 - v29 < 0.0) {
      double v9 = -(v7 - v29);
    }
    if (v9 > 604800.0)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B36D8);
      }
      uint64_t v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a2 + 8);
        *(_DWORD *)uint64_t buf = 134349312;
        double v38 = v29;
        __int16 v39 = 2050;
        uint64_t v40 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022B36D8);
        }
        uint64_t v22 = *(void *)(a2 + 8);
        int v33 = 134349312;
        double v34 = v29;
        __int16 v35 = 2050;
        uint64_t v36 = v22;
        char v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLCardioChange::AggregateFeatureEntry, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLCardioChange::AggregateFeatureEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
      }
      CLWriteStackshot();
      double v7 = *(double *)(a2 + 8);
      double v8 = v29;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022B36D8);
        }
        char v12 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          double v13 = *(double *)(a2 + 8);
          *(_DWORD *)uint64_t buf = 134217984;
          double v38 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022B36D8);
          }
          double v24 = *(double *)(a2 + 8);
          int v33 = 134217984;
          double v34 = v24;
          uint64_t v25 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLCardioChange::AggregateFeatureEntry, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLCardioChange::AggregateFeatureEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v25);
          if (v25 != (char *)buf) {
            free(v25);
          }
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      double v16 = v7 - v8;
      double v17 = *(float *)(a1 + 136);
      if (qword_102418FD0 != -1)
      {
        double v27 = *(float *)(a1 + 136);
        dispatch_once(&qword_102418FD0, &stru_1022B36D8);
        double v17 = v27;
      }
      double v18 = v16 - v17;
      uint64_t v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 134217984;
        double v38 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022B36D8);
        }
        int v33 = 134217984;
        double v34 = v18;
        uint64_t v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLCardioChange::AggregateFeatureEntry, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLCardioChange::AggregateFeatureEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v26);
        if (v26 != (char *)buf) {
          free(v26);
        }
      }
      (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v18);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 144))(a1, &v28, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  long long v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v20;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_100028FB4(*(void *)(a1 + 80));
  }
  return sub_1000E1098(v32);
}

void sub_10046402C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100464058(void *a1, uint64_t a2)
{
  long long v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101A60EE4(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  char v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    int v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_1004643CC(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A61054(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    long long v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      int v5 = __p;
    }
    else {
      int v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    double v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      double v9 = __p;
    }
    else {
      double v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_1004646F8(uint64_t a1)
{
  return sub_100463088(a1 - 72);
}

void sub_100464700(id a1)
{
  qword_1024192B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CardioChange");
}

uint64_t sub_100464730(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A611C4(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    uint64_t v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      long long v4 = __p;
    }
    else {
      long long v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_100464A54(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100464A84(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

void sub_100464B14(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_100464B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100464BB0(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_100464F08(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v6 = 0;
        uint64_t v11 = OBJC_IVAR___PBDataReader__error;
        int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    uint64_t v11 = OBJC_IVAR___PBDataReader__error;
    int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v12 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        *(unsigned char *)(a1 + 52) |= 2u;
        unint64_t v14 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v14 <= 0xFFFFFFFFFFFFFFF7 && v14 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v15 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v14);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v14 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v15 = 0;
        }
        uint64_t v47 = 24;
        goto LABEL_91;
      case 2u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        while (2)
        {
          uint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v21 = v20 + 1;
          if (v20 == -1 || v21 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v22 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if (v22 < 0)
            {
              v17 += 7;
              BOOL v10 = v18++ >= 9;
              if (v10)
              {
                LODWORD(v19) = 0;
                goto LABEL_67;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v19) = 0;
        }
LABEL_67:
        uint64_t v46 = 32;
        goto LABEL_80;
      case 3u:
        unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v15 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + v11) = 1;
          uint64_t v15 = 0;
        }
        uint64_t v47 = 8;
        goto LABEL_91;
      case 4u:
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v19 = 0;
        while (2)
        {
          uint64_t v26 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v27 = v26 + 1;
          if (v26 == -1 || v27 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v28 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27;
            v19 |= (unint64_t)(v28 & 0x7F) << v24;
            if (v28 < 0)
            {
              v24 += 7;
              BOOL v10 = v25++ >= 9;
              if (v10)
              {
                LODWORD(v19) = 0;
                goto LABEL_71;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v19) = 0;
        }
LABEL_71:
        uint64_t v46 = 36;
        goto LABEL_80;
      case 5u:
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v19 = 0;
        while (2)
        {
          uint64_t v31 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v32 = v31 + 1;
          if (v31 == -1 || v32 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v33 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v31);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v32;
            v19 |= (unint64_t)(v33 & 0x7F) << v29;
            if (v33 < 0)
            {
              v29 += 7;
              BOOL v10 = v30++ >= 9;
              if (v10)
              {
                LODWORD(v19) = 0;
                goto LABEL_75;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v19) = 0;
        }
LABEL_75:
        uint64_t v46 = 40;
        goto LABEL_80;
      case 6u:
        *(unsigned char *)(a1 + 52) |= 1u;
        unint64_t v34 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v34 <= 0xFFFFFFFFFFFFFFF7 && v34 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v15 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v15 = 0;
        }
        uint64_t v47 = 16;
LABEL_91:
        *(void *)(a1 + v47) = v15;
        continue;
      case 7u:
        char v35 = 0;
        unsigned int v36 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 52) |= 4u;
        while (2)
        {
          uint64_t v37 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v38 = v37 + 1;
          if (v37 == -1 || v38 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v39 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v37);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v38;
            v19 |= (unint64_t)(v39 & 0x7F) << v35;
            if (v39 < 0)
            {
              v35 += 7;
              BOOL v10 = v36++ >= 9;
              if (v10)
              {
                LODWORD(v19) = 0;
                goto LABEL_79;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v19) = 0;
        }
LABEL_79:
        uint64_t v46 = 44;
LABEL_80:
        *(_DWORD *)(a1 + v46) = v19;
        continue;
      case 8u:
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v42 = 0;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      uint64_t v43 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v44 = v43 + 1;
      if (v43 == -1 || v44 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v45 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v43);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v44;
      v42 |= (unint64_t)(v45 & 0x7F) << v40;
      if ((v45 & 0x80) == 0) {
        goto LABEL_82;
      }
      v40 += 7;
      BOOL v10 = v41++ >= 9;
      if (v10)
      {
        uint64_t v42 = 0;
        goto LABEL_84;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_82:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v42 = 0;
    }
LABEL_84:
    *(unsigned char *)(a1 + 48) = v42 != 0;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void *sub_100465C74(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  result[1] = 0;
  return result;
}

uint64_t sub_100465C7C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

id sub_100465CD0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    sub_1014CC69C();
  }
  return [*(id *)(v1 + 16) register:*(void *)(v1 + 8) forNotification:3 registrationInfo:0];
}

void sub_100465D9C(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022B3718);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifi1SettingsOta::onMobileAssetNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B3718);
    }
    char v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      char v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifi1SettingsOta::onMobileAssetNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100465FF4((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100465F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100465F78(void *result)
{
  uint64_t v1 = result[1];
  if (v1)
  {
    uint64_t v2 = result;
    [*(id *)(v1 + 16) unregister:*(void *)(v1 + 8) forNotification:3];
    uint64_t result = (void *)v2[1];
    v2[1] = 0;
    if (result)
    {
      uint64_t v3 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v3();
    }
  }
  return result;
}

uint64_t sub_100465FF4(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 3)
  {
    uint64_t v5 = result;
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B3738);
    }
    unint64_t v6 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 138477827;
      uint64_t v9 = sub_1000E9358(a4);
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#Mobile Asset Wifi1 Settings notification data: %{private}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B3738);
      }
      sub_1000E9358(a4);
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifi1SettingsOta::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    return sub_101413304(v5, a4);
  }
  return result;
}

void sub_1004661D0(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100466200(id a1)
{
  qword_1024193B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_100466230()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_1004662E8(_Unwind_Exception *a1)
{
}

void sub_100466300()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    *uint64_t v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_1004663A8(_Unwind_Exception *a1)
{
}

void sub_1004663C0(uint64_t a1, void *a2, uint64_t a3, char a4, int a5)
{
  if (a4)
  {
    uint64_t v7 = 26;
    int64x2_t v16 = vdupq_n_s64(0x1AuLL);
    uint64_t v17 = 0;
    int v8 = (int)(sub_10016C458() - *(double *)&a3);
    int v18 = v8;
    unint64_t v19 = 0xFFFFFFFF00000000;
    switch(a5)
    {
      case 0:
        uint64_t v9 = 0;
        uint64_t v7 = 26;
        int64x2_t v16 = vdupq_n_s64(0x1AuLL);
        int v10 = 4;
        uint64_t v11 = 26;
        goto LABEL_17;
      case 1:
        uint64_t v11 = a2[16];
        uint64_t v7 = a2[5];
        v16.i64[0] = v11;
        v16.i64[1] = v7;
        uint64_t v9 = a2[8];
        int v10 = 5;
        goto LABEL_17;
      case 2:
        uint64_t v11 = a2[16];
        uint64_t v7 = a2[5];
        v16.i64[0] = v11;
        v16.i64[1] = v7;
        uint64_t v9 = a2[8];
        int v10 = 6;
        goto LABEL_17;
      case 3:
        uint64_t v11 = a2[16];
        uint64_t v7 = a2[4];
        v16.i64[0] = v11;
        v16.i64[1] = v7;
        uint64_t v9 = a2[7];
        int v10 = 7;
LABEL_17:
        uint64_t v17 = v9;
        LODWORD(v19) = v10;
        break;
      default:
        uint64_t v9 = 0;
        int v10 = 0;
        uint64_t v11 = 26;
        break;
    }
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022B3758);
    }
    __int16 v14 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67110144;
      int v31 = v10;
      __int16 v32 = 2048;
      uint64_t v33 = v11;
      __int16 v34 = 2048;
      uint64_t v35 = v7;
      __int16 v36 = 2048;
      uint64_t v37 = v9;
      __int16 v38 = 1024;
      int v39 = v8;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Escalation analytics, attempting to send event with resolution, %d, escalation type, %ld, workout type, %ld, location type, %ld, escalation durationS, %d", buf, 0x2Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022B3758);
      }
      int v20 = 67110144;
      int v21 = v10;
      __int16 v22 = 2048;
      uint64_t v23 = v11;
      __int16 v24 = 2048;
      uint64_t v25 = v7;
      __int16 v26 = 2048;
      uint64_t v27 = v9;
      __int16 v28 = 1024;
      int v29 = v8;
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutEscalationMetrics::feedEarlyEscalationUpdate(const CLWorkoutPredictor_Type::WorkoutPrediction &, std::optional<CFTimeInterval>, EarlyEscalationResolution)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    sub_100466810(v16.i64);
  }
  else
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022B3758);
    }
    int v12 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v31 = a5;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Escalation analytics, not tracking an early escalation for resolution %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022B3758);
      }
      int v20 = 67109120;
      int v21 = a5;
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutEscalationMetrics::feedEarlyEscalationUpdate(const CLWorkoutPredictor_Type::WorkoutPrediction &, std::optional<CFTimeInterval>, EarlyEscalationResolution)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
}

void sub_100466810(uint64_t *a1)
{
  if (objc_opt_class()
    && (objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isHealthDataSubmissionAllowed") & 1) != 0)
  {
    if (*((int *)a1 + 6) > 0)
    {
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022B3758);
      }
      uint64_t v2 = qword_1024191C8;
      if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v3 = *a1;
        uint64_t v4 = a1[1];
        uint64_t v5 = a1[2];
        int v6 = *((_DWORD *)a1 + 6);
        int v7 = *((_DWORD *)a1 + 7);
        int v8 = *((_DWORD *)a1 + 8);
        *(_DWORD *)uint64_t buf = 68290562;
        int v14 = 0;
        __int16 v15 = 2082;
        int64x2_t v16 = "";
        __int16 v17 = 1026;
        int v18 = v3;
        __int16 v19 = 1026;
        int v20 = v4;
        __int16 v21 = 1026;
        int v22 = v5;
        __int16 v23 = 1026;
        int v24 = v6;
        __int16 v25 = 1026;
        int v26 = v7;
        __int16 v27 = 1026;
        int v28 = v8;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Sending escalation event to CoreAnalytics\", \"escType\":%{public}d, \"workoutType\":%{public}d, \"workoutLocation\":%{public}d, \"escTime\":%{public}d, \"escToWorkout\":%{public}d, \"pctBackgroundEscalation\":%{public}d}", buf, 0x36u);
      }
      AnalyticsSendEventLazy();
      return;
    }
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022B3758);
    }
    int v10 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_ERROR))
    {
      int v11 = *((_DWORD *)a1 + 6);
      *(_DWORD *)uint64_t buf = 67109120;
      int v14 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Not sending escalation event to CoreAnalytics, invalid escalation time recorded %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022B3758);
      }
      int v12 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static void CLWorkoutEscalationMetrics::sendEventToCoreAnalytics(const WorkoutEscalationEvent &)", "%s\n");
LABEL_26:
      if (v12 != buf) {
        free(v12);
      }
    }
  }
  else
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022B3758);
    }
    uint64_t v9 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Not sending escalation event to CoreAnalytics, no IHA permission", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022B3758);
      }
      int v12 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLWorkoutEscalationMetrics::sendEventToCoreAnalytics(const WorkoutEscalationEvent &)", "%s\n");
      goto LABEL_26;
    }
  }
}

double sub_100466C2C(uint64_t a1, uint64_t a2)
{
  switch(*(void *)(a2 + 16))
  {
    case 0:
      if (*(unsigned char *)a1)
      {
        uint64_t v3 = (uint64_t *)(a1 + 16);
        int v4 = 2;
        goto LABEL_11;
      }
      break;
    case 8:
      *(int64x2_t *)(a1 + 16) = vdupq_n_s64(0x1AuLL);
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 0xFFFFFFFFLL;
      *(_DWORD *)(a1 + 48) = -1;
      *(unsigned char *)a1 = 1;
      *(void *)&long long v5 = *(void *)(a2 + 24);
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = *(void *)(a2 + 48);
      break;
    case 9:
      if (*(unsigned char *)a1)
      {
        long long v5 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 24) = v5;
      }
      break;
    case 0xALL:
      if (*(unsigned char *)a1)
      {
        uint64_t v3 = (uint64_t *)(a1 + 16);
        int v4 = 1;
        goto LABEL_11;
      }
      break;
    case 0xBLL:
      if (*(unsigned char *)a1)
      {
        uint64_t v3 = (uint64_t *)(a1 + 16);
        int v4 = 3;
LABEL_11:
        *(_DWORD *)(a1 + 40) = (int)(*(double *)(a2 + 24) - *(double *)(a1 + 8));
        *(_DWORD *)(a1 + 44) = v4;
        *(_DWORD *)(a1 + 48) = (int)(*(double *)(a2 + 40) * 100.0);
        sub_100466810(v3);
        *(int64x2_t *)(a1 + 16) = vdupq_n_s64(0x1AuLL);
        *(void *)(a1 + 32) = 0;
        *(void *)&long long v5 = 0xFFFFFFFFLL;
        *(void *)(a1 + 40) = 0xFFFFFFFFLL;
        *(_DWORD *)(a1 + 48) = -1;
        *(void *)(a1 + 8) = 0xBFF0000000000000;
        *(unsigned char *)a1 = 0;
      }
      break;
    default:
      return *(double *)&v5;
  }
  return *(double *)&v5;
}

NSDictionary *sub_100466D8C(uint64_t a1)
{
  v3[0] = @"escType";
  v4[0] = +[NSNumber numberWithInteger:**(void **)(a1 + 32)];
  v3[1] = @"workoutType";
  v4[1] = +[NSNumber numberWithInteger:*(void *)(*(void *)(a1 + 32) + 8)];
  _DWORD v3[2] = @"workoutLocation";
  _DWORD v4[2] = +[NSNumber numberWithInteger:*(void *)(*(void *)(a1 + 32) + 16)];
  v3[3] = @"escTime";
  void v4[3] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 24)];
  v3[4] = @"escToWorkout";
  v4[4] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 28)];
  v3[5] = @"pctBackgroundEscalation";
  void v4[5] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 32)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:6];
}

void sub_100466EBC(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_100466EEC()
{
  if (sub_101284E70() == 1) {
    operator new();
  }
  operator new();
}

void sub_100466F98()
{
}

uint64_t sub_100466FBC(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = off_1022B3788;
  *(_DWORD *)(result + 8) = 1;
  *(unsigned char *)(result + 12) = 0;
  *(void *)(result + 16) = a2;
  return result;
}

void *sub_100466FEC(void *result, uint64_t a2)
{
  uint64_t v3 = result;
  if (a2 == 1)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022B37D0);
    }
    int v4 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = (*(uint64_t (**)(void *, uint64_t))(*v3 + 32))(v3, 1);
      *(_DWORD *)uint64_t buf = 67240192;
      int v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "FitnessMode, checking to start collector in active energy mode, should start %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022B37D0);
      }
      (*(void (**)(void *, uint64_t))(*v3 + 32))(v3, 1);
      int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFitnessModeControllerBase::feedMoveModeUpdate(CLFitnessTrackingNotifier_Type::ActivityMoveMode)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    uint64_t result = sub_100467468(v3);
  }
  if (*((_DWORD *)v3 + 2) != a2)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022B37D0);
    }
    int v6 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *((_DWORD *)v3 + 2);
      int v8 = (*(uint64_t (**)(void *, uint64_t))(*v3 + 32))(v3, a2);
      *(_DWORD *)uint64_t buf = 67240704;
      int v14 = v7;
      __int16 v15 = 1026;
      int v16 = a2;
      __int16 v17 = 1026;
      int v18 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "FitnessMode, activity move mode changed from %{public}d to %{public}d, should start %{public}d", buf, 0x14u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022B37D0);
      }
      (*(void (**)(void *, uint64_t))(*v3 + 32))(v3, a2);
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFitnessModeControllerBase::feedMoveModeUpdate(CLFitnessTrackingNotifier_Type::ActivityMoveMode)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    *((_DWORD *)v3 + 2) = a2;
    uint64_t v9 = (void (***)(void, uint64_t))v3[2];
    if (v9)
    {
      (**v9)(v9, a2);
      uint64_t v10 = v3[2];
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
      }
    }
    return sub_100467468(v3);
  }
  return result;
}

void *sub_100467468(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 32))(result);
    if (result)
    {
      uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1[2] + 8);
      return (void *)v2();
    }
  }
  return result;
}

void *sub_100467514(uint64_t a1, int a2)
{
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022B37D0);
  }
  int v4 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a1 + 12);
    *(_DWORD *)uint64_t buf = 67240448;
    int v9 = v5;
    __int16 v10 = 1026;
    int v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "FitnessMode, fitness tracking update from %{public}d to %{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022B37D0);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFitnessModeControllerBase::feedFitnessTrackingUpdate(BOOL)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  *(unsigned char *)(a1 + 12) = a2;
  if (a2) {
    return sub_100467468((void *)a1);
  }
  uint64_t result = *(void **)(a1 + 16);
  if (result) {
    return (void *)(*(uint64_t (**)(void *))(*result + 16))(result);
  }
  return result;
}

uint64_t sub_100467730(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 32))(a1);
  if ((result & 1) == 0)
  {
    uint64_t result = a1[2];
    if (result)
    {
      uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v3();
    }
  }
  return result;
}

uint64_t sub_1004677BC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 12);
}

void sub_1004677C4()
{
}

void sub_1004677D8(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100467B64(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v6 = 0;
        uint64_t v11 = OBJC_IVAR___PBDataReader__error;
        int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    uint64_t v11 = OBJC_IVAR___PBDataReader__error;
    int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v12 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        unint64_t v14 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v14 <= 0xFFFFFFFFFFFFFFF7 && v14 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v15 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v14);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v14 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + v11) = 1;
          uint64_t v15 = 0;
        }
        uint64_t v38 = 8;
        goto LABEL_64;
      case 2u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        while (2)
        {
          uint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v21 = v20 + 1;
          if (v20 == -1 || v21 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v22 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if (v22 < 0)
            {
              v17 += 7;
              BOOL v10 = v18++ >= 9;
              if (v10)
              {
                LODWORD(v19) = 0;
                goto LABEL_50;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v19) = 0;
        }
LABEL_50:
        *(_DWORD *)(a1 + 24) = v19;
        continue;
      case 3u:
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        while (2)
        {
          uint64_t v26 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v27 = v26 + 1;
          if (v26 == -1 || v27 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v28 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27;
            v25 |= (unint64_t)(v28 & 0x7F) << v23;
            if (v28 < 0)
            {
              v23 += 7;
              BOOL v10 = v24++ >= 9;
              if (v10)
              {
                uint64_t v25 = 0;
                goto LABEL_54;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v25 = 0;
        }
LABEL_54:
        BOOL v36 = v25 != 0;
        uint64_t v37 = 28;
        goto LABEL_59;
      case 4u:
        *(unsigned char *)(a1 + 32) |= 1u;
        unint64_t v29 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v15 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v15 = 0;
        }
        uint64_t v38 = 16;
LABEL_64:
        *(void *)(a1 + v38) = v15;
        continue;
      case 5u:
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v32 = 0;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      uint64_t v33 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v34 = v33 + 1;
      if (v33 == -1 || v34 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v35 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34;
      v32 |= (unint64_t)(v35 & 0x7F) << v30;
      if ((v35 & 0x80) == 0) {
        goto LABEL_56;
      }
      v30 += 7;
      BOOL v10 = v31++ >= 9;
      if (v10)
      {
        uint64_t v32 = 0;
        goto LABEL_58;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_56:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v32 = 0;
    }
LABEL_58:
    BOOL v36 = v32 != 0;
    uint64_t v37 = 29;
LABEL_59:
    *(unsigned char *)(a1 + v37) = v36;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100468488(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4 <= 9)
  {
    if (!v4)
    {
      if (!*(unsigned char *)a1) {
        return;
      }
      *(_DWORD *)(a1 + 36) = 1;
      *(void *)(a1 + 24) = sub_101014448(*(void *)(a2 + 112), *(void *)(a2 + 120));
      *(_DWORD *)(a1 + 32) = (int)(*(double *)(a2 + 24) - *(double *)(a1 + 8));
      goto LABEL_14;
    }
    if (v4 != 6 || !*(unsigned char *)a1) {
      return;
    }
    int v5 = 2;
LABEL_13:
    *(_DWORD *)(a1 + 32) = (int)(*(double *)(a2 + 24) - *(double *)(a1 + 8));
    *(_DWORD *)(a1 + 36) = v5;
LABEL_14:
    sub_10046858C(a1);
    return;
  }
  if (v4 == 10)
  {
    if (!*(unsigned char *)a1) {
      return;
    }
    int v5 = 3;
    goto LABEL_13;
  }
  if (v4 == 11)
  {
    *(int64x2_t *)(a1 + 16) = vdupq_n_s64(0x1AuLL);
    *(void *)(a1 + 32) = 0xFFFFFFFFLL;
    *(unsigned char *)a1 = 1;
    *(void *)(a1 + 8) = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = sub_101014448(*(void *)(a2 + 112), *(void *)(a2 + 120));
  }
}

void sub_10046858C(uint64_t a1)
{
  if (objc_opt_class()
    && (objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isHealthDataSubmissionAllowed") & 1) != 0)
  {
    if (*(int *)(a1 + 32) > 0)
    {
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022B3830);
      }
      uint64_t v2 = qword_1024191C8;
      if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v3 = *(void *)(a1 + 16);
        uint64_t v4 = *(void *)(a1 + 24);
        int v5 = *(_DWORD *)(a1 + 32);
        int v6 = *(_DWORD *)(a1 + 36);
        *(_DWORD *)uint64_t buf = 68290050;
        int v12 = 0;
        __int16 v13 = 2082;
        unint64_t v14 = "";
        __int16 v15 = 1026;
        int v16 = v3;
        __int16 v17 = 1026;
        int v18 = v4;
        __int16 v19 = 1026;
        int v20 = v5;
        __int16 v21 = 1026;
        int v22 = v6;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Sending alert event to CoreAnalytics\", \"alertWorkoutType\":%{public}d, \"acceptedWorkoutType\":%{public}d, \"alertActiveTime\":%{public}d, \"alertStatus\":%{public}d}", buf, 0x2Au);
      }
      AnalyticsSendEventLazy();
      *(int64x2_t *)(a1 + 16) = vdupq_n_s64(0x1AuLL);
      *(void *)(a1 + 32) = 0xFFFFFFFFLL;
      *(void *)(a1 + 8) = 0xBFF0000000000000;
      *(unsigned char *)a1 = 0;
      return;
    }
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022B3830);
    }
    unint64_t v8 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
    {
      int v9 = *(_DWORD *)(a1 + 32);
      *(_DWORD *)uint64_t buf = 67109120;
      int v12 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Not sending alert event to CoreAnalytics, invalid escalation time recorded %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 == -1)
      {
LABEL_23:
        BOOL v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutAlertMetrics::sendEventToCoreAnalytics()", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
        return;
      }
LABEL_25:
      dispatch_once(&qword_1024191C0, &stru_1022B3830);
      goto LABEL_23;
    }
  }
  else
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022B3830);
    }
    uint64_t v7 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Not sending alert event to CoreAnalytics, no IHA permission", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 == -1) {
        goto LABEL_23;
      }
      goto LABEL_25;
    }
  }
}

NSDictionary *sub_100468980(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v3[0] = @"alertWorkoutType";
  v4[0] = +[NSNumber numberWithInteger:*(void *)(v1 + 16)];
  v3[1] = @"acceptedWorkoutType";
  v4[1] = +[NSNumber numberWithInteger:*(void *)(v1 + 24)];
  _DWORD v3[2] = @"alertActiveTime";
  _DWORD v4[2] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 32)];
  v3[3] = @"alertStatus";
  void v4[3] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v1 + 36)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:4];
}

void sub_100468A60(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_10046938C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id location)
{
  objc_destroyWeak(v28);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_1004693B8()
{
  sub_10010F274((uint64_t)v20);
  sub_100132EFC(v21, (uint64_t)"enabled,", 8);
  uint64_t v0 = (void *)std::ostream::operator<<();
  uint64_t v1 = sub_100132EFC(v0, (uint64_t)",light,", 7);
  sub_10046AD0C();
  if ((v19 & 0x80u) == 0) {
    uint64_t v2 = v18;
  }
  else {
    uint64_t v2 = (void **)v18[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v3 = v19;
  }
  else {
    uint64_t v3 = (uint64_t)v18[1];
  }
  uint64_t v4 = sub_100132EFC(v1, (uint64_t)v2, v3);
  int v5 = sub_100132EFC(v4, (uint64_t)",moderate,", 10);
  sub_10046AD0C();
  if ((v17 & 0x80u) == 0) {
    int v6 = v16;
  }
  else {
    int v6 = (void **)v16[0];
  }
  if ((v17 & 0x80u) == 0) {
    uint64_t v7 = v17;
  }
  else {
    uint64_t v7 = (uint64_t)v16[1];
  }
  unint64_t v8 = sub_100132EFC(v5, (uint64_t)v6, v7);
  int v9 = sub_100132EFC(v8, (uint64_t)",heavyAndGreater,", 17);
  sub_10046AD0C();
  if ((v15 & 0x80u) == 0) {
    BOOL v10 = __p;
  }
  else {
    BOOL v10 = (void **)__p[0];
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v11 = v15;
  }
  else {
    uint64_t v11 = (uint64_t)__p[1];
  }
  sub_100132EFC(v9, (uint64_t)v10, v11);
  if ((char)v15 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v17 < 0) {
    operator delete(v16[0]);
  }
  if ((char)v19 < 0) {
    operator delete(v18[0]);
  }
  std::stringbuf::str();
  *(void *)((char *)v20
  v21[0] = v12;
  if (v22 < 0) {
    operator delete((void *)v21[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100469638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  sub_101A129A8((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void *sub_1004696A0(uint64_t a1)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022B3878);
  }
  uint64_t v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 136446210;
    uint64_t v7 = "-[CLEEDCoexMonitorPower initWithQueue:mitigationConfig:cachedCoexMetricData:eventCB:coexMetricUpdateCB:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2CXPB,%{public}s PeakPowerMitigation Disabled, returning with nominal.", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022B3878);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLEEDCoexMonitorPower initWithQueue:mitigationConfig:cachedCoexMetricData:eventCB:coexMetricUpdateCB:]_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  uint64_t result = *(void **)(a1 + 32);
  uint64_t v4 = result[2];
  if (v4) {
    return (void *)(*(uint64_t (**)(uint64_t, id, void))(v4 + 16))(v4, [result getMitigationForCurrentlevel], 0);
  }
  return result;
}

id sub_100469880(uint64_t a1)
{
  id result = objc_loadWeak((id *)(a1 + 32));
  if (result)
  {
    return _[result queryPeakPowerLevel];
  }
  return result;
}

id sub_1004698B8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) queryPeakPowerLevel];
}

void sub_10046ACDC(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

uint64_t sub_10046AD0C()
{
  sub_10010F274((uint64_t)v7);
  sub_100132EFC(v8, (uint64_t)"allowNewStreamingRequests,", 26);
  uint64_t v0 = (void *)std::ostream::operator<<();
  sub_100132EFC(v0, (uint64_t)",allowNewMediaRequests,", 23);
  uint64_t v1 = (void *)std::ostream::operator<<();
  sub_100132EFC(v1, (uint64_t)",maxFramerateFps,", 17);
  uint64_t v2 = (void *)std::ostream::operator<<();
  sub_100132EFC(v2, (uint64_t)",maxStreamingBitrateKbps,", 25);
  uint64_t v3 = (void *)std::ostream::operator<<();
  sub_100132EFC(v3, (uint64_t)",dropStreaming,", 15);
  uint64_t v4 = (void *)std::ostream::operator<<();
  sub_100132EFC(v4, (uint64_t)",delayMedia,", 12);
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v7
  v8[0] = v5;
  if (v9 < 0) {
    operator delete((void *)v8[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10046AF08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10046AF1C(uint64_t a1, uint64_t a2, double a3)
{
  if ((*(unsigned int (**)(void))(**(void **)(a2 + 48) + 48))(*(void *)(a2 + 48)))
  {
    (*(void (**)(void, unsigned char *, double))(**(void **)(a2 + 48) + 24))(*(void *)(a2 + 48), v7, a3);
    if (v7[208])
    {
      sub_10046B90C(*(void *)(a2 + 8), *(double *)(*(void *)(a2 + 8) + 104), *(double *)(*(void *)(a2 + 8) + 112));
      sub_10046B9AC(*(void *)(a2 + 80), *(double *)(*(void *)(a2 + 80) + 104), *(double *)(*(void *)(a2 + 80) + 112));
    }
  }
  return nullsub_1536(a1 + 8, a2, a3);
}

uint64_t sub_10046B014(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a3 + 8) + 48))(*(void *)(a3 + 8));
  if (result)
  {
    uint64_t v7 = *(uint64_t (**)(__n128))(**(void **)(a3 + 80) + 48);
    v6.n128_f64[0] = a1;
    return v7(v6);
  }
  return result;
}

void sub_10046B0B4(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  float v4 = *(float *)(a1 + 1232);
  double v5 = *(float *)(a1 + 1236);
  BOOL v6 = v5 <= 0.1;
  float v32 = *(float *)(a1 + 296);
  if (v32 >= 10.0) {
    BOOL v6 = 0;
  }
  double v33 = v4;
  BOOL v7 = v4 < 0.6;
  int v8 = 2;
  if (v5 < 0.2) {
    int v9 = 1;
  }
  else {
    int v9 = 2;
  }
  int v10 = v6 && v7;
  if (v6 && v7) {
    unsigned int v11 = 0;
  }
  else {
    unsigned int v11 = v9;
  }
  float v12 = *(double *)(a1 + 560);
  int v13 = 0;
  if (sub_1001860C8(a1))
  {
    if (v12 <= 120.0) {
      int v14 = 1;
    }
    else {
      int v14 = 2;
    }
    if (*(double *)(a1 + 600) >= *(double *)a1) {
      int v13 = 0;
    }
    else {
      int v13 = v14;
    }
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 3;
  *(void *)(a2 + 32) = 3;
  double v15 = *(double *)(a1 + 1416);
  float v16 = v15;
  double v31 = v12;
  float v17 = (*(float *)(a1 + 1380) - v12) / (*(float *)(a1 + 1380) - *(float *)(a1 + 1376));
  float v19 = (float)(sub_101141BD8(v17, *(float *)(a1 + 1372)) * *(float *)(a1 + 1368)) / (float)(v16 + 1.0);
  *(float *)a2 = v19;
  double v20 = 8.5;
  if (v5 <= 2.1) {
    double v20 = sub_10046B618(v18, (float *)a1);
  }
  float v21 = v20;
  if (v10) {
    float v21 = 1.6;
  }
  if (!(v10 & 1 | (v5 >= 0.2))) {
    float v21 = v21 / 1.27;
  }
  *(float *)(a2 + 4) = v21;
  *(float *)(a2 + 12) = v21;
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0x500000000;
  double v22 = 1.0;
  double v23 = 2.0999999;
  if (v13 == 2)
  {
    if (v11 < 2)
    {
      int v8 = 1;
      *(_DWORD *)(a2 + 24) = 1;
      *(_DWORD *)(a2 + 32) = 1;
      double v22 = 0.0;
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  if (v13 == 1)
  {
    int v8 = 0;
    if ((v10 & 1) != 0 || v5 < 0.2) {
      goto LABEL_33;
    }
    int v8 = 2;
LABEL_32:
    *(_DWORD *)(a2 + 24) = 2;
    *(_DWORD *)(a2 + 32) = 2;
    double v22 = 0.5;
    double v23 = 4.40208912;
    goto LABEL_33;
  }
  int v8 = 0;
  double v23 = 2.0999999;
  if (((v5 >= 0.2) & ~v10) != 0) {
    double v23 = 4.40208912;
  }
LABEL_33:
  double v24 = v19;
  double v25 = v21;
  float v26 = v22 * v21 + (1.0 - v22) * v24;
  *(float *)(a2 + 20) = v26;
  *(float *)(a2 + 28) = v26;
  double v27 = v26;
  if (v23 > v26)
  {
    float v26 = v23;
    *(float *)(a2 + 20) = v26;
    int v8 = 3;
    *(_DWORD *)(a2 + 24) = 3;
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022B38F8);
  }
  char v28 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v29 = *(void *)(a1 + 128);
    *(_DWORD *)uint64_t buf = 134221568;
    double v35 = v25;
    __int16 v36 = 2048;
    double v37 = v24;
    __int16 v38 = 2048;
    double v39 = v27;
    __int16 v40 = 2048;
    double v41 = v26;
    __int16 v42 = 2048;
    uint64_t v43 = v29;
    __int16 v44 = 2048;
    double v45 = v20;
    __int16 v46 = 1024;
    unsigned int v47 = v11;
    __int16 v48 = 2048;
    double v49 = v15;
    __int16 v50 = 2048;
    double v51 = v22;
    __int16 v52 = 1024;
    int v53 = v8;
    __int16 v54 = 2048;
    double v55 = v5;
    __int16 v56 = 2048;
    double v57 = v32;
    __int16 v58 = 2048;
    double v59 = v31;
    __int16 v60 = 1024;
    int v61 = v13;
    __int16 v62 = 2048;
    double v63 = v33;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "Dance,metsWR,%f,metsHR,%f,truthMets,%f,userMets,%f,endTime,%f,danceWrMets,%f,motionIntensity,%d,hrDrift,%f,wrWeight,%f,metsSource,%d,accelZ,%f,vm,%f,hr,%f,hrIntensity,%d,rotationRate,%f", buf, 0x8Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022B38F8);
    }
    char v30 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLMetsInfo CLNatalieDanceModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v30);
    if (v30 != (char *)buf) {
      free(v30);
    }
  }
}

float sub_10046B618(uint64_t a1, float *a2)
{
  uint64_t v2 = 0;
  float v3 = a2[308];
  float v4 = a2[309];
  float v5 = a2[310];
  float v6 = a2[341];
  float v7 = a2[340] * 100.0;
  *(float *)float v12 = v4;
  *(float *)&v12[1] = v3;
  *(float *)&void v12[2] = v3 * v5;
  *(float *)&void v12[3] = v6;
  *(float *)&v12[4] = v7;
  float v8 = -1.8389;
  do
  {
    float v8 = v8 + (float)(*(float *)&v12[v2] * *(float *)&dword_101D1F218[v2]);
    ++v2;
  }
  while (v2 != 5);
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022B38F8);
  }
  int v9 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 134219264;
    double v25 = v4;
    __int16 v26 = 2048;
    double v27 = v3;
    __int16 v28 = 2048;
    double v29 = v5;
    __int16 v30 = 2048;
    double v31 = v6;
    __int16 v32 = 2048;
    double v33 = v7;
    __int16 v34 = 2048;
    double v35 = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "iz,%f,w,%f,cr,%f,weight,%f,height,%f,wr,%f", buf, 0x3Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022B38F8);
    }
    void v12[5] = 134219264;
    double v13 = v4;
    __int16 v14 = 2048;
    double v15 = v3;
    __int16 v16 = 2048;
    double v17 = v5;
    __int16 v18 = 2048;
    double v19 = v6;
    __int16 v20 = 2048;
    double v21 = v7;
    __int16 v22 = 2048;
    double v23 = v8;
    unsigned int v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "float CLNatalieDanceModel::computeWRRegression(const CLNatalieModelInput &) const", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  return v8;
}

void sub_10046B8C8()
{
}

void sub_10046B8DC(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

BOOL sub_10046B90C(uint64_t a1, double a2, double a3)
{
  if (*(unsigned char *)(a1 + 80))
  {
    BOOL result = 1;
  }
  else if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1))
  {
    *(double *)(a1 + 72) = a2;
    BOOL result = 1;
    *(unsigned char *)(a1 + 80) = 1;
    *(unsigned char *)(a1 + 120) = 0;
  }
  else
  {
    BOOL result = *(unsigned char *)(a1 + 80) != 0;
  }
  double v7 = a2 + a3;
  if (*(double *)(a1 + 88) >= a2 + a3) {
    double v7 = *(double *)(a1 + 88);
  }
  *(double *)(a1 + 88) = v7;
  return result;
}

BOOL sub_10046B9AC(uint64_t a1, double a2, double a3)
{
  if (*(unsigned char *)(a1 + 80))
  {
    BOOL result = 1;
  }
  else if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1))
  {
    *(double *)(a1 + 72) = a2;
    BOOL result = 1;
    *(unsigned char *)(a1 + 80) = 1;
    *(unsigned char *)(a1 + 120) = 0;
  }
  else
  {
    BOOL result = *(unsigned char *)(a1 + 80) != 0;
  }
  double v7 = a2 + a3;
  if (*(double *)(a1 + 88) >= a2 + a3) {
    double v7 = *(double *)(a1 + 88);
  }
  *(double *)(a1 + 88) = v7;
  return result;
}

uint64_t sub_10046BE44(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v6 = 0;
        uint64_t v11 = OBJC_IVAR___PBDataReader__error;
        int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    uint64_t v11 = OBJC_IVAR___PBDataReader__error;
    int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v12 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        unint64_t v14 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v14 <= 0xFFFFFFFFFFFFFFFBLL && v14 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          int v15 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v14);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v14 + 4;
        }
        else
        {
          *(unsigned char *)(a2 + v11) = 1;
          int v15 = 0;
        }
        uint64_t v33 = 28;
        goto LABEL_67;
      case 2u:
        unint64_t v17 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v17 <= 0xFFFFFFFFFFFFFFFBLL && v17 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          int v15 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 4;
        }
        else
        {
          *(unsigned char *)(a2 + v11) = 1;
          int v15 = 0;
        }
        uint64_t v33 = 12;
        goto LABEL_67;
      case 3u:
        unint64_t v18 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v18 <= 0xFFFFFFFFFFFFFFFBLL && v18 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          int v15 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18 + 4;
        }
        else
        {
          *(unsigned char *)(a2 + v11) = 1;
          int v15 = 0;
        }
        uint64_t v33 = 16;
        goto LABEL_67;
      case 4u:
        unint64_t v19 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v19 <= 0xFFFFFFFFFFFFFFFBLL && v19 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          int v15 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19 + 4;
        }
        else
        {
          *(unsigned char *)(a2 + v11) = 1;
          int v15 = 0;
        }
        uint64_t v33 = 20;
        goto LABEL_67;
      case 5u:
        unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v20 <= 0xFFFFFFFFFFFFFFFBLL && v20 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          int v15 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 4;
        }
        else
        {
          *(unsigned char *)(a2 + v11) = 1;
          int v15 = 0;
        }
        uint64_t v33 = 24;
LABEL_67:
        *(_DWORD *)(a1 + v33) = v15;
        continue;
      case 6u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        while (2)
        {
          uint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v25 = v24 + 1;
          if (v24 == -1 || v25 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v26 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              BOOL v10 = v22++ >= 9;
              if (v10)
              {
                LODWORD(v23) = 0;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v23) = 0;
        }
LABEL_52:
        *(_DWORD *)(a1 + 8) = v23;
        continue;
      case 7u:
        char v27 = 0;
        unsigned int v28 = 0;
        uint64_t v29 = 0;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      uint64_t v30 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v31 = v30 + 1;
      if (v30 == -1 || v31 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v32 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v31;
      v29 |= (unint64_t)(v32 & 0x7F) << v27;
      if ((v32 & 0x80) == 0) {
        goto LABEL_54;
      }
      v27 += 7;
      BOOL v10 = v28++ >= 9;
      if (v10)
      {
        uint64_t v29 = 0;
        goto LABEL_56;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_54:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v29 = 0;
    }
LABEL_56:
    *(unsigned char *)(a1 + 32) = v29 != 0;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

BOOL sub_10046CB2C(uint64_t a1)
{
  uint64_t v2 = (char *)sub_1000A6958();
  sub_1000A5670(v2, (uint64_t)&__str);
  if (*(char *)(a1 + 79) < 0)
  {
    sub_1000DC48C(__p, *(void **)(a1 + 56), *(void *)(a1 + 64));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)(a1 + 56);
    uint64_t v9 = *(void *)(a1 + 72);
  }
  if (v9 >= 0) {
    float v3 = __p;
  }
  else {
    float v3 = (void **)__p[0];
  }
  if (v9 >= 0) {
    std::string::size_type v4 = HIBYTE(v9);
  }
  else {
    std::string::size_type v4 = (std::string::size_type)__p[1];
  }
  std::string::append(&__str, (const std::string::value_type *)v3, v4);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  std::string::operator=((std::string *)(a1 + 32), &__str);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_str = &__str;
  }
  else {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  BOOL v6 = sub_1000A569C((const char *)p_str);
  if (!v6) {
    *(unsigned char *)(a1 + 80) = 1;
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v6;
}

void sub_10046CC0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10046CC44(uint64_t a1)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022B3930);
  }
  uint64_t v2 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "HRSE,clear AVL status cache", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022B3930);
    }
    float v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLHrseTileAvailability::clearAvlCache()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  *(_DWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 28) = 0;
}

uint64_t sub_10046CDE0(uint64_t a1, double a2, long double a3)
{
  if ((sub_10046DE4C(a1) & 1) == 0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022B3950);
    }
    __int16 v16 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      int v17 = *(unsigned __int8 *)(a1 + 80);
      int buf = 67240192;
      *(_DWORD *)long long v72 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "#Warning,HRSE,isTileAvailableBasedOnAvlFile,availability file is not valid,fNeedToDownloadAvlFile,%{public}d", (uint8_t *)&buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022B3950);
    }
    int v18 = *(unsigned __int8 *)(a1 + 80);
    LODWORD(v59) = 67240192;
    DWORD1(v59) = v18;
    unint64_t v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLHrseTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v19);
    if (v19 == (char *)&buf) {
      return 0;
    }
LABEL_115:
    free(v19);
    return 0;
  }
  uint64_t v69 = 0;
  uint64_t v68 = 0;
  uint64_t v70 = 0;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  memset(v67, 0, sizeof(v67));
  uint64_t v53 = 0;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022B3950);
  }
  BOOL v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v7 = (void *)*v7;
    }
    int buf = 136446210;
    *(void *)long long v72 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "HRSE,isTileAvailableBasedOnAvlFile,Reading,%{public}s", (uint8_t *)&buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022B3950);
    }
    __int16 v46 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      __int16 v46 = (void *)*v46;
    }
    int v54 = 136446210;
    *(void *)double v55 = v46;
    unsigned int v47 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLHrseTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v47);
    if (v47 != (char *)&buf) {
      free(v47);
    }
  }
  unint64_t v8 = (const char **)(a1 + 32);
  uint64_t v9 = (const char *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    uint64_t v9 = *v8;
  }
  BOOL v10 = fopen(v9, "rb");
  uint64_t v11 = v10;
  if (!v10)
  {
    *(unsigned char *)(a1 + 80) = 1;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022B3950);
    }
    unint64_t v20 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      char v21 = (const char *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        char v21 = *v8;
      }
      int v22 = *(unsigned __int8 *)(a1 + 80);
      int v23 = *__error();
      int buf = 136446722;
      *(void *)long long v72 = v21;
      *(_WORD *)&v72[8] = 1026;
      int v73 = v22;
      __int16 v74 = 1026;
      int v75 = v23;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "#Error,HRSE,isTileAvailableBasedOnAvlFile,could not open,%{public}s,fNeedToDownloadAvlFile,%{public}d,errno,%{public}d", (uint8_t *)&buf, 0x18u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022B3950);
    }
    if (*(char *)(a1 + 55) < 0) {
      unint64_t v8 = (const char **)*v8;
    }
    int v48 = *(unsigned __int8 *)(a1 + 80);
    int v49 = *__error();
    int v54 = 136446722;
    *(void *)double v55 = v8;
    *(_WORD *)&v55[8] = 1026;
    int v56 = v48;
    __int16 v57 = 1026;
    int v58 = v49;
    unint64_t v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLHrseTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v19);
    if (v19 == (char *)&buf) {
      return 0;
    }
    goto LABEL_115;
  }
  uint64_t v52 = 0;
  if ((sub_10046EAF4(v10, &v59, (uint64_t)&v60, (int *)&v53, &v52) & 1) == 0)
  {
    *(unsigned char *)(a1 + 80) = 1;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022B3950);
    }
    unint64_t v25 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      int v26 = *(unsigned __int8 *)(a1 + 80);
      int buf = 67240192;
      *(_DWORD *)long long v72 = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "#Warning,HRSE,isTileAvailableBasedOnAvlFile,readAvlHelper failed,fNeedToDownloadAvlFile,%{public}d", (uint8_t *)&buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_43;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022B3950);
    }
    int v50 = *(unsigned __int8 *)(a1 + 80);
    int v54 = 67240192;
    *(_DWORD *)double v55 = v50;
    int v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLHrseTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v15);
    goto LABEL_119;
  }
  int v12 = v67[24];
  double v13 = (double)v67[24];
  if (v13 <= a2)
  {
    int v12 = v67[25];
    if ((double)v67[25] <= a2)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022B3950);
      }
      unint64_t v31 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        int buf = 134283777;
        *(double *)long long v72 = a2;
        *(_WORD *)&v72[8] = 1025;
        int v73 = v12;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "HRSE,isTileAvailableBasedOnAvlFile,input latitude, %{private}.3lf, beyond maximum acceptable latitude, %{private}d", (uint8_t *)&buf, 0x12u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_43;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_20;
      }
      goto LABEL_121;
    }
    sub_100142F58(a3);
    signed int v29 = vcvtmd_s64_f64(v28 * 20.0) + 7200 * (vcvtmd_s64_f64((a2 + 90.0) * 20.0) - (int)((v13 + 90.0) * 20.0));
    if (v29 >= 0) {
      int v30 = v29;
    }
    else {
      int v30 = v29 + 7;
    }
    unsigned __int8 __ptr = 0;
    if (v30 >> 3 >= v70)
    {
      *(unsigned char *)(a1 + 80) = 1;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022B3950);
      }
      char v32 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        int v33 = *(unsigned __int8 *)(a1 + 80);
        int buf = 67240448;
        *(_DWORD *)long long v72 = v30 >> 3;
        *(_WORD *)&v72[4] = 1026;
        *(_DWORD *)&v72[6] = v33;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "#Warning,HRSE,isTileAvailableBasedOnAvlFile,avl byte index,%{public}d,is larger than the data available in the availabilty file,fNeedToDownloadAvlFile,%{public}d", (uint8_t *)&buf, 0xEu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_43;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022B3950);
      }
      int v34 = *(unsigned __int8 *)(a1 + 80);
      int v54 = 67240448;
      *(_DWORD *)double v55 = v30 >> 3;
      *(_WORD *)&v55[4] = 1026;
      *(_DWORD *)&v55[6] = v34;
      int v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLHrseTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v15);
      goto LABEL_119;
    }
    fseek(v11, v30 >> 3, 1);
    if (fread(&__ptr, 1uLL, 1uLL, v11) == 1)
    {
      fclose(v11);
      switch(v29 - (v30 & 0xFFFFFFF8))
      {
        case 0u:
          uint64_t v24 = (__ptr & 0x80u) != 0;
          break;
        case 1u:
          uint64_t v24 = (__ptr >> 6) & 1;
          break;
        case 2u:
          uint64_t v24 = (__ptr >> 5) & 1;
          break;
        case 3u:
          uint64_t v24 = (__ptr >> 4) & 1;
          break;
        case 4u:
          uint64_t v24 = (__ptr >> 3) & 1;
          break;
        case 5u:
          uint64_t v24 = (__ptr >> 2) & 1;
          break;
        case 6u:
          uint64_t v24 = (__ptr >> 1) & 1;
          break;
        case 7u:
          uint64_t v24 = __ptr & 1;
          break;
        default:
          *(unsigned char *)(a1 + 80) = 1;
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022B3950);
          }
          __int16 v42 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
          {
            int v43 = *(unsigned __int8 *)(a1 + 80);
            int buf = 67240192;
            *(_DWORD *)long long v72 = v43;
            _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_FAULT, "HRSE,isTileAvailableBasedOnAvlFile,unexpected case,fNeedToDownloadAvlFile,%{public}d", (uint8_t *)&buf, 8u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1022B3950);
            }
            int v44 = *(unsigned __int8 *)(a1 + 80);
            int v54 = 67240192;
            *(_DWORD *)double v55 = v44;
            double v45 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLHrseTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v45);
            if (v45 != (char *)&buf) {
              free(v45);
            }
          }
          goto LABEL_44;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022B3950);
      }
      __int16 v38 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        int v39 = *(unsigned __int8 *)(a1 + 80);
        int buf = 67240448;
        *(_DWORD *)long long v72 = v24;
        *(_WORD *)&v72[4] = 1026;
        *(_DWORD *)&v72[6] = v39;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "HRSE,isTileAvailableBasedOnAvlFile,isTileAvailable,%{public}d,fNeedToDownloadAvlFile,%{public}d", (uint8_t *)&buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022B3950);
        }
        int v40 = *(unsigned __int8 *)(a1 + 80);
        int v54 = 67240448;
        *(_DWORD *)double v55 = v24;
        *(_WORD *)&v55[4] = 1026;
        *(_DWORD *)&v55[6] = v40;
        double v41 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLHrseTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v41);
        if (v41 != (char *)&buf) {
          free(v41);
        }
      }
      goto LABEL_45;
    }
    *(unsigned char *)(a1 + 80) = 1;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022B3950);
    }
    double v35 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      int v36 = *(unsigned __int8 *)(a1 + 80);
      int buf = 67240192;
      *(_DWORD *)long long v72 = v36;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "#Warning,HRSE,isTileAvailableBasedOnAvlFile,unable to get data byte,fNeedToDownloadAvlFile,%{public}d", (uint8_t *)&buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022B3950);
      }
      int v37 = *(unsigned __int8 *)(a1 + 80);
      int v54 = 67240192;
      *(_DWORD *)double v55 = v37;
      int v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLHrseTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v15);
      goto LABEL_119;
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022B3950);
    }
    unint64_t v14 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      int buf = 134283777;
      *(double *)long long v72 = a2;
      *(_WORD *)&v72[8] = 1025;
      int v73 = v12;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "HRSE,isTileAvailableBasedOnAvlFile,input latitude, %{private}.3lf, below minimum acceptable latitude, %{private}d", (uint8_t *)&buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_20:
        int v54 = 134283777;
        *(double *)double v55 = a2;
        *(_WORD *)&v55[8] = 1025;
        int v56 = v12;
        int v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLHrseTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v15);
LABEL_119:
        if (v15 != (char *)&buf) {
          free(v15);
        }
        goto LABEL_43;
      }
LABEL_121:
      dispatch_once(&qword_1024193D0, &stru_1022B3950);
      goto LABEL_20;
    }
  }
LABEL_43:
  fclose(v11);
LABEL_44:
  uint64_t v24 = 0;
LABEL_45:
  if (SBYTE7(v61) < 0) {
    operator delete((void *)v60);
  }
  return v24;
}

void sub_10046DDD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a54 < 0) {
    operator delete(*v54);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10046DE4C(uint64_t a1)
{
  long long v66 = 0uLL;
  uint64_t v67 = 0;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  memset(v65, 0, sizeof(v65));
  uint64_t v43 = 0;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022B3950);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(unsigned __int8 *)(a1 + 80);
    *(_DWORD *)int buf = 67240192;
    LODWORD(v52) = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "HRSE,checkAvlFileValidityAndSetDownloadFlag,fNeedToDownloadAvlFile,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022B3950);
    }
    int v31 = *(unsigned __int8 *)(a1 + 80);
    *(_DWORD *)__int16 v46 = 67240192;
    *(_DWORD *)&v46[4] = v31;
    char v32 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLHrseTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v32);
    if (v32 != (char *)buf) {
      free(v32);
    }
  }
  if (!sub_10046CB2C(a1))
  {
    *(unsigned char *)(a1 + 80) = 1;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022B3950);
    }
    int v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      int v16 = *(unsigned __int8 *)(a1 + 80);
      *(_DWORD *)int buf = 67240192;
      LODWORD(v52) = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "#Warning,HRSE,checkAvlFileValidityAndSetDownloadFlag,availability file does not exist,fNeedToDownloadAvlFile,%{public}d", buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022B3950);
    }
    int v17 = *(unsigned __int8 *)(a1 + 80);
    *(_DWORD *)__int16 v46 = 67240192;
    *(_DWORD *)&v46[4] = v17;
    int v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLHrseTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v18);
    if (v18 == (char *)buf) {
      return 0;
    }
LABEL_80:
    free(v18);
    return 0;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022B3950);
  }
  std::string::size_type v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v5 = (const char *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      unsigned int v5 = *(const char **)v5;
    }
    *(_DWORD *)int buf = 136446210;
    uint64_t v52 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "HRSE,checkAvlFileValidityAndSetDownloadFlag,Reading,%{public}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022B3950);
    }
    int v33 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      int v33 = (void *)*v33;
    }
    *(_DWORD *)__int16 v46 = 136446210;
    *(void *)&v46[4] = v33;
    int v34 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLHrseTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v34);
    if (v34 != (char *)buf) {
      free(v34);
    }
  }
  BOOL v6 = (const char **)(a1 + 32);
  uint64_t v7 = (const char *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    uint64_t v7 = *v6;
  }
  unint64_t v8 = fopen(v7, "rb");
  uint64_t v9 = v8;
  if (!v8)
  {
    *(unsigned char *)(a1 + 80) = 1;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022B3950);
    }
    unint64_t v19 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      unint64_t v20 = (const char *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        unint64_t v20 = *v6;
      }
      int v21 = *(unsigned __int8 *)(a1 + 80);
      int v22 = *__error();
      *(_DWORD *)int buf = 136446722;
      uint64_t v52 = v20;
      __int16 v53 = 1026;
      int v54 = v21;
      __int16 v55 = 1026;
      int v56 = v22;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#Error,HRSE,checkAvlFileValidityAndSetDownloadFlag,could not open,%{public}s,fNeedToDownloadAvlFile,%{public}d,errno,%{public}d", buf, 0x18u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022B3950);
    }
    if (*(char *)(a1 + 55) < 0) {
      BOOL v6 = (const char **)*v6;
    }
    int v35 = *(unsigned __int8 *)(a1 + 80);
    int v36 = *__error();
    *(_DWORD *)__int16 v46 = 136446722;
    *(void *)&v46[4] = v6;
    __int16 v47 = 1026;
    int v48 = v35;
    __int16 v49 = 1026;
    int v50 = v36;
    int v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLHrseTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v18);
    if (v18 == (char *)buf) {
      return 0;
    }
    goto LABEL_80;
  }
  *(void *)__int16 v46 = 0;
  if ((sub_10046EAF4(v8, v57, (uint64_t)&v58, (int *)&v43, v46) & 1) == 0)
  {
    *(unsigned char *)(a1 + 80) = 1;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022B3950);
    }
    uint64_t v24 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      int v25 = *(unsigned __int8 *)(a1 + 80);
      *(_DWORD *)int buf = 67240192;
      LODWORD(v52) = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "#Warning,HRSE,checkAvlFileValidityAndSetDownloadFlag,readAvlHelper failed,fNeedToDownloadAvlFile,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022B3950);
      }
      int v37 = *(unsigned __int8 *)(a1 + 80);
      int v44 = 67240192;
      int v45 = v37;
      __int16 v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLHrseTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v38);
      if (v38 != (char *)buf) {
        free(v38);
      }
    }
    fclose(v9);
    goto LABEL_55;
  }
  fclose(v9);
  if (v65[22] != 1)
  {
    *(unsigned char *)(a1 + 80) = 1;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022B3950);
    }
    int v26 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      int v27 = *(unsigned __int8 *)(a1 + 80);
      *(_DWORD *)int buf = 67240192;
      LODWORD(v52) = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "#Warning,HRSE,checkAvlFileValidityAndSetDownloadFlag,availability file version does not match expected,fNeedToDownloadAvlFile,%{public}d", buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_55;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_86;
    }
    goto LABEL_92;
  }
  double Current = CFAbsoluteTimeGetCurrent();
  double v11 = *(double *)((char *)&v66 + 4);
  unsigned int v12 = HIDWORD(v66);
  if (Current <= v11 + (double)v12 + (double)(random() % 86400))
  {
    *(unsigned char *)(a1 + 80) = 0;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022B3950);
    }
    signed int v29 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v30 = *(unsigned __int8 *)(a1 + 80);
      *(_DWORD *)int buf = 67240192;
      LODWORD(v52) = v30;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "HRSE,checkAvlFileValidityAndSetDownloadFlag,reached end of function,fNeedToDownloadAvlFile,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022B3950);
      }
      int v41 = *(unsigned __int8 *)(a1 + 80);
      int v44 = 67240192;
      int v45 = v41;
      __int16 v42 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLHrseTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v42);
      if (v42 != (char *)buf) {
        free(v42);
      }
    }
    uint64_t v23 = 1;
    goto LABEL_56;
  }
  *(unsigned char *)(a1 + 80) = 1;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022B3950);
  }
  double v13 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    int v14 = *(unsigned __int8 *)(a1 + 80);
    *(_DWORD *)int buf = 67240192;
    LODWORD(v52) = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "#Warning,HRSE,checkAvlFileValidityAndSetDownloadFlag,availability file has expired,fNeedToDownloadAvlFile,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1)
    {
LABEL_86:
      int v39 = *(unsigned __int8 *)(a1 + 80);
      int v44 = 67240192;
      int v45 = v39;
      int v40 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLHrseTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v40);
      if (v40 != (char *)buf) {
        free(v40);
      }
      goto LABEL_55;
    }
LABEL_92:
    dispatch_once(&qword_1024193D0, &stru_1022B3950);
    goto LABEL_86;
  }
LABEL_55:
  uint64_t v23 = 0;
LABEL_56:
  if (SBYTE7(v59) < 0) {
    operator delete((void *)v58);
  }
  return v23;
}

void sub_10046EAA8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 233) < 0) {
    operator delete(*(void **)(v1 - 256));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10046EAF4(FILE *a1, _OWORD *a2, uint64_t a3, int *a4, void *a5)
{
  if (a1)
  {
    if (a2)
    {
      if (!feof(a1))
      {
        unsigned int v18 = 0;
        unint64_t v19 = (void *)(a3 + 24);
        while (1)
        {
          char __ptr = 0;
          if (fread(&__ptr, 1uLL, 1uLL, a1) != 1) {
            return 0;
          }
          uint64_t v20 = ftell(a1);
          if (__ptr == 67)
          {
            uint64_t v21 = v20;
            LOBYTE(v107) = 67;
            if (fread((char *)&v107 + 1, 1uLL, 8uLL, a1) != 8) {
              return 0;
            }
            *(unsigned char *)(a3 + 32) = v108;
            void *v19 = v107;
            if (*(void *)(a3 + 24) == 0x5641455352484C43 && *(unsigned char *)(a3 + 32) == 76)
            {
              unint64_t v23 = 0;
              *(void *)a4 = 9;
              do
              {
                *((unsigned char *)a2 + v23) = *((unsigned char *)v19 + v23);
                ++v23;
                uint64_t v24 = *(void *)a4;
              }
              while (*(void *)a4 > v23);
              size_t v25 = (110 - v24);
              if (fread((char *)a2 + v24, 1uLL, v25, a1) == v25)
              {
                long long v26 = *a2;
                long long v27 = a2[2];
                *(_OWORD *)(a3 + 40) = a2[1];
                *(_OWORD *)(a3 + 56) = v27;
                *(_OWORD *)unint64_t v19 = v26;
                long long v28 = a2[3];
                long long v29 = a2[4];
                long long v30 = a2[5];
                *(_OWORD *)(a3 + 118) = *(_OWORD *)((char *)a2 + 94);
                *(_OWORD *)(a3 + 88) = v29;
                *(_OWORD *)(a3 + 104) = v30;
                *(_OWORD *)(a3 + 72) = v28;
                size_t v31 = *(void *)a4 + v25;
                *(void *)a4 = v31;
                if (*(void *)(a3 + 24) == 0x5641455352484C43 && *(unsigned char *)(a3 + 32) == 76)
                {
                  if (fread((char *)a2 + v31, 1uLL, 1uLL, a1) == 1)
                  {
                    uint64_t v32 = *(void *)a4;
                    *(unsigned char *)(a3 + 134) = *((unsigned char *)a2 + *(void *)a4);
                    *(void *)a4 = ++v32;
                    if (fread((char *)a2 + v32, 1uLL, 1uLL, a1) == 1)
                    {
                      uint64_t v33 = *(void *)a4;
                      *(unsigned char *)(a3 + 135) = *((unsigned char *)a2 + *(void *)a4);
                      *(void *)a4 = ++v33;
                      if (fread((char *)a2 + v33, 1uLL, 1uLL, a1) == 1)
                      {
                        uint64_t v34 = *(void *)a4;
                        *(unsigned char *)(a3 + 136) = *((unsigned char *)a2 + *(void *)a4);
                        *(void *)a4 = ++v34;
                        if (fread((char *)a2 + v34, 1uLL, 1uLL, a1) == 1)
                        {
                          uint64_t v35 = *(void *)a4;
                          *(unsigned char *)(a3 + 137) = *((unsigned char *)a2 + *(void *)a4);
                          *(void *)a4 = ++v35;
                          if (fread((char *)a2 + v35, 1uLL, 4uLL, a1) == 4)
                          {
                            uint64_t v36 = *(void *)a4;
                            float v37 = COERCE_FLOAT(bswap32(*(_DWORD *)((char *)a2 + *(void *)a4)));
                            *(float *)(a3 + 140) = v37;
                            uint64_t v38 = v36 + 4;
                            *(void *)a4 = v38;
                            if (fabsf(v37 + -0.05) <= 0.0001)
                            {
                              if (fread((char *)a2 + v38, 1uLL, 8uLL, a1) == 8)
                              {
                                uint64_t v58 = *(void *)a4;
                                *(void *)(a3 + 144) = bswap64(*(void *)((char *)a2 + *(void *)a4));
                                v58 += 8;
                                *(void *)a4 = v58;
                                if (fread((char *)a2 + v58, 1uLL, 4uLL, a1) == 4)
                                {
                                  uint64_t v59 = *(void *)a4;
                                  *(_DWORD *)(a3 + 152) = bswap32(*(_DWORD *)((char *)a2 + *(void *)a4));
                                  v59 += 4;
                                  *(void *)a4 = v59;
                                  if (fread((char *)a2 + v59, 1uLL, 4uLL, a1) == 4)
                                  {
                                    uint64_t v60 = *(void *)a4;
                                    *(_DWORD *)(a3 + 156) = bswap32(*(_DWORD *)((char *)a2 + *(void *)a4));
                                    v60 += 4;
                                    *(void *)a4 = v60;
                                    if (fread((char *)a2 + v60, 1uLL, 4uLL, a1) == 4)
                                    {
                                      *a5 = *a4;
                                      uint64_t v61 = *(void *)a4;
                                      *(_DWORD *)(a3 + 160) = bswap32(*(_DWORD *)((char *)a2 + *(void *)a4));
                                      *(void *)a4 = v61 + 4;
                                      if (qword_1024193D0 != -1) {
                                        dispatch_once(&qword_1024193D0, &stru_1022B3950);
                                      }
                                      long long v62 = qword_1024193D8;
                                      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
                                      {
                                        int v63 = *(unsigned __int8 *)(a3 + 134);
                                        int v64 = *(unsigned __int8 *)(a3 + 135);
                                        int v65 = *(char *)(a3 + 136);
                                        int v66 = *(char *)(a3 + 137);
                                        double v67 = *(float *)(a3 + 140);
                                        uint64_t v68 = *(void *)(a3 + 144);
                                        int v69 = *(_DWORD *)(a3 + 152);
                                        int v70 = *(_DWORD *)(a3 + 156);
                                        int v71 = *(_DWORD *)(a3 + 160);
                                        int buf = 67176705;
                                        *(_DWORD *)v110 = v63;
                                        *(_WORD *)&v110[4] = 1025;
                                        *(_DWORD *)&v110[6] = v64;
                                        __int16 v111 = 1025;
                                        int v112 = v65;
                                        __int16 v113 = 1025;
                                        int v114 = v66;
                                        __int16 v115 = 2049;
                                        double v116 = v67;
                                        __int16 v117 = 2049;
                                        uint64_t v118 = v68;
                                        __int16 v119 = 1025;
                                        int v120 = v69;
                                        __int16 v121 = 1025;
                                        int v122 = v70;
                                        __int16 v123 = 1025;
                                        int v124 = v71;
                                        _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "HRSE,readAvlHelper,vers,%{private}d,headerLen,%{private}d,minLat,%{private}d,maxLat,%{private}d,binsize,%{private}.7f,timestamp,%{private}.1f,expirationAge,%{private}d,dataSizeBytes,%{private}d,crc,%{private}d", (uint8_t *)&buf, 0x40u);
                                      }
                                      if (sub_10013D1A0(115, 2))
                                      {
                                        bzero(&buf, 0x65CuLL);
                                        if (qword_1024193D0 != -1) {
                                          dispatch_once(&qword_1024193D0, &stru_1022B3950);
                                        }
                                        int v80 = *(unsigned __int8 *)(a3 + 134);
                                        int v81 = *(unsigned __int8 *)(a3 + 135);
                                        int v82 = *(char *)(a3 + 136);
                                        int v83 = *(char *)(a3 + 137);
                                        double v84 = *(float *)(a3 + 140);
                                        uint64_t v85 = *(void *)(a3 + 144);
                                        int v86 = *(_DWORD *)(a3 + 152);
                                        int v87 = *(_DWORD *)(a3 + 156);
                                        int v88 = *(_DWORD *)(a3 + 160);
                                        int v91 = 67176705;
                                        *(_DWORD *)double v92 = v80;
                                        *(_WORD *)&v92[4] = 1025;
                                        *(_DWORD *)&v92[6] = v81;
                                        __int16 v93 = 1025;
                                        int v94 = v82;
                                        __int16 v95 = 1025;
                                        int v96 = v83;
                                        __int16 v97 = 2049;
                                        double v98 = v84;
                                        __int16 v99 = 2049;
                                        uint64_t v100 = v85;
                                        __int16 v101 = 1025;
                                        int v102 = v86;
                                        __int16 v103 = 1025;
                                        int v104 = v87;
                                        __int16 v105 = 1025;
                                        int v106 = v88;
                                        double v89 = (char *)_os_log_send_and_compose_impl();
                                        sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLHrseTileAvailability::readAvlHelper(FILE *, unsigned char *, CLHRSETileAvailability &, size_t &, size_t &)", "%s\n", v89);
                                        if (v89 != (char *)&buf) {
                                          free(v89);
                                        }
                                      }
                                      return 1;
                                    }
                                    if (qword_1024193D0 != -1) {
                                      dispatch_once(&qword_1024193D0, &stru_1022B3950);
                                    }
                                    long long v78 = qword_1024193D8;
                                    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
                                    {
                                      LOWORD(buf) = 0;
                                      _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_ERROR, "#Error,HRSE,readAvlHelper,invalid availability file - crc", (uint8_t *)&buf, 2u);
                                    }
                                    BOOL v79 = sub_10013D1A0(115, 0);
                                    uint64_t result = 0;
                                    if (v79)
                                    {
                                      bzero(&buf, 0x65CuLL);
                                      if (qword_1024193D0 != -1) {
                                        dispatch_once(&qword_1024193D0, &stru_1022B3950);
                                      }
                                      LOWORD(v91) = 0;
                                      goto LABEL_28;
                                    }
                                  }
                                  else
                                  {
                                    if (qword_1024193D0 != -1) {
                                      dispatch_once(&qword_1024193D0, &stru_1022B3950);
                                    }
                                    unint64_t v76 = qword_1024193D8;
                                    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
                                    {
                                      LOWORD(buf) = 0;
                                      _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_ERROR, "#Error,HRSE,readAvlHelper,invalid availability file - data size", (uint8_t *)&buf, 2u);
                                    }
                                    BOOL v77 = sub_10013D1A0(115, 0);
                                    uint64_t result = 0;
                                    if (v77)
                                    {
                                      bzero(&buf, 0x65CuLL);
                                      if (qword_1024193D0 != -1) {
                                        dispatch_once(&qword_1024193D0, &stru_1022B3950);
                                      }
                                      LOWORD(v91) = 0;
                                      goto LABEL_28;
                                    }
                                  }
                                }
                                else
                                {
                                  if (qword_1024193D0 != -1) {
                                    dispatch_once(&qword_1024193D0, &stru_1022B3950);
                                  }
                                  __int16 v74 = qword_1024193D8;
                                  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
                                  {
                                    LOWORD(buf) = 0;
                                    _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_ERROR, "#Error,HRSE,readAvlHelper,invalid availability file - expiration age", (uint8_t *)&buf, 2u);
                                  }
                                  BOOL v75 = sub_10013D1A0(115, 0);
                                  uint64_t result = 0;
                                  if (v75)
                                  {
                                    bzero(&buf, 0x65CuLL);
                                    if (qword_1024193D0 != -1) {
                                      dispatch_once(&qword_1024193D0, &stru_1022B3950);
                                    }
                                    LOWORD(v91) = 0;
                                    goto LABEL_28;
                                  }
                                }
                              }
                              else
                              {
                                if (qword_1024193D0 != -1) {
                                  dispatch_once(&qword_1024193D0, &stru_1022B3950);
                                }
                                long long v72 = qword_1024193D8;
                                if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
                                {
                                  LOWORD(buf) = 0;
                                  _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_ERROR, "#Error,HRSE,readAvlHelper,invalid availability file - timestamp", (uint8_t *)&buf, 2u);
                                }
                                BOOL v73 = sub_10013D1A0(115, 0);
                                uint64_t result = 0;
                                if (v73)
                                {
                                  bzero(&buf, 0x65CuLL);
                                  if (qword_1024193D0 != -1) {
                                    dispatch_once(&qword_1024193D0, &stru_1022B3950);
                                  }
                                  LOWORD(v91) = 0;
                                  goto LABEL_28;
                                }
                              }
                            }
                            else
                            {
                              if (qword_1024193D0 != -1) {
                                dispatch_once(&qword_1024193D0, &stru_1022B3950);
                              }
                              int v39 = qword_1024193D8;
                              if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
                              {
                                double v40 = *(float *)(a3 + 140);
                                int buf = 134349056;
                                *(double *)v110 = v40;
                                _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "#Error,HRSE,readAvlHelper,coarse avl file is not 0.05 deg by 0.05 deg,spacing unexpected,%{public}.1f,re-download needed", (uint8_t *)&buf, 0xCu);
                              }
                              BOOL v41 = sub_10013D1A0(115, 0);
                              uint64_t result = 0;
                              if (v41)
                              {
                                bzero(&buf, 0x65CuLL);
                                if (qword_1024193D0 != -1) {
                                  dispatch_once(&qword_1024193D0, &stru_1022B3950);
                                }
                                double v42 = *(float *)(a3 + 140);
                                int v91 = 134349056;
                                *(double *)double v92 = v42;
                                goto LABEL_28;
                              }
                            }
                          }
                          else
                          {
                            if (qword_1024193D0 != -1) {
                              dispatch_once(&qword_1024193D0, &stru_1022B3950);
                            }
                            int v56 = qword_1024193D8;
                            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
                            {
                              LOWORD(buf) = 0;
                              _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_ERROR, "#Error,HRSE,readAvlHelper,invalid availability file - binsize", (uint8_t *)&buf, 2u);
                            }
                            BOOL v57 = sub_10013D1A0(115, 0);
                            uint64_t result = 0;
                            if (v57)
                            {
                              bzero(&buf, 0x65CuLL);
                              if (qword_1024193D0 != -1) {
                                dispatch_once(&qword_1024193D0, &stru_1022B3950);
                              }
                              LOWORD(v91) = 0;
                              goto LABEL_28;
                            }
                          }
                        }
                        else
                        {
                          if (qword_1024193D0 != -1) {
                            dispatch_once(&qword_1024193D0, &stru_1022B3950);
                          }
                          int v54 = qword_1024193D8;
                          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
                          {
                            LOWORD(buf) = 0;
                            _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "#Error,HRSE,readAvlHelper,invalid availability file - maxLat", (uint8_t *)&buf, 2u);
                          }
                          BOOL v55 = sub_10013D1A0(115, 0);
                          uint64_t result = 0;
                          if (v55)
                          {
                            bzero(&buf, 0x65CuLL);
                            if (qword_1024193D0 != -1) {
                              dispatch_once(&qword_1024193D0, &stru_1022B3950);
                            }
                            LOWORD(v91) = 0;
                            goto LABEL_28;
                          }
                        }
                      }
                      else
                      {
                        if (qword_1024193D0 != -1) {
                          dispatch_once(&qword_1024193D0, &stru_1022B3950);
                        }
                        uint64_t v52 = qword_1024193D8;
                        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
                        {
                          LOWORD(buf) = 0;
                          _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "#Error,HRSE,readAvlHelper,invalid availability file - minLat", (uint8_t *)&buf, 2u);
                        }
                        BOOL v53 = sub_10013D1A0(115, 0);
                        uint64_t result = 0;
                        if (v53)
                        {
                          bzero(&buf, 0x65CuLL);
                          if (qword_1024193D0 != -1) {
                            dispatch_once(&qword_1024193D0, &stru_1022B3950);
                          }
                          LOWORD(v91) = 0;
                          goto LABEL_28;
                        }
                      }
                    }
                    else
                    {
                      if (qword_1024193D0 != -1) {
                        dispatch_once(&qword_1024193D0, &stru_1022B3950);
                      }
                      int v50 = qword_1024193D8;
                      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
                      {
                        LOWORD(buf) = 0;
                        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, "#Error,HRSE,readAvlHelper,invalid availability file - headerLength", (uint8_t *)&buf, 2u);
                      }
                      BOOL v51 = sub_10013D1A0(115, 0);
                      uint64_t result = 0;
                      if (v51)
                      {
                        bzero(&buf, 0x65CuLL);
                        if (qword_1024193D0 != -1) {
                          dispatch_once(&qword_1024193D0, &stru_1022B3950);
                        }
                        LOWORD(v91) = 0;
                        goto LABEL_28;
                      }
                    }
                  }
                  else
                  {
                    if (qword_1024193D0 != -1) {
                      dispatch_once(&qword_1024193D0, &stru_1022B3950);
                    }
                    int v48 = qword_1024193D8;
                    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
                    {
                      LOWORD(buf) = 0;
                      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, "#Error,HRSE,readAvlHelper,invalid availability file - version", (uint8_t *)&buf, 2u);
                    }
                    BOOL v49 = sub_10013D1A0(115, 0);
                    uint64_t result = 0;
                    if (v49)
                    {
                      bzero(&buf, 0x65CuLL);
                      if (qword_1024193D0 != -1) {
                        dispatch_once(&qword_1024193D0, &stru_1022B3950);
                      }
                      LOWORD(v91) = 0;
                      goto LABEL_28;
                    }
                  }
                }
                else
                {
                  if (qword_1024193D0 != -1) {
                    dispatch_once(&qword_1024193D0, &stru_1022B3950);
                  }
                  __int16 v46 = qword_1024193D8;
                  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
                  {
                    LOWORD(buf) = 0;
                    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "#Error,HRSE,readAvlHelper,invalid availability file - invalid header string", (uint8_t *)&buf, 2u);
                  }
                  BOOL v47 = sub_10013D1A0(115, 0);
                  uint64_t result = 0;
                  if (v47)
                  {
                    bzero(&buf, 0x65CuLL);
                    if (qword_1024193D0 != -1) {
                      dispatch_once(&qword_1024193D0, &stru_1022B3950);
                    }
                    LOWORD(v91) = 0;
                    goto LABEL_28;
                  }
                }
              }
              else
              {
                if (qword_1024193D0 != -1) {
                  dispatch_once(&qword_1024193D0, &stru_1022B3950);
                }
                int v44 = qword_1024193D8;
                if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
                {
                  LOWORD(buf) = 0;
                  _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "#Error,HRSE,readAvlHelper,invalid availability file - header string", (uint8_t *)&buf, 2u);
                }
                BOOL v45 = sub_10013D1A0(115, 0);
                uint64_t result = 0;
                if (v45)
                {
                  bzero(&buf, 0x65CuLL);
                  if (qword_1024193D0 != -1) {
                    dispatch_once(&qword_1024193D0, &stru_1022B3950);
                  }
                  LOWORD(v91) = 0;
                  goto LABEL_28;
                }
              }
              return result;
            }
            if (fseek(a1, v21, 0))
            {
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_1022B3950);
              }
              uint64_t v43 = qword_1024193D8;
              if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
              {
                LOWORD(buf) = 0;
                _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "#Error,HRSE,readAvlHelper,fseek returned non-zero", (uint8_t *)&buf, 2u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(&buf, 0x65CuLL);
                if (qword_1024193D0 != -1) {
                  dispatch_once(&qword_1024193D0, &stru_1022B3950);
                }
                LOWORD(v91) = 0;
                goto LABEL_28;
              }
              return 0;
            }
          }
          if (!feof(a1) && v18++ < 0x1FF) {
            continue;
          }
          break;
        }
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022B3950);
      }
      BOOL v10 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#Error,HRSE,readAvlHelper,did not synchronize to tile header_string", (uint8_t *)&buf, 2u);
      }
      BOOL v11 = sub_10013D1A0(115, 0);
      uint64_t result = 0;
      if (v11)
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022B3950);
        }
        LOWORD(v91) = 0;
LABEL_28:
        int v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLHrseTileAvailability::readAvlHelper(FILE *, unsigned char *, CLHRSETileAvailability &, size_t &, size_t &)", "%s\n", v17);
        if (v17 != (char *)&buf) {
          free(v17);
        }
        return 0;
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022B3950);
      }
      int v15 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#Error,HRSE,readAvlHelper,null buffer", (uint8_t *)&buf, 2u);
      }
      BOOL v16 = sub_10013D1A0(115, 0);
      uint64_t result = 0;
      if (v16)
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022B3950);
        }
        LOWORD(v107) = 0;
        goto LABEL_28;
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022B3950);
    }
    double v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#Error,HRSE,readAvlHelper,invalid availability file", (uint8_t *)&buf, 2u);
    }
    BOOL v14 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v14)
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022B3950);
      }
      LOWORD(v107) = 0;
      goto LABEL_28;
    }
  }
  return result;
}

uint64_t sub_10046FF8C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80);
}

void *sub_10046FF94(uint64_t a1)
{
  uint64_t result = sub_1003B2350((void *)a1);
  *(_DWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 28) = 0;
  return result;
}

void sub_10046FFC0(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_10046FFF0(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_100470020(uint64_t a1, long long *a2, uint64_t a3)
{
  *(void *)a1 = a3;
  sub_1010BEB20(a1 + 8, a2);
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  uint64_t v12 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v10 = _Q0;
  long long v11 = _Q0;
  sub_1004730F0(a1 + 208, 0xCuLL, &v11);
  *(_OWORD *)(a1 + 256) = v10;
  *(_OWORD *)(a1 + 272) = v10;
  *(void *)(a1 + 288) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 296) = 0;
  sub_100470100(a1);
  return a1;
}

void sub_1004700C4(_Unwind_Exception *a1)
{
  sub_1000D816C(v5);
  sub_1003BE294(v4);
  sub_1000D80C4(v3);
  uint64_t v7 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

double sub_100470100(uint64_t a1)
{
  int v2 = (int)[+[NSTimeZone localTimeZone] secondsFromGMT]% 3600;
  if (v2 != *(_DWORD *)(a1 + 296))
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022B3970);
    }
    std::string::size_type v4 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(_DWORD *)(a1 + 296);
      *(_DWORD *)int buf = 67109376;
      int v8 = v5;
      __int16 v9 = 1024;
      int v10 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "StandPlus,time zone change,clearing everything,old,%d,new,%d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022B3970);
      }
      BOOL v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStandPlusMinuteEstimator::computeTimezoneOffset()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    *(_DWORD *)(a1 + 296) = v2;
    *(void *)&double result = sub_10047031C(a1).n128_u64[0];
  }
  return result;
}

__n128 sub_10047031C(uint64_t a1)
{
  sub_100903014((void *)(a1 + 8));
  int v2 = *(void ***)(a1 + 120);
  uint64_t v3 = *(void *)(a1 + 128);
  *(void *)(a1 + 152) = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = *(void *)(a1 + 128);
      int v2 = (void **)(*(void *)(a1 + 120) + 8);
      *(void *)(a1 + 120) = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 128;
  }
  else
  {
    if (v4 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v6 = 256;
  }
  *(void *)(a1 + 144) = v6;
LABEL_8:
  uint64_t v7 = *(void ***)(a1 + 168);
  uint64_t v8 = *(void *)(a1 + 176);
  *(void *)(a1 + 200) = 0;
  unint64_t v9 = v8 - (void)v7;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v7);
      uint64_t v10 = *(void *)(a1 + 176);
      uint64_t v7 = (void **)(*(void *)(a1 + 168) + 8);
      *(void *)(a1 + 168) = v7;
      unint64_t v9 = v10 - (void)v7;
    }
    while (v9 > 0x10);
  }
  if (v9 >> 3 == 1)
  {
    uint64_t v11 = 51;
    goto LABEL_14;
  }
  if (v9 >> 3 == 2)
  {
    uint64_t v11 = 102;
LABEL_14:
    *(void *)(a1 + 192) = v11;
  }
  unint64_t v20 = 0;
  uint64_t v22 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  __n128 v18 = (__n128)_Q0;
  memset(v19, 0, sizeof(v19));
  long long v21 = _Q0;
  sub_1004730F0((uint64_t)v19, 0xCuLL, &v21);
  unint64_t v20 = 0xBFF0000000000000;
  sub_100473874(a1 + 208, (uint64_t)v19);
  *(void *)(a1 + 256) = v20;
  sub_1000D816C(v19);
  *(void *)(a1 + 264) = 0xBFF0000000000000;
  __n128 result = v18;
  *(__n128 *)(a1 + 272) = v18;
  *(void *)(a1 + 288) = 0xBFF0000000000000;
  return result;
}

void sub_10047045C(uint64_t a1, long long *a2)
{
  double v4 = *(double *)a2;
  *(void *)(a1 + 280) = *(void *)a2;
  if (*(double *)(a1 + 288) > *(double *)(a1 + 256))
  {
    sub_100470928(a1);
    uint64_t v6 = *(void *)(a1 + 168);
    if (*(void *)(a1 + 176) == v6)
    {
      unint64_t v8 = 0;
    }
    else
    {
      unint64_t v7 = *(void *)(a1 + 200) + *(void *)(a1 + 192);
      unint64_t v8 = *(void *)(v6 + 8 * (v7 / 0x66)) + 40 * (v7 % 0x66);
    }
    if (v8 == v5 || v4 < *(double *)(v5 + 8))
    {
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022B3970);
      }
      unint64_t v9 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "StandPlus,ignoring calorimetry input", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_1022B3970);
        }
        v27.n128_u16[0] = 0;
        size_t v25 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLStandPlusMinuteEstimator::feed(const CLStandMinuteInputData &)", "%s\n", v25);
        if (v25 != (char *)buf) {
          free(v25);
        }
      }
      sub_100470A74((double *)a1);
      sub_100470E84(a1);
      return;
    }
    *(void *)(a1 + 288) = 0xBFF0000000000000;
  }
  sub_1010BEB50((void **)(a1 + 8), a2);
  v27.n128_f64[0] = v10;
  v27.n128_u64[1] = v11;
  if (v10 != *(double *)(a1 + 264) && (v10 != -1.0 || *(void *)(a1 + 152) != 0)) {
    sub_100470FA8(a1, &v27);
  }
  sub_100470A74((double *)a1);
  sub_100470E84(a1);
  if (*(void *)(a1 + 200) >= 8uLL)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022B3970);
    }
    double v13 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "StandPlus,maxReached,sedentaryTimer", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022B3970);
      }
      long long v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStandPlusMinuteEstimator::feed(const CLStandMinuteInputData &)", "%s\n", v26);
      if (v26 != (char *)buf) {
        free(v26);
      }
    }
    unint64_t v14 = *(void *)(a1 + 192);
    uint64_t v15 = *(void *)(a1 + 168);
    BOOL v16 = (void *)(v15 + 8 * (v14 / 0x66));
    if (*(void *)(a1 + 176) == v15) {
      int v17 = 0;
    }
    else {
      int v17 = (char *)(*v16 + 40 * (v14 % 0x66));
    }
    uint64_t v18 = *(void *)(a1 + 200);
    *(void *)int buf = v15 + 8 * (v14 / 0x66);
    long long v29 = v17;
    sub_100176BF4(buf, v18);
    uint64_t v19 = (uint64_t)&v29[-**(void **)buf];
    unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * (v19 >> 3);
    if (v19 < 321)
    {
      unint64_t v24 = 109 - v20;
      uint64_t v22 = (void *)(*(void *)buf - 8 * (v24 / 0x66));
      unint64_t v23 = (char *)(*v22 + 40 * (102 * (v24 / 0x66) - v24) + 4040);
    }
    else
    {
      unint64_t v21 = v20 - 8;
      uint64_t v22 = (void *)(*(void *)buf + 8 * (v21 / 0x66));
      unint64_t v23 = (char *)(*v22 + 40 * (v21 % 0x66));
    }
    sub_100471354((void *)(a1 + 160), v16, v17, v22, v23);
  }
}

void *sub_100470928(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 192);
  unint64_t v2 = v1 + *(void *)(a1 + 200);
  uint64_t v3 = *(void *)(a1 + 168);
  uint64_t v4 = *(void *)(a1 + 176);
  uint64_t v5 = (void *)(v3 + 8 * (v2 / 0x66));
  double v6 = (double)*(int *)(a1 + 296);
  double v7 = floor(*(double *)(a1 + 280) + v6) - (double)((int)vcvtmd_s64_f64(*(double *)(a1 + 280) + v6) % 3600);
  unint64_t v8 = (void *)(v3 + 8 * (v1 / 0x66));
  if (v4 == v3) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *v8 + 40 * (v1 % 0x66);
  }
  double v10 = v7 - v6;
  unint64_t v11 = v2 % 0x66;
  double v12 = 1.79769313e308;
  __n128 result = v5;
LABEL_5:
  unint64_t v14 = v9;
  while (1)
  {
    uint64_t v15 = v4 == v3 ? 0 : *v5 + 40 * v11;
    if (v14 == v15) {
      return result;
    }
    if (*(_DWORD *)(v14 + 16) == 2)
    {
      double v16 = *(double *)(v14 + 8);
      if (v16 > v10 && v16 < v12)
      {
        double v12 = *(double *)(v14 + 8);
        __n128 result = v8;
      }
    }
    v9 += 40;
    v14 += 40;
    if (*v8 + 4080 == v9)
    {
      unint64_t v18 = v8[1];
      ++v8;
      unint64_t v9 = v18;
      goto LABEL_5;
    }
  }
}

double *sub_100470A74(double *result)
{
  double v1 = floor(result[35] + (double)*((int *)result + 74))
     - (double)((int)vcvtmd_s64_f64(result[35] + (double)*((int *)result + 74)) % 3600)
     - (double)*((int *)result + 74);
  if (v1 > result[32])
  {
    unint64_t v2 = result;
    uint64_t v3 = (uint64_t)(result + 26);
    sub_100470E84((uint64_t)result);
    unint64_t v51 = 0;
    memset(v50, 0, sizeof(v50));
    uint64_t v53 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v52 = _Q0;
    sub_1004730F0((uint64_t)v50, 0xCuLL, &v52);
    unint64_t v51 = 0xBFF0000000000000;
    sub_100473874(v3, (uint64_t)v50);
    *((void *)v2 + 32) = v51;
    sub_1000D816C(v50);
    uint64_t v9 = *((void *)v2 + 27);
    if (*((void *)v2 + 28) != v9)
    {
      unint64_t v10 = *((void *)v2 + 30);
      unint64_t v11 = (double **)(v9 + 8 * (v10 / 0xAA));
      double v12 = *v11;
      double v13 = &(*v11)[3 * (v10 % 0xAA)];
      unint64_t v14 = *(void *)(v9 + 8 * ((*((void *)v2 + 31) + v10) / 0xAA)) + 24 * ((*((void *)v2 + 31) + v10) % 0xAA);
      if (v13 != (double *)v14)
      {
        int v15 = 0;
        do
        {
          double v16 = v1 + (double)v15;
          *double v13 = v16;
          v13[1] = v16 + 300.0;
          v13 += 3;
          if ((char *)v13 - (char *)v12 == 4080)
          {
            int v17 = v11[1];
            ++v11;
            double v12 = v17;
            double v13 = v17;
          }
          v15 += 300;
        }
        while (v13 != (double *)v14);
      }
    }
    v2[32] = v1;
    sub_100903014((void *)v2 + 1);
    v2[36] = -1.0;
    unint64_t v18 = *((void *)v2 + 24);
    uint64_t v19 = *((void *)v2 + 21);
    uint64_t v20 = *((void *)v2 + 22);
    unint64_t v21 = (void *)(v19 + 8 * (v18 / 0x66));
    if (v20 == v19)
    {
      unint64_t v22 = 0;
      unint64_t v23 = v2 + 25;
    }
    else
    {
      unint64_t v22 = *(void *)(v19 + 8 * (v18 / 0x66)) + 40 * (v18 % 0x66);
      unint64_t v23 = v2 + 25;
      unint64_t v24 = *(void *)(v19 + 8 * ((*((void *)v2 + 25) + v18) / 0x66)) + 40 * ((*((void *)v2 + 25) + v18) % 0x66);
      if (v22 != v24)
      {
        while (*(double *)(v22 + 8) >= v1)
        {
          v22 += 40;
          if (v22 - *v21 == 4080)
          {
            unint64_t v25 = v21[1];
            ++v21;
            unint64_t v22 = v25;
          }
          if (v22 == v24) {
            goto LABEL_24;
          }
        }
      }
      if (v22 == v24)
      {
LABEL_24:
        unint64_t v22 = *(void *)(v19 + 8 * ((*((void *)v2 + 25) + v18) / 0x66)) + 40 * ((*((void *)v2 + 25) + v18) % 0x66);
      }
      else
      {
        unint64_t v26 = v22;
        __n128 v27 = v21;
        while (1)
        {
          v26 += 40;
          if (v26 - *v27 == 4080)
          {
            unint64_t v28 = v27[1];
            ++v27;
            unint64_t v26 = v28;
          }
          if (v26 == v24) {
            break;
          }
          if (*(double *)(v26 + 8) >= v1)
          {
            long long v29 = *(_OWORD *)v26;
            long long v30 = *(_OWORD *)(v26 + 16);
            *(unsigned char *)(v22 + 32) = *(unsigned char *)(v26 + 32);
            *(_OWORD *)unint64_t v22 = v29;
            *(_OWORD *)(v22 + 16) = v30;
            v22 += 40;
            if (v22 - *v21 == 4080)
            {
              unint64_t v31 = v21[1];
              ++v21;
              unint64_t v22 = v31;
            }
          }
        }
        unint64_t v18 = *((void *)v2 + 24);
        uint64_t v19 = *((void *)v2 + 21);
        uint64_t v20 = *((void *)v2 + 22);
      }
    }
    unint64_t v32 = v18 + *v23;
    uint64_t v33 = (void *)(v19 + 8 * (v32 / 0x66));
    if (v20 == v19) {
      uint64_t v34 = 0;
    }
    else {
      uint64_t v34 = (char *)(*v33 + 40 * (v32 % 0x66));
    }
    sub_100471354((void *)v2 + 20, v21, (char *)v22, v33, v34);
    unint64_t v35 = *((void *)v2 + 18);
    uint64_t v36 = *((void *)v2 + 15);
    uint64_t v37 = *((void *)v2 + 16);
    uint64_t v38 = (void *)(v36 + 8 * (v35 >> 8));
    if (v37 == v36)
    {
      uint64_t v39 = 0;
      double v40 = v2 + 19;
    }
    else
    {
      uint64_t v39 = *v38 + 16 * v35;
      double v40 = v2 + 19;
      uint64_t v41 = *(void *)(v36 + (((*((void *)v2 + 19) + v35) >> 5) & 0x7FFFFFFFFFFFFF8))
          + 16 * (*((unsigned char *)v2 + 152) + v35);
      if (v39 != v41)
      {
        while (*(double *)(v39 + 8) >= v1)
        {
          v39 += 16;
          if (v39 - *v38 == 4096)
          {
            uint64_t v42 = v38[1];
            ++v38;
            uint64_t v39 = v42;
          }
          if (v39 == v41) {
            goto LABEL_45;
          }
        }
      }
      if (v39 == v41)
      {
LABEL_45:
        uint64_t v39 = *(void *)(v36 + (((*((void *)v2 + 19) + v35) >> 5) & 0x7FFFFFFFFFFFFF8))
            + 16 * (*((unsigned char *)v2 + 152) + v35);
      }
      else
      {
        uint64_t v43 = v39;
        int v44 = v38;
        while (1)
        {
          v43 += 16;
          if (v43 - *v44 == 4096)
          {
            uint64_t v45 = v44[1];
            ++v44;
            uint64_t v43 = v45;
          }
          if (v43 == v41) {
            break;
          }
          if (*(double *)(v43 + 8) >= v1)
          {
            *(_OWORD *)uint64_t v39 = *(_OWORD *)v43;
            v39 += 16;
            if (v39 - *v38 == 4096)
            {
              uint64_t v46 = v38[1];
              ++v38;
              uint64_t v39 = v46;
            }
          }
        }
        unint64_t v35 = *((void *)v2 + 18);
        uint64_t v36 = *((void *)v2 + 15);
        uint64_t v37 = *((void *)v2 + 16);
      }
    }
    unint64_t v47 = v35 + *v40;
    int v48 = (char *)(v36 + 8 * (v47 >> 8));
    if (v37 == v36) {
      uint64_t v49 = 0;
    }
    else {
      uint64_t v49 = *(void *)v48 + 16 * v47;
    }
    return (double *)sub_100065154((void *)v2 + 14, (char *)v38, v39, v48, v49);
  }
  return result;
}

void sub_100470E84(uint64_t a1)
{
  sub_1004721F8(a1);
  sub_10047205C((uint64_t *)a1);
  unint64_t v2 = *(void *)(a1 + 240);
  uint64_t v3 = *(void *)(*(void *)(a1 + 216) + 8 * (v2 / 0xAA));
  uint64_t v4 = (double *)(v3 + 24 * (v2 % 0xAA));
  double v5 = v4[1];
  if (*(double *)(a1 + 280) > v5)
  {
    double v6 = *v4;
    int v7 = sub_100472730((void *)a1, *v4, v5);
    if (v7 >= 5) {
      int v8 = 5;
    }
    else {
      int v8 = v7;
    }
    *(_DWORD *)(v3 + 24 * (v2 % 0xAA) + 16) = v8;
    uint64_t v9 = *(void (****)(void, long long *))a1;
    if (v6 > 0.0 && v9 != 0)
    {
      long long v11 = *(_OWORD *)v4;
      uint64_t v14 = *((void *)v4 + 2);
      long long v13 = v11;
      (**v9)(v9, &v13);
      unint64_t v2 = *(void *)(a1 + 240);
    }
    uint64_t v12 = *(void *)(a1 + 248) - 1;
    *(void *)(a1 + 240) = v2 + 1;
    *(void *)(a1 + 248) = v12;
    sub_10041FD7C(a1 + 208, 1);
    sub_100470100(a1);
  }
}

void sub_100470FA8(uint64_t a1, __n128 *a2)
{
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022B3970);
  }
  uint64_t v4 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v5 = a2->n128_u64[0];
    unint64_t v6 = a2->n128_u64[1];
    *(_DWORD *)int buf = 134349312;
    unint64_t v12 = v5;
    __int16 v13 = 2050;
    unint64_t v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "StandPlus,minuteAdded,startTime,%{public}f,endTime,%{public}f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022B3970);
    }
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLStandPlusMinuteEstimator::addMinute(const CLStandPlusMinute &)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  if (*(void *)(a1 + 152) >= 0xF0uLL)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022B3970);
    }
    int v7 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 120) + ((*(void *)(a1 + 144) >> 5) & 0x7FFFFFFFFFFFFF8))
                     + 16 * *(void *)(a1 + 144));
      *(_DWORD *)int buf = 134349056;
      unint64_t v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "StandPlus,maxReached,minutes,startTime,%{public}f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022B3970);
      }
      unint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStandPlusMinuteEstimator::addMinute(const CLStandPlusMinute &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    *(int64x2_t *)(a1 + 144) = vaddq_s64(*(int64x2_t *)(a1 + 144), (int64x2_t)xmmword_101D0A740);
    sub_100096314(a1 + 112, 1);
  }
  sub_1004727B4((void *)(a1 + 112), a2);
  *(__n128 *)(a1 + 264) = *a2;
  sub_100472A6C(a1, (uint64_t)a2);
}

unint64_t sub_100471354(void *a1, void *a2, char *a3, void *a4, char *a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 102 * (a4 - a2)
  }
       - 0x3333333333333333 * ((uint64_t)&a5[-*a4] >> 3)
       + 0x3333333333333333 * ((uint64_t)&a3[-*a2] >> 3);
  unint64_t v7 = a1[4];
  uint64_t v8 = a1[1];
  uint64_t v9 = (char **)(v8 + 8 * (v7 / 0x66));
  if (a1[2] == v8) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = &(*v9)[40 * (v7 % 0x66)];
  }
  if (a3 == v10) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = 102 * ((char **)a2 - v9)
  }
        - 0x3333333333333333 * ((uint64_t)&a3[-*a2] >> 3)
        + 0x3333333333333333 * ((v10 - *v9) >> 3);
  v24[0].n128_u64[0] = v8 + 8 * (v7 / 0x66);
  v24[0].n128_u64[1] = (unint64_t)v10;
  sub_100176BF4(v24, v11);
  if (v6 >= 1)
  {
    __n128 v12 = v24[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_100176BF4(v24, v6);
      sub_100473BB8(v9, v10, (char **)v12.n128_u64[0], (char *)v12.n128_u64[1], v24[0].n128_u64[0], (char *)v24[0].n128_u64[1], v24);
      uint64_t v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
      while ((sub_100473B58((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      sub_100176BF4(v24, v6);
      __n128 v13 = v24[0];
      unint64_t v14 = a1[4] + a1[5];
      uint64_t v15 = a1[1];
      double v16 = (unsigned char **)(v15 + 8 * (v14 / 0x66));
      if (a1[2] == v15) {
        int v17 = 0;
      }
      else {
        int v17 = &(*v16)[40 * (v14 % 0x66)];
      }
      v24[0] = v12;
      sub_100473D78(v13.n128_u64[0], (unsigned char *)v13.n128_u64[1], v16, v17, (uint64_t)v24);
      a1[5] -= v6;
      while ((sub_10017D8E8(a1, 1) & 1) != 0)
        ;
    }
  }
  unint64_t v19 = a1[4];
  uint64_t v20 = a1[1];
  unint64_t v21 = (void *)(v20 + 8 * (v19 / 0x66));
  if (a1[2] == v20) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = *v21 + 40 * (v19 % 0x66);
  }
  v24[0].n128_u64[0] = (unint64_t)v21;
  v24[0].n128_u64[1] = v22;
  sub_100176BF4(v24, v11);
  return v24[0].n128_u64[0];
}

double sub_1004715D8(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = sub_1010BF038(a1 + 8, a2).n128_u64[0];
  return result;
}

void sub_1004715E0(uint64_t a1, uint64_t a2)
{
  double v4 = (double)*(int *)(a1 + 296);
  double v5 = floor(*(double *)a2 + v4) - (double)((int)vcvtmd_s64_f64(*(double *)a2 + v4) % 3600) - v4;
  double v6 = floor(*(double *)a2 + 3600.0 + v4) - (double)((int)vcvtmd_s64_f64(*(double *)a2 + 3600.0 + v4) % 3600) - v4;
  if (vabdd_f64(*(double *)a2, v5) >= vabdd_f64(*(double *)a2, v6)) {
    double v7 = v6;
  }
  else {
    double v7 = v5;
  }
  int v8 = *(_DWORD *)(a2 + 16);
  if (v8 == 2)
  {
    *(double *)int buf = v7 + 3600.0 + -1.0;
    uint64_t v9 = (uint8_t *)(a2 + 8);
    if (*(double *)(a2 + 8) >= *(double *)buf) {
      uint64_t v9 = buf;
    }
  }
  else
  {
    uint64_t v9 = (uint8_t *)(a2 + 8);
  }
  unint64_t v10 = *(char **)v9;
  *(double *)int buf = v7;
  unint64_t v25 = v10;
  int v26 = v8;
  char v27 = *(unsigned char *)(a2 + 20);
  uint64_t v28 = *(void *)(a2 + 24);
  char v29 = 0;
  sub_1004719E4((void *)(a1 + 160), (uint64_t)buf);
  switch(*(_DWORD *)(a2 + 16))
  {
    case 0:
    case 3:
    case 4:
      sub_100471A9C((uint64_t *)a1);
      break;
    case 1:
      sub_10047205C((uint64_t *)a1);
      break;
    case 2:
      sub_1004721F8(a1);
      break;
    default:
      break;
  }
  if (*(void *)(a1 + 200) >= 8uLL)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022B3970);
    }
    unint64_t v11 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "StandPlus,maxReached,sedentaryTimer", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022B3970);
      }
      unint64_t v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStandPlusMinuteEstimator::feedSedentaryTimerAlarm(const CLSedentaryAlarmData &)", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
    unint64_t v12 = *(void *)(a1 + 192);
    uint64_t v13 = *(void *)(a1 + 168);
    unint64_t v14 = (void *)(v13 + 8 * (v12 / 0x66));
    if (*(void *)(a1 + 176) == v13) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = (char *)(*v14 + 40 * (v12 % 0x66));
    }
    uint64_t v16 = *(void *)(a1 + 200);
    *(void *)int buf = v13 + 8 * (v12 / 0x66);
    unint64_t v25 = v15;
    sub_100176BF4(buf, v16);
    uint64_t v17 = (uint64_t)&v25[-**(void **)buf];
    unint64_t v18 = 0xCCCCCCCCCCCCCCCDLL * (v17 >> 3);
    if (v17 < 321)
    {
      unint64_t v22 = 109 - v18;
      uint64_t v20 = (void *)(*(void *)buf - 8 * (v22 / 0x66));
      unint64_t v21 = (char *)(*v20 + 40 * (102 * (v22 / 0x66) - v22) + 4040);
    }
    else
    {
      unint64_t v19 = v18 - 8;
      uint64_t v20 = (void *)(*(void *)buf + 8 * (v19 / 0x66));
      unint64_t v21 = (char *)(*v20 + 40 * (v19 % 0x66));
    }
    sub_100471354((void *)(a1 + 160), v14, v15, v20, v21);
  }
}

__n128 sub_1004719E4(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 102 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100473F00(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x66)) + 40 * (v7 % 0x66);
  __n128 result = *(__n128 *)a2;
  long long v10 = *(_OWORD *)(a2 + 16);
  *(void *)(v8 + 32) = *(void *)(a2 + 32);
  *(__n128 *)unint64_t v8 = result;
  *(_OWORD *)(v8 + 16) = v10;
  ++a1[5];
  return result;
}

void sub_100471A9C(uint64_t *a1)
{
  uint64_t v2 = a1[21];
  if (a1[22] == v2)
  {
    sub_100470928((uint64_t)a1);
    uint64_t v20 = v21;
    unint64_t v8 = 0;
LABEL_20:
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022B3970);
    }
    unint64_t v23 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = a1[21];
      if (a1[22] == v24)
      {
        unint64_t v26 = 0;
        unint64_t v27 = 0;
      }
      else
      {
        unint64_t v25 = a1[24];
        unint64_t v26 = *(void *)(v24 + 8 * (v25 / 0x66)) + 40 * (v25 % 0x66);
        unint64_t v27 = *(void *)(v24 + 8 * ((a1[25] + v25) / 0x66)) + 40 * ((a1[25] + v25) % 0x66);
      }
      *(_DWORD *)int buf = 67109376;
      LODWORD(v46[0]) = v8 == v26;
      WORD2(v46[0]) = 1024;
      *(_DWORD *)((char *)v46 + 6) = v27 != v20;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "StandPlus,no reminder %d,hour earned %d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022B3970);
      }
      uint64_t v34 = a1[21];
      if (a1[22] == v34)
      {
        unint64_t v36 = 0;
        unint64_t v37 = 0;
      }
      else
      {
        unint64_t v35 = a1[24];
        unint64_t v36 = *(void *)(v34 + 8 * (v35 / 0x66)) + 40 * (v35 % 0x66);
        unint64_t v37 = *(void *)(v34 + 8 * ((a1[25] + v35) / 0x66)) + 40 * ((a1[25] + v35) % 0x66);
      }
      int v43 = 67109376;
      *(_DWORD *)int v44 = v8 == v36;
      *(_WORD *)&v44[4] = 1024;
      *(_DWORD *)&v44[6] = v37 != v20;
      uint64_t v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStandPlusMinuteEstimator::checkAndFireReminder()", "%s\n", v38);
      if (v38 != (char *)buf) {
        free(v38);
      }
    }
    return;
  }
  unint64_t v3 = a1[24];
  unint64_t v4 = v3 + a1[25];
  uint64_t v5 = *(void *)(v2 + 8 * (v4 / 0x66));
  uint64_t v6 = (void *)(v2 + 8 * (v4 / 0x66));
  unint64_t v7 = v4 % 0x66;
  unint64_t v8 = v5 + 40 * (v4 % 0x66);
  unint64_t v9 = v3 / 0x66;
  unint64_t v10 = v3 % 0x66;
  unint64_t v11 = *(void *)(v2 + 8 * (v3 / 0x66)) + 40 * (v3 % 0x66);
  if (v8 == v11)
  {
    sub_100470928((uint64_t)a1);
    uint64_t v20 = v22;
    unint64_t v12 = v6;
  }
  else
  {
    unint64_t v12 = (void *)(v2 + 8 * (v4 / 0x66));
    while (1)
    {
      uint64_t v13 = v8;
      if (v8 == v5) {
        uint64_t v13 = *(v12 - 1) + 4080;
      }
      unsigned int v14 = *(_DWORD *)(v13 - 24);
      BOOL v15 = v14 > 4;
      int v16 = (1 << v14) & 0x19;
      if (!v15 && v16 != 0) {
        break;
      }
      if (v8 == v5)
      {
        uint64_t v18 = *--v12;
        uint64_t v5 = v18;
        unint64_t v8 = v18 + 4080;
      }
      v8 -= 40;
      if (v8 == v11)
      {
        unint64_t v8 = v11;
        break;
      }
    }
    sub_100470928((uint64_t)a1);
    uint64_t v20 = v19;
  }
  if (v8 == *(void *)(v2 + 8 * v9) + 40 * v10 || *v6 + 40 * v7 != v20) {
    goto LABEL_20;
  }
  a1[36] = a1[35];
  sub_100903014(a1 + 1);
  uint64_t v28 = v8;
  if (v8 == *v12) {
    uint64_t v28 = *(v12 - 1) + 4080;
  }
  if (!*(unsigned char *)(v28 - 8))
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022B3970);
    }
    char v29 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_INFO))
    {
      uint64_t v30 = v8;
      if (v8 == *v12) {
        uint64_t v30 = *(v12 - 1) + 4080;
      }
      uint64_t v31 = *(void *)(v30 - 32);
      *(_DWORD *)int buf = 134217984;
      v46[0] = v31;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "StandPlus,firing reminder immediately,firedTime,%f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022B3970);
      }
      uint64_t v39 = v8;
      if (v8 == *v12) {
        uint64_t v39 = *(v12 - 1) + 4080;
      }
      uint64_t v40 = *(void *)(v39 - 32);
      int v43 = 134217984;
      *(void *)int v44 = v40;
      uint64_t v41 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStandPlusMinuteEstimator::checkAndFireReminder()", "%s\n", v41);
      if (v41 != (char *)buf) {
        free(v41);
      }
    }
    if (v8 == *v12)
    {
      uint64_t v32 = *(v12 - 1);
      *(unsigned char *)(v32 + 4072) = 1;
      unint64_t v8 = v32 + 4080;
    }
    else
    {
      *(unsigned char *)(v8 - 8) = 1;
    }
    long long v33 = *(_OWORD *)(v8 - 24);
    v42[0] = *(_OWORD *)(v8 - 40);
    v42[1] = v33;
    sub_100472840(a1, (uint64_t *)v42);
  }
}

uint64_t *sub_10047205C(uint64_t *result)
{
  double v1 = *((double *)result + 32);
  if (*((double *)result + 35) > v1 + 3600.0)
  {
    uint64_t v2 = result;
    uint64_t v3 = result[21];
    if (result[22] != v3)
    {
      unint64_t v4 = result[24];
      unint64_t v5 = v4 + result[25];
      uint64_t v6 = (unint64_t *)(v3 + 8 * (v5 / 0x66));
      unint64_t v7 = *v6;
      unint64_t v8 = *v6 + 40 * (v5 % 0x66);
      unint64_t v9 = v4 / 0x66;
      uint64_t v10 = *(void *)(v3 + 8 * (v4 / 0x66));
      unint64_t v11 = v4 % 0x66;
      unint64_t v12 = v10 + 40 * v11;
      if (v8 == v12)
      {
        unint64_t v7 = v8;
      }
      else
      {
        uint64_t v13 = v6;
        do
        {
          if (v8 == v7)
          {
            unint64_t v15 = *--v13;
            unint64_t v14 = v15;
            if (*(_DWORD *)(v15 + 4056) == 1) {
              goto LABEL_13;
            }
            unint64_t v8 = v14 + 4080;
            uint64_t v6 = v13;
          }
          else
          {
            unint64_t v14 = v7;
            unint64_t v7 = v8;
            if (*(_DWORD *)(v8 - 24) == 1) {
              goto LABEL_13;
            }
          }
          v8 -= 40;
          unint64_t v7 = v14;
        }
        while (v8 != v12);
        unint64_t v7 = v12;
      }
LABEL_13:
      if (v7 != *(void *)(v3 + 8 * v9) + 40 * v11)
      {
        __n128 result = (uint64_t *)sub_100472730(result, *((double *)result + 32), v1 + 3600.0);
        if (v7 == *v6)
        {
          uint64_t v17 = *(v6 - 1);
          BOOL v18 = *(double *)(v17 + 4040) == v1 && result == 0;
          if (v18 && !*(unsigned char *)(v17 + 4072))
          {
            *(unsigned char *)(v17 + 4072) = 1;
            unint64_t v7 = v17 + 4080;
            goto LABEL_29;
          }
        }
        else
        {
          BOOL v16 = *(double *)(v7 - 40) == v1 && result == 0;
          if (v16 && !*(unsigned char *)(v7 - 8))
          {
            *(unsigned char *)(v7 - 8) = 1;
LABEL_29:
            long long v19 = *(_OWORD *)(v7 - 24);
            v20[0] = *(_OWORD *)(v7 - 40);
            v20[1] = v19;
            return sub_100472840(v2, (uint64_t *)v20);
          }
        }
      }
    }
  }
  return result;
}

void sub_1004721F8(uint64_t a1)
{
  sub_100470928(a1);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(a1 + 168);
  if (*(void *)(a1 + 176) == v4)
  {
    unint64_t v6 = 0;
  }
  else
  {
    unint64_t v5 = *(void *)(a1 + 200) + *(void *)(a1 + 192);
    unint64_t v6 = *(void *)(v4 + 8 * (v5 / 0x66)) + 40 * (v5 % 0x66);
  }
  if (v6 == v2)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022B3970);
    }
    unint64_t v12 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "StandPlus,no hour earned", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022B3970);
      }
      LOWORD(v23) = 0;
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStandPlusMinuteEstimator::checkAndFireReset()", "%s\n", v13);
      if (v13 != buf) {
        free(v13);
      }
    }
  }
  else
  {
    if (*(double *)(a1 + 280) > *(double *)(v2 + 8) && !*(void *)(a1 + 152))
    {
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022B3970);
      }
      unint64_t v7 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
      {
        double v8 = *(double *)v3;
        uint64_t v9 = *(void *)(v3 + 8);
        *(_DWORD *)int buf = 134349312;
        *(double *)&uint8_t buf[4] = v8;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(void *)&buf[14] = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "StandPlus,empty minute buffer,forcing minute from early stand hour,startTime,%{public}f,firedTime,%{public}f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_1022B3970);
        }
        double v19 = *(double *)v3;
        uint64_t v20 = *(void *)(v3 + 8);
        int v23 = 134349312;
        double v24 = v19;
        __int16 v25 = 2050;
        uint64_t v26 = v20;
        uint64_t v21 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLStandPlusMinuteEstimator::checkAndFireReset()", "%s\n", v21);
        if (v21 != buf) {
          free(v21);
        }
      }
      double v11 = *(double *)v3;
      double v10 = *(double *)(v3 + 8);
      if (vabdd_f64(v10, *(double *)v3) >= 60.0)
      {
        *(double *)int buf = v10 + -60.0;
        *(double *)&uint8_t buf[8] = v10;
      }
      else
      {
        *(void *)int buf = *(void *)v3;
        *(double *)&uint8_t buf[8] = v11 + 60.0;
      }
      sub_1004727B4((void *)(a1 + 112), (__n128 *)buf);
      sub_100903014((void *)(a1 + 8));
    }
    if (!*(unsigned char *)(v3 + 32))
    {
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022B3970);
      }
      unint64_t v14 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_INFO))
      {
        uint64_t v15 = *(void *)(v3 + 8);
        *(_DWORD *)int buf = 134217984;
        *(void *)&uint8_t buf[4] = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "StandPlus,firing stand hour immediately,firedTime,%f", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_1022B3970);
        }
        double v17 = *(double *)(v3 + 8);
        int v23 = 134217984;
        double v24 = v17;
        BOOL v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLStandPlusMinuteEstimator::checkAndFireReset()", "%s\n", v18);
        if (v18 != buf) {
          free(v18);
        }
      }
      *(unsigned char *)(v3 + 32) = 1;
      long long v16 = *(_OWORD *)(v3 + 16);
      v22[0] = *(_OWORD *)v3;
      v22[1] = v16;
      sub_100472840((uint64_t *)a1, (uint64_t *)v22);
    }
  }
}

uint64_t sub_100472730(void *a1, double a2, double a3)
{
  uint64_t v3 = a1[15];
  if (a1[16] == v3) {
    return 0;
  }
  unint64_t v4 = a1[18];
  unint64_t v5 = (uint64_t *)(v3 + 8 * (v4 >> 8));
  uint64_t v6 = *v5;
  uint64_t v7 = *v5 + 16 * v4;
  uint64_t v8 = *(void *)(v3 + (((a1[19] + v4) >> 5) & 0x7FFFFFFFFFFFFF8))
     + 16 * (*((unsigned char *)a1 + 152) + v4);
  if (v7 == v8) {
    return 0;
  }
  LODWORD(result) = 0;
  do
  {
    double v10 = *(double *)(v7 + 8);
    BOOL v11 = v10 >= a2;
    if (v10 >= a3) {
      BOOL v11 = 0;
    }
    v7 += 16;
    if (v7 - v6 == 4096)
    {
      uint64_t v12 = v5[1];
      ++v5;
      uint64_t v6 = v12;
      uint64_t v7 = v12;
    }
    uint64_t result = (result + v11);
  }
  while (v7 != v8);
  return result;
}

__n128 sub_1004727B4(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1004743A4(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

uint64_t *sub_100472840(uint64_t *result, uint64_t *a2)
{
  if (*result)
  {
    uint64_t v3 = result;
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022B3970);
    }
    uint64_t v4 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *a2;
      uint64_t v6 = a2[1];
      int v7 = *((_DWORD *)a2 + 4);
      *(_DWORD *)int buf = 134349568;
      uint64_t v22 = v5;
      __int16 v23 = 2050;
      uint64_t v24 = v6;
      __int16 v25 = 1026;
      int v26 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "StandPlus,enforced alarm,startTime,%{public}f,firedTime,%{public}f,type,%{public}d", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022B3970);
      }
      uint64_t v10 = *a2;
      uint64_t v11 = a2[1];
      int v12 = *((_DWORD *)a2 + 4);
      int v15 = 134349568;
      uint64_t v16 = v10;
      __int16 v17 = 2050;
      uint64_t v18 = v11;
      __int16 v19 = 1026;
      int v20 = v12;
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStandPlusMinuteEstimator::sendAlarm(const CLSedentaryAlarmData) const", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    uint64_t v8 = *v3;
    long long v9 = *((_OWORD *)a2 + 1);
    v14[0] = *(_OWORD *)a2;
    v14[1] = v9;
    return (uint64_t *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)v8 + 8))(v8, v14);
  }
  return result;
}

void sub_100472A6C(uint64_t a1, uint64_t a2)
{
  sub_100470928(a1);
  unint64_t v5 = (unint64_t)v4;
  uint64_t v6 = *(void *)(a1 + 168);
  if (*(void *)(a1 + 176) == v6)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = *(void *)(a1 + 200) + *(void *)(a1 + 192);
    unint64_t v8 = *(void *)(v6 + 8 * (v7 / 0x66)) + 40 * (v7 % 0x66);
  }
  if ((double *)v8 == v4)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022B3970);
    }
    uint64_t v22 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = *(void *)(a2 + 8);
      *(_DWORD *)int buf = 134349056;
      *(void *)&uint8_t buf[4] = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "StandPlus,forcing reset from early stand minute,endTime,%{public}f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022B3970);
      }
      uint64_t v34 = *(void *)(a2 + 8);
      int v40 = 134349056;
      uint64_t v41 = v34;
      unint64_t v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStandPlusMinuteEstimator::checkAndFireResetWithMinute(const CLStandPlusMinute &)", "%s\n", v35);
      if (v35 != buf) {
        free(v35);
      }
    }
    double v24 = *(double *)(a2 + 8);
    *(double *)int buf = floor(v24 + (double)*(int *)(a1 + 296))
                   - (double)((int)vcvtmd_s64_f64(v24 + (double)*(int *)(a1 + 296)) % 3600)
                   - (double)*(int *)(a1 + 296);
    *(void *)&uint8_t buf[8] = floor(v24);
    *(_DWORD *)&uint8_t buf[16] = 2;
    buf[20] = 1;
    uint64_t v45 = 0;
    char v46 = 0;
    sub_1004719E4((void *)(a1 + 160), (uint64_t)buf);
    unint64_t v25 = *(void *)(a1 + 192) + *(void *)(a1 + 200);
    uint64_t v26 = *(void *)(a1 + 168);
    unint64_t v27 = (uint64_t *)(v26 + 8 * (v25 / 0x66));
    uint64_t v28 = *v27;
    unint64_t v29 = *v27 + 40 * (v25 % 0x66);
    if (*(void *)(a1 + 176) == v26) {
      unint64_t v29 = 0;
    }
    uint64_t v30 = v29 - v28;
    unint64_t v31 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v29 - v28) >> 3);
    if (v30 < 41) {
      unint64_t v5 = v27[-((102 - v31) / 0x66)] + 40 * (102 * ((102 - v31) / 0x66) - (102 - v31)) + 4040;
    }
    else {
      unint64_t v5 = v27[(v31 - 1) / 0x66] + 40 * ((v31 - 1) % 0x66);
    }
  }
  else
  {
    double v9 = *v4 + 60.0;
    if (v4[1] >= v9) {
      double v9 = v4[1];
    }
    if (v9 < floor(*(double *)(*(void *)(*(void *)(a1 + 120) + ((*(void *)(a1 + 144) >> 5) & 0x7FFFFFFFFFFFFF8))
                              + 16 * *(void *)(a1 + 144)
                              + 8)))
    {
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022B3970);
      }
      uint64_t v10 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(v5 + 8);
        uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 120) + ((*(void *)(a1 + 144) >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * *(void *)(a1 + 144)
                        + 8);
        *(_DWORD *)int buf = 134349312;
        *(void *)&uint8_t buf[4] = v11;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(void *)&buf[14] = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "StandPlus,forcing minute from early stand hour,%{public}f,endTime,%{public}f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_1022B3970);
        }
        uint64_t v36 = *(void *)(v5 + 8);
        uint64_t v37 = *(void *)(*(void *)(*(void *)(a1 + 120) + ((*(void *)(a1 + 144) >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * *(void *)(a1 + 144)
                        + 8);
        int v40 = 134349312;
        uint64_t v41 = v36;
        __int16 v42 = 2050;
        uint64_t v43 = v37;
        uint64_t v38 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLStandPlusMinuteEstimator::checkAndFireResetWithMinute(const CLStandPlusMinute &)", "%s\n", v38);
        if (v38 != buf) {
          free(v38);
        }
      }
      double v13 = *(double *)(v5 + 8);
      unint64_t v14 = *(void *)(a1 + 144);
      uint64_t v15 = *(void *)(*(void *)(a1 + 120) + ((v14 >> 5) & 0x7FFFFFFFFFFFFF8));
      uint64_t v16 = v15 + 16 * v14;
      double v18 = *(double *)(v16 + 8);
      __int16 v17 = (double *)(v16 + 8);
      if (vabdd_f64(v13, v18) >= 60.0)
      {
        double v32 = *(double *)v5;
        if (vabdd_f64(v13, *(double *)v5) >= 60.0)
        {
          *(double *)int buf = v13 + -60.0;
          *(double *)&uint8_t buf[8] = v13;
        }
        else
        {
          *(void *)int buf = *(void *)v5;
          *(double *)&uint8_t buf[8] = v32 + 60.0;
        }
        sub_100473070(a1 + 112, buf);
      }
      else
      {
        double v19 = v13 + -60.0;
        double v20 = *(double *)v5;
        if (*(double *)v5 >= v19) {
          double v19 = *(double *)v5;
        }
        *(double *)(v15 + 16 * *(void *)(a1 + 144)) = v19;
        double v21 = v20 + 60.0;
        if (v20 + 60.0 < *(double *)(v5 + 8)) {
          double v21 = *(double *)(v5 + 8);
        }
        *__int16 v17 = v21;
      }
    }
  }
  if (!*(unsigned char *)(v5 + 32))
  {
    *(unsigned char *)(v5 + 32) = 1;
    long long v33 = *(_OWORD *)(v5 + 16);
    v39[0] = *(_OWORD *)v5;
    v39[1] = v33;
    sub_100472840((uint64_t *)a1, (uint64_t *)v39);
  }
}

int64x2_t sub_100473070(uint64_t a1, _OWORD *a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    sub_1004746BC((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (void *)(v5 + 8 * (v4 >> 8));
  uint64_t v7 = *v6 + 16 * v4;
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v7 = 0;
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4096;
  }
  *(_OWORD *)(v7 - 16) = *a2;
  int64x2_t result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_101D1F270);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

uint64_t sub_1004730F0(uint64_t a1, unint64_t a2, long long *a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if (a2) {
    sub_100473140((void *)a1, a2, a3);
  }
  return a1;
}

void sub_10047312C(_Unwind_Exception *a1)
{
  sub_1000D7EB4(v1);
  _Unwind_Resume(a1);
}

void *sub_100473140(void *a1, unint64_t a2, long long *a3)
{
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  if (v7 == v6) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = 170 * ((v7 - v6) >> 3) - 1;
  }
  unint64_t v9 = a1[5] + a1[4];
  unint64_t v10 = v8 - v9;
  BOOL v11 = a2 > v10;
  unint64_t v12 = a2 - v10;
  if (v11)
  {
    sub_100473294(a1, v12);
    uint64_t v6 = a1[1];
    uint64_t v7 = a1[2];
    unint64_t v9 = a1[4] + a1[5];
  }
  double v13 = (void *)(v6 + 8 * (v9 / 0xAA));
  if (v7 == v6) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = *v13 + 24 * (v9 % 0xAA);
  }
  uint64_t v22 = (void *)(v6 + 8 * (v9 / 0xAA));
  unint64_t v23 = v14;
  int64x2_t result = sub_1000D9CF8(&v22, a2);
  uint64_t v16 = v23;
  if (v14 != v23)
  {
    __int16 v17 = v22;
    do
    {
      if (v13 == v17) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = *v13 + 4080;
      }
      if (v14 == v18)
      {
        uint64_t v18 = v14;
      }
      else
      {
        unint64_t v19 = v14;
        do
        {
          long long v20 = *a3;
          *(void *)(v19 + 16) = *((void *)a3 + 2);
          *(_OWORD *)unint64_t v19 = v20;
          v19 += 24;
        }
        while (v19 != v18);
      }
      a1[5] -= 0x5555555555555555 * ((uint64_t)(v18 - v14) >> 3);
      if (v13 == v17) {
        break;
      }
      unint64_t v21 = v13[1];
      ++v13;
      unint64_t v14 = v21;
    }
    while (v21 != v16);
  }
  return result;
}

void sub_100473294(void *a1, unint64_t a2)
{
  uint64_t v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if (v5 % 0xAA) {
    unint64_t v6 = v5 / 0xAA + 1;
  }
  else {
    unint64_t v6 = v5 / 0xAA;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 / 0xAA) {
    unint64_t v8 = v7 / 0xAA;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 / 0xAA)
  {
    for (a1[4] = v7 - 170 * v8; v8; --v8)
    {
      uint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      __int16 v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          unint64_t v29 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v28);
          unint64_t v31 = &v29[8 * (v28 >> 2)];
          double v32 = (uint64_t *)a1[1];
          uint64_t v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            uint64_t v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            unint64_t v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)unint64_t v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          uint64_t v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            uint64_t v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          unint64_t v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            uint64_t v3 = (char *)a1[1];
          }
          unint64_t v27 = &v3[-8 * (v24 >> 1)];
          uint64_t v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)uint64_t v3 = v18;
      uint64_t v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0xFF0uLL);
          sub_10017F0B4(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0xFF0uLL);
          sub_1002D02D8((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8) {
            uint64_t v64 = 169;
          }
          else {
            uint64_t v64 = 170;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }
      a1[4] = v65 - 170 * v8;
      if (v8)
      {
        int v66 = (char *)a1[2];
        do
        {
          double v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          uint64_t v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1) {
                unint64_t v78 = 1;
              }
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              BOOL v79 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v78);
              int v81 = &v79[8 * (v78 >> 2)];
              int v82 = (uint64_t *)a1[1];
              int v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                int v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v84 = 8 * (v83 >> 3);
                uint64_t v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)uint64_t v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              int v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                int v66 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              BOOL v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                int v66 = (char *)a1[1];
              }
              BOOL v77 = &v66[-8 * (v74 >> 1)];
              int v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(void *)int v66 = v69;
          int v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      int v91 = a1 + 3;
      if (v13) {
        uint64_t v15 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v13);
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v38 = -170 * v8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&long long v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        int v88 = operator new(0xFF0uLL);
        sub_1000DA434(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        uint64_t v39 = (void *)a1[1];
        int v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              uint64_t v49 = (char *)sub_1000DA54C((uint64_t)v91, v48);
              unint64_t v51 = (uint64_t *)__p[1];
              int v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                int v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                int v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)int v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              int v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&long long v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                int v40 = (char *)v90;
              }
            }
            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              uint64_t v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                int v40 = (char *)__p[1];
              }
              unint64_t v47 = &v40[-8 * (v44 >> 1)];
              int v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&long long v90 = &v45[v46];
            }
          }
          *(void *)int v40 = *v39;
          int v40 = (char *)(v90 + 8);
          *(void *)&long long v90 = v90 + 8;
          uint64_t v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      BOOL v57 = (void *)a1[2];
      uint64_t v58 = -7 - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1002D03F8((uint64_t)__p, v57);
      }
      uint64_t v59 = (char *)*a1;
      long long v60 = *(_OWORD *)__p;
      long long v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      long long v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      long long v90 = v62;
      a1[4] += v38;
      if (v57 != (void *)v62) {
        *(void *)&long long v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }
}

void sub_1004737D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100473844(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100473874(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void ***)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v6 = v5 - (void)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v4 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v4;
      unint64_t v6 = v7 - (void)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    uint64_t v8 = 85;
    goto LABEL_7;
  }
  if (v6 >> 3 == 2)
  {
    uint64_t v8 = 170;
LABEL_7:
    *(void *)(a1 + 32) = v8;
  }
  sub_100473918((void **)a1);
  uint64_t result = sub_100473AE8(a1, a2);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100473918(void **a1)
{
  if (a1[5])
  {
    sub_10041FD7C((uint64_t)a1, 0);
    sub_10047399C(a1, 0);
  }
  else
  {
    uint64_t v3 = a1[1];
    for (uint64_t i = (uint64_t)a1[2]; (void *)i != v3; a1[2] = (void *)i)
    {
      operator delete(*(void **)(i - 8));
      uint64_t v3 = a1[1];
      uint64_t i = (uint64_t)a1[2] - 8;
    }
    a1[4] = 0;
  }

  sub_100473A14(a1);
}

uint64_t sub_10047399C(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 170 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0xAA) {
    a2 = 1;
  }
  if (v5 < 0x154) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void sub_100473A14(void **a1)
{
  uint64_t v3 = a1[3];
  uint64_t v2 = (uint64_t)(a1 + 3);
  uint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 >= (v3 - (unsigned char *)*a1) >> 3) {
    return;
  }
  if (v5 == v4)
  {
    uint64_t v10 = 0;
    int v7 = 0;
    goto LABEL_8;
  }
  int v7 = (char *)sub_1000DA54C(v2, v6);
  uint64_t v8 = a1[1];
  unint64_t v5 = a1[2];
  uint64_t v10 = &v7[8 * v9];
  uint64_t v11 = v5 - v8;
  if (v5 == v8)
  {
LABEL_8:
    unint64_t v14 = v5;
    goto LABEL_9;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 8 * (v11 >> 3);
  do
  {
    *(void *)&v7[v12] = *(void *)&v8[v12];
    v12 += 8;
  }
  while (v13 != v12);
  unint64_t v5 = a1[1];
  unint64_t v14 = a1[2];
LABEL_9:
  int64_t v15 = v14 - v5;
  uint64_t v16 = *a1;
  *a1 = v7;
  a1[1] = v7;
  a1[2] = &v7[v15];
  a1[3] = v10;
  if (v16)
  {
    operator delete(v16);
  }
}

uint64_t sub_100473AE8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 != v5) {
    *(void *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  sub_100473A14((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

uint64_t sub_100473B58(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x66) {
    a2 = 1;
  }
  if (v2 < 0xCC) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 102;
  }
  return v4 ^ 1u;
}

__n128 sub_100473BB8@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v19 = a2;
    uint64_t v18 = a4;
    int64_t v15 = a5;
    uint64_t v16 = a6;
  }
  else
  {
    uint64_t v13 = a3 - 1;
    uint64_t v12 = *a3;
    unint64_t v14 = a4;
    int64_t v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_100473C88(v12, v14, v15, v16, &v21);
      uint64_t v16 = (char *)v22.n128_u64[1];
      int64_t v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      __int16 v17 = *v13--;
      uint64_t v12 = v17;
      unint64_t v14 = v17 + 4080;
    }
    uint64_t v18 = *a1 + 4080;
    uint64_t v19 = a2;
  }
  sub_100473C88(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_100473C88@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  unint64_t v6 = a3;
  if (a1 == a2)
  {
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = *a3;
    uint64_t v11 = a2;
    while (1)
    {
      int64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&a4[-v10] >> 3);
      if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v11 - a1) >> 3)) < v12) {
        int64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - a1) >> 3);
      }
      v11 -= 40 * v12;
      a4 -= 40 * v12;
      if (v12) {
        __n128 result = memmove(a4, v11, 40 * v12 - 7);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v10 = v14;
      a4 = (char *)(v14 + 4080);
    }
    if ((char *)(*v6 + 4080) == a4)
    {
      int64_t v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_100473D78(void *a1, unsigned char *a2, unsigned char **a3, unsigned char *a4, uint64_t a5)
{
  int v7 = *(void ***)a5;
  uint64_t v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (uint64_t i = (unsigned char *)(*a1 + 4080); ; uint64_t i = v12 + 4080)
    {
      sub_100473E0C(a2, v8, i, v7, &v14);
      uint64_t v8 = (char *)*((void *)&v15 + 1);
      int v7 = (void **)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v8;
      if (v10 == a3) {
        break;
      }
      int64_t v12 = (unsigned char *)*v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_100473E0C(a2, v8, a4, v7, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_100473E0C@<X0>(unsigned char *__src@<X1>, char *__dst@<X4>, unsigned char *a3@<X2>, void **a4@<X3>, void *a5@<X8>)
{
  unint64_t v6 = a4;
  int v7 = __src;
  if (__src == a3)
  {
    uint64_t v9 = __src;
  }
  else
  {
    uint64_t v9 = a3;
    unint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      int64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - __dst + 4080) >> 3);
      unint64_t v12 = (uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 3)) >= v11 ? v11 : 0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 3);
      if (v12) {
        double result = memmove(__dst, v7, 40 * v12 - 7);
      }
      v7 += 40 * v12;
      if (v7 == v9) {
        break;
      }
      uint64_t v14 = (char *)*v6++;
      uint64_t v10 = v14;
      __uuid_t dst = v14;
    }
    __dst += 40 * v12;
    if ((char *)*(v6 - 1) + 4080 == __dst) {
      __uuid_t dst = (char *)*v6;
    }
    else {
      --v6;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

void sub_100473F00(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x66;
  unint64_t v4 = v2 - 102;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    unint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    int v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      unint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  int v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0xFF0uLL);
  sub_1000DA434(&v54, &v53);
  unint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1004741CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 sub_100474218@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v19 = a2;
    uint64_t v18 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
  }
  else
  {
    uint64_t v13 = a3 - 1;
    uint64_t v12 = *a3;
    BOOL v14 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_1004742E8(v12, v14, v15, v16, &v21);
      uint64_t v16 = (char *)v22.n128_u64[1];
      uint64_t v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      uint64_t v17 = *v13--;
      uint64_t v12 = v17;
      BOOL v14 = v17 + 4096;
    }
    uint64_t v18 = *a1 + 4096;
    uint64_t v19 = a2;
  }
  sub_1004742E8(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_1004742E8@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  unint64_t v6 = a3;
  if (a1 == a2)
  {
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = *a3;
    uint64_t v11 = a2;
    while (1)
    {
      uint64_t v12 = (uint64_t)&a4[-v10];
      if ((v11 - a1) >> 4 >= v12 >> 4) {
        uint64_t v13 = v12 >> 4;
      }
      else {
        uint64_t v13 = (v11 - a1) >> 4;
      }
      v11 -= 16 * v13;
      a4 -= 16 * v13;
      if (v13) {
        __n128 result = memmove(a4, v11, 16 * v13);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v15 = *--v6;
      uint64_t v10 = v15;
      a4 = (char *)(v15 + 4096);
    }
    if ((char *)(*v6 + 4096) == a4)
    {
      uint64_t v16 = (char *)v6[1];
      ++v6;
      a4 = v16;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

void sub_1004743A4(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    unint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    int v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      unint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  int v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  sub_1000DA434(&v54, &v53);
  unint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100474670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1004746BC(void **a1)
{
  unint64_t v2 = a1[1];
  BOOL v3 = a1[2];
  unint64_t v4 = v3 - v2;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 32 * (v3 - v2) - 1;
  }
  unint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x100)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    uint64_t v8 = a1[3];
    uint64_t v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      unint64_t v46 = a1 + 3;
      long long __p = sub_1000DA54C(v7, v11);
      uint64_t v43 = (char *)__p;
      uint64_t v44 = (char *)__p;
      uint64_t v45 = (char *)__p + 8 * v12;
      int64_t v41 = operator new(0x1000uLL);
      sub_1000DA434(&__p, &v41);
      uint64_t v13 = (char *)a1[1];
      BOOL v14 = v44;
      if (v13 == a1[2])
      {
        unint64_t v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              uint64_t v24 = (char *)sub_1000DA54C((uint64_t)v46, v23);
              uint64_t v26 = v43;
              BOOL v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                BOOL v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                unint64_t v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)unint64_t v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              long long v31 = __p;
              long long __p = v24;
              uint64_t v43 = &v24[8 * (v23 >> 2)];
              uint64_t v44 = v14;
              uint64_t v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                BOOL v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              int64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                BOOL v14 = v43;
              }
              unint64_t v22 = &v14[-8 * (v19 >> 1)];
              BOOL v14 = &v20[v21];
              uint64_t v43 = v22;
              uint64_t v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)BOOL v14 = v32;
          BOOL v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        unint64_t v33 = (char *)a1[1];
      }
      uint64_t v36 = *a1;
      uint64_t v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      long long __p = v36;
      uint64_t v43 = v33;
      uint64_t v38 = (char *)a1[3];
      uint64_t v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      uint64_t v44 = v13;
      uint64_t v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 128;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 256;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        uint64_t v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        long long __p = operator new(0x1000uLL);
        sub_10017F0B4(a1, &__p);
        uint64_t v34 = a1[2];
        long long __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        long long __p = operator new(0x1000uLL);
      }
      sub_1002D02D8((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 128;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 256;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 256;
    long long __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    sub_1002D02D8((uint64_t)a1, &__p);
  }
}

void sub_100474984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1004749D0(uint64_t result, int a2, int a3, double a4)
{
  *(_DWORD *)__n128 result = a2;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = a2;
  *(_DWORD *)(result + 20) = a3;
  *(double *)(result + 24) = a4;
  return result;
}

BOOL sub_1004749E4(uint64_t a1, double a2)
{
  sub_100474A3C((double *)a1, a2);
  int v4 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 == *(_DWORD *)(a1 + 16)) {
    *(double *)(a1 + 8) = a2;
  }
  if (v4 >= 1) {
    *(_DWORD *)a1 = v4 - 1;
  }
  return v4 > 0;
}

uint64_t sub_100474A3C(double *a1, double a2)
{
  double v3 = a1[1];
  double v4 = vabdd_f64(a2, v3);
  double v5 = a1[3];
  if (v4 < v5) {
    return *(unsigned int *)a1;
  }
  uint64_t result = *((unsigned int *)a1 + 4);
  if (v4 >= v5 * (double)(int)result)
  {
    *(_DWORD *)a1 = result;
  }
  else
  {
    int v7 = vcvtmd_s64_f64(v4 / v5);
    int v8 = *(_DWORD *)a1 + *((_DWORD *)a1 + 5) * v7;
    if (v8 >= (int)result) {
      uint64_t result = result;
    }
    else {
      uint64_t result = v8;
    }
    *(_DWORD *)a1 = result;
    a2 = v3 + (double)v7 * v5;
  }
  a1[1] = a2;
  return result;
}

BOOL sub_100474AA8(double *a1, double a2)
{
  return *(_DWORD *)a1 > 0;
}

BOOL sub_100474AD8(uint64_t a1, double a2)
{
  return vabdd_f64(a2, *(double *)(a1 + 8)) > *(double *)(a1 + 24) * (double)*(int *)(a1 + 16);
}

uint64_t sub_100474DF8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (2)
    {
      if (!*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error))
      {
        char v4 = 0;
        unsigned int v5 = 0;
        unint64_t v6 = 0;
        while (1)
        {
          uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v8 = v7 + 1;
          if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
          v6 |= (unint64_t)(v9 & 0x7F) << v4;
          if ((v9 & 0x80) == 0) {
            goto LABEL_11;
          }
          v4 += 7;
          BOOL v10 = v5++ >= 9;
          if (v10)
          {
            unint64_t v6 = 0;
            uint64_t v11 = OBJC_IVAR___PBDataReader__error;
            int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
            goto LABEL_13;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
        uint64_t v11 = OBJC_IVAR___PBDataReader__error;
        int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          unint64_t v6 = 0;
        }
LABEL_13:
        if (v12) {
          BOOL v13 = 1;
        }
        else {
          BOOL v13 = (v6 & 7) == 4;
        }
        if (!v13)
        {
          switch((v6 >> 3))
          {
            case 1u:
              char v14 = 0;
              unsigned int v15 = 0;
              uint64_t v16 = 0;
              break;
            case 2u:
              unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                int v22 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
                *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 4;
              }
              else
              {
                *(unsigned char *)(a2 + v11) = 1;
                int v22 = 0;
              }
              uint64_t v30 = 16;
              goto LABEL_71;
            case 3u:
              unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v23 <= 0xFFFFFFFFFFFFFFFBLL && v23 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                int v22 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
                *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 4;
              }
              else
              {
                *(unsigned char *)(a2 + v11) = 1;
                int v22 = 0;
              }
              uint64_t v30 = 40;
              goto LABEL_71;
            case 4u:
              unint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v24 <= 0xFFFFFFFFFFFFFFFBLL && v24 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                int v22 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
                *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 4;
              }
              else
              {
                *(unsigned char *)(a2 + v11) = 1;
                int v22 = 0;
              }
              uint64_t v30 = 36;
              goto LABEL_71;
            case 5u:
              unint64_t v25 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v25 <= 0xFFFFFFFFFFFFFFFBLL && v25 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                int v22 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
                *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 4;
              }
              else
              {
                *(unsigned char *)(a2 + v11) = 1;
                int v22 = 0;
              }
              uint64_t v30 = 8;
              goto LABEL_71;
            case 6u:
              unint64_t v26 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v26 <= 0xFFFFFFFFFFFFFFFBLL && v26 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                int v22 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
                *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26 + 4;
              }
              else
              {
                *(unsigned char *)(a2 + v11) = 1;
                int v22 = 0;
              }
              uint64_t v30 = 24;
              goto LABEL_71;
            case 7u:
              unint64_t v27 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                int v22 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
                *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27 + 4;
              }
              else
              {
                *(unsigned char *)(a2 + v11) = 1;
                int v22 = 0;
              }
              uint64_t v30 = 20;
              goto LABEL_71;
            case 8u:
              unint64_t v28 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                int v22 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
                *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 4;
              }
              else
              {
                *(unsigned char *)(a2 + v11) = 1;
                int v22 = 0;
              }
              uint64_t v30 = 28;
              goto LABEL_71;
            case 9u:
              unint64_t v29 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v29 <= 0xFFFFFFFFFFFFFFFBLL && v29 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                int v22 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
                *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 4;
              }
              else
              {
                *(unsigned char *)(a2 + v11) = 1;
                int v22 = 0;
              }
              uint64_t v30 = 32;
LABEL_71:
              *(_DWORD *)(a1 + v30) = v22;
              goto LABEL_72;
            default:
              uint64_t result = PBReaderSkipValueWithTag();
              if (!result) {
                return result;
              }
LABEL_72:
              if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
                return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
              }
              continue;
          }
          while (1)
          {
            uint64_t v17 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v18 = v17 + 1;
            if (v17 == -1 || v18 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v19 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18;
            v16 |= (unint64_t)(v19 & 0x7F) << v14;
            if ((v19 & 0x80) == 0) {
              goto LABEL_52;
            }
            v14 += 7;
            BOOL v10 = v15++ >= 9;
            if (v10)
            {
              LODWORD(v16) = 0;
              goto LABEL_54;
            }
          }
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_52:
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v16) = 0;
          }
LABEL_54:
          *(_DWORD *)(a1 + 12) = v16;
          goto LABEL_72;
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_100475B50(uint64_t a1, int a2, char a3, char a4)
{
  uint64_t result = sub_100538CA8(a1, a2);
  *(void *)uint64_t result = off_1022B39A0;
  *(unsigned char *)(result + 200) = a3;
  *(unsigned char *)(result + 201) = a4;
  *(unsigned char *)(result + 202) = 0;
  *(void *)(result + 208) = 0;
  *(void *)(result + 216) = 0;
  return result;
}

uint64_t sub_100475BA4(void *a1)
{
  *a1 = off_1022B39A0;
  sub_100475ED0((uint64_t)a1);
  unint64_t v2 = (std::__shared_weak_count *)a1[27];
  if (v2) {
    sub_1000DB0A0(v2);
  }

  return sub_1005395A0((uint64_t)a1);
}

void sub_100475C0C(void *a1)
{
  sub_100475BA4(a1);

  operator delete();
}

void sub_100475C44(uint64_t a1)
{
  sub_100475E28(a1, (double *)(a1 + 40));
  if (*(unsigned char *)(a1 + 201))
  {
    BOOL v2 = sub_10113938C(*(void *)(a1 + 208), 0);
    *(unsigned char *)(a1 + 202) = v2;
    if (v2)
    {
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022B39F8);
      }
      double v3 = qword_102419088;
      if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v4 = sub_100A291D0(*(void *)(a1 + 208));
        *(_DWORD *)int buf = 134349056;
        uint64_t v7 = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Fast path has been initialized,serviceRef,%{public}p", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419080 != -1) {
          dispatch_once(&qword_102419080, &stru_1022B39F8);
        }
        sub_100A291D0(*(void *)(a1 + 208));
        unsigned int v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusionServiceSPU::start()", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
      }
    }
  }
}

void sub_100475E28(uint64_t a1, double *a2)
{
  uint64_t v4 = *(void *)(a1 + 208);
  if (!v4)
  {
    int v5 = *(unsigned __int8 *)(a1 + 200);
    unint64_t v6 = (uint64_t *)sub_100A26784();
    v9[0] = 65292;
    v9[1] = v5;
    char v10 = 0;
    sub_1004760C0(v6, (uint64_t)v9, (uint64_t *)&v11);
    long long v7 = v11;
    long long v11 = 0uLL;
    unint64_t v8 = *(std::__shared_weak_count **)(a1 + 216);
    *(_OWORD *)(a1 + 208) = v7;
    if (v8)
    {
      sub_1000DB0A0(v8);
      if (*((void *)&v11 + 1)) {
        sub_1000DB0A0(*((std::__shared_weak_count **)&v11 + 1));
      }
    }
    uint64_t v4 = *(void *)(a1 + 208);
  }
  sub_100A29D64(v4, *a2);
  sub_100A2932C(*(uint64_t **)(a1 + 208), (uint64_t)sub_100476158, a1);
}

void sub_100475ED0(uint64_t a1)
{
  *(void *)int buf = 0;
  sub_100475E28(a1, (double *)buf);
  if (*(unsigned char *)(a1 + 202))
  {
    *(unsigned char *)(a1 + 202) = 0;
    sub_1011392EC(*(void *)(a1 + 208));
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022B39F8);
    }
    BOOL v2 = qword_102419088;
    if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = sub_100A291D0(*(void *)(a1 + 208));
      *(_DWORD *)int buf = 134349056;
      *(void *)&uint8_t buf[4] = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Fast path closed,serviceRef,%{public}p", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022B39F8);
      }
      sub_100A291D0(*(void *)(a1 + 208));
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusionServiceSPU::stop()", "%s\n", v4);
      if (v4 != buf) {
        free(v4);
      }
    }
  }
}

void sub_1004760B0(uint64_t a1, void *a2)
{
  *(void *)(a1 + 40) = *a2;
  sub_100475E28(a1, (double *)(a1 + 40));
}

void sub_1004760C0(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v8 = a1;
  sub_100476B54((int *)a2, (int *)(a2 + 4), (char *)(a2 + 8), (uint64_t *)&v8, a3);
  int v5 = (std::__shared_weak_count *)a3[1];
  uint64_t v6 = *a3;
  long long v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100A26C18(a1, &v6);
  if (v7) {
    sub_1000DB0A0(v7);
  }
}

void sub_100476134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  int v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (v12) {
    sub_1000DB0A0(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100476158(uint64_t a1, float32x4_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v8[0] = 0uLL;
  unint64_t v7 = 0xBFF0000000000000;
  sub_100B9BEAC(v8, a2);
  int v9 = 0;
  memset(&v8[1], 0, 32);
  long long v10 = xmmword_101D1F280;
  uint64_t v11 = 0x1FF00000000;
  int v12 = 0;
  char v13 = 0;
  uint64_t v14 = 0;
  if (sub_100476304(a5, (float32x4_t)xmmword_101D1F280, 0, (uint64_t)&v7)) {
    sub_10053987C(a1, (uint64_t)&v7);
  }
}

void sub_1004761E8(uint64_t a1, uint64_t a2, float32x4_t a3)
{
  uint64_t v5 = *(void *)(a1 + 208);
  if (v5)
  {
    if (*(unsigned char *)(a1 + 202) && (uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5)) != 0)
    {
      unint64_t v8 = (const void *)v6;
      sub_100476304(v6, v7, 0, a2);
      CFRelease(v8);
    }
    else
    {
      sub_100539794(a1, a2);
    }
  }
  else
  {
    *(void *)a2 = 0xBFF0000000000000;
    int v9 = (float32x4_t *)(a2 + 8);
    float32x4_t v10 = 0uLL;
    sub_100B9BEAC(&v10, a3);
    if (v9 != &v10) {
      float32x4_t *v9 = v10;
    }
    *(void *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 32) = 0;
    *(void *)(a2 + 96) = 0;
    *(void *)(a2 + 36) = 0;
    *(void *)(a2 + 52) = 0;
    *(void *)(a2 + 44) = 0;
    *(void *)(a2 + 80) = 0;
    *(unsigned char *)(a2 + 88) = 0;
  }
}

BOOL sub_100476304(uint64_t a1, float32x4_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a4 = 0xBFF0000000000000;
  uint64_t v6 = (uint8_t *)(a4 + 8);
  memset(buf, 0, sizeof(buf));
  sub_100B9BEAC((float32x4_t *)buf, a2);
  if (v6 != buf) {
    *(_OWORD *)uint64_t v6 = *(_OWORD *)buf;
  }
  *(void *)(a4 + 96) = 0;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_DWORD *)(a4 + 56) = 0;
  *(void *)(a4 + 80) = 0;
  *(unsigned char *)(a4 + 88) = 0;
  if (a1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    IOHIDEventGetVendorDefinedData();
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022B39F8);
    }
    int v9 = qword_102419088;
    if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Empty payload, returning", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022B39F8);
      }
      __uuid_t dst = 0;
LABEL_21:
      float32x4_t v10 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLSensorFusionServiceSPU::populateDeviceMotion(IOHIDEventRef, uint32_t, CLSensorFusionService::Sample &)", "%s\n");
      if (v10 != buf) {
        free(v10);
      }
      return 0;
    }
  }
  else
  {
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022B39F8);
    }
    float32x4_t v7 = qword_102419088;
    if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#Warning Device motion event ref invalid", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022B39F8);
      }
      __uuid_t dst = 0;
      goto LABEL_21;
    }
  }
  return result;
}

void sub_100476AF4(id a1)
{
  qword_102419088 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

void sub_100476B24(id a1)
{
  qword_102418FE8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "AOP");
}

void *sub_100476B54@<X0>(int *a1@<X1>, int *a2@<X2>, char *a3@<X3>, uint64_t *a4@<X4>, void *a5@<X8>)
{
  float32x4_t v10 = operator new(0xC8uLL);
  BOOL result = sub_100476BD0(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_100476BBC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100476BD0(void *a1, int *a2, int *a3, char *a4, uint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B3A48;
  sub_101139258((uint64_t)(a1 + 3), *a2, *a3, *a4, *a5);
  return a1;
}

void sub_100476C28(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100476C3C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B3A48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100476C5C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B3A48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100476CB0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_100478324(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    uint64_t v4 = &OBJC_IVAR___ALCLBodyMetrics__pal;
    uint64_t v5 = &OBJC_IVAR___ALCLBodyMetrics__pal;
    uint64_t v6 = &OBJC_IVAR___ALCLBodyMetrics__pal;
    float32x4_t v7 = &OBJC_IVAR___ALCLBodyMetrics__pal;
    unint64_t v8 = &OBJC_IVAR___ALCLBodyMetrics__pal;
    int v9 = &OBJC_IVAR___ALCLBodyMetrics__pal;
    float32x4_t v10 = &OBJC_IVAR___ALCLBodyMetrics__pal;
    uint64_t v11 = &OBJC_IVAR___ALCLBodyMetrics__pal;
    uint64_t v12 = &OBJC_IVAR___ALCLBodyMetrics__pal;
    do
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        uint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v17 = v16 + 1;
        if (v16 == -1 || v17 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v18 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17;
        v15 |= (unint64_t)(v18 & 0x7F) << v13;
        if ((v18 & 0x80) == 0) {
          goto LABEL_12;
        }
        v13 += 7;
        BOOL v19 = v14++ >= 9;
        if (v19)
        {
          unint64_t v15 = 0;
          uint64_t v20 = OBJC_IVAR___PBDataReader__error;
          int v21 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
      uint64_t v20 = OBJC_IVAR___PBDataReader__error;
      int v21 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v15 = 0;
      }
LABEL_14:
      if (v21 || (v15 & 7) == 4) {
        break;
      }
      switch((v15 >> 3))
      {
        case 1u:
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            uint64_t v26 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v27 = v26 + 1;
            if (v26 == -1 || v27 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v28 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27;
            v25 |= (unint64_t)(v28 & 0x7F) << v23;
            if ((v28 & 0x80) == 0) {
              goto LABEL_83;
            }
            v23 += 7;
            BOOL v19 = v24++ >= 9;
            if (v19)
            {
              LODWORD(v25) = 0;
              goto LABEL_85;
            }
          }
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_83:
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v25) = 0;
          }
LABEL_85:
          uint64_t v73 = v4[11];
          goto LABEL_106;
        case 2u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v25 = 0;
          *(_WORD *)(a1 + v5[1]) |= 4u;
          while (2)
          {
            uint64_t v37 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v38 = v37 + 1;
            if (v37 == -1 || v38 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v39 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v37);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v38;
              v25 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                BOOL v19 = v36++ >= 9;
                if (v19)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_89;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v25) = 0;
          }
LABEL_89:
          uint64_t v73 = v6[2];
          goto LABEL_106;
        case 3u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v25 = 0;
          *(_WORD *)(a1 + v5[1]) |= 0x20u;
          while (2)
          {
            uint64_t v42 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v43 = v42 + 1;
            if (v42 == -1 || v43 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v44 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v42);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v43;
              v25 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                BOOL v19 = v41++ >= 9;
                if (v19)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_93;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v25) = 0;
          }
LABEL_93:
          uint64_t v73 = v7[3];
          goto LABEL_106;
        case 4u:
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v25 = 0;
          *(_WORD *)(a1 + v5[1]) |= 0x10u;
          while (2)
          {
            uint64_t v47 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v48 = v47 + 1;
            if (v47 == -1 || v48 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v49 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v47);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v48;
              v25 |= (unint64_t)(v49 & 0x7F) << v45;
              if (v49 < 0)
              {
                v45 += 7;
                BOOL v19 = v46++ >= 9;
                if (v19)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_97;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v25) = 0;
          }
LABEL_97:
          uint64_t v73 = v8[4];
          goto LABEL_106;
        case 5u:
          char v50 = 0;
          unsigned int v51 = 0;
          uint64_t v52 = 0;
          *(_WORD *)(a1 + v5[1]) |= 0x80u;
          while (2)
          {
            uint64_t v53 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v54 = v53 + 1;
            if (v53 == -1 || v54 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v55 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v53);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v54;
              v52 |= (unint64_t)(v55 & 0x7F) << v50;
              if (v55 < 0)
              {
                v50 += 7;
                BOOL v19 = v51++ >= 9;
                if (v19)
                {
                  uint64_t v52 = 0;
                  goto LABEL_101;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            uint64_t v52 = 0;
          }
LABEL_101:
          BOOL v74 = v52 != 0;
          uint64_t v75 = v9[5];
          goto LABEL_111;
        case 6u:
          *(_WORD *)(a1 + v5[1]) |= 0x40u;
          unint64_t v56 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v56 <= 0xFFFFFFFFFFFFFFFBLL && v56 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            int v57 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v56);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v56 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            int v57 = 0;
          }
          *(_DWORD *)(a1 + v10[6]) = v57;
          continue;
        case 7u:
          unint64_t v58 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v58 <= 0xFFFFFFFFFFFFFFF7 && v58 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v59 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v58);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v58 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + v20) = 1;
            uint64_t v59 = 0;
          }
          uint64_t v76 = v11[12];
          goto LABEL_120;
        case 8u:
          char v60 = 0;
          unsigned int v61 = 0;
          uint64_t v25 = 0;
          *(_WORD *)(a1 + v5[1]) |= 8u;
          while (2)
          {
            uint64_t v62 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v63 = v62 + 1;
            if (v62 == -1 || v63 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v64 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v62);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v63;
              v25 |= (unint64_t)(v64 & 0x7F) << v60;
              if (v64 < 0)
              {
                v60 += 7;
                BOOL v19 = v61++ >= 9;
                if (v19)
                {
                  LODWORD(v25) = 0;
                  goto LABEL_105;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v25) = 0;
          }
LABEL_105:
          uint64_t v73 = v12[7];
LABEL_106:
          *(_DWORD *)(a1 + v73) = v25;
          continue;
        case 9u:
          *(_WORD *)(a1 + v5[1]) |= 1u;
          unint64_t v65 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v65 <= 0xFFFFFFFFFFFFFFF7 && v65 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v59 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v65);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v65 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v59 = 0;
          }
          uint64_t v76 = 8;
          goto LABEL_120;
        case 0xAu:
          *(_WORD *)(a1 + v5[1]) |= 2u;
          unint64_t v66 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v66 <= 0xFFFFFFFFFFFFFFF7 && v66 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v59 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v66);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v66 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v59 = 0;
          }
          uint64_t v76 = 16;
LABEL_120:
          *(void *)(a1 + v76) = v59;
          continue;
        case 0xBu:
          char v67 = 0;
          unsigned int v68 = 0;
          uint64_t v69 = 0;
          *(_WORD *)(a1 + v5[1]) |= 0x100u;
          break;
        default:
          unint64_t v29 = v4;
          uint64_t v30 = v6;
          long long v31 = v7;
          uint64_t v32 = v5;
          unint64_t v33 = v8;
          uint64_t result = PBReaderSkipValueWithTag();
          unint64_t v8 = v33;
          uint64_t v5 = v32;
          int v9 = &OBJC_IVAR___ALCLBodyMetrics__pal;
          float32x4_t v7 = v31;
          uint64_t v11 = &OBJC_IVAR___ALCLBodyMetrics__pal;
          uint64_t v6 = v30;
          float32x4_t v10 = &OBJC_IVAR___ALCLBodyMetrics__pal;
          uint64_t v4 = v29;
          uint64_t v12 = &OBJC_IVAR___ALCLBodyMetrics__pal;
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v70 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v71 = v70 + 1;
        if (v70 == -1 || v71 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v72 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v70);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v71;
        v69 |= (unint64_t)(v72 & 0x7F) << v67;
        if ((v72 & 0x80) == 0) {
          goto LABEL_108;
        }
        v67 += 7;
        BOOL v19 = v68++ >= 9;
        if (v19)
        {
          uint64_t v69 = 0;
          goto LABEL_110;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_108:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v69 = 0;
      }
LABEL_110:
      BOOL v74 = v69 != 0;
      uint64_t v75 = 57;
LABEL_111:
      *(unsigned char *)(a1 + v75) = v74;
    }
    while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length));
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_10047997C(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 2)
    {
      unint64_t v17 = objc_alloc_init(ALCLMotionActivity);

      *(void *)(a1 + 8) = v17;
      if (!PBReaderPlaceMark() || (sub_100478324((uint64_t)v17, a2) & 1) == 0) {
        return 0;
      }
      PBReaderRecallMark();
    }
    else if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_32;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_34;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_32:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_34:
      *(_DWORD *)(a1 + 16) = v14;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_10047A714(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        uint64_t v11 = OBJC_IVAR___PBDataReader__error;
        int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    uint64_t v11 = OBJC_IVAR___PBDataReader__error;
    int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v12 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        unint64_t v14 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v14 <= 0xFFFFFFFFFFFFFFF7 && v14 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v15 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v14);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v14 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + v11) = 1;
          uint64_t v15 = 0;
        }
        *(void *)(a1 + 8) = v15;
        goto LABEL_101;
      case 2u:
        char v16 = objc_alloc_init(ALActivityOverrideMsg);

        *(void *)(a1 + 16) = v16;
        if (!PBReaderPlaceMark() || (sub_10047997C((uint64_t)v16, a2) & 1) == 0) {
          return 0;
        }
        goto LABEL_100;
      case 3u:
        unint64_t v17 = objc_alloc_init(ALCLBodyMetrics);

        *(void *)(a1 + 32) = v17;
        if (!PBReaderPlaceMark() || (sub_100474DF8((uint64_t)v17, a2) & 1) == 0) {
          return 0;
        }
        goto LABEL_100;
      case 4u:
        char v18 = objc_alloc_init(ALMotionState);

        *(void *)(a1 + 120) = v18;
        if (!PBReaderPlaceMark() || (sub_10045BB88((uint64_t)v18, a2) & 1) == 0) {
          return 0;
        }
        goto LABEL_100;
      case 5u:
        BOOL v19 = objc_alloc_init(ALCLNatalieDataDeprecated);

        *(void *)(a1 + 128) = v19;
        if (!PBReaderPlaceMark() || (sub_101114648((uint64_t)v19, a2) & 1) == 0) {
          return 0;
        }
        goto LABEL_100;
      case 6u:
        uint64_t v30 = objc_alloc_init(ALCLSedentaryAlarmDataDeprecated);

        *(void *)(a1 + 160) = v30;
        if (!PBReaderPlaceMark() || (sub_100F70A2C((uint64_t)v30, a2) & 1) == 0) {
          return 0;
        }
        goto LABEL_100;
      case 7u:
        long long v31 = objc_alloc_init(ALCLStepCountEntry);

        *(void *)(a1 + 184) = v31;
        if (!PBReaderPlaceMark() || (sub_100464F08((uint64_t)v31, a2) & 1) == 0) {
          return 0;
        }
        goto LABEL_100;
      case 8u:
        uint64_t v20 = objc_alloc_init(ALCLStrideCalEntryDeprecated);

        *(void *)(a1 + 200) = v20;
        if (!PBReaderPlaceMark() || (sub_10058B528((uint64_t)v20, a2) & 1) == 0) {
          return 0;
        }
        goto LABEL_100;
      case 9u:
        uint64_t v32 = objc_alloc_init(ALCLSessionCatherine);

        *(void *)(a1 + 168) = v32;
        if (!PBReaderPlaceMark() || (sub_10077FCD8((uint64_t)v32, a2) & 1) == 0) {
          return 0;
        }
        goto LABEL_100;
      case 0xAu:
        int v21 = objc_alloc_init(ALCLJacksonData);

        *(void *)(a1 + 112) = v21;
        if (!PBReaderPlaceMark() || (sub_1004FBC74((uint64_t)v21, a2) & 1) == 0) {
          return 0;
        }
        goto LABEL_100;
      case 0xBu:
        unint64_t v33 = objc_alloc_init(ALCLStrideCalEntry);

        *(void *)(a1 + 192) = v33;
        if (!PBReaderPlaceMark() || (sub_10045FF90((uint64_t)v33, a2) & 1) == 0) {
          return 0;
        }
        goto LABEL_100;
      case 0xCu:
        int v22 = objc_alloc_init(ALCLSedentaryAlarmData);

        *(void *)(a1 + 152) = v22;
        if (!PBReaderPlaceMark() || (sub_100467B64((uint64_t)v22, a2) & 1) == 0) {
          return 0;
        }
        goto LABEL_100;
      case 0xDu:
        char v23 = objc_alloc_init(ALCLAllDayHeartRate);

        *(void *)(a1 + 24) = v23;
        if (!PBReaderPlaceMark() || (sub_10099AD90((uint64_t)v23, a2) & 1) == 0) {
          return 0;
        }
        goto LABEL_100;
      case 0xEu:
        uint64_t v34 = objc_alloc_init(ALCMCalorieDataDeprecated);

        *(void *)(a1 + 48) = v34;
        if (!PBReaderPlaceMark() || (sub_100B91C58((uint64_t)v34, a2) & 1) == 0) {
          return 0;
        }
        goto LABEL_100;
      case 0xFu:
        unsigned int v24 = objc_alloc_init(ALCMCoarseElevationDeprecated);

        *(void *)(a1 + 64) = v24;
        if (!PBReaderPlaceMark() || (sub_1010A10C8((uint64_t)v24, a2) & 1) == 0) {
          return 0;
        }
        goto LABEL_100;
      case 0x10u:
        uint64_t v25 = objc_alloc_init(ALCMFitnessTracking);

        *(void *)(a1 + 96) = v25;
        if (!PBReaderPlaceMark() || (sub_1015394B0((uint64_t)v25, a2) & 1) == 0) {
          return 0;
        }
        goto LABEL_100;
      case 0x11u:
        uint64_t v26 = objc_alloc_init(ALCLOdometer);

        *(void *)(a1 + 136) = v26;
        if (!PBReaderPlaceMark() || (sub_101558008((uint64_t)v26, a2) & 1) == 0) {
          return 0;
        }
        goto LABEL_100;
      case 0x12u:
        char v35 = objc_alloc_init(ALCLElevationDeprecated);

        *(void *)(a1 + 80) = v35;
        if (!PBReaderPlaceMark() || (sub_100CACE44((uint64_t)v35, a2) & 1) == 0) {
          return 0;
        }
        goto LABEL_100;
      case 0x13u:
        unsigned int v36 = objc_alloc_init(ALCLIDSStatus);

        *(void *)(a1 + 104) = v36;
        if (!PBReaderPlaceMark() || (sub_100A70270((uint64_t)v36, a2) & 1) == 0) {
          return 0;
        }
        goto LABEL_100;
      case 0x14u:
        uint64_t v37 = objc_alloc_init(ALCLStairClimbingModel);

        *(void *)(a1 + 176) = v37;
        if (!PBReaderPlaceMark() || (sub_10096A250((uint64_t)v37, a2) & 1) == 0) {
          return 0;
        }
        goto LABEL_100;
      case 0x15u:
        unint64_t v38 = objc_alloc_init(ALCLRowingModel);

        *(void *)(a1 + 144) = v38;
        if (!PBReaderPlaceMark() || !sub_1009B7A60((uint64_t)v38, a2)) {
          return 0;
        }
        goto LABEL_100;
      case 0x16u:
        char v39 = objc_alloc_init(ALCMExerciseMinute);

        *(void *)(a1 + 88) = v39;
        if (!PBReaderPlaceMark() || (sub_1013192CC((uint64_t)v39, a2) & 1) == 0) {
          return 0;
        }
        goto LABEL_100;
      case 0x17u:
        char v40 = objc_alloc_init(ALCMWorkoutEventDeprecated);

        *(void *)(a1 + 216) = v40;
        if (!PBReaderPlaceMark() || (sub_1010FC984((uint64_t)v40, a2) & 1) == 0) {
          return 0;
        }
        goto LABEL_100;
      case 0x18u:
        unsigned int v41 = objc_alloc_init(ALCMElevation);

        *(void *)(a1 + 72) = v41;
        if (!PBReaderPlaceMark() || (sub_1004375EC((uint64_t)v41, a2) & 1) == 0) {
          return 0;
        }
        goto LABEL_100;
      case 0x19u:
        unint64_t v27 = objc_alloc_init(ALCMCoarseElevation);

        *(void *)(a1 + 56) = v27;
        if (!PBReaderPlaceMark() || !sub_100964174((uint64_t)v27, a2)) {
          return 0;
        }
        goto LABEL_100;
      case 0x1Au:
        char v28 = objc_alloc_init(ALCMCalorieData);

        *(void *)(a1 + 40) = v28;
        if (!PBReaderPlaceMark() || (sub_10078ED9C((uint64_t)v28, a2) & 1) == 0) {
          return 0;
        }
        goto LABEL_100;
      case 0x1Bu:
        uint64_t v42 = objc_alloc_init(ALCMWorkoutEvent);

        *(void *)(a1 + 208) = v42;
        if PBReaderPlaceMark() && (sub_10149732C((uint64_t)v42, a2))
        {
LABEL_100:
          PBReaderRecallMark();
LABEL_101:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }
        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_101;
    }
  }
}

void sub_10047C948(void *a1, void *a2)
{
  *a1 = a2;
  a1[1] = 0;
  operator new();
}

void sub_10047CD88(_Unwind_Exception *a1)
{
  sub_10051310C(v2);
  char v4 = *(std::__shared_weak_count **)(v1 + 24);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  _Unwind_Resume(a1);
}

BOOL sub_10047CE50(void *a1)
{
  uint64_t v2 = a1 + 4;
  (*(void (**)(void *))(a1[4] + 16))(a1 + 4);
  if (![+[NSFileManager defaultManager](NSFileManager, "defaultManager") fileExistsAtPath:*a1])[+[NSFileManager defaultManager] createFileAtPath:*a1 contents:0 attributes:0]; {
  uint64_t v3 = (void *)a1[1];
  }
  if (v3)
  {
    [v3 closeFile];
  }
  char v4 = +[NSFileHandle fileHandleForWritingAtPath:*a1];
  unsigned int v5 = v4;
  a1[1] = v4;
  if (v4)
  {
    [(NSFileHandle *)v4 seekToEndOfFile];
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B3AD0);
    }
    unint64_t v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      id v7 = [(id)*a1 UTF8String];
      uint64_t v8 = a1[1];
      *(_DWORD *)int buf = 136315394;
      id v12 = v7;
      __int16 v13 = 2048;
      uint64_t v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLActivityLoggerWriter open log file filePath is %s, file is %p.", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B3AD0);
      }
      [(id)*a1 UTF8String];
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLActivityLoggerWriter::open()", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(void *))(*v2 + 24))(v2);
  return v5 != 0;
}

void sub_10047D10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_10047D13C(uint64_t a1)
{
  uint64_t v1 = a1 + 32;
  (*(void (**)(uint64_t))(*(void *)(a1 + 32) + 16))(a1 + 32);
  id v2 = [*(id *)(v1 - 24) offsetInFile];
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  return v2;
}

void sub_10047D1D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10047D1E8(void *a1, void *a2)
{
  uint64_t v4 = a1[4];
  __int16 v13 = a1 + 4;
  (*(void (**)(void))(v4 + 16))();
  __int16 v15 = 256;
  if ([+[NSFileManager defaultManager] fileExistsAtPath:*a1]&& a1[1]|| sub_10047CE50(a1))
  {
    id v5 = [a2 data];
    unsigned __int16 v6 = (unsigned __int16)[v5 length];
    unsigned __int16 v12 = v6;
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B3AD0);
    }
    id v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 67109120;
      int v19 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLActivityLoggerWriter logData, prepare to log %d bytes", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B3AD0);
      }
      int v16 = 67109120;
      int v17 = v12;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLActivityLoggerWriter::logData(PBCodable *)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    uint64_t v8 = a1[2];
    while (1)
    {
      uint64_t v9 = (**(uint64_t (***)(uint64_t, id))v8)(v8, v5);
      if (!v9) {
        break;
      }
      uint64_t v8 = *(void *)(v8 + 8);
      if (!v8)
      {
        [((id)a1[1]) writeData:+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v12, 2)];
        [(id)a1[1] writeData:v5];
        break;
      }
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  if ((_BYTE)v15) {
    pthread_mutex_unlock(v14);
  }
  else {
    (*(void (**)(void *))(*v13 + 24))(v13);
  }
  return v9;
}

void sub_10047D4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10047D6AC(uint64_t a1)
{
  [*(id *)(a1 + 8) closeFile];
  sub_10051310C(a1 + 32);
  id v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  return a1;
}

void sub_10047D704(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10047D734(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10047D79C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A61360(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10047D7B8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10047D7F0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t sub_10047D820(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_10047D864(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10047D8CC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A61360(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10047D8E4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t sub_10047D914(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_10047D958(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10047D9C0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A61360(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10047D9D8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t sub_10047DA08(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_10047DAF8()
{
}

void sub_10047DDD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_10047E18C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_10047E2AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_10047E5E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_10047E728(id a1)
{
  qword_1024194B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gathering");
}

uint64_t sub_10047E758(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100732BE4(result);
    operator delete();
  }
  return result;
}

void sub_10047E7A8(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022B3D08);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceSubscription::onFenceNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B3D08);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceSubscription::onFenceNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1004885AC(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10047E964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10047E984(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022B3D08);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceSubscription::onBTLEFenceNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B3D08);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceSubscription::onBTLEFenceNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10048A06C(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10047EB40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10047EB64@<X0>(uint64_t a1@<X8>)
{
  v6[0] = off_1022B3E10;
  v6[1] = sub_10047EDB4;
  _DWORD v6[2] = 0;
  void v6[3] = v6;
  sub_100134750(v7, "kCLConnectionMessageRegionState");
  sub_10048ADB0((uint64_t)&v8, (uint64_t)v6);
  v5[0] = off_1022B3EA0;
  v5[1] = sub_100482A94;
  _DWORD v5[2] = 0;
  v5[3] = v5;
  sub_100134750(v9, "kCLConnectionMessageRegionMonitoring");
  sub_10048ADB0((uint64_t)&v10, (uint64_t)v5);
  v4[0] = off_1022B3E10;
  v4[1] = sub_1004873E4;
  _DWORD v4[2] = 0;
  void v4[3] = v4;
  sub_100134750(v11, "kCLConnectionMessageChangeFencesStateMatchingHandoffTags");
  sub_10048ADB0((uint64_t)v12, (uint64_t)v4);
  sub_10048C0FC(a1, (unsigned __int8 *)v7, 3);
  for (uint64_t i = 0; i != -21; i -= 7)
  {
    sub_10048BD00(&v12[i * 8]);
    if (SHIBYTE(v11[i + 2]) < 0) {
      operator delete((void *)v11[i]);
    }
  }
  sub_10048BD00(v4);
  sub_10048BD00(v5);
  return sub_10048BD00(v6);
}

void sub_10047ED2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  for (uint64_t i = 112; i != -56; i -= 56)
    sub_100487954((uint64_t)(&a21 + i));
  sub_10048BD00(&a9);
  sub_10048BD00(&a13);
  sub_10048BD00(&a17);
  _Unwind_Resume(a1);
}

void sub_10047EDB4(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  int v158 = 0;
  memset(&v157, 0, sizeof(v157));
  __int16 v156 = 0;
  id v5 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageRegionTypeKey"];
  if (v5 && (sub_10013E6B4(v5, &v158) & 1) != 0)
  {
    CFStringRef v6 = (const __CFString *)[(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageNameKey"];
    if (v6 && sub_10013D274(v6, &v157))
    {
      id v7 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageNotifyOnEntryKey"];
      if (v7 && (sub_1000D2C98(v7, (BOOL *)&v156 + 1) & 1) != 0)
      {
        id v8 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageNotifyOnExitKey"];
        if (v8 && (sub_1000D2C98(v8, (BOOL *)&v156) & 1) != 0)
        {
          __int16 v155 = 0;
          id v9 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageConservativeEntry"];
          if (v9 && (sub_1000D2C98(v9, (BOOL *)&v155 + 1) & 1) != 0)
          {
            id v10 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageEmergencyKey"];
            if (v10 && (sub_1000D2C98(v10, (BOOL *)&v155) & 1) != 0)
            {
              if (!(_BYTE)v155 || (sub_100487AF8(a1) & 1) != 0)
              {
                sub_100134750(&__src, (char *)[objc_msgSend(*(id *)(a1 + 24), "legacyClientKey") UTF8String]);
                long long __p = 0uLL;
                v152 = 0;
                id v11 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageOnBehalfOfKey"];
                if (v11)
                {
                  sub_100134750(&__str, (char *)[v11 UTF8String]);
                  sub_1000B7144(&__str, (uint64_t)buf);
                  sub_1000A7FBC((uint64_t)buf, (uint64_t)v159);
                  if (SHIBYTE(v152) < 0) {
                    operator delete((void *)__p);
                  }
                  long long __p = *(_OWORD *)v159;
                  v152 = v159[2];
                  HIBYTE(v159[2]) = 0;
                  LOBYTE(v159[0]) = 0;
                  sub_1000064D0((uint64_t)buf);
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__str.__r_.__value_.__l.__data_);
                  }
                }
                else
                {
                  if (qword_1024193C0 != -1) {
                    dispatch_once(&qword_1024193C0, &stru_1022B3D68);
                  }
                  int v22 = qword_1024193C8;
                  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t p_src = (uint64_t)&__src;
                    if (v154 < 0) {
                      uint64_t p_src = __src;
                    }
                    unsigned int v24 = &v157;
                    if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                      unsigned int v24 = (std::string *)v157.__r_.__value_.__r.__words[0];
                    }
                    *(_DWORD *)int buf = 136381187;
                    *(void *)&uint8_t buf[4] = "kCLConnectionMessageOnBehalfOfKey";
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = p_src;
                    *(_WORD *)&unsigned char buf[22] = 2081;
                    *(void *)&unsigned char buf[24] = v24;
                    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#Warning Couldn't get value for key %{private}s, %{public}s/%{private}s", buf, 0x20u);
                  }
                  if (sub_10013D1A0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1024193C0 != -1) {
                      dispatch_once(&qword_1024193C0, &stru_1022B3D68);
                    }
                    int v104 = &__src;
                    if (v154 < 0) {
                      int v104 = (long long *)__src;
                    }
                    __int16 v105 = &v157;
                    if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                      __int16 v105 = (std::string *)v157.__r_.__value_.__r.__words[0];
                    }
                    LODWORD(v159[0]) = 136381187;
                    *(void **)((char *)v159 + 4) = "kCLConnectionMessageOnBehalfOfKey";
                    WORD2(v159[1]) = 2082;
                    *(void **)((char *)&v159[1] + 6) = v104;
                    HIWORD(v159[2]) = 2081;
                    v160 = v105;
                    int v106 = (char *)_os_log_send_and_compose_impl();
                    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v106);
                    if (v106 != buf) {
                      free(v106);
                    }
                  }
                }
                uint64_t v25 = HIBYTE(v152);
                if (SHIBYTE(v152) < 0) {
                  uint64_t v25 = *((void *)&__p + 1);
                }
                if (v25 && (sub_100487990(a1) & 1) == 0)
                {
                  if (qword_1024193C0 != -1) {
                    dispatch_once(&qword_1024193C0, &stru_1022B3D68);
                  }
                  unint64_t v33 = qword_1024193C8;
                  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
                  {
                    uint64_t v34 = *(void *)(a1 + 24);
                    uint64_t p_p = (uint64_t)&__p;
                    if (SHIBYTE(v152) < 0) {
                      uint64_t p_p = __p;
                    }
                    *(_DWORD *)int buf = 138543618;
                    *(void *)&uint8_t buf[4] = v34;
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&buf[14] = p_p;
                    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_FAULT, "Client %{public}@ does not have appropriate entitlement to act as a proxy service to %{public}s", buf, 0x16u);
                  }
                  if (sub_10013D1A0(115, 0))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1024193C0 != -1) {
                      dispatch_once(&qword_1024193C0, &stru_1022B3D68);
                    }
                    unsigned int v36 = *(void **)(a1 + 24);
                    uint64_t v37 = &__p;
                    if (SHIBYTE(v152) < 0) {
                      uint64_t v37 = (long long *)__p;
                    }
                    LODWORD(v159[0]) = 138543618;
                    *(void **)((char *)v159 + 4) = v36;
                    WORD2(v159[1]) = 2082;
                    *(void **)((char *)&v159[1] + 6) = v37;
                    unint64_t v38 = (char *)_os_log_send_and_compose_impl();
                    sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v38);
                    if (v38 != buf) {
                      free(v38);
                    }
                  }
                  goto LABEL_479;
                }
                CFDictionaryRef Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*a2);
                sub_10013FA80((int)v149, Dictionary);
                sub_100134750(&__str, "");
                sub_100134750(&v148, "");
                sub_1004D1284((uint64_t)v149, "kCLConnectionMessageDeviceIDKey", &__str);
                std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type size = __str.__r_.__value_.__l.__size_;
                }
                if (size)
                {
                  if ((sub_100487BE8(a1) & 1) == 0)
                  {
                    if (qword_102419520 != -1) {
                      dispatch_once(&qword_102419520, &stru_1022B3D28);
                    }
                    uint64_t v52 = qword_102419528;
                    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
                    {
                      uint64_t v53 = *(void *)(a1 + 24);
                      *(_DWORD *)int buf = 138543362;
                      *(void *)&uint8_t buf[4] = v53;
                      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_FAULT, "#Warning #FenceHandoff %{public}@ does not have the appropriate entitlement for fence handoff service", buf, 0xCu);
                    }
                    if (sub_10013D1A0(115, 0))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_102419520 != -1) {
LABEL_493:
                      }
                        dispatch_once(&qword_102419520, &stru_1022B3D28);
LABEL_153:
                      unint64_t v54 = *(void **)(a1 + 24);
                      LODWORD(v159[0]) = 138543362;
                      *(void **)((char *)v159 + 4) = v54;
                      char v55 = (char *)_os_log_send_and_compose_impl();
                      sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v55);
LABEL_378:
                      if (v55 != buf) {
                        free(v55);
                      }
                    }
                    goto LABEL_474;
                  }
                  sub_1004D1284((uint64_t)v149, "kCLConnectionMessageHandoffTagKey", &v148);
                  std::string::size_type v28 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    std::string::size_type v28 = __str.__r_.__value_.__l.__size_;
                  }
                  if (v28)
                  {
                    std::string::size_type v29 = HIBYTE(v148.__r_.__value_.__r.__words[2]);
                    if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                      std::string::size_type v29 = v148.__r_.__value_.__l.__size_;
                    }
                    if (!v29)
                    {
                      if (qword_102419520 != -1) {
                        dispatch_once(&qword_102419520, &stru_1022B3D28);
                      }
                      uint64_t v80 = qword_102419528;
                      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
                      {
                        int v81 = &v157;
                        if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                          int v81 = (std::string *)v157.__r_.__value_.__r.__words[0];
                        }
                        *(_DWORD *)int buf = 68289282;
                        *(_DWORD *)&uint8_t buf[4] = 0;
                        *(_WORD *)&uint8_t buf[8] = 2082;
                        *(void *)&buf[10] = "";
                        *(_WORD *)&unsigned char buf[18] = 2082;
                        *(void *)&buf[20] = v81;
                        _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#FenceHandoff handleMessageRegionState HandoffTag is empty for handed off region\", \"fenceName\":%{public, location:escape_only}s}", buf, 0x1Cu);
                        if (qword_102419520 != -1) {
                          dispatch_once(&qword_102419520, &stru_1022B3D28);
                        }
                      }
                      int v82 = qword_102419528;
                      if (os_signpost_enabled((os_log_t)qword_102419528))
                      {
                        uint64_t v83 = &v157;
                        if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                          uint64_t v83 = (std::string *)v157.__r_.__value_.__r.__words[0];
                        }
                        *(_DWORD *)int buf = 68289282;
                        *(_DWORD *)&uint8_t buf[4] = 0;
                        *(_WORD *)&uint8_t buf[8] = 2082;
                        *(void *)&buf[10] = "";
                        *(_WORD *)&unsigned char buf[18] = 2082;
                        *(void *)&buf[20] = v83;
                        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v82, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#FenceHandoff handleMessageRegionState HandoffTag is empty for handed off region", "{\"msg%{public}.0s\":\"#FenceHandoff handleMessageRegionState HandoffTag is empty for handed off region\", \"fenceName\":%{public, location:escape_only}s}", buf, 0x1Cu);
                      }
                      goto LABEL_474;
                    }
                  }
                  id v30 = objc_alloc((Class)NSUUID);
                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    p_str = &__str;
                  }
                  else {
                    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                  }
                  id v32 = [v30 initWithUUIDString:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_str)];
                }
                else
                {
                  id v32 = 0;
                }
                switch(v158)
                {
                  case 0:
                    if (qword_102419520 != -1) {
                      dispatch_once(&qword_102419520, &stru_1022B3D28);
                    }
                    int v57 = qword_102419528;
                    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
                    {
                      uint64_t v58 = (uint64_t)&__p;
                      if (SHIBYTE(v152) < 0) {
                        uint64_t v58 = __p;
                      }
                      uint64_t v59 = (uint64_t)&__src;
                      if (v154 < 0) {
                        uint64_t v59 = __src;
                      }
                      char v60 = &v157;
                      if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                        char v60 = (std::string *)v157.__r_.__value_.__r.__words[0];
                      }
                      *(_DWORD *)int buf = 136315650;
                      *(void *)&uint8_t buf[4] = v58;
                      *(_WORD *)&unsigned char buf[12] = 2080;
                      *(void *)&buf[14] = v59;
                      *(_WORD *)&unsigned char buf[22] = 2080;
                      *(void *)&unsigned char buf[24] = v60;
                      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "iB: requesting, kCLClientRegionBeacon for, [%s]/%s/%s", buf, 0x20u);
                    }
                    if (sub_10013D1A0(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_102419520 != -1) {
                        dispatch_once(&qword_102419520, &stru_1022B3D28);
                      }
                      double v116 = &__p;
                      if (SHIBYTE(v152) < 0) {
                        double v116 = (long long *)__p;
                      }
                      __int16 v117 = &__src;
                      if (v154 < 0) {
                        __int16 v117 = (long long *)__src;
                      }
                      uint64_t v118 = &v157;
                      if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                        uint64_t v118 = (std::string *)v157.__r_.__value_.__r.__words[0];
                      }
                      LODWORD(v159[0]) = 136315650;
                      *(void **)((char *)v159 + 4) = v116;
                      WORD2(v159[1]) = 2080;
                      *(void **)((char *)&v159[1] + 6) = v117;
                      HIWORD(v159[2]) = 2080;
                      v160 = v118;
                      __int16 v119 = (char *)_os_log_send_and_compose_impl();
                      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v119);
                      if (v119 != buf) {
                        free(v119);
                      }
                    }
                    sub_10048B0C8((uint64_t)v159, &__src, (long long *)&v157, &__p);
                    CFStringRef v61 = (const __CFString *)[(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageProximityUUIDKey"];
                    if (v61 && sub_10013D274(v61, (std::string *)&v159[1]))
                    {
                      id v62 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageMajorKey"];
                      if (v62 && (sub_1004D1690(v62, &v161) & 1) != 0)
                      {
                        id v63 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageMinorKey"];
                        if (v63 && (sub_1004D1690(v63, &v162) & 1) != 0)
                        {
                          LODWORD(v147) = 0;
                          id v64 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageRegionDefinitionKey"];
                          if (v64 && (sub_10013E6B4(v64, &v147) & 1) != 0)
                          {
                            *(_DWORD *)((char *)&v162 + 2) = v147 & 7;
                            LOBYTE(v146) = 0;
                            id v65 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageNotifyEntryStateOnDisplayKey"];
                            if (v65 && (sub_1000D2C98(v65, (BOOL *)&v146) & 1) != 0)
                            {
                              if (HIBYTE(v156)) {
                                v163 |= 1u;
                              }
                              if ((_BYTE)v156) {
                                v163 |= 2u;
                              }
                              if ((_BYTE)v146) {
                                v163 |= 4u;
                              }
                              if (HIBYTE(v155)) {
                                v163 |= 4u;
                              }
                              unint64_t v66 = *(void **)(*(void *)sub_1001ABCA8(a1) + 16);
                              v125[0] = _NSConcreteStackBlock;
                              v125[1] = 3321888768;
                              v125[2] = sub_10048857C;
                              v125[3] = &unk_1022B3CA8;
                              sub_10048B9C8((uint64_t)v126, (uint64_t)v159);
                              [v66 doAsync:v125];
                              sub_100111F40((uint64_t)v126);
                              sub_100111F40((uint64_t)v159);
                              goto LABEL_473;
                            }
                            if (qword_102419530 != -1) {
                              dispatch_once(&qword_102419530, &stru_1022B3D48);
                            }
                            __int16 v97 = qword_102419538;
                            if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
                            {
                              *(_DWORD *)int buf = 136446210;
                              *(void *)&uint8_t buf[4] = "kCLConnectionMessageNotifyEntryStateOnDisplayKey";
                              _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                            }
                            if (!sub_10013D1A0(115, 0)) {
                              goto LABEL_340;
                            }
                            bzero(buf, 0x65CuLL);
                            if (qword_102419530 != -1) {
                              dispatch_once(&qword_102419530, &stru_1022B3D48);
                            }
                            *(_DWORD *)v164 = 136446210;
                            *(void *)&v164[4] = "kCLConnectionMessageNotifyEntryStateOnDisplayKey";
                            BOOL v79 = (char *)_os_log_send_and_compose_impl();
                            sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v79);
                          }
                          else
                          {
                            if (qword_102419530 != -1) {
                              dispatch_once(&qword_102419530, &stru_1022B3D48);
                            }
                            int v94 = qword_102419538;
                            if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
                            {
                              *(_DWORD *)int buf = 136446210;
                              *(void *)&uint8_t buf[4] = "kCLConnectionMessageRegionDefinitionKey";
                              _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                            }
                            if (!sub_10013D1A0(115, 0)) {
                              goto LABEL_340;
                            }
                            bzero(buf, 0x65CuLL);
                            if (qword_102419530 != -1) {
                              dispatch_once(&qword_102419530, &stru_1022B3D48);
                            }
                            *(_DWORD *)v164 = 136446210;
                            *(void *)&v164[4] = "kCLConnectionMessageRegionDefinitionKey";
                            BOOL v79 = (char *)_os_log_send_and_compose_impl();
                            sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v79);
                          }
                        }
                        else
                        {
                          if (qword_102419530 != -1) {
                            dispatch_once(&qword_102419530, &stru_1022B3D48);
                          }
                          int v91 = qword_102419538;
                          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
                          {
                            *(_DWORD *)int buf = 136446210;
                            *(void *)&uint8_t buf[4] = "kCLConnectionMessageMinorKey";
                            _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                          }
                          if (!sub_10013D1A0(115, 0)) {
                            goto LABEL_340;
                          }
                          bzero(buf, 0x65CuLL);
                          if (qword_102419530 != -1) {
                            dispatch_once(&qword_102419530, &stru_1022B3D48);
                          }
                          *(_DWORD *)v164 = 136446210;
                          *(void *)&v164[4] = "kCLConnectionMessageMinorKey";
                          BOOL v79 = (char *)_os_log_send_and_compose_impl();
                          sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v79);
                        }
                      }
                      else
                      {
                        if (qword_102419530 != -1) {
                          dispatch_once(&qword_102419530, &stru_1022B3D48);
                        }
                        int v88 = qword_102419538;
                        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
                        {
                          *(_DWORD *)int buf = 136446210;
                          *(void *)&uint8_t buf[4] = "kCLConnectionMessageMajorKey";
                          _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                        }
                        if (!sub_10013D1A0(115, 0)) {
                          goto LABEL_340;
                        }
                        bzero(buf, 0x65CuLL);
                        if (qword_102419530 != -1) {
                          dispatch_once(&qword_102419530, &stru_1022B3D48);
                        }
                        *(_DWORD *)v164 = 136446210;
                        *(void *)&v164[4] = "kCLConnectionMessageMajorKey";
                        BOOL v79 = (char *)_os_log_send_and_compose_impl();
                        sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v79);
                      }
                    }
                    else
                    {
                      if (qword_102419530 != -1) {
                        dispatch_once(&qword_102419530, &stru_1022B3D48);
                      }
                      unint64_t v78 = qword_102419538;
                      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
                      {
                        *(_DWORD *)int buf = 136446210;
                        *(void *)&uint8_t buf[4] = "kCLConnectionMessageProximityUUIDKey";
                        _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                      }
                      if (!sub_10013D1A0(115, 0)) {
                        goto LABEL_340;
                      }
                      bzero(buf, 0x65CuLL);
                      if (qword_102419530 != -1) {
                        dispatch_once(&qword_102419530, &stru_1022B3D48);
                      }
                      *(_DWORD *)v164 = 136446210;
                      *(void *)&v164[4] = "kCLConnectionMessageProximityUUIDKey";
                      BOOL v79 = (char *)_os_log_send_and_compose_impl();
                      sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v79);
                    }
                    if (v79 != buf) {
                      free(v79);
                    }
LABEL_340:
                    sub_100111F40((uint64_t)v159);
                    goto LABEL_474;
                  case 1:
                  case 3:
                    int v39 = v158;
                    if (qword_1024193C0 != -1) {
                      dispatch_once(&qword_1024193C0, &stru_1022B3D68);
                    }
                    char v40 = qword_1024193C8;
                    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
                    {
                      unsigned int v41 = "kCLClientRegionCircular";
                      if (v39 == 3) {
                        unsigned int v41 = "kCLClientRegionSignificant";
                      }
                      uint64_t v42 = (uint64_t)&__p;
                      if (SHIBYTE(v152) < 0) {
                        uint64_t v42 = __p;
                      }
                      uint64_t v43 = (uint64_t)&__src;
                      if (v154 < 0) {
                        uint64_t v43 = __src;
                      }
                      char v44 = &v157;
                      *(_DWORD *)int buf = 136446978;
                      if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                        char v44 = (std::string *)v157.__r_.__value_.__r.__words[0];
                      }
                      *(void *)&uint8_t buf[4] = v41;
                      *(_WORD *)&unsigned char buf[12] = 2080;
                      *(void *)&buf[14] = v42;
                      *(_WORD *)&unsigned char buf[22] = 2080;
                      *(void *)&unsigned char buf[24] = v43;
                      __int16 v166 = 2080;
                      v167 = v44;
                      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "Fence: requesting, %{public}s for, [%s]/%s/%s", buf, 0x2Au);
                    }
                    if (sub_10013D1A0(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1024193C0 != -1) {
                        dispatch_once(&qword_1024193C0, &stru_1022B3D68);
                      }
                      v110 = "kCLClientRegionCircular";
                      if (v39 == 3) {
                        v110 = "kCLClientRegionSignificant";
                      }
                      __int16 v111 = &__p;
                      if (SHIBYTE(v152) < 0) {
                        __int16 v111 = (long long *)__p;
                      }
                      int v112 = (std::string *)&__src;
                      if (v154 < 0) {
                        int v112 = (std::string *)__src;
                      }
                      __int16 v113 = &v157;
                      if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                        __int16 v113 = (std::string *)v157.__r_.__value_.__r.__words[0];
                      }
                      LODWORD(v159[0]) = 136446978;
                      *(void **)((char *)v159 + 4) = (void *)v110;
                      WORD2(v159[1]) = 2080;
                      *(void **)((char *)&v159[1] + 6) = v111;
                      HIWORD(v159[2]) = 2080;
                      v160 = v112;
                      __int16 v161 = 2080;
                      v162 = v113;
                      int v114 = (char *)_os_log_send_and_compose_impl();
                      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v114);
                      if (v114 != buf) {
                        free(v114);
                      }
                    }
                    *(void *)v164 = 0;
                    CFTypeRef v147 = 0;
                    uint64_t v146 = 0;
                    uint64_t v145 = 0;
                    id v45 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageLatitudeKey"];
                    if (v45 && (sub_1000A6DD8(v45, v164) & 1) != 0)
                    {
                      id v46 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageLongitudeKey"];
                      if (v46 && (sub_1000A6DD8(v46, &v147) & 1) != 0)
                      {
                        id v47 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageRadiusKey"];
                        if (v47 && (sub_1000A6DD8(v47, &v146) & 1) != 0)
                        {
                          id v48 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageDesiredAccuracyKey"];
                          if (v48 && (sub_1000A6DD8(v48, &v145) & 1) != 0)
                          {
                            int v144 = 0;
                            id v49 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageReferenceFrameKey"];
                            if (v49 && (sub_10013E6B4(v49, &v144) & 1) != 0)
                            {
                              BOOL v143 = 0;
                              id v50 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageMonitoringNearby"];
                              if (v50 && (sub_1000D2C98(v50, &v143) & 1) != 0)
                              {
                                BOOL v142 = 0;
                                id v51 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageLowPowerFenceKey"];
                                if (v51 && (sub_1000D2C98(v51, &v142) & 1) != 0)
                                {
                                  if (SHIBYTE(v154) < 0)
                                  {
                                    sub_1000DC48C(&v140, (void *)__src, *((unint64_t *)&__src + 1));
                                  }
                                  else
                                  {
                                    long long v140 = __src;
                                    uint64_t v141 = v154;
                                  }
                                  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
                                    sub_1000DC48C(&v139, v157.__r_.__value_.__l.__data_, v157.__r_.__value_.__l.__size_);
                                  }
                                  else {
                                    std::string v139 = v157;
                                  }
                                  if (SHIBYTE(v152) < 0)
                                  {
                                    sub_1000DC48C(&v137, (void *)__p, *((unint64_t *)&__p + 1));
                                  }
                                  else
                                  {
                                    long long v137 = __p;
                                    v138 = v152;
                                  }
                                  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
                                    sub_1000DC48C(&v136, v148.__r_.__value_.__l.__data_, v148.__r_.__value_.__l.__size_);
                                  }
                                  else {
                                    std::string v136 = v148;
                                  }
                                  sub_100C8C570(buf);
                                  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
                                    operator delete(v136.__r_.__value_.__l.__data_);
                                  }
                                  if (SHIBYTE(v138) < 0) {
                                    operator delete((void *)v137);
                                  }
                                  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
                                    operator delete(v139.__r_.__value_.__l.__data_);
                                  }
                                  if (SHIBYTE(v141) < 0) {
                                    operator delete((void *)v140);
                                  }
                                  if (HIBYTE(v156)) {
                                    v168 |= 1uLL;
                                  }
                                  if ((_BYTE)v156) {
                                    v168 |= 2uLL;
                                  }
                                  if (v142) {
                                    v168 |= 0x20uLL;
                                  }
                                  if (v39 == 3) {
                                    v168 |= 0x80uLL;
                                  }
                                  if (HIBYTE(v155)) {
                                    v168 |= 4uLL;
                                  }
                                  if (v143) {
                                    v168 |= 0x40uLL;
                                  }
                                  if ((_BYTE)v155) {
                                    v168 |= 0x10uLL;
                                  }
                                  int v169 = v144;
                                  int v124 = *(void **)(*(void *)sub_1001ABD68(a1) + 16);
                                  sub_10048AEC0((char *)v135, (long long *)buf);
                                  [v124 requestRegionState:sub_100488290(v135)];
                                  sub_100488394((uint64_t)v135);
                                  sub_100488394((uint64_t)buf);
                                  goto LABEL_473;
                                }
                                if (qword_102419530 != -1) {
                                  dispatch_once(&qword_102419530, &stru_1022B3D48);
                                }
                                v109 = qword_102419538;
                                if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
                                {
                                  *(_DWORD *)int buf = 136446210;
                                  *(void *)&uint8_t buf[4] = "kCLConnectionMessageLowPowerFenceKey";
                                  _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                                }
                                if (sub_10013D1A0(115, 0))
                                {
                                  bzero(buf, 0x65CuLL);
                                  if (qword_102419530 != -1) {
                                    dispatch_once(&qword_102419530, &stru_1022B3D48);
                                  }
                                  LODWORD(v159[0]) = 136446210;
                                  *(void **)((char *)v159 + 4) = "kCLConnectionMessageLowPowerFenceKey";
                                  char v55 = (char *)_os_log_send_and_compose_impl();
                                  sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v55);
                                  goto LABEL_378;
                                }
                              }
                              else
                              {
                                if (qword_102419530 != -1) {
                                  dispatch_once(&qword_102419530, &stru_1022B3D48);
                                }
                                double v98 = qword_102419538;
                                if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
                                {
                                  *(_DWORD *)int buf = 136446210;
                                  *(void *)&uint8_t buf[4] = "kCLConnectionMessageMonitoringNearby";
                                  _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                                }
                                if (sub_10013D1A0(115, 0))
                                {
                                  bzero(buf, 0x65CuLL);
                                  if (qword_102419530 != -1) {
                                    goto LABEL_495;
                                  }
                                  goto LABEL_283;
                                }
                              }
                            }
                            else
                            {
                              if (qword_102419530 != -1) {
                                dispatch_once(&qword_102419530, &stru_1022B3D48);
                              }
                              __int16 v95 = qword_102419538;
                              if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
                              {
                                *(_DWORD *)int buf = 136446210;
                                *(void *)&uint8_t buf[4] = "kCLConnectionMessageReferenceFrameKey";
                                _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                              }
                              if (sub_10013D1A0(115, 0))
                              {
                                bzero(buf, 0x65CuLL);
                                if (qword_102419530 != -1) {
                                  dispatch_once(&qword_102419530, &stru_1022B3D48);
                                }
                                LODWORD(v159[0]) = 136446210;
                                *(void **)((char *)v159 + 4) = "kCLConnectionMessageReferenceFrameKey";
                                char v55 = (char *)_os_log_send_and_compose_impl();
                                sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v55);
                                goto LABEL_378;
                              }
                            }
                          }
                          else
                          {
                            if (qword_102419530 != -1) {
                              dispatch_once(&qword_102419530, &stru_1022B3D48);
                            }
                            double v92 = qword_102419538;
                            if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
                            {
                              *(_DWORD *)int buf = 136446210;
                              *(void *)&uint8_t buf[4] = "kCLConnectionMessageDesiredAccuracyKey";
                              _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                            }
                            if (sub_10013D1A0(115, 0))
                            {
                              bzero(buf, 0x65CuLL);
                              if (qword_102419530 != -1) {
                                dispatch_once(&qword_102419530, &stru_1022B3D48);
                              }
                              LODWORD(v159[0]) = 136446210;
                              *(void **)((char *)v159 + 4) = "kCLConnectionMessageDesiredAccuracyKey";
                              char v55 = (char *)_os_log_send_and_compose_impl();
                              sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v55);
                              goto LABEL_378;
                            }
                          }
                        }
                        else
                        {
                          if (qword_102419530 != -1) {
                            dispatch_once(&qword_102419530, &stru_1022B3D48);
                          }
                          double v89 = qword_102419538;
                          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
                          {
                            *(_DWORD *)int buf = 136446210;
                            *(void *)&uint8_t buf[4] = "kCLConnectionMessageRadiusKey";
                            _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                          }
                          if (sub_10013D1A0(115, 0))
                          {
                            bzero(buf, 0x65CuLL);
                            if (qword_102419530 != -1) {
                              dispatch_once(&qword_102419530, &stru_1022B3D48);
                            }
                            LODWORD(v159[0]) = 136446210;
                            *(void **)((char *)v159 + 4) = "kCLConnectionMessageRadiusKey";
                            char v55 = (char *)_os_log_send_and_compose_impl();
                            sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v55);
                            goto LABEL_378;
                          }
                        }
                      }
                      else
                      {
                        if (qword_102419530 != -1) {
                          dispatch_once(&qword_102419530, &stru_1022B3D48);
                        }
                        uint64_t v86 = qword_102419538;
                        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
                        {
                          *(_DWORD *)int buf = 136446210;
                          *(void *)&uint8_t buf[4] = "kCLConnectionMessageLongitudeKey";
                          _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                        }
                        if (sub_10013D1A0(115, 0))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_102419530 != -1) {
                            dispatch_once(&qword_102419530, &stru_1022B3D48);
                          }
                          LODWORD(v159[0]) = 136446210;
                          *(void **)((char *)v159 + 4) = "kCLConnectionMessageLongitudeKey";
                          char v55 = (char *)_os_log_send_and_compose_impl();
                          sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v55);
                          goto LABEL_378;
                        }
                      }
                    }
                    else
                    {
                      if (qword_102419530 != -1) {
                        dispatch_once(&qword_102419530, &stru_1022B3D48);
                      }
                      unint64_t v56 = qword_102419538;
                      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
                      {
                        *(_DWORD *)int buf = 136446210;
                        *(void *)&uint8_t buf[4] = "kCLConnectionMessageLatitudeKey";
                        _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                      }
                      if (sub_10013D1A0(115, 0))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_102419530 != -1) {
                          dispatch_once(&qword_102419530, &stru_1022B3D48);
                        }
                        LODWORD(v159[0]) = 136446210;
                        *(void **)((char *)v159 + 4) = "kCLConnectionMessageLatitudeKey";
                        char v55 = (char *)_os_log_send_and_compose_impl();
                        sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v55);
                        goto LABEL_378;
                      }
                    }
                    goto LABEL_474;
                  case 2:
                    if ((sub_100487A80(a1) & 1) == 0)
                    {
                      if (qword_102419520 != -1) {
                        dispatch_once(&qword_102419520, &stru_1022B3D28);
                      }
                      uint64_t v84 = qword_102419528;
                      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
                      {
                        uint64_t v85 = *(void *)(a1 + 24);
                        *(_DWORD *)int buf = 138543362;
                        *(void *)&uint8_t buf[4] = v85;
                        _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_FAULT, "Client %{public}@ does not have appropriate entitlement to use polygonal regions", buf, 0xCu);
                      }
                      if (sub_10013D1A0(115, 0))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_102419520 != -1) {
                          goto LABEL_493;
                        }
                        goto LABEL_153;
                      }
                      goto LABEL_474;
                    }
                    if (qword_1024193C0 != -1) {
                      dispatch_once(&qword_1024193C0, &stru_1022B3D68);
                    }
                    char v67 = qword_1024193C8;
                    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
                    {
                      uint64_t v68 = (uint64_t)&__p;
                      if (SHIBYTE(v152) < 0) {
                        uint64_t v68 = __p;
                      }
                      uint64_t v69 = (uint64_t)&__src;
                      if (v154 < 0) {
                        uint64_t v69 = __src;
                      }
                      uint64_t v70 = &v157;
                      if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                        uint64_t v70 = (std::string *)v157.__r_.__value_.__r.__words[0];
                      }
                      *(_DWORD *)int buf = 136315650;
                      *(void *)&uint8_t buf[4] = v68;
                      *(_WORD *)&unsigned char buf[12] = 2080;
                      *(void *)&buf[14] = v69;
                      *(_WORD *)&unsigned char buf[22] = 2080;
                      *(void *)&unsigned char buf[24] = v70;
                      _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "Fence: requesting, kCLClientRegionPolygonal for, [%s]/%s/%s", buf, 0x20u);
                    }
                    if (sub_10013D1A0(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1024193C0 != -1) {
                        dispatch_once(&qword_1024193C0, &stru_1022B3D68);
                      }
                      int v120 = &__p;
                      if (SHIBYTE(v152) < 0) {
                        int v120 = (long long *)__p;
                      }
                      __int16 v121 = &__src;
                      if (v154 < 0) {
                        __int16 v121 = (long long *)__src;
                      }
                      int v122 = &v157;
                      if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                        int v122 = (std::string *)v157.__r_.__value_.__r.__words[0];
                      }
                      LODWORD(v159[0]) = 136315650;
                      *(void **)((char *)v159 + 4) = v120;
                      WORD2(v159[1]) = 2080;
                      *(void **)((char *)&v159[1] + 6) = v121;
                      HIWORD(v159[2]) = 2080;
                      v160 = v122;
                      __int16 v123 = (char *)_os_log_send_and_compose_impl();
                      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v123);
                      if (v123 != buf) {
                        free(v123);
                      }
                    }
                    LODWORD(v145) = 0;
                    int v144 = 0;
                    BOOL v143 = 0;
                    id v71 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageReferenceFrameKey"];
                    if (!v71 || (sub_10013E6B4(v71, &v145) & 1) == 0)
                    {
                      if (qword_102419530 != -1) {
                        dispatch_once(&qword_102419530, &stru_1022B3D48);
                      }
                      int v87 = qword_102419538;
                      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
                      {
                        *(_DWORD *)int buf = 136446210;
                        *(void *)&uint8_t buf[4] = "kCLConnectionMessageReferenceFrameKey";
                        _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                      }
                      if (sub_10013D1A0(115, 0))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_102419530 != -1) {
                          dispatch_once(&qword_102419530, &stru_1022B3D48);
                        }
                        LODWORD(v159[0]) = 136446210;
                        *(void **)((char *)v159 + 4) = "kCLConnectionMessageReferenceFrameKey";
                        char v55 = (char *)_os_log_send_and_compose_impl();
                        sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v55);
                        goto LABEL_378;
                      }
                      goto LABEL_474;
                    }
                    id v72 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessageMonitoringNearby"];
                    if (!v72 || (sub_1000D2C98(v72, &v143) & 1) == 0)
                    {
                      if (qword_102419530 != -1) {
                        dispatch_once(&qword_102419530, &stru_1022B3D48);
                      }
                      long long v90 = qword_102419538;
                      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
                      {
                        *(_DWORD *)int buf = 136446210;
                        *(void *)&uint8_t buf[4] = "kCLConnectionMessageMonitoringNearby";
                        _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                      }
                      if (sub_10013D1A0(115, 0))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_102419530 != -1) {
LABEL_495:
                        }
                          dispatch_once(&qword_102419530, &stru_1022B3D48);
LABEL_283:
                        LODWORD(v159[0]) = 136446210;
                        *(void **)((char *)v159 + 4) = "kCLConnectionMessageMonitoringNearby";
                        char v55 = (char *)_os_log_send_and_compose_impl();
                        sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v55);
                        goto LABEL_378;
                      }
                      goto LABEL_474;
                    }
                    id v73 = [(id)CLConnectionMessage::getDictionary(*a2) objectForKeyedSubscript:@"kCLConnectionMessagePolygonalVerticesCountKey"];
                    if (!v73 || (sub_10013E6B4(v73, &v144) & 1) == 0)
                    {
                      if (qword_102419530 != -1) {
                        dispatch_once(&qword_102419530, &stru_1022B3D48);
                      }
                      __int16 v93 = qword_102419538;
                      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
                      {
                        *(_DWORD *)int buf = 136446210;
                        *(void *)&uint8_t buf[4] = "kCLConnectionMessagePolygonalVerticesCountKey";
                        _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                      }
                      if (sub_10013D1A0(115, 0))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_102419530 != -1) {
                          dispatch_once(&qword_102419530, &stru_1022B3D48);
                        }
                        LODWORD(v159[0]) = 136446210;
                        *(void **)((char *)v159 + 4) = "kCLConnectionMessagePolygonalVerticesCountKey";
                        char v55 = (char *)_os_log_send_and_compose_impl();
                        sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v55);
                        goto LABEL_378;
                      }
                      goto LABEL_474;
                    }
                    CFDictionaryRef v74 = (const __CFDictionary *)CLConnectionMessage::getDictionary(*a2);
                    sub_10013FA80((int)v164, v74);
                    CFTypeRef v147 = 0;
                    if (sub_1004D2028((uint64_t)v164, @"kCLConnectionMessagePolygonalVerticesKey", &v147))
                    {
                      uint64_t v146 = 0;
                      uint64_t v75 = +[NSKeyedUnarchiver unarchivedArrayOfObjectsOfClass:objc_opt_class() fromData:v147 error:&v146];
                      if (v146)
                      {
                        if (qword_102419520 != -1) {
                          dispatch_once(&qword_102419520, &stru_1022B3D28);
                        }
                        uint64_t v76 = qword_102419528;
                        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
                        {
                          *(_DWORD *)int buf = 68289282;
                          *(_DWORD *)&uint8_t buf[4] = 0;
                          *(_WORD *)&uint8_t buf[8] = 2082;
                          *(void *)&buf[10] = "";
                          *(_WORD *)&unsigned char buf[18] = 2114;
                          *(void *)&buf[20] = v146;
                          _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unable to get vertices from data in handleMessageRegionState\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
                          if (qword_102419520 != -1) {
                            dispatch_once(&qword_102419520, &stru_1022B3D28);
                          }
                        }
                        BOOL v77 = qword_102419528;
                        if (os_signpost_enabled((os_log_t)qword_102419528))
                        {
                          *(_DWORD *)int buf = 68289282;
                          *(_DWORD *)&uint8_t buf[4] = 0;
                          *(_WORD *)&uint8_t buf[8] = 2082;
                          *(void *)&buf[10] = "";
                          *(_WORD *)&unsigned char buf[18] = 2114;
                          *(void *)&buf[20] = v146;
                          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v77, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unable to get vertices from data in handleMessageRegionState", "{\"msg%{public}.0s\":\"Unable to get vertices from data in handleMessageRegionState\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
                        }
LABEL_334:
                        sub_10013F3C4(v164);
LABEL_474:
                        if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v148.__r_.__value_.__l.__data_);
                        }
                        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(__str.__r_.__value_.__l.__data_);
                        }
                        sub_10013F3C4(v149);
LABEL_479:
                        if (SHIBYTE(v152) < 0) {
                          operator delete((void *)__p);
                        }
                        if (SHIBYTE(v154) < 0) {
                          operator delete((void *)__src);
                        }
                        goto LABEL_65;
                      }
                      __int16 v99 = v75;
                      id v100 = [(NSArray *)v75 count];
                      if (v144 == v100)
                      {
                        memset(v159, 0, sizeof(v159));
                        sub_100231E88(v159, v144);
                        if (v144 >= 1)
                        {
                          for (uint64_t i = 0; i < v144; ++i)
                          {
                            [v99 objectAtIndexedSubscript:i].coordinate
                            *(void *)int buf = v102;
                            [v99 objectAtIndexedSubscript:i].coordinate
                            *(void *)&uint8_t buf[8] = v103;
                            sub_100488414(v159, buf);
                          }
                        }
                        if (SHIBYTE(v154) < 0)
                        {
                          sub_1000DC48C(&__dst, (void *)__src, *((unint64_t *)&__src + 1));
                        }
                        else
                        {
                          __uuid_t dst = __src;
                          uint64_t v134 = v154;
                        }
                        if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
                          sub_1000DC48C(&v132, v157.__r_.__value_.__l.__data_, v157.__r_.__value_.__l.__size_);
                        }
                        else {
                          std::string v132 = v157;
                        }
                        if (SHIBYTE(v152) < 0)
                        {
                          sub_1000DC48C(&v130, (void *)__p, *((unint64_t *)&__p + 1));
                        }
                        else
                        {
                          long long v130 = __p;
                          v131 = v152;
                        }
                        sub_100134750(v128, "");
                        sub_100C8C574(buf, (uint64_t)&__dst, (uint64_t)&v132, (uint64_t)&v130, (uint64_t)v159, -1, (uint64_t)v128, 0, 0);
                        if (v129 < 0) {
                          operator delete(v128[0]);
                        }
                        if (SHIBYTE(v131) < 0) {
                          operator delete((void *)v130);
                        }
                        if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v132.__r_.__value_.__l.__data_);
                        }
                        if (SHIBYTE(v134) < 0) {
                          operator delete((void *)__dst);
                        }
                        if (HIBYTE(v156)) {
                          v168 |= 1uLL;
                        }
                        if ((_BYTE)v156) {
                          v168 |= 2uLL;
                        }
                        if (HIBYTE(v155)) {
                          v168 |= 4uLL;
                        }
                        if (v143) {
                          v168 |= 8uLL;
                        }
                        if ((_BYTE)v155) {
                          v168 |= 0x10uLL;
                        }
                        int v169 = v145;
                        __int16 v115 = *(void **)(*(void *)sub_1001ABD68(a1) + 16);
                        sub_10048AEC0((char *)v127, (long long *)buf);
                        [v115 requestRegionState:sub_100488290(v127)];
                        sub_100488394((uint64_t)v127);
                        sub_100488394((uint64_t)buf);
                        if (v159[0])
                        {
                          v159[1] = v159[0];
                          operator delete(v159[0]);
                        }
                        sub_10013F3C4(v164);
                        goto LABEL_473;
                      }
                      if (qword_102419520 != -1) {
                        dispatch_once(&qword_102419520, &stru_1022B3D28);
                      }
                      uint64_t v107 = qword_102419528;
                      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
                      {
                        *(_DWORD *)int buf = 67240448;
                        *(_DWORD *)&uint8_t buf[4] = v144;
                        *(_WORD *)&uint8_t buf[8] = 2050;
                        *(void *)&buf[10] = v100;
                        _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_FAULT, "Number of vertices received doesn't match stored, %{public}d, %{public}lu", buf, 0x12u);
                      }
                      if (!sub_10013D1A0(115, 0)) {
                        goto LABEL_334;
                      }
                      bzero(buf, 0x65CuLL);
                      if (qword_102419520 != -1) {
                        dispatch_once(&qword_102419520, &stru_1022B3D28);
                      }
                      LODWORD(v159[0]) = 67240448;
                      HIDWORD(v159[0]) = v144;
                      LOWORD(v159[1]) = 2050;
                      *(void **)((char *)&v159[1] + 2) = v100;
                      char v108 = (char *)_os_log_send_and_compose_impl();
                      sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v108);
                    }
                    else
                    {
                      if (qword_102419520 != -1) {
                        dispatch_once(&qword_102419520, &stru_1022B3D28);
                      }
                      int v96 = qword_102419528;
                      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
                      {
                        *(_DWORD *)int buf = 136446210;
                        *(void *)&uint8_t buf[4] = "kCLConnectionMessagePolygonalVerticesKey";
                        _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                      }
                      if (!sub_10013D1A0(115, 0)) {
                        goto LABEL_334;
                      }
                      bzero(buf, 0x65CuLL);
                      if (qword_102419520 != -1) {
                        dispatch_once(&qword_102419520, &stru_1022B3D28);
                      }
                      LODWORD(v159[0]) = 136446210;
                      *(void **)((char *)v159 + 4) = "kCLConnectionMessagePolygonalVerticesKey";
                      char v108 = (char *)_os_log_send_and_compose_impl();
                      sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v108);
                    }
                    if (v108 != buf) {
                      free(v108);
                    }
                    goto LABEL_334;
                  default:
LABEL_473:

                    goto LABEL_474;
                }
              }
              if (qword_102419520 != -1) {
                dispatch_once(&qword_102419520, &stru_1022B3D28);
              }
              uint64_t v19 = qword_102419528;
              if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
              {
                uint64_t v20 = *(void *)(a1 + 24);
                *(_DWORD *)int buf = 138543362;
                *(void *)&uint8_t buf[4] = v20;
                _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "Client %{public}@ does not have the appropriate entitlement to act as an emergency service", buf, 0xCu);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419520 != -1) {
                  dispatch_once(&qword_102419520, &stru_1022B3D28);
                }
                int v21 = *(void **)(a1 + 24);
                LODWORD(v159[0]) = 138543362;
                *(void **)((char *)v159 + 4) = v21;
                int v13 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v13);
LABEL_319:
                if (v13 != buf) {
                  free(v13);
                }
              }
            }
            else
            {
              if (qword_102419530 != -1) {
                dispatch_once(&qword_102419530, &stru_1022B3D48);
              }
              __int16 v18 = qword_102419538;
              if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
              {
                *(_DWORD *)int buf = 136446210;
                *(void *)&uint8_t buf[4] = "kCLConnectionMessageEmergencyKey";
                _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419530 != -1) {
                  dispatch_once(&qword_102419530, &stru_1022B3D48);
                }
                LODWORD(v159[0]) = 136446210;
                *(void **)((char *)v159 + 4) = "kCLConnectionMessageEmergencyKey";
                int v13 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v13);
                goto LABEL_319;
              }
            }
          }
          else
          {
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022B3D48);
            }
            int v17 = qword_102419538;
            if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "kCLConnectionMessageConservativeEntry";
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419530 != -1) {
                dispatch_once(&qword_102419530, &stru_1022B3D48);
              }
              LODWORD(v159[0]) = 136446210;
              *(void **)((char *)v159 + 4) = "kCLConnectionMessageConservativeEntry";
              int v13 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v13);
              goto LABEL_319;
            }
          }
        }
        else
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022B3D48);
          }
          __int16 v16 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "kCLConnectionMessageNotifyOnExitKey";
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022B3D48);
            }
            LODWORD(v159[0]) = 136446210;
            *(void **)((char *)v159 + 4) = "kCLConnectionMessageNotifyOnExitKey";
            int v13 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v13);
            goto LABEL_319;
          }
        }
      }
      else
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022B3D48);
        }
        __int16 v15 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "kCLConnectionMessageNotifyOnEntryKey";
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022B3D48);
          }
          LODWORD(v159[0]) = 136446210;
          *(void **)((char *)v159 + 4) = "kCLConnectionMessageNotifyOnEntryKey";
          int v13 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v13);
          goto LABEL_319;
        }
      }
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022B3D48);
      }
      __int16 v14 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "kCLConnectionMessageNameKey";
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022B3D48);
        }
        LODWORD(v159[0]) = 136446210;
        *(void **)((char *)v159 + 4) = "kCLConnectionMessageNameKey";
        int v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v13);
        goto LABEL_319;
      }
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022B3D48);
    }
    unsigned __int16 v12 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "kCLConnectionMessageRegionTypeKey";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022B3D48);
      }
      LODWORD(v159[0]) = 136446210;
      *(void **)((char *)v159 + 4) = "kCLConnectionMessageRegionTypeKey";
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v13);
      goto LABEL_319;
    }
  }
LABEL_65:
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v157.__r_.__value_.__l.__data_);
  }
}

void sub_10048276C(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x3C7]) < 0) {
    operator delete((void *)STACK[0x3B0]);
  }
  if (SLOBYTE(STACK[0x3EF]) < 0) {
    operator delete((void *)STACK[0x3D8]);
  }
  sub_10013F3C4(&STACK[0x3C8]);
  if (SLOBYTE(STACK[0x407]) < 0) {
    operator delete((void *)STACK[0x3F0]);
  }
  if (SLOBYTE(STACK[0x427]) < 0) {
    operator delete((void *)STACK[0x410]);
  }
  if (SLOBYTE(STACK[0x447]) < 0) {
    operator delete((void *)STACK[0x430]);
  }

  _Unwind_Resume(a1);
}

void sub_100482A94(uint64_t a1, BOOL a2, uint64_t a3)
{
  BOOL v189 = a2;
  id v5 = objc_alloc_init((Class)NSAutoreleasePool);
  int v188 = 0;
  CFStringRef v187 = 0;
  char v186 = 1;
  char v185 = 1;
  if (sub_10006EF84(a3, "kCLConnectionMessageRegionTypeKey", &v188))
  {
    if (sub_1000D2988(a3, "kCLConnectionMessageSubscribeKey", &v189))
    {
      if (sub_1004D12F8(a3, "kCLConnectionMessageNameKey", (CFTypeRef *)&v187))
      {
        if (sub_1000D2988(a3, "kCLConnectionMessageNotifyOnEntryKey", (BOOL *)&v186))
        {
          if (sub_1000D2988(a3, "kCLConnectionMessageNotifyOnExitKey", (BOOL *)&v185))
          {
            __int16 v184 = 0;
            if (sub_1000D2988(a3, "kCLConnectionMessageConservativeEntry", (BOOL *)&v184 + 1))
            {
              if (sub_1000D2988(a3, "kCLConnectionMessageEmergencyKey", (BOOL *)&v184))
              {
                if (!(_BYTE)v184 || (sub_100487AF8(a1) & 1) != 0)
                {
                  sub_1000FECE0(v187, (uint64_t)&v182);
                  sub_100134750(&__src, (char *)[objc_msgSend(*(id *)(a1 + 24), "legacyClientKey") UTF8String]);
                  sub_100134750(&__p, "");
                  sub_100134750(&__str, "");
                  if (sub_1004D1284(a3, "kCLConnectionMessageOnBehalfOfKey", &__str))
                  {
                    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                      std::string::size_type size = __str.__r_.__value_.__l.__size_;
                    }
                    if (size)
                    {
                      if ((sub_100487990(a1) & 1) == 0)
                      {
                        if (qword_102419520 != -1) {
                          dispatch_once(&qword_102419520, &stru_1022B3D28);
                        }
                        unsigned int v36 = qword_102419528;
                        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
                        {
                          uint64_t v37 = *(void *)(a1 + 24);
                          uint64_t p_p = (uint64_t)&__p;
                          if (SHIBYTE(v179) < 0) {
                            uint64_t p_p = __p;
                          }
                          *(_DWORD *)int buf = 138543618;
                          *(void *)&uint8_t buf[4] = v37;
                          *(_WORD *)&unsigned char buf[12] = 2082;
                          *(void *)&buf[14] = p_p;
                          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_FAULT, "Client %{public}@ does not have appropriate entitlement to act as a proxy service to %{public}s", buf, 0x16u);
                        }
                        if (sub_10013D1A0(115, 0))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_102419520 != -1) {
                            dispatch_once(&qword_102419520, &stru_1022B3D28);
                          }
                          int v39 = *(void **)(a1 + 24);
                          char v40 = &__p;
                          if (SHIBYTE(v179) < 0) {
                            char v40 = (long long *)__p;
                          }
                          LODWORD(v195[0]) = 138543618;
                          *(void **)((char *)v195 + 4) = v39;
                          WORD2(v195[1]) = 2082;
                          *(void **)((char *)&v195[1] + 6) = v40;
                          unsigned int v41 = (char *)_os_log_send_and_compose_impl();
                          sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v41);
                          if (v41 != buf) {
                            free(v41);
                          }
                        }
                        goto LABEL_425;
                      }
                      sub_1000B7144(&__str, (uint64_t)buf);
                      sub_1000A7FBC((uint64_t)buf, (uint64_t)v195);
                      if (SHIBYTE(v179) < 0) {
                        operator delete((void *)__p);
                      }
                      long long __p = *(_OWORD *)v195;
                      v179 = v195[2];
                      HIBYTE(v195[2]) = 0;
                      LOBYTE(v195[0]) = 0;
                      sub_1000064D0((uint64_t)buf);
                    }
                  }
                  else
                  {
                    if (qword_102419520 != -1) {
                      dispatch_once(&qword_102419520, &stru_1022B3D28);
                    }
                    __int16 v15 = qword_102419528;
                    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
                    {
                      uint64_t p_src = (uint64_t)&__src;
                      if (v181 < 0) {
                        uint64_t p_src = __src;
                      }
                      uint64_t v17 = (uint64_t)&v182;
                      if (v183 < 0) {
                        uint64_t v17 = v182;
                      }
                      *(_DWORD *)int buf = 136381187;
                      *(void *)&uint8_t buf[4] = "kCLConnectionMessageOnBehalfOfKey";
                      *(_WORD *)&unsigned char buf[12] = 2081;
                      *(void *)&buf[14] = p_src;
                      *(_WORD *)&unsigned char buf[22] = 2081;
                      *(void *)&unsigned char buf[24] = v17;
                      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Warning Couldn't get value for key %{private}s, %{private}s/%{private}s", buf, 0x20u);
                    }
                    if (sub_10013D1A0(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_102419520 != -1) {
                        dispatch_once(&qword_102419520, &stru_1022B3D28);
                      }
                      char v108 = &__src;
                      if (v181 < 0) {
                        char v108 = (long long *)__src;
                      }
                      uint64_t v109 = (uint64_t)&v182;
                      if (v183 < 0) {
                        uint64_t v109 = v182;
                      }
                      LODWORD(v195[0]) = 136381187;
                      *(void **)((char *)v195 + 4) = "kCLConnectionMessageOnBehalfOfKey";
                      WORD2(v195[1]) = 2081;
                      *(void **)((char *)&v195[1] + 6) = v108;
                      HIWORD(v195[2]) = 2081;
                      uint64_t v196 = v109;
                      v110 = (char *)_os_log_send_and_compose_impl();
                      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v110);
                      if (v110 != buf) {
                        free(v110);
                      }
                    }
                  }
                  sub_100134750(&v176, "");
                  sub_1004D1284(a3, "kCLConnectionMessageDeviceIDKey", &v176);
                  std::string::size_type v18 = HIBYTE(v176.__r_.__value_.__r.__words[2]);
                  if ((v176.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    std::string::size_type v18 = v176.__r_.__value_.__l.__size_;
                  }
                  if (v18)
                  {
                    if ((sub_100487BE8(a1) & 1) == 0)
                    {
                      if (qword_102419520 != -1) {
                        dispatch_once(&qword_102419520, &stru_1022B3D28);
                      }
                      id v32 = qword_102419528;
                      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
                      {
                        uint64_t v33 = *(void *)(a1 + 24);
                        *(_DWORD *)int buf = 138543362;
                        *(void *)&uint8_t buf[4] = v33;
                        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "#Warning #FenceHandoff %{public}@ does not have the appropriate entitlement for fence handoff service", buf, 0xCu);
                      }
                      if (sub_10013D1A0(115, 0))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_102419520 != -1) {
                          dispatch_once(&qword_102419520, &stru_1022B3D28);
                        }
                        uint64_t v34 = *(void **)(a1 + 24);
                        LODWORD(v195[0]) = 138543362;
                        *(void **)((char *)v195 + 4) = v34;
                        char v35 = (char *)_os_log_send_and_compose_impl();
                        sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v35);
                        if (v35 != buf) {
                          free(v35);
                        }
                      }
                      goto LABEL_423;
                    }
                    id v19 = objc_alloc((Class)NSUUID);
                    if ((v176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      uint64_t v20 = &v176;
                    }
                    else {
                      uint64_t v20 = (std::string *)v176.__r_.__value_.__r.__words[0];
                    }
                    id v21 = [v19 initWithUUIDString:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v20)];
                  }
                  sub_100134750(&v175, "");
                  sub_1004D1284(a3, "kCLConnectionMessageHandoffTagKey", &v175);
                  std::string::size_type v25 = HIBYTE(v176.__r_.__value_.__r.__words[2]);
                  if ((v176.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    std::string::size_type v25 = v176.__r_.__value_.__l.__size_;
                  }
                  if (v25)
                  {
                    std::string::size_type v26 = HIBYTE(v175.__r_.__value_.__r.__words[2]);
                    if ((v175.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                      std::string::size_type v26 = v175.__r_.__value_.__l.__size_;
                    }
                    if (!v26)
                    {
                      if (qword_102419520 != -1) {
                        dispatch_once(&qword_102419520, &stru_1022B3D28);
                      }
                      uint64_t v42 = qword_102419528;
                      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
                      {
                        uint64_t v43 = (uint64_t)&v182;
                        if (v183 < 0) {
                          uint64_t v43 = v182;
                        }
                        *(_DWORD *)int buf = 68289282;
                        *(_DWORD *)&uint8_t buf[4] = 0;
                        *(_WORD *)&uint8_t buf[8] = 2082;
                        *(void *)&buf[10] = "";
                        *(_WORD *)&unsigned char buf[18] = 2082;
                        *(void *)&buf[20] = v43;
                        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#FenceHandoff Handoff is empty for a handed of region\", \"fenceName\":%{public, location:escape_only}s}", buf, 0x1Cu);
                        if (qword_102419520 != -1) {
                          dispatch_once(&qword_102419520, &stru_1022B3D28);
                        }
                      }
                      char v44 = qword_102419528;
                      if (os_signpost_enabled((os_log_t)qword_102419528))
                      {
                        uint64_t v45 = (uint64_t)&v182;
                        if (v183 < 0) {
                          uint64_t v45 = v182;
                        }
                        *(_DWORD *)int buf = 68289282;
                        *(_DWORD *)&uint8_t buf[4] = 0;
                        *(_WORD *)&uint8_t buf[8] = 2082;
                        *(void *)&buf[10] = "";
                        *(_WORD *)&unsigned char buf[18] = 2082;
                        *(void *)&buf[20] = v45;
                        id v46 = "#FenceHandoff Handoff is empty for a handed of region";
                        id v47 = "{\"msg%{public}.0s\":\"#FenceHandoff Handoff is empty for a handed of region\", \"fenceNam"
                              "e\":%{public, location:escape_only}s}";
LABEL_167:
                        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v44, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v46, v47, buf, 0x1Cu);
                      }
                      goto LABEL_421;
                    }
                  }
                  switch(v188)
                  {
                    case 0:
                      sub_10048B0C8((uint64_t)v195, &__src, &v182, &__p);
                      if (sub_1004D1284(a3, "kCLConnectionMessageProximityUUIDKey", (std::string *)&v195[1]))
                      {
                        if (sub_1004D0240(a3, "kCLConnectionMessageMajorKey", &v197))
                        {
                          if (sub_1004D0240(a3, "kCLConnectionMessageMinorKey", &v198))
                          {
                            LODWORD(v174) = 0;
                            if (sub_10006EF84(a3, "kCLConnectionMessageRegionDefinitionKey", &v174))
                            {
                              *(_DWORD *)((char *)&v198 + 2) = v174 & 7;
                              LOBYTE(v173) = 0;
                              if (sub_1000D2988(a3, "kCLConnectionMessageNotifyEntryStateOnDisplayKey", (BOOL *)&v173))
                              {
                                if (v186) {
                                  v205 |= 1u;
                                }
                                if (v185) {
                                  v205 |= 2u;
                                }
                                if ((_BYTE)v173) {
                                  v205 |= 4u;
                                }
                                if (HIBYTE(v184)) {
                                  v205 |= 8u;
                                }
                                if (!v189)
                                {
                                  int v96 = *(void **)(*(void *)sub_1001ABCA8(a1) + 16);
                                  v134[0] = _NSConcreteStackBlock;
                                  v134[1] = 3321888768;
                                  v134[2] = sub_10048854C;
                                  v134[3] = &unk_1022B3CA8;
                                  id v49 = v135;
                                  sub_10048B9C8((uint64_t)v135, (uint64_t)v195);
                                  [v96 doAsync:v134];
                                  goto LABEL_408;
                                }
                                if (sub_101343E38((uint64_t)v195))
                                {
                                  id v48 = *(void **)(*(void *)sub_1001ABCA8(a1) + 16);
                                  v136[0] = _NSConcreteStackBlock;
                                  v136[1] = 3321888768;
                                  v136[2] = sub_100488504;
                                  v136[3] = &unk_1022B3CA8;
                                  id v49 = v137;
                                  sub_10048B9C8((uint64_t)v137, (uint64_t)v195);
                                  [v48 doAsync:v136];
                                  sub_1010A4BD4(a1);
LABEL_408:
                                  sub_100111F40((uint64_t)v49);
                                  sub_100111F40((uint64_t)v195);
                                  int v57 = 1;
                                  goto LABEL_397;
                                }
                                if (qword_102419520 != -1) {
                                  dispatch_once(&qword_102419520, &stru_1022B3D28);
                                }
                                __int16 v97 = qword_102419528;
                                if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
                                {
                                  uint64_t v98 = (uint64_t)&__p;
                                  if (SHIBYTE(v179) < 0) {
                                    uint64_t v98 = __p;
                                  }
                                  uint64_t v99 = (uint64_t)&__src;
                                  if (v181 < 0) {
                                    uint64_t v99 = __src;
                                  }
                                  uint64_t v100 = (uint64_t)&v182;
                                  if (v183 < 0) {
                                    uint64_t v100 = v182;
                                  }
                                  *(_DWORD *)int buf = 136446722;
                                  *(void *)&uint8_t buf[4] = v98;
                                  *(_WORD *)&unsigned char buf[12] = 2082;
                                  *(void *)&buf[14] = v99;
                                  *(_WORD *)&unsigned char buf[22] = 2082;
                                  *(void *)&unsigned char buf[24] = v100;
                                  _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_FAULT, "Invalid beacon region request [%{public}s]/%{public}s/%{public}s.", buf, 0x20u);
                                }
                                if (!sub_10013D1A0(115, 0)) {
                                  goto LABEL_420;
                                }
                                bzero(buf, 0x65CuLL);
                                if (qword_102419520 != -1) {
                                  dispatch_once(&qword_102419520, &stru_1022B3D28);
                                }
                                uint64_t v123 = (uint64_t)&__p;
                                if (SHIBYTE(v179) < 0) {
                                  uint64_t v123 = __p;
                                }
                                uint64_t v124 = (uint64_t)&__src;
                                if (v181 < 0) {
                                  uint64_t v124 = __src;
                                }
                                uint64_t v125 = (uint64_t)&v182;
                                if (v183 < 0) {
                                  uint64_t v125 = v182;
                                }
                                *(_DWORD *)v190 = 136446722;
                                *(void *)&v190[4] = v123;
                                __int16 v191 = 2082;
                                uint64_t v192 = v124;
                                __int16 v193 = 2082;
                                uint64_t v194 = v125;
                                id v64 = (char *)_os_log_send_and_compose_impl();
                                sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v64);
LABEL_580:
                                if (v64 != buf) {
                                  free(v64);
                                }
                                goto LABEL_420;
                              }
                              if (qword_102419520 != -1) {
                                dispatch_once(&qword_102419520, &stru_1022B3D28);
                              }
                              double v89 = qword_102419528;
                              if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
                              {
                                *(_DWORD *)int buf = 136446210;
                                *(void *)&uint8_t buf[4] = "kCLConnectionMessageNotifyEntryStateOnDisplayKey";
                                _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                              }
                              if (sub_10013D1A0(115, 0))
                              {
                                bzero(buf, 0x65CuLL);
                                if (qword_102419520 != -1) {
                                  dispatch_once(&qword_102419520, &stru_1022B3D28);
                                }
                                *(_DWORD *)v190 = 136446210;
                                *(void *)&v190[4] = "kCLConnectionMessageNotifyEntryStateOnDisplayKey";
                                id v64 = (char *)_os_log_send_and_compose_impl();
                                sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v64);
                                goto LABEL_580;
                              }
                            }
                            else
                            {
                              if (qword_102419520 != -1) {
                                dispatch_once(&qword_102419520, &stru_1022B3D28);
                              }
                              unint64_t v78 = qword_102419528;
                              if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
                              {
                                *(_DWORD *)int buf = 136446210;
                                *(void *)&uint8_t buf[4] = "kCLConnectionMessageRegionDefinitionKey";
                                _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                              }
                              if (sub_10013D1A0(115, 0))
                              {
                                bzero(buf, 0x65CuLL);
                                if (qword_102419520 != -1) {
                                  dispatch_once(&qword_102419520, &stru_1022B3D28);
                                }
                                *(_DWORD *)v190 = 136446210;
                                *(void *)&v190[4] = "kCLConnectionMessageRegionDefinitionKey";
                                id v64 = (char *)_os_log_send_and_compose_impl();
                                sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v64);
                                goto LABEL_580;
                              }
                            }
                          }
                          else
                          {
                            if (qword_102419520 != -1) {
                              dispatch_once(&qword_102419520, &stru_1022B3D28);
                            }
                            id v71 = qword_102419528;
                            if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
                            {
                              *(_DWORD *)int buf = 136446210;
                              *(void *)&uint8_t buf[4] = "kCLConnectionMessageMinorKey";
                              _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                            }
                            if (sub_10013D1A0(115, 0))
                            {
                              bzero(buf, 0x65CuLL);
                              if (qword_102419520 != -1) {
                                dispatch_once(&qword_102419520, &stru_1022B3D28);
                              }
                              *(_DWORD *)v190 = 136446210;
                              *(void *)&v190[4] = "kCLConnectionMessageMinorKey";
                              id v64 = (char *)_os_log_send_and_compose_impl();
                              sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v64);
                              goto LABEL_580;
                            }
                          }
                        }
                        else
                        {
                          if (qword_102419520 != -1) {
                            dispatch_once(&qword_102419520, &stru_1022B3D28);
                          }
                          uint64_t v70 = qword_102419528;
                          if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
                          {
                            *(_DWORD *)int buf = 136446210;
                            *(void *)&uint8_t buf[4] = "kCLConnectionMessageMajorKey";
                            _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                          }
                          if (sub_10013D1A0(115, 0))
                          {
                            bzero(buf, 0x65CuLL);
                            if (qword_102419520 != -1) {
                              dispatch_once(&qword_102419520, &stru_1022B3D28);
                            }
                            *(_DWORD *)v190 = 136446210;
                            *(void *)&v190[4] = "kCLConnectionMessageMajorKey";
                            id v64 = (char *)_os_log_send_and_compose_impl();
                            sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v64);
                            goto LABEL_580;
                          }
                        }
                      }
                      else
                      {
                        if (qword_102419520 != -1) {
                          dispatch_once(&qword_102419520, &stru_1022B3D28);
                        }
                        id v63 = qword_102419528;
                        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
                        {
                          *(_DWORD *)int buf = 136446210;
                          *(void *)&uint8_t buf[4] = "kCLConnectionMessageProximityUUIDKey";
                          _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                        }
                        if (sub_10013D1A0(115, 0))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_102419520 != -1) {
                            dispatch_once(&qword_102419520, &stru_1022B3D28);
                          }
                          *(_DWORD *)v190 = 136446210;
                          *(void *)&v190[4] = "kCLConnectionMessageProximityUUIDKey";
                          id v64 = (char *)_os_log_send_and_compose_impl();
                          sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v64);
                          goto LABEL_580;
                        }
                      }
LABEL_420:
                      sub_100111F40((uint64_t)v195);
LABEL_421:
                      if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v175.__r_.__value_.__l.__data_);
                      }
LABEL_423:
                      if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v176.__r_.__value_.__l.__data_);
                      }
LABEL_425:
                      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__str.__r_.__value_.__l.__data_);
                      }
                      if (SHIBYTE(v179) < 0) {
                        operator delete((void *)__p);
                      }
                      if (SHIBYTE(v181) < 0) {
                        operator delete((void *)__src);
                      }
                      if (SHIBYTE(v183) < 0) {
                        operator delete((void *)v182);
                      }
                      goto LABEL_433;
                    case 1:
                    case 3:
                      *(void *)v190 = 0;
                      uint64_t v174 = 0;
                      uint64_t v173 = 0;
                      uint64_t v172 = 0;
                      BOOL v171 = 0;
                      if (sub_1000D2988(a3, "kCLConnectionMessageMonitoringNearby", &v171))
                      {
                        int v27 = v188;
                        if (v188 == 3 && (sub_100487C60(a1) & 1) == 0)
                        {
                          if (qword_102419520 != -1) {
                            dispatch_once(&qword_102419520, &stru_1022B3D28);
                          }
                          char v67 = qword_102419528;
                          if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
                          {
                            uint64_t v68 = *(void *)(a1 + 24);
                            *(_DWORD *)int buf = 138543362;
                            *(void *)&uint8_t buf[4] = v68;
                            _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_FAULT, "Client %{public}@ does not have appropriate entitlement to use significant", buf, 0xCu);
                          }
                          if (sub_10013D1A0(115, 0))
                          {
                            bzero(buf, 0x65CuLL);
                            if (qword_102419520 != -1) {
                              dispatch_once(&qword_102419520, &stru_1022B3D28);
                            }
                            uint64_t v69 = *(void **)(a1 + 24);
                            LODWORD(v195[0]) = 138543362;
                            *(void **)((char *)v195 + 4) = v69;
                            uint64_t v59 = (char *)_os_log_send_and_compose_impl();
                            sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v59);
                            goto LABEL_522;
                          }
                        }
                        else
                        {
                          BOOL v170 = 0;
                          if (sub_1000D2988(a3, "kCLConnectionMessageLowPowerFenceKey", &v170))
                          {
                            if (v170 && (sub_100487B70(a1) & 1) == 0)
                            {
                              if (qword_102419520 != -1) {
                                dispatch_once(&qword_102419520, &stru_1022B3D28);
                              }
                              id v72 = qword_102419528;
                              if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
                              {
                                uint64_t v73 = *(void *)(a1 + 24);
                                *(_DWORD *)int buf = 138543362;
                                *(void *)&uint8_t buf[4] = v73;
                                _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_FAULT, "Client %{public}@ does not have appropriate entitlement to use low power fence", buf, 0xCu);
                              }
                              if (sub_10013D1A0(115, 0))
                              {
                                bzero(buf, 0x65CuLL);
                                if (qword_102419520 != -1) {
                                  dispatch_once(&qword_102419520, &stru_1022B3D28);
                                }
                                CFDictionaryRef v74 = *(void **)(a1 + 24);
                                LODWORD(v195[0]) = 138543362;
                                *(void **)((char *)v195 + 4) = v74;
                                uint64_t v59 = (char *)_os_log_send_and_compose_impl();
                                sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v59);
                                goto LABEL_522;
                              }
                            }
                            else
                            {
                              sub_1004CE798(a1 + 72, a3);
                              *(unsigned char *)(a1 + 65) = 1;
                              if (!*(unsigned char *)(a1 + 64)) {
                                goto LABEL_396;
                              }
                              if (!v189)
                              {
                                if (qword_1024193C0 != -1) {
                                  dispatch_once(&qword_1024193C0, &stru_1022B3D68);
                                }
                                BOOL v79 = qword_1024193C8;
                                if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
                                {
                                  uint64_t v80 = (uint64_t)&__p;
                                  if (SHIBYTE(v179) < 0) {
                                    uint64_t v80 = __p;
                                  }
                                  uint64_t v81 = (uint64_t)&__src;
                                  if (v181 < 0) {
                                    uint64_t v81 = __src;
                                  }
                                  uint64_t v82 = (uint64_t)&v182;
                                  if (v183 < 0) {
                                    uint64_t v82 = v182;
                                  }
                                  *(_DWORD *)int buf = 136446723;
                                  *(void *)&uint8_t buf[4] = v80;
                                  *(_WORD *)&unsigned char buf[12] = 2082;
                                  *(void *)&buf[14] = v81;
                                  *(_WORD *)&unsigned char buf[22] = 2081;
                                  *(void *)&unsigned char buf[24] = v82;
                                  _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "Removing geographic fence [%{public}s]/%{public}s/%{private}s", buf, 0x20u);
                                }
                                if (sub_10013D1A0(115, 2))
                                {
                                  bzero(buf, 0x65CuLL);
                                  if (qword_1024193C0 != -1) {
                                    dispatch_once(&qword_1024193C0, &stru_1022B3D68);
                                  }
                                  __int16 v115 = &__p;
                                  if (SHIBYTE(v179) < 0) {
                                    __int16 v115 = (long long *)__p;
                                  }
                                  double v116 = &__src;
                                  if (v181 < 0) {
                                    double v116 = (long long *)__src;
                                  }
                                  uint64_t v117 = (uint64_t)&v182;
                                  if (v183 < 0) {
                                    uint64_t v117 = v182;
                                  }
                                  LODWORD(v195[0]) = 136446723;
                                  *(void **)((char *)v195 + 4) = v115;
                                  WORD2(v195[1]) = 2082;
                                  *(void **)((char *)&v195[1] + 6) = v116;
                                  HIWORD(v195[2]) = 2081;
                                  uint64_t v196 = v117;
                                  uint64_t v118 = (char *)_os_log_send_and_compose_impl();
                                  sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v118);
                                  if (v118 != buf) {
                                    free(v118);
                                  }
                                }
                                if (SHIBYTE(v181) < 0)
                                {
                                  sub_1000DC48C(&__dst, (void *)__src, *((unint64_t *)&__src + 1));
                                }
                                else
                                {
                                  __uuid_t dst = __src;
                                  uint64_t v160 = v181;
                                }
                                if (SHIBYTE(v183) < 0)
                                {
                                  sub_1000DC48C(&v157, (void *)v182, *((unint64_t *)&v182 + 1));
                                }
                                else
                                {
                                  long long v157 = v182;
                                  uint64_t v158 = v183;
                                }
                                if (SHIBYTE(v179) < 0)
                                {
                                  sub_1000DC48C(&v155, (void *)__p, *((unint64_t *)&__p + 1));
                                }
                                else
                                {
                                  long long v155 = __p;
                                  __int16 v156 = v179;
                                }
                                sub_100110A5C(buf, (uint64_t)&__dst, (uint64_t)&v157, (uint64_t)&v155);
                                if (SHIBYTE(v156) < 0) {
                                  operator delete((void *)v155);
                                }
                                if (SHIBYTE(v158) < 0) {
                                  operator delete((void *)v157);
                                }
                                if (SHIBYTE(v160) < 0) {
                                  operator delete((void *)__dst);
                                }
                                int v91 = *(void **)(*(void *)sub_1001ABD68(a1) + 16);
                                sub_10048AEC0((char *)v154, (long long *)buf);
                                [v91 removeFence:sub_100488290(v154)];
                                double v92 = v154;
                                goto LABEL_394;
                              }
                              if (sub_1000A699C(a3, "kCLConnectionMessageLatitudeKey", v190))
                              {
                                if (sub_1000A699C(a3, "kCLConnectionMessageLongitudeKey", &v174))
                                {
                                  if (sub_1000A699C(a3, "kCLConnectionMessageRadiusKey", &v173))
                                  {
                                    if (sub_1000A699C(a3, "kCLConnectionMessageDesiredAccuracyKey", &v172))
                                    {
                                      *(_DWORD *)int v169 = 0;
                                      if (sub_10006EF84(a3, "kCLConnectionMessageReferenceFrameKey", v169))
                                      {
                                        if (qword_1024193C0 != -1) {
                                          dispatch_once(&qword_1024193C0, &stru_1022B3D68);
                                        }
                                        std::string::size_type v28 = qword_1024193C8;
                                        if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
                                        {
                                          uint64_t v29 = (uint64_t)&__p;
                                          if (SHIBYTE(v179) < 0) {
                                            uint64_t v29 = __p;
                                          }
                                          uint64_t v30 = (uint64_t)&__src;
                                          if (v181 < 0) {
                                            uint64_t v30 = __src;
                                          }
                                          uint64_t v31 = (uint64_t)&v182;
                                          if (v183 < 0) {
                                            uint64_t v31 = v182;
                                          }
                                          *(_DWORD *)int buf = 136447747;
                                          *(void *)&uint8_t buf[4] = v29;
                                          *(_WORD *)&unsigned char buf[12] = 2082;
                                          *(void *)&buf[14] = v30;
                                          *(_WORD *)&unsigned char buf[22] = 2081;
                                          *(void *)&unsigned char buf[24] = v31;
                                          __int16 v207 = 2049;
                                          uint64_t v208 = *(void *)v190;
                                          __int16 v209 = 2049;
                                          uint64_t v210 = v174;
                                          __int16 v211 = 2050;
                                          uint64_t v212 = v173;
                                          __int16 v213 = 2050;
                                          uint64_t v214 = v172;
                                          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Adding geographic fence [%{public}s]/%{public}s/%{private}s, center, %{private}f, %{private}f, radius, %{public}.2f, desiredAccuracy, %{public}.2f", buf, 0x48u);
                                        }
                                        if (sub_10013D1A0(115, 2))
                                        {
                                          bzero(buf, 0x65CuLL);
                                          if (qword_1024193C0 != -1) {
                                            dispatch_once(&qword_1024193C0, &stru_1022B3D68);
                                          }
                                          long long v130 = &__p;
                                          if (SHIBYTE(v179) < 0) {
                                            long long v130 = (long long *)__p;
                                          }
                                          v131 = &__src;
                                          if (v181 < 0) {
                                            v131 = (long long *)__src;
                                          }
                                          uint64_t v132 = (uint64_t)&v182;
                                          if (v183 < 0) {
                                            uint64_t v132 = v182;
                                          }
                                          LODWORD(v195[0]) = 136447747;
                                          *(void **)((char *)v195 + 4) = v130;
                                          WORD2(v195[1]) = 2082;
                                          *(void **)((char *)&v195[1] + 6) = v131;
                                          HIWORD(v195[2]) = 2081;
                                          uint64_t v196 = v132;
                                          __int16 v197 = 2049;
                                          uint64_t v198 = *(void *)v190;
                                          __int16 v199 = 2049;
                                          uint64_t v200 = v174;
                                          __int16 v201 = 2050;
                                          uint64_t v202 = v173;
                                          __int16 v203 = 2050;
                                          uint64_t v204 = v172;
                                          v133 = (char *)_os_log_send_and_compose_impl();
                                          sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v133);
                                          if (v133 != buf) {
                                            free(v133);
                                          }
                                        }
                                        if (SHIBYTE(v181) < 0)
                                        {
                                          sub_1000DC48C(&v167, (void *)__src, *((unint64_t *)&__src + 1));
                                        }
                                        else
                                        {
                                          long long v167 = __src;
                                          uint64_t v168 = v181;
                                        }
                                        if (SHIBYTE(v183) < 0)
                                        {
                                          sub_1000DC48C(&v165, (void *)v182, *((unint64_t *)&v182 + 1));
                                        }
                                        else
                                        {
                                          long long v165 = v182;
                                          uint64_t v166 = v183;
                                        }
                                        if (SHIBYTE(v179) < 0)
                                        {
                                          sub_1000DC48C(&v163, (void *)__p, *((unint64_t *)&__p + 1));
                                        }
                                        else
                                        {
                                          long long v163 = __p;
                                          v164 = v179;
                                        }
                                        if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
                                          sub_1000DC48C(&v162, v175.__r_.__value_.__l.__data_, v175.__r_.__value_.__l.__size_);
                                        }
                                        else {
                                          std::string v162 = v175;
                                        }
                                        sub_100C8C570(buf);
                                        if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
                                          operator delete(v162.__r_.__value_.__l.__data_);
                                        }
                                        if (SHIBYTE(v164) < 0) {
                                          operator delete((void *)v163);
                                        }
                                        if (SHIBYTE(v166) < 0) {
                                          operator delete((void *)v165);
                                        }
                                        if (SHIBYTE(v168) < 0) {
                                          operator delete((void *)v167);
                                        }
                                        if (v186) {
                                          v215 |= 1uLL;
                                        }
                                        if (v185) {
                                          v215 |= 2uLL;
                                        }
                                        if (v170) {
                                          v215 |= 0x20uLL;
                                        }
                                        if (v27 == 3) {
                                          v215 |= 0x80uLL;
                                        }
                                        if (HIBYTE(v184)) {
                                          v215 |= 4uLL;
                                        }
                                        if ((_BYTE)v184) {
                                          v215 |= 0x10uLL;
                                        }
                                        if (v171) {
                                          v215 |= 0x40uLL;
                                        }
                                        int v216 = *(_DWORD *)v169;
                                        int v112 = *(void **)(*(void *)sub_1001ABD68(a1) + 16);
                                        sub_10048AEC0((char *)v161, (long long *)buf);
                                        [v112 addFence:sub_100488290(v161)];
                                        sub_100488394((uint64_t)v161);
                                        sub_1010A4BD4(a1);
                                        goto LABEL_395;
                                      }
                                      if (qword_102419520 != -1) {
                                        dispatch_once(&qword_102419520, &stru_1022B3D28);
                                      }
                                      uint64_t v103 = qword_102419528;
                                      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
                                      {
                                        *(_DWORD *)int buf = 136446210;
                                        *(void *)&uint8_t buf[4] = "kCLConnectionMessageReferenceFrameKey";
                                        _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                                      }
                                      if (sub_10013D1A0(115, 0))
                                      {
                                        bzero(buf, 0x65CuLL);
                                        if (qword_102419520 != -1) {
                                          goto LABEL_602;
                                        }
                                        goto LABEL_341;
                                      }
                                    }
                                    else
                                    {
                                      if (qword_102419520 != -1) {
                                        dispatch_once(&qword_102419520, &stru_1022B3D28);
                                      }
                                      uint64_t v102 = qword_102419528;
                                      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
                                      {
                                        *(_DWORD *)int buf = 136446210;
                                        *(void *)&uint8_t buf[4] = "kCLConnectionMessageDesiredAccuracyKey";
                                        _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                                      }
                                      if (sub_10013D1A0(115, 0))
                                      {
                                        bzero(buf, 0x65CuLL);
                                        if (qword_102419520 != -1) {
                                          dispatch_once(&qword_102419520, &stru_1022B3D28);
                                        }
                                        LODWORD(v195[0]) = 136446210;
                                        *(void **)((char *)v195 + 4) = "kCLConnectionMessageDesiredAccuracyKey";
                                        uint64_t v59 = (char *)_os_log_send_and_compose_impl();
                                        sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v59);
                                        goto LABEL_522;
                                      }
                                    }
                                  }
                                  else
                                  {
                                    if (qword_102419520 != -1) {
                                      dispatch_once(&qword_102419520, &stru_1022B3D28);
                                    }
                                    __int16 v95 = qword_102419528;
                                    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
                                    {
                                      *(_DWORD *)int buf = 136446210;
                                      *(void *)&uint8_t buf[4] = "kCLConnectionMessageRadiusKey";
                                      _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                                    }
                                    if (sub_10013D1A0(115, 0))
                                    {
                                      bzero(buf, 0x65CuLL);
                                      if (qword_102419520 != -1) {
                                        dispatch_once(&qword_102419520, &stru_1022B3D28);
                                      }
                                      LODWORD(v195[0]) = 136446210;
                                      *(void **)((char *)v195 + 4) = "kCLConnectionMessageRadiusKey";
                                      uint64_t v59 = (char *)_os_log_send_and_compose_impl();
                                      sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v59);
                                      goto LABEL_522;
                                    }
                                  }
                                }
                                else
                                {
                                  if (qword_102419520 != -1) {
                                    dispatch_once(&qword_102419520, &stru_1022B3D28);
                                  }
                                  long long v90 = qword_102419528;
                                  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
                                  {
                                    *(_DWORD *)int buf = 136446210;
                                    *(void *)&uint8_t buf[4] = "kCLConnectionMessageLongitudeKey";
                                    _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                                  }
                                  if (sub_10013D1A0(115, 0))
                                  {
                                    bzero(buf, 0x65CuLL);
                                    if (qword_102419520 != -1) {
                                      dispatch_once(&qword_102419520, &stru_1022B3D28);
                                    }
                                    LODWORD(v195[0]) = 136446210;
                                    *(void **)((char *)v195 + 4) = "kCLConnectionMessageLongitudeKey";
                                    uint64_t v59 = (char *)_os_log_send_and_compose_impl();
                                    sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v59);
                                    goto LABEL_522;
                                  }
                                }
                              }
                              else
                              {
                                if (qword_102419520 != -1) {
                                  dispatch_once(&qword_102419520, &stru_1022B3D28);
                                }
                                uint64_t v83 = qword_102419528;
                                if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
                                {
                                  *(_DWORD *)int buf = 136446210;
                                  *(void *)&uint8_t buf[4] = "kCLConnectionMessageLatitudeKey";
                                  _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                                }
                                if (sub_10013D1A0(115, 0))
                                {
                                  bzero(buf, 0x65CuLL);
                                  if (qword_102419520 != -1) {
                                    dispatch_once(&qword_102419520, &stru_1022B3D28);
                                  }
                                  LODWORD(v195[0]) = 136446210;
                                  *(void **)((char *)v195 + 4) = "kCLConnectionMessageLatitudeKey";
                                  uint64_t v59 = (char *)_os_log_send_and_compose_impl();
                                  sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v59);
                                  goto LABEL_522;
                                }
                              }
                            }
                          }
                          else
                          {
                            if (qword_102419520 != -1) {
                              dispatch_once(&qword_102419520, &stru_1022B3D28);
                            }
                            id v65 = qword_102419528;
                            if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
                            {
                              *(_DWORD *)int buf = 136446210;
                              *(void *)&uint8_t buf[4] = "kCLConnectionMessageLowPowerFenceKey";
                              _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                            }
                            if (sub_10013D1A0(115, 0))
                            {
                              bzero(buf, 0x65CuLL);
                              if (qword_102419520 != -1) {
                                dispatch_once(&qword_102419520, &stru_1022B3D28);
                              }
                              LODWORD(v195[0]) = 136446210;
                              *(void **)((char *)v195 + 4) = "kCLConnectionMessageLowPowerFenceKey";
                              uint64_t v59 = (char *)_os_log_send_and_compose_impl();
                              sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v59);
                              goto LABEL_522;
                            }
                          }
                        }
                      }
                      else
                      {
                        if (qword_102419520 != -1) {
                          dispatch_once(&qword_102419520, &stru_1022B3D28);
                        }
                        uint64_t v58 = qword_102419528;
                        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
                        {
                          *(_DWORD *)int buf = 136446210;
                          *(void *)&uint8_t buf[4] = "kCLConnectionMessageMonitoringNearby";
                          _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                        }
                        if (sub_10013D1A0(115, 0))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_102419520 != -1) {
                            dispatch_once(&qword_102419520, &stru_1022B3D28);
                          }
                          LODWORD(v195[0]) = 136446210;
                          *(void **)((char *)v195 + 4) = "kCLConnectionMessageMonitoringNearby";
                          uint64_t v59 = (char *)_os_log_send_and_compose_impl();
                          sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v59);
                          goto LABEL_522;
                        }
                      }
                      goto LABEL_421;
                    case 2:
                      if (sub_100487A80(a1))
                      {
                        v169[0] = 0;
                        if (sub_1000D2988(a3, "kCLConnectionMessageMonitoringNearby", v169))
                        {
                          if (v169[0] && (sub_100487A08(a1) & 1) == 0)
                          {
                            if (qword_102419520 != -1) {
                              dispatch_once(&qword_102419520, &stru_1022B3D28);
                            }
                            uint64_t v75 = qword_102419528;
                            if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
                            {
                              uint64_t v76 = *(void *)(a1 + 24);
                              *(_DWORD *)int buf = 138543362;
                              *(void *)&uint8_t buf[4] = v76;
                              _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_FAULT, "Client %{public}@ does not have appropriate entitlement to monitor while nearby", buf, 0xCu);
                            }
                            if (!sub_10013D1A0(115, 0)) {
                              goto LABEL_421;
                            }
                            bzero(buf, 0x65CuLL);
                            if (qword_102419520 != -1) {
                              dispatch_once(&qword_102419520, &stru_1022B3D28);
                            }
                            BOOL v77 = *(void **)(a1 + 24);
                            LODWORD(v195[0]) = 138543362;
                            *(void **)((char *)v195 + 4) = v77;
                            uint64_t v59 = (char *)_os_log_send_and_compose_impl();
                            sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v59);
                          }
                          else
                          {
                            if (!*(unsigned char *)(a1 + 64)) {
                              goto LABEL_396;
                            }
                            if (!v189)
                            {
                              if (qword_1024193C0 != -1) {
                                dispatch_once(&qword_1024193C0, &stru_1022B3D68);
                              }
                              uint64_t v84 = qword_1024193C8;
                              if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
                              {
                                uint64_t v85 = (uint64_t)&__p;
                                if (SHIBYTE(v179) < 0) {
                                  uint64_t v85 = __p;
                                }
                                uint64_t v86 = (uint64_t)&__src;
                                if (v181 < 0) {
                                  uint64_t v86 = __src;
                                }
                                uint64_t v87 = (uint64_t)&v182;
                                if (v183 < 0) {
                                  uint64_t v87 = v182;
                                }
                                *(_DWORD *)int buf = 136446723;
                                *(void *)&uint8_t buf[4] = v85;
                                *(_WORD *)&unsigned char buf[12] = 2082;
                                *(void *)&buf[14] = v86;
                                *(_WORD *)&unsigned char buf[22] = 2081;
                                *(void *)&unsigned char buf[24] = v87;
                                _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEBUG, "Removing geographic polygonal fence [%{public}s]/%{public}s/%{private}s", buf, 0x20u);
                              }
                              if (sub_10013D1A0(115, 2))
                              {
                                bzero(buf, 0x65CuLL);
                                if (qword_1024193C0 != -1) {
                                  dispatch_once(&qword_1024193C0, &stru_1022B3D68);
                                }
                                __int16 v119 = &__p;
                                if (SHIBYTE(v179) < 0) {
                                  __int16 v119 = (long long *)__p;
                                }
                                int v120 = &__src;
                                if (v181 < 0) {
                                  int v120 = (long long *)__src;
                                }
                                uint64_t v121 = (uint64_t)&v182;
                                if (v183 < 0) {
                                  uint64_t v121 = v182;
                                }
                                LODWORD(v195[0]) = 136446723;
                                *(void **)((char *)v195 + 4) = v119;
                                WORD2(v195[1]) = 2082;
                                *(void **)((char *)&v195[1] + 6) = v120;
                                HIWORD(v195[2]) = 2081;
                                uint64_t v196 = v121;
                                int v122 = (char *)_os_log_send_and_compose_impl();
                                sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v122);
                                if (v122 != buf) {
                                  free(v122);
                                }
                              }
                              if (SHIBYTE(v181) < 0)
                              {
                                sub_1000DC48C(&v143, (void *)__src, *((unint64_t *)&__src + 1));
                              }
                              else
                              {
                                long long v143 = __src;
                                uint64_t v144 = v181;
                              }
                              if (SHIBYTE(v183) < 0)
                              {
                                sub_1000DC48C(&v141, (void *)v182, *((unint64_t *)&v182 + 1));
                              }
                              else
                              {
                                long long v141 = v182;
                                uint64_t v142 = v183;
                              }
                              if (SHIBYTE(v179) < 0)
                              {
                                sub_1000DC48C(&v139, (void *)__p, *((unint64_t *)&__p + 1));
                              }
                              else
                              {
                                long long v139 = __p;
                                long long v140 = v179;
                              }
                              sub_100110A5C(buf, (uint64_t)&v143, (uint64_t)&v141, (uint64_t)&v139);
                              if (SHIBYTE(v140) < 0) {
                                operator delete((void *)v139);
                              }
                              if (SHIBYTE(v142) < 0) {
                                operator delete((void *)v141);
                              }
                              if (SHIBYTE(v144) < 0) {
                                operator delete((void *)v143);
                              }
                              int v94 = *(void **)(*(void *)sub_1001ABD68(a1) + 16);
                              sub_10048AEC0((char *)v138, (long long *)buf);
                              [v94 removeFence:sub_100488290(v138)];
                              double v92 = v138;
LABEL_394:
                              sub_100488394((uint64_t)v92);
LABEL_395:
                              sub_100488394((uint64_t)buf);
                              goto LABEL_396;
                            }
                            LODWORD(v173) = 0;
                            LODWORD(v172) = 0;
                            *(void *)v190 = 0;
                            if (sub_10006EF84(a3, "kCLConnectionMessageReferenceFrameKey", &v173))
                            {
                              if (sub_10006EF84(a3, "kCLConnectionMessagePolygonalVerticesCountKey", &v172))
                              {
                                if (sub_1004D2028(a3, @"kCLConnectionMessagePolygonalVerticesKey", (CFTypeRef *)v190))
                                {
                                  if (qword_1024193C0 != -1) {
                                    dispatch_once(&qword_1024193C0, &stru_1022B3D68);
                                  }
                                  id v50 = qword_1024193C8;
                                  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
                                  {
                                    uint64_t v51 = (uint64_t)&__p;
                                    if (SHIBYTE(v179) < 0) {
                                      uint64_t v51 = __p;
                                    }
                                    uint64_t v52 = (uint64_t)&__src;
                                    if (v181 < 0) {
                                      uint64_t v52 = __src;
                                    }
                                    uint64_t v53 = (uint64_t)&v182;
                                    if (v183 < 0) {
                                      uint64_t v53 = v182;
                                    }
                                    *(_DWORD *)int buf = 136446723;
                                    *(void *)&uint8_t buf[4] = v51;
                                    *(_WORD *)&unsigned char buf[12] = 2082;
                                    *(void *)&buf[14] = v52;
                                    *(_WORD *)&unsigned char buf[22] = 2081;
                                    *(void *)&unsigned char buf[24] = v53;
                                    _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "Adding geographic polygonal fence [%{public}s]/%{public}s/%{private}s", buf, 0x20u);
                                  }
                                  if (sub_10013D1A0(115, 2))
                                  {
                                    bzero(buf, 0x65CuLL);
                                    if (qword_1024193C0 != -1) {
                                      dispatch_once(&qword_1024193C0, &stru_1022B3D68);
                                    }
                                    v126 = &__p;
                                    if (SHIBYTE(v179) < 0) {
                                      v126 = (long long *)__p;
                                    }
                                    v127 = &__src;
                                    if (v181 < 0) {
                                      v127 = (long long *)__src;
                                    }
                                    uint64_t v128 = (uint64_t)&v182;
                                    if (v183 < 0) {
                                      uint64_t v128 = v182;
                                    }
                                    LODWORD(v195[0]) = 136446723;
                                    *(void **)((char *)v195 + 4) = v126;
                                    WORD2(v195[1]) = 2082;
                                    *(void **)((char *)&v195[1] + 6) = v127;
                                    HIWORD(v195[2]) = 2081;
                                    uint64_t v196 = v128;
                                    char v129 = (char *)_os_log_send_and_compose_impl();
                                    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v129);
                                    if (v129 != buf) {
                                      free(v129);
                                    }
                                  }
                                  uint64_t v174 = 0;
                                  unint64_t v54 = +[NSKeyedUnarchiver unarchivedArrayOfObjectsOfClass:objc_opt_class() fromData:*(void *)v190 error:&v174];
                                  id v55 = [(NSArray *)v54 count];
                                  if (v174)
                                  {
                                    if (qword_102419520 != -1) {
                                      dispatch_once(&qword_102419520, &stru_1022B3D28);
                                    }
                                    unint64_t v56 = qword_102419528;
                                    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
                                    {
                                      *(_DWORD *)int buf = 68289282;
                                      *(_DWORD *)&uint8_t buf[4] = 0;
                                      *(_WORD *)&uint8_t buf[8] = 2082;
                                      *(void *)&buf[10] = "";
                                      *(_WORD *)&unsigned char buf[18] = 2114;
                                      *(void *)&buf[20] = v174;
                                      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unable to get vertices from data in handleRequestRegionMonitoring\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
                                      if (qword_102419520 != -1) {
                                        dispatch_once(&qword_102419520, &stru_1022B3D28);
                                      }
                                    }
                                    char v44 = qword_102419528;
                                    if (os_signpost_enabled((os_log_t)qword_102419528))
                                    {
                                      *(_DWORD *)int buf = 68289282;
                                      *(_DWORD *)&uint8_t buf[4] = 0;
                                      *(_WORD *)&uint8_t buf[8] = 2082;
                                      *(void *)&buf[10] = "";
                                      *(_WORD *)&unsigned char buf[18] = 2114;
                                      *(void *)&buf[20] = v174;
                                      id v46 = "Unable to get vertices from data in handleRequestRegionMonitoring";
                                      id v47 = "{\"msg%{public}.0s\":\"Unable to get vertices from data in handleRequestRegi"
                                            "onMonitoring\", \"error\":%{public, location:escape_only}@}";
                                      goto LABEL_167;
                                    }
                                    goto LABEL_421;
                                  }
                                  int v104 = v55;
                                  if (v172 == v55)
                                  {
                                    if (kCLPolygonalRegionMinVertices <= (unint64_t)(int)v172
                                      && kCLPolygonalRegionMaxVertices >= (unint64_t)(int)v172)
                                    {
                                      memset(v195, 0, sizeof(v195));
                                      sub_100231E88(v195, (int)v172);
                                      if ((int)v172 >= 1)
                                      {
                                        uint64_t v105 = 0;
                                        do
                                        {
                                          [[-[NSArray objectAtIndexedSubscript:](v54, "objectAtIndexedSubscript:", v105) coordinate];
                                          *(void *)int buf = v106;
                                          [v54[v105 coordinate]];
                                          *(void *)&uint8_t buf[8] = v107;
                                          sub_100488414(v195, buf);
                                          ++v105;
                                        }
                                        while (v105 < (int)v172);
                                      }
                                      if (SHIBYTE(v181) < 0)
                                      {
                                        sub_1000DC48C(&v152, (void *)__src, *((unint64_t *)&__src + 1));
                                      }
                                      else
                                      {
                                        long long v152 = __src;
                                        uint64_t v153 = v181;
                                      }
                                      if (SHIBYTE(v183) < 0)
                                      {
                                        sub_1000DC48C(&v150, (void *)v182, *((unint64_t *)&v182 + 1));
                                      }
                                      else
                                      {
                                        long long v150 = v182;
                                        uint64_t v151 = v183;
                                      }
                                      if (SHIBYTE(v179) < 0)
                                      {
                                        sub_1000DC48C(&v148, (void *)__p, *((unint64_t *)&__p + 1));
                                      }
                                      else
                                      {
                                        long long v148 = __p;
                                        v149 = v179;
                                      }
                                      sub_100134750(v146, "");
                                      sub_100C8C574(buf, (uint64_t)&v152, (uint64_t)&v150, (uint64_t)&v148, (uint64_t)v195, -1, (uint64_t)v146, 0, 0);
                                      if (v147 < 0) {
                                        operator delete(v146[0]);
                                      }
                                      if (SHIBYTE(v149) < 0) {
                                        operator delete((void *)v148);
                                      }
                                      if (SHIBYTE(v151) < 0) {
                                        operator delete((void *)v150);
                                      }
                                      if (SHIBYTE(v153) < 0) {
                                        operator delete((void *)v152);
                                      }
                                      if (v186) {
                                        v215 |= 1uLL;
                                      }
                                      if (v185) {
                                        v215 |= 2uLL;
                                      }
                                      if (HIBYTE(v184)) {
                                        v215 |= 4uLL;
                                      }
                                      if (v169[0]) {
                                        v215 |= 8uLL;
                                      }
                                      if ((_BYTE)v184) {
                                        v215 |= 0x10uLL;
                                      }
                                      int v216 = v173;
                                      int v114 = *(void **)(*(void *)sub_1001ABD68(a1) + 16);
                                      sub_10048AEC0((char *)v145, (long long *)buf);
                                      [v114 addFence:sub_100488290(v145)];
                                      sub_100488394((uint64_t)v145);
                                      sub_1010A4BD4(a1);
                                      sub_100488394((uint64_t)buf);
                                      if (v195[0])
                                      {
                                        v195[1] = v195[0];
                                        operator delete(v195[0]);
                                      }
LABEL_396:
                                      int v57 = 1;
LABEL_397:
                                      if ((v57 & sub_10009C834(a1)) == 1) {
                                        sub_1001978C8(a1);
                                      }
                                      goto LABEL_421;
                                    }
                                    if (qword_102419520 != -1) {
                                      dispatch_once(&qword_102419520, &stru_1022B3D28);
                                    }
                                    __int16 v113 = qword_102419528;
                                    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
                                    {
                                      *(_DWORD *)int buf = 67240192;
                                      *(_DWORD *)&uint8_t buf[4] = v172;
                                      _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_FAULT, "Number of vertices received invalid, %{public}d, monitoring", buf, 8u);
                                    }
                                    if (!sub_10013D1A0(115, 0)) {
                                      goto LABEL_421;
                                    }
                                    bzero(buf, 0x65CuLL);
                                    if (qword_102419520 != -1) {
                                      dispatch_once(&qword_102419520, &stru_1022B3D28);
                                    }
                                    LODWORD(v195[0]) = 67240192;
                                    HIDWORD(v195[0]) = v172;
                                    uint64_t v59 = (char *)_os_log_send_and_compose_impl();
                                    sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v59);
                                  }
                                  else
                                  {
                                    if (qword_102419520 != -1) {
                                      dispatch_once(&qword_102419520, &stru_1022B3D28);
                                    }
                                    __int16 v111 = qword_102419528;
                                    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
                                    {
                                      *(_DWORD *)int buf = 67240448;
                                      *(_DWORD *)&uint8_t buf[4] = v172;
                                      *(_WORD *)&uint8_t buf[8] = 2050;
                                      *(void *)&buf[10] = v104;
                                      _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_FAULT, "Number of vertices received doesn't match stored, %{public}d, %{public}lu", buf, 0x12u);
                                    }
                                    if (!sub_10013D1A0(115, 0)) {
                                      goto LABEL_421;
                                    }
                                    bzero(buf, 0x65CuLL);
                                    if (qword_102419520 != -1) {
                                      dispatch_once(&qword_102419520, &stru_1022B3D28);
                                    }
                                    LODWORD(v195[0]) = 67240448;
                                    HIDWORD(v195[0]) = v172;
                                    LOWORD(v195[1]) = 2050;
                                    *(void **)((char *)&v195[1] + 2) = v104;
                                    uint64_t v59 = (char *)_os_log_send_and_compose_impl();
                                    sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v59);
                                  }
                                }
                                else
                                {
                                  if (qword_102419520 != -1) {
                                    dispatch_once(&qword_102419520, &stru_1022B3D28);
                                  }
                                  __int16 v101 = qword_102419528;
                                  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
                                  {
                                    *(_DWORD *)int buf = 136446210;
                                    *(void *)&uint8_t buf[4] = "kCLConnectionMessagePolygonalVerticesKey";
                                    _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                                  }
                                  if (!sub_10013D1A0(115, 0)) {
                                    goto LABEL_421;
                                  }
                                  bzero(buf, 0x65CuLL);
                                  if (qword_102419520 != -1) {
                                    dispatch_once(&qword_102419520, &stru_1022B3D28);
                                  }
                                  LODWORD(v195[0]) = 136446210;
                                  *(void **)((char *)v195 + 4) = "kCLConnectionMessagePolygonalVerticesKey";
                                  uint64_t v59 = (char *)_os_log_send_and_compose_impl();
                                  sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v59);
                                }
                              }
                              else
                              {
                                if (qword_102419520 != -1) {
                                  dispatch_once(&qword_102419520, &stru_1022B3D28);
                                }
                                __int16 v93 = qword_102419528;
                                if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
                                {
                                  *(_DWORD *)int buf = 136446210;
                                  *(void *)&uint8_t buf[4] = "kCLConnectionMessagePolygonalVerticesCountKey";
                                  _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                                }
                                if (!sub_10013D1A0(115, 0)) {
                                  goto LABEL_421;
                                }
                                bzero(buf, 0x65CuLL);
                                if (qword_102419520 != -1) {
                                  dispatch_once(&qword_102419520, &stru_1022B3D28);
                                }
                                LODWORD(v195[0]) = 136446210;
                                *(void **)((char *)v195 + 4) = "kCLConnectionMessagePolygonalVerticesCountKey";
                                uint64_t v59 = (char *)_os_log_send_and_compose_impl();
                                sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v59);
                              }
                            }
                            else
                            {
                              if (qword_102419520 != -1) {
                                dispatch_once(&qword_102419520, &stru_1022B3D28);
                              }
                              int v88 = qword_102419528;
                              if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
                              {
                                *(_DWORD *)int buf = 136446210;
                                *(void *)&uint8_t buf[4] = "kCLConnectionMessageReferenceFrameKey";
                                _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                              }
                              if (!sub_10013D1A0(115, 0)) {
                                goto LABEL_421;
                              }
                              bzero(buf, 0x65CuLL);
                              if (qword_102419520 != -1) {
LABEL_602:
                              }
                                dispatch_once(&qword_102419520, &stru_1022B3D28);
LABEL_341:
                              LODWORD(v195[0]) = 136446210;
                              *(void **)((char *)v195 + 4) = "kCLConnectionMessageReferenceFrameKey";
                              uint64_t v59 = (char *)_os_log_send_and_compose_impl();
                              sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v59);
                            }
                          }
                        }
                        else
                        {
                          if (qword_102419520 != -1) {
                            dispatch_once(&qword_102419520, &stru_1022B3D28);
                          }
                          unint64_t v66 = qword_102419528;
                          if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
                          {
                            *(_DWORD *)int buf = 136446210;
                            *(void *)&uint8_t buf[4] = "kCLConnectionMessageMonitoringNearby";
                            _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                          }
                          if (!sub_10013D1A0(115, 0)) {
                            goto LABEL_421;
                          }
                          bzero(buf, 0x65CuLL);
                          if (qword_102419520 != -1) {
                            dispatch_once(&qword_102419520, &stru_1022B3D28);
                          }
                          LODWORD(v195[0]) = 136446210;
                          *(void **)((char *)v195 + 4) = "kCLConnectionMessageMonitoringNearby";
                          uint64_t v59 = (char *)_os_log_send_and_compose_impl();
                          sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v59);
                        }
                      }
                      else
                      {
                        if (qword_102419520 != -1) {
                          dispatch_once(&qword_102419520, &stru_1022B3D28);
                        }
                        char v60 = qword_102419528;
                        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
                        {
                          uint64_t v61 = *(void *)(a1 + 24);
                          *(_DWORD *)int buf = 138543362;
                          *(void *)&uint8_t buf[4] = v61;
                          _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_FAULT, "Client %{public}@ does not have appropriate entitlement to use polygonal regions", buf, 0xCu);
                        }
                        if (!sub_10013D1A0(115, 0)) {
                          goto LABEL_421;
                        }
                        bzero(buf, 0x65CuLL);
                        if (qword_102419520 != -1) {
                          dispatch_once(&qword_102419520, &stru_1022B3D28);
                        }
                        id v62 = *(void **)(a1 + 24);
                        LODWORD(v195[0]) = 138543362;
                        *(void **)((char *)v195 + 4) = v62;
                        uint64_t v59 = (char *)_os_log_send_and_compose_impl();
                        sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v59);
                      }
LABEL_522:
                      if (v59 != buf) {
                        free(v59);
                      }
                      goto LABEL_421;
                    default:
                      int v57 = 0;
                      goto LABEL_397;
                  }
                }
                if (qword_102419520 != -1) {
                  dispatch_once(&qword_102419520, &stru_1022B3D28);
                }
                int v22 = qword_102419528;
                if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
                {
                  uint64_t v23 = *(void *)(a1 + 24);
                  *(_DWORD *)int buf = 138543362;
                  *(void *)&uint8_t buf[4] = v23;
                  _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "Client %{public}@ does not have the appropriate entitlement to act as an emergency service", buf, 0xCu);
                }
                if (sub_10013D1A0(115, 0))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_102419520 != -1) {
                    dispatch_once(&qword_102419520, &stru_1022B3D28);
                  }
                  unsigned int v24 = *(void **)(a1 + 24);
                  LODWORD(v195[0]) = 138543362;
                  *(void **)((char *)v195 + 4) = v24;
                  id v8 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v8);
LABEL_99:
                  if (v8 != buf) {
                    free(v8);
                  }
                }
              }
              else
              {
                if (qword_102419520 != -1) {
                  dispatch_once(&qword_102419520, &stru_1022B3D28);
                }
                __int16 v14 = qword_102419528;
                if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
                {
                  *(_DWORD *)int buf = 136446210;
                  *(void *)&uint8_t buf[4] = "kCLConnectionMessageEmergencyKey";
                  _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                }
                if (sub_10013D1A0(115, 0))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_102419520 != -1) {
                    dispatch_once(&qword_102419520, &stru_1022B3D28);
                  }
                  LODWORD(v195[0]) = 136446210;
                  *(void **)((char *)v195 + 4) = "kCLConnectionMessageEmergencyKey";
                  id v8 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v8);
                  goto LABEL_99;
                }
              }
            }
            else
            {
              if (qword_102419520 != -1) {
                dispatch_once(&qword_102419520, &stru_1022B3D28);
              }
              int v13 = qword_102419528;
              if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
              {
                *(_DWORD *)int buf = 136446210;
                *(void *)&uint8_t buf[4] = "kCLConnectionMessageConservativeEntry";
                _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419520 != -1) {
                  dispatch_once(&qword_102419520, &stru_1022B3D28);
                }
                LODWORD(v195[0]) = 136446210;
                *(void **)((char *)v195 + 4) = "kCLConnectionMessageConservativeEntry";
                id v8 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v8);
                goto LABEL_99;
              }
            }
          }
          else
          {
            if (qword_102419520 != -1) {
              dispatch_once(&qword_102419520, &stru_1022B3D28);
            }
            unsigned __int16 v12 = qword_102419528;
            if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)int buf = 136446210;
              *(void *)&uint8_t buf[4] = "kCLConnectionMessageNotifyOnExitKey";
              _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419520 != -1) {
                dispatch_once(&qword_102419520, &stru_1022B3D28);
              }
              LODWORD(v195[0]) = 136446210;
              *(void **)((char *)v195 + 4) = "kCLConnectionMessageNotifyOnExitKey";
              id v8 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v8);
              goto LABEL_99;
            }
          }
        }
        else
        {
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_1022B3D28);
          }
          id v11 = qword_102419528;
          if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)int buf = 136446210;
            *(void *)&uint8_t buf[4] = "kCLConnectionMessageNotifyOnEntryKey";
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419520 != -1) {
              dispatch_once(&qword_102419520, &stru_1022B3D28);
            }
            LODWORD(v195[0]) = 136446210;
            *(void **)((char *)v195 + 4) = "kCLConnectionMessageNotifyOnEntryKey";
            id v8 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v8);
            goto LABEL_99;
          }
        }
      }
      else
      {
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022B3D28);
        }
        id v10 = qword_102419528;
        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)int buf = 136446210;
          *(void *)&uint8_t buf[4] = "kCLConnectionMessageNameKey";
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_1022B3D28);
          }
          LODWORD(v195[0]) = 136446210;
          *(void **)((char *)v195 + 4) = "kCLConnectionMessageNameKey";
          id v8 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v8);
          goto LABEL_99;
        }
      }
    }
    else
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022B3D28);
      }
      id v9 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = "kCLConnectionMessageSubscribeKey";
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022B3D28);
        }
        LODWORD(v195[0]) = 136446210;
        *(void **)((char *)v195 + 4) = "kCLConnectionMessageSubscribeKey";
        id v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v8);
        goto LABEL_99;
      }
    }
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022B3D28);
    }
    id v7 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 136446210;
      *(void *)&uint8_t buf[4] = "kCLConnectionMessageRegionTypeKey";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022B3D28);
      }
      LODWORD(v195[0]) = 136446210;
      *(void **)((char *)v195 + 4) = "kCLConnectionMessageRegionTypeKey";
      id v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v8);
      goto LABEL_99;
    }
  }
LABEL_433:
}

void sub_10048702C(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x6FF]) < 0) {
    operator delete((void *)STACK[0x6E8]);
  }
  if (SLOBYTE(STACK[0x717]) < 0) {
    operator delete((void *)STACK[0x700]);
  }
  if (SLOBYTE(STACK[0x72F]) < 0) {
    operator delete((void *)STACK[0x718]);
  }
  if (SLOBYTE(STACK[0x747]) < 0) {
    operator delete((void *)STACK[0x730]);
  }
  if (SLOBYTE(STACK[0x75F]) < 0) {
    operator delete((void *)STACK[0x748]);
  }
  if (SLOBYTE(STACK[0x777]) < 0) {
    operator delete((void *)STACK[0x760]);
  }

  _Unwind_Resume(a1);
}

void sub_1004873E4(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022B3D48);
  }
  id v5 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v6 = *(void **)(a1 + 24);
    *(_DWORD *)int buf = 68289282;
    *(_DWORD *)id v21 = 0;
    *(_WORD *)&v21[4] = 2082;
    *(void *)&v21[6] = "";
    __int16 v22 = 2114;
    id v23 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#FenceHandoff handleChangeFencesStateMatchingHandoffTags\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  if (sub_100487BE8(a1))
  {
    if (!*(unsigned char *)(a1 + 64))
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022B3D48);
      }
      __int16 v14 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v15 = *(void **)(a1 + 24);
        *(_DWORD *)int buf = 68289282;
        *(_DWORD *)id v21 = 0;
        *(_WORD *)&v21[4] = 2082;
        *(void *)&v21[6] = "";
        __int16 v22 = 2114;
        id v23 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warn #FenceHandoff fence manager doesn't exist yet!\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
      id v10 = +[NSError errorWithDomain:kCLErrorDomain code:5 userInfo:0];
      goto LABEL_23;
    }
    CFDictionaryRef Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
    id v8 = [Dictionary objectForKeyedSubscript:@"kCLConnectionMessageHandoffTagKey"];
    id v9 = [objc_alloc((Class)NSUUID) initWithUUIDString:[Dictionary objectForKeyedSubscript:@"kCLConnectionMessageUUIDKey"]];
    if (v9)
    {
      [*(id *)(*(void *)sub_1001ABD68(a1) + 16) requestChangeFencesStateMatchingHandoffTags:v8 forDeviceID:v9];
      id v10 = 0;
LABEL_23:
      [+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary") setObject:v10 forKeyedSubscript:@"kCLConnectionMessageErrorKey"];
      CLConnectionMessage::sendReply();
      goto LABEL_24;
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022B3D48);
    }
    __int16 v16 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      id v17 = [[Dictionary objectForKeyedSubscript:@"kCLConnectionMessageUUIDKey"] UTF8String];
      *(_DWORD *)int buf = 68289282;
      *(_DWORD *)id v21 = 0;
      *(_WORD *)&v21[4] = 2082;
      *(void *)&v21[6] = "";
      __int16 v22 = 2082;
      id v23 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unable to create uuid object\", \"uuidString\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022B3D48);
      }
    }
    std::string::size_type v18 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      id v19 = [[Dictionary objectForKeyedSubscript:@"kCLConnectionMessageUUIDKey"] UTF8String];
      *(_DWORD *)int buf = 68289282;
      *(_DWORD *)id v21 = 0;
      *(_WORD *)&v21[4] = 2082;
      *(void *)&v21[6] = "";
      __int16 v22 = 2082;
      id v23 = v19;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unable to create uuid object", "{\"msg%{public}.0s\":\"Unable to create uuid object\", \"uuidString\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022B3D28);
    }
    id v11 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      uint64_t v12 = *(void *)(a1 + 24);
      *(_DWORD *)int buf = 138543362;
      *(void *)id v21 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "#Warning #FenceHandoff %{public}@ does not have the appropriate entitlement for fence handoff service", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022B3D28);
      }
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::handleChangeFencesStateMatchingHandoffTags(std::shared_ptr<CLConnectionMessage>)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
LABEL_24:
}

void sub_100487910(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100487954(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100487990(uint64_t a1)
{
  sub_100134750(&__p, "com.apple.locationd.region_proxy_service");
  uint64_t v2 = sub_1010A4BAC(a1);
  if (v5 < 0) {
    operator delete(__p);
  }
  return v2;
}

void sub_1004879EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100487A08(uint64_t a1)
{
  sub_100134750(&__p, "com.apple.locationd.region_while_nearby");
  uint64_t v2 = sub_1010A4BAC(a1);
  if (v5 < 0) {
    operator delete(__p);
  }
  return v2;
}

void sub_100487A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100487A80(uint64_t a1)
{
  sub_100134750(&__p, "com.apple.location.region_polygonal");
  uint64_t v2 = sub_1010A4BAC(a1);
  if (v5 < 0) {
    operator delete(__p);
  }
  return v2;
}

void sub_100487ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100487AF8(uint64_t a1)
{
  sub_100134750(&__p, "com.apple.location.region_aggressive");
  uint64_t v2 = sub_1010A4BAC(a1);
  if (v5 < 0) {
    operator delete(__p);
  }
  return v2;
}

void sub_100487B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100487B70(uint64_t a1)
{
  sub_100134750(&__p, "com.apple.location.region_low_power");
  uint64_t v2 = sub_1010A4BAC(a1);
  if (v5 < 0) {
    operator delete(__p);
  }
  return v2;
}

void sub_100487BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100487BE8(uint64_t a1)
{
  sub_100134750(&__p, "com.apple.locationd.region_fence_handoff");
  uint64_t v2 = sub_1010A4BAC(a1);
  if (v5 < 0) {
    operator delete(__p);
  }
  return v2;
}

void sub_100487C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100487C60(uint64_t a1)
{
  sub_100134750(&__p, "com.apple.locationd.significant_region");
  uint64_t v2 = sub_1010A4BAC(a1);
  if (v5 < 0) {
    operator delete(__p);
  }
  return v2;
}

void sub_100487CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100487CD8(uint64_t a1, uint64_t a2)
{
  sub_1004D37A8(a2, "kCLConnectionMessageNameKey", (char *)(a1 + 24));
  sub_10000FF54((std::string *)(a1 + 48), (uint64_t)v23);
  sub_1000A84C8((uint64_t)v23);
  unint64_t v4 = v32;
  if ((v32 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)v31[1];
  }
  if (v4)
  {
    sub_1000A84C8((uint64_t)v23);
    char v5 = (char *)v31;
  }
  else
  {
    char v5 = (char *)&v27;
  }
  sub_1004D37A8(a2, "kCLConnectionMessageOnBehalfOfKey", v5);
  LODWORD(buf) = *(_DWORD *)(a1 + 180);
  sub_1000EA838(a2, "kCLConnectionMessageReferenceFrameKey", &buf);
  CFStringRef v6 = *(void **)(a1 + 216);
  if (v6) {
    id v7 = [(char *)[v6 UUIDString] UTF8String];
  }
  else {
    id v7 = "";
  }
  sub_1004D34AC(a2, "kCLConnectionMessageDeviceIDKey", v7);
  sub_1004D37A8(a2, "kCLConnectionMessageHandoffTagKey", (char *)(a1 + 192));
  LOBYTE(buf) = *(unsigned char *)(a1 + 160) & 1;
  sub_1000EA238(a2, "kCLConnectionMessageNotifyOnEntryKey", &buf);
  LOBYTE(buf) = (*(unsigned char *)(a1 + 160) & 2) != 0;
  sub_1000EA238(a2, "kCLConnectionMessageNotifyOnExitKey", &buf);
  LOBYTE(buf) = (*(unsigned char *)(a1 + 160) & 4) != 0;
  sub_1000EA238(a2, "kCLConnectionMessageConservativeEntry", &buf);
  LOBYTE(buf) = (*(unsigned char *)(a1 + 160) & 0x10) != 0;
  sub_1000EA238(a2, "kCLConnectionMessageEmergencyKey", &buf);
  if (*(void *)(a1 + 232) == *(void *)(a1 + 224))
  {
    LOBYTE(v21) = (*(unsigned char *)(a1 + 160) & 0x40) != 0;
    sub_1000EA238(a2, "kCLConnectionMessageMonitoringNearby", &v21);
    if ((*(unsigned char *)(a1 + 160) & 0x80) != 0) {
      LODWORD(buf) = 3;
    }
    else {
      LODWORD(buf) = 1;
    }
    sub_1000EA838(a2, "kCLConnectionMessageRegionTypeKey", &buf);
    sub_10016332C(a2, "kCLConnectionMessageLatitudeKey", (const void *)(a1 + 72));
    sub_10016332C(a2, "kCLConnectionMessageLongitudeKey", (const void *)(a1 + 80));
    sub_10016332C(a2, "kCLConnectionMessageRadiusKey", (const void *)(a1 + 88));
    sub_10016332C(a2, "kCLConnectionMessageDesiredAccuracyKey", (const void *)(a1 + 104));
    LOBYTE(buf) = (*(unsigned char *)(a1 + 160) & 0x20) != 0;
    sub_1000EA238(a2, "kCLConnectionMessageLowPowerFenceKey", &buf);
    goto LABEL_27;
  }
  LOBYTE(buf) = (*(unsigned char *)(a1 + 160) & 8) != 0;
  sub_1000EA238(a2, "kCLConnectionMessageMonitoringNearby", &buf);
  LODWORD(buf) = 2;
  sub_1000EA838(a2, "kCLConnectionMessageRegionTypeKey", &buf);
  uint64_t v8 = *(void *)(a1 + 232) - *(void *)(a1 + 224);
  unint64_t v9 = (unint64_t)v8 >> 4;
  int v22 = (unint64_t)v8 >> 4;
  uint64_t v10 = (int)(v8 >> 4);
  id v11 = [objc_alloc((Class)NSMutableArray) initWithCapacity:v10];
  if ((int)v9 >= 1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    do
    {
      id v14 = [objc_alloc((Class)_CLVertex) initWithClientCoordinate:*(double *)(*(void *)(a1 + 224) + v12), *(double *)(*(void *)(a1 + 224) + v12 + 8)];
      [v11 addObject:v14];

      ++v13;
      v12 += 16;
    }
    while (v13 < v10);
  }
  uint64_t v21 = 0;
  __int16 v15 = +[NSKeyedArchiver archivedDataWithRootObject:v11 requiringSecureCoding:1 error:&v21];
  if (!v21)
  {
    uint64_t v19 = (uint64_t)v15;

    sub_1000EA838(a2, "kCLConnectionMessagePolygonalVerticesCountKey", &v22);
    sub_1000EA8A4(a2, "kCLConnectionMessagePolygonalVerticesKey", v19);
LABEL_27:
    uint64_t v18 = 1;
    goto LABEL_28;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022B3D28);
  }
  __int16 v16 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
  {
    uint64_t buf = 68289282;
    __int16 v38 = 2082;
    int v39 = "";
    __int16 v40 = 2114;
    uint64_t v41 = v21;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unable to encode vertices in populateGeographicRegion\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022B3D28);
    }
  }
  id v17 = qword_102419528;
  if (os_signpost_enabled((os_log_t)qword_102419528))
  {
    uint64_t buf = 68289282;
    __int16 v38 = 2082;
    int v39 = "";
    __int16 v40 = 2114;
    uint64_t v41 = v21;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unable to encode vertices in populateGeographicRegion", "{\"msg%{public}.0s\":\"Unable to encode vertices in populateGeographicRegion\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
  }
  uint64_t v18 = 0;
LABEL_28:
  if (v36 < 0) {
    operator delete(__p);
  }
  if (v34 < 0) {
    operator delete(v33);
  }
  if ((char)v32 < 0) {
    operator delete(v31[0]);
  }
  if (v30 < 0) {
    operator delete(v29);
  }
  if (v28 < 0) {
    operator delete(v27);
  }
  if (v26 < 0) {
    operator delete(v25);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  return v18;
}

void sub_100488238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000064D0((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_100488290(long long *a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3321888768;
  _DWORD v3[2] = sub_10048C6AC;
  v3[3] = &unk_1022B3F10;
  sub_10048AEC0((char *)&v4, a1);
  id v1 = [v3 copy];
  if (__p)
  {
    id v14 = __p;
    operator delete(__p);
  }

  if (v11 < 0) {
    operator delete(v10);
  }
  if (v9 < 0) {
    operator delete(v8);
  }
  if (v7 < 0) {
    operator delete(v6);
  }
  if (v5 < 0) {
    operator delete(v4);
  }
  return v1;
}

void sub_100488380(_Unwind_Exception *a1)
{
  sub_100488394(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100488394(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 224);
  if (v2)
  {
    *(void *)(a1 + 232) = v2;
    operator delete(v2);
  }

  if (*(char *)(a1 + 215) < 0) {
    operator delete(*(void **)(a1 + 192));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100488414(void **a1, _OWORD *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  char v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((char *)v7 - (unsigned char *)*a1) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v11 = v5 - (void)*a1;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12) {
      uint64_t v13 = (char *)sub_1000C571C(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    id v14 = &v13[16 * v9];
    __int16 v15 = &v13[16 * v12];
    *(_OWORD *)id v14 = *a2;
    uint64_t v8 = v14 + 16;
    id v17 = (char *)*a1;
    __int16 v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v16 - 1);
        v14 -= 16;
        v16 -= 16;
      }
      while (v16 != v17);
      __int16 v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *char v7 = *a2;
    uint64_t v8 = v7 + 1;
  }
  a1[1] = v8;
}

uint64_t sub_100488504(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 216))(a2, a1 + 32);
}

uint64_t sub_100488534(uint64_t a1, uint64_t a2)
{
  return sub_10048B9C8(a1 + 32, a2 + 32);
}

uint64_t sub_100488540(uint64_t a1)
{
  return sub_100111F40(a1 + 32);
}

uint64_t sub_10048854C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 240))(a2, a1 + 32);
}

uint64_t sub_10048857C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 248))(a2, a1 + 32);
}

void sub_1004885AC(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  sub_100134750(__p, [[*(id *)(a1 + 24) legacyClientKey] UTF8String]);
  uint64_t v7 = *(unsigned __int8 *)(a4 + 23);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = (void *)*(unsigned __int8 *)(a4 + 23);
  }
  else {
    uint64_t v8 = *(void **)(a4 + 8);
  }
  unint64_t v9 = v100;
  if ((v100 & 0x80u) != 0) {
    unint64_t v9 = (unint64_t)__p[1];
  }
  if (v8 != (void *)v9) {
    goto LABEL_153;
  }
  if ((v100 & 0x80u) == 0) {
    unint64_t v10 = __p;
  }
  else {
    unint64_t v10 = (void **)__p[0];
  }
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a4, v10, *(void *)(a4 + 8))) {
      goto LABEL_153;
    }
    goto LABEL_17;
  }
  if (!*(unsigned char *)(a4 + 23))
  {
LABEL_17:
    sub_1000E9354(v98);
    sub_1000E9354(v97);
    if ((*(unsigned char *)(a4 + 161) & 1) == 0)
    {
      switch(*a3)
      {
        case 0:
        case 1:
          if (sub_100487CD8(a4, (uint64_t)v98))
          {
            *(_DWORD *)uint64_t buf = *a3 != 0;
            sub_1000EA838((uint64_t)v98, "kCLConnectionMessageEventKey", buf);
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_1022B3D68);
            }
            __int16 v95 = (uint64_t *)(a4 + 500);
            unint64_t v12 = qword_1024193C8;
            if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
            {
              int v13 = *a3;
              int v14 = *(char *)(a4 + 23);
              __int16 v15 = *(unsigned char **)a4;
              uint64_t v16 = *(void *)(a4 + 24);
              int v17 = *(char *)(a4 + 47);
              uint64_t v88 = *v95;
              uint64_t v89 = *(void *)(a4 + 508);
              uint64_t v90 = *(void *)(a4 + 516);
              int v92 = *(_DWORD *)(a4 + 592);
              uint64_t v94 = *(void *)(a4 + 152);
              BOOL v18 = sub_100489D88(a4);
              double v19 = *(double *)(a4 + 96);
              if (v17 >= 0) {
                uint64_t v20 = a4 + 24;
              }
              else {
                uint64_t v20 = v16;
              }
              uint64_t v21 = "exit";
              if (v14 >= 0) {
                int v22 = (unsigned char *)a4;
              }
              else {
                int v22 = v15;
              }
              unsigned int v23 = *(_DWORD *)(a4 + 160);
              if (!v13) {
                uint64_t v21 = "entry";
              }
              uint64_t v25 = *(void *)(a4 + 224);
              uint64_t v24 = *(void *)(a4 + 232);
              int v26 = *(unsigned __int8 *)(a4 + 188);
              *(_DWORD *)uint64_t buf = 136383747;
              *(void *)&uint8_t buf[4] = v21;
              __int16 v127 = 2082;
              uint64_t v128 = v22;
              __int16 v129 = 2081;
              *(void *)long long v130 = v20;
              *(_WORD *)&v130[8] = 2049;
              *(void *)&v130[10] = v88;
              __int16 v131 = 2049;
              uint64_t v132 = v89;
              __int16 v133 = 2050;
              uint64_t v134 = v90;
              __int16 v135 = 1026;
              int v136 = v92;
              __int16 v137 = 2049;
              uint64_t v138 = v94;
              __int16 v139 = 1025;
              BOOL v140 = v18;
              __int16 v141 = 1025;
              BOOL v142 = v19 >= 7000.0;
              __int16 v143 = 1025;
              int v144 = (v23 >> 4) & 1;
              __int16 v145 = 1025;
              BOOL v146 = v24 != v25;
              __int16 v147 = 1025;
              int v148 = v26;
              _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Notifying client of fence %{private}s for %{public}s/%{private}s (location <%{private}+.8f,%{private}+.8f> acc %{public}.2f type %{public}d, \t\t\t\t\t\t\tsinceLast,%{private}.1f, fence,%{private}d,%{private}d,%{private}d,%{private}d,%{private}d", buf, 0x6Cu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193C0 != -1) {
                dispatch_once(&qword_1024193C0, &stru_1022B3D68);
              }
              int v54 = *a3;
              int v55 = *(char *)(a4 + 23);
              unint64_t v56 = *(void ***)a4;
              uint64_t v57 = *(void *)(a4 + 24);
              int v58 = *(char *)(a4 + 47);
              uint64_t v59 = *v95;
              uint64_t v60 = *(void *)(a4 + 508);
              uint64_t v91 = *(void *)(a4 + 516);
              int v93 = *(_DWORD *)(a4 + 592);
              uint64_t v96 = *(void *)(a4 + 152);
              BOOL v61 = sub_100489D88(a4);
              double v62 = *(double *)(a4 + 96);
              if (v58 >= 0) {
                uint64_t v63 = a4 + 24;
              }
              else {
                uint64_t v63 = v57;
              }
              id v64 = "exit";
              if (v55 >= 0) {
                id v65 = (void **)a4;
              }
              else {
                id v65 = v56;
              }
              unsigned int v66 = *(_DWORD *)(a4 + 160);
              if (!v54) {
                id v64 = "entry";
              }
              uint64_t v68 = *(void *)(a4 + 224);
              uint64_t v67 = *(void *)(a4 + 232);
              int v69 = *(unsigned __int8 *)(a4 + 188);
              *(_DWORD *)__int16 v101 = 136383747;
              *(void *)&v101[4] = v64;
              __int16 v102 = 2082;
              uint64_t v103 = v65;
              __int16 v104 = 2081;
              *(void *)uint64_t v105 = v63;
              *(_WORD *)&v105[8] = 2049;
              *(void *)&v105[10] = v59;
              __int16 v106 = 2049;
              uint64_t v107 = v60;
              __int16 v108 = 2050;
              uint64_t v109 = v91;
              __int16 v110 = 1026;
              int v111 = v93;
              __int16 v112 = 2049;
              uint64_t v113 = v96;
              __int16 v114 = 1025;
              BOOL v115 = v61;
              __int16 v116 = 1025;
              BOOL v117 = v62 >= 7000.0;
              __int16 v118 = 1025;
              int v119 = (v66 >> 4) & 1;
              __int16 v120 = 1025;
              BOOL v121 = v67 != v68;
              __int16 v122 = 1025;
              int v123 = v69;
              uint64_t v70 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceSubscription::onFenceNotification(int, const CLFenceManager_Type::Notification &, const CLFenceManager_Type::NotificationData &)", "%s\n", v70);
              if (v70 != buf) {
                free(v70);
              }
            }
            *(void *)uint64_t buf = sub_1000E9358((uint64_t)v98);
            sub_100489DD8(a1);
          }
          break;
        case 2:
          if (sub_100487CD8(a4, (uint64_t)v98))
          {
            *(void *)uint64_t buf = 6;
            sub_1004D31B8((uint64_t)v98, "kCLConnectionMessageErrorKey", buf);
            *(void *)uint64_t buf = sub_1000E9358((uint64_t)v98);
            sub_100489E5C(a1);
          }
          break;
        case 3:
          if (sub_100487CD8(a4, (uint64_t)v98))
          {
            *(void *)uint64_t buf = sub_1000E9358((uint64_t)v98);
            sub_100489EE0(a1);
          }
          break;
        case 4:
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022B3D68);
          }
          int v27 = qword_1024193C8;
          if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "Fence: received, kNotificationFenceFailure", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_1022B3D68);
            }
            *(_WORD *)__int16 v101 = 0;
            uint64_t v52 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceSubscription::onFenceNotification(int, const CLFenceManager_Type::Notification &, const CLFenceManager_Type::NotificationData &)", "%s\n", v52);
            if (v52 != buf) {
              free(v52);
            }
          }
          if ((sub_100487CD8(a4, (uint64_t)v98) & 1) == 0) {
            sub_1004D37A8((uint64_t)v98, "kCLConnectionMessageNameKey", (char *)(a4 + 24));
          }
          *(void *)uint64_t buf = 5;
          sub_1004D31B8((uint64_t)v98, "kCLConnectionMessageErrorKey", buf);
          *(void *)uint64_t buf = sub_1000E9358((uint64_t)v98);
          sub_100489E5C(a1);
          break;
        case 5:
          if (sub_100487CD8(a4, (uint64_t)v98))
          {
            uint64_t v34 = *(unsigned __int8 *)(a4 + 271);
            if ((v34 & 0x80u) != 0) {
              uint64_t v34 = *(void *)(a4 + 256);
            }
            if (v34)
            {
              sub_1000E9354(v101);
              if ((sub_100487CD8(a4 + 248, (uint64_t)v101) & 1) == 0)
              {
                if (qword_1024193C0 != -1) {
                  dispatch_once(&qword_1024193C0, &stru_1022B3D68);
                }
                char v35 = qword_1024193C8;
                if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)uint64_t buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#Warning Couldn't populate alternate region", buf, 2u);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1024193C0 != -1) {
                    dispatch_once(&qword_1024193C0, &stru_1022B3D68);
                  }
                  LOWORD(v124[0]) = 0;
                  uint64_t v87 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceSubscription::onFenceNotification(int, const CLFenceManager_Type::Notification &, const CLFenceManager_Type::NotificationData &)", "%s\n", v87);
                  if (v87 != buf) {
                    free(v87);
                  }
                }
                sub_1004D37A8((uint64_t)v98, "kCLConnectionMessageNameKey", (char *)(a4 + 24));
              }
              sub_1004D3878((uint64_t)v98, "kCLConnectionMessageAlternateRegionKey", (uint64_t)v101);
              sub_10013F3C4(v101);
            }
            else
            {
              if (qword_1024193C0 != -1) {
                dispatch_once(&qword_1024193C0, &stru_1022B3D68);
              }
              id v48 = qword_1024193C8;
              if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)uint64_t buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "No alternate region available", buf, 2u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024193C0 != -1) {
                  dispatch_once(&qword_1024193C0, &stru_1022B3D68);
                }
                *(_WORD *)__int16 v101 = 0;
                uint64_t v86 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceSubscription::onFenceNotification(int, const CLFenceManager_Type::Notification &, const CLFenceManager_Type::NotificationData &)", "%s\n", v86);
                if (v86 != buf) {
                  free(v86);
                }
              }
            }
            *(void *)uint64_t buf = sub_1000E9358((uint64_t)v98);
            sub_100489F64(a1);
            goto LABEL_138;
          }
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022B3D68);
          }
          char v44 = qword_1024193C8;
          if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
          {
            sub_100C8C864(a4);
            uint64_t v45 = v129 >= 0 ? buf : *(unsigned char **)buf;
            *(_DWORD *)__int16 v101 = 136315138;
            *(void *)&v101[4] = v45;
            _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "#Warning Can't populate fence, %s", v101, 0xCu);
            if (SHIBYTE(v129) < 0) {
              operator delete(*(void **)buf);
            }
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_1022B3D68);
            }
            sub_100C8C864(a4);
            if (v104 >= 0) {
              id v46 = v101;
            }
            else {
              id v46 = *(unsigned char **)v101;
            }
            LODWORD(v124[0]) = 136315138;
            *(void **)((char *)v124 + 4) = v46;
            uint64_t v43 = (char *)_os_log_send_and_compose_impl();
            if (SHIBYTE(v104) < 0) {
              operator delete(*(void **)v101);
            }
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceSubscription::onFenceNotification(int, const CLFenceManager_Type::Notification &, const CLFenceManager_Type::NotificationData &)", "%s\n", v43);
            goto LABEL_121;
          }
          break;
        case 6:
          goto LABEL_43;
        case 7:
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022B3D68);
          }
          char v36 = qword_1024193C8;
          if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "Fence: received, kNotificationFenceNotAuthorized", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_1022B3D68);
            }
            *(_WORD *)__int16 v101 = 0;
            uint64_t v53 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceSubscription::onFenceNotification(int, const CLFenceManager_Type::Notification &, const CLFenceManager_Type::NotificationData &)", "%s\n", v53);
            if (v53 != buf) {
              free(v53);
            }
          }
          if (sub_100487CD8(a4, (uint64_t)v98))
          {
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_1022B3D68);
            }
            uint64_t v37 = qword_1024193C8;
            if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
            {
              if (*(char *)(a4 + 23) >= 0) {
                __int16 v38 = (const void *)a4;
              }
              else {
                __int16 v38 = *(const void **)a4;
              }
              if (*(char *)(a4 + 47) >= 0) {
                uint64_t v39 = a4 + 24;
              }
              else {
                uint64_t v39 = *(void *)(a4 + 24);
              }
              *(_DWORD *)uint64_t buf = 136446466;
              *(void *)&uint8_t buf[4] = v38;
              __int16 v127 = 2082;
              uint64_t v128 = (unsigned char *)v39;
              _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "#Notice Fence: kNotificationFenceNotAuthorized, bundle not authorized for location, %{public}s, fence, %{public}s", buf, 0x16u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193C0 != -1) {
                dispatch_once(&qword_1024193C0, &stru_1022B3D68);
              }
              if (*(char *)(a4 + 23) >= 0) {
                uint64_t v76 = (const void *)a4;
              }
              else {
                uint64_t v76 = *(const void **)a4;
              }
              int v77 = *(char *)(a4 + 47);
              uint64_t v80 = *(void ***)(a4 + 24);
              uint64_t v79 = a4 + 24;
              unint64_t v78 = v80;
              if (v77 >= 0) {
                uint64_t v81 = (void **)v79;
              }
              else {
                uint64_t v81 = v78;
              }
              *(_DWORD *)__int16 v101 = 136446466;
              *(void *)&v101[4] = v76;
              __int16 v102 = 2082;
              uint64_t v103 = v81;
              uint64_t v82 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceSubscription::onFenceNotification(int, const CLFenceManager_Type::Notification &, const CLFenceManager_Type::NotificationData &)", "%s\n", v82);
              if (v82 != buf) {
                free(v82);
              }
            }
            *(void *)uint64_t buf = 4;
            sub_1004D31B8((uint64_t)v98, "kCLConnectionMessageErrorKey", buf);
            *(void *)uint64_t buf = sub_1000E9358((uint64_t)v98);
            sub_100489E5C(a1);
            break;
          }
          if (qword_1024193C0 != -1) {
            dispatch_once(&qword_1024193C0, &stru_1022B3D68);
          }
          id v47 = qword_1024193C8;
          if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_FAULT, "Fence: kNotificationFenceNotAuthorized, failed to populate fence", buf, 2u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_1022B3D68);
            }
            *(_WORD *)__int16 v101 = 0;
            uint64_t v43 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::onFenceNotification(int, const CLFenceManager_Type::Notification &, const CLFenceManager_Type::NotificationData &)", "%s\n", v43);
            if (v43 != buf) {
              goto LABEL_131;
            }
          }
          break;
        case 8:
          if ((sub_1010A4CEC(a1) & 1) == 0) {
            break;
          }
LABEL_43:
          if (sub_100487CD8(a4, (uint64_t)v98))
          {
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_1022B3D68);
            }
            char v28 = qword_1024193C8;
            if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
            {
              int v29 = *a3;
              sub_100C8C864(a4);
              char v30 = "kNotificationFenceState";
              if (v29 != 8) {
                char v30 = "kNotificationRegionStateRequest";
              }
              uint64_t v31 = *(unsigned char **)v101;
              if (v104 >= 0) {
                uint64_t v31 = v101;
              }
              int v32 = *(_DWORD *)(a4 + 652);
              if ((v32 + 1) > 4) {
                uint64_t v33 = "---";
              }
              else {
                uint64_t v33 = (&off_1022B3F70)[v32 + 1];
              }
              *(_DWORD *)uint64_t buf = 136315906;
              *(void *)&uint8_t buf[4] = v30;
              __int16 v127 = 2080;
              uint64_t v128 = v31;
              __int16 v129 = 1024;
              *(_DWORD *)long long v130 = v32;
              *(_WORD *)&v130[4] = 2080;
              *(void *)&v130[6] = v33;
              _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "Fence: received, %s, %s, state, %d, %s", buf, 0x26u);
              if (SHIBYTE(v104) < 0) {
                operator delete(*(void **)v101);
              }
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193C0 != -1) {
                dispatch_once(&qword_1024193C0, &stru_1022B3D68);
              }
              int v71 = *a3;
              sub_100C8C864(a4);
              id v72 = "kNotificationFenceState";
              if (v71 != 8) {
                id v72 = "kNotificationRegionStateRequest";
              }
              uint64_t v73 = (void **)v124[0];
              if (v125 >= 0) {
                uint64_t v73 = v124;
              }
              int v74 = *(_DWORD *)(a4 + 652);
              if ((v74 + 1) > 4) {
                uint64_t v75 = "---";
              }
              else {
                uint64_t v75 = (&off_1022B3F70)[v74 + 1];
              }
              *(_DWORD *)__int16 v101 = 136315906;
              *(void *)&v101[4] = v72;
              __int16 v102 = 2080;
              uint64_t v103 = v73;
              __int16 v104 = 1024;
              *(_DWORD *)uint64_t v105 = v74;
              *(_WORD *)&v105[4] = 2080;
              *(void *)&v105[6] = v75;
              uint64_t v85 = (char *)_os_log_send_and_compose_impl();
              if (v125 < 0) {
                operator delete(v124[0]);
              }
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceSubscription::onFenceNotification(int, const CLFenceManager_Type::Notification &, const CLFenceManager_Type::NotificationData &)", "%s\n", v85);
              if (v85 != buf) {
                free(v85);
              }
            }
            unsigned int v49 = *(_DWORD *)(a4 + 652) + 1;
            if (v49 >= 3)
            {
              if (qword_1024193C0 != -1) {
                dispatch_once(&qword_1024193C0, &stru_1022B3D68);
              }
              id v50 = qword_1024193C8;
              if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
              {
                int v51 = *(_DWORD *)(a4 + 652);
                *(_DWORD *)uint64_t buf = 67240192;
                *(_DWORD *)&uint8_t buf[4] = v51;
                _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_FAULT, "Fence: unknown state, %{public}d", buf, 8u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024193C0 != -1) {
                  dispatch_once(&qword_1024193C0, &stru_1022B3D68);
                }
                int v83 = *(_DWORD *)(a4 + 652);
                *(_DWORD *)__int16 v101 = 67240192;
                *(_DWORD *)&v101[4] = v83;
                uint64_t v84 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::onFenceNotification(int, const CLFenceManager_Type::Notification &, const CLFenceManager_Type::NotificationData &)", "%s\n", v84);
                if (v84 != buf) {
                  free(v84);
                }
              }
              unsigned int v49 = 0;
            }
            *(_DWORD *)uint64_t buf = v49;
            sub_1000EA838((uint64_t)v98, "kCLConnectionMessageStatusKey", buf);
            *(void *)uint64_t buf = sub_1000E9358((uint64_t)v98);
            sub_100489D04(a1);
          }
          else
          {
            if (qword_1024193C0 != -1) {
              dispatch_once(&qword_1024193C0, &stru_1022B3D68);
            }
            __int16 v40 = qword_1024193C8;
            if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
            {
              sub_100C8C864(a4);
              uint64_t v41 = v129 >= 0 ? buf : *(unsigned char **)buf;
              *(_DWORD *)__int16 v101 = 136315138;
              *(void *)&v101[4] = v41;
              _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_FAULT, "Fence: kNotificationRegionStateRequest, failed to populateGeographicRegion, %s", v101, 0xCu);
              if (SHIBYTE(v129) < 0) {
                operator delete(*(void **)buf);
              }
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193C0 != -1) {
                dispatch_once(&qword_1024193C0, &stru_1022B3D68);
              }
              sub_100C8C864(a4);
              if (v104 >= 0) {
                uint64_t v42 = v101;
              }
              else {
                uint64_t v42 = *(unsigned char **)v101;
              }
              LODWORD(v124[0]) = 136315138;
              *(void **)((char *)v124 + 4) = v42;
              uint64_t v43 = (char *)_os_log_send_and_compose_impl();
              if (SHIBYTE(v104) < 0) {
                operator delete(*(void **)v101);
              }
              sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::onFenceNotification(int, const CLFenceManager_Type::Notification &, const CLFenceManager_Type::NotificationData &)", "%s\n", v43);
LABEL_121:
              if (v43 != buf) {
LABEL_131:
              }
                free(v43);
            }
          }
          break;
        case 9:
LABEL_138:
          if (sub_100487CD8(a4, (uint64_t)v98))
          {
            *(void *)uint64_t buf = *(void *)(a4 + 656);
            sub_10016332C((uint64_t)v98, "kCLConnectionMessageRegionWatchdogSinceLast", buf);
            *(void *)uint64_t buf = sub_1000E9358((uint64_t)v98);
            sub_100489FE8(a1);
          }
          break;
        default:
          break;
      }
    }
    sub_10013F3C4(v97);
    sub_10013F3C4(v98);
    goto LABEL_153;
  }
  uint64_t v11 = (unsigned __int8 *)a4;
  while (*v11 == *(unsigned __int8 *)v10)
  {
    ++v11;
    unint64_t v10 = (void **)((char *)v10 + 1);
    if (!--v7) {
      goto LABEL_17;
    }
  }
LABEL_153:
  if ((char)v100 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100489BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100489D04(uint64_t a1)
{
  sub_10048C758(&off_1022B3F40, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100489D70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100489D88(uint64_t a1)
{
  return *(double *)(a1 + 96) <= 400.0
      && !*(unsigned char *)(a1 + 188)
      && *(_DWORD *)(a1 + 180) != 2
      && *(void *)(a1 + 232) == *(void *)(a1 + 224)
      && (*(unsigned char *)(a1 + 160) & 0x20) == 0;
}

void sub_100489DD8(uint64_t a1)
{
  sub_10048C758(&off_1022B3F48, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100489E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100489E5C(uint64_t a1)
{
  sub_10048C758(&off_1022B3F50, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100489EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100489EE0(uint64_t a1)
{
  sub_10048C758(&off_1022B3F58, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100489F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100489F64(uint64_t a1)
{
  sub_10048C758(&off_1022B3F60, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_100489FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100489FE8(uint64_t a1)
{
  sub_10048C758(&off_1022B3F68, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_10048A054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_10048A06C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  sub_100134750(__p, [[objc_msgSend(*(id *)(a1 + 24), "legacyClientKey") UTF8String];
  uint64_t v7 = *(unsigned __int8 *)(a4 + 63);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = (void *)*(unsigned __int8 *)(a4 + 63);
  }
  else {
    uint64_t v8 = *(void **)(a4 + 48);
  }
  unint64_t v9 = v57;
  if ((v57 & 0x80u) != 0) {
    unint64_t v9 = (unint64_t)__p[1];
  }
  if (v8 != (void *)v9) {
    goto LABEL_97;
  }
  unint64_t v10 = (const void **)(a4 + 40);
  if ((v57 & 0x80u) == 0) {
    uint64_t v11 = __p;
  }
  else {
    uint64_t v11 = (void **)__p[0];
  }
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*v10, v11, *(void *)(a4 + 48))) {
      goto LABEL_97;
    }
LABEL_17:
    sub_1000E9354(v55);
    if (sub_100B3CAD4(a4, (uint64_t)v55) & 1) == 0 || (*(unsigned char *)(a4 + 113)) {
      goto LABEL_96;
    }
    int v13 = *a3;
    if (*a3 == 3)
    {
      if (!*(_DWORD *)(a4 + 120))
      {
        int v24 = *(_DWORD *)(a4 + 168);
        if (v24 == 2) {
          int v25 = 1;
        }
        else {
          int v25 = 2 * (v24 == 4);
        }
        *(_DWORD *)uint64_t buf = v25;
        sub_1000EA838((uint64_t)v55, "kCLConnectionMessageStatusKey", buf);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022B3D28);
        }
        int v26 = qword_102419528;
        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v27 = a4 + 88;
          if (*(char *)(a4 + 63) >= 0) {
            uint64_t v28 = a4 + 40;
          }
          else {
            uint64_t v28 = *(void *)(a4 + 40);
          }
          if (*(char *)(a4 + 111) < 0) {
            uint64_t v27 = *(void *)(a4 + 88);
          }
          *(_DWORD *)uint64_t buf = 136446467;
          *(void *)&uint8_t buf[4] = v28;
          __int16 v63 = 2081;
          uint64_t v64 = v27;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "@iB: Sending kCLConnectionMessageRegionState for region,'%{public}s/%{private}s'.", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_1022B3D28);
          }
          uint64_t v50 = *(void *)(a4 + 88);
          uint64_t v49 = a4 + 88;
          uint64_t v48 = v50;
          if (*(char *)(v49 - 25) >= 0) {
            int v51 = v10;
          }
          else {
            int v51 = *(const void ***)(v49 - 48);
          }
          if (*(char *)(v49 + 23) >= 0) {
            uint64_t v48 = v49;
          }
          int v58 = 136446467;
          uint64_t v59 = (uint64_t)v51;
          __int16 v60 = 2081;
          uint64_t v61 = v48;
          uint64_t v52 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceSubscription::onBTLEFenceNotification(int, const CLBTLEFenceManager_Type::Notification &, const CLBTLEFenceManager_Type::NotificationData &)", "%s\n", v52);
          if (v52 != buf) {
            free(v52);
          }
        }
        *(void *)uint64_t buf = sub_1000E9358((uint64_t)v55);
        sub_100489D04(a1);
        goto LABEL_96;
      }
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022B3D28);
      }
      uint64_t v21 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v22 = a4 + 88;
        if (*(char *)(a4 + 63) >= 0) {
          uint64_t v23 = a4 + 40;
        }
        else {
          uint64_t v23 = *(void *)(a4 + 40);
        }
        if (*(char *)(a4 + 111) < 0) {
          uint64_t v22 = *(void *)(a4 + 88);
        }
        *(_DWORD *)uint64_t buf = 136446467;
        *(void *)&uint8_t buf[4] = v23;
        __int16 v63 = 2081;
        uint64_t v64 = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "@iB: Sending kCLConnectionMessageRegionMonitoringError for region,'%{public}s/%{private}s'.", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022B3D28);
        }
        uint64_t v40 = a4 + 88;
        if (*(char *)(a4 + 63) >= 0) {
          uint64_t v41 = a4 + 40;
        }
        else {
          uint64_t v41 = *(void *)(a4 + 40);
        }
        if (*(char *)(a4 + 111) < 0) {
          uint64_t v40 = *(void *)(a4 + 88);
        }
        int v58 = 136446467;
        uint64_t v59 = v41;
        __int16 v60 = 2081;
        uint64_t v61 = v40;
        uint64_t v42 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceSubscription::onBTLEFenceNotification(int, const CLBTLEFenceManager_Type::Notification &, const CLBTLEFenceManager_Type::NotificationData &)", "%s\n", v42);
        if (v42 != buf) {
          free(v42);
        }
      }
      if (*(_DWORD *)(a4 + 120) == 1) {
        *(void *)uint64_t buf = 4;
      }
      else {
        *(void *)uint64_t buf = 5;
      }
    }
    else
    {
      if (v13 == 2)
      {
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022B3D28);
        }
        int v17 = qword_102419528;
        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v18 = a4 + 88;
          if (*(char *)(a4 + 63) >= 0) {
            uint64_t v19 = a4 + 40;
          }
          else {
            uint64_t v19 = *(void *)(a4 + 40);
          }
          if (*(char *)(a4 + 111) < 0) {
            uint64_t v18 = *(void *)(a4 + 88);
          }
          *(_DWORD *)uint64_t buf = 136446467;
          *(void *)&uint8_t buf[4] = v19;
          __int16 v63 = 2081;
          uint64_t v64 = v18;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "@iB: Sending kCLConnectionMessageRegionMonitoring for region,'%{public}s/%{private}s'.", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_1022B3D28);
          }
          uint64_t v34 = a4 + 88;
          if (*(char *)(a4 + 63) >= 0) {
            uint64_t v35 = a4 + 40;
          }
          else {
            uint64_t v35 = *(void *)(a4 + 40);
          }
          if (*(char *)(a4 + 111) < 0) {
            uint64_t v34 = *(void *)(a4 + 88);
          }
          int v58 = 136446467;
          uint64_t v59 = v35;
          __int16 v60 = 2081;
          uint64_t v61 = v34;
          char v36 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceSubscription::onBTLEFenceNotification(int, const CLBTLEFenceManager_Type::Notification &, const CLBTLEFenceManager_Type::NotificationData &)", "%s\n", v36);
          if (v36 != buf) {
            free(v36);
          }
        }
        int v20 = *(_DWORD *)(a4 + 168);
        if (v20 == 4)
        {
          *(_DWORD *)uint64_t buf = 1;
          sub_1000EA838((uint64_t)v55, "kCLConnectionMessageEventKey", buf);
        }
        else if (v20 == 2)
        {
          *(_DWORD *)uint64_t buf = 0;
          sub_1000EA838((uint64_t)v55, "kCLConnectionMessageEventKey", buf);
        }
        else
        {
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_1022B3D28);
          }
          int v32 = qword_102419528;
          if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
          {
            int v33 = *(_DWORD *)(a4 + 168);
            *(_DWORD *)uint64_t buf = 67240192;
            *(_DWORD *)&uint8_t buf[4] = v33;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "Unsupported region transition state,%{public}d will not be reported.", buf, 8u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419520 != -1) {
              dispatch_once(&qword_102419520, &stru_1022B3D28);
            }
            int v53 = *(_DWORD *)(a4 + 168);
            int v58 = 67240192;
            LODWORD(v59) = v53;
            int v54 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLFenceSubscription::onBTLEFenceNotification(int, const CLBTLEFenceManager_Type::Notification &, const CLBTLEFenceManager_Type::NotificationData &)", "%s\n", v54);
            if (v54 != buf) {
              free(v54);
            }
          }
        }
        *(void *)uint64_t buf = sub_1000E9358((uint64_t)v55);
        sub_100489DD8(a1);
        goto LABEL_96;
      }
      if (v13)
      {
LABEL_96:
        sub_10013F3C4(v55);
        goto LABEL_97;
      }
      if (!*(_DWORD *)(a4 + 120))
      {
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022B3D28);
        }
        int v29 = qword_102419528;
        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v30 = a4 + 88;
          if (*(char *)(a4 + 63) >= 0) {
            uint64_t v31 = a4 + 40;
          }
          else {
            uint64_t v31 = *(void *)(a4 + 40);
          }
          if (*(char *)(a4 + 111) < 0) {
            uint64_t v30 = *(void *)(a4 + 88);
          }
          *(_DWORD *)uint64_t buf = 136446467;
          *(void *)&uint8_t buf[4] = v31;
          __int16 v63 = 2081;
          uint64_t v64 = v30;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "@iB: Sending kCLConnectionMessageRegionMonitoringSetupCompleted for region,'%{public}s/%{private}s'.", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_1022B3D28);
          }
          uint64_t v45 = *(void *)(a4 + 88);
          uint64_t v44 = a4 + 88;
          uint64_t v43 = v45;
          if (*(char *)(v44 - 25) >= 0) {
            id v46 = v10;
          }
          else {
            id v46 = *(const void ***)(v44 - 48);
          }
          if (*(char *)(v44 + 23) >= 0) {
            uint64_t v43 = v44;
          }
          int v58 = 136446467;
          uint64_t v59 = (uint64_t)v46;
          __int16 v60 = 2081;
          uint64_t v61 = v43;
          id v47 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceSubscription::onBTLEFenceNotification(int, const CLBTLEFenceManager_Type::Notification &, const CLBTLEFenceManager_Type::NotificationData &)", "%s\n", v47);
          if (v47 != buf) {
            free(v47);
          }
        }
        *(void *)uint64_t buf = sub_1000E9358((uint64_t)v55);
        sub_100489EE0(a1);
        goto LABEL_96;
      }
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022B3D28);
      }
      int v14 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = a4 + 88;
        if (*(char *)(a4 + 63) >= 0) {
          uint64_t v16 = a4 + 40;
        }
        else {
          uint64_t v16 = *(void *)(a4 + 40);
        }
        if (*(char *)(a4 + 111) < 0) {
          uint64_t v15 = *(void *)(a4 + 88);
        }
        *(_DWORD *)uint64_t buf = 136446467;
        *(void *)&uint8_t buf[4] = v16;
        __int16 v63 = 2081;
        uint64_t v64 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "@iB: Sending kCLConnectionMessageRegionMonitoringError for region,'%{public}s/%{private}s'.", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022B3D28);
        }
        uint64_t v37 = a4 + 88;
        if (*(char *)(a4 + 63) >= 0) {
          uint64_t v38 = a4 + 40;
        }
        else {
          uint64_t v38 = *(void *)(a4 + 40);
        }
        if (*(char *)(a4 + 111) < 0) {
          uint64_t v37 = *(void *)(a4 + 88);
        }
        int v58 = 136446467;
        uint64_t v59 = v38;
        __int16 v60 = 2081;
        uint64_t v61 = v37;
        uint64_t v39 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceSubscription::onBTLEFenceNotification(int, const CLBTLEFenceManager_Type::Notification &, const CLBTLEFenceManager_Type::NotificationData &)", "%s\n", v39);
        if (v39 != buf) {
          free(v39);
        }
      }
      if (*(_DWORD *)(a4 + 120) == 1) {
        *(void *)uint64_t buf = 4;
      }
      else {
        *(void *)uint64_t buf = 5;
      }
    }
    sub_1004D31B8((uint64_t)v55, "kCLConnectionMessageErrorKey", buf);
    *(void *)uint64_t buf = sub_1000E9358((uint64_t)v55);
    sub_100489E5C(a1);
    goto LABEL_96;
  }
  if (!*(unsigned char *)(a4 + 63)) {
    goto LABEL_17;
  }
  unint64_t v12 = (unsigned __int8 *)(a4 + 40);
  while (*v12 == *(unsigned __int8 *)v11)
  {
    ++v12;
    uint64_t v11 = (void **)((char *)v11 + 1);
    if (!--v7) {
      goto LABEL_17;
    }
  }
LABEL_97:
  if ((char)v57 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10048AD00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10048AD80(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_10048ADB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void sub_10048AE30(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_10048AE60(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_10048AE90(id a1)
{
  qword_1024193C8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

char *sub_10048AEC0(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__uuid_t dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_1000DC48C(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_1000DC48C(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  long long v7 = *(long long *)((char *)a2 + 72);
  long long v8 = *(long long *)((char *)a2 + 88);
  long long v9 = *(long long *)((char *)a2 + 104);
  *(_OWORD *)(__dst + 120) = *(long long *)((char *)a2 + 120);
  *(_OWORD *)(__dst + 104) = v9;
  *(_OWORD *)(__dst + 88) = v8;
  *(_OWORD *)(__dst + 72) = v7;
  long long v10 = *(long long *)((char *)a2 + 136);
  long long v11 = *(long long *)((char *)a2 + 152);
  long long v12 = *(long long *)((char *)a2 + 168);
  *(void *)(__dst + 181) = *(void *)((char *)a2 + 181);
  *(_OWORD *)(__dst + 168) = v12;
  *(_OWORD *)(__dst + 152) = v11;
  *(_OWORD *)(__dst + 136) = v10;
  if (*((char *)a2 + 215) < 0)
  {
    sub_1000DC48C(__dst + 192, *((void **)a2 + 24), *((void *)a2 + 25));
  }
  else
  {
    long long v13 = a2[12];
    *((void *)__dst + 26) = *((void *)a2 + 26);
    *((_OWORD *)__dst + 12) = v13;
  }
  *((void *)__dst + 27) = 0;
  id v14 = *((id *)a2 + 27);
  *((void *)__dst + 28) = 0;
  *((void *)__dst + 27) = v14;
  *((void *)__dst + 29) = 0;
  *((void *)__dst + 30) = 0;
  sub_10017C680((void *)__dst + 28, *((const void **)a2 + 28), *((void *)a2 + 29), (uint64_t)(*((void *)a2 + 29) - *((void *)a2 + 28)) >> 4);
  return __dst;
}

void sub_10048B024(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

id *sub_10048B098(id *a1)
{
  return a1;
}

uint64_t sub_10048B0C8(uint64_t a1, long long *a2, long long *a3, long long *a4)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)a1 = off_1022B3D98;
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 40), *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    *(void *)(a1 + 56) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 40) = v7;
  }
  if (*((char *)a4 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 64), *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v8 = *a4;
    *(void *)(a1 + 80) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 64) = v8;
  }
  long long v9 = (unsigned char *)(a1 + 88);
  if (*((char *)a3 + 23) < 0)
  {
    sub_1000DC48C(v9, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v10 = *a3;
    *(void *)(a1 + 104) = *((void *)a3 + 2);
    *(_OWORD *)long long v9 = v10;
  }
  *(_DWORD *)(a1 + 112) = 0;
  return a1;
}

void sub_10048B1DC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v3);
  }
  *(void *)uint64_t v1 = v2;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_10048B22C(uint64_t a1)
{
  sub_100111F40(a1);

  operator delete();
}

uint64_t sub_10048B264(uint64_t a1)
{
  sub_10048B72C((uint64_t)v23);
  uint64_t v2 = sub_100132EFC(v23, (uint64_t)"[", 1);
  int v3 = *(char *)(a1 + 87);
  if (v3 >= 0) {
    uint64_t v4 = a1 + 64;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 64);
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  else {
    uint64_t v5 = *(void *)(a1 + 72);
  }
  long long v6 = sub_100132EFC(v2, v4, v5);
  long long v7 = sub_100132EFC(v6, (uint64_t)"]/", 2);
  int v8 = *(char *)(a1 + 63);
  if (v8 >= 0) {
    uint64_t v9 = a1 + 40;
  }
  else {
    uint64_t v9 = *(void *)(a1 + 40);
  }
  if (v8 >= 0) {
    uint64_t v10 = *(unsigned __int8 *)(a1 + 63);
  }
  else {
    uint64_t v10 = *(void *)(a1 + 48);
  }
  long long v11 = sub_100132EFC(v7, v9, v10);
  long long v12 = sub_100132EFC(v11, (uint64_t)"/", 1);
  int v13 = *(char *)(a1 + 111);
  if (v13 >= 0) {
    uint64_t v14 = a1 + 88;
  }
  else {
    uint64_t v14 = *(void *)(a1 + 88);
  }
  if (v13 >= 0) {
    uint64_t v15 = *(unsigned __int8 *)(a1 + 111);
  }
  else {
    uint64_t v15 = *(void *)(a1 + 96);
  }
  uint64_t v16 = sub_100132EFC(v12, v14, v15);
  int v17 = sub_100132EFC(v16, (uint64_t)"/", 1);
  sub_10048B578(a1);
  if ((v22 & 0x80u) == 0) {
    uint64_t v18 = __p;
  }
  else {
    uint64_t v18 = (void **)__p[0];
  }
  if ((v22 & 0x80u) == 0) {
    uint64_t v19 = v22;
  }
  else {
    uint64_t v19 = (uint64_t)__p[1];
  }
  sub_100132EFC(v17, (uint64_t)v18, v19);
  if ((char)v22 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  if (v24 < 0) {
    operator delete((void *)v23[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_10048B488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_10048B8C4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10048B4B8(uint64_t a1)
{
  *(void *)a1 = off_1022B3DE8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_10048B508(uint64_t a1)
{
  *(void *)a1 = off_1022B3DE8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  operator delete();
}

uint64_t sub_10048B578(uint64_t a1)
{
  sub_10048B72C((uint64_t)v6);
  if (*(unsigned char *)(a1 + 36))
  {
    int v2 = *(char *)(a1 + 31);
    uint64_t v3 = v2 >= 0 ? a1 + 8 : *(void *)(a1 + 8);
    uint64_t v4 = v2 >= 0 ? *(unsigned __int8 *)(a1 + 31) : *(void *)(a1 + 16);
    sub_100132EFC(v6, v3, v4);
    if ((*(unsigned char *)(a1 + 36) & 2) != 0)
    {
      sub_100132EFC(v6, (uint64_t)".", 1);
      std::ostream::operator<<();
      if ((*(unsigned char *)(a1 + 36) & 4) != 0)
      {
        sub_100132EFC(v6, (uint64_t)".", 1);
        std::ostream::operator<<();
      }
    }
  }
  std::stringbuf::str();
  if (v7 < 0) {
    operator delete((void *)v6[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_10048B718(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10048B8C4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10048B72C(uint64_t a1)
{
  *(void *)a1 = v3;
  *(void *)(a1 + *(void *)(v3 - 24)) = v2;
  uint64_t v4 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v4, (void *)(a1 + 8));
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf();
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_10048B89C(_Unwind_Exception *a1)
{
}

uint64_t sub_10048B8C4(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return a1;
}

uint64_t sub_10048B9C8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1022B3DE8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)a1 = off_1022B3D98;
  if (*(char *)(a2 + 63) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 40), *(void **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v5;
  }
  if (*(char *)(a2 + 87) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 64), *(void **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v6;
  }
  char v7 = (unsigned char *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0)
  {
    sub_1000DC48C(v7, *(void **)(a2 + 88), *(void *)(a2 + 96));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)char v7 = v8;
  }
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  return a1;
}

void sub_10048BB08(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v4);
  }
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_10048BB58()
{
}

__n128 sub_10048BB6C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_1022B3E10;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10048BBB8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022B3E10;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10048BBE8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_10048BBF0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10048BC30()
{
}

void sub_10048BC3C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  long long v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  long long v5 = *(void (**)(void *, uint64_t *))a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = (void *)(a2 + (v6 >> 1));
  if (v6) {
    long long v5 = *(void (**)(void *, uint64_t *))(*v7 + v5);
  }
  uint64_t v8 = v3;
  uint64_t v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v5(v7, &v8);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (v4) {
    sub_1000DB0A0(v4);
  }
}

void sub_10048BCDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10048BD00(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

__n128 sub_10048BD84(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_1022B3EA0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10048BDD0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022B3EA0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10048BE00(uint64_t a1, uint64_t a2, long long *a3)
{
}

uint64_t sub_10048BE08(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10048BE48()
{
}

void sub_10048BE54(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_10048BEB0(a1, a2, (CLConnectionMessage **)&v3);
  if (*((void *)&v3 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v3 + 1));
  }
}

void sub_10048BE98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10048BEB0(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  uint64_t v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  CFDictionaryRef DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_10013FA80((int)v15, DictionaryOfClasses);
  BOOL v14 = 0;
  if (sub_1000D2988((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14))
  {
    uint64_t v8 = *(void (**)(void *, BOOL, uint8_t *))a1;
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v10 = (void *)(a2 + (v9 >> 1));
    if (v9) {
      uint64_t v8 = *(void (**)(void *, BOOL, uint8_t *))(*v10 + v8);
    }
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022B3D28);
    }
    long long v11 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022B3D28);
      }
    }
    long long v12 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10013F3C4(v15);
}

void sub_10048C0E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_10048C0FC(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_10048C178(a1, a2, (long long *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_10048C164(_Unwind_Exception *a1)
{
  sub_10048C62C(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_10048C178(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  char v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    int v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_10048C3FC(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  unsigned __int8 v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *unsigned __int8 v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_10048C584((uint64_t)v25, 0);
  return i;
}

void sub_10048C3E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10048C584((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_10048C3FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  __n128 result = sub_10048C474(v8 + 2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_10048C45C(_Unwind_Exception *a1)
{
  sub_10048C584(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_10048C474(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__uuid_t dst = v4;
  }
  sub_10048C4EC((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_10048C4D0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10048C4EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_10048C584(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_10048C5DC((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void sub_10048C5DC(uint64_t a1)
{
  sub_10048BD00((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_10048C62C(uint64_t a1)
{
  sub_10048C668(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_10048C668(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_10048C5DC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

char *sub_10048C6AC@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return sub_10048AEC0(a2, (long long *)(a1 + 32));
}

char *sub_10048C6B8(uint64_t a1, uint64_t a2)
{
  return sub_10048AEC0((char *)(a1 + 32), (long long *)(a2 + 32));
}

void sub_10048C6C4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 256);
  if (v2)
  {
    *(void *)(a1 + 264) = v2;
    operator delete(v2);
  }

  if (*(char *)(a1 + 247) < 0) {
    operator delete(*(void **)(a1 + 224));
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    operator delete(v3);
  }
}

void *sub_10048C758@<X0>(char **a1@<X1>, void *a2@<X8>)
{
  long long v4 = operator new(0x70uLL);
  __n128 result = sub_1000E9484(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10048C7A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10048C7BC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_10048C83C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_10048C8CC(_Unwind_Exception *a1)
{
}

void sub_10048C994(id a1)
{
  qword_10247AB18 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLHRRecoveryServiceSilo"];
}

void sub_10048CA54(id a1)
{
  if (sub_10010145C()) {
    byte_10247AB28 = 1;
  }
}

void sub_10048D0FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  operator delete();
}

void sub_10048D13C()
{
}

void sub_10048D230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  sub_101A61384(v11, v10);
  operator delete();
}

id sub_10048D274(void *__src, void *a2)
{
  memcpy(__dst, __src, sizeof(__dst));
  return [a2 onHRRecoveryEstimate:__dst];
}

id sub_10048D2C0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return [a4 onCatherineNotification:a2 data:a3];
}

id sub_10048D2D0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return [a4 onNatalimetryNotification:a2 data:a3];
}

void sub_10048D61C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1000DB0A0(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10048D634(void **a1, double a2)
{
  if (a2 >= 0.0)
  {
    unint64_t v8 = a1[2];
    uint64_t v6 = (uint64_t)(a1 + 2);
    uint64_t v7 = v8;
    unint64_t v9 = *(void *)(v6 - 8);
    if (v9 >= (unint64_t)v8)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)*a1) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14) {
        unint64_t v15 = (char *)sub_1000DA5D8(v6, v14);
      }
      else {
        unint64_t v15 = 0;
      }
      float v16 = &v15[24 * v11];
      float v17 = &v15[24 * v14];
      *(double *)float v16 = a2;
      *((void *)v16 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v16[16] = 0;
      unint64_t v10 = v16 + 24;
      unint64_t v19 = (char *)*a1;
      BOOL v18 = (char *)a1[1];
      if (v18 != *a1)
      {
        do
        {
          long long v20 = *(_OWORD *)(v18 - 24);
          *(v16 - 8) = *(v18 - 8);
          *(_OWORD *)(v16 - 24) = v20;
          v16 -= 24;
          v18 -= 24;
        }
        while (v18 != v19);
        BOOL v18 = (char *)*a1;
      }
      *a1 = v16;
      a1[1] = v10;
      a1[2] = v17;
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *(double *)unint64_t v9 = a2;
      *(void *)(v9 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(unsigned char *)(v9 + 16) = 0;
      unint64_t v10 = (char *)(v9 + 24);
    }
    a1[1] = v10;
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B4108);
    }
    uint64_t v3 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134349056;
      double v22 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Programmer error, this expiration rule with time %{public}fis not valid.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B4108);
      }
      long long v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLActivityAggregator<HRRecoveryInputHR, CLActivityDB::ClassBDataProtectionPolicy>::setExpirationRule(CFTimeInterval) [T = HRRecoveryInputHR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_10048D8EC(void **a1, double a2)
{
  if (a2 >= 0.0)
  {
    unint64_t v8 = a1[2];
    uint64_t v6 = (uint64_t)(a1 + 2);
    uint64_t v7 = v8;
    unint64_t v9 = *(void *)(v6 - 8);
    if (v9 >= (unint64_t)v8)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)*a1) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14) {
        unint64_t v15 = (char *)sub_1000DA5D8(v6, v14);
      }
      else {
        unint64_t v15 = 0;
      }
      float v16 = &v15[24 * v11];
      float v17 = &v15[24 * v14];
      *(double *)float v16 = a2;
      *((void *)v16 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v16[16] = 0;
      unint64_t v10 = v16 + 24;
      unint64_t v19 = (char *)*a1;
      BOOL v18 = (char *)a1[1];
      if (v18 != *a1)
      {
        do
        {
          long long v20 = *(_OWORD *)(v18 - 24);
          *(v16 - 8) = *(v18 - 8);
          *(_OWORD *)(v16 - 24) = v20;
          v16 -= 24;
          v18 -= 24;
        }
        while (v18 != v19);
        BOOL v18 = (char *)*a1;
      }
      *a1 = v16;
      a1[1] = v10;
      a1[2] = v17;
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *(double *)unint64_t v9 = a2;
      *(void *)(v9 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(unsigned char *)(v9 + 16) = 0;
      unint64_t v10 = (char *)(v9 + 24);
    }
    a1[1] = v10;
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B4108);
    }
    uint64_t v3 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134349056;
      double v22 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Programmer error, this expiration rule with time %{public}fis not valid.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B4108);
      }
      long long v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLActivityAggregator<HRRecoveryInputWR, CLActivityDB::ClassBDataProtectionPolicy>::setExpirationRule(CFTimeInterval) [T = HRRecoveryInputWR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_10048DBA4(void **a1, double a2)
{
  if (a2 >= 0.0)
  {
    unint64_t v8 = a1[2];
    uint64_t v6 = (uint64_t)(a1 + 2);
    uint64_t v7 = v8;
    unint64_t v9 = *(void *)(v6 - 8);
    if (v9 >= (unint64_t)v8)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)*a1) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14) {
        unint64_t v15 = (char *)sub_1000DA5D8(v6, v14);
      }
      else {
        unint64_t v15 = 0;
      }
      float v16 = &v15[24 * v11];
      float v17 = &v15[24 * v14];
      *(double *)float v16 = a2;
      *((void *)v16 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v16[16] = 0;
      unint64_t v10 = v16 + 24;
      unint64_t v19 = (char *)*a1;
      BOOL v18 = (char *)a1[1];
      if (v18 != *a1)
      {
        do
        {
          long long v20 = *(_OWORD *)(v18 - 24);
          *(v16 - 8) = *(v18 - 8);
          *(_OWORD *)(v16 - 24) = v20;
          v16 -= 24;
          v18 -= 24;
        }
        while (v18 != v19);
        BOOL v18 = (char *)*a1;
      }
      *a1 = v16;
      a1[1] = v10;
      a1[2] = v17;
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *(double *)unint64_t v9 = a2;
      *(void *)(v9 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(unsigned char *)(v9 + 16) = 0;
      unint64_t v10 = (char *)(v9 + 24);
    }
    a1[1] = v10;
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B4108);
    }
    uint64_t v3 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134349056;
      double v22 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Programmer error, this expiration rule with time %{public}fis not valid.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B4108);
      }
      long long v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLActivityAggregator<HRRecoverySession, CLActivityDB::ClassBDataProtectionPolicy>::setExpirationRule(CFTimeInterval) [T = HRRecoverySession, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

uint64_t sub_10048DE5C(uint64_t a1)
{
  if (qword_1024192C0 != -1) {
    dispatch_once(&qword_1024192C0, &stru_1022B3FF8);
  }
  uint64_t v2 = qword_1024192C8;
  if (os_log_type_enabled((os_log_t)qword_1024192C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Aggregating HRRecovery db records", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192C0 != -1) {
      dispatch_once(&qword_1024192C0, &stru_1022B3FF8);
    }
    long long v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLHRRecoveryService setUpAggregationOnTimer]_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_10048E02C(*(void *)(*(void *)(a1 + 32) + 24));
  sub_10048E5E4(*(void *)(*(void *)(a1 + 32) + 48));
  return sub_10048EB9C(*(void *)(*(void *)(a1 + 32) + 72));
}

uint64_t sub_10048E02C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B4108);
    }
    uint64_t v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v3 = sub_1000D3E50();
      int v4 = *(_DWORD *)(*(void *)(a1 + 24) + 132);
      *(_DWORD *)uint64_t buf = 134218240;
      *(double *)size_t v21 = v3;
      *(_WORD *)&v21[8] = 1024;
      int v22 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records start %f, count ~%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B4108);
      }
      sub_1000D3E50();
      float v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<HRRecoveryInputHR, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = HRRecoveryInputHR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), a1);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B4108);
    }
    uint64_t v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v7 = sub_1000D3E50();
      int v8 = *(_DWORD *)(*(void *)(a1 + 24) + 132);
      *(_DWORD *)uint64_t buf = 134218240;
      *(double *)size_t v21 = v7;
      *(_WORD *)&v21[8] = 1024;
      int v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Aggregating records stop %f, count ~%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B4108);
      }
      sub_1000D3E50();
      BOOL v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<HRRecoveryInputHR, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = HRRecoveryInputHR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    uint64_t v9 = *(void *)(a1 + 24);
    double v10 = (double)*(int *)(v9 + 132);
    if ((double)(int)sub_100492184(v9, (double **)a1) * 1.2 < v10)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B4108);
      }
      unint64_t v11 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 24);
        int v13 = *(_DWORD *)(v12 + 132);
        int v14 = sub_100492184(v12, (double **)a1);
        *(_DWORD *)uint64_t buf = 67109376;
        *(_DWORD *)size_t v21 = v13;
        *(_WORD *)&v21[4] = 1024;
        *(_DWORD *)&v21[6] = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022B4108);
        }
        sub_100492184(*(void *)(a1 + 24), (double **)a1);
        unint64_t v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<HRRecoveryInputHR, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = HRRecoveryInputHR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
    }
    return v5;
  }
  else
  {
    float v16 = *(uint64_t (**)(void))(**(void **)(a1 + 24) + 32);
    return v16();
  }
}

uint64_t sub_10048E5E4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B4108);
    }
    uint64_t v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v3 = sub_1000D3E50();
      int v4 = *(_DWORD *)(*(void *)(a1 + 24) + 132);
      *(_DWORD *)uint64_t buf = 134218240;
      *(double *)size_t v21 = v3;
      *(_WORD *)&v21[8] = 1024;
      int v22 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records start %f, count ~%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B4108);
      }
      sub_1000D3E50();
      float v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<HRRecoveryInputWR, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = HRRecoveryInputWR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), a1);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B4108);
    }
    uint64_t v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v7 = sub_1000D3E50();
      int v8 = *(_DWORD *)(*(void *)(a1 + 24) + 132);
      *(_DWORD *)uint64_t buf = 134218240;
      *(double *)size_t v21 = v7;
      *(_WORD *)&v21[8] = 1024;
      int v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Aggregating records stop %f, count ~%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B4108);
      }
      sub_1000D3E50();
      BOOL v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<HRRecoveryInputWR, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = HRRecoveryInputWR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    uint64_t v9 = *(void *)(a1 + 24);
    double v10 = (double)*(int *)(v9 + 132);
    if ((double)(int)sub_1004923B4(v9, (double **)a1) * 1.2 < v10)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B4108);
      }
      unint64_t v11 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 24);
        int v13 = *(_DWORD *)(v12 + 132);
        int v14 = sub_1004923B4(v12, (double **)a1);
        *(_DWORD *)uint64_t buf = 67109376;
        *(_DWORD *)size_t v21 = v13;
        *(_WORD *)&v21[4] = 1024;
        *(_DWORD *)&v21[6] = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022B4108);
        }
        sub_1004923B4(*(void *)(a1 + 24), (double **)a1);
        unint64_t v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<HRRecoveryInputWR, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = HRRecoveryInputWR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
    }
    return v5;
  }
  else
  {
    float v16 = *(uint64_t (**)(void))(**(void **)(a1 + 24) + 32);
    return v16();
  }
}

uint64_t sub_10048EB9C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B4108);
    }
    uint64_t v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v3 = sub_1000D3E50();
      int v4 = *(_DWORD *)(*(void *)(a1 + 24) + 132);
      *(_DWORD *)uint64_t buf = 134218240;
      *(double *)size_t v21 = v3;
      *(_WORD *)&v21[8] = 1024;
      int v22 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records start %f, count ~%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B4108);
      }
      sub_1000D3E50();
      float v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<HRRecoverySession, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = HRRecoverySession, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), a1);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B4108);
    }
    uint64_t v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v7 = sub_1000D3E50();
      int v8 = *(_DWORD *)(*(void *)(a1 + 24) + 132);
      *(_DWORD *)uint64_t buf = 134218240;
      *(double *)size_t v21 = v7;
      *(_WORD *)&v21[8] = 1024;
      int v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Aggregating records stop %f, count ~%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B4108);
      }
      sub_1000D3E50();
      BOOL v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<HRRecoverySession, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = HRRecoverySession, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    uint64_t v9 = *(void *)(a1 + 24);
    double v10 = (double)*(int *)(v9 + 132);
    if ((double)(int)sub_1004925B4(v9, (double **)a1) * 1.2 < v10)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B4108);
      }
      unint64_t v11 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 24);
        int v13 = *(_DWORD *)(v12 + 132);
        int v14 = sub_1004925B4(v12, (double **)a1);
        *(_DWORD *)uint64_t buf = 67109376;
        *(_DWORD *)size_t v21 = v13;
        *(_WORD *)&v21[4] = 1024;
        *(_DWORD *)&v21[6] = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022B4108);
        }
        sub_1004925B4(*(void *)(a1 + 24), (double **)a1);
        unint64_t v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<HRRecoverySession, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = HRRecoverySession, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
    }
    return v5;
  }
  else
  {
    float v16 = *(uint64_t (**)(void))(**(void **)(a1 + 24) + 32);
    return v16();
  }
}

void sub_10048FDBC(id a1, BOOL a2, NSError *a3)
{
  if (a2)
  {
    if (qword_1024192C0 != -1) {
      dispatch_once(&qword_1024192C0, &stru_1022B3FF8);
    }
    double v3 = qword_1024192C8;
    if (os_log_type_enabled((os_log_t)qword_1024192C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "HRRecovery successfully pushed to HKHealthStore", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192C0 != -1) {
        dispatch_once(&qword_1024192C0, &stru_1022B3FF8);
      }
      int v4 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLHRRecoveryService storeHRRecoveryToHealthKit:]_block_invoke", "%s\n");
LABEL_19:
      if (v4 != buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_1024192C0 != -1) {
      dispatch_once(&qword_1024192C0, &stru_1022B3FF8);
    }
    uint64_t v6 = qword_1024192C8;
    if (os_log_type_enabled((os_log_t)qword_1024192C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 138543362;
      int v8 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "HKHealthStore, HRRecovery, saveObjects failed on, %{public}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192C0 != -1) {
        dispatch_once(&qword_1024192C0, &stru_1022B3FF8);
      }
      int v4 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLHRRecoveryService storeHRRecoveryToHealthKit:]_block_invoke", "%s\n");
      goto LABEL_19;
    }
  }
}

void sub_100490138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100490494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,std::__shared_weak_count *a58)
{
  if (a58) {
    sub_1000DB0A0(a58);
  }
  _Unwind_Resume(exception_object);
}

void sub_100491154(_Unwind_Exception *a1)
{
}

NSDictionary *sub_100491194(uint64_t a1)
{
  v45[0] = @"age_bin";
  float v2 = *(float *)(*(void *)(a1 + 32) + 100);
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v42 = 0;
  sub_10010F834(&v42, (const void *)qword_10247AB58, unk_10247AB60, (unk_10247AB60 - qword_10247AB58) >> 2);
  if (v43 == v42)
  {
    unint64_t v3 = 0;
  }
  else
  {
    unint64_t v3 = 0;
    unint64_t v4 = (v43 - (unsigned char *)v42) >> 2;
    if (v4 <= 1) {
      unint64_t v4 = 1;
    }
    while (*((float *)v42 + v3) < v2)
    {
      if (v4 == ++v3)
      {
        unint64_t v3 = v4;
        break;
      }
    }
  }
  v46[0] = +[NSNumber numberWithInt:v3];
  v45[1] = @"gender";
  v46[1] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 96)];
  v45[2] = @"useBetaBlocker";
  v46[2] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 108)];
  v45[3] = @"userBMI_bin";
  float v5 = *(float *)(*(void *)(a1 + 32) + 104);
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v39 = 0;
  sub_10010F834(&v39, (const void *)qword_10247AB78, unk_10247AB80, (unk_10247AB80 - qword_10247AB78) >> 2);
  if (v40 == v39)
  {
    unint64_t v6 = 0;
  }
  else
  {
    unint64_t v6 = 0;
    unint64_t v7 = (v40 - (unsigned char *)v39) >> 2;
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    while (*((float *)v39 + v6) < v5)
    {
      if (v7 == ++v6)
      {
        unint64_t v6 = v7;
        break;
      }
    }
  }
  v46[3] = +[NSNumber numberWithInt:v6];
  v45[4] = @"restingHR";
  LODWORD(v8) = *(_DWORD *)(*(void *)(a1 + 32) + 220);
  v46[4] = +[NSNumber numberWithFloat:v8];
  v45[5] = @"hrmax";
  LODWORD(v9) = *(_DWORD *)(*(void *)(a1 + 32) + 224);
  v46[5] = +[NSNumber numberWithFloat:v9];
  v45[6] = @"HRRecoveryEstimateStatus";
  v46[6] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 112)];
  v45[7] = @"diffTimeRecoveryOnsetWorkout";
  v46[7] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 32) + 120)];
  v45[8] = @"diffTimeTDropWorkoutEnd";
  v46[8] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 32) + 128)];
  v45[9] = @"hrRecovery";
  v46[9] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 136)];
  v45[10] = @"hrRecoverySession";
  v46[10] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 140)];
  v45[11] = @"peakHR";
  LODWORD(v10) = *(_DWORD *)(*(void *)(a1 + 32) + 144);
  v46[11] = +[NSNumber numberWithFloat:v10];
  v45[12] = @"steadyStateHR";
  LODWORD(v11) = *(_DWORD *)(*(void *)(a1 + 32) + 148);
  unsigned char v46[12] = +[NSNumber numberWithFloat:v11];
  v45[13] = @"hrMinAdjusted";
  LODWORD(v12) = *(_DWORD *)(*(void *)(a1 + 32) + 152);
  v46[13] = +[NSNumber numberWithFloat:v12];
  v45[14] = @"observedHRRecovery";
  LODWORD(v13) = *(_DWORD *)(*(void *)(a1 + 32) + 156);
  v46[14] = +[NSNumber numberWithFloat:v13];
  v45[15] = @"recoveryLoad";
  LODWORD(v14) = *(_DWORD *)(*(void *)(a1 + 32) + 160);
  v46[15] = +[NSNumber numberWithFloat:v14];
  v45[16] = @"maxRecoveryHR";
  LODWORD(v15) = *(_DWORD *)(*(void *)(a1 + 32) + 164);
  v46[16] = +[NSNumber numberWithFloat:v15];
  v45[17] = @"minRecoveryHR";
  LODWORD(v16) = *(_DWORD *)(*(void *)(a1 + 32) + 168);
  v46[17] = +[NSNumber numberWithFloat:v16];
  v45[18] = @"recoveryMetsMean";
  LODWORD(v17) = *(_DWORD *)(*(void *)(a1 + 32) + 172);
  v46[18] = +[NSNumber numberWithFloat:v17];
  v45[19] = @"recoveryMetsStdDev";
  LODWORD(v18) = *(_DWORD *)(*(void *)(a1 + 32) + 176);
  v46[19] = +[NSNumber numberWithFloat:v18];
  v45[20] = @"biasAdjustment";
  LODWORD(v19) = *(_DWORD *)(*(void *)(a1 + 32) + 180);
  v46[20] = +[NSNumber numberWithFloat:v19];
  v45[21] = @"isOtherwiseEligibleForLongitudinal";
  v46[21] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 184)];
  v45[22] = @"hrRecoveryReference";
  LODWORD(v20) = *(_DWORD *)(*(void *)(a1 + 32) + 188);
  v46[22] = +[NSNumber numberWithFloat:v20];
  v45[23] = @"hrRecoveryReferencePeak";
  LODWORD(v21) = *(_DWORD *)(*(void *)(a1 + 32) + 192);
  v46[23] = +[NSNumber numberWithFloat:v21];
  v45[24] = @"hrOneMinPostRecovery";
  LODWORD(v22) = *(_DWORD *)(*(void *)(a1 + 32) + 196);
  v46[24] = +[NSNumber numberWithFloat:v22];
  v45[25] = @"hrOneMinExponential";
  LODWORD(v23) = *(_DWORD *)(*(void *)(a1 + 32) + 200);
  v46[25] = +[NSNumber numberWithFloat:v23];
  v45[26] = @"isEligibleForHK";
  v46[26] = +[NSNumber numberWithInt:*(unsigned __int8 *)(*(void *)(a1 + 32) + 204)];
  v45[27] = @"minHRAfterWorkoutEnd";
  LODWORD(v24) = *(_DWORD *)(*(void *)(a1 + 32) + 208);
  v46[27] = +[NSNumber numberWithFloat:v24];
  v45[28] = @"maxHRAfterWorkoutEnd";
  LODWORD(v25) = *(_DWORD *)(*(void *)(a1 + 32) + 212);
  v46[28] = +[NSNumber numberWithFloat:v25];
  v45[29] = @"oneMinusFHRAfterWorkoutEnd";
  LODWORD(v26) = *(_DWORD *)(*(void *)(a1 + 32) + 216);
  v46[29] = +[NSNumber numberWithFloat:v26];
  v45[30] = @"peakHrOneMinusFhr";
  LODWORD(v27) = *(_DWORD *)(*(void *)(a1 + 32) + 228);
  v46[30] = +[NSNumber numberWithFloat:v27];
  v45[31] = @"vo2MaxEstimationStatus";
  v46[31] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 232)];
  v45[32] = @"VO2MaxValue";
  v46[32] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 236)];
  v45[33] = @"lambda";
  LODWORD(v28) = *(_DWORD *)(*(void *)(a1 + 32) + 240);
  v46[33] = +[NSNumber numberWithFloat:v28];
  v45[34] = @"mse";
  LODWORD(v29) = *(_DWORD *)(*(void *)(a1 + 32) + 244);
  v46[34] = +[NSNumber numberWithFloat:v29];
  v45[35] = @"evs";
  LODWORD(v30) = *(_DWORD *)(*(void *)(a1 + 32) + 248);
  v46[35] = +[NSNumber numberWithFloat:v30];
  v45[36] = @"sessionType";
  v46[36] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 252)];
  v45[37] = @"workoutType";
  v46[37] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 256)];
  v45[38] = @"sessionDuration_bin";
  float v31 = *(float *)(*(void *)(a1 + 32) + 264);
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  long long __p = 0;
  sub_10010F834(&__p, (const void *)qword_10247AB38, unk_10247AB40, (unk_10247AB40 - qword_10247AB38) >> 2);
  if (v37 == __p)
  {
    unint64_t v32 = 0;
  }
  else
  {
    unint64_t v32 = 0;
    unint64_t v33 = (v37 - (unsigned char *)__p) >> 2;
    if (v33 <= 1) {
      unint64_t v33 = 1;
    }
    while (*((float *)__p + v32) < v31)
    {
      if (v33 == ++v32)
      {
        unint64_t v32 = v33;
        break;
      }
    }
  }
  v46[38] = +[NSNumber numberWithInt:v32];
  v45[39] = @"LyonAlgVersion";
  v46[39] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 268)];
  uint64_t v34 = +[NSDictionary dictionaryWithObjects:v46 forKeys:v45 count:40];
  if (__p)
  {
    uint64_t v37 = __p;
    operator delete(__p);
  }
  if (v39)
  {
    uint64_t v40 = v39;
    operator delete(v39);
  }
  if (v42)
  {
    uint64_t v43 = v42;
    operator delete(v42);
  }
  return v34;
}

void sub_100491930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
}

void sub_100491C10(id a1)
{
  qword_1024192C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HRRecovery");
}

void *sub_100491C40@<X0>(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x170uLL);
  __n128 result = sub_100491C9C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100491C88(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100491C9C(void *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B4028;
  sub_101436B94(a1 + 3, *a2);
  return a1;
}

void sub_100491CE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100491CFC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4028;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100491D1C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4028;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100491D70(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

uint64_t sub_100491D98(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_WORD *)(a1 + 40) = 1;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    float v5 = *(std::__shared_weak_count **)(a1 + 32);
    *(void *)(a1 + 24) = v3;
    *(void *)(a1 + 32) = v4;
    if (v5) {
      sub_1000DB0A0(v5);
    }
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 24) = v3;
  }
  sub_1003B2630((void **)a1);
  return a1;
}

void sub_100491E10(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  if (*v3) {
    sub_1000DB0A0(*v3);
  }
  sub_101A613BC(v1);
  _Unwind_Resume(a1);
}

void *sub_100491E34@<X0>(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x190uLL);
  __n128 result = sub_100491E90(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100491E7C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100491E90(void *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B4078;
  sub_1010EDF88(a1 + 3, *a2);
  return a1;
}

void sub_100491EDC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100491EF0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4078;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100491F10(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4078;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100491F64(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void *sub_100491F8C@<X0>(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x1F0uLL);
  __n128 result = sub_100491FE8(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100491FD4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100491FE8(void *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B40C8;
  sub_100B41C20(a1 + 3, *a2);
  return a1;
}

void sub_100492034(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100492048(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B40C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100492068(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B40C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1004920BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void sub_1004920E4(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = (std::__shared_weak_count *)a2[11];
    if (v3) {
      sub_1000DB0A0(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)a2[9];
    if (v4) {
      sub_1000DB0A0(v4);
    }
    float v5 = (std::__shared_weak_count *)a2[7];
    if (v5) {
      sub_1000DB0A0(v5);
    }
    operator delete();
  }
}

void sub_100492154(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100492184(uint64_t a1, double **a2)
{
  uint64_t v3 = *a2;
  float v2 = a2[1];
  double v4 = (*a2)[1];
  double v5 = *(float *)(a1 + 136);
  if (v4 <= v5) {
    double v4 = *(float *)(a1 + 136);
  }
  unint64_t v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    uint64_t v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    double v8 = *v3;
    do
    {
      double v9 = *v6;
      double v10 = v6[1];
      v6 += 3;
      uint64_t v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5) {
        double v4 = *(float *)(a1 + 136);
      }
      else {
        double v4 = v10;
      }
      double v8 = v9;
    }
    while (v6 != v2);
  }
  if (v4 != 1.79769313e308)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022B4128);
    }
    double v11 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning No expiration rule was added so the number of records will be unbounded.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B4128);
      }
      double v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "int CLActivityRecorderDb<HRRecoveryInputHR, CLActivityDB::ClassBDataProtectionPolicy>::estimateRecordsNeeded(const CLAggregationRules &) [T = HRRecoveryInputHR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  return v7;
}

void sub_100492384(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1004923B4(uint64_t a1, double **a2)
{
  uint64_t v3 = *a2;
  float v2 = a2[1];
  double v4 = (*a2)[1];
  double v5 = *(float *)(a1 + 136);
  if (v4 <= v5) {
    double v4 = *(float *)(a1 + 136);
  }
  unint64_t v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    uint64_t v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    double v8 = *v3;
    do
    {
      double v9 = *v6;
      double v10 = v6[1];
      v6 += 3;
      uint64_t v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5) {
        double v4 = *(float *)(a1 + 136);
      }
      else {
        double v4 = v10;
      }
      double v8 = v9;
    }
    while (v6 != v2);
  }
  if (v4 != 1.79769313e308)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022B4128);
    }
    double v11 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning No expiration rule was added so the number of records will be unbounded.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B4128);
      }
      double v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "int CLActivityRecorderDb<HRRecoveryInputWR, CLActivityDB::ClassBDataProtectionPolicy>::estimateRecordsNeeded(const CLAggregationRules &) [T = HRRecoveryInputWR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  return v7;
}

uint64_t sub_1004925B4(uint64_t a1, double **a2)
{
  uint64_t v3 = *a2;
  float v2 = a2[1];
  double v4 = (*a2)[1];
  double v5 = *(float *)(a1 + 136);
  if (v4 <= v5) {
    double v4 = *(float *)(a1 + 136);
  }
  unint64_t v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    uint64_t v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    double v8 = *v3;
    do
    {
      double v9 = *v6;
      double v10 = v6[1];
      v6 += 3;
      uint64_t v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5) {
        double v4 = *(float *)(a1 + 136);
      }
      else {
        double v4 = v10;
      }
      double v8 = v9;
    }
    while (v6 != v2);
  }
  if (v4 != 1.79769313e308)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022B4128);
    }
    double v11 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning No expiration rule was added so the number of records will be unbounded.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B4128);
      }
      double v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "int CLActivityRecorderDb<HRRecoverySession, CLActivityDB::ClassBDataProtectionPolicy>::estimateRecordsNeeded(const CLAggregationRules &) [T = HRRecoverySession, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  return v7;
}

void sub_1004927B4(void *__p@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = __p;
  operator delete(__p);
}

void sub_10049286C(id a1)
{
  qword_10247ABB0 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLActivityLoggerAdapterSilo"];
}

uint64_t sub_100492944(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100492AA4;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_10247ABC0 != -1) {
    dispatch_once(&qword_10247ABC0, block);
  }
  return qword_102489F68;
}

void sub_100492AA4()
{
}

void sub_100492AF0()
{
}

void sub_100492B14(void *a1, uint64_t a2)
{
  *a1 = a2;
  sub_10053B99C(0, __p);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  }
  double v4 = [+[NSString stringWithUTF8String:v3] stringByAppendingPathComponent:@"activityLog.pb"];
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  a1[1] = v4;
  a1[2] = 0;
  sub_10047CE4C(a1 + 3, v4);
}

void sub_100492E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_1011E8CD0(v20);
  sub_10047D700(v19);
  uint64_t v22 = *(void *)(v18 + 16);
  *(void *)(v18 + 16) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  _Unwind_Resume(a1);
}

void sub_100492ED8(uint64_t a1, id *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CLProfilingIdentify();
  [objc_msgSend(*a2, "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022B4188);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    double v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLActivityLogger::onFitnessDataCollectionSettingChangedNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B4188);
    }
    double v11 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      __int16 v20 = 2082;
      double v21 = "activity";
      __int16 v22 = 2050;
      double v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLActivityLogger::onFitnessDataCollectionSettingChangedNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v15 = 0;
  }
  id v12 = [*a2 silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  double v13[2] = sub_100493BC8;
  v13[3] = &unk_1022ACFE0;
  v13[4] = a2;
  void v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  [v12 sync:v13];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_1004930F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100493114(uint64_t a1, int *a2, unsigned int *a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022B4188);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    double v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLActivityLogger::onMotionStateMediatorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B4188);
    }
    double v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      char v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLActivityLogger::onMotionStateMediatorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1004933C4((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1004932D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004932F0(uint64_t a1)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, (const void *)a1, @"NanoLifestyleEnableFitnessDataCollectionSettingDidChangeNotification", 0);
  uint64_t v3 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(v3, (const void *)a1, @"com.apple.managedconfiguration.defaultsdidchange", 0);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  *(void *)(a1 + 8) = 0;
  sub_1011E8CD0(a1 + 72);
  sub_10047D700(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

void sub_1004933C4(uint64_t a1, uint64_t a2, int *a3, unsigned int *a4)
{
  [*(id *)a1 silo];
  if (*a3 == 1)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022B4168);
    }
    uint64_t v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v8 = *a4;
      unsigned int v9 = a4[2];
      unsigned int v10 = a4[3];
      unsigned int v11 = a4[5];
      unsigned int v12 = a4[6];
      unsigned int v13 = a4[15];
      uint64_t v14 = *((void *)a4 + 8);
      uint64_t v15 = *((void *)a4 + 11);
      *(_DWORD *)uint64_t buf = 67110912;
      *(_DWORD *)double v24 = v8;
      *(_WORD *)&v24[4] = 1024;
      *(_DWORD *)&v24[6] = v9;
      __int16 v25 = 1024;
      unsigned int v26 = v10;
      __int16 v27 = 1024;
      unsigned int v28 = v11;
      __int16 v29 = 1024;
      unsigned int v30 = v12;
      __int16 v31 = 1024;
      unsigned int v32 = v13;
      __int16 v33 = 2048;
      uint64_t v34 = v14;
      __int16 v35 = 2048;
      uint64_t v36 = v15;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLActivityLogger, kNotificationActivityOverride,overrideAction,%d,activity{State,%d,Confidence,%d,MountedState,%d,MountedConfidence,%d,exitState,%d,estExitTime,%f,startTime,%f}", buf, 0x3Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B4168);
      }
      double v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLActivityLogger::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
    __int16 v16 = objc_alloc_init(ALActivityLog);
    [(ALActivityLog *)v16 setTimestamp:CFAbsoluteTimeGetCurrent()];
    [(ALActivityLog *)v16 setActivityOverrideMsg:objc_alloc_init(ALActivityOverrideMsg)];
    [(ALActivityOverrideMsg *)[(ALActivityLog *)v16 activityOverrideMsg] setOverrideAction:*a4];
    [(ALActivityOverrideMsg *)[(ALActivityLog *)v16 activityOverrideMsg] setActivity:objc_alloc_init(ALCLMotionActivity)];
    [(ALCLMotionActivity *)[(ALActivityOverrideMsg *)[(ALActivityLog *)v16 activityOverrideMsg] activity] setType:a4[2]];
    [(ALCLMotionActivity *)[(ALActivityOverrideMsg *)[(ALActivityLog *)v16 activityOverrideMsg] activity] setConfidence:a4[3]];
    [(ALCLMotionActivity *)[(ALActivityOverrideMsg *)[(ALActivityLog *)v16 activityOverrideMsg] activity] setMountedState:a4[5]];
    [(ALCLMotionActivity *)[(ALActivityOverrideMsg *)[(ALActivityLog *)v16 activityOverrideMsg] activity] setMountedConfidence:a4[6]];
    [(ALCLMotionActivity *)[(ALActivityOverrideMsg *)[(ALActivityLog *)v16 activityOverrideMsg] activity] setExitState:a4[15]];
    [(ALCLMotionActivity *)[(ALActivityOverrideMsg *)[(ALActivityLog *)v16 activityOverrideMsg] activity] setEstExitTime:*((double *)a4 + 8)];
    [(ALCLMotionActivity *)[(ALActivityOverrideMsg *)[(ALActivityLog *)v16 activityOverrideMsg] activity] setStartTime:*((double *)a4 + 11)];
    [(ALCLMotionActivity *)[(ALActivityOverrideMsg *)[(ALActivityLog *)v16 activityOverrideMsg] activity] setTimestamp:*((double *)a4 + 6)];
    [*(id *)a1 silo];
    if (*(unsigned char *)(a1 + 72)) {
      sub_10047D1E8((void *)(a1 + 24), v16);
    }
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022B4168);
    }
    int v17 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
    {
      id v18 = [[-[ALActivityLog formattedText](v16, "formattedText") UTF8String];
      *(_DWORD *)uint64_t buf = 136315138;
      *(void *)double v24 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CLActivityLogger,log kNotificationActivityOverride:%s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B4168);
      }
      [(-[ALActivityLog formattedText](v16, "formattedText")) UTF8String];
LABEL_29:
      __int16 v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLActivityLogger::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022B4168);
    }
    uint64_t v19 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = *a3;
      *(_DWORD *)uint64_t buf = 67109120;
      *(_DWORD *)double v24 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#Warning CLActivityLogger, Unhandled notification %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B4168);
      }
      goto LABEL_29;
    }
  }
}

void sub_1004939FC(uint64_t a1)
{
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022B4168);
  }
  float v2 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLActivityLogger, dataCollection setting changed", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022B4168);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLActivityLogger::onFitnessDataCollectionSettingChangedNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  sub_1011E6F0C(a1 + 72);
}

void sub_100493B98(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100493BC8(uint64_t a1)
{
}

void sub_100493BD0(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_100493C00()
{
  sub_100134750(qword_10247AB98, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247AB98, (void *)&_mh_execute_header);
}

void sub_100493D10(id a1)
{
  qword_10247ABE0 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLHarvestControllerSilo"];
}

void sub_100493D88(id a1)
{
  if (!sub_10073CEB4()) {
    byte_10247ABF0 = 1;
  }
  if (sub_10074056C())
  {
    byte_10247ABF0 = 0;
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022B4270);
    }
    uint64_t v1 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Harvest is not supported in multiuser mode", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 == -1)
      {
LABEL_28:
        uint64_t v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "+[CLHarvesterService isSupported]_block_invoke", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
        goto LABEL_17;
      }
LABEL_30:
      dispatch_once(&qword_102419560, &stru_1022B4270);
      goto LABEL_28;
    }
  }
  else if (sub_10074339C())
  {
    byte_10247ABF0 = 0;
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022B4270);
    }
    float v2 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Harvest is not supported in diagnostics mode", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 == -1) {
        goto LABEL_28;
      }
      goto LABEL_30;
    }
  }
LABEL_17:
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022B4270);
  }
  uint64_t v3 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    int v7 = byte_10247ABF0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CLHarvesterService is supported, %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022B4270);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "+[CLHarvesterService isSupported]_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
}

void sub_10049423C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100494474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_100495C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46,uint64_t a47,std::__shared_weak_count *a48,uint64_t a49,uint64_t a50,void *a51)
{
  if (a46) {
    sub_1000DB0A0(a46);
  }
  if (a48) {
    sub_1000DB0A0(a48);
  }
  _Unwind_Resume(a1);
}

void sub_100495FD4()
{
}

void sub_100495FE0()
{
}

void sub_1004963FC()
{
}

void sub_100496464(id a1)
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022B4270);
  }
  uint64_t v1 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    v2[0] = 68289026;
    v2[1] = 0;
    __int16 v3 = 2082;
    uint64_t v4 = "";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Classifier has been set up\"}", (uint8_t *)v2, 0x12u);
  }
}

void sub_10049653C(id a1, int a2)
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022B4270);
  }
  float v2 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    __int16 v4 = 2082;
    uint64_t v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"flushing archivemanager to disk as result of a darwin notification.\"}", (uint8_t *)v3, 0x12u);
  }
}

id sub_100496614(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  _DWORD v3[2] = sub_100496688;
  v3[3] = &unk_10229FED8;
  uint64_t v1 = *(void **)(a1 + 32);
  void v3[4] = *(void *)(a1 + 40);
  return [v1 async:v3];
}

void sub_100496688(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 64))
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022B4270);
    }
    float v2 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v6 = 0;
      __int16 v7 = 2082;
      unsigned int v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Reload harvest rules and settings\"}", buf, 0x12u);
    }
    (*(void (**)(void))(**(void **)(*(void *)(a1 + 32) + 64) + 48))(*(void *)(*(void *)(a1 + 32) + 64));
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022B4270);
    }
    __int16 v3 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Shutting down. Do not reload harvest rules and settings", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022B4270);
      }
      __int16 v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLHarvesterService beginService]_block_invoke", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

uint64_t sub_1004968D8(uint64_t a1)
{
  id v2 = [[+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration") countryCode];
  if ([*(id *)(*(void *)(a1 + 32) + 160) isEqualToString:@"CN"]
    && ([v2 isEqualToString:@"CN"] & 1) == 0)
  {
    sub_10054B17C(*(void *)(*(void *)(a1 + 32) + 64));
  }
  [*(id *)(a1 + 32) setLastCountryCode:v2];
  [*(id *)(*(void *)(a1 + 32) + 16) refresh];
  __int16 v3 = *(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 32) + 64) + 48);

  return v3();
}

void sub_100496B6C(uint64_t a1)
{
  uint64_t v1 = (void *)(*(void *)(a1 + 32) + 64);
  id v2 = *(std::__shared_weak_count **)(*(void *)(a1 + 32) + 72);
  *uint64_t v1 = 0;
  v1[1] = 0;
  if (v2) {
    sub_1000DB0A0(v2);
  }
}

void sub_100496F54(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100496F78(void *a1, uint64_t a2)
{
  id v2 = [a1 valueForEntitlement:a2];
  if (v2)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass() & 1) != 0 && ([v2 BOOLValue]) {
      return 1;
    }
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022B4270);
  }
  __int16 v4 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 138543362;
    id v7 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "connecting process isn't entitled, they shall not pass %{public}@", buf, 0xCu);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022B4270);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL connectionHasEntitlement(NSXPCConnection *, NSString *)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
    return 0;
  }
  return result;
}

void sub_100497710(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void *sub_100497740@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  __int16 v4 = operator new(0x158uLL);
  BOOL result = sub_10049779C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100497788(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10049779C(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B42A0;
  sub_101404BA8(a1 + 3, *a2);
  return a1;
}

void sub_1004977E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004977FC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B42A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10049781C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B42A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100497870(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_100497898@<X0>(uint64_t *a1@<X1>, long long *a2@<X2>, void *a3@<X8>)
{
  int v6 = operator new(0x4D8uLL);
  BOOL result = sub_1004978FC(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1004978E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1004978FC(void *a1, uint64_t *a2, long long *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B42F0;
  sub_100497A0C((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_10049795C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100497970(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B42F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100497990(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B42F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1004979E4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100497A0C(uint64_t a1, uint64_t a2, uint64_t *a3, long long *a4)
{
  uint64_t v5 = *a3;
  long long v6 = *a4;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  sub_1005471FC(a2, v5, &v6);
  if (*((void *)&v6 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v6 + 1));
  }
}

void sub_100497A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100497A70@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  __int16 v4 = operator new(0x48uLL);
  BOOL result = sub_100497ACC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100497AB8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100497ACC(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B4340;
  sub_1004DB318(a1 + 3, *a2);
  return a1;
}

void sub_100497B18(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100497B2C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4340;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100497B4C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4340;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100497BA0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_100497BC8@<X0>(uint64_t *a1@<X1>, long long *a2@<X2>, uint64_t *a3@<X3>, void *a4@<X4>, void *a5@<X8>)
{
  unsigned int v10 = operator new(0x120uLL);
  BOOL result = sub_100497C44(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_100497C30(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100497C44(void *a1, uint64_t *a2, long long *a3, uint64_t *a4, void *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B4390;
  sub_100497D5C((uint64_t)&v7, (uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_100497CAC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100497CC0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4390;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100497CE0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4390;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100497D34(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100497D5C(uint64_t a1, uint64_t a2, uint64_t *a3, long long *a4, uint64_t *a5, void *a6)
{
  uint64_t v7 = *a3;
  long long v15 = *a4;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  unsigned int v8 = (std::__shared_weak_count *)a5[1];
  uint64_t v13 = *a5;
  uint64_t v14 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v9 = (std::__shared_weak_count *)a6[1];
  if (*a6) {
    uint64_t v10 = *a6 + 32;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = v10;
  unsigned int v12 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100999100(a2, v7, &v15, &v13, &v11);
  if (v12) {
    sub_1000DB0A0(v12);
  }
  if (v14) {
    sub_1000DB0A0(v14);
  }
  if (*((void *)&v15 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v15 + 1));
  }
}

void sub_100497E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  sub_101A61384(v11, v10);
  _Unwind_Resume(a1);
}

void *sub_100497E40@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  __int16 v4 = operator new(0xF8uLL);
  BOOL result = sub_100497E9C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100497E88(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100497E9C(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B43E0;
  sub_1013B2D98(a1 + 3, *a2);
  return a1;
}

void sub_100497EE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100497EFC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B43E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100497F1C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B43E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100497F70(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_100497F98@<X0>(uint64_t *a1@<X1>, long long *a2@<X2>, uint64_t *a3@<X3>, void *a4@<X4>, uint64_t *a5@<X5>, void *a6@<X6>, void *a7@<X8>)
{
  uint64_t v14 = operator new(0x1A0uLL);
  BOOL result = sub_10049802C(v14, a1, a2, a3, a4, a5, a6);
  *a7 = v14 + 3;
  a7[1] = v14;
  return result;
}

void sub_100498018(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10049802C(void *a1, uint64_t *a2, long long *a3, uint64_t *a4, void *a5, uint64_t *a6, void *a7)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B4430;
  sub_10049814C((uint64_t)&v9, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7);
  return a1;
}

void sub_10049809C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004980B0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4430;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004980D0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4430;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100498124(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_10049814C(uint64_t a1, uint64_t a2, uint64_t *a3, long long *a4, uint64_t *a5, void *a6, uint64_t *a7, void *a8)
{
  uint64_t v9 = *a3;
  long long v24 = *a4;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  uint64_t v10 = (std::__shared_weak_count *)a5[1];
  uint64_t v22 = *a5;
  double v23 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = (std::__shared_weak_count *)a6[1];
  if (*a6) {
    uint64_t v12 = *a6 + 16;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v20 = v12;
  double v21 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = (std::__shared_weak_count *)a7[1];
  uint64_t v18 = *a7;
  uint64_t v19 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = (std::__shared_weak_count *)a8[1];
  if (*a8) {
    uint64_t v15 = *a8 + 8;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = v15;
  int v17 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_10113578C(a2, v9, &v24, &v22, &v20, &v18, &v16);
  if (v17) {
    sub_1000DB0A0(v17);
  }
  if (v19) {
    sub_1000DB0A0(v19);
  }
  if (v21) {
    sub_1000DB0A0(v21);
  }
  if (v23) {
    sub_1000DB0A0(v23);
  }
  if (*((void *)&v24 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v24 + 1));
  }
}

void sub_100498280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  sub_101A616E8(v10);
  _Unwind_Resume(a1);
}

void *sub_1004982AC@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  __int16 v4 = operator new(0x28uLL);
  BOOL result = sub_100498308(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1004982F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100498308(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B4480;
  sub_100875214(a1 + 3, *a2);
  return a1;
}

void sub_100498354(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100498368(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4480;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100498388(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4480;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1004983DC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_100498404@<X0>(long long *a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t *a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0x2C8uLL);
  BOOL result = sub_100498480(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_10049846C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100498480(void *a1, long long *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B44D0;
  sub_100498598((uint64_t)&v7, (uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_1004984E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004984FC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B44D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10049851C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B44D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100498570(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100498598(uint64_t a1, uint64_t a2, long long *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  long long v15 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  long long v6 = (std::__shared_weak_count *)a4[1];
  uint64_t v13 = *a4;
  uint64_t v14 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v7 = (std::__shared_weak_count *)a5[1];
  uint64_t v11 = *a5;
  uint64_t v12 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v8 = (std::__shared_weak_count *)a6[1];
  uint64_t v9 = *a6;
  uint64_t v10 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_101441FAC(a2, &v15, &v13, &v11, &v9);
  if (v10) {
    sub_1000DB0A0(v10);
  }
  if (v12) {
    sub_1000DB0A0(v12);
  }
  if (v14) {
    sub_1000DB0A0(v14);
  }
  if (*((void *)&v15 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v15 + 1));
  }
}

void sub_100498678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  sub_101A6173C(v10);
  _Unwind_Resume(a1);
}

void *sub_1004986A0@<X0>(void *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  long long v6 = operator new(0x40uLL);
  BOOL result = sub_100498704(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1004986F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100498704(void *a1, void *a2, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B4520;
  sub_100C567C4(a1 + 3, *a2, *a3);
  return a1;
}

void sub_100498754(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100498768(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4520;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100498788(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4520;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1004987DC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_100498804@<X0>(uint64_t *a1@<X1>, long long *a2@<X2>, void *a3@<X3>, void *a4@<X4>, uint64_t *a5@<X5>, void *a6@<X6>, void *a7@<X7>, void *a8@<X8>)
{
  uint64_t v16 = operator new(0x258uLL);
  BOOL result = sub_1004988A8(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_100498894(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1004988A8(void *a1, uint64_t *a2, long long *a3, void *a4, void *a5, uint64_t *a6, void *a7, void *a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B4570;
  sub_1004989D0((uint64_t)&v10, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void sub_100498920(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100498934(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4570;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100498954(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4570;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1004989A8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1004989D0(uint64_t a1, uint64_t a2, uint64_t *a3, long long *a4, void *a5, void *a6, uint64_t *a7, void *a8, void *a9)
{
  uint64_t v10 = *a3;
  long long v22 = *a4;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  uint64_t v11 = (std::__shared_weak_count *)a5[1];
  if (*a5) {
    uint64_t v12 = *a5 + 24;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v20 = v12;
  double v21 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = (std::__shared_weak_count *)a6[1];
  uint64_t v14 = *a6 + 8;
  if (!*a6) {
    uint64_t v14 = 0;
  }
  uint64_t v18 = v14;
  uint64_t v19 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v15 = (std::__shared_weak_count *)a7[1];
  uint64_t v16 = *a7;
  int v17 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ((void (*)(uint64_t, uint64_t, long long *, uint64_t *, uint64_t *, uint64_t *, void, void))sub_1013B04A0)(a2, v10, &v22, &v20, &v18, &v16, *a8, *a9);
  if (v17) {
    sub_1000DB0A0(v17);
  }
  if (v19) {
    sub_1000DB0A0(v19);
  }
  if (v21) {
    sub_1000DB0A0(v21);
  }
  if (*((void *)&v22 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v22 + 1));
  }
}

void sub_100498AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  sub_101A6173C(v10);
  _Unwind_Resume(a1);
}

void *sub_100498B00@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  __int16 v4 = operator new(0x90uLL);
  BOOL result = sub_100498B5C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100498B48(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100498B5C(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B45C0;
  sub_100C65320(a1 + 3, *a2);
  return a1;
}

void sub_100498BA8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100498BBC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B45C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100498BDC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B45C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100498C30(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100498C58(uint64_t a1, uint64_t *a2, long long *a3, void *a4, void *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  long long v15 = operator new(0x898uLL);
  sub_100498CFC(v15, a2, a3, a4, a5, a6, a7, a8);
}

void sub_100498CE8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100498CFC(void *a1, uint64_t *a2, long long *a3, void *a4, void *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B4610;
  sub_100498E24((uint64_t)&v8, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8);
}

void sub_100498D74(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100498D88(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4610;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100498DA8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4610;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100498DFC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100498E24(uint64_t a1, uint64_t a2, uint64_t *a3, long long *a4, void *a5, void *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9)
{
  uint64_t v10 = *a3;
  long long v19 = *a4;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  uint64_t v11 = a5[1];
  if (*a5) {
    uint64_t v12 = *a5 + 24;
  }
  else {
    uint64_t v12 = 0;
  }
  v18[0] = v12;
  v18[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = a6[1];
  uint64_t v14 = *a6 + 8;
  if (!*a6) {
    uint64_t v14 = 0;
  }
  v17[0] = v14;
  v17[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = a7[1];
  v16[0] = *a7;
  v16[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100CFC064(a2, v10, &v19, v18, v17, v16, *a8, *a9);
}

void sub_100498F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  sub_101A6173C(v12);
  _Unwind_Resume(a1);
}

void *sub_100498F58@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  __int16 v4 = operator new(0x28uLL);
  BOOL result = sub_100498FB4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100498FA0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100498FB4(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B4660;
  sub_100793E10(a1 + 3, *a2);
  return a1;
}

void sub_100499000(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100499014(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4660;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100499034(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4660;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100499088(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1004990B0@<X0>(uint64_t *a1@<X1>, long long *a2@<X2>, void *a3@<X3>, void *a4@<X4>, uint64_t *a5@<X5>, uint64_t *a6@<X6>, uint64_t *a7@<X7>, void *a8@<X8>, uint64_t *a9)
{
  int v17 = operator new(0x1E8uLL);
  BOOL result = sub_100499164(v17, a1, a2, a3, a4, a5, a6, a7, a9);
  *a8 = v17 + 3;
  a8[1] = v17;
  return result;
}

void sub_100499150(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100499164(void *a1, uint64_t *a2, long long *a3, void *a4, void *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B46B0;
  sub_100499290((uint64_t)&v11, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8, a9);
  return a1;
}

void sub_1004991E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004991F4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B46B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100499214(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B46B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100499268(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100499290(uint64_t a1, uint64_t a2, uint64_t *a3, long long *a4, void *a5, void *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10)
{
  uint64_t v11 = *a3;
  long long v26 = *a4;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  uint64_t v12 = (std::__shared_weak_count *)a5[1];
  if (*a5) {
    uint64_t v13 = *a5 + 24;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v24 = v13;
  __int16 v25 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = (std::__shared_weak_count *)a6[1];
  if (*a6) {
    uint64_t v15 = *a6 + 8;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v22 = v15;
  double v23 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = (std::__shared_weak_count *)a7[1];
  uint64_t v20 = *a7;
  double v21 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v17 = (std::__shared_weak_count *)a8[1];
  uint64_t v18 = *a8;
  long long v19 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_101181584(a2, v11, &v26, &v24, &v22, &v20, &v18, *a9, *a10);
  if (v19) {
    sub_1000DB0A0(v19);
  }
  if (v21) {
    sub_1000DB0A0(v21);
  }
  if (v23) {
    sub_1000DB0A0(v23);
  }
  if (v25) {
    sub_1000DB0A0(v25);
  }
  if (*((void *)&v26 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v26 + 1));
  }
}

void sub_1004993D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  sub_101A616E8(v12);
  _Unwind_Resume(a1);
}

void *sub_100499400@<X0>(uint64_t *a1@<X1>, long long *a2@<X2>, void *a3@<X3>, void *a4@<X4>, uint64_t *a5@<X5>, uint64_t *a6@<X6>, uint64_t *a7@<X7>, void *a8@<X8>, uint64_t *a9)
{
  int v17 = operator new(0x240uLL);
  BOOL result = sub_1004994B4(v17, a1, a2, a3, a4, a5, a6, a7, a9);
  *a8 = v17 + 3;
  a8[1] = v17;
  return result;
}

void sub_1004994A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1004994B4(void *a1, uint64_t *a2, long long *a3, void *a4, void *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B4700;
  sub_1004995E0((uint64_t)&v11, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8, a9);
  return a1;
}

void sub_100499530(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100499544(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4700;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100499564(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4700;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1004995B8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1004995E0(uint64_t a1, uint64_t a2, uint64_t *a3, long long *a4, void *a5, void *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10)
{
  uint64_t v11 = *a3;
  long long v26 = *a4;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  uint64_t v12 = (std::__shared_weak_count *)a5[1];
  if (*a5) {
    uint64_t v13 = *a5 + 24;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v24 = v13;
  __int16 v25 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = (std::__shared_weak_count *)a6[1];
  if (*a6) {
    uint64_t v15 = *a6 + 8;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v22 = v15;
  double v23 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = (std::__shared_weak_count *)a7[1];
  uint64_t v20 = *a7;
  double v21 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v17 = (std::__shared_weak_count *)a8[1];
  uint64_t v18 = *a8;
  long long v19 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100FA4104(a2, v11, &v26, &v24, &v22, &v20, &v18, *a9, *a10);
  if (v19) {
    sub_1000DB0A0(v19);
  }
  if (v21) {
    sub_1000DB0A0(v21);
  }
  if (v23) {
    sub_1000DB0A0(v23);
  }
  if (v25) {
    sub_1000DB0A0(v25);
  }
  if (*((void *)&v26 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v26 + 1));
  }
}

void sub_100499724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  sub_101A616E8(v12);
  _Unwind_Resume(a1);
}

void *sub_100499750@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  __int16 v4 = operator new(0x160uLL);
  BOOL result = sub_1004997AC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100499798(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1004997AC(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B4750;
  sub_10089C7F4((uint64_t)(a1 + 3), *a2);
  return a1;
}

void sub_1004997F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10049980C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4750;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10049982C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4750;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100499880(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1004998A8@<X0>(uint64_t *a1@<X1>, long long *a2@<X2>, void *a3@<X3>, void *a4@<X4>, uint64_t *a5@<X5>, void *a6@<X6>, void *a7@<X7>, void *a8@<X8>)
{
  uint64_t v16 = operator new(0x320uLL);
  BOOL result = sub_10049994C(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_100499938(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10049994C(void *a1, uint64_t *a2, long long *a3, void *a4, void *a5, uint64_t *a6, void *a7, void *a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B47A0;
  sub_100499A74((uint64_t)&v10, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void sub_1004999C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004999D8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B47A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004999F8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B47A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100499A4C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100499A74(uint64_t a1, uint64_t a2, uint64_t *a3, long long *a4, void *a5, void *a6, uint64_t *a7, void *a8, void *a9)
{
  uint64_t v10 = *a3;
  long long v22 = *a4;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  uint64_t v11 = (std::__shared_weak_count *)a5[1];
  if (*a5) {
    uint64_t v12 = *a5 + 24;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v20 = v12;
  double v21 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = (std::__shared_weak_count *)a6[1];
  uint64_t v14 = *a6 + 8;
  if (!*a6) {
    uint64_t v14 = 0;
  }
  uint64_t v18 = v14;
  long long v19 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = (std::__shared_weak_count *)a7[1];
  uint64_t v16 = *a7;
  int v17 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ((void (*)(uint64_t, uint64_t, long long *, uint64_t *, uint64_t *, uint64_t *, void, void))sub_100D06590)(a2, v10, &v22, &v20, &v18, &v16, *a8, *a9);
  if (v17) {
    sub_1000DB0A0(v17);
  }
  if (v19) {
    sub_1000DB0A0(v19);
  }
  if (v21) {
    sub_1000DB0A0(v21);
  }
  if (*((void *)&v22 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v22 + 1));
  }
}

void sub_100499B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  sub_101A6173C(v10);
  _Unwind_Resume(a1);
}

void *sub_100499BA4@<X0>(uint64_t *a1@<X1>, long long *a2@<X2>, void *a3@<X3>, void *a4@<X4>, uint64_t *a5@<X5>, void *a6@<X6>, void *a7@<X7>, void *a8@<X8>)
{
  uint64_t v16 = operator new(0x5B0uLL);
  BOOL result = sub_100499C48(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_100499C34(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100499C48(void *a1, uint64_t *a2, long long *a3, void *a4, void *a5, uint64_t *a6, void *a7, void *a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B47F0;
  sub_100499D70((uint64_t)&v10, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void sub_100499CC0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100499CD4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B47F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100499CF4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B47F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100499D48(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100499D70(uint64_t a1, uint64_t a2, uint64_t *a3, long long *a4, void *a5, void *a6, uint64_t *a7, void *a8, void *a9)
{
  uint64_t v10 = *a3;
  long long v22 = *a4;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  uint64_t v11 = (std::__shared_weak_count *)a5[1];
  if (*a5) {
    uint64_t v12 = *a5 + 24;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v20 = v12;
  double v21 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = (std::__shared_weak_count *)a6[1];
  uint64_t v14 = *a6 + 8;
  if (!*a6) {
    uint64_t v14 = 0;
  }
  uint64_t v18 = v14;
  long long v19 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = (std::__shared_weak_count *)a7[1];
  uint64_t v16 = *a7;
  int v17 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ((void (*)(uint64_t, uint64_t, long long *, uint64_t *, uint64_t *, uint64_t *, void, void))sub_100D4A934)(a2, v10, &v22, &v20, &v18, &v16, *a8, *a9);
  if (v17) {
    sub_1000DB0A0(v17);
  }
  if (v19) {
    sub_1000DB0A0(v19);
  }
  if (v21) {
    sub_1000DB0A0(v21);
  }
  if (*((void *)&v22 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v22 + 1));
  }
}

void sub_100499E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  sub_101A6173C(v10);
  _Unwind_Resume(a1);
}

void *sub_100499EA0@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  __int16 v4 = operator new(0x28uLL);
  BOOL result = sub_100499EFC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100499EE8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100499EFC(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B4840;
  sub_100939AC0(a1 + 3, *a2);
  return a1;
}

void sub_100499F48(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100499F5C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4840;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100499F7C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4840;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100499FD0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_100499FF8@<X0>(uint64_t *a1@<X1>, long long *a2@<X2>, void *a3@<X3>, void *a4@<X4>, uint64_t *a5@<X5>, uint64_t *a6@<X6>, uint64_t *a7@<X7>, void *a8@<X8>, uint64_t *a9, uint64_t *a10)
{
  int v17 = operator new(0x4F8uLL);
  BOOL result = sub_10049A0AC(v17, a1, a2, a3, a4, a5, a6, a7, a9, a10);
  *a8 = v17 + 3;
  a8[1] = v17;
  return result;
}

void sub_10049A098(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10049A0AC(void *a1, uint64_t *a2, long long *a3, void *a4, void *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B4890;
  sub_10049A1DC((uint64_t)&v12, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return a1;
}

void sub_10049A12C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10049A140(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4890;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10049A160(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4890;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10049A1B4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_10049A1DC(uint64_t a1, uint64_t a2, uint64_t *a3, long long *a4, void *a5, void *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11)
{
  uint64_t v12 = *a3;
  long long v30 = *a4;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  uint64_t v13 = (std::__shared_weak_count *)a5[1];
  if (*a5) {
    uint64_t v14 = *a5 + 24;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v28 = v14;
  __int16 v29 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = (std::__shared_weak_count *)a6[1];
  if (*a6) {
    uint64_t v16 = *a6 + 8;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v26 = v16;
  __int16 v27 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v17 = (std::__shared_weak_count *)a7[1];
  uint64_t v24 = *a7;
  __int16 v25 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = (std::__shared_weak_count *)a8[1];
  uint64_t v22 = *a8;
  double v23 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v19 = (std::__shared_weak_count *)a9[1];
  uint64_t v20 = *a9;
  double v21 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1012D2D60(a2, v12, &v30, &v28, &v26, &v24, &v22, &v20, *a10, *a11);
  if (v21) {
    sub_1000DB0A0(v21);
  }
  if (v23) {
    sub_1000DB0A0(v23);
  }
  if (v25) {
    sub_1000DB0A0(v25);
  }
  if (v27) {
    sub_1000DB0A0(v27);
  }
  if (v29) {
    sub_1000DB0A0(v29);
  }
  if (*((void *)&v30 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v30 + 1));
  }
}

void sub_10049A31C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  if (a14) {
    sub_1000DB0A0(a14);
  }
  if (a16) {
    sub_1000DB0A0(a16);
  }
  if (a18) {
    sub_1000DB0A0(a18);
  }
  uint64_t v20 = *(std::__shared_weak_count **)(v18 - 40);
  if (v20) {
    sub_1000DB0A0(v20);
  }
  double v21 = *(std::__shared_weak_count **)(v18 - 24);
  if (v21) {
    sub_1000DB0A0(v21);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10049A370@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  __int16 v4 = operator new(0x28uLL);
  BOOL result = sub_10049A3CC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10049A3B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10049A3CC(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B48E0;
  sub_10113A098(a1 + 3, *a2);
  return a1;
}

void sub_10049A418(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10049A42C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B48E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10049A44C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B48E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10049A4A0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_10049A4C8@<X0>(uint64_t *a1@<X1>, long long *a2@<X2>, void *a3@<X3>, void *a4@<X4>, uint64_t *a5@<X5>, void *a6@<X6>, void *a7@<X7>, void *a8@<X8>)
{
  uint64_t v16 = operator new(0x248uLL);
  BOOL result = sub_10049A56C(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_10049A558(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10049A56C(void *a1, uint64_t *a2, long long *a3, void *a4, void *a5, uint64_t *a6, void *a7, void *a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B4930;
  sub_10049A694((uint64_t)&v10, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void sub_10049A5E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10049A5F8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4930;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10049A618(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4930;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10049A66C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_10049A694(uint64_t a1, uint64_t a2, uint64_t *a3, long long *a4, void *a5, void *a6, uint64_t *a7, void *a8, void *a9)
{
  uint64_t v10 = *a3;
  long long v22 = *a4;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  uint64_t v11 = (std::__shared_weak_count *)a5[1];
  if (*a5) {
    uint64_t v12 = *a5 + 24;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v20 = v12;
  double v21 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = (std::__shared_weak_count *)a6[1];
  uint64_t v14 = *a6 + 8;
  if (!*a6) {
    uint64_t v14 = 0;
  }
  uint64_t v18 = v14;
  long long v19 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = (std::__shared_weak_count *)a7[1];
  uint64_t v16 = *a7;
  int v17 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ((void (*)(uint64_t, uint64_t, long long *, uint64_t *, uint64_t *, uint64_t *, void, void))sub_100C869AC)(a2, v10, &v22, &v20, &v18, &v16, *a8, *a9);
  if (v17) {
    sub_1000DB0A0(v17);
  }
  if (v19) {
    sub_1000DB0A0(v19);
  }
  if (v21) {
    sub_1000DB0A0(v21);
  }
  if (*((void *)&v22 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v22 + 1));
  }
}

void sub_10049A79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  sub_101A6173C(v10);
  _Unwind_Resume(a1);
}

void *sub_10049A7C4@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  __int16 v4 = operator new(0x30uLL);
  BOOL result = sub_10049A820(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10049A80C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10049A820(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B4980;
  sub_1003C2804(a1 + 3, *a2);
  return a1;
}

void sub_10049A86C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10049A880(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4980;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10049A8A0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4980;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10049A8F4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_10049A91C@<X0>(uint64_t *a1@<X1>, long long *a2@<X2>, void *a3@<X3>, void *a4@<X4>, uint64_t *a5@<X5>, uint64_t *a6@<X6>, uint64_t *a7@<X7>, void *a8@<X8>)
{
  uint64_t v16 = operator new(0x1E0uLL);
  BOOL result = sub_10049A9C0(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_10049A9AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10049A9C0(void *a1, uint64_t *a2, long long *a3, void *a4, void *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B49D0;
  sub_10049AAE8((uint64_t)&v10, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void sub_10049AA38(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10049AA4C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B49D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10049AA6C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B49D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10049AAC0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_10049AAE8(uint64_t a1, uint64_t a2, uint64_t *a3, long long *a4, void *a5, void *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9)
{
  uint64_t v10 = *a3;
  long long v22 = *a4;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  uint64_t v11 = (std::__shared_weak_count *)a5[1];
  if (*a5) {
    uint64_t v12 = *a5 + 24;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v20 = v12;
  double v21 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = (std::__shared_weak_count *)a6[1];
  uint64_t v14 = *a6 + 8;
  if (!*a6) {
    uint64_t v14 = 0;
  }
  uint64_t v18 = v14;
  long long v19 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = (std::__shared_weak_count *)a7[1];
  uint64_t v16 = *a7;
  int v17 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1003C0A2C(a2, v10, &v22, &v20, &v18, &v16, *a8, *a9);
  if (v17) {
    sub_1000DB0A0(v17);
  }
  if (v19) {
    sub_1000DB0A0(v19);
  }
  if (v21) {
    sub_1000DB0A0(v21);
  }
  if (*((void *)&v22 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v22 + 1));
  }
}

void sub_10049ABF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  sub_101A6173C(v10);
  _Unwind_Resume(a1);
}

void *sub_10049AC18@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  __int16 v4 = operator new(0x28uLL);
  BOOL result = sub_10049AC74(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10049AC60(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10049AC74(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B4A20;
  sub_1013716E8(a1 + 3, *a2);
  return a1;
}

void sub_10049ACC0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10049ACD4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4A20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10049ACF4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4A20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10049AD48(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_10049AD70@<X0>(uint64_t *a1@<X1>, long long *a2@<X2>, void *a3@<X3>, void *a4@<X4>, uint64_t *a5@<X5>, void *a6@<X6>, void *a7@<X7>, void *a8@<X8>)
{
  uint64_t v16 = operator new(0x198uLL);
  BOOL result = sub_10049AE14(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_10049AE00(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10049AE14(void *a1, uint64_t *a2, long long *a3, void *a4, void *a5, uint64_t *a6, void *a7, void *a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B4A70;
  sub_10049AF3C((uint64_t)&v10, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void sub_10049AE8C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10049AEA0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4A70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10049AEC0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4A70;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10049AF14(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_10049AF3C(uint64_t a1, uint64_t a2, uint64_t *a3, long long *a4, void *a5, void *a6, uint64_t *a7, void *a8, void *a9)
{
  uint64_t v10 = *a3;
  long long v22 = *a4;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  uint64_t v11 = (std::__shared_weak_count *)a5[1];
  if (*a5) {
    uint64_t v12 = *a5 + 24;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v20 = v12;
  double v21 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = (std::__shared_weak_count *)a6[1];
  uint64_t v14 = *a6 + 8;
  if (!*a6) {
    uint64_t v14 = 0;
  }
  uint64_t v18 = v14;
  long long v19 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = (std::__shared_weak_count *)a7[1];
  uint64_t v16 = *a7;
  int v17 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ((void (*)(uint64_t, uint64_t, long long *, uint64_t *, uint64_t *, uint64_t *, void, void))sub_1005D63C4)(a2, v10, &v22, &v20, &v18, &v16, *a8, *a9);
  if (v17) {
    sub_1000DB0A0(v17);
  }
  if (v19) {
    sub_1000DB0A0(v19);
  }
  if (v21) {
    sub_1000DB0A0(v21);
  }
  if (*((void *)&v22 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v22 + 1));
  }
}

void sub_10049B044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  sub_101A6173C(v10);
  _Unwind_Resume(a1);
}

void *sub_10049B06C@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  __int16 v4 = operator new(0x28uLL);
  BOOL result = sub_10049B0C8(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10049B0B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10049B0C8(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B4AC0;
  sub_101484784(a1 + 3, *a2);
  return a1;
}

void sub_10049B114(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10049B128(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4AC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10049B148(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4AC0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10049B19C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_10049B1C4@<X0>(uint64_t *a1@<X1>, long long *a2@<X2>, void *a3@<X3>, void *a4@<X4>, uint64_t *a5@<X5>, uint64_t *a6@<X6>, uint64_t *a7@<X7>, void *a8@<X8>, uint64_t *a9, uint64_t *a10, uint64_t *a11)
{
  long long v19 = operator new(0x4C0uLL);
  BOOL result = sub_10049B288(v19, a1, a2, a3, a4, a5, a6, a7, a9, a10, a11);
  *a8 = v19 + 3;
  a8[1] = v19;
  return result;
}

void sub_10049B274(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10049B288(void *a1, uint64_t *a2, long long *a3, void *a4, void *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B4B10;
  sub_10049B3C0((uint64_t)&v13, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  return a1;
}

void sub_10049B310(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10049B324(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4B10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10049B344(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4B10;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10049B398(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_10049B3C0(uint64_t a1, uint64_t a2, uint64_t *a3, long long *a4, void *a5, void *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12)
{
  uint64_t v13 = *a3;
  long long v34 = *a4;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  uint64_t v14 = (std::__shared_weak_count *)a5[1];
  if (*a5) {
    uint64_t v15 = *a5 + 24;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v32 = v15;
  __int16 v33 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = (std::__shared_weak_count *)a6[1];
  if (*a6) {
    uint64_t v17 = *a6 + 8;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v30 = v17;
  __int16 v31 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = (std::__shared_weak_count *)a7[1];
  uint64_t v28 = *a7;
  __int16 v29 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v19 = (std::__shared_weak_count *)a8[1];
  uint64_t v26 = *a8;
  __int16 v27 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = (std::__shared_weak_count *)a9[1];
  uint64_t v24 = *a9;
  __int16 v25 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  double v21 = (std::__shared_weak_count *)a10[1];
  uint64_t v22 = *a10;
  double v23 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100F86BCC(a2, v13, &v34, &v32, &v30, &v28, &v26, &v24, &v22, *a11, *a12);
  if (v23) {
    sub_1000DB0A0(v23);
  }
  if (v25) {
    sub_1000DB0A0(v25);
  }
  if (v27) {
    sub_1000DB0A0(v27);
  }
  if (v29) {
    sub_1000DB0A0(v29);
  }
  if (v31) {
    sub_1000DB0A0(v31);
  }
  if (v33) {
    sub_1000DB0A0(v33);
  }
  if (*((void *)&v34 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v34 + 1));
  }
}

void sub_10049B530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  if (a16) {
    sub_1000DB0A0(a16);
  }
  if (a18) {
    sub_1000DB0A0(a18);
  }
  if (a20) {
    sub_1000DB0A0(a20);
  }
  uint64_t v22 = *(std::__shared_weak_count **)(v20 - 56);
  if (v22) {
    sub_1000DB0A0(v22);
  }
  double v23 = *(std::__shared_weak_count **)(v20 - 40);
  if (v23) {
    sub_1000DB0A0(v23);
  }
  uint64_t v24 = *(std::__shared_weak_count **)(v20 - 24);
  if (v24) {
    sub_1000DB0A0(v24);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10049B590@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  __int16 v4 = operator new(0x30uLL);
  BOOL result = sub_10049B5EC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10049B5D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10049B5EC(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B4B60;
  sub_100DD9934(a1 + 3, *a2);
  return a1;
}

void sub_10049B638(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10049B64C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4B60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10049B66C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4B60;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10049B6C0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_10049B6E8@<X0>(uint64_t *a1@<X1>, long long *a2@<X2>, void *a3@<X3>, void *a4@<X4>, uint64_t *a5@<X5>, uint64_t *a6@<X6>, uint64_t *a7@<X7>, void *a8@<X8>, uint64_t *a9)
{
  uint64_t v17 = operator new(0x1E0uLL);
  BOOL result = sub_10049B79C(v17, a1, a2, a3, a4, a5, a6, a7, a9);
  *a8 = v17 + 3;
  a8[1] = v17;
  return result;
}

void sub_10049B788(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10049B79C(void *a1, uint64_t *a2, long long *a3, void *a4, void *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B4BB0;
  sub_10049B8C8((uint64_t)&v11, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8, a9);
  return a1;
}

void sub_10049B818(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10049B82C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4BB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10049B84C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4BB0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10049B8A0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_10049B8C8(uint64_t a1, uint64_t a2, uint64_t *a3, long long *a4, void *a5, void *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10)
{
  uint64_t v11 = *a3;
  long long v26 = *a4;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  uint64_t v12 = (std::__shared_weak_count *)a5[1];
  if (*a5) {
    uint64_t v13 = *a5 + 24;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v24 = v13;
  __int16 v25 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = (std::__shared_weak_count *)a6[1];
  if (*a6) {
    uint64_t v15 = *a6 + 8;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v22 = v15;
  double v23 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = (std::__shared_weak_count *)a7[1];
  uint64_t v20 = *a7;
  double v21 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = (std::__shared_weak_count *)a8[1];
  uint64_t v18 = *a8;
  long long v19 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1014E3D38(a2, v11, &v26, &v24, &v22, &v20, &v18, *a9, *a10);
  if (v19) {
    sub_1000DB0A0(v19);
  }
  if (v21) {
    sub_1000DB0A0(v21);
  }
  if (v23) {
    sub_1000DB0A0(v23);
  }
  if (v25) {
    sub_1000DB0A0(v25);
  }
  if (*((void *)&v26 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v26 + 1));
  }
}

void sub_10049BA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  sub_101A616E8(v12);
  _Unwind_Resume(a1);
}

void *sub_10049BA38@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  __int16 v4 = operator new(0x78uLL);
  BOOL result = sub_10049BA94(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10049BA80(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10049BA94(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B4C00;
  sub_100FF24C4(a1 + 3, *a2);
  return a1;
}

void sub_10049BAE0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10049BAF4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4C00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10049BB14(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4C00;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10049BB68(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_10049BB90@<X0>(uint64_t *a1@<X1>, long long *a2@<X2>, void *a3@<X3>, void *a4@<X4>, uint64_t *a5@<X5>, void *a6@<X6>, void *a7@<X7>, void *a8@<X8>)
{
  uint64_t v16 = operator new(0x230uLL);
  BOOL result = sub_10049BC34(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_10049BC20(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10049BC34(void *a1, uint64_t *a2, long long *a3, void *a4, void *a5, uint64_t *a6, void *a7, void *a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B4C50;
  sub_10049BD5C((uint64_t)&v10, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void sub_10049BCAC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10049BCC0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4C50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10049BCE0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4C50;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10049BD34(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_10049BD5C(uint64_t a1, uint64_t a2, uint64_t *a3, long long *a4, void *a5, void *a6, uint64_t *a7, void *a8, void *a9)
{
  uint64_t v10 = *a3;
  long long v22 = *a4;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  uint64_t v11 = (std::__shared_weak_count *)a5[1];
  if (*a5) {
    uint64_t v12 = *a5 + 24;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v20 = v12;
  double v21 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = (std::__shared_weak_count *)a6[1];
  uint64_t v14 = *a6 + 8;
  if (!*a6) {
    uint64_t v14 = 0;
  }
  uint64_t v18 = v14;
  long long v19 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = (std::__shared_weak_count *)a7[1];
  uint64_t v16 = *a7;
  uint64_t v17 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ((void (*)(uint64_t, uint64_t, long long *, uint64_t *, uint64_t *, uint64_t *, void, void))sub_1014EAAD4)(a2, v10, &v22, &v20, &v18, &v16, *a8, *a9);
  if (v17) {
    sub_1000DB0A0(v17);
  }
  if (v19) {
    sub_1000DB0A0(v19);
  }
  if (v21) {
    sub_1000DB0A0(v21);
  }
  if (*((void *)&v22 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v22 + 1));
  }
}

void sub_10049BE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  sub_101A6173C(v10);
  _Unwind_Resume(a1);
}

void *sub_10049BE8C@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  __int16 v4 = operator new(0x28uLL);
  BOOL result = sub_10049BEE8(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10049BED4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10049BEE8(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B4CA0;
  sub_10103BA00(a1 + 3, *a2);
  return a1;
}

void sub_10049BF34(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10049BF48(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4CA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10049BF68(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4CA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10049BFBC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_10049BFE4@<X0>(uint64_t *a1@<X1>, long long *a2@<X2>, void *a3@<X3>, void *a4@<X4>, uint64_t *a5@<X5>, void *a6@<X6>, void *a7@<X7>, void *a8@<X8>)
{
  uint64_t v16 = operator new(0x1B0uLL);
  BOOL result = sub_10049C088(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_10049C074(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10049C088(void *a1, uint64_t *a2, long long *a3, void *a4, void *a5, uint64_t *a6, void *a7, void *a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B4CF0;
  sub_10049C1B0((uint64_t)&v10, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void sub_10049C100(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10049C114(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4CF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10049C134(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B4CF0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10049C188(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_10049C1B0(uint64_t a1, uint64_t a2, uint64_t *a3, long long *a4, void *a5, void *a6, uint64_t *a7, void *a8, void *a9)
{
  uint64_t v10 = *a3;
  long long v22 = *a4;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  uint64_t v11 = (std::__shared_weak_count *)a5[1];
  if (*a5) {
    uint64_t v12 = *a5 + 24;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v20 = v12;
  double v21 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = (std::__shared_weak_count *)a6[1];
  uint64_t v14 = *a6 + 8;
  if (!*a6) {
    uint64_t v14 = 0;
  }
  uint64_t v18 = v14;
  long long v19 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = (std::__shared_weak_count *)a7[1];
  uint64_t v16 = *a7;
  uint64_t v17 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ((void (*)(uint64_t, uint64_t, long long *, uint64_t *, uint64_t *, uint64_t *, void, void))sub_1004E0E10)(a2, v10, &v22, &v20, &v18, &v16, *a8, *a9);
  if (v17) {
    sub_1000DB0A0(v17);
  }
  if (v19) {
    sub_1000DB0A0(v19);
  }
  if (v21) {
    sub_1000DB0A0(v21);
  }
  if (*((void *)&v22 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v22 + 1));
  }
}

void sub_10049C2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  sub_101A6173C(v10);
  _Unwind_Resume(a1);
}

void *sub_10049C2E0(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    sub_10022F168(result, a4);
    BOOL result = sub_10049C368((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_10049C348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1000C5954(&a9);
  _Unwind_Resume(a1);
}

void *sub_10049C368(uint64_t a1, void *a2, void *a3, void *a4)
{
  __int16 v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  void v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      void *v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_10049C3F8((uint64_t)v7);
  return v4;
}

uint64_t sub_10049C3F8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100223AE4(a1);
  }
  return a1;
}

uint64_t sub_10049C430(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10106A080();
    operator delete();
  }
  return result;
}

uint64_t sub_10049C480(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_10049C490(uint64_t a1)
{
  return *(void *)a1;
}

BOOL sub_10049C4A4()
{
  uint64_t v1 = qword_102419568;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

void sub_10049C4C4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_10049C544()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_10049C5D4(_Unwind_Exception *a1)
{
}

void sub_10049C5EC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D1FDF0;
      v0[3] = unk_101D1FE00;
      v0[4] = xmmword_101D1FE10;
      v0[0] = xmmword_101D1FDD0;
      v0[1] = unk_101D1FDE0;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_10049C6CC(_Unwind_Exception *a1)
{
}

void sub_10049C6E4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_10049C79C(_Unwind_Exception *a1)
{
}

void sub_10049C7B4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    *uint64_t v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_10049C85C(_Unwind_Exception *a1)
{
}

uint64_t sub_10049C874()
{
  sub_100134750(qword_10247ABC8, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247ABC8, (void *)&_mh_execute_header);
}

uint64_t sub_10049C95C(uint64_t a1)
{
  *(CFAbsoluteTime *)a1 = CFAbsoluteTimeGetCurrent();
  sub_100877A84((void *)(a1 + 8));
  sub_100134750(v5, "CLWifiAssociatedApHarvestDatabase");
  sub_100134750(__p, "CLSubHarvesterWifiAssociatedAp");
  sub_1014577F0(a1 + 24, v5, __p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  return a1;
}

void sub_10049C9EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  long long v22 = *(std::__shared_weak_count **)(v20 + 16);
  if (v22) {
    sub_1000DB0A0(v22);
  }
  _Unwind_Resume(exception_object);
}

void sub_10049CA38(uint64_t a1)
{
  id v2 = (double *)(a1 + 24);
  BOOL v3 = sub_10064E538(*(void *)(a1 + 8));
  sub_1014577FC((uint64_t)v2, v3);
  sub_1005B1D3C(v2);
  if (!sub_10064E538(*(void *)(a1 + 8)))
  {
    sub_100877A84(buf);
    long long v4 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    *(_OWORD *)(a1 + 8) = v4;
    if (v5)
    {
      sub_1000DB0A0(v5);
      if (*(void *)&buf[8]) {
        sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
      }
    }
    if (sub_10064E538(*(void *)(a1 + 8))) {
      char v6 = "success";
    }
    else {
      char v6 = "fail";
    }
    sub_100134750(__p, v6);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022B4D30);
    }
    char v7 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      char v8 = __p;
      if (v12 < 0) {
        char v8 = (void **)__p[0];
      }
      *(_DWORD *)uint64_t buf = 136315138;
      *(void *)&uint8_t buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLSubHarvesterWifiAssociatedAp, re-initialize database: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022B4D30);
      }
      uint64_t v9 = __p;
      if (v12 < 0) {
        uint64_t v9 = (void **)__p[0];
      }
      int v13 = 136315138;
      uint64_t v14 = v9;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSubHarvesterWifiAssociatedAp::reinitializeWifiAssociatedApHarvestDatabaseIfInvalid()", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_10049CC94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10049CCBC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a3 == 3)
  {
    unsigned int v6 = *(char *)(a4 + 1);
    BOOL v7 = v6 > 0xC;
    int v8 = (1 << v6) & 0x17DF;
    if (!v7 && v8 != 0)
    {
      double v13 = *(double *)(a2 + 76) - *(double *)a1;
      if (v13 >= *((double *)sub_1014122A8() + 3))
      {
        if (*(unsigned char *)(a4 + 96) && *(int *)(a4 + 48) > 0)
        {
          sub_10049CA38(a1);
          sub_100F66970((uint64_t)buf, a4 + 8, (_OWORD *)a2, a5);
          sub_10087AE54(*(void *)(a1 + 8), buf);
          *(void *)a1 = *(void *)(a2 + 76);
        }
        else
        {
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022B4D30);
          }
          uint64_t v14 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
          {
            LOWORD(buf[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Skip harvesting associated AP as the device is not connected to any wifi network!", (uint8_t *)buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_1022B4D30);
            }
            uint64_t v15 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLSubHarvesterWifiAssociatedAp::harvestWifiFromGps(const CLDaemonLocation &, const CLWifiService_Type::Notification, const CLWifiService_Type::NotificationData &, const RTLocationOfInterestType)", "%s\n", v15);
            if (v15 != (char *)buf) {
              free(v15);
            }
          }
        }
      }
    }
  }
}

void sub_10049CEF4(uint64_t a1)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022B4D30);
  }
  id v2 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Clearing associated AP harvest data in WifiAssociatedApHarvestDatabase [GPS Harvest]", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022B4D30);
    }
    BOOL v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSubHarvesterWifiAssociatedAp::clearHarvest()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  sub_1006509BC(*(void *)(a1 + 8));
}

void sub_10049D090(uint64_t a1)
{
  id v2 = sub_1014122A8();
  double v3 = sub_101412DFC(v2);
  double v6 = v3;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022B4D30);
  }
  long long v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 134283521;
    double v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Purging GPS harvest samples older than %{private}.1fs in WifiAssociatedApHarvestDatabase", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022B4D30);
    }
    int v7 = 134283521;
    double v8 = v3;
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSubHarvesterWifiAssociatedAp::purgeOlderGpsHarvestSamples()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_10064E5D0(*(void *)(a1 + 8), (uint64_t)&v6);
}

void sub_10049D260(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_10049D290()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_10049D348(_Unwind_Exception *a1)
{
}

void sub_10049D360()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    *uint64_t v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_10049D408(_Unwind_Exception *a1)
{
}

void sub_10049D4D0(id a1)
{
  qword_10247AC08 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLVisionNotifierSilo"];
}

id sub_10049D790(uint64_t a1)
{
  double v2 = sub_10016C458();
  id result = [*(id *)(a1 + 32) hasSessionTimedOut:];
  if (result)
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1022B4DC0);
    }
    long long v4 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      [*(id *)(a1 + 32) lastARKitUpdate];
      *(_DWORD *)uint64_t buf = 134349312;
      double v8 = v2;
      __int16 v9 = 2050;
      uint64_t v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "CLVN,sessionTimerHandler,Session has timed out without end notification,nowMachContinuousTime,%{public}.3lf,lastARKitUpdate,%{public}.3lf", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1022B4DC0);
      }
      [*(id *)(a1 + 32) lastARKitUpdate];
      double v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLVisionNotifier beginService]_block_invoke", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    return [*(id *)(a1 + 32) closeSessionWithState:2 fromClient:@"com.apple.locationd.CLVisionNotifier"];
  }
  return result;
}

id sub_10049E2CC(uint64_t a1, void *a2)
{
  return _[a2 handleVIOEstimation:*(void *)(a1 + 32) fromClient:*(void *)(a1 + 40)];
}

id sub_10049E680(uint64_t a1, void *a2)
{
  return _[a2 handleVLLocalizationResult:*(void *)(a1 + 32) fromClient:*(void *)(a1 + 40)];
}

id sub_10049EA0C(uint64_t a1, void *a2)
{
  return _[a2 handleARSessionState:*(void *)(a1 + 40) fromClient:*(void *)(a1 + 32)];
}

id sub_10049EC8C(uint64_t a1, void *a2)
{
  return _[a2 handleARSessionState:*(void *)(a1 + 40) fromClient:*(void *)(a1 + 32)];
}

void sub_10049ED68(id a1)
{
  qword_102419428 = (uint64_t)os_log_create("com.apple.locationd.Position", "Vision");
}

void sub_10049EE50(id a1)
{
  qword_10247AC98 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLOdometerNotifierSilo"];
}

uint64_t sub_10049EF10(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1004A008C;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_10247ACB8 != -1) {
    dispatch_once(&qword_10247ACB8, block);
  }
  return qword_102489F70;
}

void sub_10049F174(id a1)
{
  if (sub_10016CCBC()) {
    byte_10247ACA8 = 1;
  }
}

void sub_10049F2D8(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  __asm { FMOV            V2.2D, #-1.0 }
  *(_OWORD *)(a2 + 24) = _Q2;
  double v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  sub_101130C18(*(void *)(a1 + 112), (void **)&v13, a3, a4);
  uint64_t v10 = v13;
  if ((unint64_t)((char *)v14 - (char *)v13) < 0x41)
  {
    if (!v13) {
      return;
    }
  }
  else
  {
    int32x2_t v11 = v14[-4];
    int32x2_t v12 = v14[-3];
    *(int32x2_t *)(a2 + 24) = v13[11];
    *(int32x2_t *)(a2 + 32) = v11;
    *(int32x2_t *)(a2 + 40) = vsub_s32(v12, v10[5]);
  }
  uint64_t v14 = v10;
  operator delete(v10);
}

void sub_10049F360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10049F484(uint64_t a1, void *a2)
{
  *(void *)sub_10049F754(a1, "CLOdometerNotifier", a2) = off_1022B4E30;
  operator new();
}

void sub_10049F678(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 911) < 0) {
    operator delete(*v3);
  }
  sub_1003B2350(v2);
  if (*(char *)(v1 + 839) < 0) {
    operator delete(*(void **)(v1 + 816));
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 136);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  double v6 = *(std::__shared_weak_count **)(v1 + 120);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  sub_10049FF24(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10049F754(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_1022B5258;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_10049F7E4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_10049F800(std::string::size_type a1@<X0>, void *a2@<X8>)
{
  double v3 = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 0x408uLL, 0);
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v4 = [(NSArray *)v3 countByEnumeratingWithState:&v11 objects:v30 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v12;
LABEL_3:
    uint64_t v6 = 0;
    while (1)
    {
      if (*(void *)v12 != v5) {
        objc_enumerationMutation(v3);
      }
      id v7 = [[[objc_msgSend(*(id *)(*((void *)&v11 + 1) + 8 * v6), "stringByAppendingPathComponent:", @"LocationBundles/") stringByAppendingPathComponent:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a1)] stringByAppendingPathExtension:@"bundle"];
      if ([+[NSFileManager defaultManager] fileExistsAtPath:v7])
      {
        break;
      }
      if (v4 == (id)++v6)
      {
        id v4 = [(NSArray *)v3 countByEnumeratingWithState:&v11 objects:v30 count:16];
        if (v4) {
          goto LABEL_3;
        }
        goto LABEL_27;
      }
    }
    if (!v7) {
      goto LABEL_27;
    }
    sub_100134750(&__p, (char *)[v7 UTF8String]);
    sub_1000B6F5C(&__p, (uint64_t)buf);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_1000A7FBC((uint64_t)buf, (uint64_t)a2);
    if (v29 < 0) {
      operator delete(v28);
    }
    if (v27 < 0) {
      operator delete(v26);
    }
    if (v25 < 0) {
      operator delete(v24);
    }
    if (v23 < 0) {
      operator delete(v22);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    if (v19 < 0) {
      operator delete(v18);
    }
    if (v17 < 0) {
      operator delete(*(void **)buf);
    }
  }
  else
  {
LABEL_27:
    if (qword_102419150 != -1) {
      dispatch_once(&qword_102419150, &stru_1022B4FE8);
    }
    double v8 = qword_102419158;
    if (os_log_type_enabled((os_log_t)qword_102419158, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = a1;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Unable to resolve bundle path for service: %{public}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419150 != -1) {
        dispatch_once(&qword_102419150, &stru_1022B4FE8);
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = a1;
      __int16 v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static std::string CLOdometerNotifier::getClientKeyFromServiceName(const char *)", "%s\n", v9);
      if (v9 != buf) {
        free(v9);
      }
    }
    sub_100134750(a2, "");
  }
}

void sub_10049FB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28)
{
}

void sub_10049FBA4(void **a1, double a2)
{
  if (a2 >= 0.0)
  {
    double v8 = a1[2];
    uint64_t v6 = (uint64_t)(a1 + 2);
    id v7 = v8;
    unint64_t v9 = *(void *)(v6 - 8);
    if (v9 >= (unint64_t)v8)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)*a1) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14) {
        uint64_t v15 = (char *)sub_1000DA5D8(v6, v14);
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v16 = &v15[24 * v11];
      char v17 = &v15[24 * v14];
      *(double *)uint64_t v16 = a2;
      *((void *)v16 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v16[16] = 0;
      uint64_t v10 = v16 + 24;
      char v19 = (char *)*a1;
      uint64_t v18 = (char *)a1[1];
      if (v18 != *a1)
      {
        do
        {
          long long v20 = *(_OWORD *)(v18 - 24);
          *(v16 - 8) = *(v18 - 8);
          *(_OWORD *)(v16 - 24) = v20;
          v16 -= 24;
          v18 -= 24;
        }
        while (v18 != v19);
        uint64_t v18 = (char *)*a1;
      }
      *a1 = v16;
      a1[1] = v10;
      a1[2] = v17;
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *(double *)unint64_t v9 = a2;
      *(void *)(v9 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(unsigned char *)(v9 + 16) = 0;
      uint64_t v10 = (char *)(v9 + 24);
    }
    a1[1] = v10;
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B5438);
    }
    double v3 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134349056;
      double v22 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Programmer error, this expiration rule with time %{public}fis not valid.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B5438);
      }
      id v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLActivityAggregator<CLSignificantElevation>::setExpirationRule(CFTimeInterval) [T = CLSignificantElevation, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_10049FE5C(uint64_t a1)
{
  double v2 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)[*(id *)(a1 + 40) queue]);
  *(void *)(a1 + 872) = v2;
  dispatch_source_set_timer(v2, 0, 0xD18C2E2800uLL, 0xDF8475800uLL);
  double v3 = *(NSObject **)(a1 + 872);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1004A0BB8;
  handler[3] = &unk_1022A3020;
  handler[4] = a1;
  dispatch_source_set_event_handler(v3, handler);
  dispatch_resume(*(dispatch_object_t *)(a1 + 872));
}

uint64_t sub_10049FF24(uint64_t a1)
{
  *(void *)a1 = off_1022B5258;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_10049FFA8(uint64_t a1)
{
  *(void *)a1 = off_1022B4E30;

  *(void *)(a1 + 880) = 0;
  *(unsigned char *)(a1 + 108) = 1;
  if (*(char *)(a1 + 911) < 0) {
    operator delete(*(void **)(a1 + 888));
  }
  sub_1003B2350((void *)(a1 + 840));
  if (*(char *)(a1 + 839) < 0) {
    operator delete(*(void **)(a1 + 816));
  }
  double v2 = *(std::__shared_weak_count **)(a1 + 136);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  double v3 = *(std::__shared_weak_count **)(a1 + 120);
  if (v3) {
    sub_1000DB0A0(v3);
  }

  return sub_10049FF24(a1);
}

void sub_1004A0058(uint64_t a1)
{
  *(void *)(a1 + 880) = 0;
  *(unsigned char *)(a1 + 108) = 1;
}

uint64_t sub_1004A008C()
{
  sub_100103240();
  if (sub_10010145C()) {
    operator new();
  }
  sub_100103240();
  uint64_t result = sub_10016CCBC();
  if (result) {
    operator new();
  }
  return result;
}

void sub_1004A0118()
{
}

uint64_t sub_1004A0150(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1004A01E0;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_10247ACC8 != -1) {
    dispatch_once(&qword_10247ACC8, block);
  }
  return byte_10247ACC0;
}

id sub_1004A01E0(uint64_t a1)
{
  id result = [[[*(id *)(a1 + 32) vendor] isServiceEnabled:@"CLOdometerNotifier"];
  byte_10247ACC0 = (char)result;
  return result;
}

void *sub_1004A0210@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  int v3 = *a1 - 2;
  if (v3 > 5) {
    id v4 = "Unknown";
  }
  else {
    id v4 = (char *)*((void *)&off_1022B54F0 + v3);
  }
  return sub_100134750(a2, v4);
}

void sub_1004A0240(uint64_t **a1, int a2, int *a3, int a4)
{
  int v21 = a2;
  if (qword_102419150 != -1) {
    dispatch_once(&qword_102419150, &stru_1022B4FE8);
  }
  id v7 = qword_102419158;
  if (os_log_type_enabled((os_log_t)qword_102419158, OS_LOG_TYPE_DEFAULT))
  {
    double v8 = a4 ? "Registration" : "Unregistration";
    *(void *)uint64_t buf = &v21;
    id v9 = [[objc_msgSend(sub_10008A098(a1 + 10, &v21, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[8], "description") UTF8String];
    int v10 = *a3;
    *(_DWORD *)uint64_t buf = *a3;
    int v11 = sub_1001072EC((uint64_t)a1, (int *)buf, 1);
    ((void (*)(unsigned char *__return_ptr, uint64_t **, int *))(*a1)[20])(__p, a1, a3);
    unint64_t v12 = v25 >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)uint64_t buf = 136448770;
    *(void *)&uint8_t buf[4] = "MotionOdometer";
    __int16 v44 = 2082;
    uint64_t v45 = "action";
    __int16 v46 = 2082;
    id v47 = v8;
    __int16 v48 = 2082;
    uint64_t v49 = "client";
    __int16 v50 = 2082;
    id v51 = v9;
    __int16 v52 = 2082;
    int v53 = "notification";
    __int16 v54 = 1026;
    int v55 = v10;
    __int16 v56 = 2082;
    unsigned __int8 v57 = "notificationClientCount";
    __int16 v58 = 1026;
    int v59 = v11;
    __int16 v60 = 2082;
    uint64_t v61 = "notificationString";
    __int16 v62 = 2082;
    __int16 v63 = v12;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}s, %{public}s, %{public}s, %{public}s, %{public}s, %{public}s, %{public}d, %{public}s, %{public}d, %{public}s, %{public}s", buf, 0x68u);
    if (SHIBYTE(v25) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419150 != -1) {
      dispatch_once(&qword_102419150, &stru_1022B4FE8);
    }
    if (a4) {
      unint64_t v13 = "Registration";
    }
    else {
      unint64_t v13 = "Unregistration";
    }
    *(void *)std::string __p = &v21;
    id v14 = [[objc_msgSend(sub_10008A098(a1 + 10, &v21, (uint64_t)&unk_101D0B290, (_DWORD **)__p)[8], "description") UTF8String];
    int v15 = *a3;
    *(_DWORD *)std::string __p = *a3;
    int v16 = sub_1001072EC((uint64_t)a1, (int *)__p, 1);
    ((void (*)(void **__return_ptr, uint64_t **, int *))(*a1)[20])(v19, a1, a3);
    if (v20 >= 0) {
      char v17 = v19;
    }
    else {
      char v17 = (void **)v19[0];
    }
    *(_DWORD *)std::string __p = 136448770;
    *(void *)&__p[4] = "MotionOdometer";
    __int16 v23 = 2082;
    uint64_t v24 = "action";
    __int16 v25 = 2082;
    long long v26 = v13;
    __int16 v27 = 2082;
    uint64_t v28 = "client";
    __int16 v29 = 2082;
    id v30 = v14;
    __int16 v31 = 2082;
    uint64_t v32 = "notification";
    __int16 v33 = 1026;
    int v34 = v15;
    __int16 v35 = 2082;
    uint64_t v36 = "notificationClientCount";
    __int16 v37 = 1026;
    int v38 = v16;
    __int16 v39 = 2082;
    uint64_t v40 = "notificationString";
    __int16 v41 = 2082;
    uint64_t v42 = v17;
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    if (v20 < 0) {
      operator delete(v19[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOdometerNotifier::logClient(int, const CLOdometerNotifier_Type::Notification &, BOOL)", "%s\n", v18);
    if (v18 != buf) {
      free(v18);
    }
  }
}

uint64_t sub_1004A06A0(uint64_t **a1, uint64_t a2, int *a3)
{
  int v4 = a2;
  uint64_t v6 = ((uint64_t (*)(uint64_t **, uint64_t, int *, void *))(*a1)[12])(a1, a2, a3, &unk_10241B9D8);
  sub_1004A0240(a1, v4, a3, 1);
  ((void (*)(uint64_t **))(*a1)[29])(a1);
  return v6;
}

uint64_t sub_1004A0740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_10241B9D8);
}

BOOL sub_1004A076C(char *a1, int a2, int *a3)
{
  BOOL v6 = sub_1004A07E4(a1, a2, a3);
  sub_1004A0240((uint64_t **)a1, a2, a3, 0);
  (*(void (**)(char *))(*(void *)a1 + 232))(a1);
  return v6;
}

BOOL sub_1004A07E4(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      double v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          double v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        id v14 = (char *)*((void *)v8 + 6);
        unint64_t v12 = v8 + 48;
        unint64_t v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          int v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              char v19 = (char **)v13;
            }
            else {
              char v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              int v16 = v13;
            }
            unint64_t v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            double v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                double v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022B4FC8);
              }
              long long v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v27 = a1 + 8;
                if (a1[31] < 0) {
                  __int16 v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  uint64_t v28 = __p;
                }
                else {
                  uint64_t v28 = (void **)__p[0];
                }
                *(_DWORD *)uint64_t buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                __int16 v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022B4FC8);
                }
                __int16 v29 = a1 + 8;
                if (a1[31] < 0) {
                  __int16 v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  id v30 = buf;
                }
                else {
                  id v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                int v38 = v29;
                __int16 v39 = 2082;
                uint64_t v40 = v30;
                __int16 v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLOdometerNotifier_Type::Notification, NotificationData_T = CLOdometerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_1004A0BB8(uint64_t a1)
{
  return sub_1004A0BC4(*(void *)(*(void *)(a1 + 32) + 128));
}

uint64_t sub_1004A0BC4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B5438);
    }
    double v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v3 = sub_1000D3E50();
      int v4 = *(_DWORD *)(*(void *)(a1 + 24) + 132);
      *(_DWORD *)uint64_t buf = 134218240;
      *(double *)int v21 = v3;
      *(_WORD *)&v21[8] = 1024;
      int v22 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records start %f, count ~%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B5438);
      }
      sub_1000D3E50();
      int v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLSignificantElevation>::aggregateRecords() [T = CLSignificantElevation, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), a1);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B5438);
    }
    uint64_t v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v7 = sub_1000D3E50();
      int v8 = *(_DWORD *)(*(void *)(a1 + 24) + 132);
      *(_DWORD *)uint64_t buf = 134218240;
      *(double *)int v21 = v7;
      *(_WORD *)&v21[8] = 1024;
      int v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Aggregating records stop %f, count ~%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B5438);
      }
      sub_1000D3E50();
      BOOL v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLSignificantElevation>::aggregateRecords() [T = CLSignificantElevation, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    uint64_t v9 = *(void *)(a1 + 24);
    double v10 = (double)*(int *)(v9 + 132);
    if ((double)(int)sub_1004A3284(v9, (double **)a1) * 1.2 < v10)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B5438);
      }
      int v11 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 24);
        int v13 = *(_DWORD *)(v12 + 132);
        int v14 = sub_1004A3284(v12, (double **)a1);
        *(_DWORD *)uint64_t buf = 67109376;
        *(_DWORD *)int v21 = v13;
        *(_WORD *)&v21[4] = 1024;
        *(_DWORD *)&v21[6] = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022B5438);
        }
        sub_1004A3284(*(void *)(a1 + 24), (double **)a1);
        char v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLSignificantElevation>::aggregateRecords() [T = CLSignificantElevation, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
    }
    return v5;
  }
  else
  {
    int v16 = *(uint64_t (**)(void))(**(void **)(a1 + 24) + 32);
    return v16();
  }
}

uint64_t sub_1004A117C(uint64_t a1, uint64_t a2)
{
  double v3 = *(double **)(a1 + 32);
  memset(&v18[4], 0, 128);
  long long v4 = *(_OWORD *)(a2 + 16);
  v18[0] = *(_OWORD *)a2;
  v18[1] = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  uint64_t v18[2] = *(_OWORD *)(a2 + 32);
  void v18[3] = v5;
  double Current = CFAbsoluteTimeGetCurrent();
  if (Current - v3[114] > 15.0)
  {
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_1022B5008);
    }
    double v7 = qword_1024190D8;
    if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a2 + 24);
      uint64_t v9 = *(void *)(a2 + 32);
      int v10 = *(_DWORD *)(a2 + 40);
      int v11 = *(_DWORD *)(a2 + 44);
      *(_DWORD *)uint64_t buf = 134349825;
      uint64_t v28 = v8;
      __int16 v29 = 2050;
      uint64_t v30 = v9;
      __int16 v31 = 1025;
      int v32 = v10;
      __int16 v33 = 1025;
      int v34 = v11;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "SignificantElevation,startTime,%{public}.3f,endTime,%{public}.3f,ascended,%{private}d,descended,%{private}d", buf, 0x22u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_1022B5008);
      }
      uint64_t v13 = *(void *)(a2 + 24);
      uint64_t v14 = *(void *)(a2 + 32);
      int v15 = *(_DWORD *)(a2 + 40);
      int v16 = *(_DWORD *)(a2 + 44);
      int v19 = 134349825;
      uint64_t v20 = v13;
      __int16 v21 = 2050;
      uint64_t v22 = v14;
      __int16 v23 = 1025;
      int v24 = v15;
      __int16 v25 = 1025;
      int v26 = v16;
      int v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLOdometerNotifier::setUpDbUpdateFinishedHandler()_block_invoke", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    v3[114] = Current;
  }
  *(_DWORD *)uint64_t buf = 6;
  return (*(uint64_t (**)(double *, uint8_t *, _OWORD *, uint64_t, uint64_t, void))(*(void *)v3 + 152))(v3, buf, v18, 1, 0xFFFFFFFFLL, 0);
}

id sub_1004A1418(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 888);
  if (*(char *)(a1 + 911) < 0) {
    uint64_t v1 = (void *)*v1;
  }
  id v2 = [[objc_msgSend(*(id *)(a1 + 880), "syncgetAuthorizationContextIfClientIsNonZonal:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v1)) isAuthorizedForServiceTypeMask:16];
  if ((v2 & 1) == 0)
  {
    if (qword_102419150 != -1) {
      dispatch_once(&qword_102419150, &stru_1022B4FE8);
    }
    double v3 = qword_102419158;
    if (os_log_type_enabled((os_log_t)qword_102419158, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Motion calibration system service is disabled.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419150 != -1) {
        dispatch_once(&qword_102419150, &stru_1022B4FE8);
      }
      long long v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLOdometerNotifier::checkAuthorization() const", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  return v2;
}

void sub_1004A15EC(uint64_t a1, uint64_t a2)
{
  id v2 = (uint64_t *)(a1 + 840);
  v5[0] = sub_10140F8D4(a2);
  v5[1] = v3;
  _DWORD v5[2] = v4;
  sub_10140F8E4(v2, (uint64_t)v5);
}

uint64_t sub_1004A1630(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_1022B54D8;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    uint64_t v12 = a3;
  }
  else {
    uint64_t v12 = (uint64_t *)*a3;
  }
  id v13 = [objc_msgSend(a4, "vendor") proxyForService:[NSString stringWithUTF8String:v12]];
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:[a4 silo]];
  return a1;
}

void sub_1004A1714()
{
}

void sub_1004A17D0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_1004A180C(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        uint64_t v9 = (uint64_t *)v4;
      }
      else {
        uint64_t v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)uint64_t buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022B4FC8);
      }
      int v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        int v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          int v11 = (void *)*v11;
        }
        *(_DWORD *)uint64_t buf = 136446466;
        int v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022B4FC8);
        }
        uint64_t v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          uint64_t v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        int v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData>::removeClient(int) [Notification_T = CLOdometerNotifier_Type::Notification, NotificationData_T = CLOdometerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_1004A1A9C(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_1004A1B50(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_1004A1B98(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_1004A1BE0(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_1004A1C28(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)char v42 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          int v24 = (uint64_t *)v18;
        }
        else {
          int v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          __int16 v29 = (uint64_t *)v25;
        }
        else {
          __int16 v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v40 = v26;
        uint64_t v35 = *(void *)(v26 + 56);
        char v36 = *a4;
        *(void *)&buf[0] = &v41;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v36;
        memset(buf, 0, 192);
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _OWORD *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_1004A39B4();
        }
        if (v35) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v40 = a1 + 64;
        char v30 = byte_10241D9F0;
        int v39 = v17;
        *(void *)&buf[0] = &v39;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v30;
        int v39 = *a3;
        *(void *)&buf[0] = &v39;
        __int16 v31 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        int v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        char v33 = *a4;
        int v39 = *a3;
        *(void *)&buf[0] = &v39;
        int v34 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)&buf[0] = &v41;
        *((unsigned char *)sub_1000EB1B8(v34 + 5, &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v33;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        LODWORD(buf[0]) = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022B4FC8);
  }
  id v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    int v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v15 = (void *)*v15;
    }
    LODWORD(buf[0]) = 136446466;
    *(void *)((char *)buf + 4) = v15;
    WORD6(buf[0]) = 1026;
    *(_DWORD *)((char *)buf + 14) = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      (uint8_t *)buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B4FC8);
    }
    int v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v37 = (void *)*v37;
    }
    *(_DWORD *)char v42 = 136446466;
    *(void *)&v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = a2;
    int v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLOdometerNotifier_Type::Notification, NotificationData_T = CLOdometerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v38);
    if (v38 != (char *)buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

BOOL sub_1004A20EC(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B4FC8);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)uint64_t buf = 136446466;
      int v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022B4FC8);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLOdometerNotifier_Type::Notification, NotificationData_T = CLOdometerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1004A2370(uint64_t a1, int *a2, _OWORD *a3)
{
  uint64_t v6 = (char *)operator new(0xD8uLL);
  long long v7 = a3[9];
  *(_OWORD *)(v6 + 152) = a3[8];
  *(_OWORD *)(v6 + 168) = v7;
  long long v8 = a3[11];
  *(_OWORD *)(v6 + 184) = a3[10];
  *(_OWORD *)(v6 + 200) = v8;
  long long v9 = a3[5];
  *(_OWORD *)(v6 + 88) = a3[4];
  *(_OWORD *)(v6 + 104) = v9;
  long long v10 = a3[7];
  *(_OWORD *)(v6 + 120) = a3[6];
  *(_OWORD *)(v6 + 136) = v10;
  long long v11 = a3[1];
  *(_OWORD *)(v6 + 24) = *a3;
  *(_OWORD *)(v6 + 40) = v11;
  long long v12 = a3[3];
  *(_OWORD *)(v6 + 56) = a3[2];
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = off_1022B5468;
  *(_OWORD *)(v6 + 72) = v12;
  int v16 = *a2;
  int v17 = &v16;
  id v13 = sub_10044715C((uint64_t **)(a1 + 56), &v16, (uint64_t)&unk_101D0B290, &v17);
  uint64_t v14 = (std::__shared_weak_count *)v13[9];
  v13[8] = (uint64_t *)(v6 + 24);
  void v13[9] = (uint64_t *)v6;
  if (v14) {
    sub_1000DB0A0(v14);
  }
  return 1;
}

void sub_1004A2464(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A2478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  memset(v5, 0, sizeof(v5));
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_1004A24E4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B4FC8);
    }
    id v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v3 = (void *)*v3;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      int v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022B4FC8);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData>::listClients() [Notification_T = CLOdometerNotifier_Type::Notification, NotificationData_T = CLOdometerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B4FC8);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)uint64_t buf = 136315394;
      int v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022B4FC8);
      }
      BOOL v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData>::listClients() [Notification_T = CLOdometerNotifier_Type::Notification, NotificationData_T = CLOdometerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    long long v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        long long v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_1022B4FC8);
            }
            long long v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              long long v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                long long v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)uint64_t buf = 136315650;
              int v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022B4FC8);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData>::listClients() [Notification_T = CLOdometerNotifier_Type::Notification, NotificationData_T = CLOdometerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                uint64_t v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                uint64_t v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                long long v9 = v15;
              }
              while (!v16);
            }
            long long v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        uint64_t v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            uint64_t v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            long long v8 = v19;
          }
          while (!v16);
        }
        long long v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_1004A2A94(uint64_t a1)
{
  sub_1004A3944(a1);

  operator delete();
}

void sub_1004A2ACC(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1004A2AFC(id a1)
{
  qword_102419158 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Odometer");
}

void sub_1004A2B2C(id a1)
{
  qword_1024190D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

void sub_1004A2B60()
{
}

void *sub_1004A2B74()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = off_1022B5038;
  return result;
}

void sub_1004A2BAC(uint64_t a1, void *a2)
{
  *a2 = off_1022B5038;
}

double sub_1004A2BD4(uint64_t a1, double **a2)
{
  id v2 = *a2;
  double result = **a2;
  double v4 = 0.0;
  while (v2 != a2[1])
  {
    double v4 = v4 + v2[2];
    v2 += 3;
  }
  return result;
}

uint64_t sub_1004A2C00(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1004A2C40()
{
}

void *sub_1004A2C4C(void *a1)
{
  id v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1004A2CD4()
{
}

void *sub_1004A2CE8()
{
  double result = operator new(0x10uLL);
  *double result = off_1022B50C8;
  return result;
}

void sub_1004A2D20(uint64_t a1, void *a2)
{
  *a2 = off_1022B50C8;
}

double sub_1004A2D48(uint64_t a1, double **a2)
{
  id v2 = a2[1];
  double result = **a2;
  double v4 = 0.0;
  if (*a2 != v2)
  {
    uint64_t v5 = *a2;
    do
    {
      double v4 = v4 + v5[2];
      v5 += 3;
    }
    while (v5 != v2);
  }
  return result;
}

uint64_t sub_1004A2D98(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1004A2DD8()
{
}

void sub_1004A2DE8()
{
}

void *sub_1004A2DFC()
{
  double result = operator new(0x10uLL);
  *double result = off_1022B5148;
  return result;
}

void sub_1004A2E34(uint64_t a1, void *a2)
{
  *a2 = off_1022B5148;
}

BOOL sub_1004A2E5C(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 16) >= 0.0;
}

uint64_t sub_1004A2E6C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1004A2EAC()
{
}

void *sub_1004A2EB8(void *a1)
{
  id v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1004A2F40()
{
}

void *sub_1004A2F54()
{
  double result = operator new(0x10uLL);
  *double result = off_1022B51D8;
  return result;
}

void sub_1004A2F8C(uint64_t a1, void *a2)
{
  *a2 = off_1022B51D8;
}

BOOL sub_1004A2FB4(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 16) > 2.22044605e-16;
}

uint64_t sub_1004A2FCC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1004A300C()
{
}

void sub_1004A3018(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1004A3080(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A61910(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004A3098(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

uint64_t sub_1004A30C8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1004A310C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1004A3180(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1003B273C((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A3198(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    sub_1003B278C(result);
    operator delete();
  }
  return result;
}

uint64_t sub_1004A31E0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1004A3224(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1004A3254(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_1004A3284(uint64_t a1, double **a2)
{
  int v3 = *a2;
  id v2 = a2[1];
  double v4 = (*a2)[1];
  double v5 = *(float *)(a1 + 136);
  if (v4 <= v5) {
    double v4 = *(float *)(a1 + 136);
  }
  uint64_t v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    uint64_t v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    double v8 = *v3;
    do
    {
      double v9 = *v6;
      double v10 = v6[1];
      v6 += 3;
      uint64_t v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5) {
        double v4 = *(float *)(a1 + 136);
      }
      else {
        double v4 = v10;
      }
      double v8 = v9;
    }
    while (v6 != v2);
  }
  if (v4 != 1.79769313e308)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022B5418);
    }
    long long v11 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning No expiration rule was added so the number of records will be unbounded.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B5418);
      }
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "int CLActivityRecorderDb<CLSignificantElevation>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLSignificantElevation, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  return v7;
}

void sub_1004A3484(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B5468;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004A34A4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B5468;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

id sub_1004A3500(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_1004A388C((uint64_t)&v7, a1);
  }
  if (!getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_1022B54A8);
    }
    double v5 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134218498;
      id v15 = v2;
      __int16 v16 = 2048;
      uint64_t v17 = 0;
      __int16 v18 = 2080;
      unint64_t v19 = 0x8000000101D2102CLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418F90 == -1) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  if (qword_102418F90 != -1) {
    dispatch_once(&qword_102418F90, &stru_1022B54A8);
  }
  int v3 = qword_102418F98;
  if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 134218498;
    id v15 = v2;
    __int16 v16 = 2048;
    uint64_t v17 = 0;
    __int16 v18 = 2080;
    unint64_t v19 = 0x8000000101D2102CLL & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  }
  if (!sub_10013D1A0(115, 0)) {
    return 0;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102418F90 != -1) {
LABEL_20:
  }
    dispatch_once(&qword_102418F90, &stru_1022B54A8);
LABEL_18:
  int v8 = 134218498;
  id v9 = v2;
  __int16 v10 = 2048;
  uint64_t v11 = 0;
  __int16 v12 = 2080;
  unint64_t v13 = 0x8000000101D2102CLL & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLOdometerNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v6);
  if (v6 != (char *)buf) {
    free(v6);
  }
  return 0;
}

id sub_1004A388C(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_102392588))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)192) {
      sub_101A61934();
    }
    [a2 setCppObjectPtr:[objc_msgSend(objc_msgSend(a2, "serialized"), "bytes") bytes]];
  }

  return [a2 cppObjectPtr];
}

void sub_1004A3914(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_1004A3944(uint64_t a1)
{
  *(void *)a1 = off_1022B54D8;
  id v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  *id v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_1004A39B4()
{
}

uint64_t sub_1004A3A88(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

uint64_t sub_1004A3AA8()
{
  qword_10247AC18 = (uint64_t)off_1022B5038;
  qword_10247AC30 = (uint64_t)&qword_10247AC18;
  __cxa_atexit((void (*)(void *))sub_10049ED98, &qword_10247AC18, (void *)&_mh_execute_header);
  qword_10247AC38 = (uint64_t)off_1022B50C8;
  qword_10247AC50 = (uint64_t)&qword_10247AC38;
  __cxa_atexit((void (*)(void *))sub_10049ED98, &qword_10247AC38, (void *)&_mh_execute_header);
  qword_10247AC58 = (uint64_t)off_1022B5148;
  qword_10247AC70 = (uint64_t)&qword_10247AC58;
  __cxa_atexit((void (*)(void *))sub_10049ED9C, &qword_10247AC58, (void *)&_mh_execute_header);
  qword_10247AC78 = (uint64_t)off_1022B51D8;
  qword_10247AC90 = (uint64_t)&qword_10247AC78;

  return __cxa_atexit((void (*)(void *))sub_10049ED9C, &qword_10247AC78, (void *)&_mh_execute_header);
}

void sub_1004A4390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id location)
{
  objc_destroyWeak(v28);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void *sub_1004A43BC(uint64_t a1)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022B5520);
  }
  id v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 136446210;
    char v7 = "-[CLEEDCoexMonitorThermal initWithQueue:mitigationConfig:cachedCoexMetricData:eventCB:coexMetricUpdateCB:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2CXTH,%{public}s ThermalMitigation Disabled, returning with nominal.", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022B5520);
    }
    double v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLEEDCoexMonitorThermal initWithQueue:mitigationConfig:cachedCoexMetricData:eventCB:coexMetricUpdateCB:]_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  uint64_t result = *(void **)(a1 + 32);
  uint64_t v4 = result[2];
  if (v4) {
    return (void *)(*(uint64_t (**)(uint64_t, id, void))(v4 + 16))(v4, [result getMitigationForCurrentlevel], 0);
  }
  return result;
}

id sub_1004A459C(uint64_t a1)
{
  id result = objc_loadWeak((id *)(a1 + 32));
  if (result)
  {
    return _[result queryThermalLevel];
  }
  return result;
}

id sub_1004A45D4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) queryThermalLevel];
}

void sub_1004A5ADC(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_1004A5EC8()
{
}

void sub_1004A5F88()
{
}

void sub_1004A6018(double **a1, uint64_t a2, double a3)
{
  int v3 = *(double **)a2;
  *(void *)(a2 + 8) = *(void *)a2;
  uint64_t v4 = *a1;
  double v5 = a1[1];
  if (v5 != *a1)
  {
    double v7 = v4[2] - a3 + 0.0;
    double v8 = v7 * v4[5] / 3600.0 + 0.0;
    double v33 = v8;
    double v34 = v7;
    long long v9 = *((_OWORD *)v4 + 2);
    uint64_t v10 = *((void *)v4 + 10);
    long long v11 = *((_OWORD *)v4 + 4);
    long long v38 = *((_OWORD *)v4 + 3);
    long long v39 = v11;
    uint64_t v40 = v10;
    long long v37 = v9;
    long long v12 = *((_OWORD *)v4 + 1);
    long long v35 = *(_OWORD *)v4;
    long long v36 = v12;
    if (v7 >= 60.0)
    {
      uint64_t v14 = (void *)(a2 + 16);
      double v15 = *(double *)&v36;
      do
      {
        double v16 = v7 + -60.0;
        double v17 = v15 - (v7 + -60.0) + -60.0;
        double v18 = v8 * 3600.0 / v7;
        if ((unint64_t)v3 >= *v14)
        {
          unint64_t v19 = *(double **)a2;
          uint64_t v20 = ((uint64_t)v3 - *(void *)a2) >> 4;
          unint64_t v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 60) {
            sub_1001D7FD4();
          }
          uint64_t v22 = *v14 - (void)v19;
          if (v22 >> 3 > v21) {
            unint64_t v21 = v22 >> 3;
          }
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v21;
          }
          if (v23)
          {
            int v24 = (char *)sub_1000C571C(a2 + 16, v23);
            unint64_t v19 = *(double **)a2;
            int v3 = *(double **)(a2 + 8);
          }
          else
          {
            int v24 = 0;
          }
          __int16 v25 = (double *)&v24[16 * v20];
          *__int16 v25 = v17;
          v25[1] = v18;
          int v26 = v25;
          if (v3 != v19)
          {
            do
            {
              *((_OWORD *)v26 - 1) = *((_OWORD *)v3 - 1);
              v26 -= 2;
              v3 -= 2;
            }
            while (v3 != v19);
            unint64_t v19 = *(double **)a2;
          }
          int v3 = v25 + 2;
          *(void *)a2 = v26;
          *(void *)(a2 + 8) = v25 + 2;
          *(void *)(a2 + 16) = &v24[16 * v23];
          if (v19) {
            operator delete(v19);
          }
        }
        else
        {
          double *v3 = v17;
          v3[1] = v18;
          v3 += 2;
          double v8 = v33;
          double v7 = v34;
          double v16 = v34 + -60.0;
        }
        *(void *)(a2 + 8) = v3;
        double v8 = v8 - v8 * 60.0 / v7;
        double v33 = v8;
        double v34 = v16;
        double v7 = v16;
      }
      while (v16 >= 60.0);
      uint64_t v4 = *a1;
      double v5 = a1[1];
    }
    int v27 = v4 + 11;
    v32[0] = &v34;
    v32[1] = &v33;
    id v32[2] = &v35;
    v32[3] = a2;
    while (v27 != v5)
    {
      long long v28 = *((_OWORD *)v27 + 1);
      v41[0] = *(_OWORD *)v27;
      v41[1] = v28;
      long long v29 = *((_OWORD *)v27 + 2);
      long long v30 = *((_OWORD *)v27 + 3);
      long long v31 = *((_OWORD *)v27 + 4);
      uint64_t v42 = *((void *)v27 + 10);
      v41[3] = v30;
      v41[4] = v31;
      v41[2] = v29;
      sub_1004A6290((uint64_t)v32, (uint64_t)v41);
      v27 += 11;
    }
  }
}

void sub_1004A6290(uint64_t a1, uint64_t a2)
{
  double v3 = *(double *)(a2 + 16);
  double v4 = *(double *)(*(void *)(a1 + 16) + 16);
  if (v3 >= v4)
  {
    double v7 = v3 - v4;
    double v8 = v7 + **(double **)a1;
    if (v8 >= 60.0)
    {
      double v9 = v8 + -60.0;
      uint64_t v10 = *(double **)(a1 + 8);
      double v11 = *v10 + (v7 - (v8 + -60.0)) * *(double *)(a2 + 40) / 3600.0;
      double *v10 = v11;
      uint64_t v12 = *(void *)(a1 + 24);
      double v13 = *(double *)(a2 + 16) - (v8 + -60.0) + -60.0;
      double v14 = v11 * 3600.0 / 60.0;
      double v15 = *(double **)(v12 + 8);
      unint64_t v16 = *(void *)(v12 + 16);
      if ((unint64_t)v15 >= v16)
      {
        double v18 = *(double **)v12;
        uint64_t v19 = ((uint64_t)v15 - *(void *)v12) >> 4;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 60) {
LABEL_49:
        }
          sub_1001D7FD4();
        uint64_t v21 = v16 - (void)v18;
        if (v21 >> 3 > v20) {
          unint64_t v20 = v21 >> 3;
        }
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22)
        {
          unint64_t v23 = (char *)sub_1000C571C(v12 + 16, v22);
          double v18 = *(double **)v12;
          double v15 = *(double **)(v12 + 8);
        }
        else
        {
          unint64_t v23 = 0;
        }
        int v24 = (double *)&v23[16 * v19];
        __int16 v25 = &v23[16 * v22];
        double *v24 = v13;
        v24[1] = v14;
        double v17 = v24 + 2;
        if (v15 != v18)
        {
          do
          {
            *((_OWORD *)v24 - 1) = *((_OWORD *)v15 - 1);
            v24 -= 2;
            v15 -= 2;
          }
          while (v15 != v18);
          double v18 = *(double **)v12;
        }
        *(void *)uint64_t v12 = v24;
        *(void *)(v12 + 8) = v17;
        *(void *)(v12 + 16) = v25;
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *double v15 = v13;
        v15[1] = v14;
        double v17 = v15 + 2;
      }
      *(void *)(v12 + 8) = v17;
      int v26 = *(double **)a1;
      *int v26 = v9;
      int v27 = *(double **)(a1 + 8);
      double *v27 = v9 * *(double *)(a2 + 40) / 3600.0;
      for (double i = *v26; i >= 60.0; *v43 = i)
      {
        uint64_t v29 = *(void *)(a1 + 24);
        double v30 = *(double *)(a2 + 16) - (i + -60.0) + -60.0;
        double v31 = *v27 * 3600.0 / i;
        int v32 = *(double **)(v29 + 8);
        unint64_t v33 = *(void *)(v29 + 16);
        if ((unint64_t)v32 >= v33)
        {
          long long v35 = *(double **)v29;
          uint64_t v36 = ((uint64_t)v32 - *(void *)v29) >> 4;
          unint64_t v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 60) {
            goto LABEL_49;
          }
          uint64_t v38 = v33 - (void)v35;
          if (v38 >> 3 > v37) {
            unint64_t v37 = v38 >> 3;
          }
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v39 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v39 = v37;
          }
          if (v39)
          {
            uint64_t v40 = (char *)sub_1000C571C(v29 + 16, v39);
            long long v35 = *(double **)v29;
            int v32 = *(double **)(v29 + 8);
          }
          else
          {
            uint64_t v40 = 0;
          }
          int v41 = (double *)&v40[16 * v36];
          *int v41 = v30;
          v41[1] = v31;
          uint64_t v42 = v41;
          if (v32 != v35)
          {
            do
            {
              *((_OWORD *)v42 - 1) = *((_OWORD *)v32 - 1);
              v42 -= 2;
              v32 -= 2;
            }
            while (v32 != v35);
            long long v35 = *(double **)v29;
          }
          double v34 = v41 + 2;
          *(void *)uint64_t v29 = v42;
          *(void *)(v29 + 8) = v41 + 2;
          *(void *)(v29 + 16) = &v40[16 * v39];
          if (v35) {
            operator delete(v35);
          }
        }
        else
        {
          *int v32 = v30;
          v32[1] = v31;
          double v34 = v32 + 2;
        }
        *(void *)(v29 + 8) = v34;
        __int16 v43 = *(double **)a1;
        int v27 = *(double **)(a1 + 8);
        double *v27 = *v27 + *v27 * -60.0 / **(double **)a1;
        double i = *v43 + -60.0;
      }
    }
    else
    {
      **(double **)a1 = v8;
      **(double **)(a1 + 8) = **(double **)(a1 + 8) + v7 * *(double *)(a2 + 40) / 3600.0;
    }
    uint64_t v44 = *(void *)(a1 + 16);
    long long v45 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)uint64_t v44 = *(_OWORD *)a2;
    *(_OWORD *)(v44 + 16) = v45;
    long long v46 = *(_OWORD *)(a2 + 32);
    long long v47 = *(_OWORD *)(a2 + 48);
    long long v48 = *(_OWORD *)(a2 + 64);
    *(void *)(v44 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(v44 + 48) = v47;
    *(_OWORD *)(v44 + 64) = v48;
    *(_OWORD *)(v44 + 32) = v46;
  }
  else
  {
    if (qword_102419170 != -1) {
      dispatch_once(&qword_102419170, &stru_1022B57E0);
    }
    double v5 = qword_102419178;
    if (os_log_type_enabled((os_log_t)qword_102419178, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "METMinutes,time rolled back", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419170 != -1) {
        dispatch_once(&qword_102419170, &stru_1022B57E0);
      }
      uint64_t v49 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLMetMinuteEstimator::estimateMetMinutes(CLMotionTimeRange, std::vector<CLNatalieData> &, std::vector<CLMetMinute> &)::(anonymous class)::operator()(const CLNatalieData) const", "%s\n", v49);
      if (v49 != (char *)buf) {
        free(v49);
      }
    }
    *(void *)(*(void *)(a1 + 24) + 8) = **(void **)(a1 + 24);
  }
}

void sub_1004A6754(id a1)
{
  qword_102419178 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Health");
}

void sub_1004A6784(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1004A67EC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A61910(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004A6804(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

uint64_t sub_1004A6834(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1004A6878(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1004A68E0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A61910(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004A68F8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

uint64_t sub_1004A6928(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1004A696C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1004A69D4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A61910(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004A69EC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

uint64_t sub_1004A6A1C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1004A6B10(id a1)
{
  qword_10247ACD0 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLDistributedSensingServiceSilo"];
}

void sub_1004A6E6C(id a1)
{
  qword_10247ACE0 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLVO2MaxCloudKitManagerSilo"];
}

void sub_1004A6F2C(id a1)
{
  if ((sub_10016CCBC() & 1) != 0 || (sub_100103240(), sub_10010145C())) {
    byte_10247ACF0 = 1;
  }
}

void sub_1004A77BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

id sub_1004A7818(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onDataProtectionNotification:a2 data:a3];
}

id sub_1004A7828(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onFitnessTrackingNotification:a2 data:a3];
}

void sub_1004A7D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004A84D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, ...)
{
  va_start(va, a13);
  if (a13) {
    sub_1000DB0A0(a13);
  }
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

void sub_1004A8518(uint64_t a1, xpc_activity_t activity)
{
  if (xpc_activity_get_state(activity))
  {
    [*(id *)(a1 + 32) onSyncActivity:activity];
    if (xpc_activity_get_state(activity) == 2 && !xpc_activity_set_state(activity, 4))
    {
      if (qword_102419220 != -1) {
        dispatch_once(&qword_102419220, &stru_1022B5A80);
      }
      double v4 = qword_102419228;
      if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 136446466;
        unint64_t v16 = "com.apple.vo2max.CloudKitManager";
        __int16 v17 = 2050;
        xpc_activity_state_t state = xpc_activity_get_state(activity);
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Failed to mark %{public}s activity as Continue. Current state is %{public}ld", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419220 != -1) {
          dispatch_once(&qword_102419220, &stru_1022B5A80);
        }
        xpc_activity_get_state(activity);
        double v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "-[CLVO2MaxCloudKitManager setUpSyncActivity]_block_invoke", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
      }
    }
  }
  else
  {
    xpc_object_t v6 = xpc_activity_copy_criteria(activity);
    if (!v6) {
      xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
    }
    int64_t int64 = xpc_dictionary_get_int64(v6, XPC_ACTIVITY_DELAY);
    if (int64 == *(void *)(a1 + 40))
    {
      if (qword_102419220 != -1) {
        dispatch_once(&qword_102419220, &stru_1022B5A80);
      }
      double v8 = qword_102419228;
      if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEFAULT))
      {
        xpc_activity_state_t v9 = *(void *)(a1 + 40);
        *(_DWORD *)uint64_t buf = 136446466;
        unint64_t v16 = "com.apple.vo2max.CloudKitManager";
        __int16 v17 = 2050;
        xpc_activity_state_t state = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "XPC_CHECK_IN: %{public}s activity already scheduled with a delay of %{public}lld seconds", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419220 != -1) {
          dispatch_once(&qword_102419220, &stru_1022B5A80);
        }
        uint64_t v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "-[CLVO2MaxCloudKitManager setUpSyncActivity]_block_invoke", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
    }
    else
    {
      xpc_activity_state_t v11 = int64;
      if (qword_102419220 != -1) {
        dispatch_once(&qword_102419220, &stru_1022B5A80);
      }
      uint64_t v12 = qword_102419228;
      if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = *(void *)(a1 + 40);
        *(_DWORD *)uint64_t buf = 136446722;
        unint64_t v16 = "com.apple.vo2max.CloudKitManager";
        __int16 v17 = 2050;
        xpc_activity_state_t state = v11;
        __int16 v19 = 2050;
        uint64_t v20 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "XPC_CHECK_IN: %{public}s: Overwriting previous delay (%{public}lld) with a new delay of %{public}lld seconds", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419220 != -1) {
          dispatch_once(&qword_102419220, &stru_1022B5A80);
        }
        double v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "-[CLVO2MaxCloudKitManager setUpSyncActivity]_block_invoke", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
      xpc_dictionary_set_int64(v6, XPC_ACTIVITY_DELAY, *(void *)(a1 + 40));
      xpc_dictionary_set_int64(v6, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_1_HOUR);
      xpc_dictionary_set_string(v6, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
      xpc_dictionary_set_BOOL(v6, XPC_ACTIVITY_REQUIRES_CLASS_B, 1);
      xpc_dictionary_set_BOOL(v6, XPC_ACTIVITY_ALLOW_BATTERY, 1);
      xpc_activity_set_criteria(activity, v6);
    }
    xpc_release(v6);
  }
}

void sub_1004A8EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    sub_1000DB0A0(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004A9A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    sub_1000DB0A0(a22);
  }
  _Unwind_Resume(exception_object);
}

id sub_1004A9AD8(uint64_t a1)
{
  return [*(id *)(a1 + 32) validateAccount];
}

void sub_1004A9B5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  xpc_object_t v6 = [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo"), "queue");
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1004A9BFC;
  block[3] = &unk_10229FF28;
  block[4] = a3;
  void block[5] = a2;
  block[6] = *(void *)(a1 + 32);
  dispatch_async(v6, block);
}

void sub_1004A9BFC(uint64_t a1)
{
  if (!*(void *)(a1 + 32))
  {
    if ([*(id *)(a1 + 40) accountStatus] == (id)1)
    {
      if ([*(id *)(a1 + 40) supportsDeviceToDeviceEncryption])
      {
        uint64_t v6 = *(void *)(a1 + 48);
        double v7 = *(void **)(v6 + 208);
        v15[0] = _NSConcreteStackBlock;
        v15[1] = 3221225472;
        _OWORD v15[2] = sub_1004AA0B4;
        v15[3] = &unk_1022B59D0;
        v15[4] = v6;
        [v7 fetchUserRecordIDWithCompletionHandler:v15];
        return;
      }
      if (qword_102419220 != -1) {
        dispatch_once(&qword_102419220, &stru_1022B5A80);
      }
      xpc_activity_state_t v11 = qword_102419228;
      if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_ERROR))
      {
        id v12 = [*(id *)(*(void *)(a1 + 48) + 208) containerIdentifier];
        *(_DWORD *)uint64_t buf = 138543362;
        id v19 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "iCloud account for container %{public}@ doesn't support device to device encryption", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_27;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419220 != -1) {
        dispatch_once(&qword_102419220, &stru_1022B5A80);
      }
      id v13 = [*(id *)(*(void *)(a1 + 48) + 208) containerIdentifier];
      int v16 = 138543362;
      id v17 = v13;
    }
    else
    {
      if (qword_102419220 != -1) {
        dispatch_once(&qword_102419220, &stru_1022B5A80);
      }
      double v8 = qword_102419228;
      if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_ERROR))
      {
        id v9 = [*(id *)(a1 + 40) accountStatus];
        *(_DWORD *)uint64_t buf = 134349056;
        id v19 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "iCloud account is not available, status: %{public}ld", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_27;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419220 != -1) {
        dispatch_once(&qword_102419220, &stru_1022B5A80);
      }
      id v10 = [*(id *)(a1 + 40) accountStatus];
      int v16 = 134349056;
      id v17 = v10;
    }
    double v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "-[CLVO2MaxCloudKitManager validateAccount]_block_invoke", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
LABEL_27:
    [*(id *)(a1 + 48) stopSyncing:0];
    return;
  }
  if (qword_102419220 != -1) {
    dispatch_once(&qword_102419220, &stru_1022B5A80);
  }
  id v2 = qword_102419228;
  if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_ERROR))
  {
    double v3 = *(void **)(a1 + 32);
    *(_DWORD *)uint64_t buf = 138543362;
    id v19 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Error determining account status: %{public}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_1022B5A80);
    }
    double v4 = *(void **)(a1 + 32);
    int v16 = 138543362;
    id v17 = v4;
    double v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "-[CLVO2MaxCloudKitManager validateAccount]_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

void sub_1004AA0B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = [[[*(id *)(a1 + 32) universe] silo] queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1004AA154;
  block[3] = &unk_10229FF28;
  uint64_t v7 = *(void *)(a1 + 32);
  block[4] = a3;
  void block[5] = v7;
  block[6] = a2;
  dispatch_async(v6, block);
}

void sub_1004AA154(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_1022B5A80);
    }
    id v2 = qword_102419228;
    if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      *(_DWORD *)uint64_t buf = 138543362;
      uint64_t v15 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Error getting user record: %{public}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419220 == -1) {
        goto LABEL_8;
      }
      goto LABEL_54;
    }
    return;
  }
  id v5 = [*(id *)(a1 + 40) getUserRecordIDName];
  if (!v5) {
    goto LABEL_25;
  }
  if ((objc_msgSend(v5, "isEqual:", objc_msgSend(*(id *)(a1 + 48), "recordName")) & 1) == 0)
  {
    if ([*(id *)(a1 + 40) shouldKeepLocalDataOnAccountChange])
    {
      if (qword_102419220 != -1) {
        dispatch_once(&qword_102419220, &stru_1022B5A80);
      }
      uint64_t v6 = qword_102419228;
      if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "iCloud account has changed. Due to testing override, will not delete local VO2Max data but will still delete sync engine metadata.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419220 != -1) {
          dispatch_once(&qword_102419220, &stru_1022B5A80);
        }
        id v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "-[CLVO2MaxCloudKitManager validateAccount]_block_invoke", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
      [*(id *)(a1 + 40) stopSyncing:1];
    }
    else
    {
      if (qword_102419220 != -1) {
        dispatch_once(&qword_102419220, &stru_1022B5A80);
      }
      uint64_t v7 = qword_102419228;
      if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[CKManager] iCloud account has changed. Deleting sync engine metadata", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419220 != -1) {
          dispatch_once(&qword_102419220, &stru_1022B5A80);
        }
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "-[CLVO2MaxCloudKitManager validateAccount]_block_invoke", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
      [*(id *)(a1 + 40) stopSyncing:1];
      [*(id *)(a1 + 40) deleteLocalVO2MaxData];
    }
LABEL_25:
    [*(id *)(a1 + 40) setUserRecordIDName:[*(id *)(a1 + 48) recordName]];
  }
  if (!*(void *)(*(void *)(a1 + 40) + 216))
  {
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_1022B5A80);
    }
    double v8 = qword_102419228;
    if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Will attempt to initialize the sync engine if/after device has been unlocked.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419220 != -1) {
        dispatch_once(&qword_102419220, &stru_1022B5A80);
      }
      xpc_activity_state_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLVO2MaxCloudKitManager validateAccount]_block_invoke", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 64);
    if (v9)
    {
      [*(id *)(v9 + 16) register:*(void *)(v9 + 8) forNotification:0 registrationInfo:0];
      return;
    }
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_1022B5A80);
    }
    id v10 = qword_102419228;
    if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Attempting registration when fDataProtectionClient is not initialized", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419220 == -1)
      {
LABEL_8:
        double v4 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "-[CLVO2MaxCloudKitManager validateAccount]_block_invoke", "%s\n", v4);
        if (v4 != (char *)buf) {
          free(v4);
        }
        return;
      }
LABEL_54:
      dispatch_once(&qword_102419220, &stru_1022B5A80);
      goto LABEL_8;
    }
  }
}

void sub_1004AAC08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = [[[*(id *)(a1 + 32) universe] silo] queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1004AACA8;
  block[3] = &unk_10229FF28;
  uint64_t v7 = *(void *)(a1 + 32);
  block[4] = a3;
  void block[5] = v7;
  block[6] = a2;
  dispatch_async(v6, block);
}

void sub_1004AACA8(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_1022B5A80);
    }
    id v2 = qword_102419228;
    if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = *(void **)(a1 + 32);
      *(_DWORD *)uint64_t buf = 138543362;
      id v34 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "[CKManager] Error fetching record zones: %{public}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419220 != -1) {
        dispatch_once(&qword_102419220, &stru_1022B5A80);
      }
      double v18 = *(void **)(a1 + 32);
      int v29 = 138543362;
      id v30 = v18;
      id v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLVO2MaxCloudKitManager deleteCloudKitRecords]_block_invoke", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    uint64_t v4 = a1 + 40;
    int v5 = 3;
  }
  else
  {
    if (*(void *)(a1 + 48))
    {
      if (qword_102419220 != -1) {
        dispatch_once(&qword_102419220, &stru_1022B5A80);
      }
      uint64_t v6 = qword_102419228;
      if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEFAULT))
      {
        id v7 = [*(id *)(a1 + 48) count];
        uint64_t v8 = *(void *)(a1 + 48);
        *(_DWORD *)uint64_t buf = 134349314;
        id v34 = v7;
        __int16 v35 = 2112;
        uint64_t v36 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[CKManager] Deleting %{public}lu zones: %@", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419220 != -1) {
          dispatch_once(&qword_102419220, &stru_1022B5A80);
        }
        id v20 = [*(id *)(a1 + 48) count];
        uint64_t v21 = *(void *)(a1 + 48);
        int v29 = 134349314;
        id v30 = v20;
        __int16 v31 = 2112;
        uint64_t v32 = v21;
        unint64_t v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "-[CLVO2MaxCloudKitManager deleteCloudKitRecords]_block_invoke", "%s\n", v22);
        if (v22 != (char *)buf) {
          free(v22);
        }
      }
      id v9 = [objc_alloc((Class)NSMutableArray) initWithCapacity:[*(id *)(a1 + 48) count]];
      long long v24 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      id v10 = *(void **)(a1 + 48);
      id v11 = [v10 countByEnumeratingWithState:&v24 objects:v28 count:16];
      if (v11)
      {
        id v12 = v11;
        uint64_t v13 = *(void *)v25;
        do
        {
          for (double i = 0; i != v12; double i = (char *)i + 1)
          {
            if (*(void *)v25 != v13) {
              objc_enumerationMutation(v10);
            }
            id v15 = [objc_alloc((Class)CKSyncEnginePendingZoneDelete) initWithZoneID:[*(id *)(*((void *)&v24 + 1) + 8 * i) zoneID]];
            [v9 addObject:v15];
          }
          id v12 = [v10 countByEnumeratingWithState:&v24 objects:v28 count:16];
        }
        while (v12);
      }
      uint64_t v16 = *(void *)(a1 + 40);
      uint64_t v4 = a1 + 40;
      [objc_msgSend(*(id *)(v16 + 216), "state") addPendingDatabaseChanges:v9];
    }
    else
    {
      if (qword_102419220 != -1) {
        dispatch_once(&qword_102419220, &stru_1022B5A80);
      }
      id v17 = qword_102419228;
      if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "[CKManager] No zones to delete", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419220 != -1) {
          dispatch_once(&qword_102419220, &stru_1022B5A80);
        }
        LOWORD(v29) = 0;
        unint64_t v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "-[CLVO2MaxCloudKitManager deleteCloudKitRecords]_block_invoke", "%s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
      }
      uint64_t v4 = a1 + 40;
    }
    int v5 = 4;
  }
  *(_DWORD *)(*(void *)v4 + 200) = v5;
}

void sub_1004AB2B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004AB57C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004AC0E4(id a1, NSError *a2)
{
  if (qword_102419220 != -1) {
    dispatch_once(&qword_102419220, &stru_1022B5A80);
  }
  uint64_t v3 = qword_102419228;
  if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 138543362;
    uint64_t v6 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Sync engine fetch complete for output records: %{public}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_1022B5A80);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLVO2MaxCloudKitManager initializeSyncEngine]_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
}

void sub_1004AC290(id a1, NSError *a2)
{
  if (qword_102419220 != -1) {
    dispatch_once(&qword_102419220, &stru_1022B5A80);
  }
  uint64_t v3 = qword_102419228;
  if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 138543362;
    uint64_t v6 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Sync engine fetch complete for input records: %{public}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_1022B5A80);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLVO2MaxCloudKitManager initializeSyncEngine]_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
}

void sub_1004AD464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004AD4A8(uint64_t a1, uint64_t a2)
{
  return uuid_compare((const unsigned __int8 *)(a1 + 16), (const unsigned __int8 *)(a2 + 16)) >> 31;
}

BOOL sub_1004AD4CC(uint64_t a1, uint64_t a2)
{
  return uuid_compare((const unsigned __int8 *)(a1 + 16), (const unsigned __int8 *)(a2 + 16)) == 0;
}

void sub_1004AE030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004AEF04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

NSDictionary *sub_1004B0A08(uint64_t a1)
{
  v3[0] = @"phoneSyncEngineEnabled";
  v4[0] = +[NSNumber numberWithBool:*(void *)(*(void *)(a1 + 32) + 216) != 0];
  v3[1] = @"phoneOutputSaveQueuedCount";
  v4[1] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 116)];
  _DWORD v3[2] = @"phoneOutputSaveAttemptedCount";
  _DWORD v4[2] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 120)];
  v3[3] = @"phoneOutputSaveSuccessCount";
  void v4[3] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 124)];
  void v3[4] = @"phoneOutputSaveFailureCount";
  void v4[4] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 128)];
  void v3[5] = @"phoneOutputFetchSuccessCount";
  void v4[5] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 132)];
  void v3[6] = @"phoneOutputFetchFailureCount";
  void v4[6] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 136)];
  v3[7] = @"phoneInputSaveQueuedCount";
  v4[7] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 140)];
  v3[8] = @"phoneInputSaveAttemptedCount";
  v4[8] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 144)];
  v3[9] = @"phoneInputSaveSuccessCount";
  v4[9] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 148)];
  v3[10] = @"phoneInputSaveFailureCount";
  v4[10] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 152)];
  v3[11] = @"phoneInputFetchSuccessCount";
  v4[11] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 156)];
  unsigned char v3[12] = @"phoneInputFetchFailureCount";
  v4[12] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 160)];
  v3[13] = @"phoneForcedFetchRequestedCount";
  v4[13] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 164)];
  v3[14] = @"phoneSecondsOfDataCollection";
  v4[14] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 32) + 168)];
  v3[15] = @"numPairedWatches";
  v4[15] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 104)];
  v3[16] = @"watchSyncEngineEnabled";
  v4[16] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 40)];
  v3[17] = @"watchOutputSaveQueuedCount";
  v4[17] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 44)];
  v3[18] = @"watchOutputSaveAttemptedCount";
  v4[18] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
  v3[19] = @"watchOutputSaveSuccessCount";
  v4[19] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 52)];
  v3[20] = @"watchOutputSaveFailureCount";
  v4[20] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 56)];
  v3[21] = @"watchOutputFetchSuccessCount";
  v4[21] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 60)];
  v3[22] = @"watchOutputFetchFailureCount";
  v4[22] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 64)];
  v3[23] = @"watchInputSaveQueuedCount";
  v4[23] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 68)];
  v3[24] = @"watchInputSaveAttemptedCount";
  v4[24] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 72)];
  v3[25] = @"watchInputSaveSuccessCount";
  v4[25] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 76)];
  v3[26] = @"watchInputSaveFailureCount";
  v4[26] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 80)];
  v3[27] = @"watchInputFetchSuccessCount";
  v4[27] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 84)];
  v3[28] = @"watchInputFetchFailureCount";
  v4[28] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 88)];
  v3[29] = @"watchForcedFetchRequestedCount";
  v4[29] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 92)];
  v3[30] = @"watchSecondsOfDataCollection";
  v4[30] = +[NSNumber numberWithDouble:*(double *)(a1 + 96)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:31];
}

void sub_1004B3A04(id a1)
{
  qword_102419228 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

Class sub_1004B3A34()
{
  if (qword_10247AD08 != -1) {
    dispatch_once(&qword_10247AD08, &stru_1022B5AA0);
  }
  Class result = objc_getClass("NRPairedDeviceRegistry");
  qword_10247AD00 = (uint64_t)result;
  off_10241BB60 = sub_1004B3A98;
  return result;
}

uint64_t sub_1004B3A98()
{
  return qword_10247AD00;
}

void sub_1004B3AA4(id a1)
{
  qword_10247AD10 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/NanoRegistry.framework/NanoRegistry", 2);
}

void *sub_1004B3AD0@<X0>(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x1C0uLL);
  Class result = sub_1004B3B2C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1004B3B18(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1004B3B2C(void *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B5AD0;
  sub_1009F0134(a1 + 3, *a2);
  return a1;
}

void sub_1004B3B78(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004B3B8C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B5AD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004B3BAC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B5AD0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1004B3C00(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void *sub_1004B3C28@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x70uLL);
  Class result = sub_1004B3C84(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1004B3C70(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1004B3C84(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B5B20;
  sub_1004B3D70((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1004B3CE0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004B3CF4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B5B20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004B3D14(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B5B20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1004B3D70(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = (std::__shared_weak_count *)a3[1];
  uint64_t v4 = *a3;
  int v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1011C4164(a2, &v4);
  if (v5) {
    sub_1000DB0A0(v5);
  }
}

void sub_1004B3DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004B3DDC(uint64_t a1)
{
  sub_1004B3E28((void *)(a1 + 64));
  id v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    sub_1000DB0A0(v2);
  }
}

uint64_t sub_1004B3E28(void *a1)
{
  id v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      id v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 18;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 36;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    id v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000D7EB4((uint64_t)a1);
}

void sub_1004B3ED0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_1015021A0(a2 + 1320);
    sub_100D621D8(a2 + 984);
    sub_100D58AB8(a2 + 496);
    sub_10112484C(a2);
    operator delete();
  }
}

void sub_1004B3F38(__n128 *a1, __n128 *a2, unsigned int (**a3)(void, void), uint64_t a4, char a5)
{
uint64_t sub_1004B432C(uint64_t result, _OWORD *a2, uint64_t (**a3)(void, void))
{
  if ((_OWORD *)result != a2)
  {
    unint64_t v4 = (_OWORD *)result;
    char v5 = (_OWORD *)(result + 80);
    if ((_OWORD *)(result + 80) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (_OWORD *)result;
      do
      {
        id v9 = v8;
        uint64_t v8 = v5;
        id v10 = *a3;
        long long v11 = v8[3];
        v36[2] = v8[2];
        v36[3] = v11;
        v36[4] = v8[4];
        long long v12 = v8[1];
        v36[0] = *v8;
        v36[1] = v12;
        long long v14 = v9[1];
        long long v13 = v9[2];
        long long v15 = v9[4];
        v35[3] = v9[3];
        v35[4] = v15;
        v35[1] = v14;
        v35[2] = v13;
        v35[0] = *v9;
        Class result = v10(v36, v35);
        if (result)
        {
          long long v16 = v8[3];
          long long v32 = v8[2];
          long long v33 = v16;
          long long v34 = v8[4];
          long long v17 = v8[1];
          long long v30 = *v8;
          long long v31 = v17;
          uint64_t v18 = v7;
          while (1)
          {
            uint64_t v19 = (_OWORD *)((char *)v4 + v18);
            long long v20 = *(_OWORD *)((char *)v4 + v18 + 48);
            v19[7] = *(_OWORD *)((char *)v4 + v18 + 32);
            v19[8] = v20;
            v19[9] = *(_OWORD *)((char *)v4 + v18 + 64);
            long long v21 = *(_OWORD *)((char *)v4 + v18 + 16);
            v19[5] = *(_OWORD *)((char *)v4 + v18);
            v19[6] = v21;
            if (!v18) {
              break;
            }
            unint64_t v22 = *a3;
            v29[2] = v32;
            v29[3] = v33;
            v29[4] = v34;
            v29[0] = v30;
            v29[1] = v31;
            long long v23 = *(v19 - 2);
            v28[2] = *(v19 - 3);
            v28[3] = v23;
            void v28[4] = *(v19 - 1);
            long long v24 = *(v19 - 4);
            v28[0] = *(v19 - 5);
            v28[1] = v24;
            Class result = v22(v29, v28);
            v18 -= 80;
            if ((result & 1) == 0)
            {
              __n128 v25 = (_OWORD *)((char *)v4 + v18 + 80);
              goto LABEL_10;
            }
          }
          __n128 v25 = v4;
LABEL_10:
          long long v26 = v33;
          v25[2] = v32;
          void v25[3] = v26;
          v25[4] = v34;
          long long v27 = v31;
          *__n128 v25 = v30;
          v25[1] = v27;
        }
        char v5 = v8 + 5;
        v7 += 80;
      }
      while (v8 + 5 != a2);
    }
  }
  return result;
}

uint64_t sub_1004B44C4(uint64_t result, _OWORD *a2, uint64_t (**a3)(void, void))
{
  if ((_OWORD *)result != a2)
  {
    unint64_t v4 = (_OWORD *)result;
    for (double i = (_OWORD *)(result + 80); v4 + 5 != a2; double i = v4 + 5)
    {
      uint64_t v7 = v4;
      unint64_t v4 = i;
      uint64_t v8 = *a3;
      long long v9 = v4[3];
      v36[2] = v4[2];
      v36[3] = v9;
      v36[4] = v4[4];
      long long v10 = v4[1];
      v36[0] = *v4;
      v36[1] = v10;
      long long v12 = v7[1];
      long long v11 = v7[2];
      long long v13 = v7[4];
      v35[3] = v7[3];
      v35[4] = v13;
      v35[1] = v12;
      v35[2] = v11;
      v35[0] = *v7;
      Class result = v8(v36, v35);
      if (result)
      {
        long long v14 = v4[3];
        long long v32 = v4[2];
        long long v33 = v14;
        long long v34 = v4[4];
        long long v15 = v4[1];
        long long v30 = *v4;
        long long v31 = v15;
        long long v16 = v4;
        do
        {
          long long v17 = v16 - 5;
          long long v18 = *(v16 - 4);
          long long v19 = *(v16 - 2);
          long long v20 = *(v16 - 1);
          uint64_t v16[2] = *(v16 - 3);
          void v16[3] = v19;
          v16[4] = v20;
          long long v21 = *(v16 - 6);
          _OWORD *v16 = *(v16 - 5);
          v16[1] = v18;
          unint64_t v22 = *a3;
          v29[2] = v32;
          v29[3] = v33;
          v29[4] = v34;
          v29[0] = v30;
          v29[1] = v31;
          long long v23 = *(v16 - 10);
          long long v24 = *(v16 - 9);
          long long v25 = *(v16 - 8);
          v28[3] = *(v16 - 7);
          void v28[4] = v21;
          v28[1] = v24;
          v28[2] = v25;
          v28[0] = v23;
          Class result = v22(v29, v28);
          long long v16 = v17;
        }
        while ((result & 1) != 0);
        long long v26 = v33;
        uint64_t v17[2] = v32;
        v17[3] = v26;
        v17[4] = v34;
        long long v27 = v31;
        *long long v17 = v30;
        v17[1] = v27;
      }
    }
  }
  return result;
}

uint64_t sub_1004B4630(_OWORD *a1, _OWORD *a2, _OWORD *a3, unsigned int (**a4)(void, void))
{
  uint64_t v8 = *a4;
  long long v9 = a2[3];
  id v89[2] = a2[2];
  v89[3] = v9;
  v89[4] = a2[4];
  long long v10 = a2[1];
  v89[0] = *a2;
  v89[1] = v10;
  long long v11 = a1[3];
  v88[2] = a1[2];
  v88[3] = v11;
  v88[4] = a1[4];
  long long v12 = a1[1];
  v88[0] = *a1;
  v88[1] = v12;
  char v13 = v8(v89, v88);
  long long v14 = *a4;
  if (v13)
  {
    long long v15 = a3[3];
    void v83[2] = a3[2];
    v83[3] = v15;
    v83[4] = a3[4];
    long long v16 = a3[1];
    v83[0] = *a3;
    v83[1] = v16;
    long long v17 = a2[3];
    v82[2] = a2[2];
    v82[3] = v17;
    v82[4] = a2[4];
    long long v18 = a2[1];
    v82[0] = *a2;
    v82[1] = v18;
    if (v14(v83, v82))
    {
      long long v19 = a1[3];
      long long v92 = a1[2];
      long long v93 = v19;
      long long v94 = a1[4];
      long long v20 = a1[1];
      long long v90 = *a1;
      long long v91 = v20;
      *a1 = *a3;
      long long v21 = a3[4];
      long long v23 = a3[1];
      long long v22 = a3[2];
      a1[3] = a3[3];
      a1[4] = v21;
      a1[1] = v23;
      a1[2] = v22;
      long long v24 = v94;
      long long v25 = v92;
      a3[3] = v93;
      a3[4] = v24;
      a3[2] = v25;
      long long v26 = v90;
      long long v27 = v91;
      uint64_t result = 1;
LABEL_9:
      *a3 = v26;
      a3[1] = v27;
      return result;
    }
    long long v57 = a1[3];
    long long v92 = a1[2];
    long long v93 = v57;
    long long v94 = a1[4];
    long long v58 = a1[1];
    long long v90 = *a1;
    long long v91 = v58;
    *a1 = *a2;
    long long v59 = a2[4];
    long long v61 = a2[1];
    long long v60 = a2[2];
    a1[3] = a2[3];
    a1[4] = v59;
    a1[1] = v61;
    a1[2] = v60;
    long long v62 = v94;
    long long v63 = v92;
    a2[3] = v93;
    a2[4] = v62;
    long long v64 = v91;
    *a2 = v90;
    a2[1] = v64;
    a2[2] = v63;
    __n128 v65 = *a4;
    long long v67 = *a3;
    long long v66 = a3[1];
    long long v68 = a3[4];
    v81[3] = a3[3];
    v81[4] = v68;
    long long v69 = a3[2];
    v81[1] = v66;
    v81[2] = v69;
    long long v70 = *a2;
    long long v71 = a2[1];
    long long v72 = a2[3];
    v80[4] = a2[4];
    v81[0] = v67;
    v80[2] = a2[2];
    v80[3] = v72;
    v80[0] = v70;
    v80[1] = v71;
    if (v65(v81, v80))
    {
      long long v73 = a2[3];
      long long v92 = a2[2];
      long long v93 = v73;
      long long v94 = a2[4];
      long long v74 = a2[1];
      long long v90 = *a2;
      long long v91 = v74;
      *a2 = *a3;
      long long v75 = a3[4];
      long long v77 = a3[1];
      long long v76 = a3[2];
      a2[3] = a3[3];
      a2[4] = v75;
      a2[1] = v77;
      a2[2] = v76;
      long long v78 = v94;
      long long v79 = v92;
      a3[3] = v93;
      a3[4] = v78;
      a3[2] = v79;
      long long v26 = v90;
      long long v27 = v91;
      uint64_t result = 2;
      goto LABEL_9;
    }
  }
  else
  {
    long long v29 = a3[3];
    v87[2] = a3[2];
    v87[3] = v29;
    v87[4] = a3[4];
    long long v30 = a3[1];
    v87[0] = *a3;
    v87[1] = v30;
    long long v31 = a2[3];
    v86[2] = a2[2];
    v86[3] = v31;
    v86[4] = a2[4];
    long long v32 = a2[1];
    v86[0] = *a2;
    v86[1] = v32;
    uint64_t result = ((uint64_t (*)(_OWORD *, _OWORD *))v14)(v87, v86);
    if (!result) {
      return result;
    }
    long long v33 = a2[3];
    long long v92 = a2[2];
    long long v93 = v33;
    long long v94 = a2[4];
    long long v34 = a2[1];
    long long v90 = *a2;
    long long v91 = v34;
    *a2 = *a3;
    long long v35 = a3[4];
    long long v37 = a3[1];
    long long v36 = a3[2];
    a2[3] = a3[3];
    a2[4] = v35;
    a2[1] = v37;
    a2[2] = v36;
    long long v38 = v94;
    long long v39 = v92;
    a3[3] = v93;
    a3[4] = v38;
    long long v40 = v91;
    *a3 = v90;
    a3[1] = v40;
    a3[2] = v39;
    BOOL v41 = *a4;
    long long v43 = *a2;
    long long v42 = a2[1];
    long long v44 = a2[4];
    v85[3] = a2[3];
    v85[4] = v44;
    long long v45 = a2[2];
    v85[1] = v42;
    v85[2] = v45;
    long long v46 = *a1;
    long long v47 = a1[1];
    long long v48 = a1[3];
    v84[4] = a1[4];
    v85[0] = v43;
    v84[2] = a1[2];
    v84[3] = v48;
    v84[0] = v46;
    v84[1] = v47;
    if (v41(v85, v84))
    {
      long long v49 = a1[3];
      long long v92 = a1[2];
      long long v93 = v49;
      long long v94 = a1[4];
      long long v50 = a1[1];
      long long v90 = *a1;
      long long v91 = v50;
      *a1 = *a2;
      long long v51 = a2[4];
      long long v53 = a2[1];
      long long v52 = a2[2];
      a1[3] = a2[3];
      a1[4] = v51;
      a1[1] = v53;
      a1[2] = v52;
      long long v54 = v94;
      long long v55 = v92;
      a2[3] = v93;
      a2[4] = v54;
      long long v56 = v91;
      uint64_t result = 2;
      *a2 = v90;
      a2[1] = v56;
      a2[2] = v55;
      return result;
    }
  }
  return 1;
}

_OWORD *sub_1004B4968(_OWORD *a1, _OWORD *a2, uint64_t (**a3)(void, void))
{
  unint64_t v4 = a2;
  long long v6 = a1[3];
  long long v69 = a1[2];
  long long v70 = v6;
  long long v71 = a1[4];
  long long v7 = a1[1];
  long long v67 = *a1;
  long long v68 = v7;
  uint64_t v8 = *a3;
  v66[2] = v69;
  v66[3] = v6;
  v66[4] = v71;
  v66[0] = v67;
  v66[1] = v7;
  long long v9 = *(a2 - 5);
  long long v10 = *(a2 - 4);
  long long v11 = *(a2 - 3);
  long long v12 = *(a2 - 1);
  v65[3] = *(a2 - 2);
  v65[4] = v12;
  v65[1] = v10;
  v65[2] = v11;
  v65[0] = v9;
  if (v8(v66, v65))
  {
    char v13 = a1;
    do
    {
      long long v14 = v13 + 5;
      long long v15 = *a3;
      v64[2] = v69;
      v64[3] = v70;
      v64[4] = v71;
      v64[0] = v67;
      v64[1] = v68;
      long long v16 = v13[8];
      v63[2] = v13[7];
      v63[3] = v16;
      v63[4] = v13[9];
      long long v17 = v13[6];
      v63[0] = v13[5];
      v63[1] = v17;
      char v18 = v15(v64, v63);
      char v13 = v14;
    }
    while ((v18 & 1) == 0);
  }
  else
  {
    long long v19 = a1 + 5;
    do
    {
      long long v14 = v19;
      if (v19 >= v4) {
        break;
      }
      long long v20 = *a3;
      v62[2] = v69;
      v62[3] = v70;
      v62[4] = v71;
      v62[0] = v67;
      v62[1] = v68;
      long long v21 = v14[3];
      v61[2] = v14[2];
      v61[3] = v21;
      v61[4] = v14[4];
      long long v22 = v14[1];
      v61[0] = *v14;
      v61[1] = v22;
      int v23 = v20(v62, v61);
      long long v19 = v14 + 5;
    }
    while (!v23);
  }
  if (v14 >= v4)
  {
    long long v24 = v4;
  }
  else
  {
    do
    {
      long long v24 = v4 - 5;
      long long v25 = *a3;
      void v60[2] = v69;
      v60[3] = v70;
      v60[4] = v71;
      v60[0] = v67;
      v60[1] = v68;
      long long v26 = *(v4 - 2);
      v59[2] = *(v4 - 3);
      v59[3] = v26;
      v59[4] = *(v4 - 1);
      long long v27 = *(v4 - 4);
      v59[0] = *(v4 - 5);
      v59[1] = v27;
      v4 -= 5;
    }
    while ((v25(v60, v59) & 1) != 0);
  }
  while (v14 < v24)
  {
    long long v72 = *v14;
    long long v28 = v14[1];
    long long v29 = v14[2];
    long long v30 = v14[4];
    long long v75 = v14[3];
    long long v76 = v30;
    long long v73 = v28;
    long long v74 = v29;
    long long v31 = v24[4];
    long long v33 = v24[1];
    long long v32 = v24[2];
    void v14[3] = v24[3];
    v14[4] = v31;
    v14[1] = v33;
    int v14[2] = v32;
    *long long v14 = *v24;
    long long v34 = v76;
    long long v36 = v73;
    long long v35 = v74;
    void v24[3] = v75;
    v24[4] = v34;
    v24[1] = v36;
    __n128 v24[2] = v35;
    _OWORD *v24 = v72;
    do
    {
      v58[2] = v69;
      v58[3] = v70;
      v58[4] = v71;
      v58[0] = v67;
      v58[1] = v68;
      long long v38 = v14[6];
      long long v37 = v14[7];
      long long v39 = v14[9];
      v57[3] = v14[8];
      v57[4] = v39;
      v57[1] = v38;
      v57[2] = v37;
      long long v40 = v14[5];
      v14 += 5;
      BOOL v41 = (unsigned int (*)(void, void))*a3;
      v57[0] = v40;
    }
    while (!v41(v58, v57));
    do
    {
      v56[2] = v69;
      v56[3] = v70;
      v56[4] = v71;
      v56[0] = v67;
      v56[1] = v68;
      long long v43 = *(v24 - 4);
      long long v42 = *(v24 - 3);
      long long v44 = *(v24 - 1);
      v55[3] = *(v24 - 2);
      v55[4] = v44;
      v55[1] = v43;
      v55[2] = v42;
      long long v45 = *(v24 - 5);
      v24 -= 5;
      long long v46 = *a3;
      v55[0] = v45;
    }
    while ((v46(v56, v55) & 1) != 0);
  }
  long long v47 = v14 - 5;
  if (v14 - 5 != a1)
  {
    *a1 = *v47;
    long long v48 = *(v14 - 4);
    long long v49 = *(v14 - 3);
    long long v50 = *(v14 - 1);
    a1[3] = *(v14 - 2);
    a1[4] = v50;
    a1[1] = v48;
    a1[2] = v49;
  }
  _OWORD *v47 = v67;
  long long v51 = v68;
  long long v52 = v69;
  long long v53 = v71;
  *(v14 - 2) = v70;
  *(v14 - 1) = v53;
  *(v14 - 4) = v51;
  *(v14 - 3) = v52;
  return v14;
}

long long *sub_1004B4C4C(long long *a1, long long *a2, uint64_t (**a3)(void, void))
{
  uint64_t v6 = 0;
  long long v7 = a1[3];
  long long v60 = a1[2];
  long long v61 = v7;
  long long v62 = a1[4];
  long long v8 = a1[1];
  long long v58 = *a1;
  long long v59 = v8;
  do
  {
    long long v9 = *a3;
    long long v10 = a1[v6 + 8];
    v57[2] = a1[v6 + 7];
    v57[3] = v10;
    v57[4] = a1[v6 + 9];
    long long v11 = a1[v6 + 6];
    v57[0] = a1[v6 + 5];
    v57[1] = v11;
    v56[2] = v60;
    v56[3] = v61;
    v56[4] = v62;
    v56[0] = v58;
    v56[1] = v59;
    v6 += 5;
  }
  while ((v9(v57, v56) & 1) != 0);
  long long v12 = &a1[v6];
  char v13 = &a1[v6 - 5];
  if (v6 == 5)
  {
    while (v12 < a2)
    {
      char v18 = *a3;
      long long v14 = a2 - 5;
      long long v19 = *(a2 - 2);
      v55[2] = *(a2 - 3);
      v55[3] = v19;
      v55[4] = *(a2 - 1);
      long long v20 = *(a2 - 4);
      v55[0] = *(a2 - 5);
      v55[1] = v20;
      v54[2] = v60;
      v54[3] = v61;
      v54[4] = v62;
      v54[0] = v58;
      v54[1] = v59;
      a2 -= 5;
      if (v18(v55, v54)) {
        goto LABEL_9;
      }
    }
    long long v14 = a2;
  }
  else
  {
    do
    {
      long long v14 = a2 - 5;
      long long v15 = (unsigned int (*)(void, void))*a3;
      long long v16 = *(a2 - 2);
      v53[2] = *(a2 - 3);
      v53[3] = v16;
      v53[4] = *(a2 - 1);
      long long v17 = *(a2 - 4);
      v53[0] = *(a2 - 5);
      v53[1] = v17;
      v52[2] = v60;
      v52[3] = v61;
      v52[4] = v62;
      v52[0] = v58;
      v52[1] = v59;
      a2 -= 5;
    }
    while (!v15(v53, v52));
  }
LABEL_9:
  if (v12 < v14)
  {
    long long v21 = v12;
    long long v22 = v14;
    do
    {
      long long v23 = v21[3];
      long long v65 = v21[2];
      long long v66 = v23;
      long long v67 = v21[4];
      long long v24 = v21[1];
      long long v63 = *v21;
      long long v64 = v24;
      long long v26 = v22[1];
      long long v25 = v22[2];
      long long v27 = v22[4];
      void v21[3] = v22[3];
      v21[4] = v27;
      v21[1] = v26;
      void v21[2] = v25;
      long long *v21 = *v22;
      *long long v22 = v63;
      long long v28 = v64;
      long long v29 = v65;
      long long v30 = v67;
      void v22[3] = v66;
      v22[4] = v30;
      v22[1] = v28;
      _OWORD v22[2] = v29;
      do
      {
        v51[0] = v21[5];
        long long v31 = v21[6];
        long long v32 = v21[7];
        long long v33 = v21[8];
        long long v34 = v21[9];
        v21 += 5;
        long long v35 = *a3;
        v51[3] = v33;
        v51[4] = v34;
        v51[1] = v31;
        v51[2] = v32;
        v50[2] = v60;
        _OWORD v50[3] = v61;
        v50[4] = v62;
        v50[0] = v58;
        v50[1] = v59;
      }
      while ((v35(v51, v50) & 1) != 0);
      do
      {
        v49[0] = *(v22 - 5);
        long long v36 = *(v22 - 4);
        long long v37 = *(v22 - 3);
        long long v38 = *(v22 - 2);
        long long v39 = *(v22 - 1);
        v22 -= 5;
        long long v40 = (unsigned int (*)(void, void))*a3;
        v49[3] = v38;
        v49[4] = v39;
        v49[1] = v36;
        v49[2] = v37;
        v48[2] = v60;
        v48[3] = v61;
        v48[4] = v62;
        v48[0] = v58;
        v48[1] = v59;
      }
      while (!v40(v49, v48));
    }
    while (v21 < v22);
    char v13 = v21 - 5;
  }
  if (v13 != a1)
  {
    *a1 = *v13;
    long long v41 = v13[1];
    long long v42 = v13[2];
    long long v43 = v13[4];
    a1[3] = v13[3];
    a1[4] = v43;
    a1[1] = v41;
    a1[2] = v42;
  }
  *char v13 = v58;
  long long v44 = v59;
  long long v45 = v60;
  long long v46 = v62;
  v13[3] = v61;
  v13[4] = v46;
  v13[1] = v44;
  double v13[2] = v45;
  return v13;
}

BOOL sub_1004B4F18(long long *a1, long long *a2, unsigned int (**a3)(void, void))
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      long long v8 = *a3;
      long long v9 = *(a2 - 2);
      v49[2] = *(a2 - 3);
      v49[3] = v9;
      v49[4] = *(a2 - 1);
      long long v10 = *(a2 - 4);
      v49[0] = *(a2 - 5);
      v49[1] = v10;
      long long v11 = a1[3];
      v48[2] = a1[2];
      v48[3] = v11;
      v48[4] = a1[4];
      long long v12 = a1[1];
      v48[0] = *a1;
      v48[1] = v12;
      if (!v8(v49, v48)) {
        return 1;
      }
      char v13 = a2 - 5;
      long long v14 = a1[3];
      long long v52 = a1[2];
      long long v53 = v14;
      long long v54 = a1[4];
      long long v15 = a1[1];
      long long v50 = *a1;
      long long v51 = v15;
      *a1 = *(a2 - 5);
      long long v16 = *(a2 - 1);
      long long v18 = *(a2 - 4);
      long long v17 = *(a2 - 3);
      a1[3] = *(a2 - 2);
      a1[4] = v16;
      a1[1] = v18;
      a1[2] = v17;
      long long v19 = v54;
      long long v20 = v52;
      v13[3] = v53;
      v13[4] = v19;
      long long v21 = v51;
      BOOL result = 1;
      *char v13 = v50;
      v13[1] = v21;
      double v13[2] = v20;
      return result;
    case 3uLL:
      sub_1004B4630(a1, a1 + 5, a2 - 5, a3);
      return 1;
    case 4uLL:
      sub_1004B5228(a1, a1 + 5, a1 + 10, a2 - 5, a3);
      return 1;
    case 5uLL:
      sub_1004B5440(a1, a1 + 5, a1 + 10, a1 + 15, a2 - 5, a3);
      return 1;
    default:
      long long v22 = a1 + 10;
      sub_1004B4630(a1, a1 + 5, a1 + 10, a3);
      long long v23 = a1 + 15;
      if (a1 + 15 == a2) {
        return 1;
      }
      uint64_t v24 = 0;
      int v25 = 0;
      break;
  }
  while (1)
  {
    long long v26 = *a3;
    long long v27 = v23[3];
    v47[2] = v23[2];
    v47[3] = v27;
    v47[4] = v23[4];
    long long v28 = v23[1];
    v47[0] = *v23;
    v47[1] = v28;
    long long v30 = v22[1];
    long long v29 = v22[2];
    long long v31 = v22[4];
    v46[3] = v22[3];
    v46[4] = v31;
    v46[1] = v30;
    v46[2] = v29;
    v46[0] = *v22;
    if (v26(v47, v46))
    {
      long long v32 = v23[3];
      long long v52 = v23[2];
      long long v53 = v32;
      long long v54 = v23[4];
      long long v33 = v23[1];
      long long v50 = *v23;
      long long v51 = v33;
      uint64_t v34 = v24;
      while (1)
      {
        long long v35 = (long long *)((char *)a1 + v34);
        long long v36 = *(long long *)((char *)a1 + v34 + 208);
        v35[17] = *(long long *)((char *)a1 + v34 + 192);
        v35[18] = v36;
        v35[19] = *(long long *)((char *)a1 + v34 + 224);
        long long v37 = *(long long *)((char *)a1 + v34 + 176);
        v35[15] = *(long long *)((char *)a1 + v34 + 160);
        v35[16] = v37;
        if (v34 == -160) {
          break;
        }
        long long v38 = *a3;
        v45[2] = v52;
        v45[3] = v53;
        v45[4] = v54;
        v45[0] = v50;
        v45[1] = v51;
        long long v39 = v35[8];
        v44[2] = v35[7];
        v44[3] = v39;
        v44[4] = v35[9];
        long long v40 = v35[6];
        v44[0] = v35[5];
        v44[1] = v40;
        v34 -= 80;
        if ((((uint64_t (*)(_OWORD *, _OWORD *))v38)(v45, v44) & 1) == 0)
        {
          long long v41 = (long long *)((char *)a1 + v34 + 240);
          goto LABEL_12;
        }
      }
      long long v41 = a1;
LABEL_12:
      long long v42 = v53;
      v41[2] = v52;
      v41[3] = v42;
      v41[4] = v54;
      long long v43 = v51;
      *long long v41 = v50;
      v41[1] = v43;
      if (++v25 == 8) {
        return v23 + 5 == a2;
      }
    }
    long long v22 = v23;
    v24 += 80;
    v23 += 5;
    if (v23 == a2) {
      return 1;
    }
  }
}

double sub_1004B5228(long long *a1, long long *a2, long long *a3, long long *a4, unsigned int (**a5)(void, void))
{
  sub_1004B4630(a1, a2, a3, a5);
  long long v10 = *a5;
  long long v11 = a4[3];
  v61[2] = a4[2];
  v61[3] = v11;
  v61[4] = a4[4];
  long long v12 = a4[1];
  v61[0] = *a4;
  v61[1] = v12;
  long long v13 = a3[3];
  void v60[2] = a3[2];
  v60[3] = v13;
  v60[4] = a3[4];
  long long v14 = a3[1];
  v60[0] = *a3;
  v60[1] = v14;
  if (v10(v61, v60))
  {
    long long v16 = a3[3];
    long long v64 = a3[2];
    long long v65 = v16;
    long long v66 = a3[4];
    long long v17 = a3[1];
    long long v62 = *a3;
    long long v63 = v17;
    *a3 = *a4;
    long long v18 = a4[4];
    long long v20 = a4[1];
    long long v19 = a4[2];
    a3[3] = a4[3];
    a3[4] = v18;
    a3[1] = v20;
    a3[2] = v19;
    long long v21 = v66;
    long long v22 = v64;
    a4[3] = v65;
    a4[4] = v21;
    long long v23 = v63;
    *a4 = v62;
    a4[1] = v23;
    a4[2] = v22;
    uint64_t v24 = *a5;
    long long v26 = *a3;
    long long v25 = a3[1];
    long long v27 = a3[4];
    v59[3] = a3[3];
    v59[4] = v27;
    long long v28 = a3[2];
    v59[1] = v25;
    v59[2] = v28;
    long long v29 = *a2;
    long long v30 = a2[1];
    long long v31 = a2[3];
    v58[4] = a2[4];
    v59[0] = v26;
    v58[2] = a2[2];
    v58[3] = v31;
    v58[0] = v29;
    v58[1] = v30;
    if (v24(v59, v58))
    {
      long long v32 = a2[3];
      long long v64 = a2[2];
      long long v65 = v32;
      long long v66 = a2[4];
      long long v33 = a2[1];
      long long v62 = *a2;
      long long v63 = v33;
      *a2 = *a3;
      long long v34 = a3[4];
      long long v36 = a3[1];
      long long v35 = a3[2];
      a2[3] = a3[3];
      a2[4] = v34;
      a2[1] = v36;
      a2[2] = v35;
      long long v37 = v66;
      long long v38 = v64;
      a3[3] = v65;
      a3[4] = v37;
      long long v39 = v63;
      *a3 = v62;
      a3[1] = v39;
      a3[2] = v38;
      long long v40 = *a5;
      long long v42 = *a2;
      long long v41 = a2[1];
      long long v43 = a2[4];
      v57[3] = a2[3];
      v57[4] = v43;
      long long v44 = a2[2];
      v57[1] = v41;
      v57[2] = v44;
      long long v45 = *a1;
      long long v46 = a1[1];
      long long v47 = a1[3];
      v56[4] = a1[4];
      v57[0] = v42;
      v56[2] = a1[2];
      v56[3] = v47;
      v56[0] = v45;
      v56[1] = v46;
      if (v40(v57, v56))
      {
        long long v48 = a1[3];
        long long v64 = a1[2];
        long long v65 = v48;
        long long v66 = a1[4];
        long long v49 = a1[1];
        long long v62 = *a1;
        long long v63 = v49;
        *a1 = *a2;
        long long v50 = a2[4];
        long long v52 = a2[1];
        long long v51 = a2[2];
        a1[3] = a2[3];
        a1[4] = v50;
        a1[1] = v52;
        a1[2] = v51;
        long long v53 = v66;
        long long v54 = v64;
        a2[3] = v65;
        a2[4] = v53;
        double result = *(double *)&v62;
        long long v55 = v63;
        *a2 = v62;
        a2[1] = v55;
        a2[2] = v54;
      }
    }
  }
  return result;
}

double sub_1004B5440(long long *a1, long long *a2, long long *a3, long long *a4, long long *a5, unsigned int (**a6)(void, void))
{
  sub_1004B5228(a1, a2, a3, a4, a6);
  long long v12 = *a6;
  long long v13 = a5[3];
  v81[2] = a5[2];
  v81[3] = v13;
  v81[4] = a5[4];
  long long v14 = a5[1];
  v81[0] = *a5;
  v81[1] = v14;
  long long v15 = a4[3];
  v80[2] = a4[2];
  v80[3] = v15;
  v80[4] = a4[4];
  long long v16 = a4[1];
  v80[0] = *a4;
  v80[1] = v16;
  if (v12(v81, v80))
  {
    long long v18 = a4[3];
    long long v84 = a4[2];
    long long v85 = v18;
    long long v86 = a4[4];
    long long v19 = a4[1];
    long long v82 = *a4;
    long long v83 = v19;
    *a4 = *a5;
    long long v20 = a5[4];
    long long v22 = a5[1];
    long long v21 = a5[2];
    a4[3] = a5[3];
    a4[4] = v20;
    a4[1] = v22;
    a4[2] = v21;
    long long v23 = v86;
    long long v24 = v84;
    a5[3] = v85;
    a5[4] = v23;
    long long v25 = v83;
    *a5 = v82;
    a5[1] = v25;
    a5[2] = v24;
    long long v26 = *a6;
    long long v28 = *a4;
    long long v27 = a4[1];
    long long v29 = a4[4];
    v79[3] = a4[3];
    v79[4] = v29;
    long long v30 = a4[2];
    v79[1] = v27;
    v79[2] = v30;
    long long v31 = *a3;
    long long v32 = a3[1];
    long long v33 = a3[3];
    v78[4] = a3[4];
    v79[0] = v28;
    v78[2] = a3[2];
    v78[3] = v33;
    v78[0] = v31;
    v78[1] = v32;
    if (v26(v79, v78))
    {
      long long v34 = a3[3];
      long long v84 = a3[2];
      long long v85 = v34;
      long long v86 = a3[4];
      long long v35 = a3[1];
      long long v82 = *a3;
      long long v83 = v35;
      *a3 = *a4;
      long long v36 = a4[4];
      long long v38 = a4[1];
      long long v37 = a4[2];
      a3[3] = a4[3];
      a3[4] = v36;
      a3[1] = v38;
      a3[2] = v37;
      long long v39 = v86;
      long long v40 = v84;
      a4[3] = v85;
      a4[4] = v39;
      long long v41 = v83;
      *a4 = v82;
      a4[1] = v41;
      a4[2] = v40;
      long long v42 = *a6;
      long long v44 = *a3;
      long long v43 = a3[1];
      long long v45 = a3[4];
      v77[3] = a3[3];
      v77[4] = v45;
      long long v46 = a3[2];
      v77[1] = v43;
      void v77[2] = v46;
      long long v47 = *a2;
      long long v48 = a2[1];
      long long v49 = a2[3];
      v76[4] = a2[4];
      v77[0] = v44;
      v76[2] = a2[2];
      v76[3] = v49;
      v76[0] = v47;
      v76[1] = v48;
      if (v42(v77, v76))
      {
        long long v50 = a2[3];
        long long v84 = a2[2];
        long long v85 = v50;
        long long v86 = a2[4];
        long long v51 = a2[1];
        long long v82 = *a2;
        long long v83 = v51;
        *a2 = *a3;
        long long v52 = a3[4];
        long long v54 = a3[1];
        long long v53 = a3[2];
        a2[3] = a3[3];
        a2[4] = v52;
        a2[1] = v54;
        a2[2] = v53;
        long long v55 = v86;
        long long v56 = v84;
        a3[3] = v85;
        a3[4] = v55;
        long long v57 = v83;
        *a3 = v82;
        a3[1] = v57;
        a3[2] = v56;
        long long v58 = *a6;
        long long v60 = *a2;
        long long v59 = a2[1];
        long long v61 = a2[4];
        v75[3] = a2[3];
        v75[4] = v61;
        long long v62 = a2[2];
        v75[1] = v59;
        v75[2] = v62;
        long long v63 = *a1;
        long long v64 = a1[1];
        long long v65 = a1[3];
        v74[4] = a1[4];
        v75[0] = v60;
        v74[2] = a1[2];
        v74[3] = v65;
        v74[0] = v63;
        v74[1] = v64;
        if (v58(v75, v74))
        {
          long long v66 = a1[3];
          long long v84 = a1[2];
          long long v85 = v66;
          long long v86 = a1[4];
          long long v67 = a1[1];
          long long v82 = *a1;
          long long v83 = v67;
          *a1 = *a2;
          long long v68 = a2[4];
          long long v70 = a2[1];
          long long v69 = a2[2];
          a1[3] = a2[3];
          a1[4] = v68;
          a1[1] = v70;
          a1[2] = v69;
          long long v71 = v86;
          long long v72 = v84;
          a2[3] = v85;
          a2[4] = v71;
          double result = *(double *)&v82;
          long long v73 = v83;
          *a2 = v82;
          a2[1] = v73;
          a2[2] = v72;
        }
      }
    }
  }
  return result;
}

__n128 *sub_1004B56EC(uint64_t a1, __n128 *a2, __n128 *a3, unsigned int (**a4)(void, void))
{
  if ((__n128 *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 80;
    if ((uint64_t)a2 - a1 >= 81)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      long long v12 = (__n128 *)(a1 + 80 * v10);
      do
      {
        sub_1004B5958(a1, a4, v9, v12);
        v12 -= 5;
        --v11;
      }
      while (v11);
    }
    long long v13 = a2;
    if (a2 != a3)
    {
      long long v14 = a2;
      do
      {
        long long v15 = (unsigned int (*)(_OWORD *, _OWORD *))*a4;
        __n128 v16 = v14[3];
        id v43[2] = v14[2];
        v43[3] = v16;
        v43[4] = v14[4];
        __n128 v17 = v14[1];
        v43[0] = *v14;
        v43[1] = v17;
        long long v18 = *(_OWORD *)(a1 + 48);
        _OWORD v42[2] = *(_OWORD *)(a1 + 32);
        v42[3] = v18;
        v42[4] = *(_OWORD *)(a1 + 64);
        long long v19 = *(_OWORD *)(a1 + 16);
        v42[0] = *(_OWORD *)a1;
        v42[1] = v19;
        if (v15(v43, v42))
        {
          __n128 v20 = v14[3];
          __n128 v46 = v14[2];
          __n128 v47 = v20;
          __n128 v48 = v14[4];
          __n128 v21 = v14[1];
          __n128 v44 = *v14;
          __n128 v45 = v21;
          *long long v14 = *(__n128 *)a1;
          __n128 v22 = *(__n128 *)(a1 + 64);
          __n128 v24 = *(__n128 *)(a1 + 16);
          __n128 v23 = *(__n128 *)(a1 + 32);
          void v14[3] = *(__n128 *)(a1 + 48);
          v14[4] = v22;
          v14[1] = v24;
          int v14[2] = v23;
          __n128 v25 = v48;
          __n128 v26 = v46;
          *(__n128 *)(a1 + 48) = v47;
          *(__n128 *)(a1 + 64) = v25;
          __n128 v27 = v45;
          *(__n128 *)a1 = v44;
          *(__n128 *)(a1 + 16) = v27;
          *(__n128 *)(a1 + 32) = v26;
          sub_1004B5958(a1, a4, v9, (__n128 *)a1);
        }
        v14 += 5;
      }
      while (v14 != a3);
      long long v13 = a3;
    }
    if (v8 >= 81)
    {
      int64_t v28 = v8 / 0x50uLL;
      long long v29 = a2 - 5;
      do
      {
        __n128 v30 = *(__n128 *)(a1 + 48);
        __n128 v46 = *(__n128 *)(a1 + 32);
        __n128 v47 = v30;
        __n128 v48 = *(__n128 *)(a1 + 64);
        __n128 v31 = *(__n128 *)(a1 + 16);
        __n128 v44 = *(__n128 *)a1;
        __n128 v45 = v31;
        long long v32 = (__n128 *)sub_1004B5BBC((_OWORD *)a1, (unsigned int (**)(_OWORD *, _OWORD *))a4, v28);
        if (v29 == v32)
        {
          __n128 v38 = v47;
          id v32[2] = v46;
          v32[3] = v38;
          void v32[4] = v48;
          __n128 v39 = v45;
          *long long v32 = v44;
          v32[1] = v39;
        }
        else
        {
          *long long v32 = *v29;
          __n128 v33 = v29[1];
          __n128 v34 = v29[2];
          __n128 v35 = v29[4];
          v32[3] = v29[3];
          void v32[4] = v35;
          v32[1] = v33;
          id v32[2] = v34;
          __n128 v36 = v47;
          v29[2] = v46;
          v29[3] = v36;
          v29[4] = v48;
          __n128 v37 = v45;
          *long long v29 = v44;
          v29[1] = v37;
          sub_1004B5CEC(a1, (uint64_t)&v32[5], a4, 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)&v32[5] - a1) >> 4));
        }
        v29 -= 5;
      }
      while (v28-- > 2);
    }
    return v13;
  }
  return a3;
}

__n128 sub_1004B5958(uint64_t a1, unsigned int (**a2)(void, void), uint64_t a3, __n128 *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    char v5 = a4;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - a1) >> 4)))
    {
      int64_t v10 = (0x999999999999999ALL * (((uint64_t)a4 - a1) >> 4)) | 1;
      unint64_t v11 = (__n128 *)(a1 + 80 * v10);
      int64_t v12 = 0x999999999999999ALL * (((uint64_t)a4 - a1) >> 4) + 2;
      if (v12 < a3)
      {
        __n128 v13 = v11[3];
        v57[2] = v11[2];
        v57[3] = v13;
        __n128 v14 = v11[5];
        v57[4] = v11[4];
        __n128 v15 = v11[1];
        v57[0] = *v11;
        v57[1] = v15;
        __n128 v16 = v11[6];
        __n128 v17 = v11[8];
        __n128 v18 = v11[9];
        v56[2] = v11[7];
        v56[3] = v17;
        v56[4] = v18;
        long long v19 = *a2;
        v56[0] = v14;
        v56[1] = v16;
        if (v19(v57, v56))
        {
          v11 += 5;
          int64_t v10 = v12;
        }
      }
      __n128 v20 = *a2;
      __n128 v21 = v11[3];
      v55[2] = v11[2];
      v55[3] = v21;
      v55[4] = v11[4];
      __n128 v22 = v11[1];
      v55[0] = *v11;
      v55[1] = v22;
      __n128 v23 = v5[3];
      v54[2] = v5[2];
      v54[3] = v23;
      v54[4] = v5[4];
      __n128 v24 = v5[1];
      v54[0] = *v5;
      v54[1] = v24;
      if ((((uint64_t (*)(_OWORD *, _OWORD *))v20)(v55, v54) & 1) == 0)
      {
        __n128 v26 = v5[3];
        __n128 v51 = v5[2];
        __n128 v52 = v26;
        __n128 v53 = v5[4];
        __n128 v27 = v5[1];
        __n128 v49 = *v5;
        __n128 v50 = v27;
        do
        {
          int64_t v28 = v11;
          __n128 *v5 = *v11;
          __n128 v29 = v11[1];
          __n128 v30 = v11[2];
          __n128 v31 = v11[4];
          void v5[3] = v11[3];
          void v5[4] = v31;
          v5[1] = v29;
          _DWORD v5[2] = v30;
          if (v7 < v10) {
            break;
          }
          uint64_t v32 = (2 * v10) | 1;
          unint64_t v11 = (__n128 *)(a1 + 80 * v32);
          if (2 * v10 + 2 < a3)
          {
            __n128 v33 = v11[3];
            v48[2] = v11[2];
            v48[3] = v33;
            __n128 v34 = v11[5];
            v48[4] = v11[4];
            __n128 v35 = v11[1];
            v48[0] = *v11;
            v48[1] = v35;
            __n128 v36 = v11[6];
            __n128 v37 = v11[8];
            __n128 v38 = v11[9];
            v47[2] = v11[7];
            v47[3] = v37;
            v47[4] = v38;
            __n128 v39 = *a2;
            v47[0] = v34;
            v47[1] = v36;
            if (v39(v48, v47))
            {
              v11 += 5;
              uint64_t v32 = 2 * v10 + 2;
            }
          }
          long long v40 = *a2;
          __n128 v41 = v11[3];
          v46[2] = v11[2];
          v46[3] = v41;
          v46[4] = v11[4];
          __n128 v42 = v11[1];
          v46[0] = *v11;
          v46[1] = v42;
          v45[2] = v51;
          v45[3] = v52;
          v45[4] = v53;
          v45[0] = v49;
          v45[1] = v50;
          char v5 = v28;
          int64_t v10 = v32;
        }
        while (!v40(v46, v45));
        *int64_t v28 = v49;
        __n128 result = v50;
        __n128 v43 = v51;
        __n128 v44 = v53;
        v28[3] = v52;
        void v28[4] = v44;
        v28[1] = result;
        v28[2] = v43;
      }
    }
  }
  return result;
}

_OWORD *sub_1004B5BBC(_OWORD *a1, unsigned int (**a2)(_OWORD *, _OWORD *), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = &a1[5 * v6 + 5];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3)
    {
      int64_t v12 = *a2;
      v24[0] = *v9;
      long long v13 = v9[4];
      long long v15 = v9[1];
      long long v14 = v9[2];
      void v24[3] = v9[3];
      v24[4] = v13;
      v24[1] = v15;
      __n128 v24[2] = v14;
      long long v17 = v9[6];
      long long v16 = v9[7];
      long long v18 = v9[9];
      v23[3] = v9[8];
      v23[4] = v18;
      v23[1] = v17;
      v23[2] = v16;
      v23[0] = v9[5];
      if (v12(v24, v23))
      {
        v9 += 5;
        uint64_t v10 = v11;
      }
    }
    *a1 = *v9;
    long long v19 = v9[1];
    long long v20 = v9[2];
    long long v21 = v9[4];
    a1[3] = v9[3];
    a1[4] = v21;
    a1[1] = v19;
    a1[2] = v20;
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

__n128 sub_1004B5CEC(uint64_t a1, uint64_t a2, unsigned int (**a3)(void, void), uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v7 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v8 = *a3;
    uint64_t v9 = (_OWORD *)(a1 + 80 * v7);
    long long v10 = v9[3];
    v35[2] = v9[2];
    v35[3] = v10;
    v35[4] = v9[4];
    long long v11 = v9[1];
    v35[0] = *v9;
    v35[1] = v11;
    long long v12 = *(_OWORD *)(a2 - 32);
    v34[2] = *(_OWORD *)(a2 - 48);
    v34[3] = v12;
    v34[4] = *(_OWORD *)(a2 - 16);
    long long v13 = *(_OWORD *)(a2 - 64);
    v34[0] = *(_OWORD *)(a2 - 80);
    v34[1] = v13;
    if (v8(v35, v34))
    {
      long long v15 = (_OWORD *)(a2 - 80);
      long long v16 = *(_OWORD *)(a2 - 32);
      long long v31 = *(_OWORD *)(a2 - 48);
      long long v32 = v16;
      long long v33 = *(_OWORD *)(a2 - 16);
      __n128 v17 = *(__n128 *)(a2 - 64);
      long long v29 = *(_OWORD *)(a2 - 80);
      __n128 v30 = v17;
      do
      {
        long long v18 = v9;
        *long long v15 = *v9;
        long long v19 = v9[1];
        long long v20 = v9[2];
        long long v21 = v9[4];
        v15[3] = v9[3];
        v15[4] = v21;
        v15[1] = v19;
        _OWORD v15[2] = v20;
        if (!v7) {
          break;
        }
        __n128 v22 = *a3;
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v9 = (_OWORD *)(a1 + 80 * v7);
        long long v23 = v9[3];
        v28[2] = v9[2];
        v28[3] = v23;
        void v28[4] = v9[4];
        long long v24 = v9[1];
        v28[0] = *v9;
        v28[1] = v24;
        v27[2] = v31;
        int v27[3] = v32;
        v27[4] = v33;
        v27[0] = v29;
        v27[1] = v30;
        char v25 = v22(v28, v27);
        long long v15 = v18;
      }
      while ((v25 & 1) != 0);
      long long v26 = v32;
      uint64_t v18[2] = v31;
      void v18[3] = v26;
      v18[4] = v33;
      __n128 result = v30;
      *long long v18 = v29;
      v18[1] = result;
    }
  }
  return result;
}

long long *sub_1004B5E64(long long *a1, long long *a2, unsigned int (**a3)(void, void))
{
  if (a1 != a2)
  {
    char v5 = a1 + 5;
    while (v5 != a2)
    {
      uint64_t v6 = *a3;
      v29[0] = *(v5 - 5);
      long long v7 = *(v5 - 1);
      long long v9 = *(v5 - 4);
      long long v8 = *(v5 - 3);
      v29[3] = *(v5 - 2);
      v29[4] = v7;
      v29[1] = v9;
      v29[2] = v8;
      long long v11 = v5[1];
      long long v10 = v5[2];
      long long v12 = v5[4];
      v28[3] = v5[3];
      void v28[4] = v12;
      v28[1] = v11;
      v28[2] = v10;
      long long v13 = *v5;
      v5 += 5;
      v28[0] = v13;
      if (v6(v29, v28))
      {
        long long v14 = v5 - 10;
        while (v5 != a2)
        {
          long long v15 = *a3;
          v27[0] = *v14;
          long long v16 = v14[4];
          long long v18 = v14[1];
          long long v17 = v14[2];
          int v27[3] = v14[3];
          v27[4] = v16;
          v27[1] = v18;
          v27[2] = v17;
          long long v20 = v5[1];
          long long v19 = v5[2];
          long long v21 = v5[4];
          void v26[3] = v5[3];
          v26[4] = v21;
          v26[1] = v20;
          v26[2] = v19;
          v26[0] = *v5;
          if ((((uint64_t (*)(_OWORD *, _OWORD *))v15)(v27, v26) & 1) == 0)
          {
            v14[5] = *v5;
            long long v22 = v5[1];
            long long v23 = v5[2];
            long long v24 = v5[4];
            v14[8] = v5[3];
            v14[9] = v24;
            v14[6] = v22;
            v14[7] = v23;
            v14 += 5;
          }
          v5 += 5;
        }
        return v14 + 5;
      }
    }
  }
  return a2;
}

uint64_t sub_1004B5FAC(uint64_t result)
{
  *(void *)__n128 result = 0;
  *(_DWORD *)(result + 8) = 0;
  *(unsigned char *)(result + 12) = 0;
  return result;
}

uint64_t sub_1004B5FBC()
{
  return 1;
}

void sub_1004B5FCC()
{
}

uint64_t *sub_1004B6020(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    sub_1004B7474((uint64_t)a1, v2);
  }
  return a1;
}

uint64_t *sub_1004B6058(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *__n128 result = *a2;
  *a2 = v2;
  return result;
}

uint64_t sub_1004B606C(uint64_t a1)
{
  int v1 = *(_DWORD *)(*(void *)a1 + 4);
  if (v1 == 2) {
    return 1;
  }
  else {
    return 2 * (v1 == 1);
  }
}

void sub_1004B608C(uint64_t a1, int a2, int a3)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022B5B60);
  }
  char v5 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    sub_1004B6458(a2, v25);
    int v6 = v26;
    long long v7 = (void **)v25[0];
    sub_1004B6458(a3, __p);
    long long v8 = v25;
    if (v6 < 0) {
      long long v8 = v7;
    }
    if (v16 >= 0) {
      long long v9 = __p;
    }
    else {
      long long v9 = (void **)__p[0];
    }
    *(_DWORD *)uint64_t buf = 136315394;
    *(void *)&uint8_t buf[4] = v8;
    __int16 v18 = 2080;
    long long v19 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Changed from %s to %s:,", buf, 0x16u);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v26 < 0) {
      operator delete(v25[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(v25, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022B5B60);
    }
    sub_1004B6458(a2, __p);
    int v10 = v16;
    long long v11 = (void **)__p[0];
    sub_1004B6458(a3, buf);
    long long v12 = __p;
    if (v10 < 0) {
      long long v12 = v11;
    }
    if (v20 >= 0) {
      long long v13 = buf;
    }
    else {
      long long v13 = *(unsigned char **)buf;
    }
    int v21 = 136315394;
    long long v22 = v12;
    __int16 v23 = 2080;
    long long v24 = v13;
    long long v14 = (char *)_os_log_send_and_compose_impl();
    if (v20 < 0) {
      operator delete(*(void **)buf);
    }
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNavModeEstimator::logStateChange(CLNavModeClassification, CLNavModeClassification) const", "%s\n", v14);
    if (v14 != (char *)v25) {
      free(v14);
    }
  }
}

void sub_1004B6328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004B6360(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1004B63E0(*(void *)a1, a2);
  uint64_t v5 = *(void *)(a2 + 40);
  int v6 = *(_DWORD *)(*(void *)a1 + 4);
  if (v6 == 2) {
    int v7 = 1;
  }
  else {
    int v7 = 2 * (v6 == 1);
  }
  int v8 = *(_DWORD *)(a1 + 8);
  if (v8 != v7) {
    sub_1004B608C(v4, v8, v7);
  }
  *(_DWORD *)(a1 + 8) = v7;
  return v5;
}

uint64_t sub_1004B63E0(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1004B73A0((int *)a1, a2);
  if (*(_DWORD *)a1 == 3
    || *(_DWORD *)a1 == 2
    && (!*(unsigned char *)(a1 + 8) || *(double *)(a1 + 16) * 1000000000.0 + 2.0e11 < *(double *)(a2 + 40) * 1000000000.0))
  {
    *(_DWORD *)(a1 + 4) = 2;
  }
  return result;
}

void sub_1004B6458(int a1@<W0>, void *a2@<X8>)
{
  switch(a1)
  {
    case 2:
      uint64_t v4 = "RecentlyVehicular";
      goto LABEL_7;
    case 1:
      uint64_t v4 = "RecentlyPedestrian";
      goto LABEL_7;
    case 0:
      uint64_t v4 = "Uninitialized";
LABEL_7:
      sub_100134750(a2, v4);
      return;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022B5B80);
  }
  uint64_t v5 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)uint64_t buf = 136315650;
    *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Indoor/CLNavModeEstimator.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 262;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = "false";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Assert Failed, %s, %d, %s", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B5B80);
    }
    *(_DWORD *)long long v19 = 136315650;
    *(void *)&void v19[4] = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Indoor/CLNavModeEstimator.mm";
    *(_WORD *)&v19[12] = 1024;
    *(_DWORD *)&v19[14] = 262;
    *(_WORD *)&v19[18] = 2080;
    *(void *)&v19[20] = "false";
    long long v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "std::string cl::to_string(CLNavModeClassification)", "%s\n", v14);
    if (v14 != buf) {
      free(v14);
    }
  }
  sub_1004BA578();
  sub_100134750(&__p, "CLNavModeClassification");
  std::operator+<char>();
  int v6 = std::string::append(&v18, "(");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  *(void *)&v19[16] = *((void *)&v6->__r_.__value_.__l + 2);
  *(_OWORD *)long long v19 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v17, a1);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v8 = &v17;
  }
  else {
    int v8 = (std::string *)v17.__r_.__value_.__r.__words[0];
  }
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v17.__r_.__value_.__l.__size_;
  }
  int v10 = std::string::append((std::string *)v19, (const std::string::value_type *)v8, size);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  *(void *)&uint8_t buf[16] = *((void *)&v10->__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t buf = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  long long v12 = std::string::append((std::string *)buf, ")");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  a2[2] = *((void *)&v12->__r_.__value_.__l + 2);
  *(_OWORD *)a2 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if ((v19[23] & 0x80000000) != 0) {
    operator delete(*(void **)v19);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (v16 < 0) {
    operator delete(__p);
  }
}

void sub_1004B6818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1004B689C(void *result, double a2, double a3)
{
  uint64_t v3 = result;
  double v27 = a2;
  double v28 = a3;
  uint64_t v4 = result[4];
  if (result[5] == v4)
  {
    uint64_t v5 = result + 8;
  }
  else
  {
    uint64_t v5 = result + 8;
    unint64_t v6 = result[7];
    long long v7 = (void *)(v4 + 8 * (v6 >> 8));
    uint64_t v8 = *v7 + 16 * v6;
    uint64_t v9 = *(void *)(v4 + (((result[8] + v6) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((unsigned char *)result + 64) + v6);
    while (v8 != v9)
    {
      if (a3 < *(double *)(v8 + 8)) {
        return result;
      }
      v8 += 16;
      if (v8 - *v7 == 4096)
      {
        uint64_t v10 = v7[1];
        ++v7;
        uint64_t v8 = v10;
      }
    }
  }
  uint64_t result = (void *)sub_1004B6A88((uint64_t)(result + 3), &v27, &v28);
  if (*v5 >= 2uLL)
  {
    unint64_t v11 = v3[7];
    uint64_t v12 = v3[4];
    uint64_t v13 = v3[5];
    long long v14 = (void *)(v12 + 8 * (v11 >> 8));
    uint64_t v15 = *v14 + 16 * v11;
    if (v13 == v12) {
      uint64_t v15 = 0;
    }
    uint64_t v16 = v15 + 16;
    if (v15 + 16 - *v14 == 4096)
    {
      uint64_t v17 = v14[1];
      ++v14;
      uint64_t v16 = v17;
    }
    unint64_t v18 = v11 + *v5;
    long long v19 = (void *)(v12 + 8 * (v18 >> 8));
    if (v13 == v12) {
      uint64_t v20 = 0;
    }
    else {
      uint64_t v20 = *v19 + 16 * v18;
    }
    long long v22 = (char *)sub_1004B6B38(v14, v16, v28, (uint64_t)v19, v20);
    unint64_t v23 = v3[7] + v3[8];
    uint64_t v24 = v3[4];
    char v25 = (char *)(v24 + 8 * (v23 >> 8));
    if (v3[5] == v24) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = *(void *)v25 + 16 * v23;
    }
    return sub_1004B6BEC(v3 + 3, v22, v21, v25, v26);
  }
  return result;
}

double sub_1004B6A04(void *a1)
{
  unint64_t v1 = a1[8];
  double result = 0.0;
  if (v1 >= 5)
  {
    uint64_t v3 = a1[4];
    unint64_t v4 = a1[7];
    uint64_t v5 = (double **)(v3 + 8 * (v4 >> 8));
    unint64_t v6 = *v5;
    uint64_t v7 = (uint64_t)&(*v5)[2 * v4];
    uint64_t v8 = *(void *)(v3 + (((v4 + v1) >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * (v4 + v1);
    if (v8 != v7)
    {
      uint64_t v9 = &(*v5)[2 * v4];
      while (1)
      {
        v9 += 2;
        if ((char *)v9 - (char *)v6 == 4096)
        {
          uint64_t v10 = v5[1];
          ++v5;
          unint64_t v6 = v10;
          uint64_t v9 = v10;
        }
        if (v9 == (double *)v8) {
          break;
        }
        if (*v9 < *(double *)v7) {
          uint64_t v7 = (uint64_t)v9;
        }
      }
    }
    return *(double *)v7;
  }
  return result;
}

uint64_t sub_1004B6A88(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 32);
  if (!v6)
  {
    sub_1004B6E18((void **)a1);
    unint64_t v6 = *(void *)(a1 + 32);
  }
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = (void *)(v7 + 8 * (v6 >> 8));
  uint64_t v10 = *v9 + 16 * v6;
  if (v8 == v7) {
    uint64_t v10 = 0;
  }
  if (v10 == *v9) {
    uint64_t v10 = *(v9 - 1) + 4096;
  }
  *(void *)(v10 - 16) = *a2;
  *(void *)(v10 - 8) = *a3;
  unint64_t v11 = v6 - 1;
  uint64_t v12 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 40) = v12;
  if (v8 == v7) {
    return 0;
  }
  else {
    return *(void *)(v7 + ((v11 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v11;
  }
}

void *sub_1004B6B38(void *result, uint64_t a2, double a3, uint64_t a4, uint64_t a5)
{
  if (a2 != a5)
  {
    while (a3 - *(double *)(a2 + 8) <= 5.5)
    {
      a2 += 16;
      if (a2 - *result == 4096)
      {
        uint64_t v5 = result[1];
        ++result;
        a2 = v5;
      }
      if (a2 == a5) {
        return result;
      }
    }
  }
  if (a2 != a5)
  {
    uint64_t v6 = *result;
    uint64_t v7 = *result;
    uint64_t v8 = a2;
    uint64_t v9 = result;
    while (1)
    {
      v8 += 16;
      if (v8 - v7 == 4096)
      {
        uint64_t v10 = v9[1];
        ++v9;
        uint64_t v7 = v10;
        uint64_t v8 = v10;
      }
      if (v8 == a5) {
        break;
      }
      double v11 = *(double *)(v8 + 8);
      if (a3 - v11 <= 5.5)
      {
        *(void *)a2 = *(void *)v8;
        *(double *)(a2 + 8) = v11;
        a2 += 16;
        if (a2 - v6 == 4096)
        {
          uint64_t v12 = result[1];
          ++result;
          uint64_t v6 = v12;
          a2 = v12;
        }
      }
    }
  }
  return result;
}

void *sub_1004B6BEC(void *a1, char *a2, uint64_t a3, char *a4, uint64_t a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((a5 - *(void *)a4) >> 4) + 32 * (a4 - a2) - ((a3 - *(void *)a2) >> 4);
  }
  unint64_t v7 = a1[4];
  uint64_t v8 = a1[1];
  uint64_t v9 = (char *)(v8 + 8 * (v7 >> 8));
  if (a1[2] == v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *(void *)v9 + 16 * v7;
  }
  __n128 v36 = (uint64_t *)v9;
  uint64_t v37 = v10;
  if (v10 == a3) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = ((a3 - *(void *)a2) >> 4) + 32 * (a2 - v9) - ((v10 - *(void *)v9) >> 4);
  }
  uint64_t v12 = sub_1000D9B0C((uint64_t)&v36, v11);
  v35.n128_u64[0] = (unint64_t)v12;
  v35.n128_u64[1] = v13;
  if (v6 >= 1)
  {
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      uint64_t v20 = v12;
      uint64_t v21 = v13;
      long long v22 = v36;
      uint64_t v23 = v37;
      uint64_t v24 = sub_1000D9B0C((uint64_t)&v35, v6);
      sub_1004B712C(v22, v23, v20, v21, v24, v25, &v38);
      uint64_t v26 = v37;
      if (v37 != v39)
      {
        double v27 = v36;
        do
        {
          v26 += 16;
          uint64_t v37 = v26;
          if (v26 - *v27 == 4096)
          {
            uint64_t v28 = v27[1];
            ++v27;
            uint64_t v26 = v28;
            __n128 v36 = v27;
            uint64_t v37 = v28;
          }
        }
        while (v26 != v39);
      }
      uint64_t v29 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v29;
      while ((sub_100096314((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      long long v14 = (char **)sub_1000D9B0C((uint64_t)&v35, v6);
      unint64_t v16 = a1[4] + a1[5];
      uint64_t v17 = a1[1];
      unint64_t v18 = (char **)(v17 + 8 * (v16 >> 8));
      if (a1[2] == v17) {
        long long v19 = 0;
      }
      else {
        long long v19 = &(*v18)[16 * v16];
      }
      __n128 v38 = v35;
      sub_1004B7284(v14, v15, v18, v19, (char **)&v38);
      a1[5] -= v6;
      while ((sub_100446B90(a1, 1) & 1) != 0)
        ;
    }
  }
  unint64_t v30 = a1[4];
  uint64_t v31 = a1[1];
  long long v32 = (void *)(v31 + 8 * (v30 >> 8));
  if (a1[2] == v31) {
    uint64_t v33 = 0;
  }
  else {
    uint64_t v33 = *v32 + 16 * v30;
  }
  v38.n128_u64[0] = (unint64_t)v32;
  v38.n128_u64[1] = v33;
  return sub_1000D9B0C((uint64_t)&v38, v11);
}

void sub_1004B6E18(void **a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = v3 - v2;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 32 * (v3 - v2) - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x100)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    uint64_t v8 = a1[3];
    uint64_t v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      __n128 v46 = a1 + 3;
      std::string __p = sub_1000DA54C(v7, v11);
      __n128 v43 = (char *)__p;
      __n128 v44 = (char *)__p;
      __n128 v45 = (char *)__p + 8 * v12;
      __n128 v41 = operator new(0x1000uLL);
      sub_1000DA434(&__p, &v41);
      uint64_t v13 = (char *)a1[1];
      long long v14 = v44;
      if (v13 == a1[2])
      {
        uint64_t v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              uint64_t v24 = (char *)sub_1000DA54C((uint64_t)v46, v23);
              uint64_t v26 = v43;
              long long v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                long long v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                uint64_t v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)uint64_t v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              uint64_t v31 = __p;
              std::string __p = v24;
              __n128 v43 = &v24[8 * (v23 >> 2)];
              __n128 v44 = v14;
              __n128 v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                long long v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              uint64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                long long v14 = v43;
              }
              long long v22 = &v14[-8 * (v19 >> 1)];
              long long v14 = &v20[v21];
              __n128 v43 = v22;
              __n128 v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)long long v14 = v32;
          long long v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        uint64_t v33 = (char *)a1[1];
      }
      __n128 v36 = *a1;
      uint64_t v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      std::string __p = v36;
      __n128 v43 = v33;
      __n128 v38 = (char *)a1[3];
      uint64_t v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      __n128 v44 = v13;
      __n128 v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 128;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 256;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        __n128 v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        std::string __p = operator new(0x1000uLL);
        sub_10017F0B4(a1, &__p);
        __n128 v34 = a1[2];
        std::string __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        std::string __p = operator new(0x1000uLL);
      }
      sub_1002D02D8((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 128;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 256;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 256;
    std::string __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    sub_1002D02D8((uint64_t)a1, &__p);
  }
}

void sub_1004B70E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 sub_1004B712C@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X5>, uint64_t a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v19 = a2;
    uint64_t v18 = a4;
    int64_t v15 = a5;
    uint64_t v16 = a6;
  }
  else
  {
    uint64_t v13 = a3 - 1;
    uint64_t v12 = *a3;
    uint64_t v14 = a4;
    int64_t v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_1004B71FC(v12, v14, v15, v16, &v21);
      uint64_t v16 = v22.n128_i64[1];
      int64_t v15 = (uint64_t *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      uint64_t v17 = *v13--;
      uint64_t v12 = v17;
      uint64_t v14 = v17 + 4096;
    }
    uint64_t v18 = *a1 + 4096;
    uint64_t v19 = a2;
  }
  sub_1004B71FC(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = a4;
  a7[1] = result;
  return result;
}

void sub_1004B71FC(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  if (a1 == a2)
  {
    a2 = a1;
  }
  else
  {
    uint64_t v5 = *a3;
    uint64_t v6 = a2;
    while (1)
    {
      if ((v6 - a1) >> 4 >= (a4 - v5) >> 4) {
        uint64_t v7 = (a4 - v5) >> 4;
      }
      else {
        uint64_t v7 = (v6 - a1) >> 4;
      }
      if (v7)
      {
        uint64_t v8 = (uint64_t *)(v6 - 8);
        uint64_t v9 = -16 * v7;
        do
        {
          *(void *)(a4 - 16) = *(v8 - 1);
          a4 -= 16;
          uint64_t v10 = *v8;
          v8 -= 2;
          *(void *)(a4 + 8) = v10;
          v9 += 16;
        }
        while (v9);
      }
      v6 -= 16 * v7;
      if (v6 == a1) {
        break;
      }
      uint64_t v11 = *--a3;
      uint64_t v5 = v11;
      a4 = v11 + 4096;
    }
    if (v5 + 4096 == a4)
    {
      uint64_t v12 = a3[1];
      ++a3;
      a4 = v12;
    }
  }
  *a5 = a2;
  a5[1] = a3;
  a5[2] = a4;
}

double sub_1004B7284(char **a1, char *a2, char **a3, char *a4, char **a5)
{
  uint64_t v7 = *a5;
  uint64_t v8 = a5[1];
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (double i = *a1 + 4096; ; double i = v12 + 4096)
    {
      sub_1004B7318(a2, i, v7, v8, &v14);
      uint64_t v8 = (char *)*((void *)&v15 + 1);
      uint64_t v7 = (char *)v15;
      *a5 = (char *)v15;
      a5[1] = v8;
      if (v10 == a3) {
        break;
      }
      uint64_t v12 = *v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_1004B7318(a2, a4, v7, v8, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void sub_1004B7318(char *a1@<X1>, char *a2@<X2>, char *a3@<X3>, char *a4@<X4>, char **a5@<X8>)
{
  if (a1 == a2)
  {
    a2 = a1;
  }
  else
  {
    uint64_t v5 = *(void **)a3;
    while (1)
    {
      uint64_t v6 = (char *)(v5 + 512);
      if ((a2 - a1) >> 4 >= (v6 - a4) >> 4) {
        uint64_t v7 = (v6 - a4) >> 4;
      }
      else {
        uint64_t v7 = (a2 - a1) >> 4;
      }
      if (v7)
      {
        uint64_t v8 = &a1[16 * v7];
        do
        {
          *(void *)a4 = *(void *)a1;
          *((void *)a4 + 1) = *((void *)a1 + 1);
          a4 += 16;
          a1 += 16;
        }
        while (a1 != v8);
        a1 = v8;
      }
      if (a1 == a2) {
        break;
      }
      uint64_t v9 = (void *)*((void *)a3 + 1);
      a3 += 8;
      uint64_t v5 = v9;
      a4 = (char *)v9;
    }
    if (v6 == a4)
    {
      uint64_t v10 = (char *)*((void *)a3 + 1);
      a3 += 8;
      a4 = v10;
    }
  }
  *a5 = a2;
  a5[1] = a3;
  a5[2] = a4;
}

uint64_t sub_1004B73A0(int *a1, uint64_t a2)
{
  int isTypeInVehicle = CLMotionActivity::isTypeInVehicle();
  uint64_t result = CLMotionActivity::isTypePedestrian();
  if (isTypeInVehicle) {
    BOOL v6 = result == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6) {
    sub_101A61AB8();
  }
  if (isTypeInVehicle) {
    *a1 = 1;
  }
  if (result)
  {
    if (*(_DWORD *)(a2 + 4) == 2) {
      int v7 = 3;
    }
    else {
      int v7 = 2;
    }
    *a1 = v7;
  }
  return result;
}

void sub_1004B7414(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_1004B7444(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1004B7474(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_1000D80C4((void *)(a2 + 24));
    if (*(unsigned char *)(a2 + 8)) {
      *(unsigned char *)(a2 + 8) = 0;
    }
    operator delete();
  }
}

void *sub_1004B74D4(uint64_t a1)
{
  uint64_t result = (void *)sub_100EB0494(a1, 0);
  *uint64_t result = &off_1022B5BB0;
  return result;
}

void sub_1004B7510(uint64_t a1)
{
  sub_10043C740(a1);

  operator delete();
}

void sub_1004B75F8(id a1)
{
  qword_10247AD18 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLMotionCuesServiceAdapterSilo"];
}

void sub_1004B76F0()
{
}

uint64_t sub_1004B774C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (_DWORD *)result;
  *(void *)uint64_t result = a2;
  *(_DWORD *)(result + 8) = 2;
  *(void *)(result + 16) = 0;
  uint64_t v3 = result + 16;
  *(void *)(result + 24) = 0;
  if (&__AXSMotionCuesMode)
  {
    *(_DWORD *)(result + 8) = _AXSMotionCuesMode();
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterAddObserver(LocalCenter, v2, (CFNotificationCallback)sub_1004B80F4, kAXSMotionCuesPreferenceDidChangeNotification, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    if (!v2[2])
    {
      if (qword_102419660 != -1) {
        dispatch_once(&qword_102419660, &stru_1022B5C98);
      }
      uint64_t v5 = qword_102419668;
      if (os_log_type_enabled((os_log_t)qword_102419668, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[CLMotionCuesService] Only In Vehicle enabled", (uint8_t *)buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419660 != -1) {
          dispatch_once(&qword_102419660, &stru_1022B5C98);
        }
        LOWORD(v24) = 0;
        uint64_t v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLMotionCuesService::CLMotionCuesService(id<CLIntersiloUniverse>)", "%s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
      }
      operator new();
    }
    if (*(void *)v3)
    {
      float v23 = 0.0;
      sub_1000C7F88(buf);
      int v6 = sub_1004D11B0(*(uint64_t *)&buf[0], "OverridesMotionCuesLowVehicleMinConfidence", &v23);
      if (*((void *)&buf[0] + 1)) {
        sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
      }
      if (v6)
      {
        if (qword_102419660 != -1) {
          dispatch_once(&qword_102419660, &stru_1022B5C98);
        }
        int v7 = qword_102419668;
        if (os_log_type_enabled((os_log_t)qword_102419668, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(buf[0]) = 134217984;
          *(double *)((char *)buf + 4) = v23;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "[CLMotionCuesService] Setting min confidence to %f", (uint8_t *)buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419660 != -1) {
            dispatch_once(&qword_102419660, &stru_1022B5C98);
          }
          int v24 = 134217984;
          double v25 = v23;
          uint64_t v18 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLMotionCuesService::CLMotionCuesService(id<CLIntersiloUniverse>)", "%s\n", v18);
          if (v18 != (char *)buf) {
            free(v18);
          }
        }
        _S0 = v23;
        __asm { FCVT            H0, S0 }
        *(_WORD *)(*(void *)v3 + 1176) = LOWORD(_S0);
      }
      float v22 = 0.0;
      sub_1000C7F88(buf);
      int v13 = sub_1004D11B0(*(uint64_t *)&buf[0], "OverridesMotionCuesCooldownInterval", &v22);
      if (*((void *)&buf[0] + 1)) {
        sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
      }
      if (v13)
      {
        if (qword_102419660 != -1) {
          dispatch_once(&qword_102419660, &stru_1022B5C98);
        }
        uint64_t v14 = qword_102419668;
        if (os_log_type_enabled((os_log_t)qword_102419668, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(buf[0]) = 134217984;
          *(double *)((char *)buf + 4) = v22;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "[CLMotionCuesService] Setting cooldown interval to %f", (uint8_t *)buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419660 != -1) {
            dispatch_once(&qword_102419660, &stru_1022B5C98);
          }
          int v24 = 134217984;
          double v25 = v22;
          uint64_t v19 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLMotionCuesService::CLMotionCuesService(id<CLIntersiloUniverse>)", "%s\n", v19);
          if (v19 != (char *)buf) {
            free(v19);
          }
        }
        *(double *)(*(void *)v3 + 288) = v22;
      }
      float v21 = 0.0;
      sub_1000C7F88(buf);
      int v15 = sub_1004D11B0(*(uint64_t *)&buf[0], "OverridesMotionCuesSessionTimeout", &v21);
      if (*((void *)&buf[0] + 1)) {
        sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
      }
      if (v15)
      {
        if (qword_102419660 != -1) {
          dispatch_once(&qword_102419660, &stru_1022B5C98);
        }
        uint64_t v16 = qword_102419668;
        if (os_log_type_enabled((os_log_t)qword_102419668, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(buf[0]) = 134217984;
          *(double *)((char *)buf + 4) = v21;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "[CLMotionCuesService] Setting session timeout to %f", (uint8_t *)buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419660 != -1) {
            dispatch_once(&qword_102419660, &stru_1022B5C98);
          }
          int v24 = 134217984;
          double v25 = v21;
          uint64_t v20 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLMotionCuesService::CLMotionCuesService(id<CLIntersiloUniverse>)", "%s\n", v20);
          if (v20 != (char *)buf) {
            free(v20);
          }
        }
        *(double *)(*(void *)v3 + 296) = v21;
      }
    }
    sub_1014CC69C();
  }
  return result;
}

void sub_1004B8030(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 24);
  *(void *)(v1 + 24) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  sub_1004B88D4(v2, 0);
  _Unwind_Resume(a1);
}

void sub_1004B80F4(uint64_t a1, id *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CLProfilingIdentify();
  [objc_msgSend(*a2, "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022B5C78);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    uint64_t v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionCuesService::onAXSMotionCuesPreferenceDidChange", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B5C78);
    }
    uint64_t v11 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      __int16 v20 = 2082;
      float v21 = "activity";
      __int16 v22 = 2050;
      float v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionCuesService::onAXSMotionCuesPreferenceDidChange\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v15 = 0;
  }
  id v12 = [*a2 silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  double v13[2] = sub_1004B8F78;
  v13[3] = &unk_1022ACFE0;
  v13[4] = a2;
  void v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  [v12 sync:v13];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_1004B8310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004B8330(uint64_t a1, int *a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022B5C78);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionCuesService::onMobileAssetNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B5C78);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      char v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionCuesService::onMobileAssetNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1004B8924((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1004B84EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1004B850C(uint64_t *a1)
{
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveObserver(LocalCenter, a1, kAXSMotionCuesPreferenceDidChangeNotification, 0);
  [*(id *)(a1[3] + 16) unregister:*(void *)(a1[3] + 8) forNotification:9];
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_1004B88D4(a1 + 2, 0);
  return a1;
}

uint64_t sub_1004B859C(uint64_t a1)
{
  uint64_t result = _AXSMotionCuesMode();
  if (result != *(_DWORD *)(a1 + 8))
  {
    *(_DWORD *)(a1 + 8) = result;
    if (!result)
    {
      if (qword_102419660 != -1) {
        dispatch_once(&qword_102419660, &stru_1022B5C98);
      }
      uint64_t v4 = qword_102419668;
      if (os_log_type_enabled((os_log_t)qword_102419668, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[CLMotionCuesService] Only In Vehicle enabled", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419660 != -1) {
          dispatch_once(&qword_102419660, &stru_1022B5C98);
        }
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCuesService::onAXSMotionCuesPreferenceDidChange(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
      operator new();
    }
    if (qword_102419660 != -1) {
      dispatch_once(&qword_102419660, &stru_1022B5C98);
    }
    uint64_t v3 = qword_102419668;
    if (os_log_type_enabled((os_log_t)qword_102419668, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[CLMotionCuesService] Only In Vehicle disabled", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419660 != -1) {
        dispatch_once(&qword_102419660, &stru_1022B5C98);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCuesService::onAXSMotionCuesPreferenceDidChange(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    return sub_1004B88D4((uint64_t *)(a1 + 16), 0);
  }
  return result;
}

void sub_1004B88A8()
{
}

uint64_t sub_1004B88D4(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1010ECB7C();
    operator delete();
  }
  return result;
}

double sub_1004B8924(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (*(void *)(a1 + 16))
  {
    if (qword_102419660 != -1) {
      dispatch_once(&qword_102419660, &stru_1022B5C98);
    }
    uint64_t v7 = qword_102419668;
    if (os_log_type_enabled((os_log_t)qword_102419668, OS_LOG_TYPE_INFO))
    {
      int v8 = *a3;
      *(_DWORD *)uint64_t buf = 67240192;
      LODWORD(v28) = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[CLMotionCuesService] MA-OTA,notification,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419660 != -1) {
        dispatch_once(&qword_102419660, &stru_1022B5C98);
      }
      int v18 = *a3;
      int v25 = 67240192;
      LODWORD(v26) = v18;
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCuesService::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    if (*a3 == 9)
    {
      uint64_t v24 = 0;
      float v23 = 0.0;
      if (sub_1004D11B0(a4, "OverridesMotionCuesLowVehicleMinConfidence", (float *)&v24 + 1))
      {
        if (qword_102419660 != -1) {
          dispatch_once(&qword_102419660, &stru_1022B5C98);
        }
        uint64_t v10 = qword_102419668;
        if (os_log_type_enabled((os_log_t)qword_102419668, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t buf = 134217984;
          double v28 = *((float *)&v24 + 1);
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[CLMotionCuesService] MA-OTA, OverridesMotionCuesLowVehicleMinConfidence config available, value %f", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419660 != -1) {
            dispatch_once(&qword_102419660, &stru_1022B5C98);
          }
          int v25 = 134217984;
          double v26 = *((float *)&v24 + 1);
          __int16 v20 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCuesService::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v20);
          if (v20 != (char *)buf) {
            free(v20);
          }
        }
        _S0 = HIDWORD(v24);
        __asm { FCVT            H0, S0 }
        *(_WORD *)(*(void *)(a1 + 16) + 1176) = _S0;
      }
      if (sub_1004D11B0(a4, "OverridesMotionCuesCooldownInterval", (float *)&v24))
      {
        if (qword_102419660 != -1) {
          dispatch_once(&qword_102419660, &stru_1022B5C98);
        }
        __int16 v16 = qword_102419668;
        if (os_log_type_enabled((os_log_t)qword_102419668, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t buf = 134217984;
          double v28 = *(float *)&v24;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "[CLMotionCuesService] MA-OTA, OverridesMotionCuesCooldownInterval config available, value %f", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419660 != -1) {
            dispatch_once(&qword_102419660, &stru_1022B5C98);
          }
          int v25 = 134217984;
          double v26 = *(float *)&v24;
          float v21 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCuesService::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v21);
          if (v21 != (char *)buf) {
            free(v21);
          }
        }
        *(double *)(*(void *)(a1 + 16) + 288) = *(float *)&v24;
      }
      if (sub_1004D11B0(a4, "OverridesMotionCuesSessionTimeout", &v23))
      {
        if (qword_102419660 != -1) {
          dispatch_once(&qword_102419660, &stru_1022B5C98);
        }
        int v17 = qword_102419668;
        if (os_log_type_enabled((os_log_t)qword_102419668, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t buf = 134217984;
          double v28 = v23;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "[CLMotionCuesService] MA-OTA, OverridesMotionCuesSessionTimeout config available, value %f", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419660 != -1) {
            dispatch_once(&qword_102419660, &stru_1022B5C98);
          }
          int v25 = 134217984;
          double v26 = v23;
          __int16 v22 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCuesService::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v22);
          if (v22 != (char *)buf) {
            free(v22);
          }
        }
        double result = v23;
        *(double *)(*(void *)(a1 + 16) + 296) = v23;
      }
    }
  }
  return result;
}

uint64_t sub_1004B8F78(uint64_t a1)
{
  return sub_1004B859C(*(void *)(a1 + 32));
}

void sub_1004B8F80(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1004B8FB0(id a1)
{
  qword_102419668 = (uint64_t)os_log_create("com.apple.locationd.Motion", "MotionCues");
}

uint64_t *sub_1004B8FE0(uint64_t **a1, uint64_t *a2)
{
  double result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1004B850C(result);
    operator delete();
  }
  return result;
}

uint64_t sub_1004B9030(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a3 + 48) + 48))(*(void *)(a3 + 48));
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void, unsigned char *, double))(**(void **)(a3 + 48) + 24))(*(void *)(a3 + 48), v6, a1);
    if (v6[208]) {
      return sub_1004B9658(*(void *)(a3 + 56), *(double *)(*(void *)(a3 + 56) + 104), *(double *)(*(void *)(a3 + 56) + 112));
    }
  }
  return result;
}

uint64_t sub_1004B9100(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)(a2 + 56) + 48))();
}

void sub_1004B9128(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 912);
  uint64_t v5 = *(void *)(a1 + 928);
  uint64_t v25 = *(void *)(a1 + 944);
  uint64_t v26 = *(void *)(a1 + 920);
  uint64_t v6 = *(int *)(a1 + 972);
  int v7 = *(_DWORD *)(a1 + 976);
  float v8 = *(float *)(a1 + 984);
  float v9 = *(float *)(a1 + 988);
  float v10 = v8 * flt_101D21388[v6];
  if (v8 >= 0.0833)
  {
    float v14 = (float)*(unsigned int *)(a1 + 1352);
    switch((int)v6)
    {
      case 2:
        double v15 = v14 * -1.44 + v10 * 2.06;
        double v16 = 7.77;
        break;
      case 3:
        double v15 = v14 * -0.62 + v10 * 5.5;
        double v16 = 4.44;
        break;
      case 4:
        double v15 = v14 * -1.44 + v10 * 2.06;
        double v16 = 8.77;
        break;
      default:
        double v15 = v14 * -0.61 + v10 * 2.0;
        double v16 = 6.59;
        break;
    }
    double v11 = v15 + v16;
    if (v9 >= 0.0)
    {
      if (v9 <= 20.0)
      {
        int v13 = 0;
        float v12 = 1.4;
      }
      else
      {
        int v13 = 0;
        if (v9 <= 80.0) {
          float v12 = (float)(v9 * -0.0033) + 1.466;
        }
        else {
          float v12 = 1.2;
        }
      }
    }
    else
    {
      int v13 = 0;
      float v12 = 1.3;
    }
  }
  else
  {
    double v11 = 2.0999999;
    if (v6 == 6) {
      double v11 = 6.0;
    }
    float v12 = 1.0;
    int v13 = 3;
  }
  float v17 = v11;
  if (qword_102419000 != -1) {
    dispatch_once(&qword_102419000, &stru_1022B5D08);
  }
  float v18 = v12 * v17;
  uint64_t v19 = qword_102419008;
  if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v20 = *(void *)(a1 + 120);
    uint64_t v21 = *(void *)(a1 + 128);
    *(_DWORD *)uint64_t buf = 134221312;
    uint64_t v28 = v20;
    __int16 v29 = 2048;
    uint64_t v30 = v21;
    __int16 v31 = 1024;
    int v32 = v7;
    __int16 v33 = 1024;
    int v34 = v6;
    __int16 v35 = 2048;
    double v36 = v17;
    __int16 v37 = 2048;
    uint64_t v38 = v5;
    __int16 v39 = 2048;
    double v40 = v10;
    __int16 v41 = 1024;
    int v42 = v13;
    __int16 v43 = 2048;
    double v44 = v8;
    __int16 v45 = 2048;
    uint64_t v46 = v4;
    __int16 v47 = 2048;
    uint64_t v48 = v26;
    __int16 v49 = 2048;
    uint64_t v50 = v25;
    __int16 v51 = 2048;
    double v52 = v18;
    __int16 v53 = 2048;
    double v54 = v9;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "startTime,%f,endTime,%f,numberOfStrokes,%d,strokeType,%d,epochMets,%f,timestamp,%f,speed,%f,metSource,%d,strokeRate,%f,entryStartTime,%f,entryEndTime,%f,distance,%f,scaledMets,%f,historicalTurnsPerSession,%f", buf, 0x82u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_1022B5D08);
    }
    uint64_t v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLMetsInfo CLCalorieSwimmingModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v24);
    if (v24 != (char *)buf) {
      free(v24);
    }
  }
  if (v8 < 0.0833)
  {
    uint64_t v22 = sub_1001A58C0();
    sub_101432740(v22);
  }
  uint64_t v23 = sub_1001A58C0();
  sub_101432034(v23, v6);
  *(_DWORD *)a2 = 0;
  *(float *)(a2 + 4) = v17;
  *(_DWORD *)(a2 + 8) = 0;
  *(float *)(a2 + 12) = v17;
  *(_DWORD *)(a2 + 16) = 0;
  *(float *)(a2 + 20) = v18;
  *(_DWORD *)(a2 + 24) = v13;
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a2 + 32) = 0xB00000003;
}

void sub_1004B9628(id a1)
{
  qword_102419008 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

BOOL sub_1004B9658(uint64_t a1, double a2, double a3)
{
  if (*(unsigned char *)(a1 + 80))
  {
    BOOL result = 1;
  }
  else if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1))
  {
    *(double *)(a1 + 72) = a2;
    BOOL result = 1;
    *(unsigned char *)(a1 + 80) = 1;
    *(unsigned char *)(a1 + 120) = 0;
  }
  else
  {
    BOOL result = *(unsigned char *)(a1 + 80) != 0;
  }
  double v7 = a2 + a3;
  if (*(double *)(a1 + 88) >= a2 + a3) {
    double v7 = *(double *)(a1 + 88);
  }
  *(double *)(a1 + 88) = v7;
  return result;
}

uint64_t sub_1004B9AB4(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    uint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        LODWORD(v6) = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v6) = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((unsigned __int16)(v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 32) |= 2u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_56;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_58;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_56:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_58:
        uint64_t v36 = 16;
        goto LABEL_67;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 32) |= 4u;
        while (2)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v21 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_62;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_62:
        uint64_t v36 = 20;
        goto LABEL_67;
      case 3u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 32) |= 8u;
        while (2)
        {
          unint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v24 == -1 || v24 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v25 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
            v14 |= (unint64_t)(v25 & 0x7F) << v22;
            if (v25 < 0)
            {
              v22 += 7;
              BOOL v9 = v23++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_66;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_66:
        uint64_t v36 = 24;
LABEL_67:
        *(_DWORD *)(a1 + v36) = v14;
        continue;
      case 4u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v28 = 0;
        *(unsigned char *)(a1 + 32) |= 0x10u;
        while (2)
        {
          unint64_t v29 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v29 == -1 || v29 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v30 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 1;
            v28 |= (unint64_t)(v30 & 0x7F) << v26;
            if (v30 < 0)
            {
              v26 += 7;
              BOOL v9 = v27++ >= 9;
              if (v9)
              {
                uint64_t v28 = 0;
                goto LABEL_71;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v28 = 0;
        }
LABEL_71:
        *(unsigned char *)(a1 + 28) = v28 != 0;
        continue;
      case 5u:
        char v31 = 0;
        unsigned int v32 = 0;
        uint64_t v33 = 0;
        *(unsigned char *)(a1 + 32) |= 1u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      unint64_t v34 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v34 == -1 || v34 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v35 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34 + 1;
      v33 |= (unint64_t)(v35 & 0x7F) << v31;
      if ((v35 & 0x80) == 0) {
        goto LABEL_73;
      }
      v31 += 7;
      BOOL v9 = v32++ >= 9;
      if (v9)
      {
        uint64_t v33 = 0;
        goto LABEL_75;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_73:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v33 = 0;
    }
LABEL_75:
    *(void *)(a1 + 8) = v33;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

const char *sub_1004BA554(unsigned int a1)
{
  if (a1 > 5) {
    return "NONE";
  }
  else {
    return off_1022B5D28[a1];
  }
}

uint64_t sub_1004BA578()
{
  uint64_t v0 = sub_10013D1F4();

  return sub_100AFCCE4(v0);
}

BOOL sub_1004BA5A0()
{
  uint64_t v0 = sub_10013D1F4();
  return sub_100AFD95C(v0);
}

uint64_t sub_1004BA5BC()
{
  uint64_t v0 = sub_10013D1F4();

  return sub_100AFD9DC(v0);
}

uint64_t sub_1004BA5E4(const char *a1, uint64_t a2, int a3, uint64_t a4, const char *a5, char *a6, ...)
{
  va_start(va, a6);
  uint64_t v12 = sub_10013D1F4();
  if (a3) {
    uint64_t result = sub_100AFB904(v12, a1, a2, a4, a5, a6, va);
  }
  else {
    uint64_t result = sub_100AFB4E4(v12, a1, a2, a4, a5, a6, va);
  }
  if (off_10247AD30) {
    return off_10247AD30(qword_10247AD28, a1, a2, a4, a5, a6, va);
  }
  return result;
}

uint64_t sub_1004BA69C()
{
  if (qword_10247AD38 != -1) {
    dispatch_once(&qword_10247AD38, &stru_1022B5E58);
  }
  return dword_10241BCA0;
}

void sub_1004BA6E0(id a1)
{
  int v3 = 0;
  if (sub_1000A6958())
  {
    uint64_t v1 = sub_1000A6958();
    if (sub_10006EF84(v1, "gpsUtcLeapSeconds", &v3))
    {
      if (v3 >= 1)
      {
        int v2 = 18 - v3;
        if (v3 >= 0x12) {
          int v2 = v3 - 18;
        }
        if (v2 <= 19) {
          dword_10241BCA0 = v3;
        }
      }
    }
  }
}

BOOL sub_1004BA750(BOOL result)
{
  int v3 = result;
  if ((int)result >= 1)
  {
    int v1 = 18 - result;
    if (result >= 0x12) {
      int v1 = result - 18;
    }
    if (v1 <= 19)
    {
      uint64_t v2 = sub_1000A6958();
      uint64_t result = sub_1000EA838(v2, "gpsUtcLeapSeconds", &v3);
      dword_10241BCA0 = v3;
    }
  }
  return result;
}

void sub_1004BA7B0(CFTypeRef cf)
{
  if (!qword_10247AD40) {
    goto LABEL_16;
  }
  if ((CFTypeRef)qword_10247AD40 == cf)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B5E98);
    }
    char v4 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning Setting CLCommon's runloop after it was already established", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B5E98);
      }
      int v3 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCommonSetRunLoop(CFRunLoopRef)", "%s\n");
      goto LABEL_33;
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B5E98);
    }
    uint64_t v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "Changing CLCommon's runloop after it was already established", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B5E98);
      }
      int v3 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCommonSetRunLoop(CFRunLoopRef)", "%s\n");
LABEL_33:
      if (v3 != buf) {
        free(v3);
      }
    }
  }
LABEL_16:
  if (cf) {
    CFRetain(cf);
  }
  if (qword_10247AD40) {
    CFRelease((CFTypeRef)qword_10247AD40);
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022B5E98);
  }
  unsigned int v5 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 134217984;
    CFTypeRef v8 = cf;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLCommonSetRunLoop, %p", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B5E98);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCommonSetRunLoop(CFRunLoopRef)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  qword_10247AD40 = (uint64_t)cf;
}

BOOL sub_1004BABCC(double a1, double a2, double a3)
{
  return vabdd_f64(a1, a2) < a3;
}

BOOL sub_1004BABDC(double a1, double a2, double a3, double a4, double a5)
{
  BOOL v5 = vabdd_f64(a1, a3) < a5;
  return vabdd_f64(a2, a4) < a5 && v5;
}

double sub_1004BABF8(double a1)
{
  return a1 * 57.2957795;
}

void sub_1004BAC08(long double a1, long double a2)
{
}

uint64_t sub_1004BAC98(const std::string *a1, unsigned __int8 a2, uint64_t *a3)
{
  sub_1004BAEC8(v13, a1, 24);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v12 = 0;
  while (1)
  {
    BOOL v5 = sub_10044F5DC(v13, (uint64_t)__p, a2);
    if ((*((unsigned char *)v5 + *(void *)(*v5 - 24) + 32) & 5) != 0) {
      break;
    }
    unint64_t v6 = a3[1];
    if (v6 >= a3[2])
    {
      uint64_t v8 = sub_1016FD368(a3, (long long *)__p);
    }
    else
    {
      if (SHIBYTE(v12) < 0)
      {
        sub_1000DC48C((unsigned char *)a3[1], __p[0], (unint64_t)__p[1]);
      }
      else
      {
        long long v7 = *(_OWORD *)__p;
        *(void *)(v6 + 16) = v12;
        *(_OWORD *)unint64_t v6 = v7;
      }
      uint64_t v8 = v6 + 24;
      a3[1] = v6 + 24;
    }
    a3[1] = v8;
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  *(void (__cdecl ***)(std::basic_stringstream<char> *__hidden))((char *)v13
  double v13[2] = v9;
  if (v14 < 0) {
    operator delete(v13[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1004BAE98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  *(void *)(v15 + 8) = v16;
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void (__cdecl ***sub_1004BAEC8(void (__cdecl ***a1)(std::basic_stringstream<char> *__hidden this), const std::string *a2, int a3))(std::basic_stringstream<char> *__hidden this)
{
  unint64_t v6 = a1 + 2;
  uint64_t v7 = (uint64_t)(a1 + 3);
  *a1 = v9;
  *(void *)((char *)*(v9 - 3) + (void)a1) = v8;
  a1[1] = 0;
  int v10 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  std::ios_base::init(v10, a1 + 3);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  a1[2] = v12;
  *(void *)((char *)*(v12 - 3) + (void)v6) = v11;
  *a1 = v13;
  sub_100450D4C(v7, a2, a3);
  return a1;
}

void sub_1004BB164(_Unwind_Exception *a1)
{
}

double sub_1004BB18C(double a1, double a2)
{
  double v2 = vabdd_f64(a1, a2);
  if (v2 > 180.0)
  {
    if (a1 >= 180.0) {
      a1 = 360.0 - a1;
    }
    if (a2 >= 180.0) {
      a2 = 360.0 - a2;
    }
    return a1 + a2;
  }
  return v2;
}

double sub_1004BB1CC(double a1, double a2)
{
  double result = a1 + a2;
  double v3 = 360.0;
  if (result >= 360.0)
  {
    double v3 = -360.0;
    return result + v3;
  }
  if (result < 0.0) {
    return result + v3;
  }
  return result;
}

uint64_t sub_1004BB1FC(const char *a1)
{
  double v2 = getpwnam("mobile");
  if (v2)
  {
    uid_t pw_uid = v2->pw_uid;
    gid_t pw_gid = v2->pw_gid;
  }
  else
  {
    uid_t pw_uid = 501;
    gid_t pw_gid = 501;
  }

  return lchown(a1, pw_uid, pw_gid);
}

uint64_t sub_1004BB250(unsigned char *a1, uid_t a2, gid_t a3)
{
  bzero(v11, 0x400uLL);
  int v6 = *a1;
  if (!*a1) {
    return 1;
  }
  unint64_t v7 = 0;
  uint64_t v8 = a1 + 1;
  while (1)
  {
    v11[v7] = v6;
    if (v6 != 47 || !stat(v11, &v10)) {
      goto LABEL_7;
    }
    if (mkdir(v11, 0x1FFu)) {
      return 0;
    }
    lchown(v11, a2, a3);
    lchmod(v11, 0x1C0u);
LABEL_7:
    uint64_t result = 1;
    if (v7 <= 0x3FD)
    {
      int v6 = v8[v7++];
      if (v6) {
        continue;
      }
    }
    return result;
  }
}

uint64_t sub_1004BB34C(const char *a1, uid_t a2, gid_t a3, mode_t a4)
{
  lchown(a1, a2, a3);

  return lchmod(a1, a4);
}

BOOL sub_1004BB38C(const char *a1)
{
  return unlink(a1) == 0;
}

BOOL sub_1004BB3AC(const char *a1)
{
  return rmdir(a1) == 0;
}

BOOL sub_1004BB3CC(const std::__fs::filesystem::path *a1, const std::__fs::filesystem::path *a2, std::error_code *a3)
{
  rename(a1, a2, a3);
  return v3 == 0;
}

uint64_t sub_1004BB3EC(const char *a1, const char *a2)
{
  char v4 = malloc_type_malloc(0x400uLL, 0x93D02233uLL);
  if (!v4) {
    goto LABEL_30;
  }
  BOOL v5 = fopen(a1, "rb");
  if (!v5)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B5E98);
    }
    uint64_t v12 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      int v13 = *__error();
      *(_DWORD *)uint64_t buf = 136446466;
      char v22 = a1;
      __int16 v23 = 1026;
      int v24 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "cannot open source file: %{public}s, errno %{public}d", buf, 0x12u);
    }
    uint64_t v11 = 0;
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_38;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B5E98);
    }
    __error();
    char v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "int CLCommonCopyFile(const char *, const char *)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
LABEL_30:
    uint64_t v11 = 0;
    goto LABEL_38;
  }
  int v6 = v5;
  unint64_t v7 = fopen(a2, "wb");
  if (!v7)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B5E98);
    }
    uint64_t v15 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      int v16 = *__error();
      *(_DWORD *)uint64_t buf = 136446466;
      char v22 = a2;
      __int16 v23 = 1026;
      int v24 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "cannot open target file: %{public}s, errno %{public}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B5E98);
      }
      __error();
      unsigned int v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "int CLCommonCopyFile(const char *, const char *)", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    fclose(v6);
    goto LABEL_30;
  }
  uint64_t v8 = v7;
  while (1)
  {
    if (feof(v6))
    {
      uint64_t v11 = 1;
      goto LABEL_37;
    }
    size_t v9 = fread(v4, 1uLL, 0x400uLL, v6);
    if (v9 == -1) {
      break;
    }
    if (v9 != fwrite(v4, 1uLL, v9, v8))
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B5E98);
      }
      stat v10 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 136446210;
        char v22 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "error writing target file: %{public}s", buf, 0xCu);
      }
      uint64_t v11 = 0;
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 == -1) {
          goto LABEL_44;
        }
LABEL_47:
        dispatch_once(&qword_102419630, &stru_1022B5E98);
LABEL_44:
        unint64_t v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "int CLCommonCopyFile(const char *, const char *)", "%s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
        uint64_t v11 = 0;
        goto LABEL_37;
      }
      goto LABEL_37;
    }
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022B5E98);
  }
  float v17 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)uint64_t buf = 136446210;
    char v22 = a1;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "error reading source file: %{public}s", buf, 0xCu);
  }
  uint64_t v11 = 0;
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      goto LABEL_47;
    }
    goto LABEL_44;
  }
LABEL_37:
  fclose(v6);
  fclose(v8);
LABEL_38:
  free(v4);
  return v11;
}

uint64_t sub_1004BBA54(const char *a1, const char *a2)
{
  int bzerror = 0;
  char v4 = malloc_type_malloc(0x400uLL, 0x72AACFCCuLL);
  if (!v4) {
    goto LABEL_37;
  }
  BOOL v5 = fopen(a1, "rb");
  if (!v5)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B5E98);
    }
    char v14 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      int v15 = *__error();
      *(_DWORD *)uint64_t buf = 136446466;
      uint64_t v33 = a1;
      __int16 v34 = 1026;
      int v35 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "cannot open source file: %{public}s, errno %{public}d", buf, 0x12u);
    }
    uint64_t v11 = 0;
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_38;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B5E98);
    }
    int v16 = *__error();
    int v28 = 136446466;
    unint64_t v29 = a1;
    __int16 v30 = 1026;
    int v31 = v16;
    float v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "int CLCommonBzipFile(const char *, const char *)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
LABEL_37:
    uint64_t v11 = 0;
    goto LABEL_38;
  }
  int v6 = v5;
  unint64_t v7 = fopen(a2, "wb");
  if (!v7)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B5E98);
    }
    char v18 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      int v19 = *__error();
      *(_DWORD *)uint64_t buf = 136446466;
      uint64_t v33 = a1;
      __int16 v34 = 1026;
      int v35 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "cannot open target file: %{public}s, errno %{public}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B5E98);
      }
      int v24 = *__error();
      int v28 = 136446466;
      unint64_t v29 = a1;
      __int16 v30 = 1026;
      int v31 = v24;
      char v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "int CLCommonBzipFile(const char *, const char *)", "%s\n", v25);
      if (v25 != (char *)buf) {
        free(v25);
      }
    }
    fclose(v6);
    goto LABEL_37;
  }
  uint64_t v8 = v7;
  size_t v9 = BZ2_bzWriteOpen(&bzerror, v7, 1, 0, 0);
  if (bzerror)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B5E98);
    }
    stat v10 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 136446466;
      uint64_t v33 = a2;
      __int16 v34 = 1026;
      int v35 = bzerror;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "cannot open compression stream: %{public}s, bzerror %{public}d", buf, 0x12u);
    }
    uint64_t v11 = 0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
LABEL_67:
      }
        dispatch_once(&qword_102419630, &stru_1022B5E98);
LABEL_55:
      int v28 = 136446466;
      unint64_t v29 = a2;
      __int16 v30 = 1026;
      int v31 = bzerror;
LABEL_56:
      __int16 v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "int CLCommonBzipFile(const char *, const char *)", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
      uint64_t v11 = 0;
    }
  }
  else
  {
    while (1)
    {
      if (feof(v6))
      {
        uint64_t v11 = 1;
        goto LABEL_10;
      }
      size_t v13 = fread(v4, 1uLL, 0x400uLL, v6);
      if (v13 == -1) {
        break;
      }
      BZ2_bzWrite(&bzerror, v9, v4, v13);
      if (bzerror)
      {
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022B5E98);
        }
        char v22 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)uint64_t buf = 136446466;
          uint64_t v33 = a2;
          __int16 v34 = 1026;
          int v35 = bzerror;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "error writing target file: %{public}s, bzerror: %{public}d", buf, 0x12u);
        }
        uint64_t v11 = 0;
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_10;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          goto LABEL_67;
        }
        goto LABEL_55;
      }
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B5E98);
    }
    char v21 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 136446210;
      uint64_t v33 = a1;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "error reading source file: %{public}s", buf, 0xCu);
    }
    uint64_t v11 = 0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B5E98);
      }
      int v28 = 136446210;
      unint64_t v29 = a1;
      goto LABEL_56;
    }
  }
LABEL_10:
  fclose(v6);
  if (v9)
  {
    BZ2_bzWriteClose(&bzerror, v9, 0, 0, 0);
    if (bzerror)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B5E98);
      }
      uint64_t v12 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 136446466;
        uint64_t v33 = a2;
        __int16 v34 = 1026;
        int v35 = bzerror;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "error closing target file: %{public}s, bzerror: %{public}d", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022B5E98);
        }
        int v28 = 136446466;
        unint64_t v29 = a2;
        __int16 v30 = 1026;
        int v31 = bzerror;
        char v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "int CLCommonBzipFile(const char *, const char *)", "%s\n", v26);
        if (v26 != (char *)buf) {
          free(v26);
        }
      }
    }
  }
  fclose(v8);
LABEL_38:
  free(v4);
  return v11;
}

FILE *sub_1004BC384(const char *a1)
{
  uint64_t result = fopen(a1, "rb");
  if (result)
  {
    double v2 = result;
    fseek(result, 0, 2);
    uint64_t v3 = ftell(v2);
    fclose(v2);
    return (FILE *)v3;
  }
  return result;
}

BOOL sub_1004BC3D8(const char *a1, const char *a2)
{
  sub_1000E1294((uint64_t *)v39, (uint64_t)[+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"decompress:%@", [+[NSString stringWithUTF8String:a2] lastPathComponent]) UTF8String], 0);
  uint64_t v37 = 0;
  off_t v38 = 0;
  uint64_t v3 = malloc_type_malloc(0x4000uLL, 0x75D93B42uLL);
  if (!v3)
  {
    BOOL v11 = 0;
    unsigned int v9 = 0;
    int v7 = 0;
    goto LABEL_56;
  }
  if (!sub_1004BD11C(a1, (double *)&v37, 0, 0, &v38))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B5E98);
    }
    char v18 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 136446210;
      uint64_t v48 = a1;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "CLCommonGzipDecompressFile, can't stat, %{public}s", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_37;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B5E98);
    }
    int v40 = 136446210;
    __int16 v41 = a1;
    int v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCommonGzipDecompressFile(const char *, const char *)", "%s\n", v19);
    goto LABEL_79;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022B5E98);
  }
  char v4 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 136316162;
    uint64_t v48 = a1;
    __int16 v49 = 2080;
    *(void *)uint64_t v50 = a2;
    *(_WORD *)&v50[8] = 2048;
    *(void *)&v50[10] = v38;
    *(_WORD *)&v50[18] = 2048;
    *(void *)&v50[20] = v37;
    *(_WORD *)&v50[28] = 1024;
    *(_DWORD *)__int16 v51 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLCommonGzipDecompressFile, from, %s, to, %s, size, %llu, cTime, %.1lf, isOK, %d", buf, 0x30u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B5E98);
    }
    int v40 = 136316162;
    __int16 v41 = a1;
    __int16 v42 = 2080;
    *(void *)__int16 v43 = a2;
    *(_WORD *)&v43[8] = 2048;
    *(void *)&v43[10] = v38;
    *(_WORD *)&v43[18] = 2048;
    *(void *)&v43[20] = v37;
    *(_WORD *)&v43[28] = 1024;
    *(_DWORD *)double v44 = 0;
    unsigned int v32 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCommonGzipDecompressFile(const char *, const char *)", "%s\n", v32);
    if (v32 != (char *)buf) {
      free(v32);
    }
  }
  BOOL v5 = fopen(a2, "wb");
  if (v5)
  {
    int v6 = gzopen(a1, "rb");
    if (v6)
    {
      int v7 = 0;
      unsigned int v8 = 0;
      do
      {
        unsigned int v9 = v8;
        int v10 = gzeof(v6);
        BOOL v11 = v10 != 0;
        if (v10) {
          goto LABEL_53;
        }
        int v12 = gzread(v6, v3, 0x4000u);
        if (v12 <= 0)
        {
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_1022B5E98);
          }
          int v24 = qword_102419638;
          if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
          {
            int v25 = *__error();
            *(_DWORD *)uint64_t buf = 136446722;
            uint64_t v48 = a1;
            __int16 v49 = 1026;
            *(_DWORD *)uint64_t v50 = v25;
            *(_WORD *)&v50[4] = 1026;
            *(_DWORD *)&v50[6] = v12;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "CLCommonGzipDecompressFile, error reading source file: %{public}s, errno, %{public}d, read, %{public}d", buf, 0x18u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419630 != -1) {
              dispatch_once(&qword_102419630, &stru_1022B5E98);
            }
            int v26 = *__error();
            int v40 = 136446722;
            __int16 v41 = a1;
            __int16 v42 = 1026;
            *(_DWORD *)__int16 v43 = v26;
            *(_WORD *)&v43[4] = 1026;
            *(_DWORD *)&v43[6] = v12;
            float v17 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCommonGzipDecompressFile(const char *, const char *)", "%s\n", v17);
            if (v17 != (char *)buf) {
              goto LABEL_52;
            }
          }
          goto LABEL_53;
        }
        size_t v13 = fwrite(v3, 1uLL, v12, v5);
        v7 += v12;
        unsigned int v8 = v9 + v13;
      }
      while (v13 == v12);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B5E98);
      }
      char v14 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        int v15 = *__error();
        *(_DWORD *)uint64_t buf = 136446722;
        uint64_t v48 = a2;
        __int16 v49 = 1026;
        *(_DWORD *)uint64_t v50 = v15;
        *(_WORD *)&v50[4] = 2050;
        *(void *)&v50[6] = v13;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "CLCommonGzipDecompressFile, can't write, %{public}s, errno, %{public}d, write, %{public}zu", buf, 0x1Cu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022B5E98);
        }
        int v16 = *__error();
        int v40 = 136446722;
        __int16 v41 = a2;
        __int16 v42 = 1026;
        *(_DWORD *)__int16 v43 = v16;
        *(_WORD *)&v43[4] = 2050;
        *(void *)&v43[6] = v13;
        float v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCommonGzipDecompressFile(const char *, const char *)", "%s\n", v17);
        if (v17 != (char *)buf) {
LABEL_52:
        }
          free(v17);
      }
LABEL_53:
      gzclose(v6);
    }
    else
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B5E98);
      }
      char v22 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        int v23 = *__error();
        *(_DWORD *)uint64_t buf = 136446466;
        uint64_t v48 = a1;
        __int16 v49 = 1026;
        *(_DWORD *)uint64_t v50 = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "CLCommonGzipDecompressFile, can't open, file_path_from, %{public}s, errno, %{public}d", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022B5E98);
        }
        int v34 = *__error();
        int v40 = 136446466;
        __int16 v41 = a1;
        __int16 v42 = 1026;
        *(_DWORD *)__int16 v43 = v34;
        int v35 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCommonGzipDecompressFile(const char *, const char *)", "%s\n", v35);
        if (v35 != (char *)buf) {
          free(v35);
        }
      }
      int v7 = 0;
      unsigned int v9 = 0;
      BOOL v11 = 0;
    }
    fclose(v5);
    goto LABEL_55;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022B5E98);
  }
  unint64_t v20 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    int v21 = *__error();
    *(_DWORD *)uint64_t buf = 136446466;
    uint64_t v48 = a2;
    __int16 v49 = 1026;
    *(_DWORD *)uint64_t v50 = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "CLCommonGzipDecompressFile, can't open, file_path_to, %{public}s, errno %{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B5E98);
    }
    int v33 = *__error();
    int v40 = 136446466;
    __int16 v41 = a2;
    __int16 v42 = 1026;
    *(_DWORD *)__int16 v43 = v33;
    int v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCommonGzipDecompressFile(const char *, const char *)", "%s\n", v19);
LABEL_79:
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
LABEL_37:
  BOOL v11 = 0;
  unsigned int v9 = 0;
  int v7 = 0;
LABEL_55:
  free(v3);
LABEL_56:
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022B5E98);
  }
  unsigned int v27 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    if (v9) {
      double v28 = (double)v38 / (double)v9;
    }
    else {
      double v28 = 0.0;
    }
    *(_DWORD *)uint64_t buf = 136316674;
    uint64_t v48 = a1;
    __int16 v49 = 2080;
    *(void *)uint64_t v50 = a2;
    *(_WORD *)&v50[8] = 1024;
    *(_DWORD *)&v50[10] = v11;
    *(_WORD *)&v50[14] = 2048;
    *(void *)&v50[16] = v38;
    *(_WORD *)&v50[24] = 1024;
    *(_DWORD *)&v50[26] = v7;
    *(_WORD *)__int16 v51 = 1024;
    *(_DWORD *)&v51[2] = v9;
    __int16 v52 = 2048;
    double v53 = v28;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "CLCommonGzipDecompressFile, from, %s, to, %s, isOK, %d, fileSize, %llu, totalReadBytes, %u, totalWrittenBytes, %u, compression, %.4lf", buf, 0x3Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B5E98);
    }
    if (v9) {
      double v30 = (double)v38 / (double)v9;
    }
    else {
      double v30 = 0.0;
    }
    int v40 = 136316674;
    __int16 v41 = a1;
    __int16 v42 = 2080;
    *(void *)__int16 v43 = a2;
    *(_WORD *)&v43[8] = 1024;
    *(_DWORD *)&v43[10] = v11;
    *(_WORD *)&v43[14] = 2048;
    *(void *)&v43[16] = v38;
    *(_WORD *)&v43[24] = 1024;
    *(_DWORD *)&v43[26] = v7;
    *(_WORD *)double v44 = 1024;
    *(_DWORD *)&v44[2] = v9;
    __int16 v45 = 2048;
    double v46 = v30;
    int v31 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCommonGzipDecompressFile(const char *, const char *)", "%s\n", v31);
    if (v31 != (char *)buf) {
      free(v31);
    }
  }
  sub_1000E1098(v39);
  return v11;
}

void sub_1004BD0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

BOOL sub_1004BD11C(const char *a1, double *a2, double *a3, double *a4, off_t *a5)
{
  memset(&v14, 0, sizeof(v14));
  int v10 = stat(a1, &v14);
  if (v10)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B5E98);
    }
    BOOL v11 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 136315394;
      unint64_t v20 = a1;
      __int16 v21 = 1024;
      int v22 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning CLCommonGetFileTimestamps, failed to stat file, %s, ret, %d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B5E98);
      }
      int v15 = 136315394;
      int v16 = a1;
      __int16 v17 = 1024;
      int v18 = v10;
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCommonGetFileTimestamps(const char *, CFAbsoluteTime *, CFAbsoluteTime *, CFAbsoluteTime *, off_t *)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  else
  {
    if (a2) {
      *a2 = (double)(v14.st_ctimespec.tv_sec - (uint64_t)kCFAbsoluteTimeIntervalSince1970);
    }
    if (a3) {
      *a3 = (double)(v14.st_mtimespec.tv_sec - (uint64_t)kCFAbsoluteTimeIntervalSince1970);
    }
    if (a4) {
      *a4 = (double)(v14.st_atimespec.tv_sec - (uint64_t)kCFAbsoluteTimeIntervalSince1970);
    }
    if (a5) {
      *a5 = v14.st_size;
    }
  }
  return v10 == 0;
}

uint64_t sub_1004BD394(const char *a1, const char *a2)
{
  sub_1000E1294((uint64_t *)v6, (uint64_t)[+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"compress:%@", [+[NSString stringWithUTF8String:a2] lastPathComponent]) UTF8String], 0);
  uint64_t v4 = sub_1004BBA54(a1, a2);
  sub_1000E1098(v6);
  return v4;
}

void sub_1004BD424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004BD438(const __CFString *a1, double *a2)
{
  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr)
  {
    BOOL v5 = 0;
LABEL_3:
    if (strptime(CStringPtr, "%a, %d %b %Y %T %Z", &usedBufLen))
    {
      time_t v6 = mktime(&usedBufLen);
      if (v6 != -1)
      {
        *a2 = (double)v6 - kCFAbsoluteTimeIntervalSince1970;
        uint64_t v7 = 1;
        if (!v5) {
          return v7;
        }
        goto LABEL_13;
      }
    }
    goto LABEL_12;
  }
  *(void *)&usedBufLen.tm_sec = 0;
  v10.length = CFStringGetLength(a1);
  v10.location = 0;
  CFStringGetBytes(a1, v10, 0x8000100u, 0, 0, 0, 0, (CFIndex *)&usedBufLen.tm_sec);
  if (!*(void *)&usedBufLen.tm_sec)
  {
    BOOL v5 = 0;
    goto LABEL_12;
  }
  ++*(void *)&usedBufLen.tm_sec;
  BOOL v5 = (char *)malloc_type_malloc(*(size_t *)&usedBufLen.tm_sec, 0x4162A72uLL);
  if (v5 && CFStringGetCString(a1, v5, *(CFIndex *)&usedBufLen.tm_sec, 0x8000100u))
  {
    CStringPtr = v5;
    goto LABEL_3;
  }
LABEL_12:
  uint64_t v7 = 0;
  if (v5) {
LABEL_13:
  }
    free(v5);
  return v7;
}

uint64_t sub_1004BD564(const __CFDictionary *a1, double *a2, double *a3)
{
  uint64_t result = (uint64_t)CFDictionaryGetValue(a1, @"Date");
  if (result)
  {
    uint64_t result = sub_1004BD438((const __CFString *)result, a3);
    if (result)
    {
      if (*a2 >= 0.0) {
        double v6 = *a2 * 0.5;
      }
      else {
        double v6 = 0.0;
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B5E98);
      }
      uint64_t v7 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        double v8 = *a3;
        double v9 = v6 + *a3;
        double v10 = *a2;
        *(_DWORD *)uint64_t buf = 134218752;
        double v13 = v8;
        __int16 v14 = 2048;
        double v15 = v9;
        __int16 v16 = 2048;
        double v17 = v10;
        __int16 v18 = 2048;
        double v19 = CFAbsoluteTimeGetCurrent() - v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "http date string is converted to timestamp %.3f and adjusted to %.3f by %.3fs RTT (%.3fs diff from systime)", buf, 0x2Au);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022B5E98);
        }
        CFAbsoluteTimeGetCurrent();
        BOOL v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "int CLCommonGetTimeFromHttpHeaderAndRtt(CFDictionaryRef, const CFTimeInterval *, CFAbsoluteTime *)", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
      return 1;
    }
  }
  return result;
}

CFStringRef sub_1004BD7D8(CFDictionaryRef formatOptions, CFAbsoluteTime a2)
{
  if (!formatOptions) {
    return CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%.3f", *(void *)&a2);
  }

  return CFDateFormatterCreateStringWithAbsoluteTime(kCFAllocatorDefault, formatOptions, a2);
}

CFStringRef sub_1004BD834(CFAbsoluteTime a1)
{
  if (!qword_10247AD48)
  {
    CFLocaleRef v2 = CFLocaleCreate(kCFAllocatorDefault, @"en_US");
    if (v2)
    {
      CFLocaleRef v3 = v2;
      qword_10247AD48 = (uint64_t)CFDateFormatterCreate(kCFAllocatorDefault, v2, kCFDateFormatterLongStyle, kCFDateFormatterLongStyle);
      CFRelease(v3);
    }
  }
  CFDictionaryRef v4 = (const __CFDictionary *)qword_10247AD48;

  return sub_1004BD7D8(v4, a1);
}

double sub_1004BD8CC(int *a1, _DWORD *a2, double a3)
{
  if (qword_10247AD38 != -1) {
    dispatch_once(&qword_10247AD38, &stru_1022B5E58);
  }
  double v6 = a3 + 662342400.0 + (double)dword_10241BCA0;
  int v7 = (int)(v6 / 604800.0);
  *a1 = v7;
  double result = (v6 - (double)(604800 * v7)) * 1000.0;
  *a2 = (int)result;
  return result;
}

double sub_1004BD97C()
{
  time_t v0 = qword_10247AD50;
  if (!qword_10247AD50)
  {
    memset(&v2, 0, sizeof(v2));
    if (!strptime("Nov 21 2024 21:19:22", "%b %d %Y %H:%M:%S", &v2)) {
      return 0.0;
    }
    time_t v0 = mktime(&v2);
    qword_10247AD50 = v0;
  }
  double result = (double)v0 - kCFAbsoluteTimeIntervalSince1970;
  if (v0 <= 0) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1004BDA0C()
{
  return ((sub_1004BD97C() + -259200.0 + 662342400.0) / 604800.0);
}

BOOL sub_1004BDA4C(int a1, unsigned int a2)
{
  double v4 = sub_1004BD97C() + -259200.0;
  return sub_1004BDA9C(a1, a2) < v4;
}

double sub_1004BDA9C(int a1, unsigned int a2)
{
  if (qword_10247AD38 != -1) {
    dispatch_once(&qword_10247AD38, &stru_1022B5E58);
  }
  return (double)a2 / 1000.0 + (double)(604800 * a1) + -662342400.0 - (double)dword_10241BCA0;
}

double sub_1004BDB28(unint64_t a1)
{
  return sub_1004BDA9C(a1 / 0x240C8400, a1 % 0x240C8400);
}

void sub_1004BDB54(double *a1, double *a2, double a3, double a4, double a5, double a6, double a7)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247AD80, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10247AD80))
  {
    sub_101171D90((uint64_t)dbl_10247AD58);
    __cxa_guard_release(&qword_10247AD80);
  }

  sub_1011720D0(dbl_10247AD58, a1, a2, a3, a4, 0.0, a5, a6, a7);
}

void sub_1004BDC18(_Unwind_Exception *a1)
{
}

long double sub_1004BDC30(double a1, double a2, double a3, double a4)
{
  long double v4 = atan2(a1 - a3, a4 - a2);
  return fmod(v4 + 4.71238898, 6.28318531) * 57.2957795;
}

BOOL sub_1004BDC74(double a1)
{
  return a1 >= -90.0 && a1 <= 90.0;
}

BOOL sub_1004BDC98(double a1)
{
  return a1 >= -180.0 && a1 <= 180.0;
}

BOOL sub_1004BDCBC(double a1)
{
  return a1 > 0.0;
}

double sub_1004BDCC8(double *a1, double *a2, double a3, double a4, double a5, double a6)
{
  double v8 = a4 * 0.0174532925;
  double v9 = a5 * 0.0174532925;
  double v10 = a6 / 6378137.0;
  __double2 v11 = __sincos_stret(a3 * 0.0174532925);
  __double2 v12 = __sincos_stret(v10);
  __double2 v13 = __sincos_stret(v9);
  long double v14 = asin(v13.__cosval * (v11.__cosval * v12.__sinval) + v11.__sinval * v12.__cosval);
  long double v15 = sin(v14);
  long double v16 = atan2(v11.__cosval * (v13.__sinval * v12.__sinval), v12.__cosval - v11.__sinval * v15);
  *a1 = v14 / 0.0174532925;
  double result = (v8 + v16) / 0.0174532925;
  *a2 = result;
  return result;
}

void sub_1004BDD98(double *a1, double *a2, double *a3, double *a4, double a5, double a6, double a7)
{
  if (a1 && a2 && a3)
  {
    if (a4)
    {
      double v16 = 0.0;
      sub_1004BDCC8(&v16, &v17, a5, a6, 0.0, a7);
      double v14 = vabdd_f64(v16, a5);
      sub_1004BDCC8(&v17, &v16, a5, a6, 90.0, a7);
      double v15 = vabdd_f64(v16, a6);
      *a1 = a5 - v14;
      *a3 = v14 + a5;
      *a2 = a6 - v15;
      *a4 = v15 + a6;
    }
  }
}

uint64_t sub_1004BDE6C(const __CFString *a1, const __CFString *a2, unsigned char *a3)
{
  if (a3) {
    *a3 = 0;
  }
  CFPropertyListRef v4 = CFPreferencesCopyValue(a1, a2, @"mobile", kCFPreferencesAnyHost);
  if (!v4) {
    return 0;
  }
  BOOL v5 = v4;
  CFTypeID v6 = CFGetTypeID(v4);
  if (v6 == CFBooleanGetTypeID())
  {
    if (a3) {
      *a3 = 1;
    }
    uint64_t v7 = CFEqual(v5, kCFBooleanTrue);
  }
  else if (v6 == CFNumberGetTypeID() && !CFNumberIsFloatType((CFNumberRef)v5))
  {
    if (a3) {
      *a3 = 1;
    }
    int valuePtr = 0;
    CFNumberGetValue((CFNumberRef)v5, kCFNumberIntType, &valuePtr);
    uint64_t v7 = valuePtr != 0;
  }
  else
  {
    uint64_t v7 = 0;
  }
  CFRelease(v5);
  return v7;
}

uint64_t sub_1004BDF60(uint64_t result)
{
  byte_102489F78 = result;
  return result;
}

void sub_1004BDF6C()
{
  os_unfair_lock_lock((os_unfair_lock_t)&unk_10247AD88);
  char v3 = 0;
  int v0 = sub_1004BDE6C(@"LocationServicesEnabledIn8.0", @"com.apple.locationd", &v3);
  if (v3) {
    BOOL v1 = v0 == 0;
  }
  else {
    BOOL v1 = 1;
  }
  int v2 = !v1;
  dword_10241BCA4 = v2;
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_10247AD88);
}

void sub_1004BDFDC(_Unwind_Exception *a1)
{
}

BOOL sub_1004BDFF8()
{
  char v3 = 0;
  int v0 = sub_1004BDE6C(@"AuthorizationPromptMapDisplayEnabled", @"com.apple.locationd", &v3);
  if (v3) {
    BOOL v1 = v0 == 0;
  }
  else {
    BOOL v1 = 0;
  }
  return !v1;
}

BOOL sub_1004BE040()
{
  unsigned __int8 v4 = 0;
  int v0 = sub_1004BDE6C(@"GpsNetworkCtrl", @"com.apple.locationd", &v4);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022B5E98);
  }
  BOOL v1 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109376;
    int v10 = v0;
    __int16 v11 = 1024;
    int v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "GPS_NETWORK: enabled %d found %d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B5E98);
    }
    int v5 = 67109376;
    int v6 = v0;
    __int16 v7 = 1024;
    int v8 = v4;
    char v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCommonIsGpsNetworkTestMode()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  return v0 != 0;
}

double sub_1004BE230()
{
  int v13 = 0;
  size_t v12 = 4;
  if ((byte_10247AD98 & 1) == 0)
  {
    if (sysctlnametomib("kern.monotonicclock", dword_10247AD9C, (size_t *)&dword_10241BCA8))
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B5E98);
      }
      int v0 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Error occurred, no mib to monotonic clock conversion", buf, 2u);
      }
      double v1 = -1.0;
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022B5E98);
        }
        LOWORD(v14) = 0;
LABEL_21:
        int v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "double CLCommonGetKernelMonotonicClock()", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
        return v1;
      }
      return v1;
    }
    byte_10247AD98 = 1;
  }
  if (!sysctl(dword_10247AD9C, dword_10241BCA8, &v13, &v12, 0, 0))
  {
    LODWORD(v2) = v13;
    return (double)v2 + 0.5;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022B5E98);
  }
  char v3 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    int v4 = *__error();
    int v5 = __error();
    int v6 = strerror(*v5);
    *(_DWORD *)uint64_t buf = 67240450;
    int v19 = v4;
    __int16 v20 = 2082;
    __int16 v21 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Error occurred %{public}d %{public}s", buf, 0x12u);
  }
  double v1 = -1.0;
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B5E98);
    }
    int v7 = *__error();
    int v8 = __error();
    double v9 = strerror(*v8);
    int v14 = 67240450;
    int v15 = v7;
    __int16 v16 = 2082;
    double v17 = v9;
    goto LABEL_21;
  }
  return v1;
}

BOOL sub_1004BE590(const char *a1, double *a2)
{
  int v3 = stat(a1, &v5);
  if (a2 && !v3) {
    *a2 = (double)v5.st_mtimespec.tv_nsec / 1000000000.0
  }
        + (double)v5.st_mtimespec.tv_sec
        - kCFAbsoluteTimeIntervalSince1970;
  return v3 == 0;
}

void sub_1004BE600(FILE *a1)
{
  uint32_t v2 = _dyld_image_count();
  uint64_t v3 = v2;
  unint64_t v29 = (unint64_t *)malloc_type_calloc(v2, 0x38uLL, 0x105004076241286uLL);
  if (v2 && v29)
  {
    uint32_t v4 = 0;
    do
    {
      image_name = _dyld_get_image_name(v4);
      size_t v6 = (size_t)&image_name[strlen(image_name) + 1];
      do
      {
        int v7 = *(unsigned __int8 *)(v6 - 2);
        --v6;
      }
      while (v7 != 47);
      image_header = _dyld_get_image_header(v4);
      double v9 = image_header;
      int v10 = *(const mach_header **)&image_header->cputype;
      uint32_t ncmds = image_header->ncmds;
      if (ncmds)
      {
        size_t v12 = 0;
        p_cputype = &image_header[1].cputype;
        do
        {
          if (*p_cputype == 1)
          {
            if (!strncmp((const char *)p_cputype + 8, "__TEXT", 6uLL)) {
              size_t v12 = (const mach_header *)((char *)v12 + p_cputype[7]);
            }
          }
          else if (*p_cputype == 27)
          {
            v30[0] = *(_OWORD *)(p_cputype + 2);
          }
          p_cputype = (int32_t *)((char *)p_cputype + p_cputype[1]);
          --ncmds;
        }
        while (ncmds);
      }
      else
      {
        size_t v12 = 0;
      }
      uint64_t v14 = 0;
      int v15 = v29;
      while (1)
      {
        unint64_t v17 = *v15;
        v15 += 7;
        unint64_t v16 = v17;
        if (v17 >= (unint64_t)v9 || v16 == 0) {
          break;
        }
        if (v3 == ++v14)
        {
          uint64_t v14 = v3;
          int v19 = v3;
          goto LABEL_24;
        }
      }
      int v19 = v14;
LABEL_24:
      __int16 v20 = (const mach_header **)&v29[7 * v14];
      memmove(v20 + 7, v20, 56 * (v3 + ~v19));
      *__int16 v20 = v9;
      v20[1] = v12;
      *((_OWORD *)v20 + 1) = v30[0];
      v20[4] = (const mach_header *)image_name;
      v20[5] = (const mach_header *)v6;
      v20[6] = v10;
      ++v4;
    }
    while (v4 != v3);
  }
  fwrite("Binary Images:\n", 0xFuLL, 1uLL, a1);
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      int v22 = (char *)&v29[7 * i];
      long long v23 = *((_OWORD *)v22 + 1);
      v30[0] = *(_OWORD *)v22;
      v30[1] = v23;
      long long v31 = *((_OWORD *)v22 + 2);
      uint64_t v32 = *((void *)v22 + 6);
      int v24 = "other";
      if (v32 != 16777228)
      {
        int v25 = "unknown";
        if (HIDWORD(v32) == 9) {
          int v25 = "armv7";
        }
        int v24 = "armv6";
        if (HIDWORD(v32) != 6) {
          int v24 = v25;
        }
      }
      double v28 = v24;
      if (i) {
        uint64_t v26 = 32;
      }
      else {
        uint64_t v26 = 43;
      }
      fprintf(a1, "%16p - %lld %c%s %s <", *(const void **)&v30[0], (void)((v30[0] + __PAIR128__(-1, 0)) >> 64), v26, *((const char **)&v31 + 1), v28);
      for (uint64_t j = 16; j != 32; ++j)
        fprintf(a1, "%02X", *((unsigned __int8 *)v30 + j));
      fprintf(a1, "> %s\n", (const char *)v31);
    }
  }

  free(v29);
}

uint64_t sub_1004BE904(unint64_t a1)
{
  return byte_101D214A4[a1 >> 4]
       + byte_101D214A4[(a1 >> 8) & 0xF]
       + byte_101D214A4[(unsigned __int16)a1 >> 12]
       + byte_101D214A4[a1 & 0xF]
       + byte_101D214A4[(a1 >> 16) & 0xF]
       + byte_101D214A4[(a1 >> 20) & 0xF]
       + byte_101D214A4[(a1 >> 24) & 0xF]
       + byte_101D214A4[(unint64_t)a1 >> 28];
}

CFTypeRef sub_1004BE970(CFStringRef filePath, const __CFString *a2)
{
  if (!filePath) {
    return 0;
  }
  CFURLRef v3 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, filePath, kCFURLPOSIXPathStyle, 1u);
  if (!v3) {
    return 0;
  }
  CFURLRef v4 = v3;
  Unique = (__CFBundle *)_CFBundleCreateUnique();
  if (Unique)
  {
    size_t v6 = Unique;
    CFTypeRef ValueForInfoDictionaryKey = CFBundleGetValueForInfoDictionaryKey(Unique, a2);
    CFTypeRef v8 = ValueForInfoDictionaryKey;
    if (ValueForInfoDictionaryKey) {
      CFRetain(ValueForInfoDictionaryKey);
    }
    CFRelease(v6);
  }
  else
  {
    CFTypeRef v8 = 0;
  }
  CFRelease(v4);
  return v8;
}

uint64_t sub_1004BEA14()
{
  uint64_t v0 = sub_1001020E0();

  return sub_10110EFB0(v0);
}

uint64_t sub_1004BEA3C(uint64_t a1, long long *a2, unint64_t a3)
{
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = a1 + 16;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (a3)
  {
    sub_1000DA584((void *)a1, a3);
    *(void *)(a1 + 8) = sub_1000DC3CC(v4, a2, (long long *)((char *)a2 + 24 * a3), *(char **)(a1 + 8));
  }
  return a1;
}

void sub_1004BEABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1000A7B4C(&a9);
  _Unwind_Resume(a1);
}

void **sub_1004BEADC(void **a1)
{
  CFURLRef v3 = a1;
  sub_1000A7B4C(&v3);
  return a1;
}

void sub_1004BEB14(const char *a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022B5E98);
  }
  uint32_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 136315138;
    size_t v12 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TILE: delete file, %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B5E98);
    }
    v10.st_dev = 136315138;
    *(void *)&v10.st_mode = a1;
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCommonDeleteFileIfExists(const char *)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  memset(&v10, 0, sizeof(v10));
  int v3 = stat(a1, &v10);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022B5E98);
  }
  uint64_t v4 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 136316162;
    size_t v12 = a1;
    __int16 v13 = 1024;
    int v14 = v3;
    __int16 v15 = 2048;
    __darwin_time_t tv_sec = v10.st_mtimespec.tv_sec;
    __int16 v17 = 2048;
    __darwin_time_t v18 = v10.st_ctimespec.tv_sec;
    __int16 v19 = 2048;
    st_std::string::size_type size = v10.st_size;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TILE: stat, %s, ret, %d, mtime, %lu, ctime, %lu, size, %lld", buf, 0x30u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B5E98);
    }
    CFTypeRef v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCommonDeleteFileIfExists(const char *)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if (!v3)
  {
    int v5 = unlink(a1);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B5E98);
    }
    size_t v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 136315394;
      size_t v12 = a1;
      __int16 v13 = 1024;
      int v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "TILE: unlink, %s, ret, %d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B5E98);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCommonDeleteFileIfExists(const char *)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
}

BOOL sub_1004BF004(const char *a1, uint64_t a2)
{
  if (!a1)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022B5EB8);
    }
    int v7 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "CLCommonSetFileProtectionClass,sFilename==nullptr", buf, 2u);
    }
    BOOL v8 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (!v8) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022B5EB8);
    }
LABEL_20:
    __int16 v13 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLCommonSetFileProtectionClass(const char *, int)", "%s\n");
LABEL_21:
    if (v13 != buf) {
      free(v13);
    }
    return 0;
  }
  int v4 = open(a1, 2);
  if (v4 < 0)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022B5EB8);
    }
    stat v10 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      int v11 = *__error();
      *(_DWORD *)uint64_t buf = 67240192;
      LODWORD(v20) = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "CLCommonSetFileProtectionClass,open,errno,%{public}d", buf, 8u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (!v12) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022B5EB8);
    }
    __error();
    goto LABEL_20;
  }
  int v5 = v4;
  int v6 = fcntl(v4, 63);
  if (v6 == a2)
  {
    close(v5);
LABEL_33:
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022B5EB8);
    }
    __int16 v17 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 136315906;
      __int16 v20 = a1;
      __int16 v21 = 1026;
      int v22 = v6;
      __int16 v23 = 1026;
      int v24 = a2;
      __int16 v25 = 1026;
      int v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CLCommonSetFileProtectionClass,%s,oldPc,%{public}d,newPc,%{public}d,ret,%{public}d", buf, 0x1Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022B5EB8);
      }
      __darwin_time_t v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCommonSetFileProtectionClass(const char *, int)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    return 1;
  }
  int v14 = fcntl(v5, 64, a2);
  close(v5);
  if (!v14) {
    goto LABEL_33;
  }
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022B5EB8);
  }
  __int16 v15 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_INFO))
  {
    int v16 = *__error();
    *(_DWORD *)uint64_t buf = 136316162;
    __int16 v20 = a1;
    __int16 v21 = 1026;
    int v22 = v6;
    __int16 v23 = 1026;
    int v24 = a2;
    __int16 v25 = 1026;
    int v26 = v14;
    __int16 v27 = 1026;
    int v28 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "#Warning,CLCommonSetFileProtectionClass,%s,oldPc,%{public}d,newPc,%{public}d,ret,%{public}d,errno,%{public}d", buf, 0x24u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022B5EB8);
    }
    __error();
    __int16 v13 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCommonSetFileProtectionClass(const char *, int)", "%s\n");
    goto LABEL_21;
  }
  return result;
}

BOOL sub_1004BF638(void *a1)
{
  memset(uu, 0, sizeof(uu));
  return uuid_parse((const char *)[a1 UTF8String], uu) == 0;
}

double sub_1004BF698(int a1, int a2, int a3)
{
  if (a3 >= a1) {
    int v3 = a1;
  }
  else {
    int v3 = a3;
  }
  double v4 = pow((double)a2, (double)(v3 & ~(v3 >> 31)));
  return v4 + (double)rand() / 2147483650.0 * v4;
}

const char *sub_1004BF6E8(unsigned int a1)
{
  if (a1 > 8) {
    return "UNKNOWN";
  }
  else {
    return off_1022B5ED8[a1];
  }
}

double sub_1004BF70C(double a1)
{
  if (a1 < 0.0) {
    return 180.0;
  }
  double v1 = 1.0;
  if (a1 <= 15.0)
  {
    double v1 = 4.0;
    if (a1 <= 10.0)
    {
      double v1 = 10.0;
      if (a1 <= 8.0)
      {
        double v1 = 15.0;
        if (a1 <= 5.0)
        {
          if (a1 <= 3.0)
          {
            double v1 = 25.0;
            if (a1 <= 2.5) {
              return dbl_101D21460[a1 > 1.0];
            }
          }
          else
          {
            return 19.9;
          }
        }
      }
    }
  }
  return v1;
}

id sub_1004BF7A8(void *a1)
{
  id v1 = [a1 objectForInfoDictionaryKey:@"NSWidgetWantsLocation"];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return [v1 BOOLValue];
}

std::string *sub_1004BF838(int a1, std::string *this, unsigned __int8 *a3, uint64_t a4)
{
  if ((unint64_t)(a4 - 0x7FFFFFFFFFFFFFFFLL) > 0x8000000000000001)
  {
    uint64_t v5 = a4;
    std::string::resize(this, 2 * a4, 48);
    if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v7 = this;
    }
    else {
      int v7 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    BOOL v8 = &v7->__r_.__value_.__s.__data_[1];
    do
    {
      unsigned int v9 = *a3++;
      *BOOL v8 = a0123456789abcd_0[v9 & 0xF];
      *(v8 - 1) = a0123456789abcd_0[(unint64_t)v9 >> 4];
      v8 += 2;
      --v5;
    }
    while (v5);
  }
  else if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((unsigned char *)&this->__r_.__value_.__s + 23) = 0;
  }
  return this;
}

void sub_1004BF8F4(int a1@<W0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  memset(&__p, 0, sizeof(__p));
  sub_1004BF838(a1, &__p, a2, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_1000DC48C(a4, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a4 = __p;
  }
}

void sub_1004BF96C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004BF988(int a1@<W0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
}

unint64_t *sub_1004BF998(int a1, unint64_t *a2, unsigned __int8 *a3)
{
  unint64_t v5 = a3[23];
  if ((v5 & 0x80u) != 0) {
    unint64_t v5 = *((void *)a3 + 1);
  }
  unint64_t v6 = v5 >> 1;
  unint64_t v8 = *a2;
  unint64_t v7 = a2[1];
  unint64_t v9 = v7 - *a2;
  if (v6 <= v9)
  {
    if (v6 < v9)
    {
      unint64_t v7 = v8 + v6;
      a2[1] = v8 + v6;
    }
  }
  else
  {
    sub_1004BFB3C(a2, v6 - v9);
    unint64_t v8 = *a2;
    unint64_t v7 = a2[1];
  }
  uint64_t v10 = a3[23];
  int v11 = (char)v10;
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *((void *)a3 + 1);
  }
  if (v10 >= 1 && v8 < v7)
  {
    __int16 v13 = *(unsigned __int8 **)a3;
    if (v11 >= 0) {
      __int16 v13 = a3;
    }
    unint64_t v14 = v8 + 1;
    do
    {
      int v15 = *v13;
      if ((v15 - 65) >= 6) {
        char v16 = 0;
      }
      else {
        char v16 = -55;
      }
      if ((v15 - 97) >= 6) {
        char v17 = v16;
      }
      else {
        char v17 = -87;
      }
      if ((v15 - 48) >= 0xA) {
        char v18 = v17;
      }
      else {
        char v18 = -48;
      }
      char v19 = 16 * (v18 + v15);
      *(unsigned char *)(v14 - 1) = v19;
      int v20 = v13[1];
      if ((v20 - 65) >= 6) {
        char v21 = 0;
      }
      else {
        char v21 = -55;
      }
      if ((v20 - 97) >= 6) {
        char v22 = v21;
      }
      else {
        char v22 = -87;
      }
      if ((v20 - 48) >= 0xA) {
        char v23 = v22;
      }
      else {
        char v23 = -48;
      }
      *(unsigned char *)(v14 - 1) = (v23 + v20) | v19;
      uint64_t v24 = a3[23];
      if ((v24 & 0x80u) == 0) {
        __int16 v25 = a3;
      }
      else {
        __int16 v25 = *(unsigned __int8 **)a3;
      }
      if ((v24 & 0x80u) != 0) {
        uint64_t v24 = *((void *)a3 + 1);
      }
      v13 += 2;
    }
    while (v13 < &v25[v24] && v14++ < a2[1]);
  }
  return a2;
}

void sub_1004BFADC(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1004BFB0C(id a1)
{
  qword_102419608 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

void sub_1004BFB3C(unint64_t *a1, size_t a2)
{
  unint64_t v5 = (char *)a1[1];
  double v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    unint64_t v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      sub_1001D7FD4();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    BOOL v12 = &v7[v11];
    __int16 v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      unint64_t v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      unint64_t v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

double sub_1004BFC78@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 3;
  *(_DWORD *)(a2 + 32) = 3;
  float v3 = sub_101284E98(*(_DWORD *)(a1 + 152));
  *(float *)(a2 + 20) = v3;
  *(_DWORD *)(a2 + 24) = 3;
  *(float *)(a2 + 28) = v3;
  *(void *)&double result = 3;
  *(void *)(a2 + 32) = 3;
  return result;
}

void *sub_1004BFCC8(void *a1, int a2)
{
  sub_100134750(__p, "");
  sub_1004BFDD8((uint64_t)a1, "ActiveConfig", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_1022B5FA8;
  a1[9] = off_1022B6058;
  sub_100F03BA0(a1 + 53, 0, 0);
  (*(void (**)(void *))(*a1 + 112))(a1);
  return a1;
}

void sub_1004BFDAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004BFDD8(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  BOOL v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022B2C20;
  sub_1003BDF2C((void *)(a1 + 8));
  *BOOL v12 = &off_1022B2C68;
  *(void *)a1 = off_1022B6298;
  *(void *)(a1 + 72) = off_1022B6340;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_1022B6298;
  *(void *)(a1 + 72) = off_1022B6340;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 240) = 0;
  sub_100134750((void *)(a1 + 248), "");
  sub_100134750((void *)(a1 + 272), "");
  sub_100134750((void *)(a1 + 296), "");
  sub_100134750((void *)(a1 + 320), "");
  *(_DWORD *)(a1 + 344) = 12000;
  *(void *)(a1 + 352) = off_1022B2C20;
  sub_1003BDF2C((void *)(a1 + 360));
  *(void *)(a1 + 360) = &off_1022B2C68;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_1004C0244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  *a11 = v30;
  sub_1003BE1F8(v31);
  sub_1004C0A34(v29);
  sub_1004C5260(v28);
  sub_1011F8AE0(v27);
  *__int16 v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_1004C0334()
{
}

uint64_t sub_1004C033C(uint64_t a1)
{
  *(void *)a1 = off_1022B6298;
  uint64_t v2 = a1 + 72;
  *(void *)(a1 + 72) = off_1022B6340;
  *(void *)(a1 + 352) = off_1022B2C20;
  sub_1003BE1F8((void *)(a1 + 360));
  if (*(char *)(a1 + 343) < 0) {
    operator delete(*(void **)(a1 + 320));
  }
  if (*(char *)(a1 + 319) < 0) {
    operator delete(*(void **)(a1 + 296));
  }
  if (*(char *)(a1 + 295) < 0) {
    operator delete(*(void **)(a1 + 272));
  }
  if (*(char *)(a1 + 271) < 0) {
    operator delete(*(void **)(a1 + 248));
  }
  sub_1004C5260((void *)(a1 + 176));
  sub_1011F8AE0(v2);
  *(void *)a1 = off_1022B2C20;
  sub_1003BE1F8((void *)(a1 + 8));
  return a1;
}

uint64_t sub_1004C0440(uint64_t a1)
{
  return sub_1004C033C(a1 - 72);
}

void sub_1004C0448(uint64_t a1)
{
  sub_1004C033C(a1);

  operator delete();
}

void sub_1004C0480(uint64_t a1)
{
  sub_1004C033C(a1 - 72);

  operator delete();
}

uint64_t sub_1004C04BC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 120))(a1, a2, 0);
}

uint64_t sub_1004C04E4(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM ActiveConfig WHERE bundleIdentifier = ?");
  }
  return result;
}

void sub_1004C0744(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004C0788(uint64_t a1, uint64_t *a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    uint64_t v6 = *a2;
    uint64_t v5 = a2[1];
    if (v5 != *a2)
    {
      do
      {
        v5 -= 120;
        sub_1004C53A8((uint64_t)(a2 + 2), v5);
      }
      while (v5 != v6);
    }
    a2[1] = v6;
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * from ActiveConfig");
  }
  return result;
}

void sub_1004C0930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_1004C0A34((uint64_t)&a9);
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1004C09D4(uint64_t *a1, uint64_t a2)
{
  double v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1;
  }
  if (v5 != 100) {
    return 2;
  }
  sub_1004C0D78(a1, a2);
  return 0;
}

uint64_t sub_1004C0A34(uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

uint64_t sub_1004C0A98(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1 + 112;
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v6 = a1 + 72;
  v12[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  __int16 v13 = 256;
  if (sub_100082064(v6))
  {
    sub_100082068((void *)(a1 + 424), v12);
    if (v12[0])
    {
      sub_1004C09D4(v12, a2);
      uint64_t v7 = 100;
    }
    else
    {
      if (qword_102419280 != -1) {
        dispatch_once(&qword_102419280, &stru_1022B60E8);
      }
      unint64_t v8 = qword_102419288;
      if (os_log_type_enabled((os_log_t)qword_102419288, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "ActiveConfigRecorderDb: failed to prepare queryForBestFit #InvalidPreparedSQLStatement", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419280 != -1) {
          dispatch_once(&qword_102419280, &stru_1022B60E8);
        }
        unint64_t v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CMError CLActiveConfigRecorderDb::queryForBestFitConfig(ConfigSummary &) const", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
      uint64_t v7 = 112;
    }
    uint64_t v9 = v12[0];
    v12[0] = 0;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
  }
  else
  {
    uint64_t v7 = 109;
  }
  (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  return v7;
}

void sub_1004C0D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if (a6) {
    (*(void (**)(uint64_t))(*(void *)a6 + 8))(a6);
  }
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *sub_1004C0D6C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_1004C0D78(a2, a3);
}

std::string *sub_1004C0D78(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(void *)a2 = sqlite3_column_int(v4, 0);
  uint64_t v5 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v5, 1);
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 16) = sqlite3_column_int(v6, 2);
  uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(*a1);
  unint64_t v8 = sqlite3_column_text(v7, 3);
  std::string::assign((std::string *)(a2 + 24), (const std::string::value_type *)v8);
  uint64_t v9 = (sqlite3_stmt *)sub_10014D19C(*a1);
  size_t v10 = sqlite3_column_text(v9, 4);
  std::string::assign((std::string *)(a2 + 48), (const std::string::value_type *)v10);
  unint64_t v11 = (sqlite3_stmt *)sub_10014D19C(*a1);
  BOOL v12 = sqlite3_column_text(v11, 5);
  std::string::assign((std::string *)(a2 + 72), (const std::string::value_type *)v12);
  __int16 v13 = (sqlite3_stmt *)sub_10014D19C(*a1);
  unint64_t v14 = sqlite3_column_text(v13, 6);

  return std::string::assign((std::string *)(a2 + 96), (const std::string::value_type *)v14);
}

BOOL sub_1004C0E58(uint64_t a1)
{
  BOOL result = sub_10014C3C0(*(void *)(a1 + 80));
  if (result)
  {
    sub_1004C0F6C(a1);
    sub_1005F7B0C(*(void *)(a1 + 80), "ActiveConfig", (const char **)&off_1022B6108, (const std::string::value_type **)&off_10241BCB0, 0);
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"CREATE UNIQUE INDEX IF NOT EXISTS ix_ActiveConfig_studyId ON ActiveConfig(studyId)");
  }
  return result;
}

void sub_1004C0F30(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004C0F6C(uint64_t a1)
{
  uint64_t result = sub_1005F93E4(*(void *)(a1 + 80), "ActiveConfig");
  if (result)
  {
    float v3 = "startTime";
    int v4 = 5;
    __int16 v5 = 0;
    char v6 = 0;
    char v7 = 0;
    sub_1005FEC4C(*(void *)(a1 + 80), "ActiveConfig", (uint64_t)"startTime", (uint64_t)&v3);
  }
  return result;
}

void sub_1004C1464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a23);
  if (v61) {
    (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
  }
  sub_101A129A8((uint64_t)&a61);
  _Unwind_Resume(a1);
}

uint64_t sub_1004C150C(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM ActiveConfig");
  }
  return result;
}

void sub_1004C15BC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004C15D4(uint64_t a1)
{
  return sub_1004C150C(a1 - 72);
}

uint64_t sub_1004C15DC(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"REPLACE INTO ActiveConfig (startTime, priority, configId, bundleIdentifier, studyId, parameterDictionary) VALUES (?, ?, ?, ?, ?, ?)");
  }
  return result;
}

void sub_1004C1744(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004C175C(uint64_t a1, void *a2)
{
  if (!sub_1005F9734(*(void *)(a1 + 80), (char *)a2))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022B6380);
    }
    int v4 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B6380);
      }
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      int v20 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<ConfigSummary>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = ConfigSummary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", (const char *)v20);
      if (v20 != buf) {
        free(v20);
      }
    }
    memset(__p, 0, 24);
    sub_100134750(buf, (char *)a2);
    __int16 v5 = std::string::append(buf, "AutoIncr");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    int64_t v22 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)char v21 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_100134750(buf, (char *)a2);
    char v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_10002B640(*(void *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0) {
      size_t v8 = HIBYTE(__p[2]);
    }
    else {
      size_t v8 = (size_t)__p[1];
    }
    uint64_t v9 = buf;
    sub_1001110E4((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0) {
        size_t v10 = __p;
      }
      else {
        size_t v10 = (void **)__p[0];
      }
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v22 >= 0) {
      unint64_t v11 = v21;
    }
    else {
      unint64_t v11 = (void **)v21[0];
    }
    if (v22 >= 0) {
      std::string::size_type v12 = HIBYTE(v22);
    }
    else {
      std::string::size_type v12 = (std::string::size_type)v21[1];
    }
    __int16 v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    unint64_t v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v23.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    char v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = v14;
    __p[1] = v23.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v23.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      char v15 = HIBYTE(__p[2]);
      unint64_t v14 = __p[0];
    }
    if (v15 >= 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)v14;
    }
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)v16);
  }
  uint64_t v17 = *(void *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0) {
    uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v18 = *(void *)(v17 + 88);
  }
  sub_10003CC68(v17, v18);
  return 0;
}

void sub_1004C2988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1004C2CE8(void *a1)
{
  float v3 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17[0]) < 0)
  {
    size_t v10 = v16[1];
    operator delete(v16[0]);
    if (v10)
    {
LABEL_3:
      if (sub_100082064(a1 + 9))
      {
        sub_10010F274((uint64_t)v16);
        int v4 = sub_100132EFC(v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0) {
          __int16 v5 = __p;
        }
        else {
          __int16 v5 = (void **)__p[0];
        }
        if ((v14 & 0x80u) == 0) {
          uint64_t v6 = v14;
        }
        else {
          uint64_t v6 = (uint64_t)__p[1];
        }
        char v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
        sub_100132EFC(v7, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v8 = a1[10];
        std::stringbuf::str();
        if ((v14 & 0x80u) == 0) {
          uint64_t v9 = __p;
        }
        else {
          uint64_t v9 = (void **)__p[0];
        }
        sub_10014D518(v8, (uint64_t)v9);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17[0]))
  {
    goto LABEL_3;
  }
  sub_101A61E58(v3);
  uint64_t v15 = 0;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  *(void **)((char *)v16
  v17[0] = v11;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return 2;
}

void sub_1004C30D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
  }
  sub_101A129A8((uint64_t)&a38);
  _Unwind_Resume(a1);
}

uint64_t sub_1004C31B0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_1004C5980(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022B6380);
  }
  __int16 v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)__int16 v13 = 0;
    *(_WORD *)&v13[4] = 2082;
    *(void *)&v13[6] = "";
    __int16 v14 = 2082;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022B6380);
    }
    char v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)__int16 v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B6380);
      }
      size_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<ConfigSummary>::setDatabaseAccessible() [T = ConfigSummary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_1004C39B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *sub_1004C39EC(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v5 = *a3;
  *(_DWORD *)(a2 + 16) = *((_DWORD *)a3 + 4);
  *(_OWORD *)a2 = v5;
  std::string::operator=((std::string *)(a2 + 24), (const std::string *)a3 + 1);
  std::string::operator=((std::string *)(a2 + 48), (const std::string *)a3 + 2);
  std::string::operator=((std::string *)(a2 + 72), (const std::string *)a3 + 3);

  return std::string::operator=((std::string *)(a2 + 96), (const std::string *)a3 + 4);
}

id *sub_1004C3A5C(uint64_t *a1, long long *a2, char a3)
{
  v39[0] = (id)os_transaction_create();
  v39[1] = 0;
  if (*((double *)a1 + 29) <= 0.0
    || !(*(unsigned int (**)(uint64_t *, uint64_t *, long long *))(*a1 + 136))(a1, a1 + 28, a2))
  {
    if ((a3 & 1) == 0) {
      sub_10002B640(a1[10]);
    }
    uint64_t v28 = 0;
    double v29 = 0.0;
    int v30 = 0;
    sub_100134750(&v31, "");
    sub_100134750(&v33, "");
    sub_100134750(&v35, "");
    sub_100134750(&__p, "");
    int v6 = (*(uint64_t (**)(uint64_t *, uint64_t *))(*a1 + 104))(a1, &v28);
    if (v6 != 1)
    {
      if (v6)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022B6380);
        }
        __int16 v14 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022B6380);
          }
          LOWORD(v40) = 0;
          uint64_t v15 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<ConfigSummary>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = ConfigSummary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v15);
          if (v15 != (char *)buf) {
            free(v15);
          }
        }
LABEL_43:
        if (v38 < 0) {
          operator delete(__p);
        }
        if (v36 < 0) {
          operator delete(v35);
        }
        if (v34 < 0) {
          operator delete(v33);
        }
        if (v32 < 0)
        {
          operator delete(v31);
          if (a3) {
            return sub_1000E1098(v39);
          }
        }
        else if (a3)
        {
          return sub_1000E1098(v39);
        }
        sub_100028FB4(a1[10]);
        return sub_1000E1098(v39);
      }
      double v7 = *((double *)a2 + 1);
      double v8 = v29;
      double v9 = v7 - v29;
      if (v7 - v29 < 0.0) {
        double v9 = -(v7 - v29);
      }
      if (v9 > 604800.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022B6380);
        }
        size_t v10 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v11 = *((void *)a2 + 1);
          *(_DWORD *)uint64_t buf = 134349312;
          double v45 = v29;
          __int16 v46 = 2050;
          uint64_t v47 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022B6380);
          }
          uint64_t v22 = *((void *)a2 + 1);
          int v40 = 134349312;
          double v41 = v29;
          __int16 v42 = 2050;
          uint64_t v43 = v22;
          std::string v23 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<ConfigSummary>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = ConfigSummary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v23);
          if (v23 != (char *)buf) {
            free(v23);
          }
        }
        CLWriteStackshot();
        double v7 = *((double *)a2 + 1);
        double v8 = v29;
      }
      if (v7 < v8)
      {
        if (v8 - v7 < 10.0)
        {
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022B6380);
          }
          std::string::size_type v12 = qword_102418FD8;
          if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
          {
            double v13 = *((double *)a2 + 1);
            *(_DWORD *)uint64_t buf = 134217984;
            double v45 = v13;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102418FD0 != -1) {
              dispatch_once(&qword_102418FD0, &stru_1022B6380);
            }
            double v24 = *((double *)a2 + 1);
            int v40 = 134217984;
            double v41 = v24;
            __int16 v25 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<ConfigSummary>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = ConfigSummary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v25);
            if (v25 != (char *)buf) {
              free(v25);
            }
          }
          (*(void (**)(uint64_t *, long long *))(*a1 + 88))(a1, a2);
          goto LABEL_42;
        }
        double v16 = v7 - v8;
        double v17 = *((float *)a1 + 34);
        if (qword_102418FD0 != -1)
        {
          double v27 = *((float *)a1 + 34);
          dispatch_once(&qword_102418FD0, &stru_1022B6380);
          double v17 = v27;
        }
        double v18 = v16 - v17;
        char v19 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t buf = 134217984;
          double v45 = v18;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022B6380);
          }
          int v40 = 134217984;
          double v41 = v18;
          int v26 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<ConfigSummary>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = ConfigSummary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v26);
          if (v26 != (char *)buf) {
            free(v26);
          }
        }
        (*(void (**)(uint64_t *, double))(*a1 + 96))(a1, v18);
      }
      (*(void (**)(uint64_t *, uint64_t *, uint64_t *, long long *))(*a1 + 144))(a1, &v28, a1 + 28, a2);
    }
    (*(void (**)(uint64_t *, long long *, uint64_t))(*a1 + 120))(a1, a2, 1);
LABEL_42:
    long long v20 = *a2;
    *((_DWORD *)a1 + 60) = *((_DWORD *)a2 + 4);
    *((_OWORD *)a1 + 14) = v20;
    std::string::operator=((std::string *)(a1 + 31), (const std::string *)a2 + 1);
    std::string::operator=((std::string *)(a1 + 34), (const std::string *)a2 + 2);
    std::string::operator=((std::string *)(a1 + 37), (const std::string *)a2 + 3);
    std::string::operator=((std::string *)(a1 + 40), (const std::string *)a2 + 4);
    goto LABEL_43;
  }
  (*(void (**)(uint64_t *, uint64_t *, long long *))(*a1 + 72))(a1, a1 + 28, a2);
  return sub_1000E1098(v39);
}

void sub_1004C4304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,id a36)
{
}

uint64_t sub_1004C4388(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101A61FC8(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  std::string::size_type v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    int v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_1004C46FC(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A62138(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    uint64_t v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      long long v5 = __p;
    }
    else {
      long long v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    double v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      double v9 = __p;
    }
    else {
      double v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_1004C4A28(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A622A8(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    uint64_t v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

uint64_t sub_1004C4D4C(uint64_t a1)
{
  return sub_1004C31B0(a1 - 72);
}

void sub_1004C4D54(id a1)
{
  qword_102419288 = (uint64_t)os_log_create("com.apple.locationd.Motion", "ContextConfiguration");
}

uint64_t sub_1004C4D84(void *a1, uint64_t *a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v20);
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
    if (HIBYTE(v21)) {
      goto LABEL_3;
    }
LABEL_20:
    uint64_t v15 = (_Unwind_Exception *)sub_101A62418(v4);
    sub_1004C0A34((uint64_t)__p);
    uint64_t v16 = v19;
    uint64_t v19 = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    sub_101A129A8((uint64_t)v20);
    _Unwind_Resume(v15);
  }
  unsigned __int8 v14 = v20[1];
  operator delete(v20[0]);
  if (!v14) {
    goto LABEL_20;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    uint64_t v7 = *a2;
    uint64_t v6 = a2[1];
    if (v6 != *a2)
    {
      do
      {
        v6 -= 120;
        sub_1004C53A8((uint64_t)(a2 + 2), v6);
      }
      while (v6 != v7);
    }
    a2[1] = v7;
    sub_10010F274((uint64_t)v20);
    uint64_t v8 = sub_100132EFC(&v21, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v18 & 0x80u) == 0) {
      double v9 = __p;
    }
    else {
      double v9 = (void **)__p[0];
    }
    if ((v18 & 0x80u) == 0) {
      uint64_t v10 = v18;
    }
    else {
      uint64_t v10 = (uint64_t)__p[1];
    }
    uint64_t v11 = sub_100132EFC(v8, (uint64_t)v9, v10);
    sub_100132EFC(v11, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v18 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v12 = a1[10];
    std::stringbuf::str();
    if ((v18 & 0x80u) == 0) {
      unsigned __int8 v13 = __p;
    }
    else {
      unsigned __int8 v13 = (void **)__p[0];
    }
    sub_10014D518(v12, (uint64_t)v13);
  }
  return result;
}

void sub_1004C5230(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1004C5260(void *a1)
{
  uint64_t v2 = a1 + 5;
  uint64_t v3 = (void **)a1[1];
  uint64_t v4 = (void **)a1[2];
  if (v4 == v3)
  {
    uint64_t v4 = (void **)a1[1];
  }
  else
  {
    unint64_t v5 = a1[4];
    uint64_t v6 = &v3[v5 / 0x22];
    uint64_t v7 = (uint64_t)*v6 + 120 * (v5 % 0x22);
    unint64_t v8 = (unint64_t)v3[(a1[5] + v5) / 0x22] + 120 * ((a1[5] + v5) % 0x22);
    if (v7 != v8)
    {
      do
      {
        sub_1004C53A8((uint64_t)v2, v7);
        v7 += 120;
        if (v7 - (void)*v6 == 4080)
        {
          uint64_t v9 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != v8);
      uint64_t v3 = (void **)a1[1];
      uint64_t v4 = (void **)a1[2];
    }
  }
  *uint64_t v2 = 0;
  unint64_t v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      uint64_t v4 = (void **)a1[2];
      uint64_t v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      unint64_t v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 17;
  }
  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 34;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    unsigned __int8 v13 = *v3++;
    operator delete(v13);
  }

  return sub_1000D7EB4((uint64_t)a1);
}

void sub_1004C53A8(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 119) < 0) {
    operator delete(*(void **)(a2 + 96));
  }
  if (*(char *)(a2 + 95) < 0) {
    operator delete(*(void **)(a2 + 72));
  }
  if (*(char *)(a2 + 71) < 0) {
    operator delete(*(void **)(a2 + 48));
  }
  if (*(char *)(a2 + 47) < 0)
  {
    uint64_t v3 = *(void **)(a2 + 24);
    operator delete(v3);
  }
}

uint64_t sub_1004C5420(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

uint64_t sub_1004C54B0(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x222222222222222) {
    sub_1001D7FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xEEEEEEEEEEEEEEEFLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x111111111111111) {
    unint64_t v9 = 0x222222222222222;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)sub_10029BE4C(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  unsigned __int8 v13 = v10;
  unsigned __int8 v14 = &v10[120 * v4];
  uint64_t v16 = &v10[120 * v9];
  sub_1004C55B8((uint64_t)v14, a2);
  uint64_t v15 = v14 + 120;
  sub_1004C5708(a1, &v13);
  uint64_t v11 = a1[1];
  sub_1004C5904(&v13);
  return v11;
}

void sub_1004C55A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1004C5904((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004C55B8(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  *(_OWORD *)a1 = v4;
  if (*((char *)a2 + 47) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 24), *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 48), *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    *(void *)(a1 + 64) = *((void *)a2 + 8);
    *(_OWORD *)(a1 + 48) = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 72), *((void **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(long long *)((char *)a2 + 72);
    *(void *)(a1 + 88) = *((void *)a2 + 11);
    *(_OWORD *)(a1 + 72) = v7;
  }
  unint64_t v8 = (unsigned char *)(a1 + 96);
  if (*((char *)a2 + 119) < 0)
  {
    sub_1000DC48C(v8, *((void **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v9 = a2[6];
    *(void *)(a1 + 112) = *((void *)a2 + 14);
    *(_OWORD *)unint64_t v8 = v9;
  }
  return a1;
}

void sub_1004C56BC(_Unwind_Exception *exception_object)
{
  if (v1[95] < 0) {
    operator delete(*v4);
  }
  if (v1[71] < 0) {
    operator delete(*v3);
  }
  if (v1[47] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004C5708(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1004C5780((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1004C5780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v19 = a6;
  *((void *)&v19 + 1) = a7;
  long long v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  uint64_t v16[2] = &v19;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 120);
      *(_DWORD *)(v9 - 104) = *(_DWORD *)(a3 - 104);
      *(_OWORD *)(v9 - 120) = v10;
      long long v11 = *(_OWORD *)(a3 - 96);
      *(void *)(v9 - 80) = *(void *)(a3 - 80);
      *(_OWORD *)(v9 - 96) = v11;
      *(void *)(a3 - 88) = 0;
      *(void *)(a3 - 80) = 0;
      *(void *)(a3 - 96) = 0;
      long long v12 = *(_OWORD *)(a3 - 72);
      *(void *)(v9 - 56) = *(void *)(a3 - 56);
      *(_OWORD *)(v9 - 72) = v12;
      *(void *)(a3 - 64) = 0;
      *(void *)(a3 - 56) = 0;
      *(void *)(a3 - 72) = 0;
      long long v13 = *(_OWORD *)(a3 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v13;
      *(void *)(a3 - 48) = 0;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      long long v14 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v14;
      v9 -= 120;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      v7 -= 120;
      a3 -= 120;
    }
    while (a3 != a5);
    *((void *)&v19 + 1) = v9;
  }
  char v17 = 1;
  sub_1004C5878((uint64_t)v16);
  return a6;
}

uint64_t sub_1004C5878(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1004C58B0((uint64_t *)a1);
  }
  return a1;
}

void sub_1004C58B0(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_1004C53A8(v3, v1);
      v1 += 120;
    }
    while (v1 != v2);
  }
}

void **sub_1004C5904(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1004C5938(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 120;
    sub_1004C53A8(v4, i - 120);
  }
}

void sub_1004C5980(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_1004C5A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004C5A1C(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_1004C5AB8(void *a1, void *a2, _DWORD *a3)
{
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[1];
  if (v6 == v7) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = 32 * (v6 - v7) - 1;
  }
  uint64_t v9 = a1[4];
  uint64_t v10 = a1[5];
  unint64_t v11 = v10 + v9;
  if (v8 == v10 + v9)
  {
    sub_1004C5B80(a1);
    uint64_t v9 = a1[4];
    uint64_t v10 = a1[5];
    uint64_t v7 = a1[1];
    unint64_t v11 = v9 + v10;
  }
  uint64_t v12 = *(void *)(v7 + ((v11 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v11;
  *(void *)uint64_t v12 = *a2;
  *(_DWORD *)(v12 + 8) = *a3;
  uint64_t v13 = v10 + 1;
  a1[5] = v13;
  unint64_t v14 = v9 + v13;
  uint64_t v15 = (void *)(v7 + 8 * (v14 >> 8));
  if ((_BYTE)v14) {
    uint64_t v16 = *v15 + 16 * v14;
  }
  else {
    uint64_t v16 = *(v15 - 1) + 4096;
  }
  return v16 - 16;
}

void sub_1004C5B80(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      char v34 = (char *)sub_1000DA54C(v5, v33);
      int v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      char v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    long long v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    double v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      char v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      int v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        __int16 v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)__int16 v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  long long v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000DA434(&v54, &v53);
  double v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  double v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1004C5E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

unsigned char *sub_1004C5E98(unsigned char *__dst, unsigned __int8 *a2, size_t a3)
{
  if (a3 && ((unsigned int v4 = *a2 - 1, v4 > 4) ? (v5 = 0) : (v5 = qword_101D21558[(char)v4]), v5 == a3)) {
    memcpy(__dst, a2, a3);
  }
  else {
    *__uuid_t dst = -1;
  }
  return __dst;
}

void *sub_1004C5F04(void *a1)
{
  a1[3] = 0;
  *a1 = off_1022B63D0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = sub_1000D3E78();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_1004C5FD8;
  void v4[3] = &unk_1022A3020;
  void v4[4] = a1;
  sub_1009E8E94(v2, (uint64_t)v4);
  return a1;
}

void sub_1004C5FB4(_Unwind_Exception *a1)
{
  sub_1004C62FC(v2, 0);
  unsigned int v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  _Unwind_Resume(a1);
}

void sub_1004C5FD8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (uint64_t *)sub_100A26784();
  uint64_t v5 = 0x140000FF0CLL;
  char v6 = 0;
  sub_101A46D60(v2, (uint64_t)&v5, (uint64_t *)&v7);
  long long v3 = v7;
  long long v7 = 0uLL;
  unsigned int v4 = *(std::__shared_weak_count **)(v1 + 16);
  *(_OWORD *)(v1 + 8) = v3;
  if (v4)
  {
    sub_1000DB0A0(v4);
    if (*((void *)&v7 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v7 + 1));
    }
  }
  sub_100A2932C(*(uint64_t **)(v1 + 8), (uint64_t)nullsub_203, v1);
  sub_100A294B4(*(void *)(v1 + 8), (uint64_t)sub_1004C6140, v1);
  sub_100A293C8(*(void *)(v1 + 8), (uint64_t)sub_1004C6140, v1);
  sub_100A29A24(*(void *)(v1 + 8), (uint64_t)sub_1004C6140, v1);
  operator new();
}

void sub_1004C6100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  operator delete();
}

uint64_t sub_1004C6140(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[3];
  sub_1012B3B9C(v2);
  sub_1012B3F28(v2);
  long long v3 = *(uint64_t (**)(void *))(*a1 + 16);

  return v3(a1);
}

void *sub_1004C61A8(void *a1)
{
  *a1 = off_1022B63D0;
  sub_1004C62FC(a1 + 3, 0);
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  return a1;
}

void sub_1004C6200(void *a1)
{
  sub_1004C61A8(a1);

  operator delete();
}

unint64_t sub_1004C6238()
{
  return ((unint64_t)sub_1000A16E8() >> 8) & 1;
}

BOOL sub_1004C6254(uint64_t a1, uint64_t a2, char *a3)
{
  sub_1000D3E78();
  sub_1000D5B68();
  if ((sub_1000A16E8() & 0x100) == 0) {
    sub_101A62588();
  }
  int v8 = 0;
  uint64_t v7 = 4;
  return sub_1012B4B18(*(void *)(a1 + 24), a2, a3, (uint64_t)&v8, (uint64_t)&v7) == 0;
}

void sub_1004C62CC(id a1)
{
  qword_102418FC8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Eclipse");
}

uint64_t sub_1004C62FC(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1012B3F24();
    operator delete();
  }
  return result;
}

id sub_1004C6854(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_alloc((Class)CKRecordID) initWithRecordName:a2 zoneID:[*(id *)(a1 + 32) zoneIDForZoneName:*(void *)(a1 + 40)]];
  id v4 = objc_alloc((Class)CKSyncEnginePendingRecordZoneChange);
  id v5 = [v4 initWithRecordID:v3 type:CKSyncEnginePendingRecordZoneChangeTypeSave];

  char v6 = *(void **)(a1 + 48);

  return [v6 addObject:v5];
}

BOOL sub_1004C6F5C(void *a1, uint64_t a2)
{
  id v4 = a1 + 14;
  (*(void (**)(void *))(a1[14] + 16))(a1 + 14);
  LODWORD(a2) = (*(uint64_t (**)(void *, uint64_t))(*a1 + 104))(a1, a2);
  (*(void (**)(void *))(*v4 + 24))(v4);
  return a2 == 0;
}

void sub_1004C702C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004C7F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1004C87EC(uint64_t a1, void *a2)
{
  return sub_101006F08(*(void *)(*(void *)(a1 + 32) + 24), a2);
}

void sub_1004C96A0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 24);
  if (v2) {
    sub_1010077F8(v2, a2);
  }
}

void sub_1004C994C(id a1, CKRecordZone *a2, unint64_t a3, BOOL *a4)
{
  if (qword_102419300 != -1) {
    dispatch_once(&qword_102419300, &stru_1022B65F0);
  }
  id v5 = qword_102419308;
  if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 138543362;
    int v8 = [(CKRecordZoneID *)[(CKRecordZone *)a2 zoneID] zoneName];
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[CloudKit] Successfully saved zone %{public}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_1022B65F0);
    }
    [(CKRecordZoneID *)[(CKRecordZone *)a2 zoneID] zoneName];
    char v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CMHealthColdStorageCloudKitManager handleSentDatabaseChanges:]_block_invoke", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

id sub_1004C9B14(uint64_t a1, void *a2)
{
  if (qword_102419300 != -1) {
    dispatch_once(&qword_102419300, &stru_1022B65F0);
  }
  id v4 = qword_102419308;
  if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 138543362;
    id v8 = [a2 zoneName];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[CloudKit] Successfully deleted zone ID %{public}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_1022B65F0);
    }
    [a2 zoneName];
    char v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CMHealthColdStorageCloudKitManager handleSentDatabaseChanges:]_block_invoke", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return [*(id *)(a1 + 32) handleZoneDeleted:a2];
}

id sub_1004C9CE4(uint64_t a1, void *a2)
{
  if (qword_102419300 != -1) {
    dispatch_once(&qword_102419300, &stru_1022B65F0);
  }
  id v4 = qword_102419308;
  if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 138543618;
    id v8 = [[[a2 recordZone] zoneID] zoneName];
    __int16 v9 = 2114;
    id v10 = [a2 error];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[CloudKit] Failed to save zone changes %{public}@. Error: %{public}@", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_1022B65F0);
    }
    [objc_msgSend(objc_msgSend(objc_msgSend(a2, "recordZone"), "zoneID"), "zoneName"]
    [a2 error];
    char v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "-[CMHealthColdStorageCloudKitManager handleSentDatabaseChanges:]_block_invoke", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  id result = [objc_msgSend(a2, "error") code];
  if (result == (id)112) {
    return [*(id *)(a1 + 32) deleteZone:[objc_msgSend(objc_msgSend(a2, "recordZone"), "zoneID")]];
  }
  return result;
}

void sub_1004C9F20(id a1, CKRecordZoneID *a2, NSError *a3, BOOL *a4)
{
  if (qword_102419300 != -1) {
    dispatch_once(&qword_102419300, &stru_1022B65F0);
  }
  char v6 = qword_102419308;
  if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)uint64_t buf = 138543618;
    __int16 v9 = [(CKRecordZoneID *)a2 zoneName];
    __int16 v10 = 2114;
    uint64_t v11 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "[CloudKit] Failed to delete zone %{public}@. Error: %{public}@", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_1022B65F0);
    }
    [(CKRecordZoneID *)a2 zoneName];
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "-[CMHealthColdStorageCloudKitManager handleSentDatabaseChanges:]_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
}

void sub_1004CA3D0(uint64_t a1, void *a2)
{
  if (qword_102419300 != -1) {
    dispatch_once(&qword_102419300, &stru_1022B65F0);
  }
  id v4 = qword_102419308;
  if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 138543362;
    id v10 = [a2 recordID];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[CloudKit] Successfully saved records %{public}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_1022B65F0);
    }
    [a2 recordID];
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CMHealthColdStorageCloudKitManager handleSentRecordZoneChanges:]_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 24);
  if (v5
    && (sub_1010075B0(v5, [a2 recordID], +[CMHealthColdStorageUtils getSystemFieldsFromCKRecord:](CMHealthColdStorageUtils, "getSystemFieldsFromCKRecord:", a2)) & 1) == 0)
  {
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_1022B65F0);
    }
    char v6 = qword_102419308;
    if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "[CloudKit] SentRecordChanges: Failed to update local system fields for saved record", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419300 != -1) {
        dispatch_once(&qword_102419300, &stru_1022B65F0);
      }
      id v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CMHealthColdStorageCloudKitManager handleSentRecordZoneChanges:]_block_invoke", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

void sub_1004CA700(uint64_t a1, void *a2)
{
  if (qword_102419300 != -1) {
    dispatch_once(&qword_102419300, &stru_1022B65F0);
  }
  id v4 = qword_102419308;
  if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 138543362;
    id v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[CloudKit] Successfully deleted records %{public}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_1022B65F0);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CMHealthColdStorageCloudKitManager handleSentRecordZoneChanges:]_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 24);
  if (v5 && (sub_1010075B0(v5, a2, 0) & 1) == 0)
  {
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_1022B65F0);
    }
    char v6 = qword_102419308;
    if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "[CloudKit] SentRecordChanges: Failed to update local system fields for failed record", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419300 != -1) {
        dispatch_once(&qword_102419300, &stru_1022B65F0);
      }
      id v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CMHealthColdStorageCloudKitManager handleSentRecordZoneChanges:]_block_invoke", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

void sub_1004CA9FC(uint64_t a1, void *a2)
{
  if (qword_102419300 != -1) {
    dispatch_once(&qword_102419300, &stru_1022B65F0);
  }
  id v4 = qword_102419308;
  if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 138543618;
    id v9 = [objc_msgSend(a2, "record") recordID];
    __int16 v10 = 2114;
    id v11 = [a2 error];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[CloudKit] Failed to save record changes %{public}@. Error: %{public}@", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_1022B65F0);
    }
    [objc_msgSend(a2, "record") recordID];
    [a2 error];
    char v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "-[CMHealthColdStorageCloudKitManager handleSentRecordZoneChanges:]_block_invoke", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  sub_101007918(*(void *)(*(void *)(a1 + 32) + 24), (uint64_t)[a2 error]);
  [a2 error];
  if (CKErrorIsCode())
  {
    [*(id *)(a1 + 32) handleServerRecordChanged:[objc_msgSend(objc_msgSend(objc_msgSend(a2, "error"), "userInfo"), "objectForKeyedSubscript:", CKRecordChangedErrorServerRecordKey)];
  }
  else
  {
    [a2 error];
    if (CKErrorIsCode())
    {
      [*(id *)(a1 + 32) handleUnknownItem:[a2 record]];
    }
    else
    {
      [a2 error];
      if (CKErrorIsCode())
      {
        [*(id *)(a1 + 32) handleZoneNotFound:[a2 record]];
      }
      else
      {
        [a2 error];
        if (CKErrorIsCode())
        {
          [*(id *)(a1 + 32) deleteZone:[objc_msgSend(objc_msgSend(objc_msgSend(a2, "record"), "recordID"), "zoneID")]];
        }
        else
        {
          if (qword_102419300 != -1) {
            dispatch_once(&qword_102419300, &stru_1022B65F0);
          }
          uint64_t v5 = qword_102419308;
          if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[CloudKit] Unhandled error, ignoring failed record", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419300 != -1) {
              dispatch_once(&qword_102419300, &stru_1022B65F0);
            }
            uint64_t v7 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "-[CMHealthColdStorageCloudKitManager handleSentRecordZoneChanges:]_block_invoke", "%s\n", v7);
            if (v7 != (char *)buf) {
              free(v7);
            }
          }
        }
      }
    }
  }
}

void sub_1004CAE20(id a1, CKRecordID *a2, NSError *a3, BOOL *a4)
{
  if (qword_102419300 != -1) {
    dispatch_once(&qword_102419300, &stru_1022B65F0);
  }
  char v6 = qword_102419308;
  if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 138543618;
    id v9 = a2;
    __int16 v10 = 2114;
    id v11 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "[CloudKit] Failed to delete record %{public}@. Error: %{public}@", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_1022B65F0);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "-[CMHealthColdStorageCloudKitManager handleSentRecordZoneChanges:]_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
}

void sub_1004CC0C0(id a1)
{
  qword_102419308 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HealthColdStorage");
}

void *sub_1004CC0F0@<X0>(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
  id v4 = operator new(0x190uLL);
  id result = sub_1004CC14C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1004CC138(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1004CC14C(void *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B6620;
  sub_100EAB868(a1 + 3, *a2);
  return a1;
}

void sub_1004CC198(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004CC1AC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B6620;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004CC1CC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B6620;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1004CC220(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void sub_1004CD138(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

double sub_1004CD168(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  double result = -1.0;
  *(_OWORD *)(a1 + 8) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 24) = xmmword_101D1C320;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 64) = xmmword_101D1C320;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 100) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = 0;
  return result;
}

BOOL sub_1004CD1A8(uint64_t a1)
{
  return *(double *)(a1 + 8) > 0.0;
}

void sub_1004CD1B8(uint64_t a1)
{
  if (*(double *)(a1 + 8) <= 0.0)
  {
    *(CFAbsoluteTime *)(a1 + 8) = CFAbsoluteTimeGetCurrent();
    if (*(double *)(a1 + 88) > 0.0)
    {
      int v2 = *(_DWORD *)(a1 + 96);
      char v3 = *(unsigned char *)(a1 + 100);
      double Current = CFAbsoluteTimeGetCurrent();
      double v5 = Current;
      unint64_t v6 = *(void *)(a1 + 120);
      unint64_t v7 = *(void *)(a1 + 112);
      if (v7 >= v6)
      {
        uint64_t v9 = *(void *)(a1 + 104);
        uint64_t v10 = (uint64_t)(v7 - v9) >> 4;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 60) {
          sub_1001D7FD4();
        }
        uint64_t v12 = v6 - v9;
        if (v12 >> 3 > v11) {
          unint64_t v11 = v12 >> 3;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13) {
          BOOL v14 = (char *)sub_1000C571C(a1 + 120, v13);
        }
        else {
          BOOL v14 = 0;
        }
        uint64_t v15 = &v14[16 * v10];
        uint64_t v16 = &v14[16 * v13];
        *(double *)uint64_t v15 = v5;
        *((_DWORD *)v15 + 2) = v2;
        v15[12] = v3;
        id v8 = v15 + 16;
        uint64_t v18 = *(void *)(a1 + 104);
        uint64_t v17 = *(void *)(a1 + 112);
        if (v17 != v18)
        {
          do
          {
            uint64_t v19 = *(void *)(v17 - 16);
            v17 -= 16;
            uint64_t v20 = *(void *)(v17 + 5);
            *((void *)v15 - 2) = v19;
            v15 -= 16;
            *(void *)(v15 + 5) = v20;
          }
          while (v17 != v18);
          uint64_t v17 = *(void *)(a1 + 104);
        }
        *(void *)(a1 + 104) = v15;
        *(void *)(a1 + 112) = v8;
        *(void *)(a1 + 120) = v16;
        if (v17) {
          operator delete((void *)v17);
        }
      }
      else
      {
        *(double *)unint64_t v7 = Current;
        *(_DWORD *)(v7 + 8) = v2;
        id v8 = (char *)(v7 + 16);
        *(unsigned char *)(v7 + 12) = v3;
      }
      *(void *)(a1 + 112) = v8;
    }
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022B66E0);
    }
    uint64_t v21 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "HARVEST NAVIGATION SESSION: start navigation session", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022B66E0);
      }
      unint64_t v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNavigationSession::start()", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
  }
}

void sub_1004CD458(uint64_t a1)
{
  if (*(double *)(a1 + 8) >= 0.0 && *(double *)(a1 + 24) <= 0.0 && *(double *)(a1 + 40) <= 0.0)
  {
    *(CFAbsoluteTime *)(a1 + 16) = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 8);
    *(void *)(a1 + 8) = 0xBFF0000000000000;
    if (*(double *)(a1 + 88) > 0.0)
    {
      int v2 = *(_DWORD *)(a1 + 96);
      char v3 = *(unsigned char *)(a1 + 100);
      double Current = CFAbsoluteTimeGetCurrent();
      double v5 = Current;
      unint64_t v6 = *(void *)(a1 + 120);
      unint64_t v7 = *(void *)(a1 + 112);
      if (v7 >= v6)
      {
        uint64_t v9 = *(void *)(a1 + 104);
        uint64_t v10 = (uint64_t)(v7 - v9) >> 4;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 60) {
          sub_1001D7FD4();
        }
        uint64_t v12 = v6 - v9;
        if (v12 >> 3 > v11) {
          unint64_t v11 = v12 >> 3;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13) {
          BOOL v14 = (char *)sub_1000C571C(a1 + 120, v13);
        }
        else {
          BOOL v14 = 0;
        }
        uint64_t v15 = &v14[16 * v10];
        uint64_t v16 = &v14[16 * v13];
        *(double *)uint64_t v15 = v5;
        *((_DWORD *)v15 + 2) = v2;
        v15[12] = v3;
        id v8 = v15 + 16;
        uint64_t v18 = *(void *)(a1 + 104);
        uint64_t v17 = *(void *)(a1 + 112);
        if (v17 != v18)
        {
          do
          {
            uint64_t v19 = *(void *)(v17 - 16);
            v17 -= 16;
            uint64_t v20 = *(void *)(v17 + 5);
            *((void *)v15 - 2) = v19;
            v15 -= 16;
            *(void *)(v15 + 5) = v20;
          }
          while (v17 != v18);
          uint64_t v17 = *(void *)(a1 + 104);
        }
        *(void *)(a1 + 104) = v15;
        *(void *)(a1 + 112) = v8;
        *(void *)(a1 + 120) = v16;
        if (v17) {
          operator delete((void *)v17);
        }
      }
      else
      {
        *(double *)unint64_t v7 = Current;
        *(_DWORD *)(v7 + 8) = v2;
        id v8 = (char *)(v7 + 16);
        *(unsigned char *)(v7 + 12) = v3;
      }
      *(void *)(a1 + 112) = v8;
    }
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022B66E0);
    }
    uint64_t v21 = qword_102419568;
    if (!os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
LABEL_35:
      if (!sub_10013D1A0(115, 2))
      {
LABEL_36:
        *(_OWORD *)(a1 + 8) = xmmword_101D1C320;
        *(_OWORD *)(a1 + 24) = xmmword_101D1C320;
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 56) = 0;
        *(void *)(a1 + 40) = 0xBFF0000000000000;
        *(_OWORD *)(a1 + 64) = xmmword_101D1C320;
        *(unsigned char *)(a1 + 80) = 0;
        *(void *)(a1 + 112) = *(void *)(a1 + 104);
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022B66E0);
      }
      (*(void (**)(void **__return_ptr))(**(void **)a1 + 16))(v53);
      if (v54 >= 0) {
        uint64_t v37 = v53;
      }
      else {
        uint64_t v37 = (void **)v53[0];
      }
      uint64_t v38 = *(void *)(a1 + 16);
      uint64_t v39 = *(void *)(a1 + 32);
      uint64_t v41 = *(void *)(a1 + 48);
      uint64_t v40 = *(void *)(a1 + 56);
      uint64_t v42 = *(void *)(a1 + 72);
      int v43 = *(unsigned __int8 *)(a1 + 80);
      uint64_t v44 = *(void *)(a1 + 104);
      uint64_t v45 = *(void *)(a1 + 112);
      double v46 = -1.0;
      unint64_t v47 = v45 - v44;
      uint64_t v48 = (v45 - v44) >> 4;
      if (v45 == v44)
      {
        int v50 = -1;
        double v49 = -1.0;
      }
      else
      {
        double v49 = *(float *)(v44 + 8);
        int v50 = *(unsigned __int8 *)(v44 + 12);
        if (v47 >= 0x11)
        {
          double v46 = *(float *)(v45 - 8);
          int v51 = *(unsigned __int8 *)(v45 - 4);
LABEL_48:
          *(_DWORD *)std::string __p = 136317954;
          *(void *)&__p[4] = v37;
          __int16 v56 = 2048;
          uint64_t v57 = v38;
          __int16 v58 = 2048;
          uint64_t v59 = v39;
          __int16 v60 = 2048;
          uint64_t v61 = v41;
          __int16 v62 = 2048;
          uint64_t v63 = v40;
          __int16 v64 = 2048;
          uint64_t v65 = v42;
          __int16 v66 = 1024;
          int v67 = v43;
          __int16 v68 = 2048;
          uint64_t v69 = v48;
          __int16 v70 = 2048;
          double v71 = v49;
          __int16 v72 = 1024;
          int v73 = v50;
          __int16 v74 = 2048;
          double v75 = v46;
          __int16 v76 = 1024;
          int v77 = v51;
          uint64_t v52 = (char *)_os_log_send_and_compose_impl();
          if (v54 < 0) {
            operator delete(v53[0]);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLNavigationSession::stop()", "%s\n", v52);
          if (v52 != (char *)buf) {
            free(v52);
          }
          goto LABEL_36;
        }
      }
      int v51 = -1;
      goto LABEL_48;
    }
    (*(void (**)(unsigned char *__return_ptr))(**(void **)a1 + 16))(__p);
    if (v58 >= 0) {
      unint64_t v22 = __p;
    }
    else {
      unint64_t v22 = *(unsigned char **)__p;
    }
    uint64_t v23 = *(void *)(a1 + 16);
    uint64_t v24 = *(void *)(a1 + 32);
    uint64_t v26 = *(void *)(a1 + 48);
    uint64_t v25 = *(void *)(a1 + 56);
    uint64_t v27 = *(void *)(a1 + 72);
    int v28 = *(unsigned __int8 *)(a1 + 80);
    uint64_t v29 = *(void *)(a1 + 104);
    uint64_t v30 = *(void *)(a1 + 112);
    double v31 = -1.0;
    unint64_t v32 = v30 - v29;
    uint64_t v33 = (v30 - v29) >> 4;
    if (v30 == v29)
    {
      int v35 = -1;
      double v34 = -1.0;
    }
    else
    {
      double v34 = *(float *)(v29 + 8);
      int v35 = *(unsigned __int8 *)(v29 + 12);
      if (v32 >= 0x11)
      {
        double v31 = *(float *)(v30 - 8);
        int v36 = *(unsigned __int8 *)(v30 - 4);
        goto LABEL_33;
      }
    }
    int v36 = -1;
LABEL_33:
    *(_DWORD *)uint64_t buf = 136317954;
    long long v79 = v22;
    __int16 v80 = 2048;
    uint64_t v81 = v23;
    __int16 v82 = 2048;
    uint64_t v83 = v24;
    __int16 v84 = 2048;
    uint64_t v85 = v26;
    __int16 v86 = 2048;
    uint64_t v87 = v25;
    __int16 v88 = 2048;
    uint64_t v89 = v27;
    __int16 v90 = 1024;
    int v91 = v28;
    __int16 v92 = 2048;
    uint64_t v93 = v33;
    __int16 v94 = 2048;
    double v95 = v34;
    __int16 v96 = 1024;
    int v97 = v35;
    __int16 v98 = 2048;
    double v99 = v31;
    __int16 v100 = 1024;
    int v101 = v36;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "HARVEST NAVIGATION SESSION: stop navigation session, identifier, %s, duration, %.3f, automtiveActivityDuration, %.3f, isVehicleConnectedDuration, %.3f, gpsDuration, %.3f, proactiveGpsDuration, %.3f, mapsUsed, %d, batteryStates, %lu, beggining, level, %f, charging, %d, end, level, %f, charging, %d", buf, 0x6Eu);
    if (SHIBYTE(v58) < 0) {
      operator delete(*(void **)__p);
    }
    goto LABEL_35;
  }
}

void sub_1004CD984(uint64_t a1)
{
  if (*(double *)(a1 + 24) <= 0.0)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022B66E0);
    }
    int v2 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "HARVEST NAVIGATION SESSION: start automotive activity", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022B66E0);
      }
      char v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNavigationSession::startAutomotiveActivity()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    *(CFAbsoluteTime *)(a1 + 24) = CFAbsoluteTimeGetCurrent();
    sub_1004CD1B8(a1);
  }
}

void sub_1004CDB34(uint64_t a1)
{
  if (*(double *)(a1 + 24) >= 0.0)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022B66E0);
    }
    int v2 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "HARVEST NAVIGATION SESSION: stop automotive activity", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022B66E0);
      }
      char v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNavigationSession::stopAutomotiveActivity()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    *(double *)(a1 + 32) = *(double *)(a1 + 32) + CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 24);
    *(void *)(a1 + 24) = 0xBFF0000000000000;
    sub_1004CD458(a1);
  }
}

void sub_1004CDCF8(uint64_t a1)
{
  if (*(double *)(a1 + 40) <= 0.0)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022B66E0);
    }
    int v2 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "HARVEST NAVIGATION SESSION: start vehicle connected", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022B66E0);
      }
      char v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNavigationSession::startVehicleConnected()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    *(CFAbsoluteTime *)(a1 + 40) = CFAbsoluteTimeGetCurrent();
    sub_1004CD1B8(a1);
  }
}

void sub_1004CDEA8(uint64_t a1)
{
  if (*(double *)(a1 + 40) >= 0.0)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022B66E0);
    }
    int v2 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "HARVEST NAVIGATION SESSION: stop vehicle connected", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022B66E0);
      }
      char v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNavigationSession::stopVehicleConnected()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    *(double *)(a1 + 48) = *(double *)(a1 + 48) + CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 40);
    *(void *)(a1 + 40) = 0xBFF0000000000000;
    sub_1004CD458(a1);
  }
}

double sub_1004CE06C(uint64_t a1, double result)
{
  if (*(double *)(a1 + 8) > 0.0)
  {
    double result = *(double *)(a1 + 56) + result;
    *(double *)(a1 + 56) = result;
  }
  return result;
}

void sub_1004CE088(uint64_t a1)
{
  if (*(double *)(a1 + 8) > 0.0 && *(double *)(a1 + 64) <= 0.0) {
    *(CFAbsoluteTime *)(a1 + 64) = CFAbsoluteTimeGetCurrent();
  }
}

double sub_1004CE0C8(double *a1)
{
  double result = a1[1];
  if (result > 0.0)
  {
    double result = a1[8];
    if (result >= 0.0)
    {
      double result = a1[9] + CFAbsoluteTimeGetCurrent() - a1[8];
      a1[9] = result;
      a1[8] = -1.0;
    }
  }
  return result;
}

uint64_t sub_1004CE11C(uint64_t result)
{
  *(unsigned char *)(result + 80) = 1;
  return result;
}

void sub_1004CE128(uint64_t a1, int a2, float a3)
{
  double Current = CFAbsoluteTimeGetCurrent();
  *(double *)(a1 + 88) = Current;
  unint64_t v7 = (_OWORD *)(a1 + 88);
  *(float *)(a1 + 96) = a3;
  *(unsigned char *)(a1 + 100) = a2;
  if (*(double *)(a1 + 8) > 0.0)
  {
    id v8 = *(double **)(a1 + 104);
    uint64_t v9 = *(double **)(a1 + 112);
    uint64_t v10 = (char *)v9 - (char *)v8;
    if (v9 == v8 || *((unsigned __int8 *)v9 - 4) != a2 || Current - *(v9 - 2) >= 300.0)
    {
      unint64_t v11 = *(void *)(a1 + 120);
      if ((unint64_t)v9 >= v11)
      {
        uint64_t v13 = v10 >> 4;
        unint64_t v14 = (v10 >> 4) + 1;
        if (v14 >> 60) {
          sub_1001D7FD4();
        }
        uint64_t v15 = v11 - (void)v8;
        if (v15 >> 3 > v14) {
          unint64_t v14 = v15 >> 3;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16) {
          uint64_t v17 = (char *)sub_1000C571C(a1 + 120, v16);
        }
        else {
          uint64_t v17 = 0;
        }
        uint64_t v18 = &v17[16 * v13];
        uint64_t v19 = &v17[16 * v16];
        *(_OWORD *)uint64_t v18 = *v7;
        uint64_t v12 = v18 + 16;
        uint64_t v21 = *(void *)(a1 + 104);
        uint64_t v20 = *(void *)(a1 + 112);
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *(void *)(v20 - 16);
            v20 -= 16;
            uint64_t v23 = *(void *)(v20 + 5);
            *((void *)v18 - 2) = v22;
            v18 -= 16;
            *(void *)(v18 + 5) = v23;
          }
          while (v20 != v21);
          uint64_t v20 = *(void *)(a1 + 104);
        }
        *(void *)(a1 + 104) = v18;
        *(void *)(a1 + 112) = v12;
        *(void *)(a1 + 120) = v19;
        if (v20) {
          operator delete((void *)v20);
        }
      }
      else
      {
        *(_OWORD *)uint64_t v9 = *v7;
        uint64_t v12 = v9 + 2;
      }
      *(void *)(a1 + 112) = v12;
    }
  }
}

void sub_1004CE26C(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

BOOL sub_1004CE29C(const char *a1, int a2, uint64_t a3)
{
  unint64_t v6 = xmlBufferCreate();
  if (!v6) {
    return 0;
  }
  unint64_t v7 = v6;
  id v8 = xmlNewTextWriterMemory(v6, 0);
  if (v8)
  {
    uint64_t v9 = v8;
    int v10 = xmlTextWriterWriteBase64(v8, a1, 0, a2);
    BOOL v11 = v10 != -1;
    if (v10 != -1)
    {
      xmlTextWriterFlush(v9);
      uint64_t v12 = (xmlChar *)xmlBufferContent(v7);
      int v13 = xmlBufferLength(v7);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      unint64_t v14 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        *(void *)&uint8_t buf[4] = v12;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v13;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v12;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "processed %p %d to (%s)", buf, 0x1Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022B6AC8);
        }
        unint64_t v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLNameValuePair::encodeBase64(const void *, unsigned long, std::string &)", "%s\n", v16);
        if (v16 != buf) {
          free(v16);
        }
      }
      sub_1002E9328(buf, v12, v13);
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      *(_OWORD *)a3 = *(_OWORD *)buf;
      *(void *)(a3 + 16) = *(void *)&buf[16];
    }
    xmlFreeTextWriter(v9);
  }
  else
  {
    BOOL v11 = 0;
  }
  xmlBufferFree(v7);
  return v11;
}

void *sub_1004CE540(void *a1, CFTypeRef cf)
{
  *a1 = off_1022B6710;
  a1[1] = cf;
  CFRetain(cf);
  return a1;
}

void sub_1004CE588(void *a1)
{
  sub_10013F374(a1);

  operator delete();
}

void *sub_1004CE5C0(void *a1, uint64_t a2)
{
  *a1 = off_1022B6710;
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, *(CFDictionaryRef *)(a2 + 8));
  a1[1] = MutableCopy;
  if (!MutableCopy)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    id v4 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "could not create new mutable dictionary", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      unint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLNameValuePair::CLNameValuePair(const CLNameValuePair &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return a1;
}

uint64_t sub_1004CE798(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    id v4 = *(const void **)(a1 + 8);
    if (v4) {
      CFRelease(v4);
    }
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, *(CFDictionaryRef *)(a2 + 8));
    *(void *)(a1 + 8) = MutableCopy;
    if (!MutableCopy)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      unint64_t v6 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not create new mutable dictionary", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022B6AC8);
        }
        id v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLNameValuePair &CLNameValuePair::operator=(const CLNameValuePair &)", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
      }
    }
  }
  return a1;
}

CFStringRef sub_1004CE968()
{
  return @"Memory";
}

uint64_t sub_1004CE974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 928))(a3, a1, a2);
}

uint64_t sub_1004CE9B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 896))(a3, a1, a2);
}

uint64_t sub_1004CE9EC(void *context, uint64_t a2, int a3)
{
  CFDictionaryRef v4 = *(const __CFDictionary **)(a2 + 8);
  if (a3) {
    double v5 = (void (__cdecl *)(const void *, const void *, void *))sub_1004CE9B0;
  }
  else {
    double v5 = (void (__cdecl *)(const void *, const void *, void *))sub_1004CE974;
  }
  CFDictionaryApplyFunction(v4, v5, context);
  unint64_t v6 = *(uint64_t (**)(void *))(*(void *)context + 848);

  return v6(context);
}

BOOL sub_1004CEA84(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef v4 = +[NSURL fileURLWithPath:isDirectory:](NSURL, "fileURLWithPath:isDirectory:", +[NSString stringWithUTF8String:a2], 0);
  id v20 = 0;
  if (+[NSData instancesRespondToSelector:](NSData, "instancesRespondToSelector:", "dataWithContentsOfURL:options:error:"))double v5 = +[NSData dataWithContentsOfURL:v4 options:0 error:&v20]; {
  else
  }
    double v5 = +[NSData dataWithContentsOfURL:v4];
  if (!v5)
  {
    if (!v20) {
      return 0;
    }
    (*(void (**)(uint64_t, void))(*(void *)a1 + 872))(a1, 0);
    if (objc_msgSend(objc_msgSend(v20, "domain"), "isEqual:", NSCocoaErrorDomain)
      && [v20 code] == (id)260)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022B6AE8);
      }
      unint64_t v7 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
      {
        id v8 = [[objc_msgSend(v20, "description") UTF8String];
        *(_DWORD *)uint64_t buf = 68289538;
        int v22 = 0;
        __int16 v23 = 2082;
        uint64_t v24 = "";
        __int16 v25 = 2082;
        uint64_t v26 = a2;
        __int16 v27 = 2082;
        id v28 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"file does not exist... clearing\", \"file\":%{public, location:escape_only}s, \"error\":%{public, location:escape_only}s}", buf, 0x26u);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022B6AE8);
        }
      }
      uint64_t v9 = qword_102419538;
      BOOL result = os_signpost_enabled((os_log_t)qword_102419538);
      if (!result) {
        return result;
      }
      id v10 = [[objc_msgSend(v20, "description") UTF8String];
      *(_DWORD *)uint64_t buf = 68289538;
      int v22 = 0;
      __int16 v23 = 2082;
      uint64_t v24 = "";
      __int16 v25 = 2082;
      uint64_t v26 = a2;
      __int16 v27 = 2082;
      id v28 = v10;
      BOOL v11 = "file does not exist... clearing";
      uint64_t v12 = "{\"msg%{public}.0s\":\"file does not exist... clearing\", \"file\":%{public, location:escape_only}s, \"error"
            "\":%{public, location:escape_only}s}";
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022B6AE8);
      }
      uint64_t v17 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
      {
        id v18 = [[objc_msgSend(v20, "description") UTF8String];
        *(_DWORD *)uint64_t buf = 68289538;
        int v22 = 0;
        __int16 v23 = 2082;
        uint64_t v24 = "";
        __int16 v25 = 2082;
        uint64_t v26 = a2;
        __int16 v27 = 2082;
        id v28 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Warning Error reading file\", \"file\":%{public, location:escape_only}s, \"error\":%{public, location:escape_only}s}", buf, 0x26u);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022B6AE8);
        }
      }
      uint64_t v9 = qword_102419538;
      BOOL result = os_signpost_enabled((os_log_t)qword_102419538);
      if (!result) {
        return result;
      }
      id v19 = [[objc_msgSend(v20, "description") UTF8String];
      *(_DWORD *)uint64_t buf = 68289538;
      int v22 = 0;
      __int16 v23 = 2082;
      uint64_t v24 = "";
      __int16 v25 = 2082;
      uint64_t v26 = a2;
      __int16 v27 = 2082;
      id v28 = v19;
      BOOL v11 = "#Warning Error reading file";
      uint64_t v12 = "{\"msg%{public}.0s\":\"#Warning Error reading file\", \"file\":%{public, location:escape_only}s, \"error\":%"
            "{public, location:escape_only}s}";
    }
    uint64_t v15 = v9;
    uint32_t v16 = 38;
    goto LABEL_32;
  }
  if ((*(uint64_t (**)(uint64_t, NSData *))(*(void *)a1 + 784))(a1, v5)) {
    return 1;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022B6AE8);
  }
  int v13 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    int v22 = 0;
    __int16 v23 = 2082;
    uint64_t v24 = "";
    __int16 v25 = 2082;
    uint64_t v26 = a2;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"could not deserialize property list\", \"file\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022B6AE8);
    }
  }
  uint64_t v14 = qword_102419538;
  BOOL result = os_signpost_enabled((os_log_t)qword_102419538);
  if (result)
  {
    *(_DWORD *)uint64_t buf = 68289282;
    int v22 = 0;
    __int16 v23 = 2082;
    uint64_t v24 = "";
    __int16 v25 = 2082;
    uint64_t v26 = a2;
    BOOL v11 = "could not deserialize property list";
    uint64_t v12 = "{\"msg%{public}.0s\":\"could not deserialize property list\", \"file\":%{public, location:escape_only}s}";
    uint64_t v15 = v14;
    uint32_t v16 = 28;
LABEL_32:
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v11, v12, buf, v16);
    return 0;
  }
  return result;
}

uint64_t sub_1004CEFA0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 872))();
}

id sub_1004CEFCC(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  id v8 = +[NSURL fileURLWithPath:isDirectory:](NSURL, "fileURLWithPath:isDirectory:", +[NSString stringWithUTF8String:a2], 0);
  if (v8)
  {
    uint64_t v9 = 536870913;
    if (a4) {
      uint64_t v9 = 1;
    }
    if (a4 == 1) {
      uint64_t v10 = 1073741825;
    }
    else {
      uint64_t v10 = v9;
    }
    id v19 = 0;
    id v11 = [a3 writeToURL:v8 options:v10 error:&v19];
    if ((v11 & 1) == 0)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      uint64_t v12 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_ERROR))
      {
        id v13 = [[objc_msgSend(v19, "description") UTF8String];
        *(_DWORD *)uint64_t buf = 136446466;
        uint64_t v25 = a2;
        __int16 v26 = 2082;
        id v27 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Could not write data to disk %{public}s, %{public}s", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022B6AC8);
        }
        id v14 = [[[v19 description] UTF8String];
        int v20 = 136446466;
        uint64_t v21 = a2;
        __int16 v22 = 2082;
        id v23 = v14;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLNameValuePair::writeDataToFile(const char *, CFDataRef, CLNVPDataProtection) const", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    uint32_t v16 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 136446210;
      uint64_t v25 = a2;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "Could not create NSURL for file: %{public}s", buf, 0xCu);
    }
    id v11 = 0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      int v20 = 136446210;
      uint64_t v21 = a2;
      id v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLNameValuePair::writeDataToFile(const char *, CFDataRef, CLNVPDataProtection) const", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
      id v11 = 0;
    }
  }
  return v11;
}

id sub_1004CF388(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  uint64_t v3 = (*(uint64_t (**)(uint64_t, CFTypeRef *))(*(void *)a1 + 768))(a1, &cf);
  if (v3)
  {
    id v4 = sub_1004CEFCC(v3, a2, (void *)cf, 2);
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    double v5 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 136446210;
      uint64_t v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Could not serialize data for file %{public}s", buf, 0xCu);
    }
    id v4 = 0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      int v9 = 136446210;
      uint64_t v10 = a2;
      unint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::saveToFile(const char *) const", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
      id v4 = 0;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v4;
}

id sub_1004CF59C(uint64_t a1, uint64_t a2, int a3)
{
  CFTypeRef cf = 0;
  sub_1000E1294((uint64_t *)v12, (uint64_t)"CLNameValuePair.SaveToBinaryFile", 0);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, CFTypeRef *))(*(void *)a1 + 776))(a1, &cf);
  if (v7)
  {
    id v8 = sub_1004CEFCC(v7, a2, (void *)cf, a3);
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022B6AE8);
    }
    int v9 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      int v15 = 0;
      __int16 v16 = 2082;
      uint64_t v17 = "";
      __int16 v18 = 2082;
      uint64_t v19 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Could not serialize data\", \"file\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022B6AE8);
      }
    }
    uint64_t v10 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      int v15 = 0;
      __int16 v16 = 2082;
      uint64_t v17 = "";
      __int16 v18 = 2082;
      uint64_t v19 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Could not serialize data", "{\"msg%{public}.0s\":\"Could not serialize data\", \"file\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    id v8 = 0;
  }
  if (cf) {
    CFRelease(cf);
  }
  sub_1000E1098(v12);
  return v8;
}

void sub_1004CF7C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_1004CF7DC(uint64_t a1, const char *a2, uint64_t a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  (*(void (**)(uint64_t, CFStringRef, uint64_t))(*(void *)a1 + 880))(a1, v5, a3);

  CFRelease(v5);
}

uint64_t sub_1004CF870(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 880))();
}

uint64_t sub_1004CF89C(CFMutableDictionaryRef *a1)
{
  CFDictionaryRemoveAllValues(a1[1]);
  int v2 = (uint64_t (*)(CFMutableDictionaryRef *))*((void *)*a1 + 106);

  return v2(a1);
}

void sub_1004CF900(uint64_t a1, const __CFString *a2, unsigned int a3)
{
  if ((a3 & 0x80000000) == 0)
  {
    CFTypeRef cf = 0;
    if (!(*(unsigned int (**)(uint64_t, const __CFString *, CFTypeRef *))(*(void *)a1 + 912))(a1, a2, &cf))return; {
    CFTypeID v6 = CFGetTypeID(cf);
    }
    if (v6 == CFArrayGetTypeID())
    {
      if (CFArrayGetCount((CFArrayRef)cf) > a3)
      {
        CFArrayRemoveValueAtIndex((CFMutableArrayRef)cf, a3);
        (*(void (**)(uint64_t))(*(void *)a1 + 848))(a1);
LABEL_42:
        CFRelease(cf);
        return;
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      __int16 v18 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        sub_1000FECE0(a2, (uint64_t)__p);
        int v19 = SBYTE3(v34);
        int v20 = *(unsigned char **)__p;
        CFIndex Count = CFArrayGetCount((CFArrayRef)cf);
        __int16 v22 = __p;
        *(_DWORD *)uint64_t buf = 136446722;
        if (v19 < 0) {
          __int16 v22 = v20;
        }
        int v36 = v22;
        __int16 v37 = 1026;
        unsigned int v38 = a3;
        __int16 v39 = 2050;
        CFTypeID v40 = Count;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "key %{public}s does not have element %{public}d in array of size %{public}ld", buf, 0x1Cu);
        if (SBYTE3(v34) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_42;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      sub_1000FECE0(a2, (uint64_t)v27);
      int v23 = v28;
      uint64_t v24 = (void **)v27[0];
      CFIndex v25 = CFArrayGetCount((CFArrayRef)cf);
      __int16 v26 = v27;
      *(_DWORD *)std::string __p = 136446722;
      if (v23 < 0) {
        __int16 v26 = v24;
      }
      *(void *)&__p[4] = v26;
      __int16 v31 = 1026;
      unsigned int v32 = a3;
      __int16 v33 = 2050;
      CFTypeID v34 = v25;
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      if (v28 < 0) {
        operator delete(v27[0]);
      }
    }
    else
    {
      if (!a3)
      {
        (*(void (**)(uint64_t, const __CFString *))(*(void *)a1 + 888))(a1, a2);
        goto LABEL_42;
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      id v8 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        sub_1000FECE0(a2, (uint64_t)__p);
        int v9 = SBYTE3(v34);
        uint64_t v10 = *(unsigned char **)__p;
        CFTypeID v11 = CFGetTypeID(cf);
        uint64_t v12 = __p;
        *(_DWORD *)uint64_t buf = 136446722;
        if (v9 < 0) {
          uint64_t v12 = v10;
        }
        int v36 = v12;
        __int16 v37 = 1026;
        unsigned int v38 = a3;
        __int16 v39 = 2050;
        CFTypeID v40 = v11;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "key %{public}s does not have element %{public}d in non-array type %{public}lu", buf, 0x1Cu);
        if (SBYTE3(v34) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_42;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      sub_1000FECE0(a2, (uint64_t)v27);
      int v13 = v28;
      id v14 = (void **)v27[0];
      CFTypeID v15 = CFGetTypeID(cf);
      __int16 v16 = v27;
      *(_DWORD *)std::string __p = 136446722;
      if (v13 < 0) {
        __int16 v16 = v14;
      }
      *(void *)&__p[4] = v16;
      __int16 v31 = 1026;
      unsigned int v32 = a3;
      __int16 v33 = 2050;
      CFTypeID v34 = v15;
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      if (v28 < 0) {
        operator delete(v27[0]);
      }
    }
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNameValuePair::clearInternal(const CFStringRef, int)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
    goto LABEL_42;
  }
  uint64_t v7 = *(void (**)(void))(*(void *)a1 + 888);

  v7();
}

void sub_1004CFE90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004CFED0(CFMutableDictionaryRef *a1, const void *a2)
{
  CFDictionaryRemoveValue(a1[1], a2);
  uint64_t v3 = (uint64_t (*)(CFMutableDictionaryRef *))*((void *)*a1 + 106);

  return v3(a1);
}

void sub_1004CFF34(uint64_t a1)
{
}

void sub_1004D0094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v15 + 8) = v16;
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004D00BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = +[NSString stringWithUTF8String:a2];
  id v4 = *(uint64_t (**)(uint64_t, NSString *))(*(void *)a1 + 920);

  return v4(a1, v3);
}

uint64_t sub_1004D0138(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 920))();
}

uint64_t sub_1004D0164(uint64_t a1, const char *a2, CFTypeRef *a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  uint64_t v6 = sub_1004D01D8(a1, (uint64_t)v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

uint64_t sub_1004D01D8(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  *a3 = 0;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 904))(a1);
  if (v4 && *a3) {
    CFAutorelease(*a3);
  }
  return v4;
}

uint64_t sub_1004D0240(uint64_t a1, const char *a2, _WORD *a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  uint64_t v6 = sub_1004D02B4(a1, (uint64_t)v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

uint64_t sub_1004D02B4(uint64_t a1, uint64_t a2, _WORD *a3)
{
  CFTypeRef cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(void *)a1 + 904))(a1, a2, &cf)) {
    return 0;
  }
  *(_DWORD *)uint64_t buf = 0;
  uint64_t v6 = sub_10013E6B4(cf, buf);
  if (v6)
  {
    *a3 = *(_WORD *)buf;
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    uint64_t v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      *(_DWORD *)uint64_t buf = 138412546;
      uint64_t v18 = v8;
      __int16 v19 = 2112;
      uint64_t v20 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      int v13 = 138412546;
      uint64_t v14 = v10;
      __int16 v15 = 2112;
      uint64_t v16 = a2;
      CFTypeID v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, uint16_t &, int) const", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t sub_1004D0560(uint64_t a1, const char *a2, _WORD *a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  uint64_t v6 = sub_1004D05D4(a1, (uint64_t)v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

uint64_t sub_1004D05D4(uint64_t a1, uint64_t a2, _WORD *a3)
{
  CFTypeRef cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(void *)a1 + 904))(a1, a2, &cf)) {
    return 0;
  }
  uint64_t v6 = sub_1004D16D0(cf, a3);
  if ((v6 & 1) == 0)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    uint64_t v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      *(_DWORD *)uint64_t buf = 138412546;
      uint64_t v18 = v8;
      __int16 v19 = 2112;
      uint64_t v20 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      int v13 = 138412546;
      uint64_t v14 = v10;
      __int16 v15 = 2112;
      uint64_t v16 = a2;
      CFTypeID v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, short &, int) const", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t sub_1004D0870(uint64_t a1, const char *a2, _DWORD *a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  uint64_t v6 = sub_1004D08E4(a1, (uint64_t)v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

uint64_t sub_1004D08E4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  CFTypeRef cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(void *)a1 + 904))(a1, a2, &cf)) {
    return 0;
  }
  *(void *)uint64_t buf = 0;
  uint64_t v6 = sub_1004D1914(cf, buf);
  if (v6)
  {
    *a3 = *(_DWORD *)buf;
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    uint64_t v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      *(_DWORD *)uint64_t buf = 138412546;
      *(void *)&uint8_t buf[4] = v8;
      __int16 v18 = 2112;
      uint64_t v19 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      int v13 = 138412546;
      uint64_t v14 = v10;
      __int16 v15 = 2112;
      uint64_t v16 = a2;
      CFTypeID v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, uint32_t &, int) const", "%s\n", v11);
      if (v11 != buf) {
        free(v11);
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t sub_1004D0B90(uint64_t a1, const char *a2, void *a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  uint64_t v6 = sub_1004D0C04(a1, (uint64_t)v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

uint64_t sub_1004D0C04(uint64_t a1, uint64_t a2, void *a3)
{
  CFTypeRef cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(void *)a1 + 904))(a1, a2, &cf)) {
    return 0;
  }
  uint64_t v6 = sub_1004D1914(cf, a3);
  if ((v6 & 1) == 0)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    uint64_t v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      *(_DWORD *)uint64_t buf = 138412546;
      uint64_t v18 = v8;
      __int16 v19 = 2112;
      uint64_t v20 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      int v13 = 138412546;
      uint64_t v14 = v10;
      __int16 v15 = 2112;
      uint64_t v16 = a2;
      CFTypeID v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, int64_t &, int) const", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t sub_1004D0EA0(uint64_t a1, const char *a2, void *a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  uint64_t v6 = sub_1004D0F14(a1, (uint64_t)v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

uint64_t sub_1004D0F14(uint64_t a1, uint64_t a2, void *a3)
{
  CFTypeRef cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(void *)a1 + 904))(a1, a2, &cf)) {
    return 0;
  }
  uint64_t v6 = sub_1004D1B18(cf, a3);
  if ((v6 & 1) == 0)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    uint64_t v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      *(_DWORD *)uint64_t buf = 138412546;
      uint64_t v18 = v8;
      __int16 v19 = 2112;
      uint64_t v20 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      int v13 = 138412546;
      uint64_t v14 = v10;
      __int16 v15 = 2112;
      uint64_t v16 = a2;
      CFTypeID v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, long &, int) const", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t sub_1004D11B0(uint64_t a1, const char *a2, float *a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  double v9 = 0.0;
  uint64_t v6 = sub_1000A6A10(a1, (uint64_t)v5, &v9);
  if (v6)
  {
    float v7 = v9;
    *a3 = v7;
  }
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

float sub_1004D123C(uint64_t a1, uint64_t a2, float *a3)
{
  double v5 = 0.0;
  if (sub_1000A6A10(a1, a2, &v5))
  {
    float result = v5;
    *a3 = result;
  }
  return result;
}

BOOL sub_1004D1284(uint64_t a1, const char *a2, std::string *a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  BOOL v6 = sub_1000A7CF8(a1, (uint64_t)v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

uint64_t sub_1004D12F8(uint64_t a1, const char *a2, CFTypeRef *a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  uint64_t v6 = sub_10013F3C8(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_1004D136C(uint64_t a1, const char *a2, const UInt8 **a3, _DWORD *a4, uint64_t a5)
{
  CFStringRef v9 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  BOOL v10 = sub_1004D13EC(a1, (uint64_t)v9, a3, a4, a5);
  CFRelease(v9);
  return v10;
}

BOOL sub_1004D13EC(uint64_t a1, uint64_t a2, const UInt8 **a3, _DWORD *a4, uint64_t a5)
{
  CFTypeRef cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, uint64_t))(*(void *)a1 + 904))(a1, a2, &cf, a5))return 0; {
  BOOL v9 = sub_1004D2334(cf, a3, a4);
  }
  if (!v9)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    BOOL v10 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      *(_DWORD *)uint64_t buf = 138412546;
      uint64_t v21 = v11;
      __int16 v22 = 2112;
      uint64_t v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840))(a1);
      int v16 = 138412546;
      uint64_t v17 = v13;
      __int16 v18 = 2112;
      uint64_t v19 = a2;
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, const char *&, unsigned int &, int) const", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
  }
  CFRelease(cf);
  return v9;
}

uint64_t sub_1004D1690(const void *a1, _WORD *a2)
{
  int v4 = 0;
  uint64_t result = sub_10013E6B4(a1, &v4);
  if (result) {
    *a2 = v4;
  }
  return result;
}

uint64_t sub_1004D16D0(const void *a1, _WORD *a2)
{
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFNumberGetTypeID())
  {
    buf[0] = 0;
    CFTypeID v9 = CFGetTypeID(a1);
    CFTypeID TypeID = CFBooleanGetTypeID();
    uint64_t result = 0;
    if (v9 != TypeID) {
      return result;
    }
    uint64_t result = sub_1000D2C98(a1, (BOOL *)buf);
    if (!result) {
      return result;
    }
    *a2 = buf[0];
    return 1;
  }
  if (CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt16Type, a2)) {
    return 1;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022B6AC8);
  }
  CFStringRef v5 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "could not get value", buf, 2u);
  }
  BOOL v6 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, short &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
    return 0;
  }
  return result;
}

uint64_t sub_1004D18D4(const void *a1, _DWORD *a2)
{
  uint64_t v4 = 0;
  uint64_t result = sub_1004D1914(a1, &v4);
  if (result) {
    *a2 = v4;
  }
  return result;
}

uint64_t sub_1004D1914(const void *a1, void *a2)
{
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFNumberGetTypeID())
  {
    buf[0] = 0;
    CFTypeID v9 = CFGetTypeID(a1);
    CFTypeID TypeID = CFBooleanGetTypeID();
    uint64_t result = 0;
    if (v9 != TypeID) {
      return result;
    }
    uint64_t result = sub_1000D2C98(a1, (BOOL *)buf);
    if (!result) {
      return result;
    }
    *a2 = buf[0];
    return 1;
  }
  if (CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt64Type, a2)) {
    return 1;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022B6AC8);
  }
  CFStringRef v5 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "could not get value", buf, 2u);
  }
  BOOL v6 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, int64_t &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
    return 0;
  }
  return result;
}

uint64_t sub_1004D1B18(const void *a1, void *a2)
{
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 != CFNumberGetTypeID())
  {
    buf[0] = 0;
    CFTypeID v9 = CFGetTypeID(a1);
    CFTypeID TypeID = CFBooleanGetTypeID();
    uint64_t result = 0;
    if (v9 != TypeID) {
      return result;
    }
    uint64_t result = sub_1000D2C98(a1, (BOOL *)buf);
    if (!result) {
      return result;
    }
    *a2 = buf[0];
    return 1;
  }
  if (CFNumberGetValue((CFNumberRef)a1, kCFNumberLongType, a2)) {
    return 1;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022B6AC8);
  }
  CFStringRef v5 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "could not get value", buf, 2u);
  }
  BOOL v6 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, long &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
    return 0;
  }
  return result;
}

BOOL sub_1004D1D1C(uint64_t a1, const __CFString *a2, CFTypeRef *a3)
{
  CFTypeRef cf = 0;
  if (!(*(unsigned int (**)(uint64_t, const __CFString *, CFTypeRef *))(*(void *)a1 + 912))(a1, a2, &cf)) {
    return 0;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  BOOL v6 = v5 == CFArrayGetTypeID();
  BOOL v7 = v6;
  if (v6)
  {
    *a3 = cf;
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    uint64_t v8 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1000FECE0(a2, (uint64_t)__p);
      CFTypeID v9 = v23 >= 0 ? __p : *(unsigned char **)__p;
      CFTypeID v10 = CFGetTypeID(cf);
      CFTypeID TypeID = CFArrayGetTypeID();
      *(_DWORD *)uint64_t buf = 136446722;
      __int16 v26 = v9;
      __int16 v27 = 2050;
      CFTypeID v28 = v10;
      __int16 v29 = 2050;
      CFTypeID v30 = TypeID;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "type IDs do not match for key %{public}s - %{public}lu vs %{public}lu", buf, 0x20u);
      if (SHIBYTE(v23) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      uint64_t v13 = v17;
      sub_1000FECE0(a2, (uint64_t)v17);
      if (v18 < 0) {
        uint64_t v13 = (void **)v17[0];
      }
      CFTypeID v14 = CFGetTypeID(cf);
      CFTypeID v15 = CFArrayGetTypeID();
      *(_DWORD *)std::string __p = 136446722;
      *(void *)&__p[4] = v13;
      __int16 v21 = 2050;
      CFTypeID v22 = v14;
      __int16 v23 = 2050;
      CFTypeID v24 = v15;
      int v16 = (char *)_os_log_send_and_compose_impl();
      if (v18 < 0) {
        operator delete(v17[0]);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, CFArrayRef &) const", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
  }
  CFAutorelease(cf);
  return v7;
}

void sub_1004D1FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1004D2028(uint64_t a1, const __CFString *a2, CFTypeRef *a3)
{
  CFTypeRef cf = 0;
  if (!(*(unsigned int (**)(uint64_t, const __CFString *, CFTypeRef *))(*(void *)a1 + 904))(a1, a2, &cf)) {
    return 0;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  BOOL v6 = v5 == CFDataGetTypeID();
  BOOL v7 = v6;
  if (v6)
  {
    *a3 = cf;
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    uint64_t v8 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1000FECE0(a2, (uint64_t)__p);
      CFTypeID v9 = v23 >= 0 ? __p : *(unsigned char **)__p;
      CFTypeID v10 = CFGetTypeID(cf);
      CFTypeID TypeID = CFDataGetTypeID();
      *(_DWORD *)uint64_t buf = 136446722;
      __int16 v26 = v9;
      __int16 v27 = 2050;
      CFTypeID v28 = v10;
      __int16 v29 = 2050;
      CFTypeID v30 = TypeID;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "type IDs do not match for key %{public}s - %{public}lu vs %{public}lu", buf, 0x20u);
      if (SHIBYTE(v23) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      uint64_t v13 = v17;
      sub_1000FECE0(a2, (uint64_t)v17);
      if (v18 < 0) {
        uint64_t v13 = (void **)v17[0];
      }
      CFTypeID v14 = CFGetTypeID(cf);
      CFTypeID v15 = CFDataGetTypeID();
      *(_DWORD *)std::string __p = 136446722;
      *(void *)&__p[4] = v13;
      __int16 v21 = 2050;
      CFTypeID v22 = v14;
      __int16 v23 = 2050;
      CFTypeID v24 = v15;
      int v16 = (char *)_os_log_send_and_compose_impl();
      if (v18 < 0) {
        operator delete(v17[0]);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, CFDataRef &, int) const", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
  }
  CFAutorelease(cf);
  return v7;
}

void sub_1004D22FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1004D2334(const void *a1, const UInt8 **a2, _DWORD *a3)
{
  CFTypeID v6 = CFGetTypeID(a1);
  CFTypeID TypeID = CFDataGetTypeID();
  if (v6 == TypeID)
  {
    *a2 = CFDataGetBytePtr((CFDataRef)a1);
    *a3 = CFDataGetLength((CFDataRef)a1);
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    uint64_t v8 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134349312;
      CFTypeID v12 = CFGetTypeID(a1);
      __int16 v13 = 2050;
      CFTypeID v14 = CFDataGetTypeID();
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "type IDs do not match - %{public}lu vs %{public}lu", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      CFGetTypeID(a1);
      CFDataGetTypeID();
      CFTypeID v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, const char *&, unsigned int &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  return v6 == TypeID;
}

BOOL sub_1004D2568(uint64_t a1, const void *a2)
{
  return CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 8), a2) != 0;
}

uint64_t sub_1004D258C(uint64_t a1)
{
  return 1;
}

BOOL sub_1004D25D0(uint64_t a1, const char *a2, unsigned __int16 *a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  BOOL v6 = sub_1004D263C(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_1004D263C(uint64_t a1, const __CFString *a2, unsigned __int16 *a3)
{
  LODWORD(valuePtr[0]) = *a3;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, valuePtr);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(void *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    BOOL v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1000FECE0(a2, (uint64_t)valuePtr);
      BOOL v7 = v16 >= 0 ? valuePtr : (void **)valuePtr[0];
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0) {
        operator delete(valuePtr[0]);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(valuePtr, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      sub_1000FECE0(a2, (uint64_t)buf);
      if (v12 >= 0) {
        CFTypeID v9 = buf;
      }
      else {
        CFTypeID v9 = *(unsigned char **)buf;
      }
      int v13 = 136446210;
      CFTypeID v14 = v9;
      CFTypeID v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const uint16_t &)", "%s\n", v10);
      if (v10 != (char *)valuePtr) {
        free(v10);
      }
    }
  }
  return v5 != 0;
}

BOOL sub_1004D28D0(uint64_t a1, const char *a2, const void *a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  BOOL v6 = sub_1004D293C(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_1004D293C(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(void *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    BOOL v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1000FECE0(a2, (uint64_t)__p);
      BOOL v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      sub_1000FECE0(a2, (uint64_t)buf);
      if (v12 >= 0) {
        CFTypeID v9 = buf;
      }
      else {
        CFTypeID v9 = *(unsigned char **)buf;
      }
      int v13 = 136446210;
      CFTypeID v14 = v9;
      CFTypeID v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const short &)", "%s\n", v10);
      if (v10 != (char *)__p) {
        free(v10);
      }
    }
  }
  return v5 != 0;
}

BOOL sub_1004D2BC4(uint64_t a1, const char *a2, unsigned int *a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  BOOL v6 = sub_1004D2C30(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_1004D2C30(uint64_t a1, const __CFString *a2, unsigned int *a3)
{
  valuePtr[0] = (void *)*a3;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, valuePtr);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(void *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    BOOL v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1000FECE0(a2, (uint64_t)valuePtr);
      BOOL v7 = v16 >= 0 ? valuePtr : (void **)valuePtr[0];
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0) {
        operator delete(valuePtr[0]);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(valuePtr, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      sub_1000FECE0(a2, (uint64_t)buf);
      if (v12 >= 0) {
        CFTypeID v9 = buf;
      }
      else {
        CFTypeID v9 = *(unsigned char **)buf;
      }
      int v13 = 136446210;
      CFTypeID v14 = v9;
      CFTypeID v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const uint32_t &)", "%s\n", v10);
      if (v10 != (char *)valuePtr) {
        free(v10);
      }
    }
  }
  return v5 != 0;
}

BOOL sub_1004D2EC4(uint64_t a1, const char *a2, const void *a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  BOOL v6 = sub_1004D2F30(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_1004D2F30(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(void *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    BOOL v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1000FECE0(a2, (uint64_t)__p);
      BOOL v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      sub_1000FECE0(a2, (uint64_t)buf);
      if (v12 >= 0) {
        CFTypeID v9 = buf;
      }
      else {
        CFTypeID v9 = *(unsigned char **)buf;
      }
      int v13 = 136446210;
      CFTypeID v14 = v9;
      CFTypeID v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const int64_t &)", "%s\n", v10);
      if (v10 != (char *)__p) {
        free(v10);
      }
    }
  }
  return v5 != 0;
}

BOOL sub_1004D31B8(uint64_t a1, const char *a2, const void *a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  BOOL v6 = sub_1004D3224(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_1004D3224(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(void *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    BOOL v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1000FECE0(a2, (uint64_t)__p);
      BOOL v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      sub_1000FECE0(a2, (uint64_t)buf);
      if (v12 >= 0) {
        CFTypeID v9 = buf;
      }
      else {
        CFTypeID v9 = *(unsigned char **)buf;
      }
      int v13 = 136446210;
      CFTypeID v14 = v9;
      CFTypeID v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const long &)", "%s\n", v10);
      if (v10 != (char *)__p) {
        free(v10);
      }
    }
  }
  return v5 != 0;
}

BOOL sub_1004D34AC(uint64_t a1, const char *a2, char *a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  BOOL v6 = sub_1004D3518(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_1004D3518(uint64_t a1, const __CFString *a2, char *cStr)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, cStr, 0x8000100u);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFStringRef))(*(void *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    BOOL v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1000FECE0(a2, (uint64_t)__p);
      BOOL v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      sub_1000FECE0(a2, (uint64_t)buf);
      if (v12 >= 0) {
        CFTypeID v9 = buf;
      }
      else {
        CFTypeID v9 = *(unsigned char **)buf;
      }
      int v13 = 136446210;
      CFTypeID v14 = v9;
      CFTypeID v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const char *)", "%s\n", v10);
      if (v10 != (char *)__p) {
        free(v10);
      }
    }
  }
  return v5 != 0;
}

BOOL sub_1004D37A8(uint64_t a1, const char *a2, char *a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  if (a3[23] >= 0) {
    BOOL v6 = a3;
  }
  else {
    BOOL v6 = *(char **)a3;
  }
  BOOL v7 = sub_1004D3518(a1, v5, v6);
  if (v5) {
    CFRelease(v5);
  }
  return v7;
}

BOOL sub_1004D3820(uint64_t a1, const __CFString *a2, char *a3)
{
  if (a3[23] < 0) {
    a3 = *(char **)a3;
  }
  return sub_1004D3518(a1, a2, a3);
}

uint64_t sub_1004D3834(uint64_t a1)
{
  return 1;
}

BOOL sub_1004D3878(uint64_t a1, const char *a2, uint64_t a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  BOOL v6 = sub_1004D38E4(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_1004D38E4(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  CFDictionaryRef Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, *(CFDictionaryRef *)(a3 + 8));
  if (Copy)
  {
    (*(void (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(void *)a1 + 896))(a1, a2, Copy);
    CFRelease(Copy);
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    BOOL v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1000FECE0(a2, (uint64_t)__p);
      BOOL v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      sub_1000FECE0(a2, (uint64_t)buf);
      if (v12 >= 0) {
        CFTypeID v9 = buf;
      }
      else {
        CFTypeID v9 = *(unsigned char **)buf;
      }
      int v13 = 136446210;
      CFTypeID v14 = v9;
      CFTypeID v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const CLNameValuePair &)", "%s\n", v10);
      if (v10 != (char *)__p) {
        free(v10);
      }
    }
  }
  return Copy != 0;
}

CFNumberRef sub_1004D3B6C(unsigned __int16 *a1)
{
  int valuePtr = *a1;
  return CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
}

CFNumberRef sub_1004D3BA8(void *valuePtr)
{
  return CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, valuePtr);
}

CFNumberRef sub_1004D3BC0(unsigned int *a1)
{
  uint64_t valuePtr = *a1;
  return CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, &valuePtr);
}

CFNumberRef sub_1004D3BFC(void *valuePtr)
{
  return CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat64Type, valuePtr);
}

uint64_t sub_1004D3C14(uint64_t a1, const char *a2, uint64_t a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  (*(void (**)(uint64_t, CFStringRef, uint64_t))(*(void *)a1 + 928))(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return 1;
}

uint64_t sub_1004D3CA4(uint64_t a1)
{
  return 1;
}

BOOL sub_1004D3CE8(uint64_t a1, const char *a2, unsigned char *a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  BOOL v6 = sub_1004D3D54(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_1004D3D54(uint64_t a1, const __CFString *a2, unsigned char *a3)
{
  CFStringRef v5 = (CFTypeRef *)&kCFBooleanTrue;
  if (!*a3) {
    CFStringRef v5 = (CFTypeRef *)&kCFBooleanFalse;
  }
  CFTypeRef v6 = *v5;
  CFRetain(*v5);
  if (v6)
  {
    (*(void (**)(uint64_t, const __CFString *, CFTypeRef))(*(void *)a1 + 928))(a1, a2, v6);
    CFRelease(v6);
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    BOOL v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1000FECE0(a2, (uint64_t)__p);
      uint64_t v8 = v17 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      sub_1000FECE0(a2, (uint64_t)buf);
      if (v13 >= 0) {
        CFTypeID v10 = buf;
      }
      else {
        CFTypeID v10 = *(unsigned char **)buf;
      }
      int v14 = 136446210;
      CFTypeID v15 = v10;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      if (v13 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const BOOL &)", "%s\n", v11);
      if (v11 != (char *)__p) {
        free(v11);
      }
    }
  }
  return v6 != 0;
}

BOOL sub_1004D3FEC(uint64_t a1, const char *a2, unsigned __int16 *a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  BOOL v6 = sub_1004D4058(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_1004D4058(uint64_t a1, const __CFString *a2, unsigned __int16 *a3)
{
  LODWORD(valuePtr[0]) = *a3;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, valuePtr);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(void *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    BOOL v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1000FECE0(a2, (uint64_t)valuePtr);
      BOOL v7 = v16 >= 0 ? valuePtr : (void **)valuePtr[0];
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0) {
        operator delete(valuePtr[0]);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(valuePtr, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      sub_1000FECE0(a2, (uint64_t)buf);
      if (v12 >= 0) {
        CFTypeID v9 = buf;
      }
      else {
        CFTypeID v9 = *(unsigned char **)buf;
      }
      int v13 = 136446210;
      int v14 = v9;
      CFTypeID v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const uint16_t &)", "%s\n", v10);
      if (v10 != (char *)valuePtr) {
        free(v10);
      }
    }
  }
  return v5 != 0;
}

BOOL sub_1004D42EC(uint64_t a1, const char *a2, const void *a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  BOOL v6 = sub_1004D4358(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_1004D4358(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(void *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    BOOL v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1000FECE0(a2, (uint64_t)__p);
      BOOL v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      sub_1000FECE0(a2, (uint64_t)buf);
      if (v12 >= 0) {
        CFTypeID v9 = buf;
      }
      else {
        CFTypeID v9 = *(unsigned char **)buf;
      }
      int v13 = 136446210;
      int v14 = v9;
      CFTypeID v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const short &)", "%s\n", v10);
      if (v10 != (char *)__p) {
        free(v10);
      }
    }
  }
  return v5 != 0;
}

BOOL sub_1004D45E0(uint64_t a1, const char *a2, unsigned int *a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  BOOL v6 = sub_1004D464C(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_1004D464C(uint64_t a1, const __CFString *a2, unsigned int *a3)
{
  valuePtr[0] = (void *)*a3;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, valuePtr);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(void *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    BOOL v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1000FECE0(a2, (uint64_t)valuePtr);
      BOOL v7 = v16 >= 0 ? valuePtr : (void **)valuePtr[0];
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0) {
        operator delete(valuePtr[0]);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(valuePtr, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      sub_1000FECE0(a2, (uint64_t)buf);
      if (v12 >= 0) {
        CFTypeID v9 = buf;
      }
      else {
        CFTypeID v9 = *(unsigned char **)buf;
      }
      int v13 = 136446210;
      int v14 = v9;
      CFTypeID v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const uint32_t &)", "%s\n", v10);
      if (v10 != (char *)valuePtr) {
        free(v10);
      }
    }
  }
  return v5 != 0;
}

BOOL sub_1004D48E0(uint64_t a1, const char *a2, const void *a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  BOOL v6 = sub_1004D494C(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_1004D494C(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(void *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    BOOL v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1000FECE0(a2, (uint64_t)__p);
      BOOL v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      sub_1000FECE0(a2, (uint64_t)buf);
      if (v12 >= 0) {
        CFTypeID v9 = buf;
      }
      else {
        CFTypeID v9 = *(unsigned char **)buf;
      }
      int v13 = 136446210;
      int v14 = v9;
      CFTypeID v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const int64_t &)", "%s\n", v10);
      if (v10 != (char *)__p) {
        free(v10);
      }
    }
  }
  return v5 != 0;
}

BOOL sub_1004D4BD4(uint64_t a1, const char *a2, const void *a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  BOOL v6 = sub_1004D4C40(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_1004D4C40(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(void *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    BOOL v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1000FECE0(a2, (uint64_t)__p);
      BOOL v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      sub_1000FECE0(a2, (uint64_t)buf);
      if (v12 >= 0) {
        CFTypeID v9 = buf;
      }
      else {
        CFTypeID v9 = *(unsigned char **)buf;
      }
      int v13 = 136446210;
      int v14 = v9;
      CFTypeID v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const int &)", "%s\n", v10);
      if (v10 != (char *)__p) {
        free(v10);
      }
    }
  }
  return v5 != 0;
}

BOOL sub_1004D4EC8(uint64_t a1, const char *a2, const void *a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  BOOL v6 = sub_1004D4F34(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_1004D4F34(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(void *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    BOOL v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1000FECE0(a2, (uint64_t)__p);
      BOOL v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      sub_1000FECE0(a2, (uint64_t)buf);
      if (v12 >= 0) {
        CFTypeID v9 = buf;
      }
      else {
        CFTypeID v9 = *(unsigned char **)buf;
      }
      int v13 = 136446210;
      int v14 = v9;
      CFTypeID v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const long &)", "%s\n", v10);
      if (v10 != (char *)__p) {
        free(v10);
      }
    }
  }
  return v5 != 0;
}

BOOL sub_1004D51BC(uint64_t a1, const char *a2, const void *a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  BOOL v6 = sub_1004D5228(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_1004D5228(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat64Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(void *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    BOOL v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1000FECE0(a2, (uint64_t)__p);
      BOOL v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      sub_1000FECE0(a2, (uint64_t)buf);
      if (v12 >= 0) {
        CFTypeID v9 = buf;
      }
      else {
        CFTypeID v9 = *(unsigned char **)buf;
      }
      int v13 = 136446210;
      int v14 = v9;
      CFTypeID v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const double &)", "%s\n", v10);
      if (v10 != (char *)__p) {
        free(v10);
      }
    }
  }
  return v5 != 0;
}

BOOL sub_1004D54B0(uint64_t a1, const char *a2, char *a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  BOOL v6 = sub_1004D551C(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_1004D551C(uint64_t a1, const __CFString *a2, char *cStr)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, cStr, 0x8000100u);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFStringRef))(*(void *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    BOOL v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1000FECE0(a2, (uint64_t)__p);
      BOOL v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      sub_1000FECE0(a2, (uint64_t)buf);
      if (v12 >= 0) {
        CFTypeID v9 = buf;
      }
      else {
        CFTypeID v9 = *(unsigned char **)buf;
      }
      int v13 = 136446210;
      int v14 = v9;
      CFTypeID v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const char *)", "%s\n", v10);
      if (v10 != (char *)__p) {
        free(v10);
      }
    }
  }
  return v5 != 0;
}

BOOL sub_1004D57AC(uint64_t a1, const char *a2, char *a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  if (a3[23] >= 0) {
    BOOL v6 = a3;
  }
  else {
    BOOL v6 = *(char **)a3;
  }
  BOOL v7 = sub_1004D551C(a1, v5, v6);
  if (v5) {
    CFRelease(v5);
  }
  return v7;
}

BOOL sub_1004D5824(uint64_t a1, const __CFString *a2, char *a3)
{
  if (a3[23] < 0) {
    a3 = *(char **)a3;
  }
  return sub_1004D551C(a1, a2, a3);
}

uint64_t sub_1004D5838(uint64_t a1, const char *a2, uint64_t a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  (*(void (**)(uint64_t, CFStringRef, uint64_t))(*(void *)a1 + 928))(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return 1;
}

uint64_t sub_1004D58C8(uint64_t a1)
{
  return 1;
}

BOOL sub_1004D590C(uint64_t a1, const char *a2, uint64_t a3)
{
  CFStringRef v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  BOOL v6 = sub_1004D5978(a1, v5, a3);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

BOOL sub_1004D5978(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  CFDictionaryRef Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, *(CFDictionaryRef *)(a3 + 8));
  if (Copy)
  {
    (*(void (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(void *)a1 + 928))(a1, a2, Copy);
    CFRelease(Copy);
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    BOOL v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1000FECE0(a2, (uint64_t)__p);
      BOOL v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      sub_1000FECE0(a2, (uint64_t)buf);
      if (v12 >= 0) {
        CFTypeID v9 = buf;
      }
      else {
        CFTypeID v9 = *(unsigned char **)buf;
      }
      int v13 = 136446210;
      int v14 = v9;
      CFTypeID v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const CLNameValuePair &)", "%s\n", v10);
      if (v10 != (char *)__p) {
        free(v10);
      }
    }
  }
  return Copy != 0;
}

uint64_t sub_1004D5C00(uint64_t a1, uint64_t a2, const void *a3)
{
  CFTypeRef arg = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(void *)a1 + 912))(a1, a2, &arg))
  {
    CFAutorelease(arg);
    CFTypeID v6 = CFGetTypeID(arg);
    if (v6 == CFArrayGetTypeID())
    {
      Mutable = (void *)arg;
    }
    else
    {
      Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
      CFAutorelease(Mutable);
      CFArrayAppendValue((CFMutableArrayRef)Mutable, arg);
    }
    CFTypeID v8 = CFGetTypeID(a3);
    if (v8 == CFArrayGetTypeID())
    {
      v11.length = CFArrayGetCount((CFArrayRef)a3);
      v11.location = 0;
      CFArrayAppendArray((CFMutableArrayRef)Mutable, (CFArrayRef)a3, v11);
    }
    else
    {
      CFArrayAppendValue((CFMutableArrayRef)Mutable, a3);
    }
  }
  else
  {
    Mutable = (void *)a3;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 896))(a1, a2, Mutable);
}

uint64_t sub_1004D5D54(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 856))();
}

CFIndex sub_1004D5D80(uint64_t a1)
{
  return CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 8));
}

uint64_t sub_1004D5D9C(uint64_t a1, const char *a2)
{
  CFStringRef v3 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, CFStringRef))(*(void *)a1 + 864))(a1, v3);
  CFRelease(v3);
  return v4;
}

uint64_t sub_1004D5E1C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 864))();
}

uint64_t sub_1004D5E48(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(void *)a1 + 912))(a1, a2, &cf)) {
    return 0xFFFFFFFFLL;
  }
  CFTypeID v2 = CFGetTypeID(cf);
  if (v2 == CFArrayGetTypeID()) {
    CFIndex Count = CFArrayGetCount((CFArrayRef)cf);
  }
  else {
    CFIndex Count = 1;
  }
  CFRelease(cf);
  return Count;
}

BOOL sub_1004D5EE4(uint64_t a1)
{
  return (*(int (**)(uint64_t))(*(void *)a1 + 856))(a1) < 1;
}

BOOL sub_1004D5F2C(uint64_t a1, const char *a2)
{
  return (int)sub_1004D5D9C(a1, a2) < 1;
}

BOOL sub_1004D5F4C(uint64_t a1)
{
  return (*(int (**)(uint64_t))(*(void *)a1 + 864))(a1) < 1;
}

BOOL sub_1004D5F94(uint64_t a1, CFDataRef *a2)
{
  CFDataRef Data = CFPropertyListCreateData(kCFAllocatorDefault, *(CFPropertyListRef *)(a1 + 8), kCFPropertyListXMLFormat_v1_0, 0, 0);
  *a2 = Data;
  return Data != 0;
}

uint64_t sub_1004D5FE4(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v4 = CFWriteStreamCreateWithAllocatedBuffers(kCFAllocatorDefault, kCFAllocatorDefault);
  CFErrorRef error = 0;
  if (v4)
  {
    CFStringRef v5 = v4;
    if (!CFWriteStreamOpen(v4))
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      CFTypeID v9 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "could not open write stream", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_35;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      *(_WORD *)uint64_t v19 = 0;
      CFTypeID v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::serializeBinary(CFDataRef *) const", "%s\n", v10);
      if (v10 == (char *)buf) {
        goto LABEL_35;
      }
LABEL_51:
      free(v10);
LABEL_35:
      uint64_t v7 = 0;
LABEL_36:
      CFRelease(v5);
      if (error) {
        CFRelease(error);
      }
      return v7;
    }
    CFIndex v6 = CFPropertyListWrite(*(CFPropertyListRef *)(a1 + 8), v5, kCFPropertyListBinaryFormat_v1_0, 0, &error);
    if (!error && v6)
    {
      *a2 = CFWriteStreamCopyProperty(v5, kCFStreamPropertyDataWritten);
      CFWriteStreamClose(v5);
      uint64_t v7 = 1;
      goto LABEL_36;
    }
    if (error)
    {
      CFIndex Code = CFErrorGetCode(error);
      if (error)
      {
        CFStringRef Domain = CFErrorGetDomain(error);
        goto LABEL_26;
      }
    }
    else
    {
      CFIndex Code = 0;
    }
    CFStringRef Domain = @"unknown error";
LABEL_26:
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    int v13 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1000FECE0(Domain, (uint64_t)buf);
      int v14 = v28 >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)uint64_t v19 = 134349314;
      *(void *)&void v19[4] = Code;
      __int16 v20 = 2082;
      __int16 v21 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "could not write data, error code, %{public}ld, error domain, %{public}s", v19, 0x16u);
      if (v28 < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_35;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    sub_1000FECE0(Domain, (uint64_t)v19);
    if (v22 >= 0) {
      char v17 = v19;
    }
    else {
      char v17 = *(unsigned char **)v19;
    }
    int v23 = 134349314;
    CFIndex v24 = Code;
    __int16 v25 = 2082;
    __int16 v26 = v17;
    CFTypeID v10 = (char *)_os_log_send_and_compose_impl();
    if (v22 < 0) {
      operator delete(*(void **)v19);
    }
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::serializeBinary(CFDataRef *) const", "%s\n", v10);
    if (v10 == (char *)buf) {
      goto LABEL_35;
    }
    goto LABEL_51;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022B6AC8);
  }
  CFTypeID v8 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "could not create write stream", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    *(_WORD *)uint64_t v19 = 0;
    char v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::serializeBinary(CFDataRef *) const", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  return 0;
}

BOOL sub_1004D653C(void *a1, const __CFData *a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  CFErrorRef error = 0;
  CFPropertyListRef v5 = CFPropertyListCreateWithData(kCFAllocatorDefault, a2, 1uLL, 0, &error);
  if (v5)
  {
    CFIndex v6 = (const void *)a1[1];
    if (v6) {
      CFRelease(v6);
    }
    a1[1] = v5;
    (*(void (**)(void *))(*a1 + 848))(a1);
    goto LABEL_21;
  }
  if (!error)
  {
    CFIndex Code = 0;
    goto LABEL_9;
  }
  CFIndex Code = CFErrorGetCode(error);
  if (!error)
  {
LABEL_9:
    CFStringRef Domain = @"unknown error";
    goto LABEL_10;
  }
  CFStringRef Domain = CFErrorGetDomain(error);
LABEL_10:
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022B6AC8);
  }
  CFTypeID v9 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    if (Domain)
    {
      sub_1000FECE0(Domain, (uint64_t)__p);
      if (v24 >= 0) {
        CFTypeID v10 = __p;
      }
      else {
        CFTypeID v10 = (void **)__p[0];
      }
      *(_DWORD *)uint64_t buf = 134349314;
      *(void *)&uint8_t buf[4] = Code;
      __int16 v16 = 2082;
      char v17 = (const char *)v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "could not create intermediate property list - %{public}ld (%{public}s)", buf, 0x16u);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(_DWORD *)uint64_t buf = 134349314;
      *(void *)&uint8_t buf[4] = Code;
      __int16 v16 = 2082;
      char v17 = "unknown error";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "could not create intermediate property list - %{public}ld (%{public}s)", buf, 0x16u);
    }
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    if (Domain)
    {
      sub_1000FECE0(Domain, (uint64_t)buf);
      if (v18 >= 0) {
        char v12 = buf;
      }
      else {
        char v12 = *(const char **)buf;
      }
    }
    else
    {
      char v12 = "unknown error";
    }
    int v19 = 134349314;
    CFIndex v20 = Code;
    __int16 v21 = 2082;
    char v22 = v12;
    int v13 = (char *)_os_log_send_and_compose_impl();
    if (Domain && v18 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::deserialize(const CFDataRef)", "%s\n", v13);
    if (v13 != (char *)__p) {
      free(v13);
    }
  }
LABEL_21:
  if (error) {
    CFRelease(error);
  }

  return v5 != 0;
}

void sub_1004D68A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004D68E0(uint64_t a1)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v6 = 0;
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 800))(a1, __p);
  if (qword_102419640 != -1) {
    dispatch_once(&qword_102419640, &stru_1022B6B08);
  }
  uint64_t v1 = qword_102419648;
  if (os_log_type_enabled((os_log_t)qword_102419648, OS_LOG_TYPE_DEBUG))
  {
    CFTypeID v2 = __p;
    if (v6 < 0) {
      CFTypeID v2 = (void **)__p[0];
    }
    *(_DWORD *)uint64_t buf = 136315138;
    CFTypeID v10 = v2;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419640 != -1) {
      dispatch_once(&qword_102419640, &stru_1022B6B08);
    }
    CFStringRef v3 = __p;
    if (v6 < 0) {
      CFStringRef v3 = (void **)__p[0];
    }
    int v7 = 136315138;
    CFTypeID v8 = v3;
    id v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNameValuePair::print() const", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1004D6AF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004D6B10(uint64_t a1, std::string *this)
{
  CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 8);
  if (v4 && CFDictionaryGetCount(v4))
  {
    memset(&context, 0, sizeof(context));
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 8), (CFDictionaryApplierFunction)sub_1004D6BD4, &context);
    std::string::operator=(this, &context);
    if (SHIBYTE(context.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(context.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::assign(this, "<empty>\n");
  }
}

void sub_1004D6BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004D6BD4(const __CFString *a1, const __CFString *a2, std::string *a3)
{
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 == CFStringGetTypeID())
  {
    memset(&__p, 0, sizeof(__p));
    sub_10013D274(a1, &__p);
    CFTypeID v7 = CFGetTypeID(a2);
    if (v7 == CFDictionaryGetTypeID())
    {
      int v8 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      std::string::size_type v9 = __p.__r_.__value_.__r.__words[0];
      CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)a2);
      uint64_t p_p = &__p;
      if (v8 < 0) {
        uint64_t p_p = (std::string *)v9;
      }
      snprintf(__str, 0x100uLL, "%s = <dictionary (%ld entries)>:\n", (const char *)p_p, Count);
      std::string::append(a3, __str);
      CFDictionaryApplyFunction((CFDictionaryRef)a2, (CFDictionaryApplierFunction)sub_1004D6BD4, a3);
    }
    else
    {
      CFTypeID v14 = CFGetTypeID(a2);
      if (v14 == CFArrayGetTypeID())
      {
        v15.length = CFArrayGetCount((CFArrayRef)a2);
        __int16 v16 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          __int16 v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_OWORD *)&context.__r_.__value_.__l.__data_ = (unint64_t)v16;
        context.__r_.__value_.__r.__words[2] = (std::string::size_type)a3;
        v15.location = 0;
        CFArrayApplyFunction((CFArrayRef)a2, v15, (CFArrayApplierFunction)sub_1004D7A08, &context);
      }
      else
      {
        CFTypeID v17 = CFGetTypeID(a2);
        if (v17 == CFStringGetTypeID())
        {
          memset(&context, 0, sizeof(context));
          if (sub_10013D274(a2, &context))
          {
            char v18 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              char v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            p_std::string context = &context;
            if ((context.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              p_std::string context = (std::string *)context.__r_.__value_.__r.__words[0];
            }
            snprintf(__str, 0x100uLL, "%s = %s\n", (const char *)v18, (const char *)p_context);
          }
          std::string::append(a3, __str);
          if (SHIBYTE(context.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(context.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          CFTypeID v20 = CFGetTypeID(a2);
          if (v20 == CFNumberGetTypeID())
          {
            context.__r_.__value_.__r.__words[0] = 0;
            if (sub_1000A6DD8(a2, &context))
            {
              __int16 v21 = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                __int16 v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              snprintf(__str, 0x100uLL, "%s = %0.6f\n", (const char *)v21, *(double *)&context.__r_.__value_.__l.__data_);
            }
            std::string::append(a3, __str);
          }
          else
          {
            CFTypeID v22 = CFGetTypeID(a2);
            if (v22 == CFBooleanGetTypeID())
            {
              CFBooleanGetValue((CFBooleanRef)a2);
              snprintf(__str, 0x100uLL, "%s = %d\n");
            }
            else
            {
              CFGetTypeID(a2);
              snprintf(__str, 0x100uLL, "%s = <unhandled value type %lu>\n");
            }
            std::string::append(a3, __str);
          }
        }
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    CFTypeID v12 = CFGetTypeID(a1);
    CFTypeID TypeID = CFStringGetTypeID();
    snprintf(__str, 0x100uLL, "type ID does not match - %lu vs %lu\n", v12, TypeID);
    std::string::append(a3, __str);
  }
}

void sub_1004D6F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004D6F54(const __CFString *a1, const __CFString *a2)
{
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 == CFStringGetTypeID())
  {
    memset(&v50, 0, sizeof(v50));
    sub_10013D274(a1, &v50);
    CFTypeID v5 = CFGetTypeID(a2);
    if (v5 == CFDictionaryGetTypeID())
    {
      if (qword_102419640 != -1) {
        dispatch_once(&qword_102419640, &stru_1022B6B08);
      }
      CFTypeID v6 = qword_102419648;
      if (os_log_type_enabled((os_log_t)qword_102419648, OS_LOG_TYPE_DEBUG))
      {
        int v7 = SHIBYTE(v50.__r_.__value_.__r.__words[2]);
        std::string::size_type v8 = v50.__r_.__value_.__r.__words[0];
        CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)a2);
        CFTypeID v10 = &v50;
        if (v7 < 0) {
          CFTypeID v10 = (std::string *)v8;
        }
        *(_DWORD *)uint64_t buf = 136315394;
        *(void *)&uint8_t buf[4] = v10;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = Count;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "\t%s = <dictionary (%ld entries)>:", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419640 != -1) {
          dispatch_once(&qword_102419640, &stru_1022B6B08);
        }
        int v38 = SHIBYTE(v50.__r_.__value_.__r.__words[2]);
        std::string::size_type v39 = v50.__r_.__value_.__r.__words[0];
        CFIndex v40 = CFDictionaryGetCount((CFDictionaryRef)a2);
        uint64_t v41 = &v50;
        if (v38 < 0) {
          uint64_t v41 = (std::string *)v39;
        }
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v41;
        WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v40;
        uint64_t v42 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLNameValuePair::printKeyValue(const void *, const void *, void *)", "%s\n", v42);
        if (v42 != buf) {
          free(v42);
        }
      }
      CFDictionaryApplyFunction((CFDictionaryRef)a2, (CFDictionaryApplierFunction)sub_1004D6F54, 0);
      goto LABEL_63;
    }
    CFTypeID v11 = CFGetTypeID(a2);
    if (v11 == CFArrayGetTypeID())
    {
      v12.length = CFArrayGetCount((CFArrayRef)a2);
      *(_OWORD *)&uint8_t buf[8] = 0uLL;
      int v13 = &v50;
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v13 = (std::string *)v50.__r_.__value_.__r.__words[0];
      }
      *(void *)uint64_t buf = v13;
      v12.location = 0;
      CFArrayApplyFunction((CFArrayRef)a2, v12, (CFArrayApplierFunction)sub_1004D7980, buf);
      goto LABEL_63;
    }
    CFTypeID v14 = CFGetTypeID(a2);
    if (v14 == CFStringGetTypeID())
    {
      memset(&__p, 0, sizeof(__p));
      if (sub_10013D274(a2, &__p))
      {
        if (qword_102419640 != -1) {
          dispatch_once(&qword_102419640, &stru_1022B6B08);
        }
        CFRange v15 = qword_102419648;
        if (os_log_type_enabled((os_log_t)qword_102419648, OS_LOG_TYPE_DEBUG))
        {
          __int16 v16 = &v50;
          if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            __int16 v16 = (std::string *)v50.__r_.__value_.__r.__words[0];
          }
          uint64_t p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)uint64_t buf = 136315394;
          *(void *)&uint8_t buf[4] = v16;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = p_p;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "\t%s = %s", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419640 != -1) {
            dispatch_once(&qword_102419640, &stru_1022B6B08);
          }
          int v43 = &v50;
          if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            int v43 = (std::string *)v50.__r_.__value_.__r.__words[0];
          }
          uint64_t v44 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v44 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)int v51 = 136315394;
          *(void *)&v51[4] = v43;
          __int16 v52 = 2080;
          double v53 = v44;
          uint64_t v45 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "static void CLNameValuePair::printKeyValue(const void *, const void *, void *)", "%s\n", v45);
          if (v45 != buf) {
            free(v45);
          }
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_63;
    }
    CFTypeID v18 = CFGetTypeID(a2);
    if (v18 == CFNumberGetTypeID())
    {
      *(void *)int v51 = 0;
      if (!sub_1000A6DD8(a2, v51)) {
        goto LABEL_63;
      }
      if (qword_102419640 != -1) {
        dispatch_once(&qword_102419640, &stru_1022B6B08);
      }
      int v19 = qword_102419648;
      if (os_log_type_enabled((os_log_t)qword_102419648, OS_LOG_TYPE_DEBUG))
      {
        CFTypeID v20 = &v50;
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          CFTypeID v20 = (std::string *)v50.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)uint64_t buf = 136315394;
        *(void *)&uint8_t buf[4] = v20;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = *(void *)v51;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "\t%s = %0.6f", buf, 0x16u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_63;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419640 != -1) {
        dispatch_once(&qword_102419640, &stru_1022B6B08);
      }
      __int16 v21 = &v50;
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        __int16 v21 = (std::string *)v50.__r_.__value_.__r.__words[0];
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = *(void *)v51;
      CFTypeID v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLNameValuePair::printKeyValue(const void *, const void *, void *)", "%s\n", v22);
      if (v22 == buf) {
        goto LABEL_63;
      }
    }
    else
    {
      CFTypeID v23 = CFGetTypeID(a2);
      if (v23 == CFBooleanGetTypeID())
      {
        if (qword_102419640 != -1) {
          dispatch_once(&qword_102419640, &stru_1022B6B08);
        }
        char v24 = qword_102419648;
        if (os_log_type_enabled((os_log_t)qword_102419648, OS_LOG_TYPE_DEBUG))
        {
          int v25 = SHIBYTE(v50.__r_.__value_.__r.__words[2]);
          std::string::size_type v26 = v50.__r_.__value_.__r.__words[0];
          int Value = CFBooleanGetValue((CFBooleanRef)a2);
          char v28 = &v50;
          if (v25 < 0) {
            char v28 = (std::string *)v26;
          }
          *(_DWORD *)uint64_t buf = 136315394;
          *(void *)&uint8_t buf[4] = v28;
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = Value;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "\t%s = %d", buf, 0x12u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_63;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419640 != -1) {
          dispatch_once(&qword_102419640, &stru_1022B6B08);
        }
        int v29 = SHIBYTE(v50.__r_.__value_.__r.__words[2]);
        std::string::size_type v30 = v50.__r_.__value_.__r.__words[0];
        int v31 = CFBooleanGetValue((CFBooleanRef)a2);
        unsigned int v32 = &v50;
        if (v29 < 0) {
          unsigned int v32 = (std::string *)v30;
        }
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
        WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v31;
        CFTypeID v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLNameValuePair::printKeyValue(const void *, const void *, void *)", "%s\n", v22);
      }
      else
      {
        if (qword_102419640 != -1) {
          dispatch_once(&qword_102419640, &stru_1022B6B08);
        }
        __int16 v33 = qword_102419648;
        if (os_log_type_enabled((os_log_t)qword_102419648, OS_LOG_TYPE_DEBUG))
        {
          int v34 = SHIBYTE(v50.__r_.__value_.__r.__words[2]);
          std::string::size_type v35 = v50.__r_.__value_.__r.__words[0];
          CFTypeID v36 = CFGetTypeID(a2);
          __int16 v37 = &v50;
          if (v34 < 0) {
            __int16 v37 = (std::string *)v35;
          }
          *(_DWORD *)uint64_t buf = 136315394;
          *(void *)&uint8_t buf[4] = v37;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v36;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "\t%s = <unhandled value type %lu>", buf, 0x16u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_63;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419640 != -1) {
          dispatch_once(&qword_102419640, &stru_1022B6B08);
        }
        int v46 = SHIBYTE(v50.__r_.__value_.__r.__words[2]);
        std::string::size_type v47 = v50.__r_.__value_.__r.__words[0];
        CFTypeID v48 = CFGetTypeID(a2);
        double v49 = &v50;
        if (v46 < 0) {
          double v49 = (std::string *)v47;
        }
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v49;
        WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v48;
        CFTypeID v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLNameValuePair::printKeyValue(const void *, const void *, void *)", "%s\n", v22);
      }
      if (v22 == buf)
      {
LABEL_63:
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v50.__r_.__value_.__l.__data_);
        }
        return;
      }
    }
    free(v22);
    goto LABEL_63;
  }
}

void sub_1004D7914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004D7980(uint64_t a1, uint64_t a2)
{
  CFStringRef v4 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%s[%d]", *(void *)a2, *(unsigned int *)(a2 + 8));
  sub_1004D6F54(v4, a1);
  ++*(_DWORD *)(a2 + 8);

  CFRelease(v4);
}

void sub_1004D7A08(uint64_t a1, uint64_t a2)
{
  CFStringRef v4 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%s[%d]", *(void *)a2, *(unsigned int *)(a2 + 8));
  sub_1004D6BD4(v4, a1, *(void *)(a2 + 16));
  ++*(_DWORD *)(a2 + 8);

  CFRelease(v4);
}

BOOL sub_1004D7A94(const void *a1, void *a2)
{
  CFTypeID v4 = CFGetTypeID(a1);
  CFTypeID TypeID = CFStringGetTypeID();
  if (v4 == TypeID)
  {
    *a2 = a1;
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B6AC8);
    }
    CFTypeID v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134349312;
      CFTypeID v10 = CFGetTypeID(a1);
      __int16 v11 = 2050;
      CFTypeID v12 = CFStringGetTypeID();
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "type IDs do not match - %{public}lu vs %{public}lu", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B6AC8);
      }
      CFGetTypeID(a1);
      CFStringGetTypeID();
      std::string::size_type v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, CFStringRef &)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  return v4 == TypeID;
}

void sub_1004D7CB0(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1004D7CE0(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_1004D7D10(id a1)
{
  qword_102419648 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Direct_deprecated");
}

void sub_1004D7DF0(id a1)
{
  qword_10247AE00 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLCompanionRelativeElevationServiceSilo"];
}

void sub_1004D8220()
{
}

void sub_1004D824C(void **a1, unint64_t a2)
{
  CFTypeID v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0x8E38E38E38E38E39 * ((v4 - (unsigned char *)*a1) >> 4) < a2)
  {
    if (a2 >= 0x1C71C71C71C71C8) {
      sub_1001D7FD4();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 144;
    CFTypeID v6 = (char *)sub_10014E7AC(v3, a2);
    int v7 = &v6[144 * v5];
    std::string::size_type v9 = &v6[144 * v8];
    __int16 v11 = (char *)*a1;
    CFTypeID v10 = (char *)a1[1];
    CFTypeID v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 9) = *((_OWORD *)v10 - 9);
        long long v13 = *((_OWORD *)v10 - 8);
        long long v14 = *((_OWORD *)v10 - 7);
        long long v15 = *((_OWORD *)v10 - 5);
        *((_OWORD *)v12 - 6) = *((_OWORD *)v10 - 6);
        *((_OWORD *)v12 - 5) = v15;
        *((_OWORD *)v12 - 8) = v13;
        *((_OWORD *)v12 - 7) = v14;
        long long v16 = *((_OWORD *)v10 - 4);
        long long v17 = *((_OWORD *)v10 - 3);
        long long v18 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v18;
        *((_OWORD *)v12 - 4) = v16;
        *((_OWORD *)v12 - 3) = v17;
        v12 -= 144;
        v10 -= 144;
      }
      while (v10 != v11);
      CFTypeID v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

NSTimer *sub_1004D8364(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 216) = +[NSTimer scheduledTimerWithTimeInterval:*(void *)(a1 + 32) target:"rotateCAHourly" selector:0 userInfo:1 repeats:3600.0];
  uint64_t result = +[NSTimer scheduledTimerWithTimeInterval:*(void *)(a1 + 32) target:"rotateCADaily" selector:0 userInfo:1 repeats:86400.0];
  *(void *)(*(void *)(a1 + 32) + 224) = result;
  return result;
}

void sub_1004D8884()
{
}

id sub_1004D88A8(uint64_t a1, unsigned int *a2, _OWORD *a3, void *a4)
{
  uint64_t v4 = *a2;
  long long v5 = a3[9];
  v12[8] = a3[8];
  v12[9] = v5;
  long long v6 = a3[11];
  unsigned char v12[10] = a3[10];
  v12[11] = v6;
  long long v7 = a3[5];
  v12[4] = a3[4];
  void v12[5] = v7;
  long long v8 = a3[7];
  _DWORD v12[6] = a3[6];
  v12[7] = v8;
  long long v9 = a3[1];
  v12[0] = *a3;
  v12[1] = v9;
  long long v10 = a3[3];
  id v12[2] = a3[2];
  uint64_t v12[3] = v10;
  return [a4 onCompanionNotification:v4 data:v12];
}

id sub_1004D8908(uint64_t a1, unsigned int *a2, _OWORD *a3, void *a4)
{
  uint64_t v4 = *a2;
  long long v5 = a3[7];
  v11[6] = a3[6];
  v11[7] = v5;
  long long v6 = a3[9];
  v11[8] = a3[8];
  v11[9] = v6;
  long long v7 = a3[3];
  v11[2] = a3[2];
  void v11[3] = v7;
  long long v8 = a3[5];
  v11[4] = a3[4];
  v11[5] = v8;
  long long v9 = a3[1];
  v11[0] = *a3;
  v11[1] = v9;
  return [a4 onMotionActivityNotification:v4 data:v11];
}

void sub_1004D90AC(_Unwind_Exception *a1)
{
}

double sub_1004D90CC(uint64_t a1, double result)
{
  if ((*(_DWORD *)a1)++)
  {
    double v4 = *(double *)(a1 + 8);
    double v3 = *(double *)(a1 + 16);
    double v5 = *(double *)(a1 + 24) * v4;
    double v6 = *(double *)(a1 + 32) * (v4 * v4);
    double v7 = v5 + 1.0;
    if (v3 == result)
    {
      double v8 = *(double *)(a1 + 16);
    }
    else
    {
      double v8 = (result + v5 * v3) / (v5 + 1.0);
      *(double *)(a1 + 16) = v8;
    }
    double v9 = ((result - v8) * (result - v8) + v5 * (*(double *)(a1 + 40) + (v3 - v8) * (v3 - v8))) / v7;
    uint64_t result = v6 + 1.0;
    *(double *)(a1 + 24) = v7;
    *(double *)(a1 + 32) = v6 + 1.0;
    *(double *)(a1 + 40) = v9;
  }
  else
  {
    *(double *)(a1 + 16) = result;
  }
  return result;
}

uint64_t sub_1004D9E00(void *a1, _OWORD *a2)
{
  unint64_t v2 = a1[5];
  if (v2)
  {
    double v3 = (_OWORD *)(*a1 + 144 * ((a1[3] + a1[4]) % v2));
    long long v4 = a2[4];
    long long v6 = a2[1];
    long long v5 = a2[2];
    v3[3] = a2[3];
    void v3[4] = v4;
    v3[1] = v6;
    _DWORD v3[2] = v5;
    long long v7 = a2[8];
    long long v9 = a2[5];
    long long v8 = a2[6];
    v3[7] = a2[7];
    v3[8] = v7;
    void v3[5] = v9;
    void v3[6] = v8;
    _OWORD *v3 = *a2;
    unint64_t v10 = a1[4];
    if (v10 == a1[5])
    {
      unint64_t v2 = 0;
      a1[3] = (a1[3] + 1) % v10;
    }
    else
    {
      a1[4] = v10 + 1;
      return 1;
    }
  }
  return v2;
}

NSDictionary *sub_1004DA270(uint64_t a1)
{
  v3[0] = @"btRssi";
  v4[0] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 32) + 128)];
  v3[1] = @"btRssiAge";
  v4[1] = +[NSNumber numberWithDouble:*(double *)(a1 + 40)];
  _DWORD v3[2] = @"companionPressure";
  _DWORD v4[2] = +[NSNumber numberWithDouble:**(double **)(a1 + 32)];
  v3[3] = @"companionPressureAge";
  void v4[3] = +[NSNumber numberWithDouble:*(double *)(a1 + 48)];
  void v3[4] = @"companionPressureVariance";
  void v4[4] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 32) + 16)];
  void v3[5] = @"inProximity";
  void v4[5] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 64)];
  void v3[6] = @"motionState";
  void v4[6] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 48)];
  v3[7] = @"proximityAge";
  v4[7] = +[NSNumber numberWithDouble:*(double *)(a1 + 56)];
  v3[8] = @"relativePressureBiasEstimate";
  v4[8] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 32) + 104)];
  v3[9] = @"relativePressureBiasMeasurement";
  v4[9] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 32) + 96)];
  v3[10] = @"tableIndex";
  v4[10] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 80)];
  v3[11] = @"timeSinceLastCalibration";
  v4[11] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 32) + 136)];
  unsigned char v3[12] = @"watchMotionStateAge";
  v4[12] = +[NSNumber numberWithDouble:*(double *)(a1 + 64)];
  v3[13] = @"watchPressure";
  v4[13] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 32) + 24)];
  v3[14] = @"watchPressureAge";
  v4[14] = +[NSNumber numberWithDouble:*(double *)(a1 + 72)];
  v3[15] = @"watchPressureVariance";
  v4[15] = +[NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 32) + 40)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:16];
}

void sub_1004DABDC(id a1)
{
  qword_102419218 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Transport");
}

void sub_1004DAC0C(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1004DAC3C(uint64_t a1, unint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = a2;
  sub_1004DAC8C(a1, a2);
  return a1;
}

void sub_1004DAC70(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004DAC8C(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_1004DACD0((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 144 * a2;
  }
}

void sub_1004DACD0(void **a1, unint64_t a2)
{
  long long v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  long long v5 = v6;
  long long v7 = *(char **)(v4 - 8);
  if (0x8E38E38E38E38E39 * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      size_t v13 = 144 * ((144 * a2 - 144) / 0x90) + 144;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0x8E38E38E38E38E39 * ((v7 - (unsigned char *)*a1) >> 4);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x1C71C71C71C71C7) {
      sub_1001D7FD4();
    }
    unint64_t v10 = 0x8E38E38E38E38E39 * ((v5 - (unsigned char *)*a1) >> 4);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0xE38E38E38E38E3) {
      unint64_t v11 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      CFTypeID v12 = (char *)sub_10014E7AC(v4, v11);
    }
    else {
      CFTypeID v12 = 0;
    }
    long long v14 = &v12[144 * v8];
    long long v15 = &v12[144 * v11];
    size_t v16 = 144 * ((144 * a2 - 144) / 0x90) + 144;
    bzero(v14, v16);
    long long v17 = &v14[v16];
    int v19 = (char *)*a1;
    long long v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 9) = *((_OWORD *)v18 - 9);
        long long v20 = *((_OWORD *)v18 - 8);
        long long v21 = *((_OWORD *)v18 - 7);
        long long v22 = *((_OWORD *)v18 - 5);
        *((_OWORD *)v14 - 6) = *((_OWORD *)v18 - 6);
        *((_OWORD *)v14 - 5) = v22;
        *((_OWORD *)v14 - 8) = v20;
        *((_OWORD *)v14 - 7) = v21;
        long long v23 = *((_OWORD *)v18 - 4);
        long long v24 = *((_OWORD *)v18 - 3);
        long long v25 = *((_OWORD *)v18 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v18 - 2);
        *((_OWORD *)v14 - 1) = v25;
        *((_OWORD *)v14 - 4) = v23;
        *((_OWORD *)v14 - 3) = v24;
        v14 -= 144;
        v18 -= 144;
      }
      while (v18 != v19);
      long long v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void sub_1004DAEB0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v2;
      operator delete(v2);
    }
    operator delete();
  }
}

void *sub_1004DAF0C(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a1 = off_10234BF80;
  id v9 = a5;
  *a1 = off_1022B6BB8;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  id v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  int v14[2] = 0x2020000000;
  char v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1004DB094;
  aBlock[3] = &unk_1022B6BE8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  id v12[2] = sub_10017119C;
  uint64_t v12[3] = &unk_1022B6C10;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_1004DB06C(_Unwind_Exception *a1)
{
  sub_1019D78CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004DB094(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

void sub_1004DB0AC(uint64_t a1)
{
  sub_1004DB0E4(a1);

  operator delete();
}

uint64_t sub_1004DB0E4(uint64_t a1)
{
  *(void *)a1 = off_1022B6BB8;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_1019D78CC(a1);
}

unsigned __int8 *sub_1004DB160()
{
  unsigned __int8 v1 = 1;
  sub_10006ACBC((unsigned __int8 *)&unk_10247ADE0, "PressureFindingLogCa", &v1, 0);
  uint64_t v2 = 0x405E000000000000;
  return sub_101A1F180(byte_10247ADE8, "PressureFindingPressureValidDuration", &v2, 0);
}

void *sub_1004DB284(void *a1, uint64_t a2)
{
  *a1 = off_1022B6C80;
  a1[1] = a2;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = [[CLHarvestAccessoryLocationProviderAdapter alloc] initWithMonitorGpsExternal:a1];
  return a1;
}

void sub_1004DB2F4(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v2 + 24);
  *(void *)(v2 + 24) = 0;
  if (v4) {
    sub_101A62790(v4);
  }
  sub_101A62758(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004DB31C(uint64_t a1)
{
  *(void *)a1 = off_1022B6C80;

  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void sub_1004DB3CC(uint64_t a1)
{
  sub_1004DB31C(a1);

  operator delete();
}

uint64_t sub_1004DB404(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

id sub_1004DB43C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(a1 + 16) + 16) register:*(void *)(*(void *)(a1 + 16) + 8) forNotification:a2 registrationInfo:0];
}

id sub_1004DB450(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(a1 + 16) + 16) unregister:*(void *)(*(void *)(a1 + 16) + 8) forNotification:a2];
}

id sub_1004DB460(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(a1 + 24) + 16) register:*(void *)(*(void *)(a1 + 24) + 8) forNotification:a2 registrationInfo:0];
}

id sub_1004DB474(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(a1 + 24) + 16) register:*(void *)(*(void *)(a1 + 24) + 8) forNotification:a2 registrationInfo:0];
}

void sub_1004DB488()
{
}

void sub_1004DB5C8(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022B6CF0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMonitorGpsExternal::onGpsNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B6CF0);
    }
    id v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      char v15 = "";
      __int16 v16 = 2082;
      long long v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMonitorGpsExternal::onGpsNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  (*(void (**)(void, uint64_t, void, uint64_t))(**(void **)(a4 + 40) + 32))(*(void *)(a4 + 40), a1, *a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1004DB7B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004DB7D4(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022B6CF0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMonitorGpsExternal::onAccessoryNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B6CF0);
    }
    id v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      char v15 = "";
      __int16 v16 = 2082;
      long long v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMonitorGpsExternal::onAccessoryNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  (*(void (**)(void, uint64_t, void, uint64_t))(**(void **)(a4 + 40) + 32))(*(void *)(a4 + 40), a1, *a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1004DB9C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

id sub_1004DB9E0(uint64_t a1, void *a2)
{
  return sub_10099A990(*(void *)(a1 + 40), a2);
}

void sub_1004DB9E8(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1004DBA18()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_1004DBA98()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_1004DBB28(_Unwind_Exception *a1)
{
}

uint64_t sub_1004DBB40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_1022B6D20;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = off_1022B6DB8;
  long long v7 = operator new(0x20uLL);
  v7[1] = 0;
  void v7[2] = 0;
  *long long v7 = off_1022B6DF0;
  *((_DWORD *)v7 + 6) = 31337;
  *(void *)(a1 + 48) = v7 + 3;
  *(void *)(a1 + 56) = v7;
  *(void *)(a1 + 64) = a3;
  *(void *)(a1 + 72) = a4;
  *(_WORD *)(a1 + 80) = 1;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  return a1;
}

uint64_t sub_1004DBC04(uint64_t a1)
{
  *(void *)a1 = off_1022B6D20;
  sub_1004DCF5C(a1);
  [*(id *)(a1 + 8) invalidateAndCancel];

  *(void *)(a1 + 8) = 0;
  uint64_t v2 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_10012E38C((void *)(a1 + 40));
  return a1;
}

void sub_1004DBCA0(uint64_t a1)
{
  sub_1004DBC04(a1);

  operator delete();
}

BOOL sub_1004DBCD8(uint64_t a1, uint64_t a2, NSMutableURLRequest *a3, double *a4)
{
  if (!*(void *)(a1 + 8))
  {
    id v8 = [*(id *)(a1 + 32) operationQueue];
    id v9 = +[NSURLSessionConfiguration defaultSessionConfiguration];
    if (qword_10247AE20 != -1) {
      dispatch_once(&qword_10247AE20, &stru_1022B6E30);
    }
    id v10 = +[NSURLSession sessionWithConfiguration:v9 delegate:qword_10247AE28 delegateQueue:v8];
    *(void *)(a1 + 8) = v10;
    char v11 = v10;
  }
  if (*a4 <= 0.0)
  {
    if (qword_1024195F0 != -1) {
      dispatch_once(&qword_1024195F0, &stru_1022B6E50);
    }
    __int16 v27 = qword_1024195F8;
    if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_FAULT))
    {
      double v28 = *a4;
      *(_DWORD *)uint64_t buf = 68289282;
      int v47 = 0;
      __int16 v48 = 2082;
      double v49 = "";
      __int16 v50 = 2050;
      double v51 = v28;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Ignoring new #filedownload request with invalid timeout\", \"Timeout_s\":\"%{public}.09f\"}", buf, 0x1Cu);
      if (qword_1024195F0 != -1) {
        dispatch_once(&qword_1024195F0, &stru_1022B6E50);
      }
    }
    uint64_t v29 = qword_1024195F8;
    if (!os_signpost_enabled((os_log_t)qword_1024195F8)) {
      return 0;
    }
    double v30 = *a4;
    *(_DWORD *)uint64_t buf = 68289282;
    int v47 = 0;
    __int16 v48 = 2082;
    double v49 = "";
    __int16 v50 = 2050;
    double v51 = v30;
    int v31 = "Ignoring new #filedownload request with invalid timeout";
    unsigned int v32 = "{\"msg%{public}.0s\":\"Ignoring new #filedownload request with invalid timeout\", \"Timeout_s\":\"%{public}.09f\"}";
LABEL_53:
    std::string::size_type v35 = v29;
    uint32_t v36 = 28;
    goto LABEL_54;
  }
  CFTypeID v12 = +[NSURL URLWithString:](NSURL, "URLWithString:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2, *a4));
  if (!v12)
  {
    if (qword_1024195F0 != -1) {
      dispatch_once(&qword_1024195F0, &stru_1022B6E50);
    }
    __int16 v33 = qword_1024195F8;
    if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289283;
      int v47 = 0;
      __int16 v48 = 2082;
      double v49 = "";
      __int16 v50 = 2081;
      double v51 = *(double *)&a2;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Ignoring new #filedownload request with invalid src string\", \"URLString\":%{private, location:escape_only}s}", buf, 0x1Cu);
      if (qword_1024195F0 != -1) {
        dispatch_once(&qword_1024195F0, &stru_1022B6E50);
      }
    }
    uint64_t v29 = qword_1024195F8;
    if (!os_signpost_enabled((os_log_t)qword_1024195F8)) {
      return 0;
    }
    *(_DWORD *)uint64_t buf = 68289283;
    int v47 = 0;
    __int16 v48 = 2082;
    double v49 = "";
    __int16 v50 = 2081;
    double v51 = *(double *)&a2;
    int v31 = "Ignoring new #filedownload request with invalid src string";
    unsigned int v32 = "{\"msg%{public}.0s\":\"Ignoring new #filedownload request with invalid src string\", \"URLString\":%{private, "
          "location:escape_only}s}";
    goto LABEL_53;
  }
  int v13 = v12;
  __int16 v14 = +[NSMutableURLRequest requestWithURL:v12];
  if (!v14)
  {
    if (qword_1024195F0 != -1) {
      dispatch_once(&qword_1024195F0, &stru_1022B6E50);
    }
    int v34 = qword_1024195F8;
    if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289283;
      int v47 = 0;
      __int16 v48 = 2082;
      double v49 = "";
      __int16 v50 = 2113;
      double v51 = *(double *)&v13;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Ignoring new #filedownload request with invalid src url\", \"URL\":%{private, location:escape_only}@}", buf, 0x1Cu);
      if (qword_1024195F0 != -1) {
        dispatch_once(&qword_1024195F0, &stru_1022B6E50);
      }
    }
    uint64_t v29 = qword_1024195F8;
    if (!os_signpost_enabled((os_log_t)qword_1024195F8)) {
      return 0;
    }
    *(_DWORD *)uint64_t buf = 68289283;
    int v47 = 0;
    __int16 v48 = 2082;
    double v49 = "";
    __int16 v50 = 2113;
    double v51 = *(double *)&v13;
    int v31 = "Ignoring new #filedownload request with invalid src url";
    unsigned int v32 = "{\"msg%{public}.0s\":\"Ignoring new #filedownload request with invalid src url\", \"URL\":%{private, location:escape_only}@}";
    goto LABEL_53;
  }
  char v15 = v14;
  [(NSMutableURLRequest *)v14 setTimeoutInterval:*a4];
  [(NSMutableURLRequest *)v15 setAllowsCellularAccess:*(unsigned __int8 *)(a1 + 80)];
  if (*(void *)(a1 + 16))
  {
    if (qword_1024195F0 != -1) {
      dispatch_once(&qword_1024195F0, &stru_1022B6E50);
    }
    __int16 v16 = qword_1024195F8;
    if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_FAULT))
    {
      double v17 = COERCE_DOUBLE([*(id *)(a1 + 16) originalRequest]);
      *(_DWORD *)uint64_t buf = 68289539;
      int v47 = 0;
      __int16 v48 = 2082;
      double v49 = "";
      __int16 v50 = 2113;
      double v51 = v17;
      __int16 v52 = 2113;
      double v53 = v15;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Dropping uncancelled #filedownload to service new request\", \"OriginalRequest\":%{private, location:escape_only}@, \"NewRequest\":%{private, location:escape_only}@}", buf, 0x26u);
      if (qword_1024195F0 != -1) {
        dispatch_once(&qword_1024195F0, &stru_1022B6E50);
      }
    }
    __int16 v18 = qword_1024195F8;
    if (os_signpost_enabled((os_log_t)qword_1024195F8))
    {
      double v19 = COERCE_DOUBLE([*(id *)(a1 + 16) originalRequest]);
      *(_DWORD *)uint64_t buf = 68289539;
      int v47 = 0;
      __int16 v48 = 2082;
      double v49 = "";
      __int16 v50 = 2113;
      double v51 = v19;
      __int16 v52 = 2113;
      double v53 = v15;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Dropping uncancelled #filedownload to service new request", "{\"msg%{public}.0s\":\"Dropping uncancelled #filedownload to service new request\", \"OriginalRequest\":%{private, location:escape_only}@, \"NewRequest\":%{private, location:escape_only}@}", buf, 0x26u);
    }
    sub_1004DC84C(a1);
  }
  *(void *)(a1 + 96) = 0;
  long long v20 = +[NSURL fileURLWithPath:isDirectory:](NSURL, "fileURLWithPath:isDirectory:", +[NSString stringWithUTF8String:a3], 0);
  *(void *)(a1 + 24) = v20;
  if (!v20)
  {
    if (qword_1024195F0 != -1) {
      dispatch_once(&qword_1024195F0, &stru_1022B6E50);
    }
    int v38 = qword_1024195F8;
    if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v47 = 0;
      __int16 v48 = 2082;
      double v49 = "";
      __int16 v50 = 2113;
      double v51 = *(double *)&v15;
      __int16 v52 = 2081;
      double v53 = a3;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Ignoring new #filedownload request with invalid dst string\", \"NewRequest\":%{private, location:escape_only}@, \"LocalFileString\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024195F0 != -1) {
        dispatch_once(&qword_1024195F0, &stru_1022B6E50);
      }
    }
    uint64_t v39 = qword_1024195F8;
    if (!os_signpost_enabled((os_log_t)qword_1024195F8)) {
      return 0;
    }
    *(_DWORD *)uint64_t buf = 68289539;
    int v47 = 0;
    __int16 v48 = 2082;
    double v49 = "";
    __int16 v50 = 2113;
    double v51 = *(double *)&v15;
    __int16 v52 = 2081;
    double v53 = a3;
    int v31 = "Ignoring new #filedownload request with invalid dst string";
    unsigned int v32 = "{\"msg%{public}.0s\":\"Ignoring new #filedownload request with invalid dst string\", \"NewRequest\":%{private,"
          " location:escape_only}@, \"LocalFileString\":%{private, location:escape_only}s}";
    std::string::size_type v35 = v39;
    uint32_t v36 = 38;
LABEL_54:
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v35, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v31, v32, buf, v36);
    return 0;
  }
  uint64_t v22 = *(void *)(a1 + 48);
  long long v21 = *(std::__shared_weak_count **)(a1 + 56);
  if (v21)
  {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v21->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_1000DB0A0(v21);
  }
  v44[0] = _NSConcreteStackBlock;
  v44[1] = 3321888768;
  v44[2] = sub_1004DC8D0;
  v44[3] = &unk_1022B6D68;
  v44[4] = a1;
  _OWORD v44[5] = v22;
  uint64_t v45 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  id v23 = [*(id *)(a1 + 8) downloadTaskWithRequest:v15 completionHandler:v44];
  *(void *)(a1 + 16) = v23;
  BOOL v24 = v23 != 0;
  if (v23)
  {
    if (qword_1024195F0 != -1) {
      dispatch_once(&qword_1024195F0, &stru_1022B6E50);
    }
    long long v25 = qword_1024195F8;
    if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_DEFAULT))
    {
      std::string::size_type v26 = *(NSMutableURLRequest **)(a1 + 24);
      *(_DWORD *)uint64_t buf = 68289539;
      int v47 = 0;
      __int16 v48 = 2082;
      double v49 = "";
      __int16 v50 = 2113;
      double v51 = *(double *)&v15;
      __int16 v52 = 2113;
      double v53 = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Created task for #filedownload request\", \"NewRequest\":%{private, location:escape_only}@, \"LocalFile\":%{private, location:escape_only}@}", buf, 0x26u);
    }
    if (*(unsigned char *)(a1 + 81)) {
      operator new();
    }
    if (!*(void *)(a1 + 104)) {
      *(void *)(a1 + 104) = [[CLOSTransaction alloc] initWithDescription:"CLDownloadOSTransaction"];
    }
    [*(id *)(a1 + 16) resume];
  }
  else
  {
    if (qword_1024195F0 != -1) {
      dispatch_once(&qword_1024195F0, &stru_1022B6E50);
    }
    CFIndex v40 = qword_1024195F8;
    if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v41 = *(NSMutableURLRequest **)(a1 + 24);
      *(_DWORD *)uint64_t buf = 68289539;
      int v47 = 0;
      __int16 v48 = 2082;
      double v49 = "";
      __int16 v50 = 2113;
      double v51 = *(double *)&v15;
      __int16 v52 = 2113;
      double v53 = v41;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Could not create task for #filedownload request\", \"NewRequest\":%{private, location:escape_only}@, \"LocalFile\":%{private, location:escape_only}@}", buf, 0x26u);
      if (qword_1024195F0 != -1) {
        dispatch_once(&qword_1024195F0, &stru_1022B6E50);
      }
    }
    uint64_t v42 = qword_1024195F8;
    if (os_signpost_enabled((os_log_t)qword_1024195F8))
    {
      int v43 = *(NSMutableURLRequest **)(a1 + 24);
      *(_DWORD *)uint64_t buf = 68289539;
      int v47 = 0;
      __int16 v48 = 2082;
      double v49 = "";
      __int16 v50 = 2113;
      double v51 = *(double *)&v15;
      __int16 v52 = 2113;
      double v53 = v43;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v42, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Could not create task for #filedownload request", "{\"msg%{public}.0s\":\"Could not create task for #filedownload request\", \"NewRequest\":%{private, location:escape_only}@, \"LocalFile\":%{private, location:escape_only}@}", buf, 0x26u);
    }
  }
  if (v45) {
    std::__shared_weak_count::__release_weak(v45);
  }
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
  return v24;
}

void sub_1004DC7E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21) {
    std::__shared_weak_count::__release_weak(a21);
  }
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004DC84C(uint64_t a1)
{
  sub_10012E3E4(a1 + 40);

  *(void *)(a1 + 24) = 0;
  [*(id *)(a1 + 16) cancel];

  *(void *)(a1 + 16) = 0;
  uint64_t v2 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  *(void *)(a1 + 104) = 0;
}

void sub_1004DC8D0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6)
  {
    if (*(void *)(v6 + 8) != -1) {
      sub_1004DC968(v5, a2, a3, a4);
    }
  }
}

void sub_1004DC958(uint64_t a1)
{
}

void sub_1004DC968(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v30 = a4;
  if (a4)
  {
    if (qword_1024195F0 != -1) {
      dispatch_once(&qword_1024195F0, &stru_1022B6E50);
    }
    long long v7 = qword_1024195F8;
    if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 24);
      *(_DWORD *)uint64_t buf = 68289795;
      int v32 = 0;
      __int16 v33 = 2082;
      int v34 = "";
      __int16 v35 = 2113;
      uint32_t v36 = a3;
      __int16 v37 = 2113;
      uint64_t v38 = v8;
      __int16 v39 = 2113;
      id v40 = a4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Error on #filedownload task completion\", \"Response\":%{private, location:escape_only}@, \"LocalFile\":%{private, location:escape_only}@, \"Error\":%{private, location:escape_only}@}", buf, 0x30u);
      if (qword_1024195F0 != -1) {
        dispatch_once(&qword_1024195F0, &stru_1022B6E50);
      }
    }
    id v9 = qword_1024195F8;
    if (os_signpost_enabled((os_log_t)qword_1024195F8))
    {
      uint64_t v10 = *(void *)(a1 + 24);
      *(_DWORD *)uint64_t buf = 68289795;
      int v32 = 0;
      __int16 v33 = 2082;
      int v34 = "";
      __int16 v35 = 2113;
      uint32_t v36 = a3;
      __int16 v37 = 2113;
      uint64_t v38 = v10;
      __int16 v39 = 2113;
      id v40 = a4;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Error on #filedownload task completion", "{\"msg%{public}.0s\":\"Error on #filedownload task completion\", \"Response\":%{private, location:escape_only}@, \"LocalFile\":%{private, location:escape_only}@, \"Error\":%{private, location:escape_only}@}", buf, 0x30u);
    }
    *(void *)(a1 + 96) = [a4 code];
  }
  else
  {
    uint64_t v13 = sub_1004DD05C(a3);
    *(void *)(a1 + 96) = v13;
    if (v13)
    {
      if (qword_1024195F0 != -1) {
        dispatch_once(&qword_1024195F0, &stru_1022B6E50);
      }
      __int16 v14 = qword_1024195F8;
      if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v15 = *(void *)(a1 + 24);
        uint64_t v16 = *(void *)(a1 + 96);
        *(_DWORD *)uint64_t buf = 68289795;
        int v32 = 0;
        __int16 v33 = 2082;
        int v34 = "";
        __int16 v35 = 2113;
        uint32_t v36 = a3;
        __int16 v37 = 2113;
        uint64_t v38 = v15;
        __int16 v39 = 1025;
        LODWORD(v40) = v16;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Protocol error on #filedownload task completion\", \"Response\":%{private, location:escape_only}@, \"LocalFile\":%{private, location:escape_only}@, \"ResultCode\":%{private}d}", buf, 0x2Cu);
        if (qword_1024195F0 != -1) {
          dispatch_once(&qword_1024195F0, &stru_1022B6E50);
        }
      }
      double v17 = qword_1024195F8;
      if (os_signpost_enabled((os_log_t)qword_1024195F8))
      {
        uint64_t v18 = *(void *)(a1 + 24);
        uint64_t v19 = *(void *)(a1 + 96);
        *(_DWORD *)uint64_t buf = 68289795;
        int v32 = 0;
        __int16 v33 = 2082;
        int v34 = "";
        __int16 v35 = 2113;
        uint32_t v36 = a3;
        __int16 v37 = 2113;
        uint64_t v38 = v18;
        __int16 v39 = 1025;
        LODWORD(v40) = v19;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Protocol error on #filedownload task completion", "{\"msg%{public}.0s\":\"Protocol error on #filedownload task completion\", \"Response\":%{private, location:escape_only}@, \"LocalFile\":%{private, location:escape_only}@, \"ResultCode\":%{private}d}", buf, 0x2Cu);
      }
    }
    else
    {
      if (qword_1024195F0 != -1) {
        dispatch_once(&qword_1024195F0, &stru_1022B6E50);
      }
      long long v20 = qword_1024195F8;
      if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v21 = *(void *)(a1 + 24);
        *(_DWORD *)uint64_t buf = 68289539;
        int v32 = 0;
        __int16 v33 = 2082;
        int v34 = "";
        __int16 v35 = 2113;
        uint32_t v36 = a3;
        __int16 v37 = 2113;
        uint64_t v38 = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#filedownload task completed successfully\", \"Response\":%{private, location:escape_only}@, \"LocalFile\":%{private, location:escape_only}@}", buf, 0x26u);
      }
      if (!-[NSFileManager replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:](+[NSFileManager defaultManager](NSFileManager, "defaultManager", 0), "replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:", *(void *)(a1 + 24), a2, 0, 1, &v29, &v30)|| (id v22 = [*(id *)(a1 + 24) absoluteString], (objc_msgSend(v22, "isEqual:", objc_msgSend(v29, "absoluteString")) & 1) == 0))
      {
        if (qword_1024195F0 != -1) {
          dispatch_once(&qword_1024195F0, &stru_1022B6E50);
        }
        id v23 = qword_1024195F8;
        if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v24 = *(void *)(a1 + 24);
          *(_DWORD *)uint64_t buf = 68290307;
          int v32 = 0;
          __int16 v33 = 2082;
          int v34 = "";
          __int16 v35 = 2113;
          uint32_t v36 = a3;
          __int16 v37 = 2113;
          uint64_t v38 = v24;
          __int16 v39 = 2113;
          id v40 = v29;
          __int16 v41 = 2113;
          uint64_t v42 = a2;
          __int16 v43 = 2113;
          id v44 = v30;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Error writing file to disk for completed #filedownload task\", \"Response\":%{private, location:escape_only}@, \"LocalFile\":%{private, location:escape_only}@, \"LostAndFile\":%{private, location:escape_only}@, \"TempFile\":%{private, location:escape_only}@, \"Error\":%{private, location:escape_only}@}", buf, 0x44u);
          if (qword_1024195F0 != -1) {
            dispatch_once(&qword_1024195F0, &stru_1022B6E50);
          }
        }
        long long v25 = qword_1024195F8;
        if (os_signpost_enabled((os_log_t)qword_1024195F8))
        {
          uint64_t v26 = *(void *)(a1 + 24);
          *(_DWORD *)uint64_t buf = 68290307;
          int v32 = 0;
          __int16 v33 = 2082;
          int v34 = "";
          __int16 v35 = 2113;
          uint32_t v36 = a3;
          __int16 v37 = 2113;
          uint64_t v38 = v26;
          __int16 v39 = 2113;
          id v40 = v29;
          __int16 v41 = 2113;
          uint64_t v42 = a2;
          __int16 v43 = 2113;
          id v44 = v30;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v25, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Error writing file to disk for completed #filedownload task", "{\"msg%{public}.0s\":\"Error writing file to disk for completed #filedownload task\", \"Response\":%{private, location:escape_only}@, \"LocalFile\":%{private, location:escape_only}@, \"LostAndFile\":%{private, location:escape_only}@, \"TempFile\":%{private, location:escape_only}@, \"Error\":%{private, location:escape_only}@}", buf, 0x44u);
        }
        id v27 = [v30 code];
        uint64_t v28 = 512;
        if (v27) {
          uint64_t v28 = (uint64_t)v27;
        }
        *(void *)(a1 + 96) = v28;
      }
    }
  }
  char v11 = *(void (**)(uint64_t, BOOL, void))(a1 + 64);
  if (v11) {
    v11(a1, *(void *)(a1 + 96) == 0, *(void *)(a1 + 72));
  }
  sub_1004DC84C(a1);
}

void sub_1004DCF5C(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    if (qword_1024195F0 != -1) {
      dispatch_once(&qword_1024195F0, &stru_1022B6E50);
    }
    uint64_t v2 = qword_1024195F8;
    if (os_log_type_enabled((os_log_t)qword_1024195F8, OS_LOG_TYPE_INFO))
    {
      id v3 = [*(id *)(a1 + 16) originalRequest];
      v4[0] = 68289283;
      v4[1] = 0;
      __int16 v5 = 2082;
      uint64_t v6 = "";
      __int16 v7 = 2113;
      id v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Cancelling task for #filedownload request\", \"OriginalRequest\":%{private, location:escape_only}@}", (uint8_t *)v4, 0x1Cu);
    }
  }
  sub_1004DC84C(a1);
}

uint64_t sub_1004DD05C(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }
  id v2 = [a1 statusCode];
  switch((unint64_t)v2)
  {
    case 0x191uLL:
    case 0x197uLL:
      uint64_t result = -1013;
      break;
    case 0x192uLL:
    case 0x195uLL:
    case 0x196uLL:
      goto LABEL_7;
    case 0x193uLL:
      uint64_t result = -1102;
      break;
    case 0x194uLL:
      uint64_t result = -1100;
      break;
    default:
      if (v2 == (id)200) {
        return 0;
      }
LABEL_7:
      uint64_t result = -1;
      break;
  }
  return result;
}

void sub_1004DD1A4(void *a1)
{
  sub_10012E38C(a1);

  operator delete();
}

void sub_1004DD1DC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B6DF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004DD1FC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B6DF0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1004DD250(id a1)
{
  qword_10247AE28 = objc_alloc_init(CLFileDownloadTaskDelegate);
}

void sub_1004DD278(id a1)
{
  qword_1024195F8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Network");
}

uint64_t sub_1004DD2A8(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 52) & 2) == 0) {
    return 0;
  }
  uint64_t v2 = *(void *)(a2 + 40);
  if (!v2) {
    uint64_t v2 = *(void *)(qword_10248D2B8 + 40);
  }
  if ((*(unsigned char *)(v2 + 493) & 4) == 0) {
    return 0;
  }
  uint64_t v4 = *(void *)(v2 + 344);
  if (!v4) {
    uint64_t v4 = *(void *)(qword_10248A400 + 344);
  }
  return *(unsigned char *)(v4 + 36) & 1;
}

void sub_1004DD2FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022B6E70);
  }
  __int16 v5 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    int v22 = 68289026;
    int v23 = 0;
    __int16 v24 = 2082;
    long long v25 = "";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileHeaderDecoder,logDecodedTileHeader\"}", (uint8_t *)&v22, 0x12u);
  }
  uint64_t v6 = *(void *)(a2 + 40);
  if (!v6) {
    uint64_t v6 = *(void *)(qword_10248D2B8 + 40);
  }
  uint64_t v7 = *(void *)(v6 + 344);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248A400 + 344);
  }
  uint64_t v8 = *(void *)(v7 + 8);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_10248D6D8 + 8);
  }
  int v9 = *(_DWORD *)(v8 + 48);
  if (v9)
  {
    uint64_t v10 = *(void *)(v8 + 8);
    if (!v10) {
      uint64_t v10 = *(void *)(qword_10248D6E8 + 8);
    }
    int v11 = *(_DWORD *)(v10 + 20) & 1;
    if ((~v9 & 0x3E) == 0 && v11 != 0)
    {
      long long v13 = *(_OWORD *)(v8 + 24);
      *(_OWORD *)(a3 + 80) = v13;
      *(_DWORD *)(a3 + 36) = *(_DWORD *)(v8 + 40);
      LODWORD(v13) = *(_DWORD *)(v8 + 16);
      *(double *)(a3 + 72) = (double)(unint64_t)v13;
      uint64_t v14 = *(void *)(v8 + 8);
      if (!v14) {
        uint64_t v14 = *(void *)(qword_10248D6E8 + 8);
      }
      *(void *)(a3 + 56) = *(void *)(v14 + 8);
      *(_DWORD *)(a3 + 44) = *(_DWORD *)(v8 + 20);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022B6E70);
      }
      uint64_t v15 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = *(void *)(a3 + 56);
        int v17 = *(_DWORD *)(a3 + 44);
        int v18 = *(_DWORD *)(a3 + 36);
        unsigned int v19 = *(double *)(a3 + 72);
        uint64_t v20 = *(void *)(a3 + 80);
        uint64_t v21 = *(void *)(a3 + 88);
        int v22 = 68290563;
        int v23 = 0;
        __int16 v24 = 2082;
        long long v25 = "";
        __int16 v26 = 2050;
        uint64_t v27 = v16;
        __int16 v28 = 1026;
        int v29 = v17;
        __int16 v30 = 1026;
        int v31 = v18;
        __int16 v32 = 1026;
        unsigned int v33 = v19;
        __int16 v34 = 2049;
        uint64_t v35 = v20;
        __int16 v36 = 2049;
        uint64_t v37 = v21;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileHeaderDecoder,tileHeaderFields\", \"creation_timestamp_s\":\"%{public}f\", \"tile_content_iod_number\":%{public}u, \"tile_format_version\":%{public}u, \"expiration_age_s\":%{public}u, \"tile_south_west_corner_latitude_deg\":\"%{private}f\", \"tile_south_west_corner_longitude_deg\":\"%{private}f\"}", (uint8_t *)&v22, 0x42u);
      }
    }
  }
}

uint64_t sub_1004DD588(uint64_t a1, uint64_t a2)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022B6E70);
  }
  id v3 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v4 = a2;
    }
    else {
      uint64_t v4 = *(void *)a2;
    }
    *(_DWORD *)uint64_t buf = 68289282;
    int v12 = 0;
    __int16 v13 = 2082;
    uint64_t v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileHeaderDecoder,readFirstProtobuf\", \"tileFile\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  memset(&__p, 0, sizeof(__p));
  if (!sub_101878A14((uint64_t *)a2, &__p))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022B6E90);
    }
    uint64_t v6 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#RTTMA,CLRayTracingTileHeaderDecoder,error,failed to create/open protobuf input stream", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_23;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_28;
    }
LABEL_30:
    dispatch_once(&qword_102419380, &stru_1022B6E90);
LABEL_28:
    int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRayTracingTileHeaderDecoder::readFirstProtobuf(const std::string &, ::CLP::LogEntry::LogEntry &) const", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
    goto LABEL_23;
  }
  if (wireless_diagnostics::google::protobuf::MessageLite::ParseFromString())
  {
    uint64_t v5 = 1;
    goto LABEL_24;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022B6E90);
  }
  uint64_t v7 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#RTTMA,CLRayTracingTileHeaderDecoder,error,cannot ParseFromString()", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_28;
    }
    goto LABEL_30;
  }
LABEL_23:
  uint64_t v5 = 0;
LABEL_24:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_1004DD920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004DD944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022B6E70);
  }
  uint64_t v5 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    v11[0] = 68289026;
    v11[1] = 0;
    __int16 v12 = 2082;
    __int16 v13 = "";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileHeaderDecoder,decodeHeader\"}", (uint8_t *)v11, 0x12u);
  }
  sub_100168850(v11);
  uint64_t v7 = sub_1004DD588(v6, a2);
  if ((v7 & 1) != 0 && (uint64_t v8 = sub_1004DD2A8(v7, (uint64_t)v11), v8))
  {
    sub_1004DD2FC(v8, (uint64_t)v11, a3);
    uint64_t v9 = 1;
  }
  else
  {
    uint64_t v9 = 0;
  }
  sub_1001687EC(v11);
  return v9;
}

void sub_1004DDA74(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1004DDA90(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022B6E70);
  }
  uint64_t v5 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    v16[0] = 68289026;
    v16[1] = 0;
    __int16 v17 = 2082;
    int v18 = "";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileHeaderDecoder,tileIod\"}", (uint8_t *)v16, 0x12u);
  }
  sub_100168850(v16);
  uint64_t v7 = sub_1004DD588(v6, a2);
  if ((v7 & 1) == 0 || !sub_1004DD2A8(v7, (uint64_t)v16)) {
    goto LABEL_14;
  }
  uint64_t v8 = v19;
  uint64_t v9 = v19;
  if (!v19) {
    uint64_t v9 = *(void *)(qword_10248D2B8 + 40);
  }
  uint64_t v10 = *(void *)(v9 + 344);
  if (!v10) {
    uint64_t v10 = *(void *)(qword_10248A400 + 344);
  }
  uint64_t v11 = *(void *)(v10 + 8);
  if (!v11) {
    uint64_t v11 = *(void *)(qword_10248D6D8 + 8);
  }
  if ((*(unsigned char *)(v11 + 48) & 4) != 0)
  {
    if (!v19) {
      uint64_t v8 = *(void *)(qword_10248D2B8 + 40);
    }
    uint64_t v14 = *(void *)(v8 + 344);
    if (!v14) {
      uint64_t v14 = *(void *)(qword_10248A400 + 344);
    }
    uint64_t v15 = *(void *)(v14 + 8);
    if (!v15) {
      uint64_t v15 = *(void *)(qword_10248D6D8 + 8);
    }
    *a3 = *(_DWORD *)(v15 + 20);
    uint64_t v12 = 1;
  }
  else
  {
LABEL_14:
    uint64_t v12 = 0;
  }
  sub_1001687EC(v16);
  return v12;
}

void sub_1004DDC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1004DDC70(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_1004DDCA0(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_1004DDCD0(uint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4)
{
  if (*(unsigned char *)(a2 + 32)) {
    int v6 = 1;
  }
  else {
    int v6 = sub_1000FC450();
  }
  sub_1000C7F88(&__p);
  v21.__r_.__value_.__s.__data_[0] = 0;
  CFStringRef v7 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsPowerLogEnabled", 0x8000100u, kCFAllocatorNull);
  int v8 = sub_1000D29FC(__p, (uint64_t)v7, (BOOL *)&v21);
  CFRelease(v7);
  int v9 = v21.__r_.__value_.__s.__data_[0];
  if (*((void *)&__p + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&__p + 1));
  }
  int v10 = v8 ^ 1;
  if (v9) {
    int v10 = 1;
  }
  if (v6 & v10)
  {
    std::operator+<char>();
    if (v26 >= 0) {
      uint64_t p_p = &__p;
    }
    else {
      uint64_t p_p = (long long *)__p;
    }
    sub_100105634((uint64_t)a4, (uint64_t)p_p);
    if (v26 < 0) {
      operator delete((void *)__p);
    }
    sub_1000E9354(v22);
    sub_100017FD4(v22, a4);
    if (*(unsigned char *)(a2 + 32))
    {
      uint64_t v12 = *(void *)(a2 + 24);
      if (!v12) {
        sub_10015E48C();
      }
      (*(void (**)(uint64_t, void *))(*(void *)v12 + 48))(v12, v22);
    }
    memset(&v21, 0, sizeof(v21));
    sub_1004D6B10((uint64_t)v22, &v21);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_1022B6EB0);
    }
    __int16 v13 = qword_102419458;
    if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v14 = &v21;
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
      }
      LODWORD(__p) = 136380675;
      *(void *)((char *)&__p + 4) = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Wrote microlocation metrics to power log: %{private}s", (uint8_t *)&__p, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_102419450 != -1) {
        dispatch_once(&qword_102419450, &stru_1022B6EB0);
      }
      uint64_t v19 = &v21;
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v19 = (std::string *)v21.__r_.__value_.__r.__words[0];
      }
      int v23 = 136380675;
      __int16 v24 = v19;
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMicroLocationPowerLog::logMetrics(std::optional<ObserverPowerLogFunction>, std::string, NSDictionary *) const", "%s\n", v20);
      if (v20 != (char *)&__p) {
        free(v20);
      }
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    uint64_t v15 = (long long *)v22;
LABEL_35:
    sub_10013F3C4(v15);
    return;
  }
  if (qword_102419450 != -1) {
    dispatch_once(&qword_102419450, &stru_1022B6EB0);
  }
  uint64_t v16 = qword_102419458;
  if (os_log_type_enabled((os_log_t)qword_102419458, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(__p) = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "PowerLog is not enabled so not writing microlocation metrics", (uint8_t *)&__p, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_102419450 != -1) {
      dispatch_once(&qword_102419450, &stru_1022B6EB0);
    }
    LOWORD(v21.__r_.__value_.__l.__data_) = 0;
    int v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMicroLocationPowerLog::logMetrics(std::optional<ObserverPowerLogFunction>, std::string, NSDictionary *) const", "%s\n", v18);
    if (v18 != (char *)&__p) {
      free(v18);
    }
  }
  if (*(unsigned char *)(a2 + 32))
  {
    sub_1000E9354(&__p);
    uint64_t v17 = *(void *)(a2 + 24);
    if (!v17) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, long long *))(*(void *)v17 + 48))(v17, &__p);
    uint64_t v15 = &__p;
    goto LABEL_35;
  }
}

void sub_1004DE184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_10013F3C4(&a18);
  _Unwind_Resume(a1);
}

void sub_1004DE1F8(id a1)
{
  qword_102419458 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_1004DE228(uint64_t a1, uint64_t a2)
{
  sub_100F109B0(a1, 1);
  void *v3 = off_1022B6EE0;
  v3[8] = a2;
}

uint64_t sub_1004DE278(uint64_t a1, double a2)
{
  double v3 = a2;
  uint64_t result = *(void *)(a1 + 64);
  if (result) {
    return (*(uint64_t (**)(uint64_t, double *))(*(void *)result + 16))(result, &v3);
  }
  return result;
}

BOOL sub_1004DE2C8(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 16) + *(double *)(a2 + 24) > 75.0 || sub_10126C8F0(a2);
}

void *sub_1004DE2F0(void *a1)
{
  *a1 = off_1022B6F38;
  sub_1000D816C(a1 + 2);
  return a1;
}

void sub_1004DE334(void *a1)
{
  *a1 = off_1022B6F38;
  sub_1000D816C(a1 + 2);

  operator delete();
}

id sub_1004DE9BC(uint64_t a1)
{
  return [*(id *)(a1 + 32) toggleProactiveVehicleDetection:0];
}

id sub_1004DF918(uint64_t a1, uint64_t a2, long long *a3, void *a4)
{
  long long v5 = *a3;
  uint64_t v6 = *((void *)a3 + 2);
  return [a4 providerOnVehicleStateNotification:&v5];
}

id sub_1004DF950(uint64_t a1, uint64_t a2, unsigned char *a3, void *a4)
{
  if (a3[1]) {
    BOOL v4 = *a3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return _[a4 providerFitnessTrackingNotification:0];
  }
  else {
    return _[a4 providerFitnessTrackingNotification:1];
  }
}

void sub_1004E02F0(id a1)
{
  qword_102419248 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DistributedSensing");
}

void sub_1004E08CC(id a1, BOOL a2, NSError *a3)
{
  if (a2)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022B6F98);
    }
    double v3 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Fall event successfully pushed to HKHealthStore", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022B6F98);
      }
      BOOL v4 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "+[CLFallHealthKitManager recordFallEventInHealthKit:]_block_invoke", "%s\n");
LABEL_19:
      if (v4 != buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022B6F98);
    }
    uint64_t v6 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 138412290;
      int v8 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "HKHealthStore, saveObjects failed on, %@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1022B6F98);
      }
      BOOL v4 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "+[CLFallHealthKitManager recordFallEventInHealthKit:]_block_invoke", "%s\n");
      goto LABEL_19;
    }
  }
}

void sub_1004E0B90(id a1)
{
  qword_1024190F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

uint64_t sub_1004E0BC0(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  int v10 = (std::__shared_weak_count *)a4[1];
  uint64_t v21 = *a4;
  int v22 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = (std::__shared_weak_count *)a5[1];
  uint64_t v19 = *a5;
  uint64_t v20 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (std::__shared_weak_count *)a6[1];
  uint64_t v17 = *a6;
  int v18 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v16[0] = xmmword_10247AE30;
  v16[1] = unk_10247AE40;
  _DWORD v16[2] = xmmword_10247AE50;
  sub_100D6AEB4(a1, a2, 13, &v21, &v19, &v17, a8, a7, v16);
  if (v18) {
    sub_1000DB0A0(v18);
  }
  if (v20) {
    sub_1000DB0A0(v20);
  }
  if (v22) {
    sub_1000DB0A0(v22);
  }
  *(void *)a1 = off_1022B6FC8;
  *(void *)(a1 + 352) = *a3;
  uint64_t v13 = a3[1];
  *(void *)(a1 + 360) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(unsigned char *)(a1 + 400) = 0;
  *(void *)(a1 + 392) = 0;
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022B70D0);
  }
  uint64_t v14 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t buf = 68289282;
    __int16 v24 = 2082;
    long long v25 = "";
    __int16 v26 = 2050;
    uint64_t v27 = 13;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"construction\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&buf, 0x1Cu);
  }
  *(void *)(a1 + 368) = [*(id *)(a1 + 72) classifyingStoreForHarvesterWithSubArchiving:13 itemCountThresholdForAutoCleanUp:500];
  return a1;
}

void sub_1004E0DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a18) {
    sub_1000DB0A0(a18);
  }
  if (a20) {
    sub_1000DB0A0(a20);
  }
  int v22 = *(std::__shared_weak_count **)(v20 - 72);
  if (v22) {
    sub_1000DB0A0(v22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004E0E14(uint64_t a1)
{
  *(void *)a1 = off_1022B6FC8;

  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 360);
  if (v2) {
    sub_1000DB0A0(v2);
  }

  return sub_1003C0998(a1);
}

void sub_1004E0E80(uint64_t a1)
{
  sub_1004E0E14(a1);

  operator delete();
}

uint64_t sub_1004E0EBC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247AE68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10247AE68))
  {
    byte_10247AE60 = sub_100743790();
    __cxa_guard_release(&qword_10247AE68);
  }
  return byte_10247AE60;
}

void sub_1004E0F18(_Unwind_Exception *a1)
{
}

uint64_t sub_1004E0F30(uint64_t a1, uint64_t a2)
{
  sub_1000E9354(v11);
  BOOL v4 = (_OWORD *)(a1 + 280);
  long long v5 = unk_10247AE40;
  _OWORD *v4 = xmmword_10247AE30;
  v4[1] = v5;
  *(_OWORD *)((char *)v4 + 25) = unk_10247AE49;
  if (sub_100012960(a2, "Ionosphere", v11)) {
    sub_1012B77D8((uint64_t)v4, (uint64_t)v11);
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022B70D0);
  }
  uint64_t v6 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    sub_1012B7520();
    if (v10 >= 0) {
      uint64_t p_p = &__p;
    }
    else {
      uint64_t p_p = __p;
    }
    *(_DWORD *)uint64_t buf = 68289539;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    __int16 v16 = 2050;
    uint64_t v17 = 13;
    __int16 v18 = 2081;
    uint64_t v19 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"harvest-apply-rules\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"rules\":%{private, location:escape_only}s}", buf, 0x26u);
    if (v10 < 0) {
      operator delete(__p);
    }
  }
  return sub_10013F3C4(v11);
}

void sub_1004E10B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_1004E10D8(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)CLPIonosphereCollectionRequest);
  [v2 setMeta:+[CLPMeta meta](CLPMeta, "meta")];
  v15[0] = [*(id *)(a1 + 368) homeArchive];
  v15[1] = [*(id *)(a1 + 368) workArchive];
  _OWORD v15[2] = [*(id *)(a1 + 368) mainArchive];
  double v3 = +[NSArray arrayWithObjects:v15 count:3];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v4 = [(NSArray *)v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        int v8 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        [v8 overwritePrimaryObject:v2];
        v9[0] = _NSConcreteStackBlock;
        v9[1] = 3221225472;
        _DWORD v9[2] = sub_1004E1294;
        void v9[3] = &unk_1022B7098;
        void v9[4] = v8;
        void v9[5] = a1;
        [v8 iterateSubArchivesWithHandler:v9];
      }
      id v5 = [(NSArray *)v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }
}

id sub_1004E1294(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if ([a2 count])
  {
    id v5 = [a2 mappedDataByDestructivelyCombiningPrimaryAndSecondaryData];
    if (v5)
    {
      uint64_t v6 = [[CLHUploadRequest alloc] initWithPayload:v5];
      -[CLHUploadRequest setEndpoint:](v6, "setEndpoint:", [objc_msgSend(*(id *)(v4 + 80), "endpointSelector") ionosphereEndpoint]);
      [*(id *)(v4 + 80) submitRequest:v6];
    }
  }
  id result = [a2 count];
  if (!result)
  {
    int v8 = *(void **)(a1 + 32);
    return _[v8 deleteSubArchiveIfInactive:a2];
  }
  return result;
}

uint64_t sub_1004E1354(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = sub_10012FD50(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 24))(v2, v3, 2);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = sub_10012FD50(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 24))(v4, v5, 3);
  return 1;
}

uint64_t sub_1004E13EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = sub_10012FD50(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 32))(v2, v3, 2);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = sub_10012FD50(a1);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 32);

  return v6(v4, v5, 3);
}

id sub_1004E148C(uint64_t a1)
{
  return [*(id *)(a1 + 368) count];
}

id sub_1004E1494(uint64_t a1)
{
  double v2 = (*(double (**)(void))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56));
  double v3 = v2 - (*(double (**)(uint64_t))(*(void *)a1 + 184))(a1);
  uint64_t v4 = *(void **)(a1 + 368);

  return [v4 pruneSecondaryDataOlderThan:v3];
}

id sub_1004E1528(uint64_t a1)
{
  return [*(id *)(a1 + 368) eraseAllData];
}

void sub_1004E1530(uint64_t a1, int a2, int a3, CLMotionActivity *this)
{
  if (CLMotionActivity::isStatic(this)) {
    int v6 = 0;
  }
  else {
    int v6 = CLMotionActivity::isUnclassifiedMoving(this) ^ 1;
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022B70D0);
  }
  CFStringRef v7 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    uint64_t type = this->type;
    int v9 = *(unsigned __int8 *)(a1 + 400);
    v10[0] = 68290051;
    v10[1] = 0;
    __int16 v11 = 2082;
    long long v12 = "";
    __int16 v13 = 2050;
    uint64_t v14 = 13;
    __int16 v15 = 2049;
    uint64_t v16 = type;
    __int16 v17 = 1025;
    int v18 = v9;
    __int16 v19 = 1025;
    int v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Received motion state\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"data.activity.type\":%{private}lu, \"current fIsMoving\":%{private}hhd, \"new isMoving\":%{private}hhd}", (uint8_t *)v10, 0x32u);
  }
  *(unsigned char *)(a1 + 400) = v6;
}

void sub_1004E1674(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  double v6 = sub_10016C458();
  double v7 = *(double *)(a1 + 376);
  if (v7 != 0.0)
  {
    double v8 = v6 - v7;
    int v9 = sub_101069E64();
    if (v8 < sub_100C8D894((uint64_t)v9))
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022B70D0);
      }
      uint64_t v10 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        double v11 = *(double *)(a1 + 376);
        long long v12 = sub_101069E64();
        *(_DWORD *)uint64_t buf = 68289795;
        int v81 = 0;
        __int16 v82 = 2082;
        uint64_t v83 = "";
        __int16 v84 = 2050;
        uint64_t v85 = *(void *)&v6;
        __int16 v86 = 2049;
        double v87 = v11;
        __int16 v88 = 2049;
        double v89 = sub_100C8D894((uint64_t)v12);
        __int16 v13 = "{\"msg%{public}.0s\":\"Ionosphere Harvest: Skipping, required interval has not passed:\", \"Current\":\"%{"
              "public}f\", \"LastIonosphereCollection\":\"%{private}f\", \"CollectionInterval\":\"%{private}f\"}";
        uint64_t v14 = v10;
        os_log_type_t v15 = OS_LOG_TYPE_DEBUG;
        uint32_t v16 = 48;
LABEL_62:
        _os_log_impl((void *)&_mh_execute_header, v14, v15, v13, buf, v16);
        return;
      }
      return;
    }
  }
  if (!*(unsigned char *)(a1 + 400))
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022B70D0);
    }
    uint64_t v22 = qword_102419568;
    if (!os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    *(_DWORD *)uint64_t buf = 68289282;
    int v81 = 0;
    __int16 v82 = 2082;
    uint64_t v83 = "";
    __int16 v84 = 2050;
    uint64_t v85 = 13;
    __int16 v13 = "{\"msg%{public}.0s\":\"Skipping, motion state is static or unclassified moving.\", \"subHarvester\":%{public, "
          "location:CLSubHarvesterIdentifier}lld}";
    uint64_t v14 = v22;
    os_log_type_t v15 = OS_LOG_TYPE_DEBUG;
    goto LABEL_61;
  }
  __int16 v68 = 0;
  v69.var0 = 0;
  v69.var1 = 0.0;
  CNTimeSpan::SetTimeSpan(&v69, 0, 0.0);
  int64x2_t v60 = vdupq_n_s64(0x7FF8000000000000uLL);
  int64x2_t v70 = v60;
  v72.var0 = 0;
  v72.var1 = 0.0;
  uint64_t v71 = 0x7FF8000000000000;
  CNTimeSpan::SetTimeSpan(&v72, 0, 0.0);
  int64x2_t v73 = v60;
  int64x2_t v74 = v60;
  int64x2_t v75 = v60;
  int64x2_t v76 = v60;
  int64x2_t v77 = v60;
  int64x2_t v78 = v60;
  int64x2_t v79 = v60;
  if ((*(unsigned int (**)(void, __int16 *))(**(void **)(a1 + 352) + 16))(*(void *)(a1 + 352), &v68)) {
    BOOL v17 = v68 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17 || HIBYTE(v68) == 0) {
    return;
  }
  double v19 = v72.var1 + (double)v72.var0;
  if (v19 - *(double *)(a1 + 384) >= 1.0)
  {
    int64x2_t v130 = v70;
    uint64_t v131 = v71;
    if (cnnavigation::ECEFToLLA())
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022B70D0);
      }
      uint64_t v23 = qword_102419568;
      if (!os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      *(_DWORD *)uint64_t buf = 68289282;
      int v81 = 0;
      __int16 v82 = 2082;
      uint64_t v83 = "";
      __int16 v84 = 2050;
      uint64_t v85 = 13;
      __int16 v13 = "{\"msg%{public}.0s\":\"ECEF to LLA conversion failed.\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}";
    }
    else
    {
      id v24 = (id)objc_opt_new();
      [v24 setLatitudeDeg:v132 * 57.2957795];
      [v24 setLongitudeDeg:v133 * 57.2957795];
      [v24 setGeodeticAltitudeM:v134];
      double v25 = v69.var1 + (double)v69.var0;
      double v26 = fabs(v25);
      if ((unint64_t)(*(void *)&v26 - 0x10000000000000) >> 53 < 0x3FF
        || (unint64_t)(*(void *)&v26 - 1) < 0xFFFFFFFFFFFFFLL
        || COERCE__INT64(v69.var1 + (double)v69.var0) == 0)
      {
        __int16 v58 = a4;
        [v24 setEstimatorAgeSec:v69.var1 + (double)v69.var0];
        [v24 setApplicableTimeSec:v19];
        [v24 setHmaxKm:*(double *)v73.i64];
        [v24 setVtec0:*(double *)&v73.i64[1]];
        [v24 setD2vtecDphi2:*(double *)v76.i64];
        [v24 setD2vtecDtheta2:*(double *)v75.i64];
        [v24 setD2vtecDthetaphi:*(double *)&v75.i64[1]];
        [v24 setDvtecDphi:*(double *)&v74.i64[1]];
        [v24 setDvtecDtheta:*(double *)v74.i64];
        [v24 setPhmaxHmaxKm2:*(double *)&v76.i64[1]];
        [v24 setPvtec0Vtec0:*(double *)v77.i64];
        [v24 setPdvtecDthetaDvtecDtheta:*(double *)&v77.i64[1]];
        [v24 setPdvtecDphiDvtecDphi:*(double *)v78.i64];
        [v24 setPd2vtecDtheta2D2vtecDtheta2:*(double *)&v78.i64[1]];
        [v24 setPd2vtecDthetadphiD2vtecDthetadphi:*(double *)v79.i64];
        uint64_t v57 = v24;
        [v24 setPd2vtecDphi2D2vtecDphi2:*(double *)&v79.i64[1]];
        v129[0] = [*(id *)(a1 + 368) homeArchive];
        v129[1] = [*(id *)(a1 + 368) workArchive];
        uint64_t v29 = a1;
        v129[2] = [*(id *)(a1 + 368) mainArchive];
        __int16 v30 = +[NSArray arrayWithObjects:v129 count:3];
        long long v64 = 0u;
        long long v65 = 0u;
        long long v66 = 0u;
        long long v67 = 0u;
        id v31 = [(NSArray *)v30 countByEnumeratingWithState:&v64 objects:v128 count:16];
        if (v31)
        {
          id v32 = v31;
          uint64_t v33 = *(void *)v65;
          do
          {
            __int16 v34 = 0;
            do
            {
              if (*(void *)v65 != v33) {
                objc_enumerationMutation(v30);
              }
              uint64_t v35 = *(void **)(*((void *)&v64 + 1) + 8 * (void)v34);
              id v36 = [v35 count];
              uint64_t v37 = sub_101069E64();
              if ((unint64_t)v36 >= sub_1006D40B0((unsigned int *)v37)
                || v36 && v25 < *(double *)(v29 + 392))
              {
                if (qword_102419560 != -1) {
                  dispatch_once(&qword_102419560, &stru_1022B70D0);
                }
                uint64_t v38 = qword_102419568;
                if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
                {
                  double v39 = *(double *)(v29 + 392);
                  *(_DWORD *)uint64_t buf = 68289794;
                  int v81 = 0;
                  __int16 v82 = 2082;
                  uint64_t v83 = "";
                  __int16 v84 = 2050;
                  uint64_t v85 = (uint64_t)v36;
                  __int16 v86 = 2050;
                  double v87 = v25;
                  __int16 v88 = 2050;
                  double v89 = v39;
                  _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Ionosphere Harvest: rotating subarchive\", \"archiveCount\":%{public}lu, \"estimatorAgeSec\":\"%{public}f\", \"fLastEstimatorAgeSec\":\"%{public}f\"}", buf, 0x30u);
                }
                [v35 generateNewSubArchive];
              }
              __int16 v34 = (char *)v34 + 1;
            }
            while (v32 != v34);
            id v32 = [(NSArray *)v30 countByEnumeratingWithState:&v64 objects:v128 count:16];
          }
          while (v32);
        }
        id v40 = objc_alloc((Class)CLPLocation);
        long long v41 = v58[7];
        v62[6] = v58[6];
        v62[7] = v41;
        v63[0] = v58[8];
        *(_OWORD *)((char *)v63 + 12) = *(_OWORD *)((char *)v58 + 140);
        long long v42 = v58[3];
        v62[2] = v58[2];
        v62[3] = v42;
        long long v43 = v58[5];
        v62[4] = v58[4];
        _OWORD v62[5] = v43;
        long long v44 = v58[1];
        v62[0] = *v58;
        v62[1] = v44;
        [*(id *)(v29 + 368) writeSecondaryObject:v57 collectedAt:[v40 initWithDaemonLocation:v62] toField:2];
        *(double *)(v29 + 376) = v6;
        *(double *)(v29 + 384) = v19;
        *(double *)(v29 + 392) = v25;
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_1022B70D0);
        }
        uint64_t v45 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
        {
          int64x2_t v46 = v70;
          uint64_t v47 = v71;
          int64x2_t v48 = v73;
          uint64_t v50 = v75.i64[1];
          uint64_t v49 = v76.i64[0];
          uint64_t v51 = v75.i64[0];
          uint64_t v59 = v74.i64[1];
          uint64_t v61 = v74.i64[0];
          [v57 latitudeDeg];
          uint64_t v53 = v52;
          [v57 longitudeDeg];
          uint64_t v55 = v54;
          [v57 geodeticAltitudeM];
          *(_DWORD *)uint64_t buf = 68294659;
          int v81 = 0;
          __int16 v82 = 2082;
          uint64_t v83 = "";
          __int16 v84 = 2049;
          uint64_t v85 = *(void *)&v19;
          __int16 v86 = 2049;
          double v87 = *(double *)v46.i64;
          __int16 v88 = 2049;
          double v89 = *(double *)&v46.i64[1];
          __int16 v90 = 2049;
          uint64_t v91 = v47;
          __int16 v92 = 2049;
          uint64_t v93 = v48.i64[0];
          __int16 v94 = 2049;
          uint64_t v95 = v48.i64[1];
          __int16 v96 = 2049;
          uint64_t v97 = v49;
          __int16 v98 = 2049;
          uint64_t v99 = v51;
          __int16 v100 = 2049;
          uint64_t v101 = v50;
          __int16 v102 = 2049;
          uint64_t v103 = v59;
          __int16 v104 = 2049;
          uint64_t v105 = v61;
          __int16 v106 = 2049;
          uint64_t v107 = v53;
          __int16 v108 = 2049;
          uint64_t v109 = v55;
          __int16 v110 = 2049;
          uint64_t v111 = v56;
          __int16 v112 = 2049;
          double v113 = v25;
          __int16 v114 = 2049;
          uint64_t v115 = v76.i64[1];
          __int16 v116 = 2049;
          uint64_t v117 = v77.i64[0];
          __int16 v118 = 2049;
          uint64_t v119 = v77.i64[1];
          __int16 v120 = 2049;
          uint64_t v121 = v78.i64[0];
          __int16 v122 = 2049;
          uint64_t v123 = v78.i64[1];
          __int16 v124 = 2049;
          uint64_t v125 = v79.i64[0];
          __int16 v126 = 2049;
          uint64_t v127 = v79.i64[1];
          __int16 v13 = "{\"msg%{public}.0s\":\"Harvested IonosphereParameters:\", \"applicable_time\":\"%{private}f\", \"applica"
                "ble_position_x_ecef_\":\"%{private}f\", \"applicable_position_y_ecef_\":\"%{private}f\", \"applicable_po"
                "sition_z_ecef_\":\"%{private}f\", \"hmax_\":\"%{private}f\", \"vtec0_\":\"%{private}f\", \"d2vtec_dphi2_"
                "\":\"%{private}f\", \"d2vtec_dtheta2_\":\"%{private}f\", \"d2vtec_dthetadphi_\":\"%{private}f\", \"dvtec"
                "_dphi_\":\"%{private}f\", \"dvtec_dtheta_\":\"%{private}f\", \"latitudeDeg\":\"%{private}f\", \"longitud"
                "eDeg\":\"%{private}f\", \"altitudeM\":\"%{private}f\", \"estimator_time_duration\":\"%{private}f\", \"ph"
                "max_hmax_\":\"%{private}f\", \"pvtec0_vtec0_\":\"%{private}f\", \"pdvtec_dtheta_dvtec_dtheta_\":\"%{priv"
                "ate}f\", \"pdvtec_dphi_dvtec_dphi_\":\"%{private}f\", \"pd2vtec_dtheta2_d2vtec_dtheta2_\":\"%{private}f\""
                ", \"pd2vtec_dthetadphi_d2vtec_dthetadphi_\":\"%{private}f\", \"pd2vtec_dphi2_d2vtec_dphi2_\":\"%{private}f\"}";
          uint64_t v14 = v45;
          os_log_type_t v15 = OS_LOG_TYPE_DEBUG;
          uint32_t v16 = 238;
          goto LABEL_62;
        }
        return;
      }
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022B70D0);
      }
      uint64_t v23 = qword_102419568;
      if (!os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      *(_DWORD *)uint64_t buf = 68289282;
      int v81 = 0;
      __int16 v82 = 2082;
      uint64_t v83 = "";
      __int16 v84 = 2050;
      uint64_t v85 = 13;
      __int16 v13 = "{\"msg%{public}.0s\":\"parameter_estimation_time_duration_ is not a valid value\", \"subHarvester\":%{public"
            ", location:CLSubHarvesterIdentifier}lld}";
    }
    uint64_t v14 = v23;
    os_log_type_t v15 = OS_LOG_TYPE_DEFAULT;
LABEL_61:
    uint32_t v16 = 28;
    goto LABEL_62;
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022B70D0);
  }
  uint64_t v20 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    double v21 = *(double *)(a1 + 384);
    *(_DWORD *)uint64_t buf = 68289539;
    int v81 = 0;
    __int16 v82 = 2082;
    uint64_t v83 = "";
    __int16 v84 = 2049;
    uint64_t v85 = *(void *)&v19;
    __int16 v86 = 2049;
    double v87 = v21;
    __int16 v13 = "{\"msg%{public}.0s\":\"Ionosphere Harvest: Already harvested at time:\", \"applicable_time\":\"%{private}f\", "
          "\"LastApplicableTimeHarvested\":\"%{private}f\"}";
    uint64_t v14 = v20;
    os_log_type_t v15 = OS_LOG_TYPE_DEFAULT;
    uint32_t v16 = 38;
    goto LABEL_62;
  }
}

void sub_1004E2018(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

uint64_t sub_1004E2048()
{
  return sub_1012B748C((uint64_t)&xmmword_10247AE30, 1, 2, 2, 0, 0.0, 21600.0, 21600.0);
}

uint64_t sub_1004E2088(uint64_t a1)
{
  uint64_t v2 = sub_100877858(a1, &off_1022B70F0);
  sub_100877858(v2 + 64, &off_1022B70F0);
  sub_100877858(a1 + 128, &off_1022B70F0);
  sub_100877858(a1 + 192, &off_1022B70F0);
  sub_100877858(a1 + 256, &off_1022B70F0);
  *(unsigned char *)(a1 + 320) = 1;
  *(void *)(a1 + 336) = 0x25A00000000;
  *(_DWORD *)(a1 + 332) = 1031798784;
  *(unsigned char *)(a1 + 2752) = 1;
  *(void *)(a1 + 2768) = 0x25A00000000;
  *(_DWORD *)(a1 + 2764) = 1031798784;
  *(unsigned char *)(a1 + 5184) = 1;
  *(void *)(a1 + 5200) = 0x25A00000000;
  *(unsigned char *)(a1 + 7616) = 1;
  *(_DWORD *)(a1 + 5196) = 1031798784;
  *(void *)(a1 + 7632) = 0x25A00000000;
  *(_DWORD *)(a1 + 7628) = 1031798784;
  *(_OWORD *)(a1 + 10048) = 0u;
  return a1;
}

uint64_t sub_1004E2140(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5)
{
  sub_1004E236C(a1, (float *)a2, a3);
  if (*(void *)(a1 + 10048) < 0x40uLL) {
    return 0;
  }
  float v9 = *(float *)(a4 + 16);
  BOOL v10 = *(float *)(a4 + 24) > 30.0 && v9 == 0.0;
  float v11 = v9 * 60.0;
  if (v10) {
    float v12 = 46.154;
  }
  else {
    float v12 = v11;
  }
  float v13 = (float)(480.0 / v12) / 0.04;
  if (v12 <= 20.0) {
    float v13 = 600.0;
  }
  int v14 = (int)fmaxf(v13, 320.0);
  if (*(unsigned __int16 *)(a1 + 2770) < v14) {
    return 0;
  }
  *(void *)uint64_t v33 = 0x25A00000000;
  sub_1004E262C(a1);
  uint64_t v32 = 0;
  memset(v31, 0, sizeof(v31));
  uint64_t v30 = 0;
  memset(v29, 0, sizeof(v29));
  unint64_t v27 = 0;
  sub_1004E2A90(a1, v14, v33, (uint64_t)v31, (uint64_t)v29, &v27, v12);
  unint64_t v25 = 0;
  unint64_t v26 = 0;
  if (v27 < 2)
  {
    int v19 = 0;
    float v17 = 0.0;
    float v18 = 0.0;
  }
  else
  {
    float v17 = sub_1004E2C28(v12, v16, v31, v29, v27, &v26, &v25);
    int v24 = 0;
    float v18 = sub_1004E2D94(a1, v26, v25, v33, (float *)&v24);
    int v19 = v24;
  }
  *(void *)__int16 v28 = 0x14000000000;
  sub_1004E2E0C(v16, v33, v28);
  int v21 = v20;
  float v23 = sub_1004E2EEC(v22, v28);
  *(_DWORD *)(a5 + 20) = v19;
  *(float *)(a5 + 24) = v18;
  *(float *)(a5 + 12) = v23;
  *(float *)(a5 + 16) = v17;
  *(_DWORD *)(a5 + 8) = v21;
  *(void *)a5 = *(void *)(a2 + 48);
  *(void *)(a1 + 10048) = 0;
  return 1;
}

void sub_1004E236C(uint64_t a1, float *a2, int *a3)
{
  ++*(void *)(a1 + 10056);
  float v6 = sub_100B9BC00(a2);
  float v7 = a2[4];
  sub_100B9BD60(a2, v43);
  float v8 = sub_10126D71C((uint64_t)v43);
  float v10 = v9;
  int v11 = *a3;
  LODWORD(a3) = a3[1];
  sub_100B9BD60(a2, v42);
  sub_1004E2FA0((uint64_t)v42, (uint64_t)v43);
  float v12 = sub_1004E301C((uint64_t)v43, a2 + 4);
  float v14 = v13;
  float v15 = v7 + v6;
  if (v11 != a3) {
    float v15 = -(float)(v7 + v6);
  }
  sub_10087785C((unsigned __int16 *)a1, v15);
  int v17 = v16;
  sub_10087785C((unsigned __int16 *)(a1 + 64), v12);
  int v19 = v18;
  sub_10087785C((unsigned __int16 *)(a1 + 128), v14);
  int v21 = v20;
  sub_10087785C((unsigned __int16 *)(a1 + 192), v8);
  float v23 = v22;
  sub_10087785C((unsigned __int16 *)(a1 + 256), v10);
  if (*(void *)(a1 + 10056) >= 4uLL)
  {
    uint64_t v25 = *(unsigned __int16 *)(a1 + 338);
    unint64_t v26 = *(unsigned int *)(a1 + 340);
    uint64_t v27 = *(unsigned __int16 *)(a1 + 336);
    if (v27 + v25 >= v26) {
      uint64_t v28 = *(unsigned int *)(a1 + 340);
    }
    else {
      uint64_t v28 = 0;
    }
    *(_DWORD *)(a1 + 336 + 4 * (v27 + v25 - v28) + 8) = v17;
    if (v26 <= v25)
    {
      if (v27 + 1 < v26) {
        LOWORD(v26) = 0;
      }
      *(_WORD *)(a1 + 336) = v27 + 1 - v26;
    }
    else
    {
      *(_WORD *)(a1 + 338) = v25 + 1;
    }
    *(unsigned char *)(a1 + 320) = 1;
    uint64_t v29 = *(unsigned __int16 *)(a1 + 2770);
    unint64_t v30 = *(unsigned int *)(a1 + 2772);
    uint64_t v31 = *(unsigned __int16 *)(a1 + 2768);
    if (v31 + v29 >= v30) {
      uint64_t v32 = *(unsigned int *)(a1 + 2772);
    }
    else {
      uint64_t v32 = 0;
    }
    *(_DWORD *)(a1 + 2768 + 4 * (v31 + v29 - v32) + 8) = v19;
    if (v30 <= v29)
    {
      if (v31 + 1 < v30) {
        LOWORD(v30) = 0;
      }
      *(_WORD *)(a1 + 2768) = v31 + 1 - v30;
    }
    else
    {
      *(_WORD *)(a1 + 2770) = v29 + 1;
    }
    *(unsigned char *)(a1 + 2752) = 1;
    uint64_t v33 = *(unsigned __int16 *)(a1 + 5202);
    unint64_t v34 = *(unsigned int *)(a1 + 5204);
    uint64_t v35 = *(unsigned __int16 *)(a1 + 5200);
    if (v35 + v33 >= v34) {
      uint64_t v36 = *(unsigned int *)(a1 + 5204);
    }
    else {
      uint64_t v36 = 0;
    }
    *(_DWORD *)(a1 + 5200 + 4 * (v35 + v33 - v36) + 8) = v21;
    if (v34 <= v33)
    {
      if (v35 + 1 < v34) {
        LOWORD(v34) = 0;
      }
      *(_WORD *)(a1 + 5200) = v35 + 1 - v34;
    }
    else
    {
      *(_WORD *)(a1 + 5202) = v33 + 1;
    }
    *(unsigned char *)(a1 + 5184) = 1;
    float v37 = atan2f(v24, v23);
    uint64_t v38 = *(unsigned __int16 *)(a1 + 7634);
    unint64_t v39 = *(unsigned int *)(a1 + 7636);
    uint64_t v40 = *(unsigned __int16 *)(a1 + 7632);
    if (v40 + v38 >= v39) {
      uint64_t v41 = *(unsigned int *)(a1 + 7636);
    }
    else {
      uint64_t v41 = 0;
    }
    *(float *)(a1 + 7632 + 4 * (v40 + v38 - v41) + 8) = v37;
    if (v39 <= v38)
    {
      if (v40 + 1 < v39) {
        LOWORD(v39) = 0;
      }
      *(_WORD *)(a1 + 7632) = v40 + 1 - v39;
    }
    else
    {
      *(_WORD *)(a1 + 7634) = v38 + 1;
    }
    *(unsigned char *)(a1 + 7616) = 1;
    ++*(void *)(a1 + 10048);
    *(void *)(a1 + 10056) = 0;
  }
}

void sub_1004E262C(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  float v6 = (unsigned __int16 *)v5;
  float v7 = sub_1004E32C0(v5, v3);
  *(void *)uint64_t v51 = 0x25A00000000;
  int v50 = 1031798784;
  *(void *)int64x2_t v48 = 0x25A00000000;
  unsigned int v8 = v6[1385];
  if (v6[2601] < v8) {
    unsigned int v8 = v6[2601];
  }
  if (v8)
  {
    __float2 v9 = __sincosf_stret(v7);
    unint64_t v10 = 0;
    unsigned __int16 v11 = 0;
    unsigned __int16 v12 = 0;
    unsigned __int16 v13 = 0;
    unsigned __int16 v14 = 0;
    do
    {
      float v15 = *(float *)sub_1004182C4(v6 + 1384, v10);
      float v16 = (float)(v9.__sinval * *(float *)sub_1004182C4(v6 + 2600, v10)) + (float)(v9.__cosval * v15);
      unint64_t v17 = v13 + (unint64_t)v12;
      if (v17 >= 0x25A) {
        uint64_t v18 = -602;
      }
      else {
        uint64_t v18 = 0;
      }
      *(float *)&v51[2 * v18 + 4 + 2 * v17] = v16;
      if (v12 > 0x259u)
      {
        if (v13 >= 0x259u) {
          __int16 v19 = -602;
        }
        else {
          __int16 v19 = 0;
        }
        v13 += v19 + 1;
      }
      else
      {
        ++v12;
      }
      float v20 = *(float *)sub_1004182C4(v6 + 1384, v10);
      float v21 = (float)(v9.__cosval * *(float *)sub_1004182C4(v6 + 2600, v10)) + (float)((float)-v9.__sinval * v20);
      unint64_t v22 = v14 + (unint64_t)v11;
      if (v22 >= 0x25A) {
        uint64_t v23 = -602;
      }
      else {
        uint64_t v23 = 0;
      }
      *(float *)&v48[2 * v23 + 4 + 2 * v22] = v21;
      if (v11 > 0x259u)
      {
        if (v14 >= 0x259u) {
          __int16 v24 = -602;
        }
        else {
          __int16 v24 = 0;
        }
        v14 += v24 + 1;
      }
      else
      {
        ++v11;
      }
      ++v10;
      if (v6[2601] >= v6[1385]) {
        unint64_t v25 = v6[1385];
      }
      else {
        unint64_t v25 = v6[2601];
      }
    }
    while (v10 < v25);
    v51[1] = v12;
    v48[1] = v11;
  }
  else
  {
    unsigned __int16 v11 = 0;
    unsigned __int16 v12 = 0;
    unsigned __int16 v14 = 0;
    unsigned __int16 v13 = 0;
  }
  v51[0] = v13;
  char v49 = 1;
  v48[0] = v14;
  if (v4[1] == 1) {
    float v26 = 1.0;
  }
  else {
    float v26 = -1.0;
  }
  int v27 = v12;
  if (v11 < v12) {
    int v27 = v11;
  }
  if (*v4 == 1)
  {
    if (v27)
    {
      unint64_t v28 = 0;
      do
      {
        float v29 = *(float *)sub_1004182C4(v51, v28);
        float v30 = *(float *)sub_1004182C4(v48, v28);
        float v31 = *(float *)sub_1004182C4(v48, v28);
        float v32 = sqrt(v29 * v29 + v30 * v30) * (float)((float)(v26 * v31) / fabsf(*(float *)sub_1004182C4(v48, v28)));
        uint64_t v33 = v2[1];
        unint64_t v34 = *((unsigned int *)v2 + 1);
        uint64_t v35 = *v2;
        if (v35 + v33 >= v34) {
          uint64_t v36 = *((unsigned int *)v2 + 1);
        }
        else {
          uint64_t v36 = 0;
        }
        *(float *)&v2[2 * (v35 + v33 - v36) + 4] = v32;
        if (v34 <= v33)
        {
          if (v35 + 1 < v34) {
            LOWORD(v34) = 0;
          }
          *uint64_t v2 = v35 + 1 - v34;
        }
        else
        {
          v2[1] = v33 + 1;
        }
        ++v28;
        if (v48[1] >= v51[1]) {
          unint64_t v37 = v51[1];
        }
        else {
          unint64_t v37 = v48[1];
        }
      }
      while (v28 < v37);
    }
  }
  else if (v27)
  {
    unint64_t v38 = 0;
    do
    {
      float v39 = *(float *)sub_1004182C4(v51, v38);
      float v40 = *(float *)sub_1004182C4(v48, v38);
      float v41 = *(float *)sub_1004182C4(v51, v38);
      float v42 = sqrt(v39 * v39 + v40 * v40) * (float)((float)(v26 * v41) / fabsf(*(float *)sub_1004182C4(v51, v38)));
      uint64_t v43 = v2[1];
      unint64_t v44 = *((unsigned int *)v2 + 1);
      uint64_t v45 = *v2;
      if (v45 + v43 >= v44) {
        uint64_t v46 = *((unsigned int *)v2 + 1);
      }
      else {
        uint64_t v46 = 0;
      }
      *(float *)&v2[2 * (v45 + v43 - v46) + 4] = v42;
      if (v44 <= v43)
      {
        if (v45 + 1 < v44) {
          LOWORD(v44) = 0;
        }
        *uint64_t v2 = v45 + 1 - v44;
      }
      else
      {
        v2[1] = v43 + 1;
      }
      ++v38;
      if (v48[1] >= v51[1]) {
        unint64_t v47 = v51[1];
      }
      else {
        unint64_t v47 = v48[1];
      }
    }
    while (v38 < v47);
  }
}

void sub_1004E2A90(uint64_t a1, int a2, unsigned __int16 *a3, uint64_t a4, uint64_t a5, void *a6, float a7)
{
  if (a7 >= 46.0)
  {
    float v11 = 0.28571;
  }
  else if (a7 <= 12.0)
  {
    float v11 = 1.4286;
  }
  else
  {
    float v11 = (float)(60.0 / a7) / 3.5;
  }
  unint64_t v17 = 0;
  unint64_t v18 = 0;
  uint64_t v22 = 0;
  memset(v21, 0, sizeof(v21));
  uint64_t v20 = 0;
  memset(v19, 0, sizeof(v19));
  unint64_t v12 = sub_1004E3550(a1, a2, (uint64_t)v21, (uint64_t)v19, &v18, &v17, v11);
  unint64_t v13 = v18;
  sub_1004E3744(0.08, v12, (uint64_t)v21, v18, a3, 1);
  unint64_t v14 = v17;
  sub_1004E3744(0.08, v15, (uint64_t)v19, v17, a3, 0);
  sub_1004E3858((float)((float)(v11 * 3.5) * 0.7) / 5.0, (float)((float)(v11 * 3.5) * 0.75) * 0.5, v16, v21, (uint64_t)v19, v13, v14, a4, a5, a6);
}

float sub_1004E2C28(float a1, uint64_t a2, int *a3, int *a4, unint64_t a5, void *a6, void *a7)
{
  float v7 = 0.0;
  if (a5 < 2) {
    return v7;
  }
  char v8 = 0;
  uint64_t v9 = 30;
  if (a5 < 0x1E) {
    uint64_t v9 = a5;
  }
  int v12 = *a3;
  unint64_t v10 = a3 + 1;
  int v11 = v12;
  int v15 = *a4;
  unint64_t v13 = a4 + 1;
  int v14 = v15;
  uint64_t v16 = v9 - 1;
  float v17 = 3.4028e38;
  float v18 = 3.4028e38;
  float v19 = 3.4028e38;
  do
  {
    int v20 = v14;
    int v21 = *v13++;
    int v14 = v21;
    float v22 = (double)(v21 - v20) * 0.04;
    float v23 = 60.0 / v22;
    if (a1 >= 46.154) {
      BOOL v24 = v23 > 34.615;
    }
    else {
      BOOL v24 = fabsf((float)(v23 - a1) / a1) < 0.25;
    }
    int v26 = *v10++;
    int v25 = v26;
    float v27 = (double)(v26 - v11) * 0.04;
    float v28 = vabds_f32(v27, v22);
    if (v28 >= v19) {
      BOOL v24 = 0;
    }
    float v29 = v28;
    if (v24) {
      goto LABEL_11;
    }
    if (v8)
    {
      char v8 = 1;
    }
    else
    {
      if (v28 < v18)
      {
        float v29 = v19;
LABEL_11:
        *a6 = v11;
        *a7 = v25;
        float v19 = v29;
        char v8 = v24;
        float v17 = v22;
        goto LABEL_18;
      }
      char v8 = 0;
    }
    float v28 = v18;
LABEL_18:
    int v11 = v25;
    float v18 = v28;
    --v16;
  }
  while (v16);
  float v30 = 60.0 / v17;
  if (a1 >= 46.0 || vabds_f32(v30, a1) < (float)(a1 * 0.25)) {
    a1 = fminf(v30, 120.0);
  }
  float v7 = 0.0;
  if (a1 >= 0.0) {
    return a1;
  }
  return v7;
}

float sub_1004E2D94(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int16 *a4, float *a5)
{
  unint64_t v12 = 0;
  sub_1004E3EA0(a1, a2, a3, a4, &v12);
  *(_DWORD *)a5 = v8;
  sub_1004E4178(v9, a2, a4, v12);
  float result = *a5 / v10;
  if (result > 5.0) {
    float result = 5.0;
  }
  if (result < 0.0) {
    return 0.0;
  }
  return result;
}

void sub_1004E2E0C(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  unint64_t v3 = a2[1];
  unint64_t v4 = v3 - 320;
  if (v3 >= 0x140)
  {
    unint64_t v7 = 0;
    float v8 = -3.4028e38;
    float v9 = 3.4028e38;
    do
    {
      float v10 = (float *)sub_1004182C4(a2, v4 + v7);
      if (v8 < *v10) {
        float v8 = *v10;
      }
      int v11 = (float *)sub_1004182C4(a2, v4 + v7);
      if (*v11 < v9) {
        float v9 = *v11;
      }
      int v12 = *(_DWORD *)sub_1004182C4(a2, v4 + v7);
      *(_DWORD *)sub_1004182C4(a3, v7++) = v12;
    }
    while (v7 != 320);
  }
}

float sub_1004E2EEC(uint64_t a1, unsigned __int16 *a2)
{
  sub_1014F0838(v7);
  sub_1014F083C((uint64_t)v7, v8, a2);
  float v3 = sub_100D6A9FC(25, 0x80uLL, 0.1);
  LODWORD(a2) = sub_100D6A824(v3);
  float v4 = sub_100D6A9FC(25, 0x80uLL, 10.0);
  int v5 = sub_100D6A824(v4);
  return sqrtf(fabsf(sub_100D6AA48((int)a2, v5, (uint64_t)v8)));
}

float *sub_1004E2FA0(uint64_t a1, uint64_t a2)
{
  for (unint64_t i = 0; i != 3; ++i)
  {
    for (unint64_t j = 0; j != 3; ++j)
    {
      float v6 = sub_1004E4240(a1, i, j);
      float result = (float *)sub_1004E45A0(a2, j, i);
      *float result = v6;
    }
  }
  return result;
}

float sub_1004E301C(uint64_t a1, float *a2)
{
  for (unint64_t i = 0; i != 3; ++i)
  {
    float v5 = sub_1004E4240(a1, i, 0) * *a2;
    *(float *)sub_1004E4930((uint64_t)&v11, i) = v5;
    for (unint64_t j = 1; j != 3; ++j)
    {
      float v7 = sub_1004E4240(a1, i, j);
      float v8 = sub_1004E30E4((uint64_t)a2, j);
      float v9 = (float *)sub_1004E4930((uint64_t)&v11, i);
      float *v9 = *v9 + (float)(v7 * v8);
    }
  }
  return v11;
}

float sub_1004E30E4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 3)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B7108);
    }
    float v5 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134218240;
      unint64_t v8 = a2;
      __int16 v9 = 2048;
      uint64_t v10 = 3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Assertion failed: i < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMVector.h, line 271,invalid index %zu >= %zu.", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B7108);
      }
      float v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "T CMVector<float, 3>::operator[](const size_t) const [T = float, N = 3]", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return *(float *)(a1 + 4 * a2);
}

float sub_1004E32C0(uint64_t a1, _DWORD *a2)
{
  if (*(unsigned __int16 *)(a1 + 7634) <= 0x140u) {
    int v4 = 320;
  }
  else {
    int v4 = *(unsigned __int16 *)(a1 + 7634);
  }
  uint64_t v5 = (v4 - 320);
  if (v5 >= *(unsigned __int16 *)(a1 + 7634))
  {
    int v7 = 0;
    int v6 = 0;
  }
  else
  {
    int v6 = 0;
    int v7 = 0;
    unint64_t v8 = (v4 - 320);
    do
    {
      if (*(float *)sub_1004182C4((unsigned __int16 *)(a1 + 7632), v8) >= 1.57079633)
      {
        ++v7;
      }
      else if (*(float *)sub_1004182C4((unsigned __int16 *)(a1 + 7632), v8) <= -1.57079633)
      {
        ++v6;
      }
      ++v8;
    }
    while (v8 < *(unsigned __int16 *)(a1 + 7634));
  }
  uint64_t v9 = 0;
  BOOL v10 = v6 <= 0 || v7 <= 0;
  memset(&v20[30], 0, 32);
  if (v10) {
    float v11 = 0.0;
  }
  else {
    float v11 = 6.2832;
  }
  memset(v20, 0, 480);
  int v12 = (unsigned __int16 *)(a1 + 7632);
  do
  {
    double v13 = *(float *)sub_1004182C4(v12, v5 + v9);
    int v14 = (float *)sub_1004182C4(v12, v5 + v9);
    if (v13 <= -1.57079633) {
      float v15 = v11;
    }
    else {
      float v15 = -0.0;
    }
    *((float *)v20 + v9++) = *v14 + v15;
  }
  while (v9 != 320);
  memcpy(__dst, v20, sizeof(__dst));
  sub_100A68AC8((char *)__dst, 4uLL, 0x140uLL, (uint64_t (*)(char *, char *, __n128))sub_1004E353C);
  float v16 = dbl_101D21B30[*a2 == 1] + __dst[159];
  double v17 = v16;
  if (v16 > 3.14159265)
  {
    double v18 = -6.28318531;
LABEL_29:
    float v16 = v17 + v18;
    return v16 + 0.0;
  }
  if (v17 < -3.14159265)
  {
    double v18 = 6.28318531;
    goto LABEL_29;
  }
  return v16 + 0.0;
}

BOOL sub_1004E353C(float *a1, float *a2)
{
  return *a1 > *a2;
}

unint64_t sub_1004E3550(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unint64_t *a5, unint64_t *a6, float a7)
{
  int v29 = 30;
  int v30 = 30;
  uint64_t v34 = 0;
  memset(v33, 0, sizeof(v33));
  uint64_t v32 = 0;
  memset(v31, 0, sizeof(v31));
  unint64_t result = sub_1004E3930(a1, a2, &v30, &v29, (uint64_t)v33, (uint64_t)v31);
  uint64_t v15 = a1 + 320;
  int v16 = (*(unsigned __int16 *)(a1 + 338) - a2) & ~((*(unsigned __int16 *)(a1 + 338) - a2) >> 31);
  if (v30 >= 1)
  {
    if (v30 >= 30) {
      uint64_t v17 = 30;
    }
    else {
      uint64_t v17 = v30;
    }
    uint64_t v18 = v17 - 1;
    float v19 = (float *)v33;
    do
    {
      float v20 = *v19++;
      uint64_t v42 = 0;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v35 = 0u;
      unint64_t v21 = sub_1004E3B04(-1.0, v20, result, v16, 2, v15, (uint64_t)&v35);
      unint64_t result = sub_1004E3D44(a7, -1.0, v21, a3, v15, (int *)&v35, v21);
      *a5 = result;
    }
    while (result <= 5 && v18-- != 0);
  }
  if (v29 >= 1)
  {
    if (v29 >= 30) {
      uint64_t v23 = 30;
    }
    else {
      uint64_t v23 = v29;
    }
    uint64_t v24 = v23 - 1;
    int v25 = (float *)v31;
    do
    {
      float v26 = *v25++;
      uint64_t v42 = 0;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v35 = 0u;
      unint64_t v27 = sub_1004E3B04(1.0, v26, result, v16, 2, v15, (uint64_t)&v35);
      unint64_t result = sub_1004E3D44(a7, 1.0, v27, a4, v15, (int *)&v35, v27);
      *a6 = result;
    }
    while (result <= 5 && v24-- != 0);
  }
  return result;
}

void sub_1004E3744(float a1, uint64_t a2, uint64_t a3, unint64_t a4, unsigned __int16 *a5, int a6)
{
  if (a6) {
    float v6 = -1.0;
  }
  else {
    float v6 = 1.0;
  }
  if (a4 >= 0x1E) {
    uint64_t v7 = 30;
  }
  else {
    uint64_t v7 = a4;
  }
  if (v7)
  {
    uint64_t v10 = 0;
    unsigned int v11 = vcvtmd_s64_f64(a1 / 0.04);
    do
    {
      unint64_t v12 = *(unsigned int *)(a3 + 4 * v10);
      if ((int)v12 >= 1 && v12 < a5[1])
      {
        int v14 = (float *)sub_1004182C4(a5, v12);
        int v15 = *(_DWORD *)(a3 + 4 * v10);
        unint64_t v16 = (v15 - v11) & ~((int)(v15 - v11) >> 31);
        int v17 = v11 + 1 + v15;
        uint64_t v18 = v17 >= a5[1] ? a5[1] : v17;
        if ((int)v16 < (int)v18)
        {
          float v19 = v6 * *v14;
          do
          {
            if ((float)(v6 * *(float *)sub_1004182C4(a5, v16)) > v19)
            {
              float v19 = v6 * *(float *)sub_1004182C4(a5, v16);
              *(_DWORD *)(a3 + 4 * v10) = v16;
            }
            ++v16;
          }
          while (v18 != v16);
        }
      }
      ++v10;
    }
    while (v10 != v7);
  }
}

void sub_1004E3858(float a1, float a2, uint64_t a3, _DWORD *a4, uint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  if (a6 && a7)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    signed int v12 = vcvtmd_s64_f64(a1 / 0.04);
    signed int v13 = vcvtmd_s64_f64(a2 / 0.04);
    uint64_t v14 = a7 - 1;
    if (a7 - 1 >= 0x1D) {
      uint64_t v14 = 29;
    }
    unint64_t v15 = 30;
    if (a6 >= 0x1E) {
      unint64_t v16 = 30;
    }
    else {
      unint64_t v16 = a6;
    }
    int v17 = *a4 - v13;
    if (a7 < 0x1E) {
      unint64_t v15 = a7;
    }
    uint64_t v18 = -1;
    do
    {
      int v19 = a4[v10];
      if (*(_DWORD *)(a5 + 4 * v14) <= v19) {
        break;
      }
      if (v19 - v17 >= v13)
      {
        uint64_t v20 = v18;
        while (1)
        {
          uint64_t v21 = v20 + 1;
          if (v20 + 1 >= v15) {
            break;
          }
          signed int v22 = *(_DWORD *)(a5 + 4 * v20++ + 4) - v19;
          if (v22 >= v12)
          {
            *(_DWORD *)(a8 + 4 * v11) = v19;
            *(_DWORD *)(a9 + 4 * v11) = *(_DWORD *)(a5 + 4 * v21);
            int v17 = *(_DWORD *)(a5 + 4 * v21);
            *a10 = ++v11;
            uint64_t v18 = v21;
            break;
          }
        }
      }
      if (++v10 >= v16) {
        break;
      }
    }
    while (v11 < 0x1E);
  }
}

uint64_t sub_1004E3930(uint64_t result, int a2, int *a3, _DWORD *a4, uint64_t a5, uint64_t a6)
{
  unsigned int v10 = *(unsigned __int16 *)(result + 338);
  unint64_t v11 = (v10 - a2) & ~((int)(v10 - a2) >> 31);
  if (v11 >= v10)
  {
    float v15 = 3.4028e38;
    float v17 = -3.4028e38;
  }
  else
  {
    uint64_t v12 = result;
    signed int v13 = (unsigned __int16 *)(result + 336);
    float v14 = -3.4028e38;
    float v15 = 3.4028e38;
    do
    {
      unint64_t v16 = (float *)sub_1004182C4(v13, v11);
      if (v14 < *v16) {
        float v14 = *v16;
      }
      unint64_t result = sub_1004182C4(v13, v11);
      if (*(float *)result < v15) {
        float v15 = *(float *)result;
      }
      ++v11;
    }
    while (v11 < *(unsigned __int16 *)(v12 + 338));
    float v17 = v14 + -1.0;
  }
  float v18 = -1.0 - v15;
  if ((float)(-1.0 - v15) < 0.4) {
    float v18 = 0.4;
  }
  if (v18 < 0.9) {
    float v18 = 0.9;
  }
  if (v17 < 0.5) {
    float v17 = 0.5;
  }
  if (v17 < 0.9) {
    float v17 = 0.9;
  }
  int v19 = vcvtpd_s64_f64((v18 + 0.7) / 0.1);
  if (v19 >= 30) {
    int v19 = 30;
  }
  *a3 = v19;
  int v20 = vcvtpd_s64_f64((v17 + 0.1) / 0.1);
  if (v20 >= 30) {
    LODWORD(v21) = 30;
  }
  else {
    LODWORD(v21) = v20;
  }
  *a4 = v21;
  uint64_t v22 = *a3;
  if ((int)v22 >= 1)
  {
    for (uint64_t i = 0; i != v22; ++i)
    {
      float v24 = v18;
      if (i) {
        float v24 = *(float *)(a5 + 4 * (i - 1)) + -0.1;
      }
      *(float *)(a5 + 4 * i) = v24;
    }
  }
  if (v20 >= 1)
  {
    uint64_t v25 = 0;
    if ((int)v21 <= 1) {
      uint64_t v21 = 1;
    }
    else {
      uint64_t v21 = v21;
    }
    do
    {
      float v26 = v17;
      if (v25) {
        float v26 = *(float *)(a6 + 4 * (v25 - 1)) + -0.1;
      }
      *(float *)(a6 + 4 * v25++) = v26;
    }
    while (v21 != v25);
  }
  return result;
}

unint64_t sub_1004E3B04(float a1, float a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  unint64_t v10 = 0;
  if (a5 >= 0) {
    int v11 = a5;
  }
  else {
    int v11 = a5 + 1;
  }
  double v12 = (double)(v11 >> 1);
  if (v12 < 1.0) {
    double v12 = 1.0;
  }
  int v13 = (int)v12;
  int v14 = a4 & ~(a4 >> 31);
  if ((int)v12 <= 1) {
    int v15 = 1;
  }
  else {
    int v15 = (int)v12;
  }
  int v16 = v15 + 1;
  float v17 = (unsigned __int16 *)(a6 + 16);
  int v34 = 2 * v13;
  int v35 = v15;
  int v36 = (int)v12;
  do
  {
    signed int v18 = *(unsigned __int16 *)(a6 + 18);
    if (v14 >= v18 - v16) {
      break;
    }
    unint64_t v19 = v14 & ~(v14 >> 31);
    if (v19 < v18)
    {
      while ((float)(*(float *)sub_1004182C4(v17, v19) * a1) <= a2)
      {
        if (++v19 >= *(unsigned __int16 *)(a6 + 18)) {
          goto LABEL_16;
        }
      }
      signed int v18 = v19;
    }
LABEL_16:
    int v14 = v18 + 1;
    if (v18 >= v15)
    {
      signed int v20 = *(unsigned __int16 *)(a6 + 18);
      if (v18 < v20 - v16)
      {
        unint64_t v21 = (v18 - v13) & ~((v18 - v13) >> 31);
        if (v18 >= v20) {
          unsigned int v22 = *(unsigned __int16 *)(a6 + 18);
        }
        else {
          unsigned int v22 = v18;
        }
        if (v21 >= v22)
        {
          int v23 = 0;
        }
        else
        {
          int v23 = 0;
          do
          {
            float v24 = *(float *)sub_1004182C4(v17, v18);
            if ((float)((float)(a1 * v24) - (float)(*(float *)sub_1004182C4(v17, v21) * a1)) > 0.0) {
              ++v23;
            }
            ++v21;
            signed int v20 = *(unsigned __int16 *)(a6 + 18);
            if (v18 >= v20) {
              signed int v25 = *(unsigned __int16 *)(a6 + 18);
            }
            else {
              signed int v25 = v18;
            }
          }
          while (v21 < v25);
        }
        unint64_t v37 = v10;
        unint64_t v26 = v14 & ~(v14 >> 31);
        int v27 = v18 + v13;
        unsigned int v28 = v20 - 1;
        if ((int)v28 >= v27) {
          unsigned int v28 = v27;
        }
        if (v26 <= v28)
        {
          int v29 = 0;
          do
          {
            float v30 = *(float *)sub_1004182C4(v17, v18);
            if ((float)((float)(a1 * v30) - (float)(*(float *)sub_1004182C4(v17, v26) * a1)) > 0.0) {
              ++v29;
            }
            ++v26;
            int v31 = *(unsigned __int16 *)(a6 + 18) - 1;
            if (v31 >= v27) {
              int v31 = v27;
            }
          }
          while (v26 <= v31);
        }
        else
        {
          int v29 = 0;
        }
        if (v29 + v23 >= v34)
        {
          *(_DWORD *)(a7 + 4 * v37) = v18;
          int v14 = v27 + 1;
          unint64_t v10 = v37 + 1;
        }
        else
        {
          unint64_t v10 = v37;
        }
        int v15 = v35;
        int v13 = v36;
      }
    }
  }
  while (v10 < 0x1E);
  return v10;
}

uint64_t sub_1004E3D44(float a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6, int a7)
{
  if (a7 < 1) {
    return 0;
  }
  uint64_t v11 = 0;
  int v12 = 0;
  uint64_t v13 = 0;
  unsigned int v14 = vcvtmd_s64_f64(a1 / 0.04);
  if (a7 >= 30) {
    uint64_t v15 = 30;
  }
  else {
    uint64_t v15 = a7;
  }
  int v16 = (unsigned __int16 *)(a5 + 16);
  do
  {
    unint64_t v17 = a6[v11];
    if ((int)v17 > v12 && (int)v17 >= 1 && v17 < *(unsigned __int16 *)(a5 + 18))
    {
      float v20 = *(float *)sub_1004182C4(v16, v17) * a2;
      *(_DWORD *)(a4 + 4 * v13) = a6[v11];
      unint64_t v21 = a6;
      uint64_t v22 = v15;
      do
      {
        unint64_t v23 = *v21;
        int v24 = a6[v11];
        if ((int)v23 >= (int)((v24 - v14) & ~((int)(v24 - v14) >> 31)))
        {
          int v25 = v24 + v14;
          if (*(unsigned __int16 *)(a5 + 18) - 1 < v25) {
            int v25 = *(unsigned __int16 *)(a5 + 18) - 1;
          }
          if ((int)v23 <= v25 && (float)(*(float *)sub_1004182C4(v16, v23) * a2) > v20)
          {
            float v20 = *(float *)sub_1004182C4(v16, *v21) * a2;
            *(_DWORD *)(a4 + 4 * v13) = *v21;
          }
        }
        ++v21;
        --v22;
      }
      while (v22);
      int v12 = a6[v11] + v14;
      ++v13;
    }
    ++v11;
  }
  while (v11 != v15);
  return v13;
}

void sub_1004E3EA0(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int16 *a4, void *a5)
{
  unint64_t v5 = a4[1] - 1;
  if (v5 >= a3) {
    unint64_t v5 = a3;
  }
  unint64_t v6 = v5 - a2;
  if (v5 > a2)
  {
    unint64_t v10 = v6 + 1;
    uint64_t v11 = 4 * (v6 + 1);
    __chkstk_darwin(a1);
    unsigned int v14 = (char *)&v46 - v13;
    if ((v15 & 1) == 0)
    {
      uint64_t v16 = 0;
      do
      {
        if (v16)
        {
          double v17 = *(float *)&v14[4 * v16 - 4];
          int v12 = (float *)sub_1004182C4(a4, a2 + v16);
          double v18 = v17 + *v12 * 0.04 * 9.81000042;
        }
        else
        {
          double v18 = 0.0;
        }
        float v19 = v18;
        *(float *)&v14[4 * v16++] = v19;
      }
      while (v10 != v16);
      __chkstk_darwin(v12);
      double v23 = __chkstk_darwin(v20);
      unint64_t v26 = (char *)&v46 - v25;
      if (v6 != -1)
      {
        uint64_t v27 = 0;
        float v28 = (float)(*(float *)&v23 - v24) / (float)v6;
        do
        {
          if (v27) {
            float v29 = v28 + *(float *)(v22 + 4 * v27 - 4);
          }
          else {
            float v29 = 0.0;
          }
          *(float *)(v22 + 4 * v27) = v29;
          *(float *)&v26[4 * v27] = *(float *)&v14[4 * v27] - v29;
          ++v27;
        }
        while (v10 != v27);
        __chkstk_darwin(v21);
        uint64_t v32 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v33 = 0;
        do
        {
          if (v33) {
            double v34 = *(float *)&v32[4 * v33 - 4] + *(float *)(v31 + 4 * v33) * 0.04;
          }
          else {
            double v34 = 0.0;
          }
          float v35 = v34;
          *(float *)&v32[4 * v33++] = v35;
        }
        while (v10 != v33);
        double v37 = __chkstk_darwin(v30);
        long long v38 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v39 = 0;
        float v42 = 0.0;
        float v43 = (float)(v40 - v41) / *(float *)&v37;
        do
        {
          float v44 = 0.0;
          if (v39) {
            float v44 = v43 + *(float *)&v38[4 * v39 - 4];
          }
          *(float *)&v38[4 * v39] = v44;
          float v45 = vabds_f32(*(float *)(v36 + 4 * v39), v44);
          if (v42 < v45)
          {
            *a5 = v39;
            float v42 = v45;
          }
          ++v39;
        }
        while (v10 != v39);
      }
    }
  }
}

void sub_1004E4178(uint64_t a1, uint64_t a2, unsigned __int16 *a3, unint64_t a4)
{
  unint64_t v4 = a3[1] - a2;
  if (v4 >= a4) {
    unint64_t v4 = a4;
  }
  if (v4)
  {
    unint64_t v8 = 0;
    float v9 = 0.0;
    do
    {
      if (fabsf(*(float *)sub_1004182C4(a3, a2 + v8)) < 0.8)
      {
        float v10 = v9 + 0.04;
        float v9 = v10;
      }
      ++v8;
      unint64_t v11 = a3[1] - a2;
      if (v11 >= a4) {
        unint64_t v11 = a4;
      }
    }
    while (v8 < v11);
  }
}

float sub_1004E4240(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 >= 3)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B7108);
    }
    uint64_t v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134218240;
      unint64_t v12 = a2;
      __int16 v13 = 2048;
      uint64_t v14 = 3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: row < M, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 70,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B7108);
      }
      unint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "T CMMatrix<float, 3>::operator()(size_t, size_t) const [T = float, M = 3, N = 3]", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  if (a3 >= 3)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B7108);
    }
    float v9 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134218240;
      unint64_t v12 = a3;
      __int16 v13 = 2048;
      uint64_t v14 = 3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 71,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B7108);
      }
      float v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "T CMMatrix<float, 3>::operator()(size_t, size_t) const [T = float, M = 3, N = 3]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  return *(float *)(a1 + 4 * (3 * a3 + a2));
}

uint64_t sub_1004E45A0(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 >= 3)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B7108);
    }
    uint64_t v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134218240;
      unint64_t v12 = a2;
      __int16 v13 = 2048;
      uint64_t v14 = 3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: row < M, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 77,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B7108);
      }
      unint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "T &CMMatrix<float, 3>::operator()(size_t, size_t) [T = float, M = 3, N = 3]", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  if (a3 >= 3)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B7108);
    }
    float v9 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134218240;
      unint64_t v12 = a3;
      __int16 v13 = 2048;
      uint64_t v14 = 3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 78,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B7108);
      }
      float v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "T &CMMatrix<float, 3>::operator()(size_t, size_t) [T = float, M = 3, N = 3]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  return a1 + 4 * (3 * a3 + a2);
}

void sub_1004E4900(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_1004E4930(uint64_t a1, unint64_t a2)
{
  if (a2 >= 3)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B7108);
    }
    unint64_t v5 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134218240;
      unint64_t v8 = a2;
      __int16 v9 = 2048;
      uint64_t v10 = 3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Assertion failed: i < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMVector.h, line 277,invalid index %zu >= %zu.", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B7108);
      }
      unint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "T &CMVector<float, 3>::operator[](const size_t) [T = float, N = 3]", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return a1 + 4 * a2;
}

void sub_1004E4BBC(id a1)
{
  qword_10247AE88 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLSedentaryTimerNotifierSilo"];
}

uint64_t sub_1004E4C7C(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1004E5F8C;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_10247AEA8 != -1) {
    dispatch_once(&qword_10247AEA8, block);
  }
  return qword_102489F80;
}

void sub_1004E50B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004E50D8(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(unsigned char *)(a1 + 120))
  {
    if (*(unsigned char *)(a1 + 176))
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B7400);
      }
      unint64_t v5 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(a2 + 23) >= 0) {
          double v6 = *(double *)&a2;
        }
        else {
          double v6 = *(double *)a2;
        }
        int v7 = *(unsigned __int8 *)(a1 + 176);
        *(_DWORD *)uint64_t buf = 136446466;
        double v37 = v6;
        __int16 v38 = 1026;
        *(_DWORD *)uint64_t v39 = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "SedentaryAlarm,Error starting,client,%{public}s,armed,%{public}d", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022B7400);
        }
        uint64_t v32 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CMError CLSedentaryTimerNotifier::startTimer(const std::string &, NSDictionary *)", "%s\n", v32);
        if (v32 != (char *)buf) {
          free(v32);
        }
      }
      return 108;
    }
    else
    {
      [objc_msgSend(a3, "objectForKeyedSubscript:", CMSedentaryTimerStartTimeKey) doubleValue];
      double v14 = v13;
      id v15 = [objc_alloc((Class)NSDate) initWithTimeIntervalSinceReferenceDate:v13];
      uint64_t v16 = [+[NSCalendar currentCalendar] components:192 fromDate:v15];
      NSInteger v17 = [(NSDateComponents *)v16 minute];
      NSInteger v18 = [(NSDateComponents *)v16 second];
      if (v17 | v18)
      {
        NSInteger v19 = v18;
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022B7400);
        }
        uint64_t v20 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t buf = 134218496;
          double v37 = v14;
          __int16 v38 = 2048;
          *(void *)uint64_t v39 = v17;
          *(_WORD *)&v39[8] = 2048;
          NSInteger v40 = v19;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "SedentaryAlarm,startDate sent that doesn't align with the wall hour,%f,minuteOffset,%ld,secondOffset,%ld", buf, 0x20u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022B7400);
          }
          float v35 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "CMError CLSedentaryTimerNotifier::startTimer(const std::string &, NSDictionary *)", "%s\n", v35);
          if (v35 != (char *)buf) {
            free(v35);
          }
        }
      }

      [+[NSDate date] timeIntervalSinceReferenceDate];
      int v22 = (int)(v14 - v21);
      [objc_msgSend(a3, "objectForKeyedSubscript:", CMSedentaryTimerPeriodIntervalKey) doubleValue];
      unsigned int v24 = (int)v23;
      [objc_msgSend(a3, "objectForKeyedSubscript:", CMSedentaryTimerReminderIntervalKey) doubleValue];
      unsigned int v26 = (int)v25;
      unsigned int v27 = [[objc_msgSend(a3, "objectForKeyedSubscript:", CMSedentaryTimerAutoRescheduleKey) boolValue];
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B7400);
      }
      float v28 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a2 + 23) >= 0) {
          double v29 = *(double *)&a2;
        }
        else {
          double v29 = *(double *)a2;
        }
        *(_DWORD *)uint64_t buf = 136316418;
        double v37 = v29;
        __int16 v38 = 1024;
        *(_DWORD *)uint64_t v39 = v22;
        *(_WORD *)&v39[4] = 1024;
        *(_DWORD *)&v39[6] = v24;
        LOWORD(v40) = 1024;
        *(_DWORD *)((char *)&v40 + 2) = v26;
        HIWORD(v40) = 1024;
        unsigned int v41 = v27;
        __int16 v42 = 2048;
        double v43 = v14;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "SedentaryAlarm,START,client,%s,offset,%d,period,%d,reminder,%d,autoReschedule,%d,startDate,%f", buf, 0x2Eu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022B7400);
        }
        double v34 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLSedentaryTimerNotifier::startTimer(const std::string &, NSDictionary *)", "%s\n", v34);
        if (v34 != (char *)buf) {
          free(v34);
        }
      }
      if (v22 >= 0) {
        LOWORD(v30) = v22;
      }
      else {
        int v30 = -v22;
      }
      uint64_t result = 107;
      if (v24 && v26 < v24 && v24 > (unsigned __int16)v30)
      {
        uint64_t v31 = sub_1000D2E34(0);
        (*(void (**)(void))(*(void *)(v31 + 64) + 24))();
        *(unsigned char *)(a1 + 176) = 1;
        return 100;
      }
    }
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022B7400);
    }
    __int16 v9 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a2 + 23) >= 0) {
        double v10 = *(double *)&a2;
      }
      else {
        double v10 = *(double *)a2;
      }
      int v11 = *(unsigned __int8 *)(a1 + 120);
      *(_DWORD *)uint64_t buf = 136446466;
      double v37 = v10;
      __int16 v38 = 1026;
      *(_DWORD *)uint64_t v39 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "SedentaryAlarm,Error starting,client,%{public}s,fitness tracking,%{public}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B7400);
      }
      uint64_t v33 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CMError CLSedentaryTimerNotifier::startTimer(const std::string &, NSDictionary *)", "%s\n", v33);
      if (v33 != (char *)buf) {
        free(v33);
      }
    }
    return 109;
  }
  return result;
}

void sub_1004E5B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004E5B34(uint64_t a1)
{
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022B7400);
  }
  uint64_t v2 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "SedentaryAlarm,STOP", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022B7400);
    }
    unint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLSedentaryTimerNotifier::stopTimer(const std::string &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  uint64_t v3 = sub_1000D2E34(0);
  (*(void (**)(void))(*(void *)(v3 + 64) + 32))();
  *(unsigned char *)(a1 + 176) = 0;
  return 100;
}

void sub_1004E5F4C(id a1)
{
  if (sub_10016CCBC() && sub_100C60EC0())
  {
    sub_100103240();
    if (sub_10010145C()) {
      byte_10247AE98 = 1;
    }
  }
}

void sub_1004E5F8C()
{
}

void sub_1004E5FD8()
{
}

void sub_1004E5FFC(uint64_t a1, void *a2)
{
  uint64_t v2 = sub_1004E66FC(a1, "CLSedentaryTimerNotifier", a2);
  *(void *)uint64_t v2 = off_1022B7178;
  *(void *)(v2 + 112) = off_1022B7268;
  *(unsigned char *)(v2 + 120) = 0;
  *(void *)(v2 + 121) = 0x10000000000000;
  *(void *)(v2 + 129) = 0;
  *(_DWORD *)(v2 + 137) = 0;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(unsigned char *)(v2 + 176) = 0;
  operator new();
}

void sub_1004E65A8()
{
}

uint64_t sub_1004E66FC(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_1022B7430;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_1004E678C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004E67A8(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022B73E0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSedentaryTimerNotifier::onFitnessTrackingNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B73E0);
    }
    __int16 v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      id v15 = "";
      __int16 v16 = 2082;
      NSInteger v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSedentaryTimerNotifier::onFitnessTrackingNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1004E8544(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1004E6964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004E6984(uint64_t a1, _DWORD *a2, long long *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022B73E0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSedentaryTimerNotifier::onMotionStateObserverNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B73E0);
    }
    unint64_t v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      id v15 = "";
      __int16 v16 = 2082;
      NSInteger v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSedentaryTimerNotifier::onMotionStateObserverNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  if (*a2 == 1)
  {
    long long v9 = *a3;
    *(_DWORD *)(a4 + 137) = *((_DWORD *)a3 + 4);
    *(_OWORD *)(a4 + 121) = v9;
  }
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1004E6B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004E6B68(uint64_t a1, _DWORD *a2, long long *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022B73E0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSedentaryTimerNotifier::onNatalimetryNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B73E0);
    }
    long long v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      id v15 = "";
      __int16 v16 = 2082;
      NSInteger v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSedentaryTimerNotifier::onNatalimetryNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1004E8A5C(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1004E6D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

id sub_1004E6D44(uint64_t a1, int a2, char a3, double a4, double a5)
{
  uint64_t v5 = *(void *)(a1 + 32);
  double v6 = *(void **)(v5 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  int v8[2] = sub_1004E6DC4;
  float32x4_t v8[3] = &unk_1022B7288;
  v8[4] = v5;
  *(double *)&void v8[5] = a4;
  *(double *)&v8[6] = a5;
  int v9 = a2;
  char v10 = a3;
  return [v6 async:v8];
}

void sub_1004E6DC4(uint64_t a1)
{
}

void sub_1004E6DDC(uint64_t a1, int a2, unsigned __int8 a3, double a4, double a5)
{
  if (a2 <= 4)
  {
    if (*(unsigned char *)(a1 + 120))
    {
      int v7 = a2;
      double Current = CFAbsoluteTimeGetCurrent();
      if (v7 == 3 || !v7)
      {
        double v11 = *(double *)(a1 + 121);
        BOOL v12 = Current > v11 && Current - v11 < 320.0;
        if (v12 && *(int *)(a1 + 133) >= 1)
        {
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022B7400);
          }
          int v13 = qword_102418FD8;
          if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
          {
            CFAbsoluteTime v14 = CFAbsoluteTimeGetCurrent();
            double v15 = *(double *)(a1 + 121);
            *(_DWORD *)uint64_t buf = 134218240;
            *(CFAbsoluteTime *)&uint8_t buf[4] = v14;
            __int16 v35 = 2048;
            double v36 = v15;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "SedentaryAlarm,InVehicleReminder,now,%.3f,motionStateTime,%.3f", buf, 0x16u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102418FD0 != -1) {
              dispatch_once(&qword_102418FD0, &stru_1022B7400);
            }
            CFAbsoluteTime v23 = CFAbsoluteTimeGetCurrent();
            uint64_t v24 = *(void *)(a1 + 121);
            *(_DWORD *)uint64_t v33 = 134218240;
            *(CFAbsoluteTime *)&v33[4] = v23;
            *(_WORD *)&v33[12] = 2048;
            *(void *)&v33[14] = v24;
            double v25 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLSedentaryTimerNotifier::onSedentaryAlarm(const CFAbsoluteTime, const CFAbsoluteTime, const CLSedentaryAlarmType, const BOOL)", "%s\n", v25);
            if (v25 != buf) {
              free(v25);
            }
          }
          int v7 = 4;
        }
      }
      *(_DWORD *)&v33[28] = 0;
      *(double *)uint64_t v33 = a4;
      *(double *)&v33[8] = a5;
      *(_DWORD *)&v33[16] = v7;
      *(void *)&v33[20] = a3;
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B7400);
      }
      __int16 v16 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 134349568;
        *(double *)&uint8_t buf[4] = a4;
        __int16 v35 = 2050;
        double v36 = a5;
        __int16 v37 = 1026;
        int v38 = v7;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "StandPlus,aop alarm,startTime,%{public}f,firedTime,%{public}f,type,%{public}d", buf, 0x1Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022B7400);
        }
        int v27 = 134349568;
        double v28 = a4;
        __int16 v29 = 2050;
        double v30 = a5;
        __int16 v31 = 1026;
        int v32 = v7;
        int v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLSedentaryTimerNotifier::onSedentaryAlarm(const CFAbsoluteTime, const CFAbsoluteTime, const CLSedentaryAlarmType, const BOOL)", "%s\n", v22);
        if (v22 != buf) {
          free(v22);
        }
      }
      uint64_t v17 = *(void *)(a1 + 376);
      if (v17)
      {
        sub_1004715E0(v17, (uint64_t)v33);
      }
      else
      {
        v26[0] = *(_OWORD *)v33;
        v26[1] = *(_OWORD *)&v33[16];
        (*(void (**)(uint64_t, _OWORD *))(*(void *)a1 + 216))(a1, v26);
      }
    }
    else
    {
      sub_100134750(buf, "com.apple.locationd");
      sub_1004E5B34(a1);
      if (SHIBYTE(v37) < 0) {
        operator delete(*(void **)buf);
      }
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B7400);
      }
      __int16 v18 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        int v19 = *(unsigned __int8 *)(a1 + 120);
        *(_DWORD *)uint64_t buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "SedentaryAlarm,STOP,fitness tracking,%d", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022B7400);
        }
        int v20 = *(unsigned __int8 *)(a1 + 120);
        *(_DWORD *)uint64_t v33 = 67109120;
        *(_DWORD *)&v33[4] = v20;
        double v21 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLSedentaryTimerNotifier::onSedentaryAlarm(const CFAbsoluteTime, const CFAbsoluteTime, const CLSedentaryAlarmType, const BOOL)", "%s\n", v21);
        if (v21 != buf) {
          free(v21);
        }
      }
    }
  }
}

void sub_1004E7360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004E7384(void **a1, double a2)
{
  if (a2 >= 0.0)
  {
    unint64_t v8 = a1[2];
    uint64_t v6 = (uint64_t)(a1 + 2);
    int v7 = v8;
    unint64_t v9 = *(void *)(v6 - 8);
    if (v9 >= (unint64_t)v8)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)*a1) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14) {
        double v15 = (char *)sub_1000DA5D8(v6, v14);
      }
      else {
        double v15 = 0;
      }
      __int16 v16 = &v15[24 * v11];
      uint64_t v17 = &v15[24 * v14];
      *(double *)__int16 v16 = a2;
      *((void *)v16 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v16[16] = 0;
      char v10 = v16 + 24;
      int v19 = (char *)*a1;
      __int16 v18 = (char *)a1[1];
      if (v18 != *a1)
      {
        do
        {
          long long v20 = *(_OWORD *)(v18 - 24);
          *(v16 - 8) = *(v18 - 8);
          *(_OWORD *)(v16 - 24) = v20;
          v16 -= 24;
          v18 -= 24;
        }
        while (v18 != v19);
        __int16 v18 = (char *)*a1;
      }
      *a1 = v16;
      a1[1] = v10;
      a1[2] = v17;
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *(double *)unint64_t v9 = a2;
      *(void *)(v9 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(unsigned char *)(v9 + 16) = 0;
      char v10 = (char *)(v9 + 24);
    }
    a1[1] = v10;
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B7578);
    }
    uint64_t v3 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134349056;
      double v22 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Programmer error, this expiration rule with time %{public}fis not valid.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B7578);
      }
      unint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLActivityAggregator<CLSedentaryAlarmData>::setExpirationRule(CFTimeInterval) [T = CLSedentaryAlarmData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_1004E763C(uint64_t a1)
{
  int v10 = 86400;
  uint64_t v2 = sub_1000D3E78();
  sub_10006B564(v2, &v8);
  int v3 = sub_10006EF84(v8, "SedentaryTimerAggregateInterval", &v10);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (v3) {
    uint64_t v4 = 1000000000 * v10;
  }
  else {
    uint64_t v4 = 86400000000000;
  }
  uint64_t v5 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)[*(id *)(a1 + 40) queue]);
  *(void *)(a1 + 256) = v5;
  dispatch_source_set_timer(v5, 0, v4, 0xDF8475800uLL);
  uint64_t v6 = *(NSObject **)(a1 + 256);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1004E7A0C;
  void v7[3] = &unk_1022A3020;
  v7[4] = a1;
  dispatch_source_set_event_handler(v6, v7);
  dispatch_resume(*(dispatch_object_t *)(a1 + 256));
}

void sub_1004E775C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1000DB0A0(a15);
  }
  _Unwind_Resume(exception_object);
}

id sub_1004E7774(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(*(void *)(a1 + 32) + 32) timeZoneDidChange:a2];
}

uint64_t sub_1004E7784(uint64_t a1)
{
  *(void *)a1 = off_1022B7430;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_1004E7808(void *a1)
{
  *a1 = off_1022B7178;
  a1[14] = off_1022B7268;
  sub_1004E79B8((uint64_t)a1);
  uint64_t v2 = (void *)a1[47];
  a1[47] = 0;
  if (v2) {
    sub_1004EC4E4((uint64_t)(a1 + 47), v2);
  }
  sub_1003B278C((uint64_t)(a1 + 25));
  int v3 = (std::__shared_weak_count *)a1[24];
  if (v3) {
    sub_1000DB0A0(v3);
  }
  uint64_t v4 = a1[20];
  a1[20] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = a1[19];
  a1[19] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = a1[18];
  a1[18] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }

  return sub_1004E7784((uint64_t)a1);
}

uint64_t sub_1004E793C(uint64_t a1)
{
  return sub_1004E7808((void *)(a1 - 112));
}

void sub_1004E7944(void *a1)
{
  sub_1004E7808(a1);

  operator delete();
}

void sub_1004E797C(uint64_t a1)
{
  sub_1004E7808((void *)(a1 - 112));

  operator delete();
}

void sub_1004E79B8(uint64_t a1)
{
  *(void *)(a1 + 384) = 0;
  if (*(void *)(a1 + 168))
  {
    [+[NSNotificationCenter defaultCenter] removeObserver:*(void *)(a1 + 168)];
    *(void *)(a1 + 168) = 0;
  }
  *(unsigned char *)(a1 + 108) = 1;
}

uint64_t sub_1004E7A0C(uint64_t a1)
{
  return sub_1004E7A18(*(void *)(a1 + 32) + 200);
}

uint64_t sub_1004E7A18(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B7578);
    }
    uint64_t v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v3 = sub_1000D3E50();
      int v4 = *(_DWORD *)(*(void *)(a1 + 24) + 132);
      *(_DWORD *)uint64_t buf = 134218240;
      *(double *)double v21 = v3;
      *(_WORD *)&v21[8] = 1024;
      int v22 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records start %f, count ~%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B7578);
      }
      sub_1000D3E50();
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLSedentaryAlarmData>::aggregateRecords() [T = CLSedentaryAlarmData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), a1);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B7578);
    }
    uint64_t v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v7 = sub_1000D3E50();
      int v8 = *(_DWORD *)(*(void *)(a1 + 24) + 132);
      *(_DWORD *)uint64_t buf = 134218240;
      *(double *)double v21 = v7;
      *(_WORD *)&v21[8] = 1024;
      int v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Aggregating records stop %f, count ~%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B7578);
      }
      sub_1000D3E50();
      __int16 v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLSedentaryAlarmData>::aggregateRecords() [T = CLSedentaryAlarmData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    uint64_t v9 = *(void *)(a1 + 24);
    double v10 = (double)*(int *)(v9 + 132);
    if ((double)(int)sub_1004EB684(v9, (double **)a1) * 1.2 < v10)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B7578);
      }
      unint64_t v11 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 24);
        int v13 = *(_DWORD *)(v12 + 132);
        int v14 = sub_1004EB684(v12, (double **)a1);
        *(_DWORD *)uint64_t buf = 67109376;
        *(_DWORD *)double v21 = v13;
        *(_WORD *)&v21[4] = 1024;
        *(_DWORD *)&v21[6] = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022B7578);
        }
        sub_1004EB684(*(void *)(a1 + 24), (double **)a1);
        int v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLSedentaryAlarmData>::aggregateRecords() [T = CLSedentaryAlarmData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
    }
    return v5;
  }
  else
  {
    __int16 v16 = *(uint64_t (**)(void))(**(void **)(a1 + 24) + 32);
    return v16();
  }
}

void sub_1004E7FD0(uint64_t a1, double *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(void **)(v3 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  long long v5 = *((_OWORD *)a2 + 1);
  long long v9 = *(_OWORD *)a2;
  long long v10 = v5;
  int v8[2] = sub_1004E811C;
  float32x4_t v8[3] = &unk_1022ACFE0;
  v8[4] = v3;
  [v4 async:v8];
  double v7 = objc_alloc_init(ALActivityLog);
  [(ALActivityLog *)v7 setTimestamp:*a2];
  [(ALActivityLog *)v7 setSedentaryAlarmData:objc_alloc_init(ALCLSedentaryAlarmData)];
  [(ALCLSedentaryAlarmData *)[(ALActivityLog *)v7 sedentaryAlarmData] setFiredTime:a2[1]];
  [(ALCLSedentaryAlarmData *)[(ALActivityLog *)v7 sedentaryAlarmData] setType:*((unsigned int *)a2 + 4)];
  [(ALCLSedentaryAlarmData *)[(ALActivityLog *)v7 sedentaryAlarmData] setDidWake:*((unsigned __int8 *)a2 + 20)];
  [(ALCLSedentaryAlarmData *)[(ALActivityLog *)v7 sedentaryAlarmData] setRegularEntry:1];
  [+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance") proxyForService:@"CLActivityLogger" logData:v7];
}

void sub_1004E811C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  long long v2 = *(_OWORD *)(a1 + 56);
  v3[0] = *(_OWORD *)(a1 + 40);
  v3[1] = v2;
  sub_1004E8154(v1, (uint64_t)v3);
}

void sub_1004E8154(void *a1, uint64_t a2)
{
  LODWORD(__p) = 0;
  if (sub_1001072EC((uint64_t)a1, (int *)&__p, 1))
  {
    long long __p = 0;
    __int16 v16 = 0;
    uint64_t v17 = 0;
    int v4 = sub_1001D9EDC((uint64_t)&v17, 1uLL);
    long long v5 = (char *)__p;
    uint64_t v6 = v16;
    int v8 = &v4[2 * v7];
    long long v9 = *(_OWORD *)(a2 + 16);
    _OWORD *v4 = *(_OWORD *)a2;
    v4[1] = v9;
    long long v10 = (char *)(v4 + 2);
    if (v6 != v5)
    {
      unint64_t v11 = v4;
      do
      {
        long long v12 = *((_OWORD *)v6 - 1);
        int v4 = v11 - 2;
        *(v11 - 2) = *((_OWORD *)v6 - 2);
        *(v11 - 1) = v12;
        v6 -= 32;
        v11 -= 2;
      }
      while (v6 != v5);
    }
    long long __p = v4;
    __int16 v16 = v10;
    uint64_t v17 = v8;
    if (v5) {
      operator delete(v5);
    }
    __int16 v16 = v10;
    int v14 = 0;
    (*(void (**)(void *, int *, void **, void, uint64_t, void))(*a1 + 152))(a1, &v14, &__p, 0, 0xFFFFFFFFLL, 0);
    a1[31] = *(void *)(a2 + 8);
    if (__p)
    {
      __int16 v16 = (char *)__p;
      operator delete(__p);
    }
  }
  else if (*(unsigned char *)(a2 + 20))
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, @"com.apple.locationd.sedentarytimer", 0, 0, 0);
  }
}

void sub_1004E828C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004E82AC(uint64_t a1)
{
  uint64_t v7 = 0;
  int v8 = 0;
  uint64_t v9 = 0;
  if (sub_10143AEE8(*(void *)(a1 + 184), (void **)&v7, *(double *)(a1 + 248)) == 100)
  {
    long long v2 = v7;
    if (v7 == v8) {
      goto LABEL_6;
    }
    long long __p = 0;
    long long v5 = 0;
    uint64_t v6 = 0;
    sub_1004EC468(&__p, v7, (uint64_t)v8, (v8 - v7) >> 5);
    int v3 = 0;
    (*(void (**)(uint64_t, int *, void **, void, uint64_t, void))(*(void *)a1 + 152))(a1, &v3, &__p, 0, 0xFFFFFFFFLL, 0);
    *(void *)(a1 + 248) = *((void *)v8 - 3);
    if (__p)
    {
      long long v5 = __p;
      operator delete(__p);
    }
  }
  long long v2 = v7;
LABEL_6:
  if (v2)
  {
    int v8 = v2;
    operator delete(v2);
  }
}

void sub_1004E8388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1004E83C0@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

uint64_t sub_1004E843C(uint64_t a1, _DWORD *a2)
{
  if (*a2 == 1) {
    return 0;
  }
  if (!*a2) {
    sub_1004E82AC(a1);
  }
  return 1;
}

uint64_t sub_1004E8470(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1004E8514;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_10247AEB8 != -1) {
    dispatch_once(&qword_10247AEB8, block);
  }
  if (byte_10247AEB0) {
    return 1;
  }
  sub_100103240();
  return sub_10010145C();
}

id sub_1004E8514(uint64_t a1)
{
  id result = [[[*(id *)(a1 + 32) vendor] isServiceEnabled:@"CLSedentaryTimerNotifier"];
  byte_10247AEB0 = (char)result;
  return result;
}

void sub_1004E8544(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  if (*a3 == 4)
  {
    int v5 = *a4;
    if (*a4 != *(_DWORD *)(a1 + 372))
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B7400);
      }
      uint64_t v6 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = *(_DWORD *)(a1 + 372);
        *(_DWORD *)uint64_t buf = 67240448;
        int v16 = v7;
        __int16 v17 = 1026;
        int v18 = v5;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Activity mode from %{public}d to %{public}d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022B7400);
        }
        long long v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLSedentaryTimerNotifier::onFitnessTrackingNotification(int, const CLFitnessTrackingNotifier_Type::Notification &, const CLFitnessTrackingNotifier_Type::NotificationData &)", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
      *(_DWORD *)(a1 + 372) = v5;
      if (v5 == 1)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022B7400);
        }
        int v8 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "StandPlus, running stand minute estimator", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022B7400);
          }
          int v13 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLSedentaryTimerNotifier::onFitnessTrackingNotification(int, const CLFitnessTrackingNotifier_Type::Notification &, const CLFitnessTrackingNotifier_Type::NotificationData &)", "%s\n", v13);
          if (v13 != (char *)buf) {
            free(v13);
          }
        }
        [*(id *)(*(void *)(a1 + 160) + 16) register:*(void *)(*(void *)(a1 + 160) + 8) forNotification:5 registrationInfo:0];
        uint64_t v9 = *(void **)(a1 + 376);
        *(void *)(a1 + 376) = 0;
        if (v9) {
          sub_1004EC4E4(a1 + 376, v9);
        }
        operator new();
      }
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B7400);
      }
      long long v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "StandPlus, stopping stand minute estimator", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022B7400);
        }
        int v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLSedentaryTimerNotifier::onFitnessTrackingNotification(int, const CLFitnessTrackingNotifier_Type::Notification &, const CLFitnessTrackingNotifier_Type::NotificationData &)", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
      [*(id *)(*(void *)(a1 + 160) + 16) unregister:*(void *)(*(void *)(a1 + 160) + 8) forNotification:5];
      unint64_t v11 = *(void **)(a1 + 376);
      *(void *)(a1 + 376) = 0;
      if (v11) {
        sub_1004EC4E4(a1 + 376, v11);
      }
    }
  }
  else if (!*a3)
  {
    *(unsigned char *)(a1 + 120) = *(unsigned char *)a4 & *((unsigned char *)a4 + 1);
  }
}

void sub_1004E8A30()
{
}

void sub_1004E8A5C(uint64_t a1, uint64_t a2, _DWORD *a3, long long *a4)
{
  if (*a3 == 5)
  {
    uint64_t v8 = *(void *)(a1 + 376);
    if (v8) {
      sub_10047045C(v8, a4);
    }
  }
  else if (*a3 == 2)
  {
    long long v4 = *a4;
    long long v5 = a4[1];
    long long v6 = a4[2];
    *(_OWORD *)(a1 + 356) = *(long long *)((char *)a4 + 44);
    *(_OWORD *)(a1 + 328) = v5;
    *(_OWORD *)(a1 + 344) = v6;
    *(_OWORD *)(a1 + 312) = v4;
    uint64_t v7 = *(void *)(a1 + 376);
    if (v7) {
      sub_1004715D8(v7, (uint64_t)a4);
    }
  }
}

void sub_1004E8AB0(uint64_t a1, uint64_t *a2)
{
  if (objc_opt_class())
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022B7400);
    }
    long long v4 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *a2;
      uint64_t v6 = a2[1];
      int v7 = *((_DWORD *)a2 + 4);
      *(_DWORD *)uint64_t buf = 134349568;
      uint64_t v26 = v5;
      __int16 v27 = 2050;
      uint64_t v28 = v6;
      __int16 v29 = 1026;
      int v30 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "StandPlus,bucketStart,%{public}f,bucketEnd,%{public}f,count,%{public}d", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B7400);
      }
      uint64_t v11 = *a2;
      uint64_t v12 = a2[1];
      int v13 = *((_DWORD *)a2 + 4);
      int v19 = 134349568;
      uint64_t v20 = v11;
      __int16 v21 = 2050;
      uint64_t v22 = v12;
      __int16 v23 = 1026;
      int v24 = v13;
      int v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSedentaryTimerNotifier::onStandPlusBucket(const CLStandPlusBucket)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    if (*((int *)a2 + 4) >= 1)
    {
      uint64_t v8 = +[HKQuantitySample quantitySampleWithType:quantity:startDate:endDate:](HKQuantitySample, "quantitySampleWithType:quantity:startDate:endDate:", +[HKQuantityType quantityTypeForIdentifier:](HKQuantityType, "quantityTypeForIdentifier:", HKQuantityTypeIdentifierAppleStandTime), +[HKQuantity quantityWithUnit:doubleValue:](HKQuantity, "quantityWithUnit:doubleValue:", +[HKUnit secondUnit](HKUnit, "secondUnit"), (double)*((int *)a2 + 4) * 60.0), +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", *(double *)a2), +[NSDate dateWithTimeIntervalSinceReferenceDate:*((double *)a2 + 1)]);
      uint64_t v9 = *(void **)(a1 + 384);
      int v18 = v8;
      long long v10 = +[NSArray arrayWithObjects:&v18 count:1];
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      _OWORD v15[2] = sub_1004E8DD4;
      void v15[3] = &unk_1022B7308;
      long long v16 = *(_OWORD *)a2;
      uint64_t v17 = a2[2];
      [v9 saveObjects:v10 withCompletion:v15];
    }
  }
}

void sub_1004E8DD4(uint64_t a1, char a2, uint64_t a3)
{
  if (a2)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022B7400);
    }
    long long v4 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      *(_DWORD *)uint64_t buf = 134349056;
      uint64_t v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "StandPlus successfully pushed to HKHealthStore, startBucket, %{public}f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B7400);
      }
      uint64_t v6 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSedentaryTimerNotifier::onStandPlusBucket(const CLStandPlusBucket)_block_invoke", "%s\n");
LABEL_19:
      if (v6 != buf) {
        free(v6);
      }
    }
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022B7400);
    }
    uint64_t v8 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      *(_DWORD *)uint64_t buf = 138412546;
      uint64_t v11 = a3;
      __int16 v12 = 2050;
      uint64_t v13 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "HKHealthStore, StandPlus, saveObjects failed on, %{error}@, for startBucket, %{public}f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B7400);
      }
      uint64_t v6 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLSedentaryTimerNotifier::onStandPlusBucket(const CLStandPlusBucket)_block_invoke", "%s\n");
      goto LABEL_19;
    }
  }
}

void sub_1004E90DC(uint64_t a1, uint64_t *a2)
{
}

void sub_1004E90E4(uint64_t a1, uint64_t a2)
{
  long long __p = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  sub_10143AEE8(*(void *)(a1 + 184), &__p, *(double *)a2);
  long long v4 = (double *)__p;
  if (__p == v22)
  {
    int v6 = 0;
    int v5 = 0;
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
    do
    {
      int v7 = *((_DWORD *)v4 + 4);
      if (v7 == *(_DWORD *)(a2 + 16)) {
        ++v5;
      }
      if (v7 == 2) {
        ++v6;
      }
      v4 += 4;
    }
    while (v4 != v22);
  }
  if (v5 | v6)
  {
    double v8 = *(v22 - 3);
    if (v8 > *(double *)(a2 + 8))
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B7400);
      }
      uint64_t v9 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = *(void *)(a2 + 8);
        *(_DWORD *)uint64_t buf = 134349312;
        double v35 = v8;
        __int16 v36 = 2050;
        uint64_t v37 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "StandPlus,warning,time went backward,alreadyLogged,%{public}f,new,%{public}f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022B7400);
        }
        uint64_t v19 = *(void *)(a2 + 8);
        int v24 = 134349312;
        double v25 = v8;
        __int16 v26 = 2050;
        uint64_t v27 = v19;
        uint64_t v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLSedentaryTimerNotifier::onStoreSedentaryAlarm(CLSedentaryAlarmData)", "%s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
      }
    }
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022B7400);
    }
    uint64_t v11 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
    {
      double v12 = *(double *)a2;
      uint64_t v13 = *(void *)(a2 + 8);
      int v14 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)uint64_t buf = 134350080;
      double v35 = v12;
      __int16 v36 = 2050;
      uint64_t v37 = v13;
      __int16 v38 = 1026;
      int v39 = v14;
      __int16 v40 = 1026;
      int v41 = v5;
      __int16 v42 = 1026;
      int v43 = v6;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "StandPlus,warning,attempting to log bad alarm,startTime,%{public}f,firedTime,%{public}f,type,%{public}d,count,%{public}d,countReset,%{public}d", buf, 0x28u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B7400);
      }
      double v15 = *(double *)a2;
      uint64_t v16 = *(void *)(a2 + 8);
      int v17 = *(_DWORD *)(a2 + 16);
      int v24 = 134350080;
      double v25 = v15;
      __int16 v26 = 2050;
      uint64_t v27 = v16;
      __int16 v28 = 1026;
      int v29 = v17;
      __int16 v30 = 1026;
      int v31 = v5;
      __int16 v32 = 1026;
      int v33 = v6;
      int v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLSedentaryTimerNotifier::onStoreSedentaryAlarm(CLSedentaryAlarmData)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
  }
  else
  {
    sub_1004E9520(a1 + 200, (double *)a2);
  }
  if (__p)
  {
    uint64_t v22 = (double *)__p;
    operator delete(__p);
  }
}

void sub_1004E94F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004E9520(uint64_t a1, double *a2)
{
  uint64_t result = sub_1004EC558(*(void *)(a1 + 24), a2);
  if (!*(unsigned char *)(a1 + 41))
  {
    uint64_t result = sub_100082064(*(void *)(a1 + 24) + 72);
    if (result)
    {
      *(unsigned char *)(a1 + 41) = 1;
      return sub_1004E7A18(a1);
    }
  }
  return result;
}

void sub_1004E9588(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1004E9590(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = &off_1022B7638;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    double v12 = a3;
  }
  else {
    double v12 = (uint64_t *)*a3;
  }
  id v13 = [objc_msgSend(a4, "vendor") proxyForService:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12)];
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:[a4 silo]];
  return a1;
}

void sub_1004E9674()
{
}

void sub_1004E9730(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_1004E976C(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        uint64_t v9 = (uint64_t *)v4;
      }
      else {
        uint64_t v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)uint64_t buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022B73E0);
      }
      uint64_t v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        uint64_t v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          uint64_t v11 = (void *)*v11;
        }
        *(_DWORD *)uint64_t buf = 136446466;
        uint64_t v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022B73E0);
        }
        double v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          double v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        double v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData>::removeClient(int) [Notification_T = CLSedentaryTimerNotifier_Type::Notification, NotificationData_T = CLSedentaryTimerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_1004E99FC(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_1004E9AB0(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_1004E9AF8(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_1004E9B40(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_1004E9B88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_10241C020);
}

BOOL sub_1004E9BB4(uint64_t a1, int a2, int *a3, char *a4)
{
  int v40 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      uint64_t v39 = v10;
      int v16 = *a3;
      uint64_t v19 = *(void *)(v10 + 48);
      uint64_t v18 = v10 + 48;
      uint64_t v17 = v19;
      if (!v19) {
        goto LABEL_31;
      }
      uint64_t v20 = v18;
      do
      {
        int v21 = *(_DWORD *)(v17 + 28);
        BOOL v22 = v21 < v16;
        if (v21 >= v16) {
          uint64_t v23 = (uint64_t *)v17;
        }
        else {
          uint64_t v23 = (uint64_t *)(v17 + 8);
        }
        if (!v22) {
          uint64_t v20 = v17;
        }
        uint64_t v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28)) {
LABEL_31:
      }
        uint64_t v20 = v18;
      uint64_t v24 = *(void *)(a1 + 64);
      if (!v24) {
        goto LABEL_42;
      }
      uint64_t v25 = a1 + 64;
      do
      {
        int v26 = *(_DWORD *)(v24 + 32);
        BOOL v27 = v26 < v16;
        if (v26 >= v16) {
          __int16 v28 = (uint64_t *)v24;
        }
        else {
          __int16 v28 = (uint64_t *)(v24 + 8);
        }
        if (!v27) {
          uint64_t v25 = v24;
        }
        uint64_t v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(void *)int v41 = v25;
        uint64_t v34 = *(void *)(v25 + 56);
        char v35 = *a4;
        *(void *)uint64_t buf = &v40;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v25 + 40), &v40, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v35;
        memset(buf, 0, 24);
        if (v20 == v18)
        {
          if ((*(unsigned int (**)(uint64_t, int *, uint8_t *))(*(void *)a1 + 128))(a1, a3, buf)) {
            sub_1004ECF10();
          }
          if (*(void *)buf)
          {
            *(void *)&uint8_t buf[8] = *(void *)buf;
            operator delete(*(void **)buf);
          }
        }
        if (v34) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        *(void *)int v41 = a1 + 64;
        char v29 = byte_10241C021;
        int v38 = v16;
        *(void *)uint64_t buf = &v38;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v29;
        int v38 = *a3;
        *(void *)uint64_t buf = &v38;
        __int16 v30 = sub_10044715C((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        int v31 = (std::__shared_weak_count *)v30[9];
        v30[8] = 0;
        v30[9] = 0;
        if (v31) {
          sub_1000DB0A0(v31);
        }
        char v32 = *a4;
        int v38 = *a3;
        *(void *)uint64_t buf = &v38;
        int v33 = sub_10044715C((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)uint64_t buf = &v40;
        *((unsigned char *)sub_1000EB1B8(v33 + 5, &v40, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v20 == v18)
      {
        *(_DWORD *)uint64_t buf = *a3;
        sub_1000EDED4((uint64_t **)(v39 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022B73E0);
  }
  id v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    double v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      double v15 = (void *)*v15;
    }
    *(_DWORD *)uint64_t buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B73E0);
    }
    __int16 v36 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      __int16 v36 = (void *)*v36;
    }
    *(_DWORD *)int v41 = 136446466;
    *(void *)&v41[4] = v36;
    __int16 v42 = 1026;
    int v43 = a2;
    uint64_t v37 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLSedentaryTimerNotifier_Type::Notification, NotificationData_T = CLSedentaryTimerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v37 != (char *)buf) {
      free(v37);
    }
    return 0;
  }
  return result;
}

void sub_1004EA06C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1004EA094(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        int v21 = (uint64_t *)v15;
      }
      else {
        int v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B73E0);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)uint64_t buf = 136446466;
      uint64_t v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022B73E0);
      }
      BOOL v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLSedentaryTimerNotifier_Type::Notification, NotificationData_T = CLSedentaryTimerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_1004EA318(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            BOOL v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                BOOL v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022B73E0);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                BOOL v27 = a1 + 8;
                if (a1[31] < 0) {
                  BOOL v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  __int16 v28 = __p;
                }
                else {
                  __int16 v28 = (void **)__p[0];
                }
                *(_DWORD *)uint64_t buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                char v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022B73E0);
                }
                char v29 = a1 + 8;
                if (a1[31] < 0) {
                  char v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  __int16 v30 = buf;
                }
                else {
                  __int16 v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                int v38 = v29;
                __int16 v39 = 2082;
                int v40 = v30;
                int v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLSedentaryTimerNotifier_Type::Notification, NotificationData_T = CLSedentaryTimerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_1004EA6EC(uint64_t a1, int *a2, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      BOOL v10 = (uint64_t *)v4;
    }
    else {
      BOOL v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v7 == v3) {
    return 0;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0;
  }
  uint64_t v11 = *(void *)(v7 + 64);
  if (!v11) {
    return 0;
  }
  if ((char *)v11 != a3) {
    sub_1004ED058(a3, *(char **)v11, *(void *)(v11 + 8), (uint64_t)(*(void *)(v11 + 8) - *(void *)v11) >> 5);
  }
  return 1;
}

uint64_t sub_1004EA774(uint64_t a1, int *a2, uint64_t a3)
{
  sub_1004EBE50(a3, &v10);
  int v9 = *a2;
  uint64_t v11 = &v9;
  uint64_t v5 = sub_10044715C((uint64_t **)(a1 + 56), &v9, (uint64_t)&unk_101D0B290, &v11);
  long long v6 = v10;
  long long v10 = 0uLL;
  uint64_t v7 = (std::__shared_weak_count *)v5[9];
  *((_OWORD *)v5 + 4) = v6;
  if (v7)
  {
    sub_1000DB0A0(v7);
    if (*((void *)&v10 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  return 1;
}

void sub_1004EA808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004EA820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long __p = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, &__p, a3, a4, 0);
  if (__p)
  {
    uint64_t v5 = __p;
    operator delete(__p);
  }
}

void sub_1004EA890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004EA8AC(uint64_t a1, unsigned int *a2, uint64_t a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022B73E0);
  }
  int v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    long long v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v10 = (void *)*v10;
    }
    uint64_t v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)uint64_t buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2082;
    *(void *)&buf[20] = "activity";
    __int16 v23 = 2082;
    BOOL v24 = v10;
    __int16 v25 = 2050;
    int v26 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    BOOL v27 = v28;
    memset(v28, 0, sizeof(v28));
    char v29 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v27);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v26) {
      sub_1000DB0A0(v26);
    }
    sub_1000F5BB0((uint64_t)&buf[8], *(void **)&buf[16]);
    if (v29) {
      sub_1000DB0A0(v29);
    }
    sub_1000F5BB0((uint64_t)&v27, v28[0]);
  }
  if (!a4)
  {
    uint64_t v20 = (std::__shared_weak_count *)v14[9];
    v14[8] = 0;
    v14[9] = 0;
    if (!v20) {
      goto LABEL_29;
    }
LABEL_28:
    sub_1000DB0A0(v20);
    goto LABEL_29;
  }
  sub_1004EBE50(a3, buf);
  long long v18 = *(_OWORD *)buf;
  *(void *)uint64_t buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  int v19 = (std::__shared_weak_count *)v14[9];
  *((_OWORD *)v14 + 4) = v18;
  if (v19)
  {
    sub_1000DB0A0(v19);
    uint64_t v20 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]) {
      goto LABEL_28;
    }
  }
LABEL_29:
  if (v14[7]) {
    sub_1004EB884();
  }
  os_activity_scope_leave(&state);
}

void sub_1004EAE7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_1004EAEC8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B73E0);
    }
    long long v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      BOOL v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022B73E0);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData>::listClients() [Notification_T = CLSedentaryTimerNotifier_Type::Notification, NotificationData_T = CLSedentaryTimerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B73E0);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)uint64_t buf = 136315394;
      BOOL v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022B73E0);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData>::listClients() [Notification_T = CLSedentaryTimerNotifier_Type::Notification, NotificationData_T = CLSedentaryTimerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    int v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        int v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_1022B73E0);
            }
            long long v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                uint64_t v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)uint64_t buf = 136315650;
              BOOL v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022B73E0);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData>::listClients() [Notification_T = CLSedentaryTimerNotifier_Type::Notification, NotificationData_T = CLSedentaryTimerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                int v9 = v15;
              }
              while (!v16);
            }
            int v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        long long v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            long long v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            int v8 = v19;
          }
          while (!v16);
        }
        int v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_1004EB478(uint64_t a1)
{
  sub_1004ECEA0(a1);

  operator delete();
}

id sub_1004EB4B0(uint64_t a1, int a2, void *a3)
{
  id result = sub_1004EC018(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_1004EB500(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1004EB530(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1004EB560(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1004EB5C8(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A61910(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004EB5E0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

uint64_t sub_1004EB610(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1004EB654(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_1004EB684(uint64_t a1, double **a2)
{
  uint64_t v3 = *a2;
  long long v2 = a2[1];
  double v4 = (*a2)[1];
  double v5 = *(float *)(a1 + 136);
  if (v4 <= v5) {
    double v4 = *(float *)(a1 + 136);
  }
  int v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    uint64_t v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    double v8 = *v3;
    do
    {
      double v9 = *v6;
      double v10 = v6[1];
      v6 += 3;
      uint64_t v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5) {
        double v4 = *(float *)(a1 + 136);
      }
      else {
        double v4 = v10;
      }
      double v8 = v9;
    }
    while (v6 != v2);
  }
  if (v4 != 1.79769313e308)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022B7400);
    }
    uint64_t v11 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning No expiration rule was added so the number of records will be unbounded.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B7400);
      }
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "int CLActivityRecorderDb<CLSedentaryAlarmData>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLSedentaryAlarmData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  return v7;
}

void sub_1004EB884()
{
}

void sub_1004EB944()
{
}

void sub_1004EB968(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    double v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      double v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          int v12 = (uint64_t *)v4;
        }
        else {
          int v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          double v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        char v49 = v9;
        id v13 = sub_1004EC018(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            int v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                BOOL v22 = (uint64_t *)v17;
              }
              else {
                BOOL v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                int v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              int64x2_t v48 = v19;
              sub_1004EBD58(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              char v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  char v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              char v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                char v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    char v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  int v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      int v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      char v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              int64x2_t v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022B73E0);
              }
              BOOL v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)uint64_t buf = 136446466;
                uint64_t v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022B73E0);
                }
                float v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  float v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                uint64_t v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                unint64_t v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLSedentaryTimerNotifier_Type::Notification, NotificationData_T = CLSedentaryTimerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_1004EBD58(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_1004EC018(a4);
    uint64_t v10 = *(void *)a3 + 80;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40);
    uint64_t v14 = (int *)(*(void *)a2 + 32);
    int v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4, v13];
    }
  }
  return result;
}

uint64_t sub_1004EBE50@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x30uLL);
  uint64_t result = sub_1004EBEAC((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_1004EBE98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004EBEAC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = off_1022B75A8;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 24) = 0;
  sub_1004EC468((void *)(a1 + 24), *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5);
  return a1;
}

void sub_1004EBF10(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004EBF24(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B75A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004EBF44(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B75A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1004EBF98(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

uint64_t sub_1004EBFB4(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    long long v2 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v2;
      operator delete(v2);
    }
    operator delete();
  }
  return result;
}

id sub_1004EC018(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return sub_1004EC078(a1);
}

id sub_1004EC078(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022B75E8);
      }
      uint64_t v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D21E2CLL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLSedentaryTimerNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022B75E8);
      }
      double v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D21E2CLL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1022B75E8);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

void sub_1004EC438(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void *sub_1004EC468(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    uint64_t result = sub_100222834(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1004EC4C8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004EC4E4(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1000D816C(a2 + 26);
    sub_1003BE294(a2 + 20);
    sub_1000D80C4(a2 + 14);
    uint64_t v3 = (void *)a2[1];
    if (v3)
    {
      a2[2] = v3;
      operator delete(v3);
    }
    operator delete();
  }
}

uint64_t sub_1004EC558(uint64_t a1, double *a2)
{
  uint64_t v5 = a1 + 112;
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v6 = a1 + 72;
  *(void *)&v19[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  __int16 v20 = 256;
  v19[0] = *a2;
  if (sub_10018360C(v6, v19))
  {
    if (sub_100082064(v6))
    {
      (*(void (**)(uint64_t, double *, void))(*(void *)a1 + 80))(a1, a2, 0);
    }
    else if (!*(unsigned char *)(a1 + 128))
    {
      unint64_t v12 = (void *)(a1 + 176);
      unint64_t v13 = *(void *)(a1 + 216);
      if (v13 > *(int *)(a1 + 256))
      {
        ++*(void *)(a1 + 208);
        *(void *)(a1 + 216) = v13 - 1;
        sub_1002D0514(a1 + 176, 1);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022B7400);
        }
        uint64_t v14 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Maximum number of entries exceeded, throwing out oldest entry.", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022B7400);
          }
          int v18 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLActivityRecorderDb<CLSedentaryAlarmData>::addSuspectRecord(const T &) [T = CLSedentaryAlarmData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v18);
          if (v18 != (char *)buf) {
            free(v18);
          }
        }
      }
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_1022B7608);
      }
      int v15 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Buffer was added to since db was inaccesible.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_1022B7608);
        }
        uint64_t v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLActivityRecorderDb<CLSedentaryAlarmData>::addSuspectRecord(const T &) [T = CLSedentaryAlarmData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
      }
      __n128 v7 = sub_1004ECAC8(v12, (uint64_t)a2);
    }
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022B7400);
    }
    size_t v8 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
    {
      __int16 v9 = (void *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0) {
        __int16 v9 = (void *)*v9;
      }
      *(_DWORD *)uint64_t buf = 68289538;
      int v22 = 0;
      __int16 v23 = 2082;
      BOOL v24 = "";
      __int16 v25 = 1026;
      int v26 = (int)v19[0];
      __int16 v27 = 2082;
      int v28 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B7400);
      }
    }
    uint64_t v10 = qword_102418FD8;
    if (os_signpost_enabled((os_log_t)qword_102418FD8))
    {
      __int16 v11 = (void *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0) {
        __int16 v11 = (void *)*v11;
      }
      *(_DWORD *)uint64_t buf = 68289538;
      int v22 = 0;
      __int16 v23 = 2082;
      BOOL v24 = "";
      __int16 v25 = 1026;
      int v26 = (int)v19[0];
      __int16 v27 = 2082;
      int v28 = v11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CL database error, record contains invalid time", "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
    }
  }
  return (*(uint64_t (**)(uint64_t, __n128))(*(void *)v5 + 24))(v5, v7);
}

void sub_1004ECA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1004ECAC8(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 16 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1004ECB88(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  size_t v8 = (_OWORD *)(*(void *)(v5 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v7 & 0x7F));
  __n128 result = *(__n128 *)a2;
  long long v10 = *(_OWORD *)(a2 + 16);
  *size_t v8 = *(_OWORD *)a2;
  v8[1] = v10;
  ++a1[5];
  return result;
}

void sub_1004ECB58(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_1004ECB88(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x80;
  unint64_t v4 = v2 - 128;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    size_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    __int16 v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)size_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C(v5, v33);
      char v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      BOOL v38 = (uint64_t *)a1[1];
      size_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        size_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        BOOL v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)BOOL v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      __int16 v9 = (char *)a1[1];
    }
    size_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    BOOL v44 = (void *)a1[1];
    size_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    __int16 v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      char v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      int64x2_t v48 = (uint64_t *)a1[1];
      size_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        size_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      int v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        size_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __int16 v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  int v53 = operator new(0x1000uLL);
  sub_1000DA434(&v54, &v53);
  __int16 v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  char v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1004ECE54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1004ECEA0(uint64_t a1)
{
  *(void *)a1 = &off_1022B7638;
  unint64_t v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  *unint64_t v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_1004ECF10()
{
}

void sub_1004ECFD0()
{
}

uint64_t sub_1004ECFF4(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    unint64_t v2 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v2;
      operator delete(v2);
    }
    operator delete();
  }
  return result;
}

char *sub_1004ED058(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  __int16 v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 5)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unint64_t v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 >> 59) {
      sub_1001D7FD4();
    }
    uint64_t v10 = v8 >> 4;
    if (v8 >> 4 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    __n128 result = sub_100222834(v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    __int16 v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      int v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  BOOL v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 5;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[32 * v15];
  if (v14 != v9)
  {
    __n128 result = (char *)memmove(*(void **)result, __src, v14 - v9);
    __int16 v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    int v19 = v16;
LABEL_18:
    __n128 result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

uint64_t sub_1004ED164()
{
  sub_100134750(qword_10247AE70, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247AE70, (void *)&_mh_execute_header);
}

void sub_1004EE5AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    sub_1000DB0A0(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004EE5CC(const char *a1, float *a2)
{
  sub_1000C7F88(&v7);
  int v4 = sub_1004D11B0(v7, a1, a2);
  if (*(void *)v8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v8);
  }
  if (v4)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022B7650);
    }
    uint64_t v5 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_INFO))
    {
      int v6 = (int)*a2;
      uint64_t v7 = 68289538;
      *(_WORD *)uint64_t v8 = 2082;
      *(void *)&int v8[2] = "";
      __int16 v9 = 2082;
      uint64_t v10 = a1;
      __int16 v11 = 1026;
      int v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Overriding behavior feature\", \"key\":%{public, location:escape_only}s, \"value\":%{public}d}", (uint8_t *)&v7, 0x22u);
    }
  }
}

void sub_1004EE700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004EE720(const char *a1, int *a2)
{
  sub_1000C7F88(&v7);
  int v4 = sub_10006EF84(v7, a1, a2);
  if (*(void *)v8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v8);
  }
  if (v4)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022B7650);
    }
    uint64_t v5 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_INFO))
    {
      int v6 = *a2;
      uint64_t v7 = 68289538;
      *(_WORD *)uint64_t v8 = 2082;
      *(void *)&int v8[2] = "";
      __int16 v9 = 2082;
      uint64_t v10 = a1;
      __int16 v11 = 1026;
      int v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Overriding behavior feature\", \"key\":%{public, location:escape_only}s, \"value\":%{public}d}", (uint8_t *)&v7, 0x22u);
    }
  }
}

void sub_1004EE850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004EE870(const char *a1, uint64_t *a2)
{
  sub_1000C7F88(&v7);
  int v4 = sub_1004D0EA0(v7, a1, a2);
  if (*(void *)v8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v8);
  }
  if (v4)
  {
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1022B7650);
    }
    uint64_t v5 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *a2;
      uint64_t v7 = 68289538;
      *(_WORD *)uint64_t v8 = 2082;
      *(void *)&int v8[2] = "";
      __int16 v9 = 2082;
      uint64_t v10 = a1;
      __int16 v11 = 1026;
      int v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Overriding behavior feature\", \"key\":%{public, location:escape_only}s, \"value\":%{public}d}", (uint8_t *)&v7, 0x22u);
    }
  }
}

void sub_1004EE9A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1004EEDE0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  *(_OWORD *)(a1 + 52) = *(_OWORD *)(a2 + 52);
  __n128 result = *(__n128 *)(a2 + 68);
  *(__n128 *)(a1 + 68) = result;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(unsigned char *)(a1 + 90) = *(unsigned char *)(a2 + 90);
  return result;
}

void sub_1004EEE58(id a1)
{
  qword_1024190F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

double sub_1004EEE88(uint64_t a1)
{
  *(_OWORD *)a1 = xmmword_101D21EA0;
  *(_OWORD *)(a1 + 16) = xmmword_101D21EC0;
  *(void *)(a1 + 32) = 0x4100000041A00000;
  *(void *)(a1 + 40) = 0xA00000018;
  *(_OWORD *)(a1 + 48) = xmmword_101D21ED0;
  *(_DWORD *)(a1 + 64) = 1110704128;
  *(void *)&double result = 0x200000008;
  *(_OWORD *)(a1 + 68) = xmmword_101D21EE0;
  *(_DWORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 87) = 0;
  return result;
}

unint64_t sub_1004EEEDC(_WORD *a1, float a2)
{
  BOOL v3 = 0;
  uint64_t v4 = 0;
  long long __p = 0;
  BOOL v44 = 0;
  uint64_t v45 = 0;
  LOWORD(a2) = a1[2];
  *(float *)&unsigned int v5 = (float)LODWORD(a2);
  float v6 = *(float *)&v5 * 0.0039062;
  LOWORD(v5) = a1[3];
  *(float *)&unsigned int v7 = (float)v5;
  float v8 = *(float *)&v7 * 0.0039062;
  LOWORD(v7) = a1[1];
  float v9 = (float)v7 * 0.0039062;
  do
  {
    int v10 = (unsigned __int16)a1[v4 + 10];
    float v11 = 60.0;
    if (v10 != 0x8000 && v6 <= 60.0)
    {
      float v11 = (float)(__int16)v10 * 0.015625;
      float v13 = v11 + (float)(v9 * 1000.0);
      if (v3 >= v45)
      {
        BOOL v14 = (float *)__p;
        uint64_t v15 = ((char *)v3 - (unsigned char *)__p) >> 3;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 61) {
          sub_1001D7FD4();
        }
        uint64_t v17 = (char *)v45 - (unsigned char *)__p;
        if (((char *)v45 - (unsigned char *)__p) >> 2 > v16) {
          unint64_t v16 = v17 >> 2;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          int v19 = (char *)sub_1000DA54C((uint64_t)&v45, v18);
          BOOL v14 = (float *)__p;
          BOOL v3 = v44;
        }
        else
        {
          int v19 = 0;
        }
        int64_t v20 = (float *)&v19[8 * v15];
        *int64_t v20 = v6;
        v20[1] = v13;
        uint64_t v21 = v20;
        if (v3 != v14)
        {
          do
          {
            uint64_t v22 = *((void *)v3 - 1);
            v3 -= 2;
            *((void *)v21 - 1) = v22;
            v21 -= 2;
          }
          while (v3 != v14);
          BOOL v14 = (float *)__p;
        }
        BOOL v3 = v20 + 2;
        long long __p = v21;
        BOOL v44 = v20 + 2;
        uint64_t v45 = (float *)&v19[8 * v18];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        float *v3 = v6;
        v3[1] = v13;
        v3 += 2;
      }
      BOOL v44 = v3;
    }
    ++v4;
    float v6 = v8 + v6;
  }
  while (v4 != 100);
  uint64_t v23 = (float *)__p;
  if (__p == v3)
  {
    float v38 = 0.0;
    if (!v3) {
      return ((unint64_t)LODWORD(v38) << 32) | 0xE;
    }
    goto LABEL_56;
  }
  uint64_t v40 = 0;
  BOOL v41 = 0;
  uint64_t v42 = 0;
  if (__p == v3 - 2)
  {
    float v38 = 0.0;
    goto LABEL_55;
  }
  uint64_t v24 = 0;
  do
  {
    unint64_t v25 = v23;
    v23 += 2;
    uint64_t v26 = v44;
    if (v23 != v44)
    {
      __int16 v27 = v24;
      uint64_t v28 = v23;
      do
      {
        float v11 = v28[1] - v25[1];
        float v29 = v11 / (float)(*v28 - *v25);
        if (v27 >= v42)
        {
          long long v30 = v40;
          uint64_t v31 = v27 - v40;
          unint64_t v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 62) {
            sub_1001D7FD4();
          }
          uint64_t v33 = (char *)v42 - (char *)v40;
          if (((char *)v42 - (char *)v40) >> 1 > v32) {
            unint64_t v32 = v33 >> 1;
          }
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v34 = v32;
          }
          if (v34)
          {
            char v35 = (char *)sub_10017EA34((uint64_t)&v42, v34);
            long long v30 = v40;
            __int16 v27 = v41;
          }
          else
          {
            char v35 = 0;
          }
          uint64_t v36 = (float *)&v35[4 * v31];
          float *v36 = v29;
          uint64_t v24 = v36 + 1;
          while (v27 != v30)
          {
            float v37 = *--v27;
            float v11 = v37;
            *--uint64_t v36 = v37;
          }
          uint64_t v40 = v36;
          uint64_t v42 = (float *)&v35[4 * v34];
          if (v30) {
            operator delete(v30);
          }
        }
        else
        {
          float *v27 = v29;
          uint64_t v24 = v27 + 1;
        }
        BOOL v41 = v24;
        v28 += 2;
        __int16 v27 = v24;
      }
      while (v28 != v26);
    }
  }
  while (v23 != v3 - 2);
  if (v40 == v24)
  {
    float v38 = 0.0;
    if (!v24) {
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  float v38 = sub_1004EF270(v40, v24, v11);
  uint64_t v24 = v40;
  if (v40) {
LABEL_54:
  }
    operator delete(v24);
LABEL_55:
  BOOL v3 = (float *)__p;
  if (__p)
  {
LABEL_56:
    BOOL v44 = v3;
    operator delete(v3);
  }
  return ((unint64_t)LODWORD(v38) << 32) | 0xE;
}

void sub_1004EF230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

float sub_1004EF270(float *a1, float *a2, float a3)
{
  uint64_t v3 = (char *)a2 - (char *)a1;
  if ((char *)a2 - (char *)a1 <= 3) {
    sub_101A62948();
  }
  uint64_t v4 = a1;
  unint64_t v5 = (unint64_t)(v3 >> 2) >> 1;
  float v6 = &a1[v5];
  if (v6 != a2) {
    sub_1004EF34C(a1, &a1[v5], a2, a3);
  }
  if (((v3 >> 2) & 0x8000000000000001) == 1) {
    return *v6;
  }
  if ((unint64_t)v3 >= 8 && v5 != 1)
  {
    float v8 = v4 + 1;
    float v9 = *v4;
    uint64_t v10 = 4 * v5 - 4;
    float v11 = v4 + 1;
    do
    {
      float v12 = *v11++;
      float v13 = v12;
      if (v9 < v12)
      {
        float v9 = v13;
        uint64_t v4 = v8;
      }
      float v8 = v11;
      v10 -= 4;
    }
    while (v10);
  }
  return *v4 + (float)((float)(*v6 - *v4) * 0.5);
}

float sub_1004EF34C(float *a1, float *a2, float *a3, float result)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    do
    {
      unint64_t v7 = v4 - a1;
      if (v7 < 2) {
        break;
      }
      if (v7 == 3)
      {
        sub_1004EF5F8(a1, a1 + 1, v4 - 1);
        return result;
      }
      if (v7 == 2)
      {
        double result = *(v4 - 1);
        float v30 = *a1;
        if (result < *a1)
        {
          *a1 = result;
          *(v4 - 1) = v30;
        }
        return result;
      }
      if ((char *)v4 - (char *)a1 <= 31)
      {
        return sub_1004EF680(a1, v4, result);
      }
      float v8 = &a1[v7 >> 1];
      float v9 = v4 - 1;
      int v10 = sub_1004EF5F8(a1, v8, v4 - 1);
      double result = *a1;
      if (*a1 >= *v8)
      {
        float v11 = v4 - 1;
        while (--v11 != a1)
        {
          if (*v11 < *v8)
          {
            *a1 = *v11;
            *float v11 = result;
            ++v10;
            goto LABEL_13;
          }
        }
        uint64_t v21 = a1 + 1;
        if (result >= *v9)
        {
          while (v21 != v9)
          {
            float v22 = *v21;
            if (result < *v21)
            {
              *v21++ = *v9;
              float *v9 = v22;
              goto LABEL_45;
            }
            ++v21;
          }
          return result;
        }
LABEL_45:
        if (v21 == v9) {
          return result;
        }
        while (1)
        {
          float v25 = *a1;
          do
          {
            float v26 = *v21++;
            double result = v26;
          }
          while (v25 >= v26);
          __int16 v27 = v21 - 1;
          do
          {
            float v28 = *--v9;
            float v29 = v28;
          }
          while (v25 < v28);
          if (v27 >= v9) {
            break;
          }
          float *v27 = v29;
          float *v9 = result;
        }
        a1 = v21 - 1;
        if (v27 > a2) {
          return result;
        }
      }
      else
      {
        float v11 = v4 - 1;
LABEL_13:
        float v12 = a1 + 1;
        if (a1 + 1 >= v11)
        {
          unint64_t v16 = a1 + 1;
        }
        else
        {
          float v13 = a1 + 1;
          while (1)
          {
            float v14 = *v8;
            do
            {
              float v15 = *v13++;
              double result = v15;
            }
            while (v15 < v14);
            unint64_t v16 = v13 - 1;
            do
            {
              float v17 = *--v11;
              float v18 = v17;
            }
            while (v17 >= v14);
            if (v16 >= v11) {
              break;
            }
            float *v16 = v18;
            *float v11 = result;
            ++v10;
            if (v16 == v8) {
              float v8 = v11;
            }
          }
        }
        if (v16 != v8)
        {
          double result = *v8;
          float v19 = *v16;
          if (*v8 < *v16)
          {
            float *v16 = result;
            *float v8 = v19;
            ++v10;
          }
        }
        if (v16 == a2) {
          return result;
        }
        if (!v10)
        {
          if (v16 <= a2)
          {
            uint64_t v23 = v16 + 1;
            while (v23 != v4)
            {
              float v24 = *(v23 - 1);
              double result = *v23++;
              if (result < v24) {
                goto LABEL_29;
              }
            }
          }
          else
          {
            while (v12 != v16)
            {
              float v20 = *(v12 - 1);
              double result = *v12++;
              if (result < v20) {
                goto LABEL_29;
              }
            }
          }
          return result;
        }
LABEL_29:
        if (v16 <= a2) {
          a1 = v16 + 1;
        }
        else {
          uint64_t v4 = v16;
        }
      }
    }
    while (v4 != a2);
  }
  return result;
}

uint64_t sub_1004EF5F8(float *a1, float *a2, float *a3)
{
  float v3 = *a2;
  float v4 = *a1;
  float v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    float v6 = *a1;
    if (*a2 >= *a1) {
      return 1;
    }
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

float sub_1004EF680(float *a1, float *a2, float result)
{
  while (a1 != a2 - 1)
  {
    float v3 = a1++;
    if (v3 != a2 && a1 != a2)
    {
      double result = *v3;
      float v4 = a1;
      float v5 = v3;
      float v6 = a1;
      do
      {
        float v7 = *v6++;
        float v8 = v7;
        if (v7 < result)
        {
          double result = v8;
          float v5 = v4;
        }
        float v4 = v6;
      }
      while (v6 != a2);
      if (v5 != v3)
      {
        double result = *v3;
        float *v3 = *v5;
        float *v5 = result;
      }
    }
  }
  return result;
}

uint64_t sub_1004EF6F4(uint64_t a1, int a2)
{
  sub_100134750(__p, "");
  sub_1004EF8AC(a1, "CLMotionStateRecorderDb", a2, (uint64_t)__p, 1, 4.0);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = off_1022B76F0;
  *(void *)(a1 + 72) = off_1022B77A0;
  sub_100F03BA0((void *)(a1 + 464), 0, 0);
  sub_100F03BA0((void *)(a1 + 480), 0, 0);
  sub_100F03BA0((void *)(a1 + 496), 0, 0);
  sub_100F03BA0((void *)(a1 + 512), 0, 0);
  sub_100F03BA0((void *)(a1 + 528), 0, 0);
  sub_100F03BA0((void *)(a1 + 544), 0, 0);
  sub_100F03BA0((void *)(a1 + 560), 0, 0);
  sub_100F03BA0((void *)(a1 + 576), 0, 0);
  sub_100F03BA0((void *)(a1 + 592), 0, 0);
  sub_100F03BA0((void *)(a1 + 608), 0, 0);
  sub_100F03BA0((void *)(a1 + 624), 0, 0);
  *(_OWORD *)(a1 + 640) = 0u;
  (*(void (**)(uint64_t))(*(void *)a1 + 112))(a1);
  return a1;
}

void sub_1004EF880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004EF8AC(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  float v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022B2C20;
  sub_1003BDF2C((void *)(a1 + 8));
  *float v12 = &off_1022B2C68;
  *(void *)a1 = off_1022B7880;
  *(void *)(a1 + 72) = off_1022B7928;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_1022B7880;
  *(void *)(a1 + 72) = off_1022B7928;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 384) = 12000;
  *(void *)(a1 + 392) = off_1022B2C20;
  sub_1003BDF2C((void *)(a1 + 400));
  *(void *)(a1 + 400) = &off_1022B2C68;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_1004EFCBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  void *v27 = v30;
  sub_1003BE1F8(v31);
  sub_1004F4578(v29);
  sub_1011F8AE0(v28);
  *float v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_1004EFD50()
{
}

void *sub_1004EFD58(void *a1)
{
  *a1 = off_1022B7880;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_1022B7928;
  a1[49] = off_1022B2C20;
  sub_1003BE1F8(a1 + 50);
  sub_1004F4578(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022B2C20;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void *sub_1004EFE18(void *a1)
{
  *a1 = off_1022B76F0;
  a1[9] = off_1022B77A0;
  sub_1004EFE98((uint64_t)a1, 0, 0);

  return sub_1004EFD58(a1);
}

void sub_1004EFE98(uint64_t a1, void *a2, const void *a3)
{
  if ((a2 != 0) == (a3 != 0))
  {

    *(void *)(a1 + 640) = a2;
    char v6 = *(const void **)(a1 + 648);
    if (v6) {
      _Block_release(v6);
    }
    if (a3) {
      *(void *)(a1 + 648) = _Block_copy(a3);
    }
  }
  else
  {
    uint64_t v7 = sub_101A62974();
    sub_1004EFF10(v7);
  }
}

void *sub_1004EFF14(uint64_t a1)
{
  return sub_1004EFE18((void *)(a1 - 72));
}

void sub_1004EFF1C(void *a1)
{
  sub_1004EFE18(a1);

  operator delete();
}

void sub_1004EFF54(uint64_t a1)
{
  sub_1004EFE18((void *)(a1 - 72));

  operator delete();
}

uint64_t sub_1004EFF90(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = a1 + 112;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 16))(a1 + 112);
  if (*(double *)(*(void *)(a2 + 8) - 16) != 1.79769313e308)
  {
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_1022B7830);
    }
    float v12 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Programmer error, we expect an expiration record!", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_1022B7830);
      }
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual long CLMotionStateRecorderDb::aggregateRecords(const CLAggregationRules &)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    goto LABEL_21;
  }
  if (!sub_100082064(v3 + 72)) {
    goto LABEL_21;
  }
  sub_100082068((void *)(v3 + 496), buf);
  float v5 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)buf);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  BOOL v7 = sub_100055D58(v5, 1, Current - *(double *)(*(void *)(a2 + 8) - 24));
  BOOL v8 = v7;
  uint64_t v9 = *(void *)(v3 + 80);
  if (v7)
  {
    int v10 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)buf);
    sub_10001FEB0(v9, v10);
    int v11 = sub_1004F02B4(v3);
    *(_DWORD *)(v3 + 132) = v11;
    uint64_t v3 = v11;
  }
  else
  {
    uint64_t v14 = *(uint64_t *)(v9 + 88) <= 0 ? 0x7FFFFFFFFFFFFFFFLL : *(void *)(v9 + 88);
    sub_10003CC68(*(void *)(v3 + 80), v14);
  }
  uint64_t v15 = *(void *)buf;
  *(void *)uint64_t buf = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  if (!v8) {
LABEL_21:
  }
    uint64_t v3 = -1;
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  return v3;
}

void sub_1004F0268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004F02AC()
{
}

uint64_t sub_1004F02B4(uint64_t a1)
{
  if (!sub_100082064(a1 + 72)) {
    return 0xFFFFFFFFLL;
  }
  sub_100082068((void *)(a1 + 464), &v8);
  uint64_t v3 = (sqlite3_stmt *)sub_10014D19C(v8);
  int v4 = sqlite3_step(v3);
  if (v4 == 100)
  {
    float v5 = (sqlite3_stmt *)sub_10014D19C(v8);
    uint64_t v1 = sqlite3_column_int(v5, 0);
  }
  uint64_t v6 = v8;
  uint64_t v8 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  if (v4 != 100) {
    return 0xFFFFFFFFLL;
  }
  return v1;
}

void sub_1004F0360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004F03A0(uint64_t a1, uint64_t a2)
{
  return sub_1004EFF90(a1 - 72, a2);
}

unint64_t sub_1004F03A8(void *a1, char **a2, double a3, double a4)
{
  BOOL v7 = a1 + 14;
  uint64_t v6 = a1[14];
  uint64_t v8 = a1 + 9;
  v99[1] = (uint64_t)(a1 + 14);
  (*(void (**)(void *))(v6 + 16))(a1 + 14);
  __int16 v100 = 256;
  __int16 v80 = v7;
  if (sub_100082064(v8))
  {
    sub_100082068(a1 + 78, v99);
    uint64_t v9 = (sqlite3_stmt *)sub_10014D19C(v99[0]);
    if (sub_100055D58(v9, 1, a3))
    {
      while (!sub_1004F09A4(v99, (uint64_t)v86))
      {
        uint64_t v10 = v95;
        int v11 = v87;
        char v12 = v88;
        char v13 = v89;
        char v14 = v90;
        char v15 = v91;
        char v16 = v92;
        char v17 = v93;
        char v18 = v94;
        char v19 = v97;
        char v20 = v98;
        unint64_t v21 = (unint64_t)a2[1];
        unint64_t v22 = (unint64_t)a2[2];
        if (v21 >= v22)
        {
          int v82 = v87;
          unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v21 - (void)*a2) >> 5);
          unint64_t v25 = v24 + 1;
          if (v24 + 1 > 0x199999999999999) {
            sub_1001D7FD4();
          }
          unint64_t v26 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v22 - (void)*a2) >> 5);
          if (2 * v26 > v25) {
            unint64_t v25 = 2 * v26;
          }
          if (v26 >= 0xCCCCCCCCCCCCCCLL) {
            unint64_t v27 = 0x199999999999999;
          }
          else {
            unint64_t v27 = v25;
          }
          if (v27) {
            uint64_t v28 = (char *)sub_1004F46B0((uint64_t)(a2 + 2), v27);
          }
          else {
            uint64_t v28 = 0;
          }
          float v29 = (double *)&v28[160 * v24];
          *(void *)float v29 = v10;
          v29[1] = a3;
          *((_DWORD *)v29 + 6) = v82;
          *((unsigned char *)v29 + 28) = v12;
          *((unsigned char *)v29 + 29) = v13;
          *((unsigned char *)v29 + 30) = v14;
          *((unsigned char *)v29 + 31) = v15;
          *((unsigned char *)v29 + 32) = v16;
          *((unsigned char *)v29 + 33) = v17;
          *((unsigned char *)v29 + 35) = v18;
          *((unsigned char *)v29 + 60) = v19;
          *((unsigned char *)v29 + 62) = v20;
          *((unsigned char *)v29 + 104) = 0;
          uint64_t v31 = *a2;
          uint64_t v30 = a2[1];
          unint64_t v32 = v29;
          if (v30 == *a2)
          {
            uint64_t v40 = (double **)a2;
          }
          else
          {
            do
            {
              long long v33 = *((_OWORD *)v30 - 9);
              *((_OWORD *)v32 - 10) = *((_OWORD *)v30 - 10);
              *((_OWORD *)v32 - 9) = v33;
              long long v34 = *((_OWORD *)v30 - 8);
              long long v35 = *((_OWORD *)v30 - 7);
              long long v36 = *((_OWORD *)v30 - 5);
              *((_OWORD *)v32 - 6) = *((_OWORD *)v30 - 6);
              *((_OWORD *)v32 - 5) = v36;
              *((_OWORD *)v32 - 8) = v34;
              *((_OWORD *)v32 - 7) = v35;
              long long v37 = *((_OWORD *)v30 - 4);
              long long v38 = *((_OWORD *)v30 - 3);
              long long v39 = *((_OWORD *)v30 - 1);
              *((_OWORD *)v32 - 2) = *((_OWORD *)v30 - 2);
              *((_OWORD *)v32 - 1) = v39;
              *((_OWORD *)v32 - 4) = v37;
              *((_OWORD *)v32 - 3) = v38;
              v32 -= 20;
              v30 -= 160;
            }
            while (v30 != v31);
            uint64_t v40 = (double **)a2;
            uint64_t v30 = *a2;
          }
          uint64_t v23 = (char *)(v29 + 20);
          *uint64_t v40 = v32;
          v40[1] = v29 + 20;
          v40[2] = (double *)&v28[160 * v27];
          if (v30) {
            operator delete(v30);
          }
        }
        else
        {
          *(void *)unint64_t v21 = v95;
          *(double *)(v21 + 8) = a3;
          *(_DWORD *)(v21 + 24) = v11;
          *(unsigned char *)(v21 + 28) = v12;
          *(unsigned char *)(v21 + 29) = v13;
          *(unsigned char *)(v21 + 30) = v14;
          *(unsigned char *)(v21 + 31) = v15;
          *(unsigned char *)(v21 + 32) = v16;
          *(unsigned char *)(v21 + 33) = v17;
          *(unsigned char *)(v21 + 35) = v18;
          *(unsigned char *)(v21 + 60) = v19;
          *(unsigned char *)(v21 + 62) = v20;
          uint64_t v23 = (char *)(v21 + 160);
          *(unsigned char *)(v21 + 104) = 0;
        }
        a2[1] = v23;
      }
    }
    sub_100082068(a1 + 74, &v85);
    BOOL v41 = (sqlite3_stmt *)sub_10014D19C(v85);
    if (sub_100055D58(v41, 1, a3))
    {
      uint64_t v42 = (sqlite3_stmt *)sub_10014D19C(v85);
      if (sub_100055D58(v42, 2, a4))
      {
        while (!sub_1004F09A4(&v85, (uint64_t)v86))
        {
          uint64_t v44 = v95;
          uint64_t v43 = v96;
          int v45 = v87;
          char v46 = v88;
          char v47 = v89;
          char v48 = v90;
          char v49 = v91;
          char v50 = v92;
          char v51 = v93;
          char v52 = v94;
          char v53 = v97;
          char v54 = v98;
          unint64_t v55 = (unint64_t)a2[1];
          unint64_t v56 = (unint64_t)a2[2];
          if (v55 >= v56)
          {
            int v83 = v87;
            unint64_t v58 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v55 - (void)*a2) >> 5);
            unint64_t v59 = v58 + 1;
            if (v58 + 1 > 0x199999999999999) {
              sub_1001D7FD4();
            }
            unint64_t v60 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v56 - (void)*a2) >> 5);
            if (2 * v60 > v59) {
              unint64_t v59 = 2 * v60;
            }
            if (v60 >= 0xCCCCCCCCCCCCCCLL) {
              unint64_t v61 = 0x199999999999999;
            }
            else {
              unint64_t v61 = v59;
            }
            if (v61) {
              __int16 v62 = (char *)sub_1004F46B0((uint64_t)(a2 + 2), v61);
            }
            else {
              __int16 v62 = 0;
            }
            uint64_t v63 = &v62[160 * v58];
            *(void *)uint64_t v63 = v44;
            *((void *)v63 + 1) = v43;
            *((_DWORD *)v63 + 6) = v83;
            v63[28] = v46;
            v63[29] = v47;
            v63[30] = v48;
            v63[31] = v49;
            v63[32] = v50;
            v63[33] = v51;
            v63[35] = v52;
            v63[60] = v53;
            v63[62] = v54;
            v63[104] = 0;
            long long v65 = *a2;
            long long v64 = a2[1];
            long long v66 = v63;
            if (v64 == *a2)
            {
              int64x2_t v74 = a2;
            }
            else
            {
              do
              {
                long long v67 = *((_OWORD *)v64 - 9);
                *((_OWORD *)v66 - 10) = *((_OWORD *)v64 - 10);
                *((_OWORD *)v66 - 9) = v67;
                long long v68 = *((_OWORD *)v64 - 8);
                long long v69 = *((_OWORD *)v64 - 7);
                long long v70 = *((_OWORD *)v64 - 5);
                *((_OWORD *)v66 - 6) = *((_OWORD *)v64 - 6);
                *((_OWORD *)v66 - 5) = v70;
                *((_OWORD *)v66 - 8) = v68;
                *((_OWORD *)v66 - 7) = v69;
                long long v71 = *((_OWORD *)v64 - 4);
                long long v72 = *((_OWORD *)v64 - 3);
                long long v73 = *((_OWORD *)v64 - 1);
                *((_OWORD *)v66 - 2) = *((_OWORD *)v64 - 2);
                *((_OWORD *)v66 - 1) = v73;
                *((_OWORD *)v66 - 4) = v71;
                *((_OWORD *)v66 - 3) = v72;
                v66 -= 160;
                v64 -= 160;
              }
              while (v64 != v65);
              int64x2_t v74 = a2;
              long long v64 = *a2;
            }
            int v57 = v63 + 160;
            *int64x2_t v74 = v66;
            v74[1] = v63 + 160;
            v74[2] = &v62[160 * v61];
            if (v64) {
              operator delete(v64);
            }
          }
          else
          {
            *(void *)unint64_t v55 = v95;
            *(void *)(v55 + 8) = v43;
            *(_DWORD *)(v55 + 24) = v45;
            *(unsigned char *)(v55 + 28) = v46;
            *(unsigned char *)(v55 + 29) = v47;
            *(unsigned char *)(v55 + 30) = v48;
            *(unsigned char *)(v55 + 31) = v49;
            *(unsigned char *)(v55 + 32) = v50;
            *(unsigned char *)(v55 + 33) = v51;
            *(unsigned char *)(v55 + 35) = v52;
            *(unsigned char *)(v55 + 60) = v53;
            *(unsigned char *)(v55 + 62) = v54;
            int v57 = (char *)(v55 + 160);
            *(unsigned char *)(v55 + 104) = 0;
          }
          a2[1] = v57;
        }
      }
    }
    uint64_t v75 = v85;
    uint64_t v85 = 0;
    if (v75) {
      (*(void (**)(uint64_t))(*(void *)v75 + 8))(v75);
    }
    uint64_t v76 = v99[0];
    v99[0] = 0;
    if (v76) {
      (*(void (**)(uint64_t))(*(void *)v76 + 8))(v76);
    }
  }
  int64x2_t v78 = *a2;
  int64x2_t v77 = a2[1];
  (*(void (**)(void *))(*v80 + 24))(v80);
  return 0xCCCCCCCCCCCCCCCDLL * ((v77 - v78) >> 5);
}

void sub_1004F0904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004F09A4(uint64_t *a1, uint64_t a2)
{
  int v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1;
  }
  if (v5 != 100) {
    return 2;
  }
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)a2 = sqlite3_column_int(v6, 0);
  BOOL v7 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 24) = sqlite3_column_double(v7, 1);
  uint64_t v8 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 16) = sqlite3_column_double(v8, 2);
  uint64_t v9 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 4) = sqlite3_column_int(v9, 3);
  uint64_t v10 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(unsigned char *)(a2 + 8) = sqlite3_column_int(v10, 4);
  int v11 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(unsigned char *)(a2 + 9) = sqlite3_column_int(v11, 5);
  char v12 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(unsigned char *)(a2 + 10) = sqlite3_column_int(v12, 6);
  char v13 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(unsigned char *)(a2 + 11) = sqlite3_column_int(v13, 7);
  char v14 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(unsigned char *)(a2 + 12) = sqlite3_column_int(v14, 8) != 0;
  char v15 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(unsigned char *)(a2 + 13) = sqlite3_column_int(v15, 9) != 0;
  char v16 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(unsigned char *)(a2 + 14) = sqlite3_column_int(v16, 10);
  char v17 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(unsigned char *)(a2 + 32) = sqlite3_column_int(v17, 11);
  char v18 = (sqlite3_stmt *)sub_10014D19C(*a1);
  char v19 = sqlite3_column_int(v18, 12);
  uint64_t result = 0;
  *(unsigned char *)(a2 + 33) = v19;
  return result;
}

void sub_1004F0B10(uint64_t a1)
{
  if (sub_10014C3C0(*(void *)(a1 + 80)))
  {
    sub_1004F0DE0(a1);
    sub_1005F7B0C(*(void *)(a1 + 80), "MotionStateHistory", (const char **)&qword_10247AEC0, (const std::string::value_type **)&qword_10247B160, 0);
    *(void *)(a1 + 464) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"SELECT COUNT(*) FROM MotionStateHistory");
    *(void *)(a1 + 472) = v2;
    *(void *)(a1 + 480) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM MotionStateHistory ORDER BY startTime ASC");
    *(void *)(a1 + 488) = v3;
    *(void *)(a1 + 496) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"DELETE FROM MotionStateHistory WHERE startTime < ?");
    *(void *)(a1 + 504) = v4;
    *(void *)(a1 + 512) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"DELETE FROM MotionStateHistory WHERE startTime > ?");
    *(void *)(a1 + 520) = v5;
    *(void *)(a1 + 528) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"DELETE FROM MotionStateHistory");
    *(void *)(a1 + 536) = v6;
    *(void *)(a1 + 544) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"INSERT INTO MotionStateHistory (startTime, timestamp, type, confidence, mounted, mountedConfidence, turn, isVehicular, isMoving, vehicleExitState, vehicularFlagsData, vehicleType) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
    *(void *)(a1 + 552) = v7;
    *(void *)(a1 + 560) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"UPDATE MotionStateHistory SET startTime = startTime + ?");
    *(void *)(a1 + 568) = v8;
    *(void *)(a1 + 576) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM MotionStateHistory ORDER BY startTime DESC LIMIT 1");
    *(void *)(a1 + 584) = v9;
    *(void *)(a1 + 592) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM MotionStateHistory WHERE ? <= startTime AND startTime <= ? ORDER BY startTime ASC");
    *(void *)(a1 + 600) = v10;
    *(void *)(a1 + 608) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM MotionStateHistory WHERE startTime >= ? and startTime < ? ORDER BY startTime ASC");
    *(void *)(a1 + 616) = v11;
    *(void *)(a1 + 624) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM MotionStateHistory WHERE startTime < ?  ORDER BY startTime DESC LIMIT 1");
    *(void *)(a1 + 632) = v12;
    *(_DWORD *)(a1 + 132) = sub_1004F02B4(a1);
  }
  else
  {
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_1022B7830);
    }
    char v13 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Device is locked and we are unable to open the database", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_1022B7830);
      }
      char v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionStateRecorderDb::prepareSQLStatements()", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
  }
}

void sub_1004F0DE0(uint64_t a1)
{
  if (sub_1005F93E4(*(void *)(a1 + 80), "MotionStateHistory"))
  {
    uint64_t v4 = "id";
    int v5 = 5;
    __int16 v6 = 0;
    char v7 = 0;
    char v8 = 0;
    sub_1005FEC4C(*(void *)(a1 + 80), "MotionStateHistory", (uint64_t)"id", (uint64_t)&v4);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022B7850);
  }
  uint64_t v2 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "MotionStateHistory table doesn't even exist", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022B7850);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionStateRecorderDb::alterTableIfNecessary()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
}

void sub_1004F1448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a28);
  if (v70) {
    (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
  }
  sub_101A129A8((uint64_t)&a70);
  _Unwind_Resume(a1);
}

uint64_t sub_1004F14F8(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    sub_100082068((void *)(a1 + 528), &v7);
    uint64_t v3 = *(void *)(a1 + 80);
    uint64_t v4 = (sqlite3_stmt *)sub_10014D19C(v7);
    sub_10001FEB0(v3, v4);
    uint64_t v5 = *(void *)(a1 + 80);
    if (*(uint64_t *)(v5 + 88) <= 0) {
      uint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v6 = *(void *)(v5 + 88);
    }
    sub_10003CC68(v5, v6);
    *(_DWORD *)(a1 + 132) = 0;
    uint64_t result = v7;
    uint64_t v7 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_1004F159C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004F15B8(uint64_t a1)
{
  return sub_1004F14F8(a1 - 72);
}

uint64_t sub_1004F15C0(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
    sub_100082068((void *)(a1 + 512), &v12);
    uint64_t v5 = (sqlite3_stmt *)sub_10014D19C(v12);
    if (sub_100055D58(v5, 1, *(double *)(a2 + 8)))
    {
      uint64_t v6 = *(void *)(a1 + 80);
      uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(v12);
      sub_10001FEB0(v6, v7);
      *(_DWORD *)(a1 + 132) = sub_1004F02B4(a1);
    }
    else
    {
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_1022B7830);
      }
      char v8 = qword_102419018;
      if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Failed to delete records", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419010 != -1) {
          dispatch_once(&qword_102419010, &stru_1022B7830);
        }
        uint64_t v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLMotionStateRecorderDb::deleteRecordsAfterInsertUL(const CLMotionCoprocessorInterface::MotionState &)", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
    }
    uint64_t v9 = *(void *)(a1 + 80);
    if (*(uint64_t *)(v9 + 88) <= 0) {
      uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v10 = *(void *)(v9 + 88);
    }
    sub_10003CC68(v9, v10);
    uint64_t result = v12;
    uint64_t v12 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_1004F1828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004F1870(uint64_t a1, double a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    sub_100082068((void *)(a1 + 560), &v10);
    uint64_t v5 = (sqlite3_stmt *)sub_10014D19C(v10);
    if (sub_100055D58(v5, 1, a2))
    {
      uint64_t v6 = *(void *)(a1 + 80);
      uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(v10);
      sub_10001FEB0(v6, v7);
    }
    else
    {
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_1022B7830);
      }
      char v8 = qword_102419018;
      if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Failed to shift records", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419010 != -1) {
          dispatch_once(&qword_102419010, &stru_1022B7830);
        }
        uint64_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLMotionStateRecorderDb::shiftRecordsByUL(CFTimeInterval)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
    }
    uint64_t result = v10;
    uint64_t v10 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_1004F1A84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004F1ACC(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    sub_100082068((void *)(a1 + 544), &v19);
    uint64_t v5 = (sqlite3_stmt *)sub_10014D19C(v19);
    if (sub_100055D58(v5, 1, *(double *)(a2 + 8)))
    {
      uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(v19);
      if (sub_100055D58(v6, 2, *(double *)a2))
      {
        uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(v19);
        if (sub_10014D1A4(v7, 3, *(_DWORD *)(a2 + 24)))
        {
          char v8 = (sqlite3_stmt *)sub_10014D19C(v19);
          if (sub_10014D1A4(v8, 4, *(unsigned __int8 *)(a2 + 28)))
          {
            uint64_t v9 = (sqlite3_stmt *)sub_10014D19C(v19);
            if (sub_10014D1A4(v9, 5, *(unsigned __int8 *)(a2 + 29)))
            {
              uint64_t v10 = (sqlite3_stmt *)sub_10014D19C(v19);
              if (sub_10014D1A4(v10, 6, *(unsigned __int8 *)(a2 + 30)))
              {
                uint64_t v11 = (sqlite3_stmt *)sub_10014D19C(v19);
                if (sub_10014D1A4(v11, 7, *(unsigned __int8 *)(a2 + 31)))
                {
                  uint64_t v12 = (sqlite3_stmt *)sub_10014D19C(v19);
                  if (sub_10014D1A4(v12, 8, *(unsigned __int8 *)(a2 + 32)))
                  {
                    char v13 = (sqlite3_stmt *)sub_10014D19C(v19);
                    if (sub_10014D1A4(v13, 9, *(unsigned __int8 *)(a2 + 33)))
                    {
                      char v14 = (sqlite3_stmt *)sub_10014D19C(v19);
                      if (sub_10014D1A4(v14, 10, *(unsigned __int8 *)(a2 + 35)))
                      {
                        char v15 = (sqlite3_stmt *)sub_10014D19C(v19);
                        if (sub_10014D1A4(v15, 11, *(unsigned __int8 *)(a2 + 60)))
                        {
                          char v16 = (sqlite3_stmt *)sub_10014D19C(v19);
                          if (sub_10014D1A4(v16, 12, *(unsigned __int8 *)(a2 + 62)))
                          {
                            uint64_t v17 = *(void *)(a1 + 80);
                            char v18 = (sqlite3_stmt *)sub_10014D19C(v19);
                            sub_10001FEB0(v17, v18);
                            ++*(_DWORD *)(a1 + 132);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    uint64_t result = v19;
    uint64_t v19 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_1004F1C84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1004F1CA0(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

uint64_t sub_1004F1CAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a2 + 24);
  int v4 = *(_DWORD *)(a3 + 24);
  if (v3 == v4
    && *(unsigned __int8 *)(a2 + 28) >= *(unsigned __int8 *)(a3 + 28)
    && *(unsigned __int8 *)(a2 + 60) == *(unsigned __int8 *)(a3 + 60))
  {
    return 1;
  }
  uint64_t result = 1;
  if (v4 != 2 && v4 != 512)
  {
    BOOL v6 = v3 == 4 && v4 == 12;
    if (!v6 && (v3 != 16 || v4 != 32))
    {
      BOOL v7 = (v4 & 0xFFFFEFFF) == 0x2000;
      return v3 == 4096 && v7;
    }
  }
  return result;
}

uint64_t sub_1004F1D30(uint64_t a1, uint64_t a2)
{
  if (!sub_100082064(a1 + 72)) {
    return 2;
  }
  sub_100082068((void *)(a1 + 576), &v13);
  uint64_t v4 = sub_1004F09A4(&v13, (uint64_t)v7);
  if (!v4)
  {
    *(_OWORD *)a2 = v10;
    *(_DWORD *)(a2 + 24) = v7[1];
    *(_DWORD *)(a2 + 28) = v7[2];
    *(_WORD *)(a2 + 32) = v8;
    *(unsigned char *)(a2 + 35) = v9;
    *(unsigned char *)(a2 + 60) = v11;
    *(unsigned char *)(a2 + 62) = v12;
    *(unsigned char *)(a2 + 104) = 0;
  }
  uint64_t v5 = v13;
  uint64_t v13 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return v4;
}

void sub_1004F1E00(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 24);
  *(void *)(v1 - 24) = 0;
  if (v3) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004F1E1C(uint64_t a1, char **a2)
{
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v3 = a1 + 112;
  uint64_t v5 = v3 - 40;
  v56[1] = v3;
  uint64_t v40 = v3;
  (*(void (**)(void))(v4 + 16))();
  __int16 v57 = 256;
  if (sub_100082064(v5))
  {
    sub_100082068((void *)(a1 + 480), v56);
    while (!sub_1004F09A4(v56, (uint64_t)v43))
    {
      uint64_t v7 = v52;
      uint64_t v6 = v53;
      int v8 = v44;
      char v9 = v45;
      char v10 = v46;
      char v11 = v47;
      char v12 = v48;
      char v13 = v49;
      char v14 = v50;
      char v15 = v51;
      char v16 = v54;
      char v17 = v55;
      unint64_t v18 = (unint64_t)a2[1];
      unint64_t v19 = (unint64_t)a2[2];
      if (v18 >= v19)
      {
        int v41 = v44;
        unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - (void)*a2) >> 5);
        unint64_t v22 = v21 + 1;
        if (v21 + 1 > 0x199999999999999) {
          sub_1001D7FD4();
        }
        unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - (void)*a2) >> 5);
        if (2 * v23 > v22) {
          unint64_t v22 = 2 * v23;
        }
        if (v23 >= 0xCCCCCCCCCCCCCCLL) {
          unint64_t v24 = 0x199999999999999;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24) {
          unint64_t v25 = (char *)sub_1004F46B0((uint64_t)(a2 + 2), v24);
        }
        else {
          unint64_t v25 = 0;
        }
        unint64_t v26 = &v25[160 * v21];
        *(void *)unint64_t v26 = v7;
        *((void *)v26 + 1) = v6;
        *((_DWORD *)v26 + 6) = v41;
        v26[28] = v9;
        v26[29] = v10;
        v26[30] = v11;
        v26[31] = v12;
        v26[32] = v13;
        v26[33] = v14;
        v26[35] = v15;
        v26[60] = v16;
        v26[62] = v17;
        v26[104] = 0;
        uint64_t v28 = *a2;
        unint64_t v27 = a2[1];
        float v29 = v26;
        if (v27 == *a2)
        {
          long long v37 = a2;
        }
        else
        {
          do
          {
            long long v30 = *((_OWORD *)v27 - 9);
            *((_OWORD *)v29 - 10) = *((_OWORD *)v27 - 10);
            *((_OWORD *)v29 - 9) = v30;
            long long v31 = *((_OWORD *)v27 - 8);
            long long v32 = *((_OWORD *)v27 - 7);
            long long v33 = *((_OWORD *)v27 - 5);
            *((_OWORD *)v29 - 6) = *((_OWORD *)v27 - 6);
            *((_OWORD *)v29 - 5) = v33;
            *((_OWORD *)v29 - 8) = v31;
            *((_OWORD *)v29 - 7) = v32;
            long long v34 = *((_OWORD *)v27 - 4);
            long long v35 = *((_OWORD *)v27 - 3);
            long long v36 = *((_OWORD *)v27 - 1);
            *((_OWORD *)v29 - 2) = *((_OWORD *)v27 - 2);
            *((_OWORD *)v29 - 1) = v36;
            *((_OWORD *)v29 - 4) = v34;
            *((_OWORD *)v29 - 3) = v35;
            v29 -= 160;
            v27 -= 160;
          }
          while (v27 != v28);
          long long v37 = a2;
          unint64_t v27 = *a2;
        }
        char v20 = v26 + 160;
        *long long v37 = v29;
        v37[1] = v26 + 160;
        v37[2] = &v25[160 * v24];
        if (v27) {
          operator delete(v27);
        }
      }
      else
      {
        *(void *)unint64_t v18 = v52;
        *(void *)(v18 + 8) = v6;
        *(_DWORD *)(v18 + 24) = v8;
        *(unsigned char *)(v18 + 28) = v9;
        *(unsigned char *)(v18 + 29) = v10;
        *(unsigned char *)(v18 + 30) = v11;
        *(unsigned char *)(v18 + 31) = v12;
        *(unsigned char *)(v18 + 32) = v13;
        *(unsigned char *)(v18 + 33) = v14;
        *(unsigned char *)(v18 + 35) = v15;
        *(unsigned char *)(v18 + 60) = v16;
        *(unsigned char *)(v18 + 62) = v17;
        char v20 = (char *)(v18 + 160);
        *(unsigned char *)(v18 + 104) = 0;
      }
      a2[1] = v20;
    }
    uint64_t v38 = v56[0];
    v56[0] = 0;
    if (v38) {
      (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v40 + 24))(v40);
}

void sub_1004F20E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004F2140(void *a1)
{
  uint64_t v3 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17[0]) < 0)
  {
    char v10 = v16[1];
    operator delete(v16[0]);
    if (v10)
    {
LABEL_3:
      if (sub_100082064(a1 + 9))
      {
        sub_10010F274((uint64_t)v16);
        uint64_t v4 = sub_100132EFC(v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0) {
          uint64_t v5 = __p;
        }
        else {
          uint64_t v5 = (void **)__p[0];
        }
        if ((v14 & 0x80u) == 0) {
          uint64_t v6 = v14;
        }
        else {
          uint64_t v6 = (uint64_t)__p[1];
        }
        uint64_t v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
        sub_100132EFC(v7, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v8 = a1[10];
        std::stringbuf::str();
        if ((v14 & 0x80u) == 0) {
          char v9 = __p;
        }
        else {
          char v9 = (void **)__p[0];
        }
        sub_10014D518(v8, (uint64_t)v9);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17[0]))
  {
    goto LABEL_3;
  }
  sub_101A62B00(v3);
  uint64_t v15 = 0;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  *(void **)((char *)v16
  v17[0] = v11;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return 2;
}

void sub_1004F25C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a34);
  _Unwind_Resume(a1);
}

uint64_t sub_1004F2644(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_1004F46F8(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022B7850);
  }
  uint64_t v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)char v13 = 0;
    *(_WORD *)&v13[4] = 2082;
    *(void *)&v13[6] = "";
    __int16 v14 = 2082;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022B7850);
    }
    uint64_t v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)char v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B7850);
      }
      char v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLMotionCoprocessorInterface::MotionState>::setDatabaseAccessible() [T = CLMotionCoprocessorInterface::MotionState, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_1004F2DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_1004F2E08(uint64_t a1, uint64_t a2, char a3)
{
  v36[0] = (id)os_transaction_create();
  v36[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, a1 + 224, a2);
    return sub_1000E1098(v36);
  }
  if ((a3 & 1) == 0) {
    sub_10002B640(*(void *)(a1 + 80));
  }
  int v6 = (*(uint64_t (**)(uint64_t, char *))(*(void *)a1 + 104))(a1, v34);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B7850);
      }
      __int16 v14 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022B7850);
        }
        LOWORD(v37) = 0;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLMotionCoprocessorInterface::MotionState>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMotionCoprocessorInterface::MotionState, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      goto LABEL_43;
    }
    double v7 = *(double *)(a2 + 8);
    double v8 = v35;
    double v9 = v7 - v35;
    if (v7 - v35 < 0.0) {
      double v9 = -(v7 - v35);
    }
    if (v9 > 604800.0)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B7850);
      }
      char v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a2 + 8);
        *(_DWORD *)uint64_t buf = 134349312;
        double v42 = v35;
        __int16 v43 = 2050;
        uint64_t v44 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022B7850);
        }
        uint64_t v28 = *(void *)(a2 + 8);
        int v37 = 134349312;
        double v38 = v35;
        __int16 v39 = 2050;
        uint64_t v40 = v28;
        float v29 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLMotionCoprocessorInterface::MotionState>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMotionCoprocessorInterface::MotionState, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v29);
        if (v29 != (char *)buf) {
          free(v29);
        }
      }
      CLWriteStackshot();
      double v7 = *(double *)(a2 + 8);
      double v8 = v35;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022B7850);
        }
        char v12 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          double v13 = *(double *)(a2 + 8);
          *(_DWORD *)uint64_t buf = 134217984;
          double v42 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022B7850);
          }
          double v30 = *(double *)(a2 + 8);
          int v37 = 134217984;
          double v38 = v30;
          long long v31 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLMotionCoprocessorInterface::MotionState>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMotionCoprocessorInterface::MotionState, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v31);
          if (v31 != (char *)buf) {
            free(v31);
          }
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      double v16 = v7 - v8;
      double v17 = *(float *)(a1 + 136);
      if (qword_102418FD0 != -1)
      {
        double v33 = *(float *)(a1 + 136);
        dispatch_once(&qword_102418FD0, &stru_1022B7850);
        double v17 = v33;
      }
      double v18 = v16 - v17;
      unint64_t v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 134217984;
        double v42 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022B7850);
        }
        int v37 = 134217984;
        double v38 = v18;
        long long v32 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLMotionCoprocessorInterface::MotionState>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMotionCoprocessorInterface::MotionState, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v32);
        if (v32 != (char *)buf) {
          free(v32);
        }
      }
      (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v18);
    }
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 144))(a1, v34, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  long long v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v20;
  long long v21 = *(_OWORD *)(a2 + 32);
  long long v22 = *(_OWORD *)(a2 + 48);
  long long v23 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 304) = v23;
  *(_OWORD *)(a1 + 256) = v21;
  *(_OWORD *)(a1 + 272) = v22;
  long long v24 = *(_OWORD *)(a2 + 96);
  long long v25 = *(_OWORD *)(a2 + 112);
  long long v26 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 368) = v26;
  *(_OWORD *)(a1 + 320) = v24;
  *(_OWORD *)(a1 + 336) = v25;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_100028FB4(*(void *)(a1 + 80));
  }
  return sub_1000E1098(v36);
}

void sub_1004F3634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,id a33)
{
}

uint64_t sub_1004F3660(uint64_t a1)
{
  return sub_1004F2644(a1 - 72);
}

void sub_1004F3668(id a1)
{
  qword_102419018 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Activity");
}

void sub_1004F3698(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1004F36C8(void *a1, void *a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101A62C70(v4);
    sub_1001D7FD4();
  }
  char v12 = v15[1];
  operator delete(v15[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    a2[1] = *a2;
    sub_10010F274((uint64_t)v15);
    int v6 = sub_100132EFC(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = v14;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_1004F3B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  }
  sub_101A129A8((uint64_t)&a34);
  _Unwind_Resume(a1);
}

__n128 sub_1004F3B88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v3 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v3;
  long long v4 = *(_OWORD *)(a3 + 32);
  long long v5 = *(_OWORD *)(a3 + 48);
  long long v6 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 80) = v6;
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)(a2 + 48) = v5;
  __n128 result = *(__n128 *)(a3 + 96);
  long long v8 = *(_OWORD *)(a3 + 112);
  long long v9 = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(a2 + 144) = v9;
  *(__n128 *)(a2 + 96) = result;
  *(_OWORD *)(a2 + 112) = v8;
  return result;
}

uint64_t sub_1004F3BB4(void *a1, uint64_t a2)
{
  long long v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101A62DE0(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  char v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    long long v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    long long v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_1004F3F28(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A62F50(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    long long v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      long long v5 = __p;
    }
    else {
      long long v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    double v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      long long v9 = __p;
    }
    else {
      long long v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_1004F4254(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A630C0(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    long long v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      long long v4 = __p;
    }
    else {
      long long v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

uint64_t sub_1004F4578(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  long long v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      long long v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 12;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 25;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000D7EB4((uint64_t)a1);
}

uint64_t sub_1004F4620(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

void *sub_1004F46B0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x19999999999999ALL) {
    sub_1001D7FA0();
  }
  return operator new(160 * a2);
}

void sub_1004F46F8(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_1004F4778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1004F4794(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_1004F47C4()
{
  qword_10247AEC0 = (uint64_t)"id";
  dword_10247AEC8 = 1;
  word_10247AECC = 1;
  byte_10247AED0 = 0;
  byte_10247AEE8 = 0;
  qword_10247AEF0 = (uint64_t)"startTime";
  dword_10247AEF8 = 2;
  word_10247AEFC = 0;
  byte_10247AF00 = 0;
  byte_10247AF18 = 0;
  qword_10247AF20 = (uint64_t)"timestamp";
  dword_10247AF28 = 2;
  word_10247AF2C = 0;
  byte_10247AF30 = 0;
  byte_10247AF48 = 0;
  qword_10247AF50 = (uint64_t)"type";
  dword_10247AF58 = 1;
  word_10247AF5C = 0;
  byte_10247AF60 = 0;
  byte_10247AF78 = 0;
  qword_10247AF80 = (uint64_t)"confidence";
  dword_10247AF88 = 1;
  word_10247AF8C = 0;
  byte_10247AF90 = 0;
  byte_10247AFA8 = 0;
  qword_10247AFB0 = (uint64_t)"mounted";
  dword_10247AFB8 = 1;
  word_10247AFBC = 0;
  byte_10247AFC0 = 0;
  byte_10247AFD8 = 0;
  qword_10247AFE0 = (uint64_t)"mountedConfidence";
  dword_10247AFE8 = 1;
  word_10247AFEC = 0;
  byte_10247AFF0 = 0;
  byte_10247B008 = 0;
  qword_10247B010 = (uint64_t)"turn";
  dword_10247B018 = 1;
  word_10247B01C = 0;
  byte_10247B020 = 0;
  byte_10247B038 = 0;
  qword_10247B040 = (uint64_t)"isVehicular";
  dword_10247B048 = 1;
  word_10247B04C = 0;
  byte_10247B050 = 0;
  byte_10247B068 = 0;
  qword_10247B070 = (uint64_t)"isMoving";
  dword_10247B078 = 1;
  word_10247B07C = 0;
  byte_10247B080 = 0;
  byte_10247B098 = 0;
  qword_10247B0A0 = (uint64_t)"vehicleExitState";
  dword_10247B0A8 = 1;
  word_10247B0AC = 0;
  byte_10247B0B0 = 0;
  byte_10247B0C8 = 0;
  qword_10247B0D0 = (uint64_t)"vehicularFlagsData";
  dword_10247B0D8 = 1;
  word_10247B0DC = 0;
  byte_10247B0E0 = 0;
  byte_10247B0F8 = 0;
  qword_10247B100 = (uint64_t)"vehicleType";
  dword_10247B108 = 1;
  word_10247B10C = 0;
  byte_10247B110 = 0;
  byte_10247B128 = 0;
  qword_10247B130 = 0;
  dword_10247B138 = 5;
  word_10247B13C = 0;
  byte_10247B140 = 0;
  byte_10247B158 = 0;
  qword_10247B160 = (uint64_t)"startTime";
  *(void *)algn_10247B168 = 0;
}

void sub_1004F4968(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  __asm { FMOV            V0.2D, #10.0 }
  *(_OWORD *)(a1 + 8) = _Q0;
  *(_OWORD *)(a1 + 24) = xmmword_101D220E0;
  *(void *)(a1 + 40) = 0x4024000000000000;
  buf[0] = 0;
  sub_10006ACBC(&v29, "EnableMultiSportSimulation", buf, 0);
  int v6 = v30;
  *(unsigned char *)a1 = v30;
  if (v6)
  {
    *(void *)uint64_t buf = 0;
    sub_101A1F180(v27, "MultiSportSimulatedPauseTime", buf, 0);
    if (v27[0])
    {
      double v7 = v28;
      _NF = v28 < 10.0;
      if (v28 < 10.0) {
        double v7 = 10.0;
      }
      *(double *)(a1 + 8) = v7;
      if (_NF)
      {
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_1022B79C8);
        }
        long long v9 = qword_1024191C8;
        if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t buf = 134218240;
          *(double *)&uint8_t buf[4] = v28;
          __int16 v44 = 2048;
          uint64_t v45 = 0x4024000000000000;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "MultiSportSim, failed to set pause time %f, min time is %f", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_1022B79C8);
          }
          int v41 = 134218240;
          *(double *)double v42 = v28;
          *(_WORD *)&v42[8] = 2048;
          *(void *)&v42[10] = 0x4024000000000000;
          long long v22 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "static CLWorkoutSeriesModelSimulator::SimulationInfo CLWorkoutSeriesModelSimulator::SimulationInfo::fromDefaultsWrites()", "%s\n", v22);
          if (v22 != buf) {
            free(v22);
          }
        }
      }
    }
    *(void *)uint64_t buf = 0;
    sub_101A1F180((unsigned __int8 *)&v41, "MultiSportSimulatedTransitionTime", buf, 0);
    if ((_BYTE)v41)
    {
      double v10 = v28;
      BOOL v11 = v28 < 10.0;
      if (v28 < 10.0) {
        double v10 = 10.0;
      }
      *(double *)(a1 + 16) = v10;
      if (v11)
      {
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_1022B79C8);
        }
        uint64_t v12 = qword_1024191C8;
        if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t buf = 134218240;
          *(void *)&uint8_t buf[4] = *(void *)&v42[4];
          __int16 v44 = 2048;
          uint64_t v45 = 0x4024000000000000;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "MultiSportSim, failed to set transition time %f, min time is %f", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_1022B79C8);
          }
          int v39 = 134218240;
          *(void *)uint64_t v40 = *(void *)&v42[4];
          *(_WORD *)&v40[8] = 2048;
          *(void *)&v40[10] = 0x4024000000000000;
          long long v23 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "static CLWorkoutSeriesModelSimulator::SimulationInfo CLWorkoutSeriesModelSimulator::SimulationInfo::fromDefaultsWrites()", "%s\n", v23);
          if (v23 != buf) {
            free(v23);
          }
        }
      }
    }
    *(void *)uint64_t buf = 0;
    sub_101A1F180((unsigned __int8 *)&v39, "MultiSportSimulatedLegTime", buf, 0);
    if ((_BYTE)v39)
    {
      double v13 = *(double *)&v40[4];
      BOOL v14 = *(double *)&v40[4] < 10.0;
      if (*(double *)&v40[4] < 10.0) {
        double v13 = 20.0;
      }
      *(double *)(a1 + 24) = v13;
      if (v14)
      {
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_1022B79C8);
        }
        uint64_t v15 = qword_1024191C8;
        if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t buf = 134218240;
          *(void *)&uint8_t buf[4] = *(void *)&v40[4];
          __int16 v44 = 2048;
          uint64_t v45 = 0x4024000000000000;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "MultiSportSim, failed to set leg time %f, min time is %f", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_1022B79C8);
          }
          int v37 = 134218240;
          *(void *)double v38 = *(void *)&v40[4];
          *(_WORD *)&v38[8] = 2048;
          *(void *)&v38[10] = 0x4024000000000000;
          long long v24 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "static CLWorkoutSeriesModelSimulator::SimulationInfo CLWorkoutSeriesModelSimulator::SimulationInfo::fromDefaultsWrites()", "%s\n", v24);
          if (v24 != buf) {
            free(v24);
          }
        }
      }
    }
    *(void *)uint64_t buf = 0;
    sub_101A1F180((unsigned __int8 *)&v37, "MultiSportSimulatedSwimmingPrewarm", buf, 0);
    if ((_BYTE)v37)
    {
      double v16 = *(double *)&v38[4];
      BOOL v17 = *(double *)&v38[4] <= 0.0;
      if (*(double *)&v38[4] >= 10.0) {
        BOOL v17 = 1;
      }
      if (!v17) {
        double v16 = 15.0;
      }
      *(double *)(a1 + 32) = v16;
      if (!v17)
      {
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_1022B79C8);
        }
        double v18 = qword_1024191C8;
        if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t buf = 134218240;
          *(void *)&uint8_t buf[4] = *(void *)&v38[4];
          __int16 v44 = 2048;
          uint64_t v45 = 0x4024000000000000;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "MultiSportSim, failed to swim prewarm time %f, value must be <= 0 (disable prewarm) or > %f", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_1022B79C8);
          }
          int v35 = 134218240;
          *(void *)long long v36 = *(void *)&v38[4];
          *(_WORD *)&v36[8] = 2048;
          *(void *)&v36[10] = 0x4024000000000000;
          long long v25 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "static CLWorkoutSeriesModelSimulator::SimulationInfo CLWorkoutSeriesModelSimulator::SimulationInfo::fromDefaultsWrites()", "%s\n", v25);
          if (v25 != buf) {
            free(v25);
          }
        }
      }
    }
    *(void *)uint64_t buf = 0;
    sub_101A1F180((unsigned __int8 *)&v35, "MultiSportSimulatedOutdoorCyclingPrewarm", buf, 0);
    if ((_BYTE)v35)
    {
      double v19 = *(double *)&v36[4];
      BOOL v20 = *(double *)&v36[4] <= 0.0;
      if (*(double *)&v36[4] >= 10.0) {
        BOOL v20 = 1;
      }
      if (!v20) {
        double v19 = 10.0;
      }
      *(double *)(a1 + 40) = v19;
      if (!v20)
      {
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_1022B79C8);
        }
        long long v21 = qword_1024191C8;
        if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t buf = 134218240;
          *(void *)&uint8_t buf[4] = *(void *)&v36[4];
          __int16 v44 = 2048;
          uint64_t v45 = 0x4024000000000000;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "MultiSportSim, failed to swim prewarm time %f, value must be <= 0 (disable prewarm) or > %f", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_1022B79C8);
          }
          int v31 = 134218240;
          uint64_t v32 = *(void *)&v36[4];
          __int16 v33 = 2048;
          uint64_t v34 = 0x4024000000000000;
          long long v26 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "static CLWorkoutSeriesModelSimulator::SimulationInfo CLWorkoutSeriesModelSimulator::SimulationInfo::fromDefaultsWrites()", "%s\n", v26);
          if (v26 != buf) {
            free(v26);
          }
        }
      }
    }
  }
}

uint64_t sub_1004F529C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v10 = sub_100EBD8FC(a1, a2, a3, a4, a5);
  *(void *)uint64_t v10 = off_1022B7998;
  *(double *)(v10 + 496) = a7;
  *(_OWORD *)(v10 + 504) = 0u;
  *(_OWORD *)(v10 + 520) = 0u;
  *(_OWORD *)(v10 + 536) = 0u;
  sub_1004F5330(v10, a6);
  return a1;
}

void sub_1004F5314(_Unwind_Exception *a1)
{
  sub_1000D816C(v2);
  sub_1004F59A0(v1);
  _Unwind_Resume(a1);
}

void sub_1004F5330(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void ***)(a1 + 512);
  uint64_t v5 = *(void *)(a1 + 520);
  *(void *)(a1 + 544) = 0;
  unint64_t v6 = v5 - (void)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      unint64_t v4 = (void **)(*(void *)(a1 + 512) + 8);
      *(void *)(a1 + 512) = v4;
      unint64_t v6 = *(void *)(a1 + 520) - (void)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    uint64_t v7 = 85;
  }
  else
  {
    if (v6 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v7 = 170;
  }
  *(void *)(a1 + 536) = v7;
LABEL_8:
  double v8 = *(double *)(a1 + 496);
  char v39 = 1;
  uint64_t v9 = *(void *)(a1 + 56);
  if (*(void *)(a1 + 64) == v9
    || (unint64_t v10 = *(void *)(a1 + 80),
        unint64_t v11 = *(void *)(v9 + 8 * (v10 / 0x18)) + 168 * (v10 % 0x18),
        unint64_t v12 = *(void *)(v9 + 8 * ((*(void *)(a1 + 88) + v10) / 0x18)) + 168 * ((*(void *)(a1 + 88) + v10) % 0x18),
        v11 == v12))
  {
LABEL_24:
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022B79C8);
    }
    double v19 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = *(void *)(a2 + 8);
      uint64_t v21 = *(void *)(a2 + 16);
      uint64_t v22 = *(void *)(a2 + 24);
      uint64_t v23 = *(void *)(a2 + 32);
      uint64_t v24 = *(void *)(a2 + 40);
      *(_DWORD *)uint64_t buf = 134219008;
      *(void *)&uint8_t buf[4] = v20;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v21;
      *(_WORD *)&unsigned char buf[22] = 2048;
      uint64_t v51 = v22;
      __int16 v52 = 2048;
      uint64_t v53 = v23;
      __int16 v54 = 2048;
      uint64_t v55 = v24;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "MultiSportSimParams,pauseTime,%f,transistionTime,%f,legTime,%f,swimPrewarmTime,%f,outdoorCyclingPrewarmTime,%f", buf, 0x34u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022B79C8);
      }
      uint64_t v31 = *(void *)(a2 + 8);
      uint64_t v32 = *(void *)(a2 + 16);
      uint64_t v33 = *(void *)(a2 + 24);
      uint64_t v34 = *(void *)(a2 + 32);
      uint64_t v35 = *(void *)(a2 + 40);
      int v40 = 134219008;
      uint64_t v41 = v31;
      __int16 v42 = 2048;
      uint64_t v43 = v32;
      __int16 v44 = 2048;
      uint64_t v45 = v33;
      __int16 v46 = 2048;
      uint64_t v47 = v34;
      __int16 v48 = 2048;
      uint64_t v49 = v35;
      long long v36 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSeriesModelSimulator::buildTestSequence(const SimulationInfo &)", "%s\n", v36);
      if (v36 != buf) {
        free(v36);
      }
    }
    return;
  }
  double v13 = v8 + 5.0;
  BOOL v14 = (void *)(v9 + 8 * (v10 / 0x18));
  while (1)
  {
    uint64_t v15 = *(void *)(v11 + 48);
    if (v15 > 16) {
      break;
    }
    switch(v15)
    {
      case 2:
        goto LABEL_17;
      case 4:
        double v16 = operator new(0x10uLL);
        *(void *)&uint8_t buf[8] = v16 + 2;
        *(void *)&uint8_t buf[16] = v16 + 2;
        void *v16 = 19;
        v16[1] = 0x500000004;
        *(void *)uint64_t buf = v16;
        double v17 = sub_1004F5A14(a1, *(void *)(v11 + 48), (double *)a2, (uint64_t **)buf, &v39, v13, *(double *)(a2 + 40));
        break;
      case 5:
        double v16 = operator new(0x20uLL);
        *(void *)&uint8_t buf[8] = v16 + 4;
        *(void *)&uint8_t buf[16] = v16 + 4;
        *(_OWORD *)double v16 = xmmword_101D22138;
        *((_OWORD *)v16 + 1) = unk_101D22148;
        *(void *)uint64_t buf = v16;
        double v17 = sub_1004F5A14(a1, *(void *)(v11 + 48), (double *)a2, (uint64_t **)buf, &v39, v13, 0.0);
        break;
      default:
        goto LABEL_30;
    }
LABEL_21:
    double v13 = v17;
    operator delete(v16);
    v11 += 168;
    if (v11 - *v14 == 4032)
    {
      unint64_t v18 = v14[1];
      ++v14;
      unint64_t v11 = v18;
    }
    if (v11 == v12) {
      goto LABEL_24;
    }
  }
  if ((unint64_t)(v15 - 17) < 2)
  {
LABEL_17:
    double v16 = operator new(0x20uLL);
    *(void *)&uint8_t buf[8] = v16 + 4;
    *(void *)&uint8_t buf[16] = v16 + 4;
    *(_OWORD *)double v16 = xmmword_101D22118;
    *((_OWORD *)v16 + 1) = unk_101D22128;
    *(void *)uint64_t buf = v16;
    double v17 = sub_1004F5A14(a1, *(void *)(v11 + 48), (double *)a2, (uint64_t **)buf, &v39, v13, 0.0);
    goto LABEL_21;
  }
  if (v15 == 19)
  {
    double v16 = operator new(0x10uLL);
    *(void *)&uint8_t buf[8] = v16 + 2;
    *(void *)&uint8_t buf[16] = v16 + 2;
    void *v16 = 4;
    v16[1] = &_mh_execute_header;
    *(void *)uint64_t buf = v16;
    double v17 = sub_1004F5A14(a1, *(void *)(v11 + 48), (double *)a2, (uint64_t **)buf, &v39, v13, *(double *)(a2 + 32));
    goto LABEL_21;
  }
LABEL_30:
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022B79C8);
  }
  long long v25 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_FAULT))
  {
    uint64_t v26 = *(void *)(v11 + 48);
    *(_DWORD *)uint64_t buf = 134217984;
    *(void *)&uint8_t buf[4] = v26;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "MultiSportSim,Unsported WorkoutType: %ld! nothing will be simulated", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022B79C8);
    }
    uint64_t v37 = *(void *)(v11 + 48);
    int v40 = 134217984;
    uint64_t v41 = v37;
    double v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLWorkoutSeriesModelSimulator::buildTestSequence(const SimulationInfo &)", "%s\n", v38);
    if (v38 != buf) {
      free(v38);
    }
  }
  unint64_t v27 = *(void ***)(a1 + 512);
  uint64_t v28 = *(void *)(a1 + 520);
  *(void *)(a1 + 544) = 0;
  unint64_t v29 = v28 - (void)v27;
  if (v29 >= 0x11)
  {
    do
    {
      operator delete(*v27);
      unint64_t v27 = (void **)(*(void *)(a1 + 512) + 8);
      *(void *)(a1 + 512) = v27;
      unint64_t v29 = *(void *)(a1 + 520) - (void)v27;
    }
    while (v29 > 0x10);
  }
  if (v29 >> 3 == 1)
  {
    uint64_t v30 = 85;
LABEL_41:
    *(void *)(a1 + 536) = v30;
  }
  else if (v29 >> 3 == 2)
  {
    uint64_t v30 = 170;
    goto LABEL_41;
  }
}

void sub_1004F5978(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1004F59A0(uint64_t a1)
{
  *(void *)a1 = off_102300AD8;
  long long v3 = (void **)(a1 + 112);
  sub_1004F68A0(&v3);
  sub_1004F6960((void *)(a1 + 48));
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

double sub_1004F5A14(uint64_t a1, unint64_t a2, double *a3, uint64_t **a4, unsigned char *a5, double a6, double a7)
{
  double v13 = a6;
  long long __p = 0;
  uint64_t v101 = 0;
  __int16 v104 = 0;
  if (a7 > 0.0)
  {
    double v16 = a6 + a7;
    double v17 = a3[3];
    double v15 = v13 + a7 + v17 * 0.5 + a3[1];
    double v98 = v15 + a7;
    double v99 = v13 + a7 + v17 * 0.5;
    double v97 = v15 + a7 + v17 * 0.5;
    double v96 = v97 + a3[2];
    if (*a5) {
      goto LABEL_5;
    }
    uint64_t v21 = (__n128 *)sub_1000DA5D8((uint64_t)&v104, 1uLL);
    unint64_t v19 = (unint64_t)&v21->n128_u64[3 * v22];
    v21->n128_f64[0] = v13;
    v21->n128_u64[1] = a2;
    v21[1].n128_u64[0] = 0x200000000;
    uint64_t v20 = (__n128 *)((char *)v21 + 24);
    long long __p = v21;
    __int16 v104 = (char *)v19;
    uint64_t v101 = (__n128 *)((char *)v21 + 24);
    if ((unint64_t)&v21[1].n128_u64[1] < v19)
    {
      v21[1].n128_f64[1] = v16;
      v21[2].n128_u64[0] = a2;
      v21[2].n128_u64[1] = 2;
      unint64_t v18 = v21 + 3;
      goto LABEL_25;
    }
    double v13 = v13 + a7;
  }
  else
  {
    double v14 = a3[3];
    double v98 = v13 + v14 * 0.5 + a3[1];
    double v99 = v13 + v14 * 0.5;
    double v97 = v98 + v14 * 0.5;
    double v96 = v97 + a3[2];
    double v15 = 0.0;
    if (*a5)
    {
      double v16 = v13;
LABEL_5:
      unint64_t v18 = 0;
      unint64_t v19 = 0;
      *a5 = 0;
      goto LABEL_27;
    }
    uint64_t v20 = 0;
    unint64_t v19 = 0;
  }
  uint64_t v23 = __p;
  unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - (char *)__p) >> 3);
  unint64_t v25 = v24 + 1;
  if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1001D7FD4();
  }
  unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - (void)__p) >> 3);
  if (2 * v26 > v25) {
    unint64_t v25 = 2 * v26;
  }
  if (v26 >= 0x555555555555555) {
    unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v27 = v25;
  }
  if (v27)
  {
    uint64_t v28 = (char *)sub_1000DA5D8((uint64_t)&v104, v27);
    uint64_t v23 = __p;
    uint64_t v20 = v101;
  }
  else
  {
    uint64_t v28 = 0;
  }
  unint64_t v29 = (__n128 *)&v28[24 * v24];
  unint64_t v19 = (unint64_t)&v28[24 * v27];
  v29->n128_f64[0] = v13;
  v29->n128_u64[1] = a2;
  v29[1].n128_u64[0] = 2;
  unint64_t v18 = (__n128 *)((char *)v29 + 24);
  if (v20 != v23)
  {
    do
    {
      __n128 v30 = *(__n128 *)((char *)v20 - 24);
      v29[-1].n128_u64[1] = v20[-1].n128_u64[1];
      *(__n128 *)((char *)v29 - 24) = v30;
      unint64_t v29 = (__n128 *)((char *)v29 - 24);
      uint64_t v20 = (__n128 *)((char *)v20 - 24);
    }
    while (v20 != v23);
    uint64_t v23 = __p;
  }
  long long __p = v29;
  __int16 v104 = (char *)v19;
  if (v23)
  {
    operator delete(v23);
    unint64_t v19 = (unint64_t)v104;
  }
  double v16 = v13;
LABEL_25:
  uint64_t v101 = v18;
  *a5 = 0;
  if ((unint64_t)v18 < v19)
  {
    v18->n128_f64[0] = v99;
    v18->n128_u64[1] = a2;
    v18[1].n128_u64[0] = 1;
    uint64_t v31 = &v18[1].n128_f64[1];
    goto LABEL_41;
  }
LABEL_27:
  uint64_t v32 = __p;
  unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)__p) >> 3);
  unint64_t v34 = v33 + 1;
  if (v33 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1001D7FD4();
  }
  unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - (void)__p) >> 3);
  if (2 * v35 > v34) {
    unint64_t v34 = 2 * v35;
  }
  if (v35 >= 0x555555555555555) {
    unint64_t v36 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v36 = v34;
  }
  if (v36)
  {
    uint64_t v37 = (char *)sub_1000DA5D8((uint64_t)&v104, v36);
    uint64_t v32 = __p;
    unint64_t v18 = v101;
  }
  else
  {
    uint64_t v37 = 0;
  }
  double v38 = (__n128 *)&v37[24 * v33];
  unint64_t v19 = (unint64_t)&v37[24 * v36];
  v38->n128_f64[0] = v99;
  v38->n128_u64[1] = a2;
  v38[1].n128_u64[0] = 1;
  uint64_t v31 = &v38[1].n128_f64[1];
  if (v18 != v32)
  {
    do
    {
      __n128 v39 = *(__n128 *)((char *)v18 - 24);
      v38[-1].n128_u64[1] = v18[-1].n128_u64[1];
      *(__n128 *)((char *)v38 - 24) = v39;
      double v38 = (__n128 *)((char *)v38 - 24);
      unint64_t v18 = (__n128 *)((char *)v18 - 24);
    }
    while (v18 != v32);
    uint64_t v32 = __p;
  }
  long long __p = v38;
  __int16 v104 = (char *)v19;
  if (v32)
  {
    operator delete(v32);
    unint64_t v19 = (unint64_t)v104;
  }
LABEL_41:
  __int16 v102 = v31;
  if (a7 > 0.0)
  {
    if ((unint64_t)v31 >= v19)
    {
      uint64_t v41 = __p;
      unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)__p) >> 3) + 1;
      if (v42 > 0xAAAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - (void)__p) >> 3);
      if (2 * v43 > v42) {
        unint64_t v42 = 2 * v43;
      }
      if (v43 >= 0x555555555555555) {
        unint64_t v44 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v44 = v42;
      }
      if (v44)
      {
        uint64_t v45 = (char *)sub_1000DA5D8((uint64_t)&v104, v44);
        uint64_t v41 = __p;
      }
      else
      {
        uint64_t v45 = 0;
      }
      __int16 v46 = (__n128 *)&v45[8 * (((char *)v31 - (char *)__p) >> 3)];
      unint64_t v19 = (unint64_t)&v45[24 * v44];
      v46->n128_f64[0] = v15;
      v46->n128_u64[1] = a2;
      v46[1].n128_u64[0] = 0x200000000;
      int v40 = &v46[1].n128_f64[1];
      if (v31 != (double *)v41)
      {
        do
        {
          __n128 v47 = *(__n128 *)(v31 - 3);
          v46[-1].n128_f64[1] = *(v31 - 1);
          *(__n128 *)((char *)v46 - 24) = v47;
          __int16 v46 = (__n128 *)((char *)v46 - 24);
          v31 -= 3;
        }
        while (v31 != (double *)v41);
        uint64_t v41 = __p;
      }
      long long __p = v46;
      __int16 v104 = (char *)v19;
      if (v41)
      {
        operator delete(v41);
        unint64_t v19 = (unint64_t)v104;
      }
    }
    else
    {
      *uint64_t v31 = v15;
      *((void *)v31 + 1) = a2;
      *((void *)v31 + 2) = 0x200000000;
      int v40 = v31 + 3;
    }
    __int16 v102 = v40;
    uint64_t v31 = v40;
  }
  if ((unint64_t)v31 >= v19)
  {
    uint64_t v49 = __p;
    unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)__p) >> 3);
    unint64_t v51 = v50 + 1;
    if (v50 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_1001D7FD4();
    }
    unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - (void)__p) >> 3);
    if (2 * v52 > v51) {
      unint64_t v51 = 2 * v52;
    }
    if (v52 >= 0x555555555555555) {
      unint64_t v53 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v53 = v51;
    }
    if (v53)
    {
      __int16 v54 = (char *)sub_1000DA5D8((uint64_t)&v104, v53);
      uint64_t v49 = __p;
      uint64_t v31 = v102;
    }
    else
    {
      __int16 v54 = 0;
    }
    uint64_t v55 = (__n128 *)&v54[24 * v50];
    unint64_t v19 = (unint64_t)&v54[24 * v53];
    v55->n128_f64[0] = v98;
    v55->n128_u64[1] = a2;
    v55[1].n128_u64[0] = 2;
    __int16 v48 = &v55[1].n128_f64[1];
    if (v31 != (double *)v49)
    {
      do
      {
        __n128 v56 = *(__n128 *)(v31 - 3);
        v55[-1].n128_f64[1] = *(v31 - 1);
        *(__n128 *)((char *)v55 - 24) = v56;
        uint64_t v55 = (__n128 *)((char *)v55 - 24);
        v31 -= 3;
      }
      while (v31 != (double *)v49);
      uint64_t v49 = __p;
    }
    long long __p = v55;
    __int16 v104 = (char *)v19;
    if (v49)
    {
      operator delete(v49);
      unint64_t v19 = (unint64_t)v104;
    }
  }
  else
  {
    *uint64_t v31 = v98;
    *((void *)v31 + 1) = a2;
    *((void *)v31 + 2) = 2;
    __int16 v48 = v31 + 3;
  }
  if ((unint64_t)v48 >= v19)
  {
    unint64_t v58 = __p;
    unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * (((char *)v48 - (char *)__p) >> 3) + 1;
    if (v59 > 0xAAAAAAAAAAAAAAALL) {
      sub_1001D7FD4();
    }
    unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - (void)__p) >> 3);
    if (2 * v60 > v59) {
      unint64_t v59 = 2 * v60;
    }
    if (v60 >= 0x555555555555555) {
      unint64_t v61 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v61 = v59;
    }
    if (v61)
    {
      __int16 v62 = (char *)sub_1000DA5D8((uint64_t)&v104, v61);
      unint64_t v58 = __p;
    }
    else
    {
      __int16 v62 = 0;
    }
    uint64_t v63 = (__n128 *)&v62[8 * (((char *)v48 - (char *)__p) >> 3)];
    long long v64 = &v62[24 * v61];
    v63->n128_f64[0] = v97;
    v63->n128_u64[1] = a2;
    v63[1].n128_u64[0] = 1;
    unint64_t v57 = (unint64_t)&v63[1].n128_u64[1];
    if (v48 != (double *)v58)
    {
      do
      {
        __n128 v65 = *(__n128 *)(v48 - 3);
        v63[-1].n128_f64[1] = *(v48 - 1);
        *(__n128 *)((char *)v63 - 24) = v65;
        uint64_t v63 = (__n128 *)((char *)v63 - 24);
        v48 -= 3;
      }
      while (v48 != (double *)v58);
      unint64_t v58 = __p;
    }
    long long __p = v63;
    __int16 v104 = v64;
    if (v58) {
      operator delete(v58);
    }
  }
  else
  {
    double *v48 = v97;
    *((void *)v48 + 1) = a2;
    *((void *)v48 + 2) = 1;
    unint64_t v57 = (unint64_t)(v48 + 3);
  }
  uint64_t v103 = (__n128 *)v57;
  long long v67 = *a4;
  for (uint64_t i = a4[1]; v67 != i; v67 += 2)
  {
    uint64_t v68 = *v67;
    double v69 = v16;
    double v70 = 2.56;
    switch(*((_DWORD *)v67 + 2))
    {
      case 0:
        goto LABEL_102;
      case 1:
        double v69 = v99;
        goto LABEL_99;
      case 2:
        double v69 = v99;
        goto LABEL_101;
      case 3:
        double v69 = v98;
        goto LABEL_99;
      case 4:
        double v69 = v98;
        goto LABEL_101;
      case 5:
        double v69 = v97;
        goto LABEL_99;
      case 6:
        double v69 = v97;
LABEL_101:
        double v70 = 2.56;
        goto LABEL_102;
      case 7:
        double v69 = v96;
LABEL_99:
        double v70 = -2.56;
LABEL_102:
        double v8 = v69 + v70;
        break;
      default:
        break;
    }
    double v71 = v16;
    double v72 = 2.56;
    switch(*((_DWORD *)v67 + 3))
    {
      case 0:
        goto LABEL_113;
      case 1:
        double v71 = v99;
        goto LABEL_110;
      case 2:
        double v71 = v99;
        goto LABEL_112;
      case 3:
        double v71 = v98;
        goto LABEL_110;
      case 4:
        double v71 = v98;
        goto LABEL_112;
      case 5:
        double v71 = v97;
        goto LABEL_110;
      case 6:
        double v71 = v97;
LABEL_112:
        double v72 = 2.56;
        goto LABEL_113;
      case 7:
        double v71 = v96;
LABEL_110:
        double v72 = -2.56;
LABEL_113:
        double v7 = v71 + v72;
        break;
      default:
        break;
    }
    if (v7 - v8 > 3.84)
    {
      long long v73 = (double *)v104;
      if (v57 >= (unint64_t)v104)
      {
        uint64_t v75 = __p;
        unint64_t v76 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - (void)__p) >> 3);
        unint64_t v77 = v76 + 1;
        if (v76 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_1001D7FD4();
        }
        if (0x5555555555555556 * ((v104 - (char *)__p) >> 3) > v77) {
          unint64_t v77 = 0x5555555555555556 * ((v104 - (char *)__p) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v104 - (char *)__p) >> 3) >= 0x555555555555555) {
          unint64_t v78 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v78 = v77;
        }
        if (v78)
        {
          int64x2_t v79 = (char *)sub_1000DA5D8((uint64_t)&v104, v78);
          uint64_t v75 = __p;
          unint64_t v57 = (unint64_t)v103;
        }
        else
        {
          int64x2_t v79 = 0;
        }
        __int16 v80 = &v79[24 * v76];
        *(double *)__int16 v80 = v8;
        *((void *)v80 + 1) = v68;
        *((void *)v80 + 2) = 0x200000000;
        int v81 = (__n128 *)v80;
        if ((__n128 *)v57 != v75)
        {
          do
          {
            __n128 v82 = *(__n128 *)(v57 - 24);
            v81[-1].n128_u64[1] = *(void *)(v57 - 8);
            *(__n128 *)((char *)v81 - 24) = v82;
            int v81 = (__n128 *)((char *)v81 - 24);
            v57 -= 24;
          }
          while ((__n128 *)v57 != v75);
          uint64_t v75 = __p;
        }
        long long v73 = (double *)&v79[24 * v78];
        int64x2_t v74 = (double *)(v80 + 24);
        long long __p = v81;
        __int16 v104 = (char *)v73;
        if (v75)
        {
          operator delete(v75);
          long long v73 = (double *)v104;
        }
      }
      else
      {
        *(double *)unint64_t v57 = v8;
        *(void *)(v57 + 8) = v68;
        int64x2_t v74 = (double *)(v57 + 24);
        *(void *)(v57 + 16) = 0x200000000;
      }
      if (v74 >= v73)
      {
        int v83 = __p;
        unint64_t v84 = 0xAAAAAAAAAAAAAAABLL * (((char *)v74 - (char *)__p) >> 3) + 1;
        if (v84 > 0xAAAAAAAAAAAAAAALL) {
          sub_1001D7FD4();
        }
        unint64_t v85 = 0xAAAAAAAAAAAAAAABLL * (((char *)v73 - (char *)__p) >> 3);
        if (2 * v85 > v84) {
          unint64_t v84 = 2 * v85;
        }
        if (v85 >= 0x555555555555555) {
          unint64_t v86 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v86 = v84;
        }
        if (v86)
        {
          int v87 = (char *)sub_1000DA5D8((uint64_t)&v104, v86);
          int v83 = __p;
        }
        else
        {
          int v87 = 0;
        }
        char v88 = &v87[8 * (((char *)v74 - (char *)__p) >> 3)];
        *(double *)char v88 = v7;
        *((void *)v88 + 1) = v68;
        *((void *)v88 + 2) = &_mh_execute_header;
        char v89 = (__n128 *)v88;
        if (v74 != (double *)v83)
        {
          do
          {
            __n128 v90 = *(__n128 *)(v74 - 3);
            v89[-1].n128_f64[1] = *(v74 - 1);
            *(__n128 *)((char *)v89 - 24) = v90;
            char v89 = (__n128 *)((char *)v89 - 24);
            v74 -= 3;
          }
          while (v74 != (double *)v83);
          int v83 = __p;
        }
        unint64_t v57 = (unint64_t)(v88 + 24);
        long long __p = v89;
        __int16 v104 = &v87[24 * v86];
        if (v83) {
          operator delete(v83);
        }
      }
      else
      {
        *int64x2_t v74 = v7;
        *((void *)v74 + 1) = v68;
        unint64_t v57 = (unint64_t)(v74 + 3);
        *((void *)v74 + 2) = &_mh_execute_header;
      }
      uint64_t v103 = (__n128 *)v57;
    }
  }
  unint64_t v91 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - (void)__p) >> 3));
  if ((__n128 *)v57 == __p) {
    uint64_t v92 = 0;
  }
  else {
    uint64_t v92 = v91;
  }
  sub_1004F6A08((unint64_t)__p, v57, v92, 1);
  char v93 = __p;
  if (__p != v103)
  {
    do
    {
      sub_1004F6504((void *)(a1 + 504), v93);
      char v93 = (__n128 *)((char *)v93 + 24);
    }
    while (v93 != v103);
    char v93 = __p;
  }
  if (v93) {
    operator delete(v93);
  }
  return v96 + 2.56;
}

void sub_1004F6480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1004F6504(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1004F7724(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  double v8 = (__n128 *)(*(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  __n128 result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *double v8 = result;
  ++a1[5];
  return result;
}

uint64_t sub_1004F65B4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void **a3@<X8>)
{
  uint64_t v4 = (void *)result;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v30 = (uint64_t)(a3 + 2);
  uint64_t v6 = result + 504;
  unint64_t v7 = (int64x2_t *)(result + 536);
  while (v4[68])
  {
    unint64_t v8 = v4[67];
    uint64_t v9 = *(void *)(v4[64] + 8 * (v8 / 0xAA));
    unint64_t v10 = v8 % 0xAA;
    double v11 = *(double *)(v9 + 24 * v10);
    if (v11 > *(double *)(a2 + 296)) {
      break;
    }
    double v12 = v11 + -5.0;
    uint64_t v13 = v9 + 24 * v10;
    int v15 = *(_DWORD *)(v13 + 16);
    int v14 = *(_DWORD *)(v13 + 20);
    uint64_t v16 = *(void *)(v13 + 8);
    unint64_t v18 = (double *)a3[1];
    double v17 = (double *)a3[2];
    if (v18 >= v17)
    {
      uint64_t v20 = (double *)*a3;
      uint64_t v21 = ((char *)v18 - (unsigned char *)*a3) >> 5;
      unint64_t v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 59) {
        sub_1001D7FD4();
      }
      uint64_t v23 = (char *)v17 - (char *)v20;
      if (v23 >> 4 > v22) {
        unint64_t v22 = v23 >> 4;
      }
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v24 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v24 = v22;
      }
      if (v24)
      {
        unint64_t v25 = (char *)sub_1001D9EDC(v30, v24);
        uint64_t v20 = (double *)*a3;
        unint64_t v18 = (double *)a3[1];
      }
      else
      {
        unint64_t v25 = 0;
      }
      unint64_t v26 = (double *)&v25[32 * v21];
      *unint64_t v26 = v11;
      v26[1] = v12;
      *((_DWORD *)v26 + 4) = v15;
      *((_DWORD *)v26 + 5) = v14;
      *((void *)v26 + 3) = v16;
      if (v18 == v20)
      {
        unint64_t v29 = &v25[32 * v21];
      }
      else
      {
        unint64_t v27 = &v25[32 * v21];
        do
        {
          long long v28 = *((_OWORD *)v18 - 1);
          unint64_t v29 = v27 - 32;
          *((_OWORD *)v27 - 2) = *((_OWORD *)v18 - 2);
          *((_OWORD *)v27 - 1) = v28;
          v18 -= 4;
          v27 -= 32;
        }
        while (v18 != v20);
      }
      unint64_t v19 = v26 + 4;
      *a3 = v29;
      a3[1] = v26 + 4;
      a3[2] = &v25[32 * v24];
      if (v20) {
        operator delete(v20);
      }
    }
    else
    {
      *unint64_t v18 = v11;
      v18[1] = v12;
      *((_DWORD *)v18 + 4) = v15;
      *((_DWORD *)v18 + 5) = v14;
      unint64_t v19 = v18 + 4;
      *((void *)v18 + 3) = v16;
    }
    a3[1] = v19;
    *unint64_t v7 = vaddq_s64(*v7, (int64x2_t)xmmword_101D0A740);
    __n128 result = sub_10041FD7C(v6, 1);
  }
  return result;
}

void sub_1004F678C(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004F67AC(void *a1)
{
  *a1 = off_1022B7998;
  sub_1000D816C(a1 + 63);

  return sub_1004F59A0((uint64_t)a1);
}

void sub_1004F6804(void *a1)
{
  *a1 = off_1022B7998;
  sub_1000D816C(a1 + 63);
  sub_1004F59A0((uint64_t)a1);

  operator delete();
}

void sub_1004F6870(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_1004F68A0(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_1004F68F4(v2);
    long long v3 = **a1;
    operator delete(v3);
  }
}

void *sub_1004F68F4(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  long long v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    __n128 result = v4;
    void *v3 = 0;
    if (v4) {
      __n128 result = (void *)(*(uint64_t (**)(void *))(*result + 32))(result);
    }
  }
  v1[1] = v2;
  return result;
}

uint64_t sub_1004F6960(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  long long v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      long long v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 12;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 24;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    unint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000D7EB4((uint64_t)a1);
}

void sub_1004F6A08(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                double v41 = *(double *)(a2 - 24);
                unint64_t v40 = a2 - 24;
                if (v41 < *(double *)v10)
                {
                  uint64_t v110 = *(void *)(v10 + 16);
                  long long v101 = *(_OWORD *)v10;
                  long long v42 = *(_OWORD *)v40;
                  *(void *)(v10 + 16) = *(void *)(v40 + 16);
                  *(_OWORD *)unint64_t v10 = v42;
                  *(void *)(v40 + 16) = v110;
                  *(_OWORD *)unint64_t v40 = v101;
                }
                break;
              case 3uLL:
                sub_1004F72C8((long long *)v10, (long long *)(v10 + 24), (long long *)(a2 - 24));
                break;
              case 4uLL:
                sub_1004F7654(v10, v10 + 24, v10 + 48, (unint64_t *)(a2 - 24));
                break;
              case 5uLL:
                unint64_t v43 = (long long *)(v10 + 24);
                unint64_t v44 = (long long *)(v10 + 48);
                uint64_t v45 = (long long *)(v10 + 72);
                sub_1004F7654(v10, v10 + 24, v10 + 48, (unint64_t *)(v10 + 72));
                double v47 = *(double *)(a2 - 24);
                unint64_t v46 = a2 - 24;
                if (v47 < *(double *)(v10 + 72))
                {
                  long long v48 = *v45;
                  uint64_t v49 = *(void *)(v10 + 88);
                  uint64_t v50 = *(void *)(v46 + 16);
                  *uint64_t v45 = *(_OWORD *)v46;
                  *(void *)(v10 + 88) = v50;
                  *(void *)(v46 + 16) = v49;
                  *(_OWORD *)unint64_t v46 = v48;
                  if (*(double *)v45 < *(double *)v44)
                  {
                    uint64_t v51 = *(void *)(v10 + 64);
                    long long v52 = *v44;
                    *unint64_t v44 = *v45;
                    *(void *)(v10 + 64) = *(void *)(v10 + 88);
                    *uint64_t v45 = v52;
                    *(void *)(v10 + 88) = v51;
                    if (*(double *)v44 < *(double *)v43)
                    {
                      uint64_t v53 = *(void *)(v10 + 40);
                      long long v54 = *v43;
                      *unint64_t v43 = *v44;
                      *(void *)(v10 + 40) = *(void *)(v10 + 64);
                      *unint64_t v44 = v54;
                      *(void *)(v10 + 64) = v53;
                      if (*(double *)(v10 + 24) < *(double *)v10)
                      {
                        uint64_t v111 = *(void *)(v10 + 16);
                        long long v102 = *(_OWORD *)v10;
                        *(_OWORD *)unint64_t v10 = *v43;
                        *(void *)(v10 + 16) = *(void *)(v10 + 40);
                        *unint64_t v43 = v102;
                        *(void *)(v10 + 40) = v111;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 575)
          {
            unint64_t v55 = v10 + 24;
            BOOL v57 = v10 == a2 || v55 == a2;
            if (a4)
            {
              if (!v57)
              {
                uint64_t v58 = 0;
                unint64_t v59 = v10;
                do
                {
                  unint64_t v60 = v55;
                  double v61 = *(double *)(v59 + 24);
                  if (v61 < *(double *)v59)
                  {
                    long long v103 = *(_OWORD *)(v59 + 32);
                    uint64_t v62 = v58;
                    while (1)
                    {
                      uint64_t v63 = v10 + v62;
                      *(_OWORD *)(v63 + 24) = *(_OWORD *)(v10 + v62);
                      *(void *)(v63 + 40) = *(void *)(v10 + v62 + 16);
                      if (!v62) {
                        break;
                      }
                      v62 -= 24;
                      if (v61 >= *(double *)(v63 - 24))
                      {
                        uint64_t v64 = v10 + v62 + 24;
                        goto LABEL_80;
                      }
                    }
                    uint64_t v64 = v10;
LABEL_80:
                    *(double *)uint64_t v64 = v61;
                    *(_OWORD *)(v64 + 8) = v103;
                  }
                  unint64_t v55 = v60 + 24;
                  v58 += 24;
                  unint64_t v59 = v60;
                }
                while (v60 + 24 != a2);
              }
            }
            else if (!v57)
            {
              do
              {
                unint64_t v91 = v55;
                double v92 = *(double *)(a1 + 24);
                if (v92 < *(double *)a1)
                {
                  long long v106 = *(_OWORD *)(a1 + 32);
                  unint64_t v93 = v55;
                  do
                  {
                    *(_OWORD *)unint64_t v93 = *(_OWORD *)(v93 - 24);
                    *(void *)(v93 + 16) = *(void *)(v93 - 8);
                    double v94 = *(double *)(v93 - 48);
                    v93 -= 24;
                  }
                  while (v92 < v94);
                  *(double *)unint64_t v93 = v92;
                  *(_OWORD *)(v93 + 8) = v106;
                }
                v55 += 24;
                a1 = v91;
              }
              while (v91 + 24 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v65 = (v12 - 2) >> 1;
              int64_t v66 = v65;
              do
              {
                int64_t v67 = v66;
                if (v65 >= v66)
                {
                  uint64_t v68 = (2 * v66) | 1;
                  unint64_t v69 = v10 + 24 * v68;
                  if (2 * v67 + 2 < (uint64_t)v12 && *(double *)v69 < *(double *)(v69 + 24))
                  {
                    v69 += 24;
                    uint64_t v68 = 2 * v67 + 2;
                  }
                  unint64_t v70 = v10 + 24 * v67;
                  double v71 = *(double *)v70;
                  if (*(double *)v69 >= *(double *)v70)
                  {
                    long long v104 = *(_OWORD *)(v70 + 8);
                    do
                    {
                      unint64_t v72 = v70;
                      unint64_t v70 = v69;
                      long long v73 = *(_OWORD *)v69;
                      *(void *)(v72 + 16) = *(void *)(v69 + 16);
                      *(_OWORD *)unint64_t v72 = v73;
                      if (v65 < v68) {
                        break;
                      }
                      uint64_t v74 = 2 * v68;
                      uint64_t v68 = (2 * v68) | 1;
                      unint64_t v69 = v10 + 24 * v68;
                      uint64_t v75 = v74 + 2;
                      if (v75 < (uint64_t)v12 && *(double *)v69 < *(double *)(v69 + 24))
                      {
                        v69 += 24;
                        uint64_t v68 = v75;
                      }
                    }
                    while (*(double *)v69 >= v71);
                    *(double *)unint64_t v70 = v71;
                    *(_OWORD *)(v70 + 8) = v104;
                  }
                }
                int64_t v66 = v67 - 1;
              }
              while (v67);
              int64_t v76 = v11 / 0x18uLL;
              do
              {
                uint64_t v77 = 0;
                uint64_t v112 = *(void *)(v10 + 16);
                long long v105 = *(_OWORD *)v10;
                unint64_t v78 = v10;
                do
                {
                  unint64_t v79 = v78;
                  v78 += 24 * v77 + 24;
                  uint64_t v80 = 2 * v77;
                  uint64_t v77 = (2 * v77) | 1;
                  int64_t v81 = v80 + 2;
                  if (v81 < v76 && *(double *)v78 < *(double *)(v78 + 24))
                  {
                    v78 += 24;
                    uint64_t v77 = v81;
                  }
                  long long v82 = *(_OWORD *)v78;
                  *(void *)(v79 + 16) = *(void *)(v78 + 16);
                  *(_OWORD *)unint64_t v79 = v82;
                }
                while (v77 <= (uint64_t)((unint64_t)(v76 - 2) >> 1));
                a2 -= 24;
                if (v78 == a2)
                {
                  *(void *)(v78 + 16) = v112;
                  *(_OWORD *)unint64_t v78 = v105;
                }
                else
                {
                  long long v83 = *(_OWORD *)a2;
                  *(void *)(v78 + 16) = *(void *)(a2 + 16);
                  *(_OWORD *)unint64_t v78 = v83;
                  *(void *)(a2 + 16) = v112;
                  *(_OWORD *)a2 = v105;
                  uint64_t v84 = v78 - v10 + 24;
                  if (v84 >= 25)
                  {
                    unint64_t v85 = (v84 / 0x18uLL - 2) >> 1;
                    unint64_t v86 = v10 + 24 * v85;
                    double v87 = *(double *)v78;
                    if (*(double *)v86 < *(double *)v78)
                    {
                      long long v97 = *(_OWORD *)(v78 + 8);
                      do
                      {
                        unint64_t v88 = v78;
                        unint64_t v78 = v86;
                        long long v89 = *(_OWORD *)v86;
                        *(void *)(v88 + 16) = *(void *)(v86 + 16);
                        *(_OWORD *)unint64_t v88 = v89;
                        if (!v85) {
                          break;
                        }
                        unint64_t v85 = (v85 - 1) >> 1;
                        unint64_t v86 = v10 + 24 * v85;
                      }
                      while (*(double *)v86 < v87);
                      *(double *)unint64_t v78 = v87;
                      *(_OWORD *)(v78 + 8) = v97;
                    }
                  }
                }
              }
              while (v76-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 24 * (v12 >> 1);
          if ((unint64_t)v11 >= 0xC01)
          {
            sub_1004F72C8((long long *)a1, (long long *)(a1 + 24 * (v12 >> 1)), (long long *)(a2 - 24));
            uint64_t v15 = 3 * v13;
            uint64_t v16 = (long long *)(a1 + 24 * v13 - 24);
            sub_1004F72C8((long long *)(a1 + 24), v16, (long long *)(a2 - 48));
            double v17 = (long long *)(a1 + 24 + 8 * v15);
            sub_1004F72C8((long long *)(a1 + 48), v17, (long long *)(a2 - 72));
            sub_1004F72C8(v16, (long long *)v14, v17);
            uint64_t v107 = *(void *)(a1 + 16);
            long long v98 = *(_OWORD *)a1;
            uint64_t v18 = *(void *)(v14 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(void *)(a1 + 16) = v18;
            *(void *)(v14 + 16) = v107;
            *(_OWORD *)unint64_t v14 = v98;
          }
          else
          {
            sub_1004F72C8((long long *)(a1 + 24 * (v12 >> 1)), (long long *)a1, (long long *)(a2 - 24));
          }
          --a3;
          double v19 = *(double *)a1;
          if ((a4 & 1) != 0 || *(double *)(a1 - 24) < v19) {
            break;
          }
          long long v96 = *(_OWORD *)(a1 + 8);
          if (v19 >= *(double *)(a2 - 24))
          {
            unint64_t v33 = a1 + 24;
            do
            {
              unint64_t v10 = v33;
              if (v33 >= a2) {
                break;
              }
              v33 += 24;
            }
            while (v19 >= *(double *)v10);
          }
          else
          {
            unint64_t v10 = a1;
            do
            {
              double v32 = *(double *)(v10 + 24);
              v10 += 24;
            }
            while (v19 >= v32);
          }
          unint64_t v34 = a2;
          if (v10 < a2)
          {
            unint64_t v34 = a2;
            do
            {
              double v35 = *(double *)(v34 - 24);
              v34 -= 24;
            }
            while (v19 < v35);
          }
          while (v10 < v34)
          {
            uint64_t v109 = *(void *)(v10 + 16);
            long long v100 = *(_OWORD *)v10;
            long long v36 = *(_OWORD *)v34;
            *(void *)(v10 + 16) = *(void *)(v34 + 16);
            *(_OWORD *)unint64_t v10 = v36;
            *(void *)(v34 + 16) = v109;
            *(_OWORD *)unint64_t v34 = v100;
            do
            {
              double v37 = *(double *)(v10 + 24);
              v10 += 24;
            }
            while (v19 >= v37);
            do
            {
              double v38 = *(double *)(v34 - 24);
              v34 -= 24;
            }
            while (v19 < v38);
          }
          BOOL v4 = v10 - 24 >= a1;
          BOOL v5 = v10 - 24 == a1;
          if (v10 - 24 != a1)
          {
            long long v39 = *(_OWORD *)(v10 - 24);
            *(void *)(a1 + 16) = *(void *)(v10 - 8);
            *(_OWORD *)a1 = v39;
          }
          a4 = 0;
          *(double *)(v10 - 24) = v19;
          *(_OWORD *)(v10 - 16) = v96;
        }
        uint64_t v20 = 0;
        long long v95 = *(_OWORD *)(a1 + 8);
        do
        {
          double v21 = *(double *)(a1 + v20 + 24);
          v20 += 24;
        }
        while (v21 < v19);
        unint64_t v22 = a1 + v20;
        unint64_t v23 = a2;
        if (v20 == 24)
        {
          unint64_t v23 = a2;
          do
          {
            if (v22 >= v23) {
              break;
            }
            double v25 = *(double *)(v23 - 24);
            v23 -= 24;
          }
          while (v25 >= v19);
        }
        else
        {
          do
          {
            double v24 = *(double *)(v23 - 24);
            v23 -= 24;
          }
          while (v24 >= v19);
        }
        unint64_t v10 = a1 + v20;
        if (v22 < v23)
        {
          unint64_t v26 = v23;
          do
          {
            uint64_t v108 = *(void *)(v10 + 16);
            long long v99 = *(_OWORD *)v10;
            long long v27 = *(_OWORD *)v26;
            *(void *)(v10 + 16) = *(void *)(v26 + 16);
            *(_OWORD *)unint64_t v10 = v27;
            *(void *)(v26 + 16) = v108;
            *(_OWORD *)unint64_t v26 = v99;
            do
            {
              double v28 = *(double *)(v10 + 24);
              v10 += 24;
            }
            while (v28 < v19);
            do
            {
              double v29 = *(double *)(v26 - 24);
              v26 -= 24;
            }
            while (v29 >= v19);
          }
          while (v10 < v26);
        }
        if (v10 - 24 != a1)
        {
          long long v30 = *(_OWORD *)(v10 - 24);
          *(void *)(a1 + 16) = *(void *)(v10 - 8);
          *(_OWORD *)a1 = v30;
        }
        *(double *)(v10 - 24) = v19;
        *(_OWORD *)(v10 - 16) = v95;
        if (v22 >= v23) {
          break;
        }
LABEL_30:
        sub_1004F6A08(a1, v10 - 24, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v31 = sub_1004F73B8(a1, v10 - 24);
      if (sub_1004F73B8(v10, a2)) {
        break;
      }
      if (!v31) {
        goto LABEL_30;
      }
    }
    a2 = v10 - 24;
    if (!v31) {
      continue;
    }
    break;
  }
}

long long *sub_1004F72C8(long long *result, long long *a2, long long *a3)
{
  double v3 = *(double *)a2;
  double v4 = *(double *)a3;
  if (*(double *)a2 >= *(double *)result)
  {
    if (v4 < v3)
    {
      uint64_t v8 = *((void *)a2 + 2);
      long long v9 = *a2;
      uint64_t v10 = *((void *)a3 + 2);
      *a2 = *a3;
      *((void *)a2 + 2) = v10;
      *a3 = v9;
      *((void *)a3 + 2) = v8;
      if (*(double *)a2 < *(double *)result)
      {
        uint64_t v11 = *((void *)result + 2);
        long long v12 = *result;
        uint64_t v13 = *((void *)a2 + 2);
        *__n128 result = *a2;
        *((void *)result + 2) = v13;
        *a2 = v12;
        *((void *)a2 + 2) = v11;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      uint64_t v14 = *((void *)result + 2);
      long long v15 = *result;
      uint64_t v16 = *((void *)a2 + 2);
      *__n128 result = *a2;
      *((void *)result + 2) = v16;
      *a2 = v15;
      *((void *)a2 + 2) = v14;
      if (*(double *)a3 >= *(double *)a2) {
        return result;
      }
      uint64_t v5 = *((void *)a2 + 2);
      long long v6 = *a2;
      uint64_t v17 = *((void *)a3 + 2);
      *a2 = *a3;
      *((void *)a2 + 2) = v17;
    }
    else
    {
      uint64_t v5 = *((void *)result + 2);
      long long v6 = *result;
      uint64_t v7 = *((void *)a3 + 2);
      *__n128 result = *a3;
      *((void *)result + 2) = v7;
    }
    *a3 = v6;
    *((void *)a3 + 2) = v5;
  }
  return result;
}

BOOL sub_1004F73B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      long long v6 = (long long *)(a2 - 24);
      if (*(double *)(a2 - 24) < *(double *)a1)
      {
        uint64_t v7 = *(void *)(a1 + 16);
        long long v8 = *(_OWORD *)a1;
        uint64_t v9 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *v6;
        *(void *)(a1 + 16) = v9;
        long long *v6 = v8;
        *(void *)(a2 - 8) = v7;
      }
      return result;
    case 3uLL:
      sub_1004F72C8((long long *)a1, (long long *)(a1 + 24), (long long *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_1004F7654(a1, a1 + 24, a1 + 48, (unint64_t *)(a2 - 24));
      return 1;
    case 5uLL:
      uint64_t v18 = (long long *)(a1 + 24);
      double v19 = (long long *)(a1 + 48);
      uint64_t v20 = (long long *)(a1 + 72);
      sub_1004F7654(a1, a1 + 24, a1 + 48, (unint64_t *)(a1 + 72));
      double v22 = *(double *)(a2 - 24);
      uint64_t v21 = a2 - 24;
      if (v22 < *(double *)(a1 + 72))
      {
        uint64_t v23 = *(void *)(a1 + 88);
        long long v24 = *v20;
        uint64_t v25 = *(void *)(v21 + 16);
        *uint64_t v20 = *(_OWORD *)v21;
        *(void *)(a1 + 88) = v25;
        *(_OWORD *)uint64_t v21 = v24;
        *(void *)(v21 + 16) = v23;
        if (*(double *)v20 < *(double *)v19)
        {
          uint64_t v26 = *(void *)(a1 + 64);
          long long v27 = *v19;
          long long *v19 = *v20;
          *(void *)(a1 + 64) = *(void *)(a1 + 88);
          *uint64_t v20 = v27;
          *(void *)(a1 + 88) = v26;
          if (*(double *)v19 < *(double *)v18)
          {
            uint64_t v28 = *(void *)(a1 + 40);
            long long v29 = *v18;
            *uint64_t v18 = *v19;
            *(void *)(a1 + 40) = *(void *)(a1 + 64);
            long long *v19 = v29;
            *(void *)(a1 + 64) = v28;
            if (*(double *)(a1 + 24) < *(double *)a1)
            {
              uint64_t v30 = *(void *)(a1 + 16);
              long long v31 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v18;
              *(void *)(a1 + 16) = *(void *)(a1 + 40);
              *uint64_t v18 = v31;
              *(void *)(a1 + 40) = v30;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v10 = (double *)(a1 + 48);
      sub_1004F72C8((long long *)a1, (long long *)(a1 + 24), (long long *)(a1 + 48));
      uint64_t v11 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    double v14 = *(double *)v11;
    if (*(double *)v11 < *v10)
    {
      long long v32 = *(_OWORD *)(v11 + 8);
      uint64_t v15 = v12;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        *(_OWORD *)(v16 + 72) = *(_OWORD *)(a1 + v15 + 48);
        *(void *)(v16 + 88) = *(void *)(a1 + v15 + 64);
        if (v15 == -48) {
          break;
        }
        v15 -= 24;
        if (v14 >= *(double *)(v16 + 24))
        {
          uint64_t v17 = a1 + v15 + 72;
          goto LABEL_13;
        }
      }
      uint64_t v17 = a1;
LABEL_13:
      *(double *)uint64_t v17 = v14;
      *(_OWORD *)(v17 + 8) = v32;
      if (++v13 == 8) {
        return v11 + 24 == a2;
      }
    }
    uint64_t v10 = (double *)v11;
    v12 += 24;
    v11 += 24;
    if (v11 == a2) {
      return 1;
    }
  }
}

__n128 sub_1004F7654(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  sub_1004F72C8((long long *)a1, (long long *)a2, (long long *)a3);
  result.n128_u64[0] = *a4;
  if (*(double *)a4 < *(double *)a3)
  {
    unint64_t v9 = *(void *)(a3 + 16);
    __n128 result = *(__n128 *)a3;
    unint64_t v10 = a4[2];
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v10;
    *(__n128 *)a4 = result;
    a4[2] = v9;
    result.n128_u64[0] = *(void *)a3;
    if (*(double *)a3 < *(double *)a2)
    {
      uint64_t v11 = *(void *)(a2 + 16);
      __n128 result = *(__n128 *)a2;
      uint64_t v12 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v12;
      *(__n128 *)a3 = result;
      *(void *)(a3 + 16) = v11;
      result.n128_u64[0] = *(void *)a2;
      if (*(double *)a2 < *(double *)a1)
      {
        uint64_t v13 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v14 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v14;
        *(__n128 *)a2 = result;
        *(void *)(a2 + 16) = v13;
      }
    }
  }
  return result;
}

void sub_1004F7724(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    long long v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    long long v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)long long v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_1000DA54C(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      double v37 = &v34[8 * v36];
      double v38 = (uint64_t *)a1[1];
      long long v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        long long v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    long long v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    long long v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      double v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      long long v48 = (uint64_t *)a1[1];
      long long v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        long long v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        long long v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __n128 v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0xFF0uLL);
  sub_1000DA434(&v54, &v53);
  long long v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  long long v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1004F79F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1004F7A3C(uint64_t a1, double *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247B188, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10247B188))
    {
      LODWORD(v6[0]) = 8;
      sub_1004F7D80(qword_10247B170, v6, 1uLL);
      __cxa_atexit((void (*)(void *))sub_1004F7E04, qword_10247B170, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10247B188);
    }
  }
  __int16 v7 = 0;
  *(_OWORD *)long long v6 = xmmword_101D1E250;
  memset(&v6[2], 0, 135);
  long long v8 = xmmword_101D1E250;
  uint64_t v9 = 0;
  int v10 = 0;
  uint64_t v11 = 0;
  v12[0] = 0;
  *(void *)((char *)v12 + 5) = 0;
  *(void *)((char *)&v12[1] + 6) = 0;
  char v13 = 0;
  memset(&v12[3], 0, 24);
  long long v14 = xmmword_101D1E250;
  uint64_t v15 = 0;
  int v16 = 0;
  unint64_t v17 = 0xFFEFFFFFFFFFFFFFLL;
  int v28 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  int v23 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  memset(v27, 0, sizeof(v27));
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  unint64_t v31 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v32 = 0;
  int v33 = 0;
  uint64_t v39 = 0;
  __int16 v40 = 0;
  int v45 = 0;
  int v38 = 0;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v42 = 0u;
  long long v41 = 0u;
  char v43 = 0;
  memset(v44, 0, sizeof(v44));
  unint64_t v46 = 0xFFEFFFFFFFFFFFFFLL;
  long long v65 = 0u;
  long long v64 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  long long v50 = 0u;
  long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  uint64_t v66 = 0;
  unint64_t v67 = 0xFFEFFFFFFFFFFFFFLL;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  unint64_t v72 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v73 = 0;
  int v74 = 0;
  uint64_t v75 = 0;
  char v76 = 0;
  unint64_t v77 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v79 = 0;
  uint64_t v78 = 0;
  uint64_t v80 = 0x80000000800000;
  uint64_t v82 = 0;
  uint64_t v81 = 0;
  long long v83 = xmmword_101D1E260;
  uint64_t v84 = 0x80000000800000;
  long long v85 = 0u;
  long long v86 = 0u;
  uint64_t v87 = 0;
  unint64_t v88 = 0xFFEFFFFFFFFFFFFFLL;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  long long v92 = 0u;
  long long v93 = 0u;
  long long v94 = 0u;
  int v95 = 0;
  unint64_t v96 = 0xFFEFFFFFFFFFFFFFLL;
  __int16 v97 = 0;
  int v98 = 0;
  unint64_t v99 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v100 = 7;
  unint64_t v101 = 0xFFEFFFFFFFFFFFFFLL;
  char v102 = 0;
  uint64_t v104 = 0;
  uint64_t v103 = 0;
  uint64_t v105 = 0;
  if (!sub_100174478(a2, qword_10247B170, (uint64_t)v6)) {
    return 0;
  }
  if (*(double *)&v52 > 0.0)
  {
    unint64_t v4 = *(void *)(a1 + 8) + 1;
    *(void *)(a1 + 8) = v4;
    if (v4 >= 0x24)
    {
      *(void *)(a1 + 8) = 0;
      return 2;
    }
    return 0;
  }
  uint64_t result = 0;
  *(void *)(a1 + 8) = 0;
  return result;
}

void sub_1004F7D60(_Unwind_Exception *a1)
{
}

void *sub_1004F7D80(void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    sub_10017C6FC(a1, a3);
    long long v6 = (char *)a1[1];
    memmove(v6, a2, 4 * a3);
    a1[1] = &v6[4 * a3];
  }
  return a1;
}

void sub_1004F7DE8(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004F7E04(uint64_t a1)
{
  unint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1004F7E38(uint64_t a1, void *a2)
{
}

uint64_t sub_1004F7E80(id *a1)
{
  *a1 = off_1022B7A40;
  sub_1004F7ED8(a1);

  return sub_10121CF74((uint64_t)a1);
}

void sub_1004F7ED8(id *a1)
{
  a1[28] = 0;
  [a1[29] invalidate];

  a1[29] = 0;
  [a1[30] invalidate];

  a1[30] = 0;
  [a1[31] invalidate];

  a1[31] = 0;
}

void sub_1004F7F4C(id *a1)
{
  sub_1004F7E80(a1);

  operator delete();
}

void sub_1004F7F84(uint64_t a1, void *a2)
{
  if (a2 && [a2 length])
  {
    [a2 getBytes:buf length:40];
    if (!*(_DWORD *)buf)
    {
      long long v6 = v10;
      long long v7 = v11;
      int v8 = v12;
      uuid_copy((unsigned __int8 *)&v7 + 4, (const unsigned __int8 *)&v11 + 4);
      if (*((void *)&v6 + 1))
      {
        if (*(void *)(a1 + 117) != *((void *)&v6 + 1)) {
          sub_10121D0B8(a1, &v6);
        }
        sub_1004F8358(a1);
      }
      else
      {
        sub_1004F81AC(a1);
      }
    }
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022B7B68);
    }
    unint64_t v4 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "MotionStateObserver, Invalid data received.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B7B68);
      }
      LOWORD(v6) = 0;
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLMotionStateObserverCompanion::receiveMotionStateUpdate(NSData *)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
}

id sub_1004F81AC(uint64_t a1)
{
  sub_10121D504(a1);
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022B7B68);
  }
  unint64_t v2 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "MotionStateObserver, Disabling update timer.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022B7B68);
    }
    unint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionStateObserverCompanion::stopSessionAndTimer()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return [*(id *)(a1 + 152) setNextFireDelay:1.79769313e308 interval:1.79769313e308];
}

id sub_1004F8358(uint64_t a1)
{
  [*(id *)(a1 + 152) invalidate];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1004F8558;
  void v5[3] = &unk_1022A3020;
  void v5[4] = a1;
  [*(id *)(a1 + 152) setHandler:v5];
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022B7B68);
  }
  unint64_t v2 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "MotionStateObserver, Starting update timer.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022B7B68);
    }
    unint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionStateObserverCompanion::startSessionTimer()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return [*(id *)(a1 + 152) setNextFireDelay:90.0];
}

void *sub_1004F8558(void *result)
{
  uint64_t v1 = result[4];
  if (*(_DWORD *)(v1 + 117) || *(_DWORD *)(v1 + 121))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022B7B68);
    }
    unint64_t v2 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      uint64_t v5 = 0x4056800000000000;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "MotionStateObserver, Timing out session since we have not heard a response in %f seconds.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B7B68);
      }
      BOOL v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionStateObserverCompanion::startSessionTimer()_block_invoke", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    return sub_1004F81AC(v1);
  }
  return result;
}

void sub_1004F872C(uint64_t a1, _DWORD *a2, unsigned __int8 *a3)
{
  if (*a2 == 6)
  {
    int v3 = *a3;
    if (*(unsigned __int8 *)(a1 + 208) != v3)
    {
      *(unsigned char *)(a1 + 208) = v3;
      sub_1004F8754(a1);
    }
  }
}

void sub_1004F8754(uint64_t a1)
{
  if (+[CMActivityAlarmLocal activityAlarmAvailable])
  {
    sub_1004F7ED8((id *)a1);
    if (*(unsigned char *)(a1 + 208)
      && *(unsigned char *)(a1 + 160)
      && (*(_DWORD *)uint64_t buf = 1, sub_1001072EC(a1, (int *)buf, 1)))
    {
      double Current = CFAbsoluteTimeGetCurrent();
      long long v12 = *(_OWORD *)(a1 + 162);
      int v13 = *(_DWORD *)(a1 + 178);
      BOOL v3 = Current < *(double *)&v12;
      double v4 = vabdd_f64(Current, *(double *)&v12);
      if (v3 || v4 > 320.0)
      {
        long long v12 = 0x10000000000000uLL;
        int v13 = 0;
      }
      sub_10121D75C(a1, &v12);
      int v14 = 1;
      *(_OWORD *)uint64_t buf = v12;
      *(_DWORD *)&uint8_t buf[16] = v13;
      (*(void (**)(uint64_t, int *, unsigned char *, void, uint64_t, void))(*(void *)a1 + 152))(a1, &v14, buf, 0, 0xFFFFFFFFLL, 0);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B7B68);
      }
      long long v6 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 134218496;
        *(void *)&uint8_t buf[4] = v12;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = DWORD2(v12);
        *(_WORD *)&unsigned char buf[18] = 1024;
        int v21 = HIDWORD(v12);
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "MotionStateObserver,VehicularTracking,MotionState,startTime,%.3f,activityType,%d,vehicularConfidence,%d", buf, 0x18u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022B7B68);
        }
        int v14 = 134218496;
        uint64_t v15 = v12;
        __int16 v16 = 1024;
        int v17 = DWORD2(v12);
        __int16 v18 = 1024;
        int v19 = HIDWORD(v12);
        long long v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionStateObserverCompanion::trackVehicularConfidenceStateMachine()", "%s\n", v11);
        if (v11 != buf) {
          free(v11);
        }
      }
      if ((HIDWORD(v12) - 2) < 3)
      {
        float v7 = *(double *)(a1 + 216) + 300.0;
        *(void *)(a1 + 240) = sub_1004F8C18(a1, 4, v7);
LABEL_27:
        *(void *)(a1 + 248) = sub_1004F8C18(a1, 5, 10.0);
        return;
      }
      if (HIDWORD(v12) == 1)
      {
        float v9 = *(double *)(a1 + 216) + 300.0;
        *(void *)(a1 + 240) = sub_1004F8C18(a1, 4, v9);
        *(void *)(a1 + 232) = sub_1004F8C18(a1, 16, 10.0);
        goto LABEL_27;
      }
      if (!HIDWORD(v12)) {
        *(void *)(a1 + 224) = sub_1004F8C18(a1, 4, 10.0);
      }
    }
    else
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022B7B68);
      }
      int v8 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "MotionStateObserver,VehicularTracking,STOP", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022B7B68);
        }
        LOWORD(v14) = 0;
        long long v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionStateObserverCompanion::trackVehicularConfidenceStateMachine()", "%s\n", v10);
        if (v10 != buf) {
          free(v10);
        }
      }
    }
  }
}

void sub_1004F8BF4(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  if (!*a2)
  {
    int v3 = *(unsigned __int8 *)(a3 + 3);
    if (*(unsigned __int8 *)(a1 + 160) != v3)
    {
      *(unsigned char *)(a1 + 160) = v3;
      sub_1004F8754(a1);
    }
  }
}

CMActivityAlarmLocal *sub_1004F8C18(uint64_t a1, uint64_t a2, float a3)
{
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022B7B68);
  }
  long long v6 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109376;
    int v18 = a2;
    __int16 v19 = 2048;
    double v20 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "MotionStateObserver,VehicularTracking,setActivityAlarm,%d,duration,%0.3f", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022B7B68);
    }
    double v7 = a3;
    int v13 = 67109376;
    int v14 = a2;
    __int16 v15 = 2048;
    double v16 = v7;
    long long v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CMActivityAlarm *CLMotionStateObserverCompanion::createActivityAlarm(const CMActivityAlarmTrigger, const float)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  else
  {
    double v7 = a3;
  }
  int v8 = [CMActivityAlarmLocal alloc];
  id v9 = [*(id *)(a1 + 40) queue];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  id v12[2] = sub_1004F8E70;
  uint64_t v12[3] = &unk_1022B7B30;
  v12[4] = a1;
  return [(CMActivityAlarmLocal *)v8 initWithTrigger:a2 duration:v9 onQueue:v12 withHandler:v7];
}

id sub_1004F8E70(uint64_t a1, void *a2)
{
  return sub_1004F8E78(*(void *)(a1 + 32), a2);
}

id sub_1004F8E78(uint64_t a1, void *a2)
{
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022B7B68);
  }
  double v4 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    unsigned int v9 = [a2 trigger];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "MotionStateObserver,VehicularTracking,onActivityAlarm,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022B7B68);
    }
    [a2 trigger];
    double v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionStateObserverCompanion::onActivityAlarm(CMActivityAlarm *)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  id result = [a2 trigger];
  if (result == 16)
  {
LABEL_9:
    [a2 activityDuration];
    if (*(double *)(a1 + 216) >= v6) {
      double v6 = *(double *)(a1 + 216);
    }
    *(double *)(a1 + 216) = v6;
    return (id)sub_1004F8754(a1);
  }
  if (result != 5)
  {
    if (result != 4) {
      return result;
    }
    goto LABEL_9;
  }
  *(void *)(a1 + 216) = 0;
  return (id)sub_1004F8754(a1);
}

void sub_1004F9084(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        unsigned int v9 = (uint64_t *)v4;
      }
      else {
        unsigned int v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)uint64_t buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022B7B88);
      }
      long long v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        long long v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          long long v11 = (void *)*v11;
        }
        *(_DWORD *)uint64_t buf = 136446466;
        __int16 v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022B7B88);
        }
        long long v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          long long v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        __int16 v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        int v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData>::removeClient(int) [Notification_T = CLMotionStateObserver_Type::Notification, NotificationData_T = CLMotionStateObserver_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_1004F9314(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_1004F93C8(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_1004F9410(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_1004F9458(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_1004F94A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_10241C028);
}

uint64_t sub_1004F94CC(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        int v13 = (uint64_t *)v7;
      }
      else {
        int v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)long long v42 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          long long v24 = (uint64_t *)v18;
        }
        else {
          long long v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          uint64_t v29 = (uint64_t *)v25;
        }
        else {
          uint64_t v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v40 = v26;
        uint64_t v35 = *(void *)(v26 + 56);
        char v36 = *a4;
        *(void *)uint64_t buf = &v41;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v36;
        int v46 = 0;
        memset(buf, 0, sizeof(buf));
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, uint8_t *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_1004FB90C();
        }
        if (v35) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v40 = a1 + 64;
        char v30 = byte_10241C029;
        int v39 = v17;
        *(void *)uint64_t buf = &v39;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v30;
        int v39 = *a3;
        *(void *)uint64_t buf = &v39;
        unint64_t v31 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        uint64_t v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        char v33 = *a4;
        int v39 = *a3;
        *(void *)uint64_t buf = &v39;
        long long v34 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)uint64_t buf = &v41;
        *((unsigned char *)sub_1000EB1B8(v34 + 5, &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v33;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        *(_DWORD *)uint64_t buf = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022B7B88);
  }
  int v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    __int16 v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      __int16 v15 = (void *)*v15;
    }
    *(_DWORD *)uint64_t buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B7B88);
    }
    long long v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v37 = (void *)*v37;
    }
    *(_DWORD *)long long v42 = 136446466;
    *(void *)&v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = a2;
    int v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLMotionStateObserver_Type::Notification, NotificationData_T = CLMotionStateObserver_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v38);
    if (v38 != (char *)buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

BOOL sub_1004F9978(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B7B88);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)uint64_t buf = 136446466;
      long long v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022B7B88);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLMotionStateObserver_Type::Notification, NotificationData_T = CLMotionStateObserver_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_1004F9BFC(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        int v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            int v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022B7B88);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)uint64_t buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                uint64_t v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022B7B88);
                }
                uint64_t v29 = a1 + 8;
                if (a1[31] < 0) {
                  uint64_t v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  char v30 = buf;
                }
                else {
                  char v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                int v38 = v29;
                __int16 v39 = 2082;
                uint64_t v40 = v30;
                unint64_t v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLMotionStateObserver_Type::Notification, NotificationData_T = CLMotionStateObserver_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_1004F9FD0(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      BOOL v10 = (uint64_t *)v4;
    }
    else {
      BOOL v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v7 == v3) {
    return 0;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0;
  }
  int v11 = *(long long **)(v7 + 64);
  if (!v11) {
    return 0;
  }
  long long v12 = *v11;
  long long v13 = v11[1];
  *(_DWORD *)(a3 + 32) = *((_DWORD *)v11 + 8);
  *(_OWORD *)a3 = v12;
  *(_OWORD *)(a3 + 16) = v13;
  return 1;
}

uint64_t sub_1004FA038(uint64_t a1, int *a2, uint64_t a3)
{
  int v6 = (char *)operator new(0x40uLL);
  long long v7 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)a3;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = off_1022B7BB8;
  *(_OWORD *)(v6 + 40) = v7;
  *((_DWORD *)v6 + 14) = *(_DWORD *)(a3 + 32);
  int v11 = *a2;
  long long v12 = &v11;
  int v8 = sub_10044715C((uint64_t **)(a1 + 56), &v11, (uint64_t)&unk_101D0B290, &v12);
  BOOL v9 = (std::__shared_weak_count *)v8[9];
  v8[8] = (uint64_t *)(v6 + 24);
  v8[9] = (uint64_t *)v6;
  if (v9) {
    sub_1000DB0A0(v9);
  }
  return 1;
}

void sub_1004FA0F8(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004FA10C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6 = 0;
  memset(v5, 0, sizeof(v5));
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_1004FA194(uint64_t a1, unsigned int *a2, uint64_t a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022B7B88);
  }
  BOOL v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    BOOL v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      BOOL v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)uint64_t buf = 68289794;
    int v23 = 0;
    __int16 v24 = 2082;
    *(void *)__int16 v25 = "";
    *(_WORD *)&v25[8] = 2082;
    *(void *)&v25[10] = "activity";
    __int16 v26 = 2082;
    int v27 = v10;
    __int16 v28 = 2050;
    uint64_t v29 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    char v30 = v31;
    memset(v31, 0, sizeof(v31));
    int v32 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v30);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v29) {
      sub_1000DB0A0(v29);
    }
    sub_1000F5BB0((uint64_t)&v24, *(void **)&v25[6]);
    if (v32) {
      sub_1000DB0A0(v32);
    }
    sub_1000F5BB0((uint64_t)&v30, v31[0]);
  }
  if (a4)
  {
    BOOL v18 = (char *)operator new(0x40uLL);
    long long v19 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(v18 + 24) = *(_OWORD *)a3;
    *((void *)v18 + 1) = 0;
    *((void *)v18 + 2) = 0;
    *(void *)BOOL v18 = off_1022B7BB8;
    *(_OWORD *)(v18 + 40) = v19;
    *((_DWORD *)v18 + 14) = *(_DWORD *)(a3 + 32);
    uint64_t v20 = (std::__shared_weak_count *)v14[9];
    v14[8] = (uint64_t *)(v18 + 24);
    v14[9] = (uint64_t *)v18;
    if (!v20) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t v20 = (std::__shared_weak_count *)v14[9];
  v14[8] = 0;
  v14[9] = 0;
  if (v20) {
LABEL_27:
  }
    sub_1000DB0A0(v20);
LABEL_28:
  if (v14[7]) {
    sub_1004FADAC();
  }
  os_activity_scope_leave(&state);
}

void sub_1004FA784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_1004FA7D0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B7B88);
    }
    unint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      int v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022B7B88);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData>::listClients() [Notification_T = CLMotionStateObserver_Type::Notification, NotificationData_T = CLMotionStateObserver_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B7B88);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)uint64_t buf = 136315394;
      int v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022B7B88);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData>::listClients() [Notification_T = CLMotionStateObserver_Type::Notification, NotificationData_T = CLMotionStateObserver_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    int v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        BOOL v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_1022B7B88);
            }
            BOOL v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)uint64_t buf = 136315650;
              int v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022B7B88);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData>::listClients() [Notification_T = CLMotionStateObserver_Type::Notification, NotificationData_T = CLMotionStateObserver_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                BOOL v9 = v15;
              }
              while (!v16);
            }
            BOOL v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        BOOL v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            long long v19 = v18;
            BOOL v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            long long v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            int v8 = v19;
          }
          while (!v16);
        }
        int v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_1004FAD7C(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1004FADAC()
{
}

void sub_1004FAE60(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      BOOL v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          int v12 = (uint64_t *)v4;
        }
        else {
          int v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          BOOL v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        long long v49 = v9;
        id v13 = sub_1004FB414(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            long long v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                long long v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              long long v48 = v19;
              sub_1004FB250(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              uint64_t v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  uint64_t v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              long long v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                uint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    uint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      uint64_t v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              long long v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022B7B88);
              }
              __int16 v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)uint64_t buf = 136446466;
                long long v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022B7B88);
                }
                int v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  int v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                long long v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                long long v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLMotionStateObserver_Type::Notification, NotificationData_T = CLMotionStateObserver_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_1004FB250(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_1004FB414(a4);
    uint64_t v10 = *(void *)a3 + 80;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40);
    uint64_t v14 = (int *)(*(void *)a2 + 32);
    int v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    BOOL result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4, v13];
    }
  }
  return result;
}

void sub_1004FB348(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1004FB378(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B7BB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004FB398(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B7BB8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1004FB3F4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

id sub_1004FB414(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    return sub_1004FB4B0(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      return sub_1004FB66C(a1);
    }
    else
    {
      return 0;
    }
  }
}

id sub_1004FB4B0(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_1004FB854((uint64_t)&v8, a1);
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_1022B7BF8);
    }
    uint64_t v3 = qword_102418F98;
    if (!os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)uint64_t buf = 134218498;
    id v10 = v2;
    __int16 v11 = 2048;
    uint64_t v12 = 0;
    __int16 v13 = 2080;
    unint64_t v14 = 0x8000000101D2221ALL & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v4 = v3;
    os_log_type_t v5 = OS_LOG_TYPE_ERROR;
  }
  else
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_1022B7BF8);
    }
    uint64_t v7 = qword_102418F98;
    if (!os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT)) {
      return 0;
    }
    *(_DWORD *)uint64_t buf = 134218498;
    id v10 = v2;
    __int16 v11 = 2048;
    uint64_t v12 = 0;
    __int16 v13 = 2080;
    unint64_t v14 = 0x8000000101D2221ALL & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v4 = v7;
    os_log_type_t v5 = OS_LOG_TYPE_FAULT;
  }
  _os_log_impl((void *)&_mh_execute_header, v4, v5, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  return 0;
}

id sub_1004FB66C(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022B7BF8);
      }
      uint64_t v3 = qword_102418F98;
      if (!os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      int v8 = 134218498;
      id v9 = v2;
      __int16 v10 = 2048;
      uint64_t v11 = 0;
      __int16 v12 = 2080;
      unint64_t v13 = 0x8000000101D2221ALL & 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v4 = v3;
      os_log_type_t v5 = OS_LOG_TYPE_ERROR;
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022B7BF8);
      }
      uint64_t v7 = qword_102418F98;
      if (!os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT)) {
        return 0;
      }
      int v8 = 134218498;
      id v9 = v2;
      __int16 v10 = 2048;
      uint64_t v11 = 0;
      __int16 v12 = 2080;
      unint64_t v13 = 0x8000000101D2221ALL & 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v4 = v7;
      os_log_type_t v5 = OS_LOG_TYPE_FAULT;
    }
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", (uint8_t *)&v8, 0x20u);
    return 0;
  }

  return [a1 cppObjectPtr];
}

id sub_1004FB854(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_1023925B8))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)36) {
      sub_101A63230();
    }
    [a2 setCppObjectPtr:[objc_msgSend(objc_msgSend(a2, "serialized"), "bytes") bytes]];
  }

  return [a2 cppObjectPtr];
}

void sub_1004FB8DC(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_1004FB90C()
{
}

uint64_t sub_1004FB9C0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

uint64_t sub_1004FBC74(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v6 = 0;
        int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v11 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = 0;
        while (1)
        {
          uint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v17 = v16 + 1;
          if (v16 == -1 || v17 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v18 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17;
          v15 |= (unint64_t)(v18 & 0x7F) << v13;
          if ((v18 & 0x80) == 0) {
            goto LABEL_41;
          }
          v13 += 7;
          BOOL v10 = v14++ >= 9;
          if (v10)
          {
            LODWORD(v15) = 0;
            goto LABEL_43;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_41:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_43:
        uint64_t v28 = 16;
        goto LABEL_48;
      case 2u:
        *(unsigned char *)(a1 + 24) |= 2u;
        unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v20 <= 0xFFFFFFFFFFFFFFFBLL && v20 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          int v21 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 4;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          int v21 = 0;
        }
        uint64_t v29 = 12;
        goto LABEL_53;
      case 3u:
        *(unsigned char *)(a1 + 24) |= 4u;
        unint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v22 <= 0xFFFFFFFFFFFFFFFBLL && v22 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          int v21 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 4;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          int v21 = 0;
        }
        uint64_t v29 = 20;
LABEL_53:
        *(_DWORD *)(a1 + v29) = v21;
        continue;
      case 4u:
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v15 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      uint64_t v25 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v27 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26;
      v15 |= (unint64_t)(v27 & 0x7F) << v23;
      if ((v27 & 0x80) == 0) {
        goto LABEL_45;
      }
      v23 += 7;
      BOOL v10 = v24++ >= 9;
      if (v10)
      {
        LODWORD(v15) = 0;
        goto LABEL_47;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_45:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v15) = 0;
    }
LABEL_47:
    uint64_t v28 = 8;
LABEL_48:
    *(_DWORD *)(a1 + v28) = v15;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_1004FCB3C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    uint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        LODWORD(v6) = 0;
        int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v6) = 0;
    }
LABEL_13:
    if (v11 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((unsigned __int16)(v6 >> 3))
    {
      case 1u:
        char v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = 0;
        *(unsigned char *)(a1 + 68) |= 0x40u;
        while (1)
        {
          uint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v17 = v16 + 1;
          if (v16 == -1 || v17 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v18 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17;
          v15 |= (unint64_t)(v18 & 0x7F) << v13;
          if ((v18 & 0x80) == 0) {
            goto LABEL_72;
          }
          v13 += 7;
          BOOL v10 = v14++ >= 9;
          if (v10)
          {
            LODWORD(v15) = 0;
            goto LABEL_74;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_72:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_74:
        uint64_t v50 = 64;
        goto LABEL_91;
      case 2u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v15 = 0;
        *(unsigned char *)(a1 + 68) |= 0x10u;
        while (2)
        {
          uint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v23 = v22 + 1;
          if (v22 == -1 || v23 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23;
            v15 |= (unint64_t)(v24 & 0x7F) << v20;
            if (v24 < 0)
            {
              v20 += 7;
              BOOL v10 = v21++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_78;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_78:
        uint64_t v50 = 56;
        goto LABEL_91;
      case 3u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v15 = 0;
        *(unsigned char *)(a1 + 68) |= 0x20u;
        while (2)
        {
          uint64_t v27 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v28 = v27 + 1;
          if (v27 == -1 || v28 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v29 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28;
            v15 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              BOOL v10 = v26++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_82;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_82:
        uint64_t v50 = 60;
        goto LABEL_91;
      case 4u:
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v32 = 0;
        *(unsigned char *)(a1 + 68) |= 4u;
        while (2)
        {
          uint64_t v33 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v34 = v33 + 1;
          if (v33 == -1 || v34 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v35 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34;
            v32 |= (unint64_t)(v35 & 0x7F) << v30;
            if (v35 < 0)
            {
              v30 += 7;
              BOOL v10 = v31++ >= 9;
              if (v10)
              {
                uint64_t v32 = 0;
                goto LABEL_86;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v32 = 0;
        }
LABEL_86:
        uint64_t v51 = 24;
        goto LABEL_96;
      case 5u:
        *(unsigned char *)(a1 + 68) |= 1u;
        unint64_t v36 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v36 <= 0xFFFFFFFFFFFFFFF7 && v36 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v37 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v36);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v36 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v37 = 0;
        }
        *(void *)(a1 + 8) = v37;
        goto LABEL_99;
      case 6u:
        char v38 = 0;
        unsigned int v39 = 0;
        uint64_t v15 = 0;
        *(unsigned char *)(a1 + 68) |= 8u;
        while (2)
        {
          uint64_t v40 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v41 = v40 + 1;
          if (v40 == -1 || v41 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v42 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v40);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v41;
            v15 |= (unint64_t)(v42 & 0x7F) << v38;
            if (v42 < 0)
            {
              v38 += 7;
              BOOL v10 = v39++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_90;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_90:
        uint64_t v50 = 40;
LABEL_91:
        *(_DWORD *)(a1 + v50) = v15;
        goto LABEL_99;
      case 7u:
        __int16 v43 = objc_alloc_init(TRANSITPbLocationFingerprintsV1);

        *(void *)(a1 + 32) = v43;
        if PBReaderPlaceMark() && (sub_10121B980(v43, a2)) {
          goto LABEL_70;
        }
        return 0;
      case 8u:
        char v44 = 0;
        unsigned int v45 = 0;
        uint64_t v32 = 0;
        *(unsigned char *)(a1 + 68) |= 2u;
        while (2)
        {
          uint64_t v46 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v47 = v46 + 1;
          if (v46 == -1 || v47 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v48 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v46);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v47;
            v32 |= (unint64_t)(v48 & 0x7F) << v44;
            if (v48 < 0)
            {
              v44 += 7;
              BOOL v10 = v45++ >= 9;
              if (v10)
              {
                uint64_t v32 = 0;
                goto LABEL_95;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v32 = 0;
        }
LABEL_95:
        uint64_t v51 = 16;
LABEL_96:
        *(void *)(a1 + v51) = v32;
        goto LABEL_99;
      case 9u:
        long long v49 = objc_alloc_init(TRANSITPbLocationFingerprints);

        *(void *)(a1 + 48) = v49;
        if PBReaderPlaceMark() && (sub_1008164BC(v49, a2))
        {
LABEL_70:
          PBReaderRecallMark();
LABEL_99:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }
        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_99;
    }
  }
}

void sub_1004FE04C(uint64_t a1, int a2)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 25) = 1;
  id v2 = *(void **)(a1 + 32);
  if ((v2[7] != 0) == a2)
  {
    [v2 _doSigningWhenReady];
  }
  else
  {
    uint64_t v3 = (CLMescalSigner *)sub_101A637E0();
    [(CLMescalSigner *)v3 _doSigningWhenReady];
  }
}

uint64_t sub_1004FE7A4(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B7CE0);
    }
    uint64_t v3 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning MESCAL: churn failure: signing disabled", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B7CE0);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLMescalSigner _initializeMescalWithCompletion:]_block_invoke", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 56);
    if (v4)
    {
      sub_1003514F0(v4);
      *(void *)(*(void *)(a1 + 32) + 56) = 0;
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}